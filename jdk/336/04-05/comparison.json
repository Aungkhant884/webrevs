{"files":[{"patch":"@@ -0,0 +1,885 @@\n+Skip to content\n+Search or jump to…\n+\n+Pull requests\n+Issues\n+Marketplace\n+Explore\n+ \n+@tstuefe \n+openjdk\n+\/\n+jdk\n+188\n+5.5k\n+1.3k\n+Code\n+Pull requests\n+107\n+Security\n+Insights\n+jdk\/.github\/workflows\/submit.yml\n+\n+Robin Westberg 8253424: Add support for running pre-submit testing using GitHub Actions\n+…\n+Latest commit 840aa2b 2 days ago\n+ History\n+ 0 contributors\n+861 lines (750 sloc)  37.1 KB\n+ \n+name: Pre-submit tests\n+\n+on:\n+  push:\n+    branches-ignore:\n+      - master\n+  workflow_dispatch:\n+    inputs:\n+      platforms:\n+        description: \"Platform(s) to execute on\"\n+        required: true\n+        default: \"Linux x64, Windows x64, macOS x64\"\n+\n+jobs:\n+  prerequisites:\n+    name: Prerequisites\n+    runs-on: \"ubuntu-latest\"\n+    outputs:\n+      should_run: ${{ steps.check_submit.outputs.should_run }}\n+      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}\n+      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}\n+      platform_macos_x64: ${{ steps.check_platforms.outputs.platform_macos_x64 }}\n+      dependencies: ${{ steps.check_deps.outputs.dependencies }}\n+\n+    steps:\n+      - name: Check if submit tests should actually run depending on secrets and manual triggering\n+        id: check_submit\n+        run: echo \"::set-output name=should_run::${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs\/heads\/submit\/')) }}\"\n+\n+      - name: Check which platforms should be included\n+        id: check_platforms\n+        run: |\n+          echo \"::set-output name=platform_linux_x64::${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}\"\n+          echo \"::set-output name=platform_windows_x64::${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}\"\n+          echo \"::set-output name=platform_macos_x64::${{ contains(github.event.inputs.platforms, 'macos x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos x64'))) }}\"\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Determine versions and locations to be used for dependencies\n+        id: check_deps\n+        run: \"echo ::set-output name=dependencies::`cat make\/autoconf\/version-numbers make\/conf\/test-dependencies | sed -e '1i {' -e 's\/#.*\/\/g' -e 's\/\\\"\/\/g' -e 's\/\\\\(.*\\\\)=\\\\(.*\\\\)\/\\\"\\\\1\\\": \\\"\\\\2\\\",\/g' -e '$s\/,\\\\s\\\\{0,\\\\}$\/\\\\}\/'`\"\n+        working-directory: jdk\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Print extracted dependencies to the log\n+        run: \"echo '${{ steps.check_deps.outputs.dependencies }}'\"\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Determine the jtreg ref to checkout\n+        run: \"echo ::set-env name=JTREG_REF::jtreg${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }}\"\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Check if a jtreg image is present in the cache\n+        id: jtreg\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/jtreg\/\n+          key: jtreg-${{ env.JTREG_REF }}-v1\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+      - name: Checkout the jtreg source\n+        uses: actions\/checkout@v2\n+        with:\n+          repository: \"openjdk\/jtreg\"\n+          ref: ${{ env.JTREG_REF }}\n+          path: jtreg\n+        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n+\n+      - name: Build jtreg\n+        run: sh make\/build-all.sh ${JAVA_HOME}\n+        working-directory: jtreg\n+        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n+\n+      - name: Move jtreg image to destination folder\n+        run: mv build\/images\/jtreg ~\/\n+        working-directory: jtreg\n+        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n+\n+      - name: Store jtreg for use by later steps\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n+  linux_x64_build:\n+    name: Linux x64\n+    runs-on: \"ubuntu-latest\"\n+    needs: prerequisites\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x64 != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+          - build hotspot no-pch\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+          - flavor: build hotspot no-pch\n+            flags: --disable-precompiled-headers\n+            build-target: hotspot\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Checkout gtest sources\n+        uses: actions\/checkout@v2\n+        with:\n+          repository: \"google\/googletest\"\n+          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n+          path: gtest\n+\n+      - name: Install dependencies\n+        run: sudo apt-get install libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n+\n+      - name: Configure\n+        run: >\n+          bash configure\n+          --with-conf-name=linux-x64\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-jtreg=${HOME}\/jtreg\n+          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+          --enable-jtreg-failure-handler\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-x64 ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+      - name: Persist test bundles\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: |\n+            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz\n+            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\n+        if: matrix.build-target == false\n+\n+  linux_x64_test:\n+    name: Linux x64\n+    runs-on: \"ubuntu-latest\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_build\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        test:\n+          - jdk\/tier1 part 1\n+          - jdk\/tier1 part 2\n+          - jdk\/tier1 part 3\n+          - langtools\/tier1\n+          - hs\/tier1 common\n+          - hs\/tier1 compiler\n+          - hs\/tier1 gc\n+          - hs\/tier1 runtime\n+          - hs\/tier1 serviceability\n+        include:\n+          - test: jdk\/tier1 part 1\n+            suites: test\/jdk\/:tier1_part1\n+          - test: jdk\/tier1 part 2\n+            suites: test\/jdk\/:tier1_part2\n+          - test: jdk\/tier1 part 3\n+            suites: test\/jdk\/:tier1_part3\n+          - test: langtools\/tier1\n+            suites: test\/langtools\/:tier1\n+          - test: hs\/tier1 common\n+            suites: test\/hotspot\/jtreg\/:tier1_common\n+            artifact: -debug\n+          - test: hs\/tier1 compiler\n+            suites: test\/hotspot\/jtreg\/:tier1_compiler\n+            artifact: -debug\n+          - test: hs\/tier1 gc\n+            suites: test\/hotspot\/jtreg\/:tier1_gc\n+            artifact: -debug\n+          - test: hs\/tier1 runtime\n+            suites: test\/hotspot\/jtreg\/:tier1_runtime\n+            artifact: -debug\n+          - test: hs\/tier1 serviceability\n+            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Restore build artifacts\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: ~\/jdk-linux-x64${{ matrix.artifact }}\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}\"\n+      - name: Unpack tests\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}\"\n+      - name: Find root of jdk image dir\n+        run: |\n+          imageroot=`find ${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }} -name release -type f`\n+          echo \"::set-env name=imageroot::`dirname ${imageroot}`\"\n+      - name: Run tests\n+        run: >\n+          JDK_IMAGE_DIR=${{ env.imageroot }}\n+          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}\n+          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          JT_HOME=${HOME}\/jtreg\n+          make test-prebuilt\n+          CONF_NAME=run-test-prebuilt\n+          LOG_CMDLINES=true\n+          JTREG_VERBOSE=fail,error,time\n+          TEST=\"${{ matrix.suites }}\"\n+          TEST_OPTS_JAVA_OPTIONS=\n+          JTREG_KEYWORDS=\"!headful\"\n+      - name: Create suitable test log artifact name\n+        if: always()\n+        run: echo \"::set-env name=logsuffix::`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\"\n+\n+      - name: Persist test logs\n+        if: always()\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: linux-x64${{ matrix.artifact }}_testlogs_${{ env.logsuffix }}\n+          path: build\/*\/test-results\n+        continue-on-error: true\n+\n+  windows_x64_build:\n+    name: Windows x64\n+    runs-on: \"windows-latest\"\n+    needs: prerequisites\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo (\"::set-env name=bundleid::$env:GITHUB_ACTOR\" + \"_\" + (-join \"$env:GITHUB_SHA\"[0..7]))\n+\n+      - name: Restore cygwin packages from cache\n+        id: cygwin\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/cygwin\/packages\n+          key: cygwin-packages-${{ runner.os }}-v1\n+\n+      - name: Install cygwin\n+        run: |\n+          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n+          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n+          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n+          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n+          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n+          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n+          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n+          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Checkout gtest sources\n+        uses: actions\/checkout@v2\n+        with:\n+          repository: \"google\/googletest\"\n+          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n+          path: gtest\n+\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Configure\n+        run: >\n+          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n+          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n+          & bash configure\n+          --with-conf-name=windows-x64\n+          ${{ matrix.flags }}\n+          --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\"\n+          --with-version-build=0\n+          --with-boot-jdk=\"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n+          --with-jtreg=\"$HOME\/jtreg\"\n+          --with-gtest=\"$env:GITHUB_WORKSPACE\/gtest\"\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --enable-jtreg-failure-handler\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: |\n+          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n+          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n+          & make CONF_NAME=windows-x64 ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+      - name: Persist test bundles\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: |\n+            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip\n+            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\n+            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\n+        if: matrix.build-target == false\n+\n+  windows_x64_test:\n+    name: Windows x64\n+    runs-on: \"windows-latest\"\n+    needs:\n+      - prerequisites\n+      - windows_x64_build\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        test:\n+          - jdk\/tier1 part 1\n+          - jdk\/tier1 part 2\n+          - jdk\/tier1 part 3\n+          - langtools\/tier1\n+          - hs\/tier1 common\n+          - hs\/tier1 compiler\n+          - hs\/tier1 gc\n+          - hs\/tier1 runtime\n+          - hs\/tier1 serviceability\n+        include:\n+          - test: jdk\/tier1 part 1\n+            suites: test\/jdk\/:tier1_part1\n+          - test: jdk\/tier1 part 2\n+            suites: test\/jdk\/:tier1_part2\n+          - test: jdk\/tier1 part 3\n+            suites: test\/jdk\/:tier1_part3\n+          - test: langtools\/tier1\n+            suites: test\/langtools\/:tier1\n+          - test: hs\/tier1 common\n+            suites: test\/hotspot\/jtreg\/:tier1_common\n+            artifact: -debug\n+          - test: hs\/tier1 compiler\n+            suites: test\/hotspot\/jtreg\/:tier1_compiler\n+            artifact: -debug\n+          - test: hs\/tier1 gc\n+            suites: test\/hotspot\/jtreg\/:tier1_gc\n+            artifact: -debug\n+          - test: hs\/tier1 runtime\n+            suites: test\/hotspot\/jtreg\/:tier1_runtime\n+            artifact: -debug\n+          - test: hs\/tier1 serviceability\n+            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo (\"::set-env name=bundleid::$env:GITHUB_ACTOR\" + \"_\" + (-join \"$env:GITHUB_SHA\"[0..7]))\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n+          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n+          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n+          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n+          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n+          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore cygwin packages from cache\n+        id: cygwin\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/cygwin\/packages\n+          key: cygwin-packages-${{ runner.os }}-v1\n+\n+      - name: Install cygwin\n+        run: |\n+          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n+          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n+          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Restore build artifacts\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: ~\/jdk-windows-x64${{ matrix.artifact }}\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}\"\n+      - name: Unpack symbols\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols\"\n+          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols\"\n+      - name: Unpack tests\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}\"\n+      - name: Find root of jdk image dir\n+        run: echo (\"::set-env name=imageroot::\" + (Get-ChildItem -Path $HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }} -Filter release -Recurse -ErrorAction SilentlyContinue -Force).DirectoryName)\n+\n+      - name: Run tests\n+        run: >\n+          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n+          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n+          $env:JDK_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n+          $env:SYMBOLS_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n+          $env:TEST_IMAGE_DIR = cygpath \"$HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}\" ;\n+          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n+          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n+          & make test-prebuilt\n+          CONF_NAME=run-test-prebuilt\n+          LOG_CMDLINES=true\n+          JTREG_VERBOSE=fail,error,time\n+          TEST=${{ matrix.suites }}\n+          TEST_OPTS_JAVA_OPTIONS=\n+          JTREG_KEYWORDS=\"!headful\"\n+      - name: Create suitable test log artifact name\n+        if: always()\n+        run: echo (\"::set-env name=logsuffix::\" + (\"${{ matrix.test }}\" -replace \"\/\", \"_\" -replace \" \", \"_\"))\n+\n+      - name: Persist test logs\n+        if: always()\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: windows-x64${{ matrix.artifact }}_testlogs_${{ env.logsuffix }}\n+          path: build\/*\/test-results\n+        continue-on-error: true\n+\n+  macos_x64_build:\n+    name: macOS x64\n+    runs-on: \"macos-latest\"\n+    needs: prerequisites\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_x64 != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build release\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Checkout gtest sources\n+        uses: actions\/checkout@v2\n+        with:\n+          repository: \"google\/googletest\"\n+          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n+          path: gtest\n+\n+      - name: Install dependencies\n+        run: brew install make\n+\n+      - name: Configure\n+        run: >\n+          bash configure\n+          --with-conf-name=macos-x64\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n+          --with-jtreg=${HOME}\/jtreg\n+          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+          --enable-jtreg-failure-handler\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=macos-x64 ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+      - name: Persist test bundles\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: |\n+            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}.tar.gz\n+            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}.tar.gz\n+        if: matrix.build-target == false\n+\n+  macos_x64_test:\n+    name: macOS x64\n+    runs-on: \"macos-latest\"\n+    needs:\n+      - prerequisites\n+      - macos_x64_build\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        test:\n+          - jdk\/tier1 part 1\n+          - jdk\/tier1 part 2\n+          - jdk\/tier1 part 3\n+          - langtools\/tier1\n+          - hs\/tier1 common\n+          - hs\/tier1 compiler\n+          - hs\/tier1 gc\n+          - hs\/tier1 runtime\n+          - hs\/tier1 serviceability\n+        include:\n+          - test: jdk\/tier1 part 1\n+            suites: test\/jdk\/:tier1_part1\n+          - test: jdk\/tier1 part 2\n+            suites: test\/jdk\/:tier1_part2\n+          - test: jdk\/tier1 part 3\n+            suites: test\/jdk\/:tier1_part3\n+          - test: langtools\/tier1\n+            suites: test\/langtools\/:tier1\n+          - test: hs\/tier1 common\n+            suites: test\/hotspot\/jtreg\/:tier1_common\n+            artifact: -debug\n+          - test: hs\/tier1 compiler\n+            suites: test\/hotspot\/jtreg\/:tier1_compiler\n+            artifact: -debug\n+          - test: hs\/tier1 gc\n+            suites: test\/hotspot\/jtreg\/:tier1_gc\n+            artifact: -debug\n+          - test: hs\/tier1 runtime\n+            suites: test\/hotspot\/jtreg\/:tier1_runtime\n+            artifact: -debug\n+          - test: hs\/tier1 serviceability\n+            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jtreg_${{ env.bundleid }}\n+          path: ~\/jtreg\/\n+\n+      - name: Restore build artifacts\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ env.bundleid }}\n+          path: ~\/jdk-macos-x64${{ matrix.artifact }}\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}\"\n+      - name: Unpack tests\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}\"\n+      - name: Install dependencies\n+        run: brew install make\n+\n+      - name: Find root of jdk image dir\n+        run: |\n+          imageroot=`find ${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }} -name release -type f`\n+          echo \"::set-env name=imageroot::`dirname ${imageroot}`\"\n+      - name: Run tests\n+        run: >\n+          JDK_IMAGE_DIR=${{ env.imageroot }}\n+          TEST_IMAGE_DIR=${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}\n+          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n+          JT_HOME=${HOME}\/jtreg\n+          gmake test-prebuilt\n+          CONF_NAME=run-test-prebuilt\n+          LOG_CMDLINES=true\n+          JTREG_VERBOSE=fail,error,time\n+          TEST=${{ matrix.suites }}\n+          TEST_OPTS_JAVA_OPTIONS=\n+          JTREG_KEYWORDS=\"!headful\"\n+      - name: Create suitable test log artifact name\n+        if: always()\n+        run: echo \"::set-env name=logsuffix::`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\"\n+\n+      - name: Persist test logs\n+        if: always()\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: macos-x64${{ matrix.artifact }}_testlogs_${{ env.logsuffix }}\n+          path: build\/*\/test-results\n+        continue-on-error: true\n+\n+  artifacts:\n+    name: Post-process artifacts\n+    runs-on: \"ubuntu-latest\"\n+    if: always()\n+    continue-on-error: true\n+    needs:\n+      - linux_x64_test\n+      - windows_x64_test\n+      - macos_x64_test\n+\n+    steps:\n+      - name: Determine current artifacts endpoint\n+        id: actions_runtime\n+        uses: actions\/github-script@v3\n+        with:\n+          script: \"return { url: process.env['ACTIONS_RUNTIME_URL'], token: process.env['ACTIONS_RUNTIME_TOKEN'] }\"\n+\n+      - name: Display current artifacts\n+        run: >\n+          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n+          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n+          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview'\n+      - name: Delete transient artifacts\n+        run: >\n+          for url in `\n+          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n+          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n+          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n+          jq -r -c '.value | map(select(.name|startswith(\"transient_\"))) | .[].url'`; do\n+          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n+          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n+          -X DELETE \"${url}\";\n+          done\n+      - name: Fetch remaining artifacts (test results)\n+        uses: actions\/download-artifact@v2\n+        with:\n+          path: test-results\n+\n+      - name: Delete remaining artifacts\n+        run: >\n+          for url in `\n+          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n+          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n+          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n+          jq -r -c '.value | .[].url'`; do\n+          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n+          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n+          -X DELETE \"${url}\";\n+          done\n+      - name: Determine unique bundle identifier\n+        run: echo \"::set-env name=bundleid::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n+\n+      - name: Upload a combined test results artifact\n+        uses: actions\/upload-artifact@v2\n+        with:\n+          name: test-results_${{ env.bundleid }}\n+          path: test-results\n+© 2020 GitHub, Inc.\n+Terms\n+Privacy\n+Security\n+Status\n+Help\n+Contact GitHub\n+Pricing\n+API\n+Training\n+Blog\n+About\n","filename":".github\/workflows\/submit.yml","additions":885,"deletions":0,"binary":false,"changes":885,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -33,0 +32,1 @@\n+class CollectedHeap;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-\/\/ ClassLoaderMetaspace is an inbetween-object between a CLD and its MetaspaceArena(s).\n+\/\/ A ClassLoaderMetaspace manages MetaspaceArena(s) for a CLD.\n@@ -159,5 +159,3 @@\n-\/\/ A CLD owns one MetaspaceArena if compressed class space is off, two if its one\n-\/\/ (one for allocations of Klass* structures from class space, one for the rest from\n-\/\/  non-class space).\n-\/\/\n-\/\/ ClassLoaderMetaspace only exists to hide this logic from upper layers:\n+\/\/ A CLD owns one MetaspaceArena if UseCompressedClassPointers is false. Otherwise\n+\/\/ it owns two - one for the Klass* objects from the class space, one for the other\n+\/\/ types of MetaspaceObjs from the non-class space.\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1582,3 +1582,0 @@\n-  product(uintx, ForceCompressedClassSpaceStartAddress, 0, EXPERIMENTAL,    \\\n-          \"Force class space start address to a given value.\")              \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,6 +46,0 @@\n-\n-        SharedStringsUtils.dump(TestCommon.list(\"HelloString\"),\n-            \"SharedStringsBasic.txt\", CDS_LOGGING,\n-            \"-XX:+UseLargePages\");\n-        SharedStringsUtils.runWithArchive(\"HelloString\",\n-            \"-XX:+UseLargePages\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/LargePages.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}