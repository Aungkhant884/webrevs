{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4122109\n+ * @summary Ensure SwingUtilities.getDeepestComponentAt() works correctly\n+ *    (in this particular case, with JTabbedPane)\n+ * @key headful\n+ * @run main GetComponentAtTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+\n+public class GetComponentAtTest {\n+   static JFrame f;\n+\n+   public static void main(String[] args) throws InterruptedException,\n+           InvocationTargetException, AWTException {\n+      try {\n+         Robot robot = new Robot();\n+         SwingUtilities.invokeAndWait(() -> {\n+            f = new JFrame(\"GetComponentAtTest\");\n+            JTabbedPane tabbedpane = new JTabbedPane();\n+            f.getContentPane().add(tabbedpane, BorderLayout.CENTER);\n+\n+            JPanel panel1 = new JPanel();\n+            panel1.setName(\"Panel 1\");\n+            panel1.setLayout(new BorderLayout());\n+            tabbedpane.add(panel1);\n+            JPanel subPanel = new JPanel();\n+            subPanel.setName(\"Sub-Panel\");\n+            subPanel.setBackground(Color.green);\n+            panel1.add(subPanel); \/\/ add sub panel to 1st tab\n+\n+            JPanel panel2 = new JPanel();\n+            panel2.setName(\"Panel 2\");\n+            tabbedpane.add(panel2);\n+\n+            f.setSize(150, 150);\n+            f.setVisible(true);\n+\n+            robot.delay(1000);\n+\n+            tabbedpane.setSelectedIndex(1); \/\/ display 2nd tab\n+            tabbedpane.invalidate();\n+            tabbedpane.validate();\n+            if (SwingUtilities.getDeepestComponentAt(tabbedpane, 50, 50) != panel2) {\n+               throw new RuntimeException(\"SwingUtilities.getDeepestComponentAt() \" +\n+                       \"returned incorrect component! (1)\");\n+            }\n+\n+            tabbedpane.setSelectedIndex(0); \/\/ display 1st tab\n+            tabbedpane.invalidate();\n+            tabbedpane.validate();\n+            if (SwingUtilities.getDeepestComponentAt(tabbedpane, 50, 50) != subPanel) {\n+               throw new RuntimeException(\"SwingUtilities.getDeepestComponentAt() \" +\n+                       \"returned incorrect component! (2)\");\n+            }\n+         });\n+      } finally {\n+         SwingUtilities.invokeAndWait(() -> {\n+            if (f != null) {\n+               f.dispose();\n+            }\n+         });\n+      }\n+\n+   }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/GetComponentAtTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4213896 4228439\n+ * @summary Ensure that inserting a new tab with a component\n+ * where that component already exists as another tab is handled\n+ * properly. The old tab should be removed and the new tab added.\n+ * @key headful\n+ * @run main ReplaceCompTab\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+\n+public class ReplaceCompTab {\n+    static JFrame f;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"ReplaceCompTab\");\n+                JTabbedPane tabbedpane = new JTabbedPane();\n+                f.getContentPane().add(tabbedpane, BorderLayout.CENTER);\n+\n+                JPanel comp = new JPanel();\n+\n+                \/\/ Add first tab\n+                tabbedpane.addTab(\"First(temp)\", comp);\n+\n+                \/\/ Add second tab with same component (should just replace first one)\n+                tabbedpane.insertTab(\"First\", null, comp, \"component added next\", 0);\n+\n+                \/\/ Check to ensure only a single tab exists\n+                if (tabbedpane.getTabCount() > 1) {\n+                    throw new RuntimeException(\"Only one tab should exist\");\n+                }\n+                \/\/ Check to make sure second tab correctly replaced the first\n+                if (!(tabbedpane.getTitleAt(0).equals(\"First\"))) {\n+                    throw new RuntimeException(\"Tab not replaced correctly\");\n+                }\n+                \/\/ Check to make sure adding null continues to work\n+                try {\n+                    tabbedpane.addTab(\"Second\", null);\n+                } catch (Exception e) {\n+                    System.out.println(e);\n+                    e.printStackTrace();\n+                    throw new RuntimeException(\"Adding first null \" +\n+                            \"component failed:\");\n+                }\n+                try {\n+                    tabbedpane.addTab(\"Third\", null);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Adding subsequent null \" +\n+                            \"component failed: \", e);\n+                }\n+                try {\n+                    tabbedpane.setComponentAt(1, new JLabel(\"Second Component\"));\n+                    tabbedpane.setComponentAt(2, new JLabel(\"Third Component\"));\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Setting null component \" +\n+                            \"to non-null failed: \", e);\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/ReplaceCompTab.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4703690\n+ * @summary JTabbedPane should focus proper component at the tab container\n+ * @key headful\n+ * @run main bug4703690\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4703690 {\n+    static JFrame fr;\n+    static JTabbedPane tabbedPane;\n+    static JPanel panel;\n+    static JButton one, two;\n+\n+    static volatile boolean focusButtonTwo = false;\n+    static volatile boolean switchToTabTwo = false;\n+    static volatile boolean focusButtonOne = false;\n+    static Robot robot;\n+\n+    static Point p;\n+    static Rectangle rect;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        bug4703690 test = new bug4703690();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4703690\");\n+\n+                panel = new JPanel();\n+                one = new JButton(\"Button 1\");\n+                panel.add(one);\n+                two = new JButton(\"Button 2\");\n+                panel.add(two);\n+\n+                tabbedPane = new JTabbedPane();\n+                fr.getContentPane().add(tabbedPane);\n+                tabbedPane.addTab(\"Tab one\", panel);\n+                tabbedPane.addTab(\"Tab two\", new JPanel());\n+\n+                two.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        focusButtonTwo = true;\n+                    }\n+                });\n+\n+                tabbedPane.addChangeListener(e -> {\n+                    if (tabbedPane.getSelectedIndex() == 1) {\n+                        switchToTabTwo = true;\n+                    }\n+                });\n+\n+                fr.setBounds(10, 10, 200, 200);\n+                fr.setVisible(true);\n+                fr.setLocationRelativeTo(null);\n+            });\n+\n+            test.execute();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void execute() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.delay(1000);\n+            two.requestFocus();\n+\n+            one.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        focusButtonOne = true;\n+                    }\n+                });\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = tabbedPane.getLocationOnScreen();\n+                rect = tabbedPane.getBoundsAt(1);\n+            });\n+\n+            robot.delay(1000);\n+            robot.mouseMove(p.x + rect.x + rect.width \/ 2,\n+                            p.y + rect.y + rect.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = tabbedPane.getLocationOnScreen();\n+                rect = tabbedPane.getBoundsAt(0);\n+            });\n+\n+            robot.delay(1000);\n+            robot.mouseMove(p.x + rect.x + rect.width \/ 2,\n+                            p.y + rect.y + rect.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } catch (Exception t) {\n+            throw new RuntimeException(\"Test failed\", t);\n+        }\n+\n+        if (!focusButtonOne) {\n+            throw new RuntimeException(\"The 'Button 1' button doesn't have focus\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/bug4703690.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4849868\n+ * @summary Tests if JTextArea.getSelectionEnd works correctly\n+ * @key headful\n+ * @run main bug4849868\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4849868 {\n+\n+    private static volatile boolean passed = false;\n+\n+    private static JTextArea textArea;\n+    private static JFrame f;\n+    private static Point p;\n+\n+    private static int end;\n+    private static int len;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4849868\");\n+                textArea = new JTextArea(\"1234\");\n+                textArea.setLineWrap(true);\n+                JScrollPane pane = new JScrollPane(textArea,\n+                        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n+                f.getContentPane().add(pane);\n+                f.setSize(300, 300);\n+                f.setVisible(true);\n+                f.setLocationRelativeTo(null);\n+            });\n+\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> p =\n+                    textArea.getLocationOnScreen());\n+\n+            robot.mouseMove(p.x, p.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseMove(p.x + 350, p.y);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                end = textArea.getSelectionEnd();\n+                len = textArea.getDocument().getLength();\n+            });\n+            passed = (end <= len);\n+\n+            System.out.println(\"end: \" + end);\n+            System.out.println(\"len: \" + len);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/bug4849868.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4244613\n+ * @summary Tests that JTextField has setAction(Action) constructor\n+ * @run main bug4244613\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+import java.beans.PropertyChangeListener;\n+\n+import javax.swing.Action;\n+import javax.swing.JTextField;\n+\n+public class bug4244613 {\n+    \/** Auxilliary class implementing Action\n+    *\/\n+    static class NullAction implements Action {\n+        public void addPropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void removePropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void putValue(String key, Object value) {}\n+        public void setEnabled(boolean b) {}\n+        public void actionPerformed(ActionEvent e) {}\n+\n+        public Object getValue(String key) { return null; }\n+        public boolean isEnabled() { return false; }\n+    }\n+\n+    public static void main(String[] args) {\n+        JTextField tf = new JTextField(\"bug4244613\");\n+        Action action = new NullAction();\n+        tf.setAction(action);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextField\/bug4244613.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}