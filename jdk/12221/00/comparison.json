{"files":[{"patch":"@@ -163,21 +163,0 @@\n-template <class E, MEMFLAGS F> class ResourceStack:  public Stack<E, F>, public ResourceObj\n-{\n-public:\n-  \/\/ If this class becomes widely used, it may make sense to save the Thread\n-  \/\/ and use it when allocating segments.\n-\/\/  ResourceStack(size_t segment_size = Stack<E, F>::default_segment_size()):\n-  ResourceStack(size_t segment_size): Stack<E, F>(segment_size, max_uintx)\n-    { }\n-\n-  \/\/ Set the segment pointers to nullptr so the parent dtor does not free them;\n-  \/\/ that must be done by the ResourceMark code.\n-  ~ResourceStack() { Stack<E, F>::reset(true); }\n-\n-protected:\n-  virtual E*   alloc(size_t bytes);\n-  virtual void free(E* addr, size_t bytes);\n-\n-private:\n-  void clear(bool clear_cache = false);\n-};\n-\n","filename":"src\/hotspot\/share\/utilities\/stack.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -246,12 +246,0 @@\n-template <class E, MEMFLAGS F>\n-E* ResourceStack<E, F>::alloc(size_t bytes)\n-{\n-  return (E*) resource_allocate_bytes(bytes);\n-}\n-\n-template <class E, MEMFLAGS F>\n-void ResourceStack<E, F>::free(E* addr, size_t bytes)\n-{\n-  resource_free_bytes(Thread::current(), (char*) addr, bytes);\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/stack.inline.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}