{"files":[{"patch":"@@ -58,15 +58,0 @@\n-\/*****************************************************************************\n- * Implementation\n- *****************************************************************************\/\n-\n-\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n-template <typename T>\n-struct ByteswapImpl<T, 1> final {\n-  STATIC_ASSERT(CanByteswapImpl<T>::value);\n-  STATIC_ASSERT(sizeof(T) == 1);\n-\n-  ALWAYSINLINE T operator()(T x) const {\n-    return x;\n-  }\n-};\n-\n@@ -82,1 +67,1 @@\n-struct ByteswapFallbackImpl<T, 1> final {\n+struct ByteswapFallbackImpl<T, 1> {\n@@ -92,1 +77,1 @@\n-struct ByteswapFallbackImpl<T, 2> final {\n+struct ByteswapFallbackImpl<T, 2> {\n@@ -102,1 +87,1 @@\n-struct ByteswapFallbackImpl<T, 4> final {\n+struct ByteswapFallbackImpl<T, 4> {\n@@ -113,1 +98,1 @@\n-struct ByteswapFallbackImpl<T, 8> final {\n+struct ByteswapFallbackImpl<T, 8> {\n@@ -138,0 +123,11 @@\n+\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n+template <typename T>\n+struct ByteswapImpl<T, 1> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 1);\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return x;\n+  }\n+};\n+\n@@ -195,0 +191,11 @@\n+\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n+template <typename T>\n+struct ByteswapImpl<T, 1> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 1);\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return x;\n+  }\n+};\n+\n@@ -220,1 +227,1 @@\n-  STATIC_ASSERT(sizeof(unsigned __int64) == sizeof(4));\n+  STATIC_ASSERT(sizeof(unsigned __int64) == sizeof(8));\n","filename":"src\/hotspot\/share\/utilities\/byteswap.hpp","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"}]}