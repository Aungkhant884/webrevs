{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,3 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -35,3 +37,2 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.test.lib.net.SimpleSSLContext;\n@@ -40,0 +41,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -46,3 +48,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.ProxySelector;\n@@ -52,0 +51,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -54,0 +54,2 @@\n+import java.util.Optional;\n+import javax.net.ssl.SSLContext;\n@@ -58,0 +60,1 @@\n+import static java.net.http.HttpClient.Version.HTTP_2;\n@@ -62,1 +65,1 @@\n-public class ContentLengthHeaderTest {\n+public class ContentLengthHeaderTest implements HttpServerAdapters {\n@@ -67,1 +70,2 @@\n-    static HttpServer testContentLengthServer;\n+    static HttpTestServer testContentLengthServerH1;\n+    static HttpTestServer testContentLengthServerH2;\n@@ -69,0 +73,1 @@\n+    static SSLContext sslContext;\n@@ -71,1 +76,2 @@\n-    URI testContentLengthURI;\n+    URI testContentLengthURIH1;\n+    URI testContentLengthURIH2;\n@@ -75,2 +81,3 @@\n-        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-        testContentLengthServer = HttpServer.create(sa, 0);\n+        sslContext = new SimpleSSLContext().get();\n+        testContentLengthServerH1 = HttpTestServer.create(HTTP_1_1);\n+        testContentLengthServerH2 = HttpTestServer.create(HTTP_2, sslContext);\n@@ -79,3 +86,5 @@\n-        testContentLengthServer.createContext(NO_BODY_PATH, new NoContentLengthHandler());\n-        testContentLengthServer.createContext(BODY_PATH, new ContentLengthHandler());\n-        testContentLengthURI = URIBuilder.newBuilder()\n+        testContentLengthServerH1.addHandler(new NoContentLengthHandler(), NO_BODY_PATH);\n+        testContentLengthServerH2.addHandler(new NoContentLengthHandler(), NO_BODY_PATH);\n+        testContentLengthServerH1.addHandler(new ContentLengthHandler(), BODY_PATH);\n+        testContentLengthServerH2.addHandler(new OptionalContentLengthHandler(), BODY_PATH);\n+        testContentLengthURIH1 = URIBuilder.newBuilder()\n@@ -84,1 +93,1 @@\n-                .port(testContentLengthServer.getAddress().getPort())\n+                .port(testContentLengthServerH1.getAddress().getPort())\n@@ -86,0 +95,9 @@\n+        testContentLengthURIH2 = URIBuilder.newBuilder()\n+                .scheme(\"https\")\n+                .loopback()\n+                .port(testContentLengthServerH2.getAddress().getPort())\n+                .build();\n+\n+        testContentLengthServerH1.start();\n+        testLog.println(\"HTTP\/1.1 Server up at address: \" + testContentLengthServerH1.getAddress());\n+        testLog.println(\"Request URI for Client: \" + testContentLengthURIH1);\n@@ -87,3 +105,3 @@\n-        testContentLengthServer.start();\n-        testLog.println(\"Server up at address: \" + testContentLengthServer.getAddress());\n-        testLog.println(\"Request URI for Client: \" + testContentLengthURI);\n+        testContentLengthServerH2.start();\n+        testLog.println(\"HTTP\/2 Server up at address: \" + testContentLengthServerH2.getAddress());\n+        testLog.println(\"Request URI for Client: \" + testContentLengthURIH2);\n@@ -93,1 +111,1 @@\n-                .version(HTTP_1_1)\n+                .sslContext(sslContext)\n@@ -99,2 +117,20 @@\n-        if (testContentLengthServer != null)\n-            testContentLengthServer.stop(0);\n+        if (testContentLengthServerH1 != null)\n+            testContentLengthServerH1.stop();\n+        if (testContentLengthServerH2 != null)\n+            testContentLengthServerH2.stop();\n+    }\n+\n+    @DataProvider(name = \"bodies\")\n+    Object[][] bodies() {\n+        return new Object[][]{\n+                {HTTP_1_1, URI.create(testContentLengthURIH1 + BODY_PATH)},\n+                {HTTP_2, URI.create(testContentLengthURIH2 + BODY_PATH)}\n+        };\n+    }\n+\n+    @DataProvider(name = \"nobodies\")\n+    Object[][] nobodies() {\n+        return new Object[][]{\n+                {HTTP_1_1, URI.create(testContentLengthURIH1 + NO_BODY_PATH)},\n+                {HTTP_2, URI.create(testContentLengthURIH2 + NO_BODY_PATH)}\n+        };\n@@ -103,1 +139,1 @@\n-    @Test\n+    @Test(dataProvider = \"nobodies\")\n@@ -105,2 +141,2 @@\n-    public void getWithNoBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking GET with no request body\");\n+    public void getWithNoBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking GET with no request body\");\n@@ -108,1 +144,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -110,1 +146,1 @@\n-                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .uri(uri)\n@@ -114,0 +150,1 @@\n+        assertEquals(resp.version(), version);\n@@ -116,1 +153,1 @@\n-    @Test\n+    @Test(dataProvider = \"bodies\")\n@@ -118,2 +155,3 @@\n-    public void getWithBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking GET with request body\");\n+    \/\/ in HTTP\/1.1\n+    public void getWithBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking GET with request body\");\n@@ -121,1 +159,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -123,1 +161,1 @@\n-                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .uri(uri)\n@@ -127,0 +165,1 @@\n+        assertEquals(resp.version(), version);\n@@ -129,1 +168,1 @@\n-    @Test\n+    @Test(dataProvider = \"nobodies\")\n@@ -131,2 +170,2 @@\n-    public void deleteWithNoBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking DELETE with no request body\");\n+    public void deleteWithNoBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking DELETE with no request body\");\n@@ -134,1 +173,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -136,1 +175,1 @@\n-                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .uri(uri)\n@@ -140,0 +179,1 @@\n+        assertEquals(resp.version(), version);\n@@ -142,1 +182,1 @@\n-    @Test\n+    @Test(dataProvider = \"bodies\")\n@@ -144,2 +184,3 @@\n-    public void deleteWithBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking DELETE with request body\");\n+    \/\/   in HTTP\/1.1\n+    public void deleteWithBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking DELETE with request body\");\n@@ -147,1 +188,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -149,1 +190,1 @@\n-                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .uri(uri)\n@@ -153,0 +194,1 @@\n+        assertEquals(resp.version(), version);\n@@ -155,1 +197,1 @@\n-    @Test\n+    @Test(dataProvider = \"nobodies\")\n@@ -157,2 +199,2 @@\n-    public void headWithNoBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking HEAD with no request body\");\n+    public void headWithNoBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking HEAD with no request body\");\n@@ -160,1 +202,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -162,1 +204,1 @@\n-                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .uri(uri)\n@@ -166,0 +208,1 @@\n+        assertEquals(resp.version(), version);\n@@ -168,1 +211,1 @@\n-    @Test\n+    @Test(dataProvider = \"bodies\")\n@@ -170,2 +213,3 @@\n-    public void headWithBody() throws IOException, InterruptedException {\n-        testLog.println(\"Checking HEAD with request body\");\n+    \/\/ in HTTP\/1.1\n+    public void headWithBody(Version version, URI uri) throws IOException, InterruptedException {\n+        testLog.println(version + \" Checking HEAD with request body\");\n@@ -173,1 +217,1 @@\n-                .version(HTTP_1_1)\n+                .version(version)\n@@ -175,1 +219,1 @@\n-                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .uri(uri)\n@@ -181,0 +225,15 @@\n+        assertEquals(resp.version(), version);\n+    }\n+\n+    public static void handleResponse(long expected, HttpTestExchange ex, String body, int rCode) throws IOException {\n+        try (InputStream is = ex.getRequestBody()) {\n+            byte[] reqBody = is.readAllBytes();\n+            if (expected == -1 || expected == reqBody.length || rCode != 200) {\n+                sendResponse(ex, body, rCode);\n+            } else {\n+                body = body + \", but Content-Length:%s doesn't match body size %s\"\n+                        .formatted(expected, reqBody.length);\n+                testLog.println(\"Unexpected content length value: \" + body);\n+                sendResponse(ex, body, 400);\n+            }\n+        }\n@@ -183,4 +242,2 @@\n-    public static void handleResponse(HttpExchange ex, String body, int rCode) throws IOException {\n-        try (InputStream is = ex.getRequestBody();\n-             OutputStream os = ex.getResponseBody()) {\n-            is.readAllBytes();\n+    public static void sendResponse(HttpTestExchange ex, String body, int rCode) throws IOException {\n+        try (OutputStream os = ex.getResponseBody()) {\n@@ -193,1 +250,1 @@\n-    static class NoContentLengthHandler implements HttpHandler {\n+    static class NoContentLengthHandler implements HttpTestHandler {\n@@ -196,2 +253,3 @@\n-        public void handle(HttpExchange exchange) throws IOException {\n-            testLog.println(\"NoContentLengthHandler: Received Headers \" + exchange.getRequestHeaders().entrySet() +\n+        public void handle(HttpTestExchange exchange) throws IOException {\n+            testLog.println(\"NoContentLengthHandler: Received Headers \" +\n+                    exchange.getRequestHeaders().entrySet() +\n@@ -199,1 +257,2 @@\n-            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+            Optional<String> contentLength = exchange.getRequestHeaders()\n+                    .firstValue(\"Content-length\");\n@@ -202,3 +261,1 @@\n-            if (contentLength == null) {\n-                handleResponse(exchange, \"Request completed\",200);\n-            } else {\n+            if (contentLength.isPresent()) {\n@@ -206,2 +263,5 @@\n-                        \"Content-length header of value: \" + exchange.getRequestHeaders().getFirst(\"Content-length\");\n-                handleResponse(exchange, responseBody, 400);\n+                        \"Content-length header of value: \" +\n+                        exchange.getRequestHeaders().firstValue(\"Content-length\").get();\n+                handleResponse(-1, exchange, responseBody, 400);\n+            } else {\n+                handleResponse(0, exchange, \"Request completed\",200);\n@@ -212,1 +272,1 @@\n-    static class ContentLengthHandler implements HttpHandler {\n+    static class ContentLengthHandler implements HttpTestHandler {\n@@ -215,1 +275,1 @@\n-        public void handle(HttpExchange exchange) throws IOException {\n+        public void handle(HttpTestExchange exchange) throws IOException {\n@@ -218,1 +278,2 @@\n-            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+            Optional<String> contentLength = exchange.getRequestHeaders()\n+                    .firstValue(\"Content-length\");\n@@ -221,2 +282,2 @@\n-            if (contentLength != null) {\n-                handleResponse(exchange, \"Request completed\",200);\n+            if (contentLength.isPresent()) {\n+                handleResponse(Long.parseLong(contentLength.get()), exchange, \"Request completed\", 200);\n@@ -226,1 +287,24 @@\n-                handleResponse(exchange, responseBody, 400);\n+                handleResponse(-1, exchange, responseBody, 400);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A handler used for cases where the presence of a Content-Length\n+     * header is optional. If present, its value must match the number of\n+     * bytes sent in the request body.\n+     *\/\n+    static class OptionalContentLengthHandler implements HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpTestExchange exchange) throws IOException {\n+            testLog.println(\"OptionalContentLengthHandler: Received Headers \"\n+                    + exchange.getRequestHeaders().entrySet() +\n+                    \" from \" + exchange.getRequestMethod() + \" request.\");\n+            Optional<String> contentLength = exchange.getRequestHeaders().firstValue(\"Content-Length\");\n+\n+            \/\/ Check Content-length header was set\n+            if (contentLength.isPresent()) {\n+                handleResponse(Long.parseLong(contentLength.get()), exchange, \"Request completed\", 200);\n+            } else {\n+                handleResponse(-1, exchange, \"Request completed, no content length\", 200);\n","filename":"test\/jdk\/java\/net\/httpclient\/ContentLengthHeaderTest.java","additions":156,"deletions":72,"binary":false,"changes":228,"status":"modified"}]}