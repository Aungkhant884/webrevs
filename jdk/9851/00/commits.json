[{"commit":{"message":"8291669: [REDO] Fix array range check hoisting for some scaled loop iv\n\nThis is a REDO of JDK-8289996. In previous patch, we defer some strength\nreductions in Ideal functions of `Mul[I|L]Node` to post loop igvn phase\nto fix a range check hoisting issue. More about previous patch can be\nfound in PR #9508 [1], where we have described some details of the issue\nwe would like to fix.\n\nPrevious patch was backed out due to some jtreg failures found. We have\nanalyzed those failures one by one and found one of them exposes a real\nperformance regression. We see that deferring some strength reductions\nto post loop igvn phase has too much impact. Some vector multiplication\nwill not be optimized to vector addition with vector shift after that\nchange. So in this REDO we propose the range check hoisting fix with a\ndifferent approach.\n\nIn this new patch, we add some recursive pattern matches for scaled loop\niv in function `PhaseIdealLoop::is_scaled_iv()`. These include matching\na sum or a difference of two scaled iv expressions. With this, all kinds\nof Ideal-transformed scaled iv expressions can still be recognized. This\nnew approach only touches loop transformation code and hence has much\nsmaller impact. We have verified that this new approach applies to both\nint range checks and long range checks.\n\nPreviously attached jtreg case fails on ppc64 because VectorAPI has no\nvector intrinsics on ppc64 so there's no long range check to hoist. In\nthis patch, we limit the test architecture to x64 and AArch64.\n\nTested hotspot::hotspot_all_no_apps, jdk::tier1~3 and langtools::tier1."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/RangeCheckEliminationScaleNotOne.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/RangeCheckHoisting.java"}],"sha":"707017cbbd9d2e09278965f83993e149f1434c82"}]