{"files":[{"patch":"@@ -1572,59 +1572,46 @@\n-        String[] previousOptions = getCompileOptions();\n-        try {\n-            String code =\n-                    \"\"\"\n-                    import java.lang.annotation.*;\n-                    import java.util.List;\n-                    @Target({ElementType.TYPE_USE})\n-                    @Retention(RetentionPolicy.RUNTIME)\n-                    @interface Anno { }\n-                    record R(List<@Anno String> s) {}\n-                    \"\"\";\n-\n-            String[] generalOptions = {\n-                    \"-processor\", Processor.class.getName(),\n-                    \"-Atargets=ElementType.TYPE_USE\"\n-            };\n-\n-            String[] testOptions = generalOptions.clone();\n-            setCompileOptions(testOptions);\n-\n-            File dir = assertOK(true, code);\n-\n-            ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"R.class\"));\n-\n-            \/\/ field first\n-            Assert.check(classFile.fields.length == 1);\n-            Field field = classFile.fields[0];\n-            checkTypeAnno(\n-                    classFile,\n-                    (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n-                    \"FIELD\",\n-                    \"Anno\");\n-\n-            \/\/ checking for the annotation on the corresponding parameter of the canonical constructor\n-            Method init = findMethodOrFail(classFile, \"<init>\");\n-            checkTypeAnno(\n-                    classFile,\n-                    (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n-                    \"METHOD_FORMAL_PARAMETER\", \"Anno\");\n-\n-            \/\/ checking for the annotation in the accessor\n-            Method accessor = findMethodOrFail(classFile, \"s\");\n-            checkTypeAnno(\n-                    classFile,\n-                    (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n-                    \"METHOD_RETURN\", \"Anno\");\n-\n-            \/\/ checking for the annotation in the Record attribute\n-            Record_attribute record = (Record_attribute) findAttributeOrFail(classFile.attributes, Record_attribute.class);\n-            Assert.check(record.component_count == 1);\n-            checkTypeAnno(\n-                    classFile,\n-                    (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(\n-                                record.component_info_arr[0].attributes,\n-                                    RuntimeVisibleTypeAnnotations_attribute.class),\n-                            \"FIELD\", \"Anno\");\n-        } finally {\n-            setCompileOptions(previousOptions);\n-        }\n+        String code =\n+                \"\"\"\n+                import java.lang.annotation.*;\n+                import java.util.List;\n+                @Target({ElementType.TYPE_USE})\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface Anno { }\n+                record R(List<@Anno String> s) {}\n+                \"\"\";\n+\n+        File dir = assertOK(true, code);\n+\n+        ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"R.class\"));\n+\n+        \/\/ field first\n+        Assert.check(classFile.fields.length == 1);\n+        Field field = classFile.fields[0];\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"FIELD\",\n+                \"Anno\");\n+\n+        \/\/ checking for the annotation on the corresponding parameter of the canonical constructor\n+        Method init = findMethodOrFail(classFile, \"<init>\");\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"METHOD_FORMAL_PARAMETER\", \"Anno\");\n+\n+        \/\/ checking for the annotation in the accessor\n+        Method accessor = findMethodOrFail(classFile, \"s\");\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"METHOD_RETURN\", \"Anno\");\n+\n+        \/\/ checking for the annotation in the Record attribute\n+        Record_attribute record = (Record_attribute) findAttributeOrFail(classFile.attributes, Record_attribute.class);\n+        Assert.check(record.component_count == 1);\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(\n+                            record.component_info_arr[0].attributes,\n+                                RuntimeVisibleTypeAnnotations_attribute.class),\n+                        \"FIELD\", \"Anno\");\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":46,"deletions":59,"binary":false,"changes":105,"status":"modified"}]}