{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import com.sun.tools.javac.code.Symbol.RecordComponent;\n@@ -87,0 +88,1 @@\n+import static com.sun.tools.javac.code.Flags.RECORD;\n@@ -1305,0 +1307,10 @@\n+\n+            \/\/ Now that type and declaration annotations have been segregated into their own buckets ...\n+            if (sigOnly) {\n+                if (tree.sym != null && tree.sym.getKind() == ElementKind.FIELD && (tree.sym.flags_field & RECORD) != 0) {\n+                    RecordComponent rc = ((ClassSymbol)tree.sym.owner).getRecordComponent(tree.sym);\n+                    rc.setTypeAttributes(tree.sym.getRawTypeAttributes());\n+                    \/\/ to get all the type annotations applied to the type\n+                    rc.type = tree.sym.type;\n+                }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3003,3 +3003,9 @@\n-                    rc.setTypeAttributes(s.getRawTypeAttributes());\n-                    \/\/ to get all the type annotations applied to the type\n-                    rc.type = s.type;\n+\n+                    \/* At this point, we used to carry over any type annotations from the VARDEF to the record component, but\n+                     * that is problematic, since we get here only when *some* annotation is applied to the SE5 (declaration)\n+                     * annotation location, inadvertently failing to carry over the type annotations when the VarDef has no\n+                     * annotations in the SE5 annotation location.\n+                     *\n+                     * Now type annotations are assigned to record components in a method that would execute irrespective of\n+                     * whether there are SE5 annotations on a VarDef viz com.sun.tools.javac.code.TypeAnnotations.TypeAnnotationPositions.visitVarDef\n+                     *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1569,0 +1569,51 @@\n+    \/\/ JDK-8292159: TYPE_USE annotations on generic type arguments\n+    \/\/              of record components discarded\n+    public void testOnlyTypeAnnotationsOnComponentField() throws Exception {\n+        String code =\n+                \"\"\"\n+                import java.lang.annotation.*;\n+                import java.util.List;\n+                @Target({ElementType.TYPE_USE})\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface Anno { }\n+                record R(List<@Anno String> s) {}\n+                \"\"\";\n+\n+        File dir = assertOK(true, code);\n+\n+        ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"R.class\"));\n+\n+        \/\/ field first\n+        Assert.check(classFile.fields.length == 1);\n+        Field field = classFile.fields[0];\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"FIELD\",\n+                \"Anno\");\n+\n+        \/\/ checking for the annotation on the corresponding parameter of the canonical constructor\n+        Method init = findMethodOrFail(classFile, \"<init>\");\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"METHOD_FORMAL_PARAMETER\", \"Anno\");\n+\n+        \/\/ checking for the annotation in the accessor\n+        Method accessor = findMethodOrFail(classFile, \"s\");\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                \"METHOD_RETURN\", \"Anno\");\n+\n+        \/\/ checking for the annotation in the Record attribute\n+        Record_attribute record = (Record_attribute) findAttributeOrFail(classFile.attributes, Record_attribute.class);\n+        Assert.check(record.component_count == 1);\n+        checkTypeAnno(\n+                classFile,\n+                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(\n+                            record.component_info_arr[0].attributes,\n+                                RuntimeVisibleTypeAnnotations_attribute.class),\n+                        \"FIELD\", \"Anno\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"}]}