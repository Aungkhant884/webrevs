{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import sun.security.ssl.SSLExtension.ExtensionConsumer;\n+import sun.security.ssl.SSLExtension.SSLExtensionSpec;\n+import sun.security.ssl.SSLHandshake.HandshakeMessage;\n+\n+import javax.net.ssl.SSLProtocolException;\n+import javax.security.auth.x500.X500Principal;\n@@ -32,6 +38,5 @@\n-import java.util.*;\n-import javax.net.ssl.SSLProtocolException;\n-import javax.security.auth.x500.X500Principal;\n-import sun.security.ssl.SSLExtension.ExtensionConsumer;\n-import sun.security.ssl.SSLExtension.SSLExtensionSpec;\n-import sun.security.ssl.SSLHandshake.HandshakeMessage;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n@@ -125,0 +130,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -127,0 +134,1 @@\n+\n@@ -141,2 +149,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                builder.append(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    builder.append(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    builder.append(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -280,1 +292,7 @@\n-            shc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                shc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                shc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n@@ -401,1 +419,7 @@\n-            chc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                chc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateAuthoritiesExtension.java","additions":35,"deletions":11,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,8 @@\n+import sun.security.ssl.CipherSuite.KeyExchange;\n+import sun.security.ssl.SSLHandshake.HandshakeMessage;\n+import sun.security.ssl.X509Authentication.X509Possession;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.X509ExtendedKeyManager;\n+import javax.security.auth.x500.X500Principal;\n@@ -33,8 +41,6 @@\n-import java.util.*;\n-import javax.net.ssl.SSLEngine;\n-import javax.net.ssl.SSLSocket;\n-import javax.net.ssl.X509ExtendedKeyManager;\n-import javax.security.auth.x500.X500Principal;\n-import sun.security.ssl.CipherSuite.KeyExchange;\n-import sun.security.ssl.SSLHandshake.HandshakeMessage;\n-import sun.security.ssl.X509Authentication.X509Possession;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n@@ -201,0 +207,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -204,0 +212,1 @@\n+\n@@ -257,2 +266,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -373,6 +386,17 @@\n-            if (chc.conContext.transport instanceof SSLSocketImpl) {\n-                clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLSocket)chc.conContext.transport);\n-            } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n-                clientAlias = km.chooseEngineClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLEngine)chc.conContext.transport);\n+\n+            try {\n+                if (chc.conContext.transport instanceof SSLSocketImpl) {\n+                    clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n+                        crm.getAuthorities(),\n+                        (SSLSocket) chc.conContext.transport);\n+                } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n+                    clientAlias =\n+                        km.chooseEngineClientAlias(crm.getKeyTypes(),\n+                            crm.getAuthorities(),\n+                            (SSLEngine) chc.conContext.transport);\n+                }\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR,\n+                    \"The distinguished names of the peer's \"\n+                    + \"certificate authorities could not be parsed\",\n+                        iae);\n@@ -515,0 +539,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -518,0 +544,1 @@\n+\n@@ -582,2 +609,7 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" +\n+                        iae);\n+                }\n@@ -720,2 +752,7 @@\n-            chc.peerSupportedAuthorities = crm.getAuthorities();\n-\n+            try {\n+                chc.peerSupportedAuthorities = crm.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The \"\n+                    + \"distinguished names of the peer's certificate \"\n+                    + \"authorities could not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":58,"deletions":21,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @summary verify correct exception handling in the event of an unparseable\n+ *  DN in the peer CA\n+ * @run main\/othervm TestBadDNForPeerCA\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+\n+public class TestBadDNForPeerCA {\n+\n+    \/\/ Test was originally written for TLSv1.2\n+    private static final String proto = \"TLSv1.2\";\n+\n+    private static final boolean debug = false;\n+\n+    private final SSLContext sslc;\n+\n+    private SSLEngine serverEngine;     \/\/ server Engine\n+    private ByteBuffer serverIn;        \/\/ read side of serverEngine\n+    private ByteBuffer clientOut;        \/\/ read side of serverEngine\n+\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+            + \"\/..\/..\/..\/..\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ the following contains a certificate with an invalid\/unparseable\n+    \/\/ distinguished name\n+    private static final byte[] payload = Base64.getDecoder().decode(\n+        \"FgMDAcsBAAHHAwPbDfeUCIStPzVIfXuGgCu56dSJOJ6xeus1W44frG5tciDEcBfYt\"\n+            + \"\/PN\/6MFCGojEVcmPw21mVyjYInMo0UozIn4NwBiEwITARMDwCzAK8ypwDDMqMAvA\"\n+            + \"J\/MqgCjAJ4AosAkwCjAI8AnAGsAagBnAEDALsAywC3AMcAmCgAFKsApJcDAFMAJw\"\n+            + \"BMAOQA4ADMAMsAFwA\/ABMAOAJ0AnAA9ADwANgAvAP8BAAEcAAUABQEAAAAAAAoAF\"\n+            + \"gAUAB0AFwAYABkAHgEAAQEBAgEDAQQACwACAQAAEQAJAAcCAAQAAAAAABcAAAAjA\"\n+            + \"AAADQAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFAQYBBAIDAwMBAwICAwIBA\"\n+            + \"gIAKwAFBAMEAwMALQACAQEAMgAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFA\"\n+            + \"QYBBAIDAwMBAwICAwIBAgIALwBrAGkAHQAAAAARACAAZMUAADkwsiaOwcsWAwAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAtAAAAAAAAAAEAADAAAAA=\");\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        if (debug) {\n+            System.setProperty(\"javax.net.debug\", \"all\");\n+        }\n+\n+        TestBadDNForPeerCA test = new TestBadDNForPeerCA();\n+\n+        try {\n+            test.runTest(payload);\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest(byte[] injected) throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        cTOs = ByteBuffer.wrap(injected);\n+\n+        System.out.println(\"injecting client hello\");\n+\n+        for (int i = 0; i < 10; i++) { \/\/retry if survived\n+            SSLEngineResult serverResult = serverEngine.unwrap(cTOs, serverIn);\n+            System.out.println(\"server unwrap: \" + serverResult);\n+            runDelegatedTasks(serverResult, serverEngine);\n+        }\n+    }\n+\n+    private void createSSLEngines() throws Exception {\n+\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(true);\n+\n+    }\n+\n+\n+    private void createBuffers() {\n+\n+        serverIn = ByteBuffer.allocateDirect(65536);\n+\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @summary verify correct exception handling in the event of an unparseable\n+ *  DN in the peer CA\n+ * @run main\/othervm TestBadDNForPeerCA12\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.HexFormat;\n+\n+\n+public class TestBadDNForPeerCA12 {\n+\n+    \/\/ Test was originally written for TLSv1.2\n+    private static final String proto = \"TLSv1.2\";\n+\n+    private static final boolean debug = false;\n+\n+    private final SSLContext sslc;\n+\n+    protected SSLEngine clientEngine;     \/\/ client Engine\n+    protected ByteBuffer clientOut;       \/\/ write side of clientEngine\n+    protected ByteBuffer clientIn;        \/\/ read side of clientEngine\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+    protected ByteBuffer sTOc;          \/\/ \"reliable\" transport server->client\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+            + \"\/..\/..\/..\/..\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ this contains a server response with invalid DNs\n+    private static final byte[] serverPayload = (HexFormat.of()).parseHex(\n+        \"160303043d0200005503034a587b770a0a19a66fce09ec3cb61cae9e3307fb1d3\"\n+        + \"df27ce90b578a77f3cda420513bdf9f4b654f140ec3a3d04eaff2d49131a11d93f\"\n+        + \"d99e0f44a6f3349c72b3ec02c00000d0017000000230000ff010001000b0002750\"\n+        + \"0027200026f3082026b30820153a003020102020900edbec8f705af2514300d060\"\n+        + \"92a864886f70d01010b0500303b310b3009060355040613025553310d300b06035\"\n+        + \"5040a0c044a617661311d301b060355040b0c1453756e4a5353452054657374205\"\n+        + \"3657269766365301e170d3138303532323037313831365a170d323830353231303\"\n+        + \"7313831365a3055310b3009060355040613025553310d300b060355040a0c044a6\"\n+        + \"17661311d301b060355040b0c1453756e4a5353452054657374205365726976636\"\n+        + \"53118301606035504030c0f52656772657373696f6e20546573743059301306072\"\n+        + \"a8648ce3d020106082a8648ce3d03010703420004e7d30444d4e5559d5e7a9b3c6\"\n+        + \"773ae7b966481074fb43f96204ead8f73db20aa7118f0f1bdf34ff79f40c908c42\"\n+        + \"bf7a159056b08c98da04908cd8f88201801d3a3233021301f0603551d230418301\"\n+        + \"680140ddd93c9fe4bbd35b7e8997890fbdb5a3ddb154c300d06092a864886f70d0\"\n+        + \"1010b050003820101005393544aacef4ca485988876b12c17545a237076acbbf05\"\n+        + \"d9939dae4a5b64dbf6f356f7b0039efb642a31435a4bef29e48ac3df04dd6e558b\"\n+        + \"478ccd55037442fb8f9300aefc76723ba2d6235a81e9e6bbece25e9cfc86ceb294\"\n+        + \"b6f7422536e0d4c4c12b126e70c48c23f80ba4c7fd72ebc84ec82bc704b318d9cd\"\n+        + \"4bb241f530c05b0ee4b5688fa59c6a53a22f8ca1839bc46715e39f2fc6e4fcfb0c\"\n+        + \"15f05929bdd965f0820599e34f46ffb513e9576c44ba09234255a67f94584f81d8\"\n+        + \"182a578deec7eca62cf9d031b876a69fb8401a5f9c5a2b53565c9c53473d11387f\"\n+        + \"c85338b2b835ba8e986b9608ade3edcd0b3a7abcff6100943c561723d27d7904a1\"\n+        + \"c840c00007003001d2052c61be62f27349c4c1b673a4d8e0fe93817ba4846867d8\"\n+        + \"4aad38c08c60fd6150403004830460221009937abaa6c15159db58454669c8008b\"\n+        + \"c227cfebdb601fa75f1cd7a52ec1feb1e022100b79d3d3cde7d1e2536b43977857\"\n+        + \"8db3d15220200121f35d6eb06d61839f221660d0000ef03400102002a040305030\"\n+        + \"603080708080804080508060809080a080b0401050106010402030303010302020\"\n+        + \"30201020200bd003d303b310b3009110355040613025553310d300b060355040a0\"\n+        + \"c044a617661311d301b060355040b0c1453756e4a5353452054657374205365726\"\n+        + \"9766365003d303b310b3009110355040613025553310d300b060355040a0c044a6\"\n+        + \"17661311d301b060355040b0c1453756e4a5353452054657374205365726976636\"\n+        + \"5003d303b310b3009110355040613025553310d300b060355040a0c044a6176613\"\n+        + \"11d301b060355040b0c1453756e4a535345205465737420536572697663650e000\"\n+        + \"000\");\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        if (debug) {\n+            System.setProperty(\"javax.net.debug\", \"all\");\n+        }\n+\n+        TestBadDNForPeerCA12 test = new TestBadDNForPeerCA12();\n+\n+        try {\n+            test.runTest();\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA12() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest() throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        System.out.println(\"forcing client hello\");\n+        \/\/sTOc = ByteBuffer.wrap(serverHello);\n+        SSLEngineResult clientResult = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientResult, clientEngine);\n+\n+        cTOs.flip();\n+\n+        sTOc = ByteBuffer.wrap(serverPayload);\n+\n+        SSLEngineResult clientHelloResult = clientEngine.unwrap(sTOc, clientIn);\n+        System.out.println(\"client unwrap: \" + clientHelloResult);\n+        runDelegatedTasks(clientHelloResult, clientEngine);\n+\n+        sTOc.compact();\n+        cTOs.compact();\n+\n+        SSLEngineResult clientExGen = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientExGen, clientEngine);\n+\n+    }\n+\n+    private void createSSLEngines() {\n+        clientEngine = sslc.createSSLEngine();\n+\n+        clientEngine.setEnabledProtocols(new String[] {proto});\n+        clientEngine.setUseClientMode(true);\n+    }\n+\n+    private void createBuffers() {\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+        clientIn = ByteBuffer.allocateDirect(65536);\n+\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+\n+        sTOc = ByteBuffer.allocateDirect(65536);\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA12.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}