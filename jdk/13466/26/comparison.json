{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -127,0 +129,1 @@\n+\n@@ -141,2 +144,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                builder.append(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    builder.append(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    builder.append(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -280,1 +287,7 @@\n-            shc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                shc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                shc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n@@ -401,1 +414,7 @@\n-            chc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                chc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateAuthoritiesExtension.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,0 +201,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -204,0 +206,1 @@\n+\n@@ -257,2 +260,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -373,6 +380,17 @@\n-            if (chc.conContext.transport instanceof SSLSocketImpl) {\n-                clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLSocket)chc.conContext.transport);\n-            } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n-                clientAlias = km.chooseEngineClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLEngine)chc.conContext.transport);\n+\n+            try {\n+                if (chc.conContext.transport instanceof SSLSocketImpl) {\n+                    clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n+                        crm.getAuthorities(),\n+                        (SSLSocket) chc.conContext.transport);\n+                } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n+                    clientAlias =\n+                        km.chooseEngineClientAlias(crm.getKeyTypes(),\n+                            crm.getAuthorities(),\n+                            (SSLEngine) chc.conContext.transport);\n+                }\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR,\n+                    \"The distinguished names of the peer's \"\n+                    + \"certificate authorities could not be parsed\",\n+                        iae);\n@@ -515,0 +533,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -518,0 +538,1 @@\n+\n@@ -582,2 +603,7 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" +\n+                        iae);\n+                }\n@@ -720,2 +746,7 @@\n-            chc.peerSupportedAuthorities = crm.getAuthorities();\n-\n+            try {\n+                chc.peerSupportedAuthorities = crm.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The \"\n+                    + \"distinguished names of the peer's certificate \"\n+                    + \"authorities could not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @summary SSLEngine throws IAE during parsing of X500Principal\n+ * @run main\/othervm TestBadDNForPeerCA\n+ * @run main\/othervm -Djavax.net.debug=all TestBadDNForPeerCA\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+\n+public class TestBadDNForPeerCA {\n+\n+    private static final String proto = \"TLSv1.3\";\n+\n+    private final SSLContext sslc;\n+\n+    private SSLEngine serverEngine;     \/\/ server Engine\n+    private ByteBuffer serverIn;        \/\/ read side of serverEngine\n+\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+        + \"\/open\/test\/jdk\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ the following ClientHello contains a certificate with an\n+    \/\/ invalid\/unparseable distinguished name\n+    private static final byte[] payload = Base64.getDecoder().decode(\n+        \"FgMDAcsBAAHHAwPbDfeUCIStPzVIfXuGgCu56dSJOJ6xeus1W44frG5tciDEcBfYt\"\n+            + \"\/PN\/6MFCGojEVcmPw21mVyjYInMo0UozIn4NwBiEwITARMDwCzAK8ypwDDMqMAvA\"\n+            + \"J\/MqgCjAJ4AosAkwCjAI8AnAGsAagBnAEDALsAywC3AMcAmCgAFKsApJcDAFMAJw\"\n+            + \"BMAOQA4ADMAMsAFwA\/ABMAOAJ0AnAA9ADwANgAvAP8BAAEcAAUABQEAAAAAAAoAF\"\n+            + \"gAUAB0AFwAYABkAHgEAAQEBAgEDAQQACwACAQAAEQAJAAcCAAQAAAAAABcAAAAjA\"\n+            + \"AAADQAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFAQYBBAIDAwMBAwICAwIBA\"\n+            + \"gIAKwAFBAMEAwMALQACAQEAMgAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFA\"\n+            + \"QYBBAIDAwMBAwICAwIBAgIALwBrAGkAHQAAAAARACAAZMUAADkwsiaOwcsWAwAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAtAAAAAAAAAAEAADAAAAA=\");\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+\n+        TestBadDNForPeerCA test = new TestBadDNForPeerCA();\n+\n+        try {\n+            test.runTest();\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest() throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        cTOs = ByteBuffer.wrap(payload);\n+\n+        System.out.println(\"injecting client hello\");\n+\n+        for (int i = 0; i < 10; i++) { \/\/retry if survived\n+            SSLEngineResult serverResult = serverEngine.unwrap(cTOs, serverIn);\n+            System.out.println(\"server unwrap: \" + serverResult);\n+            runDelegatedTasks(serverResult, serverEngine);\n+        }\n+    }\n+\n+    private void createSSLEngines() throws Exception {\n+\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(true);\n+\n+    }\n+\n+\n+    private void createBuffers() {\n+\n+        serverIn = ByteBuffer.allocateDirect(65536);\n+\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @library \/javax\/net\/ssl\/templates\n+ * @summary SSLEngine throws IAE during parsing of X500Principal\n+ * @run main\/othervm TestBadDNForPeerCA12\n+ * @run main\/othervm -Djavax.net.debug=all TestBadDNForPeerCA12\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+public class TestBadDNForPeerCA12 {\n+\n+    \/\/ Test was originally written for TLSv1.2\n+    private static final String proto = \"TLSv1.2\";\n+\n+    private final SSLContext sslc;\n+\n+    protected SSLEngine clientEngine;     \/\/ client Engine\n+    protected SSLEngine serverEngine;     \/\/ server Engine\n+    protected ByteBuffer clientOut;       \/\/ write side of clientEngine\n+    protected ByteBuffer serverOut;       \/\/ write side of serverEngine\n+    protected ByteBuffer clientIn;        \/\/ read side of clientEngine\n+    protected ByteBuffer serverIn;        \/\/ read side of serverEngine\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+    protected ByteBuffer sTOc;          \/\/ \"reliable\" transport server->client\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+            + \"\/..\/..\/..\/..\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ this contains a server response with invalid DNs\n+    private static final byte[] serverPayload = Base64.getDecoder().decode(\n+        \"FgMDBSYCAABVAwPU0IrHPvJuIvTO6\/Y+FaKcEJQdaMtrQJqC4jWJ9gnUsyCTfLM7C\"\n+        + \"Cg8lCjgTKFBrf44AEvb5HXOmW56ssFpmgHKbMAsAAANABcAAAAjAAD\/AQABAAsAAfYAA\"\n+        + \"fMAAfAwggHsMIIBj6ADAgECAgRGZGRDMAwGCCqGSM49BAMCBQAwajELMAkGA1UEBhMCV\"\n+        + \"VMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xDjAMBgNVBAoTBUR1bW15M\"\n+        + \"Q4wDAYDVQQLEwVEdW1teTEaMBgGA1UEAxMRZHVtbXkuZXhhbXBsZS5jb20wHhcNMTgwM\"\n+        + \"zI3MjI0MTMxWhcNMjgwMzI2MjI0MTMxWjBqMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ\"\n+        + \"0ExEjAQBgNVBAcTCUN1cGVydGlubzEOMAwGA1UEChMFRHVtbXkxDjAMBgNVBAsTBUR1b\"\n+        + \"W15MRowGAYDVQQDExFkdW1teS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49A\"\n+        + \"wEHA0IABI0sz\/qT0Es+i5F3Ae3czRsbFsMntuLUnntoOGWqLAEPPsLM4GEEDFNzWrlGx\"\n+        + \"BrPsILKArunM5jrkqsfEc1VqfyjITAfMB0GA1UdDgQWBBQLzGwgL76ANOYop3WzQ3XjT\"\n+        + \"9ulQTAMBggqhkjOPQQDAgUAA0kAMEYCIQC9nJbGueD7SkKrJmGQLNE4mFjB4wJKRT8An\"\n+        + \"WoH5BltQAIhAMibIWGQmR1iIAcrdmho9vU6YV9y7Oh6gPeFzGkfYeJnDAAAbwMAHSA\/f\"\n+        + \"EXlxdJD\/2SshJYmnuInis+G7Rl2syMQ3yFunfm7dQQDAEcwRQIgEef2rIOJK6G\/JsM5C\"\n+        + \"wRzANMUhlzqm9IzwtARgMhFpc8CIQDq5Rk317feUvqAgCJ+h9MT20ljXou9SBk3YjA9t\"\n+        + \"Q89EA0AAlgDQAECACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFAQYBBAIDAwMBAwICA\"\n+        + \"wIBAgICJgBsMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZ\"\n+        + \"XJ0aW5vMQ4wDAYDVQQKEwVEdW1teTEOMAwGA1UECxMFRHVtbXkxGjAYBgNVBAMTEWR1b\"\n+        + \"W15LmV4YW1wbGUuY29tAGwwajELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRIwEAYDV\"\n+        + \"QQHDAlDdXBlcnRpbm8xDjAMBgNVBAoMBUR1bW15MQ4wDAYDVQQLDAVEdW1teTEaMBgGA\"\n+        + \"1UEAwwRZHVtbXkuZXhhbXBsZS5jb20AbDBqMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ\"\n+        + \"0ExEjAQBgNVBAcMCUN1cGVydGlubzEOMAwGA1UECgwFRHVtbXkxDjAMBgNVBAsMBUR1b\"\n+        + \"W15MRowGAYDVQQDDBFkdW1teS5leGFtcGxlLmNvbQBsMGoxCzAJBgNVBAYTAlVTMQswC\"\n+        + \"QYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMQ4wDAYDVQQKEwVEdW1teTEOMAwGA\"\n+        + \"1UECxMFRHVtbXkxGjAYBgNVBAMTEWR1bW15LmV4YW1wbGUuY29tAGwwajELMAkGA1UEB\"\n+        + \"hMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xDjAMBgNVBAoTBUR1b\"\n+        + \"W15MQ4wDAYDVQQLEwVEdW1teTEaMBgGA1UEAxMRZHVtbXkuZXhhbXBsZS5jb20OAAAA\"\n+    );\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+\n+        TestBadDNForPeerCA12 test = new TestBadDNForPeerCA12();\n+\n+        try {\n+            test.runTest();\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA12() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest() throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        \/*\n+         * the following was used to generate the serverPayload value\n+         *\/\n+        \/\/ ignore output\n+        \/*SSLEngineResult clientResult = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientResult, clientEngine);\n+        cTOs.flip();\n+\n+        \/\/ ignore output\n+        SSLEngineResult serverResult = serverEngine.unwrap(cTOs, serverIn);\n+        runDelegatedTasks(serverResult, serverEngine);\n+        \/\/ server hello, cert material, etc\n+        SSLEngineResult serverWrapResult = serverEngine.wrap(serverOut, sTOc);\n+        runDelegatedTasks(serverWrapResult, serverEngine);\n+        sTOc.flip();\n+        ByteBuffer sTOcBuff = sTOc.asReadOnlyBuffer();\n+        byte[] serverContents = new byte[sTOcBuff.remaining()];\n+        sTOcBuff.get(serverContents);\n+        System.out.println(\"sw: \" + Base64.getEncoder().encodeToString\n+        (serverContents));\n+         *\/\n+\n+\n+        System.out.println(\"sending client hello\");\n+        SSLEngineResult clientResult = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientResult, clientEngine);\n+\n+        cTOs.flip();\n+\n+        sTOc = ByteBuffer.wrap(serverPayload);\n+\n+        SSLEngineResult clientHelloResult = clientEngine.unwrap(sTOc, clientIn);\n+        System.out.println(\"client unwrap: \" + clientHelloResult);\n+        runDelegatedTasks(clientHelloResult, clientEngine);\n+\n+        \/\/sTOc.compact();\n+        \/\/cTOs.compact();\n+\n+        SSLEngineResult clientExGen = clientEngine.wrap(clientIn, cTOs);\n+        runDelegatedTasks(clientExGen, clientEngine);\n+\n+    }\n+\n+    private void createSSLEngines() {\n+        clientEngine = sslc.createSSLEngine();\n+        clientEngine.setEnabledProtocols(new String[] {proto});\n+        clientEngine.setUseClientMode(true);\n+\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setEnabledProtocols(new String[] {proto});\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(true);\n+    }\n+\n+    private void createBuffers() {\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+        clientIn = ByteBuffer.allocateDirect(65536);\n+\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+\n+        sTOc = ByteBuffer.allocateDirect(65536);\n+\n+        serverOut = ByteBuffer.wrap(\"Hi Client, I'm Server\".getBytes());\n+\n+        serverIn = ByteBuffer.allocateDirect(65536);\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA12.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"}]}