{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"UnixSysInfo.h\"\n@@ -45,0 +46,8 @@\n+tstring_array getCommandArgs(CommandArgProgramNameMode progNameMode) {\n+    tstring_array result;\n+    for (int i = progNameMode == ExcludeProgramName ? 1 : 0; i < argc; i++) {\n+        result.push_back(argv[i]);\n+    }\n+    return result;\n+}\n+\n","filename":"src\/jdk.jpackage\/linux\/native\/common\/LinuxSysInfo.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"UnixSysInfo.h\"\n@@ -80,0 +81,12 @@\n+tstring_array getCommandArgs(CommandArgProgramNameMode progNameMode) {\n+    tstring_array result;\n+    const tstring psnArgPrefix = \"-psn_\";\n+    for (int i = progNameMode == ExcludeProgramName ? 1 : 0; i < argc; i++) {\n+        const tstring arg = argv[i];\n+        if (!tstrings::startsWith(arg, psnArgPrefix)) {\n+            result.push_back(arg);\n+        }\n+    }\n+    return result;\n+}\n+\n","filename":"src\/jdk.jpackage\/macosx\/native\/common\/MacSysInfo.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,9 +59,0 @@\n-tstring_array getCommandArgs(CommandArgProgramNameMode progNameMode) {\n-    tstring_array result;\n-    for (int i = progNameMode == ExcludeProgramName ? 1 : 0; i < argc; i++) {\n-        result.push_back(argv[i]);\n-    }\n-    return result;\n-}\n-\n-\n","filename":"src\/jdk.jpackage\/unix\/native\/common\/UnixSysInfo.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -358,2 +358,7 @@\n-        public void executeAndVerifyOutput(boolean removePath, String... args) {\n-            getExecutor(args).dumpOutput().setRemovePath(removePath).execute();\n+        public void executeAndVerifyOutput(boolean removePath,\n+                List<String> launcherArgs, List<String> appArgs) {\n+            getExecutor(launcherArgs.toArray(new String[0])).dumpOutput()\n+                    .setRemovePath(removePath).execute();\n+            Path outputFile = TKit.workDir().resolve(OUTPUT_FILENAME);\n+            verifyOutputFile(outputFile, appArgs, params);\n+        }\n@@ -361,0 +366,1 @@\n+        public void executeAndVerifyOutput(boolean removePath, String... args) {\n@@ -369,2 +375,1 @@\n-            Path outputFile = TKit.workDir().resolve(OUTPUT_FILENAME);\n-            verifyOutputFile(outputFile, appArgs, params);\n+            executeAndVerifyOutput(removePath, launcherArgs, appArgs);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.ArrayList;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.HelloApp;\n+\n+\/**\n+ * Tests generation of app image and then launches app by passing -psn_1_1\n+ * argument via command line and checks that -psn_1_1 is not passed to\n+ * application. Second test app image is generated -psn_2_2 and then app is\n+ * launched with -psn_1_1 and we should filter -psn_1_1 and keep -psn_2_2.\n+ * See JDK-8255947.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with -psn\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @library base\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm -Xmx512m ArgumentsFilteringTest\n+ *\/\n+public class ArgumentsFilteringTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        TKit.run(args, () -> {\n+            \/\/ Case 1\n+            JPackageCommand cmd = JPackageCommand.helloAppImage();\n+            cmd.executeAndAssertHelloAppImageCreated();\n+            Path launcherPath = cmd.appLauncherPath();\n+            HelloApp.assertApp(launcherPath)\n+                    .executeAndVerifyOutput(false, List.of(\"-psn_1_1\"),\n+                            new ArrayList<>());\n+\n+            \/\/ Case 2\n+            cmd.addArguments(\"--arguments\", \"-psn_2_2\");\n+            cmd.executeAndAssertHelloAppImageCreated();\n+            launcherPath = cmd.appLauncherPath();\n+            HelloApp.assertApp(launcherPath)\n+                    .executeAndVerifyOutput(false, List.of(\"-psn_1_1\"),\n+                            List.of(\"-psn_2_2\"));\n+        });\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/ArgumentsFilteringTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}