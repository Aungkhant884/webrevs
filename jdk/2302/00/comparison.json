{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -2929,1 +2929,0 @@\n-  assert(patch_code == lir_patch_none, \"Patch code not supported\");\n@@ -2932,0 +2931,1 @@\n+\n@@ -2933,1 +2933,8 @@\n-    __ add_const_optimized(dest->as_pointer_register(), addr->base()->as_pointer_register(), addr->disp());\n+    if (patch_code != lir_patch_none) {\n+      PatchingStub* patch = new PatchingStub(_masm, PatchingStub::access_field_id);\n+      __ load_const32(R0, 0); \/\/ patchable int\n+      __ add(dest->as_pointer_register(), addr->base()->as_pointer_register(), R0);\n+      patching_epilog(patch, patch_code, addr->base()->as_register(), info);\n+    } else {\n+      __ add_const_optimized(dest->as_pointer_register(), addr->base()->as_pointer_register(), addr->disp());\n+    }\n@@ -2935,0 +2942,1 @@\n+    assert(patch_code == lir_patch_none, \"Patch code not supported\");\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -111,1 +111,1 @@\n-                                                 Register tmp1, Register tmp2, bool needs_frame) {\n+                                                 Register tmp1, Register tmp2, unsigned int preservation_level) {\n@@ -190,0 +190,5 @@\n+  \/\/ Determine necessary runtime invocation preservation measures\n+  const bool needs_frame = preservation_level >= MacroAssembler::PRESERVATION_FRAME_LR;\n+  assert(preservation_level <= MacroAssembler::PRESERVATION_FRAME_LR,\n+         \"g1_write_barrier_pre doesn't support preservation levels higher than PRESERVATION_FRAME_LR\");\n+\n@@ -209,1 +214,1 @@\n-                                                  Register tmp1, Register tmp2, Register tmp3) {\n+                                                  Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level) {\n@@ -274,0 +279,3 @@\n+  assert(preservation_level == MacroAssembler::PRESERVATION_NONE,\n+         \"g1_write_barrier_post doesn't support preservation levels higher than PRESERVATION_NONE\");\n+\n@@ -282,1 +290,1 @@\n-                                       Register tmp1, Register tmp2, Register tmp3, bool needs_frame) {\n+                                       Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level) {\n@@ -287,2 +295,1 @@\n-  g1_write_barrier_pre(masm, decorators, base, ind_or_offs,\n-                       tmp1, tmp2, tmp3, needs_frame);\n+  g1_write_barrier_pre(masm, decorators, base, ind_or_offs, tmp1, tmp2, tmp3, preservation_level);\n@@ -290,1 +297,1 @@\n-  BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, needs_frame);\n+  BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, preservation_level);\n@@ -301,1 +308,1 @@\n-    g1_write_barrier_post(masm, decorators, base, val, tmp1, tmp2, tmp3);\n+    g1_write_barrier_post(masm, decorators, base, val, tmp1, tmp2, tmp3, preservation_level);\n@@ -307,1 +314,2 @@\n-                                    Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null) {\n+                                    Register tmp1, Register tmp2,\n+                                    unsigned int preservation_level, Label *L_handle_null) {\n@@ -315,1 +323,1 @@\n-  ModRefBarrierSetAssembler::load_at(masm, decorators, type, base, ind_or_offs, dst, tmp1, tmp2, needs_frame, L_handle_null);\n+  ModRefBarrierSetAssembler::load_at(masm, decorators, type, base, ind_or_offs, dst, tmp1, tmp2, preservation_level, L_handle_null);\n@@ -323,1 +331,1 @@\n-                         tmp1, tmp2, needs_frame);\n+                         tmp1, tmp2, preservation_level);\n@@ -328,1 +336,1 @@\n-void G1BarrierSetAssembler::resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2, bool needs_frame) {\n+void G1BarrierSetAssembler::resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2, unsigned int preservation_level) {\n@@ -339,3 +347,1 @@\n-  g1_write_barrier_pre(masm, IN_NATIVE | ON_PHANTOM_OOP_REF,\n-                       noreg, noreg, value,\n-                       tmp1, tmp2, needs_frame);\n+  g1_write_barrier_pre(masm, IN_NATIVE | ON_PHANTOM_OOP_REF, noreg, noreg, value, tmp1, tmp2, preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -45,1 +45,1 @@\n-                            Register tmp1, Register tmp2, bool needs_frame);\n+                            Register tmp1, Register tmp2, unsigned int preservation_level);\n@@ -47,1 +47,1 @@\n-                             Register tmp1, Register tmp2, Register tmp3);\n+                             Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level);\n@@ -51,1 +51,1 @@\n-                            Register tmp1, Register tmp2, Register tmp3, bool needs_frame);\n+                            Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level);\n@@ -64,1 +64,2 @@\n-                       Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null = NULL);\n+                       Register tmp1, Register tmp2, unsigned int preservation_level,\n+                       Label *L_handle_null = NULL);\n@@ -66,1 +67,2 @@\n-  virtual void resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2, bool needs_frame);\n+  virtual void resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2,\n+                               unsigned int preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.hpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -37,1 +37,2 @@\n-                                   Register tmp1, Register tmp2, Register tmp3, bool needs_frame) {\n+                                   Register tmp1, Register tmp2, Register tmp3,\n+                                   unsigned int preservation_level) {\n@@ -70,1 +71,2 @@\n-                                  Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null) {\n+                                  Register tmp1, Register tmp2,\n+                                  unsigned int preservation_level, Label *L_handle_null) {\n@@ -108,1 +110,2 @@\n-                                          Register tmp1, Register tmp2, bool needs_frame) {\n+                                          Register tmp1, Register tmp2,\n+                                          unsigned int preservation_level) {\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -44,1 +44,2 @@\n-                        Register tmp1, Register tmp2, Register tmp3, bool needs_frame);\n+                        Register tmp1, Register tmp2, Register tmp3,\n+                        unsigned int preservation_level);\n@@ -48,1 +49,2 @@\n-                       Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null = NULL);\n+                       Register tmp1, Register tmp2,\n+                       unsigned int preservation_level, Label *L_handle_null = NULL);\n@@ -50,1 +52,2 @@\n-  virtual void resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2, bool needs_frame);\n+  virtual void resolve_jobject(MacroAssembler* masm, Register value, Register tmp1, Register tmp2,\n+                               unsigned int preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -94,1 +94,2 @@\n-                                                Register tmp1, Register tmp2, Register tmp3, bool needs_frame) {\n+                                                Register tmp1, Register tmp2, Register tmp3,\n+                                                unsigned int preservation_level) {\n@@ -99,1 +100,1 @@\n-  BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, needs_frame);\n+  BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/cardTableBarrierSetAssembler_ppc.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -43,1 +43,2 @@\n-                            Register tmp1, Register tmp2, Register tmp3, bool needs_frame);\n+                            Register tmp1, Register tmp2, Register tmp3,\n+                            unsigned int preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/cardTableBarrierSetAssembler_ppc.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -61,1 +61,2 @@\n-                                         Register tmp1, Register tmp2, Register tmp3, bool needs_frame) {\n+                                         Register tmp1, Register tmp2, Register tmp3,\n+                                         unsigned int preservation_level) {\n@@ -63,1 +64,1 @@\n-    oop_store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, needs_frame);\n+    oop_store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, preservation_level);\n@@ -65,1 +66,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, needs_frame);\n+    BarrierSetAssembler::store_at(masm, decorators, type, base, ind_or_offs, val, tmp1, tmp2, tmp3, preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/modRefBarrierSetAssembler_ppc.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n@@ -44,1 +44,1 @@\n-                            Register tmp1, Register tmp2, Register tmp3, bool needs_frame) = 0;\n+                            Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level) = 0;\n@@ -53,1 +53,1 @@\n-                        Register tmp1, Register tmp2, Register tmp3, bool needs_frame);\n+                        Register tmp1, Register tmp2, Register tmp3, unsigned int preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/modRefBarrierSetAssembler_ppc.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2017 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -80,1 +80,1 @@\n-  void load_resolved_reference_at_index(Register result, Register index, Label *L_handle_null = NULL);\n+  void load_resolved_reference_at_index(Register result, Register index, Register tmp1, Label *L_handle_null = NULL);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -478,1 +478,2 @@\n-void InterpreterMacroAssembler::load_resolved_reference_at_index(Register result, Register index, Label *L_handle_null) {\n+void InterpreterMacroAssembler::load_resolved_reference_at_index(Register result, Register index, Register tmp1,\n+                                                                 Label *L_handle_null) {\n@@ -484,2 +485,2 @@\n-  Register tmp = index;  \/\/ reuse\n-  sldi(tmp, index, LogBytesPerHeapOop);\n+  Register tmp2 = index;  \/\/ reuse\n+  sldi(tmp1, index, LogBytesPerHeapOop);\n@@ -494,1 +495,1 @@\n-  cmpd(CCR0, tmp, R0);\n+  cmpd(CCR0, tmp1, R0);\n@@ -500,2 +501,4 @@\n-  add(result, tmp, result);\n-  load_heap_oop(result, arrayOopDesc::base_offset_in_bytes(T_OBJECT), result, tmp, R0, false, 0, L_handle_null);\n+  add(result, tmp1, result);\n+  load_heap_oop(result, arrayOopDesc::base_offset_in_bytes(T_OBJECT), result, tmp1, tmp2,\n+                MacroAssembler::PRESERVATION_FRAME_LR,\n+                0, L_handle_null);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -710,0 +710,24 @@\n+void MacroAssembler::clobber_volatile_gprs(Register excluded_register) {\n+  const int magic_number = 0x42;\n+\n+  \/\/ Preserve stack pointer register (R1_SP) and system thread id register (R13);\n+  \/\/ although they're technically volatile\n+  for (int i = 2; i < 13; i++) {\n+    Register reg = as_Register(i);\n+    if (reg == excluded_register) {\n+      continue;\n+    }\n+\n+    li(reg, magic_number);\n+  }\n+}\n+\n+void MacroAssembler::clobber_carg_stack_slots(Register tmp) {\n+  const int magic_number = 0x42;\n+\n+  li(tmp, magic_number);\n+  for (int m = 1; m <= 8; m++) {\n+    std(tmp, 40 + m * 8, R1_SP);\n+  }\n+}\n+\n@@ -800,1 +824,1 @@\n-void MacroAssembler::save_volatile_gprs(Register dst, int offset) {\n+void MacroAssembler::save_volatile_gprs(Register dst, int offset, bool include_fp_regs, bool include_R3_RET_reg) {\n@@ -802,1 +826,3 @@\n-  std(R3,  offset, dst);   offset += 8;\n+  if (include_R3_RET_reg) {\n+    std(R3, offset, dst);  offset += 8;\n+  }\n@@ -813,14 +839,16 @@\n-  stfd(F0, offset, dst);   offset += 8;\n-  stfd(F1, offset, dst);   offset += 8;\n-  stfd(F2, offset, dst);   offset += 8;\n-  stfd(F3, offset, dst);   offset += 8;\n-  stfd(F4, offset, dst);   offset += 8;\n-  stfd(F5, offset, dst);   offset += 8;\n-  stfd(F6, offset, dst);   offset += 8;\n-  stfd(F7, offset, dst);   offset += 8;\n-  stfd(F8, offset, dst);   offset += 8;\n-  stfd(F9, offset, dst);   offset += 8;\n-  stfd(F10, offset, dst);  offset += 8;\n-  stfd(F11, offset, dst);  offset += 8;\n-  stfd(F12, offset, dst);  offset += 8;\n-  stfd(F13, offset, dst);\n+  if (include_fp_regs) {\n+    stfd(F0, offset, dst);   offset += 8;\n+    stfd(F1, offset, dst);   offset += 8;\n+    stfd(F2, offset, dst);   offset += 8;\n+    stfd(F3, offset, dst);   offset += 8;\n+    stfd(F4, offset, dst);   offset += 8;\n+    stfd(F5, offset, dst);   offset += 8;\n+    stfd(F6, offset, dst);   offset += 8;\n+    stfd(F7, offset, dst);   offset += 8;\n+    stfd(F8, offset, dst);   offset += 8;\n+    stfd(F9, offset, dst);   offset += 8;\n+    stfd(F10, offset, dst);  offset += 8;\n+    stfd(F11, offset, dst);  offset += 8;\n+    stfd(F12, offset, dst);  offset += 8;\n+    stfd(F13, offset, dst);\n+  }\n@@ -830,1 +858,1 @@\n-void MacroAssembler::restore_volatile_gprs(Register src, int offset) {\n+void MacroAssembler::restore_volatile_gprs(Register src, int offset, bool include_fp_regs, bool include_R3_RET_reg) {\n@@ -832,1 +860,3 @@\n-  ld(R3,  offset, src);   offset += 8;\n+  if (include_R3_RET_reg) {\n+    ld(R3,  offset, src);   offset += 8;\n+  }\n@@ -843,14 +873,16 @@\n-  lfd(F0, offset, src);   offset += 8;\n-  lfd(F1, offset, src);   offset += 8;\n-  lfd(F2, offset, src);   offset += 8;\n-  lfd(F3, offset, src);   offset += 8;\n-  lfd(F4, offset, src);   offset += 8;\n-  lfd(F5, offset, src);   offset += 8;\n-  lfd(F6, offset, src);   offset += 8;\n-  lfd(F7, offset, src);   offset += 8;\n-  lfd(F8, offset, src);   offset += 8;\n-  lfd(F9, offset, src);   offset += 8;\n-  lfd(F10, offset, src);  offset += 8;\n-  lfd(F11, offset, src);  offset += 8;\n-  lfd(F12, offset, src);  offset += 8;\n-  lfd(F13, offset, src);\n+  if (include_fp_regs) {\n+    lfd(F0, offset, src);   offset += 8;\n+    lfd(F1, offset, src);   offset += 8;\n+    lfd(F2, offset, src);   offset += 8;\n+    lfd(F3, offset, src);   offset += 8;\n+    lfd(F4, offset, src);   offset += 8;\n+    lfd(F5, offset, src);   offset += 8;\n+    lfd(F6, offset, src);   offset += 8;\n+    lfd(F7, offset, src);   offset += 8;\n+    lfd(F8, offset, src);   offset += 8;\n+    lfd(F9, offset, src);   offset += 8;\n+    lfd(F10, offset, src);  offset += 8;\n+    lfd(F11, offset, src);  offset += 8;\n+    lfd(F12, offset, src);  offset += 8;\n+    lfd(F13, offset, src);\n+  }\n@@ -3035,1 +3067,1 @@\n-void MacroAssembler::resolve_jobject(Register value, Register tmp1, Register tmp2, bool needs_frame) {\n+void MacroAssembler::resolve_jobject(Register value, Register tmp1, Register tmp2, unsigned int preservation_level) {\n@@ -3037,1 +3069,1 @@\n-  bs->resolve_jobject(this, value, tmp1, tmp2, needs_frame);\n+  bs->resolve_jobject(this, value, tmp1, tmp2, preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":67,"deletions":35,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -42,0 +42,8 @@\n+  \/\/ Workaround (enum class is new in C++11; thus unavailable in previous versions)\n+  enum RuntimeInvocationPreservationLevel {\n+    PRESERVATION_NONE,\n+    PRESERVATION_FRAME_LR,\n+    PRESERVATION_FRAME_LR_GP_REGS,\n+    PRESERVATION_FRAME_LR_GP_FP_REGS\n+  };\n+\n@@ -263,0 +271,7 @@\n+\n+  \/\/ Clobbers all volatile, (non-floating-point) general-purpose registers for debugging purposes.\n+  \/\/ This is especially useful for making calls to the JRT in places in which this haven't been done before;\n+  \/\/ e.g. with the introduction of LRBs (load reference barriers) for concurrent garbage collection.\n+  void clobber_volatile_gprs(Register excluded_register = noreg);\n+  void clobber_carg_stack_slots(Register tmp);\n+\n@@ -265,3 +280,11 @@\n-  enum { num_volatile_regs = 11 + 14 }; \/\/ GPR + FPR\n-  void save_volatile_gprs(   Register dst_base, int offset);\n-  void restore_volatile_gprs(Register src_base, int offset);\n+\n+  enum {\n+    num_volatile_gp_regs = 11,\n+    num_volatile_fp_regs = 14,\n+    num_volatile_regs = num_volatile_gp_regs + num_volatile_fp_regs\n+  };\n+\n+  void save_volatile_gprs(   Register dst_base, int offset,\n+                             bool include_fp_regs = true, bool include_R3_RET_reg = true);\n+  void restore_volatile_gprs(Register src_base, int offset,\n+                             bool include_fp_regs = true, bool include_R3_RET_reg = true);\n@@ -648,1 +671,1 @@\n-  void resolve_jobject(Register value, Register tmp1, Register tmp2, bool needs_frame);\n+  void resolve_jobject(Register value, Register tmp1, Register tmp2, unsigned int preservation_level);\n@@ -689,1 +712,2 @@\n-                              Register tmp1, Register tmp2, Register tmp3, bool needs_frame);\n+                              Register tmp1, Register tmp2, Register tmp3,\n+                              unsigned int preservation_level);\n@@ -692,1 +716,2 @@\n-                             Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null = NULL);\n+                             Register tmp1, Register tmp2,\n+                             unsigned int preservation_level, Label *L_handle_null = NULL);\n@@ -698,2 +723,2 @@\n-                            Register tmp1, Register tmp2, bool needs_frame,\n-                            DecoratorSet decorators = 0, Label *L_handle_null = NULL);\n+                            Register tmp1, Register tmp2,\n+                            unsigned int preservation_level, DecoratorSet decorators = 0, Label *L_handle_null = NULL);\n@@ -702,2 +727,2 @@\n-                             Register tmp1, Register tmp2, Register tmp3, bool needs_frame,\n-                             DecoratorSet decorators = 0);\n+                             Register tmp1, Register tmp2, Register tmp3,\n+                             unsigned int preservation_level, DecoratorSet decorators = 0);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":37,"deletions":12,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2015 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -353,1 +353,2 @@\n-                                            Register tmp1, Register tmp2, Register tmp3, bool needs_frame) {\n+                                            Register tmp1, Register tmp2, Register tmp3,\n+                                            unsigned int preservation_level) {\n@@ -362,1 +363,1 @@\n-                                      tmp1, tmp2, tmp3, needs_frame);\n+                                      tmp1, tmp2, tmp3, preservation_level);\n@@ -366,1 +367,1 @@\n-                 tmp1, tmp2, tmp3, needs_frame);\n+                 tmp1, tmp2, tmp3, preservation_level);\n@@ -372,1 +373,2 @@\n-                                           Register tmp1, Register tmp2, bool needs_frame, Label *L_handle_null) {\n+                                           Register tmp1, Register tmp2,\n+                                           unsigned int preservation_level, Label *L_handle_null) {\n@@ -381,1 +383,1 @@\n-                                     tmp1, tmp2, needs_frame, L_handle_null);\n+                                     tmp1, tmp2, preservation_level, L_handle_null);\n@@ -385,1 +387,1 @@\n-                tmp1, tmp2, needs_frame, L_handle_null);\n+                tmp1, tmp2, preservation_level, L_handle_null);\n@@ -391,2 +393,4 @@\n-                                          bool needs_frame, DecoratorSet decorators, Label *L_handle_null) {\n-  access_load_at(T_OBJECT, IN_HEAP | decorators, s1, offs, d, tmp1, tmp2, needs_frame, L_handle_null);\n+                                          unsigned int preservation_level,\n+                                          DecoratorSet decorators, Label *L_handle_null) {\n+  access_load_at(T_OBJECT, decorators | IN_HEAP, s1, offs, d, tmp1, tmp2,\n+                 preservation_level, L_handle_null);\n@@ -397,2 +401,3 @@\n-                                           bool needs_frame, DecoratorSet decorators) {\n-  access_store_at(T_OBJECT, IN_HEAP | decorators, s1, offs, d, tmp1, tmp2, tmp3, needs_frame);\n+                                           unsigned int preservation_level,\n+                                           DecoratorSet decorators) {\n+  access_store_at(T_OBJECT, decorators | IN_HEAP, s1, offs, d, tmp1, tmp2, tmp3, preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2017 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -176,1 +176,1 @@\n-  assert_different_registers(recv, method_temp, temp2);  \/\/ temp3 is only passed on\n+  assert_different_registers(recv, method_temp, temp2, temp3);\n@@ -181,0 +181,5 @@\n+\n+  const unsigned int preservation_level = for_compiler_entry\n+    ? MacroAssembler::PRESERVATION_FRAME_LR_GP_FP_REGS\n+    : MacroAssembler::PRESERVATION_FRAME_LR;\n+\n@@ -182,1 +187,1 @@\n-                   temp2, noreg, false, IS_NOT_NULL);\n+                   temp2, temp3, preservation_level, IS_NOT_NULL);\n@@ -185,1 +190,1 @@\n-                   temp2, noreg, false, IS_NOT_NULL);\n+                   temp2, temp3, preservation_level, IS_NOT_NULL);\n@@ -188,1 +193,1 @@\n-                   temp2, noreg, false, IS_NOT_NULL);\n+                   temp2, temp3, preservation_level, IS_NOT_NULL);\n@@ -234,2 +239,1 @@\n-  Register argslot    = R3;\n-  Register temp1      = R6;\n+  Register temp1      = R30;\n@@ -312,1 +316,1 @@\n-  Register temp1 = (for_compiler_entry ? R25_tmp5 : R7);\n+  Register temp1 = (for_compiler_entry ? R25_tmp5 : R31);\n@@ -319,0 +323,4 @@\n+  const unsigned int preservation_level = for_compiler_entry\n+    ? MacroAssembler::PRESERVATION_FRAME_LR_GP_FP_REGS\n+    : MacroAssembler::PRESERVATION_FRAME_LR;\n+\n@@ -336,12 +344,0 @@\n-      __ verify_oop(receiver_reg, FILE_AND_LINE);\n-      if (iid == vmIntrinsics::_linkToSpecial) {\n-        \/\/ Don't actually load the klass; just null-check the receiver.\n-        __ null_check_throw(receiver_reg, -1, temp1,\n-                            Interpreter::throw_NullPointerException_entry());\n-      } else {\n-        \/\/ load receiver klass itself\n-        __ null_check_throw(receiver_reg, oopDesc::klass_offset_in_bytes(), temp1,\n-                            Interpreter::throw_NullPointerException_entry());\n-        __ load_klass(temp1_recv_klass, receiver_reg);\n-        __ verify_klass_ptr(temp1_recv_klass);\n-      }\n@@ -349,4 +345,9 @@\n-      \/\/ The receiver for the MemberName must be in receiver_reg.\n-      \/\/ Check the receiver against the MemberName.clazz\n-      if (VerifyMethodHandles && iid == vmIntrinsics::_linkToSpecial) {\n-        \/\/ Did not load it above...\n+      __ verify_oop(receiver_reg, FILE_AND_LINE);\n+\n+      const int klass_offset = iid == vmIntrinsics::_linkToSpecial\n+        ? -1                                  \/\/ enforce receiver null check\n+        : oopDesc::klass_offset_in_bytes();   \/\/ regular null-checking behavior\n+\n+      __ null_check_throw(receiver_reg, klass_offset, temp1, Interpreter::throw_NullPointerException_entry());\n+\n+      if (iid != vmIntrinsics::_linkToSpecial || VerifyMethodHandles) {\n@@ -356,0 +357,1 @@\n+\n@@ -359,0 +361,1 @@\n+\n@@ -360,1 +363,1 @@\n-                         temp3, noreg, false, IS_NOT_NULL);\n+                         temp3, temp4, preservation_level, IS_NOT_NULL);\n@@ -378,2 +381,0 @@\n-    \/\/  O5_savedSP - interpreter linkage (if interpreted)\n-    \/\/  O0..O5 - compiler arguments (if compiled)\n@@ -388,1 +389,1 @@\n-                       temp3, noreg, false, IS_NOT_NULL);\n+                       temp3, temp4, preservation_level, IS_NOT_NULL);\n@@ -397,1 +398,1 @@\n-                       temp3, noreg, false, IS_NOT_NULL);\n+                       temp3, temp4, preservation_level, IS_NOT_NULL);\n@@ -440,1 +441,1 @@\n-                       temp3, noreg, false, IS_NOT_NULL);\n+                       temp3, temp4, preservation_level, IS_NOT_NULL);\n@@ -470,1 +471,0 @@\n-    \/\/   O5_savedSP (if interpreted)\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -2433,1 +2433,1 @@\n-    __ resolve_jobject(R3_RET, r_temp_1, r_temp_2, \/* needs_frame *\/ false);\n+    __ resolve_jobject(R3_RET, r_temp_1, r_temp_2, MacroAssembler::PRESERVATION_NONE);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n@@ -2229,1 +2229,6 @@\n-    __ load_heap_oop(R10_oop, R8_offset, R3_from, R12_tmp, noreg, false, AS_RAW, &store_null);\n+    {\n+      Register tmp1 = R12_tmp, tmp2 = R11_klass;\n+      __ load_heap_oop(R10_oop, R8_offset, R3_from, tmp1, tmp2,\n+                       MacroAssembler::PRESERVATION_FRAME_LR_GP_REGS,\n+                       AS_RAW, &store_null);\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2015, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2015, 2021 SAP SE. All rights reserved.\n@@ -408,1 +408,1 @@\n-    __ resolve_jobject(R3_RET, R11_scratch1, R31, \/* needs_frame *\/ true); \/\/ kills R31\n+    __ resolve_jobject(R3_RET, R11_scratch1, R31, MacroAssembler::PRESERVATION_FRAME_LR); \/\/ kills R31\n@@ -528,2 +528,3 @@\n-  __ load_heap_oop(R3_RET, referent_offset, R3_RET,\n-                   \/* non-volatile temp *\/ R31, R11_scratch1, true, ON_WEAK_OOP_REF);\n+  __ load_heap_oop(R3_RET, referent_offset, R3_RET, \/* non-volatile temp *\/ R31, R11_scratch1,\n+                   MacroAssembler::PRESERVATION_FRAME_LR,\n+                   ON_WEAK_OOP_REF);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2013, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2013, 2021 SAP SE. All rights reserved.\n@@ -71,1 +71,1 @@\n-  __ store_heap_oop(val, offset, base, tmp1, tmp2, tmp3, false, decorators);\n+  __ store_heap_oop(val, offset, base, tmp1, tmp2, tmp3, MacroAssembler::PRESERVATION_NONE, decorators);\n@@ -83,1 +83,1 @@\n-  __ load_heap_oop(dst, offset, base, tmp1, tmp2, false, decorators);\n+  __ load_heap_oop(dst, offset, base, tmp1, tmp2, MacroAssembler::PRESERVATION_NONE, decorators);\n@@ -308,1 +308,2 @@\n-  const Register Rscratch = R11_scratch1;\n+  const Register tmp1 = R11_scratch1,\n+                 tmp2 = R12_scratch2;\n@@ -313,2 +314,2 @@\n-  __ get_cache_index_at_bcp(Rscratch, 1, index_size);  \/\/ Load index.\n-  __ load_resolved_reference_at_index(R17_tos, Rscratch, &is_null);\n+  __ get_cache_index_at_bcp(tmp1, 1, index_size);  \/\/ Load index.\n+  __ load_resolved_reference_at_index(R17_tos, tmp1, tmp2, &is_null);\n@@ -317,4 +318,4 @@\n-  int simm16_rest = __ load_const_optimized(Rscratch, Universe::the_null_sentinel_addr(), R0, true);\n-  __ ld(Rscratch, simm16_rest, Rscratch);\n-  __ resolve_oop_handle(Rscratch);\n-  __ cmpld(CCR0, R17_tos, Rscratch);\n+  int simm16_rest = __ load_const_optimized(tmp1, Universe::the_null_sentinel_addr(), R0, true);\n+  __ ld(tmp1, simm16_rest, tmp1);\n+  __ resolve_oop_handle(tmp1);\n+  __ cmpld(CCR0, R17_tos, tmp1);\n@@ -2430,1 +2431,1 @@\n-                 Rbc           = R6_ARG4,\n+                 Rbc           = R30,\n@@ -2465,1 +2466,1 @@\n-  __ cmpwi(CCR6, Rscratch, 1); \/\/ Volatile?\n+  __ cmpwi(CCR2, Rscratch, 1); \/\/ Volatile?\n@@ -2516,1 +2517,1 @@\n-    __ beq(CCR6, acquire_double); \/\/ Volatile?\n+    __ beq(CCR2, acquire_double); \/\/ Volatile?\n@@ -2537,1 +2538,1 @@\n-    __ beq(CCR6, acquire_float); \/\/ Volatile?\n+    __ beq(CCR2, acquire_float); \/\/ Volatile?\n@@ -2556,1 +2557,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2569,1 +2570,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2583,1 +2584,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2597,1 +2598,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2610,1 +2611,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2623,1 +2624,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -2638,1 +2639,1 @@\n-  __ beq(CCR6, Lacquire); \/\/ Volatile?\n+  __ beq(CCR2, Lacquire); \/\/ Volatile?\n@@ -3335,1 +3336,2 @@\n-  assert_different_registers(Rret_addr, Rscratch);\n+  \/\/ Rret_addr and Rindex have to be distinct as Rret_addr is used as a second temp register\n+  assert_different_registers(Rret_addr, Rindex, Rscratch);\n@@ -3344,0 +3346,2 @@\n+    Register reference = Rret_addr; \/\/ safe to use here; first use comes later\n+\n@@ -3349,3 +3353,3 @@\n-    __ load_resolved_reference_at_index(Rscratch, Rindex);\n-    __ verify_oop(Rscratch);\n-    __ push_ptr(Rscratch);\n+    __ load_resolved_reference_at_index(reference, Rindex, Rscratch);\n+    __ verify_oop(reference);\n+    __ push_ptr(reference);\n@@ -3652,1 +3656,1 @@\n-                 Rflags    = R4_ARG2,\n+                 Rflags    = R31,\n@@ -3676,1 +3680,1 @@\n-                 Rflags    = R4_ARG2,\n+                 Rflags    = R31,\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":31,"deletions":27,"binary":false,"changes":58,"status":"modified"}]}