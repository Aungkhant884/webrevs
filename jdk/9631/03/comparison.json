{"files":[{"patch":"@@ -877,1 +877,1 @@\n-    BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c\n+    BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -806,2 +806,2 @@\n-static bool are_handlers_equal(const struct sigaction* sa,\n-                               const struct sigaction* expected_sa) {\n+static bool are_actions_equal(const struct sigaction* sa,\n+                              const struct sigaction* expected_sa) {\n@@ -817,2 +817,3 @@\n-\/\/  setup matches what we originally installed.\n-static void check_signal_handler(int sig) {\n+\/\/ setup matches what we originally installed.  Return true if signal handler\n+\/\/ is different.  Otherwise, return false;\n+static bool check_signal_handler(int sig) {\n@@ -823,1 +824,1 @@\n-    return;\n+    return false;\n@@ -835,1 +836,1 @@\n-    if (os_sigaction == NULL) return;\n+    if (os_sigaction == NULL) return false;\n@@ -841,1 +842,3 @@\n-  if (!are_handlers_equal(&act, expected_act)) {\n+  \/\/ Ignore if the handler is our own crash handler.\n+  if (!are_actions_equal(&act, expected_act) &&\n+      !(HANDLER_IS(get_signal_handler(&act), VMError::crash_handler_address))) {\n@@ -844,2 +847,0 @@\n-    \/\/ - print all signal handlers. As part of that printout, details will be printed\n-    \/\/   about any modified handlers.\n@@ -848,1 +849,0 @@\n-    os::print_signal_handlers(tty, buf, O_BUFLEN);\n@@ -850,1 +850,0 @@\n-    tty->print_cr(\"Consider using jsig library.\");\n@@ -856,0 +855,1 @@\n+    return true;\n@@ -857,0 +857,1 @@\n+  return false;\n@@ -899,7 +900,9 @@\n-  check_signal_handler(SIGSEGV);\n-  check_signal_handler(SIGILL);\n-  check_signal_handler(SIGFPE);\n-  check_signal_handler(SIGBUS);\n-  check_signal_handler(SIGPIPE);\n-  check_signal_handler(SIGXFSZ);\n-  PPC64_ONLY(check_signal_handler(SIGTRAP);)\n+  bool print_handlers = false;\n+\n+  print_handlers |= check_signal_handler(SIGSEGV);\n+  print_handlers |= check_signal_handler(SIGILL);\n+  print_handlers |= check_signal_handler(SIGFPE);\n+  print_handlers |= check_signal_handler(SIGBUS);\n+  print_handlers |= check_signal_handler(SIGPIPE);\n+  print_handlers |= check_signal_handler(SIGXFSZ);\n+  PPC64_ONLY(print_handlers |= check_signal_handler(SIGTRAP);)\n@@ -910,4 +913,4 @@\n-    check_signal_handler(SHUTDOWN1_SIGNAL);\n-    check_signal_handler(SHUTDOWN2_SIGNAL);\n-    check_signal_handler(SHUTDOWN3_SIGNAL);\n-    check_signal_handler(BREAK_SIGNAL);\n+    print_handlers |= check_signal_handler(SHUTDOWN1_SIGNAL);\n+    print_handlers |= check_signal_handler(SHUTDOWN2_SIGNAL);\n+    print_handlers |= check_signal_handler(SHUTDOWN3_SIGNAL);\n+    print_handlers |= check_signal_handler(BREAK_SIGNAL);\n@@ -916,1 +919,10 @@\n-  check_signal_handler(PosixSignals::SR_signum);\n+  print_handlers |= check_signal_handler(PosixSignals::SR_signum);\n+\n+  if (print_handlers) {\n+    \/\/ If we had a mismatch:\n+    \/\/ - print all signal handlers. As part of that printout, details will be printed\n+    \/\/   about any modified handlers.\n+    char buf[O_BUFLEN];\n+    os::print_signal_handlers(tty, buf, O_BUFLEN);\n+    tty->print_cr(\"Consider using jsig library.\");\n+  }\n@@ -1413,1 +1425,1 @@\n-      if (!are_handlers_equal(&current_act, expected_act)) {\n+      if (!are_actions_equal(&current_act, expected_act)) {\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":36,"deletions":24,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestPosixSig.java\n+ * @bug 8285792\n+ * @summary fix issues with signal handler modification checks\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run driver TestPosixSig\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestPosixSig {\n+\n+    \/\/ Check that a substring occurs exactly once.\n+    public static boolean occursOnce(String source, String substring) {\n+        int index = source.indexOf(substring);\n+        if (index == -1) return false;\n+        return (source.indexOf(substring, index + 1) == -1);\n+    }\n+\n+    private static native void changeSigActionFor(int val);\n+\n+    public static void main(String[] args) throws Throwable {\n+        \/\/ Get the library path property.\n+        String libpath = System.getProperty(\"java.library.path\");\n+\n+        if (args.length == 0) {\n+\n+            \/\/ Create a new java process for the TestPsig Java\/JNI test\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+CheckJNICalls\",\n+                \"-Djava.library.path=\" + libpath + \":.\",\n+                \"TestPosixSig\", \"dummy\");\n+\n+            \/\/ Start the process and check the output\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            String outputString = output.getOutput();\n+            if (!occursOnce(outputString, \"SIGFPE: sig_handler in \") ||\n+                !occursOnce(outputString, \"SIGILL: sig_handler in \")) {\n+                System.out.println(\"output: \" + outputString);\n+                throw new RuntimeException(\"Test failed, bad output.\");\n+            }\n+            output.shouldHaveExitValue(0);\n+\n+        } else {\n+            System.loadLibrary(\"TestPsig\");\n+            TestPosixSig.changeSigActionFor(8); \/\/ SIGFPE\n+            TestPosixSig.changeSigActionFor(4); \/\/ SIGILL\n+            Thread.sleep(600);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/TestPosixSig.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <jni.h>\n+#include <signal.h>\n+#include <sys\/ucontext.h>\n+#include <errno.h>\n+#include <string.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+void sig_handler(int sig, siginfo_t *info, ucontext_t *context) {\n+\n+    printf( \" HANDLER (1) \" );\n+}\n+\n+JNIEXPORT void JNICALL Java_TestPosixSig_changeSigActionFor(JNIEnv *env, jclass klass, jint val) {\n+    struct sigaction act;\n+    act.sa_handler = (void (*)())sig_handler;\n+    sigemptyset(&act.sa_mask);\n+    act.sa_flags = 0;\n+    int retval = sigaction(val, &act, 0);\n+    if (retval != 0) {\n+        printf(\"ERROR: failed to set %d signal handler error=%s\\n\", val, strerror(errno));\n+    }\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/libTestPsig.c","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}