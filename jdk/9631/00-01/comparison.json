{"files":[{"patch":"@@ -806,2 +806,2 @@\n-static bool are_handlers_equal(const struct sigaction* sa,\n-                               const struct sigaction* expected_sa) {\n+static bool are_actions_equal(const struct sigaction* sa,\n+                              const struct sigaction* expected_sa) {\n@@ -843,1 +843,1 @@\n-  if (!are_handlers_equal(&act, expected_act) &&\n+  if (!are_actions_equal(&act, expected_act) &&\n@@ -1425,1 +1425,1 @@\n-      if (!are_handlers_equal(&current_act, expected_act)) {\n+      if (!are_actions_equal(&current_act, expected_act)) {\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @compile TestPsig.java\n@@ -46,0 +45,2 @@\n+    private static native void changeSigActionFor(int val);\n+\n@@ -47,1 +48,1 @@\n-        \/\/ Get the JDK, library and class path properties\n+        \/\/ Get the library path property.\n@@ -50,0 +51,7 @@\n+        if (args.length == 0) {\n+\n+            \/\/ Create a new java process for the TestPsig Java\/JNI test\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+CheckJNICalls\",\n+                \"-Djava.library.path=\" + libpath + \":.\",\n+                \"TestPosixSig\", \"dummy\");\n@@ -51,5 +59,9 @@\n-        \/\/ Create a new java process for the TestPsig Java\/JNI test\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-XX:+CheckJNICalls\",\n-            \"-Djava.library.path=\" + libpath + \":.\",\n-            \"TestPsig\");\n+            \/\/ Start the process and check the output\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            String outputString = output.getOutput();\n+            if (!occursOnce(outputString, \"SIGPIPE: sig_handler in \") ||\n+                !occursOnce(outputString, \"SIGILL: sig_handler in \")) {\n+                System.out.println(\"output: \" + outputString);\n+                throw new RuntimeException(\"Test failed, bad output.\");\n+            }\n+            output.shouldHaveExitValue(0);\n@@ -57,7 +69,5 @@\n-        \/\/ Start the process and check the output\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        String outputString = output.getOutput();\n-        if (!occursOnce(outputString, \"SIGFPE: sig_handler in \") ||\n-            !occursOnce(outputString, \"SIGILL: sig_handler in \")) {\n-            System.out.println(\"output: \" + outputString);\n-            throw new RuntimeException(\"Test failed, bad output.\");\n+\t} else {\n+            System.loadLibrary(\"TestPsig\");\n+            TestPosixSig.changeSigActionFor(13); \/\/ SIGPIPE\n+            TestPosixSig.changeSigActionFor(4);  \/\/ SIGILL\n+            Thread.sleep(600);\n@@ -65,1 +75,0 @@\n-        output.shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/TestPosixSig.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class TestPsig {\n-    static {\n-        System.loadLibrary(\"TestPsig\");\n-    }\n-    public static native void doSomething(int val);\n-    public static void main(String[] args) throws InterruptedException {\n-        TestPsig.doSomething(8); \/\/ SIGFPE\n-        TestPsig.doSomething(4); \/\/ SIGILL\n-        Thread.sleep(600);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/TestPsig.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -40,1 +40,1 @@\n-JNIEXPORT void JNICALL Java_TestPsig_doSomething(JNIEnv *env, jclass klass, jint val) {\n+JNIEXPORT void JNICALL Java_TestPosixSig_changeSigActionFor(JNIEnv *env, jclass klass, jint val) {\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/libTestPsig.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}