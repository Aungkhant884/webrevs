{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-  if (UsePerfData && (size_policy() != NULL)) {\n+  if (UsePerfData && (size_policy() != nullptr)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/gcAdaptivePolicyCounters.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-  guarantee(thr != NULL, \"No thread\");\n+  guarantee(thr != nullptr, \"No thread\");\n@@ -196,1 +196,1 @@\n-  guarantee(thr != NULL, \"No thread\");\n+  guarantee(thr != nullptr, \"No thread\");\n@@ -216,1 +216,1 @@\n-  guarantee(thr != NULL, \"No thread\");\n+  guarantee(thr != nullptr, \"No thread\");\n@@ -590,2 +590,2 @@\n-    if (intersection.start() == NULL ||\n-        intersection.end() == NULL   ||\n+    if (intersection.start() == nullptr ||\n+        intersection.end() == nullptr   ||\n@@ -666,1 +666,1 @@\n-    if (intersection.start() == NULL || intersection.end() == NULL) {\n+    if (intersection.start() == nullptr || intersection.end() == nullptr) {\n@@ -786,1 +786,1 @@\n-  if (p != NULL) {\n+  if (p != nullptr) {\n@@ -792,1 +792,1 @@\n-        p = NULL;\n+        p = nullptr;\n@@ -798,1 +798,1 @@\n-  if (p != NULL) {\n+  if (p != nullptr) {\n@@ -808,1 +808,1 @@\n-  if (p != NULL && !os::numa_has_static_binding() ) {\n+  if (p != nullptr && !os::numa_has_static_binding() ) {\n@@ -813,1 +813,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -914,1 +914,1 @@\n-    if (e == NULL) {\n+    if (e == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    LGRPSpace(int l, size_t alignment) : _lgrp_id(l), _allocation_failed(false), _last_page_scanned(NULL) {\n+    LGRPSpace(int l, size_t alignment) : _lgrp_id(l), _allocation_failed(false), _last_page_scanned(nullptr) {\n@@ -201,1 +201,1 @@\n-                          WorkerThreads* pretouch_workers = NULL);\n+                          WorkerThreads* pretouch_workers = nullptr);\n@@ -226,1 +226,1 @@\n-  \/\/ Allocation (return NULL if full)\n+  \/\/ Allocation (return null if full)\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-  _mangler(NULL),\n+  _mangler(nullptr),\n@@ -42,3 +42,3 @@\n-  _bottom(NULL),\n-  _top(NULL),\n-  _end(NULL)\n+  _bottom(nullptr),\n+  _top(nullptr),\n+  _end(nullptr)\n@@ -206,1 +206,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -259,1 +259,1 @@\n-  HeapWord* prev_p = NULL;\n+  HeapWord* prev_p = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-                          WorkerThreads* pretouch_workers = NULL);\n+                          WorkerThreads* pretouch_workers = nullptr);\n@@ -140,1 +140,1 @@\n-  \/\/ Allocation (return NULL if full)\n+  \/\/ Allocation (return null if full)\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  if (_virtual_space != NULL && _virtual_space->expand_by(_reserved_byte_size)) {\n+  if (_virtual_space != nullptr && _virtual_space->expand_by(_reserved_byte_size)) {\n@@ -71,1 +71,1 @@\n-  if (_virtual_space != NULL) {\n+  if (_virtual_space != nullptr) {\n@@ -73,1 +73,1 @@\n-    _virtual_space = NULL;\n+    _virtual_space = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-  _region_start(NULL), _region_size(0), _beg_bits(), _end_bits(), _virtual_space(NULL), _reserved_byte_size(0)\n+  _region_start(nullptr), _region_size(0), _beg_bits(), _end_bits(), _virtual_space(nullptr), _reserved_byte_size(0)\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,4 +59,4 @@\n-PSYoungGen*  ParallelScavengeHeap::_young_gen = NULL;\n-PSOldGen*    ParallelScavengeHeap::_old_gen = NULL;\n-PSAdaptiveSizePolicy* ParallelScavengeHeap::_size_policy = NULL;\n-PSGCAdaptivePolicyCounters* ParallelScavengeHeap::_gc_policy_counters = NULL;\n+PSYoungGen*  ParallelScavengeHeap::_young_gen = nullptr;\n+PSOldGen*    ParallelScavengeHeap::_old_gen = nullptr;\n+PSAdaptiveSizePolicy* ParallelScavengeHeap::_size_policy = nullptr;\n+PSGCAdaptivePolicyCounters* ParallelScavengeHeap::_gc_policy_counters = nullptr;\n@@ -286,1 +286,1 @@\n-  while (result == NULL) {\n+  while (result == nullptr) {\n@@ -303,1 +303,1 @@\n-      if (result != NULL) {\n+      if (result != nullptr) {\n@@ -309,1 +309,1 @@\n-      if (result != NULL) {\n+      if (result != nullptr) {\n@@ -314,1 +314,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -336,1 +336,1 @@\n-          return NULL;\n+          return nullptr;\n@@ -341,1 +341,1 @@\n-    if (result == NULL) {\n+    if (result == nullptr) {\n@@ -355,1 +355,1 @@\n-          assert(op.result() == NULL, \"must be NULL if gc_locked() is true\");\n+          assert(op.result() == nullptr, \"must be null if gc_locked() is true\");\n@@ -361,1 +361,1 @@\n-        \/\/ this path is NULL) and the most recent collection has exceeded the\n+        \/\/ this path is null) and the most recent collection has exceeded the\n@@ -364,1 +364,1 @@\n-        \/\/ will be thrown (return a NULL ignoring the contents of\n+        \/\/ will be thrown (return a null ignoring the contents of\n@@ -376,2 +376,2 @@\n-          log_trace(gc)(\"ParallelScavengeHeap::mem_allocate: return NULL because gc_overhead_limit_exceeded is set\");\n-          if (op.result() != NULL) {\n+          log_trace(gc)(\"ParallelScavengeHeap::mem_allocate: return null because gc_overhead_limit_exceeded is set\");\n+          if (op.result() != nullptr) {\n@@ -380,1 +380,1 @@\n-          return NULL;\n+          return nullptr;\n@@ -390,1 +390,1 @@\n-    if ((result == NULL) && (QueuedAllocationWarningCount > 0) &&\n+    if ((result == nullptr) && (QueuedAllocationWarningCount > 0) &&\n@@ -408,1 +408,1 @@\n-  if (addr != NULL) {\n+  if (addr != nullptr) {\n@@ -420,1 +420,1 @@\n-  if (res != NULL) {\n+  if (res != nullptr) {\n@@ -442,1 +442,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -474,1 +474,1 @@\n-  if (result == NULL && !invoked_full_gc) {\n+  if (result == nullptr && !invoked_full_gc) {\n@@ -484,1 +484,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -490,1 +490,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -497,1 +497,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -523,1 +523,1 @@\n-  if (result != NULL) {\n+  if (result != nullptr) {\n@@ -631,1 +631,1 @@\n-    if (Debugging || VMError::is_error_reported())  return NULL;\n+    if (Debugging || VMError::is_error_reported())  return nullptr;\n@@ -679,1 +679,1 @@\n-  if (young_gen() != NULL) {\n+  if (young_gen() != nullptr) {\n@@ -682,1 +682,1 @@\n-  if (old_gen() != NULL) {\n+  if (old_gen() != nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -115,5 +115,5 @@\n-    _young_manager(NULL),\n-    _old_manager(NULL),\n-    _eden_pool(NULL),\n-    _survivor_pool(NULL),\n-    _old_pool(NULL),\n+    _young_manager(nullptr),\n+    _old_manager(nullptr),\n+    _eden_pool(nullptr),\n+    _survivor_pool(nullptr),\n+    _old_pool(nullptr),\n@@ -195,1 +195,1 @@\n-  \/\/ and caused a NULL to be returned.  If a NULL is not returned,\n+  \/\/ and caused a null to be returned.  If a null is not returned,\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-      if (_unmarked_addr == NULL) {\n+      if (_unmarked_addr == nullptr) {\n@@ -60,1 +60,1 @@\n-    _young_gen(young_gen), _card_table(card_table), _unmarked_addr(NULL) { }\n+    _young_gen(young_gen), _card_table(card_table), _unmarked_addr(nullptr) { }\n@@ -66,1 +66,1 @@\n-    return _unmarked_addr != NULL;\n+    return _unmarked_addr != nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-  PSScavengeFromCLDClosure(PSPromotionManager* pm) : _pm(pm), _scanned_cld(NULL) { }\n+  PSScavengeFromCLDClosure(PSPromotionManager* pm) : _pm(pm), _scanned_cld(nullptr) { }\n@@ -107,1 +107,1 @@\n-    assert(_scanned_cld == NULL || cld == NULL, \"Should always only handling one cld at a time\");\n+    assert(_scanned_cld == nullptr || cld == nullptr, \"Should always only handling one cld at a time\");\n@@ -113,1 +113,1 @@\n-    assert(_scanned_cld != NULL, \"Should not be called without having a scanned cld\");\n+    assert(_scanned_cld != nullptr, \"Should not be called without having a scanned cld\");\n@@ -136,1 +136,1 @@\n-      _oop_closure.set_scanned_cld(NULL);\n+      _oop_closure.set_scanned_cld(nullptr);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-PSOldGen*               ParCompactionManager::_old_gen = NULL;\n-ParCompactionManager**  ParCompactionManager::_manager_array = NULL;\n+PSOldGen*               ParCompactionManager::_old_gen = nullptr;\n+ParCompactionManager**  ParCompactionManager::_manager_array = nullptr;\n@@ -45,3 +45,3 @@\n-ParCompactionManager::OopTaskQueueSet*      ParCompactionManager::_oop_task_queues = NULL;\n-ParCompactionManager::ObjArrayTaskQueueSet* ParCompactionManager::_objarray_task_queues = NULL;\n-ParCompactionManager::RegionTaskQueueSet*   ParCompactionManager::_region_task_queues = NULL;\n+ParCompactionManager::OopTaskQueueSet*      ParCompactionManager::_oop_task_queues = nullptr;\n+ParCompactionManager::ObjArrayTaskQueueSet* ParCompactionManager::_objarray_task_queues = nullptr;\n+ParCompactionManager::RegionTaskQueueSet*   ParCompactionManager::_region_task_queues = nullptr;\n@@ -49,4 +49,4 @@\n-ObjectStartArray*    ParCompactionManager::_start_array = NULL;\n-ParMarkBitMap*       ParCompactionManager::_mark_bitmap = NULL;\n-GrowableArray<size_t >* ParCompactionManager::_shadow_region_array = NULL;\n-Monitor*                ParCompactionManager::_shadow_region_monitor = NULL;\n+ObjectStartArray*    ParCompactionManager::_start_array = nullptr;\n+ParMarkBitMap*       ParCompactionManager::_mark_bitmap = nullptr;\n+GrowableArray<size_t >* ParCompactionManager::_shadow_region_array = nullptr;\n+Monitor*                ParCompactionManager::_shadow_region_monitor = nullptr;\n@@ -67,1 +67,1 @@\n-  assert(ParallelScavengeHeap::heap() != NULL,\n+  assert(ParallelScavengeHeap::heap() != nullptr,\n@@ -74,1 +74,1 @@\n-  assert(_manager_array == NULL, \"Attempt to initialize twice\");\n+  assert(_manager_array == nullptr, \"Attempt to initialize twice\");\n@@ -114,1 +114,1 @@\n-  assert(_manager_array != NULL, \"Sanity\");\n+  assert(_manager_array != nullptr, \"Sanity\");\n@@ -173,1 +173,1 @@\n-    assert(addr != NULL, \"expected a deferred object\");\n+    assert(addr != nullptr, \"expected a deferred object\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,2 +136,2 @@\n-    _last_query_beg = NULL;\n-    _last_query_obj = NULL;\n+    _last_query_beg = nullptr;\n+    _last_query_obj = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-  \/\/ Push the non-NULL elements of the next stride on the marking stack.\n+  \/\/ Push the non-null elements of the next stride on the marking stack.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    assert(_virtual_space == NULL, \"Only one should be in use\");\n+    assert(_virtual_space == nullptr, \"Only one should be in use\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psGenerationCounters.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,1 +351,1 @@\n-                      &ParallelScavengeHeap::heap()->workers() : NULL;\n+                      &ParallelScavengeHeap::heap()->workers() : nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-    if (res != NULL) {\n+    if (res != nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,1 @@\n-ReferenceProcessor* PSParallelCompact::_ref_processor = NULL;\n+ReferenceProcessor* PSParallelCompact::_ref_processor = nullptr;\n@@ -154,1 +154,1 @@\n-  assert(destination != NULL, \"invalid destination argument\");\n+  assert(destination != nullptr, \"invalid destination argument\");\n@@ -161,2 +161,2 @@\n-  assert(_dest_region_addr == NULL, \"should have been cleared\");\n-  assert(_first_src_addr == NULL, \"should have been cleared\");\n+  assert(_dest_region_addr == nullptr, \"should have been cleared\");\n+  assert(_first_src_addr == nullptr, \"should have been cleared\");\n@@ -195,1 +195,1 @@\n-  _destination = NULL;\n+  _destination = nullptr;\n@@ -197,2 +197,2 @@\n-  _dest_region_addr = NULL;\n-  _first_src_addr = NULL;\n+  _dest_region_addr = nullptr;\n+  _first_src_addr = nullptr;\n@@ -207,1 +207,1 @@\n-  assert(_destination == NULL, \"not clear\");\n+  assert(_destination == nullptr, \"not clear\");\n@@ -209,2 +209,2 @@\n-  assert(_dest_region_addr == NULL, \"not clear\");\n-  assert(_first_src_addr == NULL, \"not clear\");\n+  assert(_dest_region_addr == nullptr, \"not clear\");\n+  assert(_first_src_addr == nullptr, \"not clear\");\n@@ -417,3 +417,3 @@\n-  _region_start(NULL),\n-  DEBUG_ONLY(_region_end(NULL) COMMA)\n-  _region_vspace(NULL),\n+  _region_start(nullptr),\n+  DEBUG_ONLY(_region_end(nullptr) COMMA)\n+  _region_vspace(nullptr),\n@@ -421,1 +421,1 @@\n-  _region_data(NULL),\n+  _region_data(nullptr),\n@@ -423,2 +423,2 @@\n-  _block_vspace(NULL),\n-  _block_data(NULL),\n+  _block_vspace(nullptr),\n+  _block_data(nullptr),\n@@ -695,1 +695,1 @@\n-  HeapWord* const source_next_val = source_next == NULL ? NULL : *source_next;\n+  HeapWord* const source_next_val = source_next == nullptr ? nullptr : *source_next;\n@@ -716,1 +716,1 @@\n-        assert(source_next != NULL, \"source_next is NULL when splitting\");\n+        assert(source_next != nullptr, \"source_next is null when splitting\");\n@@ -778,1 +778,1 @@\n-  assert(addr != NULL, \"Should detect NULL oop earlier\");\n+  assert(addr != nullptr, \"Should detect null oop earlier\");\n@@ -841,1 +841,1 @@\n-CollectorCounters*  PSParallelCompact::_counters = NULL;\n+CollectorCounters*  PSParallelCompact::_counters = nullptr;\n@@ -1255,1 +1255,1 @@\n-    assert(dest != NULL, \"sanity\");\n+    assert(dest != nullptr, \"sanity\");\n@@ -1285,1 +1285,1 @@\n-    assert(dest != NULL, \"sanity\");\n+    assert(dest != nullptr, \"sanity\");\n@@ -1310,4 +1310,4 @@\n-  assert(cp != NULL, \"sanity\");\n-  assert(bottom != NULL, \"sanity\");\n-  assert(top != NULL, \"sanity\");\n-  assert(new_top != NULL, \"sanity\");\n+  assert(cp != nullptr, \"sanity\");\n+  assert(bottom != nullptr, \"sanity\");\n+  assert(top != nullptr, \"sanity\");\n+  assert(new_top != nullptr, \"sanity\");\n@@ -1426,1 +1426,1 @@\n-                                          space->bottom(), space->top(), NULL,\n+                                          space->bottom(), space->top(), nullptr,\n@@ -1495,1 +1495,1 @@\n-    assert(start_array(id) != NULL, \"sanity\");\n+    assert(start_array(id) != nullptr, \"sanity\");\n@@ -1535,1 +1535,1 @@\n-                              dense_prefix_end, space->top(), NULL,\n+                              dense_prefix_end, space->top(), nullptr,\n@@ -1629,1 +1629,1 @@\n-                                          NULL,\n+                                          nullptr,\n@@ -1638,1 +1638,1 @@\n-      HeapWord* next_src_addr = NULL;\n+      HeapWord* next_src_addr = nullptr;\n@@ -1645,1 +1645,1 @@\n-      assert(next_src_addr != NULL, \"sanity\");\n+      assert(next_src_addr != nullptr, \"sanity\");\n@@ -1657,1 +1657,1 @@\n-                                     NULL,\n+                                     nullptr,\n@@ -1707,1 +1707,1 @@\n-  assert(ref_processor() != NULL, \"Sanity\");\n+  assert(ref_processor() != nullptr, \"Sanity\");\n@@ -1748,1 +1748,1 @@\n-    GCTraceTime(Info, gc) tm(\"Pause Full\", NULL, gc_cause, true);\n+    GCTraceTime(Info, gc) tm(\"Pause Full\", nullptr, gc_cause, true);\n@@ -1940,1 +1940,1 @@\n-    oop obj = NULL;\n+    oop obj = nullptr;\n@@ -2225,1 +2225,1 @@\n-  explicit TaskQueue(uint size) : _counter(0), _size(size), _insert_index(0), _backing_array(NULL) {\n+  explicit TaskQueue(uint size) : _counter(0), _size(size), _insert_index(0), _backing_array(nullptr) {\n@@ -2604,1 +2604,1 @@\n-  if (start_array != NULL) {\n+  if (start_array != nullptr) {\n@@ -3098,1 +3098,1 @@\n-  assert(destination() != NULL, \"sanity\");\n+  assert(destination() != nullptr, \"sanity\");\n@@ -3110,1 +3110,1 @@\n-  if (_start_array != NULL) {\n+  if (_start_array != nullptr) {\n@@ -3121,1 +3121,1 @@\n-  assert(oopDesc::is_oop_or_null(moved_oop), \"Expected an oop or NULL at \" PTR_FORMAT, p2i(moved_oop));\n+  assert(oopDesc::is_oop_or_null(moved_oop), \"Expected an oop or null at \" PTR_FORMAT, p2i(moved_oop));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-  \/\/ otherwise this is NULL.\n+  \/\/ otherwise this is null.\n@@ -142,1 +142,1 @@\n-  \/\/ object; otherwise this is NULL.\n+  \/\/ object; otherwise this is null.\n@@ -185,1 +185,1 @@\n-  \/\/ The start array for the (generation containing the) space, or NULL if there\n+  \/\/ The start array for the (generation containing the) space, or null if there\n@@ -569,1 +569,1 @@\n-  NOT_DEBUG(return NULL;)\n+  NOT_DEBUG(return nullptr;)\n@@ -575,1 +575,1 @@\n-  NOT_DEBUG(return NULL;)\n+  NOT_DEBUG(return nullptr;)\n@@ -844,1 +844,1 @@\n-  _source = NULL;\n+  _source = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-    assert(new_obj != NULL, \"non-null address for live objects\");\n+    assert(new_obj != nullptr, \"non-null address for live objects\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,3 +81,3 @@\n-  set_bottom(NULL);\n-  set_end(NULL);\n-  set_top(NULL);\n+  set_bottom(nullptr);\n+  set_end(nullptr);\n+  set_top(nullptr);\n@@ -116,1 +116,1 @@\n-  assert(_start_array != NULL, \"Sanity\");\n+  assert(_start_array != nullptr, \"Sanity\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  PSPromotionLAB() : _top(NULL), _bottom(NULL), _end(NULL), _state(zero_size) { }\n+  PSPromotionLAB() : _top(nullptr), _bottom(nullptr), _end(nullptr), _state(zero_size) { }\n@@ -106,1 +106,1 @@\n-  PSOldPromotionLAB() : _start_array(NULL) { }\n+  PSOldPromotionLAB() : _start_array(nullptr) { }\n@@ -116,1 +116,1 @@\n-    assert(_start_array != NULL, \"Sanity\");\n+    assert(_start_array != nullptr, \"Sanity\");\n@@ -127,1 +127,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,5 +46,5 @@\n-PaddedEnd<PSPromotionManager>* PSPromotionManager::_manager_array = NULL;\n-PSPromotionManager::PSScannerTasksQueueSet* PSPromotionManager::_stack_array_depth = NULL;\n-PreservedMarksSet*             PSPromotionManager::_preserved_marks_set = NULL;\n-PSOldGen*                      PSPromotionManager::_old_gen = NULL;\n-MutableSpace*                  PSPromotionManager::_young_space = NULL;\n+PaddedEnd<PSPromotionManager>* PSPromotionManager::_manager_array = nullptr;\n+PSPromotionManager::PSScannerTasksQueueSet* PSPromotionManager::_stack_array_depth = nullptr;\n+PreservedMarksSet*             PSPromotionManager::_preserved_marks_set = nullptr;\n+PSOldGen*                      PSPromotionManager::_old_gen = nullptr;\n+MutableSpace*                  PSPromotionManager::_young_space = nullptr;\n@@ -62,1 +62,1 @@\n-  assert(_manager_array == NULL, \"Attempt to initialize twice\");\n+  assert(_manager_array == nullptr, \"Attempt to initialize twice\");\n@@ -74,1 +74,1 @@\n-  assert(_preserved_marks_set == NULL, \"Attempt to initialize twice\");\n+  assert(_preserved_marks_set == nullptr, \"Attempt to initialize twice\");\n@@ -93,1 +93,1 @@\n-  assert(_manager_array != NULL, \"Sanity\");\n+  assert(_manager_array != nullptr, \"Sanity\");\n@@ -98,1 +98,1 @@\n-  assert(_manager_array != NULL, \"Sanity\");\n+  assert(_manager_array != nullptr, \"Sanity\");\n@@ -196,1 +196,1 @@\n-  _preserved_marks = NULL;\n+  _preserved_marks = nullptr;\n@@ -221,1 +221,1 @@\n-  assert(_preserved_marks == NULL, \"do not set it twice\");\n+  assert(_preserved_marks == nullptr, \"do not set it twice\");\n@@ -331,1 +331,1 @@\n-  if (obj->forward_to_atomic(obj, obj_mark) == NULL) {\n+  if (obj->forward_to_atomic(obj, obj_mark) == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  assert(_manager_array != NULL, \"access of NULL manager_array\");\n+  assert(_manager_array != nullptr, \"access of null manager_array\");\n@@ -71,1 +71,1 @@\n-  if (new_obj != NULL) {\n+  if (new_obj != nullptr) {\n@@ -74,1 +74,1 @@\n-    if (lab != NULL) {\n+    if (lab != nullptr) {\n@@ -164,1 +164,1 @@\n-  oop new_obj = NULL;\n+  oop new_obj = nullptr;\n@@ -176,1 +176,1 @@\n-      if (new_obj == NULL && !_young_gen_is_full) {\n+      if (new_obj == nullptr && !_young_gen_is_full) {\n@@ -181,1 +181,1 @@\n-          promotion_trace_event(new_obj, o, new_obj_size, age, false, NULL);\n+          promotion_trace_event(new_obj, o, new_obj_size, age, false, nullptr);\n@@ -187,1 +187,1 @@\n-          if (lab_base != NULL) {\n+          if (lab_base != nullptr) {\n@@ -201,1 +201,1 @@\n-  if (new_obj == NULL) {\n+  if (new_obj == nullptr) {\n@@ -211,1 +211,1 @@\n-    if (new_obj == NULL) {\n+    if (new_obj == nullptr) {\n@@ -217,1 +217,1 @@\n-          promotion_trace_event(new_obj, o, new_obj_size, age, true, NULL);\n+          promotion_trace_event(new_obj, o, new_obj_size, age, true, nullptr);\n@@ -223,1 +223,1 @@\n-          if(lab_base != NULL) {\n+          if(lab_base != nullptr) {\n@@ -238,1 +238,1 @@\n-      if (new_obj == NULL) {\n+      if (new_obj == nullptr) {\n@@ -245,1 +245,1 @@\n-  assert(new_obj != NULL, \"allocation should have succeeded\");\n+  assert(new_obj != nullptr, \"allocation should have succeeded\");\n@@ -257,1 +257,1 @@\n-  if (forwardee == NULL) {  \/\/ forwardee is NULL when forwarding is successful\n+  if (forwardee == nullptr) {  \/\/ forwardee is null when forwarding is successful\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,2 +75,2 @@\n-ReferenceProcessor*           PSScavenge::_ref_processor = NULL;\n-PSCardTable*                  PSScavenge::_card_table = NULL;\n+ReferenceProcessor*           PSScavenge::_ref_processor = nullptr;\n+PSCardTable*                  PSScavenge::_card_table = nullptr;\n@@ -79,1 +79,1 @@\n-HeapWord*                     PSScavenge::_young_generation_boundary = NULL;\n+HeapWord*                     PSScavenge::_young_generation_boundary = nullptr;\n@@ -84,1 +84,1 @@\n-CollectorCounters*            PSScavenge::_counters = NULL;\n+CollectorCounters*            PSScavenge::_counters = nullptr;\n@@ -162,1 +162,1 @@\n-    assert(_promotion_manager != NULL, \"Sanity\");\n+    assert(_promotion_manager != nullptr, \"Sanity\");\n@@ -303,1 +303,1 @@\n-    assert(_old_gen != NULL, \"Sanity\");\n+    assert(_old_gen != nullptr, \"Sanity\");\n@@ -409,1 +409,1 @@\n-    GCTraceTime(Info, gc) tm(\"Pause Young\", NULL, gc_cause, true);\n+    GCTraceTime(Info, gc) tm(\"Pause Young\", nullptr, gc_cause, true);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  static PSCardTable* const card_table()           { assert(_card_table != NULL, \"Sanity\"); return _card_table; }\n+  static PSCardTable* const card_table()           { assert(_card_table != nullptr, \"Sanity\"); return _card_table; }\n@@ -96,1 +96,1 @@\n-    assert(_ref_processor != NULL, \"Sanity\");\n+    assert(_ref_processor != nullptr, \"Sanity\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-  if (_result == NULL && GCLocker::is_active_and_needs_gc()) {\n+  if (_result == nullptr && GCLocker::is_active_and_needs_gc()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,4 @@\n-  _reserved_low_addr(NULL),\n-  _reserved_high_addr(NULL),\n-  _committed_low_addr(NULL),\n-  _committed_high_addr(NULL),\n+  _reserved_low_addr(nullptr),\n+  _reserved_high_addr(nullptr),\n+  _committed_low_addr(nullptr),\n+  _committed_high_addr(nullptr),\n@@ -65,2 +65,2 @@\n-  _reserved_low_addr = _reserved_high_addr = NULL;\n-  _committed_low_addr = _committed_high_addr = NULL;\n+  _reserved_low_addr = _reserved_high_addr = nullptr;\n+  _committed_low_addr = _committed_high_addr = nullptr;\n@@ -129,1 +129,1 @@\n-         reserved_low_addr() == NULL && reserved_high_addr() == NULL,\n+         reserved_low_addr() == nullptr && reserved_high_addr() == nullptr,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,4 @@\n-  _virtual_space(NULL),\n-  _eden_space(NULL),\n-  _from_space(NULL),\n-  _to_space(NULL),\n+  _virtual_space(nullptr),\n+  _eden_space(nullptr),\n+  _from_space(nullptr),\n+  _to_space(nullptr),\n@@ -46,4 +46,4 @@\n-  _gen_counters(NULL),\n-  _eden_counters(NULL),\n-  _from_counters(NULL),\n-  _to_counters(NULL)\n+  _gen_counters(nullptr),\n+  _eden_counters(nullptr),\n+  _from_counters(nullptr),\n+  _to_counters(nullptr)\n@@ -737,1 +737,1 @@\n-  MutableSpace* space_shrinking = NULL;\n+  MutableSpace* space_shrinking = nullptr;\n@@ -784,1 +784,1 @@\n-  MutableSpace* space_shrinking = NULL;\n+  MutableSpace* space_shrinking = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}