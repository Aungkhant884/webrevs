{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1229,0 +1229,1 @@\n+                   menuInputMap = null;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicPopupMenuUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,1 @@\n+                repaintRoot = null;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,213 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4907798\n+ * @key headful\n+ * @summary Check for memory leak in menu subsystem\n+ * @run main\/othervm -Xmx8m PopupReferenceMemoryLeak\n+ *\/\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.WindowConstants;\n+import java.awt.BorderLayout;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+public class PopupReferenceMemoryLeak {\n+    static volatile WeakReference referenceToFrame1;\n+    static JFrame frame1, frame2;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+        for (UIManager.LookAndFeelInfo laf : getInstalledLookAndFeels()) {\n+            String lafName = laf.getName();\n+            System.out.println(\"Testing LaF: \" + lafName);\n+            if (lafName == null || lafName.startsWith(\"Mac OS X\")) {\n+                \/\/ Aqua Look and Feel uses system menus we can't really test it\n+                continue;\n+            }\n+            setLookAndFeel(laf);\n+            PopupReferenceMemoryLeak newTest = new PopupReferenceMemoryLeak();\n+            SwingUtilities.invokeAndWait(newTest::createUI);\n+            try {\n+                boolean passed = false;\n+                robot.waitForIdle();\n+                Thread.sleep(2000);\n+                robot.mouseMove(200, 200);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.keyPress(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_F10);\n+                robot.keyPress(KeyEvent.VK_F);\n+                robot.keyRelease(KeyEvent.VK_F);\n+                robot.keyPress(KeyEvent.VK_C);\n+                robot.keyRelease(KeyEvent.VK_C);\n+                robot.waitForIdle();\n+                Thread.sleep(2000);\n+                robot.mouseMove(600, 200);\n+                robot.waitForIdle();\n+                Thread.sleep(2000);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                \/\/ Workaround for Linux issues when sometimes there\n+                \/\/ is a ref to last opened frame from native code\n+                JFrame frame3 = new JFrame(\"Workaround\");\n+                frame3.setSize(100, 100);\n+                frame3.setLocation(0,0);\n+                frame3.setVisible(true);\n+                Thread.sleep(1000);\n+                frame3.setVisible(false);\n+                frame3.dispose();\n+\n+                \/\/ Force GC three times to see if it clears the old frame\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        ArrayList gc = new ArrayList();\n+                        while (true) {\n+                            gc.add(new int[100000]);\n+                        }\n+                    } catch (Throwable ignore) {\n+                    }\n+                    robot.waitForIdle();\n+                    Thread.sleep(1000);\n+                    if (referenceToFrame1.get() == null) {\n+                        \/\/ Frame was released\n+                        passed = true;\n+                        break;\n+                    }\n+                }\n+                if (!passed) {\n+                    robot.waitForIdle();\n+                    robot.keyPress(KeyEvent.VK_F10);\n+                    robot.keyRelease(KeyEvent.VK_F10);\n+                    robot.keyPress(KeyEvent.VK_T);\n+                    robot.keyRelease(KeyEvent.VK_T);\n+                    robot.keyPress(KeyEvent.VK_M);\n+                    robot.keyRelease(KeyEvent.VK_M);\n+                    robot.waitForIdle();\n+                    Thread.sleep(2000);\n+                    for (int i = 0; i < 5; i++) {\n+                        try {\n+                            ArrayList gc = new ArrayList();\n+                            while (true) {\n+                                gc.add(new int[100000]);\n+                            }\n+                        } catch (Throwable ignore) {\n+                        }\n+                        robot.waitForIdle();\n+                        Thread.sleep(1000);\n+                        if (referenceToFrame1.get() == null) {\n+                            \/\/ Frame was released\n+                            throw new RuntimeException(\"Frame cleared only after menu activated on frame2\");\n+                        }\n+                    }\n+                    throw new RuntimeException(\"Test finished but menu has not cleared the reference!\");\n+                }\n+            } catch (Exception re) {\n+                throw new RuntimeException(re.getLocalizedMessage());\n+            } finally {\n+                if (frame2 != null) {\n+                    frame2.setVisible(false);\n+                    frame2.dispose();\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n+    public void createUI() {\n+        frame1 = new JFrame(\"Main test window\");\n+        JMenuBar menuBar1 = new JMenuBar();\n+        JMenu file1 = new JMenu(\"File\");\n+        file1.setMnemonic('f');\n+        JMenuItem close1 = new JMenuItem(\"Close\");\n+        close1.setMnemonic('c');\n+        close1.addActionListener(new FrameCloser(frame1));\n+        file1.add(close1);\n+        menuBar1.add(file1);\n+        frame1.setJMenuBar(menuBar1);\n+        frame1.setSize(200, 200);\n+        frame1.setLocation(100, 100);\n+        frame1.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        frame1.setVisible(true);\n+        referenceToFrame1 = new WeakReference(frame1);\n+        frame1 = null;\n+\n+        frame2 = new JFrame(\"Secondary\");\n+        JMenuBar menuBar2 = new JMenuBar();\n+        JMenu test = new JMenu(\"Test\");\n+        test.setMnemonic('T');\n+        JMenuItem memoryTest = new JMenuItem(\"Memory\");\n+        memoryTest.setMnemonic('M');\n+        test.add(memoryTest);\n+        menuBar2.add(test);\n+        frame2.setJMenuBar(menuBar2);\n+        frame2.setLayout(new BorderLayout());\n+        frame2.setSize(200, 200);\n+        frame2.setLocation(500, 100);\n+        frame2.setVisible(true);\n+    }\n+\n+    class FrameCloser extends AbstractAction {\n+        JFrame frame;\n+        public FrameCloser(JFrame f) {\n+            this.frame = f;\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            if (frame != null) {\n+                frame.setVisible(false);\n+                frame.dispose();\n+                this.frame = null;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/PopupReferenceMemoryLeak.java","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"}]}