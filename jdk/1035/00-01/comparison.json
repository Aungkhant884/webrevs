{"files":[{"patch":"@@ -28,1 +28,0 @@\n- * @requires (os.family == \"windows\")\n@@ -30,1 +29,1 @@\n- * @run main\/othervm PopupReferenceMemoryLeak\n+ * @run main\/othervm -Xmx8m PopupReferenceMemoryLeak\n@@ -40,0 +39,1 @@\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -47,1 +47,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -50,0 +49,2 @@\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n@@ -54,44 +55,9 @@\n-    public static void main(String[] args) throws InvocationTargetException, InterruptedException {\n-        try {\n-            \/\/ Set system look and feel\n-            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n-        } catch (Exception ignore) {\n-            throw new RuntimeException(\"Can not install system look and feel\");\n-        }\n-\n-        PopupReferenceMemoryLeak newTest = new PopupReferenceMemoryLeak();\n-        SwingUtilities.invokeAndWait(newTest::createUI);\n-        try {\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(200);\n-            robot.waitForIdle();\n-            Thread.sleep(2000);\n-            robot.mouseMove(200, 200);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.keyPress(KeyEvent.VK_ALT);\n-            robot.keyPress(KeyEvent.VK_F);\n-            robot.keyRelease(KeyEvent.VK_F);\n-            robot.keyRelease(KeyEvent.VK_ALT);\n-            robot.keyPress(KeyEvent.VK_C);\n-            robot.keyRelease(KeyEvent.VK_C);\n-            robot.waitForIdle();\n-            Thread.sleep(2000);\n-            robot.mouseMove(600, 200);\n-            robot.waitForIdle();\n-            Thread.sleep(2000);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            \/\/ Force GC three times to see if it clears the old frame\n-            for(int i=0; i<3; i++) {\n-                try {\n-                    ArrayList gc = new ArrayList();\n-                    while (true) {gc.add(new int[100000]);}\n-                } catch (Throwable ignore){}\n-                robot.waitForIdle();\n-                Thread.sleep(1000);\n-                if(referenceToFrame1.get() == null) {\n-                    \/\/ Frame was released\n-                    return;\n-                }\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+        for (UIManager.LookAndFeelInfo laf : getInstalledLookAndFeels()) {\n+            String lafName = laf.getName();\n+            System.out.println(\"Testing LaF: \" + lafName);\n+            if (lafName == null || lafName.startsWith(\"Mac OS X\")) {\n+                \/\/ Aqua Look and Feel uses system menus we can't really test it\n+                continue;\n@@ -99,14 +65,19 @@\n-            robot.waitForIdle();\n-            robot.keyPress(KeyEvent.VK_ALT);\n-            robot.keyPress(KeyEvent.VK_T);\n-            robot.keyRelease(KeyEvent.VK_T);\n-            robot.keyRelease(KeyEvent.VK_ALT);\n-            robot.keyPress(KeyEvent.VK_M);\n-            robot.keyRelease(KeyEvent.VK_M);\n-            robot.waitForIdle();\n-            Thread.sleep(2000);\n-            for(int i=0; i<3; i++) {\n-                try {\n-                    ArrayList gc = new ArrayList();\n-                    while (true) {gc.add(new int[100000]);}\n-                } catch (Throwable ignore){}\n+            setLookAndFeel(laf);\n+            PopupReferenceMemoryLeak newTest = new PopupReferenceMemoryLeak();\n+            SwingUtilities.invokeAndWait(newTest::createUI);\n+            try {\n+                boolean passed = false;\n+                robot.waitForIdle();\n+                Thread.sleep(2000);\n+                robot.mouseMove(200, 200);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.keyPress(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_F10);\n+                robot.keyPress(KeyEvent.VK_F);\n+                robot.keyRelease(KeyEvent.VK_F);\n+                robot.keyPress(KeyEvent.VK_C);\n+                robot.keyRelease(KeyEvent.VK_C);\n+                robot.waitForIdle();\n+                Thread.sleep(2000);\n+                robot.mouseMove(600, 200);\n@@ -114,0 +85,10 @@\n+                Thread.sleep(2000);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                \/\/ Workaround for Linux issues when sometimes there\n+                \/\/ is a ref to last opened frame from native code\n+                JFrame frame3 = new JFrame(\"Workaround\");\n+                frame3.setSize(100, 100);\n+                frame3.setLocation(0,0);\n+                frame3.setVisible(true);\n@@ -115,3 +96,53 @@\n-                if(referenceToFrame1.get() == null) {\n-                    \/\/ Frame was released\n-                    throw new RuntimeException(\"Frame cleared only after menu activated on frame2\");\n+                frame3.setVisible(false);\n+                frame3.dispose();\n+\n+                \/\/ Force GC three times to see if it clears the old frame\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        ArrayList gc = new ArrayList();\n+                        while (true) {\n+                            gc.add(new int[100000]);\n+                        }\n+                    } catch (Throwable ignore) {\n+                    }\n+                    robot.waitForIdle();\n+                    Thread.sleep(1000);\n+                    if (referenceToFrame1.get() == null) {\n+                        \/\/ Frame was released\n+                        passed = true;\n+                        break;\n+                    }\n+                }\n+                if (!passed) {\n+                    robot.waitForIdle();\n+                    robot.keyPress(KeyEvent.VK_F10);\n+                    robot.keyRelease(KeyEvent.VK_F10);\n+                    robot.keyPress(KeyEvent.VK_T);\n+                    robot.keyRelease(KeyEvent.VK_T);\n+                    robot.keyPress(KeyEvent.VK_M);\n+                    robot.keyRelease(KeyEvent.VK_M);\n+                    robot.waitForIdle();\n+                    Thread.sleep(2000);\n+                    for (int i = 0; i < 5; i++) {\n+                        try {\n+                            ArrayList gc = new ArrayList();\n+                            while (true) {\n+                                gc.add(new int[100000]);\n+                            }\n+                        } catch (Throwable ignore) {\n+                        }\n+                        robot.waitForIdle();\n+                        Thread.sleep(1000);\n+                        if (referenceToFrame1.get() == null) {\n+                            \/\/ Frame was released\n+                            throw new RuntimeException(\"Frame cleared only after menu activated on frame2\");\n+                        }\n+                    }\n+                    throw new RuntimeException(\"Test finished but menu has not cleared the reference!\");\n+                }\n+            } catch (Exception re) {\n+                throw new RuntimeException(re.getLocalizedMessage());\n+            } finally {\n+                if (frame2 != null) {\n+                    frame2.setVisible(false);\n+                    frame2.dispose();\n@@ -119,8 +150,0 @@\n-            }\n-            throw new RuntimeException(\"Test finished but menu has not cleared the reference!\");\n-        } catch (Exception re) {\n-            throw new RuntimeException(re.getLocalizedMessage());\n-        } finally {\n-            if (frame2 != null) {\n-                frame2.setVisible(false);\n-                frame2.dispose();\n@@ -131,0 +154,11 @@\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n","filename":"test\/jdk\/javax\/swing\/JMenu\/PopupReferenceMemoryLeak.java","additions":106,"deletions":72,"binary":false,"changes":178,"status":"modified"}]}