{"files":[{"patch":"@@ -1,127 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8280684\n- * @summary JfrRecorderService failes with guarantee(num_written > 0) when no space left on device.\n- * @library \/test\/lib\n- * @run main\/manual TestJFRDiskFull\n- *\/\n-\n-import java.io.File;\n-import java.io.RandomAccessFile;\n-import java.nio.ByteBuffer;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.concurrent.TimeUnit;\n-import java.util.List;\n-import jdk.jfr.Configuration;\n-import jdk.jfr.Description;\n-import jdk.jfr.Event;\n-import jdk.jfr.Label;\n-import jdk.jfr.Name;\n-import jdk.jfr.Recording;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestJFRDiskFull {\n-\n-    @Name(\"test.JFRDiskFull\")\n-    @Label(\"JFRDiskFull\")\n-    @Description(\"JFRDiskFull Event\")\n-    static class JFRDiskFullEvent extends Event {\n-        @Label(\"Message\")\n-        String message;\n-    }\n-\n-    private static final long LEFT_SIZE = 307200L;\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1) {\n-            Configuration profConfig = Configuration.getConfiguration(\"profile\");\n-            Recording recording = new Recording(profConfig);\n-            recording.setName(\"TestJFR\");\n-            recording.start();\n-            for (int i = 0; i < 1000000000; i++) {\n-                try {\n-                    JFRDiskFullEvent event = new JFRDiskFullEvent();\n-                    event.message = \"JFRDiskFull\";\n-                    event.begin();\n-                    event.commit();\n-                } catch (Exception ex) {\n-                }\n-            }\n-            recording.stop();\n-            System.out.println(\"should not reach here\");\n-        } else {\n-            runtest();\n-        }\n-    }\n-\n-    private static void runtest() throws Exception {\n-        \/\/ disk full\n-        File file = File.createTempFile(\"largefile\", null, new File(\".\"));\n-        file.deleteOnExit();\n-        long spaceavailable = file.getUsableSpace();\n-        System.out.println(\"spaceavailable = \" + spaceavailable);\n-        long filesize = spaceavailable - LEFT_SIZE;\n-        if (filesize > 0) {\n-            createLargeFile(filesize, file);\n-        }\n-        System.out.println(\"spaceavailable = \" + file.getUsableSpace());\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:FlightRecorderOptions=maxchunksize=1M\",\n-                \"TestJFRDiskFull\", \"Recording\");\n-        OutputAnalyzer oa = ProcessTools.executeProcess(pb);\n-        long pid = oa.pid();\n-        oa.shouldMatch(\n-                \"\\\\[[0-9]+\\\\.[0-9]+s\\\\]\\\\[error\\\\]\\\\[jfr,system\\\\] Failed to write to jfr stream because no space left on device\")\n-                .shouldMatch(\n-                        \"\\\\[[0-9]+\\\\.[0-9]+s\\\\]\\\\[error\\\\]\\\\[jfr,system\\\\] An irrecoverable error in Jfr. Shutting down VM\\\\.\\\\.\\\\.\")\n-                .shouldNotContain(\"Internal Error\")\n-                .shouldNotContain(\"should not reach here\");\n-\n-        File errLog = new File(\"hs_err_pid\" + pid + \"\\\\.log\");\n-        if (errLog.exists()) {\n-            throw new RuntimeException(\"hs_err log is created\");\n-        }\n-    }\n-\n-    private static void createLargeFile(long filesize, File file) throws Exception {\n-        file.delete();\n-        RandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n-        byte[] x = new byte[1024];\n-        System.out.println(\"  Writing large file...\");\n-        long t0 = System.nanoTime();\n-        while (file.length() < filesize) {\n-            raf.write(x);\n-        }\n-        long t1 = System.nanoTime();\n-        System.out.printf(\"  Wrote large file in %d ns (%d ms) %n\", t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n-        raf.close();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jfr\/TestJFRDiskFull.java","additions":0,"deletions":127,"binary":false,"changes":127,"status":"deleted"}]}