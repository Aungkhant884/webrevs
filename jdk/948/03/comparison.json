{"files":[{"patch":"@@ -40,0 +40,1 @@\n+#include \"memory\/archiveUtils.hpp\"\n@@ -560,0 +561,1 @@\n+        ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n@@ -570,0 +572,2 @@\n+          } else {\n+            ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n@@ -578,0 +582,3 @@\n+    if (HAS_PENDING_EXCEPTION) {\n+      ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n+    }\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -322,0 +322,9 @@\n+\n+void ArchiveUtils::check_for_oom(oop exception) {\n+  assert(exception != nullptr, \"Sanity check\");\n+  if (exception->is_a(SystemDictionary::OutOfMemoryError_klass())) {\n+    vm_exit_during_cds_dumping(\n+      err_msg(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \" SIZE_FORMAT \"M\",\n+              MaxHeapSize\/M));\n+  }\n+}\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -246,0 +246,1 @@\n+  static void check_for_oom(oop exception) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -262,9 +262,0 @@\n-  if (!is_heap_object_archiving_allowed()) {\n-    log_info(cds)(\n-      \"Archived java heap is not supported as UseG1GC, \"\n-      \"UseCompressedOops and UseCompressedClassPointers are required.\"\n-      \"Current settings: UseG1GC=%s, UseCompressedOops=%s, UseCompressedClassPointers=%s.\",\n-      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedOops),\n-      BOOL_TO_STR(UseCompressedClassPointers));\n-    return;\n-  }\n@@ -1038,1 +1029,7 @@\n-    assert(k != NULL && !HAS_PENDING_EXCEPTION, \"class must exist\");\n+    if (HAS_PENDING_EXCEPTION) {\n+      ResourceMark rm(THREAD);\n+      ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n+      log_info(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n+                    java_lang_String::as_utf8_string(java_lang_Throwable::message(PENDING_EXCEPTION)));\n+      vm_exit_during_initialization(\"VM exits due to exception, use -Xlog:cds,exceptions=trace for detail\");\n+    }\n@@ -1055,0 +1052,1 @@\n+  assert(is_heap_object_archiving_allowed(), \"Sanity check\");\n@@ -1056,1 +1054,0 @@\n-\n@@ -1071,2 +1068,4 @@\n-  _dumped_interned_strings = new (ResourceObj::C_HEAP, mtClass)DumpedInternedStrings();\n-  init_subgraph_entry_fields(THREAD);\n+  if (is_heap_object_archiving_allowed()) {\n+    _dumped_interned_strings = new (ResourceObj::C_HEAP, mtClass)DumpedInternedStrings();\n+    init_subgraph_entry_fields(THREAD);\n+  }\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1166,0 +1166,9 @@\n+  if(!HeapShared::is_heap_object_archiving_allowed()) {\n+    log_info(cds)(\n+      \"Archived java heap is not supported as UseG1GC, \"\n+      \"UseCompressedOops and UseCompressedClassPointers are required.\"\n+      \"Current settings: UseG1GC=%s, UseCompressedOops=%s, UseCompressedClassPointers=%s.\",\n+      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedOops),\n+      BOOL_TO_STR(UseCompressedClassPointers));\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -328,0 +328,1 @@\n+ -runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Out of memory When dumping the CDS archive\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @requires vm.cds.archived.java.heap\n+ * @requires vm.jvmti\n+ * @run driver ExceptionDuringDumpAtObjectsInitPhase\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ExceptionDuringDumpAtObjectsInitPhase {\n+    public static String appClasses[] = {\n+        Hello.class.getName(),\n+    };\n+    public static String agentClasses[] = {\n+        GCDuringDumpTransformer.class.getName(),\n+        GCDuringDumpTransformer.MyCleaner.class.getName(),\n+    };\n+\n+    public static void main(String[] args) throws Throwable {\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"GCDuringDumpTransformer.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"GCDuringDumpTransformer.mf\"),\n+                                        agentClasses);\n+\n+        String appJar =\n+            ClassFileInstaller.writeJar(\"GCDuringDumpApp.jar\", appClasses);\n+\n+        String gcLog = Boolean.getBoolean(\"test.cds.verbose.gc\") ?\n+            \"-Xlog:gc*=info,gc+region=trace,gc+alloc+region=debug\" : \"-showversion\";\n+\n+        \/\/ 1. Test with exception\n+        System.out.println(\"1. Exception during dump\");\n+        TestCommon.dump(appJar,\n+                        TestCommon.list(Hello.class.getName()),\n+                        \"-XX:+UnlockDiagnosticVMOptions\",\n+                        \"-XX:+AllowArchivingWithJavaAgent\",\n+                        \"-javaagent:\" + agentJar,\n+                        \"-Xlog:cds,class+load\",\n+                        \"-Xmx32m\",\n+                        \"-Dtest.with.exception=true\",\n+                        gcLog).shouldNotHaveExitValue(0)\n+                              .shouldContain(\"Preload Error: Failed to load jdk\/internal\/math\/FDBigInteger\")\n+                              .shouldContain(\"VM exits due to exception, use -Xlog:cds,exceptions=trace for detail\");\n+\n+        \/\/ 2. Test with OOM\n+        System.out.println(\"2. OOM during dump\");\n+        TestCommon.dump(appJar,\n+                        TestCommon.list(Hello.class.getName()),\n+                        \"-XX:+UnlockDiagnosticVMOptions\",\n+                        \"-XX:+AllowArchivingWithJavaAgent\",\n+                        \"-javaagent:\" + agentJar,\n+                        \"-Dtest.with.oom=true\",\n+                        \"-Xlog:cds,class+load\",\n+                        \"-Xmx12M\",\n+                        gcLog).shouldNotHaveExitValue(0)\n+                              .shouldContain(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -33,0 +35,4 @@\n+    static boolean TEST_WITH_EXCEPTION = Boolean.getBoolean(\"test.with.exception\");\n+    static boolean TEST_WITH_OOM = Boolean.getBoolean(\"test.with.oom\");\n+    static List<byte[]> waste = new ArrayList();\n+\n@@ -48,0 +54,16 @@\n+        \/\/ jdk\/internal\/math\/FDBigInteger is loaded as part of archived heap.\n+        if (name.equals(\"jdk\/internal\/math\/FDBigInteger\")) {\n+            System.out.println(\"Transforming class jdk\/internal\/math\/FDBigInteger\");\n+            if (TEST_WITH_EXCEPTION) {\n+              System.out.println(\"Return bad buffer for \" + name);\n+              return new byte[] {1, 2, 3, 4, 5, 6, 7, 8};\n+            }\n+            if (TEST_WITH_OOM) {\n+                \/\/ fill until OOM\n+                System.out.println(\"Fill objects until OOM\");\n+                for (;;) {\n+                    waste.add(new byte[64*1024]);\n+                }\n+            }\n+        }\n+\n@@ -63,1 +85,0 @@\n-\n@@ -71,0 +92,2 @@\n+        System.out.println(\"ClassFileTransformer.premain() is called: TEST_WITH_EXCEPTION = \" + TEST_WITH_EXCEPTION);\n+        System.out.println(\"ClassFileTransformer.premain() is called: TEST_WITH_OOM = \" + TEST_WITH_OOM);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCDuringDumpTransformer.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}