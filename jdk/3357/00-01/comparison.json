{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#import \"MTLSurfaceData.h\"\n@@ -33,3 +32,0 @@\n-#pragma mark -\n-#pragma mark \"--- Mac OS X specific methods for Metal pipeline ---\"\n-\n@@ -61,4 +57,0 @@\n-#pragma mark -\n-#pragma mark \"--- MTLGraphicsConfig methods ---\"\n-\n-\n@@ -85,6 +77,5 @@\n-    jboolean ret = JNI_FALSE;\n-    JNI_COCOA_ENTER(env);\n-    NSMutableArray * retArray = [NSMutableArray arrayWithCapacity:3];\n-    [retArray addObject: [NSNumber numberWithInt: (int)displayID]];\n-    char *str = JNU_GetStringPlatformChars(env, shadersLibName, 0);\n-    [retArray addObject: [NSString stringWithUTF8String: str]];\n+    __block jboolean ret = JNI_FALSE;\n+\n+JNI_COCOA_ENTER(env);\n+\n+    __block NSString* path = NormalizedPathNSStringFromJavaString(env, shadersLibName);\n@@ -93,1 +84,13 @@\n-        [MTLGraphicsConfigUtil _tryLoadMetalLibrary: retArray];\n+\n+        id<MTLDevice> device = CGDirectDisplayCopyCurrentMetalDevice(displayID);\n+        if (device != nil) {\n+            NSError* error = nil;\n+            id<MTLLibrary> lib = [device newLibraryWithFile:path error:&error];\n+            if (lib != nil) {\n+                ret = JNI_TRUE;\n+            } else {\n+                J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to load Metal shader library.\");\n+            }\n+        } else {\n+            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to create MTLDevice.\");\n+        }\n@@ -96,4 +99,1 @@\n-    NSNumber * num = (NSNumber *)[retArray objectAtIndex: 0];\n-    ret = (jboolean)[num boolValue];\n-    JNU_ReleaseStringPlatformChars(env, shadersLibName, str);\n-    JNI_COCOA_EXIT(env);\n+JNI_COCOA_EXIT(env);\n@@ -103,1 +103,0 @@\n-\n@@ -105,8 +104,6 @@\n- * Determines whether the MTL pipeline can be used for a given GraphicsConfig\n- * provided its screen number and visual ID.  If the minimum requirements are\n- * met, the native MTLGraphicsConfigInfo structure is initialized for this\n- * GraphicsConfig with the necessary information (pixel format, etc.)\n- * and a pointer to this structure is returned as a jlong.  If\n- * initialization fails at any point, zero is returned, indicating that MTL\n- * cannot be used for this GraphicsConfig (we should fallback on an existing\n- * 2D pipeline).\n+ * Determines whether the Metal pipeline can be used for a given screen number and\n+ * shader library path. A MTLContext is created and the native MTLGraphicsConfigInfo\n+ * structure is initialized for this context. A pointer to this structure is\n+ * returned as a jlong.\n+ * If initialization fails at any point, zero is returned, indicating that Metal pipeline\n+ * cannot be used for this GraphicsConfig (we should fallback on an existing 2D pipeline).\n@@ -118,24 +115,2 @@\n-    jlong ret = 0L;\n-    JNI_COCOA_ENTER(env);\n-    NSMutableArray * retArray = [NSMutableArray arrayWithCapacity:3];\n-    [retArray addObject: [NSNumber numberWithInt: (int)displayID]];\n-    char *str = JNU_GetStringPlatformChars(env, mtlShadersLib, 0);\n-    [retArray addObject: [NSString stringWithUTF8String: str]];\n-\n-    [ThreadUtilities performOnMainThreadWaiting:YES block:^() {\n-        [MTLGraphicsConfigUtil _getMTLConfigInfo: retArray];\n-    }];\n-\n-    NSNumber * num = (NSNumber *)[retArray objectAtIndex: 0];\n-    ret = (jlong)[num longValue];\n-    JNU_ReleaseStringPlatformChars(env, mtlShadersLib, str);\n-    JNI_COCOA_EXIT(env);\n-    return ret;\n-}\n-\n-\n-\n-\n-@implementation MTLGraphicsConfigUtil\n-+ (void) _getMTLConfigInfo: (NSMutableArray *)argValue {\n-    AWT_ASSERT_APPKIT_THREAD;\n+    __block MTLContext* mtlc = nil;\n+    __block MTLGraphicsConfigInfo* mtlinfo = nil;\n@@ -143,4 +118,1 @@\n-    jint displayID = (jint)[(NSNumber *)[argValue objectAtIndex: 0] intValue];\n-    NSString *mtlShadersLib = (NSString *)[argValue objectAtIndex: 1];\n-    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n-    [argValue removeAllObjects];\n+JNI_COCOA_ENTER(env);\n@@ -148,37 +120,1 @@\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLGraphicsConfig_getMTLConfigInfo\");\n-\n-    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];\n-\n-    MTLContext *mtlc = [[MTLContext alloc] initWithDevice:CGDirectDisplayCopyCurrentMetalDevice(displayID)\n-                        shadersLib:mtlShadersLib];\n-    if (mtlc == 0L) {\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGC_InitMTLContext: could not initialze MTLContext.\");\n-        [argValue addObject: [NSNumber numberWithLong: 0L]];\n-        return;\n-    }\n-\n-    \/\/ create the MTLGraphicsConfigInfo record for this config\n-    MTLGraphicsConfigInfo *mtlinfo = (MTLGraphicsConfigInfo *)malloc(sizeof(MTLGraphicsConfigInfo));\n-    if (mtlinfo == NULL) {\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_getMTLConfigInfo: could not allocate memory for mtlinfo\");\n-        [mtlc release];\n-        mtlc = nil;\n-        [argValue addObject: [NSNumber numberWithLong: 0L]];\n-        return;\n-    }\n-    memset(mtlinfo, 0, sizeof(MTLGraphicsConfigInfo));\n-    mtlinfo->context = mtlc;\n-\n-    [argValue addObject: [NSNumber numberWithLong:ptr_to_jlong(mtlinfo)]];\n-    [pool drain];\n-}\n-\n-+ (void) _tryLoadMetalLibrary: (NSMutableArray *)argValue {\n-    AWT_ASSERT_APPKIT_THREAD;\n-\n-    jint displayID = (jint)[(NSNumber *)[argValue objectAtIndex: 0] intValue];\n-    NSString *mtlShadersLib = (NSString *)[argValue objectAtIndex: 1];\n-    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n-    [argValue removeAllObjects];\n-\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLGraphicsConfigUtil_tryLoadMTLLibrary\");\n+    __block NSString* path = NormalizedPathNSStringFromJavaString(env, mtlShadersLib);\n@@ -186,0 +122,1 @@\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^() {\n@@ -187,7 +124,13 @@\n-    BOOL ret = FALSE;;\n-    id<MTLDevice> device = CGDirectDisplayCopyCurrentMetalDevice(displayID);\n-    if (device != nil) {\n-        NSError *error = nil;\n-        id<MTLLibrary> lib = [device newLibraryWithFile:mtlShadersLib error:&error];\n-        if (lib != nil) {\n-            ret = TRUE;\n+        mtlc = [[MTLContext alloc] initWithDevice:CGDirectDisplayCopyCurrentMetalDevice(displayID)\n+                                       shadersLib:path];\n+        if (mtlc != 0L) {\n+            \/\/ create the MTLGraphicsConfigInfo record for this context\n+            mtlinfo = (MTLGraphicsConfigInfo *)malloc(sizeof(MTLGraphicsConfigInfo));\n+            if (mtlinfo != NULL) {\n+                memset(mtlinfo, 0, sizeof(MTLGraphicsConfigInfo));\n+                mtlinfo->context = mtlc;\n+            } else {\n+                J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_getMTLConfigInfo: could not allocate memory for mtlinfo\");\n+                [mtlc release];\n+                mtlc = nil;\n+            }\n@@ -195,1 +138,1 @@\n-            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to load Metal shader library.\");\n+            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGC_InitMTLContext: could not initialze MTLContext.\");\n@@ -197,3 +140,1 @@\n-    } else {\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to create MTLDevice.\");\n-    }\n+    }];\n@@ -201,1 +142,1 @@\n-    [argValue addObject: [NSNumber numberWithBool: ret]];\n+JNI_COCOA_EXIT(env);\n@@ -203,0 +144,1 @@\n+    return ptr_to_jlong(mtlinfo);\n@@ -205,3 +147,0 @@\n-@end \/\/GraphicsConfigUtil\n-\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.m","additions":47,"deletions":108,"binary":false,"changes":155,"status":"modified"}]}