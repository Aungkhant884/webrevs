{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1328,0 +1328,2 @@\n+#include \"oops\/klass.inline.hpp\"\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/bytecodeInterpreter_zero.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -34,0 +35,2 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -38,0 +39,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/altHashing.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n@@ -50,0 +50,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -713,0 +714,7 @@\n+void SystemDictionaryShared::atomic_set_array_index(OopHandle array, int index, oop o) {\n+  \/\/ Benign race condition:  array.obj_at(index) may already be filled in.\n+  \/\/ The important thing here is that all threads pick up the same result.\n+  \/\/ It doesn't matter which racing thread wins, as long as only one\n+  \/\/ result is used by all threads, and all future queries.\n+  ((objArrayOop)array.resolve())->atomic_compare_exchange_oop(index, o, NULL);\n+}\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"oops\/klass.hpp\"\n@@ -32,0 +31,2 @@\n+#include \"oops\/klass.hpp\"\n+#include \"oops\/oopHandle.hpp\"\n@@ -184,7 +185,1 @@\n-  static void atomic_set_array_index(OopHandle array, int index, oop o) {\n-    \/\/ Benign race condition:  array.obj_at(index) may already be filled in.\n-    \/\/ The important thing here is that all threads pick up the same result.\n-    \/\/ It doesn't matter which racing thread wins, as long as only one\n-    \/\/ result is used by all threads, and all future queries.\n-    ((objArrayOop)array.resolve())->atomic_compare_exchange_oop(index, o, NULL);\n-  }\n+  static void atomic_set_array_index(OopHandle array, int index, oop o);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/shared\/oopStorage.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-#include \"oops\/klass.inline.hpp\"\n@@ -35,0 +34,2 @@\n+class Klass;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -38,0 +39,2 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/memory\/dynamicArchive.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -691,19 +691,2 @@\n-  InstanceKlass* unsafe_anonymous_host() const {\n-    InstanceKlass** hk = adr_unsafe_anonymous_host();\n-    if (hk == NULL) {\n-      assert(!is_unsafe_anonymous(), \"Unsafe anonymous classes have host klasses\");\n-      return NULL;\n-    } else {\n-      assert(*hk != NULL, \"host klass should always be set if the address is not null\");\n-      assert(is_unsafe_anonymous(), \"Only unsafe anonymous classes have host klasses\");\n-      return *hk;\n-    }\n-  }\n-  void set_unsafe_anonymous_host(const InstanceKlass* host) {\n-    assert(is_unsafe_anonymous(), \"not unsafe anonymous\");\n-    const InstanceKlass** addr = (const InstanceKlass **)adr_unsafe_anonymous_host();\n-    assert(addr != NULL, \"no reversed space\");\n-    if (addr != NULL) {\n-      *addr = host;\n-    }\n-  }\n+  inline InstanceKlass* unsafe_anonymous_host() const;\n+  inline void set_unsafe_anonymous_host(const InstanceKlass* host);\n@@ -1100,43 +1083,4 @@\n-  intptr_t* start_of_itable()   const { return (intptr_t*)start_of_vtable() + vtable_length(); }\n-  intptr_t* end_of_itable()     const { return start_of_itable() + itable_length(); }\n-\n-  int  itable_offset_in_words() const { return start_of_itable() - (intptr_t*)this; }\n-\n-  oop static_field_base_raw() { return java_mirror(); }\n-\n-  OopMapBlock* start_of_nonstatic_oop_maps() const {\n-    return (OopMapBlock*)(start_of_itable() + itable_length());\n-  }\n-\n-  Klass** end_of_nonstatic_oop_maps() const {\n-    return (Klass**)(start_of_nonstatic_oop_maps() +\n-                     nonstatic_oop_map_count());\n-  }\n-\n-  Klass* volatile* adr_implementor() const {\n-    if (is_interface()) {\n-      return (Klass* volatile*)end_of_nonstatic_oop_maps();\n-    } else {\n-      return NULL;\n-    }\n-  };\n-\n-  InstanceKlass** adr_unsafe_anonymous_host() const {\n-    if (is_unsafe_anonymous()) {\n-      InstanceKlass** adr_impl = (InstanceKlass**)adr_implementor();\n-      if (adr_impl != NULL) {\n-        return adr_impl + 1;\n-      } else {\n-        return (InstanceKlass **)end_of_nonstatic_oop_maps();\n-      }\n-    } else {\n-      return NULL;\n-    }\n-  }\n-\n-  address adr_fingerprint() const {\n-    if (has_stored_fingerprint()) {\n-      InstanceKlass** adr_host = adr_unsafe_anonymous_host();\n-      if (adr_host != NULL) {\n-        return (address)(adr_host + 1);\n-      }\n+  inline intptr_t* start_of_itable() const;\n+  inline intptr_t* end_of_itable() const;\n+  inline int itable_offset_in_words() const;\n+  inline oop static_field_base_raw();\n@@ -1144,4 +1088,2 @@\n-      Klass* volatile* adr_impl = adr_implementor();\n-      if (adr_impl != NULL) {\n-        return (address)(adr_impl + 1);\n-      }\n+  inline OopMapBlock* start_of_nonstatic_oop_maps() const;\n+  inline Klass** end_of_nonstatic_oop_maps() const;\n@@ -1149,5 +1091,3 @@\n-      return (address)end_of_nonstatic_oop_maps();\n-    } else {\n-      return NULL;\n-    }\n-  }\n+  inline Klass* volatile* adr_implementor() const;\n+  inline InstanceKlass** adr_unsafe_anonymous_host() const;\n+  inline address adr_fingerprint() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":11,"deletions":71,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -32,1 +33,1 @@\n-#include \"oops\/klass.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n@@ -39,0 +40,76 @@\n+inline InstanceKlass* InstanceKlass::unsafe_anonymous_host() const {\n+  InstanceKlass** hk = adr_unsafe_anonymous_host();\n+  if (hk == NULL) {\n+    assert(!is_unsafe_anonymous(), \"Unsafe anonymous classes have host klasses\");\n+    return NULL;\n+  } else {\n+    assert(*hk != NULL, \"host klass should always be set if the address is not null\");\n+    assert(is_unsafe_anonymous(), \"Only unsafe anonymous classes have host klasses\");\n+    return *hk;\n+  }\n+}\n+\n+inline void InstanceKlass::set_unsafe_anonymous_host(const InstanceKlass* host) {\n+  assert(is_unsafe_anonymous(), \"not unsafe anonymous\");\n+  const InstanceKlass** addr = (const InstanceKlass **)adr_unsafe_anonymous_host();\n+  assert(addr != NULL, \"no reversed space\");\n+  if (addr != NULL) {\n+    *addr = host;\n+  }\n+}\n+\n+inline intptr_t* InstanceKlass::start_of_itable()   const { return (intptr_t*)start_of_vtable() + vtable_length(); }\n+inline intptr_t* InstanceKlass::end_of_itable()     const { return start_of_itable() + itable_length(); }\n+\n+inline int InstanceKlass::itable_offset_in_words() const { return start_of_itable() - (intptr_t*)this; }\n+\n+inline oop InstanceKlass::static_field_base_raw() { return java_mirror(); }\n+\n+inline OopMapBlock* InstanceKlass::start_of_nonstatic_oop_maps() const {\n+  return (OopMapBlock*)(start_of_itable() + itable_length());\n+}\n+\n+inline Klass** InstanceKlass::end_of_nonstatic_oop_maps() const {\n+  return (Klass**)(start_of_nonstatic_oop_maps() +\n+                   nonstatic_oop_map_count());\n+}\n+\n+inline Klass* volatile* InstanceKlass::adr_implementor() const {\n+  if (is_interface()) {\n+    return (Klass* volatile*)end_of_nonstatic_oop_maps();\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+inline InstanceKlass** InstanceKlass::adr_unsafe_anonymous_host() const {\n+  if (is_unsafe_anonymous()) {\n+    InstanceKlass** adr_impl = (InstanceKlass**)adr_implementor();\n+    if (adr_impl != NULL) {\n+      return adr_impl + 1;\n+    } else {\n+      return (InstanceKlass **)end_of_nonstatic_oop_maps();\n+    }\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+inline address InstanceKlass::adr_fingerprint() const {\n+  if (has_stored_fingerprint()) {\n+    InstanceKlass** adr_host = adr_unsafe_anonymous_host();\n+    if (adr_host != NULL) {\n+      return (address)(adr_host + 1);\n+    }\n+\n+    Klass* volatile* adr_impl = adr_implementor();\n+    if (adr_impl != NULL) {\n+      return (address)(adr_impl + 1);\n+    }\n+\n+    return (address)end_of_nonstatic_oop_maps();\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":78,"deletions":1,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiGetLoadedClasses.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -38,0 +39,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/statSampler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#include \"oops\/klass.inline.hpp\"\n@@ -62,0 +63,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/klass.inline.hpp\"\n@@ -39,0 +40,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/klass.inline.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}