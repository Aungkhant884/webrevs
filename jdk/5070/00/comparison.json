{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -345,1 +345,0 @@\n-  \/\/ Clear LSB in symbol address; it can be set by CPSlot.\n@@ -347,1 +346,1 @@\n-    return (Symbol*)(intptr_t(*p) & ~1);\n+    return *p;\n@@ -350,5 +349,0 @@\n-  \/\/ Store symbol, adjusting new pointer if the original pointer was adjusted\n-  \/\/ (symbol references in constant pool slots have their LSB set to 1).\n-  static void store_symbol(Symbol** p, Symbol* sym) {\n-    *p = (Symbol*)(intptr_t(sym) | (intptr_t(*p) & 1));\n-  }\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -131,2 +131,2 @@\n-      \/\/ In some rare cases (see CPSlot in constantPool.hpp) we store some flags in the lowest\n-      \/\/ 2 bits of a MetaspaceObj pointer. Unmask these when manipulating the pointer.\n+      \/\/ In some rare cases we store some flags in the lowest 2 bits of a\n+      \/\/ MetaspaceObj pointer. Unmask these when manipulating the pointer.\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2393,6 +2393,3 @@\n-    } else if (tag.is_symbol()) {\n-      CPSlot entry = slot_at(i);\n-      guarantee(entry.get_symbol()->refcount() != 0, \"should have nonzero reference count\");\n-    } else if (tag.is_string()) {\n-      CPSlot entry = slot_at(i);\n-      guarantee(entry.get_symbol()->refcount() != 0, \"should have nonzero reference count\");\n+    } else if (tag.is_symbol() || tag.is_string()) {\n+      Symbol* entry = slot_at(i);\n+      guarantee(entry->refcount() != 0, \"should have nonzero reference count\");\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,16 +52,0 @@\n-class CPSlot {\n- friend class ConstantPool;\n-  intptr_t _ptr;\n-  enum TagBits  {_pseudo_bit = 1};\n- public:\n-\n-  CPSlot(intptr_t ptr): _ptr(ptr) {}\n-  CPSlot(Symbol* ptr, int tag_bits = 0): _ptr((intptr_t)ptr | tag_bits) {}\n-\n-  intptr_t value()   { return _ptr; }\n-\n-  Symbol* get_symbol() {\n-    return (Symbol*)(_ptr & ~_pseudo_bit);\n-  }\n-};\n-\n@@ -155,1 +139,1 @@\n-  CPSlot slot_at(int which) const;\n+  Symbol* slot_at(int which) const;\n@@ -157,1 +141,1 @@\n-  void slot_at_put(int which, CPSlot s) const {\n+  void slot_at_put(int which, Symbol* s) const {\n@@ -159,2 +143,2 @@\n-    assert(s.value() != 0, \"Caught something\");\n-    *(intptr_t*)&base()[which] = s.value();\n+    assert(s != 0, \"Caught something\");\n+    *(intptr_t*)&base()[which] = (intptr_t)s;\n@@ -347,1 +331,1 @@\n-    slot_at_put(which, CPSlot(s));\n+    slot_at_put(which, s);\n@@ -500,1 +484,1 @@\n-    Symbol* sym = slot_at(which).get_symbol();\n+    Symbol* sym = slot_at(which);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline CPSlot ConstantPool::slot_at(int which) const {\n+inline Symbol* ConstantPool::slot_at(int which) const {\n@@ -39,1 +39,1 @@\n-  return CPSlot(adr);\n+  return (Symbol*)adr;\n","filename":"src\/hotspot\/share\/oops\/constantPool.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\/\/ fieldDescriptor or _ptr in a CPSlot) is reference counted.\n+\/\/ fieldDescriptor or symbol in a constant pool) is reference counted.\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}