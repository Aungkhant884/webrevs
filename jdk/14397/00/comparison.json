{"files":[{"patch":"@@ -820,1 +820,1 @@\n-    mirror()->byte_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->byte_field_put(fd->offset(), checked_cast<jbyte>(fd->int_initial_value()));\n@@ -823,1 +823,1 @@\n-    mirror()->bool_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->bool_field_put(fd->offset(), checked_cast<jboolean>(fd->int_initial_value()));\n@@ -826,1 +826,1 @@\n-    mirror()->char_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->char_field_put(fd->offset(), checked_cast<jchar>(fd->int_initial_value()));\n@@ -829,1 +829,1 @@\n-    mirror()->short_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->short_field_put(fd->offset(), checked_cast<jshort>(fd->int_initial_value()));\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -328,2 +328,2 @@\n-  assert((jushort)bci == bci, \"bci should be short\");\n-  return build_int_from_shorts(version, bci);\n+  assert((u2)bci == bci, \"bci should be short\");\n+  return build_int_from_shorts((u2)version, (u2)bci);\n@@ -334,3 +334,3 @@\n-  assert((jushort)mid == mid, \"mid should be short\");\n-  assert((jushort)cpref == cpref, \"cpref should be short\");\n-  return build_int_from_shorts(cpref, mid);\n+  assert((u2)mid == mid, \"mid should be short\");\n+  assert((u2)cpref == cpref, \"cpref should be short\");\n+  return build_int_from_shorts((u2)cpref, (u2)mid);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1277,1 +1277,1 @@\n-  product(intx, MaxJavaStackTraceDepth, 1024,                               \\\n+  product(int, MaxJavaStackTraceDepth, 1024,                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}