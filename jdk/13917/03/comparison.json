{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import java.util.ResourceBundle;\n@@ -74,1 +73,0 @@\n- * <blockquote>\n@@ -84,1 +82,0 @@\n- * <\/blockquote>\n@@ -97,1 +94,0 @@\n- * <blockquote>\n@@ -106,1 +102,0 @@\n- * <\/blockquote>\n@@ -117,1 +112,1 @@\n- * <strong>Note:<\/strong> {@code CollationKey}s from different\n+ * @apiNote {@code CollationKey}s from different\n@@ -225,1 +220,1 @@\n-     * The default locale is determined by java.util.Locale.getDefault.\n+     * The default locale is determined by {@link Locale#getDefault()}.\n@@ -235,0 +230,12 @@\n+     * @apiNote Implementations of {@code Collator} class may produce\n+     * different instances based on the \"{@code co}\"\n+     * <a href=\"https:\/\/www.unicode.org\/reports\/tr35\/#UnicodeCollationIdentifier\">\n+     * Unicode collation identifier<\/a> in the {@code desiredLocale}.\n+     * For example:\n+     * {@snippet lang = java:\n+     * Collator.getInstance(Locale.forLanguageTag(\"sv-u-co-trad\"));\n+     * }\n+     * may return a {@code Collator} instance with the traditional sorting, which\n+     * gives 'v' and 'w' the same sorting order.\n+     * @spec https:\/\/www.unicode.org\/reports\/tr35\/ Unicode Locale Data Markup Language\n+     *     (LDML)\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-    private static final String COLLATION_DATA_CACHEKEY = \"COLD\";\n+    private static final String COLLATION_DATA = \"COLD.\";\n@@ -189,0 +189,1 @@\n+        String cacheKey = COLLATION_DATA;\n@@ -191,0 +192,8 @@\n+        try {\n+            var type = locale.getUnicodeLocaleType(\"co\");\n+            if (type != null && !type.isEmpty() && !type.equalsIgnoreCase(\"standard\")) {\n+                key += \".\" + type;\n+                cacheKey += type;\n+            }\n+        } catch (IllegalArgumentException ignore) {}\n+\n@@ -192,1 +201,1 @@\n-        ResourceReference data = cache.get(COLLATION_DATA_CACHEKEY);\n+        ResourceReference data = cache.get(cacheKey);\n@@ -198,2 +207,1 @@\n-            cache.put(COLLATION_DATA_CACHEKEY,\n-                      new ResourceReference(COLLATION_DATA_CACHEKEY, coldata, referenceQueue));\n+            cache.put(cacheKey, new ResourceReference(cacheKey, coldata, referenceQueue));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleResources.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -57,0 +57,10 @@\n+            },\n+            {\"Rule.trad\",\n+                \"& Z < a\\u030a , A\\u030a\" +  \/\/ a-ring, aa ligaure\n+                \"< a\\u0308 , A\\u0308 < a\\u030b, A\\u030b \" +  \/\/ a-umlaut, a-double-acute\n+                \"< \\u00e6 , \\u00c6 \" +                   \/\/  ae ligature\n+                \"< o\\u0308 , O\\u0308 \" +   \/\/ o-umlaut\n+                \"< o\\u030b , O\\u030b ; \\u00f8 , \\u00d8 \" +   \/\/ o-double-acute < o-stroke\n+                \"& V ; w , W\" +\n+                \"& Y, u\\u0308 , U\\u0308\" + \/\/ u-double-acute\n+                \"; u\\u030b, U\\u030b \"\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/CollationData_sv.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8306927\n+ * @bug 8306927 8307547\n@@ -29,0 +29,1 @@\n+ * @run junit SwedishTest\n@@ -34,0 +35,7 @@\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -37,1 +45,22 @@\n-    private static final String[] expected = {\"va\", \"vc\", \"wb\"};\n+    private static final String[] standard = {\"va\", \"vc\", \"wb\"};\n+    private static final String[] traditional = {\"va\", \"wb\", \"vc\"};\n+\n+    @ParameterizedTest\n+    @MethodSource(\"swedishData\")\n+    public void testSwedishCollation(Locale l, String[] expected) {\n+        Arrays.sort(src, Collator.getInstance(l));\n+        assertArrayEquals(expected, src);\n+    }\n+\n+    private static Stream<Arguments> swedishData() {\n+        return Stream.of(\n+            Arguments.of(Locale.forLanguageTag(\"sv\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-standard\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-STANDARD\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-traditio\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-TRADITIO\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-traditional\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-TRADITIONAL\"), standard),\n+            \/\/ the new standard used to be called \"reformed\"\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-reformed\"), standard),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-REFORMED\"), standard),\n@@ -39,5 +68,3 @@\n-    public static void main (String[] args) {\n-        Arrays.sort(src, Collator.getInstance(Locale.of(\"sv\")));\n-        if (!Arrays.equals(src, expected)) {\n-            throw new RuntimeException(\"Swedish collation failed\");\n-        }\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-trad\"), traditional),\n+            Arguments.of(Locale.forLanguageTag(\"sv-u-co-TRAD\"), traditional)\n+        );\n","filename":"test\/jdk\/sun\/text\/resources\/Collator\/SwedishTest.java","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"}]}