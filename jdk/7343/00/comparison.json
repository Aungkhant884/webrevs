{"files":[{"patch":"@@ -1748,0 +1748,8 @@\n+\/\/ Pretouching must use a store, not just a load.  On many OSes loads from\n+\/\/ fresh memory would be satisfied from a single mapped page containing all\n+\/\/ zeros.  We need to store something to each page to get them backed by\n+\/\/ their own memory, which is the effect we want here.  An atomic add of\n+\/\/ zero is used instead of a simple store, allowing the memory to be used\n+\/\/ while pretouch is in progress, rather than requiring users of the memory\n+\/\/ to wait until the entire range has been touched.  This is technically\n+\/\/ a UB data race, but doesn't cause any problems for us.\n@@ -1749,6 +1757,15 @@\n-  for (volatile char *p = (char*)start; p < (char*)end; p += page_size) {\n-    \/\/ Note: this must be a store, not a load. On many OSes loads from fresh\n-    \/\/ memory would be satisfied from a single mapped page containing all zeros.\n-    \/\/ We need to store something to each page to get them backed by their own\n-    \/\/ memory, which is the effect we want here.\n-    *p = 0;\n+  assert(is_power_of_2(page_size), \"page size misaligned: %zu\", page_size);\n+  assert(page_size >= sizeof(int), \"page size too small: %zu\", page_size);\n+  if (start < end) {\n+    \/\/ We're doing concurrent-safe touch and memory state has page\n+    \/\/ granularity, so we can touch anywhere in a page.  Touch at the\n+    \/\/ beginning of each page to simplify iteration.\n+    char* cur = static_cast<char*>(align_down(start, page_size));\n+    void* last = align_down(static_cast<char*>(end) - 1, page_size);\n+    assert(cur <= last, \"invariant\");\n+    \/\/ Iterate from first page through last (inclusive), being careful to\n+    \/\/ avoid overflow if the last page abuts the end of the address range.\n+    for ( ; true; cur += page_size) {\n+      Atomic::add(reinterpret_cast<int*>(cur), 0, memory_order_relaxed);\n+      if (cur == last) break;\n+    }\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -368,4 +368,3 @@\n-  \/\/ Touch memory pages that cover the memory range from start to end (exclusive)\n-  \/\/ to make the OS back the memory range with actual memory.\n-  \/\/ Current implementation may not touch the last page if unaligned addresses\n-  \/\/ are passed.\n+  \/\/ Touch memory pages that cover the memory range from start to end\n+  \/\/ (exclusive) to make the OS back the memory range with actual memory.\n+  \/\/ Other threads may use the memory range concurrently with pretouch.\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}