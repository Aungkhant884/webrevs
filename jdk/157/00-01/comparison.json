{"files":[{"patch":"@@ -1553,129 +1553,0 @@\n-\/\/ sun.misc.Signal support\n-\n-static void\n-UserHandler(int sig, void *siginfo, void *context) {\n-  \/\/ Ctrl-C is pressed during error reporting, likely because the error\n-  \/\/ handler fails to abort. Let VM die immediately.\n-  if (sig == SIGINT && VMError::is_error_reported()) {\n-    os::die();\n-  }\n-\n-  os::signal_notify(sig);\n-}\n-\n-extern \"C\" {\n-  typedef void (*sa_handler_t)(int);\n-  typedef void (*sa_sigaction_t)(int, siginfo_t *, void *);\n-}\n-\n-\/\/\n-\/\/ The following code is moved from os.cpp for making this\n-\/\/ code platform specific, which it is by its very nature.\n-\/\/\n-\n-\/\/ a counter for each possible signal value\n-static volatile jint pending_signals[NSIG+1] = { 0 };\n-\n-\/\/ Wrapper functions for: sem_init(), sem_post(), sem_wait()\n-\/\/ On AIX, we use sem_init(), sem_post(), sem_wait()\n-\/\/ On Pase, we need to use msem_lock() and msem_unlock(), because Posix Semaphores\n-\/\/ do not seem to work at all on PASE (unimplemented, will cause SIGILL).\n-\/\/ Note that just using msem_.. APIs for both PASE and AIX is not an option either, as\n-\/\/ on AIX, msem_..() calls are suspected of causing problems.\n-static sem_t sig_sem;\n-static msemaphore* p_sig_msem = 0;\n-\n-static void local_sem_init() {\n-  if (os::Aix::on_aix()) {\n-    int rc = ::sem_init(&sig_sem, 0, 0);\n-    guarantee(rc != -1, \"sem_init failed\");\n-  } else {\n-    \/\/ Memory semaphores must live in shared mem.\n-    guarantee0(p_sig_msem == NULL);\n-    p_sig_msem = (msemaphore*)os::reserve_memory(sizeof(msemaphore), NULL);\n-    guarantee(p_sig_msem, \"Cannot allocate memory for memory semaphore\");\n-    guarantee(::msem_init(p_sig_msem, 0) == p_sig_msem, \"msem_init failed\");\n-  }\n-}\n-\n-static void local_sem_post() {\n-  static bool warn_only_once = false;\n-  if (os::Aix::on_aix()) {\n-    int rc = ::sem_post(&sig_sem);\n-    if (rc == -1 && !warn_only_once) {\n-      trcVerbose(\"sem_post failed (errno = %d, %s)\", errno, os::errno_name(errno));\n-      warn_only_once = true;\n-    }\n-  } else {\n-    guarantee0(p_sig_msem != NULL);\n-    int rc = ::msem_unlock(p_sig_msem, 0);\n-    if (rc == -1 && !warn_only_once) {\n-      trcVerbose(\"msem_unlock failed (errno = %d, %s)\", errno, os::errno_name(errno));\n-      warn_only_once = true;\n-    }\n-  }\n-}\n-\n-static void local_sem_wait() {\n-  static bool warn_only_once = false;\n-  if (os::Aix::on_aix()) {\n-    int rc = ::sem_wait(&sig_sem);\n-    if (rc == -1 && !warn_only_once) {\n-      trcVerbose(\"sem_wait failed (errno = %d, %s)\", errno, os::errno_name(errno));\n-      warn_only_once = true;\n-    }\n-  } else {\n-    guarantee0(p_sig_msem != NULL); \/\/ must init before use\n-    int rc = ::msem_lock(p_sig_msem, 0);\n-    if (rc == -1 && !warn_only_once) {\n-      trcVerbose(\"msem_lock failed (errno = %d, %s)\", errno, os::errno_name(errno));\n-      warn_only_once = true;\n-    }\n-  }\n-}\n-\n-static void jdk_misc_signal_init() {\n-  \/\/ Initialize signal structures\n-  ::memset((void*)pending_signals, 0, sizeof(pending_signals));\n-\n-  \/\/ Initialize signal semaphore\n-  local_sem_init();\n-}\n-\n-static int check_pending_signals() {\n-  for (;;) {\n-    for (int i = 0; i < NSIG + 1; i++) {\n-      jint n = pending_signals[i];\n-      if (n > 0 && n == Atomic::cmpxchg(&pending_signals[i], n, n - 1)) {\n-        return i;\n-      }\n-    }\n-    JavaThread *thread = JavaThread::current();\n-    ThreadBlockInVM tbivm(thread);\n-\n-    bool threadIsSuspended;\n-    do {\n-      thread->set_suspend_equivalent();\n-      \/\/ cleared by handle_special_suspend_equivalent_condition() or java_suspend_self()\n-\n-      local_sem_wait();\n-\n-      \/\/ were we externally suspended while we were waiting?\n-      threadIsSuspended = thread->handle_special_suspend_equivalent_condition();\n-      if (threadIsSuspended) {\n-        \/\/\n-        \/\/ The semaphore has been incremented, but while we were waiting\n-        \/\/ another thread suspended us. We don't want to continue running\n-        \/\/ while suspended because that would surprise the thread that\n-        \/\/ suspended us.\n-        \/\/\n-\n-        local_sem_post();\n-\n-        thread->java_suspend_self();\n-      }\n-    } while (threadIsSuspended);\n-  }\n-}\n-\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":129,"binary":false,"changes":129,"status":"modified"}]}