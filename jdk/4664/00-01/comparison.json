{"files":[{"patch":"@@ -931,3 +931,1 @@\n-  \/\/ G1 has 2 instances of the reference processor class. One\n-  \/\/ (_ref_processor_cm) handles reference object discovery\n-  \/\/ and subsequent processing during concurrent marking cycles.\n+  \/\/ G1 has 2 instances of the reference processor class.\n@@ -935,3 +933,3 @@\n-  \/\/ The other (_ref_processor_stw) handles reference object\n-  \/\/ discovery and processing during full GCs and incremental\n-  \/\/ evacuation pauses.\n+  \/\/ One (_ref_processor_cm) handles reference object discovery and subsequent\n+  \/\/ processing during concurrent marking cycles. Discovery is enabled\/disabled\n+  \/\/ at the start\/end of a concurrent marking cycle.\n@@ -939,7 +937,2 @@\n-  \/\/ During an incremental pause, reference discovery will be\n-  \/\/ temporarily disabled for _ref_processor_cm and will be\n-  \/\/ enabled for _ref_processor_stw. At the end of the evacuation\n-  \/\/ pause references discovered by _ref_processor_stw will be\n-  \/\/ processed and discovery will be disabled. The previous\n-  \/\/ setting for reference object discovery for _ref_processor_cm\n-  \/\/ will be re-instated.\n+  \/\/ The other (_ref_processor_stw) handles reference object discovery and\n+  \/\/ processing during incremental evacuation pauses and full GC pauses.\n@@ -947,4 +940,1 @@\n-  \/\/ At the start of marking:\n-  \/\/  * Discovery by the CM ref processor is verified to be inactive\n-  \/\/    and it's discovered lists are empty.\n-  \/\/  * Discovery by the CM ref processor is then enabled.\n+  \/\/ ## Incremental evacuation pauses\n@@ -952,3 +942,5 @@\n-  \/\/ At the end of marking:\n-  \/\/  * Any references on the CM ref processor's discovered\n-  \/\/    lists are processed (possibly MT).\n+  \/\/ STW ref processor discovery is enabled\/disabled at the start\/end of an\n+  \/\/ incremental evacuation pause. No particular handling of the CM ref\n+  \/\/ processor is needed, apart from treating the discovered references as\n+  \/\/ roots; CM discovery does not need to be temporarily disabled as all\n+  \/\/ marking threads are paused during incremental evacuation pauses.\n@@ -956,10 +948,1 @@\n-  \/\/ At the start of full GC we:\n-  \/\/  * Disable discovery by the CM ref processor and\n-  \/\/    empty CM ref processor's discovered lists\n-  \/\/    (without processing any entries).\n-  \/\/  * Verify that the STW ref processor is inactive and it's\n-  \/\/    discovered lists are empty.\n-  \/\/  * Temporarily set STW ref processor discovery as single threaded.\n-  \/\/  * Temporarily clear the STW ref processor's _is_alive_non_header\n-  \/\/    field.\n-  \/\/  * Finally enable discovery by the STW ref processor.\n+  \/\/ ## Full GC pauses\n@@ -967,10 +950,5 @@\n-  \/\/ The STW ref processor is used to record any discovered\n-  \/\/ references during the full GC.\n-  \/\/\n-  \/\/ At the end of a full GC we:\n-  \/\/  * Enqueue any reference objects discovered by the STW ref processor\n-  \/\/    that have non-live referents. This has the side-effect of\n-  \/\/    making the STW ref processor inactive by disabling discovery.\n-  \/\/  * Verify that the CM ref processor is still inactive\n-  \/\/    and no references have been placed on it's discovered\n-  \/\/    lists (also checked as a precondition during concurrent start).\n+  \/\/ We abort any ongoing concurrent marking cycle, disable CM discovery, and\n+  \/\/ temporarily substitute a new closure for the STW ref processor's\n+  \/\/ _is_alive_non_header field (old value is restored after the full GC). Then\n+  \/\/ STW ref processor discovery is enabled, and marking & compaction\n+  \/\/ commences.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":18,"deletions":40,"binary":false,"changes":58,"status":"modified"}]}