{"files":[{"patch":"@@ -3945,1 +3945,1 @@\n-    r->clear_young_index_in_cset();\n+    r->clear_index_in_cset();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  clear_young_index_in_cset();\n+  clear_index_in_cset();\n@@ -121,2 +121,1 @@\n-  clear_young_index_in_cset();\n-  clear_index_in_opt_cset();\n+  clear_index_in_cset();\n@@ -242,1 +241,1 @@\n-  _index_in_opt_cset(InvalidCSetIndex),\n+  _index_in_cset(InvalidCSetIndex),\n@@ -249,1 +248,0 @@\n-  _young_index_in_cset(-1),\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -217,3 +217,3 @@\n-  \/\/ The index in the optional regions array, if this region\n-  \/\/ is considered optional during a mixed collections.\n-  uint _index_in_opt_cset;\n+  \/\/ The index in a collection set: either the actual collection set for young regions or the\n+  \/\/ optional regions array if this region is considered optional during a mixed collections.\n+  uint _index_in_cset;\n@@ -250,1 +250,0 @@\n-  uint  _young_index_in_cset;\n@@ -515,1 +514,1 @@\n-    return _index_in_opt_cset;\n+    return _index_in_cset;\n@@ -517,3 +516,11 @@\n-  bool has_index_in_opt_cset() const { return _index_in_opt_cset != InvalidCSetIndex; }\n-  void set_index_in_opt_cset(uint index) { _index_in_opt_cset = index; }\n-  void clear_index_in_opt_cset() { _index_in_opt_cset = InvalidCSetIndex; }\n+\n+  bool has_index_in_opt_cset() const {\n+    return is_old() && _index_in_cset != InvalidCSetIndex;\n+  }\n+\n+  void set_index_in_opt_cset(uint index) {\n+    assert(is_old(), \"pre-condition\");\n+    set_index_in_cset(index);\n+  }\n+\n+  void clear_index_in_opt_cset();\n@@ -524,2 +531,12 @@\n-  uint  young_index_in_cset() const { return _young_index_in_cset; }\n-  void clear_young_index_in_cset() { _young_index_in_cset = 0; }\n+  uint  young_index_in_cset() const {\n+    return is_old() ? 0 : _index_in_cset;\n+  }\n+\n+  void clear_index_in_cset() {\n+    _index_in_cset = InvalidCSetIndex;\n+  }\n+\n+  void set_index_in_cset(uint index) {\n+    _index_in_cset = index;\n+  }\n+\n@@ -530,1 +547,1 @@\n-    _young_index_in_cset = index;\n+    set_index_in_cset(index);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -290,0 +290,7 @@\n+inline void HeapRegion::clear_index_in_opt_cset() {\n+  if (!has_index_in_opt_cset()) {\n+    return;\n+  }\n+  clear_index_in_cset();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}