{"files":[{"patch":"@@ -1895,1 +1895,1 @@\n-        print_method(PHASE_INCREMENTAL_INLINE_STEP, cg->call_node(), 3);\n+        print_method(PHASE_INCREMENTAL_INLINE_STEP, 3, cg->call_node());\n@@ -2360,1 +2360,1 @@\n-      print_method(PHASE_INLINE_VECTOR_REBOX, cg->call_node(), 3);\n+      print_method(PHASE_INLINE_VECTOR_REBOX, 3, cg->call_node());\n@@ -4817,5 +4817,5 @@\n-void Compile::print_method(CompilerPhaseType cpt, int level) {\n-  print_method_impl(cpt, NOT_PRODUCT(CompilerPhaseTypeHelper::to_string(cpt) COMMA) level);\n-}\n-\n-void Compile::print_method(CompilerPhaseType cpt, Node* n, int level) {\n+void Compile::print_method(CompilerPhaseType cpt, int level, Node* n) {\n+  EventCompilerPhase event;\n+  if (event.should_commit()) {\n+    CompilerEvent::PhaseEvent::post(event, C->_latest_stage_start_counter, cpt, C->_compile_id, level);\n+  }\n@@ -4826,1 +4826,1 @@\n-  if (n != NULL) {\n+  if (n != nullptr) {\n@@ -4828,2 +4828,0 @@\n-  } else {\n-    ss.print_raw(\": NULL\");\n@@ -4831,3 +4829,0 @@\n-#endif\n-  C->print_method_impl(cpt, NOT_PRODUCT(ss.as_string() COMMA) level);\n-}\n@@ -4835,6 +4830,1 @@\n-void Compile::print_method_impl(CompilerPhaseType cpt, NOT_PRODUCT(const char* name COMMA) int level) {\n-  EventCompilerPhase event;\n-  if (event.should_commit()) {\n-    CompilerEvent::PhaseEvent::post(event, C->_latest_stage_start_counter, cpt, C->_compile_id, level);\n-  }\n-#ifndef PRODUCT\n+  const char* name = ss.as_string();\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -658,3 +658,1 @@\n-  void print_method(CompilerPhaseType cpt, int level);\n-  void print_method(CompilerPhaseType cpt, Node* n, int level);\n-  void print_method_impl(CompilerPhaseType cpt, NOT_PRODUCT(const char* name COMMA) int level);\n+  void print_method(CompilerPhaseType cpt, int level, Node* n = nullptr);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-      C->print_method(PHASE_SCALARIZE_VBOX, vbox, 3);\n+      C->print_method(PHASE_SCALARIZE_VBOX, 3, vbox);\n@@ -134,1 +134,1 @@\n-      C->print_method(PHASE_EXPAND_VUNBOX, vec_unbox, 3);\n+      C->print_method(PHASE_EXPAND_VUNBOX, 3, vec_unbox);\n@@ -152,1 +152,1 @@\n-      C->print_method(PHASE_ELIMINATE_VBOX_ALLOC, vbox_alloc, 3);\n+      C->print_method(PHASE_ELIMINATE_VBOX_ALLOC, 3, vbox_alloc);\n@@ -300,1 +300,1 @@\n-    C->print_method(PHASE_EXPAND_VBOX, vec_box, 3);\n+    C->print_method(PHASE_EXPAND_VBOX, 3, vec_box);\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}