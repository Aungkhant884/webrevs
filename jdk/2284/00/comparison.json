{"files":[{"patch":"@@ -521,1 +521,1 @@\n-            TypePrinter tp = new TypePrinter(at.messages(),\n+            TypePrinter tp = new TypePrinter(at.messages(), at.types(),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/ExpressionToTypeInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-            TypePrinter tp = new TypePrinter(at.messages(),\n+            TypePrinter tp = new TypePrinter(at.messages(), at.types(),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import com.sun.tools.javac.code.Types;\n@@ -52,0 +53,1 @@\n+    private final Types types;\n@@ -65,1 +67,1 @@\n-    TypePrinter(JavacMessages messages,\n+    TypePrinter(JavacMessages messages, Types types,\n@@ -68,1 +70,1 @@\n-        this(messages, fullClassNameAndPackageToClass, cs -> cs.flatName().toString(),\n+        this(messages, types, fullClassNameAndPackageToClass, cs -> cs.flatName().toString(),\n@@ -82,1 +84,1 @@\n-    TypePrinter(JavacMessages messages,\n+    TypePrinter(JavacMessages messages, Types types,\n@@ -87,0 +89,1 @@\n+        this.types = types;\n@@ -140,1 +143,1 @@\n-                return OBJECT;\n+                return visit(types.erasure(t), locale);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TypePrinter.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-                \"Object\");\n+                \"Number\");\n@@ -252,1 +252,1 @@\n-        assertType(\"test2.get()\", \"Number&CharSequence\", \"Object\");\n+        assertType(\"test2.get()\", \"Number&CharSequence\", \"Number\");\n","filename":"test\/langtools\/jdk\/jshell\/TypeNameTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8144903 8177466 8191842 8211694 8213725 8239536 8257236\n+ * @bug 8144903 8177466 8191842 8211694 8213725 8239536 8257236 8252409\n@@ -41,0 +41,1 @@\n+import jdk.jshell.MethodSnippet;\n@@ -420,1 +421,3 @@\n-        VarSnippet var = varKey(assertEval(\"var i1 = get1();\", added(VALID)));\n+        assertEval(\"var i1 = get1();\", added(VALID));\n+        MethodSnippet get2 = methodKey(assertEval(\"<Z extends Runnable & Stream> Z get2() { return null; }\",\n+            ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_NOT_DEFINED, false, null)));\n@@ -422,1 +425,1 @@\n-                                                 ste(var, VALID, VALID, true, MAIN_SNIPPET));\n+                                                 ste(get2, RECOVERABLE_NOT_DEFINED, VALID, true, MAIN_SNIPPET));\n@@ -424,0 +427,2 @@\n+        assertEval(\"var i2 = get2();\", added(VALID));\n+        assertEval(\"void t2() { i2.run(); i2.count(); }\", added(VALID));\n@@ -608,0 +613,7 @@\n+\n+    public void varIntersection() {\n+        assertEval(\"interface Marker {}\");\n+        assertEval(\"var v = (Marker & Runnable) () -> {};\", added(VALID));\n+        assertEval(\"v.run()\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/VariablesTest.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}