{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1117,4 +1117,0 @@\n-                StringJoiner command = new StringJoiner(\" \");\n-                for (String s: cmdarray) {\n-                    command.add(s);\n-                }\n@@ -1122,1 +1118,1 @@\n-                event.command = command.toString();\n+                event.command = String.join(\" \", cmdarray);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2338,1 +2338,1 @@\n-            return Arrays.stream(stringList).collect(Collectors.joining(\",\"));\n+            return String.join(\",\", stringList);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1539,5 +1539,1 @@\n-                            StringJoiner cookieValue = new StringJoiner(\"; \");\n-                            for (String value : l) {\n-                                cookieValue.add(value);\n-                            }\n-                            requests.add(key, cookieValue.toString());\n+                            requests.add(key, String.join(\"; \", l));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -707,1 +707,1 @@\n-        StringBuilder sb = new StringBuilder();\n+        StringJoiner sb = new StringJoiner(\"\\\\\");\n@@ -709,3 +709,1 @@\n-            sb.append(elementAsString(i));\n-            if (i != (endIndex-1))\n-                sb.append(\"\\\\\");\n+            sb.add(elementAsString(i));\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsPath.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-import java.util.Iterator;\n@@ -65,0 +64,1 @@\n+import java.util.StringJoiner;\n@@ -66,4 +66,2 @@\n-import jdk.internal.joptsimple.internal.Strings;\n-\n-import static java.util.Collections.*;\n-import static jdk.internal.joptsimple.internal.Messages.*;\n+import static java.util.Collections.unmodifiableList;\n+import static jdk.internal.joptsimple.internal.Messages.message;\n@@ -103,1 +101,1 @@\n-        return Strings.join( new ArrayList<>( option.options() ), \"\/\" );\n+        return String.join(\"\/\", option.options());\n@@ -124,1 +122,1 @@\n-        StringBuilder buffer = new StringBuilder( \"[\" );\n+        StringJoiner buffer = new StringJoiner(\", \", \"[\", \"]\");\n@@ -126,5 +124,3 @@\n-        Set<String> asSet = new LinkedHashSet<String>( options );\n-        for ( Iterator<String> iter = asSet.iterator(); iter.hasNext(); ) {\n-            buffer.append( singleOptionString(iter.next()) );\n-            if ( iter.hasNext() )\n-                buffer.append( \", \" );\n+        Set<String> asSet = new LinkedHashSet<>(options);\n+        for (String option : asSet) {\n+            buffer.add(singleOptionString(option));\n@@ -133,2 +129,0 @@\n-        buffer.append( ']' );\n-\n","filename":"src\/jdk.internal.opt\/share\/classes\/jdk\/internal\/joptsimple\/OptionException.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-            augmented = new StringBuilder( repeat( ' ', INDENT_WIDTH ) ).append( word );\n+            augmented = new StringBuilder( \" \".repeat(INDENT_WIDTH) ).append( word );\n","filename":"src\/jdk.internal.opt\/share\/classes\/jdk\/internal\/joptsimple\/internal\/Columns.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-            pad( buffer, each.option, optionWidth() ).append( repeat( ' ', columnSeparatorWidth ) );\n+            pad( buffer, each.option, optionWidth() ).append(\" \".repeat(columnSeparatorWidth) );\n@@ -130,1 +130,1 @@\n-        buffer.append( s ).append( repeat( ' ', length - s.length() ) );\n+        buffer.append( s ).append(\" \".repeat(length - s.length()) );\n","filename":"src\/jdk.internal.opt\/share\/classes\/jdk\/internal\/joptsimple\/internal\/Rows.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,2 +58,0 @@\n-import java.util.Iterator;\n-\n@@ -61,1 +59,0 @@\n-import static java.util.Arrays.*;\n@@ -74,16 +71,0 @@\n-    \/**\n-     * Gives a string consisting of the given character repeated the given number of times.\n-     *\n-     * @param ch the character to repeat\n-     * @param count how many times to repeat the character\n-     * @return the resultant string\n-     *\/\n-    public static String repeat( char ch, int count ) {\n-        StringBuilder buffer = new StringBuilder();\n-\n-        for ( int i = 0; i < count; ++i )\n-            buffer.append( ch );\n-\n-        return buffer.toString();\n-    }\n-\n@@ -113,32 +94,0 @@\n-    \/**\n-     * Gives a string consisting of the elements of a given array of strings, each separated by a given separator\n-     * string.\n-     *\n-     * @param pieces the strings to join\n-     * @param separator the separator\n-     * @return the joined string\n-     *\/\n-    public static String join( String[] pieces, String separator ) {\n-        return join( asList( pieces ), separator );\n-    }\n-\n-    \/**\n-     * Gives a string consisting of the string representations of the elements of a given array of objects,\n-     * each separated by a given separator string.\n-     *\n-     * @param pieces the elements whose string representations are to be joined\n-     * @param separator the separator\n-     * @return the joined string\n-     *\/\n-    public static String join( Iterable<String> pieces, String separator ) {\n-        StringBuilder buffer = new StringBuilder();\n-\n-        for ( Iterator<String> iter = pieces.iterator(); iter.hasNext(); ) {\n-            buffer.append( iter.next() );\n-\n-            if ( iter.hasNext() )\n-                buffer.append( separator );\n-        }\n-\n-        return buffer.toString();\n-    }\n","filename":"src\/jdk.internal.opt\/share\/classes\/jdk\/internal\/joptsimple\/internal\/Strings.java","additions":1,"deletions":52,"binary":false,"changes":53,"status":"modified"}]}