{"files":[{"patch":"@@ -425,1 +425,0 @@\n-                type = long.class;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -222,0 +222,15 @@\n+        \/* The struct is split into 8-byte chunks, and those chunks are passed in registers or on the stack.\n+           ABIv1 requires shifting if the struct occupies more than one 8-byte chunk and the last one is not full.\n+           Here's an example for passing an 11 byte struct with ABIv1:\n+        offset         : 0 .... 32 ..... 64 ..... 96 .... 128\n+        values         : xxxxxxxx|yyyyyyyy|zzzzzz??|????????   (can't touch bits 96..128)\n+        Load into int  :                  V        +--------+\n+                                          |                 |\n+                                          +--------+        |\n+                                                   V        V\n+        In register    :                   ????????|??zzzzzz   (LSBs are zz...z)\n+        Shift left     :                   zzzzzz00|00000000   (LSBs are 00...0)\n+        Write long     :                  V                 V\n+        Result         : xxxxxxxx|yyyyyyyy|zzzzzz00|00000000\n+        *\/\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}