{"files":[{"patch":"@@ -279,1 +279,1 @@\n-    static ShiftLeft shiftLeft(int shiftAmount, Class<?> type) {\n+    static ShiftLeft shiftLeft(int shiftAmount) {\n@@ -282,1 +282,1 @@\n-        return new ShiftLeft(shiftAmount, type);\n+        return new ShiftLeft(shiftAmount);\n@@ -285,1 +285,1 @@\n-    static ShiftRight shiftRight(int shiftAmount, Class<?> type) {\n+    static ShiftRight shiftRight(int shiftAmount) {\n@@ -288,1 +288,1 @@\n-        return new ShiftRight(shiftAmount, type);\n+        return new ShiftRight(shiftAmount);\n@@ -301,0 +301,2 @@\n+            } else if (toType == long.class) {\n+                return Cast.INT_TO_LONG;\n@@ -311,0 +313,18 @@\n+            } else if (fromType == long.class) {\n+                return Cast.LONG_TO_INT;\n+            }\n+        } else if (fromType == long.class) {\n+            if (toType == byte.class) {\n+                return Cast.LONG_TO_BYTE;\n+            } else if (toType == short.class) {\n+                return Cast.LONG_TO_SHORT;\n+            } else if (toType == char.class) {\n+                return Cast.LONG_TO_CHAR;\n+            }\n+        } else if (toType == long.class) {\n+            if (fromType == byte.class) {\n+                return Cast.BYTE_TO_LONG;\n+            } else if (fromType == short.class) {\n+                return Cast.SHORT_TO_LONG;\n+            } else if (fromType == char.class) {\n+                return Cast.CHAR_TO_LONG;\n@@ -403,3 +423,3 @@\n-            if (isSubIntType(type)) {\n-                bindings.add(Binding.cast(type, int.class));\n-                type = int.class;\n+            if (type == int.class || isSubIntType(type)) {\n+                bindings.add(Binding.cast(type, long.class));\n+                type = long.class;\n@@ -407,1 +427,1 @@\n-            bindings.add(Binding.shiftLeft(shiftAmount, type));\n+            bindings.add(Binding.shiftLeft(shiftAmount));\n@@ -412,3 +432,3 @@\n-            bindings.add(Binding.shiftRight(shiftAmount, type));\n-            if (isSubIntType(type)) {\n-                bindings.add(Binding.cast(int.class, type));\n+            bindings.add(Binding.shiftRight(shiftAmount));\n+            if (type == int.class || isSubIntType(type)) {\n+                bindings.add(Binding.cast(long.class, type));\n@@ -705,1 +725,1 @@\n-     *   Converts int to long if needed and then shifts left by the given number of Bytes.\n+     *   Shifts left by the given number of Bytes.\n@@ -707,1 +727,1 @@\n-    record ShiftLeft(int shiftAmount, Class<?> type) implements Binding {\n+    record ShiftLeft(int shiftAmount) implements Binding {\n@@ -712,1 +732,1 @@\n-            SharedUtils.checkType(last, (type == long.class) ? long.class : int.class);\n+            SharedUtils.checkType(last, long.class);\n@@ -719,6 +739,1 @@\n-            long l;\n-            if (type == long.class) {\n-                l = (long) stack.pop();\n-            } else {\n-                l = (long)(int) stack.pop();\n-            }\n+            long l = (long) stack.pop();\n@@ -733,1 +748,1 @@\n-     *   Shifts right by the given number of Bytes and then converts long to int if needed.\n+     *   Shifts right by the given number of Bytes.\n@@ -735,1 +750,1 @@\n-    record ShiftRight(int shiftAmount, Class<?> type) implements Binding {\n+    record ShiftRight(int shiftAmount) implements Binding {\n@@ -741,1 +756,1 @@\n-            stack.push((type == long.class) ? long.class : int.class);\n+            stack.push(long.class);\n@@ -749,5 +764,1 @@\n-            if (type == long.class) {\n-                stack.push(l);\n-            } else {\n-                stack.push((int) l);\n-            }\n+            stack.push(l);\n@@ -777,0 +788,2 @@\n+        INT_TO_LONG(int.class, long.class),\n+\n@@ -780,1 +793,10 @@\n-        SHORT_TO_INT(short.class, int.class);\n+        SHORT_TO_INT(short.class, int.class),\n+        LONG_TO_INT(long.class, int.class),\n+\n+        LONG_TO_BYTE(long.class, byte.class),\n+        LONG_TO_SHORT(long.class, short.class),\n+        LONG_TO_CHAR(long.class, char.class),\n+\n+        BYTE_TO_LONG(byte.class, long.class),\n+        SHORT_TO_LONG(short.class, long.class),\n+        CHAR_TO_LONG(char.class, long.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":51,"deletions":29,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -733,5 +733,1 @@\n-        if (shiftLeft.type() != long.class) {\n-            cb.i2l();\n-            popType(int.class);\n-            pushType(long.class);\n-        }\n+        popType(long.class);\n@@ -740,0 +736,1 @@\n+        pushType(long.class);\n@@ -743,0 +740,1 @@\n+        popType(long.class);\n@@ -745,5 +743,1 @@\n-        if (shiftRight.type() != long.class) {\n-            cb.l2i();\n-            popType(long.class);\n-            pushType(int.class);\n-        }\n+        pushType(long.class);\n@@ -771,0 +765,5 @@\n+            case BYTE_TO_LONG, CHAR_TO_LONG, SHORT_TO_LONG, INT_TO_LONG -> cb.i2l();\n+            case LONG_TO_BYTE -> { cb.l2i(); cb.i2b(); }\n+            case LONG_TO_SHORT -> { cb.l2i(); cb.i2s(); }\n+            case LONG_TO_CHAR -> { cb.l2i(); cb.i2c(); }\n+            case LONG_TO_INT -> cb.l2i();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}