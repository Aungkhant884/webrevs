{"files":[{"patch":"@@ -279,1 +279,3 @@\n-    static ShiftLeft shiftLeft(int shiftAmount, Class<?> type ) {\n+    static ShiftLeft shiftLeft(int shiftAmount, Class<?> type) {\n+        if (shiftAmount <= 0)\n+            throw new IllegalArgumentException(\"shiftAmount must be positive\");\n@@ -283,0 +285,6 @@\n+    static ShiftRight shiftRight(int shiftAmount, Class<?> type) {\n+        if (shiftAmount <= 0)\n+            throw new IllegalArgumentException(\"shiftAmount must be positive\");\n+        return new ShiftRight(shiftAmount, type);\n+    }\n+\n@@ -395,1 +403,1 @@\n-            if (shiftAmount > 0 && isSubIntType(type)) {\n+            if (isSubIntType(type)) {\n@@ -400,1 +408,6 @@\n-            if (shiftAmount < 0 && isSubIntType(type)) {\n+            return this;\n+        }\n+\n+        public Binding.Builder shiftRight(int shiftAmount, Class<?> type) {\n+            bindings.add(Binding.shiftRight(shiftAmount, type));\n+            if (isSubIntType(type)) {\n@@ -691,3 +704,2 @@\n-     *   Shifts the Bytes on the top of the operand stack (unsigned).\n-     *   Positive [shiftAmount] converts to long if needed and shifts left.\n-     *   Negative [shiftAmount] shifts right and converts to int if needed.\n+     *   Shifts the Bytes on the top of the operand stack (64 bit unsigned).\n+     *   Converts int to long if needed and then shifts left by the given number of Bytes.\n@@ -700,12 +712,2 @@\n-            if (shiftAmount > 0) {\n-                if (last != ((type == long.class) ? long.class : int.class))\n-                    throw new IllegalArgumentException(\n-                        String.format(\"Invalid operand type: %s. integral type expected\", last));\n-                stack.push(long.class);\n-            } else if (shiftAmount < 0) {\n-                if (last != long.class)\n-                    throw new IllegalArgumentException(\n-                        String.format(\"Invalid operand type: %s. long expected\", last));\n-                stack.push(type == long.class ? long.class : int.class);\n-            } else\n-                throw new IllegalArgumentException(\"shiftAmount 0 not supported\");\n+            SharedUtils.checkType(last, (type == long.class) ? long.class : int.class);\n+            stack.push(long.class);\n@@ -717,8 +719,31 @@\n-            if (shiftAmount > 0) {\n-                long l;\n-                if (type == long.class) {\n-                    l = (long) stack.pop();\n-                } else {\n-                    l = (long)(int) stack.pop();\n-                }\n-                l <<= (shiftAmount * Byte.SIZE);\n+            long l;\n+            if (type == long.class) {\n+                l = (long) stack.pop();\n+            } else {\n+                l = (long)(int) stack.pop();\n+            }\n+            l <<= (shiftAmount * Byte.SIZE);\n+            stack.push(l);\n+        }\n+    }\n+\n+    \/**\n+     * ShiftRight([shiftAmount])\n+     *   Shifts the Bytes on the top of the operand stack (64 bit unsigned).\n+     *   Shifts right by the given number of Bytes and then converts long to int if needed.\n+     *\/\n+    record ShiftRight(int shiftAmount, Class<?> type) implements Binding {\n+\n+        @Override\n+        public void verify(Deque<Class<?>> stack) {\n+            Class<?> last = stack.pop();\n+            SharedUtils.checkType(last, long.class);\n+            stack.push((type == long.class) ? long.class : int.class);\n+        }\n+\n+        @Override\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n+            long l = (long) stack.pop();\n+            l >>>= (shiftAmount * Byte.SIZE);\n+            if (type == long.class) {\n@@ -727,7 +752,1 @@\n-                long l = (long) stack.pop();\n-                l >>>= (-shiftAmount * Byte.SIZE);\n-                if (type == long.class) {\n-                    stack.push(l);\n-                } else {\n-                    stack.push((int) l);\n-                }\n+                stack.push((int) l);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":52,"deletions":33,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.internal.foreign.abi.Binding.ShiftRight;\n@@ -467,1 +468,2 @@\n-                case ShiftLeft shiftLeft     -> emitShift(shiftLeft);\n+                case ShiftLeft shiftLeft     -> emitShiftLeft(shiftLeft);\n+                case ShiftRight shiftRight   -> emitShiftRight(shiftRight);\n@@ -730,19 +732,17 @@\n-    private void emitShift(ShiftLeft shiftLeft) {\n-        int shiftAmount = shiftLeft.shiftAmount();\n-        Class<?> type = shiftLeft.type();\n-        if (shiftAmount > 0) {\n-            if (type != long.class) {\n-                cb.i2l();\n-                typeStack.pop();\n-                typeStack.push(long.class);\n-            }\n-            cb.constantInstruction(shiftAmount * Byte.SIZE);\n-            cb.lshl();\n-        } else {\n-            cb.constantInstruction(-shiftAmount * Byte.SIZE);\n-            cb.lushr();\n-            if (type != long.class) {\n-                cb.l2i();\n-                typeStack.pop();\n-                typeStack.push(int.class);\n-            }\n+    private void emitShiftLeft(ShiftLeft shiftLeft) {\n+        if (shiftLeft.type() != long.class) {\n+            cb.i2l();\n+            popType(int.class);\n+            pushType(long.class);\n+        }\n+        cb.constantInstruction(shiftLeft.shiftAmount() * Byte.SIZE);\n+        cb.lshl();\n+    }\n+\n+    private void emitShiftRight(ShiftRight shiftRight) {\n+        cb.constantInstruction(shiftRight.shiftAmount() * Byte.SIZE);\n+        cb.lushr();\n+        if (shiftRight.type() != long.class) {\n+            cb.l2i();\n+            popType(long.class);\n+            pushType(int.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.foreign.abi.Binding.ShiftRight;\n@@ -225,0 +226,1 @@\n+            case ShiftRight   unused -> true;\n@@ -260,0 +262,1 @@\n+            case ShiftRight   unused -> true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-                                    .shiftLeft(-shiftAmount, type);\n+                                    .shiftRight(shiftAmount, type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}