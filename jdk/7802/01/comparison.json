{"files":[{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.AbstractButton;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+import javax.swing.JToggleButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4615365\n+ * @summary This test confirms that the JSplitPane's current and last\n+ *          divider positions are correct when realized.\n+ * @run main JSplitPaneDividerLocationTest\n+ *\/\n+public class JSplitPaneDividerLocationTest {\n+\n+    private static JFrame frame;\n+    private static JPanel panel;\n+    private static JButton leftButton;\n+    private static JToggleButton triggerButton;\n+    private static volatile int currentLoc;\n+    private static volatile int lastLoc;\n+    private static volatile int lastLocExpected;\n+    private static Robot robot;\n+\n+    public static void main(String[] s) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                pressButton(triggerButton);\n+\n+                \/\/ Verifies that JSplitPane current and last divider\n+                \/\/ positions are correct and not as per JDK-4615365.\n+                if ((currentLoc == -1) || (lastLoc == 0)) {\n+                    throw new RuntimeException(\n+                            \"Test failed for \" + laf + \" :- last divider loc:\" +\n+                            \"actual = \" + lastLoc + \",expected = -1, current \" +\n+                            \"divider loc:actual=\" + currentLoc + \",expected>0\");\n+                }\n+                lastLocExpected = currentLoc;\n+\n+                \/\/ Slide the split pane divider slightly to the right side.\n+                final Point leftButtonLoc = getButtonLoc(leftButton);\n+                robot.mouseMove(leftButtonLoc.x + leftButton.getWidth() + 5,\n+                                leftButtonLoc.y + 35);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseMove(leftButtonLoc.x + leftButton.getWidth() + 8,\n+                                leftButtonLoc.y + 35);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                pressButton(triggerButton);\n+\n+                \/\/ Verifies that JSplitPane current and last divider positions\n+                \/\/ reflects the correct positions after a right slide.\n+                if ((lastLoc == lastLocExpected) && (currentLoc > lastLoc)) {\n+                    System.out.println(\"Test Passed.\");\n+                } else {\n+                    throw new RuntimeException(\n+                            \"Test failed for \" + laf + \", because after a \" +\n+                            \"right \" + \"slide\" + \", last divider \" +\n+                            \"location: \" + \"actual = \" + lastLoc +\n+                            \", expected = \" + lastLocExpected +\n+                            \", current divider \" + \"location: actual = \" +\n+                            currentLoc + \", expected > \" + lastLoc);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(\n+                        JSplitPaneDividerLocationTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void pressButton(JToggleButton button) throws Exception {\n+        final Point buttonLoc = getButtonLoc(button);\n+        robot.mouseMove(buttonLoc.x + 8, buttonLoc.y + 8);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static Point getButtonLoc(AbstractButton button)\n+            throws InterruptedException, InvocationTargetException {\n+        final AtomicReference<Point> loc = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            loc.set(button.getLocationOnScreen());\n+        });\n+        final Point buttonLoc = loc.get();\n+        return buttonLoc;\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        panel = new JPanel();\n+        panel.setLayout(new BorderLayout());\n+        leftButton = new JButton(\"Left Button\");\n+        JButton rightButton = new JButton(\"Right Button\");\n+\n+        final JSplitPane splitPane =\n+                new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, leftButton,\n+                               rightButton);\n+        panel.add(splitPane, BorderLayout.CENTER);\n+\n+        splitPane.setDividerSize(10);\n+\n+        triggerButton = new JToggleButton(\"Trigger\");\n+        triggerButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                currentLoc = splitPane.getDividerLocation();\n+                lastLoc = splitPane.getLastDividerLocation();\n+                System.out.println(\n+                        \"currentLoc = \" + currentLoc + \", lastLoc = \" +\n+                        lastLoc);\n+            }\n+        });\n+        panel.add(triggerButton, BorderLayout.SOUTH);\n+\n+        frame.setContentPane(panel);\n+        frame.setSize(300, 300);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/4615365\/JSplitPaneDividerLocationTest.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"}]}