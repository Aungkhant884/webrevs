{"files":[{"patch":"@@ -795,0 +795,8 @@\n+  if (file1 == nullptr && file2 == nullptr) {\n+    return true;\n+  }\n+\n+  if (file1 == nullptr || file2 == nullptr) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -327,1 +327,2 @@\n- -runtime\/cds\/appcds\/jcmd\/JCmdTest.java \\\n+ -runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java \\\n+ -runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,362 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8259070\n- * @summary Test jcmd to dump static and dynamic shared archive.\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @modules jdk.jcmd\/sun.tools.common:+open\n- * @compile ..\/test-classes\/Hello.java\n- * @build sun.hotspot.WhiteBox\n- * @build JCmdTestLingeredApp JCmdTest\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n- * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTest\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.nio.file.Files;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.dcmd.PidJcmdExecutor;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Utils;\n-import jtreg.SkippedException;\n-import sun.hotspot.WhiteBox;\n-\n-import java.io.InputStreamReader;\n-import java.io.BufferedReader;\n-\n-public class JCmdTest {\n-    static final String TEST_CLASSES[]      = {\"JCmdTestLingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp$1\"};\n-    static final String BOOT_CLASSES[]      = {\"Hello\"};\n-    static final String SUBCMD_STATIC_DUMP  = \"static_dump\";\n-    static final String SUBCMD_DYNAMIC_DUMP = \"dynamic_dump\";\n-\n-    static final String STATIC_DUMP_FILE    = \"mystatic\";\n-    static final String DYNAMIC_DUMP_FILE   = \"mydynamic\";\n-\n-\n-    static final String[] STATIC_MESSAGES   = {\"JCmdTestLingeredApp source: shared objects file\",\n-                                               \"LingeredApp source: shared objects file\",\n-                                               \"Hello source: shared objects file\"};\n-    static final String[] DYNAMIC_MESSAGES  = {\"JCmdTestLingeredApp source: shared objects file (top)\",\n-                                               \"LingeredApp source: shared objects file (top)\",\n-                                               \"Hello source: shared objects file (top)\"};\n-\n-    static String testJar = null;\n-    static String bootJar = null;\n-    static String allJars = null;\n-\n-    private static void buildJar() throws Exception {\n-        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n-        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n-        System.out.println(\"Jar file created: \" + testJar);\n-        System.out.println(\"Jar file created: \" + bootJar);\n-        allJars = testJar+ File.pathSeparator + bootJar;\n-    }\n-\n-    private static boolean argsContain(String[] args, String flag) {\n-         for (String s: args) {\n-             if (s.contains(flag)) {\n-                 return true;\n-             }\n-         }\n-         return false;\n-    }\n-\n-    private static boolean argsContainOpts(String[] args, String... opts) {\n-        boolean allIn = true;\n-        for (String f : opts) {\n-            allIn &= argsContain(args, f);\n-            if (!allIn) {\n-                break;\n-            }\n-        }\n-        return allIn;\n-    }\n-\n-    private static LingeredApp createLingeredApp(String... args) throws Exception {\n-        JCmdTestLingeredApp app  = new JCmdTestLingeredApp();\n-        try {\n-            LingeredApp.startAppExactJvmOpts(app, args);\n-        } catch (Exception e) {\n-            \/\/ Check flags used.\n-            if (argsContainOpts(args, new String[] {\"-Xshare:off\", \"-XX:+RecordDynamicDumpInfo\"}) ||\n-                argsContainOpts(args, new String[] {\"-XX:+RecordDynamicDumpInfo\", \"-XX:ArchiveClassesAtExit=\"})) {\n-                \/\/ app exit premature due to incompactible args\n-                return null;\n-            }\n-            Process proc = app.getProcess();\n-            if (e instanceof IOException && proc.exitValue() == 0) {\n-                \/\/ Process started and exit normally.\n-                return null;\n-            }\n-            throw e;\n-        }\n-        return app;\n-    }\n-\n-    static int logFileCount = 0;\n-    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n-        List<String> args = new ArrayList<String>();\n-        if (useBoot) {\n-            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n-        }\n-        args.add(\"-cp\");\n-        if (useBoot) {\n-            args.add(testJar);\n-        } else {\n-            args.add(allJars);\n-        }\n-        args.add(\"-Xshare:on\");\n-        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n-        args.add(\"-Xlog:class+load\");\n-\n-        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n-        app.setLogFileName(\"JCmdTest.log.\" + (logFileCount++));\n-        app.stopApp();\n-        String output = app.getOutput().getStdout();\n-        if (messages != null) {\n-            for (String msg : messages) {\n-                if (!output.contains(msg)) {\n-                    throw new RuntimeException(msg + \" missed from output\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void test(String jcmdSub, String archiveFile,\n-                             long pid, boolean useBoot, boolean expectOK, String... messages) throws Exception {\n-        System.out.println(\"Expected: \" + (expectOK ? \"SUCCESS\" : \"FAIL\"));\n-        boolean isStatic = jcmdSub.equals(SUBCMD_STATIC_DUMP);\n-        String fileName = archiveFile != null ? archiveFile :\n-            (\"java_pid\" + pid + (isStatic ? \"_static\" : \"_dynamic\") + \".jsa\");\n-        File file = new File(fileName);\n-        if (file.exists()) {\n-            file.delete();\n-        }\n-\n-        String jcmd = \"VM.cds \" + jcmdSub;\n-        if (archiveFile  != null) {\n-          jcmd +=  \" \" + archiveFile;\n-        }\n-\n-        PidJcmdExecutor cmdExecutor = new PidJcmdExecutor(String.valueOf(pid));\n-        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n-\n-        if (expectOK) {\n-            output.shouldHaveExitValue(0);\n-            if (!file.exists()) {\n-                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n-            } else {\n-                runWithArchiveFile(fileName, useBoot, messages);\n-                file.delete();\n-            }\n-        } else {\n-            if (file.exists()) {\n-                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n-            }\n-        }\n-    }\n-\n-    private static void print2ln(String arg) {\n-        System.out.println(\"\\n\" + arg + \"\\n\");\n-    }\n-\n-    \/\/ Those two flags will not create a successful LingeredApp.\n-    private static String[] noDumpFlags  =\n-        {\"-XX:+DumpSharedSpaces\",\n-         \"-Xshare:dump\"};\n-    \/\/ Those flags will be excluded in static dumping,\n-    \/\/ See src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java\n-    private static String[] excludeFlags = {\n-         \"-XX:DumpLoadedClassList=AnyFileName.classlist\",\n-         \/\/ this flag just dump archive, won't run app normally.\n-         \/\/ \"-XX:+DumpSharedSpaces\",\n-         \"-XX:+DynamicDumpSharedSpaces\",\n-         \"-XX:+RecordDynamicDumpInfo\",\n-         \"-Xshare:on\",\n-         \"-Xshare:auto\",\n-         \"-XX:SharedClassListFile=non-exist.classlist\",\n-         \"-XX:SharedArchiveFile=non-exist.jsa\",\n-         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RequireSharedSpaces\"};\n-\n-    \/\/ Times to dump cds against same process.\n-    private static final int ITERATION_TIMES = 2;\n-\n-    private static void test() throws Exception {\n-        LingeredApp app  = null;\n-        long pid;\n-        int  test_count = 1;\n-        final boolean useBoot = true;\n-        final boolean noBoot = !useBoot;\n-        final boolean EXPECT_PASS = true;\n-        final boolean EXPECT_FAIL = !EXPECT_PASS;\n-\n-        \/\/ Static dump with default name multiple times.\n-        print2ln(test_count++ + \" Static dump with default name multiple times.\");\n-        app  = createLingeredApp(\"-cp\", allJars);\n-        pid = app.getPid();\n-        for (int i = 0; i < ITERATION_TIMES; i++) {\n-            test(SUBCMD_STATIC_DUMP, null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n-        }\n-        app.stopApp();\n-\n-        \/\/ Test static dump with given file name.\n-        print2ln(test_count++ + \" Test static dump with given file name.\");\n-        app = createLingeredApp(\"-cp\", allJars);\n-        pid = app.getPid();\n-        for (int i = 0; i < ITERATION_TIMES; i++) {\n-            test(SUBCMD_STATIC_DUMP, STATIC_DUMP_FILE + \"0\" + i + \".jsa\", pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n-        }\n-        app.stopApp();\n-\n-        \/\/  Test static dump with flags with which dumping should fail\n-        \/\/  This test will result classes.jsa in default server dir if -XX:SharedArchiveFile= not set.\n-        print2ln(test_count++ + \" Test static dump with flags with which dumping should fail.\");\n-        for (String flag : noDumpFlags) {\n-            app = createLingeredApp(\"-cp\", allJars, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n-            \/\/ Following should not be executed.\n-            if (app != null && app.getProcess().isAlive()) {\n-                pid = app.getPid();\n-                test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_FAIL);\n-                app.stopApp();\n-                \/\/ if above executed OK, mean failed.\n-                throw new RuntimeException(\"Should not dump successful with \" + flag);\n-            }\n-        }\n-\n-        \/\/ Test static with -Xbootclasspath\/a:boot.jar\n-        print2ln(test_count++ + \" Test static with -Xbootassath\/a:boot.jar\");\n-        app = createLingeredApp(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", testJar);\n-        pid = app.getPid();\n-        test(SUBCMD_STATIC_DUMP, null, pid, useBoot, EXPECT_PASS, STATIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test static with limit-modules java.base.\n-        print2ln(test_count++ + \" Test static with --limit-modules java.base.\");\n-        app = createLingeredApp(\"--limit-modules\", \"java.base\", \"-cp\", allJars);\n-        pid = app.getPid();\n-        test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_FAIL);\n-        app.stopApp();\n-\n-        \/\/ Test static dump with flags which will be filtered before dumping.\n-        print2ln(test_count++ + \" Test static dump with flags which will be filtered before dumping.\");\n-        for (String flag : excludeFlags) {\n-            app = createLingeredApp(\"-cp\", allJars, flag);\n-            pid = app.getPid();\n-            test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_PASS, STATIC_MESSAGES);\n-            app.stopApp();\n-        }\n-\n-\n-        \/\/ Test static with -Xshare:off will be OK to dump.\n-        print2ln(test_count++ + \" Test static with -Xshare:off will be OK to dump.\");\n-        app = createLingeredApp(\"-Xshare:off\", \"-cp\", allJars);\n-        pid = app.getPid();\n-        test(SUBCMD_STATIC_DUMP, null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n-        print2ln(test_count++ + \" Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01.jsa\", pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n-\n-        \/\/ Test dynamic dump twice to same process.\n-        print2ln(test_count++ + \" Test dynamic dump second time to the same process.\");\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"02.jsa\", pid, noBoot,  EXPECT_FAIL);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n-        print2ln(test_count++ + \" Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", allJars);\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01.jsa\", pid, noBoot, EXPECT_FAIL);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with default archive name (null).\n-        print2ln(test_count++ + \" Test dynamic dump with default archive name (null).\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic with -Xbootclasspath\/a:boot.jar\n-        print2ln(test_count++ + \" Test dynamic with -Xbootclasspath\/a:boot.jar\");\n-        app = createLingeredApp(\"-cp\", testJar, \"-Xbootclasspath\/a:\" + bootJar, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, useBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n-        \/\/ Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n-        print2ln(test_count++ + \" Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n-        app = createLingeredApp(\"-cp\", allJars,\n-                                \"-Xshare:auto\",\n-                                \"-XX:+RecordDynamicDumpInfo\",\n-                                \"-XX:ArchiveClassesAtExit=AnyName.jsa\");\n-\n-        if (app != null) {\n-            if (app.getProcess().isAlive()) {\n-                throw new RuntimeException(\"The JCmdTestLingeredApp should not start up!\");\n-            }\n-        }\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n-        if (!cdsEnabled) {\n-            throw new SkippedException(\"CDS is not available for this JDK.\");\n-        }\n-        buildJar();\n-        test();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTest.java","additions":0,"deletions":362,"binary":false,"changes":362,"status":"deleted"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jtreg.SkippedException;\n+import sun.hotspot.WhiteBox;\n+\n+\n+public abstract class JCmdTestDumpBase {\n+    private static boolean isStatic; \/\/ set first in subclass for dump type\n+    protected static void setIsStatic(boolean value) {\n+        isStatic = value;\n+    }\n+    \/**************************************\n+     * for a subclass to do static dump\n+     *    public class JCmdTestStaticDump extends JCmdTestDumpBase {\n+     *        public static void test() throws Exception {\n+     *            setIsStatic(true);\n+     *            \/\/ do test\n+     *        }\n+     *        public static void main(String[] args) throws Exception {\n+     *            runTest(JCmdTestStaticDump::test);\n+     *        }\n+     *    }\n+     ***************************************\/\n+    public static interface JCmdTest {\n+        public void run() throws Exception;\n+    }\n+\n+    public static void runTest(JCmdTest t) throws Exception {\n+        checkCDSEnabled();\n+        t.run();\n+    }\n+    private static final String TEST_CLASSES[] =\n+                             {\"JCmdTestLingeredApp\",\n+                              \"jdk\/test\/lib\/apps\/LingeredApp\",\n+                              \"jdk\/test\/lib\/apps\/LingeredApp$1\"};\n+    private static final String BOOT_CLASSES[] = {\"Hello\"};\n+\n+    protected static String testJar = null;\n+    protected static String bootJar = null;\n+    protected static String allJars = null;\n+\n+    public static final boolean useBoot = true;\n+    public static final boolean noBoot = !useBoot;\n+    public static final boolean EXPECT_PASS = true;\n+    public static final boolean EXPECT_FAIL = !EXPECT_PASS;\n+\n+    protected static void buildJars() throws Exception {\n+        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n+        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n+        System.out.println(\"Jar file created: \" + testJar);\n+        System.out.println(\"Jar file created: \" + bootJar);\n+        allJars = testJar + File.pathSeparator + bootJar;\n+    }\n+\n+    private static void checkCDSEnabled() throws Exception {\n+        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n+        if (!cdsEnabled) {\n+            throw new SkippedException(\"CDS is not available for this JDK.\");\n+        }\n+    }\n+\n+    private static boolean argsContain(String[] args, String flag) {\n+         for (String s: args) {\n+             if (s.contains(flag)) {\n+                 return true;\n+             }\n+         }\n+         return false;\n+    }\n+\n+    private static boolean argsContainOpts(String[] args, String... opts) {\n+        boolean allIn = true;\n+        for (String f : opts) {\n+            allIn &= argsContain(args, f);\n+            if (!allIn) {\n+                break;\n+            }\n+        }\n+        return allIn;\n+    }\n+\n+    protected static LingeredApp createLingeredApp(String... args) throws Exception {\n+        JCmdTestLingeredApp app  = new JCmdTestLingeredApp();\n+        try {\n+            LingeredApp.startAppExactJvmOpts(app, args);\n+        } catch (Exception e) {\n+            \/\/ Check flags used.\n+            if (argsContainOpts(args, new String[] {\"-Xshare:off\", \"-XX:+RecordDynamicDumpInfo\"}) ||\n+                argsContainOpts(args, new String[] {\"-XX:+RecordDynamicDumpInfo\", \"-XX:ArchiveClassesAtExit=\"})) {\n+                \/\/ app exit premature due to incompactible args\n+                return null;\n+            }\n+            Process proc = app.getProcess();\n+            if (e instanceof IOException && proc.exitValue() == 0) {\n+                \/\/ Process started and exit normally.\n+                return null;\n+            }\n+            throw e;\n+        }\n+        return app;\n+    }\n+\n+    private static int logFileCount = 0;\n+    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n+        List<String> args = new ArrayList<String>();\n+        if (useBoot) {\n+            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n+        }\n+        args.add(\"-cp\");\n+        if (useBoot) {\n+            args.add(testJar);\n+        } else {\n+            args.add(allJars);\n+        }\n+        args.add(\"-Xshare:on\");\n+        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n+        args.add(\"-Xlog:class+load\");\n+\n+        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n+        app.setLogFileName(\"JCmdTestDynamicDump.log.\" + (logFileCount++));\n+        app.stopApp();\n+        String output = app.getOutput().getStdout();\n+        if (messages != null) {\n+            for (String msg : messages) {\n+                if (!output.contains(msg)) {\n+                    throw new RuntimeException(msg + \" missed from output\");\n+                }\n+            }\n+        }\n+    }\n+\n+    protected static void test(String archiveFile, long pid,\n+                             boolean useBoot, boolean expectOK, String... messages) throws Exception {\n+        System.out.println(\"Expected: \" + (expectOK ? \"SUCCESS\" : \"FAIL\"));\n+        String fileName = archiveFile != null ? archiveFile :\n+            (\"java_pid\" + pid + (isStatic ? \"_static.jsa\" : \"_dynamic.jsa\"));\n+        File file = new File(fileName);\n+        if (file.exists()) {\n+            file.delete();\n+        }\n+\n+        String jcmd = \"VM.cds \" + (isStatic ? \"static_dump\" : \"dynamic_dump\");\n+        if (archiveFile  != null) {\n+          jcmd +=  \" \" + archiveFile;\n+        }\n+\n+        PidJcmdExecutor cmdExecutor = new PidJcmdExecutor(String.valueOf(pid));\n+        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n+\n+        if (expectOK) {\n+            output.shouldHaveExitValue(0);\n+            if (!file.exists()) {\n+                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n+            } else {\n+                runWithArchiveFile(fileName, useBoot, messages);\n+                file.delete();\n+            }\n+        } else {\n+            if (file.exists()) {\n+                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n+            }\n+        }\n+    }\n+\n+    protected static void print2ln(String arg) {\n+        System.out.println(\"\\n\" + arg + \"\\n\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259070\n+ * @summary Test jcmd to dump dynamic shared archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestDynamicDump\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestDynamicDump\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class JCmdTestDynamicDump extends JCmdTestDumpBase {\n+    static final String DYNAMIC_DUMP_FILE   = \"mydynamic\";\n+    static final String[] DYNAMIC_MESSAGES  = {\"JCmdTestLingeredApp source: shared objects file (top)\",\n+                                               \"LingeredApp source: shared objects file (top)\",\n+                                               \"Hello source: shared objects file (top)\"};\n+    static void test() throws Exception {\n+        setIsStatic(false);\n+        buildJars();\n+\n+        LingeredApp app  = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        \/\/ Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(DYNAMIC_DUMP_FILE + \"01.jsa\", pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+\n+        \/\/ Test dynamic dump twice to same process.\n+        print2ln(test_count++ + \" Test dynamic dump second time to the same process.\");\n+        test(\"02.jsa\", pid, noBoot,  EXPECT_FAIL);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(\"01.jsa\", pid, noBoot, EXPECT_FAIL);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with default archive name (null).\n+        print2ln(test_count++ + \" Test dynamic dump with default archive name (null).\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic with -Xbootclasspath\/a:boot.jar\n+        print2ln(test_count++ + \" Test dynamic with -Xbootclasspath\/a:boot.jar\");\n+        app = createLingeredApp(\"-cp\", testJar, \"-Xbootclasspath\/a:\" + bootJar, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, useBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test -XX:+RecordDynamicDump -XX:SharedArchiveFile=test_static.jsa\n+        print2ln(test_count++ + \" Test -XX:+RecordDynamicDumpInfo -XX:SharedArchiveFile=test_static.jsa\");\n+        \/\/ Dump a static archive as base (here do not use the default classes.jsa)\n+        String archiveFile = \"test_static.jsa\";\n+        dumpStaticArchive(archiveFile);\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\",\n+                                \"-XX:SharedArchiveFile=\" + archiveFile);\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n+        app = createLingeredApp(\"-cp\", allJars,\n+                                \"-Xshare:auto\",\n+                                \"-XX:+RecordDynamicDumpInfo\",\n+                                \"-XX:ArchiveClassesAtExit=AnyName.jsa\");\n+        if (app != null) {\n+            if (app.getProcess().isAlive()) {\n+                throw new RuntimeException(\"The JCmdTestLingeredApp should not start up!\");\n+            }\n+        }\n+    }\n+\n+    \/\/ Dump a static archive, not using TestCommon.dump(...), we do not take jtreg args.\n+    private static void dumpStaticArchive(String archiveFile) throws Exception {\n+        String javapath = JDKToolFinder.getJDKTool(\"java\");\n+        String cmd[] = {javapath, \"-Xshare:dump\",  \"-XX:SharedArchiveFile=\" + archiveFile};\n+        \/\/ Do not use ProcessTools.createTestJvm(cmd) here, it copies jtreg env.\n+        ProcessBuilder pb = new ProcessBuilder(cmd);\n+        CDSTestUtils.executeAndLog(pb, \"dump\")\n+            .shouldHaveExitValue(0);\n+        File file = new File(archiveFile);\n+        if (!file.exists()) {\n+            throw new RuntimeException(\"Cannot dump classes to archive file \" + archiveFile);\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(JCmdTestDynamicDump::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259070\n+ * @summary Test jcmd to dump static shared archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestStaticDump\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestStaticDump\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+public class JCmdTestStaticDump extends JCmdTestDumpBase {\n+\n+    static final String STATIC_DUMP_FILE    = \"mystatic\";\n+    static final String[] STATIC_MESSAGES   = {\"JCmdTestLingeredApp source: shared objects file\",\n+                                               \"LingeredApp source: shared objects file\",\n+                                               \"Hello source: shared objects file\"};\n+\n+    \/\/ Those two flags will not create a successful LingeredApp.\n+    private static String[] noDumpFlags  =\n+        {\"-XX:+DumpSharedSpaces\",\n+         \"-Xshare:dump\"};\n+    \/\/ Those flags will be excluded in static dumping,\n+    \/\/ See src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java\n+    private static String[] excludeFlags = {\n+         \"-XX:DumpLoadedClassList=AnyFileName.classlist\",\n+         \/\/ this flag just dump archive, won't run app normally.\n+         \/\/ \"-XX:+DumpSharedSpaces\",\n+         \"-XX:+DynamicDumpSharedSpaces\",\n+         \"-XX:+RecordDynamicDumpInfo\",\n+         \"-Xshare:on\",\n+         \"-Xshare:auto\",\n+         \"-XX:SharedClassListFile=non-exist.classlist\",\n+         \"-XX:SharedArchiveFile=non-exist.jsa\",\n+         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n+         \"-XX:+UseSharedSpaces\",\n+         \"-XX:+RequireSharedSpaces\"};\n+\n+    \/\/ Times to dump cds against same process.\n+    private static final int ITERATION_TIMES = 2;\n+\n+    static void test() throws Exception {\n+        setIsStatic(true);\n+        buildJars();\n+\n+        LingeredApp app = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        \/\/ Static dump with default name multiple times.\n+        print2ln(test_count++ + \" Static dump with default name multiple times.\");\n+        app  = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        for (int i = 0; i < ITERATION_TIMES; i++) {\n+            test(null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n+        }\n+        app.stopApp();\n+\n+        \/\/ Test static dump with given file name.\n+        print2ln(test_count++ + \" Test static dump with given file name.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        for (int i = 0; i < ITERATION_TIMES; i++) {\n+            test(\"0\" + i + \".jsa\", pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n+        }\n+        app.stopApp();\n+\n+        \/\/  Test static dump with flags with which dumping should fail\n+        \/\/  This test will result classes.jsa in default server dir if -XX:SharedArchiveFile= not set.\n+        print2ln(test_count++ + \" Test static dump with flags with which dumping should fail.\");\n+        for (String flag : noDumpFlags) {\n+            app = createLingeredApp(\"-cp\", allJars, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n+            \/\/ Following should not be executed.\n+            if (app != null && app.getProcess().isAlive()) {\n+                pid = app.getPid();\n+                test(null, pid, noBoot, EXPECT_FAIL);\n+                app.stopApp();\n+                \/\/ if above executed OK, mean failed.\n+                throw new RuntimeException(\"Should not dump successful with \" + flag);\n+            }\n+        }\n+\n+        \/\/ Test static with -Xbootclasspath\/a:boot.jar\n+        print2ln(test_count++ + \" Test static with -Xbootassath\/a:boot.jar\");\n+        app = createLingeredApp(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", testJar);\n+        pid = app.getPid();\n+        test(null, pid, useBoot, EXPECT_PASS, STATIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test static with limit-modules java.base.\n+        print2ln(test_count++ + \" Test static with --limit-modules java.base.\");\n+        app = createLingeredApp(\"--limit-modules\", \"java.base\", \"-cp\", allJars);\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_FAIL);\n+        app.stopApp();\n+\n+        \/\/ Test static dump with flags which will be filtered before dumping.\n+        print2ln(test_count++ + \" Test static dump with flags which will be filtered before dumping.\");\n+        for (String flag : excludeFlags) {\n+            app = createLingeredApp(\"-cp\", allJars, flag);\n+            pid = app.getPid();\n+            test(null, pid, noBoot, EXPECT_PASS, STATIC_MESSAGES);\n+            app.stopApp();\n+        }\n+\n+        \/\/ Test static with -Xshare:off will be OK to dump.\n+        print2ln(test_count++ + \" Test static with -Xshare:off will be OK to dump.\");\n+        app = createLingeredApp(\"-Xshare:off\", \"-cp\", allJars);\n+        pid = app.getPid();\n+        test(null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test static with -XX:+RecordDynamicDumpInfo will be OK to dump.\n+        print2ln(test_count++ + \" Test static with -XX:+RecordDynamicDumpInfo will be OK to dump.\");\n+        app = createLingeredApp(\"-XX:+RecordDynamicDumpInfo\", \"-cp\", allJars);\n+        pid = app.getPid();\n+        test(null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n+        app.stopApp();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(JCmdTestStaticDump::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}