{"files":[{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+import jtreg.SkippedException;\n+import sun.hotspot.WhiteBox;\n+\n+import java.io.InputStreamReader;\n+import java.io.BufferedReader;\n+\n+public abstract class JCmdTestDumpBase {\n+    private static boolean isStatic; \/\/ set first in subclass for dump type\n+    protected static void setIsStatic(boolean value) {\n+        isStatic = value;\n+    }\n+    \/**************************************\n+     * for a subclass to do static dump\n+     *    public class JCmdTestStaticDump extends JCmdTestDumpBase {\n+     *        isStatic = true; \/\/ must, false for dynamic\n+     *        public static void test() throws Exception {\n+     *            \/\/ do test\n+     *        }\n+     *        public static void main(String[] args) throws Exception {\n+     *            runTest(JCmdTestStaticDump::test);\n+     *        }\n+     *    }\n+     ***************************************\/\n+    public static interface JCmdTest {\n+        public void run() throws Exception;\n+    }\n+\n+    public static void runTest(JCmdTest t) throws Exception {\n+        checkCDSEnabled();\n+        t.run();\n+    }\n+    private static final String TEST_CLASSES[] =\n+                             {\"JCmdTestLingeredApp\",\n+                              \"jdk\/test\/lib\/apps\/LingeredApp\",\n+                              \"jdk\/test\/lib\/apps\/LingeredApp$1\"};\n+    private static final String BOOT_CLASSES[]    = {\"Hello\"};\n+\n+    protected static String testJar = null;\n+    protected static String bootJar = null;\n+    protected static String allJars = null;\n+\n+    protected static void buildJars() throws Exception {\n+        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n+        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n+        System.out.println(\"Jar file created: \" + testJar);\n+        System.out.println(\"Jar file created: \" + bootJar);\n+        allJars = testJar+ File.pathSeparator + bootJar;\n+    }\n+\n+    private static void checkCDSEnabled() throws Exception {\n+        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n+        if (!cdsEnabled) {\n+            throw new SkippedException(\"CDS is not available for this JDK.\");\n+        }\n+    }\n+\n+    private static boolean argsContain(String[] args, String flag) {\n+         for (String s: args) {\n+             if (s.contains(flag)) {\n+                 return true;\n+             }\n+         }\n+         return false;\n+    }\n+\n+    private static boolean argsContainOpts(String[] args, String... opts) {\n+        boolean allIn = true;\n+        for (String f : opts) {\n+            allIn &= argsContain(args, f);\n+            if (!allIn) {\n+                break;\n+            }\n+        }\n+        return allIn;\n+    }\n+\n+    protected static LingeredApp createLingeredApp(String... args) throws Exception {\n+        JCmdTestLingeredApp app  = new JCmdTestLingeredApp();\n+        try {\n+            LingeredApp.startAppExactJvmOpts(app, args);\n+        } catch (Exception e) {\n+            \/\/ Check flags used.\n+            if (argsContainOpts(args, new String[] {\"-Xshare:off\", \"-XX:+RecordDynamicDumpInfo\"}) ||\n+                argsContainOpts(args, new String[] {\"-XX:+RecordDynamicDumpInfo\", \"-XX:ArchiveClassesAtExit=\"})) {\n+                \/\/ app exit premature due to incompactible args\n+                return null;\n+            }\n+            Process proc = app.getProcess();\n+            if (e instanceof IOException && proc.exitValue() == 0) {\n+                \/\/ Process started and exit normally.\n+                return null;\n+            }\n+            throw e;\n+        }\n+        return app;\n+    }\n+\n+    private static int logFileCount = 0;\n+    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n+        List<String> args = new ArrayList<String>();\n+        if (useBoot) {\n+            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n+        }\n+        args.add(\"-cp\");\n+        if (useBoot) {\n+            args.add(testJar);\n+        } else {\n+            args.add(allJars);\n+        }\n+        args.add(\"-Xshare:on\");\n+        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n+        args.add(\"-Xlog:class+load\");\n+\n+        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n+        app.setLogFileName(\"JCmdTestDynamicDump.log.\" + (logFileCount++));\n+        app.stopApp();\n+        String output = app.getOutput().getStdout();\n+        if (messages != null) {\n+            for (String msg : messages) {\n+                if (!output.contains(msg)) {\n+                    throw new RuntimeException(msg + \" missed from output\");\n+                }\n+            }\n+        }\n+    }\n+\n+    protected static void test(String archiveFile, long pid,\n+                             boolean useBoot, boolean expectOK, String... messages) throws Exception {\n+        System.out.println(\"Expected: \" + (expectOK ? \"SUCCESS\" : \"FAIL\"));\n+        String fileName = archiveFile != null ? archiveFile :\n+            (\"java_pid\" + pid + (isStatic ? \"_static.jsa\" : \"_dynamic.jsa\"));\n+        File file = new File(fileName);\n+        if (file.exists()) {\n+            file.delete();\n+        }\n+\n+        String jcmd = \"VM.cds \" + (isStatic ? \"static_dump\" : \"dynamic_dump\");\n+        if (archiveFile  != null) {\n+          jcmd +=  \" \" + archiveFile;\n+        }\n+\n+        PidJcmdExecutor cmdExecutor = new PidJcmdExecutor(String.valueOf(pid));\n+        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n+\n+        if (expectOK) {\n+            output.shouldHaveExitValue(0);\n+            if (!file.exists()) {\n+                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n+            } else {\n+                runWithArchiveFile(fileName, useBoot, messages);\n+                file.delete();\n+            }\n+        } else {\n+            if (file.exists()) {\n+                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n+            }\n+        }\n+    }\n+\n+    protected static void print2ln(String arg) {\n+        System.out.println(\"\\n\" + arg + \"\\n\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile ..\/test-classes\/Hello.java\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n@@ -50,2 +50,0 @@\n-import jtreg.SkippedException;\n-import sun.hotspot.WhiteBox;\n@@ -56,6 +54,1 @@\n-public class JCmdTestDynamicDump {\n-    static final String TEST_CLASSES[]      = {\"JCmdTestLingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp$1\"};\n-    static final String BOOT_CLASSES[]      = {\"Hello\"};\n-\n+public class JCmdTestDynamicDump extends JCmdTestDumpBase {\n@@ -63,2 +56,0 @@\n-\n-\n@@ -68,121 +59,2 @@\n-\n-    static String testJar = null;\n-    static String bootJar = null;\n-    static String allJars = null;\n-\n-    private static void buildJar() throws Exception {\n-        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n-        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n-        System.out.println(\"Jar file created: \" + testJar);\n-        System.out.println(\"Jar file created: \" + bootJar);\n-        allJars = testJar+ File.pathSeparator + bootJar;\n-    }\n-\n-    private static boolean argsContain(String[] args, String flag) {\n-         for (String s: args) {\n-             if (s.contains(flag)) {\n-                 return true;\n-             }\n-         }\n-         return false;\n-    }\n-\n-    private static boolean argsContainOpts(String[] args, String... opts) {\n-        boolean allIn = true;\n-        for (String f : opts) {\n-            allIn &= argsContain(args, f);\n-            if (!allIn) {\n-                break;\n-            }\n-        }\n-        return allIn;\n-    }\n-\n-    private static LingeredApp createLingeredApp(String... args) throws Exception {\n-        JCmdTestLingeredApp app  = new JCmdTestLingeredApp();\n-        try {\n-            LingeredApp.startAppExactJvmOpts(app, args);\n-        } catch (Exception e) {\n-            \/\/ Check flags used.\n-            if (argsContainOpts(args, new String[] {\"-Xshare:off\", \"-XX:+RecordDynamicDumpInfo\"}) ||\n-                argsContainOpts(args, new String[] {\"-XX:+RecordDynamicDumpInfo\", \"-XX:ArchiveClassesAtExit=\"})) {\n-                \/\/ app exit premature due to incompactible args\n-                return null;\n-            }\n-            Process proc = app.getProcess();\n-            if (e instanceof IOException && proc.exitValue() == 0) {\n-                \/\/ Process started and exit normally.\n-                return null;\n-            }\n-            throw e;\n-        }\n-        return app;\n-    }\n-\n-    static int logFileCount = 0;\n-    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n-        List<String> args = new ArrayList<String>();\n-        if (useBoot) {\n-            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n-        }\n-        args.add(\"-cp\");\n-        if (useBoot) {\n-            args.add(testJar);\n-        } else {\n-            args.add(allJars);\n-        }\n-        args.add(\"-Xshare:on\");\n-        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n-        args.add(\"-Xlog:class+load\");\n-\n-        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n-        app.setLogFileName(\"JCmdTestDynamicDump.log.\" + (logFileCount++));\n-        app.stopApp();\n-        String output = app.getOutput().getStdout();\n-        if (messages != null) {\n-            for (String msg : messages) {\n-                if (!output.contains(msg)) {\n-                    throw new RuntimeException(msg + \" missed from output\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void test(String archiveFile, long pid,\n-                             boolean useBoot, boolean expectOK, String... messages) throws Exception {\n-        System.out.println(\"Expected: \" + (expectOK ? \"SUCCESS\" : \"FAIL\"));\n-        String fileName = archiveFile != null ? archiveFile :\n-            (\"java_pid\" + pid + \"_dynamic.jsa\");\n-        File file = new File(fileName);\n-        if (file.exists()) {\n-            file.delete();\n-        }\n-\n-        String jcmd = \"VM.cds dynamic_dump\";\n-        if (archiveFile  != null) {\n-          jcmd +=  \" \" + archiveFile;\n-        }\n-\n-        PidJcmdExecutor cmdExecutor = new PidJcmdExecutor(String.valueOf(pid));\n-        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n-\n-        if (expectOK) {\n-            output.shouldHaveExitValue(0);\n-            if (!file.exists()) {\n-                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n-            } else {\n-                runWithArchiveFile(fileName, useBoot, messages);\n-                file.delete();\n-            }\n-        } else {\n-            if (file.exists()) {\n-                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n-            }\n-        }\n-    }\n-\n-    private static void print2ln(String arg) {\n-        System.out.println(\"\\n\" + arg + \"\\n\");\n-    }\n-\n-    private static void test_dynamic() throws Exception {\n+    static void test() throws Exception {\n+        setIsStatic(false);\n@@ -198,0 +70,2 @@\n+        \/\/ build test.jar and boot.jar\n+        buildJars();\n@@ -278,1 +152,1 @@\n-            throw new RuntimeException(\"Shared archive file \" + archiveFile + \" is not created\");\n+            throw new RuntimeException(\"Cannot dump classes to archive file \" + archiveFile);\n@@ -283,6 +157,1 @@\n-        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n-        if (!cdsEnabled) {\n-            throw new SkippedException(\"CDS is not available for this JDK.\");\n-        }\n-        buildJar();\n-        test_dynamic();\n+        runTest(JCmdTestDynamicDump::test);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":8,"deletions":139,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile ..\/test-classes\/Hello.java\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n@@ -48,2 +48,0 @@\n-import jtreg.SkippedException;\n-import sun.hotspot.WhiteBox;\n@@ -54,5 +52,1 @@\n-public class JCmdTestStaticDump {\n-    static final String TEST_CLASSES[]      = {\"JCmdTestLingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp\",\n-                                               \"jdk\/test\/lib\/apps\/LingeredApp$1\"};\n-    static final String BOOT_CLASSES[]      = {\"Hello\"};\n+public class JCmdTestStaticDump extends JCmdTestDumpBase {\n@@ -61,2 +55,0 @@\n-\n-\n@@ -67,92 +59,0 @@\n-    static String testJar = null;\n-    static String bootJar = null;\n-    static String allJars = null;\n-\n-    private static void buildJar() throws Exception {\n-        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n-        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n-        System.out.println(\"Jar file created: \" + testJar);\n-        System.out.println(\"Jar file created: \" + bootJar);\n-        allJars = testJar+ File.pathSeparator + bootJar;\n-    }\n-\n-    private static LingeredApp createLingeredApp(String... args) throws Exception {\n-        JCmdTestLingeredApp app  = new JCmdTestLingeredApp();\n-        try {\n-            LingeredApp.startAppExactJvmOpts(app, args);\n-        } catch (Exception e) {\n-            Process proc = app.getProcess();\n-            if (e instanceof IOException && proc.exitValue() == 0) {\n-                \/\/ Process started and exit normally.\n-                return null;\n-            }\n-            throw e;\n-        }\n-        return app;\n-    }\n-\n-    static int logFileCount = 0;\n-    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n-        List<String> args = new ArrayList<String>();\n-        if (useBoot) {\n-            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n-        }\n-        args.add(\"-cp\");\n-        if (useBoot) {\n-            args.add(testJar);\n-        } else {\n-            args.add(allJars);\n-        }\n-        args.add(\"-Xshare:on\");\n-        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n-        args.add(\"-Xlog:class+load\");\n-\n-        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n-        app.setLogFileName(\"JCmdTestStaticDump.log\" + (logFileCount++));\n-        app.stopApp();\n-        String output = app.getOutput().getStdout();\n-        if (messages != null) {\n-            for (String msg : messages) {\n-                if (!output.contains(msg)) {\n-                    throw new RuntimeException(msg + \" missed from output\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void test(String archiveFile,\n-                             long pid, boolean useBoot, boolean expectOK, String... messages) throws Exception {\n-        System.out.println(\"Expected: \" + (expectOK ? \"SUCCESS\" : \"FAIL\"));\n-        String fileName = archiveFile != null ? archiveFile : (\"java_pid\" + pid + \"_static.jsa\");\n-        File file = new File(fileName);\n-        if (file.exists()) {\n-            file.delete();\n-        }\n-\n-        String jcmd = \"VM.cds static_dump\";\n-        if (archiveFile  != null) {\n-          jcmd +=  \" \" + archiveFile;\n-        }\n-\n-        PidJcmdExecutor cmdExecutor = new PidJcmdExecutor(String.valueOf(pid));\n-        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n-\n-        if (expectOK) {\n-            output.shouldHaveExitValue(0);\n-            if (!file.exists()) {\n-                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n-            } else {\n-                runWithArchiveFile(fileName, useBoot, messages);\n-                file.delete();\n-            }\n-        } else {\n-            if (file.exists()) {\n-                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n-            }\n-        }\n-    }\n-\n-    private static void print2ln(String arg) {\n-        System.out.println(\"\\n\" + arg + \"\\n\");\n-    }\n-\n@@ -182,1 +82,3 @@\n-    private static void test_static() throws Exception {\n+    static void test() throws Exception {\n+        setIsStatic(true);\n+        buildJars();\n@@ -264,6 +166,1 @@\n-        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n-        if (!cdsEnabled) {\n-            throw new SkippedException(\"CDS is not available for this JDK.\");\n-        }\n-        buildJar();\n-        test_static();\n+        runTest(JCmdTestStaticDump::test);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":6,"deletions":109,"binary":false,"changes":115,"status":"modified"}]}