{"files":[{"patch":"@@ -54,1 +54,0 @@\n-template<UpdateRefsMode UPDATE_REFS>\n@@ -63,1 +62,1 @@\n-    ShenandoahConcurrentMark::mark_through_ref<T, UPDATE_REFS, NO_DEDUP>(p, _heap, _queue, _mark_context, false);\n+    ShenandoahConcurrentMark::mark_through_ref<T, NONE, NO_DEDUP>(p, _heap, _queue, _mark_context, false);\n@@ -84,1 +83,0 @@\n-template<UpdateRefsMode UPDATE_REFS>\n@@ -104,1 +102,1 @@\n-    ShenandoahInitMarkRootsClosure<UPDATE_REFS> mark_cl(q);\n+    ShenandoahInitMarkRootsClosure mark_cl(q);\n@@ -304,9 +302,2 @@\n-  if (heap->has_forwarded_objects()) {\n-    ShenandoahInitMarkRootsTask<RESOLVE> mark_roots(&root_proc);\n-    workers->run_task(&mark_roots);\n-  } else {\n-    \/\/ No need to update references, which means the heap is stable.\n-    \/\/ Can save time not walking through forwarding pointers.\n-    ShenandoahInitMarkRootsTask<NONE> mark_roots(&root_proc);\n-    workers->run_task(&mark_roots);\n-  }\n+  ShenandoahInitMarkRootsTask mark_roots(&root_proc);\n+  workers->run_task(&mark_roots);\n@@ -466,7 +457,2 @@\n-      if (_heap->has_forwarded_objects()) {\n-        ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure> task(this, phase, nworkers);\n-        _heap->workers()->run_task(&task);\n-      } else {\n-        ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure> task(this, phase, nworkers);\n-        _heap->workers()->run_task(&task);\n-      }\n+      ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure> task(this, phase, nworkers);\n+      _heap->workers()->run_task(&task);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"}]}