{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,0 @@\n-import static java.lang.Math.addExact;\n-import static java.lang.Math.multiplyExact;\n-\n@@ -101,1 +98,1 @@\n-        nextRowOffset = multiplyExact(pixelSize, np);\n+        nextRowOffset = safeMult(pixelSize, np);\n@@ -113,1 +110,1 @@\n-        nextRowOffset = multiplyExact(pixelSize, width);\n+        nextRowOffset = safeMult(pixelSize, width);\n@@ -168,2 +165,1 @@\n-    static LCMSImageLayout createImageLayout(BufferedImage image)\n-            throws ImageLayoutException {\n+    public static LCMSImageLayout createImageLayout(BufferedImage image) throws ImageLayoutException {\n@@ -174,0 +170,3 @@\n+                l.pixelType = PT_ARGB_8;\n+                l.isIntPacked = true;\n+                break;\n@@ -226,59 +225,74 @@\n-            case BufferedImage.TYPE_INT_RGB, BufferedImage.TYPE_INT_ARGB,\n-                 BufferedImage.TYPE_INT_BGR ->\n-            {\n-                var intRaster = (IntegerComponentRaster) image.getRaster();\n-                l.nextRowOffset = multiplyExact(4, intRaster.getScanlineStride());\n-                l.nextPixelOffset = multiplyExact(4, intRaster.getPixelStride());\n-                l.offset = multiplyExact(4, intRaster.getDataOffset(0));\n-                l.dataArray = intRaster.getDataStorage();\n-                l.dataArrayLength = 4 * intRaster.getDataStorage().length;\n-                l.dataType = DT_INT;\n-\n-                if (l.nextRowOffset == l.width * 4 * intRaster.getPixelStride()) {\n-                    l.imageAtOnce = true;\n-                }\n-            }\n-            case BufferedImage.TYPE_3BYTE_BGR, BufferedImage.TYPE_4BYTE_ABGR ->\n-            {\n-                var byteRaster = (ByteComponentRaster) image.getRaster();\n-                l.nextRowOffset = byteRaster.getScanlineStride();\n-                l.nextPixelOffset = byteRaster.getPixelStride();\n-\n-                int firstBand = image.getSampleModel().getNumBands() - 1;\n-                l.offset = byteRaster.getDataOffset(firstBand);\n-                l.dataArray = byteRaster.getDataStorage();\n-                l.dataArrayLength = byteRaster.getDataStorage().length;\n-                l.dataType = DT_BYTE;\n-                if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n-                    l.imageAtOnce = true;\n-                }\n-            }\n-            case BufferedImage.TYPE_BYTE_GRAY -> {\n-                var byteRaster = (ByteComponentRaster) image.getRaster();\n-                l.nextRowOffset = byteRaster.getScanlineStride();\n-                l.nextPixelOffset = byteRaster.getPixelStride();\n-\n-                l.dataArrayLength = byteRaster.getDataStorage().length;\n-                l.offset = byteRaster.getDataOffset(0);\n-                l.dataArray = byteRaster.getDataStorage();\n-                l.dataType = DT_BYTE;\n-\n-                if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n-                    l.imageAtOnce = true;\n-                }\n-            }\n-            case BufferedImage.TYPE_USHORT_GRAY -> {\n-                var shortRaster = (ShortComponentRaster) image.getRaster();\n-                l.nextRowOffset = multiplyExact(2, shortRaster.getScanlineStride());\n-                l.nextPixelOffset = multiplyExact(2, shortRaster.getPixelStride());\n-\n-                l.offset = multiplyExact(2, shortRaster.getDataOffset(0));\n-                l.dataArray = shortRaster.getDataStorage();\n-                l.dataArrayLength = 2 * shortRaster.getDataStorage().length;\n-                l.dataType = DT_SHORT;\n-\n-                if (l.nextRowOffset == l.width * 2 * shortRaster.getPixelStride()) {\n-                    l.imageAtOnce = true;\n-                }\n-            }\n-            default -> {\n+            case BufferedImage.TYPE_INT_RGB:\n+            case BufferedImage.TYPE_INT_ARGB:\n+            case BufferedImage.TYPE_INT_BGR:\n+                do {\n+                    IntegerComponentRaster intRaster = (IntegerComponentRaster)\n+                            image.getRaster();\n+                    l.nextRowOffset = safeMult(4, intRaster.getScanlineStride());\n+                    l.nextPixelOffset = safeMult(4, intRaster.getPixelStride());\n+                    l.offset = safeMult(4, intRaster.getDataOffset(0));\n+                    l.dataArray = intRaster.getDataStorage();\n+                    l.dataArrayLength = 4 * intRaster.getDataStorage().length;\n+                    l.dataType = DT_INT;\n+\n+                    if (l.nextRowOffset == l.width * 4 * intRaster.getPixelStride()) {\n+                        l.imageAtOnce = true;\n+                    }\n+                } while (false);\n+                break;\n+\n+            case BufferedImage.TYPE_3BYTE_BGR:\n+            case BufferedImage.TYPE_4BYTE_ABGR:\n+                do {\n+                    ByteComponentRaster byteRaster = (ByteComponentRaster)\n+                            image.getRaster();\n+                    l.nextRowOffset = byteRaster.getScanlineStride();\n+                    l.nextPixelOffset = byteRaster.getPixelStride();\n+\n+                    int firstBand = image.getSampleModel().getNumBands() - 1;\n+                    l.offset = byteRaster.getDataOffset(firstBand);\n+                    l.dataArray = byteRaster.getDataStorage();\n+                    l.dataArrayLength = byteRaster.getDataStorage().length;\n+                    l.dataType = DT_BYTE;\n+                    if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n+                        l.imageAtOnce = true;\n+                    }\n+                } while (false);\n+                break;\n+\n+            case BufferedImage.TYPE_BYTE_GRAY:\n+                do {\n+                    ByteComponentRaster byteRaster = (ByteComponentRaster)\n+                            image.getRaster();\n+                    l.nextRowOffset = byteRaster.getScanlineStride();\n+                    l.nextPixelOffset = byteRaster.getPixelStride();\n+\n+                    l.dataArrayLength = byteRaster.getDataStorage().length;\n+                    l.offset = byteRaster.getDataOffset(0);\n+                    l.dataArray = byteRaster.getDataStorage();\n+                    l.dataType = DT_BYTE;\n+\n+                    if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n+                        l.imageAtOnce = true;\n+                    }\n+                } while (false);\n+                break;\n+\n+            case BufferedImage.TYPE_USHORT_GRAY:\n+                do {\n+                    ShortComponentRaster shortRaster = (ShortComponentRaster)\n+                            image.getRaster();\n+                    l.nextRowOffset = safeMult(2, shortRaster.getScanlineStride());\n+                    l.nextPixelOffset = safeMult(2, shortRaster.getPixelStride());\n+\n+                    l.offset = safeMult(2, shortRaster.getDataOffset(0));\n+                    l.dataArray = shortRaster.getDataStorage();\n+                    l.dataArrayLength = 2 * shortRaster.getDataStorage().length;\n+                    l.dataType = DT_SHORT;\n+\n+                    if (l.nextRowOffset == l.width * 2 * shortRaster.getPixelStride()) {\n+                        l.imageAtOnce = true;\n+                    }\n+                } while (false);\n+                break;\n+            default:\n@@ -286,1 +300,0 @@\n-            }\n@@ -331,5 +344,1 @@\n-\n-        if (offset < 0 || offset >= dataArrayLength) {\n-            throw new ImageLayoutException(\"Invalid image layout\");\n-        }\n-\n+        checkIndex(offset, dataArrayLength);\n@@ -340,5 +349,3 @@\n-        int lastScanOffset = multiplyExact(nextRowOffset, (height - 1));\n-\n-        int lastPixelOffset = multiplyExact(nextPixelOffset, (width -1 ));\n-\n-        lastPixelOffset = addExact(lastPixelOffset, lastScanOffset);\n+        int lastScanOffset = safeMult(nextRowOffset, (height - 1));\n+        int lastPixelOffset = safeMult(nextPixelOffset, (width -1 ));\n+        long off = (long) offset + lastPixelOffset + lastScanOffset;\n@@ -346,1 +353,2 @@\n-        int off = addExact(offset, lastPixelOffset);\n+        checkIndex(off, dataArrayLength);\n+    }\n@@ -348,1 +356,4 @@\n-        if (off < 0 || off >= dataArrayLength) {\n+    private static int checkIndex(long index, int length)\n+            throws ImageLayoutException\n+    {\n+        if (index < 0 || index >= length) {\n@@ -351,0 +362,6 @@\n+        return (int) index;\n+    }\n+\n+    private static int safeMult(int a, int b) throws ImageLayoutException {\n+        long res = (long) a * b;\n+        return checkIndex(res, Integer.MAX_VALUE);\n@@ -354,3 +371,3 @@\n-    static final class ImageLayoutException extends ArithmeticException {\n-        private ImageLayoutException(String s) {\n-            super(s);\n+    public static class ImageLayoutException extends Exception {\n+        public ImageLayoutException(String message) {\n+            super(message);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":100,"deletions":83,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.image.BufferedImage.TYPE_3BYTE_BGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_BINARY;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_GRAY;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_INDEXED;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE;\n+import static java.awt.image.BufferedImage.TYPE_INT_BGR;\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_555_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_565_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_GRAY;\n+\n+\/**\n+ * @test\n+ * @bug 8264666\n+ * @summary No exception or errors should occur in ColorConvertOp.filter().\n+ *\/\n+public final class UnexpectedSourceImageSize {\n+\n+    private static final int SIZE = 100;\n+\n+    private static final int[] TYPES = {\n+            TYPE_INT_RGB, TYPE_INT_ARGB, TYPE_INT_ARGB_PRE, TYPE_INT_BGR,\n+            TYPE_3BYTE_BGR, TYPE_4BYTE_ABGR, TYPE_4BYTE_ABGR_PRE,\n+            TYPE_USHORT_565_RGB, TYPE_USHORT_555_RGB, TYPE_BYTE_GRAY,\n+            TYPE_USHORT_GRAY, TYPE_BYTE_BINARY, TYPE_BYTE_INDEXED\n+    };\n+    private static final int[] INTERESTING_POINTS = new int[]{\n+            Integer.MIN_VALUE \/ SIZE - 1,\n+            -SIZE, -3, -1, 0, 1, 3,\n+            Integer.MAX_VALUE \/ SIZE + 1,\n+    };\n+    private static final int[] CSs = new int[]{\n+            ColorSpace.CS_sRGB, ColorSpace.CS_LINEAR_RGB, ColorSpace.CS_CIEXYZ,\n+            ColorSpace.CS_PYCC, ColorSpace.CS_GRAY\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        Thread[] threads = new Thread[CSs.length];\n+        for (int i = 0; i < threads.length; i++) {\n+            ColorSpace cs = ColorSpace.getInstance(CSs[i]);\n+            threads[i] = new Thread(() -> {\n+                for (final int type : TYPES) {\n+                    test(cs, type);\n+                }\n+            });\n+            threads[i].start();\n+        }\n+        for (int i = 0; i < CSs.length; i++) {\n+            threads[i].join();\n+        }\n+    }\n+\n+    \/**\n+     * 1. Checks how many times the width\/height are requested during filter()\n+     * 2. Repeats step1, but returns some random data for each request\n+     *\/\n+    private static void test(ColorSpace cs, int type) {\n+        AtomicInteger srcCountW = new AtomicInteger();\n+        AtomicInteger srcCountH = new AtomicInteger();\n+        AtomicInteger dstCountW = new AtomicInteger();\n+        AtomicInteger dstCountH = new AtomicInteger();\n+\n+        BufferedImage dstBI = new BufferedImage(SIZE, SIZE, type) {\n+            public int getWidth() {\n+                dstCountW.incrementAndGet();\n+                return super.getWidth();\n+            }\n+            public int getHeight() {\n+                dstCountH.incrementAndGet();\n+                return super.getHeight();\n+            }\n+        };\n+        BufferedImage srcBI = new BufferedImage(SIZE, SIZE, type) {\n+            public int getWidth() {\n+                srcCountW.incrementAndGet();\n+                return super.getWidth();\n+            }\n+            public int getHeight() {\n+                srcCountH.incrementAndGet();\n+                return super.getHeight();\n+            }\n+        };\n+\n+        filter(srcBI, cs, dstBI);\n+        if (dstCountW.get() == 0 && dstCountH.get() == 0\n+                && srcCountW.get() == 0 && srcCountH.get() == 0) {\n+            \/\/ getWidth\/getHeight are never called\n+            return;\n+        }\n+        for (int brokenH : INTERESTING_POINTS) {\n+            for (int brokenW : INTERESTING_POINTS) {\n+                for (int srcW = 0; srcW <= srcCountW.get(); ++srcW) {\n+                    for (int srcH = 0; srcH <= srcCountH.get(); ++srcH) {\n+                        srcBI = makeBI(type, brokenH, brokenW, srcW, srcH);\n+                        for (int dstW = 0; dstW <= dstCountW.get(); ++dstW) {\n+                            for (int dstH = 0; dstH <= dstCountH.get(); ++dstH) {\n+                                try {\n+                                    dstBI = makeBI(type, brokenH, brokenW, dstW, dstH);\n+                                    filter(srcBI, cs, dstBI);\n+                                } catch (Exception | OutOfMemoryError ignore) {\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static BufferedImage makeBI(int biType, int brokenH, int brokenW,\n+                                        int breakStepW, int breakStepH) {\n+        return new BufferedImage(SIZE, SIZE, biType) {\n+            private int stepW = 0;\n+            private int stepH = 0;\n+            public int getWidth() {\n+                if (stepW == breakStepW) {\n+                    return brokenW;\n+                }\n+                stepW++;\n+                return super.getWidth();\n+            }\n+            public int getHeight() {\n+                if (stepH == breakStepH) {\n+                    return brokenH;\n+                }\n+                stepH++;\n+                return super.getHeight();\n+            }\n+        };\n+    }\n+\n+    private static void filter(BufferedImage src, ColorSpace to,\n+                               BufferedImage dest) {\n+        ColorConvertOp op = new ColorConvertOp(to, null);\n+        op.filter(src, dest);\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/UnexpectedSourceImageSize.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}