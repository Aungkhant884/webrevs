{"files":[{"patch":"@@ -38,0 +38,3 @@\n+import static java.lang.Math.addExact;\n+import static java.lang.Math.multiplyExact;\n+\n@@ -98,1 +101,1 @@\n-        nextRowOffset = safeMult(pixelSize, np);\n+        nextRowOffset = multiplyExact(pixelSize, np);\n@@ -110,1 +113,1 @@\n-        nextRowOffset = safeMult(pixelSize, width);\n+        nextRowOffset = multiplyExact(pixelSize, width);\n@@ -165,1 +168,2 @@\n-    public static LCMSImageLayout createImageLayout(BufferedImage image) throws ImageLayoutException {\n+    static LCMSImageLayout createImageLayout(BufferedImage image)\n+            throws ImageLayoutException {\n@@ -170,3 +174,0 @@\n-                l.pixelType = PT_ARGB_8;\n-                l.isIntPacked = true;\n-                break;\n@@ -225,74 +226,59 @@\n-            case BufferedImage.TYPE_INT_RGB:\n-            case BufferedImage.TYPE_INT_ARGB:\n-            case BufferedImage.TYPE_INT_BGR:\n-                do {\n-                    IntegerComponentRaster intRaster = (IntegerComponentRaster)\n-                            image.getRaster();\n-                    l.nextRowOffset = safeMult(4, intRaster.getScanlineStride());\n-                    l.nextPixelOffset = safeMult(4, intRaster.getPixelStride());\n-                    l.offset = safeMult(4, intRaster.getDataOffset(0));\n-                    l.dataArray = intRaster.getDataStorage();\n-                    l.dataArrayLength = 4 * intRaster.getDataStorage().length;\n-                    l.dataType = DT_INT;\n-\n-                    if (l.nextRowOffset == l.width * 4 * intRaster.getPixelStride()) {\n-                        l.imageAtOnce = true;\n-                    }\n-                } while (false);\n-                break;\n-\n-            case BufferedImage.TYPE_3BYTE_BGR:\n-            case BufferedImage.TYPE_4BYTE_ABGR:\n-                do {\n-                    ByteComponentRaster byteRaster = (ByteComponentRaster)\n-                            image.getRaster();\n-                    l.nextRowOffset = byteRaster.getScanlineStride();\n-                    l.nextPixelOffset = byteRaster.getPixelStride();\n-\n-                    int firstBand = image.getSampleModel().getNumBands() - 1;\n-                    l.offset = byteRaster.getDataOffset(firstBand);\n-                    l.dataArray = byteRaster.getDataStorage();\n-                    l.dataArrayLength = byteRaster.getDataStorage().length;\n-                    l.dataType = DT_BYTE;\n-                    if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n-                        l.imageAtOnce = true;\n-                    }\n-                } while (false);\n-                break;\n-\n-            case BufferedImage.TYPE_BYTE_GRAY:\n-                do {\n-                    ByteComponentRaster byteRaster = (ByteComponentRaster)\n-                            image.getRaster();\n-                    l.nextRowOffset = byteRaster.getScanlineStride();\n-                    l.nextPixelOffset = byteRaster.getPixelStride();\n-\n-                    l.dataArrayLength = byteRaster.getDataStorage().length;\n-                    l.offset = byteRaster.getDataOffset(0);\n-                    l.dataArray = byteRaster.getDataStorage();\n-                    l.dataType = DT_BYTE;\n-\n-                    if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n-                        l.imageAtOnce = true;\n-                    }\n-                } while (false);\n-                break;\n-\n-            case BufferedImage.TYPE_USHORT_GRAY:\n-                do {\n-                    ShortComponentRaster shortRaster = (ShortComponentRaster)\n-                            image.getRaster();\n-                    l.nextRowOffset = safeMult(2, shortRaster.getScanlineStride());\n-                    l.nextPixelOffset = safeMult(2, shortRaster.getPixelStride());\n-\n-                    l.offset = safeMult(2, shortRaster.getDataOffset(0));\n-                    l.dataArray = shortRaster.getDataStorage();\n-                    l.dataArrayLength = 2 * shortRaster.getDataStorage().length;\n-                    l.dataType = DT_SHORT;\n-\n-                    if (l.nextRowOffset == l.width * 2 * shortRaster.getPixelStride()) {\n-                        l.imageAtOnce = true;\n-                    }\n-                } while (false);\n-                break;\n-            default:\n+            case BufferedImage.TYPE_INT_RGB, BufferedImage.TYPE_INT_ARGB,\n+                 BufferedImage.TYPE_INT_BGR ->\n+            {\n+                var intRaster = (IntegerComponentRaster) image.getRaster();\n+                l.nextRowOffset = multiplyExact(4, intRaster.getScanlineStride());\n+                l.nextPixelOffset = multiplyExact(4, intRaster.getPixelStride());\n+                l.offset = multiplyExact(4, intRaster.getDataOffset(0));\n+                l.dataArray = intRaster.getDataStorage();\n+                l.dataArrayLength = 4 * intRaster.getDataStorage().length;\n+                l.dataType = DT_INT;\n+\n+                if (l.nextRowOffset == l.width * 4 * intRaster.getPixelStride()) {\n+                    l.imageAtOnce = true;\n+                }\n+            }\n+            case BufferedImage.TYPE_3BYTE_BGR, BufferedImage.TYPE_4BYTE_ABGR ->\n+            {\n+                var byteRaster = (ByteComponentRaster) image.getRaster();\n+                l.nextRowOffset = byteRaster.getScanlineStride();\n+                l.nextPixelOffset = byteRaster.getPixelStride();\n+\n+                int firstBand = image.getSampleModel().getNumBands() - 1;\n+                l.offset = byteRaster.getDataOffset(firstBand);\n+                l.dataArray = byteRaster.getDataStorage();\n+                l.dataArrayLength = byteRaster.getDataStorage().length;\n+                l.dataType = DT_BYTE;\n+                if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n+                    l.imageAtOnce = true;\n+                }\n+            }\n+            case BufferedImage.TYPE_BYTE_GRAY -> {\n+                var byteRaster = (ByteComponentRaster) image.getRaster();\n+                l.nextRowOffset = byteRaster.getScanlineStride();\n+                l.nextPixelOffset = byteRaster.getPixelStride();\n+\n+                l.dataArrayLength = byteRaster.getDataStorage().length;\n+                l.offset = byteRaster.getDataOffset(0);\n+                l.dataArray = byteRaster.getDataStorage();\n+                l.dataType = DT_BYTE;\n+\n+                if (l.nextRowOffset == l.width * byteRaster.getPixelStride()) {\n+                    l.imageAtOnce = true;\n+                }\n+            }\n+            case BufferedImage.TYPE_USHORT_GRAY -> {\n+                var shortRaster = (ShortComponentRaster) image.getRaster();\n+                l.nextRowOffset = multiplyExact(2, shortRaster.getScanlineStride());\n+                l.nextPixelOffset = multiplyExact(2, shortRaster.getPixelStride());\n+\n+                l.offset = multiplyExact(2, shortRaster.getDataOffset(0));\n+                l.dataArray = shortRaster.getDataStorage();\n+                l.dataArrayLength = 2 * shortRaster.getDataStorage().length;\n+                l.dataType = DT_SHORT;\n+\n+                if (l.nextRowOffset == l.width * 2 * shortRaster.getPixelStride()) {\n+                    l.imageAtOnce = true;\n+                }\n+            }\n+            default -> {\n@@ -300,0 +286,1 @@\n+            }\n@@ -353,1 +340,1 @@\n-        int lastScanOffset = safeMult(nextRowOffset, (height - 1));\n+        int lastScanOffset = multiplyExact(nextRowOffset, (height - 1));\n@@ -355,1 +342,1 @@\n-        int lastPixelOffset = safeMult(nextPixelOffset, (width -1 ));\n+        int lastPixelOffset = multiplyExact(nextPixelOffset, (width -1 ));\n@@ -357,1 +344,1 @@\n-        lastPixelOffset = safeAdd(lastPixelOffset, lastScanOffset);\n+        lastPixelOffset = addExact(lastPixelOffset, lastScanOffset);\n@@ -359,1 +346,1 @@\n-        int off = safeAdd(offset, lastPixelOffset);\n+        int off = addExact(offset, lastPixelOffset);\n@@ -366,18 +353,0 @@\n-    static int safeAdd(int a, int b) throws ImageLayoutException {\n-        long res = a;\n-        res += b;\n-        if (res < Integer.MIN_VALUE || res > Integer.MAX_VALUE) {\n-            throw new ImageLayoutException(\"Invalid image layout\");\n-        }\n-        return (int)res;\n-    }\n-\n-    static int safeMult(int a, int b) throws ImageLayoutException {\n-        long res = a;\n-        res *= b;\n-        if (res < Integer.MIN_VALUE || res > Integer.MAX_VALUE) {\n-            throw new ImageLayoutException(\"Invalid image layout\");\n-        }\n-        return (int)res;\n-    }\n-\n@@ -385,3 +354,3 @@\n-    public static class ImageLayoutException extends Exception {\n-        public ImageLayoutException(String message) {\n-            super(message);\n+    static final class ImageLayoutException extends ArithmeticException {\n+        private ImageLayoutException(String s) {\n+            super(s);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":74,"deletions":105,"binary":false,"changes":179,"status":"modified"}]}