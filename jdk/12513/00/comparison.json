{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @run main\/othervm DatagramSocketMulticasting\n- * @run main\/othervm -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n+ * @run junit\/othervm DatagramSocketMulticasting\n+ * @run junit\/othervm -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n@@ -51,0 +51,2 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -60,0 +62,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -62,0 +71,1 @@\n+    static final int MAX_TRIES = 3;\n@@ -63,1 +73,2 @@\n-    public static void main(String[] args) throws IOException {\n+    @Test\n+    public void main() throws IOException {\n@@ -135,1 +146,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -141,1 +152,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -158,1 +169,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -235,1 +246,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -254,1 +265,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_TTL) == 1);\n+        assertEquals(s.getOption(IP_MULTICAST_TTL), 1);\n@@ -259,1 +270,1 @@\n-            assertTrue(s.getOption(IP_MULTICAST_TTL) == ttl);\n+            assertEquals(s.getOption(IP_MULTICAST_TTL), ttl);\n@@ -276,1 +287,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == true);\n+        assertTrue(s.getOption(IP_MULTICAST_LOOP));\n@@ -282,1 +293,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == false);\n+        assertFalse(s.getOption(IP_MULTICAST_LOOP));\n@@ -284,1 +295,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == true);\n+        assertTrue(s.getOption(IP_MULTICAST_LOOP));\n@@ -301,1 +312,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) != null);\n+        assertNotEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -304,1 +315,1 @@\n-        byte[] message = \"hello\".getBytes(\"UTF-8\");\n+        byte[] message = \"testSendReceive\".getBytes(\"UTF-8\");\n@@ -311,1 +322,1 @@\n-        \/\/ receive message\n+        \/\/ receive message with retry in case of stray messages\n@@ -313,2 +324,8 @@\n-        p = new DatagramPacket(new byte[1024], 100);\n-        s.receive(p);\n+        for (int i = 1; i <= MAX_TRIES; i++) {\n+            p = new DatagramPacket(new byte[1024], 100);\n+            s.receive(p);\n+            if(s.getLocalPort()==p.getPort()){\n+                assertEquals(p.getLength(), message.length,\n+                        String.format(\"expected message %s, instead received %s%n\", message, p));\n+                break;\n+            }\n@@ -316,2 +333,2 @@\n-        assertTrue(p.getLength() == message.length);\n-        assertTrue(p.getPort() == s.getLocalPort());\n+            assertNotEquals(i, MAX_TRIES, \"testSendReceive: too many retries\");\n+        }\n@@ -329,1 +346,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) != null);\n+        assertNotEquals(s.getOption(IP_MULTICAST_IF), null);\n@@ -333,1 +350,1 @@\n-        String text = nano + \": hello\";\n+        String text = nano + \": testSendNoReceive\";\n@@ -357,20 +374,0 @@\n-\n-\n-    static void assertTrue(boolean e) {\n-        if (!e) throw new RuntimeException();\n-    }\n-\n-    interface ThrowableRunnable {\n-        void run() throws Exception;\n-    }\n-\n-    static void assertThrows(Class<?> exceptionClass, ThrowableRunnable task) {\n-        try {\n-            task.run();\n-            throw new RuntimeException(\"Exception not thrown\");\n-        } catch (Exception e) {\n-            if (!exceptionClass.isInstance(e)) {\n-                throw new RuntimeException(\"expected: \" + exceptionClass + \", actual: \" + e);\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/DatagramSocketMulticasting.java","additions":39,"deletions":42,"binary":false,"changes":81,"status":"modified"}]}