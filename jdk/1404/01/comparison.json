{"files":[{"patch":"@@ -1342,1 +1342,1 @@\n-  __ ld(return_pc, _abi(lr), R1_SP);\n+  __ ld(return_pc, _abi0(lr), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  std(return_pc, _abi(lr), R1_SP);     \/\/ SP->lr = return_pc\n+  std(return_pc, _abi0(lr), R1_SP);     \/\/ SP->lr = return_pc\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-      \/\/ld(R0, _abi(lr), R1_SP);\n+      \/\/ld(R0, _abi0(lr), R1_SP);\n@@ -188,1 +188,1 @@\n-  __ std(ret_pc, _abi(lr), R1_SP); \/\/ C code needs pc in C1 method.\n+  __ std(ret_pc, _abi0(lr), R1_SP); \/\/ C code needs pc in C1 method.\n@@ -236,1 +236,1 @@\n-  __ ld(R0, _abi(lr), R1_SP);\n+  __ ld(R0, _abi0(lr), R1_SP);\n@@ -488,1 +488,1 @@\n-        __ std(R0, _abi(lr), R1_SP);\n+        __ std(R0, _abi0(lr), R1_SP);\n@@ -498,1 +498,1 @@\n-        __ ld(R0, _abi(lr), R1_SP);\n+        __ ld(R0, _abi0(lr), R1_SP);\n@@ -557,1 +557,1 @@\n-        __ ld(Rexception_pc, _abi(lr), Rcaller_sp); \/\/ return pc\n+        __ ld(Rexception_pc, _abi0(lr), Rcaller_sp); \/\/ return pc\n@@ -561,1 +561,1 @@\n-        __ ld(Rexception_pc, _abi(lr), Rcaller_sp); \/\/ return pc\n+        __ ld(Rexception_pc, _abi0(lr), Rcaller_sp); \/\/ return pc\n@@ -733,1 +733,1 @@\n-        __ std(R0, _abi(lr), R1_SP);\n+        __ std(R0, _abi0(lr), R1_SP);\n@@ -769,1 +769,1 @@\n-    \/\/ Also load the PC which is typically at SP + frame_size_in_bytes + _abi(lr),\n+    \/\/ Also load the PC which is typically at SP + frame_size_in_bytes +_abi0(lr),\n@@ -774,1 +774,1 @@\n-    __ ld(Rexception_pc, _abi(lr), Rexception_pc);\n+    __ ld(Rexception_pc, _abi0(lr), Rexception_pc);\n@@ -786,1 +786,1 @@\n-    __ std(Rexception_pc, _abi(lr), R1_SP);\n+    __ std(Rexception_pc, _abi0(lr), R1_SP);\n@@ -829,1 +829,1 @@\n-    __ ld(Rexception_pc, _abi(lr), R1_SP);\n+    __ ld(Rexception_pc, _abi0(lr), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"prims\/foreign_globals.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+\/\/ Stubbed out, implement later\n+const ABIDescriptor ForeignGlobals::parse_abi_descriptor_impl(jobject jabi) const {\n+  Unimplemented();\n+  return {};\n+}\n+\n+const BufferLayout ForeignGlobals::parse_buffer_layout_impl(jobject jlayout) const {\n+  Unimplemented();\n+  return {};\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/foreign_globals_ppc.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef CPU_PPC_VM_FOREIGN_GLOBALS_PPC_HPP\n+#define CPU_PPC_VM_FOREIGN_GLOBALS_PPC_HPP\n+\n+class BufferLayout {};\n+class ABIDescriptor {};\n+\n+\n+#endif \/\/ CPU_PPC_VM_FOREIGN_GLOBALS_PPC_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/foreign_globals_ppc.hpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -121,1 +121,1 @@\n-  #define _abi(_component) \\\n+  #define _abi0(_component) \\\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-  __ std(R0, _abi(lr), R1_SP);\n+  __ std(R0, _abi0(lr), R1_SP);\n@@ -464,1 +464,1 @@\n-  __ ld(R0, _abi(lr), R1_SP);\n+  __ ld(R0, _abi0(lr), R1_SP);\n@@ -540,1 +540,1 @@\n-  __ std(R0, _abi(lr), R1_SP);\n+  __ std(R0, _abi0(lr), R1_SP);\n@@ -544,1 +544,1 @@\n-  __ ld(R0, _abi(lr), R1_SP);\n+  __ ld(R0, _abi0(lr), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -775,1 +775,1 @@\n-    ld(return_pc, _abi(lr), Rscratch1); \/\/ LR\n+    ld(return_pc, _abi0(lr), Rscratch1); \/\/ LR\n@@ -852,1 +852,1 @@\n-    ld_ptr(R11_scratch1, _abi(callers_sp), R1_SP); \/\/ Load frame pointer.\n+    ld_ptr(R11_scratch1, _abi0(callers_sp), R1_SP); \/\/ Load frame pointer.\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-#define sp_c_arg_at(index)        ((index)*wordSize + _abi(carg_1)), R1_SP\n+#define sp_c_arg_at(index)        ((index)*wordSize + _abi0(carg_1)), R1_SP\n","filename":"src\/hotspot\/cpu\/ppc\/interpreterRT_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -860,1 +860,1 @@\n-  std(tmp, _abi(cr), R1_SP);\n+  std(tmp, _abi0(cr), R1_SP);\n@@ -862,1 +862,1 @@\n-  std(tmp, _abi(lr), R1_SP);\n+  std(tmp, _abi0(lr), R1_SP);\n@@ -868,1 +868,1 @@\n-  ld(tmp, _abi(lr), R1_SP);\n+  ld(tmp, _abi0(lr), R1_SP);\n@@ -870,1 +870,1 @@\n-  ld(tmp, _abi(cr), R1_SP);\n+  ld(tmp, _abi0(cr), R1_SP);\n@@ -891,1 +891,1 @@\n-  ld(tmp, _abi(callers_sp), R1_SP);\n+  ld(tmp, _abi0(callers_sp), R1_SP);\n@@ -903,1 +903,1 @@\n-  ld(tmp, _abi(callers_sp), R1_SP);\n+  ld(tmp, _abi0(callers_sp), R1_SP);\n@@ -957,1 +957,1 @@\n-  ld(R1_SP, _abi(callers_sp), R1_SP);\n+  ld(R1_SP, _abi0(callers_sp), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1125,0 +1125,5 @@\n+int MachCallNativeNode::ret_addr_offset() {\n+  Unimplemented();\n+  return -1;\n+}\n+\n@@ -1518,1 +1523,1 @@\n-    __ std(return_pc, _abi(lr), callers_sp);\n+    __ std(return_pc, _abi0(lr), callers_sp);\n@@ -1564,1 +1569,1 @@\n-    __ ld(return_pc, ((int)framesize) + _abi(lr), R1_SP);\n+    __ ld(return_pc, ((int)framesize) + _abi0(lr), R1_SP);\n@@ -14498,1 +14503,1 @@\n-    __ ld(R4_ARG2\/* issuing pc *\/, _abi(lr), R1_SP);\n+    __ ld(R4_ARG2\/* issuing pc *\/, _abi0(lr), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  __ std(R4_ARG2\/*exception pc*\/, _abi(lr), R1_SP);\n+  __ std(R4_ARG2\/*exception pc*\/, _abi0(lr), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n@@ -288,1 +288,1 @@\n-  __ std(R30, frame_size_in_bytes + _abi(cr), R1_SP);\n+  __ std(R30, frame_size_in_bytes + _abi0(cr), R1_SP);\n@@ -299,1 +299,1 @@\n-    __ std(R31, frame_size_in_bytes + _abi(lr), R1_SP);\n+    __ std(R31, frame_size_in_bytes + _abi0(lr), R1_SP);\n@@ -429,1 +429,1 @@\n-  __ ld(R31, frame_size_in_bytes + _abi(lr), R1_SP);\n+  __ ld(R31, frame_size_in_bytes + _abi0(lr), R1_SP);\n@@ -432,1 +432,1 @@\n-  __ ld(R31, frame_size_in_bytes + _abi(cr), R1_SP);\n+  __ ld(R31, frame_size_in_bytes + _abi0(cr), R1_SP);\n@@ -966,1 +966,1 @@\n-  __ std(return_pc, _abi(lr), R1_SP);\n+  __ std(return_pc, _abi0(lr), R1_SP);\n@@ -972,1 +972,1 @@\n-  __ ld(return_pc, _abi(lr), R1_SP);\n+  __ ld(return_pc, _abi0(lr), R1_SP);\n@@ -2540,1 +2540,1 @@\n-  __ std(pc_reg, _abi(lr), R1_SP);\n+  __ std(pc_reg, _abi0(lr), R1_SP);\n@@ -2611,1 +2611,1 @@\n-  __ std(R12_scratch2, _abi(lr), R1_SP);\n+  __ std(R12_scratch2, _abi0(lr), R1_SP);\n@@ -2639,1 +2639,1 @@\n-  __ std(R0, _abi(lr), R1_SP);\n+  __ std(R0, _abi0(lr), R1_SP);\n@@ -2717,1 +2717,1 @@\n-  __ std(R4_ARG2, _abi(lr), R1_SP);\n+  __ std(R4_ARG2, _abi0(lr), R1_SP);\n@@ -3078,1 +3078,1 @@\n-    __ ld(R0, frame_size_in_bytes + _abi(lr), R1_SP);\n+    __ ld(R0, frame_size_in_bytes + _abi0(lr), R1_SP);\n@@ -3084,1 +3084,1 @@\n-    __ std(R31, frame_size_in_bytes + _abi(lr), R1_SP);\n+    __ std(R31, frame_size_in_bytes + _abi0(lr), R1_SP);\n@@ -3433,0 +3433,9 @@\n+\n+BufferBlob* SharedRuntime::make_native_invoker(address call_target,\n+                                               int shadow_space_bytes,\n+                                               const GrowableArray<VMReg>& input_registers,\n+                                               const GrowableArray<VMReg>& output_registers) {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-      __ ld(r_entryframe_fp, _abi(callers_sp), R1_SP);\n+      __ ld(r_entryframe_fp, _abi0(callers_sp), R1_SP);\n@@ -318,2 +318,2 @@\n-      __ ld(r_cr, _abi(cr), r_entryframe_fp);\n-      __ ld(r_lr, _abi(lr), r_entryframe_fp);\n+      __ ld(r_cr, _abi0(cr), r_entryframe_fp);\n+      __ ld(r_lr, _abi0(lr), r_entryframe_fp);\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    __ std(R4_ARG2, _abi(carg_2), target_sp);\n+    __ std(R4_ARG2, _abi0(carg_2), target_sp);\n@@ -161,1 +161,1 @@\n-  __ addi(arg_c, target_sp, _abi(carg_3));\n+  __ addi(arg_c, target_sp, _abi0(carg_3));\n@@ -886,1 +886,1 @@\n-    __ ld(Robj_to_lock, _abi(callers_sp), R1_SP);\n+    __ ld(Robj_to_lock, _abi0(callers_sp), R1_SP);\n@@ -1047,1 +1047,1 @@\n-  __ std(R12_scratch2, _abi(lr), R1_SP);\n+  __ std(R12_scratch2, _abi0(lr), R1_SP);\n@@ -1389,1 +1389,1 @@\n-    __ ld(R11_scratch1, _abi(callers_sp), R1_SP);\n+    __ ld(R11_scratch1, _abi0(callers_sp), R1_SP);\n@@ -1600,1 +1600,1 @@\n-  __ ld(return_pc, _abi(lr), return_pc);\n+  __ ld(return_pc, _abi0(lr), return_pc);\n@@ -2048,1 +2048,1 @@\n-    __ ld(return_pc, _abi(lr), return_pc);\n+    __ ld(return_pc, _abi0(lr), return_pc);\n@@ -2141,1 +2141,1 @@\n-    __ ld(return_pc, _abi(lr), return_pc);\n+    __ ld(return_pc, _abi0(lr), return_pc);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"prims\/universalNativeInvoker.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+address ProgrammableInvoker::generate_adapter(jobject jabi, jobject jlayout) {\n+  Unimplemented();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/universalNativeInvoker_ppc.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"prims\/universalUpcallHandler.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+address ProgrammableUpcallHandler::generate_upcall_stub(jobject rec, jobject jabi, jobject jlayout) {\n+  Unimplemented();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/universalUpcallHandle_ppc.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n@@ -52,0 +52,4 @@\n+VMReg VMRegImpl::vmStorageToVMReg(int type, int index) {\n+  Unimplemented();\n+  return VMRegImpl::Bad();\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}