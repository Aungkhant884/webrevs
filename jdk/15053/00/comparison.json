{"files":[{"patch":"@@ -277,3 +277,9 @@\n-        String capturedText = hasMatch()\n-                ? text.subSequence(first, last).toString()\n-                : null;\n+        int minStart;\n+        String capturedText;\n+        if (hasMatch()) {\n+            minStart = minStart();\n+            capturedText = text.subSequence(minStart, maxEnd()).toString();\n+        } else {\n+            minStart = -1;\n+            capturedText = null;\n+        }\n@@ -282,2 +288,23 @@\n-                namedGroups()\n-        );\n+                namedGroups(), minStart);\n+    }\n+\n+    private int minStart() {\n+        int r = text.length();\n+        for (int group = 0; group <= groupCount(); ++group) {\n+            int start = groups[group * 2];\n+            if (start >= 0) {\n+                r = Math.min(r, start);\n+            }\n+        }\n+        return r;\n+    }\n+\n+    private int maxEnd() {\n+        int r = 0;\n+        for (int group = 0; group <= groupCount(); ++group) {\n+            int end = groups[group * 2 + 1];\n+            if (end >= 0) {\n+                r = Math.max(r, end);\n+            }\n+        }\n+        return r;\n@@ -293,0 +320,1 @@\n+        private final int minStart;\n@@ -296,1 +324,1 @@\n-                             Map<String, Integer> namedGroups) {\n+                             Map<String, Integer> namedGroups, int minStart) {\n@@ -303,0 +331,1 @@\n+            this.minStart = minStart;\n@@ -348,1 +377,1 @@\n-            return text.substring(groups[group * 2] - first, groups[group * 2 + 1] - first);\n+            return text.substring(groups[group * 2] - minStart, groups[group * 2 + 1] - minStart);\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":36,"deletions":7,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -39,1 +40,1 @@\n- * @bug 8132995\n+ * @bug 8132995 8312976\n@@ -182,0 +183,37 @@\n+    @Test\n+    void testLookbehindLookahead() {\n+        char[] data = \"-1234abcxyz5678-\".toCharArray();\n+        Matcher m = Pattern.compile(\"(?<=(\\\\d{3}))\\\\D*(?=(\\\\d{4}))\")\n+                .matcher(CharBuffer.wrap(data));\n+\n+        assertEquals(2, m.groupCount());\n+        assertTrue(m.find());\n+\n+        int start = m.start();\n+        int end = m.end();\n+        String group = m.group();\n+\n+        int prefixStart = m.start(1);\n+        int prefixEnd = m.end(1);\n+        String prefixGroup = m.group(1);\n+\n+        int suffixStart = m.start(2);\n+        int suffixEnd = m.end(2);\n+        String suffixGroup = m.group(2);\n+\n+        MatchResult mr = m.toMatchResult();\n+        Arrays.fill(data, '*');  \/\/ spoil original input\n+\n+        assertEquals(start, mr.start());\n+        assertEquals(end, mr.end());\n+        assertEquals(group, mr.group());\n+\n+        assertEquals(prefixStart, mr.start(1));\n+        assertEquals(prefixEnd, mr.end(1));\n+        assertEquals(prefixGroup, mr.group(1));\n+\n+        assertEquals(suffixStart, mr.start(2));\n+        assertEquals(suffixEnd, mr.end(2));\n+        assertEquals(suffixGroup, mr.group(2));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/regex\/ImmutableMatchResultTest.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"}]}