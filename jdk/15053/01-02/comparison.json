{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,1 +39,0 @@\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -38,0 +40,1 @@\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -184,35 +187,6 @@\n-    @Test\n-    void testLookbehindLookahead() {\n-        char[] data = \"-1234abcxyz5678-\".toCharArray();\n-        Matcher m = Pattern.compile(\"(?<=(\\\\d{3}))\\\\D*(?=(\\\\d{4}))\")\n-                .matcher(CharBuffer.wrap(data));\n-\n-        assertEquals(2, m.groupCount());\n-        assertTrue(m.find());\n-\n-        int start = m.start();\n-        int end = m.end();\n-        String group = m.group();\n-\n-        int prefixStart = m.start(1);\n-        int prefixEnd = m.end(1);\n-        String prefixGroup = m.group(1);\n-\n-        int suffixStart = m.start(2);\n-        int suffixEnd = m.end(2);\n-        String suffixGroup = m.group(2);\n-\n-        MatchResult mr = m.toMatchResult();\n-        Arrays.fill(data, '*');  \/\/ spoil original input\n-\n-        assertEquals(start, mr.start());\n-        assertEquals(end, mr.end());\n-        assertEquals(group, mr.group());\n-\n-        assertEquals(prefixStart, mr.start(1));\n-        assertEquals(prefixEnd, mr.end(1));\n-        assertEquals(prefixGroup, mr.group(1));\n-\n-        assertEquals(suffixStart, mr.start(2));\n-        assertEquals(suffixEnd, mr.end(2));\n-        assertEquals(suffixGroup, mr.group(2));\n+    static Arguments[] testGroupsOutsideMatch() {\n+        return new Arguments[]{\n+                arguments(\"(?<=(\\\\d{3}))\\\\D*(?=(\\\\d{4}))\", \"-1234abcxyz5678-\"),\n+                arguments(\"(?<=(\\\\d{3}))\\\\D*(?=(\\\\1))\", \"-1234abcxyz2348-\"),\n+                arguments(\"(?<!(\\\\d{4}))\\\\D+(?=(\\\\d{4}))\", \"123abcxyz5678-\"),\n+        };\n@@ -221,41 +195,5 @@\n-    @Test\n-    void testLookbehindLookaheadWithBackref() {\n-        char[] data = \"-1234abcxyz2348-\".toCharArray();\n-        Matcher m = Pattern.compile(\"(?<=(\\\\d{3}))\\\\D*(?=(\\\\1))\")\n-                .matcher(CharBuffer.wrap(data));\n-\n-        assertEquals(2, m.groupCount());\n-        assertTrue(m.find());\n-\n-        int start = m.start();\n-        int end = m.end();\n-        String group = m.group();\n-\n-        int prefixStart = m.start(1);\n-        int prefixEnd = m.end(1);\n-        String prefixGroup = m.group(1);\n-\n-        int suffixStart = m.start(2);\n-        int suffixEnd = m.end(2);\n-        String suffixGroup = m.group(2);\n-\n-        MatchResult mr = m.toMatchResult();\n-        Arrays.fill(data, '*');  \/\/ spoil original input\n-\n-        assertEquals(start, mr.start());\n-        assertEquals(end, mr.end());\n-        assertEquals(group, mr.group());\n-\n-        assertEquals(prefixStart, mr.start(1));\n-        assertEquals(prefixEnd, mr.end(1));\n-        assertEquals(prefixGroup, mr.group(1));\n-\n-        assertEquals(suffixStart, mr.start(2));\n-        assertEquals(suffixEnd, mr.end(2));\n-        assertEquals(suffixGroup, mr.group(2));\n-    }\n-\n-    @Test\n-    void testHegativeLookbehindLookahead() {\n-        char[] data = \"123abcxyz5678-\".toCharArray();\n-        Matcher m = Pattern.compile(\"(?<!(\\\\d{4}))\\\\D+(?=(\\\\d{4}))\")\n+    @ParameterizedTest\n+    @MethodSource\n+    static void testGroupsOutsideMatch(String pattern, String text) {\n+        char[] data = text.toCharArray();\n+        Matcher m = Pattern.compile(pattern)\n","filename":"test\/jdk\/java\/util\/regex\/ImmutableMatchResultTest.java","additions":15,"deletions":77,"binary":false,"changes":92,"status":"modified"}]}