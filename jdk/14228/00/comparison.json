{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1161,0 +1161,2 @@\n+            Class<?> type = null;\n+            Method foundMethod = null;\n@@ -1180,1 +1182,5 @@\n-                        return method;\n+                        Class<?> rt = method.getReturnType();\n+                        if (foundMethod == null || type.isAssignableFrom(rt)) {\n+                            foundMethod = method;\n+                            type = rt;\n+                        }\n@@ -1184,0 +1190,3 @@\n+            if (foundMethod != null) {\n+                return foundMethod;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Introspector.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+\n+import javax.swing.JPanel;\n+\n+\/**\n+ * @test\n+ * @bug 8308152\n+ * @summary PropertyDescriptor should work with overridden generic getter method\n+ *\/\n+public class OverriddenGetter {\n+\n+    static class Parent<T> {\n+        private T value;\n+        public T getValue() {return value;}\n+        public final void setValue(T value) {this.value = value;}\n+    }\n+\n+    static class ChildO extends Parent<Object> {\n+        public ChildO() {}\n+        @Override\n+        public Object getValue() {return super.getValue();}\n+    }\n+\n+    static class ChildA extends Parent<ArithmeticException> {\n+        public ChildA() {}\n+        @Override\n+        public ArithmeticException getValue() {return super.getValue();}\n+    }\n+\n+    static class ChildS extends Parent<String> {\n+        public ChildS() {}\n+        @Override\n+        public String getValue() {return super.getValue();}\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test(\"UI\", JPanel.class, \"getUI\", \"setUI\");\n+        test(\"value\", ChildO.class, \"getValue\", \"setValue\");\n+        test(\"value\", ChildA.class, \"getValue\", \"setValue\");\n+        test(\"value\", ChildS.class, \"getValue\", \"setValue\");\n+    }\n+\n+    private static void test(String name, Class<?> beanClass,\n+                             String read, String write) throws Exception\n+    {\n+        var gold = new PropertyDescriptor(name, beanClass, read, write);\n+        BeanInfo beanInfo = Introspector.getBeanInfo(beanClass);\n+        PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();\n+        for (PropertyDescriptor pd : pds) {\n+            if (pd.getName().equals(gold.getName())) {\n+                if (pd.getReadMethod() != gold.getReadMethod()) {\n+                    System.err.println(\"Expected: \" + gold.getReadMethod());\n+                    System.err.println(\"Actual: \" + pd.getReadMethod());\n+                    throw new RuntimeException(\"Wrong read method\");\n+                }\n+                if (pd.getWriteMethod() != gold.getWriteMethod()) {\n+                    System.err.println(\"Expected: \" + gold.getWriteMethod());\n+                    System.err.println(\"Actual: \" + pd.getWriteMethod());\n+                    throw new RuntimeException(\"Wrong write method\");\n+                }\n+                if (pd.getPropertyType() != gold.getPropertyType()) {\n+                    System.err.println(\"Expected: \" + gold.getPropertyType());\n+                    System.err.println(\"Actual: \" + pd.getPropertyType());\n+                    throw new RuntimeException(\"Wrong property type\");\n+                }\n+                return;\n+            }\n+        }\n+        throw new RuntimeException(\"The PropertyDescriptor is not found\");\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/PropertyDescriptor\/OverriddenGetter.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}