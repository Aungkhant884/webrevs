{"files":[{"patch":"@@ -113,7 +113,14 @@\n-        BasicFileAttributes sourceAttrs = sourcePosixView != null ?\n-            Files.readAttributes(source,\n-                                 PosixFileAttributes.class,\n-                                 linkOptions) :\n-            Files.readAttributes(source,\n-                                 BasicFileAttributes.class,\n-                                 linkOptions);\n+        BasicFileAttributes sourceAttrs = null;\n+        if (sourcePosixView != null) {\n+            try {\n+                sourceAttrs = Files.readAttributes(source,\n+                                                   PosixFileAttributes.class,\n+                                                   linkOptions);\n+            } catch (SecurityException ignored) {\n+            }\n+        }\n+        if (sourceAttrs == null)\n+            sourceAttrs = Files.readAttributes(source,\n+                                               BasicFileAttributes.class,\n+                                               linkOptions);\n+        assert sourceAttrs != null;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/CopyMoveHelper.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8245194\n+ * @run main\/othervm\/java.security.policy=copy.policy CopyToNonDefaultFS\n+ * @summary Test for exception copying from default to non-default file system\n+ *\/\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.*;\n+import java.nio.file.*;\n+import java.util.*;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+public class CopyToNonDefaultFS {\n+    public static void main(String... args) throws IOException {\n+        Path source = Files.createTempFile(Path.of(\".\"), \"tmp\", \".dat\");\n+        try (FileChannel fc = FileChannel.open(source, CREATE, WRITE)) {\n+            fc.position(8191);\n+            fc.write(ByteBuffer.wrap(new byte[] {27}));\n+        }\n+\n+        Path zip = Path.of(\"out.zip\");\n+        zip.toFile().deleteOnExit();\n+        Map<String,String> env =\n+            Map.of(\"create\", String.valueOf(Files.notExists(zip)));\n+\n+        ClassLoader cl = CopyToNonDefaultFS.class.getClassLoader();\n+        try (FileSystem fileSystem = FileSystems.newFileSystem(zip, env, cl)) {\n+            Path p = fileSystem.getPath(source.getFileName().toString());\n+            Files.copy(source, p);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyToNonDefaultFS.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+grant {\n+    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n+    permission java.io.FilePermission \"out.zip\", \"delete\";\n+};\n","filename":"test\/jdk\/java\/nio\/file\/Files\/copy.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}