{"files":[{"patch":"@@ -248,0 +248,4 @@\n+julong os::free_memory() {\n+  return Aix::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -141,0 +141,4 @@\n+julong os::free_memory() {\n+  return Bsd::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -219,9 +219,2 @@\n-julong os::available_memory() {\n-  return Linux::available_memory();\n-}\n-\n-julong os::Linux::available_memory() {\n-  \/\/ values in struct sysinfo are \"unsigned long\"\n-  struct sysinfo si;\n-  julong avail_mem;\n-\n+julong os::Linux::available_memory_in_container() {\n+  julong avail_mem = static_cast<julong>(-1L);\n@@ -236,2 +229,0 @@\n-      log_trace(os)(\"available container memory: \" JULONG_FORMAT, avail_mem);\n-      return avail_mem;\n@@ -240,0 +231,2 @@\n+  return avail_mem;\n+}\n@@ -241,2 +234,25 @@\n-  sysinfo(&si);\n-  avail_mem = (julong)si.freeram * si.mem_unit;\n+julong os::available_memory() {\n+  return Linux::available_memory();\n+}\n+\n+julong os::Linux::available_memory() {\n+  julong avail_mem = available_memory_in_container();\n+  if (avail_mem != static_cast<julong>(-1L)) {\n+    log_trace(os)(\"available container memory: \" JULONG_FORMAT, avail_mem);\n+    return avail_mem;\n+  }\n+\n+  FILE *fp = os::fopen(\"\/proc\/meminfo\", \"r\");\n+  if (fp != nullptr) {\n+    char buf[80];\n+    do {\n+      if (fscanf(fp, \"MemAvailable: \" JULONG_FORMAT \" kB\", &avail_mem) == 1) {\n+        avail_mem *= K;\n+        break;\n+      }\n+    } while (fgets(buf, sizeof(buf), fp) != nullptr);\n+    fclose(fp);\n+  }\n+  if (avail_mem == static_cast<julong>(-1L)) {\n+    avail_mem = free_memory();\n+  }\n@@ -247,0 +263,19 @@\n+julong os::free_memory() {\n+  return Linux::free_memory();\n+}\n+\n+julong os::Linux::free_memory() {\n+  \/\/ values in struct sysinfo are \"unsigned long\"\n+  struct sysinfo si;\n+  julong free_mem = available_memory_in_container();\n+  if (free_mem != static_cast<julong>(-1L)) {\n+    log_trace(os)(\"free container memory: \" JULONG_FORMAT, free_mem);\n+    return free_mem;\n+  }\n+\n+  sysinfo(&si);\n+  free_mem = (julong)si.freeram * si.mem_unit;\n+  log_trace(os)(\"free memory: \" JULONG_FORMAT, free_mem);\n+  return free_mem;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":48,"deletions":13,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+  static julong available_memory_in_container();\n+\n@@ -60,0 +62,2 @@\n+  static julong free_memory();\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -833,0 +833,4 @@\n+julong os::free_memory() {\n+  return win32::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1014,1 +1014,1 @@\n-  julong available_memory = os::available_memory();\n+  julong free_memory = os::free_memory();\n@@ -1026,1 +1026,1 @@\n-        (int)(available_memory \/ (200*M)),\n+        (int)(free_memory \/ (200*M)),\n@@ -1073,2 +1073,2 @@\n-        msg.print(\"Added compiler thread %s (available memory: %dMB, available non-profiled code cache: %dMB)\",\n-                  ct->name(), (int)(available_memory\/M), (int)(available_cc_np\/M));\n+        msg.print(\"Added compiler thread %s (free memory: %dMB, available non-profiled code cache: %dMB)\",\n+                  ct->name(), (int)(free_memory\/M), (int)(available_cc_np\/M));\n@@ -1084,1 +1084,1 @@\n-        (int)(available_memory \/ (100*M)),\n+        (int)(free_memory \/ (100*M)),\n@@ -1096,2 +1096,2 @@\n-        msg.print(\"Added compiler thread %s (available memory: %dMB, available profiled code cache: %dMB)\",\n-                  ct->name(), (int)(available_memory\/M), (int)(available_cc_p\/M));\n+        msg.print(\"Added compiler thread %s (free memory: %dMB, available profiled code cache: %dMB)\",\n+                  ct->name(), (int)(free_memory\/M), (int)(available_cc_p\/M));\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -313,0 +313,4 @@\n+  \/\/ On some platforms there is a distinction between \"available\" memory and \"free\" memory.\n+  \/\/ For example, on Linux, \"available\" memory (`MemAvailable` in `\/proc\/meminfo`) is greater\n+  \/\/ than \"free\" memory (`MemFree` in `\/proc\/meminfo`) because Linux can free memory\n+  \/\/ aggressively (e.g. clear caches) so that it becomes available.\n@@ -314,0 +318,2 @@\n+  static julong free_memory();\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}