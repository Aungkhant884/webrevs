{"files":[{"patch":"@@ -248,0 +248,4 @@\n+julong os::free_memory() {\n+  return Aix::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -141,0 +141,4 @@\n+julong os::free_memory() {\n+  return Bsd::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -252,4 +252,1 @@\n-    \/\/ values in struct sysinfo are \"unsigned long\"\n-    struct sysinfo si;\n-    sysinfo(&si);\n-    avail_mem = (julong)si.freeram * si.mem_unit;\n+    avail_mem = free_memory();\n@@ -261,0 +258,28 @@\n+julong os::free_memory() {\n+  return Linux::free_memory();\n+}\n+\n+julong os::Linux::free_memory() {\n+  \/\/ values in struct sysinfo are \"unsigned long\"\n+  struct sysinfo si;\n+  julong free_mem;\n+\n+  if (OSContainer::is_containerized()) {\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    jlong mem_usage;\n+    if (mem_limit > 0 && (mem_usage = OSContainer::memory_usage_in_bytes()) < 1) {\n+      log_debug(os, container)(\"container memory usage failed: \" JLONG_FORMAT \", using host value\", mem_usage);\n+    }\n+    if (mem_limit > 0 && mem_usage > 0) {\n+      free_mem = mem_limit > mem_usage ? (julong)mem_limit - (julong)mem_usage : 0;\n+      log_trace(os)(\"free container memory: \" JULONG_FORMAT, free_mem);\n+      return free_mem;\n+    }\n+  }\n+\n+  sysinfo(&si);\n+  free_mem = (julong)si.freeram * si.mem_unit;\n+  log_trace(os)(\"free memory: \" JULONG_FORMAT, free_mem);\n+  return free_mem;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -833,0 +833,4 @@\n+julong os::free_memory() {\n+  return win32::available_memory();\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1014,1 +1014,1 @@\n-  julong available_memory = os::available_memory();\n+  julong free_memory = os::free_memory();\n@@ -1026,1 +1026,1 @@\n-        (int)(available_memory \/ (200*M)),\n+        (int)(free_memory \/ (200*M)),\n@@ -1073,2 +1073,2 @@\n-        msg.print(\"Added compiler thread %s (available memory: %dMB, available non-profiled code cache: %dMB)\",\n-                  ct->name(), (int)(available_memory\/M), (int)(available_cc_np\/M));\n+        msg.print(\"Added compiler thread %s (free memory: %dMB, available non-profiled code cache: %dMB)\",\n+                  ct->name(), (int)(free_memory\/M), (int)(available_cc_np\/M));\n@@ -1084,1 +1084,1 @@\n-        (int)(available_memory \/ (100*M)),\n+        (int)(free_memory \/ (100*M)),\n@@ -1096,2 +1096,2 @@\n-        msg.print(\"Added compiler thread %s (available memory: %dMB, available profiled code cache: %dMB)\",\n-                  ct->name(), (int)(available_memory\/M), (int)(available_cc_p\/M));\n+        msg.print(\"Added compiler thread %s (free memory: %dMB, available profiled code cache: %dMB)\",\n+                  ct->name(), (int)(free_memory\/M), (int)(available_cc_p\/M));\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -314,0 +314,1 @@\n+  static julong free_memory();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}