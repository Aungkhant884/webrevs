{"files":[{"patch":"@@ -3647,1 +3647,0 @@\n-            Objects.requireNonNull(name);\n@@ -3649,1 +3648,1 @@\n-            checkMethodName(refKind, name);  \/\/ NPE check on name\n+            checkMethodName(refKind, name);  \/\/ implicit null-check of name\n@@ -3672,0 +3671,13 @@\n+        MemberName resolveOrNull(byte refKind, Class<?> refc, String name, MethodType type) {\n+            \/\/ do this before attempting to resolve\n+            if (!isClassAccessible(refc)) {\n+                return null;\n+            }\n+            Objects.requireNonNull(type);\n+            \/\/ implicit null-check of name\n+            if (name.startsWith(\"<\") && refKind != REF_newInvokeSpecial) {\n+                return null;\n+            }\n+            return IMPL_NAMES.resolveOrNull(refKind, new MemberName(refc, name, type, refKind), lookupClassOrNull(), allowedModes);\n+        }\n+\n@@ -3690,1 +3702,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -132,8 +132,3 @@\n-        try {\n-            MethodType type = methodType_table[value.at.ordinal()].insertParameterTypes(0, VarHandle.class);\n-            return memberName_table[mode]\n-                = MethodHandles.Lookup.IMPL_LOOKUP\n-                    .resolveOrFail(REF_invokeStatic, implClass, methodName, type);\n-        } catch (ReflectiveOperationException e) {\n-            return null;\n-        }\n+        MethodType type = methodType_table[value.at.ordinal()].insertParameterTypes(0, VarHandle.class);\n+        return memberName_table[mode] = MethodHandles.Lookup.IMPL_LOOKUP\n+            .resolveOrNull(REF_invokeStatic, implClass, methodName, type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarForm.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}