{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,9 +40,10 @@\n- * The <code>visit<i>Xyz<\/i><\/code> methods in this\n- * class scan their component elements by calling {@code scan} on\n- * their {@linkplain Element#getEnclosedElements enclosed elements},\n- * {@linkplain ExecutableElement#getParameters parameters}, etc., as\n- * indicated in the individual method specifications.  A subclass can\n- * control the order elements are visited by overriding the\n- * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a scanner\n- * may get the desired behavior be invoking {@code v.scan(e, p)} rather\n- * than {@code v.visit(e, p)} on the root objects of interest.\n+ * The <code>visit<i>Xyz<\/i><\/code> methods in this class scan their\n+ * component elements by calling {@link ElementScanner6#scan(Element,\n+ * Object) scan} on their {@linkplain Element#getEnclosedElements\n+ * enclosed elements}, {@linkplain ExecutableElement#getParameters\n+ * parameters}, etc., as indicated in the individual method\n+ * specifications.  A subclass can control the order elements are\n+ * visited by overriding the <code>visit<i>Xyz<\/i><\/code> methods.\n+ * Note that clients of a scanner may get the desired behavior be\n+ * invoking {@code v.scan(e, p)} rather than {@code v.visit(e, p)} on\n+ * the root objects of interest.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner14.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -38,8 +38,10 @@\n- * class scan their component elements by calling {@code scan} on\n- * their {@linkplain Element#getEnclosedElements enclosed elements},\n- * {@linkplain ExecutableElement#getParameters parameters}, etc., as\n- * indicated in the individual method specifications.  A subclass can\n- * control the order elements are visited by overriding the\n- * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a scanner\n- * may get the desired behavior be invoking {@code v.scan(e, p)} rather\n- * than {@code v.visit(e, p)} on the root objects of interest.\n+ * class scan their component elements by calling {@link\n+ * #scan(Element, P) scan} on their {@linkplain\n+ * Element#getEnclosedElements enclosed elements}, {@linkplain\n+ * ExecutableElement#getParameters parameters}, etc., as indicated in\n+ * the individual method specifications.  A subclass can control the\n+ * order elements are visited by overriding the\n+ * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a\n+ * scanner may get the desired behavior be invoking {@code v.scan(e,\n+ * p)} rather than {@code v.visit(e, p)} on the root objects of\n+ * interest.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner6.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,8 +38,10 @@\n- * class scan their component elements by calling {@code scan} on\n- * their {@linkplain Element#getEnclosedElements enclosed elements},\n- * {@linkplain ExecutableElement#getParameters parameters}, etc., as\n- * indicated in the individual method specifications.  A subclass can\n- * control the order elements are visited by overriding the\n- * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a scanner\n- * may get the desired behavior be invoking {@code v.scan(e, p)} rather\n- * than {@code v.visit(e, p)} on the root objects of interest.\n+ * class scan their component elements by calling {@link\n+ * ElementScanner6#scan(Element, Object) scan} on their {@linkplain\n+ * Element#getEnclosedElements enclosed elements}, {@linkplain\n+ * ExecutableElement#getParameters parameters}, etc., as indicated in\n+ * the individual method specifications.  A subclass can control the\n+ * order elements are visited by overriding the\n+ * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a\n+ * scanner may get the desired behavior be invoking {@code v.scan(e,\n+ * p)} rather than {@code v.visit(e, p)} on the root objects of\n+ * interest.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner7.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,8 +38,10 @@\n- * class scan their component elements by calling {@code scan} on\n- * their {@linkplain Element#getEnclosedElements enclosed elements},\n- * {@linkplain ExecutableElement#getParameters parameters}, etc., as\n- * indicated in the individual method specifications.  A subclass can\n- * control the order elements are visited by overriding the\n- * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a scanner\n- * may get the desired behavior be invoking {@code v.scan(e, p)} rather\n- * than {@code v.visit(e, p)} on the root objects of interest.\n+ * class scan their component elements by calling {@link\n+ * ElementScanner6#scan(Element, Object) scan} on their {@linkplain\n+ * Element#getEnclosedElements enclosed elements}, {@linkplain\n+ * ExecutableElement#getParameters parameters}, etc., as indicated in\n+ * the individual method specifications.  A subclass can control the\n+ * order elements are visited by overriding the\n+ * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a\n+ * scanner may get the desired behavior be invoking {@code v.scan(e,\n+ * p)} rather than {@code v.visit(e, p)} on the root objects of\n+ * interest.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner8.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,9 +39,10 @@\n- * The <code>visit<i>Xyz<\/i><\/code> methods in this\n- * class scan their component elements by calling {@code scan} on\n- * their {@linkplain Element#getEnclosedElements enclosed elements},\n- * {@linkplain ExecutableElement#getParameters parameters}, etc., as\n- * indicated in the individual method specifications.  A subclass can\n- * control the order elements are visited by overriding the\n- * <code>visit<i>Xyz<\/i><\/code> methods.  Note that clients of a scanner\n- * may get the desired behavior be invoking {@code v.scan(e, p)} rather\n- * than {@code v.visit(e, p)} on the root objects of interest.\n+ * The <code>visit<i>Xyz<\/i><\/code> methods in this class scan their\n+ * component elements by calling {@link ElementScanner6#scan(Element,\n+ * Object) scan} on their {@linkplain Element#getEnclosedElements\n+ * enclosed elements}, {@linkplain ExecutableElement#getParameters\n+ * parameters}, etc., as indicated in the individual method\n+ * specifications.  A subclass can control the order elements are\n+ * visited by overriding the <code>visit<i>Xyz<\/i><\/code> methods.\n+ * Note that clients of a scanner may get the desired behavior be\n+ * invoking {@code v.scan(e, p)} rather than {@code v.visit(e, p)} on\n+ * the root objects of interest.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner9.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}