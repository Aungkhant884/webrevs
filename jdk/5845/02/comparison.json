{"files":[{"patch":"@@ -49,2 +49,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n-                                  Monitor::_safepoint_check_never);\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n","filename":"src\/hotspot\/os\/aix\/osThread_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n-                                  Monitor::_safepoint_check_never);\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n","filename":"src\/hotspot\/os\/bsd\/osThread_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n-                                  Monitor::_safepoint_check_never);\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\");\n","filename":"src\/hotspot\/os\/linux\/osThread_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -136,2 +136,1 @@\n-  _metaspace_lock(new Mutex(Mutex::nosafepoint-2, \"MetaspaceAllocation_lock\",\n-                            Mutex::_safepoint_check_never)),\n+  _metaspace_lock(new Mutex(Mutex::nosafepoint-2, \"MetaspaceAllocation_lock\")),\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    _lock = new Monitor(Mutex::nonleaf, \"CompileTask_lock\", Mutex::_safepoint_check_always);\n+    _lock = new Monitor(Mutex::safepoint, \"CompileTask_lock\");\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-    _lock(Mutex::service-3, \"G1Mapper_lock\", Mutex::_safepoint_check_never) {\n+    _lock(Mutex::service-3, \"G1Mapper_lock\") {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,3 +43,1 @@\n-    _monitor(Mutex::nosafepoint,\n-             \"G1ServiceThread_lock\",\n-             Monitor::_safepoint_check_never),\n+    _monitor(Mutex::nosafepoint, \"G1ServiceThread_lock\"),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  _par_alloc_lock(Mutex::service-2, \"HeapRegionParAlloc_lock\", Mutex::_safepoint_check_never),\n+  _par_alloc_lock(Mutex::service-2, \"HeapRegionParAlloc_lock\"),\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  _m(Mutex::service - 1, FormatBuffer<128>(\"HeapRegionRemSet#%u_lock\", hr->hrm_index()), Monitor::_safepoint_check_never),\n+  _m(Mutex::service - 1, FormatBuffer<128>(\"HeapRegionRemSet#%u_lock\", hr->hrm_index())),\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,2 +95,1 @@\n-  _shadow_region_monitor = new Monitor(Mutex::nosafepoint, \"CompactionManager_lock\",\n-                                       Monitor::_safepoint_check_never);\n+  _shadow_region_monitor = new Monitor(Mutex::nosafepoint, \"CompactionManager_lock\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-                    \"GCLogPrecious Lock\",\n-                    Mutex::_safepoint_check_never);\n+                    \"GCLogPrecious Lock\");\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -814,1 +814,1 @@\n-                                    int rank) {\n+                                    Mutex::Rank rank) {\n@@ -817,1 +817,1 @@\n-  return new PaddedMutex(rank, name, Mutex::_safepoint_check_never);\n+  return new PaddedMutex(rank, name);\n@@ -847,4 +847,0 @@\n-  assert(_active_mutex->_safepoint_check_required == Mutex::_safepoint_check_never,\n-         \"%s: active mutex requires never safepoint check\", _name);\n-  assert(_allocation_mutex->_safepoint_check_required == Mutex::_safepoint_check_never,\n-         \"%s: allocation mutex requires never safepoint check\", _name);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -776,2 +776,1 @@\n-  _par_alloc_lock(Mutex::nonleaf, \"OffsetTableContigSpaceParAlloc_lock\",\n-                  Mutex::_safepoint_check_always, true)\n+  _par_alloc_lock(Mutex::safepoint, \"OffsetTableContigSpaceParAlloc_lock\", true)\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  _blocker(Mutex::nosafepoint, \"TaskTerminator_lock\", Monitor::_safepoint_check_never),\n+  _blocker(Mutex::nosafepoint, \"TaskTerminator_lock\"),\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,2 +248,1 @@\n-  : _monitor(Mutex::nosafepoint, \"WorkGangBarrierSync_lock\",\n-             Monitor::_safepoint_check_never),\n+  : _monitor(Mutex::nosafepoint, \"WorkGangBarrierSync_lock\"),\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-  _alloc_failure_waiters_lock(Mutex::nonleaf, \"ShenandoahAllocFailureGC_lock\", Monitor::_safepoint_check_always, true),\n-  _gc_waiters_lock(Mutex::nonleaf, \"ShenandoahRequestedGC_lock\", Monitor::_safepoint_check_always, true),\n+  _alloc_failure_waiters_lock(Mutex::safepoint, \"ShenandoahAllocFailureGC_lock\", true),\n+  _gc_waiters_lock(Mutex::safepoint, \"ShenandoahRequestedGC_lock\", true),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-          _wait_monitor(new Monitor(Mutex::nonleaf-1, \"ShenandoahWaitMonitor_lock\", Monitor::_safepoint_check_always, true)),\n+          _wait_monitor(new Monitor(Mutex::safepoint-1, \"ShenandoahWaitMonitor_lock\", true)),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,3 +69,1 @@\n-    _monitor(Monitor::nosafepoint,\n-             \"ZMessagePort_lock\",\n-             Monitor::_safepoint_check_never),\n+    _monitor(Monitor::nosafepoint, \"ZMessagePort_lock\"),\n","filename":"src\/hotspot\/share\/gc\/z\/zMessagePort.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    _monitor(Monitor::nosafepoint, \"ZMetronome_lock\", Monitor::_safepoint_check_never),\n+    _monitor(Monitor::nosafepoint, \"ZMetronome_lock\"),\n","filename":"src\/hotspot\/share\/gc\/z\/zMetronome.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-      _mutex(Mutex::nosafepoint, \"ParHeapInspectTask_lock\", Mutex::_safepoint_check_never) {}\n+      _mutex(Mutex::nosafepoint, \"ParHeapInspectTask_lock\") {}\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  Mutex* lock = new Mutex(Monitor::nosafepoint, \"MetaspaceTestArea_lock\", Monitor::_safepoint_check_never);\n+  Mutex* lock = new Mutex(Monitor::nosafepoint, \"MetaspaceTestArea_lock\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1210,1 +1210,1 @@\n-    _extra_data_lock(Mutex::nonleaf-2, \"MDOExtraData_lock\", Mutex::_safepoint_check_always),\n+    _extra_data_lock(Mutex::safepoint-2, \"MDOExtraData_lock\"),\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  _lock(Mutex::nosafepoint, \"JvmtiTagMap_lock\", Mutex::_safepoint_check_never),\n+  _lock(Mutex::nosafepoint, \"JvmtiTagMap_lock\"),\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-  _lock(Monitor::nosafepoint, \"HandshakeState_lock\", Monitor::_safepoint_check_never),\n+  _lock(Monitor::nosafepoint, \"HandshakeState_lock\"),\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -65,5 +66,5 @@\n-  \/\/ If the JavaThread checks for safepoint, verify that the lock wasn't created with safepoint_check_never.\n-  if (thread->is_active_Java_thread()) {\n-    assert(_safepoint_check_required != _safepoint_check_never,\n-           \"This lock should never have a safepoint check for Java threads: %s\",\n-           name());\n+  \/\/ If the lock acquisition checks for safepoint, verify that the lock was created with rank that\n+  \/\/ has safepoint checks. Technically this doesn't affect NonJavaThreads since they won't actually\n+  \/\/ check for safepoint, but let's make the rule unconditional unless there's a good reason not to.\n+  assert(_rank > nosafepoint,\n+         \"This lock should not be taken with a safepoint check: %s\", name());\n@@ -71,0 +72,1 @@\n+  if (thread->is_active_Java_thread()) {\n@@ -73,4 +75,0 @@\n-  } else {\n-    \/\/ If initialized with safepoint_check_never, a NonJavaThread should never ask to safepoint check either.\n-    assert(_safepoint_check_required != _safepoint_check_never,\n-           \"NonJavaThread should not check for safepoint\");\n@@ -82,1 +80,1 @@\n-  assert(!thread->is_active_Java_thread() || _safepoint_check_required != _safepoint_check_always,\n+  assert(!thread->is_active_Java_thread() || _rank <= nosafepoint,\n@@ -170,1 +168,1 @@\n-  \/\/ Some safepoint_check_always locks use try_lock, so cannot check\n+  \/\/ Some safepoint checking locks use try_lock, so cannot check\n@@ -277,2 +275,1 @@\n-Mutex::Mutex(int Rank, const char * name, SafepointCheckRequired safepoint_check_required,\n-             bool allow_vm_block) : _owner(NULL) {\n+Mutex::Mutex(Rank rank, const char * name, bool allow_vm_block) : _owner(NULL) {\n@@ -284,2 +281,1 @@\n-  _rank            = Rank;\n-  _safepoint_check_required = safepoint_check_required;\n+  _rank            = rank;\n@@ -288,7 +284,1 @@\n-  assert(_rank >= 0 && _rank <= nonleaf, \"Bad lock rank %d: %s\", _rank, name);\n-\n-  assert(_rank > nosafepoint || _safepoint_check_required == _safepoint_check_never,\n-         \"Locks below nosafepoint rank should never safepoint: %s\", name);\n-\n-  assert(_rank <= nosafepoint || _safepoint_check_required == _safepoint_check_always,\n-         \"Locks above nosafepoint rank should safepoint: %s\", name);\n+  assert(_rank >= static_cast<Rank>(0) && _rank <= safepoint, \"Bad lock rank %s: %s\", rank_name(), name);\n@@ -298,2 +288,2 @@\n-  assert(_safepoint_check_required == _safepoint_check_always || _allow_vm_block,\n-         \"Safepoint check never locks should always allow the vm to block: %s\", name);\n+  assert(_rank > nosafepoint || _allow_vm_block,\n+         \"Locks that don't check for safepoint should always allow the vm to block: %s\", name);\n@@ -315,0 +305,24 @@\n+\/\/\n+#ifdef ASSERT\n+static Mutex::Rank _ranks[] = { Mutex::event, Mutex::service, Mutex::stackwatermark, Mutex::tty, Mutex::oopstorage,\n+                                Mutex::nosafepoint, Mutex::safepoint };\n+\n+static const char* _rank_names[] = { \"event\", \"service\", \"stackwatermark\", \"tty\", \"oopstorage\",\n+                                     \"nosafepoint\", \"safepoint\" };\n+\n+static const int _num_ranks = 7;\n+\n+static const char* rank_name_internal(Mutex::Rank r) {\n+  \/\/ Find closest rank and print out the name\n+  stringStream st;\n+  for (int i = 0; i < _num_ranks; i++) {\n+    if (r == _ranks[i]) {\n+      return _rank_names[i];\n+    } else if (r  > _ranks[i] && (i < _num_ranks-1 && r < _ranks[i+1])) {\n+      int delta = static_cast<int>(_ranks[i+1]) - static_cast<int>(r);\n+      st.print(\"%s-%d\", _rank_names[i+1], delta);\n+      return st.as_string();\n+    }\n+  }\n+  return \"fail\";\n+}\n@@ -316,6 +330,14 @@\n-#ifndef PRODUCT\n-const char* print_safepoint_check(Mutex::SafepointCheckRequired safepoint_check) {\n-  switch (safepoint_check) {\n-  case Mutex::_safepoint_check_never:     return \"safepoint_check_never\";\n-  case Mutex::_safepoint_check_always:    return \"safepoint_check_always\";\n-  default: return \"\";\n+const char* Mutex::rank_name() const {\n+  return rank_name_internal(_rank);\n+}\n+\n+\n+void Mutex::assert_no_overlap(Rank orig, Rank adjusted, int adjust) {\n+  int i = 0;\n+  while (_ranks[i] < orig) i++;\n+  \/\/ underflow is caught in constructor\n+  if (i != 0 && adjusted > event && adjusted <= _ranks[i-1]) {\n+    ResourceMark rm;\n+    assert(adjusted > _ranks[i-1],\n+           \"Rank %s-%d overlaps with %s\",\n+           rank_name_internal(orig), adjust, rank_name_internal(adjusted));\n@@ -324,0 +346,1 @@\n+#endif \/\/ ASSERT\n@@ -325,0 +348,1 @@\n+#ifndef PRODUCT\n@@ -331,1 +355,1 @@\n-  st->print(\" %s\", print_safepoint_check(_safepoint_check_required));\n+  DEBUG_ONLY(st->print(\" %s\", rank_name()));\n@@ -395,2 +419,3 @@\n-      assert(false, \"Attempting to wait on monitor %s\/%d while holding lock %s\/%d -- \"\n-             \"possible deadlock. %s\", name(), rank(), least->name(), least->rank(),\n+      ResourceMark rm(thread);\n+      assert(false, \"Attempting to wait on monitor %s\/%s while holding lock %s\/%s -- \"\n+             \"possible deadlock. %s\", name(), rank_name(), least->name(), least->rank_name(),\n@@ -412,0 +437,1 @@\n+      ResourceMark rm(thread);\n@@ -418,2 +444,2 @@\n-      assert(false, \"Attempting to acquire lock %s\/%d out of order with lock %s\/%d -- \"\n-             \"possible deadlock\", this->name(), this->rank(), least->name(), least->rank());\n+      assert(false, \"Attempting to acquire lock %s\/%s out of order with lock %s\/%s -- \"\n+             \"possible deadlock\", this->name(), this->rank_name(), least->name(), least->rank_name());\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":61,"deletions":35,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  enum Rank {\n+  enum class Rank {\n@@ -56,2 +56,1 @@\n-       nonleaf        = nosafepoint    +  20,\n-       max_nonleaf    = nonleaf\n+       safepoint      = nosafepoint    +  20\n@@ -60,0 +59,25 @@\n+  \/\/ want C++later \"using enum\" directives.\n+  static const Rank event          = Rank::event;\n+  static const Rank service        = Rank::service;\n+  static const Rank stackwatermark = Rank::stackwatermark;\n+  static const Rank tty            = Rank::tty;\n+  static const Rank oopstorage     = Rank::oopstorage;\n+  static const Rank nosafepoint    = Rank::nosafepoint;\n+  static const Rank safepoint      = Rank::safepoint;\n+\n+  static void assert_no_overlap(Rank orig, Rank adjusted, int adjust);\n+\n+  friend Rank operator-(Rank base, int adjust) {\n+    Rank result = static_cast<Rank>(static_cast<int>(base) - adjust);\n+    DEBUG_ONLY(assert_no_overlap(base, result, adjust));\n+    return result;\n+  }\n+\n+  friend constexpr bool operator<(Rank lhs, Rank rhs) {\n+    return static_cast<int>(lhs) < static_cast<int>(rhs);\n+  }\n+\n+  friend constexpr bool operator>(Rank lhs, Rank rhs)  { return rhs < lhs; }\n+  friend constexpr bool operator<=(Rank lhs, Rank rhs) { return !(lhs > rhs); }\n+  friend constexpr bool operator>=(Rank lhs, Rank rhs) { return !(lhs < rhs); }\n+\n@@ -76,1 +100,1 @@\n-  int     _rank;                 \/\/ rank (to avoid\/detect potential deadlocks)\n+  Rank    _rank;                 \/\/ rank (to avoid\/detect potential deadlocks)\n@@ -90,1 +114,2 @@\n-  int    rank() const          { return _rank; }\n+  Rank   rank() const          { return _rank; }\n+  const char*  rank_name() const;\n@@ -110,1 +135,1 @@\n-  \/\/ Java and NonJavaThreads. When the lock is initialized with _safepoint_check_always,\n+  \/\/ Java and NonJavaThreads. When the lock is initialized with rank > nosafepoint,\n@@ -113,1 +138,1 @@\n-  \/\/ _safepoint_check_never, that means that whenever the lock is acquired by a JavaThread\n+  \/\/ rank <= nosafepoint, that means that whenever the lock is acquired by a JavaThread\n@@ -131,14 +156,0 @@\n-  enum class SafepointCheckRequired {\n-    _safepoint_check_never,       \/\/ Mutexes with this value will cause errors\n-                                  \/\/ when acquired by a JavaThread with a safepoint check.\n-    _safepoint_check_always       \/\/ Mutexes with this value will cause errors\n-                                  \/\/ when acquired by a JavaThread without a safepoint check.\n-  };\n-  \/\/ Bring the enumerator names into class scope.\n-  static const SafepointCheckRequired _safepoint_check_never =\n-    SafepointCheckRequired::_safepoint_check_never;\n-  static const SafepointCheckRequired _safepoint_check_always =\n-    SafepointCheckRequired::_safepoint_check_always;\n-\n-  NOT_PRODUCT(SafepointCheckRequired _safepoint_check_required;)\n-\n@@ -146,1 +157,1 @@\n-  Mutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block);\n+  Mutex(Rank rank, const char *name, bool allow_vm_block);\n@@ -148,3 +159,2 @@\n-  Mutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n-    Mutex(rank, name, safepoint_check_required,\n-          safepoint_check_required == _safepoint_check_never ? true : false) {}\n+  Mutex(Rank rank, const char *name) :\n+    Mutex(rank, name, rank > nosafepoint ? false : true) {}\n@@ -191,2 +201,2 @@\n-  Monitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block)  :\n-    Mutex(rank, name, safepoint_check_required, allow_vm_block) {}\n+  Monitor(Rank rank, const char *name, bool allow_vm_block)  :\n+    Mutex(rank, name, allow_vm_block) {}\n@@ -194,2 +204,2 @@\n-  Monitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n-    Mutex(rank, name, safepoint_check_required) {}\n+  Monitor(Rank rank, const char *name) :\n+    Mutex(rank, name) {}\n@@ -215,4 +225,2 @@\n-  PaddedMutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block) :\n-    Mutex(rank, name, safepoint_check_required, allow_vm_block) {};\n-  PaddedMutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n-    Mutex(rank, name, safepoint_check_required) {};\n+  PaddedMutex(Rank rank, const char *name, bool allow_vm_block) : Mutex(rank, name, allow_vm_block) {};\n+  PaddedMutex(Rank rank, const char *name) : Mutex(rank, name) {};\n@@ -228,4 +236,2 @@\n-  PaddedMonitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block) :\n-    Monitor(rank, name, safepoint_check_required, allow_vm_block) {};\n-  PaddedMonitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n-    Monitor(rank, name, safepoint_check_required) {};\n+  PaddedMonitor(Rank rank, const char *name, bool allow_vm_block) : Monitor(rank, name, allow_vm_block) {};\n+  PaddedMonitor(Rank rank, const char *name) : Monitor(rank, name) {};\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":43,"deletions":37,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -202,3 +202,3 @@\n-#define def(var, type, pri, vm_block, safepoint_check_allowed ) {             \\\n-  var = new type(Mutex::pri, #var, Mutex::safepoint_check_allowed, vm_block); \\\n-  add_mutex(var);                                                             \\\n+#define def(var, type, pri, vm_block) {       \\\n+  var = new type(Mutex::pri, #var, vm_block); \\\n+  add_mutex(var);                             \\\n@@ -209,3 +209,3 @@\n-#define defl(var, type, held_lock, vm_block, safepoint_check_allowed) {                \\\n-  var = new type(held_lock->rank()-1, #var, Mutex::safepoint_check_allowed, vm_block); \\\n-  add_mutex(var); \\\n+#define defl(var, type, held_lock, vm_block) {         \\\n+  var = new type(held_lock->rank()-1, #var, vm_block); \\\n+  add_mutex(var);                                      \\\n@@ -214,3 +214,3 @@\n-#define defl(var, type, held_lock, vm_block, safepoint_check_allowed) {           \\\n-  var = new type(Mutex::nonleaf, #var, Mutex::safepoint_check_allowed, vm_block); \\\n-  add_mutex(var); \\\n+#define defl(var, type, held_lock, vm_block) {         \\\n+  var = new type(Mutex::safepoint, #var, vm_block);    \\\n+  add_mutex(var);                                      \\\n@@ -222,1 +222,1 @@\n-  def(tty_lock                     , PaddedMutex  , tty,         true,  _safepoint_check_never);      \/\/ allow to lock in VM\n+  def(tty_lock                     , PaddedMutex  , tty,            true);      \/\/ allow to lock in VM\n@@ -224,1 +224,1 @@\n-  def(STS_lock                     , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n+  def(STS_lock                     , PaddedMonitor, nosafepoint,    true);\n@@ -227,1 +227,1 @@\n-    def(CGC_lock                   , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n+    def(CGC_lock                   , PaddedMonitor, nosafepoint,    true);\n@@ -229,1 +229,1 @@\n-    def(G1DetachedRefinementStats_lock, PaddedMutex, nosafepoint-2, true, _safepoint_check_never);\n+    def(G1DetachedRefinementStats_lock, PaddedMutex, nosafepoint-2, true);\n@@ -231,4 +231,4 @@\n-    def(FreeList_lock              , PaddedMutex  , service-1,   true,  _safepoint_check_never);\n-    def(OldSets_lock               , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-    def(Uncommit_lock              , PaddedMutex  , service-2,   true,  _safepoint_check_never);\n-    def(RootRegionScan_lock        , PaddedMonitor, nosafepoint-1, true,  _safepoint_check_never);\n+    def(FreeList_lock              , PaddedMutex  , service-1,      true);\n+    def(OldSets_lock               , PaddedMutex  , nosafepoint,    true);\n+    def(Uncommit_lock              , PaddedMutex  , service-2,      true);\n+    def(RootRegionScan_lock        , PaddedMonitor, nosafepoint-1,  true);\n@@ -236,2 +236,2 @@\n-    def(MarkStackFreeList_lock     , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-    def(MarkStackChunkList_lock    , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n+    def(MarkStackFreeList_lock     , PaddedMutex  , nosafepoint,    true);\n+    def(MarkStackChunkList_lock    , PaddedMutex  , nosafepoint,    true);\n@@ -239,1 +239,1 @@\n-    def(MonitoringSupport_lock     , PaddedMutex  , service-1,   true,  _safepoint_check_never);      \/\/ used for serviceability monitoring support\n+    def(MonitoringSupport_lock     , PaddedMutex  , service-1,      true);      \/\/ used for serviceability monitoring support\n@@ -241,4 +241,4 @@\n-  def(StringDedup_lock             , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n-  def(StringDedupIntern_lock       , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(ParGCRareEvent_lock          , PaddedMutex  , nonleaf,       true,  _safepoint_check_always);\n-  def(RawMonitor_lock              , PaddedMutex  , nosafepoint-1, true,  _safepoint_check_never);\n+  def(StringDedup_lock             , PaddedMonitor, nosafepoint,    true);\n+  def(StringDedupIntern_lock       , PaddedMutex  , nosafepoint,    true);\n+  def(ParGCRareEvent_lock          , PaddedMutex  , safepoint,      true);\n+  def(RawMonitor_lock              , PaddedMutex  , nosafepoint-1,  true);\n@@ -246,1 +246,1 @@\n-  def(Metaspace_lock               , PaddedMutex  , nosafepoint-3, true,  _safepoint_check_never);\n+  def(Metaspace_lock               , PaddedMutex  , nosafepoint-3,  true);\n@@ -248,3 +248,3 @@\n-  def(Patching_lock                , PaddedMutex  , nosafepoint,     true,  _safepoint_check_never);      \/\/ used for safepointing and code patching.\n-  def(MonitorDeflation_lock        , PaddedMonitor, nosafepoint,     true,  _safepoint_check_never);      \/\/ used for monitor deflation thread operations\n-  def(Service_lock                 , PaddedMonitor, service,     true,  _safepoint_check_never);      \/\/ used for service thread operations\n+  def(Patching_lock                , PaddedMutex  , nosafepoint,    true);      \/\/ used for safepointing and code patching.\n+  def(MonitorDeflation_lock        , PaddedMonitor, nosafepoint,    true);      \/\/ used for monitor deflation thread operations\n+  def(Service_lock                 , PaddedMonitor, service,        true);      \/\/ used for service thread operations\n@@ -253,1 +253,1 @@\n-    def(Notification_lock          , PaddedMonitor, service,     true,  _safepoint_check_never);  \/\/ used for notification thread operations\n+    def(Notification_lock          , PaddedMonitor, service,        true);  \/\/ used for notification thread operations\n@@ -258,1 +258,1 @@\n-  def(JmethodIdCreation_lock       , PaddedMutex  , nosafepoint-2,   true,  _safepoint_check_never); \/\/ used for creating jmethodIDs.\n+  def(JmethodIdCreation_lock       , PaddedMutex  , nosafepoint-2,  true); \/\/ used for creating jmethodIDs.\n@@ -260,6 +260,6 @@\n-  def(SharedDictionary_lock        , PaddedMutex  , nonleaf,          true,  _safepoint_check_always);\n-  def(VMStatistic_lock             , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n-  def(JNIHandleBlockFreeList_lock  , PaddedMutex  , nosafepoint-1,    true,  _safepoint_check_never);      \/\/ handles are used by VM thread\n-  def(SignatureHandlerLibrary_lock , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n-  def(SymbolArena_lock             , PaddedMutex  , nosafepoint,      true,  _safepoint_check_never);\n-  def(ExceptionCache_lock          , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n+  def(SharedDictionary_lock        , PaddedMutex  , safepoint,      true);\n+  def(VMStatistic_lock             , PaddedMutex  , safepoint,      false);\n+  def(JNIHandleBlockFreeList_lock  , PaddedMutex  , nosafepoint-1,  true);      \/\/ handles are used by VM thread\n+  def(SignatureHandlerLibrary_lock , PaddedMutex  , safepoint,      false);\n+  def(SymbolArena_lock             , PaddedMutex  , nosafepoint,    true);\n+  def(ExceptionCache_lock          , PaddedMutex  , safepoint,      false);\n@@ -267,1 +267,1 @@\n-  def(FullGCALot_lock              , PaddedMutex  , nonleaf,          false, _safepoint_check_always); \/\/ a lock to make FullGCALot MT safe\n+  def(FullGCALot_lock              , PaddedMutex  , safepoint,      false); \/\/ a lock to make FullGCALot MT safe\n@@ -269,1 +269,1 @@\n-  def(BeforeExit_lock              , PaddedMonitor, nonleaf,          true,  _safepoint_check_always);\n+  def(BeforeExit_lock              , PaddedMonitor, safepoint,      true);\n@@ -271,2 +271,2 @@\n-  def(NonJavaThreadsList_lock      , PaddedMutex,   nosafepoint-1, true,  _safepoint_check_never);\n-  def(NonJavaThreadsListSync_lock  , PaddedMutex,   nosafepoint, true,  _safepoint_check_never);\n+  def(NonJavaThreadsList_lock      , PaddedMutex,   nosafepoint-1,  true);\n+  def(NonJavaThreadsListSync_lock  , PaddedMutex,   nosafepoint,    true);\n@@ -274,6 +274,6 @@\n-  def(RetData_lock                 , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n-  def(Terminator_lock              , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n-  def(InitCompleted_lock           , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n-  def(Notify_lock                  , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n-  def(JNICritical_lock             , PaddedMonitor, nonleaf,     true,  _safepoint_check_always); \/\/ used for JNI critical regions\n-  def(AdapterHandlerLibrary_lock   , PaddedMutex  , nonleaf,     true,  _safepoint_check_always);\n+  def(RetData_lock                 , PaddedMutex  , safepoint,      false);\n+  def(Terminator_lock              , PaddedMonitor, safepoint,      true);\n+  def(InitCompleted_lock           , PaddedMonitor, nosafepoint,    true);\n+  def(Notify_lock                  , PaddedMonitor, safepoint,      true);\n+  def(JNICritical_lock             , PaddedMonitor, safepoint,      true); \/\/ used for JNI critical regions\n+  def(AdapterHandlerLibrary_lock   , PaddedMutex  , safepoint,      true);\n@@ -281,2 +281,2 @@\n-  def(Heap_lock                    , PaddedMonitor, nonleaf,   false, _safepoint_check_always); \/\/ Doesn't safepoint check during termination.\n-  def(JfieldIdCreation_lock        , PaddedMutex  , nonleaf,   true,  _safepoint_check_always); \/\/ jfieldID, Used in VM_Operation\n+  def(Heap_lock                    , PaddedMonitor, safepoint,      false); \/\/ Doesn't safepoint check during termination.\n+  def(JfieldIdCreation_lock        , PaddedMutex  , safepoint,      true);  \/\/ jfieldID, Used in VM_Operation\n@@ -284,5 +284,5 @@\n-  def(CompiledIC_lock              , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);      \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n-  def(MethodCompileQueue_lock      , PaddedMonitor, nonleaf,     false, _safepoint_check_always);\n-  def(CompileStatistics_lock       , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n-  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(MultiArray_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n+  def(CompiledIC_lock              , PaddedMutex  , nosafepoint,    true);  \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n+  def(MethodCompileQueue_lock      , PaddedMonitor, safepoint,      false);\n+  def(CompileStatistics_lock       , PaddedMutex  , safepoint,      false);\n+  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint,    true);\n+  def(MultiArray_lock              , PaddedMutex  , safepoint,      false);\n@@ -290,3 +290,3 @@\n-  def(JvmtiThreadState_lock        , PaddedMutex  , nonleaf,     false, _safepoint_check_always); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n-  def(EscapeBarrier_lock           , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n-  def(Management_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always); \/\/ used for JVM management\n+  def(JvmtiThreadState_lock        , PaddedMutex  , safepoint,      false); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n+  def(EscapeBarrier_lock           , PaddedMonitor, nosafepoint,    true);  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n+  def(Management_lock              , PaddedMutex  , safepoint,      false); \/\/ used for JVM management\n@@ -294,3 +294,3 @@\n-  def(ConcurrentGCBreakpoints_lock , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n-  def(MethodData_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n-  def(TouchedMethodLog_lock        , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n+  def(ConcurrentGCBreakpoints_lock , PaddedMonitor, safepoint,      true);\n+  def(MethodData_lock              , PaddedMutex  , safepoint,      false);\n+  def(TouchedMethodLog_lock        , PaddedMutex  , safepoint,      false);\n@@ -298,4 +298,4 @@\n-  def(CompileThread_lock           , PaddedMonitor, nonleaf,     false, _safepoint_check_always);\n-  def(PeriodicTask_lock            , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n-  def(RedefineClasses_lock         , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n-  def(Verify_lock                  , PaddedMutex,   nonleaf,     true,  _safepoint_check_always);\n+  def(CompileThread_lock           , PaddedMonitor, safepoint,      false);\n+  def(PeriodicTask_lock            , PaddedMonitor, safepoint,      true);\n+  def(RedefineClasses_lock         , PaddedMonitor, safepoint,      true);\n+  def(Verify_lock                  , PaddedMutex,   safepoint,      true);\n@@ -304,1 +304,1 @@\n-    def(Compilation_lock           , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n+    def(Compilation_lock           , PaddedMonitor, nosafepoint,    true);\n@@ -308,3 +308,3 @@\n-  def(JfrBuffer_lock               , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(JfrStacktrace_lock           , PaddedMutex  , stackwatermark-1,  true,  _safepoint_check_never);\n-  def(JfrThreadSampler_lock        , PaddedMonitor, nosafepoint, true,  _safepoint_check_never);\n+  def(JfrBuffer_lock               , PaddedMutex  , nosafepoint,       true);\n+  def(JfrStacktrace_lock           , PaddedMutex  , stackwatermark-1,  true);\n+  def(JfrThreadSampler_lock        , PaddedMonitor, nosafepoint,       true);\n@@ -314,1 +314,1 @@\n-  def(UnsafeJlong_lock             , PaddedMutex  , nosafepoint,     true,  _safepoint_check_never);\n+  def(UnsafeJlong_lock             , PaddedMutex  , nosafepoint,    true);\n@@ -317,6 +317,6 @@\n-  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , nonleaf,   false, _safepoint_check_always);\n-  def(NMethodSweeperStats_lock     , PaddedMutex  , nosafepoint,   true,  _safepoint_check_never);\n-  def(ThreadsSMRDelete_lock        , PaddedMonitor, nosafepoint-3, true,  _safepoint_check_never); \/\/ Holds ConcurrentHashTableResize_lock\n-  def(ThreadIdTableCreate_lock     , PaddedMutex  , nonleaf,       false, _safepoint_check_always);\n-  def(SharedDecoder_lock           , PaddedMutex  , tty-1,         true,  _safepoint_check_never);\n-  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint,   true,  _safepoint_check_never);\n+  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , safepoint,      false);\n+  def(NMethodSweeperStats_lock     , PaddedMutex  , nosafepoint,    true);\n+  def(ThreadsSMRDelete_lock        , PaddedMonitor, nosafepoint-3,  true); \/\/ Holds ConcurrentHashTableResize_lock\n+  def(ThreadIdTableCreate_lock     , PaddedMutex  , safepoint,      false);\n+  def(SharedDecoder_lock           , PaddedMutex  , tty-1,          true);\n+  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint,    true);\n@@ -324,1 +324,1 @@\n-  def(NMTQuery_lock                , PaddedMutex  , nonleaf, false, _safepoint_check_always);\n+  def(NMTQuery_lock                , PaddedMutex  , safepoint,      false);\n@@ -328,1 +328,1 @@\n-  def(CDSClassFileStream_lock      , PaddedMutex  , nonleaf, false, _safepoint_check_always);\n+  def(CDSClassFileStream_lock      , PaddedMutex  , safepoint,      false);\n@@ -330,5 +330,5 @@\n-  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(CDSLambda_lock               , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(DumpRegion_lock              , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(ClassListFile_lock           , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(LambdaFormInvokers_lock      , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n+  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint,    true);\n+  def(CDSLambda_lock               , PaddedMutex  , nosafepoint,    true);\n+  def(DumpRegion_lock              , PaddedMutex  , nosafepoint,    true);\n+  def(ClassListFile_lock           , PaddedMutex  , nosafepoint,    true);\n+  def(LambdaFormInvokers_lock      , PaddedMutex  , safepoint,      false);\n@@ -336,2 +336,2 @@\n-  def(Bootclasspath_lock           , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(Zip_lock                     , PaddedMonitor, nosafepoint-1, true, _safepoint_check_never); \/\/ Holds DumpTimeTable_lock\n+  def(Bootclasspath_lock           , PaddedMutex  , nosafepoint,    true);\n+  def(Zip_lock                     , PaddedMonitor, nosafepoint-1,  true); \/\/ Holds DumpTimeTable_lock\n@@ -340,1 +340,1 @@\n-  def(JVMCI_lock                   , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n+  def(JVMCI_lock                   , PaddedMonitor, safepoint,      true);\n@@ -343,6 +343,6 @@\n-  \/\/ These locks have safepoint_check_never and relative rankings.\n-  defl(InlineCacheBuffer_lock      , PaddedMutex  , CompiledIC_lock,  true,  _safepoint_check_never);\n-  defl(VtableStubs_lock            , PaddedMutex  , CompiledIC_lock,  true,  _safepoint_check_never);  \/\/ Also holds DumpTimeTable_lock\n-  defl(CodeCache_lock              , PaddedMonitor, VtableStubs_lock, true,  _safepoint_check_never);\n-  defl(CompiledMethod_lock         , PaddedMutex  , CodeCache_lock,   true,  _safepoint_check_never);\n-  defl(CodeSweeper_lock            , PaddedMonitor, CompiledMethod_lock, true,  _safepoint_check_never);\n+  \/\/ These locks have relative rankings, and inherit safepoint checking attributes from that rank.\n+  defl(InlineCacheBuffer_lock      , PaddedMutex  , CompiledIC_lock,  true);\n+  defl(VtableStubs_lock            , PaddedMutex  , CompiledIC_lock,  true);  \/\/ Also holds DumpTimeTable_lock\n+  defl(CodeCache_lock              , PaddedMonitor, VtableStubs_lock, true);\n+  defl(CompiledMethod_lock         , PaddedMutex  , CodeCache_lock,   true);\n+  defl(CodeSweeper_lock            , PaddedMonitor, CompiledMethod_lock, true);\n@@ -350,4 +350,3 @@\n-  \/\/ These locks have safepoint_check_always and relative rankings.\n-  defl(Threads_lock                , PaddedMonitor, CompileThread_lock, true, _safepoint_check_always);\n-  defl(Heap_lock                   , PaddedMonitor, MultiArray_lock,   false, _safepoint_check_always);\n-  defl(Compile_lock                , PaddedMutex ,  MethodCompileQueue_lock, false, _safepoint_check_always);\n+  defl(Threads_lock                , PaddedMonitor, CompileThread_lock, true);\n+  defl(Heap_lock                   , PaddedMonitor, MultiArray_lock,    false);\n+  defl(Compile_lock                , PaddedMutex ,  MethodCompileQueue_lock, false);\n@@ -355,5 +354,5 @@\n-  defl(PerfDataMemAlloc_lock       , PaddedMutex  , Heap_lock,         true, _safepoint_check_always);\n-  defl(PerfDataManager_lock        , PaddedMutex  , Heap_lock,         true, _safepoint_check_always);\n-  defl(ClassLoaderDataGraph_lock   , PaddedMutex  , MultiArray_lock,   false, _safepoint_check_always);\n-  defl(VMOperation_lock            , PaddedMonitor, Compile_lock,      true, _safepoint_check_always);\n-  defl(ClassInitError_lock         , PaddedMonitor, Threads_lock,      true, _safepoint_check_always);\n+  defl(PerfDataMemAlloc_lock       , PaddedMutex  , Heap_lock,         true);\n+  defl(PerfDataManager_lock        , PaddedMutex  , Heap_lock,         true);\n+  defl(ClassLoaderDataGraph_lock   , PaddedMutex  , MultiArray_lock,   false);\n+  defl(VMOperation_lock            , PaddedMonitor, Compile_lock,      true);\n+  defl(ClassInitError_lock         , PaddedMonitor, Threads_lock,      true);\n@@ -362,1 +361,1 @@\n-    defl(G1OldGCCount_lock         , PaddedMonitor, Threads_lock, true, _safepoint_check_always);\n+    defl(G1OldGCCount_lock         , PaddedMonitor, Threads_lock,      true);\n@@ -364,5 +363,5 @@\n-  defl(CompileTaskAlloc_lock       , PaddedMutex ,  MethodCompileQueue_lock,   true, _safepoint_check_always);\n-  defl(ExpandHeap_lock             , PaddedMutex ,  Heap_lock,                 true, _safepoint_check_always);\n-  defl(OopMapCacheAlloc_lock       , PaddedMutex ,  Threads_lock,              true, _safepoint_check_always);\n-  defl(Module_lock                 , PaddedMutex ,  ClassLoaderDataGraph_lock, false, _safepoint_check_always);\n-  defl(SystemDictionary_lock       , PaddedMonitor, Module_lock,               true, _safepoint_check_always);\n+  defl(CompileTaskAlloc_lock       , PaddedMutex ,  MethodCompileQueue_lock,   true);\n+  defl(ExpandHeap_lock             , PaddedMutex ,  Heap_lock,                 true);\n+  defl(OopMapCacheAlloc_lock       , PaddedMutex ,  Threads_lock,              true);\n+  defl(Module_lock                 , PaddedMutex ,  ClassLoaderDataGraph_lock, false);\n+  defl(SystemDictionary_lock       , PaddedMonitor, Module_lock,               true);\n@@ -371,1 +370,1 @@\n-  defl(JfrMsg_lock                 , PaddedMonitor, Module_lock,               true,  _safepoint_check_always);\n+  defl(JfrMsg_lock                 , PaddedMonitor, Module_lock,               true);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":105,"deletions":106,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    _lock(Mutex::stackwatermark, \"StackWatermark_lock\", Mutex::_safepoint_check_never),\n+    _lock(Mutex::stackwatermark, \"StackWatermark_lock\"),\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  Monitor timer(Mutex::nosafepoint, \"VM_ExitTimer_lock\", Monitor::_safepoint_check_never);\n+  Monitor timer(Mutex::nosafepoint, \"VM_ExitTimer_lock\");\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,2 +131,1 @@\n-  _terminate_lock = new Monitor(Mutex::nosafepoint, \"VMThreadTerminate_lock\",\n-                                Monitor::_safepoint_check_never);\n+  _terminate_lock = new Monitor(Mutex::nosafepoint, \"VMThreadTerminate_lock\");\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-    _lock = new (std::nothrow) PaddedMonitor(Mutex::nonleaf, \"ParallelHProfWriter_lock\", Mutex::_safepoint_check_always);\n+    _lock = new (std::nothrow) PaddedMonitor(Mutex::safepoint, \"ParallelHProfWriter_lock\");\n@@ -1817,2 +1817,1 @@\n-     _lock(new (std::nothrow) PaddedMonitor(Mutex::nonleaf, \"DumperController_lock\",\n-    Mutex::_safepoint_check_always)),\n+     _lock(new (std::nothrow) PaddedMonitor(Mutex::safepoint, \"DumperController_lock\")),\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -203,2 +203,1 @@\n-  _lock(new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, \"HProfCompressionBackend_lock\",\n-    Mutex::_safepoint_check_never)) {\n+  _lock(new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, \"HProfCompressionBackend_lock\")) {\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -177,2 +177,1 @@\n-  _last_gc_lock = new Mutex(Mutex::nosafepoint, \"GCMemoryManager_lock\",\n-                            Mutex::_safepoint_check_never);\n+  _last_gc_lock = new Mutex(Mutex::nosafepoint, \"GCMemoryManager_lock\");\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1017,2 +1017,1 @@\n-    new Mutex(Mutex::nosafepoint-2, \"ConcurrentHashTableResize_lock\",\n-              Mutex::_safepoint_check_never);\n+    new Mutex(Mutex::nosafepoint-2, \"ConcurrentHashTableResize_lock\");\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    _mutex(Mutex::event, name, Mutex::_safepoint_check_never),\n+    _mutex(Mutex::event, name),\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    _lock = new Mutex(Monitor::nosafepoint, \"gtest-IsMetaspaceObjTest_lock\", Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::nosafepoint, \"gtest-IsMetaspaceObjTest_lock\");\n","filename":"test\/hotspot\/gtest\/metaspace\/test_is_metaspace_obj.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    _lock = new Mutex(Monitor::nosafepoint, \"gtest-MetaspaceArenaTest_lock\", Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::nosafepoint, \"gtest-MetaspaceArenaTest_lock\");\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-    _lock = new Mutex(Monitor::nosafepoint, \"gtest-MetaspaceArenaTestBed_lock\", Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::nosafepoint, \"gtest-MetaspaceArenaTestBed_lock\");\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena_stress.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  m[i] = new Mutex(Mutex::nosafepoint, FormatBuffer<128>(\"MyLock#%u_lock\", i), Mutex::_safepoint_check_never);\n+  m[i] = new Mutex(Mutex::nosafepoint, FormatBuffer<128>(\"MyLock#%u_lock\", i));\n@@ -56,3 +56,3 @@\n-const int rankA = Mutex::nonleaf-5;\n-const int rankAplusOne = Mutex::nonleaf-4;\n-const int rankAplusTwo = Mutex::nonleaf-3;\n+const Mutex::Rank rankA = Mutex::safepoint-5;\n+const Mutex::Rank rankAplusOne = Mutex::safepoint-4;\n+const Mutex::Rank rankAplusTwo = Mutex::safepoint-3;\n@@ -64,2 +64,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\");\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\");\n@@ -74,1 +74,1 @@\n-                   \".* Attempting to acquire lock mutex_rankA_plus_one\/.* out of order with lock mutex_rankA\/.* -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankA_plus_one\/safepoint-4 out of order with lock mutex_rankA\/safepoint-5 -- possible deadlock\") {\n@@ -78,2 +78,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\");\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\");\n@@ -92,2 +92,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankB = new Mutex(rankA, \"mutex_rankB\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\");\n+  Mutex* mutex_rankB = new Mutex(rankA, \"mutex_rankB\");\n@@ -105,3 +105,3 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_two = new Mutex(rankAplusTwo, \"mutex_rankA_plus_two\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\");\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\");\n+  Mutex* mutex_rankA_plus_two = new Mutex(rankAplusTwo, \"mutex_rankA_plus_two\");\n@@ -122,2 +122,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\");\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\");\n@@ -134,1 +134,1 @@\n-                   \".* Attempting to acquire lock mutex_rank_nosafepoint\/.* out of order with lock mutex_rank_event\/0 \"\n+                   \".* Attempting to acquire lock mutex_rank_nosafepoint\/nosafepoint out of order with lock mutex_rank_event\/event \"\n@@ -139,2 +139,2 @@\n-  Mutex* mutex_rank_event = new Mutex(Mutex::event, \"mutex_rank_event\", Mutex::_safepoint_check_never);\n-  Mutex* mutex_rank_nonleaf = new Mutex(Mutex::nosafepoint, \"mutex_rank_nosafepoint\", Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_event = new Mutex(Mutex::event, \"mutex_rank_event\");\n+  Mutex* mutex_rank_safepoint = new Mutex(Mutex::nosafepoint, \"mutex_rank_nosafepoint\");\n@@ -143,2 +143,2 @@\n-  mutex_rank_nonleaf->lock_without_safepoint_check();\n-  mutex_rank_nonleaf->unlock();\n+  mutex_rank_safepoint->lock_without_safepoint_check();\n+  mutex_rank_safepoint->unlock();\n@@ -149,1 +149,1 @@\n-                   \".* Attempting to acquire lock mutex_rank_nosafepoint\/.* out of order with lock mutex_rank_tty\/.*\"\n+                   \".* Attempting to acquire lock mutex_rank_nosafepoint\/nosafepoint out of order with lock mutex_rank_tty\/tty \"\n@@ -154,2 +154,2 @@\n-  Mutex* mutex_rank_tty = new Mutex(Mutex::tty, \"mutex_rank_tty\", Mutex::_safepoint_check_never);\n-  Mutex* mutex_rank_nosafepoint = new Mutex(Mutex::nosafepoint, \"mutex_rank_nosafepoint\", Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_tty = new Mutex(Mutex::tty, \"mutex_rank_tty\");\n+  Mutex* mutex_rank_nosafepoint = new Mutex(Mutex::nosafepoint, \"mutex_rank_nosafepoint\");\n@@ -167,2 +167,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\");\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\");\n@@ -183,2 +183,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\");\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\");\n@@ -199,2 +199,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\");\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\");\n@@ -215,2 +215,3 @@\n-  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\", Mutex::_safepoint_check_never);\n-  Monitor* monitor_rank_nosafepoint_minus_one = new Monitor(Mutex::nosafepoint - 1, \"monitor_rank_nosafepoint_minus_one\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\");\n+  Monitor* monitor_rank_nosafepoint_minus_one = new Monitor(Mutex::nosafepoint - 1,\n+                                                            \"monitor_rank_nosafepoint_minus_one\");\n@@ -229,2 +230,2 @@\n-    Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", Mutex::_safepoint_check_never);\n-    Monitor* monitor_rank_event = new Monitor(Mutex::event, \"monitor_rank_event\", Mutex::_safepoint_check_never);\n+    Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\");\n+    Monitor* monitor_rank_event = new Monitor(Mutex::event, \"monitor_rank_event\");\n@@ -241,1 +242,1 @@\n-                   \".* Attempting to wait on monitor monitor_rank_event\/0 while holding lock monitor_rank_tty\/.*\"\n+                   \".* Attempting to wait on monitor monitor_rank_event\/event while holding lock monitor_rank_tty\/tty \"\n@@ -249,1 +250,1 @@\n-                   \".* Attempting to wait on monitor monitor_rank_tty\/.* while holding lock monitor_rank_nosafepoint\/.*\"\n+                   \".* Attempting to wait on monitor monitor_rank_tty\/.* while holding lock monitor_rank_nosafepoint\/.* \"\n@@ -254,2 +255,2 @@\n-  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\", Mutex::_safepoint_check_never);\n-  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\");\n+  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\");\n@@ -265,1 +266,1 @@\n-                   \".*Safepoint check never locks should always allow the vm to block\") {\n+                   \".*Locks that don't check for safepoint should always allow the vm to block: monitor_rank_nosafepoint\") {\n@@ -269,1 +270,1 @@\n-  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\", Mutex::_safepoint_check_never, false);\n+  Monitor* monitor_rank_nosafepoint = new Monitor(Mutex::nosafepoint, \"monitor_rank_nosafepoint\", false);\n@@ -279,1 +280,1 @@\n-  Monitor* monitor_rank_broken = new Monitor(Mutex::event-1, \"monitor_rank_broken\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_broken = new Monitor(Mutex::safepoint-100, \"monitor_rank_broken\");\n@@ -284,2 +285,2 @@\n-TEST_VM_ASSERT_MSG(MutexRank, monitor_nosafepoint_rank,\n-                   \".*failed: Locks above nosafepoint rank should safepoint: monitor_rank_nonleaf\") {\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_overlapping_oopstorage_rank,\n+                   \".*Rank oopstorage-4 overlaps with tty-1\") {\n@@ -289,3 +290,43 @@\n-  Monitor* monitor_rank_nonleaf = new Monitor(Mutex::nonleaf, \"monitor_rank_nonleaf\", Mutex::_safepoint_check_never);\n-  monitor_rank_nonleaf->lock_without_safepoint_check();\n-  monitor_rank_nonleaf->unlock();\n+  Monitor* monitor_rank_broken = new Monitor(Mutex::oopstorage-4, \"monitor_rank_broken\");\n+}\n+\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_overlapping_safepoint_rank,\n+                   \".*Rank safepoint-40 overlaps with service-5\") {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+\n+  Monitor* monitor_rank_broken = new Monitor(Mutex::safepoint-40, \"monitor_rank_broken\");\n+}\n+\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_overlapping_safepoint_rank2,\n+                   \".*Rank safepoint-1-39 overlaps with service-5\") {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+\n+  Monitor* monitor_rank_ok = new Monitor(Mutex::safepoint-1, \"monitor_rank_ok\");\n+  Monitor* monitor_rank_broken = new Monitor(monitor_rank_ok->rank()-39, \"monitor_rank_broken\");\n+}\n+\n+\/\/ Test mismatched safepoint check flag on lock declaration vs. lock acquisition.\n+TEST_VM_ASSERT_MSG(MutexSafepoint, always_check,\n+    \".*This lock should always have a safepoint check for Java threads: SFPT_Test_lock\") {\n+  MutexLocker ml(new Mutex(Mutex::safepoint, \"SFPT_Test_lock\"),\n+                 Mutex::_no_safepoint_check_flag);\n+}\n+\n+TEST_VM_ASSERT_MSG(MutexSafepoint, never_check,\n+    \".*This lock should not be taken with a safepoint check: SFPT_Test_lock\") {\n+  MutexLocker ml(new Mutex(Mutex::nosafepoint, \"SFPT_Test_lock\"),\n+                 Mutex::_safepoint_check_flag);\n+}\n+\n+TEST_VM_ASSERT_MSG(MutexSafepoint, possible_safepoint_lock,\n+    \".* Possible safepoint reached by thread that does not allow it\") {\n+  JavaThread* thread = JavaThread::current();\n+  ThreadInVMfromNative in_native(thread);\n+  MutexLocker ml(new Mutex(Mutex::nosafepoint, \"SpecialTest_lock\"),\n+                   Mutex::_no_safepoint_check_flag);\n+  thread->print_thread_state_on(tty);\n+  \/\/ If the lock above succeeds, try to safepoint to test the NSV implied with this nosafepoint lock.\n+  ThreadBlockInVM tbivm(thread);\n+  thread->print_thread_state_on(tty);\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":87,"deletions":46,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/mutex.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"unittest.hpp\"\n-\n-#ifdef ASSERT\n-\n-\/\/ Test mismatched safepoint check flag on lock declaration vs. lock acquisition.\n-TEST_VM_ASSERT_MSG(SafepointLockAssertTest, always_check,\n-    \".*This lock should always have a safepoint check for Java threads: SFPT_Test_lock\") {\n-  MutexLocker ml(new Mutex(Mutex::nonleaf, \"SFPT_Test_lock\", Mutex::_safepoint_check_always),\n-                 Mutex::_no_safepoint_check_flag);\n-}\n-\n-TEST_VM_ASSERT_MSG(SafepointLockAssertTest, never_check,\n-    \".*This lock should never have a safepoint check for Java threads: SFPT_Test_lock\") {\n-  MutexLocker ml(new Mutex(Mutex::nosafepoint, \"SFPT_Test_lock\", Mutex::_safepoint_check_never),\n-                 Mutex::_safepoint_check_flag);\n-}\n-\n-TEST_VM_ASSERT_MSG(SafepointLockAssertTest, nosafepoint_locks,\n-    \".*Locks below nosafepoint rank should never safepoint: SpecialTest_lock\") {\n-  MutexLocker ml(new Mutex(Mutex::nosafepoint, \"SpecialTest_lock\", Mutex::_safepoint_check_always),\n-                 Mutex::_safepoint_check_flag);\n-}\n-\n-TEST_VM_ASSERT_MSG(SafepointLockAssertTest, possible_safepoint_lock,\n-    \".* Possible safepoint reached by thread that does not allow it\") {\n-  JavaThread* thread = JavaThread::current();\n-  ThreadInVMfromNative in_native(thread);\n-  MutexLocker ml(new Mutex(Mutex::nosafepoint, \"SpecialTest_lock\", Mutex::_safepoint_check_never),\n-                   Mutex::_no_safepoint_check_flag);\n-  thread->print_thread_state_on(tty);\n-  \/\/ If the lock above succeeds, try to safepoint to test the NSV implied with this nosafepoint lock.\n-  ThreadBlockInVM tbivm(thread);\n-  thread->print_thread_state_on(tty);\n-}\n-\n-#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/runtime\/test_safepoint_locks.cpp","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -199,1 +199,1 @@\n-  Mutex lock(Mutex::nosafepoint, \"Test_lock\", Mutex::_safepoint_check_never);\n+  Mutex lock(Mutex::nosafepoint, \"Test_lock\");\n","filename":"test\/hotspot\/gtest\/utilities\/test_filterQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}