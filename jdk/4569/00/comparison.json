{"files":[{"patch":"@@ -119,1 +119,1 @@\n-                                thread->get_thread_name(), frame.sp(), nm->verified_entry_point());\n+                                thread->name(), frame.sp(), nm->verified_entry_point());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,1 @@\n-                               jth->get_thread_name(), callers_rsp, nm->verified_entry_point());\n+                               jth->name(), callers_rsp, nm->verified_entry_point());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1011,1 +1011,1 @@\n-        ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+        ThreadsListHandle tlh;  \/\/ name() depends on the TLH.\n@@ -1013,1 +1013,1 @@\n-        tty->print_cr(\"Added initial compiler thread %s\", ct->get_thread_name());\n+        tty->print_cr(\"Added initial compiler thread %s\", ct->name());\n@@ -1032,1 +1032,1 @@\n-        ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+        ThreadsListHandle tlh;  \/\/ name() depends on the TLH.\n@@ -1034,1 +1034,1 @@\n-        tty->print_cr(\"Added initial compiler thread %s\", ct->get_thread_name());\n+        tty->print_cr(\"Added initial compiler thread %s\", ct->name());\n@@ -1119,1 +1119,1 @@\n-        ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+        ThreadsListHandle tlh;  \/\/ name() depends on the TLH.\n@@ -1122,1 +1122,1 @@\n-                      ct->get_thread_name(), (int)(available_memory\/M), (int)(available_cc_np\/M));\n+                      ct->name(), (int)(available_memory\/M), (int)(available_cc_np\/M));\n@@ -1140,1 +1140,1 @@\n-        ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+        ThreadsListHandle tlh;  \/\/ name() depends on the TLH.\n@@ -1143,1 +1143,1 @@\n-                      ct->get_thread_name(), (int)(available_memory\/M), (int)(available_cc_p\/M));\n+                      ct->name(), (int)(available_memory\/M), (int)(available_cc_p\/M));\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+\n+  \/\/ Printing\n+  const char* type_name() const { return \"ConcurrentGCThread\"; }\n","filename":"src\/hotspot\/share\/gc\/shared\/concurrentGCThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -222,0 +222,3 @@\n+\n+  \/\/ Printing\n+  const char* type_name() const override { return \"GCTaskThread\"; }\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  char* name() const { return (char*)\"ShenandoahControlThread\";}\n+  const char* name() const { return \"ShenandoahControlThread\";}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,1 +346,2 @@\n-  virtual char* name() const { return (char*)\"JFR Thread Sampler\"; }\n+  virtual const char* name() const { return \"JFR Thread Sampler\"; }\n+  virtual const char* type_name() const { return \"JfrThreadSampler\"; }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2282,1 +2282,1 @@\n-    attach_args.name = thread->name();\n+    attach_args.name = const_cast<char*>(thread->name());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-      attach_args.name = thread->name();\n+      attach_args.name = const_cast<char*>(thread->name());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,1 +163,2 @@\n-  char* name() const override { return (char*)\"AsyncLog Thread\"; }\n+  const char* name() const override { return \"AsyncLog Thread\"; }\n+  const char* type_name() const override { return \"AsyncLogWriter\"; }\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-        \"in thread \\\"%s\\\" \", thread->get_thread_name());\n+        \"in thread \\\"%s\\\" \", thread->name());\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,4 @@\n-\/\/ Name support for threads.  non-JavaThread subclasses with multiple\n-\/\/ uniquely named instances should derive from this.\n+\/\/ A base class for non-JavaThread subclasses with multiple\n+\/\/ uniquely named instances. NamedThreads also provide a common\n+\/\/ location to store GC information needed by GC threads\n+\/\/ and the VMThread.\n@@ -92,1 +94,2 @@\n-  virtual char* name() const { return _name == NULL ? (char*)\"Unknown Thread\" : _name; }\n+  virtual const char* name() const { return _name == NULL ? \"Unknown Thread\" : _name; }\n+  virtual const char* type_name() const { return \"NamedThread\"; }\n@@ -120,0 +123,4 @@\n+\n+  \/\/ Printing\n+  virtual const char* type_name() const { return \"WorkerThread\"; }\n+\n@@ -135,0 +142,1 @@\n+\n@@ -151,1 +159,2 @@\n-  char* name() const { return (char*)\"VM Periodic Task Thread\"; }\n+  const char* name() const { return \"VM Periodic Task Thread\"; }\n+  const char* type_name() const { return \"WatcherThread\"; }\n","filename":"src\/hotspot\/share\/runtime\/nonJavaThread.hpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-      const char* name = (javathread)->get_thread_name();                  \\\n+      const char* name = (javathread)->name();                             \\\n@@ -645,11 +645,1 @@\n-  if (is_VM_thread())                 { st->print(\"VMThread\"); }\n-  else if (is_GC_task_thread())       { st->print(\"GCTaskThread\"); }\n-  else if (is_Watcher_thread())       { st->print(\"WatcherThread\"); }\n-  else if (is_ConcurrentGC_thread())  { st->print(\"ConcurrentGCThread\"); }\n-  else if (this == AsyncLogWriter::instance()) {\n-    st->print(\"%s\", this->name());\n-  } else                                { st->print(\"Thread\"); }\n-\n-  if (is_Named_thread()) {\n-    st->print(\" \\\"%s\\\"\", name());\n-  }\n+  st->print(\"%s \\\"%s\\\"\", type_name(), name());\n@@ -1309,1 +1299,1 @@\n-      this->set_native_thread_name(this->get_thread_name());\n+      this->set_native_thread_name(this->name());\n@@ -1388,1 +1378,1 @@\n-                    get_thread_name());\n+                    name());\n@@ -1493,1 +1483,1 @@\n-    thread_name = os::strdup(get_thread_name());\n+    thread_name = os::strdup(name());\n@@ -2090,1 +2080,1 @@\n-  st->print_raw(get_thread_name());\n+  st->print_raw(name());\n@@ -2128,1 +2118,1 @@\n-  st->print(\"JavaThread \\\"%s\\\"\", get_thread_name_string(buf, buflen));\n+  st->print(\"%s \\\"%s\\\"\", type_name(), get_thread_name_string(buf, buflen));\n@@ -2176,1 +2166,1 @@\n-const char* JavaThread::get_thread_name() const {\n+const char* JavaThread::name() const  {\n@@ -2202,1 +2192,1 @@\n-      name_str = Thread::name();\n+      name_str = \"<un-named>\";\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -358,1 +358,9 @@\n-  virtual char* name() const { return (char*)\"Unknown thread\"; }\n+  \/\/ All threads are given names. For singleton subclasses we can\n+  \/\/ just hard-wire the known name of the instance. JavaThreads and\n+  \/\/ NamedThreads support multiple named instances, and dynamic\n+  \/\/ changing of the name of an instance.\n+  virtual const char* name() const { return \"Unknown thread\"; }\n+\n+  \/\/ A thread's type name is also made available for debugging\n+  \/\/ and logging.\n+  virtual const char* type_name() const { return \"Thread\"; }\n@@ -574,0 +582,1 @@\n+  \/\/ Basic, non-virtual, printing support that is simple and always safe.\n@@ -1353,0 +1362,3 @@\n+  \/\/ factor out low-level mechanics for use in both normal and error cases\n+  const char* get_thread_name_string(char* buf = NULL, int buflen = 0) const;\n+\n@@ -1372,1 +1384,3 @@\n-  char* name() const { return (char*)get_thread_name(); }\n+  const char* name() const;\n+  const char* type_name() const { return \"JavaThread\"; }\n+\n@@ -1380,5 +1394,1 @@\n-  const char* get_thread_name() const;\n- protected:\n-  \/\/ factor out low-level mechanics for use in both normal and error cases\n-  virtual const char* get_thread_name_string(char* buf = NULL, int buflen = 0) const;\n- public:\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -133,0 +133,3 @@\n+  \/\/ Printing\n+  const char* type_name() const { return \"VMThread\"; }\n+\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-    st->print_cr(\"\\\"%s\\\":\", currentThread->get_thread_name());\n+    st->print_cr(\"\\\"%s\\\":\", currentThread->name());\n@@ -990,1 +990,1 @@\n-          st->print_cr(\"%s \\\"%s\\\"\", owner_desc, currentThread->get_thread_name());\n+          st->print_cr(\"%s \\\"%s\\\"\", owner_desc, currentThread->name());\n@@ -1029,1 +1029,1 @@\n-    st->print_cr(\"%s \\\"%s\\\"\", owner_desc, currentThread->get_thread_name());\n+    st->print_cr(\"%s \\\"%s\\\"\", owner_desc, currentThread->name());\n@@ -1041,1 +1041,1 @@\n-    st->print_cr(\"\\\"%s\\\":\", currentThread->get_thread_name());\n+    st->print_cr(\"\\\"%s\\\":\", currentThread->name());\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}