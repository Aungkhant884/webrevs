{"files":[{"patch":"@@ -1272,1 +1272,4 @@\n-JRT_ENTRY(void, InterpreterRuntime::post_method_exit(JavaThread *thread))\n+\/\/ This is a JRT_BLOCK_ENTRY because we have to stash away the return oop\n+\/\/ before transitioning to VM, and restore it after transitioning back\n+\/\/ to Java. The return oop at the top-of-stack, is not walked by the GC.\n+JRT_BLOCK_ENTRY(void, InterpreterRuntime::post_method_exit(JavaThread *thread))\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1563,1 +1563,1 @@\n-void JvmtiExport::post_method_exit(JavaThread *thread, Method* method, frame current_frame) {\n+void JvmtiExport::post_method_exit(JavaThread* thread, Method* method, frame current_frame) {\n@@ -1581,1 +1581,3 @@\n-\n+  Handle result;\n+  jvalue value;\n+  value.j = 0L;\n@@ -1584,4 +1586,0 @@\n-    Handle result;\n-    jvalue value;\n-    value.j = 0L;\n-\n@@ -1599,0 +1597,12 @@\n+  }\n+\n+  if (exception_exit) {\n+    post_method_exit_inner(thread, mh, state, exception_exit, current_frame, result, value);\n+  } else {\n+    \/\/ Deferred transition to VM, so we can stash away the return oop before GC\n+    \/\/ Note that this transition is not needed when throwing an exception, because\n+    \/\/ there is no oop to retain.\n+    JRT_BLOCK\n+      post_method_exit_inner(thread, mh, state, exception_exit, current_frame, result, value);\n+    JRT_BLOCK_END\n+  }\n@@ -1600,0 +1610,14 @@\n+  if (result.not_null() && !mh->is_native()) {\n+    \/\/ We have to restore the oop on the stack for interpreter frames\n+    *(oop*)current_frame.interpreter_frame_tos_address() = result();\n+  }\n+}\n+\n+void JvmtiExport::post_method_exit_inner(JavaThread* thread,\n+                                         methodHandle& mh,\n+                                         JvmtiThreadState *state,\n+                                         bool exception_exit,\n+                                         frame& current_frame,\n+                                         Handle& result,\n+                                         jvalue& value) {\n+  if (state->is_enabled(JVMTI_EVENT_METHOD_EXIT)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -196,0 +196,8 @@\n+  static void post_method_exit_inner(JavaThread* thread,\n+                                     methodHandle& mh,\n+                                     JvmtiThreadState *state,\n+                                     bool exception_exit,\n+                                     frame& current_frame,\n+                                     Handle& result,\n+                                     jvalue& value);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}