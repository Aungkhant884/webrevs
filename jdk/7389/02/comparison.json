{"files":[{"patch":"@@ -104,16 +104,31 @@\n-  int total()                                    { return total_size; }\n-  bool is_empty()                                { return count == 0; }\n-\n-  void print(const char* title) {\n-    tty->print_cr(\" #%d %s = %dK (hdr %d%%,  loc %d%%, code %d%%, stub %d%%, [oops %d%%, metadata %d%%, data %d%%, pcs %d%%])\",\n-                  count,\n-                  title,\n-                  (int)(total() \/ K),\n-                  header_size             * 100 \/ total_size,\n-                  relocation_size         * 100 \/ total_size,\n-                  code_size               * 100 \/ total_size,\n-                  stub_size               * 100 \/ total_size,\n-                  scopes_oop_size         * 100 \/ total_size,\n-                  scopes_metadata_size    * 100 \/ total_size,\n-                  scopes_data_size        * 100 \/ total_size,\n-                  scopes_pcs_size         * 100 \/ total_size);\n+  int total() const                              { return total_size; }\n+  bool is_empty() const                          { return count == 0; }\n+\n+  void print(const char* title) const {\n+    if (is_empty()) {\n+      tty->print_cr(\" #%d %s = %dK\",\n+                    count,\n+                    title,\n+                    total()                 \/ (int)K);\n+    } else {\n+      tty->print_cr(\" #%d %s = %dK (hdr %dK %d%%, loc %dK %d%%, code %dK %d%%, stub %dK %d%%, [oops %dK %d%%, metadata %dK %d%%, data %dK %d%%, pcs %dK %d%%])\",\n+                    count,\n+                    title,\n+                    total()                 \/ (int)K,\n+                    header_size             \/ (int)K,\n+                    header_size             * 100 \/ total_size,\n+                    relocation_size         \/ (int)K,\n+                    relocation_size         * 100 \/ total_size,\n+                    code_size               \/ (int)K,\n+                    code_size               * 100 \/ total_size,\n+                    stub_size               \/ (int)K,\n+                    stub_size               * 100 \/ total_size,\n+                    scopes_oop_size         \/ (int)K,\n+                    scopes_oop_size         * 100 \/ total_size,\n+                    scopes_metadata_size    \/ (int)K,\n+                    scopes_metadata_size    * 100 \/ total_size,\n+                    scopes_data_size        \/ (int)K,\n+                    scopes_data_size        * 100 \/ total_size,\n+                    scopes_pcs_size         \/ (int)K,\n+                    scopes_pcs_size         * 100 \/ total_size);\n+    }\n@@ -1433,2 +1448,8 @@\n-  CodeBlob_sizes live;\n-  CodeBlob_sizes dead;\n+  CodeBlob_sizes live[CompLevel_full_optimization + 1];\n+  CodeBlob_sizes dead[CompLevel_full_optimization + 1];\n+  CodeBlob_sizes runtimeStub;\n+  CodeBlob_sizes uncommonTrapStub;\n+  CodeBlob_sizes deoptimizationStub;\n+  CodeBlob_sizes adapter;\n+  CodeBlob_sizes bufferBlob;\n+  CodeBlob_sizes other;\n@@ -1438,2 +1459,18 @@\n-      if (!cb->is_alive()) {\n-        dead.add(cb);\n+      if (cb->is_nmethod()) {\n+        const int level = cb->as_nmethod()->comp_level();\n+        assert(0 <= level && level <= CompLevel_full_optimization, \"Invalid compilation level\");\n+        if (!cb->is_alive()) {\n+          dead[level].add(cb);\n+        } else {\n+          live[level].add(cb);\n+        }\n+      } else if (cb->is_runtime_stub()) {\n+        runtimeStub.add(cb);\n+      } else if (cb->is_deoptimization_stub()) {\n+        deoptimizationStub.add(cb);\n+      } else if (cb->is_uncommon_trap_stub()) {\n+        uncommonTrapStub.add(cb);\n+      } else if (cb->is_adapter_blob()) {\n+        adapter.add(cb);\n+      } else if (cb->is_buffer_blob()) {\n+        bufferBlob.add(cb);\n@@ -1441,1 +1478,1 @@\n-        live.add(cb);\n+        other.add(cb);\n@@ -1446,1 +1483,0 @@\n-  tty->print_cr(\"CodeCache:\");\n@@ -1448,6 +1484,29 @@\n-\n-  if (!live.is_empty()) {\n-    live.print(\"live\");\n-  }\n-  if (!dead.is_empty()) {\n-    dead.print(\"dead\");\n+  for (int i = 0; i <= CompLevel_full_optimization; i++) {\n+    const char *level_name;\n+    switch (i) {\n+    case CompLevel_none: level_name = \"CompLevel_none\"; break;\n+    case CompLevel_simple: level_name = \"CompLevel_simple\"; break;\n+    case CompLevel_limited_profile: level_name = \"CompLevel_limited_profile\"; break;\n+    case CompLevel_full_profile: level_name = \"CompLevel_full_profile\"; break;\n+    case CompLevel_full_optimization: level_name = \"CompLevel_full_optimization\"; break;\n+    default: assert(false, \"invalid compLevel\");\n+    }\n+    tty->print_cr(\"%s:\", level_name);\n+    live[i].print(\"live\");\n+    dead[i].print(\"dead\");\n+  }\n+\n+  struct {\n+    const char* name;\n+    const CodeBlob_sizes* sizes;\n+  } non_nmethod_blobs[] = {\n+    { \"runtime\",        &runtimeStub },\n+    { \"uncommon trap\",  &uncommonTrapStub },\n+    { \"deoptimization\", &deoptimizationStub },\n+    { \"adapter\",        &adapter },\n+    { \"buffer blob\",    &bufferBlob },\n+    { \"other\",          &other },\n+  };\n+  tty->print_cr(\"Non-nmethod blobs:\");\n+  for (auto& blob: non_nmethod_blobs) {\n+    blob.sizes->print(blob.name);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":87,"deletions":28,"binary":false,"changes":115,"status":"modified"}]}