{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test CheckCodeCacheInfo\n+ * @summary Checks VM verbose information related to the code cache\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ *\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   compiler.codecache.CheckCodeCacheInfo\n+ *\/\n+\n+package compiler.codecache;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class CheckCodeCacheInfo {\n+    private static final String VERBOSE_REGEXP;\n+\n+    static {\n+        String entry = \"\\\\d+K( \\\\(hdr \\\\d+K \\\\d+%, loc \\\\d+K \\\\d+%, code \\\\d+K \\\\d+%, stub \\\\d+K \\\\d+%, \\\\[oops \\\\d+K \\\\d+%, metadata \\\\d+K \\\\d+%, data \\\\d+K \\\\d+%, pcs \\\\d+K \\\\d+%\\\\]\\\\))?\\\\n\";\n+        String pair = \" #\\\\d+ live = \" + entry\n+                    + \" #\\\\d+ dead = \" + entry;\n+\n+        VERBOSE_REGEXP = \"nmethod blobs per compilation level:\\\\n\"\n+                       + \"none:\\\\n\"\n+                       + pair\n+                       + \"simple:\\\\n\"\n+                       + pair\n+                       + \"limited profile:\\\\n\"\n+                       + pair\n+                       + \"full profile:\\\\n\"\n+                       + pair\n+                       + \"full optimization:\\\\n\"\n+                       + pair\n+                       + \"Non-nmethod blobs:\\\\n\"\n+                       + \" #\\\\d+ runtime = \" + entry\n+                       + \" #\\\\d+ uncommon trap = \" + entry\n+                       + \" #\\\\d+ deoptimization = \" + entry\n+                       + \" #\\\\d+ adapter = \" + entry\n+                       + \" #\\\\d+ buffer blob = \" + entry\n+                       + \" #\\\\d+ other = \" + entry;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+PrintCodeCache\",\n+                                                   \"-XX:+Verbose\",\n+                                                   \"-version\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+        out.stdoutShouldMatch(VERBOSE_REGEXP);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CheckCodeCacheInfo.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}