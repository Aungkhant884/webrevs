{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyrig(c) 2015, 2021, Oracle and\/or its affiliates. All rig reserved.\n@@ -39,0 +39,7 @@\n+import jdk.internal.module.ModuleHashes;\n+import jdk.internal.module.ModuleInfo;\n+import jdk.internal.module.ModulePath;\n+import jdk.test.lib.compiler.ModuleInfoMaker;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n@@ -47,5 +54,1 @@\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.*;\n@@ -53,6 +56,2 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -63,10 +62,4 @@\n-import jdk.internal.module.ModuleInfo;\n-import jdk.internal.module.ModuleHashes;\n-import jdk.internal.module.ModulePath;\n-\n-import jdk.test.lib.compiler.ModuleInfoMaker;\n-\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.*;\n-import static java.lang.module.ModuleDescriptor.Requires.Modifier.*;\n+import static java.lang.module.ModuleDescriptor.Requires.Modifier.STATIC;\n+import static java.lang.module.ModuleDescriptor.Requires.Modifier.TRANSITIVE;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n@@ -84,4 +77,5 @@\n-    private final Path mods;\n-    private final Path srcDir;\n-    private final Path lib;\n-    private final ModuleInfoMaker builder;\n+    static final AtomicInteger counter = new AtomicInteger(0);\n+\n+    private Path mods;\n+    private Path lib;\n+    private ModuleInfoMaker builder;\n@@ -89,1 +83,3 @@\n-    HashesTest(Path dest) throws IOException {\n+    @BeforeMethod\n+    public void setTestPath() throws IOException {\n+        Path dest = Path.of(\"test\" + counter.addAndGet(1));\n@@ -94,1 +90,1 @@\n-        this.srcDir = dest.resolve(\"src\");\n+        Path srcDir = dest.resolve(\"src\");\n@@ -103,4 +99,1 @@\n-    public static void test() throws IOException {\n-        Path dest = Paths.get(\"test\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void test() throws IOException {\n@@ -108,3 +101,3 @@\n-        ht.makeModule(\"m2\");\n-        ht.makeModule(\"m3\");\n-        ht.makeModule(\"m1\", \"m2\", \"m3\");\n+        makeModule(\"m2\");\n+        makeModule(\"m3\");\n+        makeModule(\"m1\", \"m2\", \"m3\");\n@@ -112,2 +105,2 @@\n-        ht.makeModule(\"org.bar\", TRANSITIVE, \"m1\");\n-        ht.makeModule(\"org.foo\", TRANSITIVE, \"org.bar\");\n+        makeModule(\"org.bar\", TRANSITIVE, \"m1\");\n+        makeModule(\"org.foo\", TRANSITIVE, \"org.bar\");\n@@ -116,2 +109,2 @@\n-        ht.makeJmod(\"m2\");\n-        ht.makeJmod(\"m3\");\n+        makeJmod(\"m2\");\n+        makeJmod(\"m3\");\n@@ -120,1 +113,1 @@\n-        ht.jmodHashModules(\"m1\", \".*\");\n+        jmodHashModules(\"m1\", \".*\");\n@@ -123,3 +116,3 @@\n-        assertTrue(ht.hashes(\"m1\") == null);\n-        assertTrue(ht.hashes(\"m2\") == null);\n-        assertTrue(ht.hashes(\"m3\") == null);\n+        assertNull(hashes(\"m1\"));\n+        assertNull(hashes(\"m2\"));\n+        assertNull(hashes(\"m3\"));\n@@ -128,2 +121,2 @@\n-        ht.jmodHashModules(\"m2\",  \"m1\");\n-        ht.checkHashes(\"m2\", Set.of(\"m1\"));\n+        jmodHashModules(\"m2\",  \"m1\");\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n@@ -132,2 +125,2 @@\n-        ht.jmodHashModules(\"m2\",  \".*\");\n-        ht.checkHashes(\"m2\", Set.of(\"m1\"));\n+        jmodHashModules(\"m2\",  \".*\");\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n@@ -136,1 +129,1 @@\n-        ht.makeJmod(\"m2\");\n+        makeJmod(\"m2\");\n@@ -138,1 +131,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -140,2 +133,2 @@\n-        ht.checkHashes(\"m2\", Set.of(\"m1\"));\n-        ht.checkHashes(\"m3\", Set.of(\"m1\"));\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n+        checkHashes(\"m3\", Set.of(\"m1\"));\n@@ -144,2 +137,2 @@\n-        ht.makeJmod(\"org.bar\");\n-        ht.makeJmod(\"org.foo\");\n+        makeJmod(\"org.bar\");\n+        makeJmod(\"org.foo\");\n@@ -147,2 +140,2 @@\n-        ht.jmodHashModules(\"org.bar\", \"org.*\");\n-        ht.checkHashes(\"org.bar\", Set.of(\"org.foo\"));\n+        jmodHashModules(\"org.bar\", \"org.*\");\n+        checkHashes(\"org.bar\", Set.of(\"org.foo\"));\n@@ -150,2 +143,2 @@\n-        ht.jmodHashModules( \"m3\", \".*\");\n-        ht.checkHashes(\"m3\", Set.of(\"org.foo\", \"org.bar\", \"m1\"));\n+        jmodHashModules( \"m3\", \".*\");\n+        checkHashes(\"m3\", Set.of(\"org.foo\", \"org.bar\", \"m1\"));\n@@ -155,4 +148,1 @@\n-    public static void multiBaseModules() throws IOException {\n-        Path dest = Paths.get(\"test2\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void multiBaseModules() throws IOException {\n@@ -170,3 +160,3 @@\n-        ht.makeModule(\"z1\");\n-        ht.makeModule(\"z2\", \"z1\");\n-        ht.makeModule(\"z3\", \"z1\", \"z2\");\n+        makeModule(\"z1\");\n+        makeModule(\"z2\", \"z1\");\n+        makeModule(\"z3\", \"z1\", \"z2\");\n@@ -174,2 +164,2 @@\n-        ht.makeModule(\"y1\");\n-        ht.makeModule(\"y2\", \"y1\", \"z2\", \"z3\");\n+        makeModule(\"y1\");\n+        makeModule(\"y2\", \"y1\", \"z2\", \"z3\");\n@@ -181,1 +171,1 @@\n-        Stream.concat(ys.stream(), zs.stream()).forEach(ht::makeJmod);\n+        Stream.concat(ys.stream(), zs.stream()).forEach(this::makeJmod);\n@@ -184,1 +174,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -190,2 +180,2 @@\n-        ht.checkHashes(\"y1\", Set.of(\"y2\"));\n-        ht.checkHashes(\"z1\", Set.of(\"z2\", \"z3\", \"y2\"));\n+        checkHashes(\"y1\", Set.of(\"y2\"));\n+        checkHashes(\"z1\", Set.of(\"z2\", \"z3\", \"y2\"));\n@@ -194,1 +184,1 @@\n-              .forEach(mn -> assertTrue(ht.hashes(mn) == null));\n+              .forEach(mn -> assertNull(hashes(mn)));\n@@ -198,4 +188,1 @@\n-    public static void mixJmodAndJarFile() throws IOException {\n-        Path dest = Paths.get(\"test3\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void mixJmodAndJarFile() throws IOException {\n@@ -213,5 +200,5 @@\n-        ht.makeModule(\"j1\");\n-        ht.makeModule(\"j2\");\n-        ht.makeModule(\"m1\", \"j1\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"m1\", \"m2\");\n+        makeModule(\"j1\");\n+        makeModule(\"j2\");\n+        makeModule(\"m1\", \"j1\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"m1\", \"m2\");\n@@ -219,1 +206,1 @@\n-        ht.makeModule(\"j3\", \"j2\", \"m2\", \"m3\");\n+        makeModule(\"j3\", \"j2\", \"m2\", \"m3\");\n@@ -225,2 +212,2 @@\n-        jars.forEach(ht::makeJar);\n-        jmods.forEach(ht::makeJmod);\n+        jars.forEach(this::makeJar);\n+        jmods.forEach(this::makeJmod);\n@@ -229,1 +216,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -235,2 +222,2 @@\n-        ht.checkHashes(\"j2\", Set.of(\"j3\"));\n-        ht.checkHashes(\"j1\", Set.of(\"m1\", \"m2\", \"m3\", \"j3\"));\n+        checkHashes(\"j2\", Set.of(\"j3\"));\n+        checkHashes(\"j1\", Set.of(\"m1\", \"m2\", \"m3\", \"j3\"));\n@@ -239,1 +226,1 @@\n-              .forEach(mn -> assertTrue(ht.hashes(mn) == null));\n+              .forEach(mn -> assertNull(hashes(mn)));\n@@ -243,1 +230,1 @@\n-    public static void upgradeableModule() throws IOException {\n+    public void upgradeableModule() throws IOException {\n@@ -249,5 +236,3 @@\n-        Path dest = Paths.get(\"test4\");\n-        HashesTest ht = new HashesTest(dest);\n-        ht.makeModule(\"m1\");\n-        ht.makeModule(\"java.compiler\", \"m1\");\n-        ht.makeModule(\"m2\", \"java.compiler\");\n+        makeModule(\"m1\");\n+        makeModule(\"java.compiler\", \"m1\");\n+        makeModule(\"m2\", \"java.compiler\");\n@@ -255,3 +240,3 @@\n-        ht.makeJmod(\"m1\");\n-        ht.makeJmod(\"m2\");\n-        ht.makeJmod(\"java.compiler\",\n+        makeJmod(\"m1\");\n+        makeJmod(\"m2\");\n+        makeJmod(\"java.compiler\",\n@@ -259,1 +244,1 @@\n-                    ht.lib.toString() + File.pathSeparator + mpath,\n+                    lib.toString() + File.pathSeparator + mpath,\n@@ -262,1 +247,1 @@\n-        ht.checkHashes(\"java.compiler\",  Set.of(\"m2\"));\n+        checkHashes(\"java.compiler\",  Set.of(\"m2\"));\n@@ -266,1 +251,1 @@\n-    public static void testImageJmods() throws IOException {\n+    public void testImageJmods() throws IOException {\n@@ -272,5 +257,3 @@\n-        Path dest = Paths.get(\"test5\");\n-        HashesTest ht = new HashesTest(dest);\n-        ht.makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"java.compiler\");\n+        makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"java.compiler\");\n@@ -278,2 +261,2 @@\n-        ht.makeJmod(\"m1\");\n-        ht.makeJmod(\"m2\");\n+        makeJmod(\"m1\");\n+        makeJmod(\"m2\");\n@@ -283,1 +266,1 @@\n-                        mpath.toString() + File.pathSeparator + ht.lib.toString(),\n+                        mpath.toString() + File.pathSeparator + lib.toString(),\n@@ -286,1 +269,1 @@\n-        validateImageJmodsTest(ht, mpath);\n+        validateImageJmodsTest(mpath);\n@@ -290,1 +273,1 @@\n-    public static void testImageJmods1() throws IOException {\n+    public void testImageJmods1() throws IOException {\n@@ -296,5 +279,3 @@\n-        Path dest = Paths.get(\"test6\");\n-        HashesTest ht = new HashesTest(dest);\n-        ht.makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"java.compiler\");\n+        makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"java.compiler\");\n@@ -302,2 +283,2 @@\n-        ht.makeJar(\"m2\");\n-        ht.makeJar(\"m1\",\n+        makeJar(\"m2\");\n+        makeJar(\"m1\",\n@@ -305,1 +286,1 @@\n-                    mpath.toString() + File.pathSeparator + ht.lib.toString(),\n+                    mpath.toString() + File.pathSeparator + lib.toString(),\n@@ -307,1 +288,1 @@\n-        validateImageJmodsTest(ht, mpath);\n+        validateImageJmodsTest(mpath);\n@@ -311,6 +292,5 @@\n-    public static void testReproducibibleHash() throws Exception {\n-        HashesTest ht = new HashesTest(Path.of(\"repro\"));\n-        ht.makeModule(\"m4\");\n-        ht.makeModule(\"m3\", \"m4\");\n-        ht.makeModule(\"m2\");\n-        ht.makeModule(\"m1\", \"m2\", \"m3\");\n+    public void testReproducibibleHash() throws Exception {\n+        makeModule(\"m4\");\n+        makeModule(\"m3\", \"m4\");\n+        makeModule(\"m2\");\n+        makeModule(\"m1\", \"m2\", \"m3\");\n@@ -319,2 +299,2 @@\n-        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(ht::makeJmod);\n-        Map<String, ModuleHashes> hashes1 = ht.runJmodHash();\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n+        Map<String, ModuleHashes> hashes1 = runJmodHash();\n@@ -326,2 +306,2 @@\n-        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(ht::makeJmod);\n-        Map<String, ModuleHashes> hashes2 = ht.runJmodHash();\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n+        Map<String, ModuleHashes> hashes2 = runJmodHash();\n@@ -334,4 +314,1 @@\n-    public static void testHashModulesPattern() throws IOException {\n-        Path dest = Paths.get(\"regex\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void testHashModulesPattern() throws IOException {\n@@ -339,5 +316,5 @@\n-        ht.makeModule(\"m1\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\");\n-        ht.makeModule(\"m4\", \"m1\", \"m3\");\n-        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(ht::makeJmod);\n+        makeModule(\"m1\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\");\n+        makeModule(\"m4\", \"m1\", \"m3\");\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n@@ -347,1 +324,1 @@\n-        Path jmod = ht.lib.resolve(\"m1.jmod\");\n+        Path jmod = lib.resolve(\"m1.jmod\");\n@@ -349,1 +326,1 @@\n-                \"--module-path\", ht.lib.toString(),\n+                \"--module-path\", lib.toString(),\n@@ -351,2 +328,2 @@\n-        assertEquals(ht.moduleHashes().keySet(), Set.of(\"m1\"));\n-        ht.checkHashes(\"m1\", Set.of(\"m2\"));\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\"));\n@@ -356,1 +333,1 @@\n-                \"--module-path\", ht.lib.toString(),\n+                \"--module-path\", lib.toString(),\n@@ -358,2 +335,2 @@\n-        assertEquals(ht.moduleHashes().keySet(), Set.of(\"m1\"));\n-        ht.checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n@@ -363,1 +340,1 @@\n-                \"--module-path\", ht.lib.toString(),\n+                \"--module-path\", lib.toString(),\n@@ -365,2 +342,2 @@\n-        assertEquals(ht.moduleHashes().keySet(), Set.of(\"m1\"));\n-        ht.checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n@@ -371,1 +348,1 @@\n-                \"--module-path\", ht.lib.toString(),\n+                \"--module-path\", lib.toString(),\n@@ -373,3 +350,3 @@\n-        assertEquals(ht.moduleHashes().keySet(), Set.of(\"m1\", \"m3\"));\n-        ht.checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n-        ht.checkHashes(\"m3\", Set.of(\"m4\"));\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\", \"m3\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+        checkHashes(\"m3\", Set.of(\"m4\"));\n@@ -378,1 +355,1 @@\n-    private static void validateImageJmodsTest(HashesTest ht, Path mpath)\n+    private void validateImageJmodsTest(Path mpath)\n@@ -382,2 +359,2 @@\n-        ht.checkHashes(\"m1\", Set.of(\"m2\"));\n-        assertTrue(ht.hashes(\"m2\") == null);\n+        checkHashes(\"m1\", Set.of(\"m2\"));\n+        assertNull(hashes(\"m2\"));\n@@ -387,2 +364,2 @@\n-        assertTrue(ht.hashes(finder,\"jdk.compiler\") == null);\n-        assertTrue(ht.hashes(finder,\"jdk.attach\") == null);\n+        assertNull(hashes(finder, \"jdk.compiler\"));\n+        assertNull(hashes(finder, \"jdk.attach\"));\n@@ -391,1 +368,1 @@\n-    private void checkHashes(String mn, Set<String> hashModules) throws IOException {\n+    private void checkHashes(String mn, Set<String> hashModules) {\n@@ -393,1 +370,1 @@\n-        assertTrue(hashes.names().equals(hashModules));\n+        assertEquals(hashModules, hashes.names());\n@@ -404,2 +381,1 @@\n-            ModuleReader reader = mref.open();\n-            try (InputStream in = reader.open(\"module-info.class\").get()) {\n+            try (ModuleReader reader = mref.open(); InputStream in = reader.open(\"module-info.class\").get()) {\n@@ -408,1 +384,1 @@\n-                    (hashes != null) ? \"present\" : \"absent\");\n+                        (hashes != null) ? \"present\" : \"absent\");\n@@ -411,1 +387,1 @@\n-                        System.out.format(\"  %s %s%n\", n, toHex(hashes.hashFor(n)))\n+                            System.out.format(\"  %s %s%n\", n, toHex(hashes.hashFor(n)))\n@@ -415,2 +391,0 @@\n-            } finally {\n-                reader.close();\n@@ -432,1 +406,1 @@\n-        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(dir, new SimpleFileVisitor<>() {\n@@ -435,2 +409,1 @@\n-                throws IOException\n-            {\n+                    throws IOException {\n@@ -443,2 +416,1 @@\n-                throws IOException\n-            {\n+                    throws IOException {\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesTest.java","additions":141,"deletions":169,"binary":false,"changes":310,"status":"modified"}]}