{"files":[{"patch":"@@ -173,1 +173,1 @@\n-        comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib \\\n+        comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib powrprof.lib uuid.lib \\\n","filename":"make\/autoconf\/libraries.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1302,0 +1302,16 @@\n+#ifdef __APPLE__\n+static void print_sysctl_info_string(const char* sysctlkey, outputStream* st, char* buf, size_t size) {\n+  if (sysctlbyname(sysctlkey, buf, &size, NULL, 0) >= 0) {\n+    st->print_cr(\"%s:%s\", sysctlkey, buf);\n+  }\n+}\n+\n+static void print_sysctl_info_uint64(const char* sysctlkey, outputStream* st) {\n+  uint64_t val;\n+  size_t size=sizeof(uint64_t);\n+  if (sysctlbyname(sysctlkey, &val, &size, NULL, 0) >= 0) {\n+    st->print_cr(\"%s:%llu\", sysctlkey, val);\n+  }\n+}\n+#endif\n+\n@@ -1303,1 +1319,11 @@\n-  \/\/ Nothing to do for now.\n+#ifdef __APPLE__\n+  print_sysctl_info_string(\"machdep.cpu.brand_string\", st, buf, buflen);\n+  print_sysctl_info_uint64(\"hw.cpufrequency\", st);\n+  print_sysctl_info_uint64(\"hw.cpufrequency_min\", st);\n+  print_sysctl_info_uint64(\"hw.cpufrequency_max\", st);\n+  print_sysctl_info_uint64(\"hw.cachelinesize\", st);\n+  print_sysctl_info_uint64(\"hw.l1icachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l1dcachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l2cachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l3cachesize\", st);\n+#endif\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+#include <powerbase.h>\n@@ -1879,0 +1880,10 @@\n+\/\/ Processor Power Information; missing from Windows headers\n+typedef struct _PROCESSOR_POWER_INFORMATION {\n+    ULONG Number;\n+    ULONG MaxMhz;     \/\/ max specified clock frequency of the system processor\n+    ULONG CurrentMhz; \/\/ max specified processor clock frequency mult. by current processor throttle\n+    ULONG MhzLimit;   \/\/ max specified processor clock frequency mult. by current processor thermal throttle limit\n+    ULONG MaxIdleState;\n+    ULONG CurrentIdleState;\n+} PROCESSOR_POWER_INFORMATION;\n+\n@@ -1880,1 +1891,47 @@\n-  \/\/ Nothing to do for now.\n+  int proc_count = os::processor_count();\n+  \/\/ handle potential early cases where processor count is not yet set\n+  if (proc_count < 1) {\n+    SYSTEM_INFO si;\n+    GetSystemInfo(&si);\n+    proc_count = si.dwNumberOfProcessors;\n+  }\n+\n+  size_t sz_check = sizeof(PROCESSOR_POWER_INFORMATION) * (size_t)proc_count;\n+  NTSTATUS status = ::CallNtPowerInformation(ProcessorInformation, NULL, 0, buf, (ULONG) buflen);\n+  int MaxMhz = -1, CurrentMhz = -1, MhzLimit = -1;\n+  bool same_vals_for_all_cpus = true;\n+\n+  if (status == ERROR_SUCCESS) {\n+    PROCESSOR_POWER_INFORMATION* pppi = (PROCESSOR_POWER_INFORMATION*) buf;\n+    for (int i = 0; i < proc_count; i++) {\n+      if (i == 0) {\n+        MaxMhz = (int) pppi->MaxMhz;\n+        CurrentMhz = (int) pppi->CurrentMhz;\n+        MhzLimit = (int) pppi->MhzLimit;\n+      } else {\n+        if (MaxMhz != (int) pppi->MaxMhz ||\n+            CurrentMhz != (int) pppi->CurrentMhz ||\n+            MhzLimit != (int) pppi->MhzLimit) {\n+          same_vals_for_all_cpus = false;\n+        }\n+      }\n+      \/\/ avoid iteration in case buf is too small to hold all proc infos\n+      if (sz_check > buflen) break;\n+      pppi++;\n+    }\n+\n+    if (same_vals_for_all_cpus && MaxMhz != -1) {\n+      st->print_cr(\"ProcessorInformation for all %d processors :\", proc_count);\n+      st->print_cr(\"  Max Mhz: %d, Current Mhz: %d, Mhz Limit: %d\", MaxMhz, CurrentMhz, MhzLimit);\n+      return;\n+    }\n+    \/\/ differing values, iterate again\n+    pppi = (PROCESSOR_POWER_INFORMATION*) buf;\n+    for (int i = 0; i < proc_count; i++) {\n+      st->print_cr(\"ProcessorInformation for processor %d\", (int) pppi->Number);\n+      st->print_cr(\"  Max Mhz: %d, Current Mhz: %d, Mhz Limit: %d\",\n+                     (int) pppi->MaxMhz, (int) pppi->CurrentMhz, (int) pppi->MhzLimit);\n+      if (sz_check > buflen) break;\n+      pppi++;\n+    }\n+  }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"}]}