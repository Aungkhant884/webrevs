{"files":[{"patch":"@@ -1302,0 +1302,16 @@\n+#ifdef __APPLE__\n+static void print_sysctl_info_string(const char* sysctlkey, outputStream* st, char* buf, size_t size) {\n+  if (sysctlbyname(sysctlkey, buf, &size, NULL, 0) >= 0) {\n+    st->print_cr(\"%s:%s\", sysctlkey, buf);\n+  }\n+}\n+\n+static void print_sysctl_info_uint64(const char* sysctlkey, outputStream* st) {\n+  uint64_t val;\n+  size_t size=sizeof(uint64_t);\n+  if (sysctlbyname(sysctlkey, &val, &size, NULL, 0) >= 0) {\n+    st->print_cr(\"%s:%llu\", sysctlkey, val);\n+  }\n+}\n+#endif\n+\n@@ -1303,1 +1319,11 @@\n-  \/\/ Nothing to do for now.\n+#ifdef __APPLE__\n+  print_sysctl_info_string(\"machdep.cpu.brand_string\", st, buf, buflen);\n+  print_sysctl_info_uint64(\"hw.cpufrequency\", st);\n+  print_sysctl_info_uint64(\"hw.cpufrequency_min\", st);\n+  print_sysctl_info_uint64(\"hw.cpufrequency_max\", st);\n+  print_sysctl_info_uint64(\"hw.cachelinesize\", st);\n+  print_sysctl_info_uint64(\"hw.l1icachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l1dcachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l2cachesize\", st);\n+  print_sysctl_info_uint64(\"hw.l3cachesize\", st);\n+#endif\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+#include <powerbase.h>\n@@ -1879,0 +1880,13 @@\n+\/\/ Processor Power Information; missing from Windows headers\n+typedef struct _PROCESSOR_POWER_INFORMATION {\n+    ULONG Number;\n+    ULONG MaxMhz;     \/\/ max specified clock frequency of the system processor\n+    ULONG CurrentMhz; \/\/ max specified processor clock frequency mult. by current processor throttle\n+    ULONG MhzLimit;   \/\/ max specified processor clock frequency mult. by current processor thermal throttle limit\n+    ULONG MaxIdleState;\n+    ULONG CurrentIdleState;\n+} PROCESSOR_POWER_INFORMATION;\n+\n+\/\/ additional lib needed for PowerProf functionality\n+#pragma comment(lib, \"Powrprof.lib\")\n+\n@@ -1880,1 +1894,19 @@\n-  \/\/ Nothing to do for now.\n+  SYSTEM_INFO si;\n+  GetSystemInfo(&si);\n+\n+  size_t sz_check = sizeof(PROCESSOR_POWER_INFORMATION) * (size_t)si.dwNumberOfProcessors;\n+  NTSTATUS status = ::CallNtPowerInformation(ProcessorInformation, NULL, 0, buf, (ULONG) buflen);\n+\n+  if (status == ERROR_SUCCESS) {\n+    PROCESSOR_POWER_INFORMATION* pppi = (PROCESSOR_POWER_INFORMATION*) buf;\n+    for (size_t i = 0; i < si.dwNumberOfProcessors; i++) {\n+      st->print_cr(\"ProcessorInformation for processor %d\", (int) pppi->Number);\n+      st->print_cr(\"  Max Mhz: %d\", (int) pppi->MaxMhz);\n+      st->print_cr(\"  Current Mhz: %d\", (int) pppi->CurrentMhz);\n+      st->print_cr(\"  Mhz Limit: %d\", (int) pppi->MhzLimit);\n+      st->print_cr(\"  MaxIdleState: %d\", (int) pppi->MaxIdleState);\n+      st->print_cr(\"  CurrentIdleState: %d\", (int) pppi->CurrentIdleState);\n+      if (sz_check > buflen) break;\n+      pppi++;\n+    }\n+  }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}