{"files":[{"patch":"@@ -27,2 +27,0 @@\n-import java.lang.module.ModuleReader;\n-import java.lang.module.ModuleReference;\n@@ -45,1 +43,0 @@\n-import jdk.internal.module.ModuleInfo;\n@@ -956,3 +953,4 @@\n-            {\"incubating\", (Predicate<ModuleResolution>)ModuleResolution::hasIncubatingWarning},\n-            {\"deprecated\", (Predicate<ModuleResolution>)ModuleResolution::hasDeprecatedWarning},\n-            {\"deprecated-for-removal\", (Predicate<ModuleResolution>)ModuleResolution::hasDeprecatedForRemovalWarning}\n+            {\"incubating\", (Predicate<ModuleResolution>) ModuleResolution::hasIncubatingWarning},\n+            {\"deprecated\", (Predicate<ModuleResolution>) ModuleResolution::hasDeprecatedWarning},\n+            {\"deprecated-for-removal\",\n+                (Predicate<ModuleResolution>) ModuleResolution::hasDeprecatedForRemovalWarning}\n@@ -967,2 +965,3 @@\n-    public void updateFooModuleResolutionWarnIfResolved(String resolutionName, Predicate<ModuleResolution> hasWarning) throws IOException {\n-        Path mp = Paths.get(\"updateFooModuleResolutionWarnIfResolved-\" + resolutionName);\n+    public void shouldAddWarnIfResolved(String resolutionName,\n+                                        Predicate<ModuleResolution> hasWarning) throws IOException {\n+        Path mp = Paths.get(\"moduleWarnIfResolved-\" + resolutionName);\n@@ -981,1 +980,2 @@\n-        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar).find(FOO.moduleName)\n+        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar)\n+            .find(FOO.moduleName)\n@@ -994,2 +994,2 @@\n-    public void updateFooModuleResolutionWarnIfResolved() throws IOException {\n-        Path mp = Paths.get(\"updateFooModuleResolutionDoNotResolveByDefault\");\n+    public void shouldAddDoNotResolveByDefault() throws IOException {\n+        Path mp = Paths.get(\"moduleDoNotResolveByDefault\");\n@@ -1008,1 +1008,2 @@\n-        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar).find(FOO.moduleName)\n+        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar)\n+            .find(FOO.moduleName)\n@@ -1017,1 +1018,2 @@\n-     * Validate that you can create a jar specifying --warn-if-resolved and --do-not-resolve-by-default\n+     * Validate that you can create a jar specifying --warn-if-resolved and\n+     * --do-not-resolve-by-default\n@@ -1021,2 +1023,3 @@\n-    public void updateFooModuleResolutionWarnIfResolvedAndDoNotResolveByDefault(String resolutionName, Predicate<ModuleResolution> hasWarning) throws IOException {\n-        Path mp = Paths.get(\"updateFooModuleResolutionWarnThenNotResolve-\" + resolutionName);\n+    public void shouldAddWarnIfResolvedAndDoNotResolveByDefault(String resolutionName,\n+                                        Predicate<ModuleResolution> hasWarning) throws IOException {\n+        Path mp = Paths.get(\"moduleResolutionWarnThenNotResolve-\" + resolutionName);\n@@ -1036,1 +1039,2 @@\n-        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar).find(FOO.moduleName)\n+        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar)\n+            .find(FOO.moduleName)\n@@ -1046,1 +1050,2 @@\n-     * Validate that you can create a jar specifying --do-not-resolve-by-default and --warn-if-resolved\n+     * Validate that you can create a jar specifying --do-not-resolve-by-default and\n+     * --warn-if-resolved\n@@ -1050,2 +1055,3 @@\n-    public void updateFooModuleResolutionDoNotResolveByDefaultAndWarnIfResolved(String resolutionName, Predicate<ModuleResolution> hasWarning) throws IOException {\n-        Path mp = Paths.get(\"updateFooModuleResolutionNotResolveThenWarn-\" + resolutionName);\n+    public void shouldAddResolutionDoNotResolveByDefaultAndWarnIfResolved(String resolutionName,\n+                                        Predicate<ModuleResolution> hasWarning) throws IOException {\n+        Path mp = Paths.get(\"moduleResolutionNotResolveThenWarn-\" + resolutionName);\n@@ -1065,1 +1071,2 @@\n-        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar).find(FOO.moduleName)\n+        ModuleReferenceImpl moduleReference = ModuleFinder.of(modularJar)\n+            .find(FOO.moduleName)\n","filename":"test\/jdk\/tools\/jar\/modularJar\/Basic.java","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"}]}