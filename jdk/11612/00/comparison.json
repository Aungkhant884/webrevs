{"files":[{"patch":"@@ -162,1 +162,1 @@\n-        form = new LambdaForm(ARG_LIMIT, names, forceInline, kind);\n+        form = LambdaForm.create(ARG_LIMIT, names, forceInline, kind);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DelegatingMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-        LambdaForm lform = new LambdaForm(ARG_LIMIT, names, result, kind);\n+        LambdaForm lform = LambdaForm.create(ARG_LIMIT, names, result, kind);\n@@ -817,1 +817,1 @@\n-            form = new LambdaForm(ARG_LIMIT, names, RESULT);\n+            form = LambdaForm.create(ARG_LIMIT, names, RESULT);\n@@ -819,1 +819,1 @@\n-            form = new LambdaForm(ARG_LIMIT, names, RESULT, kind);\n+            form = LambdaForm.create(ARG_LIMIT, names, RESULT, kind);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -354,1 +354,1 @@\n-            lform = new LambdaForm(INARG_LIMIT, names);\n+            lform = LambdaForm.create(INARG_LIMIT, names);\n@@ -356,1 +356,1 @@\n-            lform = new LambdaForm(INARG_LIMIT, names, kind);\n+            lform = LambdaForm.create(INARG_LIMIT, names, kind);\n@@ -418,1 +418,1 @@\n-        lform = new LambdaForm(ARG_LIMIT + 1, names, VARHANDLE_LINKER);\n+        lform = LambdaForm.create(ARG_LIMIT + 1, names, VARHANDLE_LINKER);\n@@ -480,1 +480,1 @@\n-        lform = new LambdaForm(ARG_LIMIT, names, kind);\n+        lform = LambdaForm.create(ARG_LIMIT, names, kind);\n@@ -607,1 +607,1 @@\n-        lform = new LambdaForm(INARG_LIMIT, names,\n+        lform = LambdaForm.create(INARG_LIMIT, names,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -333,11 +333,2 @@\n-    LambdaForm(int arity, Name[] names, int result) {\n-        this(arity, names, result, \/*forceInline=*\/true, \/*customized=*\/null, Kind.GENERIC);\n-    }\n-    LambdaForm(int arity, Name[] names, int result, Kind kind) {\n-        this(arity, names, result, \/*forceInline=*\/true, \/*customized=*\/null, kind);\n-    }\n-    LambdaForm(int arity, Name[] names, int result, boolean forceInline, MethodHandle customized) {\n-        this(arity, names, result, forceInline, customized, Kind.GENERIC);\n-    }\n-    LambdaForm(int arity, Name[] names, int result, boolean forceInline, MethodHandle customized, Kind kind) {\n-        assert(namesOK(arity, names));\n+    \/\/ private version that doesn't do checks or defensive copies\n+    private LambdaForm(int arity, int result, boolean forceInline, MethodHandle customized, Name[] names, Kind kind) {\n@@ -345,2 +336,1 @@\n-        this.result = fixResult(result, names);\n-        this.names = names.clone();\n+        this.result = result;\n@@ -349,0 +339,1 @@\n+        this.names = names;\n@@ -350,5 +341,15 @@\n-        int maxOutArity = normalize();\n-        if (maxOutArity > MethodType.MAX_MH_INVOKER_ARITY) {\n-            \/\/ Cannot use LF interpreter on very high arity expressions.\n-            assert(maxOutArity <= MethodType.MAX_JVM_ARITY);\n-            compileToBytecode();\n+        this.vmentry = null;\n+        this.isCompiled = false;\n+    }\n+\n+    \/\/ root factory pre\/post processing and calls simple cosntructor\n+    private static LambdaForm create(int arity, Name[] names, int result, boolean forceInline, MethodHandle customized, Kind kind) {\n+        names = names.clone();\n+        assert(namesOK(arity, names));\n+        result = fixResult(result, names);\n+\n+        boolean canInterpret = normalizeNames(arity, names);\n+        LambdaForm form = new LambdaForm(arity, result, forceInline, customized, names, kind);\n+        assert(form.nameRefsAreLegal());\n+        if (!canInterpret) {\n+            form.compileToBytecode();\n@@ -356,0 +357,1 @@\n+        return form;\n@@ -357,2 +359,15 @@\n-    LambdaForm(int arity, Name[] names) {\n-        this(arity, names, LAST_RESULT, \/*forceInline=*\/true, \/*customized=*\/null, Kind.GENERIC);\n+\n+    \/\/ derived factories with defaults\n+    private static final int DEFAULT_RESULT = LAST_RESULT;\n+    private static final boolean DEFAULT_FORCE_INLINE = true;\n+    private static final MethodHandle DEFAULT_CUSTOMIZED = null;\n+    private static final Kind DEFAULT_KIND = Kind.GENERIC;\n+\n+    static LambdaForm create(int arity, Name[] names, int result) {\n+        return create(arity, names, result, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, DEFAULT_KIND);\n+    }\n+    static LambdaForm create(int arity, Name[] names, int result, Kind kind) {\n+        return create(arity, names, result, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, kind);\n+    }\n+    static LambdaForm create(int arity, Name[] names) {\n+        return create(arity, names, DEFAULT_RESULT, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, DEFAULT_KIND);\n@@ -360,2 +375,2 @@\n-    LambdaForm(int arity, Name[] names, Kind kind) {\n-        this(arity, names, LAST_RESULT, \/*forceInline=*\/true, \/*customized=*\/null, kind);\n+    static LambdaForm create(int arity, Name[] names, Kind kind) {\n+        return create(arity, names, DEFAULT_RESULT, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, kind);\n@@ -363,2 +378,2 @@\n-    LambdaForm(int arity, Name[] names, boolean forceInline, Kind kind) {\n-        this(arity, names, LAST_RESULT, forceInline, \/*customized=*\/null, kind);\n+    static LambdaForm create(int arity, Name[] names, boolean forceInline, Kind kind) {\n+        return create(arity, names, DEFAULT_RESULT, forceInline, DEFAULT_CUSTOMIZED, kind);\n@@ -367,1 +382,1 @@\n-    private LambdaForm(MethodType mt) {\n+    private static LambdaForm createBlankForType(MethodType mt) {\n@@ -371,11 +386,10 @@\n-        this.arity = mt.parameterCount();\n-        this.result = (mt.returnType() == void.class || mt.returnType() == Void.class) ? -1 : arity;\n-        this.names = buildEmptyNames(arity, mt, result == -1);\n-        this.forceInline = true;\n-        this.customized = null;\n-        this.kind = Kind.ZERO;\n-        assert(nameRefsAreLegal());\n-        assert(isEmpty());\n-        String sig = null;\n-        assert(isValidSignature(sig = basicTypeSignature()));\n-        assert(sig.equals(basicTypeSignature())) : sig + \" != \" + basicTypeSignature();\n+        int arity = mt.parameterCount();\n+        int result = (mt.returnType() == void.class || mt.returnType() == Void.class) ? VOID_RESULT : arity;\n+        Name[] names = buildEmptyNames(arity, mt, result == VOID_RESULT);\n+        boolean canInterpret = normalizeNames(arity, names);\n+        LambdaForm form = new LambdaForm(arity, result, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, names, Kind.ZERO);\n+        assert(form.nameRefsAreLegal() && form.isEmpty() && isValidSignature(form.basicTypeSignature()));\n+        if (!canInterpret) {\n+            form.compileToBytecode();\n+        }\n+        return form;\n@@ -390,0 +404,1 @@\n+        assert(namesOK(arity, names));\n@@ -460,1 +475,1 @@\n-        LambdaForm customForm = new LambdaForm(arity, names, result, forceInline, mh, kind);\n+        LambdaForm customForm = LambdaForm.create(arity, names, result, forceInline, mh, kind);\n@@ -484,1 +499,1 @@\n-     *  @return maximum argument list length among the names (since we have to pass over them anyway)\n+     *  @return true if we can interpret\n@@ -486,1 +501,1 @@\n-    private int normalize() {\n+    private static boolean normalizeNames(int arity, Name[] names) {\n@@ -511,1 +526,0 @@\n-        assert(nameRefsAreLegal());\n@@ -526,2 +540,8 @@\n-        assert(nameRefsAreLegal());\n-        return maxOutArity;\n+\n+        \/\/ return true if we can interpret\n+        if (maxOutArity > MethodType.MAX_MH_INVOKER_ARITY) {\n+            \/\/ Cannot use LF interpreter on very high arity expressions.\n+            assert(maxOutArity <= MethodType.MAX_JVM_ARITY);\n+            return false;\n+        }\n+        return true;\n@@ -807,1 +827,1 @@\n-            prep = new LambdaForm(mtype);\n+            prep = LambdaForm.createBlankForType(mtype);\n@@ -1751,1 +1771,1 @@\n-                idForm = new LambdaForm(1, idNames, VOID_RESULT, Kind.IDENTITY);\n+                idForm = LambdaForm.create(1, idNames, VOID_RESULT, Kind.IDENTITY);\n@@ -1759,1 +1779,1 @@\n-                idForm = new LambdaForm(2, idNames, 1, Kind.IDENTITY);\n+                idForm = LambdaForm.create(2, idNames, 1, Kind.IDENTITY);\n@@ -1766,1 +1786,1 @@\n-                zeForm = new LambdaForm(1, zeNames, 1, Kind.ZERO);\n+                zeForm = LambdaForm.create(1, zeNames, 1, Kind.ZERO);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":66,"deletions":46,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        return new LambdaForm(arity, nameArray(), resultIndex());\n+        return LambdaForm.create(arity, nameArray(), resultIndex());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Collections;\n@@ -1149,1 +1148,1 @@\n-        form = new LambdaForm(arity2, names2, result2);\n+        form = LambdaForm.create(arity2, names2, result2);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -839,1 +839,1 @@\n-        lform = new LambdaForm(lambdaType.parameterCount(), names, \/*forceInline=*\/true, Kind.GUARD);\n+        lform = LambdaForm.create(lambdaType.parameterCount(), names, \/*forceInline=*\/true, Kind.GUARD);\n@@ -915,1 +915,1 @@\n-        lform = new LambdaForm(lambdaType.parameterCount(), names, Kind.GUARD_WITH_CATCH);\n+        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.GUARD_WITH_CATCH);\n@@ -1801,1 +1801,1 @@\n-                    new LambdaForm(lambdaType.parameterCount(), names, Kind.LOOP));\n+                    LambdaForm.create(lambdaType.parameterCount(), names, Kind.LOOP));\n@@ -2035,1 +2035,1 @@\n-        lform = new LambdaForm(lambdaType.parameterCount(), names, Kind.TRY_FINALLY);\n+        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.TRY_FINALLY);\n@@ -2130,1 +2130,1 @@\n-        LambdaForm lform = new LambdaForm(lambdaType.parameterCount(), names, CALL_NEW_ARRAY, Kind.COLLECTOR);\n+        LambdaForm lform = LambdaForm.create(lambdaType.parameterCount(), names, CALL_NEW_ARRAY, Kind.COLLECTOR);\n@@ -2255,1 +2255,1 @@\n-        lform = new LambdaForm(lambdaType.parameterCount(), names, Kind.TABLE_SWITCH);\n+        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.TABLE_SWITCH);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        LambdaForm lform = new LambdaForm(ARG_LIMIT, names, LAST_RESULT);\n+        LambdaForm lform = LambdaForm.create(ARG_LIMIT, names, LAST_RESULT);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/NativeMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}