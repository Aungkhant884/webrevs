{"files":[{"patch":"@@ -296,1 +296,1 @@\n-  ZHeapIterator iter(1 \/* nworkers *\/, visit_weaks);\n+  ZHeapIterator iter(1 \/* nworkers *\/, visit_weaks, false \/* for_verify *\/);\n@@ -300,1 +300,1 @@\n-void ZHeap::object_and_field_iterate(ObjectClosure* object_cl, OopFieldClosure* field_cl, bool visit_weaks) {\n+void ZHeap::object_and_field_iterate_for_verify(ObjectClosure* object_cl, OopFieldClosure* field_cl, bool visit_weaks) {\n@@ -302,1 +302,1 @@\n-  ZHeapIterator iter(1 \/* nworkers *\/, visit_weaks);\n+  ZHeapIterator iter(1 \/* nworkers *\/, visit_weaks, true \/* for_verify *\/);\n@@ -308,1 +308,1 @@\n-  return new ZHeapIterator(nworkers, visit_weaks);\n+  return new ZHeapIterator(nworkers, visit_weaks, false \/* for_verify *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  void object_and_field_iterate(ObjectClosure* object_cl, OopFieldClosure* field_cl, bool visit_weaks);\n+  void object_and_field_iterate_for_verify(ObjectClosure* object_cl, OopFieldClosure* field_cl, bool visit_weaks);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,6 +58,5 @@\n-  ZHeapIterator* const           _iter;\n-  ZHeapIteratorQueue* const      _queue;\n-  ZHeapIteratorArrayQueue* const _array_queue;\n-  const uint                     _worker_id;\n-  ObjectClosure*                 _object_cl;\n-  OopFieldClosure*               _field_cl;\n+  ObjectClosure* const                _object_cl;\n+  OopFieldClosure* const              _field_cl;\n+  const uint                          _worker_id;\n+  ZHeapIteratorQueue* const           _queue;\n+  ZHeapIteratorArrayChunkQueue* const _array_chunk_queue;\n@@ -66,4 +65,7 @@\n-  ZHeapIteratorContext(ZHeapIterator* iter, ObjectClosure* object_cl, OopFieldClosure* field_cl, uint worker_id)\n-    : _iter(iter),\n-      _queue(_iter->_queues.queue(worker_id)),\n-      _array_queue(_iter->_array_queues.queue(worker_id)),\n+  ZHeapIteratorContext(ObjectClosure* object_cl,\n+                       OopFieldClosure* field_cl,\n+                       uint worker_id,\n+                       ZHeapIteratorQueue* queue,\n+                       ZHeapIteratorArrayChunkQueue* array_chunk_queue)\n+    : _object_cl(object_cl),\n+      _field_cl(field_cl),\n@@ -71,2 +73,6 @@\n-      _object_cl(object_cl),\n-      _field_cl(field_cl) {}\n+      _queue(queue),\n+      _array_chunk_queue(array_chunk_queue) {}\n+\n+  uint worker_id() const {\n+    return _worker_id;\n+  }\n@@ -84,5 +90,2 @@\n-  void mark_and_push(oop obj) const {\n-    if (_iter->mark_object(obj)) {\n-      visit_object(obj);\n-      _queue->push(obj);\n-    }\n+  void push(oop obj) const {\n+    _queue->push(obj);\n@@ -91,2 +94,2 @@\n-  void push_array(const ObjArrayTask& array) const {\n-    _array_queue->push(array);\n+  void push_array_chunk(const ObjArrayTask& array_chunk) const {\n+    _array_chunk_queue->push(array_chunk);\n@@ -99,10 +102,2 @@\n-  bool pop_array(ObjArrayTask& array) const {\n-    return _array_queue->pop_overflow(array) || _array_queue->pop_local(array);\n-  }\n-\n-  bool steal(oop& obj) const {\n-    return _iter->_queues.steal(_worker_id, obj);\n-  }\n-\n-  bool steal_array(ObjArrayTask& array) const {\n-    return _iter->_array_queues.steal(_worker_id, array);\n+  bool pop_array_chunk(ObjArrayTask& array_chunk) const {\n+    return _array_chunk_queue->pop_overflow(array_chunk) || _array_chunk_queue->pop_local(array_chunk);\n@@ -112,1 +107,1 @@\n-    return _queue->is_empty() && _array_queue->is_empty();\n+    return _queue->is_empty() && _array_chunk_queue->is_empty();\n@@ -119,0 +114,1 @@\n+  ZHeapIterator* const        _iter;\n@@ -130,2 +126,4 @@\n-  ZHeapIteratorColoredRootOopClosure(const ZHeapIteratorContext& context)\n-    : _context(context) {}\n+  ZHeapIteratorColoredRootOopClosure(ZHeapIterator* iter,\n+                                     const ZHeapIteratorContext& context)\n+    : _iter(iter),\n+      _context(context) {}\n@@ -136,1 +134,1 @@\n-    _context.mark_and_push(obj);\n+    _iter->mark_visit_and_push(_context, obj);\n@@ -146,0 +144,1 @@\n+  ZHeapIterator* const        _iter;\n@@ -155,2 +154,4 @@\n-  ZHeapIteratorUncoloredRootOopClosure(const ZHeapIteratorContext& context)\n-    : _context(context) {}\n+  ZHeapIteratorUncoloredRootOopClosure(ZHeapIterator* iter,\n+                                       const ZHeapIteratorContext& context)\n+    : _iter(iter),\n+      _context(context) {}\n@@ -161,1 +162,27 @@\n-    _context.mark_and_push(obj);\n+    _iter->mark_visit_and_push(_context, obj);\n+  }\n+\n+  virtual void do_oop(narrowOop* p) {\n+    ShouldNotReachHere();\n+  }\n+};\n+\n+class ZHeapIteratorCLDOopClosure : public OopClosure {\n+private:\n+  ZHeapIterator* const        _iter;\n+  const ZHeapIteratorContext& _context;\n+\n+  oop load_oop(oop* p) {\n+    assert(!ZCollectedHeap::heap()->is_in(p), \"Should not be in heap\");\n+    return NativeAccess<AS_NO_KEEPALIVE>::oop_load(p);\n+  }\n+\n+public:\n+  ZHeapIteratorCLDOopClosure(ZHeapIterator* iter,\n+                             const ZHeapIteratorContext& context)\n+    : _iter(iter),\n+      _context(context) {}\n+\n+  virtual void do_oop(oop* p) {\n+    const oop obj = load_oop(p);\n+    _iter->mark_visit_and_push(_context, obj);\n@@ -172,0 +199,1 @@\n+  ZHeapIterator* const        _iter;\n@@ -186,1 +214,3 @@\n-  ZHeapIteratorOopClosure(const ZHeapIteratorContext& context, oop base)\n+  ZHeapIteratorOopClosure(ZHeapIterator* iter,\n+                          const ZHeapIteratorContext& context,\n+                          oop base)\n@@ -188,0 +218,1 @@\n+      _iter(iter),\n@@ -198,1 +229,1 @@\n-    _context.mark_and_push(obj);\n+    _iter->mark_visit_and_push(_context, obj);\n@@ -215,20 +246,1 @@\n-    class NativeAccessClosure : public OopClosure {\n-    private:\n-      const ZHeapIteratorContext& _context;\n-\n-    public:\n-      explicit NativeAccessClosure(const ZHeapIteratorContext& context)\n-        : _context(context) {}\n-\n-      virtual void do_oop(oop* p) {\n-        assert(!ZCollectedHeap::heap()->is_in(p), \"Should not be in heap\");\n-        const oop obj = NativeAccess<AS_NO_KEEPALIVE>::oop_load(p);\n-        _context.mark_and_push(obj);\n-      }\n-\n-      virtual void do_oop(narrowOop* p) {\n-        ShouldNotReachHere();\n-      }\n-    };\n-\n-    NativeAccessClosure cl(_context);\n+    ZHeapIteratorCLDOopClosure cl(_iter, _context);\n@@ -243,1 +255,3 @@\n-ZHeapIterator::ZHeapIterator(uint nworkers, bool visit_weaks)\n+ZHeapIterator::ZHeapIterator(uint nworkers,\n+                             bool visit_weaks,\n+                             bool for_verify)\n@@ -245,0 +259,1 @@\n+    _for_verify(for_verify),\n@@ -248,1 +263,1 @@\n-    _array_queues(nworkers),\n+    _array_chunk_queues(nworkers),\n@@ -260,4 +275,4 @@\n-  \/\/ Create array queues\n-  for (uint i = 0; i < _array_queues.size(); i++) {\n-    ZHeapIteratorArrayQueue* const array_queue = new ZHeapIteratorArrayQueue();\n-    _array_queues.register_queue(i, array_queue);\n+  \/\/ Create array chunk queues\n+  for (uint i = 0; i < _array_chunk_queues.size(); i++) {\n+    ZHeapIteratorArrayChunkQueue* const array_chunk_queue = new ZHeapIteratorArrayChunkQueue();\n+    _array_chunk_queues.register_queue(i, array_chunk_queue);\n@@ -274,3 +289,3 @@\n-  \/\/ Destroy array queues\n-  for (uint i = 0; i < _array_queues.size(); i++) {\n-    delete _array_queues.queue(i);\n+  \/\/ Destroy array chunk queues\n+  for (uint i = 0; i < _array_chunk_queues.size(); i++) {\n+    delete _array_chunk_queues.queue(i);\n@@ -315,0 +330,13 @@\n+bool ZHeapIterator::should_visit_object_at_mark() const {\n+  \/\/ Verify wants to visit objects as soon as they are found.\n+  return _for_verify;\n+}\n+\n+bool ZHeapIterator::should_visit_object_at_follow() const {\n+  \/\/ Non-verify code needs to be careful and visit the objects\n+  \/\/ during the follow stage, where we've completed the root\n+  \/\/ iteration. This prevents lock-ordering problems between\n+  \/\/ the root iterator and the visit closures.\n+  return !_for_verify;\n+}\n+\n@@ -365,1 +393,1 @@\n-    ZHeapIteratorColoredRootOopClosure<false \/* Weak *\/> cl(context);\n+    ZHeapIteratorColoredRootOopClosure<false \/* Weak *\/> cl(this, context);\n@@ -373,1 +401,1 @@\n-    ZHeapIteratorUncoloredRootOopClosure cl(context);\n+    ZHeapIteratorUncoloredRootOopClosure cl(this, context);\n@@ -382,1 +410,1 @@\n-  ZHeapIteratorColoredRootOopClosure<true  \/* Weak *\/> cl(context);\n+  ZHeapIteratorColoredRootOopClosure<true  \/* Weak *\/> cl(this, context);\n@@ -394,0 +422,9 @@\n+void ZHeapIterator::mark_visit_and_push(const ZHeapIteratorContext& context, oop obj) {\n+  if (mark_object(obj)) {\n+    if (should_visit_object_at_mark()) {\n+      context.visit_object(obj);\n+    }\n+    context.push(obj);\n+  }\n+}\n+\n@@ -396,1 +433,1 @@\n-  ZHeapIteratorOopClosure<VisitReferents> cl(context, obj);\n+  ZHeapIteratorOopClosure<VisitReferents> cl(this, context, obj);\n@@ -402,1 +439,1 @@\n-  ZHeapIteratorOopClosure<false \/* VisitReferents *\/> cl(context, obj);\n+  ZHeapIteratorOopClosure<false \/* VisitReferents *\/> cl(this, context, obj);\n@@ -406,1 +443,1 @@\n-  context.push_array(ObjArrayTask(obj, 0 \/* index *\/));\n+  context.push_array_chunk(ObjArrayTask(obj, 0 \/* index *\/));\n@@ -418,1 +455,1 @@\n-    context.push_array(ObjArrayTask(obj, end));\n+    context.push_array_chunk(ObjArrayTask(obj, end));\n@@ -422,1 +459,1 @@\n-  ZHeapIteratorOopClosure<false \/* VisitReferents *\/> cl(context, obj);\n+  ZHeapIteratorOopClosure<false \/* VisitReferents *\/> cl(this, context, obj);\n@@ -436,0 +473,9 @@\n+template <bool VisitWeaks>\n+void ZHeapIterator::visit_and_follow(const ZHeapIteratorContext& context, oop obj) {\n+  if (should_visit_object_at_follow()) {\n+    context.visit_object(obj);\n+  }\n+\n+  follow<VisitWeaks>(context, obj);\n+}\n+\n@@ -443,1 +489,1 @@\n-      follow<VisitWeaks>(context, obj);\n+      visit_and_follow<VisitWeaks>(context, obj);\n@@ -446,1 +492,1 @@\n-    if (context.pop_array(array)) {\n+    if (context.pop_array_chunk(array)) {\n@@ -457,1 +503,1 @@\n-  if (context.steal_array(array)) {\n+  if (steal_array_chunk(context, array)) {\n@@ -459,2 +505,2 @@\n-  } else if (context.steal(obj)) {\n-    follow<VisitWeaks>(context, obj);\n+  } else if (steal(context, obj)) {\n+    visit_and_follow<VisitWeaks>(context, obj);\n@@ -464,0 +510,8 @@\n+bool ZHeapIterator::steal(const ZHeapIteratorContext& context, oop& obj) {\n+  return _queues.steal(context.worker_id(), obj);\n+}\n+\n+bool ZHeapIterator::steal_array_chunk(const ZHeapIteratorContext& context, ObjArrayTask& array) {\n+  return _array_chunk_queues.steal(context.worker_id(), array);\n+}\n+\n@@ -479,7 +533,1 @@\n-  const ZHeapIteratorContext context(this, object_cl, nullptr \/* field_cl *\/, worker_id);\n-\n-  if (_visit_weaks) {\n-    object_iterate_inner<true \/* VisitWeaks *\/>(context);\n-  } else {\n-    object_iterate_inner<false \/* VisitWeaks *\/>(context);\n-  }\n+  object_and_field_iterate(object_cl, nullptr \/* field_cl *\/, worker_id);\n@@ -489,1 +537,5 @@\n-  const ZHeapIteratorContext context(this, object_cl, field_cl, worker_id);\n+  const ZHeapIteratorContext context(object_cl,\n+                                     field_cl,\n+                                     worker_id,\n+                                     _queues.queue(worker_id),\n+                                     _array_chunk_queues.queue(worker_id));\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":140,"deletions":88,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-using ZHeapIteratorArrayQueue = OverflowTaskQueue<ObjArrayTask, mtGC>;\n-using ZHeapIteratorArrayQueues = GenericTaskQueueSet<ZHeapIteratorArrayQueue, mtGC>;\n+using ZHeapIteratorArrayChunkQueue = OverflowTaskQueue<ObjArrayTask, mtGC>;\n+using ZHeapIteratorArrayChunkQueues = GenericTaskQueueSet<ZHeapIteratorArrayChunkQueue, mtGC>;\n@@ -46,2 +46,4 @@\n-  friend class ZHeapIteratorContext;\n-  friend class ZHeapIteratorRootUncoloredOopClosure;\n+  friend class ZHeapIteratorCLDOopClosure;\n+  template <bool Weak> friend class ZHeapIteratorColoredRootOopClosure;\n+  template <bool VisitReferents> friend class ZHeapIteratorOopClosure;\n+  friend class ZHeapIteratorUncoloredRootOopClosure;\n@@ -51,0 +53,1 @@\n+  const bool                    _for_verify;\n@@ -54,1 +57,1 @@\n-  ZHeapIteratorArrayQueues      _array_queues;\n+  ZHeapIteratorArrayChunkQueues _array_chunk_queues;\n@@ -62,0 +65,3 @@\n+  bool should_visit_object_at_mark() const;\n+  bool should_visit_object_at_follow() const;\n+\n@@ -70,0 +76,2 @@\n+  void mark_visit_and_push(const ZHeapIteratorContext& context, oop obj);\n+\n@@ -79,0 +87,3 @@\n+  template <bool VisitWeaks>\n+  void visit_and_follow(const ZHeapIteratorContext& context, oop obj);\n+\n@@ -85,0 +96,3 @@\n+  bool steal(const ZHeapIteratorContext& context, oop& obj);\n+  bool steal_array_chunk(const ZHeapIteratorContext& context, ObjArrayTask& array);\n+\n@@ -92,1 +106,1 @@\n-  ZHeapIterator(uint nworkers, bool visit_weaks);\n+  ZHeapIterator(uint nworkers, bool visit_weaks, bool for_verify);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.hpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-  ZHeap::heap()->object_and_field_iterate(&object_cl, &object_cl, verify_weaks);\n+  ZHeap::heap()->object_and_field_iterate_for_verify(&object_cl, &object_cl, verify_weaks);\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}