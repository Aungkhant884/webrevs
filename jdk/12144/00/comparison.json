{"files":[{"patch":"@@ -2489,49 +2489,0 @@\n-#ifndef PRODUCT\n-\/\/ Helpful for debugging RSet issues.\n-\n-class PrintRSetsClosure : public HeapRegionClosure {\n-private:\n-  const char* _msg;\n-  size_t _occupied_sum;\n-\n-public:\n-  bool do_heap_region(HeapRegion* r) {\n-    HeapRegionRemSet* hrrs = r->rem_set();\n-    size_t occupied = hrrs->occupied();\n-    _occupied_sum += occupied;\n-\n-    tty->print_cr(\"Printing RSet for region \" HR_FORMAT, HR_FORMAT_PARAMS(r));\n-    if (occupied == 0) {\n-      tty->print_cr(\"  RSet is empty\");\n-    } else {\n-      tty->print_cr(\"hrrs \" PTR_FORMAT, p2i(hrrs));\n-    }\n-    tty->print_cr(\"----------\");\n-    return false;\n-  }\n-\n-  PrintRSetsClosure(const char* msg) : _msg(msg), _occupied_sum(0) {\n-    tty->cr();\n-    tty->print_cr(\"========================================\");\n-    tty->print_cr(\"%s\", msg);\n-    tty->cr();\n-  }\n-\n-  ~PrintRSetsClosure() {\n-    tty->print_cr(\"Occupied Sum: \" SIZE_FORMAT, _occupied_sum);\n-    tty->print_cr(\"========================================\");\n-    tty->cr();\n-  }\n-};\n-\n-void G1CollectedHeap::print_cset_rsets() {\n-  PrintRSetsClosure cl(\"Printing CSet RSets\");\n-  collection_set_iterate_all(&cl);\n-}\n-\n-void G1CollectedHeap::print_all_rsets() {\n-  PrintRSetsClosure cl(\"Printing All RSets\");;\n-  heap_region_iterate(&cl);\n-}\n-#endif \/\/ PRODUCT\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1333,4 +1333,0 @@\n-  \/\/ The following two methods are helpful for debugging RSet issues.\n-  void print_cset_rsets() PRODUCT_RETURN;\n-  void print_all_rsets() PRODUCT_RETURN;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}