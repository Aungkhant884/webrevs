{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,49 @@\n+ * <p>\n+ * <b id=\"httpserverprops\">System properties used by the HTTP server API<\/b>\n+ * <p>\n+ * The following is a list of JDK specific system properties used by the default HTTP\n+ * server implementation in the JDK.\n+ * <ul>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.idleInterval}<\/b> (default: 30 sec)<br>\n+ * Maximum duration in seconds which an idle connection is kept open. This timer\n+ * has an implementation specific granularity that may mean that idle connections are\n+ * closed later than the specified interval.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpserver.maxConnections}<\/b> (default: -1)<br>\n+ * The maximum number of open connections at a time. This includes active and idle connections.\n+ * If zero or negative, then no limit is enforced.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.maxIdleConnections}<\/b> (default: 200)<br>\n+ * The maximum number of idle connections at a time.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.drainAmount}<\/b> (default: 65536)<br>\n+ * The maximum number of bytes that will be automatically read and discarded from a\n+ * request body that has not been completely consumed by its\n+ * {@link com.sun.net.httpserver.HttpHandler HttpHandler}. If the number of remaining\n+ * unread bytes are less than this limit then the connection will be put in the idle connection\n+ * cache. If not, then it will be closed.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.maxReqHeaders}<\/b> (default: 200)<br>\n+ * The maxiumum number of header fields accepted in a request. If this limit is exceeded\n+ * while the headers are being read, then the connection is terminated and the request ignored.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.maxReqTime}<\/b> (default: -1)<br>\n+ * The maximum time in milliseconds allowed to receive a request headers and body.\n+ * In practice, the actual time is a function of request size, network speed, and handler\n+ * processing delays. A value less than or equal to zero means the time is not limited.\n+ * If the limit is exceeded then the connection is terminated and the handler will receive a\n+ * {@link java.io.IOException}. This timer has an implementation specific granularity\n+ * that may mean requests are aborted later than the specified interval.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.maxRspTime}<\/b> (default: -1)<br>\n+ * The maximum time in milliseconds allowed to receive a response headers and body.\n+ * In practice, the actual time is a function of response size, network speed, and handler\n+ * processing delays. A value less than or equal to zero means the time is not limited.\n+ * If the limit is exceeded then the connection is terminated and the handler will receive a\n+ * {@link java.io.IOException}. This timer has an implementation specific granularity\n+ * that may mean responses are aborted later than the specified interval.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty sun.net.httpserver.nodelay}<\/b> (default: false)<br>\n+ * Boolean value, which if true, sets the {@link java.net.StandardSocketOptions#TCP_NODELAY TCP_NODELAY}\n+ * socket option on all incoming connections.\n+ * <\/li><\/ul>\n","filename":"src\/jdk.httpserver\/share\/classes\/module-info.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/.LeftOverInputStream.java.swp","binary":true,"status":"added"}]}