{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import java.util.Objects;\n@@ -68,1 +69,1 @@\n-    private static final boolean exclusiveBind;\n+    private static final boolean EXCLUSIVE_BIND;\n@@ -71,1 +72,1 @@\n-    private static final boolean fastLoopback;\n+    private static final boolean FAST_LOOPBACK;\n@@ -75,4 +76,2 @@\n-    private static volatile boolean checkedIPv6;\n-    private static volatile boolean isIPv6Available;\n-    private static volatile boolean checkedReusePort;\n-    private static volatile boolean isReusePortAvailable;\n+    private static final boolean IPV6_AVAILABLE;\n+    private static final boolean SO_REUSEPORT_AVAILABLE;\n@@ -84,5 +83,1 @@\n-        if (!checkedIPv6) {\n-            isIPv6Available = isIPv6Available0();\n-            checkedIPv6 = true;\n-        }\n-        return isIPv6Available;\n+        return IPV6_AVAILABLE;\n@@ -95,5 +90,1 @@\n-        if (!checkedReusePort) {\n-            isReusePortAvailable = isReusePortAvailable0();\n-            checkedReusePort = true;\n-        }\n-        return isReusePortAvailable;\n+        return SO_REUSEPORT_AVAILABLE;\n@@ -106,1 +97,1 @@\n-        return exclusiveBind;\n+        return EXCLUSIVE_BIND;\n@@ -143,3 +134,2 @@\n-        if (sa == null)\n-            throw new NullPointerException();\n-        if (!(sa instanceof InetSocketAddress))\n+        Objects.requireNonNull(sa);\n+        if (!(sa instanceof InetSocketAddress isa))\n@@ -147,1 +137,0 @@\n-        InetSocketAddress isa = (InetSocketAddress)sa;\n@@ -152,1 +141,1 @@\n-            throw new IllegalArgumentException(\"Invalid address type\");\n+            throw new IllegalArgumentException(\"Invalid address type: \" + addr.getClass().getName());\n@@ -167,1 +156,1 @@\n-        if (!(sa instanceof InetSocketAddress))\n+        if (!(sa instanceof InetSocketAddress isa))\n@@ -169,1 +158,1 @@\n-        return (InetSocketAddress)sa;\n+        return isa;\n@@ -175,2 +164,2 @@\n-        if (x instanceof SocketException)\n-            throw (SocketException)x;\n+        if (x instanceof SocketException se)\n+            throw se;\n@@ -179,1 +168,1 @@\n-            nx = new SocketException(\"Socket is closed\");\n+            nx = newSocketException(\"Socket is closed\");\n@@ -181,1 +170,1 @@\n-            nx = new SocketException(\"Socket is not connected\");\n+            nx = newSocketException(\"Socket is not connected\");\n@@ -183,1 +172,1 @@\n-            nx = new SocketException(\"Already bound\");\n+            nx = newSocketException(\"Already bound\");\n@@ -185,1 +174,1 @@\n-            nx = new SocketException(\"Socket is not bound yet\");\n+            nx = newSocketException(\"Socket is not bound yet\");\n@@ -187,1 +176,1 @@\n-            nx = new SocketException(\"Unsupported address type\");\n+            nx = newSocketException(\"Unsupported address type\");\n@@ -189,1 +178,1 @@\n-            nx = new SocketException(\"Unresolved address\");\n+            nx = newSocketException(\"Unresolved address\");\n@@ -191,1 +180,1 @@\n-            nx = new SocketException(x.getMessage());\n+            nx = newSocketException(x.getMessage());\n@@ -196,4 +185,4 @@\n-        if (nx instanceof SocketException)\n-            throw (SocketException)nx;\n-        else if (nx instanceof RuntimeException)\n-            throw (RuntimeException)nx;\n+        if (nx instanceof SocketException se)\n+            throw se;\n+        else if (nx instanceof RuntimeException re)\n+            throw re;\n@@ -204,0 +193,4 @@\n+    private static SocketException newSocketException(String msg) {\n+        return new SocketException(msg);\n+    }\n+\n@@ -208,2 +201,2 @@\n-        if (x instanceof IOException)\n-            throw (IOException)x;\n+        if (x instanceof IOException ioe)\n+            throw ioe;\n@@ -258,4 +251,4 @@\n-    private static final InetAddress anyLocalInet4Address;\n-    private static final InetAddress anyLocalInet6Address;\n-    private static final InetAddress inet4LoopbackAddress;\n-    private static final InetAddress inet6LoopbackAddress;\n+    private static final InetAddress ANY_LOCAL_INET4ADDRESS;\n+    private static final InetAddress ANY_LOCAL_INET6ADDRESS;\n+    private static final InetAddress INET4_LOOPBACK_ADDRESS;\n+    private static final InetAddress INET6_LOOPBACK_ADDRESS;\n@@ -264,3 +257,3 @@\n-            anyLocalInet4Address = inet4FromInt(0);\n-            assert anyLocalInet4Address instanceof Inet4Address\n-                    && anyLocalInet4Address.isAnyLocalAddress();\n+            ANY_LOCAL_INET4ADDRESS = inet4FromInt(0);\n+            assert ANY_LOCAL_INET4ADDRESS instanceof Inet4Address\n+                    && ANY_LOCAL_INET4ADDRESS.isAnyLocalAddress();\n@@ -268,3 +261,3 @@\n-            anyLocalInet6Address = InetAddress.getByAddress(new byte[16]);\n-            assert anyLocalInet6Address instanceof Inet6Address\n-                    && anyLocalInet6Address.isAnyLocalAddress();\n+            ANY_LOCAL_INET6ADDRESS = InetAddress.getByAddress(new byte[16]);\n+            assert ANY_LOCAL_INET6ADDRESS instanceof Inet6Address\n+                    && ANY_LOCAL_INET6ADDRESS.isAnyLocalAddress();\n@@ -272,3 +265,3 @@\n-            inet4LoopbackAddress = inet4FromInt(0x7f000001);\n-            assert inet4LoopbackAddress instanceof Inet4Address\n-                    && inet4LoopbackAddress.isLoopbackAddress();\n+            INET4_LOOPBACK_ADDRESS = inet4FromInt(0x7f000001);\n+            assert INET4_LOOPBACK_ADDRESS instanceof Inet4Address\n+                    && INET4_LOOPBACK_ADDRESS.isLoopbackAddress();\n@@ -278,3 +271,3 @@\n-            inet6LoopbackAddress = InetAddress.getByAddress(bytes);\n-            assert inet6LoopbackAddress instanceof Inet6Address\n-                    && inet6LoopbackAddress.isLoopbackAddress();\n+            INET6_LOOPBACK_ADDRESS = InetAddress.getByAddress(bytes);\n+            assert INET6_LOOPBACK_ADDRESS instanceof Inet6Address\n+                    && INET6_LOOPBACK_ADDRESS.isLoopbackAddress();\n@@ -287,1 +280,1 @@\n-        return inet4LoopbackAddress;\n+        return INET4_LOOPBACK_ADDRESS;\n@@ -291,1 +284,1 @@\n-        return inet6LoopbackAddress;\n+        return INET6_LOOPBACK_ADDRESS;\n@@ -301,1 +294,1 @@\n-            return anyLocalInet4Address;\n+            return ANY_LOCAL_INET4ADDRESS;\n@@ -303,1 +296,1 @@\n-            return anyLocalInet6Address;\n+            return ANY_LOCAL_INET6ADDRESS;\n@@ -320,2 +313,2 @@\n-                    if (addr instanceof Inet4Address) {\n-                        return (Inet4Address)addr;\n+                    if (addr instanceof Inet4Address inet4Address) {\n+                        return inet4Address;\n@@ -341,1 +334,1 @@\n-        throw new AssertionError(\"Should not reach here\");\n+        throw shouldNotReachHere();\n@@ -357,1 +350,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -382,1 +375,1 @@\n-        throw new AssertionError(\"Should not reach here\");\n+        throw shouldNotReachHere();\n@@ -387,1 +380,1 @@\n-    static final ExtendedSocketOptions extendedOptions =\n+    static final ExtendedSocketOptions EXTENDED_OPTIONS =\n@@ -407,2 +400,2 @@\n-        if (extendedOptions.isOptionSupported(name)) {\n-            extendedOptions.setOption(fd, name, value, isIPv6);\n+        if (EXTENDED_OPTIONS.isOptionSupported(name)) {\n+            EXTENDED_OPTIONS.setOption(fd, name, value, isIPv6);\n@@ -413,1 +406,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -469,1 +462,1 @@\n-        if (extendedOptions.isOptionSupported(name)) {\n+        if (EXTENDED_OPTIONS.isOptionSupported(name)) {\n@@ -471,1 +464,1 @@\n-            return extendedOptions.getOption(fd, name, isIPv6);\n+            return EXTENDED_OPTIONS.getOption(fd, name, isIPv6);\n@@ -476,1 +469,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -496,1 +489,1 @@\n-        return loopbackProp.isEmpty() ? true : Boolean.parseBoolean(loopbackProp);\n+        return loopbackProp.isEmpty() || Boolean.parseBoolean(loopbackProp);\n@@ -525,1 +518,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, false, fastLoopback));\n+        return IOUtil.newFD(socket0(preferIPv6, stream, false, FAST_LOOPBACK));\n@@ -535,1 +528,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, true, fastLoopback));\n+        return IOUtil.newFD(socket0(preferIPv6, stream, true, FAST_LOOPBACK));\n@@ -538,1 +531,1 @@\n-    \/\/ Due to oddities SO_REUSEADDR on windows reuse is ignored\n+    \/\/ Due to oddities SO_REUSEADDR on Windows reuse is ignored\n@@ -556,1 +549,1 @@\n-        bind0(fd, preferIPv6, exclusiveBind, addr, port);\n+        bind0(fd, preferIPv6, EXCLUSIVE_BIND, addr, port);\n@@ -658,1 +651,1 @@\n-     * @apiNote This method is public to allow it be used by code in jdk.sctp.\n+     * @apiNote This method is public to allow it to be used by code in jdk.sctp.\n@@ -824,4 +817,1 @@\n-                exclusiveBind = exclBindProp.isEmpty() ?\n-                        true : Boolean.parseBoolean(exclBindProp);\n-            } else if (availLevel == 1) {\n-                exclusiveBind = true;\n+                EXCLUSIVE_BIND = exclBindProp.isEmpty() || Boolean.parseBoolean(exclBindProp);\n@@ -829,1 +819,1 @@\n-                exclusiveBind = false;\n+                EXCLUSIVE_BIND = (availLevel == 1);\n@@ -832,1 +822,1 @@\n-            exclusiveBind = false;\n+            EXCLUSIVE_BIND = false;\n@@ -835,1 +825,8 @@\n-        fastLoopback = isFastTcpLoopbackRequested();\n+        FAST_LOOPBACK = isFastTcpLoopbackRequested();\n+\n+        IPV6_AVAILABLE = isIPv6Available0();\n+        SO_REUSEPORT_AVAILABLE = isReusePortAvailable0();\n+    }\n+\n+    private static AssertionError shouldNotReachHere() {\n+        return new AssertionError(\"Should not reach here\");\n@@ -837,0 +834,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":83,"deletions":85,"binary":false,"changes":168,"status":"modified"}]}