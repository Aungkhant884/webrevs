{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import static com.sun.tools.javac.code.TypeTag.DOUBLE;\n@@ -39,0 +40,1 @@\n+import static com.sun.tools.javac.code.TypeTag.LONG;\n@@ -404,1 +406,4 @@\n-        if (od <= 255) {\n+        Type constantType = types.constantType(constant);\n+        if (constantType.hasTag(LONG) || constantType.hasTag(DOUBLE)) {\n+            emitop2(ldc2w, od, constant);\n+        } else if (od <= 255) {\n@@ -406,2 +411,1 @@\n-        }\n-        else {\n+        } else {\n@@ -1065,0 +1069,1 @@\n+        case ldc2:\n@@ -1072,3 +1077,0 @@\n-        case ldc2:\n-            state.push(types.constantType((LoadableConstant)data));\n-            break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -84,8 +84,8 @@\n-        STRING(\"String\", \"Ljava\/lang\/String;\"),\n-        CLASS(\"Class<?>\", \"Ljava\/lang\/Class;\"),\n-        INTEGER(\"int\", \"I\"),\n-        LONG(\"long\", \"J\"),\n-        FLOAT(\"float\", \"F\"),\n-        DOUBLE(\"double\", \"D\"),\n-        METHOD_HANDLE(\"MethodHandle\", \"Ljava\/lang\/invoke\/MethodHandle;\"),\n-        METHOD_TYPE(\"MethodType\", \"Ljava\/lang\/invoke\/MethodType;\");\n+        STRING(\"String\", \"Ljava\/lang\/String;\", Opcode.LDC),\n+        CLASS(\"Class<?>\", \"Ljava\/lang\/Class;\", Opcode.LDC),\n+        INTEGER(\"int\", \"I\", Opcode.LDC),\n+        LONG(\"long\", \"J\", Opcode.LDC2_W),\n+        FLOAT(\"float\", \"F\", Opcode.LDC),\n+        DOUBLE(\"double\", \"D\", Opcode.LDC2_W),\n+        METHOD_HANDLE(\"MethodHandle\", \"Ljava\/lang\/invoke\/MethodHandle;\", Opcode.LDC),\n+        METHOD_TYPE(\"MethodType\", \"Ljava\/lang\/invoke\/MethodType;\", Opcode.LDC);\n@@ -95,0 +95,1 @@\n+        Opcode opcode;\n@@ -96,1 +97,1 @@\n-        ConstantType(String sourceTypeStr, String bytecodeTypeStr) {\n+        ConstantType(String sourceTypeStr, String bytecodeTypeStr, Opcode opcode) {\n@@ -99,0 +100,1 @@\n+            this.opcode = opcode;\n@@ -207,0 +209,4 @@\n+                    }\n+                    if (lci.opcode() != type.opcode) {\n+                        fail(\"unexpected opcode for constant value: \" + lci.opcode());\n+                        return;\n","filename":"test\/langtools\/tools\/javac\/T8222949\/TestConstantDynamic.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"}]}