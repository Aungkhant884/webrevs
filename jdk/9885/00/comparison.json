{"files":[{"patch":"@@ -75,1 +75,1 @@\n-#include \"utilities\/hashtable.inline.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n@@ -2393,0 +2393,6 @@\n+#ifndef PRODUCT\n+static int _lookups; \/\/ number of calls to lookup\n+static int _equals;  \/\/ number of buckets checked with matching hash\n+static int _hits;    \/\/ number of successful lookups\n+static int _compact; \/\/ number of equals calls with compact signature\n+#endif\n@@ -2579,8 +2585,0 @@\n-};\n-\n-\n-\/\/ A hashtable mapping from AdapterFingerPrints to AdapterHandlerEntries\n-class AdapterHandlerTable : public BasicHashtable<mtCode> {\n-  friend class AdapterHandlerTableIterator;\n-\n- private:\n@@ -2588,10 +2586,3 @@\n-#ifndef PRODUCT\n-  static int _lookups; \/\/ number of calls to lookup\n-  static int _buckets; \/\/ number of buckets checked\n-  static int _equals;  \/\/ number of buckets checked with matching hash\n-  static int _hits;    \/\/ number of successful lookups\n-  static int _compact; \/\/ number of equals calls with compact signature\n-#endif\n-\n-  AdapterHandlerEntry* bucket(int i) {\n-    return (AdapterHandlerEntry*)BasicHashtable<mtCode>::bucket(i);\n+  static bool equals(AdapterFingerPrint* const& fp1, AdapterFingerPrint* const& fp2) {\n+    NOT_PRODUCT(_equals++);\n+    return fp1->equals(fp2);\n@@ -2600,9 +2591,2 @@\n- public:\n-  AdapterHandlerTable()\n-    : BasicHashtable<mtCode>(293, (sizeof(AdapterHandlerEntry))) { }\n-\n-  \/\/ Create a new entry suitable for insertion in the table\n-  AdapterHandlerEntry* new_entry(AdapterFingerPrint* fingerprint, address i2c_entry, address c2i_entry, address c2i_unverified_entry, address c2i_no_clinit_check_entry) {\n-    AdapterHandlerEntry* entry = (AdapterHandlerEntry*)BasicHashtable<mtCode>::new_entry(fingerprint->compute_hash());\n-    entry->init(fingerprint, i2c_entry, c2i_entry, c2i_unverified_entry, c2i_no_clinit_check_entry);\n-    return entry;\n+  static unsigned int compute_hash(AdapterFingerPrint* const& fp) {\n+    return fp->compute_hash();\n@@ -2610,0 +2594,1 @@\n+};\n@@ -2611,22 +2596,13 @@\n-  \/\/ Insert an entry into the table\n-  void add(AdapterHandlerEntry* entry) {\n-    int index = hash_to_index(entry->hash());\n-    add_entry(index, entry);\n-  }\n-\n-  void free_entry(AdapterHandlerEntry* entry) {\n-    entry->deallocate();\n-    BasicHashtable<mtCode>::free_entry(entry);\n-  }\n-\n-  \/\/ Find a entry with the same fingerprint if it exists\n-  AdapterHandlerEntry* lookup(int total_args_passed, BasicType* sig_bt) {\n-    NOT_PRODUCT(_lookups++);\n-    AdapterFingerPrint fp(total_args_passed, sig_bt);\n-    unsigned int hash = fp.compute_hash();\n-    int index = hash_to_index(hash);\n-    for (AdapterHandlerEntry* e = bucket(index); e != NULL; e = e->next()) {\n-      NOT_PRODUCT(_buckets++);\n-      if (e->hash() == hash) {\n-        NOT_PRODUCT(_equals++);\n-        if (fp.equals(e->fingerprint())) {\n+\/\/ A hashtable mapping from AdapterFingerPrints to AdapterHandlerEntries\n+ResourceHashtable<AdapterFingerPrint*, AdapterHandlerEntry*, 293,\n+                  ResourceObj::C_HEAP, mtCode,\n+                  AdapterFingerPrint::compute_hash,\n+                  AdapterFingerPrint::equals> _adapter_handler_table;\n+\n+\/\/ Find a entry with the same fingerprint if it exists\n+static AdapterHandlerEntry* lookup(int total_args_passed, BasicType* sig_bt) {\n+  NOT_PRODUCT(_lookups++);\n+  assert_lock_strong(AdapterHandlerLibrary_lock);\n+  AdapterFingerPrint fp(total_args_passed, sig_bt);\n+  AdapterHandlerEntry** entry = _adapter_handler_table.get(&fp);\n+  if (entry != nullptr) {\n@@ -2634,2 +2610,2 @@\n-          if (fp.is_compact()) _compact++;\n-          _hits++;\n+    if (fp.is_compact()) _compact++;\n+    _hits++;\n@@ -2637,5 +2613,1 @@\n-          return e;\n-        }\n-      }\n-    }\n-    return NULL;\n+    return *entry;\n@@ -2643,0 +2615,2 @@\n+  return nullptr;\n+}\n@@ -2645,33 +2619,11 @@\n-  void print_statistics() {\n-    ResourceMark rm;\n-    int longest = 0;\n-    int empty = 0;\n-    int total = 0;\n-    int nonempty = 0;\n-    for (int index = 0; index < table_size(); index++) {\n-      int count = 0;\n-      for (AdapterHandlerEntry* e = bucket(index); e != NULL; e = e->next()) {\n-        count++;\n-      }\n-      if (count != 0) nonempty++;\n-      if (count == 0) empty++;\n-      if (count > longest) longest = count;\n-      total += count;\n-    }\n-    tty->print_cr(\"AdapterHandlerTable: empty %d longest %d total %d average %f\",\n-                  empty, longest, total, total \/ (double)nonempty);\n-    tty->print_cr(\"AdapterHandlerTable: lookups %d buckets %d equals %d hits %d compact %d\",\n-                  _lookups, _buckets, _equals, _hits, _compact);\n-  }\n-#endif\n-};\n-\n-\n-#ifndef PRODUCT\n-\n-int AdapterHandlerTable::_lookups;\n-int AdapterHandlerTable::_buckets;\n-int AdapterHandlerTable::_equals;\n-int AdapterHandlerTable::_hits;\n-int AdapterHandlerTable::_compact;\n-\n+static void print_table_statistics() {\n+  auto size = [&] (AdapterFingerPrint* key, AdapterHandlerEntry* a) {\n+    return sizeof(*key) + sizeof(*a);\n+  };\n+  TableStatistics ts = _adapter_handler_table.statistics_calculate(size);\n+  ts.print(tty, \"AdapterHandlerTable\");\n+  tty->print_cr(\"AdapterHandlerTable (table_size=%d, entries=%d)\",\n+                _adapter_handler_table.table_size(), _adapter_handler_table.number_of_entries());\n+  tty->print_cr(\"AdapterHandlerTable: lookups %d equals %d hits %d compact %d\",\n+                _lookups, _equals, _hits, _compact);\n+}\n@@ -2680,37 +2632,0 @@\n-class AdapterHandlerTableIterator : public StackObj {\n- private:\n-  AdapterHandlerTable* _table;\n-  int _index;\n-  AdapterHandlerEntry* _current;\n-\n-  void scan() {\n-    while (_index < _table->table_size()) {\n-      AdapterHandlerEntry* a = _table->bucket(_index);\n-      _index++;\n-      if (a != NULL) {\n-        _current = a;\n-        return;\n-      }\n-    }\n-  }\n-\n- public:\n-  AdapterHandlerTableIterator(AdapterHandlerTable* table): _table(table), _index(0), _current(NULL) {\n-    scan();\n-  }\n-  bool has_next() {\n-    return _current != NULL;\n-  }\n-  AdapterHandlerEntry* next() {\n-    if (_current != NULL) {\n-      AdapterHandlerEntry* result = _current;\n-      _current = _current->next();\n-      if (_current == NULL) scan();\n-      return result;\n-    } else {\n-      return NULL;\n-    }\n-  }\n-};\n-\n-\n@@ -2719,1 +2634,0 @@\n-AdapterHandlerTable* AdapterHandlerLibrary::_adapters = NULL;\n@@ -2737,1 +2651,2 @@\n-static void post_adapter_creation(const AdapterBlob* new_adapter, const AdapterHandlerEntry* entry) {\n+static void post_adapter_creation(const AdapterBlob* new_adapter,\n+                                  const AdapterHandlerEntry* entry) {\n@@ -2764,3 +2679,0 @@\n-    assert(_adapters == NULL, \"Initializing more than once\");\n-\n-    _adapters = new AdapterHandlerTable();\n@@ -2779,1 +2691,0 @@\n-\n@@ -2814,1 +2725,3 @@\n-  return _adapters->new_entry(fingerprint, i2c_entry, c2i_entry, c2i_unverified_entry, c2i_no_clinit_check_entry);\n+  \/\/ Insert an entry into the table\n+  return new AdapterHandlerEntry(fingerprint, i2c_entry, c2i_entry, c2i_unverified_entry,\n+                                 c2i_no_clinit_check_entry);\n@@ -2900,1 +2813,1 @@\n-  \/\/ the AdapterHandlerTable (it is not safe for concurrent readers\n+  \/\/ the _adapter_handler_table (it is not safe for concurrent readers\n@@ -2903,1 +2816,0 @@\n-  assert(_adapters != NULL, \"Uninitialized\");\n@@ -2925,1 +2837,1 @@\n-    entry = _adapters->lookup(total_args_passed, sig_bt);\n+    entry = lookup(total_args_passed, sig_bt);\n@@ -2935,1 +2847,1 @@\n-        _adapters->free_entry(comparison_entry);\n+        delete comparison_entry;\n@@ -3007,1 +2919,1 @@\n-                  _adapters->number_of_entries(), fingerprint->as_basic_args_string(),\n+                  _adapter_handler_table.number_of_entries(), fingerprint->as_basic_args_string(),\n@@ -3024,1 +2936,2 @@\n-    _adapters->add(entry);\n+    assert_lock_strong(AdapterHandlerLibrary_lock);\n+    _adapter_handler_table.put(fingerprint, entry);\n@@ -3054,1 +2967,1 @@\n-void AdapterHandlerEntry::deallocate() {\n+AdapterHandlerEntry::~AdapterHandlerEntry() {\n@@ -3343,6 +3256,7 @@\n-  AdapterHandlerTableIterator iter(_adapters);\n-  while (iter.has_next()) {\n-    AdapterHandlerEntry* a = iter.next();\n-    if (b == CodeCache::find_blob(a->get_i2c_entry())) return true;\n-  }\n-  return false;\n+  bool found = false;\n+  auto findblob = [&] (AdapterFingerPrint* key, AdapterHandlerEntry* a) {\n+    return (found = (b == CodeCache::find_blob(a->get_i2c_entry())));\n+  };\n+  assert_locked_or_safepoint(AdapterHandlerLibrary_lock);\n+  _adapter_handler_table.iterate(findblob);\n+  return found;\n@@ -3352,3 +3266,2 @@\n-  AdapterHandlerTableIterator iter(_adapters);\n-  while (iter.has_next()) {\n-    AdapterHandlerEntry* a = iter.next();\n+  bool found = false;\n+  auto findblob = [&] (AdapterFingerPrint* key, AdapterHandlerEntry* a) {\n@@ -3356,0 +3269,1 @@\n+      found = true;\n@@ -3357,2 +3271,4 @@\n-      a->print_adapter_on(tty);\n-      return;\n+      a->print_adapter_on(st);\n+      return true;\n+    } else {\n+      return false; \/\/ keep looking\n@@ -3360,2 +3276,4 @@\n-  }\n-  assert(false, \"Should have found handler\");\n+  };\n+  assert_locked_or_safepoint(AdapterHandlerLibrary_lock);\n+  _adapter_handler_table.iterate(findblob);\n+  assert(found, \"Should have found handler\");\n@@ -3384,1 +3302,1 @@\n-  _adapters->print_statistics();\n+  print_table_statistics();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":73,"deletions":155,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"utilities\/hashtable.hpp\"\n@@ -38,1 +37,0 @@\n-class AdapterHandlerTable;\n@@ -614,2 +612,1 @@\n-class AdapterHandlerEntry : public BasicHashtableEntry<mtCode> {\n-  friend class AdapterHandlerTable;\n+class AdapterHandlerEntry : public CHeapObj<mtCode> {\n@@ -632,6 +629,8 @@\n-  void init(AdapterFingerPrint* fingerprint, address i2c_entry, address c2i_entry, address c2i_unverified_entry, address c2i_no_clinit_check_entry) {\n-    _fingerprint = fingerprint;\n-    _i2c_entry = i2c_entry;\n-    _c2i_entry = c2i_entry;\n-    _c2i_unverified_entry = c2i_unverified_entry;\n-    _c2i_no_clinit_check_entry = c2i_no_clinit_check_entry;\n+  AdapterHandlerEntry(AdapterFingerPrint* fingerprint, address i2c_entry, address c2i_entry,\n+                      address c2i_unverified_entry,\n+                      address c2i_no_clinit_check_entry) :\n+    _fingerprint(fingerprint),\n+    _i2c_entry(i2c_entry),\n+    _c2i_entry(c2i_entry),\n+    _c2i_unverified_entry(c2i_unverified_entry),\n+    _c2i_no_clinit_check_entry(c2i_no_clinit_check_entry)\n@@ -639,1 +638,1 @@\n-    _saved_code_length = 0;\n+    , _saved_code_length(0)\n@@ -641,3 +640,1 @@\n-  }\n-\n-  void deallocate();\n+  { }\n@@ -645,2 +642,1 @@\n-  \/\/ should never be used\n-  AdapterHandlerEntry();\n+  ~AdapterHandlerEntry();\n@@ -659,4 +655,0 @@\n-  AdapterHandlerEntry* next() {\n-    return (AdapterHandlerEntry*)BasicHashtableEntry<mtCode>::next();\n-  }\n-\n@@ -677,1 +669,0 @@\n-  static AdapterHandlerTable* _adapters;\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"}]}