{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,3 +122,3 @@\n-        if (fm instanceof StandardJavaFileManager)\n-            return new WrappedStandardJavaFileManager((StandardJavaFileManager) fm);\n-        return new WrappedJavaFileManager(fm);\n+        return (fm instanceof StandardJavaFileManager standardJavaFileManager) ?\n+                new WrappedStandardJavaFileManager(standardJavaFileManager) :\n+                new WrappedJavaFileManager(fm);\n@@ -134,4 +134,2 @@\n-        if (fo instanceof WrappedFileObject)\n-            return ((WrappedFileObject) fo).clientFileObject;\n-        else\n-            return fo;\n+        return (fo instanceof WrappedFileObject wrappedFileObject) ?\n+                wrappedFileObject.clientFileObject : fo;\n@@ -154,4 +152,2 @@\n-        if (fo instanceof WrappedJavaFileObject)\n-            return ((JavaFileObject) ((WrappedJavaFileObject) fo).clientFileObject);\n-        else\n-            return fo;\n+        return (fo instanceof WrappedJavaFileObject wrappedJavaFileObject) ?\n+                ((JavaFileObject) wrappedJavaFileObject.clientFileObject) : fo;\n@@ -173,4 +169,2 @@\n-        if (l instanceof WrappedTaskListener)\n-            return ((WrappedTaskListener) l).clientTaskListener;\n-        else\n-            return l;\n+        return (l instanceof WrappedTaskListener wrappedTaskListener) ?\n+                wrappedTaskListener.clientTaskListener : l;\n@@ -188,6 +182,2 @@\n-        if (diagnostic instanceof JCDiagnostic) {\n-            JCDiagnostic d = (JCDiagnostic) diagnostic;\n-            return (Diagnostic<T>) new DiagnosticSourceUnwrapper(d);\n-        } else {\n-            return diagnostic;\n-        }\n+        return (diagnostic instanceof JCDiagnostic jcDiagnostic) ?\n+                (Diagnostic<T>) new DiagnosticSourceUnwrapper(jcDiagnostic) : diagnostic;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/ClientCodeWrapper.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -130,4 +130,3 @@\n-        if (other instanceof JavacScope) {\n-            JavacScope s = (JavacScope) other;\n-            return (env.equals(s.env)\n-                && isStarImportScope() == s.isStarImportScope());\n+        if (other instanceof JavacScope javacScope) {\n+            return (env.equals(javacScope.env)\n+                && isStarImportScope() == javacScope.isStarImportScope());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacScope.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,1 +235,1 @@\n-        if (fileManager instanceof BaseFileManager && ((BaseFileManager) fileManager).autoClose) {\n+        if (fileManager instanceof BaseFileManager baseFileManager && baseFileManager.autoClose) {\n@@ -324,1 +324,1 @@\n-                if (cu instanceof JCCompilationUnit) {\n+                if (cu instanceof JCCompilationUnit compilationUnit) {\n@@ -327,1 +327,1 @@\n-                    roots.append((JCCompilationUnit)cu);\n+                    roots.append(compilationUnit);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTaskImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -298,4 +298,3 @@\n-                if (tree instanceof LetExpr) {\n-                    LetExpr le = (LetExpr) tree;\n-                    scan(le.defs, syms);\n-                    scan(le.expr, syms);\n+                if (tree instanceof LetExpr letExpr) {\n+                    scan(letExpr.defs, syms);\n+                    scan(letExpr.expr, syms);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTaskPool.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,2 +176,2 @@\n-                if (fileManager instanceof BaseFileManager) {\n-                    ((BaseFileManager) fileManager).autoClose = true;\n+                if (fileManager instanceof BaseFileManager baseFileManager) {\n+                    baseFileManager.autoClose = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,1 @@\n-        if (!(task instanceof BasicJavacTask))\n+        if (!(task instanceof BasicJavacTask basicJavacTask))\n@@ -193,1 +193,1 @@\n-        return instance(((BasicJavacTask)task).getContext());\n+        return instance(basicJavacTask.getContext());\n@@ -198,1 +198,1 @@\n-        if (!(env instanceof JavacProcessingEnvironment))\n+        if (!(env instanceof JavacProcessingEnvironment javacProcessingEnvironment))\n@@ -200,1 +200,1 @@\n-        return instance(((JavacProcessingEnvironment)env).getContext());\n+        return instance(javacProcessingEnvironment.getContext());\n@@ -237,2 +237,2 @@\n-        if (t instanceof JavacTaskImpl)\n-            javacTaskImpl = (JavacTaskImpl) t;\n+        if (t instanceof JavacTaskImpl taskImpl)\n+            javacTaskImpl = taskImpl;\n@@ -267,2 +267,2 @@\n-                    if (tree instanceof DCEndPosTree) {\n-                        int endPos = ((DCEndPosTree) tree).getEndPos(dcComment);\n+                    if (tree instanceof DCEndPosTree<?> dcEndPosTree) {\n+                        int endPos = dcEndPosTree.getEndPos(dcComment);\n@@ -434,2 +434,2 @@\n-        if (tree instanceof DCReference)\n-            return attributeDocReference(path.getTreePath(), ((DCReference) tree));\n+        if (tree instanceof DCReference dcReference)\n+            return attributeDocReference(path.getTreePath(), dcReference);\n@@ -437,2 +437,2 @@\n-            if (path.getParentPath().getLeaf() instanceof DCParam) {\n-                return attributeParamIdentifier(path.getTreePath(), (DCParam) path.getParentPath().getLeaf());\n+            if (path.getParentPath().getLeaf() instanceof DCParam dcParam) {\n+                return attributeParamIdentifier(path.getTreePath(), dcParam);\n@@ -447,2 +447,2 @@\n-        if (tree instanceof DCReference) {\n-            JCTree qexpr = ((DCReference)tree).qualifierExpression;\n+        if (tree instanceof DCReference dcReference) {\n+            JCTree qexpr = dcReference.qualifierExpression;\n@@ -454,1 +454,1 @@\n-                    Type t = attr.attribType(((DCReference) tree).qualifierExpression, env);\n+                    Type t = attr.attribType(dcReference.qualifierExpression, env);\n@@ -552,2 +552,2 @@\n-                    while (e instanceof ArrayType)\n-                        e = ((ArrayType) e).elemtype;\n+                    while (e instanceof ArrayType arrayType)\n+                        e = arrayType.elemtype;\n@@ -811,4 +811,3 @@\n-        if (t instanceof JCTree.JCCompilationUnit && leaf instanceof JCTree) {\n-            JCCompilationUnit cu = (JCCompilationUnit) t;\n-            if (cu.docComments != null) {\n-                return cu.docComments.getCommentText((JCTree) leaf);\n+        if (t instanceof JCTree.JCCompilationUnit compilationUnit && leaf instanceof JCTree tree) {\n+            if (compilationUnit.docComments != null) {\n+                return compilationUnit.docComments.getCommentText(tree);\n@@ -824,4 +823,3 @@\n-        if (t instanceof JCTree.JCCompilationUnit && leaf instanceof JCTree) {\n-            JCCompilationUnit cu = (JCCompilationUnit) t;\n-            if (cu.docComments != null) {\n-                return cu.docComments.getCommentTree((JCTree) leaf);\n+        if (t instanceof JCTree.JCCompilationUnit compilationUnit && leaf instanceof JCTree tree) {\n+            if (compilationUnit.docComments != null) {\n+                return compilationUnit.docComments.getCommentTree(tree);\n@@ -856,5 +854,3 @@\n-        if (scope instanceof JavacScope && type instanceof ClassSymbol) {\n-            Env<AttrContext> env = ((JavacScope) scope).env;\n-            return resolve.isAccessible(env, (ClassSymbol)type, true);\n-        } else\n-            return false;\n+        return (scope instanceof JavacScope javacScope)\n+                && (type instanceof ClassSymbol classSymbol)\n+                && resolve.isAccessible(javacScope.env, classSymbol, true);\n@@ -865,7 +861,4 @@\n-        if (scope instanceof JavacScope\n-                && member instanceof Symbol\n-                && type instanceof com.sun.tools.javac.code.Type) {\n-            Env<AttrContext> env = ((JavacScope) scope).env;\n-            return resolve.isAccessible(env, (com.sun.tools.javac.code.Type)type, (Symbol)member, true);\n-        } else\n-            return false;\n+        return (scope instanceof JavacScope javacScope)\n+                && (member instanceof Symbol symbol)\n+                && (type instanceof com.sun.tools.javac.code.Type codeType)\n+                && resolve.isAccessible(javacScope.env, codeType, symbol, true);\n@@ -1074,2 +1067,1 @@\n-        if (fileObject instanceof JavaFileObject) {\n-            jfo = (JavaFileObject) fileObject;\n+        if (fileObject instanceof JavaFileObject javaFileObject) {\n@@ -1077,1 +1069,1 @@\n-            return jfo;\n+            return javaFileObject;\n@@ -1220,2 +1212,2 @@\n-        if (errorType instanceof com.sun.tools.javac.code.Type.ErrorType) {\n-            return ((com.sun.tools.javac.code.Type.ErrorType)errorType).getOriginalType();\n+        if (errorType instanceof com.sun.tools.javac.code.Type.ErrorType targetErrorType) {\n+            return targetErrorType.getOriginalType();\n@@ -1223,1 +1215,1 @@\n-        if (errorType instanceof com.sun.tools.javac.code.Type.ClassType &&\n+        if (errorType instanceof com.sun.tools.javac.code.Type.ClassType classType &&\n@@ -1225,4 +1217,3 @@\n-            ClassType ct = (ClassType) errorType;\n-            return extraType2OriginalMap.computeIfAbsent(ct, tt ->\n-                    new ClassType(ct.getEnclosingType(), ct.typarams_field,\n-                                  ct.tsym, ct.getMetadata()) {\n+            return extraType2OriginalMap.computeIfAbsent(classType, tt ->\n+                    new ClassType(classType.getEnclosingType(), classType.typarams_field,\n+                            classType.tsym, classType.getMetadata()) {\n@@ -1230,1 +1221,1 @@\n-                        public Type baseType() { return ct; }\n+                        public Type baseType() { return classType; }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":40,"deletions":49,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,2 +232,2 @@\n-        if (fo instanceof PathFileObject) {\n-            Path path = ((PathFileObject) fo).getPath();\n+        if (fo instanceof PathFileObject pathFileObject) {\n+            Path path = pathFileObject.getPath();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JRTIndex.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -793,2 +793,2 @@\n-        if (file instanceof PathFileObject) {\n-            return ((PathFileObject) file).inferBinaryName(path);\n+        if (file instanceof PathFileObject pathFileObject) {\n+            return pathFileObject.inferBinaryName(path);\n@@ -803,2 +803,2 @@\n-        if (a instanceof PathFileObject && b instanceof PathFileObject)\n-            return ((PathFileObject) a).isSameFile((PathFileObject) b);\n+        if (a instanceof PathFileObject pathFileObjectA && b instanceof PathFileObject pathFileObjectB)\n+            return pathFileObjectA.isSameFile(pathFileObjectB);\n@@ -911,2 +911,2 @@\n-                if (sibling != null && sibling instanceof PathFileObject) {\n-                    return ((PathFileObject) sibling).getSibling(baseName);\n+                if (sibling != null && sibling instanceof PathFileObject pathFileObject) {\n+                    return pathFileObject.getSibling(baseName);\n@@ -946,2 +946,2 @@\n-        if (files instanceof Collection<?>)\n-            result = new ArrayList<>(((Collection<?>)files).size());\n+        if (files instanceof Collection<?> collection)\n+            result = new ArrayList<>(collection.size());\n@@ -960,3 +960,1 @@\n-    public Iterable<? extends JavaFileObject> getJavaFileObjectsFromPaths(\n-        Collection<? extends Path> paths)\n-    {\n+    public Iterable<? extends JavaFileObject> getJavaFileObjectsFromPaths(Collection<? extends Path> paths) {\n@@ -964,3 +962,6 @@\n-        if (paths instanceof Collection<?>)\n-            result = new ArrayList<>(((Collection<?>)paths).size());\n-        else\n+        if (paths != null) {\n+            result = new ArrayList<>(paths.size());\n+            for (Path p: paths)\n+                result.add(PathFileObject.forSimplePath(this,\n+                        fsInfo.getCanonicalFile(p), p));\n+        } else {\n@@ -968,3 +969,1 @@\n-        for (Path p: paths)\n-            result.add(PathFileObject.forSimplePath(this,\n-                    fsInfo.getCanonicalFile(p), p));\n+        }\n@@ -1103,7 +1102,4 @@\n-          if (o == null || !(o instanceof PathAndContainer)) {\n-            return false;\n-          }\n-          PathAndContainer that = (PathAndContainer) o;\n-          return path.equals(that.path)\n-              && container.equals(that.container)\n-              && index == that.index;\n+            return (o instanceof PathAndContainer pathAndContainer)\n+                    && path.equals(pathAndContainer.path)\n+                    && container.equals(pathAndContainer.container)\n+                    && index == pathAndContainer.index;\n@@ -1163,1 +1159,1 @@\n-        if (!(fo instanceof PathFileObject))\n+        if (!(fo instanceof PathFileObject pathFileObject))\n@@ -1165,1 +1161,1 @@\n-        Path p = Locations.normalize(((PathFileObject) fo).path);\n+        Path p = Locations.normalize(pathFileObject.path);\n@@ -1193,2 +1189,2 @@\n-        if (file instanceof PathFileObject) {\n-            return ((PathFileObject) file).path;\n+        if (file instanceof PathFileObject pathFileObject) {\n+            return pathFileObject.path;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":24,"deletions":28,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1235,4 +1235,3 @@\n-                    if (locn instanceof ModuleLocationHandler) {\n-                        ModuleLocationHandler l = (ModuleLocationHandler) locn;\n-                        if (!moduleTable.nameMap.containsKey(l.moduleName)) {\n-                            moduleTable.add(l);\n+                    if (locn instanceof ModuleLocationHandler moduleLocationHandler) {\n+                        if (!moduleTable.nameMap.containsKey(moduleLocationHandler.moduleName)) {\n+                            moduleTable.add(moduleLocationHandler);\n@@ -2203,2 +2202,2 @@\n-        return (location instanceof LocationHandler)\n-                ? (LocationHandler) location\n+        return (location instanceof LocationHandler locationHandler)\n+                ? locationHandler\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/Locations.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -535,1 +535,1 @@\n-        return (other instanceof PathFileObject && path.equals(((PathFileObject) other).path));\n+        return (other instanceof PathFileObject pathFileObject && path.equals(pathFileObject.path));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/PathFileObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,3 +76,1 @@\n-        if (!(other instanceof RelativePath))\n-            return false;\n-         return path.equals(((RelativePath) other).path);\n+        return (other instanceof RelativePath relativePath) && path.equals(relativePath.path);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/RelativePath.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -481,5 +481,4 @@\n-        if (fm instanceof StandardJavaFileManager) {\n-            StandardJavaFileManager sfm = (StandardJavaFileManager) fileManager;\n-            if (sfm.hasLocation(StandardLocation.CLASS_OUTPUT)) {\n-                Path outDir = sfm.getLocationAsPaths(StandardLocation.CLASS_OUTPUT).iterator().next();\n-                if (sfm.hasLocation(StandardLocation.MODULE_SOURCE_PATH)) {\n+        if (fm instanceof StandardJavaFileManager standardJavaFileManager) {\n+            if (standardJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT)) {\n+                Path outDir = standardJavaFileManager.getLocationAsPaths(StandardLocation.CLASS_OUTPUT).iterator().next();\n+                if (standardJavaFileManager.hasLocation(StandardLocation.MODULE_SOURCE_PATH)) {\n@@ -568,1 +567,1 @@\n-            if (fm instanceof BaseFileManager) {\n+            if (fm instanceof BaseFileManager baseFileManager) {\n@@ -570,1 +569,1 @@\n-                    if (((BaseFileManager) fm).isDefaultBootClassPath())\n+                    if (baseFileManager.isDefaultBootClassPath())\n@@ -573,1 +572,1 @@\n-                    if (((BaseFileManager) fm).isDefaultSystemModulesPath())\n+                    if (baseFileManager.isDefaultSystemModulesPath())\n@@ -917,4 +916,4 @@\n-        if (diag instanceof JCDiagnostic.Error) {\n-            log.error((JCDiagnostic.Error)diag);\n-        } else if (diag instanceof JCDiagnostic.Warning){\n-            log.warning((JCDiagnostic.Warning)diag);\n+        if (diag instanceof JCDiagnostic.Error errorDiag) {\n+            log.error(errorDiag);\n+        } else if (diag instanceof JCDiagnostic.Warning warningDiag){\n+            log.warning(warningDiag);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,3 +54,2 @@\n-        JavaFileManager nue = originalFM instanceof StandardJavaFileManager\n-                ? new DelegatingSJFM(releaseFM,\n-                                                        (StandardJavaFileManager) originalFM)\n+        JavaFileManager nue = originalFM instanceof StandardJavaFileManager standardJavaFileManager\n+                ? new DelegatingSJFM(releaseFM, standardJavaFileManager)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/DelegatingJavaFileManager.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1089,2 +1089,2 @@\n-                    if (defs.head instanceof JCClassDecl)\n-                        cdefs.append((JCClassDecl)defs.head);\n+                    if (defs.head instanceof JCClassDecl classDecl)\n+                        cdefs.append(classDecl);\n@@ -1580,2 +1580,2 @@\n-                if (untranslated instanceof JCClassDecl &&\n-                    rootClasses.contains((JCClassDecl)untranslated)) {\n+                if (untranslated instanceof JCClassDecl classDecl &&\n+                    rootClasses.contains(classDecl)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,5 +261,5 @@\n-        JavaFileManager undel = fileManager instanceof DelegatingJavaFileManager ?\n-                ((DelegatingJavaFileManager) fileManager).getBaseFileManager() : fileManager;\n-        if (undel instanceof BaseFileManager) {\n-            ((BaseFileManager) undel).setContext(context); \/\/ reinit with options\n-            ok &= ((BaseFileManager) undel).handleOptions(args.getDeferredFileManagerOptions());\n+        JavaFileManager undel = fileManager instanceof DelegatingJavaFileManager delegatingJavaFileManager ?\n+                delegatingJavaFileManager.getBaseFileManager() : fileManager;\n+        if (undel instanceof BaseFileManager baseFileManager) {\n+            baseFileManager.setContext(context); \/\/ reinit with options\n+            ok &= baseFileManager.handleOptions(args.getDeferredFileManagerOptions());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Main.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,2 +249,2 @@\n-            if (e instanceof Attribute.UnresolvedClass)\n-                value = new MirroredTypeExceptionProxy(((Attribute.UnresolvedClass)e).classType);\n+            if (e instanceof Attribute.UnresolvedClass unresolvedClass)\n+                value = new MirroredTypeExceptionProxy(unresolvedClass.classType);\n@@ -305,2 +305,2 @@\n-                   obj instanceof MirroredTypeExceptionProxy &&\n-                   type.equals(((MirroredTypeExceptionProxy) obj).type);\n+                   obj instanceof MirroredTypeExceptionProxy proxy &&\n+                   type.equals(proxy.type);\n@@ -350,3 +350,2 @@\n-                   obj instanceof MirroredTypesExceptionProxy &&\n-                   types.equals(\n-                      ((MirroredTypesExceptionProxy) obj).types);\n+                   obj instanceof MirroredTypesExceptionProxy proxy &&\n+                   types.equals(proxy.types);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/AnnotationProxyMaker.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        javacTaskImpl = t instanceof JavacTaskImpl ? (JavacTaskImpl) t : null;\n+        javacTaskImpl = t instanceof JavacTaskImpl taskImpl ? taskImpl : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -332,1 +332,1 @@\n-        if (!(elem instanceof MethodSymbol))\n+        if (!(elem instanceof MethodSymbol methodSymbol))\n@@ -335,2 +335,1 @@\n-        MethodSymbol m = (MethodSymbol) elem;\n-        ClassSymbol origin = (ClassSymbol) m.owner;\n+        ClassSymbol origin = (ClassSymbol) methodSymbol.owner;\n@@ -342,2 +341,2 @@\n-                for (Symbol sym : c.members().getSymbolsByName(m.name)) {\n-                    if (sym.kind == MTH && m.overrides(sym, origin, types, true)) {\n+                for (Symbol sym : c.members().getSymbolsByName(methodSymbol.name)) {\n+                    if (sym.kind == MTH && methodSymbol.overrides(sym, origin, types, true)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,2 +242,2 @@\n-                    if (file instanceof SigJavaFileObject) {\n-                        file = ((SigJavaFileObject) file).getDelegate();\n+                    if (file instanceof SigJavaFileObject sigJavaFileObject) {\n+                        file = sigJavaFileObject.getDelegate();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/platform\/JDKPlatformProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -503,2 +503,2 @@\n-                if (node.isSelfClosing() && last instanceof AttributeTree\n-                        && ((AttributeTree) last).getValueKind() == ValueKind.UNQUOTED)\n+                if (node.isSelfClosing() && last instanceof AttributeTree attributeTree\n+                        && attributeTree.getValueKind() == ValueKind.UNQUOTED)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2181,1 +2181,1 @@\n-            return pattern instanceof JCPattern ? (JCPattern) pattern : null;\n+            return pattern instanceof JCPattern jcPattern ? jcPattern : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -704,3 +704,3 @@\n-                    if (vartype instanceof JCAnnotatedType) {\n-                        tas = ((JCAnnotatedType)vartype).annotations;\n-                        vartype = ((JCAnnotatedType)vartype).underlyingType;\n+                    if (vartype instanceof JCAnnotatedType annotatedType) {\n+                        tas = annotatedType.annotations;\n+                        vartype = annotatedType.underlyingType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,2 +134,2 @@\n-                || (node instanceof JCExpressionStatement\n-                    && ((JCExpressionStatement)node).expr instanceof JCErroneous),\n+                || (node instanceof JCExpressionStatement expressionStatement\n+                    && expressionStatement.expr instanceof JCErroneous),\n@@ -889,2 +889,2 @@\n-        } else if (value instanceof Character) {\n-            int v = (int) (((Character) value).toString().charAt(0));\n+        } else if (value instanceof Character charVal) {\n+            int v = charVal.toString().charAt(0);\n@@ -902,2 +902,2 @@\n-        } else if (value instanceof Boolean) {\n-            int v = ((Boolean) value) ? 1 : 0;\n+        } else if (value instanceof Boolean boolVal) {\n+            int v = boolVal ? 1 : 0;\n@@ -924,2 +924,2 @@\n-            if (e instanceof UnresolvedClass) {\n-                result = ClassLiteral(((UnresolvedClass) e).classType).setType(syms.classType);\n+            if (e instanceof UnresolvedClass unresolvedClass) {\n+                result = ClassLiteral(unresolvedClass.classType).setType(syms.classType);\n@@ -931,2 +931,2 @@\n-            if (compound instanceof Attribute.TypeCompound) {\n-                result = visitTypeCompoundInternal((Attribute.TypeCompound) compound);\n+            if (compound instanceof Attribute.TypeCompound typeCompound) {\n+                result = visitTypeCompoundInternal(typeCompound);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,2 +151,2 @@\n-        else if (fo instanceof PathFileObject)\n-            return ((PathFileObject) fo).getShortName();\n+        else if (fo instanceof PathFileObject pathFileObject)\n+            return pathFileObject.getShortName();\n@@ -181,1 +181,1 @@\n-        if (arg instanceof JCDiagnostic) {\n+        if (arg instanceof JCDiagnostic diagnostic) {\n@@ -185,1 +185,1 @@\n-                s = formatMessage((JCDiagnostic)arg, l);\n+                s = formatMessage(diagnostic, l);\n@@ -192,2 +192,2 @@\n-        else if (arg instanceof JCExpression) {\n-            return expr2String((JCExpression)arg);\n+        else if (arg instanceof JCExpression expression) {\n+            return expr2String(expression);\n@@ -195,2 +195,2 @@\n-        else if (arg instanceof Iterable<?> && !(arg instanceof Path)) {\n-            return formatIterable(d, (Iterable<?>)arg, l);\n+        else if (arg instanceof Iterable<?> iterable && !(arg instanceof Path)) {\n+            return formatIterable(d, iterable, l);\n@@ -198,2 +198,2 @@\n-        else if (arg instanceof Type) {\n-            return printer.visit((Type)arg, l);\n+        else if (arg instanceof Type type) {\n+            return printer.visit(type, l);\n@@ -201,2 +201,2 @@\n-        else if (arg instanceof Symbol) {\n-            return printer.visit((Symbol)arg, l);\n+        else if (arg instanceof Symbol symbol) {\n+            return printer.visit(symbol, l);\n@@ -204,2 +204,2 @@\n-        else if (arg instanceof JavaFileObject) {\n-            return ((JavaFileObject)arg).getName();\n+        else if (arg instanceof JavaFileObject javaFileObject) {\n+            return javaFileObject.getName();\n@@ -207,2 +207,2 @@\n-        else if (arg instanceof Profile) {\n-            return ((Profile)arg).name;\n+        else if (arg instanceof Profile profile) {\n+            return profile.name;\n@@ -210,2 +210,2 @@\n-        else if (arg instanceof Option) {\n-            return ((Option)arg).primaryName;\n+        else if (arg instanceof Option option) {\n+            return option.primaryName;\n@@ -213,2 +213,2 @@\n-        else if (arg instanceof Formattable) {\n-            return ((Formattable)arg).toString(l, messages);\n+        else if (arg instanceof Formattable formattable) {\n+            return formattable.toString(l, messages);\n@@ -216,2 +216,2 @@\n-        else if (arg instanceof Target) {\n-            return ((Target)arg).name;\n+        else if (arg instanceof Target target) {\n+            return target.name;\n@@ -219,2 +219,2 @@\n-        else if (arg instanceof Source) {\n-            return ((Source)arg).name;\n+        else if (arg instanceof Source source) {\n+            return source.name;\n@@ -222,1 +222,1 @@\n-        else if (arg instanceof Tag) {\n+        else if (arg instanceof Tag tag) {\n@@ -224,1 +224,1 @@\n-                                                  StringUtils.toLowerCase(((Tag) arg).name()));\n+                                                  StringUtils.toLowerCase(tag.name()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractDiagnosticFormatter.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n-        if (value instanceof Integer) {\n-            int i = (Integer) value;\n+        if (value instanceof Integer intVal) {\n+            int i = intVal;\n@@ -72,2 +72,2 @@\n-        if (value instanceof String)\n-            return formatString((String) value);\n+        if (value instanceof String str)\n+            return formatString(str);\n@@ -83,7 +83,7 @@\n-        if (value instanceof Byte)      return formatByte((Byte) value);\n-        if (value instanceof Short)     return formatShort((Short) value);\n-        if (value instanceof Long)      return formatLong((Long) value);\n-        if (value instanceof Float)     return formatFloat((Float) value);\n-        if (value instanceof Double)    return formatDouble((Double) value);\n-        if (value instanceof Character) return formatChar((Character) value);\n-        if (value instanceof String)    return formatString((String) value);\n+        if (value instanceof Byte byteVal)      return formatByte(byteVal);\n+        if (value instanceof Short shortVal)     return formatShort(shortVal);\n+        if (value instanceof Long longVal)      return formatLong(longVal);\n+        if (value instanceof Float floatVal)     return formatFloat(floatVal);\n+        if (value instanceof Double doubleVal)    return formatDouble(doubleVal);\n+        if (value instanceof Character charVal) return formatChar(charVal);\n+        if (value instanceof String strVal)    return formatString(strVal);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Constants.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,2 +148,1 @@\n-        if (o instanceof Factory<?>) {\n-            Factory<?> fac = (Factory<?>)o;\n+        if (o instanceof Factory<?> fac) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Context.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,1 +205,1 @@\n-                return obj instanceof Node && data.equals(((Node) obj).data);\n+                return obj instanceof Node node && data.equals(node.data);\n@@ -404,2 +404,2 @@\n-                if (node instanceof CompletionNode) {\n-                    if (((CompletionNode) node).ck != ck) {\n+                if (node instanceof CompletionNode completionNode) {\n+                    if (completionNode.ck != ck) {\n@@ -413,2 +413,2 @@\n-                if (to instanceof CompletionNode) {\n-                    if (((CompletionNode) to).ck != ck) {\n+                if (to instanceof CompletionNode completionNode) {\n+                    if (completionNode.ck != ck) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Dependencies.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,4 +186,3 @@\n-        if (cs instanceof CharBuffer) {\n-            CharBuffer cb = (CharBuffer) cs;\n-            buf = JavacFileManager.toArray(cb);\n-            bufLen = cb.limit();\n+        if (cs instanceof CharBuffer charBuffer) {\n+            buf = JavacFileManager.toArray(charBuffer);\n+            bufLen = charBuffer.limit();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/DiagnosticSource.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,2 +290,2 @@\n-                            return (o instanceof Fragment) ?\n-                                    fragment((Fragment)o) : o;\n+                            return (o instanceof Fragment frag) ?\n+                                    fragment(frag) : o;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -361,3 +361,3 @@\n-        if (other instanceof List<?>)\n-            return equals(this, (List<?>)other);\n-        if (other instanceof java.util.List<?>) {\n+        if (other instanceof List<?> javacList)\n+            return equals(this, javacList);\n+        if (other instanceof java.util.List<?> javaUtilList) {\n@@ -365,1 +365,1 @@\n-            Iterator<?> oIter = ((java.util.List<?>) other).iterator();\n+            Iterator<?> oIter = javaUtilList.iterator();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/List.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -551,2 +551,2 @@\n-                if (o instanceof JCDiagnostic) {\n-                    getCodeRecursive(buf, (JCDiagnostic)o);\n+                if (o instanceof JCDiagnostic diagnostic) {\n+                    getCodeRecursive(buf, diagnostic);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,3 @@\n-        return\n-            other instanceof Pair<?,?> &&\n-            Objects.equals(fst, ((Pair<?,?>)other).fst) &&\n-            Objects.equals(snd, ((Pair<?,?>)other).snd);\n+        return other instanceof Pair<?,?> pair &&\n+            Objects.equals(fst, pair.fst) &&\n+            Objects.equals(snd, pair.snd);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Pair.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,1 @@\n-        } else if (arg instanceof JCExpression) {\n+        } else if (arg instanceof JCExpression expression) {\n@@ -160,5 +160,5 @@\n-            s = \"@\" + rawDiagnosticPosHelper.getPosition((JCExpression)arg);\n-        } else if (arg instanceof PathFileObject) {\n-            s = ((PathFileObject) arg).getShortName();\n-        } else if (arg instanceof Tag) {\n-            s = \"compiler.misc.tree.tag.\" + StringUtils.toLowerCase(((Tag) arg).name());\n+            s = \"@\" + rawDiagnosticPosHelper.getPosition(expression);\n+        } else if (arg instanceof PathFileObject pathFileObject) {\n+            s = pathFileObject.getShortName();\n+        } else if (arg instanceof Tag tag) {\n+            s = \"compiler.misc.tree.tag.\" + StringUtils.toLowerCase(tag.name());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/RawDiagnosticFormatter.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,2 +183,2 @@\n-        if (arg instanceof Type) {\n-            preprocessType((Type)arg);\n+        if (arg instanceof Type type) {\n+            preprocessType(type);\n@@ -186,2 +186,2 @@\n-        else if (arg instanceof Symbol) {\n-            preprocessSymbol((Symbol)arg);\n+        else if (arg instanceof Symbol symbol) {\n+            preprocessSymbol(symbol);\n@@ -189,2 +189,2 @@\n-        else if (arg instanceof JCDiagnostic) {\n-            preprocessDiagnostic((JCDiagnostic)arg);\n+        else if (arg instanceof JCDiagnostic diagnostic) {\n+            preprocessDiagnostic(diagnostic);\n@@ -192,2 +192,2 @@\n-        else if (arg instanceof Iterable<?> && !(arg instanceof Path)) {\n-            for (Object o : (Iterable<?>)arg) {\n+        else if (arg instanceof Iterable<?> iterable && !(arg instanceof Path)) {\n+            for (Object o : iterable) {\n@@ -559,2 +559,2 @@\n-                while ((bound instanceof ErrorType))\n-                    bound = ((ErrorType)bound).getOriginalType();\n+                while ((bound instanceof ErrorType errorType))\n+                    bound = errorType.getOriginalType();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/RichDiagnosticFormatter.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,4 +206,3 @@\n-            if (other instanceof Name)\n-                return\n-                    table == ((Name)other).table && index == ((Name) other).getIndex();\n-            else return false;\n+            return (other instanceof Name name)\n+                    && table == name.table\n+                    && index == name.getIndex();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/SharedNameTable.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}