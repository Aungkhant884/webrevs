{"files":[{"patch":"@@ -130,0 +130,1 @@\n+        resultChanged(null);\n@@ -172,12 +173,10 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-            SwingUtilities.invokeLater(new Runnable() {\n-                @Override\n-                public void run() {\n-                if (p != null) {\n-                    InputGraph graph = p.getGraph();\n-                    if (graph != null) {\n-                        Group g = graph.getGroup();\n-                        rootNode.update(graph, g.getMethod());\n-                        return;\n-                    }\n+    public void resultChanged(LookupEvent e) {\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                provider.getChangedEvent().addListener((InputGraphProvider graphProvider) -> resultChanged(null));\n+                InputGraph graph = provider.getGraph();\n+                if (graph != null) {\n+                    Group g = graph.getGroup();\n+                    rootNode.update(graph, g.getMethod());\n+                    return;\n@@ -185,4 +184,4 @@\n-                        rootNode.update(null, null);\n-                    }\n-            });\n-\n+            }\n+            rootNode = new MethodNode(null, null, \"\");\n+            manager.setRootContext(rootNode);\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeViewTopComponent.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/SelectBytecodesAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+        resultChanged(null);\n@@ -137,10 +138,10 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-        if (p != null) {\n-            SwingUtilities.invokeLater(new Runnable() {\n-\n-                public void run() {\n-                    InputGraph g = p.getGraph();\n-                    if (g != null) {\n-                        scene.setGraph(g);\n-                    }\n+    @Override\n+    public void resultChanged(LookupEvent e) {\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                provider.getChangedEvent().addListener((InputGraphProvider graphProvider) -> resultChanged(null));\n+                InputGraph graph = provider.getGraph();\n+                if (graph != null) {\n+                    scene.setGraph(graph);\n+                    return;\n@@ -148,2 +149,3 @@\n-            });\n-        }\n+            }\n+            scene.setGraph(new InputGraph(\"\"));\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -147,22 +147,0 @@\n-    \/\/ Fetch and select the latest active graph.\n-    private void updateGraphSelection() {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n-        if (p != null) {\n-            try {\n-                InputGraph graph = p.getGraph();\n-                if (graph.isDiffGraph()) {\n-                    EditorTopComponent editor = EditorTopComponent.getActive();\n-                    if (editor != null) {\n-                        InputGraph firstGraph = editor.getModel().getFirstGraph();\n-                        InputGraph secondGraph = editor.getModel().getSecondGraph();\n-                        manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)});\n-                    }\n-                } else {\n-                    manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(graph)});\n-                }\n-            } catch (Exception e) {\n-                Exceptions.printStackTrace(e);\n-            }\n-        }\n-    }\n-\n@@ -223,1 +201,1 @@\n-        updateGraphSelection();\n+        resultChanged(null);\n@@ -257,4 +235,0 @@\n-        \/\/ Highlight the focused graph, if available, in the outline.\n-        if (result.allItems().isEmpty()) {\n-            return;\n-        }\n@@ -263,1 +237,25 @@\n-        SwingUtilities.invokeLater(() -> updateGraphSelection());\n+        SwingUtilities.invokeLater(() -> {\n+            GraphNode[] selection = new  GraphNode[]{};\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                \/\/ Try to fetch and select the latest active graph.\n+                InputGraph graph = provider.getGraph();\n+                if (graph != null) {\n+                    if (graph.isDiffGraph()) {\n+                        EditorTopComponent editor = EditorTopComponent.getActive();\n+                        if (editor != null) {\n+                            InputGraph firstGraph = editor.getModel().getFirstGraph();\n+                            InputGraph secondGraph = editor.getModel().getSecondGraph();\n+                            selection = new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)};\n+                        }\n+                    } else {\n+                        selection = new GraphNode[]{FolderNode.getGraphNode(graph)};\n+                    }\n+                }\n+            }\n+            try {\n+                manager.setSelectedNodes(selection);\n+            } catch (Exception e) {\n+                Exceptions.printStackTrace(e);\n+            }\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -37,0 +38,2 @@\n+    ChangedEvent<InputGraphProvider> getChangedEvent();\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/services\/InputGraphProvider.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    private ChangedEvent<DiagramViewModel> groupChangedEvent;\n@@ -99,3 +98,8 @@\n-        boolean groupChanged = (group == newModel.group);\n-        this.group = newModel.group;\n-        if (groupChanged) {\n+        if (group != newModel.group) {\n+            if (group != null) {\n+                group.getChangedEvent().removeListener(groupContentChangedListener);\n+            }\n+            this.group = newModel.group;\n+            if (group != null) {\n+                group.getChangedEvent().addListener(groupContentChangedListener);\n+            }\n@@ -126,4 +130,0 @@\n-        if (groupChanged) {\n-            groupChangedEvent.fire();\n-        }\n-\n@@ -216,0 +216,1 @@\n+        group.getChangedEvent().addListener(groupContentChangedListener);\n@@ -230,3 +231,0 @@\n-        groupChangedEvent = new ChangedEvent<>(this);\n-        groupChangedEvent.addListener(groupChangedListener);\n-        groupChangedEvent.fire();\n@@ -237,3 +235,0 @@\n-    private final ChangedListener<DiagramViewModel> groupChangedListener = new ChangedListener<DiagramViewModel>() {\n-\n-        private Group oldGroup;\n@@ -241,9 +236,0 @@\n-        @Override\n-        public void changed(DiagramViewModel source) {\n-            if (oldGroup != null) {\n-                oldGroup.getChangedEvent().removeListener(groupContentChangedListener);\n-            }\n-            group.getChangedEvent().addListener(groupContentChangedListener);\n-            oldGroup = group;\n-        }\n-    };\n@@ -514,0 +500,1 @@\n+        getChangedEvent().fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -46,0 +47,8 @@\n+        this.changedEvent = new ChangedEvent<>(this);\n+    }\n+\n+    private ChangedEvent<InputGraphProvider> changedEvent;\n+\n+    @Override\n+    public ChangedEvent<InputGraphProvider> getChangedEvent() {\n+        return changedEvent;\n@@ -50,1 +59,5 @@\n-        return editor.getDiagramModel().getGraphToView();\n+        if (editor.isOpened()) {\n+            return editor.getDiagramModel().getGraphToView();\n+        } else {\n+            return null;\n+        }\n@@ -67,0 +80,2 @@\n+\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorInputGraphProvider.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-    private InstanceContent graphContent;\n@@ -211,2 +210,0 @@\n-        graphContent = new InstanceContent();\n-        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)}));\n@@ -215,0 +212,1 @@\n+        content.add(graphProvider);\n@@ -216,0 +214,1 @@\n+        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(content)}));\n@@ -387,0 +386,1 @@\n+        getModel().getDiagramChangedEvent().fire();\n@@ -431,1 +431,5 @@\n-        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        try {\n+            return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        } catch (Exception e) {\n+            return null;\n+        }\n@@ -478,0 +482,2 @@\n+    private EditorInputGraphProvider graphProvider = new EditorInputGraphProvider(EditorTopComponent.this);\n+\n@@ -483,3 +489,1 @@\n-            Collection<Object> list = new ArrayList<>();\n-            list.add(new EditorInputGraphProvider(EditorTopComponent.this));\n-            graphContent.set(list, null);\n+            graphProvider.getChangedEvent().fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}