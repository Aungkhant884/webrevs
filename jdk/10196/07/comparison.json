{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n@@ -32,1 +33,0 @@\n-import javax.swing.SwingUtilities;\n@@ -44,1 +44,1 @@\n-final class BytecodeViewTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {\n+final class BytecodeViewTopComponent extends TopComponent implements ExplorerManager.Provider, ChangedListener<InputGraphProvider> {\n@@ -48,3 +48,2 @@\n-    private ExplorerManager manager;\n-    private BeanTreeView treeView;\n-    private Lookup.Result result = null;\n+    private final ExplorerManager manager;\n+    private final BeanTreeView treeView;\n@@ -70,22 +69,0 @@\n-    \/** This method is called from within the constructor to\n-     * initialize the form.\n-     * WARNING: Do NOT modify this code. The content of this method is\n-     * always regenerated by the Form Editor.\n-     *\/\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n-    private void initComponents() {\n-\n-        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n-        this.setLayout(layout);\n-        layout.setHorizontalGroup(\n-            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-            .add(0, 400, Short.MAX_VALUE)\n-        );\n-        layout.setVerticalGroup(\n-            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-            .add(0, 300, Short.MAX_VALUE)\n-        );\n-    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n-    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n-    \/\/ End of variables declaration\/\/GEN-END:variables\n-\n@@ -95,1 +72,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -127,3 +104,1 @@\n-        Lookup.Template<InputGraphProvider> tpl = new Lookup.Template<>(InputGraphProvider.class);\n-        result = Utilities.actionsGlobalContext().lookup(tpl);\n-        result.addLookupListener(this);\n+        LookupHistory.addListener(InputGraphProvider.class, this);\n@@ -134,2 +109,1 @@\n-        result.removeLookupListener(this);\n-        result = null;\n+        LookupHistory.removeListener(InputGraphProvider.class, this);\n@@ -172,17 +146,11 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-            SwingUtilities.invokeLater(new Runnable() {\n-                @Override\n-                public void run() {\n-                if (p != null) {\n-                    InputGraph graph = p.getGraph();\n-                    if (graph != null) {\n-                        Group g = graph.getGroup();\n-                        rootNode.update(graph, g.getMethod());\n-                        return;\n-                    }\n-                }\n-                        rootNode.update(null, null);\n-                    }\n-            });\n-\n+    public void changed(InputGraphProvider lastProvider) {\n+        if (lastProvider != null) {\n+            InputGraph graph = lastProvider.getGraph();\n+            if (graph != null) {\n+                Group g = graph.getGroup();\n+                rootNode.update(graph, g.getMethod());\n+                return;\n+            }\n+        }\n+        rootNode = new MethodNode(null, null, \"\");\n+        manager.setRootContext(rootNode);\n@@ -199,0 +167,22 @@\n+\n+    \/** This method is called from within the constructor to\n+     * initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is\n+     * always regenerated by the Form Editor.\n+     *\/\n+    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n+                        .add(0, 400, Short.MAX_VALUE)\n+        );\n+        layout.setVerticalGroup(\n+                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n+                        .add(0, 300, Short.MAX_VALUE)\n+        );\n+    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n+    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n+    \/\/ End of variables declaration\/\/GEN-END:variables\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeViewTopComponent.java","additions":40,"deletions":50,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/SelectBytecodesAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n@@ -32,1 +33,0 @@\n-import javax.swing.SwingUtilities;\n@@ -34,3 +34,0 @@\n-import org.openide.util.Lookup;\n-import org.openide.util.LookupEvent;\n-import org.openide.util.LookupListener;\n@@ -38,1 +35,0 @@\n-import org.openide.util.Utilities;\n@@ -46,1 +42,1 @@\n-final class ControlFlowTopComponent extends TopComponent implements LookupListener {\n+final class ControlFlowTopComponent extends TopComponent implements ChangedListener<InputGraphProvider> {\n@@ -49,1 +45,0 @@\n-    private Lookup.Result result = null;\n@@ -51,1 +46,1 @@\n-    private ControlFlowScene scene;\n+    private final ControlFlowScene scene;\n@@ -67,24 +62,0 @@\n-\n-\n-    \/** This method is called from within the constructor to\n-     * initialize the form.\n-     * WARNING: Do NOT modify this code. The content of this method is\n-     * always regenerated by the Form Editor.\n-     *\/\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n-    private void initComponents() {\n-\n-        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n-        this.setLayout(layout);\n-        layout.setHorizontalGroup(\n-            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-            .add(0, 400, Short.MAX_VALUE)\n-        );\n-        layout.setVerticalGroup(\n-            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-            .add(0, 300, Short.MAX_VALUE)\n-        );\n-    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n-    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n-    \/\/ End of variables declaration\/\/GEN-END:variables\n-\n@@ -94,1 +65,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -126,3 +97,1 @@\n-        Lookup.Template<InputGraphProvider> tpl = new Lookup.Template<InputGraphProvider>(InputGraphProvider.class);\n-        result = Utilities.actionsGlobalContext().lookup(tpl);\n-        result.addLookupListener(this);\n+        LookupHistory.addListener(InputGraphProvider.class, this);\n@@ -133,2 +102,1 @@\n-        result.removeLookupListener(this);\n-        result = null;\n+        LookupHistory.removeListener(InputGraphProvider.class, this);\n@@ -137,12 +105,8 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-        if (p != null) {\n-            SwingUtilities.invokeLater(new Runnable() {\n-\n-                public void run() {\n-                    InputGraph g = p.getGraph();\n-                    if (g != null) {\n-                        scene.setGraph(g);\n-                    }\n-                }\n-            });\n+    @Override\n+    public void changed(InputGraphProvider lastProvider) {\n+        if (lastProvider != null) {\n+            InputGraph graph = lastProvider.getGraph();\n+            if (graph != null) {\n+                scene.setGraph(graph);\n+                return;\n+            }\n@@ -150,0 +114,1 @@\n+        scene.setGraph(new InputGraph(\"\"));\n@@ -176,0 +141,22 @@\n+\n+    \/** This method is called from within the constructor to\n+     * initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is\n+     * always regenerated by the Form Editor.\n+     *\/\n+    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n+                        .add(0, 400, Short.MAX_VALUE)\n+        );\n+        layout.setVerticalGroup(\n+                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n+                        .add(0, 300, Short.MAX_VALUE)\n+        );\n+    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n+    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n+    \/\/ End of variables declaration\/\/GEN-END:variables\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":38,"deletions":51,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n@@ -29,1 +30,0 @@\n-import com.sun.hotspot.igv.data.Group;\n@@ -51,2 +51,2 @@\n-import org.openide.util.*;\n-import org.openide.util.actions.NodeAction;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle;\n@@ -60,1 +60,1 @@\n-public final class OutlineTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {\n+public final class OutlineTopComponent extends TopComponent implements ExplorerManager.Provider, ChangedListener<InputGraphProvider> {\n@@ -64,1 +64,0 @@\n-    private Lookup.Result result = null;\n@@ -66,1 +65,1 @@\n-    private GraphDocument document;\n+    private final GraphDocument document;\n@@ -103,1 +102,1 @@\n-        toolbar.add(((NodeAction) SaveAsAction.get(SaveAsAction.class)).createContextAwareInstance(this.getLookup()));\n+        toolbar.add(SaveAsAction.get(SaveAsAction.class).createContextAwareInstance(this.getLookup()));\n@@ -109,1 +108,1 @@\n-        toolbar.add(((NodeAction) RemoveAction.get(RemoveAction.class)).createContextAwareInstance(this.getLookup()));\n+        toolbar.add(RemoveAction.get(RemoveAction.class).createContextAwareInstance(this.getLookup()));\n@@ -132,8 +131,4 @@\n-        final GroupCallback callback = new GroupCallback() {\n-\n-            @Override\n-            public void started(Group g) {\n-                synchronized(OutlineTopComponent.this) {\n-                    getDocument().addElement(g);\n-                    g.setParent(getDocument());\n-                }\n+        final GroupCallback callback = g -> {\n+            synchronized(OutlineTopComponent.this) {\n+                g.setParent(getDocument());\n+                getDocument().addElement(g);\n@@ -147,22 +142,0 @@\n-    \/\/ Fetch and select the latest active graph.\n-    private void updateGraphSelection() {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n-        if (p != null) {\n-            try {\n-                InputGraph graph = p.getGraph();\n-                if (graph.isDiffGraph()) {\n-                    EditorTopComponent editor = EditorTopComponent.getActive();\n-                    if (editor != null) {\n-                        InputGraph firstGraph = editor.getModel().getFirstGraph();\n-                        InputGraph secondGraph = editor.getModel().getSecondGraph();\n-                        manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)});\n-                    }\n-                } else {\n-                    manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(graph)});\n-                }\n-            } catch (Exception e) {\n-                Exceptions.printStackTrace(e);\n-            }\n-        }\n-    }\n-\n@@ -188,1 +161,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n@@ -220,4 +193,1 @@\n-        Lookup.Template<InputGraphProvider> tpl = new Lookup.Template<InputGraphProvider>(InputGraphProvider.class);\n-        result = Utilities.actionsGlobalContext().lookup(tpl);\n-        result.addLookupListener(this);\n-        updateGraphSelection();\n+        LookupHistory.addListener(InputGraphProvider.class, this);\n@@ -229,1 +199,1 @@\n-        result.removeLookupListener(this);\n+        LookupHistory.removeListener(InputGraphProvider.class, this);\n@@ -256,5 +226,1 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        \/\/ Highlight the focused graph, if available, in the outline.\n-        if (result.allItems().isEmpty()) {\n-            return;\n-        }\n+    public void changed(InputGraphProvider lastProvider) {\n@@ -263,1 +229,24 @@\n-        SwingUtilities.invokeLater(() -> updateGraphSelection());\n+        SwingUtilities.invokeLater(() -> {\n+            GraphNode[] selection = new GraphNode[0];\n+            if (lastProvider != null) {\n+                \/\/ Try to fetch and select the latest active graph.\n+                InputGraph graph = lastProvider.getGraph();\n+                if (graph != null) {\n+                    if (graph.isDiffGraph()) {\n+                        EditorTopComponent editor = EditorTopComponent.getActive();\n+                        if (editor != null) {\n+                            InputGraph firstGraph = editor.getModel().getFirstGraph();\n+                            InputGraph secondGraph = editor.getModel().getSecondGraph();\n+                            selection = new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)};\n+                        }\n+                    } else {\n+                        selection = new GraphNode[]{FolderNode.getGraphNode(graph)};\n+                    }\n+                }\n+            }\n+            try {\n+                manager.setSelectedNodes(selection);\n+            } catch (Exception e) {\n+                Exceptions.printStackTrace(e);\n+            }\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":39,"deletions":50,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -549,1 +549,1 @@\n-     * To obtain the singleton instance, use {@link findInstance}.\n+     * To obtain the singleton instance, use {@link #findInstance()}.\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/FilterTopComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package com.sun.hotspot.igv.graph.services;\n-\n-import com.sun.hotspot.igv.data.ChangedEvent;\n-import com.sun.hotspot.igv.graph.Diagram;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public interface DiagramProvider {\n-    Diagram getDiagram();\n-    ChangedEvent<DiagramProvider> getChangedEvent();\n-\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/services\/DiagramProvider.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.data.Event;\n@@ -41,1 +43,1 @@\n-    private static class LookupHistoryImpl<T> implements LookupListener {\n+    private static class LookupHistoryImpl<T> extends Event<ChangedListener<T>> implements LookupListener {\n@@ -52,0 +54,1 @@\n+            fire();\n@@ -58,0 +61,6 @@\n+        @Override\n+        protected void fire(ChangedListener<T> l) {\n+            l.changed(last);\n+        }\n+\n+\n@@ -63,0 +72,1 @@\n+                this.fire();\n@@ -73,0 +83,6 @@\n+    public static <T> void terminate(Class<T> klass) {\n+        if (cache.containsKey(klass)) {\n+            cache.get(klass).fire();\n+        }\n+    }\n+\n@@ -79,0 +95,15 @@\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> void addListener(Class<T> klass, ChangedListener<T> listener) {\n+        init(klass);\n+        assert cache.containsKey(klass);\n+        cache.get(klass).addListener(listener);\n+        cache.get(klass).fire();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> void removeListener(Class<T> klass, ChangedListener<T> listener) {\n+        if (cache.containsKey(klass)) {\n+            cache.get(klass).removeListener(listener);\n+        }\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/Util\/src\/main\/java\/com\/sun\/hotspot\/igv\/util\/LookupHistory.java","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    private ChangedEvent<DiagramViewModel> groupChangedEvent;\n@@ -99,3 +98,8 @@\n-        boolean groupChanged = (group == newModel.group);\n-        this.group = newModel.group;\n-        if (groupChanged) {\n+        if (group != newModel.group) {\n+            if (group != null) {\n+                group.getChangedEvent().removeListener(groupContentChangedListener);\n+            }\n+            this.group = newModel.group;\n+            if (group != null) {\n+                group.getChangedEvent().addListener(groupContentChangedListener);\n+            }\n@@ -126,4 +130,0 @@\n-        if (groupChanged) {\n-            groupChangedEvent.fire();\n-        }\n-\n@@ -216,0 +216,1 @@\n+        group.getChangedEvent().addListener(groupContentChangedListener);\n@@ -230,3 +231,0 @@\n-        groupChangedEvent = new ChangedEvent<>(this);\n-        groupChangedEvent.addListener(groupChangedListener);\n-        groupChangedEvent.fire();\n@@ -237,3 +235,0 @@\n-    private final ChangedListener<DiagramViewModel> groupChangedListener = new ChangedListener<DiagramViewModel>() {\n-\n-        private Group oldGroup;\n@@ -241,9 +236,0 @@\n-        @Override\n-        public void changed(DiagramViewModel source) {\n-            if (oldGroup != null) {\n-                oldGroup.getChangedEvent().removeListener(groupContentChangedListener);\n-            }\n-            group.getChangedEvent().addListener(groupContentChangedListener);\n-            oldGroup = group;\n-        }\n-    };\n@@ -514,0 +500,1 @@\n+        getChangedEvent().fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private EditorTopComponent editor;\n+    private final EditorTopComponent editor;\n@@ -42,1 +42,3 @@\n-    public EditorInputGraphProvider() {}\n+    public EditorInputGraphProvider() {\n+        editor = null;\n+    }\n@@ -50,1 +52,5 @@\n-        return editor.getDiagramModel().getGraphToView();\n+        if (editor != null && editor.isOpened()) {\n+            return editor.getDiagramModel().getGraphToView();\n+        } else {\n+            return null;\n+        }\n@@ -55,1 +61,3 @@\n-        editor.setSelectedNodes(nodes);\n+        if (editor != null && editor.isOpened()) {\n+            editor.setSelectedNodes(nodes);\n+        }\n@@ -60,1 +68,5 @@\n-        return editor.getDiagramModel().getGraphsBackward();\n+        if (editor != null && editor.isOpened()) {\n+            return editor.getDiagramModel().getGraphsBackward();\n+        } else {\n+            return null;\n+        }\n@@ -65,1 +77,5 @@\n-        return editor.getDiagramModel().getGraphsForward();\n+        if (editor != null && editor.isOpened()) {\n+            return editor.getDiagramModel().getGraphsForward();\n+        } else {\n+            return null;\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorInputGraphProvider.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import com.sun.hotspot.igv.graph.services.DiagramProvider;\n@@ -127,21 +126,0 @@\n-    private DiagramProvider diagramProvider = new DiagramProvider() {\n-\n-        @Override\n-        public Diagram getDiagram() {\n-            return getModel().getDiagramToView();\n-        }\n-\n-        @Override\n-        public ChangedEvent<DiagramProvider> getChangedEvent() {\n-            return diagramChangedEvent;\n-        }\n-    };\n-\n-    private ChangedEvent<DiagramProvider> diagramChangedEvent = new ChangedEvent<>(diagramProvider);\n-\n-\n-    private void updateDisplayName() {\n-        setDisplayName(getDiagram().getName());\n-        setToolTipText(getDiagram().getGraph().getGroup().getName());\n-    }\n-\n@@ -149,1 +127,0 @@\n-\n@@ -151,1 +128,0 @@\n-        LookupHistory.init(DiagramProvider.class);\n@@ -211,2 +187,0 @@\n-        graphContent = new InstanceContent();\n-        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)}));\n@@ -215,1 +189,2 @@\n-        content.add(diagramProvider);\n+        graphContent = new InstanceContent();\n+        this.associateLookup(new ProxyLookup(scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)));\n@@ -217,1 +192,5 @@\n-        rangeSliderModel.getDiagramChangedEvent().addListener(diagramChangedListener);\n+        rangeSliderModel.getDiagramChangedEvent().addListener(source -> {\n+            setDisplayName(getDiagram().getName());\n+            setToolTipText(getDiagram().getGraph().getGroup().getName());\n+            graphContent.set(Collections.singletonList(new EditorInputGraphProvider(this)), null);\n+        });\n@@ -386,1 +365,1 @@\n-        updateDisplayName();\n+        getModel().getDiagramChangedEvent().fire();\n@@ -431,1 +410,5 @@\n-        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        try {\n+            return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        } catch (Exception e) {\n+            return null;\n+        }\n@@ -463,0 +446,1 @@\n+        LookupHistory.terminate(InputGraphProvider.class);\n@@ -471,1 +455,1 @@\n-        Group group = getDiagram().getGraph().getGroup();\n+        Group group = getDiagramModel().getGroup();\n@@ -478,13 +462,0 @@\n-    private ChangedListener<DiagramViewModel> diagramChangedListener = new ChangedListener<DiagramViewModel>() {\n-\n-        @Override\n-        public void changed(DiagramViewModel source) {\n-            updateDisplayName();\n-            Collection<Object> list = new ArrayList<>();\n-            list.add(new EditorInputGraphProvider(EditorTopComponent.this));\n-            graphContent.set(list, null);\n-            diagramProvider.getChangedEvent().fire();\n-        }\n-\n-    };\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":15,"deletions":44,"binary":false,"changes":59,"status":"modified"}]}