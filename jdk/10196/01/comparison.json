{"files":[{"patch":"@@ -130,0 +130,1 @@\n+        resultChanged(null);\n@@ -172,12 +173,9 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-            SwingUtilities.invokeLater(new Runnable() {\n-                @Override\n-                public void run() {\n-                if (p != null) {\n-                    InputGraph graph = p.getGraph();\n-                    if (graph != null) {\n-                        Group g = graph.getGroup();\n-                        rootNode.update(graph, g.getMethod());\n-                        return;\n-                    }\n+    public void resultChanged(LookupEvent e) {\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                InputGraph graph = provider.getGraph();\n+                if (graph != null) {\n+                    Group g = graph.getGroup();\n+                    rootNode.update(graph, g.getMethod());\n+                    return;\n@@ -185,4 +183,3 @@\n-                        rootNode.update(null, null);\n-                    }\n-            });\n-\n+            }\n+            rootNode.update(null, null);\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeViewTopComponent.java","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+        resultChanged(null);\n@@ -137,10 +138,8 @@\n-    public void resultChanged(LookupEvent lookupEvent) {\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n-        if (p != null) {\n-            SwingUtilities.invokeLater(new Runnable() {\n-\n-                public void run() {\n-                    InputGraph g = p.getGraph();\n-                    if (g != null) {\n-                        scene.setGraph(g);\n-                    }\n+    @Override\n+    public void resultChanged(LookupEvent e) {\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                InputGraph graph = provider.getGraph();\n+                if (graph != null) {\n+                    scene.setGraph(graph);\n@@ -148,2 +147,2 @@\n-            });\n-        }\n+            }\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -149,10 +149,16 @@\n-        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n-        if (p != null) {\n-            try {\n-                InputGraph graph = p.getGraph();\n-                if (graph.isDiffGraph()) {\n-                    EditorTopComponent editor = EditorTopComponent.getActive();\n-                    if (editor != null) {\n-                        InputGraph firstGraph = editor.getModel().getFirstGraph();\n-                        InputGraph secondGraph = editor.getModel().getSecondGraph();\n-                        manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)});\n+        \/\/ Wait for LookupHistory to be updated with the last active graph\n+        \/\/ before selecting it.\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                try {\n+                    InputGraph graph = provider.getGraph();\n+                    if (graph.isDiffGraph()) {\n+                        EditorTopComponent editor = EditorTopComponent.getActive();\n+                        if (editor != null) {\n+                            InputGraph firstGraph = editor.getModel().getFirstGraph();\n+                            InputGraph secondGraph = editor.getModel().getSecondGraph();\n+                            manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)});\n+                        }\n+                    } else {\n+                        manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(graph)});\n@@ -160,2 +166,2 @@\n-                } else {\n-                    manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(graph)});\n+                } catch (Exception e) {\n+                    Exceptions.printStackTrace(e);\n@@ -163,2 +169,0 @@\n-            } catch (Exception e) {\n-                Exceptions.printStackTrace(e);\n@@ -166,1 +170,1 @@\n-        }\n+        });\n@@ -261,3 +265,1 @@\n-        \/\/ Wait for LookupHistory to be updated with the last active graph\n-        \/\/ before selecting it.\n-        SwingUtilities.invokeLater(() -> updateGraphSelection());\n+        updateGraphSelection();\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -387,0 +387,1 @@\n+        getModel().getDiagramChangedEvent().fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}