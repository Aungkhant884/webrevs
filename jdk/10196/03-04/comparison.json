{"files":[{"patch":"@@ -177,1 +177,0 @@\n-                provider.getChangedEvent().addListener((InputGraphProvider graphProvider) -> resultChanged(null));\n@@ -185,2 +184,1 @@\n-            rootNode = new MethodNode(null, null, \"\");\n-            manager.setRootContext(rootNode);\n+            rootNode.update(null, null);\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/BytecodeViewTopComponent.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/SelectBytecodesAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n+        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\/\/)Utilities.actionsGlobalContext().lookup(InputGraphProvider.class);\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,0 @@\n-                provider.getChangedEvent().addListener((InputGraphProvider graphProvider) -> resultChanged(null));\n@@ -147,1 +146,0 @@\n-                    return;\n@@ -150,1 +148,0 @@\n-            scene.setGraph(new InputGraph(\"\"));\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -147,0 +147,26 @@\n+    \/\/ Fetch and select the latest active graph.\n+    private void updateGraphSelection() {\n+        \/\/ Wait for LookupHistory to be updated with the last active graph\n+        \/\/ before selecting it.\n+        SwingUtilities.invokeLater(() -> {\n+            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n+            if (provider != null) {\n+                try {\n+                    InputGraph graph = provider.getGraph();\n+                    if (graph.isDiffGraph()) {\n+                        EditorTopComponent editor = EditorTopComponent.getActive();\n+                        if (editor != null) {\n+                            InputGraph firstGraph = editor.getModel().getFirstGraph();\n+                            InputGraph secondGraph = editor.getModel().getSecondGraph();\n+                            manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)});\n+                        }\n+                    } else {\n+                        manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(graph)});\n+                    }\n+                } catch (Exception e) {\n+                    Exceptions.printStackTrace(e);\n+                }\n+            }\n+        });\n+    }\n+\n@@ -201,1 +227,1 @@\n-        resultChanged(null);\n+        updateGraphSelection();\n@@ -235,27 +261,5 @@\n-        \/\/ Wait for LookupHistory to be updated with the last active graph\n-        \/\/ before selecting it.\n-        SwingUtilities.invokeLater(() -> {\n-            GraphNode[] selection = new  GraphNode[]{};\n-            final InputGraphProvider provider = LookupHistory.getLast(InputGraphProvider.class);\n-            if (provider != null) {\n-                \/\/ Try to fetch and select the latest active graph.\n-                InputGraph graph = provider.getGraph();\n-                if (graph != null) {\n-                    if (graph.isDiffGraph()) {\n-                        EditorTopComponent editor = EditorTopComponent.getActive();\n-                        if (editor != null) {\n-                            InputGraph firstGraph = editor.getModel().getFirstGraph();\n-                            InputGraph secondGraph = editor.getModel().getSecondGraph();\n-                            selection = new GraphNode[]{FolderNode.getGraphNode(firstGraph), FolderNode.getGraphNode(secondGraph)};\n-                        }\n-                    } else {\n-                        selection = new GraphNode[]{FolderNode.getGraphNode(graph)};\n-                    }\n-                }\n-            }\n-            try {\n-                manager.setSelectedNodes(selection);\n-            } catch (Exception e) {\n-                Exceptions.printStackTrace(e);\n-            }\n-        });\n+        \/\/ Highlight the focused graph, if available, in the outline.\n+        if (result.allItems().isEmpty()) {\n+            return;\n+        }\n+        updateGraphSelection();\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":32,"deletions":28,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -38,2 +37,0 @@\n-    ChangedEvent<InputGraphProvider> getChangedEvent();\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/services\/InputGraphProvider.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    private ChangedEvent<DiagramViewModel> groupChangedEvent;\n@@ -98,8 +99,3 @@\n-        if (group != newModel.group) {\n-            if (group != null) {\n-                group.getChangedEvent().removeListener(groupContentChangedListener);\n-            }\n-            this.group = newModel.group;\n-            if (group != null) {\n-                group.getChangedEvent().addListener(groupContentChangedListener);\n-            }\n+        boolean groupChanged = (group == newModel.group);\n+        this.group = newModel.group;\n+        if (groupChanged) {\n@@ -130,0 +126,4 @@\n+        if (groupChanged) {\n+            groupChangedEvent.fire();\n+        }\n+\n@@ -216,1 +216,0 @@\n-        group.getChangedEvent().addListener(groupContentChangedListener);\n@@ -231,0 +230,3 @@\n+        groupChangedEvent = new ChangedEvent<>(this);\n+        groupChangedEvent.addListener(groupChangedListener);\n+        groupChangedEvent.fire();\n@@ -235,0 +237,3 @@\n+    private final ChangedListener<DiagramViewModel> groupChangedListener = new ChangedListener<DiagramViewModel>() {\n+\n+        private Group oldGroup;\n@@ -236,0 +241,9 @@\n+        @Override\n+        public void changed(DiagramViewModel source) {\n+            if (oldGroup != null) {\n+                oldGroup.getChangedEvent().removeListener(groupContentChangedListener);\n+            }\n+            group.getChangedEvent().addListener(groupContentChangedListener);\n+            oldGroup = group;\n+        }\n+    };\n@@ -500,1 +514,0 @@\n-        getChangedEvent().fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -47,8 +46,0 @@\n-        this.changedEvent = new ChangedEvent<>(this);\n-    }\n-\n-    private ChangedEvent<InputGraphProvider> changedEvent;\n-\n-    @Override\n-    public ChangedEvent<InputGraphProvider> getChangedEvent() {\n-        return changedEvent;\n@@ -59,5 +50,1 @@\n-        if (editor.isOpened()) {\n-            return editor.getDiagramModel().getGraphToView();\n-        } else {\n-            return null;\n-        }\n+        return editor.getDiagramModel().getGraphToView();\n@@ -80,2 +67,0 @@\n-\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorInputGraphProvider.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+    private InstanceContent graphContent;\n@@ -210,0 +211,2 @@\n+        graphContent = new InstanceContent();\n+        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(graphContent), new AbstractLookup(content)}));\n@@ -212,1 +215,0 @@\n-        content.add(graphProvider);\n@@ -214,1 +216,0 @@\n-        this.associateLookup(new ProxyLookup(new Lookup[]{scene.getLookup(), new AbstractLookup(content)}));\n@@ -431,5 +432,1 @@\n-        try {\n-            return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n@@ -482,2 +479,0 @@\n-    private EditorInputGraphProvider graphProvider = new EditorInputGraphProvider(EditorTopComponent.this);\n-\n@@ -489,1 +484,3 @@\n-            graphProvider.getChangedEvent().fire();\n+            Collection<Object> list = new ArrayList<>();\n+            list.add(new EditorInputGraphProvider(EditorTopComponent.this));\n+            graphContent.set(list, null);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}