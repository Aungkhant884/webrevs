{"files":[{"patch":"@@ -4927,0 +4927,3 @@\n+        if (preferredScale >= Integer.MIN_VALUE) {\n+            return createAndStripZerosToMatchScaleFast(intVal, scale, preferredScale);\n+        }\n@@ -4941,0 +4944,23 @@\n+    private static BigDecimal createAndStripZerosToMatchScaleFast(BigInteger intVal, int scale, long preferredScale) {\n+        BigInteger qr[]; \/\/ quotient-remainder pair\n+        int scaleStep;\n+        while (intVal.compareMagnitude(BigInteger.TEN) >= 0\n+                && scale > preferredScale) {\n+            if (intVal.testBit(0))\n+                break; \/\/ odd number cannot end in 0\n+            scaleStep = checkScale(intVal, Math.max(((long)scale - preferredScale) \/ 2, 1));\n+            qr = intVal.divideAndRemainder(bigTenToThe(scaleStep));\n+            if (qr[1].signum() != 0) {\n+                if (scaleStep == 1) {\n+                    break;\n+                } else {\n+                    preferredScale = scale - scaleStep;\n+                    continue;\n+                }\n+            }\n+            intVal = qr[0];\n+            scale = checkScale(intVal, (long) scale - scaleStep); \/\/ could Overflow\n+        }\n+        return valueOf(intVal, scale, 0);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}