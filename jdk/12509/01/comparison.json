{"files":[{"patch":"@@ -4927,0 +4927,3 @@\n+        if (preferredScale >= Integer.MIN_VALUE) {\n+            return createAndStripZerosToMatchScaleFast(intVal, scale, preferredScale);\n+        }\n@@ -4941,0 +4944,24 @@\n+    private static BigDecimal createAndStripZerosToMatchScaleFast(BigInteger intVal, int scale, long preferredScale) {\n+        BigInteger qr[]; \/\/ quotient-remainder pair\n+        int scaleStep;\n+        while (intVal.compareMagnitude(BigInteger.TEN) >= 0\n+                && scale > preferredScale) {\n+            scaleStep = checkScale(intVal, Math.max(((long) scale - preferredScale) \/ 2, 1));\n+            if (intVal.getLowestSetBit() >= scaleStep) {\n+                \/\/ intVal can be divided by pow(10, scaleStep) only if intVal has more trailing zeros than scaleStep\n+                qr = intVal.divideAndRemainder(bigTenToThe(scaleStep));\n+                if (qr[1].signum() == 0) {\n+                    intVal = qr[0];\n+                    scale = checkScale(intVal, (long) scale - scaleStep); \/\/ could Overflow\n+                    continue;\n+                }\n+            }\n+            if (scaleStep == 1) {\n+                break;\n+            } else {\n+                preferredScale = scale - scaleStep;\n+            }\n+        }\n+        return valueOf(intVal, scale, 0);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}