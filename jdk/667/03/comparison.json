{"files":[{"patch":"@@ -648,2 +648,6 @@\n-  uint index = (speculation >> 32) & 0xFFFFFFFF;\n-  int length = (int) speculation;\n+  \/\/ This field is written directly by JVMCI compiled code. However, it should\n+  \/\/ only ever write values originating from HotSpotSpeculation. Since the latter are\n+  \/\/ 31-bit in precision, ensure only the low 31 bits are set.\n+  guarantee((speculation & 0x7FFFFFFF) == speculation, \"Encoded JVMCI speculation is larger than 31 bits: \" INTPTR_FORMAT, speculation);\n+  uint index = (uint) speculation >> JVMCINMethodData::SPECULATION_LENGTH_BITS;\n+  int length = speculation & JVMCINMethodData::SPECULATION_LENGTH_MASK;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  friend class JVMCIVMStructs;\n@@ -54,0 +55,15 @@\n+  \/\/ A speculation id is an index (high 26 bits) and a length (low 5 bits).\n+  \/\/ Keep in sync with HotSpotSpeculationLog.HotSpotSpeculation.\n+  \/\/ Since the offset of Thread::_pending_failed_speculation is exposed via VMStructs\n+  \/\/ but its type is not, JVMCI Java code assumes that it's a long. So even\n+  \/\/ though it could be encoded in an int, doing this would be a breaking JVMCI\n+  \/\/ API change. It's sufficient to ensure that only 31-bit encoded values (i.e. signed\n+  \/\/ ints) are produced by JVMCI. This allows JVMCI compilers to emit an efficient\n+  \/\/ instruction sequence to store a value to Thread::_pending_failed_speculation\n+  \/\/ (e.g., on x86 a MOVESLQ can write a 32 bit value sign extended to a long\n+  \/\/ into a long memory location).\n+  enum {\n+    SPECULATION_LENGTH_BITS = 5,\n+    SPECULATION_LENGTH_MASK = (1 << SPECULATION_LENGTH_BITS) - 1\n+  };\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -394,0 +394,1 @@\n+  declare_constant(JVMCINMethodData::SPECULATION_LENGTH_BITS)             \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1169,1 +1169,2 @@\n-  \/\/ uniquely identify the  speculative optimization guarded by the uncommon trap\n+  \/\/ uniquely identify the speculative optimization guarded by an uncommon trap.\n+  \/\/ See JVMCINMethodData::SPECULATION_LENGTH_BITS for further details.\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-     * Checks if this field has the {@link Stable} annotation.\n+     * Checks if this field has the {@code Stable} annotation.\n@@ -172,1 +172,1 @@\n-     * @return true if field has {@link Stable} annotation, false otherwise\n+     * @return true if field has {@code Stable} annotation, false otherwise\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaFieldImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.vm.ci.common.JVMCIError;\n@@ -121,0 +122,9 @@\n+        \/\/ Also defined in JVMCINMethodData C++ class - keep in sync\n+        static final int LENGTH_BITS = 5;\n+        static final int INDEX_BITS = 31 - LENGTH_BITS;\n+\n+        static final int MAX_LENGTH = (1 << LENGTH_BITS) - 1;\n+        static final int MAX_INDEX = (1 << INDEX_BITS) - 1;\n+\n+        static final int LENGTH_MASK = MAX_LENGTH;\n+\n@@ -122,1 +132,1 @@\n-         * A speculation id is a long encoding an offset (high 32 bits) and a length (low 32 bts).\n+         * A speculation id is a long encoding a length (low 5 bits) and an index (next 26 bits).\n@@ -236,1 +246,7 @@\n-        return ((long) index) << 32 | length;\n+        if (length > HotSpotSpeculation.MAX_LENGTH || length < 0) {\n+            throw new InternalError(String.format(\"Invalid encoded speculation length: %d (0x%x)\", length, length));\n+        }\n+        if (index > HotSpotSpeculation.MAX_INDEX || index < 0) {\n+            throw new JVMCIError(\"Encoded speculation index is negative or too big: %d (0x%x)\", index, index);\n+        }\n+        return (index << HotSpotSpeculation.LENGTH_BITS) | length;\n@@ -240,1 +256,1 @@\n-        return (int) (indexAndLength >>> 32);\n+        return (int) (indexAndLength >>> HotSpotSpeculation.LENGTH_BITS);\n@@ -244,1 +260,1 @@\n-        return (int) indexAndLength & 0xFFFFFFFF;\n+        return (int) (indexAndLength & HotSpotSpeculation.LENGTH_MASK);\n@@ -361,1 +377,0 @@\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotSpeculationLog.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.vm.ci.common.JVMCIError;\n+import jdk.vm.ci.hotspot.HotSpotSpeculationLog.HotSpotSpeculation;\n@@ -49,0 +51,3 @@\n+\n+        int speculationLengthBits = getConstant(\"JVMCINMethodData::SPECULATION_LENGTH_BITS\", Integer.class);\n+        JVMCIError.guarantee(HotSpotSpeculation.LENGTH_BITS == speculationLengthBits, \"%d != %d\", HotSpotSpeculation.LENGTH_BITS, speculationLengthBits);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n@@ -44,0 +45,3 @@\n+import jdk.vm.ci.meta.JavaConstant;\n+import jdk.vm.ci.meta.JavaKind;\n+import jdk.vm.ci.meta.MetaAccessProvider;\n@@ -46,0 +50,1 @@\n+import jdk.vm.ci.runtime.JVMCI;\n@@ -91,0 +96,1 @@\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n@@ -101,0 +107,5 @@\n+        JavaConstant encodedS1 = metaAccess.encodeSpeculation(s1);\n+        JavaConstant encodedS2 = metaAccess.encodeSpeculation(s2);\n+        Assert.assertEquals(JavaKind.Long, encodedS1.getJavaKind());\n+        Assert.assertEquals(JavaKind.Long, encodedS2.getJavaKind());\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotSpeculationLog.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}