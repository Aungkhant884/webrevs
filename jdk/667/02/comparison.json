{"files":[{"patch":"@@ -3501,1 +3501,1 @@\n-  jlong speculation = thread->pending_failed_speculation();\n+  uint speculation = thread->pending_failed_speculation();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -647,3 +647,3 @@\n-void JVMCINMethodData::add_failed_speculation(nmethod* nm, jlong speculation) {\n-  uint index = (speculation >> 32) & 0xFFFFFFFF;\n-  int length = (int) speculation;\n+void JVMCINMethodData::add_failed_speculation(nmethod* nm, uint speculation) {\n+  uint index = speculation >> JVMCINMethodData::SPECULATION_LENGTH_BITS;\n+  int length = speculation & JVMCINMethodData::SPECULATION_LENGTH_MASK;\n@@ -651,1 +651,1 @@\n-    fatal(INTPTR_FORMAT \"[index: %d, length: %d] out of bounds wrt encoded speculations of length %u\", speculation, index, length, nm->speculations_size());\n+    fatal(\"0x%x[index: %d, length: %d] out of bounds wrt encoded speculations of length %u\", speculation, index, length, nm->speculations_size());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  friend class JVMCIVMStructs;\n@@ -54,0 +55,7 @@\n+  \/\/ A speculation id is an index (high 27 bits) and a length (low 5 bits) encoded in an int.\n+  \/\/ Keep in sync with HotSpotSpeculationLog.HotSpotSpeculation.\n+  enum {\n+    SPECULATION_LENGTH_BITS = 5,\n+    SPECULATION_LENGTH_MASK = (1 << SPECULATION_LENGTH_BITS) - 1\n+  };\n+\n@@ -69,1 +77,1 @@\n-  void add_failed_speculation(nmethod* nm, jlong speculation);\n+  void add_failed_speculation(nmethod* nm, uint speculation);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -394,0 +394,1 @@\n+  declare_constant(JVMCINMethodData::SPECULATION_LENGTH_BITS)             \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1847,1 +1847,1 @@\n-    jlong           speculation = thread->pending_failed_speculation();\n+    uint            speculation = thread->pending_failed_speculation();\n@@ -1904,1 +1904,1 @@\n-          xtty->print(\" speculation='\" JLONG_FORMAT \"'\", speculation);\n+          xtty->print(\" speculation='0x%x'\", speculation);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1620,0 +1620,10 @@\n+uint JavaThread::pending_failed_speculation() const {\n+  if ((_pending_failed_speculation & 0xFFFFFFFF) != _pending_failed_speculation) {\n+    \/\/ This field is written directly by Graal compiled code. However, it should\n+    \/\/ only ever write values originating from JVMCI. Since the latter are\n+    \/\/ 32-bit in precision, ensure the high 32-bits are 0.\n+    fatal(\"Pending failed speculation is larger than an int: \" INTPTR_FORMAT, _pending_failed_speculation);\n+  }\n+  return (uint) _pending_failed_speculation;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1169,1 +1169,4 @@\n-  \/\/ uniquely identify the  speculative optimization guarded by the uncommon trap\n+  \/\/ uniquely identify the  speculative optimization guarded by the uncommon trap.\n+  \/\/ The id value is only 32-bits but since this field is exposed via VMStructs to\n+  \/\/ JVMCI as a jlong, it needs to be kept as a long to maintain backwards compatibility\n+  \/\/ with JVMCI based compilers that emit code to update the field directly.\n@@ -1544,1 +1547,1 @@\n-  jlong pending_failed_speculation() const        { return _pending_failed_speculation; }\n+  uint pending_failed_speculation() const;\n@@ -1548,1 +1551,1 @@\n-  void set_pending_failed_speculation(jlong failed_speculation) { _pending_failed_speculation = failed_speculation; }\n+  void set_pending_failed_speculation(uint failed_speculation) { _pending_failed_speculation = failed_speculation; }\n@@ -1609,1 +1612,0 @@\n-  static ByteSize pending_failed_speculation_offset() { return byte_offset_of(JavaThread, _pending_failed_speculation); }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-            return JavaConstant.LONG_0;\n+            return JavaConstant.INT_0;\n@@ -156,1 +156,1 @@\n-        if (constant.equals(JavaConstant.LONG_0)) {\n+        if (constant.equals(JavaConstant.INT_0)) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotMetaAccessProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.vm.ci.common.JVMCIError;\n@@ -121,0 +122,9 @@\n+        \/\/ Also defined in JVMCINMethodData C++ class - keep in sync\n+        static final int LENGTH_BITS = 5;\n+        static final int INDEX_BITS = 32 - LENGTH_BITS;\n+\n+        static final int MAX_LENGTH = (1 << LENGTH_BITS) - 1;\n+        static final int MAX_INDEX = (1 << INDEX_BITS) - 1;\n+\n+        static final int LENGTH_MASK = MAX_LENGTH;\n+\n@@ -122,1 +132,1 @@\n-         * A speculation id is a long encoding an offset (high 32 bits) and a length (low 32 bts).\n+         * A speculation id is an int encoding an index (high 27 bits) and a length (low 5 bits).\n@@ -143,1 +153,1 @@\n-            long indexAndLength = id.asLong();\n+            int indexAndLength = id.asInt();\n@@ -235,2 +245,8 @@\n-    private static long encodeIndexAndLength(int index, int length) {\n-        return ((long) index) << 32 | length;\n+    private static int encodeIndexAndLength(int index, int length) {\n+        if (length > HotSpotSpeculation.MAX_LENGTH || length < 0) {\n+            throw new InternalError(String.format(\"Invalid encoded speculation length: %d\", length));\n+        }\n+        if (index > HotSpotSpeculation.MAX_INDEX || index < 0) {\n+            throw new JVMCIError(\"Encoded speculation index is negative or too big: %d\", index);\n+        }\n+        return (index << HotSpotSpeculation.LENGTH_BITS) | length;\n@@ -239,2 +255,2 @@\n-    private static int decodeIndex(long indexAndLength) {\n-        return (int) (indexAndLength >>> 32);\n+    private static int decodeIndex(int indexAndLength) {\n+        return (indexAndLength >>> HotSpotSpeculation.LENGTH_BITS);\n@@ -243,2 +259,2 @@\n-    private static int decodeLength(long indexAndLength) {\n-        return (int) indexAndLength & 0xFFFFFFFF;\n+    private static int decodeLength(int indexAndLength) {\n+        return indexAndLength & HotSpotSpeculation.LENGTH_MASK;\n@@ -254,1 +270,1 @@\n-            id = JavaConstant.forLong(encodeIndexAndLength(0, encoding.length));\n+            id = JavaConstant.forInt(encodeIndexAndLength(0, encoding.length));\n@@ -262,1 +278,1 @@\n-                    id = JavaConstant.forLong(encodeIndexAndLength(flattenedIndex, fs.length));\n+                    id = JavaConstant.forInt(encodeIndexAndLength(flattenedIndex, fs.length));\n@@ -268,1 +284,1 @@\n-                id = JavaConstant.forLong(encodeIndexAndLength(flattenedIndex, encoding.length));\n+                id = JavaConstant.forInt(encodeIndexAndLength(flattenedIndex, encoding.length));\n@@ -296,1 +312,1 @@\n-        int flattenedIndex = decodeIndex(constant.asLong());\n+        int flattenedIndex = decodeIndex(constant.asInt());\n@@ -361,1 +377,0 @@\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotSpeculationLog.java","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.vm.ci.common.JVMCIError;\n+import jdk.vm.ci.hotspot.HotSpotSpeculationLog.HotSpotSpeculation;\n@@ -49,0 +51,1 @@\n+        JVMCIError.guarantee(HotSpotSpeculation.LENGTH_BITS == speculationLengthBits, \"%d != %d\", HotSpotSpeculation.LENGTH_BITS, speculationLengthBits);\n@@ -350,0 +353,2 @@\n+    final int speculationLengthBits = getConstant(\"JVMCINMethodData::SPECULATION_LENGTH_BITS\", Integer.class);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n@@ -44,0 +45,3 @@\n+import jdk.vm.ci.meta.JavaConstant;\n+import jdk.vm.ci.meta.JavaKind;\n+import jdk.vm.ci.meta.MetaAccessProvider;\n@@ -46,0 +50,1 @@\n+import jdk.vm.ci.runtime.JVMCI;\n@@ -91,0 +96,1 @@\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n@@ -101,0 +107,5 @@\n+        JavaConstant encodedS1 = metaAccess.encodeSpeculation(s1);\n+        JavaConstant encodedS2 = metaAccess.encodeSpeculation(s1);\n+        Assert.assertEquals(JavaKind.Int, encodedS1.getJavaKind());\n+        Assert.assertEquals(JavaKind.Int, encodedS2.getJavaKind());\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotSpeculationLog.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}