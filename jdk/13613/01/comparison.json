{"files":[{"patch":"@@ -52,0 +52,11 @@\n+template <typename OopT>\n+static oop read_oop_local(OopT* p) {\n+  \/\/ We can't do a native access directly from p because load barriers\n+  \/\/ may self-heal. If that happens on a base pointer for compressed oops,\n+  \/\/ then there will be a crash later on. Only the stack watermark API is\n+  \/\/ allowed to heal oops, because it heals derived pointers before their\n+  \/\/ corresponding base pointers.\n+  oop obj = RawAccess<>::oop_load(p);\n+  return NativeAccess<>::oop_load(&obj);\n+}\n+\n@@ -83,1 +94,1 @@\n-  return *(oop*)addr;\n+  return read_oop_local((oop*)addr);\n@@ -108,1 +119,1 @@\n-  return CompressedOops::decode(*narrow_addr);\n+  return read_oop_local((narrowOop*)addr);\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}