{"files":[{"patch":"@@ -28,9 +28,0 @@\n-\/*\n- *\n- *  <p><b>This is NOT part of any API supported by Sun Microsystems.\n- *  If you write code that depends on this, you do so at your own\n- *  risk.  This code and its internal interfaces are subject to change\n- *  or deletion without notice.<\/b>\n- *\n- *\/\n-\n@@ -64,1 +55,1 @@\n-import java.util.Collections;\n+import java.util.Arrays;\n@@ -70,0 +61,1 @@\n+import java.util.Map;\n@@ -75,0 +67,1 @@\n+import java.util.function.Function;\n@@ -134,0 +127,4 @@\n+    enum Option { DEFAULT, ALL, LOCALE, PROPERTIES, SECURITY,\n+        SECURITY_ALL, SECURITY_PROPERTIES, SECURITY_PROVIDERS,\n+        SECURITY_TLS, SYSTEM, VM };\n+\n@@ -135,4 +132,8 @@\n-     * A method called by the launcher to print out the standard settings,\n-     * by default -XshowSettings is equivalent to -XshowSettings:all,\n-     * Specific information may be gotten by using suboptions with possible\n-     * values vm, properties and locale.\n+     * A method called by the launcher to print out the standard settings.\n+     * -XshowSettings prints details of all supported components in non-verbose\n+     * mode. -XshowSettings:all prints all settings in verbose mode.\n+     * Specific settings information may be obtained by using suboptions.\n+     *\n+     * Suboption values include \"all\", \"locale\", \"properties\", \"security\",\n+     * \"system\" (Linux only) and \"vm\". A error message is printed for an\n+     * unknown suboption value and the VM launch aborts.\n@@ -161,32 +162,24 @@\n-        String[] opts = optionFlag.split(\":\");\n-        String optStr = opts.length > 1\n-                ? opts[1].trim()\n-                : \"all\";\n-        switch (optStr) {\n-            case \"vm\":\n-                printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n-                break;\n-            case \"properties\":\n-                printProperties();\n-                break;\n-            case \"locale\":\n-                printLocale(false);\n-                break;\n-            case \"security\":\n-                var opt = opts.length > 2 ? opts[2].trim() : \"all\";\n-                SecuritySettings.printSecuritySettings(opt, ostream);\n-                break;\n-            case \"system\":\n-                if (OperatingSystem.isLinux()) {\n-                    printSystemMetrics();\n-                    break;\n-                }\n-            default:\n-                printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n-                printProperties();\n-                printLocale(true);\n-                SecuritySettings.printSecuritySummarySettings(ostream);\n-                if (OperatingSystem.isLinux()) {\n-                    printSystemMetrics();\n-                }\n-                break;\n+        Option component = validateOption(optionFlag);\n+        switch (component) {\n+            case ALL -> printAllSettings(initialHeapSize, maxHeapSize, stackSize, true);\n+            case LOCALE -> printLocale(true);\n+            case PROPERTIES -> printProperties();\n+            case SECURITY,\n+                 SECURITY_ALL,\n+                 SECURITY_PROPERTIES,\n+                 SECURITY_PROVIDERS,\n+                 SECURITY_TLS -> SecuritySettings.printSecuritySettings(component, ostream, true);\n+            case SYSTEM -> printSystemMetrics();\n+            case VM -> printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n+            case DEFAULT -> printAllSettings(initialHeapSize, maxHeapSize, stackSize, false);\n+        }\n+    }\n+\n+    \/*\n+     * Validate that the -XshowSettings value is allowed\n+     * If a valid option is parsed, return enum corresponding\n+     * to that option. Abort if a bad option is parsed.\n+     *\/\n+    private static Option validateOption(String optionFlag) {\n+        if (optionFlag.equals(\"-XshowSettings\")) {\n+            return Option.DEFAULT;\n@@ -194,0 +187,17 @@\n+\n+        if (optionFlag.equals(\"-XshowSetings:\")) {\n+            abort(null, \"java.launcher.bad.option\", \":\");\n+        }\n+\n+        Map<String, Option> validOpts = Arrays.stream(Option.values())\n+                .filter(o -> !o.equals(Option.DEFAULT)) \/\/ non-valid option\n+                .collect(Collectors.toMap(o -> o.name()\n+                        .toLowerCase(Locale.ROOT)\n+                        .replace(\"_\", \":\"), Function.identity()));\n+\n+        String optStr = optionFlag.substring(\"-XshowSettings:\".length());\n+        Option component = validOpts.get(optStr);\n+        if (component == null) {\n+            abort(null, \"java.launcher.bad.option\", optStr);\n+        }\n+        return component;\n@@ -197,1 +207,4 @@\n-     * prints the main vm settings subopt\/section\n+     * Print settings for all supported components.\n+     * verbose value used to determine if verbose information\n+     * should be printed for components that support printing\n+     * in verbose or non-verbose mode.\n@@ -199,0 +212,12 @@\n+    private static void printAllSettings(long initialHeapSize, long maxHeapSize,\n+                                         long stackSize, boolean verbose) {\n+        printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n+        printProperties();\n+        printLocale(verbose);\n+        SecuritySettings.printSecuritySettings(\n+                    Option.SECURITY_ALL, ostream, verbose);\n+        if (OperatingSystem.isLinux()) {\n+            printSystemMetrics();\n+        }\n+    }\n+\n@@ -230,5 +255,2 @@\n-        List<String> sortedPropertyKeys = new ArrayList<>();\n-        sortedPropertyKeys.addAll(p.stringPropertyNames());\n-        Collections.sort(sortedPropertyKeys);\n-        for (String x : sortedPropertyKeys) {\n-            printPropertyValue(x, p.getProperty(x));\n+        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n+            printPropertyValue(key, p.getProperty(key));\n@@ -283,1 +305,1 @@\n-    private static void printLocale(boolean summaryMode) {\n+    private static void printLocale(boolean verbose) {\n@@ -285,1 +307,1 @@\n-        if (!summaryMode) {\n+        if (verbose) {\n@@ -300,1 +322,1 @@\n-        if (!summaryMode) {\n+        if (verbose) {\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":77,"deletions":55,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    static void printSecuritySettings(String arg, PrintStream stream) {\n+    static void printSecuritySettings(LauncherHelper.Option o, PrintStream stream, boolean verbose) {\n@@ -58,8 +58,9 @@\n-        switch (arg) {\n-            case \"properties\" -> printSecurityProperties();\n-            case \"providers\"  -> printSecurityProviderConfig(true);\n-            case \"tls\"        -> printSecurityTLSConfig(true);\n-            case \"all\"        -> printAllSecurityConfig();\n-            default           -> ostream.println(\n-                    \"\\nUnrecognized security subcommand. Valid values are \" +\n-                    \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\\n\");\n+        if (!verbose) {\n+            printSecuritySummarySettings();\n+            return;\n+        }\n+        switch (o) {\n+            case SECURITY_PROPERTIES -> printSecurityProperties();\n+            case SECURITY_PROVIDERS -> printSecurityProviderConfig(true);\n+            case SECURITY_TLS -> printSecurityTLSConfig(true);\n+            case SECURITY, SECURITY_ALL -> printAllSecurityConfig();\n@@ -70,4 +71,4 @@\n-    static void printSecuritySummarySettings(PrintStream stream) {\n-        ostream = stream;\n-        ostream.println(\"Security settings summary: \" + \"\\n\" +\n-                INDENT + \"See \\\"java -X\\\" for verbose security settings options\");\n+    static void printSecuritySummarySettings() {\n+        ostream.println(\"Security settings summary:\");\n+        ostream.println(INDENT + \"Use \\\"-XshowSettings:security\\\" \" +\n+                \"option for verbose security settings options\");\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-\\                      show all settings and continue\\n\\\n+\\                      show all settings in verbose detail and continue\\n\\\n@@ -229,0 +229,8 @@\n+java.launcher.bad.option=\\\n+\\n\\\n+Unrecognized showSettings option: {0}\\n\\\n+    Valid values are \\\"all\\\", \\\"locale\\\", \\\"properties\\\", \\\"security\\\", \\\n+    \\\"system\\\"(Linux only), \\\"vm\\\"\\n\\\n+    Valid \\\"security\\\" suboption values are \\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\"\\n\\\n+    See \\\"java -X\\\"\\n\\\n+\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950 8281658 8310201\n+ * @bug 6994753 7123582 8305950 8281658 8310201 8311653\n@@ -79,1 +79,1 @@\n-    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security subcommand\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Valid \\\"security\\\" suboption values are\";\n@@ -81,0 +81,1 @@\n+    private static final String METRICS_NOT_AVAILABLE_MSG = \"No metrics available for this platform\";\n@@ -83,0 +84,1 @@\n+    private static final String ERR_MSG = \"Unrecognized showSettings option:\";\n@@ -84,0 +86,3 @@\n+    \/*\n+     * \"all\" should print verbose settings\n+     *\/\n@@ -85,0 +90,22 @@\n+        checkContains(tr, VM_SETTINGS);\n+        checkContains(tr, PROP_SETTINGS);\n+        checkContains(tr, LOCALE_SETTINGS);\n+        checkContains(tr, AVAILABLE_LOCALES);\n+        checkNotContains(tr, LOCALE_SUMMARY_SETTINGS);\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_SUMMARY_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        checkContains(tr, TZDATA_SETTINGS);\n+        if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n+            checkContains(tr, SYSTEM_SETTINGS);\n+        } else {\n+            \/\/ only invoke system option by default on Linux\n+            checkNotContains(tr, METRICS_NOT_AVAILABLE_MSG);\n+        }\n+    }\n+    \/*\n+     * default (no options) should print non verbose\n+     * details on each component\n+     *\/\n+    static void containsDefaultOptions(TestResult tr) {\n@@ -90,1 +117,1 @@\n-        \/\/ no verbose security settings unless \"security\" used\n+        \/\/ no verbose security settings unless \"security\" or \"all\" used\n@@ -98,0 +125,3 @@\n+        } else {\n+            \/\/ only invoke system option by default on Linux\n+            checkNotContains(tr, METRICS_NOT_AVAILABLE_MSG);\n@@ -121,1 +151,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n@@ -129,1 +159,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n@@ -208,0 +238,1 @@\n+        tr.checkNegative();\n@@ -222,3 +253,4 @@\n-            \/\/ -XshowSettings prints all available settings when\n-            \/\/ settings argument is not recognized.\n-            containsAllOptions(tr);\n+            \/\/ \"system\" should print a \"No metrics available\"\n+            \/\/ message on other OSes\n+            checkNotContains(tr, VM_SETTINGS);\n+            checkContains(tr, METRICS_NOT_AVAILABLE_MSG);\n@@ -230,0 +262,1 @@\n+        tr.checkNegative();\n@@ -234,0 +267,30 @@\n+\n+        \/\/ no such component option\n+        tr = doExec(javaCmd, \"-XshowSettings:BadOption\");\n+        tr.checkNegative();\n+        checkNotContains(tr, VM_SETTINGS);\n+        checkNotContains(tr, PROP_SETTINGS);\n+        checkNotContains(tr, LOCALE_SETTINGS);\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ don't allow invalid sub options\n+        tr = doExec(javaCmd, \"-XshowSettings:locale:bad\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ don't allow \":\" as an option\n+        tr = doExec(javaCmd, \"-XshowSettings:\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ case-sensitive test\n+        tr = doExec(javaCmd, \"-XshowSettings:VM\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ exclude this enum value\n+        tr = doExec(javaCmd, \"-XshowSettings:empty\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+\n@@ -242,1 +305,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":72,"deletions":9,"binary":false,"changes":81,"status":"modified"}]}