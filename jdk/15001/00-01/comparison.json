{"files":[{"patch":"@@ -125,0 +125,4 @@\n+    enum Option { EMPTY, ALL, LOCALE, PROPERTIES, SECURITY,\n+        SECURITY_ALL, SECURITY_PROPERTIES, SECURITY_PROVIDERS,\n+        SECURITY_TLS, SYSTEM, VM };\n+\n@@ -131,2 +135,3 @@\n-     * suboption values include \"all\", \"locale\", \"properties\", \"security\",\n-     * \"system\"(Linux only) and \"vm\". Help message printed for bad value.\n+     * Suboption values include \"all\", \"locale\", \"properties\", \"security\",\n+     * \"system\" (Linux only) and \"vm\". A error message is printed for an\n+     * unknown suboption value and the VM launch aborts.\n@@ -155,11 +160,13 @@\n-        String[] opts = optionFlag.split(\":\");\n-        String optStr = Arrays.stream(opts).skip(1).findFirst().orElse(\"\").trim();\n-        switch (optStr) {\n-            case \"all\" -> printAllSettings(true, initialHeapSize, maxHeapSize, stackSize);\n-            case \"locale\" -> printLocale(true);\n-            case \"properties\" -> printProperties();\n-            case \"security\" -> SecuritySettings.printSecuritySettings(opts, ostream, true);\n-            case \"system\" -> printSystemMetrics();\n-            case \"vm\" -> printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n-            case \"\" -> printAllSettings(false, initialHeapSize, maxHeapSize, stackSize);\n-            default -> abort(null, \"java.launcher.bad.option\", optStr);\n+        Option component = validateOption(optionFlag);\n+        switch (component) {\n+            case ALL -> printAllSettings(initialHeapSize, maxHeapSize, stackSize, true);\n+            case LOCALE -> printLocale(true);\n+            case PROPERTIES -> printProperties();\n+            case SECURITY,\n+                 SECURITY_ALL,\n+                 SECURITY_PROPERTIES,\n+                 SECURITY_PROVIDERS,\n+                 SECURITY_TLS -> SecuritySettings.printSecuritySettings(component, ostream, true);\n+            case SYSTEM-> printSystemMetrics();\n+            case VM -> printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n+            case EMPTY -> printAllSettings(initialHeapSize, maxHeapSize, stackSize, false);\n@@ -170,1 +177,3 @@\n-     * prints all available settings. Verbose option.\n+     * Validate that the -XshowSettings value is allowed\n+     * If a valid option is parsed, return enum corresponding\n+     * to that option. Abort if a bad option is parsed.\n@@ -172,2 +181,41 @@\n-    private static void printAllSettings(boolean verbose, long initialHeapSize,\n-                                         long maxHeapSize, long stackSize) {\n+    private static Option validateOption(String optionFlag) {\n+        if (optionFlag.equals(\"-XshowSettings\")) {\n+            return Option.EMPTY;\n+        }\n+\n+        if (optionFlag.equals(\"-XshowSetings:\")) {\n+            abort(null, \"java.launcher.bad.option\", \":\");\n+        }\n+\n+        \/\/ case-sensitive check of input flag\n+        List<String> validOpts = Arrays.stream(Option.values())\n+                .filter(o -> !o.equals(Option.EMPTY)) \/\/ non-valid option\n+                .map(o -> o.name()\n+                        .toLowerCase(Locale.ROOT)\n+                        .replace(\"_\", \":\")).collect(Collectors.toList());\n+\n+        String optStr = optionFlag.substring(\"-XshowSettings:\".length());\n+        if (!validOpts.contains(optionFlag.substring(\"-XshowSettings:\".length()))) {\n+            abort(null, \"java.launcher.bad.option\", optStr);\n+        }\n+\n+        Option component = null;\n+        try {\n+            component = Option.valueOf(optStr\n+                    .toUpperCase(Locale.ROOT)\n+                    .replace(\":\", \"_\")\n+                    .trim());\n+        } catch (IllegalArgumentException | NullPointerException e) {\n+            abort(null, \"java.launcher.bad.option\", optStr);\n+        }\n+        return component;\n+    }\n+\n+    \/*\n+     * Print settings for all supported components.\n+     * verbose value used to determine if verbose information\n+     * should be printed for components that support printing\n+     * in verbose or non-verbose mode.\n+     *\/\n+    private static void printAllSettings(long initialHeapSize, long maxHeapSize,\n+                                         long stackSize, boolean verbose) {\n@@ -178,1 +226,1 @@\n-                    new String[] {\"all\"}, ostream, verbose);\n+                    Option.SECURITY_ALL, ostream, verbose);\n@@ -320,5 +368,0 @@\n-        \/\/ only Linux supported\n-        if (!OperatingSystem.isLinux()) {\n-            abort(null, \"java.launcher.bad.option\");\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":65,"deletions":22,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    static void printSecuritySettings(String[] opts, PrintStream stream, boolean verbose) {\n+    static void printSecuritySettings(LauncherHelper.Option o, PrintStream stream, boolean verbose) {\n@@ -62,7 +62,5 @@\n-        var arg = opts.length > 2 ? opts[2].trim() : \"all\";\n-        switch (arg) {\n-            case \"properties\" -> printSecurityProperties();\n-            case \"providers\"  -> printSecurityProviderConfig(true);\n-            case \"tls\"        -> printSecurityTLSConfig(true);\n-            case \"all\"        -> printAllSecurityConfig();\n-            default           -> LauncherHelper.abort(null, \"java.launcher.bad.security.option\", arg);\n+        switch (o) {\n+            case SECURITY_PROPERTIES -> printSecurityProperties();\n+            case SECURITY_PROVIDERS -> printSecurityProviderConfig(true);\n+            case SECURITY_TLS -> printSecurityTLSConfig(true);\n+            case SECURITY, SECURITY_ALL -> printAllSecurityConfig();\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-\\                      show all settings and continue\\n\\\n+\\                      show all settings in verbose detail and continue\\n\\\n@@ -231,9 +231,4 @@\n-Unrecognized showSettings option: {0}.\\n\\\n-    Valid values are \\\"all\\\", \\\"locale\\\", \\\"properties\\\",\\\"security\\\",\\\n-    \\\"system\\\"(Linux only), \\\"vm\\\".\\n\\\n-    See \\\"java -X\\\"\\n\\\n-\n-java.launcher.bad.security.option=\\\n-\\n\\\n-Unrecognized showSettings security option: {0}.\\n\\\n-    Valid values are \\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\".\\n\\\n+Unrecognized showSettings option: {0}\\n\\\n+    Valid values are \\\"all\\\", \\\"locale\\\", \\\"properties\\\", \\\"security\\\", \\\n+    \\\"system\\\"(Linux only), \\\"vm\\\"\\n\\\n+    Valid \\\"security\\\" suboption values are \\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\"\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized showSettings security option\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Valid \\\"security\\\" suboption values are\";\n@@ -81,0 +81,1 @@\n+    private static final String METRICS_NOT_AVAILABLE_MSG = \"No metrics available for this platform\";\n@@ -83,1 +84,1 @@\n-    private static final String HELP_MSG = \"Unrecognized showSettings option:\";\n+    private static final String ERR_MSG = \"Unrecognized showSettings option:\";\n@@ -101,0 +102,3 @@\n+        } else {\n+            \/\/ only invoke system option by default on Linux\n+            checkNotContains(tr, METRICS_NOT_AVAILABLE_MSG);\n@@ -121,0 +125,3 @@\n+        } else {\n+            \/\/ only invoke system option by default on Linux\n+            checkNotContains(tr, METRICS_NOT_AVAILABLE_MSG);\n@@ -246,2 +253,2 @@\n-            \/\/ \"system\" should trigger help message\n-            \/\/ on other OSes\n+            \/\/ \"system\" should print a \"No metrics available\"\n+            \/\/ message on other OSes\n@@ -249,2 +256,1 @@\n-            checkNotContains(tr, SYSTEM_SETTINGS);\n-            checkContains(tr, HELP_MSG);\n+            checkContains(tr, METRICS_NOT_AVAILABLE_MSG);\n@@ -262,0 +268,1 @@\n+        \/\/ no such component option\n@@ -267,1 +274,23 @@\n-        checkContains(tr, HELP_MSG);\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ don't allow invalid sub options\n+        tr = doExec(javaCmd, \"-XshowSettings:locale:bad\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ don't allow \":\" as an option\n+        tr = doExec(javaCmd, \"-XshowSettings:\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ case-sensitive test\n+        tr = doExec(javaCmd, \"-XshowSettings:VM\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+        \/\/ exclude this enum value\n+        tr = doExec(javaCmd, \"-XshowSettings:empty\");\n+        tr.checkNegative();\n+        checkContains(tr, ERR_MSG);\n+\n+\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":36,"deletions":7,"binary":false,"changes":43,"status":"modified"}]}