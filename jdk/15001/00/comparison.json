{"files":[{"patch":"@@ -28,9 +28,0 @@\n-\/*\n- *\n- *  <p><b>This is NOT part of any API supported by Sun Microsystems.\n- *  If you write code that depends on this, you do so at your own\n- *  risk.  This code and its internal interfaces are subject to change\n- *  or deletion without notice.<\/b>\n- *\n- *\/\n-\n@@ -64,1 +55,1 @@\n-import java.util.Collections;\n+import java.util.Arrays;\n@@ -135,4 +126,7 @@\n-     * A method called by the launcher to print out the standard settings,\n-     * by default -XshowSettings is equivalent to -XshowSettings:all,\n-     * Specific information may be gotten by using suboptions with possible\n-     * values vm, properties and locale.\n+     * A method called by the launcher to print out the standard settings.\n+     * -XshowSettings prints details of all supported components in non-verbose\n+     * mode. -XshowSettings:all prints all settings in verbose mode.\n+     * Specific settings information may be obtained by using suboptions.\n+     *\n+     * suboption values include \"all\", \"locale\", \"properties\", \"security\",\n+     * \"system\"(Linux only) and \"vm\". Help message printed for bad value.\n@@ -162,3 +156,1 @@\n-        String optStr = opts.length > 1\n-                ? opts[1].trim()\n-                : \"all\";\n+        String optStr = Arrays.stream(opts).skip(1).findFirst().orElse(\"\").trim();\n@@ -166,27 +158,8 @@\n-            case \"vm\":\n-                printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n-                break;\n-            case \"properties\":\n-                printProperties();\n-                break;\n-            case \"locale\":\n-                printLocale(false);\n-                break;\n-            case \"security\":\n-                var opt = opts.length > 2 ? opts[2].trim() : \"all\";\n-                SecuritySettings.printSecuritySettings(opt, ostream);\n-                break;\n-            case \"system\":\n-                if (OperatingSystem.isLinux()) {\n-                    printSystemMetrics();\n-                    break;\n-                }\n-            default:\n-                printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n-                printProperties();\n-                printLocale(true);\n-                SecuritySettings.printSecuritySummarySettings(ostream);\n-                if (OperatingSystem.isLinux()) {\n-                    printSystemMetrics();\n-                }\n-                break;\n+            case \"all\" -> printAllSettings(true, initialHeapSize, maxHeapSize, stackSize);\n+            case \"locale\" -> printLocale(true);\n+            case \"properties\" -> printProperties();\n+            case \"security\" -> SecuritySettings.printSecuritySettings(opts, ostream, true);\n+            case \"system\" -> printSystemMetrics();\n+            case \"vm\" -> printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n+            case \"\" -> printAllSettings(false, initialHeapSize, maxHeapSize, stackSize);\n+            default -> abort(null, \"java.launcher.bad.option\", optStr);\n@@ -197,1 +170,1 @@\n-     * prints the main vm settings subopt\/section\n+     * prints all available settings. Verbose option.\n@@ -199,0 +172,12 @@\n+    private static void printAllSettings(boolean verbose, long initialHeapSize,\n+                                         long maxHeapSize, long stackSize) {\n+        printVmSettings(initialHeapSize, maxHeapSize, stackSize);\n+        printProperties();\n+        printLocale(verbose);\n+        SecuritySettings.printSecuritySettings(\n+                    new String[] {\"all\"}, ostream, verbose);\n+        if (OperatingSystem.isLinux()) {\n+            printSystemMetrics();\n+        }\n+    }\n+\n@@ -230,5 +215,2 @@\n-        List<String> sortedPropertyKeys = new ArrayList<>();\n-        sortedPropertyKeys.addAll(p.stringPropertyNames());\n-        Collections.sort(sortedPropertyKeys);\n-        for (String x : sortedPropertyKeys) {\n-            printPropertyValue(x, p.getProperty(x));\n+        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n+            printPropertyValue(key, p.getProperty(key));\n@@ -283,1 +265,1 @@\n-    private static void printLocale(boolean summaryMode) {\n+    private static void printLocale(boolean verbose) {\n@@ -285,1 +267,1 @@\n-        if (!summaryMode) {\n+        if (verbose) {\n@@ -300,1 +282,1 @@\n-        if (!summaryMode) {\n+        if (verbose) {\n@@ -338,0 +320,5 @@\n+        \/\/ only Linux supported\n+        if (!OperatingSystem.isLinux()) {\n+            abort(null, \"java.launcher.bad.option\");\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":40,"deletions":53,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    static void printSecuritySettings(String arg, PrintStream stream) {\n+    static void printSecuritySettings(String[] opts, PrintStream stream, boolean verbose) {\n@@ -58,0 +58,5 @@\n+        if (!verbose) {\n+            printSecuritySummarySettings();\n+            return;\n+        }\n+        var arg = opts.length > 2 ? opts[2].trim() : \"all\";\n@@ -63,3 +68,1 @@\n-            default           -> ostream.println(\n-                    \"\\nUnrecognized security subcommand. Valid values are \" +\n-                    \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\\n\");\n+            default           -> LauncherHelper.abort(null, \"java.launcher.bad.security.option\", arg);\n@@ -70,4 +73,4 @@\n-    static void printSecuritySummarySettings(PrintStream stream) {\n-        ostream = stream;\n-        ostream.println(\"Security settings summary: \" + \"\\n\" +\n-                INDENT + \"See \\\"java -X\\\" for verbose security settings options\");\n+    static void printSecuritySummarySettings() {\n+        ostream.println(\"Security settings summary:\");\n+        ostream.println(INDENT + \"Use \\\"-XshowSettings:security\\\" \" +\n+                \"option for verbose security settings options\");\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -229,0 +229,13 @@\n+java.launcher.bad.option=\\\n+\\n\\\n+Unrecognized showSettings option: {0}.\\n\\\n+    Valid values are \\\"all\\\", \\\"locale\\\", \\\"properties\\\",\\\"security\\\",\\\n+    \\\"system\\\"(Linux only), \\\"vm\\\".\\n\\\n+    See \\\"java -X\\\"\\n\\\n+\n+java.launcher.bad.security.option=\\\n+\\n\\\n+Unrecognized showSettings security option: {0}.\\n\\\n+    Valid values are \\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\".\\n\\\n+    See \\\"java -X\\\"\\n\\\n+\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950 8281658 8310201\n+ * @bug 6994753 7123582 8305950 8281658 8310201 8311653\n@@ -79,1 +79,1 @@\n-    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security subcommand\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized showSettings security option\";\n@@ -83,0 +83,1 @@\n+    private static final String HELP_MSG = \"Unrecognized showSettings option:\";\n@@ -84,0 +85,3 @@\n+    \/*\n+     * \"all\" should print verbose settings\n+     *\/\n@@ -85,0 +89,19 @@\n+        checkContains(tr, VM_SETTINGS);\n+        checkContains(tr, PROP_SETTINGS);\n+        checkContains(tr, LOCALE_SETTINGS);\n+        checkContains(tr, AVAILABLE_LOCALES);\n+        checkNotContains(tr, LOCALE_SUMMARY_SETTINGS);\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_SUMMARY_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        checkContains(tr, TZDATA_SETTINGS);\n+        if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n+            checkContains(tr, SYSTEM_SETTINGS);\n+        }\n+    }\n+    \/*\n+     * default (no options) should print non verbose\n+     * details on each component\n+     *\/\n+    static void containsDefaultOptions(TestResult tr) {\n@@ -90,1 +113,1 @@\n-        \/\/ no verbose security settings unless \"security\" used\n+        \/\/ no verbose security settings unless \"security\" or \"all\" used\n@@ -121,1 +144,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n@@ -129,1 +152,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n@@ -208,0 +231,1 @@\n+        tr.checkNegative();\n@@ -222,3 +246,5 @@\n-            \/\/ -XshowSettings prints all available settings when\n-            \/\/ settings argument is not recognized.\n-            containsAllOptions(tr);\n+            \/\/ \"system\" should trigger help message\n+            \/\/ on other OSes\n+            checkNotContains(tr, VM_SETTINGS);\n+            checkNotContains(tr, SYSTEM_SETTINGS);\n+            checkContains(tr, HELP_MSG);\n@@ -230,0 +256,1 @@\n+        tr.checkNegative();\n@@ -234,0 +261,7 @@\n+\n+        tr = doExec(javaCmd, \"-XshowSettings:BadOption\");\n+        tr.checkNegative();\n+        checkNotContains(tr, VM_SETTINGS);\n+        checkNotContains(tr, PROP_SETTINGS);\n+        checkNotContains(tr, LOCALE_SETTINGS);\n+        checkContains(tr, HELP_MSG);\n@@ -242,1 +276,1 @@\n-        containsAllOptions(tr);\n+        containsDefaultOptions(tr);\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":43,"deletions":9,"binary":false,"changes":52,"status":"modified"}]}