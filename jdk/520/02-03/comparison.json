{"files":[{"patch":"@@ -81,6 +81,7 @@\n-     * When writing a compressed (i.e. {@code ZipEntry.DEFLATED}))\n-     * entry, and the compressed size has not been explicitly set with\n-     * the {@link ZipEntry#setCompressedSize(long)} method, then the\n-     * compressed size will be set to the actual compressed size after\n-     * deflation. The current time will be used if the entry has no set\n-     * modification time.\n+     * When writing a compressed (DEFLATED) entry, and the compressed\n+     * size has not been explicitly set with the {@link\n+     * ZipEntry#setCompressedSize(long)} method, then the compressed\n+     * size will be set to the actual compressed size after deflation.\n+     * <p>\n+     * The current time will be used if the entry has no set modification\n+     * time.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarOutputStream.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-    boolean manual_csize = false; \/\/ Only true if csize was explicitely set by a call to setCompressedSize()\n+    boolean csizeSet = false; \/\/ Only true if csize was explicitely set by\n+                        \/\/ a call to setCompressedSize()\n@@ -131,1 +132,1 @@\n-        manual_csize = e.manual_csize;\n+        csizeSet = e.csizeSet;\n@@ -452,1 +453,1 @@\n-        this.manual_csize = true;\n+        this.csizeSet = true;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipEntry.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -183,6 +183,6 @@\n-     * was specified for the entry. When writing a compressed (i.e.\n-     * {@code ZipEntry.DEFLATED})) entry, and the compressed size has not\n-     * been explicitly set with the {@link ZipEntry#setCompressedSize(long)}\n-     * method, then the compressed size will be set to the actual compressed\n-     * size after deflation. The current time will be used if the entry has\n-     * no set modification time.\n+     * was specified for the entry. When writing a compressed (DEFLATED)\n+     * entry, and the compressed size has not been explicitly set with the\n+     * {@link ZipEntry#setCompressedSize(long)} method, then the compressed\n+     * size will be set to the actual compressed size after deflation.\n+     * <p>\n+     * The current time will be used if the entry has no set modification time.\n@@ -211,9 +211,6 @@\n-            \/\/ store size, compressed size, and crc-32 in data descriptor\n-            \/\/ immediately following the compressed entry data\n-            if (e.size  == -1 || e.csize == -1 || e.crc   == -1) {\n-                e.flag = 8;\n-            }\n-            else if (!e.manual_csize) {\n-                \/\/ Ignore compressed size of a ZipEntry if it was implcitely set\n-                \/\/ while reading that ZipEntry from a  ZipFile or ZipInputStream because\n-                \/\/ we can't know the compression level of the source zip file\/stream.\n+            \/\/ If not set, store size, compressed size, and crc-32 in data\n+            \/\/ descriptor immediately following the compressed entry data.\n+            \/\/ Ignore the compressed size of a ZipEntry if it was implcitely set\n+            \/\/ while reading that ZipEntry from a  ZipFile or ZipInputStream because\n+            \/\/ we can't know the compression level of the source zip file\/stream.\n+            if (e.size  == -1 || e.csize == -1 || e.crc   == -1 || !e.csizeSet) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -55,31 +55,31 @@\n-        OutputStream os = new FileOutputStream(f);\n-        ZipOutputStream zos = new ZipOutputStream(os);\n-        \/\/ First file will be compressed with DEFAULT_COMPRESSION (i.e. -1 or 6)\n-        zos.putNextEntry(new ZipEntry(\"test1.txt\"));\n-        zos.write(TEST_STRING.getBytes());\n-        zos.closeEntry();\n-        \/\/ Second file won't be compressed at all (i.e. STORED)\n-        zos.setMethod(ZipOutputStream.STORED);\n-        ZipEntry ze = new ZipEntry(\"test2.txt\");\n-        int length = TEST_STRING.length();\n-        ze.setSize(length);\n-        ze.setCompressedSize(length);\n-        CRC32 crc = new CRC32();\n-        crc.update(TEST_STRING.getBytes(\"utf8\"), 0, length);\n-        ze.setCrc(crc.getValue());\n-        zos.putNextEntry(ze);\n-        zos.write(TEST_STRING.getBytes());\n-        \/\/ Third file will be compressed with NO_COMPRESSION (i.e. 0)\n-        zos.setMethod(ZipOutputStream.DEFLATED);\n-        zos.setLevel(Deflater.NO_COMPRESSION);\n-        zos.putNextEntry(new ZipEntry(\"test3.txt\"));\n-        zos.write(TEST_STRING.getBytes());\n-        \/\/ Fourth file will be compressed with BEST_SPEED (i.e. 1)\n-        zos.setLevel(Deflater.BEST_SPEED);\n-        zos.putNextEntry(new ZipEntry(\"test4.txt\"));\n-        zos.write(TEST_STRING.getBytes());\n-        \/\/ Fifth file will be compressed with BEST_COMPRESSION (i.e. 9)\n-        zos.setLevel(Deflater.BEST_COMPRESSION);\n-        zos.putNextEntry(new ZipEntry(\"test5.txt\"));\n-        zos.write(TEST_STRING.getBytes());\n-        zos.close();\n+        try (OutputStream os = new FileOutputStream(f);\n+             ZipOutputStream zos = new ZipOutputStream(os)) {\n+            \/\/ First file will be compressed with DEFAULT_COMPRESSION (i.e. -1 or 6)\n+            zos.putNextEntry(new ZipEntry(\"test1.txt\"));\n+            zos.write(TEST_STRING.getBytes());\n+            zos.closeEntry();\n+            \/\/ Second file won't be compressed at all (i.e. STORED)\n+            zos.setMethod(ZipOutputStream.STORED);\n+            ZipEntry ze = new ZipEntry(\"test2.txt\");\n+            int length = TEST_STRING.length();\n+            ze.setSize(length);\n+            ze.setCompressedSize(length);\n+            CRC32 crc = new CRC32();\n+            crc.update(TEST_STRING.getBytes(\"utf8\"), 0, length);\n+            ze.setCrc(crc.getValue());\n+            zos.putNextEntry(ze);\n+            zos.write(TEST_STRING.getBytes());\n+            \/\/ Third file will be compressed with NO_COMPRESSION (i.e. 0)\n+            zos.setMethod(ZipOutputStream.DEFLATED);\n+            zos.setLevel(Deflater.NO_COMPRESSION);\n+            zos.putNextEntry(new ZipEntry(\"test3.txt\"));\n+            zos.write(TEST_STRING.getBytes());\n+            \/\/ Fourth file will be compressed with BEST_SPEED (i.e. 1)\n+            zos.setLevel(Deflater.BEST_SPEED);\n+            zos.putNextEntry(new ZipEntry(\"test4.txt\"));\n+            zos.write(TEST_STRING.getBytes());\n+            \/\/ Fifth file will be compressed with BEST_COMPRESSION (i.e. 9)\n+            zos.setLevel(Deflater.BEST_COMPRESSION);\n+            zos.putNextEntry(new ZipEntry(\"test5.txt\"));\n+            zos.write(TEST_STRING.getBytes());\n+        }\n","filename":"test\/jdk\/java\/util\/zip\/CopyZipFile.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"}]}