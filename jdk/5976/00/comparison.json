{"files":[{"patch":"@@ -148,1 +148,0 @@\n-java\/awt\/KeyboardFocusmanager\/TypeAhead\/TestDialogTypeAhead.java 8198626 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-  @library    ..\/..\/regtesthelpers\n-  @modules java.desktop\/sun.awt\n-  @build      Util\n@@ -35,3 +32,22 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.lang.reflect.InvocationTargetException;\n+\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.DefaultKeyboardFocusManager;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n@@ -45,2 +61,2 @@\n-    static Semaphore pressSema = new Semaphore();\n-    static Semaphore robotSema = new Semaphore();\n+    static Semaphore pressSema = new Semaphore(0);\n+    static Semaphore robotSema = new Semaphore(0);\n@@ -52,2 +68,11 @@\n-        app.init();\n-        app.start();\n+        try {\n+            app.init();\n+            app.start();\n+        } finally {\n+            if (d != null) {\n+                d.dispose();\n+            }\n+            if (f != null) {\n+                f.dispose();\n+            }\n+        }\n@@ -76,2 +101,0 @@\n-                    d.dispose();\n-                    f.dispose();\n@@ -81,1 +104,1 @@\n-                        pressSema.raise();\n+                        pressSema.release();\n@@ -83,0 +106,1 @@\n+\n@@ -96,1 +120,1 @@\n-\n+                    d.setVisible(true);\n@@ -104,2 +128,0 @@\n-\n-                    d.setVisible(true);\n@@ -115,0 +137,1 @@\n+            robot.setAutoDelay(100);\n@@ -124,1 +147,1 @@\n-        waitForIdle();\n+        robot.waitForIdle();\n@@ -126,1 +149,1 @@\n-        waitForIdle();\n+        robot.waitForIdle();\n@@ -131,0 +154,2 @@\n+        robot.waitForIdle();\n+        boolean acquired;\n@@ -132,1 +157,1 @@\n-            robotSema.doWait(1000);\n+            acquired = robotSema.tryAcquire(1000, TimeUnit.MILLISECONDS);\n@@ -136,1 +161,1 @@\n-        if (!robotSema.getState()) {\n+        if (!acquired) {\n@@ -143,1 +168,1 @@\n-        waitForIdle();\n+        robot.waitForIdle();\n@@ -145,1 +170,1 @@\n-            pressSema.doWait(3000);\n+            acquired = pressSema.tryAcquire(3000, TimeUnit.MILLISECONDS);\n@@ -149,1 +174,1 @@\n-        if (!pressSema.getState()) {\n+        if (!acquired) {\n@@ -152,1 +177,0 @@\n-\n@@ -155,1 +179,1 @@\n-    private void moveMouseOver(Container c) {\n+    private void moveMouseOver(Component c) {\n@@ -158,17 +182,2 @@\n-        robot.mouseMove(p.x + (int)(d.getWidth()\/2), p.y + (int)(d.getHeight()\/2));\n-    }\n-    private void waitForIdle() {\n-        try {\n-            robot.waitForIdle();\n-            EventQueue.invokeAndWait( new Runnable() {\n-                                            public void run() {\n-                                                \/\/ dummy implementation\n-                                            }\n-                                        } );\n-        } catch(InterruptedException ite) {\n-            System.err.println(\"Robot.waitForIdle, non-fatal exception caught:\");\n-            ite.printStackTrace();\n-        } catch(InvocationTargetException ine) {\n-            System.err.println(\"Robot.waitForIdle, non-fatal exception caught:\");\n-            ine.printStackTrace();\n-        }\n+        robot.mouseMove(p.x + (int)(d.getWidth()\/2),\n+                p.y + (int)(d.getHeight()\/2));\n@@ -194,1 +203,1 @@\n-        final Semaphore sema = new Semaphore();\n+        final Semaphore sema = new Semaphore(0);\n@@ -197,1 +206,1 @@\n-                    sema.raise();\n+                    sema.release();\n@@ -206,1 +215,1 @@\n-            sema.doWait(3000);\n+            sema.tryAcquire(3000, TimeUnit.MILLISECONDS);\n@@ -212,33 +221,4 @@\n-            throw new RuntimeException(\"Can't make \" + comp + \" focused, current owner is \" + KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner());\n-        }\n-    }\n-\n-    static class Semaphore {\n-        boolean state = false;\n-        int waiting = 0;\n-        public Semaphore() {\n-        }\n-        public synchronized void doWait() throws InterruptedException {\n-            if (state) {\n-                return;\n-            }\n-            waiting++;\n-            wait();\n-            waiting--;\n-        }\n-        public synchronized void doWait(int timeout) throws InterruptedException {\n-            if (state) {\n-                return;\n-            }\n-            waiting++;\n-            wait(timeout);\n-            waiting--;\n-        }\n-        public synchronized void raise() {\n-            state = true;\n-            if (waiting > 0) {\n-                notifyAll();\n-            }\n-        }\n-        public synchronized boolean getState() {\n-            return state;\n+            throw new RuntimeException(\"Can't make \" + comp + \" focused,\"\n+                    + \"current owner is \"\n+                    + KeyboardFocusManager\n+                    .getCurrentKeyboardFocusManager().getFocusOwner());\n@@ -255,1 +235,1 @@\n-                TestDialogTypeAhead.this.robotSema.raise();\n+                TestDialogTypeAhead.this.robotSema.release();\n@@ -260,1 +240,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/TypeAhead\/TestDialogTypeAhead.java","additions":60,"deletions":81,"binary":false,"changes":141,"status":"modified"}]}