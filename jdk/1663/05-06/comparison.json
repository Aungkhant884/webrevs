{"files":[{"patch":"@@ -1774,1 +1774,1 @@\n-            unsigned int shift = exact_ilog2(c);\n+            unsigned int shift = log2i_exact(c);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  const size_t address_offset_bits = exact_ilog2(address_offset);\n+  const size_t address_offset_bits = log2i_exact(address_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zGlobals_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-    tbnz(rscratch1, exact_log2(SafepointMechanism::poll_bit()), slow_path);\n+    tbnz(rscratch1, log2i_exact(SafepointMechanism::poll_bit()), slow_path);\n@@ -3996,1 +3996,1 @@\n-      (1ULL << ilog2_graceful(CompressedKlassPointers::range())) - 1;\n+      (1ULL << log2i(CompressedKlassPointers::range())) - 1;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -850,1 +850,1 @@\n-      int power = exact_ilog2(c);\n+      int power = log2i_exact(c);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) exact_ilog2(c + 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c + 1);\n@@ -337,1 +337,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) exact_ilog2(c - 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c - 1);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    clrldi(a, s, 64 - exact_ilog2((((jlong) ui16)+1)));\n+    clrldi(a, s, 64 - log2i_exact((((jlong) ui16)+1)));\n@@ -87,1 +87,1 @@\n-    rlwinm(a, s, 0, 31 - exact_ilog2((jlong) ui16), 31 - exact_ilog2((jlong) ui16));\n+    rlwinm(a, s, 0, 31 - log2i_exact((jlong) ui16), 31 - log2i_exact((jlong) ui16));\n@@ -90,1 +90,1 @@\n-    clrrdi(a, s, exact_ilog2((jlong)-ui16));\n+    clrrdi(a, s, log2i_exact((jlong)-ui16));\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-      int log2 = exact_ilog2(divisor);\n+      int log2 = log2i_exact(divisor);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    __ shift_left(left, exact_ilog2(c + 1), result);\n+    __ shift_left(left, log2i_exact(c + 1), result);\n@@ -300,1 +300,1 @@\n-    __ shift_left(left, exact_ilog2(c - 1), result);\n+    __ shift_left(left, log2i_exact(c - 1), result);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  clrrdi(r, r, exact_ilog2((jlong)modulus));\n+  clrrdi(r, r, log2i_exact((jlong)modulus));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9078,1 +9078,1 @@\n-    long maskbits  = src3 + exact_ilog2((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + log2i_exact((jlong) (julong) (juint) -src2);\n@@ -9098,1 +9098,1 @@\n-    long maskbits  = src3 + exact_ilog2((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + log2i_exact((jlong) (julong) (juint) -src2);\n@@ -9366,1 +9366,1 @@\n-    int length = exact_ilog2(((jlong) $src3$$constant) + 1);\n+    int length = log2i_exact(((jlong) $src3$$constant) + 1);\n@@ -9384,1 +9384,1 @@\n-    int length = exact_ilog2(((jlong) $src3$$constant) + 1);\n+    int length = log2i_exact(((jlong) $src3$$constant) + 1);\n@@ -9788,1 +9788,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, exact_ilog2((jlong)(julong)(juint)-($src2$$constant)));\n+    __ clrrdi($dst$$Register, $src1$$Register, log2i_exact((jlong)(julong)(juint)-($src2$$constant)));\n@@ -9798,1 +9798,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -9810,2 +9810,2 @@\n-              (31 - exact_ilog2((jlong) $src2$$constant)) & 0x1f,\n-              (31 - exact_ilog2((jlong) $src2$$constant)) & 0x1f);\n+              (31 - log2i_exact((jlong) $src2$$constant)) & 0x1f,\n+              (31 - log2i_exact((jlong) $src2$$constant)) & 0x1f);\n@@ -9849,1 +9849,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, exact_ilog2((jlong)-$src2$$constant));\n+    __ clrrdi($dst$$Register, $src1$$Register, log2i_exact((jlong)-$src2$$constant));\n@@ -9859,1 +9859,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -9872,1 +9872,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -10460,1 +10460,1 @@\n-    __ rlwinm($dst$$Register, $src$$Register, (32 - exact_ilog2((jlong)$mask$$constant)) & 0x1f, 31, 31);\n+    __ rlwinm($dst$$Register, $src$$Register, (32 - log2i_exact((jlong)$mask$$constant)) & 0x1f, 31, 31);\n@@ -12155,1 +12155,1 @@\n-    __ clrrdi($dst$$Register, $src$$Register, exact_ilog2((jlong)-$mask$$constant));\n+    __ clrrdi($dst$$Register, $src$$Register, log2i_exact((jlong)-$mask$$constant));\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1804,1 +1804,1 @@\n-      jlong log_divisor = exact_ilog2(right->as_jlong());\n+      jlong log_divisor = log2i_exact(right->as_jlong());\n@@ -1892,1 +1892,1 @@\n-    jlong log_divisor = exact_ilog2(right->as_jint());\n+    jlong log_divisor = log2i_exact(right->as_jint());\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-      __ shift_left(left, exact_ilog2(c + 1), left);\n+      __ shift_left(left, log2i_exact(c + 1), left);\n@@ -236,1 +236,1 @@\n-      __ shift_left(left, exact_ilog2(c - 1), left);\n+      __ shift_left(left, log2i_exact(c - 1), left);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2632,1 +2632,1 @@\n-      __ sarl(lreg, exact_ilog2(divisor));\n+      __ sarl(lreg, log2i_exact(divisor));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-      __ shift_left(left, exact_ilog2(c + 1), left);\n+      __ shift_left(left, log2i_exact(c + 1), left);\n@@ -257,1 +257,1 @@\n-      __ shift_left(left, exact_ilog2(c - 1), left);\n+      __ shift_left(left, log2i_exact(c - 1), left);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  const size_t address_offset_bits = ilog2(address_offset);\n+  const size_t address_offset_bits = log2i_exact(address_offset);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zGlobals_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-        shll(tmp, exact_log2(DataLayout::cell_size));\n+        shll(tmp, log2i_exact((int)DataLayout::cell_size));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -784,1 +784,1 @@\n-  assert(exact_ilog2((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n+  assert(log2i_exact((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9595,1 +9595,1 @@\n-  predicate(ilog2_graceful(~n->in(3)->in(2)->get_long()) > 30);\n+  predicate(log2i_graceful(~n->in(3)->in(2)->get_long()) > 30);\n@@ -9603,1 +9603,1 @@\n-    __ btrq($dst$$Address, exact_ilog2(~$con$$constant));\n+    __ btrq($dst$$Address, log2i_exact(~$con$$constant));\n@@ -9805,1 +9805,1 @@\n-  predicate(ilog2_graceful(n->in(3)->in(2)->get_long()) > 31);\n+  predicate(log2i_graceful(n->in(3)->in(2)->get_long()) > 31);\n@@ -9813,1 +9813,1 @@\n-    __ btsq($dst$$Address, exact_ilog2((julong)$con$$constant));\n+    __ btsq($dst$$Address, log2i_exact((julong)$con$$constant));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-    _compiler_count = MAX2(ilog2_graceful(os::active_processor_count()) - 1, 1);\n+    _compiler_count = MAX2(log2i_graceful(os::active_processor_count()) - 1, 1);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    return MIN2(ilog2(scaled_freq), max_freq_bits);\n+    return MIN2(log2i(scaled_freq), max_freq_bits);\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-    int log_cpu = ilog2(os::active_processor_count());\n-    int loglog_cpu = ilog2(MAX2(log_cpu, 1));\n+    int log_cpu = log2i(os::active_processor_count());\n+    int loglog_cpu = log2i(MAX2(log_cpu, 1));\n","filename":"src\/hotspot\/share\/compiler\/tieredThresholdPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, ilog2(mapping_granularity_in_bytes));\n+    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, log2i_exact(mapping_granularity_in_bytes));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  uint shift = ilog2(size) + 1;\n+  uint shift = log2i(size) + 1;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-    _log_scan_chunks_per_region(ilog2(_scan_chunks_per_region)),\n+    _log_scan_chunks_per_region(log2i(_scan_chunks_per_region)),\n@@ -317,1 +317,1 @@\n-    _scan_chunks_shift = (uint8_t)ilog2(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n+    _scan_chunks_shift = (uint8_t)log2i(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  int region_size_log = exact_ilog2(region_size);\n+  int region_size_log = log2i_exact(region_size);\n@@ -102,1 +102,1 @@\n-  LogCardsPerRegion = ilog2(CardsPerRegion);\n+  LogCardsPerRegion = log2i(CardsPerRegion);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    size_t max_entries_log = (size_t)ilog2(G1RSetRegionEntries);\n+    size_t max_entries_log = (size_t)log2i(G1RSetRegionEntries);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  uint result = ilog2(task_limit);\n+  uint result = log2i(task_limit);\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    int bits = ilog2_graceful(len);\n+    int bits = log2i_graceful(len);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -552,1 +552,1 @@\n-  int region_size_log = ilog2(region_size);\n+  int region_size_log = log2i(region_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  int mag = ilog2_graceful(val) + 1;\n+  int mag = log2i_graceful(val) + 1;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ZPageSizeMediumShift        = ilog2(ZPageSizeMedium);\n+    ZPageSizeMediumShift        = log2i(ZPageSizeMedium);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    int l = ilog2_graceful(d - 1) + 1;\n+    int l = log2i_graceful(d - 1) + 1;\n@@ -383,1 +383,1 @@\n-    int l = ilog2_graceful(d - 1) + 1;\n+    int l = log2i_graceful(d - 1) + 1;\n@@ -933,1 +933,1 @@\n-    log2_con = exact_ilog2(pos_con);\n+    log2_con = log2i_exact(pos_con);\n@@ -1040,1 +1040,1 @@\n-    uint k = exact_ilog2(con + 1);  \/\/ Extract k\n+    uint k = log2i_exact(con + 1);  \/\/ Extract k\n@@ -1100,1 +1100,1 @@\n-    log2_con = exact_ilog2(pos_con);\n+    log2_con = log2i_exact(pos_con);\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    res = new LShiftINode(in(1), phase->intcon(exact_ilog2(bit1)));\n+    res = new LShiftINode(in(1), phase->intcon(log2i_exact(bit1)));\n@@ -210,2 +210,2 @@\n-      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(bit1))));\n-      Node *n2 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(bit2))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(bit1))));\n+      Node *n2 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(bit2))));\n@@ -216,1 +216,1 @@\n-      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(temp))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(temp))));\n@@ -298,1 +298,1 @@\n-    res = new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit1)));\n+    res = new LShiftLNode(in(1), phase->intcon(log2i_exact(bit1)));\n@@ -305,2 +305,2 @@\n-      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit1))));\n-      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit2))));\n+      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2i_exact(bit1))));\n+      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2i_exact(bit2))));\n@@ -312,1 +312,1 @@\n-      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(exact_ilog2(temp))));\n+      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(log2i_exact(temp))));\n@@ -450,1 +450,1 @@\n-      jint t1_support = right_n_bits(1 + ilog2_graceful(t1->_hi));\n+      jint t1_support = right_n_bits(1 + log2i_graceful(t1->_hi));\n@@ -573,1 +573,1 @@\n-      int bit_count = ilog2_graceful(t1->_hi) + 1;\n+      int bit_count = log2i_graceful(t1->_hi) + 1;\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-    _est_switch_depth = ilog2_graceful((hi - lo + 1) - 1) + 1;\n+    _est_switch_depth = log2i_graceful((hi - lo + 1) - 1) + 1;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    Node* cnt = gvn().makecon(TypeInt::make(exact_ilog2(step_val->get_con())));\n+    Node* cnt = gvn().makecon(TypeInt::make(log2i_exact(step_val->get_con())));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/count_trailing_zeros.hpp\"\n@@ -52,1 +53,1 @@\n-inline int ilog2(T value) {\n+inline int log2i(T value) {\n@@ -59,1 +60,1 @@\n-\/\/ Returns ifZero if value is zero, defaulting to -1\n+\/\/ Returns -1 if value is zero\n@@ -63,1 +64,1 @@\n-inline int ilog2_graceful(T value, int ifZero = -1) {\n+inline int log2i_graceful(T value) {\n@@ -65,1 +66,1 @@\n-    return ifZero;\n+    return -1;\n@@ -74,1 +75,1 @@\n-inline int exact_ilog2(T value) {\n+inline int log2i_exact(T value) {\n@@ -76,1 +77,1 @@\n-                       \"x must be a power of 2: \" UINT64_FORMAT,\n+                       \"value must be a power of 2: \" UINT64_FORMAT,\n@@ -78,1 +79,1 @@\n-  return ilog2(value);\n+  return count_trailing_zeros(value);\n@@ -83,1 +84,1 @@\n-  return exact_ilog2((uintptr_t)value);\n+  return log2i_exact((uintptr_t)value);\n@@ -88,1 +89,1 @@\n-  return exact_ilog2((julong)value);\n+  return log2i_exact((julong)value);\n@@ -96,1 +97,1 @@\n-  return T(1) << ilog2(value);\n+  return T(1) << log2i(value);\n@@ -109,1 +110,1 @@\n-  return T(1) << (ilog2(value) + 1);\n+  return T(1) << (log2i(value) + 1);\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -266,68 +266,8 @@\n-#define EXPECT_EQ_ILOG2(type)                                      \\\n-{                                                                  \\\n-  int limit = sizeof (type) * BitsPerByte;                         \\\n-  if (std::is_signed<type>::value) {                               \\\n-    type min = std::numeric_limits<type>::min();                   \\\n-    EXPECT_EQ(limit - 1, ilog2_graceful(min));                     \\\n-    EXPECT_EQ(limit - 1, ilog2_graceful((type)-1));                \\\n-    limit--;                                                       \\\n-  }                                                                \\\n-  {                                                                \\\n-    \/* Test ilog2_graceful handles 0 input *\/                      \\\n-    type var = 1;                                                  \\\n-    EXPECT_EQ(-1, ilog2_graceful((type)0));                        \\\n-    EXPECT_EQ(17, ilog2_graceful((type)0, 17));                    \\\n-  }                                                                \\\n-  {                                                                \\\n-    \/* Test the all-1s bit patterns *\/                             \\\n-    type var = 1;                                                  \\\n-    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {        \\\n-      EXPECT_EQ(i, ilog2(var));                                    \\\n-    }                                                              \\\n-  }                                                                \\\n-  {                                                                \\\n-    \/* Test the powers of 2 and powers + 1*\/                       \\\n-    type var = 1;                                                  \\\n-    for (int i = 0; i < limit; i++, var <<= 1) {                   \\\n-      EXPECT_EQ(i, ilog2(var));                                    \\\n-      EXPECT_EQ(i, ilog2_graceful(var));                           \\\n-      EXPECT_EQ(i, exact_ilog2(var));                              \\\n-      EXPECT_EQ(i, ilog2(var | 1));                                \\\n-    }                                                              \\\n-  }                                                                \\\n-}\n-\n-TEST(power_of_2, ilog2) {\n-  EXPECT_EQ_ILOG2(uintptr_t);\n-  EXPECT_EQ_ILOG2(intptr_t);\n-  EXPECT_EQ_ILOG2(julong);\n-  EXPECT_EQ_ILOG2(int);\n-  EXPECT_EQ_ILOG2(jint);\n-  EXPECT_EQ_ILOG2(uint);\n-  EXPECT_EQ_ILOG2(jlong);\n-}\n-\n-\/\/ Naive microbenchmarks to evaluate that the ilog2\n-\/\/ variants provide a speed-up over the log2 functions\n-\/\/ that was defined in globalDefinitions.hpp\n-\/\/\n-\/\/ Example runs (Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz):\n-\/\/ [ RUN      ] power_of_2.ilog2_micro\n-\/\/ [       OK ] power_of_2.ilog2_micro (258 ms)\n-\/\/ [ RUN      ] power_of_2.ilog2_small_micro\n-\/\/ [       OK ] power_of_2.ilog2_small_micro (113 ms)\n-\/\/ [ RUN      ] power_of_2.log2_long_micro\n-\/\/ [       OK ] power_of_2.log2_long_micro (3569 ms)\n-\/\/ [ RUN      ] power_of_2.log2_long_small_micro\n-\/\/ [       OK ] power_of_2.log2_long_small_micro (550 ms)\n-\/\/\n-\/\/ I.e. a 5x speed-up on small positive values, and 15x on average\n-\/\/ for arbitrary positive int values.\n-\n-\/\/* largest i such that 2^i <= x\n-static int log2_long(julong x) {\n-  int i = -1;\n-  julong p =  1;\n-  while (p != 0 && p <= x) {\n-    \/\/ p = 2^(i+1) && p <= x (i.e., 2^(i+1) <= x)\n-    i++; p *= 2;\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+void check_log2i_variants_for(T dummy) {\n+  int limit = sizeof(T) * BitsPerByte;\n+  if (std::is_signed<T>::value) {\n+    T min = std::numeric_limits<T>::min();\n+    EXPECT_EQ(limit - 1, log2i_graceful(min));\n+    EXPECT_EQ(limit - 1, log2i_graceful((T)-1));\n+    limit--;\n@@ -335,9 +275,3 @@\n-  \/\/ p = 2^(i+1) && x < p (i.e., 2^i <= x < 2^(i+1))\n-  \/\/ (if p = 0 then overflow occurred and i = 63)\n-  return i;\n-}\n-\n-TEST(power_of_2, log2_long_micro) {\n-  int value = 0;\n-  for (julong i = 1; i < 2000000000; i += 17) {\n-    value |= log2_long((julong)i);\n+  {\n+    \/* Test log2i_graceful handles 0 input *\/\n+    EXPECT_EQ(-1, log2i_graceful(T(0)));\n@@ -345,8 +279,5 @@\n-  EXPECT_TRUE(value > 25) << \"value: \" << value;\n-}\n-\n-TEST(power_of_2, log2_long_small_micro) {\n-  int value = 0;\n-  for (int i = 1; i < 100000; i++) {\n-    for (julong j = 1; j < 1024; j += 2) {\n-      value |= log2_long(j);\n+  {\n+    \/* Test the all-1s bit patterns *\/\n+    T var = 1;\n+    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {\n+      EXPECT_EQ(i, log2i(var));\n@@ -355,7 +286,9 @@\n-  EXPECT_TRUE(value <= 15) << \"value: \" << value;\n-}\n-\n-TEST(power_of_2, ilog2_micro) {\n-  int value = 0;\n-  for (julong i = 1; i < 2000000000; i += 17) {\n-    value |= ilog2(i);\n+  {\n+    \/* Test the powers of 2 and powers + 1*\/\n+    T var = 1;\n+    for (int i = 0; i < limit; i++, var <<= 1) {\n+      EXPECT_EQ(i, log2i(var));\n+      EXPECT_EQ(i, log2i_graceful(var));\n+      EXPECT_EQ(i, log2i_exact(var));\n+      EXPECT_EQ(i, log2i(var | 1));\n+    }\n@@ -363,1 +296,0 @@\n-  EXPECT_TRUE(value > 25) << \"value: \" << value;\n@@ -366,8 +298,8 @@\n-TEST(power_of_2, ilog2_small_micro) {\n-  int value = 0;\n-  for (int i = 1; i < 100000; i++) {\n-    for (julong j = 1; j < 1024; j += 2) {\n-      value |= ilog2(j);\n-    }\n-  }\n-  EXPECT_TRUE(value <= 15) << \"value: \" << value;\n+TEST(power_of_2, log2i) {\n+  check_log2i_variants_for((uintptr_t)0);\n+  check_log2i_variants_for((intptr_t)0);\n+  check_log2i_variants_for((julong)0);\n+  check_log2i_variants_for((int)0);\n+  check_log2i_variants_for((jint)0);\n+  check_log2i_variants_for((uint)0);\n+  check_log2i_variants_for((jlong)0);\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":33,"deletions":101,"binary":false,"changes":134,"status":"modified"}]}