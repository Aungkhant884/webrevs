{"files":[{"patch":"@@ -3996,1 +3996,1 @@\n-      (1ULL << log2i_allow_zero(CompressedKlassPointers::range())) - 1;\n+      (1ULL << ilog2_graceful(CompressedKlassPointers::range())) - 1;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  const size_t address_offset_bits = log2i(address_offset);\n+  const size_t address_offset_bits = ilog2(address_offset);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zGlobals_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9595,1 +9595,1 @@\n-  predicate(log2i_allow_zero(~n->in(3)->in(2)->get_long()) > 30);\n+  predicate(ilog2_graceful(~n->in(3)->in(2)->get_long()) > 30);\n@@ -9805,1 +9805,1 @@\n-  predicate(log2i_allow_zero(n->in(3)->in(2)->get_long()) > 31);\n+  predicate(ilog2_graceful(n->in(3)->in(2)->get_long()) > 31);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-    _compiler_count = MAX2(log2i_allow_zero(os::active_processor_count()) - 1, 1);\n+    _compiler_count = MAX2(ilog2_graceful(os::active_processor_count()) - 1, 1);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    return MIN2(log2i(scaled_freq), max_freq_bits);\n+    return MIN2(ilog2(scaled_freq), max_freq_bits);\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-    int log_cpu = log2i(os::active_processor_count());\n-    int loglog_cpu = log2i(MAX2(log_cpu, 1));\n+    int log_cpu = ilog2(os::active_processor_count());\n+    int loglog_cpu = ilog2(MAX2(log_cpu, 1));\n","filename":"src\/hotspot\/share\/compiler\/tieredThresholdPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, log2i(mapping_granularity_in_bytes));\n+    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, ilog2(mapping_granularity_in_bytes));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  uint shift = log2i(size) + 1;\n+  uint shift = ilog2(size) + 1;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-    _log_scan_chunks_per_region(log2i(_scan_chunks_per_region)),\n+    _log_scan_chunks_per_region(ilog2(_scan_chunks_per_region)),\n@@ -317,1 +317,1 @@\n-    _scan_chunks_shift = (uint8_t)log2i(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n+    _scan_chunks_shift = (uint8_t)ilog2(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  LogCardsPerRegion = log2i(CardsPerRegion);\n+  LogCardsPerRegion = ilog2(CardsPerRegion);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    size_t max_entries_log = (size_t)log2i(G1RSetRegionEntries);\n+    size_t max_entries_log = (size_t)ilog2(G1RSetRegionEntries);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  uint result = log2i(task_limit);\n+  uint result = ilog2(task_limit);\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    int bits = log2i(len);\n+    int bits = ilog2_graceful(len);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -552,1 +552,1 @@\n-  int region_size_log = log2i(region_size);\n+  int region_size_log = ilog2(region_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  int mag = log2i_allow_zero(val) + 1;\n+  int mag = ilog2_graceful(val) + 1;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ZPageSizeMediumShift        = log2i(ZPageSizeMedium);\n+    ZPageSizeMediumShift        = ilog2(ZPageSizeMedium);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    int l = log2i_allow_zero(d - 1) + 1;\n+    int l = ilog2_graceful(d - 1) + 1;\n@@ -383,1 +383,1 @@\n-    int l = log2i_allow_zero(d - 1) + 1;\n+    int l = ilog2_graceful(d - 1) + 1;\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -450,1 +450,1 @@\n-      jint t1_support = right_n_bits(1 + log2i_allow_zero(t1->_hi));\n+      jint t1_support = right_n_bits(1 + ilog2_graceful(t1->_hi));\n@@ -573,1 +573,1 @@\n-      int bit_count = log2i_allow_zero(t1->_hi) + 1;\n+      int bit_count = ilog2_graceful(t1->_hi) + 1;\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-    _est_switch_depth = log2i_allow_zero((hi - lo + 1) - 1) + 1;\n+    _est_switch_depth = ilog2_graceful((hi - lo + 1) - 1) + 1;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\/\/ Returns true iff there exists integer i such that (T(1) << i) == x.\n+\/\/ Returns true iff there exists integer i such that (T(1) << i) == value.\n@@ -45,2 +45,2 @@\n-constexpr bool is_power_of_2(T x) {\n-  return (x > T(0)) && ((x & (x - 1)) == T(0));\n+constexpr bool is_power_of_2(T value) {\n+  return (value > T(0)) && ((value & (value - 1)) == T(0));\n@@ -49,4 +49,2 @@\n-\/\/ Log2 of any integral value, i.e., largest i such that 2^i <= x\n-\/\/ Precondition: x != 0\n-\/\/ For negative values this will return 63 for 64-bit types, 31 for\n-\/\/ 32-bit types, and so on.\n+\/\/ Log2 of a positive, integral value, i.e., largest i such that 2^i <= value\n+\/\/ Precondition: value > 0\n@@ -54,4 +52,4 @@\n-inline int log2i(T x) {\n-  assert(x != T(0), \"x can't be 0\");\n-  const int bits = sizeof(x) * BitsPerByte;\n-  return bits - count_leading_zeros(x) - 1;\n+inline int ilog2(T value) {\n+  assert(x > T(0), \"value must be > 0\");\n+  const int bits = sizeof(value) * BitsPerByte;\n+  return bits - count_leading_zeros(value) - 1;\n@@ -60,2 +58,4 @@\n-\/\/ Log2 of any integral value, i.e., largest i such that 2^i <= x\n-\/\/ Returns ifZero if x is zero, defaulting to -1\n+\/\/ Log2 of positive, integral value, i.e., largest i such that 2^i <= value\n+\/\/ Returns ifZero if value is zero, defaulting to -1\n+\/\/ For negative values this will return 63 for 64-bit types, 31 for\n+\/\/ 32-bit types, and so on.\n@@ -63,2 +63,2 @@\n-inline int log2i_allow_zero(T x, int ifZero = -1) {\n-  if (x == 0) {\n+inline int ilog2_graceful(T value, int ifZero = -1) {\n+  if (value == 0) {\n@@ -67,1 +67,2 @@\n-  return log2i(x);\n+  const int bits = sizeof(value) * BitsPerByte;\n+  return bits - count_leading_zeros(value) - 1;\n@@ -77,1 +78,1 @@\n-  return log2i(value);\n+  return ilog2(value);\n@@ -95,1 +96,1 @@\n-  return T(1) << log2i(value);\n+  return T(1) << ilog2(value);\n@@ -108,1 +109,1 @@\n-  return T(1) << (log2i(value) + 1);\n+  return T(1) << (ilog2(value) + 1);\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -266,24 +266,32 @@\n-#define EXPECT_EQ_LOG2(fn, exact_fn, type)                      \\\n-{                                                               \\\n-  int limit = sizeof (type) * BitsPerByte;                      \\\n-  if (std::is_signed<type>::value) {                            \\\n-    EXPECT_EQ(limit - 1, fn(std::numeric_limits<type>::min())); \\\n-    EXPECT_EQ(limit - 1, fn((type)-1));                         \\\n-    limit--;                                                    \\\n-  }                                                             \\\n-  {                                                             \\\n-    \/* Test the all-1s bit patterns *\/                          \\\n-    type var = 1;                                               \\\n-    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {     \\\n-      EXPECT_EQ(i, fn(var));                                    \\\n-    }                                                           \\\n-  }                                                             \\\n-  {                                                             \\\n-    \/* Test the powers of 2 and powers + 1*\/                    \\\n-    type var = 1;                                               \\\n-    for (int i = 0; i < limit; i++, var <<= 1) {                \\\n-      EXPECT_EQ(i, fn(var));                                    \\\n-      EXPECT_EQ(i, exact_fn(var));                              \\\n-      EXPECT_EQ(i, fn(var | 1));                                \\\n-    }                                                           \\\n-  }                                                             \\\n+#define EXPECT_EQ_ILOG2(type)                                      \\\n+{                                                                  \\\n+  int limit = sizeof (type) * BitsPerByte;                         \\\n+  if (std::is_signed<type>::value) {                               \\\n+    type min = std::numeric_limits<type>::min();                   \\\n+    EXPECT_EQ(limit - 1, ilog2_graceful(min));                     \\\n+    EXPECT_EQ(limit - 1, ilog2_graceful((type)-1));                \\\n+    limit--;                                                       \\\n+  }                                                                \\\n+  {                                                                \\\n+    \/* Test ilog2_graceful handles 0 input *\/                      \\\n+    type var = 1;                                                  \\\n+    EXPECT_EQ(-1, ilog2_graceful((type)0));                        \\\n+    EXPECT_EQ(17, ilog2_graceful((type)0, 17));                    \\\n+  }                                                                \\\n+  {                                                                \\\n+    \/* Test the all-1s bit patterns *\/                             \\\n+    type var = 1;                                                  \\\n+    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {        \\\n+      EXPECT_EQ(i, ilog2(var));                                    \\\n+    }                                                              \\\n+  }                                                                \\\n+  {                                                                \\\n+    \/* Test the powers of 2 and powers + 1*\/                       \\\n+    type var = 1;                                                  \\\n+    for (int i = 0; i < limit; i++, var <<= 1) {                   \\\n+      EXPECT_EQ(i, ilog2(var));                                    \\\n+      EXPECT_EQ(i, ilog2_graceful(var));                           \\\n+      EXPECT_EQ(i, exact_ilog2(var));                              \\\n+      EXPECT_EQ(i, ilog2(var | 1));                                \\\n+    }                                                              \\\n+  }                                                                \\\n@@ -292,8 +300,8 @@\n-TEST(power_of_2, log2i) {\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, uintptr_t);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, intptr_t);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, julong);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, int);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, jint);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, uint);\n-  EXPECT_EQ_LOG2(log2i, exact_ilog2, jlong);\n+TEST(power_of_2, ilog2) {\n+  EXPECT_EQ_ILOG2(uintptr_t);\n+  EXPECT_EQ_ILOG2(intptr_t);\n+  EXPECT_EQ_ILOG2(julong);\n+  EXPECT_EQ_ILOG2(int);\n+  EXPECT_EQ_ILOG2(jint);\n+  EXPECT_EQ_ILOG2(uint);\n+  EXPECT_EQ_ILOG2(jlong);\n@@ -302,1 +310,1 @@\n-\/\/ Naive microbenchmarks to evaluate that the log2i\n+\/\/ Naive microbenchmarks to evaluate that the ilog2\n@@ -307,0 +315,4 @@\n+\/\/ [ RUN      ] power_of_2.ilog2_micro\n+\/\/ [       OK ] power_of_2.ilog2_micro (258 ms)\n+\/\/ [ RUN      ] power_of_2.ilog2_small_micro\n+\/\/ [       OK ] power_of_2.ilog2_small_micro (113 ms)\n@@ -311,4 +323,0 @@\n-\/\/ [ RUN      ] power_of_2.log2i_micro\n-\/\/ [       OK ] power_of_2.log2i_micro (258 ms)\n-\/\/ [ RUN      ] power_of_2.log2i_small_micro\n-\/\/ [       OK ] power_of_2.log2i_small_micro (113 ms)\n@@ -350,1 +358,1 @@\n-TEST(power_of_2, log2i_micro) {\n+TEST(power_of_2, ilog2_micro) {\n@@ -353,1 +361,1 @@\n-    value |= log2i(i);\n+    value |= ilog2(i);\n@@ -358,1 +366,1 @@\n-TEST(power_of_2, log2i_small_micro) {\n+TEST(power_of_2, ilog2_small_micro) {\n@@ -362,1 +370,1 @@\n-      value |= log2i(j);\n+      value |= ilog2(j);\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":49,"deletions":41,"binary":false,"changes":90,"status":"modified"}]}