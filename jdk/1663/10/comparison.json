{"files":[{"patch":"@@ -1775,1 +1775,1 @@\n-            unsigned int shift = exact_log2_long(c);\n+            unsigned int shift = log2i_exact(c);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  const size_t address_offset_bits = log2_intptr(address_offset);\n+  const size_t address_offset_bits = log2i_exact(address_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zGlobals_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-    tbnz(rscratch1, exact_log2(SafepointMechanism::poll_bit()), slow_path);\n+    tbnz(rscratch1, log2i_exact(SafepointMechanism::poll_bit()), slow_path);\n@@ -3997,1 +3997,1 @@\n-      (1ULL << log2_intptr(CompressedKlassPointers::range())) - 1;\n+      (1ULL << log2i(CompressedKlassPointers::range())) - 1;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -851,1 +851,1 @@\n-      int power = log2_intptr(c);\n+      int power = log2i_exact(c);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) log2_intptr(c + 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c + 1);\n@@ -337,1 +337,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) log2_intptr(c - 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c - 1);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    clrldi(a, s, 64-log2_long((((jlong) ui16)+1)));\n+    clrldi(a, s, 64 - log2i_exact((((jlong) ui16)+1)));\n@@ -87,1 +87,1 @@\n-    rlwinm(a, s, 0, 31-log2_long((jlong) ui16), 31-log2_long((jlong) ui16));\n+    rlwinm(a, s, 0, 31 - log2i_exact((jlong) ui16), 31 - log2i_exact((jlong) ui16));\n@@ -90,1 +90,1 @@\n-    clrrdi(a, s, log2_long((jlong)-ui16));\n+    clrrdi(a, s, log2i_exact((jlong)-ui16));\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-      int log2 = log2_intptr(divisor);\n+      int log2 = log2i_exact(divisor);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    __ shift_left(left, log2_int(c + 1), result);\n+    __ shift_left(left, log2i_exact(c + 1), result);\n@@ -300,1 +300,1 @@\n-    __ shift_left(left, log2_int(c - 1), result);\n+    __ shift_left(left, log2i_exact(c - 1), result);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  clrrdi(r, r, log2_long((jlong)modulus));\n+  clrrdi(r, r, log2i_exact((jlong)modulus));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9082,1 +9082,1 @@\n-    long maskbits  = src3 + log2_long((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + log2i_exact((jlong) (julong) (juint) -src2);\n@@ -9102,1 +9102,1 @@\n-    long maskbits  = src3 + log2_long((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + log2i_exact((jlong) (julong) (juint) -src2);\n@@ -9370,1 +9370,1 @@\n-    int length = log2_long(((jlong) $src3$$constant) + 1);\n+    int length = log2i_exact(((jlong) $src3$$constant) + 1);\n@@ -9388,1 +9388,1 @@\n-    int length = log2_long(((jlong) $src3$$constant) + 1);\n+    int length = log2i_exact(((jlong) $src3$$constant) + 1);\n@@ -9792,1 +9792,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, log2_long((jlong)(julong)(juint)-($src2$$constant)));\n+    __ clrrdi($dst$$Register, $src1$$Register, log2i_exact((jlong)(julong)(juint)-($src2$$constant)));\n@@ -9802,1 +9802,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64-log2_long((((jlong) $src2$$constant)+1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -9814,1 +9814,2 @@\n-              (31-log2_long((jlong) $src2$$constant)) & 0x1f, (31-log2_long((jlong) $src2$$constant)) & 0x1f);\n+              (31 - log2i_exact((jlong) $src2$$constant)) & 0x1f,\n+              (31 - log2i_exact((jlong) $src2$$constant)) & 0x1f);\n@@ -9852,1 +9853,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, log2_long((jlong)-$src2$$constant));\n+    __ clrrdi($dst$$Register, $src1$$Register, log2i_exact((jlong)-$src2$$constant));\n@@ -9862,1 +9863,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64-log2_long((((jlong) $src2$$constant)+1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -9875,1 +9876,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64-log2_long((((jlong) $src2$$constant)+1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - log2i_exact((((jlong) $src2$$constant) + 1)));\n@@ -10463,1 +10464,1 @@\n-    __ rlwinm($dst$$Register, $src$$Register, (32-log2_long((jlong)$mask$$constant)) & 0x1f, 31, 31);\n+    __ rlwinm($dst$$Register, $src$$Register, (32 - log2i_exact((jlong)$mask$$constant)) & 0x1f, 31, 31);\n@@ -12158,1 +12159,1 @@\n-    __ clrrdi($dst$$Register, $src$$Register, log2_long((jlong)-$mask$$constant));\n+    __ clrrdi($dst$$Register, $src$$Register, log2i_exact((jlong)-$mask$$constant));\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1900,1 +1900,1 @@\n-  __ clrrdi(Rdef_offset_addr, Rdef_offset_addr, log2_long((jlong)BytesPerInt));\n+  __ clrrdi(Rdef_offset_addr, Rdef_offset_addr, LogBytesPerInt);\n@@ -1959,1 +1959,1 @@\n-  __ clrrdi(Rdef_offset_addr, Rdef_offset_addr, log2_long((jlong)BytesPerInt));\n+  __ clrrdi(Rdef_offset_addr, Rdef_offset_addr, LogBytesPerInt);\n@@ -2047,1 +2047,1 @@\n-  __ clrrdi(Rarray, Rarray, log2_long((jlong)BytesPerInt));\n+  __ clrrdi(Rarray, Rarray, LogBytesPerInt);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1805,1 +1805,1 @@\n-      jlong log_divisor = log2_long(right->as_jlong());\n+      jlong log_divisor = log2i_exact(right->as_jlong());\n@@ -1893,1 +1893,1 @@\n-    jlong log_divisor = log2_long(right->as_jint());\n+    jlong log_divisor = log2i_exact(right->as_jint());\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-      __ shift_left(left, log2_int(c + 1), left);\n+      __ shift_left(left, log2i_exact(c + 1), left);\n@@ -236,1 +236,1 @@\n-      __ shift_left(left, log2_int(c - 1), left);\n+      __ shift_left(left, log2i_exact(c - 1), left);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2633,1 +2633,1 @@\n-      __ sarl(lreg, log2_jint(divisor));\n+      __ sarl(lreg, log2i_exact(divisor));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-      __ shift_left(left, log2_jint(c + 1), left);\n+      __ shift_left(left, log2i_exact(c + 1), left);\n@@ -257,1 +257,1 @@\n-      __ shift_left(left, log2_jint(c - 1), left);\n+      __ shift_left(left, log2i_exact(c - 1), left);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  const size_t address_offset_bits = log2_intptr(address_offset);\n+  const size_t address_offset_bits = log2i_exact(address_offset);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zGlobals_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        shll(tmp, exact_log2(DataLayout::cell_size));\n+        shll(tmp, log2i_exact((int)DataLayout::cell_size));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -785,1 +785,1 @@\n-  assert(exact_log2_long(CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n+  assert(log2i_exact((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9595,1 +9595,1 @@\n-  predicate(log2_long(~n->in(3)->in(2)->get_long()) > 30);\n+  predicate(log2i_graceful(~n->in(3)->in(2)->get_long()) > 30);\n@@ -9603,1 +9603,1 @@\n-    __ btrq($dst$$Address, log2_long(~$con$$constant));\n+    __ btrq($dst$$Address, log2i_exact(~$con$$constant));\n@@ -9805,1 +9805,1 @@\n-  predicate(log2_long(n->in(3)->in(2)->get_long()) > 31);\n+  predicate(log2i_graceful(n->in(3)->in(2)->get_long()) > 31);\n@@ -9813,1 +9813,1 @@\n-    __ btsq($dst$$Address, log2_long((julong)$con$$constant));\n+    __ btsq($dst$$Address, log2i_exact((julong)$con$$constant));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-    _compiler_count = MAX2(log2_int(os::active_processor_count())-1,1);\n+    _compiler_count = MAX2(log2i_graceful(os::active_processor_count()) - 1, 1);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  intx max_freq_bits = InvocationCounter::number_of_count_bits + 1;\n+  int max_freq_bits = InvocationCounter::number_of_count_bits + 1;\n@@ -127,6 +127,1 @@\n-    intx res = log2_intptr(scaled_freq);\n-    if (res > max_freq_bits) {\n-      return max_freq_bits;\n-    } else {\n-      return res;\n-    }\n+    return MIN2(log2i(scaled_freq), max_freq_bits);\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-    int log_cpu = log2_int(os::active_processor_count());\n-    int loglog_cpu = log2_int(MAX2(log_cpu, 1));\n+    int log_cpu = log2i(os::active_processor_count());\n+    int loglog_cpu = log2i(MAX2(log_cpu, 1));\n","filename":"src\/hotspot\/share\/compiler\/tieredThresholdPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, log2_intptr(mapping_granularity_in_bytes));\n+    initialize_base(base, num_target_elems, bias, target_elem_size_in_bytes, log2i_exact(mapping_granularity_in_bytes));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -46,1 +47,1 @@\n-  uint shift = log2_intptr((uintptr_t)size) + 1;\n+  uint shift = log2i(size) + 1;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -292,1 +293,1 @@\n-    _log_scan_chunks_per_region(log2_uint(_scan_chunks_per_region)),\n+    _log_scan_chunks_per_region(log2i(_scan_chunks_per_region)),\n@@ -316,1 +317,1 @@\n-    _scan_chunks_shift = (uint8_t)log2_intptr(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n+    _scan_chunks_shift = (uint8_t)log2i(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  int region_size_log = exact_log2_long((jlong)region_size);\n+  int region_size_log = log2i_exact(region_size);\n@@ -102,1 +102,1 @@\n-  LogCardsPerRegion = log2_long((jlong) CardsPerRegion);\n+  LogCardsPerRegion = log2i(CardsPerRegion);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -86,1 +87,1 @@\n-    size_t max_entries_log = (size_t)log2_long((jlong)G1RSetRegionEntries);\n+    size_t max_entries_log = (size_t)log2i(G1RSetRegionEntries);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -42,1 +43,1 @@\n-  uint result = log2_uint(task_limit);\n+  uint result = log2i(task_limit);\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -123,1 +124,1 @@\n-    int bits = log2_long((size_t) len);\n+    int bits = log2i_graceful(len);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -551,1 +552,1 @@\n-  int region_size_log = log2_long((jlong) region_size);\n+  int region_size_log = log2i(region_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  int mag = log2_intptr(val) + 1;\n+  int mag = log2i_graceful(val) + 1;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ZPageSizeMediumShift        = log2_intptr(ZPageSizeMedium);\n+    ZPageSizeMediumShift        = log2i_exact(ZPageSizeMedium);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    int l = log2_jint(d-1)+1;\n+    int l = log2i_graceful(d - 1) + 1;\n@@ -383,1 +383,1 @@\n-    int l = log2_long(d-1)+1;\n+    int l = log2i_graceful(d - 1) + 1;\n@@ -932,2 +932,2 @@\n-  if( is_power_of_2(pos_con) ) {\n-    log2_con = log2_intptr((intptr_t)pos_con);\n+  if (is_power_of_2(pos_con)) {\n+    log2_con = log2i_exact(pos_con);\n@@ -1039,2 +1039,2 @@\n-  if( con >= 0 && con < max_jlong && is_power_of_2(con+1) ) {\n-    uint k = exact_log2_long(con+1);  \/\/ Extract k\n+  if(con >= 0 && con < max_jlong && is_power_of_2(con + 1)) {\n+    uint k = log2i_exact(con + 1);  \/\/ Extract k\n@@ -1099,2 +1099,2 @@\n-  if( is_power_of_2(pos_con) ) {\n-    log2_con = exact_log2_long(pos_con);\n+  if (is_power_of_2(pos_con)) {\n+    log2_con = log2i_exact(pos_con);\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    res = new LShiftINode(in(1), phase->intcon(log2_uint(bit1)));\n+    res = new LShiftINode(in(1), phase->intcon(log2i_exact(bit1)));\n@@ -206,1 +206,0 @@\n-\n@@ -208,2 +207,2 @@\n-    unsigned int bit2 = abs_con-bit1;\n-    bit2 = bit2 & (0-bit2);          \/\/ Extract 2nd bit\n+    unsigned int bit2 = abs_con - bit1;\n+    bit2 = bit2 & (0 - bit2);          \/\/ Extract 2nd bit\n@@ -211,2 +210,2 @@\n-      Node *n1 = phase->transform( new LShiftINode(in(1), phase->intcon(log2_uint(bit1))));\n-      Node *n2 = phase->transform( new LShiftINode(in(1), phase->intcon(log2_uint(bit2))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(bit1))));\n+      Node *n2 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(bit2))));\n@@ -214,3 +213,2 @@\n-\n-    } else if (is_power_of_2(abs_con+1)) {\n-      \/\/ Sleezy: power-of-2 -1.  Next time be generic.\n+    } else if (is_power_of_2(abs_con + 1)) {\n+      \/\/ Sleezy: power-of-2 - 1.  Next time be generic.\n@@ -218,1 +216,1 @@\n-      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(log2_uint(temp))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(log2i_exact(temp))));\n@@ -300,1 +298,1 @@\n-    res = new LShiftLNode(in(1), phase->intcon(log2_long(bit1)));\n+    res = new LShiftLNode(in(1), phase->intcon(log2i_exact(bit1)));\n@@ -307,2 +305,2 @@\n-      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2_long(bit1))));\n-      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2_long(bit2))));\n+      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2i_exact(bit1))));\n+      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(log2i_exact(bit2))));\n@@ -314,1 +312,1 @@\n-      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(log2_long(temp))));\n+      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(log2i_exact(temp))));\n@@ -450,1 +448,1 @@\n-    const TypeInt* t1 = phase->type( in(1) )->isa_int();\n+    const TypeInt* t1 = phase->type(in(1))->isa_int();\n@@ -452,1 +450,1 @@\n-      jint t1_support = right_n_bits(1 + log2_jint(t1->_hi));\n+      jint t1_support = right_n_bits(1 + log2i_graceful(t1->_hi));\n@@ -575,1 +573,1 @@\n-      int bit_count = log2_long(t1->_hi) + 1;\n+      int bit_count = log2i_graceful(t1->_hi) + 1;\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-    _est_switch_depth = log2_intptr((hi-lo+1)-1)+1;\n+    _est_switch_depth = log2i_graceful((hi - lo + 1) - 1) + 1;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-    Node* cnt = gvn().makecon(TypeInt::make(log2_int(step_val->get_con())));\n+    Node* cnt = gvn().makecon(TypeInt::make(log2i_exact(step_val->get_con())));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1045,53 +1045,0 @@\n-\/\/ Returns largest i such that 2^i <= x.\n-\/\/ If x == 0, the function returns -1.\n-inline int log2_intptr(uintptr_t x) {\n-  int i = -1;\n-  uintptr_t p = 1;\n-  while (p != 0 && p <= x) {\n-    \/\/ p = 2^(i+1) && p <= x (i.e., 2^(i+1) <= x)\n-    i++; p *= 2;\n-  }\n-  \/\/ p = 2^(i+1) && x < p (i.e., 2^i <= x < 2^(i+1))\n-  \/\/ If p = 0, overflow has occurred and i = 31 or i = 63 (depending on the machine word size).\n-  return i;\n-}\n-\n-\/\/* largest i such that 2^i <= x\n-inline int log2_long(julong x) {\n-  int i = -1;\n-  julong p =  1;\n-  while (p != 0 && p <= x) {\n-    \/\/ p = 2^(i+1) && p <= x (i.e., 2^(i+1) <= x)\n-    i++; p *= 2;\n-  }\n-  \/\/ p = 2^(i+1) && x < p (i.e., 2^i <= x < 2^(i+1))\n-  \/\/ (if p = 0 then overflow occurred and i = 63)\n-  return i;\n-}\n-\n-\/\/ If x < 0, the function returns 31 on a 32-bit machine and 63 on a 64-bit machine.\n-inline int log2_intptr(intptr_t x) {\n-  return log2_intptr((uintptr_t)x);\n-}\n-\n-inline int log2_int(int x) {\n-  STATIC_ASSERT(sizeof(int) <= sizeof(uintptr_t));\n-  return log2_intptr((uintptr_t)(unsigned int)x);\n-}\n-\n-inline int log2_jint(jint x) {\n-  STATIC_ASSERT(sizeof(jint) <= sizeof(uintptr_t));\n-  return log2_intptr((uintptr_t)(juint)x);\n-}\n-\n-inline int log2_uint(uint x) {\n-  STATIC_ASSERT(sizeof(uint) <= sizeof(uintptr_t));\n-  return log2_intptr((uintptr_t)x);\n-}\n-\n-\/\/  A negative value of 'x' will return '63'\n-inline int log2_jlong(jlong x) {\n-  STATIC_ASSERT(sizeof(jlong) <= sizeof(julong));\n-  return log2_long((julong)x);\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":53,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -67,2 +67,1 @@\n-      int len = _entry_size * block_size;\n-      len = 1 << log2_int(len); \/\/ round down to power of 2\n+      int len = round_down_power_of_2(_entry_size * block_size);\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/count_trailing_zeros.hpp\"\n@@ -43,1 +44,1 @@\n-\/\/ Returns true iff there exists integer i such that (T(1) << i) == x.\n+\/\/ Returns true iff there exists integer i such that (T(1) << i) == value.\n@@ -45,2 +46,2 @@\n-constexpr bool is_power_of_2(T x) {\n-  return (x > T(0)) && ((x & (x - 1)) == T(0));\n+constexpr bool is_power_of_2(T value) {\n+  return (value > T(0)) && ((value & (value - 1)) == T(0));\n@@ -49,3 +50,21 @@\n-\/\/ Log2 of a power of 2\n-inline int exact_log2(intptr_t x) {\n-  assert(is_power_of_2((uintptr_t)x), \"x must be a power of 2: \" INTPTR_FORMAT, x);\n+\/\/ Log2 of a positive, integral value, i.e., largest i such that 2^i <= value\n+\/\/ Precondition: value > 0\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline int log2i(T value) {\n+  assert(value > T(0), \"value must be > 0\");\n+  const int bits = sizeof(value) * BitsPerByte;\n+  return bits - count_leading_zeros(value) - 1;\n+}\n+\n+\/\/ Log2 of positive, integral value, i.e., largest i such that 2^i <= value\n+\/\/ Returns -1 if value is zero\n+\/\/ For negative values this will return 63 for 64-bit types, 31 for\n+\/\/ 32-bit types, and so on.\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline int log2i_graceful(T value) {\n+  if (value == 0) {\n+    return -1;\n+  }\n+  const int bits = sizeof(value) * BitsPerByte;\n+  return bits - count_leading_zeros(value) - 1;\n+}\n@@ -53,2 +72,8 @@\n-  const int bits = sizeof x * BitsPerByte;\n-  return bits - count_leading_zeros(x) - 1;\n+\/\/ Log2 of a power of 2, i.e., i such that 2^i == value\n+\/\/ Preconditions: value > 0, value is a power of two\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline int log2i_exact(T value) {\n+  assert(is_power_of_2(value),\n+         \"value must be a power of 2: \" UINT64_FORMAT_X,\n+         static_cast<uint64_t>(value));\n+  return count_trailing_zeros(value);\n@@ -57,3 +82,4 @@\n-\/\/ Log2 of a power of 2\n-inline int exact_log2_long(jlong x) {\n-  assert(is_power_of_2((julong)x), \"x must be a power of 2: \" JLONG_FORMAT, x);\n+\/\/ Preconditions: value != 0, and the unsigned representation of value is a power of two\n+inline int exact_log2(intptr_t value) {\n+  return log2i_exact((uintptr_t)value);\n+}\n@@ -61,2 +87,3 @@\n-  const int bits = sizeof x * BitsPerByte;\n-  return bits - count_leading_zeros(x) - 1;\n+\/\/ Preconditions: value != 0, and the unsigned representation of value is a power of two\n+inline int exact_log2_long(jlong value) {\n+  return log2i_exact((julong)value);\n@@ -70,2 +97,1 @@\n-  uint32_t lz = count_leading_zeros(value);\n-  return T(1) << (sizeof(T) * BitsPerByte - 1 - lz);\n+  return T(1) << log2i(value);\n@@ -84,2 +110,1 @@\n-  uint32_t lz = count_leading_zeros(value);\n-  return T(1) << (sizeof(T) * BitsPerByte - lz);\n+  return T(1) << (log2i(value) + 1);\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":42,"deletions":17,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -193,35 +193,0 @@\n-#define EXPECT_EQ_LOG2(fn, type)                                \\\n-{                                                               \\\n-  int limit = sizeof (type) * BitsPerByte;                      \\\n-  if (std::is_signed<type>::value) {                            \\\n-    EXPECT_EQ(limit - 1, fn(std::numeric_limits<type>::min())); \\\n-    EXPECT_EQ(limit - 1, fn((type)-1));                         \\\n-    limit--;                                                    \\\n-  }                                                             \\\n-  {                                                             \\\n-    \/* Test the all-1s bit patterns *\/                          \\\n-    type var = 1;                                               \\\n-    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {     \\\n-      EXPECT_EQ(i, fn(var));                                    \\\n-    }                                                           \\\n-  }                                                             \\\n-  {                                                             \\\n-    \/* Test the powers of 2 and powers + 1*\/                    \\\n-    type var = 1;                                               \\\n-    for (int i = 0; i < limit; i++, var <<= 1) {                \\\n-      EXPECT_EQ(i, fn(var));                                    \\\n-      EXPECT_EQ(i, fn(var | 1));                                \\\n-    }                                                           \\\n-  }                                                             \\\n-}\n-\n-TEST(globalDefinitions, log2) {\n-  EXPECT_EQ_LOG2(log2_intptr, uintptr_t);\n-  EXPECT_EQ_LOG2(log2_intptr, intptr_t);\n-  EXPECT_EQ_LOG2(log2_long, julong);\n-  EXPECT_EQ_LOG2(log2_int, int);\n-  EXPECT_EQ_LOG2(log2_jint, jint);\n-  EXPECT_EQ_LOG2(log2_uint, uint);\n-  EXPECT_EQ_LOG2(log2_jlong, jlong);\n-}\n-\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -265,0 +265,42 @@\n+\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+void check_log2i_variants_for(T dummy) {\n+  int limit = sizeof(T) * BitsPerByte;\n+  if (std::is_signed<T>::value) {\n+    T min = std::numeric_limits<T>::min();\n+    EXPECT_EQ(limit - 1, log2i_graceful(min));\n+    EXPECT_EQ(limit - 1, log2i_graceful((T)-1));\n+    limit--;\n+  }\n+  {\n+    \/\/ Test log2i_graceful handles 0 input\n+    EXPECT_EQ(-1, log2i_graceful(T(0)));\n+  }\n+  {\n+    \/\/ Test the all-1s bit patterns\n+    T var = 1;\n+    for (int i = 0; i < limit; i++, var = (var << 1) | 1) {\n+      EXPECT_EQ(i, log2i(var));\n+    }\n+  }\n+  {\n+    \/\/ Test the powers of 2 and powers + 1\n+    T var = 1;\n+    for (int i = 0; i < limit; i++, var <<= 1) {\n+      EXPECT_EQ(i, log2i(var));\n+      EXPECT_EQ(i, log2i_graceful(var));\n+      EXPECT_EQ(i, log2i_exact(var));\n+      EXPECT_EQ(i, log2i(var | 1));\n+    }\n+  }\n+}\n+\n+TEST(power_of_2, log2i) {\n+  check_log2i_variants_for((uintptr_t)0);\n+  check_log2i_variants_for((intptr_t)0);\n+  check_log2i_variants_for((julong)0);\n+  check_log2i_variants_for((int)0);\n+  check_log2i_variants_for((jint)0);\n+  check_log2i_variants_for((uint)0);\n+  check_log2i_variants_for((jlong)0);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}