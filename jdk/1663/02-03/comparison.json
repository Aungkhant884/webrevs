{"files":[{"patch":"@@ -1774,1 +1774,1 @@\n-            unsigned int shift = exact_log2i(c);\n+            unsigned int shift = exact_ilog2(c);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-  const size_t address_offset_bits = exact_log2i(address_offset);\n+  const size_t address_offset_bits = exact_ilog2(address_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zGlobals_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -850,1 +850,1 @@\n-      int power = exact_log2i(c);\n+      int power = exact_ilog2(c);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) exact_log2i(c + 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) exact_ilog2(c + 1);\n@@ -337,1 +337,1 @@\n-    LIR_Address::Scale scale = (LIR_Address::Scale) exact_log2i(c - 1);\n+    LIR_Address::Scale scale = (LIR_Address::Scale) exact_ilog2(c - 1);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    clrldi(a, s, 64 - exact_log2i((((jlong) ui16)+1)));\n+    clrldi(a, s, 64 - exact_ilog2((((jlong) ui16)+1)));\n@@ -87,1 +87,1 @@\n-    rlwinm(a, s, 0, 31 - exact_log2i((jlong) ui16), 31 - exact_log2i((jlong) ui16));\n+    rlwinm(a, s, 0, 31 - exact_ilog2((jlong) ui16), 31 - exact_ilog2((jlong) ui16));\n@@ -90,1 +90,1 @@\n-    clrrdi(a, s, exact_log2i((jlong)-ui16));\n+    clrrdi(a, s, exact_ilog2((jlong)-ui16));\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-      int log2 = exact_log2i(divisor);\n+      int log2 = exact_ilog2(divisor);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    __ shift_left(left, exact_log2i(c + 1), result);\n+    __ shift_left(left, exact_ilog2(c + 1), result);\n@@ -300,1 +300,1 @@\n-    __ shift_left(left, exact_log2i(c - 1), result);\n+    __ shift_left(left, exact_ilog2(c - 1), result);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  clrrdi(r, r, exact_log2i((jlong)modulus));\n+  clrrdi(r, r, exact_ilog2((jlong)modulus));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9078,1 +9078,1 @@\n-    long maskbits  = src3 + exact_log2i((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + exact_ilog2((jlong) (julong) (juint) -src2);\n@@ -9098,1 +9098,1 @@\n-    long maskbits  = src3 + exact_log2i((jlong) (julong) (juint) -src2);\n+    long maskbits  = src3 + exact_ilog2((jlong) (julong) (juint) -src2);\n@@ -9366,1 +9366,1 @@\n-    int length = exact_log2i(((jlong) $src3$$constant) + 1);\n+    int length = exact_ilog2(((jlong) $src3$$constant) + 1);\n@@ -9384,1 +9384,1 @@\n-    int length = exact_log2i(((jlong) $src3$$constant) + 1);\n+    int length = exact_ilog2(((jlong) $src3$$constant) + 1);\n@@ -9788,1 +9788,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, exact_log2i((jlong)(julong)(juint)-($src2$$constant)));\n+    __ clrrdi($dst$$Register, $src1$$Register, exact_ilog2((jlong)(julong)(juint)-($src2$$constant)));\n@@ -9798,1 +9798,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_log2i((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n@@ -9810,2 +9810,2 @@\n-              (31 - exact_log2i((jlong) $src2$$constant)) & 0x1f,\n-              (31 - exact_log2i((jlong) $src2$$constant)) & 0x1f);\n+              (31 - exact_ilog2((jlong) $src2$$constant)) & 0x1f,\n+              (31 - exact_ilog2((jlong) $src2$$constant)) & 0x1f);\n@@ -9849,1 +9849,1 @@\n-    __ clrrdi($dst$$Register, $src1$$Register, exact_log2i((jlong)-$src2$$constant));\n+    __ clrrdi($dst$$Register, $src1$$Register, exact_ilog2((jlong)-$src2$$constant));\n@@ -9859,1 +9859,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_log2i((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n@@ -9872,1 +9872,1 @@\n-    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_log2i((((jlong) $src2$$constant) + 1)));\n+    __ clrldi($dst$$Register, $src1$$Register, 64 - exact_ilog2((((jlong) $src2$$constant) + 1)));\n@@ -10460,1 +10460,1 @@\n-    __ rlwinm($dst$$Register, $src$$Register, (32 - exact_log2i((jlong)$mask$$constant)) & 0x1f, 31, 31);\n+    __ rlwinm($dst$$Register, $src$$Register, (32 - exact_ilog2((jlong)$mask$$constant)) & 0x1f, 31, 31);\n@@ -12155,1 +12155,1 @@\n-    __ clrrdi($dst$$Register, $src$$Register, exact_log2i((jlong)-$mask$$constant));\n+    __ clrrdi($dst$$Register, $src$$Register, exact_ilog2((jlong)-$mask$$constant));\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1804,1 +1804,1 @@\n-      jlong log_divisor = exact_log2i(right->as_jlong());\n+      jlong log_divisor = exact_ilog2(right->as_jlong());\n@@ -1892,1 +1892,1 @@\n-    jlong log_divisor = exact_log2i(right->as_jint());\n+    jlong log_divisor = exact_ilog2(right->as_jint());\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-      __ shift_left(left, exact_log2i(c + 1), left);\n+      __ shift_left(left, exact_ilog2(c + 1), left);\n@@ -236,1 +236,1 @@\n-      __ shift_left(left, exact_log2i(c - 1), left);\n+      __ shift_left(left, exact_ilog2(c - 1), left);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2632,1 +2632,1 @@\n-      __ sarl(lreg, exact_log2i(divisor));\n+      __ sarl(lreg, exact_ilog2(divisor));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-      __ shift_left(left, exact_log2i(c + 1), left);\n+      __ shift_left(left, exact_ilog2(c + 1), left);\n@@ -257,1 +257,1 @@\n-      __ shift_left(left, exact_log2i(c - 1), left);\n+      __ shift_left(left, exact_ilog2(c - 1), left);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -784,1 +784,1 @@\n-  assert(exact_log2i((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n+  assert(exact_ilog2((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9603,1 +9603,1 @@\n-    __ btrq($dst$$Address, exact_log2i(~$con$$constant));\n+    __ btrq($dst$$Address, exact_ilog2(~$con$$constant));\n@@ -9813,1 +9813,1 @@\n-    __ btsq($dst$$Address, exact_log2i((julong)$con$$constant));\n+    __ btsq($dst$$Address, exact_ilog2((julong)$con$$constant));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  int region_size_log = exact_log2i(region_size);\n+  int region_size_log = exact_ilog2(region_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -933,1 +933,1 @@\n-    log2_con = exact_log2i(pos_con);\n+    log2_con = exact_ilog2(pos_con);\n@@ -1040,1 +1040,1 @@\n-    uint k = exact_log2i(con + 1);  \/\/ Extract k\n+    uint k = exact_ilog2(con + 1);  \/\/ Extract k\n@@ -1100,1 +1100,1 @@\n-    log2_con = exact_log2i(pos_con);\n+    log2_con = exact_ilog2(pos_con);\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    res = new LShiftINode(in(1), phase->intcon(exact_log2i(bit1)));\n+    res = new LShiftINode(in(1), phase->intcon(exact_ilog2(bit1)));\n@@ -210,2 +210,2 @@\n-      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_log2i(bit1))));\n-      Node *n2 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_log2i(bit2))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(bit1))));\n+      Node *n2 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(bit2))));\n@@ -216,1 +216,1 @@\n-      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_log2i(temp))));\n+      Node *n1 = phase->transform(new LShiftINode(in(1), phase->intcon(exact_ilog2(temp))));\n@@ -298,1 +298,1 @@\n-    res = new LShiftLNode(in(1), phase->intcon(exact_log2i(bit1)));\n+    res = new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit1)));\n@@ -305,2 +305,2 @@\n-      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_log2i(bit1))));\n-      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_log2i(bit2))));\n+      Node *n1 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit1))));\n+      Node *n2 = phase->transform(new LShiftLNode(in(1), phase->intcon(exact_ilog2(bit2))));\n@@ -312,1 +312,1 @@\n-      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(exact_log2i(temp))));\n+      Node *n1 = phase->transform( new LShiftLNode(in(1), phase->intcon(exact_ilog2(temp))));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    Node* cnt = gvn().makecon(TypeInt::make(exact_log2i(step_val->get_con())));\n+    Node* cnt = gvn().makecon(TypeInt::make(exact_ilog2(step_val->get_con())));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-\/\/ Preconditions: value != 0, and the unsigned representation of value is a power of two\n+\/\/ Preconditions: value > 0, value is a power of two\n@@ -73,2 +73,2 @@\n-inline int exact_log2i(T value) {\n-  assert(is_power_of_2(static_cast<typename std::make_unsigned<T>::type>(value)),\n+inline int exact_ilog2(T value) {\n+  assert(is_power_of_2(value),\n@@ -80,0 +80,1 @@\n+\/\/ Preconditions: value != 0, and the unsigned representation of value is a power of two\n@@ -81,1 +82,1 @@\n-  return exact_log2i(value);\n+  return exact_ilog2((uintptr_t)value);\n@@ -84,0 +85,1 @@\n+\/\/ Preconditions: value != 0, and the unsigned representation of value is a power of two\n@@ -85,1 +87,1 @@\n-  return exact_log2i(value);\n+  return exact_ilog2((julong)value);\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -293,7 +293,7 @@\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, uintptr_t);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, intptr_t);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, julong);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, int);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, jint);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, uint);\n-  EXPECT_EQ_LOG2(log2i, exact_log2i, jlong);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, uintptr_t);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, intptr_t);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, julong);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, int);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, jint);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, uint);\n+  EXPECT_EQ_LOG2(log2i, exact_ilog2, jlong);\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}