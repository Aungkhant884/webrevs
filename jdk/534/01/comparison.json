{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,0 @@\n-\n-\n-import java.lang.management.ManagementFactory;\n-\n@@ -37,2 +33,1 @@\n-            String pidStr = ManagementFactory.getRuntimeMXBean().getName()\n-                    .split(\"@\")[0];\n+            long pid = ProcessHandle.current().pid();\n@@ -41,1 +36,1 @@\n-                cmd = \"taskkill.exe \/F \/PID \" + pidStr;\n+                cmd = \"taskkill.exe \/F \/PID \" + pid;\n@@ -43,1 +38,1 @@\n-                cmd = \"kill -9 \" + pidStr;\n+                cmd = \"kill -9 \" + pid;\n","filename":"test\/failure_handler\/test\/sanity\/Suicide.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- *          java.management\n@@ -56,1 +55,0 @@\n-import java.lang.management.ManagementFactory;\n@@ -131,4 +129,1 @@\n-        String vmName = ManagementFactory.getRuntimeMXBean().getName();\n-        int p = vmName.indexOf('@');\n-        assert p != -1 : \"VM name not in <pid>@<host> format: \" + vmName;\n-        String pid = vmName.substring(0, p);\n+        String pid = Long.toString(ProcessHandle.current().pid());\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/RedefineMethodUsedByMultipleMethodHandles.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-import java.lang.management.ManagementFactory;\n@@ -137,4 +136,1 @@\n-        String vmName = ManagementFactory.getRuntimeMXBean().getName();\n-        int p = vmName.indexOf('@');\n-        assumeTrue(p != -1);\n-        String pid = vmName.substring(0, p);\n+        String pid = Long.toString(ProcessHandle.current().pid());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/RedefineClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.lang.management.ManagementFactory;\n@@ -87,3 +86,1 @@\n-        String nameOfRunningVM = ManagementFactory.getRuntimeMXBean().getName();\n-        int p = nameOfRunningVM.indexOf('@');\n-        String pid = nameOfRunningVM.substring(0, p);\n+        String pid = Long.toString(ProcessHandle.current().pid());\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass\/Agent.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- *          java.management\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass\/Launcher.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.lang.management.ManagementFactory;\n@@ -69,3 +68,1 @@\n-        String nameOfRunningVM = ManagementFactory.getRuntimeMXBean().getName();\n-        int p = nameOfRunningVM.indexOf('@');\n-        String pid = nameOfRunningVM.substring(0, p);\n+        String pid = Long.toString(ProcessHandle.current().pid());\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass_classloaders\/Agent.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- *          java.management\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass_classloaders\/Launcher.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- *          java.management\n@@ -39,2 +38,0 @@\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.RuntimeMXBean;\n@@ -55,1 +52,1 @@\n-    final static String PID = getPid();\n+    final static String PID = Long.toString(ProcessHandle.current().pid());\n@@ -517,16 +514,0 @@\n-    \/\/ This helper relies on RuntimeMXBean.getName() returning a string\n-    \/\/ that looks like this: 5436@mt-haku\n-    \/\/\n-    \/\/ The testlibrary has tryFindJvmPid(), but that uses a separate\n-    \/\/ process which is much more expensive for finding out your own PID.\n-    \/\/\n-    static String getPid() {\n-        RuntimeMXBean runtimebean = ManagementFactory.getRuntimeMXBean();\n-        String vmname = runtimebean.getName();\n-        int i = vmname.indexOf('@');\n-        if (i != -1) {\n-            vmname = vmname.substring(0, i);\n-        }\n-        return vmname;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestThreadDumpMonitorContention.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"}]}