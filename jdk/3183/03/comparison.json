{"files":[{"patch":"@@ -331,2 +331,5 @@\n-                CloseHandle(handle);\n-                throw x;\n+                \/\/ ignore exception if file size is zero\n+                if (GetFileSizeEx(handle) != 0) {\n+                    CloseHandle(handle);\n+                    throw x;\n+                }\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -175,0 +175,10 @@\n+    \/**\n+     * Retrieves the size of the specified file.\n+     *\n+     * BOOL GetFileSizeEx(\n+     *   HANDLE hFile,\n+     *   PLARGE_INTEGER lpFileSize\n+     * )\n+     *\/\n+    static native long GetFileSizeEx(long handle) throws WindowsException;\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsNativeDispatcher.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -312,0 +312,12 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_fs_WindowsNativeDispatcher_GetFileSizeEx(JNIEnv *env,\n+    jclass this, jlong handle)\n+{\n+    HANDLE h = (HANDLE)jlong_to_ptr(handle);\n+    LARGE_INTEGER size;\n+    if (GetFileSizeEx(h, &size) == 0) {\n+        throwWindowsException(env, GetLastError());\n+    }\n+    return long_to_jlong(size.QuadPart);\n+}\n+\n@@ -524,1 +536,1 @@\n-    if (SetEndOfFile(h) == 0)\n+    if (SetEndOfFile(h) == 0) {\n@@ -526,0 +538,1 @@\n+    }\n","filename":"src\/java.base\/windows\/native\/libnio\/fs\/WindowsNativeDispatcher.c","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+\/* @test\n+ * @bug 8263898\n+ * @summary Verify a byte can be written to the null device.\n+ * @requires os.family == \"windows\"\n+ * @run main NulDevice\n+*\/\n+public class NulDevice {\n+    public static void main(final String[] args) throws IOException {\n+        System.getProperties().list(System.out);\n+        System.out.println();\n+        Path path = Path.of(\"nul\");\n+        try (final OutputStream os = Files.newOutputStream(path)) {\n+            os.write(0x02);\n+            System.out.printf(\"Wrote a byte to %s%n\", path);\n+            try (InputStream is = Files.newInputStream(path);) {\n+                int aByte = is.read();\n+                System.out.printf(\"read %d from %s%n\", aByte, path);\n+                if (aByte != -1) {\n+                    throw new RuntimeException(\"Should only read -1 from NUL\");\n+                }\n+            }\n+        }\n+        try (final OutputStream os = Files.newOutputStream(path, WRITE)) {\n+            os.write(0x02);\n+            System.out.printf(\"Wrote a byte to %s%n\", path);\n+        }\n+        try (final FileChannel ch = FileChannel.open(path, CREATE,\n+             TRUNCATE_EXISTING, WRITE)) {\n+            byte[] bytes = \"Whatever\".getBytes();\n+            ByteBuffer buf = ByteBuffer.allocate(2*bytes.length);\n+            buf.put(bytes);\n+            int nw = ch.write(buf);\n+            System.out.printf(\"Wrote %d bytes to %s%n\", nw, path);\n+            if (nw != bytes.length) {\n+                throw new RuntimeException(\"Should write \" + bytes.length +\n+                    \" to NUL\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/NulDevice.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}