{"files":[{"patch":"@@ -331,2 +331,5 @@\n-                CloseHandle(handle);\n-                throw x;\n+                \/\/ ignore exception if file size is zero\n+                if (GetFileSizeEx(handle) != 0) {\n+                    CloseHandle(handle);\n+                    throw x;\n+                } \n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -175,0 +175,10 @@\n+    \/**\n+     * Retrieves the size of the specified file.\n+     *\n+     * BOOL GetFileSizeEx(\n+     *   HANDLE hFile,\n+     *   PLARGE_INTEGER lpFileSize\n+     * )\n+     *\/\n+    static native long GetFileSizeEx(long handle) throws WindowsException;\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsNativeDispatcher.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -312,0 +312,12 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_fs_WindowsNativeDispatcher_GetFileSizeEx(JNIEnv *env,\n+    jclass this, jlong handle)\n+{\n+    HANDLE h = (HANDLE)jlong_to_ptr(handle);\n+    LARGE_INTEGER size;\n+    if (GetFileSizeEx(h, &size) == 0) {\n+        throwWindowsException(env, GetLastError());\n+    }\n+    return long_to_jlong(size.QuadPart);\n+}\n+\n@@ -525,7 +537,1 @@\n-        DWORD error = GetLastError();\n-        LARGE_INTEGER size;\n-        if (GetFileSizeEx(h, &size) == 0) {\n-            throwWindowsException(env, GetLastError());\n-        } else if (size.QuadPart != 0) {\n-            throwWindowsException(env, error);\n-        }\n+        throwWindowsException(env, GetLastError());\n","filename":"src\/java.base\/windows\/native\/libnio\/fs\/WindowsNativeDispatcher.c","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires os.family == \"windows\"\n","filename":"test\/jdk\/java\/nio\/file\/Files\/NullDevice.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}