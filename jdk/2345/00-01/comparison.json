{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-    RetryExecutor() {\n+    public RetryExecutor() {\n@@ -37,1 +37,1 @@\n-    RetryExecutor setMaxAttemptsCount(int v) {\n+    public RetryExecutor setMaxAttemptsCount(int v) {\n@@ -42,1 +42,1 @@\n-    RetryExecutor setAttemptTimeoutMillis(int v) {\n+    public RetryExecutor setAttemptTimeoutMillis(int v) {\n@@ -47,1 +47,1 @@\n-    RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n+    public RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n@@ -52,1 +52,1 @@\n-    void abort() {\n+    public void abort() {\n@@ -56,1 +56,1 @@\n-    boolean isAborted() {\n+    public boolean isAborted() {\n@@ -71,1 +71,1 @@\n-    void execute(String cmdline[]) throws IOException {\n+    public void execute(String cmdline[]) throws IOException {\n@@ -75,1 +75,1 @@\n-    void execute(ProcessBuilder pb) throws IOException {\n+    public void execute(ProcessBuilder pb) throws IOException {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/RetryExecutor.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.jpackage.internal.RetryExecutor;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.test;\n-\n-import java.io.IOException;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-\n-public final class RetryExecutor {\n-    RetryExecutor() {\n-        setMaxAttemptsCount(5);\n-        setAttemptTimeoutMillis(2 * 1000);\n-    }\n-\n-    RetryExecutor setMaxAttemptsCount(int v) {\n-        attempts = v;\n-        return this;\n-    }\n-\n-    RetryExecutor setAttemptTimeoutMillis(int v) {\n-        timeoutMillis = v;\n-        return this;\n-    }\n-\n-    RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n-        executorInitializer = v;\n-        return this;\n-    }\n-\n-    void abort() {\n-        aborted = true;\n-    }\n-\n-    boolean isAborted() {\n-        return aborted;\n-    }\n-\n-    void execute(String cmdline[]) throws IOException {\n-        executeLoop(() -> Executor.of(cmdline));\n-    }\n-\n-    private void executeLoop(Supplier<Executor> execSupplier) throws IOException {\n-        aborted = false;\n-        for (;;) {\n-            if (aborted) {\n-                break;\n-            }\n-\n-            Executor exec = execSupplier.get();\n-            if (executorInitializer != null) {\n-                executorInitializer.accept(exec);\n-            }\n-            Executor.Result result = exec.executeWithoutExitCodeCheck();\n-            if (result.getExitCode() == 0) {\n-                break;\n-            } else {\n-                if (aborted || (--attempts) <= 0) {\n-                    throw new IOException(\n-                            String.format(\"Command %s exited with %d code\",\n-                                    exec.getPrintableCommandLine(),\n-                                    result.getExitCode()));\n-                }\n-            }\n-\n-            try {\n-                Thread.sleep(timeoutMillis);\n-            } catch (InterruptedException ex) {\n-                TKit.trace(ex.getMessage());\n-                throw new RuntimeException(ex);\n-            }\n-        }\n-    }\n-\n-    private Consumer<Executor> executorInitializer;\n-    private boolean aborted;\n-    private int attempts;\n-    private int timeoutMillis;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/RetryExecutor.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"}]}