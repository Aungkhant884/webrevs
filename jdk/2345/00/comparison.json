{"files":[{"patch":"@@ -440,1 +440,0 @@\n-                    \"-force\",\n@@ -454,2 +453,2 @@\n-                \/\/ 10 times with 3 second delays.\n-                retryExecutor.setMaxAttemptsCount(10).setAttemptTimeoutMillis(3000)\n+                \/\/ 10 times with 6 second delays.\n+                retryExecutor.setMaxAttemptsCount(10).setAttemptTimeoutMillis(6000)\n@@ -459,1 +458,10 @@\n-                    throw ex;\n+                    \/\/ Now force to detach if it still attached\n+                    if (Files.exists(mountedRoot)) {\n+                        pb = new ProcessBuilder(\n+                                hdiutil,\n+                                \"detach\",\n+                                \"-force\",\n+                                hdiUtilVerbosityFlag,\n+                                mountedRoot.toAbsolutePath().toString());\n+                        IOUtils.exec(pb);\n+                    }\n@@ -472,1 +480,2 @@\n-        new RetryExecutor()\n+        try {\n+            new RetryExecutor()\n@@ -476,0 +485,18 @@\n+        } catch (Exception ex) {\n+            \/\/ Convert might failed if something holds file. Try to convert copy.\n+            Path protoDMG2 = imagesRoot\n+                    .resolve(APP_NAME.fetchFrom(params) + \"-tmp2.dmg\");\n+            Files.copy(protoDMG, protoDMG2);\n+            try {\n+                pb = new ProcessBuilder(\n+                        hdiutil,\n+                        \"convert\",\n+                        protoDMG2.toAbsolutePath().toString(),\n+                        hdiUtilVerbosityFlag,\n+                        \"-format\", \"UDZO\",\n+                        \"-o\", finalDMG.toAbsolutePath().toString());\n+                IOUtils.exec(pb);\n+            } finally {\n+                Files.deleteIfExists(protoDMG2);\n+            }\n+        }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,5 +69,30 @@\n-            \/\/ detach might not work right away due to resource busy error, so\n-            \/\/ repeat detach several times or fail. Try 10 times with 3 seconds\n-            \/\/ delay.\n-            Executor.of(\"\/usr\/bin\/hdiutil\", \"detach\").addArgument(mountPoint).\n-                    executeAndRepeatUntilExitCode(0, 10, 3);\n+            String cmdline[] = {\n+                \"\/usr\/bin\/hdiutil\",\n+                \"detach\",\n+                \"-verbose\",\n+                mountPoint.toAbsolutePath().toString()};\n+            \/\/ \"hdiutil detach\" might not work right away due to resource busy error, so\n+            \/\/ repeat detach several times.\n+            RetryExecutor retryExecutor = new RetryExecutor();\n+            \/\/ Image can get detach even if we got resource busy error, so stop\n+            \/\/ trying to detach it if it is no longer attached.\n+            retryExecutor.setExecutorInitializer(exec -> {\n+                if (!Files.exists(mountPoint)) {\n+                    retryExecutor.abort();\n+                }\n+            });\n+            try {\n+                \/\/ 10 times with 6 second delays.\n+                retryExecutor.setMaxAttemptsCount(10)\n+                        .setAttemptTimeoutMillis(6000)\n+                        .execute(cmdline);\n+            } catch (IOException ex) {\n+                if (!retryExecutor.isAborted()) {\n+                    \/\/ Now force to detach if it still attached\n+                    if (Files.exists(mountPoint)) {\n+                        Executor.of(\"\/usr\/bin\/hdiutil\", \"detach\",\n+                                    \"-force\", \"-verbose\")\n+                                 .addArgument(mountPoint).execute();\n+                    }\n+                }\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+public final class RetryExecutor {\n+    RetryExecutor() {\n+        setMaxAttemptsCount(5);\n+        setAttemptTimeoutMillis(2 * 1000);\n+    }\n+\n+    RetryExecutor setMaxAttemptsCount(int v) {\n+        attempts = v;\n+        return this;\n+    }\n+\n+    RetryExecutor setAttemptTimeoutMillis(int v) {\n+        timeoutMillis = v;\n+        return this;\n+    }\n+\n+    RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n+        executorInitializer = v;\n+        return this;\n+    }\n+\n+    void abort() {\n+        aborted = true;\n+    }\n+\n+    boolean isAborted() {\n+        return aborted;\n+    }\n+\n+    void execute(String cmdline[]) throws IOException {\n+        executeLoop(() -> Executor.of(cmdline));\n+    }\n+\n+    private void executeLoop(Supplier<Executor> execSupplier) throws IOException {\n+        aborted = false;\n+        for (;;) {\n+            if (aborted) {\n+                break;\n+            }\n+\n+            Executor exec = execSupplier.get();\n+            if (executorInitializer != null) {\n+                executorInitializer.accept(exec);\n+            }\n+            Executor.Result result = exec.executeWithoutExitCodeCheck();\n+            if (result.getExitCode() == 0) {\n+                break;\n+            } else {\n+                if (aborted || (--attempts) <= 0) {\n+                    throw new IOException(\n+                            String.format(\"Command %s exited with %d code\",\n+                                    exec.getPrintableCommandLine(),\n+                                    result.getExitCode()));\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(timeoutMillis);\n+            } catch (InterruptedException ex) {\n+                TKit.trace(ex.getMessage());\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+    }\n+\n+    private Consumer<Executor> executorInitializer;\n+    private boolean aborted;\n+    private int attempts;\n+    private int timeoutMillis;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/RetryExecutor.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}