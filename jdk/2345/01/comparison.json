{"files":[{"patch":"@@ -440,1 +440,0 @@\n-                    \"-force\",\n@@ -454,2 +453,2 @@\n-                \/\/ 10 times with 3 second delays.\n-                retryExecutor.setMaxAttemptsCount(10).setAttemptTimeoutMillis(3000)\n+                \/\/ 10 times with 6 second delays.\n+                retryExecutor.setMaxAttemptsCount(10).setAttemptTimeoutMillis(6000)\n@@ -459,1 +458,10 @@\n-                    throw ex;\n+                    \/\/ Now force to detach if it still attached\n+                    if (Files.exists(mountedRoot)) {\n+                        pb = new ProcessBuilder(\n+                                hdiutil,\n+                                \"detach\",\n+                                \"-force\",\n+                                hdiUtilVerbosityFlag,\n+                                mountedRoot.toAbsolutePath().toString());\n+                        IOUtils.exec(pb);\n+                    }\n@@ -472,1 +480,2 @@\n-        new RetryExecutor()\n+        try {\n+            new RetryExecutor()\n@@ -476,0 +485,18 @@\n+        } catch (Exception ex) {\n+            \/\/ Convert might failed if something holds file. Try to convert copy.\n+            Path protoDMG2 = imagesRoot\n+                    .resolve(APP_NAME.fetchFrom(params) + \"-tmp2.dmg\");\n+            Files.copy(protoDMG, protoDMG2);\n+            try {\n+                pb = new ProcessBuilder(\n+                        hdiutil,\n+                        \"convert\",\n+                        protoDMG2.toAbsolutePath().toString(),\n+                        hdiUtilVerbosityFlag,\n+                        \"-format\", \"UDZO\",\n+                        \"-o\", finalDMG.toAbsolutePath().toString());\n+                IOUtils.exec(pb);\n+            } finally {\n+                Files.deleteIfExists(protoDMG2);\n+            }\n+        }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-    RetryExecutor() {\n+    public RetryExecutor() {\n@@ -37,1 +37,1 @@\n-    RetryExecutor setMaxAttemptsCount(int v) {\n+    public RetryExecutor setMaxAttemptsCount(int v) {\n@@ -42,1 +42,1 @@\n-    RetryExecutor setAttemptTimeoutMillis(int v) {\n+    public RetryExecutor setAttemptTimeoutMillis(int v) {\n@@ -47,1 +47,1 @@\n-    RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n+    public RetryExecutor setExecutorInitializer(Consumer<Executor> v) {\n@@ -52,1 +52,1 @@\n-    void abort() {\n+    public void abort() {\n@@ -56,1 +56,1 @@\n-    boolean isAborted() {\n+    public boolean isAborted() {\n@@ -71,1 +71,1 @@\n-    void execute(String cmdline[]) throws IOException {\n+    public void execute(String cmdline[]) throws IOException {\n@@ -75,1 +75,1 @@\n-    void execute(ProcessBuilder pb) throws IOException {\n+    public void execute(ProcessBuilder pb) throws IOException {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/RetryExecutor.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import jdk.jpackage.internal.RetryExecutor;\n@@ -69,5 +70,30 @@\n-            \/\/ detach might not work right away due to resource busy error, so\n-            \/\/ repeat detach several times or fail. Try 10 times with 3 seconds\n-            \/\/ delay.\n-            Executor.of(\"\/usr\/bin\/hdiutil\", \"detach\").addArgument(mountPoint).\n-                    executeAndRepeatUntilExitCode(0, 10, 3);\n+            String cmdline[] = {\n+                \"\/usr\/bin\/hdiutil\",\n+                \"detach\",\n+                \"-verbose\",\n+                mountPoint.toAbsolutePath().toString()};\n+            \/\/ \"hdiutil detach\" might not work right away due to resource busy error, so\n+            \/\/ repeat detach several times.\n+            RetryExecutor retryExecutor = new RetryExecutor();\n+            \/\/ Image can get detach even if we got resource busy error, so stop\n+            \/\/ trying to detach it if it is no longer attached.\n+            retryExecutor.setExecutorInitializer(exec -> {\n+                if (!Files.exists(mountPoint)) {\n+                    retryExecutor.abort();\n+                }\n+            });\n+            try {\n+                \/\/ 10 times with 6 second delays.\n+                retryExecutor.setMaxAttemptsCount(10)\n+                        .setAttemptTimeoutMillis(6000)\n+                        .execute(cmdline);\n+            } catch (IOException ex) {\n+                if (!retryExecutor.isAborted()) {\n+                    \/\/ Now force to detach if it still attached\n+                    if (Files.exists(mountPoint)) {\n+                        Executor.of(\"\/usr\/bin\/hdiutil\", \"detach\",\n+                                    \"-force\", \"-verbose\")\n+                                 .addArgument(mountPoint).execute();\n+                    }\n+                }\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"}]}