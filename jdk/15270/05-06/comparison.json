{"files":[{"patch":"@@ -2,0 +2,9 @@\n+*.java\tdiff=java\n+*.c\tdiff=cpp\n+*.h\tdiff=cpp\n+*.cpp\tdiff=cpp\n+*.hpp\tdiff=cpp\n+*.md\tdiff=markdown\n+*.sh\tdiff=bash\n+*.html\tdiff=html\n+*.css\tdiff=css\n","filename":".gitattributes","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,6 +34,0 @@\n-      apt-gcc-version:\n-        required: true\n-        type: string\n-      apt-gcc-cross-version:\n-        required: true\n-        type: string\n@@ -116,6 +110,5 @@\n-              gcc-${{ inputs.gcc-major-version }}=${{ inputs.apt-gcc-version }} \\\n-              g++-${{ inputs.gcc-major-version }}=${{ inputs.apt-gcc-version }} \\\n-              gcc-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}=${{ inputs.apt-gcc-cross-version }} \\\n-              g++-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}=${{ inputs.apt-gcc-cross-version }} \\\n-              libxrandr-dev libxtst-dev libcups2-dev libasound2-dev \\\n-              debian-ports-archive-keyring\n+              gcc-${{ inputs.gcc-major-version }} \\\n+              g++-${{ inputs.gcc-major-version }} \\\n+              gcc-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \\\n+              g++-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \\\n+              libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n@@ -140,1 +133,1 @@\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype-dev,libpng-dev\n@@ -143,1 +136,0 @@\n-          $(test -n \"${{ matrix.debian-keyring }}\" && echo \"--keyring=${{ matrix.debian-keyring }}\")\n@@ -156,1 +148,2 @@\n-          rm -rf sysroot\/usr\/lib\/{apt,udev,systemd}\n+          rm -rf sysroot\/usr\/lib\/{apt,gcc,udev,systemd}\n+          rm -rf sysroot\/usr\/libexec\/gcc\n","filename":".github\/workflows\/build-cross-compile.yml","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -52,3 +52,0 @@\n-      apt-gcc-version:\n-        required: true\n-        type: string\n@@ -117,1 +114,1 @@\n-          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }}=${{ inputs.apt-gcc-version }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }}=${{ inputs.apt-gcc-version }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}\n+          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}\n","filename":".github\/workflows\/build-linux.yml","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -133,1 +133,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -147,1 +146,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -151,1 +149,1 @@\n-      apt-extra-packages: 'libfreetype6-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libc6-i386 libgcc-s1:i386 libstdc++6:i386'\n+      apt-extra-packages: 'libfreetype-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libc6-i386 libgcc-s1:i386 libstdc++6:i386'\n@@ -166,1 +164,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -181,1 +178,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -196,1 +192,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -212,1 +207,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n@@ -226,2 +220,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n-      apt-gcc-cross-version: '10.5.0-1ubuntu1~22.04cross1'\n@@ -293,1 +285,0 @@\n-      apt-gcc-version: '10.5.0-1ubuntu1~22.04'\n","filename":".github\/workflows\/main.yml","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1118,1 +1118,1 @@\n-version of Google Test is 1.13.0, whose source code can be obtained:<\/p>\n+version of Google Test is 1.14.0, whose source code can be obtained:<\/p>\n@@ -1121,2 +1121,2 @@\n-href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.13.0\">here<\/a><\/li>\n-<li>or by checking out <code>v1.13.0<\/code> tag of\n+href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0\">here<\/a><\/li>\n+<li>or by checking out <code>v1.14.0<\/code> tag of\n@@ -1124,1 +1124,1 @@\n-<code>git clone -b v1.13.0 https:\/\/github.com\/google\/googletest<\/code><\/li>\n+<code>git clone -b v1.14.0 https:\/\/github.com\/google\/googletest<\/code><\/li>\n","filename":"doc\/building.html","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -887,1 +887,1 @@\n-The minimum supported version of Google Test is 1.13.0, whose source\n+The minimum supported version of Google Test is 1.14.0, whose source\n@@ -890,2 +890,2 @@\n- * by downloading and unpacking the source bundle from [here](https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.13.0)\n- * or by checking out `v1.13.0` tag of `googletest` project: `git clone -b v1.13.0 https:\/\/github.com\/google\/googletest`\n+ * by downloading and unpacking the source bundle from [here](https:\/\/github.com\/google\/googletest\/releases\/tag\/v1.14.0)\n+ * or by checking out `v1.14.0` tag of `googletest` project: `git clone -b v1.14.0 https:\/\/github.com\/google\/googletest`\n","filename":"doc\/building.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-    -tag revised:X \\\n","filename":"make\/Docs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -970,1 +970,2 @@\n-  # java.base jmod needs jrt-fs.jar and access to the other jmods to be built.\n+  # java.base jmod needs jrt-fs.jar and access to the jmods for all non\n+  # upgradeable modules and their transitive dependencies.\n@@ -974,1 +975,4 @@\n-    java.base-jmod: jrtfs-jar $(filter-out java.base-jmod, $(JMOD_TARGETS))\n+    java.base-jmod: jrtfs-jar $(addsuffix -jmod, $(filter-out java.base, $(sort \\\n+        $(foreach m, $(filter-out $(call FindAllUpgradeableModules), $(JMOD_MODULES)), \\\n+          $m $(call FindTransitiveDepsForModules, $m) \\\n+        ))))\n","filename":"make\/Main.gmk","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n-    BASIC_LDFLAGS=\"-Wl,-z,defs -Wl,-z,relro -Wl,-z,now\"\n+    # add --no-as-needed to disable default --as-needed link flag on some GCC toolchains\n+    BASIC_LDFLAGS=\"-Wl,-z,defs -Wl,-z,relro -Wl,-z,now -Wl,--no-as-needed\"\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-JTREG_MINIMUM_VERSION=7.3\n-GTEST_MINIMUM_VERSION=1.13.0\n+JTREG_MINIMUM_VERSION=7.3.1\n+GTEST_MINIMUM_VERSION=1.14.0\n","filename":"make\/autoconf\/lib-tests.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -218,0 +218,1 @@\n+REWRITE_PATHS_RELATIVE = false\n@@ -219,0 +220,13 @@\n+  REWRITE_PATHS_RELATIVE = true\n+endif\n+\n+# CCACHE_BASEDIR needs fix-deps-file as makefiles use absolute filenames for\n+# object files while CCACHE_BASEDIR will make ccache relativize all paths for\n+# its compiler. The compiler then produces relative dependency files.\n+# make does not know a relative and absolute filename is the same so it will\n+# ignore such dependencies.\n+ifneq ($(CCACHE), )\n+  REWRITE_PATHS_RELATIVE = true\n+endif\n+\n+ifeq ($(REWRITE_PATHS_RELATIVE), true)\n","filename":"make\/common\/NativeCompilation.gmk","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-GTEST_VERSION=1.13.0\n-JTREG_VERSION=7.3+1\n+GTEST_VERSION=1.14.0\n+JTREG_VERSION=7.3.1+1\n","filename":"make\/conf\/github-actions.conf","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1191,1 +1191,1 @@\n-            version: \"7.3\",\n+            version: \"7.3.1\",\n@@ -1193,1 +1193,1 @@\n-            file: \"bundles\/jtreg-7.3+1.zip\",\n+            file: \"bundles\/jtreg-7.3.1+1.zip\",\n@@ -1202,1 +1202,1 @@\n-            revision: \"1.35+1.0\"\n+            revision: \"1.37+1.0\"\n@@ -1273,1 +1273,1 @@\n-            revision: \"1.13.0+1.0\"\n+            revision: \"1.14.0+1.0\"\n","filename":"make\/conf\/jib-profiles.js","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-        if ($$7 ~ \/??_7.*@@6B@\/ && $$7 !~ \/type_info\/ && $$7 !~ \/lambda\/) print $$7; \\\n+        if ($$7 ~ \/\\?\\?_7.*@@6B@\/ && $$7 !~ \/type_info\/ && $$7 !~ \/lambda\/) print $$7; \\\n","filename":"make\/hotspot\/lib\/JvmMapfile.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2292,1 +2292,0 @@\n-  bool ret_value = true;\n@@ -2300,1 +2299,1 @@\n-        ret_value = false;\n+        return false;\n@@ -2306,1 +2305,9 @@\n-        ret_value = false;\n+        return false;\n+      }\n+      break;\n+    case Op_FmaF:\n+    case Op_FmaD:\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      if (!UseFMA) {\n+        return false;\n@@ -2311,1 +2318,1 @@\n-  return ret_value; \/\/ Per default match rules are supported.\n+  return true; \/\/ Per default match rules are supported.\n@@ -14308,1 +14315,0 @@\n-  predicate(UseFMA);\n@@ -14314,0 +14320,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14325,1 +14332,0 @@\n-  predicate(UseFMA);\n@@ -14331,0 +14337,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14340,1 +14347,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14342,2 +14350,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -14349,0 +14355,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14358,1 +14365,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14360,2 +14368,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -14367,0 +14373,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14376,1 +14383,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14378,2 +14386,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -14385,0 +14391,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14394,1 +14401,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14396,2 +14404,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -14403,0 +14409,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14414,1 +14421,0 @@\n-  predicate(UseFMA);\n@@ -14420,0 +14426,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14431,1 +14438,0 @@\n-  predicate(UseFMA);\n@@ -14437,1 +14443,2 @@\n-  \/\/ n.b. insn name should be fnmsubd\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+    \/\/ n.b. insn name should be fnmsubd\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2134,1 +2134,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -2137,1 +2137,0 @@\n-  predicate(UseFMA);\n@@ -2142,0 +2141,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2160,1 +2160,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2165,0 +2165,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2224,24 +2225,3 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-instruct vfmls1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n-  format %{ \"vfmls1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ fmls($dst_src1$$FloatRegister, get_arrangement(this),\n-              $src2$$FloatRegister, $src3$$FloatRegister);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      BasicType bt = Matcher::vector_element_basic_type(this);\n-      __ sve_fmls($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                  ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n-instruct vfmls2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n+instruct vfmls(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -2250,1 +2230,1 @@\n-  format %{ \"vfmls2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfmls $dst_src1, $src2, $src3\" %}\n@@ -2252,0 +2232,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2268,1 +2249,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -2270,1 +2251,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2275,0 +2256,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2284,17 +2266,4 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-instruct vfnmla1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n-  format %{ \"vfnmla1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_fnmla($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                 ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n-instruct vfnmla2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n+instruct vfnmla(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE > 0);\n@@ -2303,1 +2272,1 @@\n-  format %{ \"vfnmla2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfnmla $dst_src1, $src2, $src3\" %}\n@@ -2305,0 +2274,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2314,1 +2284,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -2316,1 +2286,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2321,0 +2291,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2330,1 +2301,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -2332,1 +2303,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2337,0 +2308,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -2346,1 +2318,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -2348,1 +2320,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2353,0 +2325,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":27,"deletions":54,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1176,1 +1176,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -1179,1 +1179,0 @@\n-  predicate(UseFMA);\n@@ -1184,0 +1183,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1202,1 +1202,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1207,0 +1207,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1266,24 +1267,3 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-instruct vfmls1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n-  format %{ \"vfmls1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ fmls($dst_src1$$FloatRegister, get_arrangement(this),\n-              $src2$$FloatRegister, $src3$$FloatRegister);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      BasicType bt = Matcher::vector_element_basic_type(this);\n-      __ sve_fmls($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                  ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n-instruct vfmls2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n+instruct vfmls(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1292,1 +1272,1 @@\n-  format %{ \"vfmls2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfmls $dst_src1, $src2, $src3\" %}\n@@ -1294,0 +1274,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1310,1 +1291,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -1312,1 +1293,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1317,0 +1298,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1326,17 +1308,4 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-instruct vfnmla1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n-  format %{ \"vfnmla1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_fnmla($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                 ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n-instruct vfnmla2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n+instruct vfnmla(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE > 0);\n@@ -1345,1 +1314,1 @@\n-  format %{ \"vfnmla2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfnmla $dst_src1, $src2, $src3\" %}\n@@ -1347,0 +1316,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1356,1 +1326,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -1358,1 +1328,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1363,0 +1333,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1372,1 +1343,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -1374,1 +1345,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1379,0 +1350,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -1388,1 +1360,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -1390,1 +1362,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1395,0 +1367,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":27,"deletions":54,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-      || f.unextended_sp() == (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset), \"\");\n+      || f.unextended_sp() == (intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -126,1 +126,1 @@\n-  intptr_t* real_unextended_sp = (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset);\n+  intptr_t* real_unextended_sp = (intptr_t*)f.at_relative_or_null(frame::interpreter_frame_last_sp_offset);\n@@ -152,2 +152,2 @@\n-  \/\/ at(frame::interpreter_frame_last_sp_offset) can be null at safepoint preempts\n-  *hf.addr_at(frame::interpreter_frame_last_sp_offset) = hf.unextended_sp() - hf.fp();\n+  \/\/ Make sure that last_sp is already relativized.\n+  assert((intptr_t*)hf.at_relative(frame::interpreter_frame_last_sp_offset) == hf.unextended_sp(), \"\");\n@@ -293,1 +293,3 @@\n-  derelativize_one(vfp, frame::interpreter_frame_last_sp_offset);\n+  \/\/ Make sure that last_sp is kept relativized.\n+  assert((intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset) == f.unextended_sp(), \"\");\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -128,1 +128,2 @@\n-    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at(frame::interpreter_frame_last_sp_offset), p2i(f.unextended_sp()), expression_stack_sz);\n+    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at_relative_or_null(frame::interpreter_frame_last_sp_offset),\n+    p2i(f.unextended_sp()), expression_stack_sz);\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -358,1 +358,3 @@\n-    *((intptr_t**)addr_at(interpreter_frame_last_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized last_sp\n+  ptr_at_put(interpreter_frame_last_sp_offset, sp != nullptr ? (sp - fp()) : 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,1 +265,3 @@\n-  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n+  intptr_t n = *addr_at(interpreter_frame_last_sp_offset);\n+  assert(n <= 0, \"n: \" INTPTR_FORMAT, n);\n+  return n != 0 ? &fp()[n] : nullptr;\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -433,1 +433,3 @@\n-  str(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  sub(rscratch1, esp, rfp);\n+  asr(rscratch1, rscratch1, Interpreter::logStackElementSize);\n+  str(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -2947,0 +2948,17 @@\n+  \/\/ Big-endian 128-bit + 64-bit -> 128-bit addition.\n+  \/\/ Inputs: 128-bits. in is preserved.\n+  \/\/ The least-significant 64-bit word is in the upper dword of each vector.\n+  \/\/ inc (the 64-bit increment) is preserved. Its lower dword must be zero.\n+  \/\/ Output: result\n+  void be_add_128_64(FloatRegister result, FloatRegister in,\n+                     FloatRegister inc, FloatRegister tmp) {\n+    assert_different_registers(result, tmp, inc);\n+\n+    __ addv(result, __ T2D, in, inc);      \/\/ Add inc to the least-significant dword of\n+                                           \/\/ input\n+    __ cm(__ HI, tmp, __ T2D, inc, result);\/\/ Check for result overflowing\n+    __ ext(tmp, __ T16B, tmp, tmp, 0x08);  \/\/ Swap LSD of comparison result to MSD and\n+                                           \/\/ MSD == 0 (must be!) to LSD\n+    __ subv(result, __ T2D, result, tmp);  \/\/ Subtract -1 from MSD if there was an overflow\n+  }\n+\n@@ -3056,1 +3074,1 @@\n-      __ ins(v4, __ S, v5, 3, 3); \/\/ v4 contains { 0, 0, 0, 1 }\n+      __ ins(v4, __ S, v5, 2, 2); \/\/ v4 contains { 0, 1 }\n@@ -3058,5 +3076,8 @@\n-      __ ld1(v0, __ T16B, counter); \/\/ Load the counter into v0\n-      __ rev32(v16, __ T16B, v0);\n-      __ addv(v16, __ T4S, v16, v4);\n-      __ rev32(v16, __ T16B, v16);\n-      __ st1(v16, __ T16B, counter); \/\/ Save the incremented counter back\n+      \/\/ 128-bit big-endian increment\n+      __ ld1(v0, __ T16B, counter);\n+      __ rev64(v16, __ T16B, v0);\n+      be_add_128_64(v16, v16, v4, \/*tmp*\/v5);\n+      __ rev64(v16, __ T16B, v16);\n+      __ st1(v16, __ T16B, counter);\n+      \/\/ Previous counter value is in v0\n+      \/\/ v4 contains { 0, 1 }\n@@ -3094,3 +3115,3 @@\n-        __ rev32(v16, __ T16B, v16);\n-        __ addv(v16, __ T4S, v16, v4);\n-        __ rev32(v16, __ T16B, v16);\n+        __ rev64(v16, __ T16B, v16);\n+        be_add_128_64(v16, v16, v4, \/*tmp*\/v5);\n+        __ rev64(v16, __ T16B, v16);\n@@ -3144,1 +3165,1 @@\n-    __ rev32(v16, __ T16B, v0); \/\/ v16 contains byte-reversed counter\n+    __ rev64(v16, __ T16B, v0); \/\/ v16 contains byte-reversed counter\n@@ -3154,1 +3175,1 @@\n-      __ ins(v8, __ S, v9, 3, 3); \/\/ v8 contains { 0, 0, 0, 1 }\n+      __ ins(v8, __ S, v9, 2, 2); \/\/ v8 contains { 0, 1 }\n@@ -3158,2 +3179,2 @@\n-        __ rev32(v0_ofs, __ T16B, v16);\n-        __ addv(v16, __ T4S, v16, v8);\n+        __ rev64(v0_ofs, __ T16B, v16);\n+        be_add_128_64(v16, v16, v8, \/*tmp*\/v9);\n@@ -3189,1 +3210,1 @@\n-    __ rev32(v16, __ T16B, v16);\n+    __ rev64(v16, __ T16B, v16);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -468,1 +469,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -524,1 +526,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -1870,1 +1873,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2208,0 +2208,12 @@\n+  if (_desc->bytecode() != Bytecodes::_return_register_finalizer) {\n+    Label no_safepoint;\n+    __ ldr(rscratch1, Address(rthread, JavaThread::polling_word_offset()));\n+    __ tbz(rscratch1, log2i_exact(SafepointMechanism::poll_bit()), no_safepoint);\n+    __ push(state);\n+    __ push_cont_fastpath(rthread);\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint));\n+    __ pop_cont_fastpath(rthread);\n+    __ pop(state);\n+    __ bind(no_safepoint);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2495,0 +2495,10 @@\n+  if (_desc->bytecode() != Bytecodes::_return_register_finalizer) {\n+    Label no_safepoint;\n+    __ ldr(Rtemp, Address(Rthread, JavaThread::polling_word_offset()));\n+    __ tbz(Rtemp, exact_log2(SafepointMechanism::poll_bit()), no_safepoint);\n+    __ push(state);\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint));\n+    __ pop(state);\n+    __ bind(no_safepoint);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  relativize_one(vfp, hfp, ijava_idx(top_frame_sp));\n+  \/\/ top_frame_sp is already relativized\n@@ -547,1 +547,1 @@\n-  derelativize_one(vfp, ijava_idx(top_frame_sp));\n+  \/\/ Keep top_frame_sp relativized.\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    sp = (intptr_t*)caller.at(ijava_idx(top_frame_sp));\n+    sp = (intptr_t*)caller.at_relative(ijava_idx(top_frame_sp));\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -234,1 +234,7 @@\n-inline void frame::interpreter_frame_set_top_frame_sp(intptr_t* top_frame_sp) { get_ijava_state()->top_frame_sp = (intptr_t) top_frame_sp; }\n+\n+inline void frame::interpreter_frame_set_top_frame_sp(intptr_t* top_frame_sp) {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized top_frame_sp\n+  get_ijava_state()->top_frame_sp = (intptr_t) (top_frame_sp - fp());\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1244,0 +1244,3 @@\n+  sldi(Rscratch1, Rscratch1, Interpreter::logStackElementSize);\n+  add(Rscratch1, Rscratch1, Rscratch2); \/\/ Rscratch2 contains fp\n+  \/\/ Compare sender_sp with the derelativized top_frame_sp\n@@ -2018,1 +2021,4 @@\n-  std(R1_SP, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n+  subf(Rtemp2, esp, R1_SP); \/\/ esp contains fp\n+  sradi(Rtemp2, Rtemp2, Interpreter::logStackElementSize);\n+  \/\/ Store relativized top_frame_sp\n+  std(Rtemp2, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n@@ -2254,0 +2260,3 @@\n+    \/\/ Derelativize top_frame_sp\n+    sldi(tfsp, tfsp, Interpreter::logStackElementSize);\n+    add(tfsp, tfsp, scratch);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2151,0 +2151,3 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+      return UseFMA;\n@@ -9655,0 +9658,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9667,0 +9671,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9672,1 +9677,2 @@\n-\/\/ -src1 * src2 + src3 = -(src1*src2-src3)\n+\/\/ src1 * (-src2) + src3 = -(src1*src2-src3)\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -9674,1 +9680,0 @@\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -9680,0 +9685,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9685,1 +9691,2 @@\n-\/\/ -src1 * src2 + src3 = -(src1*src2-src3)\n+\/\/ src1 * (-src2) + src3 = -(src1*src2-src3)\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -9687,1 +9694,0 @@\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -9693,0 +9699,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9698,1 +9705,2 @@\n-\/\/ -src1 * src2 - src3 = -(src1*src2+src3)\n+\/\/ src1 * (-src2) - src3 = -(src1*src2+src3)\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -9700,1 +9708,0 @@\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -9706,0 +9713,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9711,1 +9719,2 @@\n-\/\/ -src1 * src2 - src3 = -(src1*src2+src3)\n+\/\/ src1 * (-src2) - src3 = -(src1*src2+src3)\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -9713,1 +9722,0 @@\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -9719,0 +9727,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9731,0 +9740,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9743,0 +9753,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14060,1 +14071,1 @@\n-\/\/ dst + src1 * src2\n+\/\/ src1 * src2 + dst\n@@ -14069,0 +14080,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14074,1 +14086,2 @@\n-\/\/ dst - src1 * src2\n+\/\/ src1 * (-src2) + dst\n+\/\/ \"(-src1) * src2 + dst\" has been idealized to \"src2 * (-src1) + dst\"\n@@ -14076,1 +14089,0 @@\n-  match(Set dst (FmaVF dst (Binary (NegVF src1) src2)));\n@@ -14084,0 +14096,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14089,1 +14102,1 @@\n-\/\/ - dst + src1 * src2\n+\/\/ src1 * src2 - dst\n@@ -14098,0 +14111,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14103,1 +14117,1 @@\n-\/\/ dst + src1 * src2\n+\/\/ src1 * src2 + dst\n@@ -14112,0 +14126,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14117,1 +14132,2 @@\n-\/\/ dst - src1 * src2\n+\/\/ src1 * (-src2) + dst\n+\/\/ \"(-src1) * src2 + dst\" has been idealized to \"src2 * (-src1) + dst\"\n@@ -14119,1 +14135,0 @@\n-  match(Set dst (FmaVD  dst (Binary (NegVD src1) src2)));\n@@ -14127,0 +14142,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14132,1 +14148,1 @@\n-\/\/ - dst + src1 * src2\n+\/\/ src1 * src2 - dst\n@@ -14141,0 +14157,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1064,1 +1064,0 @@\n-  __ subf(R12_scratch2, Rtop_frame_size, R1_SP);\n@@ -1066,0 +1065,3 @@\n+  __ neg(R12_scratch2, Rtop_frame_size);\n+  __ sradi(R12_scratch2, R12_scratch2, Interpreter::logStackElementSize);\n+  \/\/ Store relativized top_frame_sp\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/vmstorage_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"asm\/assembler.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-      || f.unextended_sp() == (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset), \"\");\n+      || f.unextended_sp() == (intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -124,1 +124,1 @@\n-  intptr_t* real_unextended_sp = (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset);\n+  intptr_t* real_unextended_sp = (intptr_t*)f.at_relative_or_null(frame::interpreter_frame_last_sp_offset);\n@@ -150,2 +150,2 @@\n-  \/\/ at(frame::interpreter_frame_last_sp_offset) can be null at safepoint preempts\n-  *hf.addr_at(frame::interpreter_frame_last_sp_offset) = hf.unextended_sp() - hf.fp();\n+  \/\/ Make sure that last_sp is already relativized.\n+  assert((intptr_t*)hf.at_relative(frame::interpreter_frame_last_sp_offset) == hf.unextended_sp(), \"\");\n@@ -295,1 +295,3 @@\n-  derelativize_one(vfp, frame::interpreter_frame_last_sp_offset);\n+  \/\/ Make sure that last_sp is kept relativized.\n+  assert((intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset) == f.unextended_sp(), \"\");\n+\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -128,1 +128,2 @@\n-    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at(frame::interpreter_frame_last_sp_offset), p2i(f.unextended_sp()), expression_stack_sz);\n+    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at_relative_or_null(frame::interpreter_frame_last_sp_offset),\n+    p2i(f.unextended_sp()), expression_stack_sz);\n","filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -334,1 +334,3 @@\n-  *((intptr_t**)addr_at(interpreter_frame_last_sp_offset)) = last_sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized last_sp\n+  ptr_at_put(interpreter_frame_last_sp_offset, last_sp != nullptr ? (last_sp - fp()) : 0);\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,1 +256,3 @@\n-  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n+  intptr_t n = *addr_at(interpreter_frame_last_sp_offset);\n+  assert(n <= 0, \"n: \" INTPTR_FORMAT, n);\n+  return n != 0 ? &fp()[n] : nullptr;\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -494,1 +494,3 @@\n-  sd(esp, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  sub(t0, esp, fp);\n+  srai(t0, t0, Interpreter::logStackElementSize);\n+  sd(t0, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1910,0 +1910,5 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      return UseFMA;\n@@ -7274,1 +7279,0 @@\n-  predicate(UseFMA);\n@@ -7281,0 +7285,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7292,1 +7297,0 @@\n-  predicate(UseFMA);\n@@ -7299,0 +7303,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7310,1 +7315,0 @@\n-  predicate(UseFMA);\n@@ -7317,0 +7321,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7328,1 +7333,0 @@\n-  predicate(UseFMA);\n@@ -7335,0 +7339,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7344,1 +7349,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -7346,2 +7352,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -7354,0 +7358,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7363,1 +7368,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -7365,2 +7371,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -7373,0 +7377,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7382,1 +7387,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -7384,2 +7390,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -7392,0 +7396,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7401,1 +7406,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -7403,2 +7409,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -7411,0 +7415,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -696,1 +696,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -698,1 +698,0 @@\n-  predicate(UseFMA);\n@@ -704,0 +703,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -716,1 +716,0 @@\n-  predicate(UseFMA);\n@@ -721,0 +720,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -731,2 +731,2 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n@@ -734,2 +734,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n@@ -740,0 +738,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -747,2 +746,2 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n@@ -750,2 +749,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n@@ -756,0 +753,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -765,1 +763,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -767,1 +765,0 @@\n-  predicate(UseFMA);\n@@ -772,0 +769,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -782,2 +780,2 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n@@ -785,2 +783,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n@@ -791,0 +787,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -798,2 +795,2 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n@@ -801,2 +798,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n@@ -807,0 +802,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -816,1 +812,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -818,1 +814,0 @@\n-  predicate(UseFMA);\n@@ -823,0 +818,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -833,1 +829,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -835,1 +831,0 @@\n-  predicate(UseFMA);\n@@ -840,0 +835,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -849,1 +845,0 @@\n-  predicate(UseFMA);\n@@ -854,0 +849,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -863,1 +859,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -865,1 +861,0 @@\n-  predicate(UseFMA);\n@@ -870,0 +865,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -887,1 +883,1 @@\n-  format %{ \"vmla $dst_src1, $dst_src1, src2, src3\" %}\n+  format %{ \"vmla $dst_src1, $dst_src1, $src2, $src3\" %}\n@@ -923,1 +919,1 @@\n-  format %{ \"vmls $dst_src1, $dst_src1, src2, src3\" %}\n+  format %{ \"vmls $dst_src1, $dst_src1, $src2, $src3\" %}\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":28,"deletions":32,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -429,1 +430,2 @@\n-  __ ld(esp, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ld(t0, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n@@ -486,1 +488,2 @@\n-  __ ld(esp, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ld(t0, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n@@ -1607,1 +1610,2 @@\n-  __ ld(esp, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ld(t0, Address(fp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2117,0 +2117,13 @@\n+  if (_desc->bytecode() != Bytecodes::_return_register_finalizer) {\n+    Label no_safepoint;\n+    __ ld(t0, Address(xthread, JavaThread::polling_word_offset()));\n+    __ test_bit(t0, t0, exact_log2(SafepointMechanism::poll_bit()));\n+    __ beqz(t0, no_safepoint);\n+    __ push(state);\n+    __ push_cont_fastpath(xthread);\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint));\n+    __ pop_cont_fastpath(xthread);\n+    __ pop(state);\n+    __ bind(no_safepoint);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -270,0 +270,1 @@\n+        MaxVectorSize = _initial_vector_length;\n@@ -271,1 +272,0 @@\n-      MaxVectorSize = _initial_vector_length;\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,7 @@\n+#include \"asm\/macroAssembler.inline.hpp\"\n+#include \"code\/codeBlob.hpp\"\n+#include \"code\/codeCache.hpp\"\n+#include \"code\/vmreg.inline.hpp\"\n+#include \"compiler\/oopMap.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n@@ -27,1 +34,62 @@\n-#include \"utilities\/debug.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"runtime\/stubCodeGenerator.hpp\"\n+\n+#define __ _masm->\n+\n+class DowncallStubGenerator : public StubCodeGenerator {\n+  BasicType* _signature;\n+  int _num_args;\n+  BasicType _ret_bt;\n+  const ABIDescriptor& _abi;\n+\n+  const GrowableArray<VMStorage>&  _input_registers;\n+  const GrowableArray<VMStorage>&  _output_registers;\n+\n+  bool _needs_return_buffer;\n+  int _captured_state_mask;\n+  bool _needs_transition;\n+\n+  int _frame_complete;\n+  int _frame_size_slots;\n+  OopMapSet* _oop_maps;\n+  public:\n+  DowncallStubGenerator(CodeBuffer* buffer,\n+                         BasicType* signature,\n+                         int num_args,\n+                         BasicType ret_bt,\n+                         const ABIDescriptor& abi,\n+                         const GrowableArray<VMStorage>& input_registers,\n+                         const GrowableArray<VMStorage>& output_registers,\n+                         bool needs_return_buffer,\n+                         int captured_state_mask,\n+                         bool needs_transition)\n+    :StubCodeGenerator(buffer, PrintMethodHandleStubs),\n+    _signature(signature),\n+    _num_args(num_args),\n+    _ret_bt(ret_bt),\n+    _abi(abi),\n+    _input_registers(input_registers),\n+    _output_registers(output_registers),\n+    _needs_return_buffer(needs_return_buffer),\n+    _captured_state_mask(captured_state_mask),\n+    _needs_transition(needs_transition),\n+    _frame_complete(0),\n+    _frame_size_slots(0),\n+    _oop_maps(nullptr) {\n+    }\n+  void generate();\n+  int frame_complete() const {\n+    return _frame_complete;\n+  }\n+\n+  int framesize() const {\n+    return (_frame_size_slots >> (LogBytesPerWord - LogBytesPerInt));\n+  }\n+\n+  OopMapSet* oop_maps() const {\n+    return _oop_maps;\n+  }\n+};\n+\n+static const int native_invoker_code_base_size = 512;\n+static const int native_invoker_size_per_args = 8;\n@@ -38,2 +106,193 @@\n-  Unimplemented();\n-  return nullptr;\n+\n+  int code_size = native_invoker_code_base_size + (num_args * native_invoker_size_per_args);\n+  int locs_size = 1; \/\/must be non zero\n+  CodeBuffer code(\"nep_invoker_blob\", code_size, locs_size);\n+\n+  DowncallStubGenerator g(&code, signature, num_args, ret_bt, abi,\n+                          input_registers, output_registers,\n+                          needs_return_buffer, captured_state_mask,\n+                          needs_transition);\n+  g.generate();\n+  code.log_section_sizes(\"nep_invoker_blob\");\n+\n+  RuntimeStub* stub =\n+    RuntimeStub::new_runtime_stub(\"nep_invoker_blob\",\n+                                  &code,\n+                                  g.frame_complete(),\n+                                  g.framesize(),\n+                                  g.oop_maps(), false);\n+\n+#ifndef PRODUCT\n+  LogTarget(Trace, foreign, downcall) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    stub->print_on(&ls);\n+  }\n+#endif\n+\n+  return stub;\n+}\n+\n+void DowncallStubGenerator::generate() {\n+  Register call_target_address = Z_R1_scratch,\n+           tmp = Z_R0_scratch;\n+\n+  VMStorage shuffle_reg = _abi._scratch1;\n+\n+  JavaCallingConvention in_conv;\n+  NativeCallingConvention out_conv(_input_registers);\n+  ArgumentShuffle arg_shuffle(_signature, _num_args, _signature, _num_args, &in_conv, &out_conv, shuffle_reg);\n+\n+#ifndef PRODUCT\n+  LogTarget(Trace, foreign, downcall) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    arg_shuffle.print_on(&ls);\n+  }\n+#endif\n+\n+  assert(_abi._shadow_space_bytes == frame::z_abi_160_size, \"expected space according to ABI\");\n+  int allocated_frame_size = _abi._shadow_space_bytes;\n+  allocated_frame_size += arg_shuffle.out_arg_bytes();\n+\n+  assert(!_needs_return_buffer, \"unexpected needs_return_buffer\");\n+  RegSpiller out_reg_spiller(_output_registers);\n+  int spill_offset = allocated_frame_size;\n+  allocated_frame_size += BytesPerWord;\n+\n+  StubLocations locs;\n+  locs.set(StubLocations::TARGET_ADDRESS, _abi._scratch2);\n+\n+  if (_captured_state_mask != 0) {\n+    __ block_comment(\"{ _captured_state_mask is set\");\n+    locs.set_frame_data(StubLocations::CAPTURED_STATE_BUFFER, allocated_frame_size);\n+    allocated_frame_size += BytesPerWord;\n+    __ block_comment(\"} _captured_state_mask is set\");\n+  }\n+\n+  allocated_frame_size = align_up(allocated_frame_size, StackAlignmentInBytes);\n+  _frame_size_slots = allocated_frame_size >> LogBytesPerInt;\n+\n+  _oop_maps  = _needs_transition ? new OopMapSet() : nullptr;\n+  address start = __ pc();\n+\n+  __ save_return_pc();\n+  __ push_frame(allocated_frame_size, Z_R11); \/\/ Create a new frame for the wrapper.\n+\n+  _frame_complete = __ pc() - start;  \/\/ frame build complete.\n+\n+  if (_needs_transition) {\n+    __ block_comment(\"{ thread java2native\");\n+    __ get_PC(Z_R1_scratch);\n+    address the_pc = __ pc();\n+    __ set_last_Java_frame(Z_SP, Z_R1_scratch);\n+\n+    OopMap* map = new OopMap(_frame_size_slots, 0);\n+    _oop_maps->add_gc_map(the_pc - start, map);\n+\n+    \/\/ State transition\n+    __ set_thread_state(_thread_in_native);\n+    __ block_comment(\"} thread java2native\");\n+  }\n+  __ block_comment(\"{ argument shuffle\");\n+  arg_shuffle.generate(_masm, shuffle_reg, frame::z_jit_out_preserve_size, _abi._shadow_space_bytes, locs);\n+  __ block_comment(\"} argument shuffle\");\n+\n+  __ call(as_Register(locs.get(StubLocations::TARGET_ADDRESS)));\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  if (_captured_state_mask != 0) {\n+    __ block_comment(\"{ save thread local\");\n+\n+      out_reg_spiller.generate_spill(_masm, spill_offset);\n+\n+    __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, DowncallLinker::capture_state));\n+    __ z_lg(Z_ARG1, Address(Z_SP, locs.data_offset(StubLocations::CAPTURED_STATE_BUFFER)));\n+    __ load_const_optimized(Z_ARG2, _captured_state_mask);\n+    __ call(call_target_address);\n+\n+      out_reg_spiller.generate_fill(_masm, spill_offset);\n+\n+    __ block_comment(\"} save thread local\");\n+  }\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  Label L_after_safepoint_poll;\n+  Label L_safepoint_poll_slow_path;\n+  Label L_reguard;\n+  Label L_after_reguard;\n+\n+  if (_needs_transition) {\n+    __ block_comment(\"{ thread native2java\");\n+    __ set_thread_state(_thread_in_native_trans);\n+\n+    if (!UseSystemMemoryBarrier) {\n+      __ z_fence(); \/\/ Order state change wrt. safepoint poll.\n+    }\n+\n+    __ safepoint_poll(L_safepoint_poll_slow_path, tmp);\n+\n+    __ load_and_test_int(tmp, Address(Z_thread, JavaThread::suspend_flags_offset()));\n+    __ z_brne(L_safepoint_poll_slow_path);\n+\n+    __ bind(L_after_safepoint_poll);\n+\n+    \/\/ change thread state\n+    __ set_thread_state(_thread_in_Java);\n+\n+    __ block_comment(\"reguard stack check\");\n+    __ z_cli(Address(Z_thread, JavaThread::stack_guard_state_offset() + in_ByteSize(sizeof(StackOverflow::StackGuardState) - 1)),\n+        StackOverflow::stack_guard_yellow_reserved_disabled);\n+    __ z_bre(L_reguard);\n+    __ bind(L_after_reguard);\n+\n+    __ reset_last_Java_frame();\n+    __ block_comment(\"} thread native2java\");\n+  }\n+\n+  __ pop_frame();\n+  __ restore_return_pc();             \/\/ This is the way back to the caller.\n+  __ z_br(Z_R14);\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  if (_needs_transition) {\n+    __ block_comment(\"{ L_safepoint_poll_slow_path\");\n+    __ bind(L_safepoint_poll_slow_path);\n+\n+      \/\/ Need to save the native result registers around any runtime calls.\n+      out_reg_spiller.generate_spill(_masm, spill_offset);\n+\n+    __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, JavaThread::check_special_condition_for_native_trans));\n+    __ z_lgr(Z_ARG1, Z_thread);\n+    __ call(call_target_address);\n+\n+      out_reg_spiller.generate_fill(_masm, spill_offset);\n+\n+    __ z_bru(L_after_safepoint_poll);\n+    __ block_comment(\"} L_safepoint_poll_slow_path\");\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    __ block_comment(\"{ L_reguard\");\n+    __ bind(L_reguard);\n+\n+      \/\/ Need to save the native result registers around any runtime calls.\n+      out_reg_spiller.generate_spill(_masm, spill_offset);\n+\n+    __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, SharedRuntime::reguard_yellow_pages));\n+    __ call(call_target_address);\n+\n+      out_reg_spiller.generate_fill(_masm, spill_offset);\n+\n+    __ z_bru(L_after_reguard);\n+\n+    __ block_comment(\"} L_reguard\");\n+  }\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  __ flush();\n","filename":"src\/hotspot\/cpu\/s390\/downcallLinker_s390.cpp","additions":262,"deletions":3,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -26,1 +26,6 @@\n-#include \"code\/vmreg.hpp\"\n+#include \"asm\/macroAssembler.inline.hpp\"\n+#include \"code\/vmreg.inline.hpp\"\n+#include \"runtime\/jniHandles.hpp\"\n+#include \"runtime\/jniHandles.inline.hpp\"\n+#include \"oops\/typeArrayOop.inline.hpp\"\n+#include \"oops\/oopCast.inline.hpp\"\n@@ -28,1 +33,3 @@\n-#include \"utilities\/debug.hpp\"\n+#include \"prims\/foreignGlobals.inline.hpp\"\n+#include \"prims\/vmstorage.hpp\"\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -30,1 +37,10 @@\n-class MacroAssembler;\n+#define __ masm->\n+\n+bool ABIDescriptor::is_volatile_reg(Register reg) const {\n+  return _integer_volatile_registers.contains(reg);\n+}\n+\n+bool ABIDescriptor::is_volatile_reg(FloatRegister reg) const {\n+  return _float_argument_registers.contains(reg)\n+          || _float_additional_volatile_registers.contains(reg);\n+}\n@@ -33,1 +49,1 @@\n-  return false;\n+  return true;\n@@ -37,2 +53,22 @@\n-  Unimplemented();\n-  return {};\n+  oop abi_oop = JNIHandles::resolve_non_null(jabi);\n+  ABIDescriptor abi;\n+\n+  objArrayOop inputStorage = jdk_internal_foreign_abi_ABIDescriptor::inputStorage(abi_oop);\n+  parse_register_array(inputStorage, StorageType::INTEGER, abi._integer_argument_registers, as_Register);\n+  parse_register_array(inputStorage, StorageType::FLOAT, abi._float_argument_registers, as_FloatRegister);\n+\n+  objArrayOop outputStorage = jdk_internal_foreign_abi_ABIDescriptor::outputStorage(abi_oop);\n+  parse_register_array(outputStorage, StorageType::INTEGER, abi._integer_return_registers, as_Register);\n+  parse_register_array(outputStorage, StorageType::FLOAT, abi._float_return_registers, as_FloatRegister);\n+\n+  objArrayOop volatileStorage = jdk_internal_foreign_abi_ABIDescriptor::volatileStorage(abi_oop);\n+  parse_register_array(volatileStorage, StorageType::INTEGER, abi._integer_volatile_registers, as_Register);\n+  parse_register_array(volatileStorage, StorageType::FLOAT, abi._float_additional_volatile_registers, as_FloatRegister);\n+\n+  abi._stack_alignment_bytes = jdk_internal_foreign_abi_ABIDescriptor::stackAlignment(abi_oop);\n+  abi._shadow_space_bytes = jdk_internal_foreign_abi_ABIDescriptor::shadowSpace(abi_oop);\n+\n+  abi._scratch1 = parse_vmstorage(jdk_internal_foreign_abi_ABIDescriptor::scratch1(abi_oop));\n+  abi._scratch2 = parse_vmstorage(jdk_internal_foreign_abi_ABIDescriptor::scratch2(abi_oop));\n+\n+  return abi;\n@@ -42,2 +78,4 @@\n-  Unimplemented();\n-  return -1;\n+  if (reg.type() == StorageType::INTEGER || reg.type() == StorageType::FLOAT) {\n+    return 8;\n+  }\n+  return 0; \/\/ stack and BAD\n@@ -47,1 +85,7 @@\n-  Unimplemented();\n+  if (reg.type() == StorageType::INTEGER) {\n+    __ reg2mem_opt(as_Register(reg), Address(Z_SP, offset), true);\n+  } else if (reg.type() == StorageType::FLOAT) {\n+    __ freg2mem_opt(as_FloatRegister(reg), Address(Z_SP, offset), true);\n+  } else {\n+    \/\/ stack and BAD\n+  }\n@@ -51,1 +95,106 @@\n-  Unimplemented();\n+  if (reg.type() == StorageType::INTEGER) {\n+    __ mem2reg_opt(as_Register(reg), Address(Z_SP, offset), true);\n+  } else if (reg.type() == StorageType::FLOAT) {\n+    __ mem2freg_opt(as_FloatRegister(reg), Address(Z_SP, offset), true);\n+  } else {\n+    \/\/ stack and BAD\n+  }\n+}\n+\n+static int reg2offset(VMStorage vms, int stk_bias) {\n+  assert(!vms.is_reg(), \"wrong usage\");\n+  return vms.index_or_offset() + stk_bias;\n+}\n+\n+static void move_reg(MacroAssembler* masm, int out_stk_bias,\n+                       VMStorage from_reg, VMStorage to_reg) {\n+  int out_bias = 0;\n+  switch (to_reg.type()) {\n+    case StorageType::INTEGER:\n+      if (to_reg.segment_mask() == REG64_MASK && from_reg.segment_mask() == REG32_MASK ) {\n+        \/\/ see CCallingConventionRequiresIntsAsLongs\n+        __ z_lgfr(as_Register(to_reg), as_Register(from_reg));\n+      } else {\n+        __ lgr_if_needed(as_Register(to_reg), as_Register(from_reg));\n+      }\n+      break;\n+    case StorageType::STACK:\n+      out_bias = out_stk_bias;  \/\/fallthrough\n+    case StorageType::FRAME_DATA: {\n+      \/\/ Integer types always get a 64 bit slot in C.\n+      if (from_reg.segment_mask() == REG32_MASK) {\n+        \/\/ see CCallingConventionRequiresIntsAsLongs\n+        __ z_lgfr(as_Register(from_reg), as_Register(from_reg));\n+      }\n+      switch (to_reg.stack_size()) {\n+        case 8: __ reg2mem_opt(as_Register(from_reg), Address(Z_SP, reg2offset(to_reg, out_bias)), true); break;\n+        case 4: __ reg2mem_opt(as_Register(from_reg), Address(Z_SP, reg2offset(to_reg, out_bias)), false); break;\n+        default: ShouldNotReachHere();\n+      }\n+    } break;\n+    default: ShouldNotReachHere();\n+  }\n+}\n+\n+static void move_float(MacroAssembler* masm, int out_stk_bias,\n+                       VMStorage from_reg, VMStorage to_reg) {\n+  switch (to_reg.type()) {\n+    case StorageType::FLOAT:\n+      if (from_reg.segment_mask() == REG64_MASK)\n+        __ move_freg_if_needed(as_FloatRegister(to_reg), T_DOUBLE, as_FloatRegister(from_reg), T_DOUBLE);\n+      else\n+        __ move_freg_if_needed(as_FloatRegister(to_reg), T_FLOAT, as_FloatRegister(from_reg), T_FLOAT);\n+      break;\n+    case StorageType::STACK:\n+      if (from_reg.segment_mask() == REG64_MASK) {\n+        assert(to_reg.stack_size() == 8, \"size should match\");\n+        __ freg2mem_opt(as_FloatRegister(from_reg), Address(Z_SP, reg2offset(to_reg, out_stk_bias)), true);\n+      } else {\n+        assert(to_reg.stack_size() == 4, \"size should match\");\n+        __ freg2mem_opt(as_FloatRegister(from_reg), Address(Z_SP, reg2offset(to_reg, out_stk_bias)), false);\n+      }\n+      break;\n+    default: ShouldNotReachHere();\n+  }\n+}\n+\n+static void move_stack(MacroAssembler* masm, Register tmp_reg, int in_stk_bias, int out_stk_bias,\n+                       VMStorage from_reg, VMStorage to_reg) {\n+  int out_bias = 0;\n+  Address from_addr(Z_R11, reg2offset(from_reg, in_stk_bias));\n+  switch (to_reg.type()) {\n+    case StorageType::INTEGER:\n+      switch (from_reg.stack_size()) {\n+        case 8: __ mem2reg_opt(as_Register(to_reg), from_addr, true);break;\n+        case 4: __ mem2reg_opt(as_Register(to_reg), from_addr, false);break;\n+        default: ShouldNotReachHere();\n+      }\n+      break;\n+    case StorageType::FLOAT:\n+      switch (from_reg.stack_size()) {\n+        case 8: __ mem2freg_opt(as_FloatRegister(to_reg), from_addr, true);break;\n+        case 4: __ mem2freg_opt(as_FloatRegister(to_reg), from_addr, false);break;\n+        default: ShouldNotReachHere();\n+      }\n+      break;\n+    case StorageType::STACK:\n+      out_bias = out_stk_bias; \/\/ fallthrough\n+    case StorageType::FRAME_DATA: {\n+      switch (from_reg.stack_size()) {\n+        case 8: __ mem2reg_opt(tmp_reg, from_addr, true); break;\n+        case 4: if (to_reg.stack_size() == 8) {\n+                  __ mem2reg_signed_opt(tmp_reg, from_addr);\n+                } else {\n+                  __ mem2reg_opt(tmp_reg, from_addr, false);\n+                }\n+                break;\n+        default: ShouldNotReachHere();\n+      }\n+      switch (to_reg.stack_size()) {\n+        case 8: __ reg2mem_opt(tmp_reg, Address (Z_SP, reg2offset(to_reg, out_bias)), true); break;\n+        case 4: __ reg2mem_opt(tmp_reg, Address (Z_SP, reg2offset(to_reg, out_bias)), false); break;\n+        default: ShouldNotReachHere();\n+      }\n+    } break;\n+    default: ShouldNotReachHere();\n+  }\n@@ -55,1 +204,27 @@\n-  Unimplemented();\n+  Register tmp_reg = as_Register(tmp);\n+  for (int i = 0; i < _moves.length(); i++) {\n+    Move move = _moves.at(i);\n+    VMStorage from_reg = move.from;\n+    VMStorage to_reg   = move.to;\n+\n+    \/\/ replace any placeholders\n+    if (from_reg.type() == StorageType::PLACEHOLDER) {\n+      from_reg = locs.get(from_reg);\n+    }\n+    if (to_reg.type() == StorageType::PLACEHOLDER) {\n+      to_reg = locs.get(to_reg);\n+    }\n+\n+    switch (from_reg.type()) {\n+      case StorageType::INTEGER:\n+        move_reg(masm, out_stk_bias, from_reg, to_reg);\n+        break;\n+      case StorageType::FLOAT:\n+        move_float(masm, out_stk_bias, from_reg, to_reg);\n+        break;\n+      case StorageType::STACK:\n+        move_stack(masm, tmp_reg, in_stk_bias, out_stk_bias, from_reg, to_reg);\n+        break;\n+      default: ShouldNotReachHere();\n+    }\n+  }\n","filename":"src\/hotspot\/cpu\/s390\/foreignGlobals_s390.cpp","additions":186,"deletions":11,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -27,1 +27,18 @@\n-class ABIDescriptor {};\n+struct ABIDescriptor {\n+  GrowableArray<Register> _integer_argument_registers;\n+  GrowableArray<Register> _integer_return_registers;\n+  GrowableArray<FloatRegister> _float_argument_registers;\n+  GrowableArray<FloatRegister> _float_return_registers;\n+\n+  GrowableArray<Register> _integer_volatile_registers;\n+  GrowableArray<FloatRegister> _float_additional_volatile_registers;\n+\n+  int32_t _stack_alignment_bytes;\n+  int32_t _shadow_space_bytes;\n+\n+  VMStorage _scratch1;\n+  VMStorage _scratch2;\n+\n+  bool is_volatile_reg(Register reg) const;\n+  bool is_volatile_reg(FloatRegister reg) const;\n+};\n","filename":"src\/hotspot\/cpu\/s390\/foreignGlobals_s390.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -221,2 +221,4 @@\n-  ShouldNotCallThis();\n-  return nullptr;\n+  assert(frame.is_upcall_stub_frame(), \"wrong frame\");\n+  \/\/ need unextended_sp here, since normal sp is wrong for interpreter callees\n+  return reinterpret_cast<UpcallStub::FrameData*>(\n+    reinterpret_cast<address>(frame.unextended_sp()) + in_bytes(_frame_data_offset));\n@@ -226,2 +228,19 @@\n-  ShouldNotCallThis();\n-  return false;\n+  assert(is_upcall_stub_frame(), \"must be optimized entry frame\");\n+  UpcallStub* blob = _cb->as_upcall_stub();\n+  JavaFrameAnchor* jfa = blob->jfa_for_frame(*this);\n+  return jfa->last_Java_sp() == nullptr;\n+}\n+\n+frame frame::sender_for_upcall_stub_frame(RegisterMap* map) const {\n+  assert(map != nullptr, \"map must be set\");\n+  UpcallStub* blob = _cb->as_upcall_stub();\n+  \/\/ Java frame called from C; skip all C frames and return top C\n+  \/\/ frame of that chunk as the sender\n+  JavaFrameAnchor* jfa = blob->jfa_for_frame(*this);\n+  assert(!upcall_stub_frame_is_first(), \"must have a frame anchor to go back to\");\n+  assert(jfa->last_Java_sp() > sp(), \"must be above this frame on stack\");\n+  map->clear();\n+  assert(map->include_argument_oops(), \"should be set by clear\");\n+  frame fr(jfa->last_Java_sp(), jfa->last_Java_pc());\n+\n+  return fr;\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -353,6 +353,4 @@\n-  if (is_entry_frame()) {\n-    return sender_for_entry_frame(map);\n-  }\n-  if (is_interpreted_frame()) {\n-    return sender_for_interpreter_frame(map);\n-  }\n+  if (is_entry_frame())       return sender_for_entry_frame(map);\n+  if (is_upcall_stub_frame()) return sender_for_upcall_stub_frame(map);\n+  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n+\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-const int StackAlignmentInBytes = 16;\n+const int StackAlignmentInBytes = 8;\n","filename":"src\/hotspot\/cpu\/s390\/globalDefinitions_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -352,1 +352,10 @@\n-  __ should_not_reach_here();\n+  assert(nep_reg != noreg, \"required register\");\n+\n+  \/\/ Load the invoker, as NEP -> .invoker\n+  __ verify_oop(nep_reg);\n+\n+  __ z_lg(temp_target, Address(nep_reg,\n+        NONZERO(jdk_internal_foreign_abi_NativeEntryPoint::downcall_stub_address_offset_in_bytes())));\n+\n+  __ z_br(temp_target);\n+\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1508,0 +1508,3 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+      return UseFMA;\n@@ -7163,0 +7166,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7176,0 +7180,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7189,0 +7194,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7202,0 +7208,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7215,0 +7222,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7229,0 +7237,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7243,0 +7252,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7257,0 +7267,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7271,0 +7282,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7285,0 +7297,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7299,0 +7312,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -7313,0 +7327,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+#include \"asm\/macroAssembler.inline.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n@@ -26,1 +29,5 @@\n-#include \"utilities\/debug.hpp\"\n+#include \"runtime\/sharedRuntime.hpp\"\n+#include \"runtime\/signature.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/formatBuffer.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -28,0 +35,84 @@\n+#define __ _masm->\n+\n+\/\/ for callee saved regs, according to the caller's ABI\n+static int compute_reg_save_area_size(const ABIDescriptor& abi) {\n+  int size = 0;\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n+    Register reg = as_Register(i);\n+    \/\/ Z_SP saved\/restored by prologue\/epilogue\n+    if (reg == Z_SP) continue;\n+    if (!abi.is_volatile_reg(reg)) {\n+      size += 8; \/\/ bytes\n+    }\n+  }\n+\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n+    FloatRegister reg = as_FloatRegister(i);\n+    if (!abi.is_volatile_reg(reg)) {\n+      size += 8; \/\/ bytes\n+    }\n+  }\n+\n+  return size;\n+}\n+\n+static void preserve_callee_saved_registers(MacroAssembler* _masm, const ABIDescriptor& abi, int reg_save_area_offset) {\n+  \/\/ 1. iterate all registers in the architecture\n+  \/\/     - check if they are volatile or not for the given abi\n+  \/\/     - if NOT, we need to save it here\n+\n+  int offset = reg_save_area_offset;\n+\n+  __ block_comment(\"{ preserve_callee_saved_regs \");\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n+    Register reg = as_Register(i);\n+    \/\/ Z_SP saved\/restored by prologue\/epilogue\n+    if (reg == Z_SP) continue;\n+    if (!abi.is_volatile_reg(reg)) {\n+      __ z_stg(reg, Address(Z_SP, offset));\n+      offset += 8;\n+    }\n+  }\n+\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n+    FloatRegister reg = as_FloatRegister(i);\n+    if (!abi.is_volatile_reg(reg)) {\n+      __ z_std(reg, Address(Z_SP, offset));\n+      offset += 8;\n+    }\n+  }\n+\n+  __ block_comment(\"} preserve_callee_saved_regs \");\n+}\n+\n+static void restore_callee_saved_registers(MacroAssembler* _masm, const ABIDescriptor& abi, int reg_save_area_offset) {\n+  \/\/ 1. iterate all registers in the architecture\n+  \/\/     - check if they are volatile or not for the given abi\n+  \/\/     - if NOT, we need to restore it here\n+\n+  int offset = reg_save_area_offset;\n+\n+  __ block_comment(\"{ restore_callee_saved_regs \");\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n+    Register reg = as_Register(i);\n+    \/\/ Z_SP saved\/restored by prologue\/epilogue\n+    if (reg == Z_SP) continue;\n+    if (!abi.is_volatile_reg(reg)) {\n+      __ z_lg(reg, Address(Z_SP, offset));\n+      offset += 8;\n+    }\n+  }\n+\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n+    FloatRegister reg = as_FloatRegister(i);\n+    if (!abi.is_volatile_reg(reg)) {\n+      __ z_ld(reg, Address(Z_SP, offset));\n+      offset += 8;\n+    }\n+  }\n+\n+  __ block_comment(\"} restore_callee_saved_regs \");\n+}\n+\n+static const int upcall_stub_code_base_size = 1024; \/\/ depends on GC (resolve_jobject)\n+static const int upcall_stub_size_per_arg = 16; \/\/ arg save & restore + move\n@@ -34,2 +125,183 @@\n-  ShouldNotCallThis();\n-  return nullptr;\n+  ResourceMark rm;\n+  const ABIDescriptor abi = ForeignGlobals::parse_abi_descriptor(jabi);\n+  const CallRegs call_regs = ForeignGlobals::parse_call_regs(jconv);\n+  int code_size = upcall_stub_code_base_size + (total_in_args * upcall_stub_size_per_arg);\n+  CodeBuffer buffer(\"upcall_stub\", code_size, \/* locs_size = *\/ 0);\n+\n+  Register call_target_address = Z_R1_scratch;\n+\n+  VMStorage shuffle_reg = abi._scratch1;\n+  JavaCallingConvention out_conv;\n+  NativeCallingConvention in_conv(call_regs._arg_regs);\n+  ArgumentShuffle arg_shuffle(in_sig_bt, total_in_args, out_sig_bt, total_out_args, &in_conv, &out_conv, shuffle_reg);\n+\n+  \/\/ The Java call uses the JIT ABI, but we also call C.\n+  int out_arg_area = MAX2(frame::z_jit_out_preserve_size + arg_shuffle.out_arg_bytes(), (int)frame::z_abi_160_size);\n+\n+#ifndef PRODUCT\n+  LogTarget(Trace, foreign, upcall) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    arg_shuffle.print_on(&ls);\n+  }\n+#endif\n+\n+\n+  int reg_save_area_size = compute_reg_save_area_size(abi);\n+  RegSpiller arg_spiller(call_regs._arg_regs);\n+  RegSpiller result_spiller(call_regs._ret_regs);\n+\n+  int res_save_area_offset  = out_arg_area;\n+  int arg_save_area_offset  = res_save_area_offset  + result_spiller.spill_size_bytes();\n+  int reg_save_area_offset  = arg_save_area_offset  + arg_spiller.spill_size_bytes();\n+  int frame_data_offset     = reg_save_area_offset  + reg_save_area_size;\n+  int frame_bottom_offset   = frame_data_offset     + sizeof(UpcallStub::FrameData);\n+\n+  int frame_size = align_up(frame_bottom_offset, StackAlignmentInBytes);\n+  StubLocations locs;\n+\n+  \/\/ The space we have allocated will look like:\n+  \/\/\n+  \/\/\n+  \/\/ FP-> |                     |\n+  \/\/      |---------------------| = frame_bottom_offset = frame_size\n+  \/\/      |                     |\n+  \/\/      | FrameData           |\n+  \/\/      |---------------------| = frame_data_offset\n+  \/\/      |                     |\n+  \/\/      | reg_save_area       |\n+  \/\/      |---------------------| = reg_save_are_offset\n+  \/\/      |                     |\n+  \/\/      | arg_save_area       |\n+  \/\/      |---------------------| = arg_save_are_offset\n+  \/\/      |                     |\n+  \/\/      | res_save_area       |\n+  \/\/      |---------------------| = res_save_are_offset\n+  \/\/      |                     |\n+  \/\/ SP-> | out_arg_area        |   needs to be at end for shadow space\n+  \/\/\n+  \/\/\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  MacroAssembler* _masm = new MacroAssembler(&buffer);\n+  address start = __ pc();\n+\n+  __ save_return_pc();\n+  assert((abi._stack_alignment_bytes % StackAlignmentInBytes) == 0, \"must be 8 byte aligned\");\n+  \/\/ allocate frame (frame_size is also aligned, so stack is still aligned)\n+  __ push_frame(frame_size);\n+\n+  \/\/ we have to always spill args since we need to do a call to get the thread\n+  \/\/ (and maybe attach it).\n+  arg_spiller.generate_spill(_masm, arg_save_area_offset);\n+  \/\/ Java methods won't preserve them, so save them here:\n+  preserve_callee_saved_registers(_masm, abi, reg_save_area_offset);\n+\n+  __ block_comment(\"{ on_entry\");\n+  __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::on_entry));\n+  __ z_aghik(Z_ARG1, Z_SP, frame_data_offset);\n+  __ call(call_target_address);\n+  __ z_lgr(Z_thread, Z_RET);\n+  __ block_comment(\"} on_entry\");\n+\n+  arg_spiller.generate_fill(_masm, arg_save_area_offset);\n+  __ block_comment(\"{ argument shuffle\");\n+  arg_shuffle.generate(_masm, shuffle_reg, abi._shadow_space_bytes, frame::z_jit_out_preserve_size, locs);\n+  __ block_comment(\"} argument shuffle\");\n+\n+  __ block_comment(\"{ receiver \");\n+  __ load_const_optimized(Z_ARG1, (intptr_t)receiver);\n+  __ resolve_jobject(Z_ARG1, Z_tmp_1, Z_tmp_2);\n+  __ block_comment(\"} receiver \");\n+\n+  __ load_const_optimized(Z_method, (intptr_t)entry);\n+  __ z_stg(Z_method, Address(Z_thread, in_bytes(JavaThread::callee_target_offset())));\n+\n+  __ z_lg(call_target_address, Address(Z_method, in_bytes(Method::from_compiled_offset())));\n+  __ call(call_target_address);\n+\n+  \/\/ return value shuffle\n+  assert(!needs_return_buffer, \"unexpected needs_return_buffer\");\n+  \/\/ CallArranger can pick a return type that goes in the same reg for both CCs.\n+  if (call_regs._ret_regs.length() > 0) { \/\/ 0 or 1\n+    VMStorage ret_reg = call_regs._ret_regs.at(0);\n+    \/\/ Check if the return reg is as expected.\n+    switch (ret_type) {\n+      case T_BOOLEAN:\n+      case T_BYTE:\n+      case T_SHORT:\n+      case T_CHAR:\n+      case T_INT:\n+        __ z_lgfr(Z_RET, Z_RET); \/\/ Clear garbage in high half.\n+                                 \/\/ fallthrough\n+      case T_LONG:\n+        assert(as_Register(ret_reg) == Z_RET, \"unexpected result register\");\n+        break;\n+      case T_FLOAT:\n+      case T_DOUBLE:\n+        assert(as_FloatRegister(ret_reg) == Z_FRET, \"unexpected result register\");\n+        break;\n+      default:\n+        fatal(\"unexpected return type: %s\", type2name(ret_type));\n+    }\n+  }\n+\n+  result_spiller.generate_spill(_masm, res_save_area_offset);\n+\n+  __ block_comment(\"{ on_exit\");\n+  __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::on_exit));\n+  __ z_aghik(Z_ARG1, Z_SP, frame_data_offset);\n+  __ call(call_target_address);\n+  __ block_comment(\"} on_exit\");\n+\n+  restore_callee_saved_registers(_masm, abi, reg_save_area_offset);\n+\n+  result_spiller.generate_fill(_masm, res_save_area_offset);\n+\n+  __ pop_frame();\n+  __ restore_return_pc();\n+  __ z_br(Z_R14);\n+\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+  __ block_comment(\"{ exception handler\");\n+\n+  intptr_t exception_handler_offset = __ pc() - start;\n+\n+  \/\/ Native caller has no idea how to handle exceptions,\n+  \/\/ so we just crash here. Up to callee to catch exceptions.\n+  __ verify_oop(Z_ARG1);\n+  __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception));\n+  __ call_c(call_target_address);\n+  __ should_not_reach_here();\n+\n+  __ block_comment(\"} exception handler\");\n+\n+  _masm->flush();\n+\n+#ifndef PRODUCT\n+  stringStream ss;\n+  ss.print(\"upcall_stub_%s\", entry->signature()->as_C_string());\n+  const char* name = _masm->code_string(ss.as_string());\n+#else \/\/ PRODUCT\n+  const char* name = \"upcall_stub\";\n+#endif \/\/ PRODUCT\n+\n+  buffer.log_section_sizes(name);\n+  UpcallStub* blob\n+    = UpcallStub::create(name,\n+                         &buffer,\n+                         exception_handler_offset,\n+                         receiver,\n+                         in_ByteSize(frame_data_offset));\n+#ifndef PRODUCT\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    blob->print_on(&ls);\n+  }\n+#endif\n+\n+  return blob->code_begin();\n","filename":"src\/hotspot\/cpu\/s390\/upcallLinker_s390.cpp","additions":275,"deletions":3,"binary":false,"changes":278,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -32,4 +33,6 @@\n-  STACK = 0,\n-  PLACEHOLDER = 1,\n-\/\/ special locations used only by native code\n-  FRAME_DATA = PLACEHOLDER + 1,\n+  INTEGER = 0,\n+  FLOAT = 1,\n+  STACK = 2,\n+  PLACEHOLDER = 3,\n+  \/\/ special locations used only by native code\n+  FRAME_DATA = 4,\n@@ -41,1 +44,1 @@\n-   return false;\n+  return type == StorageType::INTEGER || type == StorageType::FLOAT;\n@@ -47,0 +50,22 @@\n+\/\/ Needs to be consistent with S390Architecture.java.\n+constexpr uint16_t REG32_MASK = 0b0000000000000001;\n+constexpr uint16_t REG64_MASK = 0b0000000000000011;\n+\n+inline Register as_Register(VMStorage vms) {\n+  assert(vms.type() == StorageType::INTEGER, \"not the right type\");\n+  return ::as_Register(vms.index());\n+}\n+\n+inline FloatRegister as_FloatRegister(VMStorage vms) {\n+  assert(vms.type() == StorageType::FLOAT, \"not the right type\");\n+  return ::as_FloatRegister(vms.index());\n+}\n+\n+inline VMStorage as_VMStorage(Register reg, uint16_t segment_mask = REG64_MASK) {\n+  return VMStorage::reg_storage(StorageType::INTEGER, segment_mask, reg->encoding());\n+}\n+\n+inline VMStorage as_VMStorage(FloatRegister reg, uint16_t segment_mask = REG64_MASK) {\n+  return VMStorage::reg_storage(StorageType::FLOAT, segment_mask, reg->encoding());\n+}\n+\n@@ -48,0 +73,31 @@\n+  if (reg->is_Register()) {\n+    uint16_t segment_mask = 0;\n+    switch (bt) {\n+      case T_BOOLEAN:\n+      case T_CHAR   :\n+      case T_BYTE   :\n+      case T_SHORT  :\n+      case T_INT    : segment_mask = REG32_MASK; break;\n+      default       : segment_mask = REG64_MASK; break;\n+    }\n+    return as_VMStorage(reg->as_Register(), segment_mask);\n+  } else if (reg->is_FloatRegister()) {\n+    \/\/ FP regs always use double format. However, we need the correct format for loads \/stores.\n+    return as_VMStorage(reg->as_FloatRegister(), (bt == T_FLOAT) ? REG32_MASK : REG64_MASK);\n+  } else if (reg->is_stack()) {\n+    uint16_t size = 0;\n+    switch (bt) {\n+      case T_BOOLEAN:\n+      case T_CHAR   :\n+      case T_BYTE   :\n+      case T_SHORT  :\n+      case T_INT    :\n+      case T_FLOAT  : size = 4; break;\n+      default       : size = 8; break;\n+    }\n+    return VMStorage(StorageType::STACK, size,\n+        checked_cast<uint16_t>(reg->reg2stack() * VMRegImpl::stack_slot_size));\n+  } else if (!reg->is_valid()) {\n+    return VMStorage::invalid();\n+  }\n+\n@@ -52,1 +108,1 @@\n-#endif \/\/ CPU_S390_VMSTORAGE_S390_INLINE_HPP\n\\ No newline at end of file\n+#endif \/\/ CPU_S390_VMSTORAGE_S390_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/s390\/vmstorage_s390.hpp","additions":62,"deletions":6,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -4434,0 +4435,8 @@\n+void Assembler::evpcmpuq(KRegister kdst, XMMRegister nds, XMMRegister src, ComparisonPredicate vcc, int vector_len) {\n+  assert(VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(kdst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x1E, (0xC0 | encode), vcc);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -1809,0 +1810,2 @@\n+  void evpcmpuq(KRegister kdst, XMMRegister nds, XMMRegister src, ComparisonPredicate vcc, int vector_len);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-    assert((intptr_t*)f.at(frame::interpreter_frame_last_sp_offset) == nullptr\n-      || f.unextended_sp() == (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset), \"\");\n+    assert((intptr_t*)f.at_relative_or_null(frame::interpreter_frame_last_sp_offset) == nullptr\n+      || f.unextended_sp() == (intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -123,1 +123,1 @@\n-  intptr_t* real_unextended_sp = (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset);\n+  intptr_t* real_unextended_sp = (intptr_t*)f.at_relative_or_null(frame::interpreter_frame_last_sp_offset);\n@@ -144,2 +144,2 @@\n-  \/\/ at(frame::interpreter_frame_last_sp_offset) can be null at safepoint preempts\n-  *hf.addr_at(frame::interpreter_frame_last_sp_offset) = hf.unextended_sp() - hf.fp();\n+  \/\/ Make sure that last_sp is already relativized.\n+  assert((intptr_t*)hf.at_relative(frame::interpreter_frame_last_sp_offset) == hf.unextended_sp(), \"\");\n@@ -285,1 +285,3 @@\n-  derelativize_one(vfp, frame::interpreter_frame_last_sp_offset);\n+  \/\/ Make sure that last_sp is kept relativized.\n+  assert((intptr_t*)f.at_relative(frame::interpreter_frame_last_sp_offset) == f.unextended_sp(), \"\");\n+\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -128,1 +128,2 @@\n-    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at(frame::interpreter_frame_last_sp_offset), p2i(f.unextended_sp()), expression_stack_sz);\n+    p2i(res), p2i(f.addr_at(frame::interpreter_frame_initial_sp_offset)), f.at_relative_or_null(frame::interpreter_frame_last_sp_offset),\n+    p2i(f.unextended_sp()), expression_stack_sz);\n","filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -204,1 +204,3 @@\n-  __ subptr(rsp, allocated_frame_size); \/\/ prolog\n+  if (allocated_frame_size > 0) {\n+    __ subptr(rsp, allocated_frame_size); \/\/ prolog\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -355,1 +355,3 @@\n-    *((intptr_t**)addr_at(interpreter_frame_last_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized last_sp\n+  ptr_at_put(interpreter_frame_last_sp_offset, sp != nullptr ? (sp - fp()) : 0);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -253,1 +253,3 @@\n-  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n+  intptr_t n = *addr_at(interpreter_frame_last_sp_offset);\n+  assert(n <= 0, \"n: \" INTPTR_FORMAT, n);\n+  return n != 0 ? &fp()[n] : nullptr;\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -798,1 +798,4 @@\n-  movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), _bcp_register);\n+  mov(rcx, _bcp_register);\n+  subptr(rcx, rbp);\n+  sarptr(rcx, LogBytesPerWord);\n+  movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), rcx);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -9260,0 +9261,11 @@\n+void MacroAssembler::evpaddq(XMMRegister dst, KRegister mask, XMMRegister nds, AddressLiteral src, bool merge, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n+  if (reachable(src)) {\n+    Assembler::evpaddq(dst, mask, nds, as_Address(src), merge, vector_len);\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::evpaddq(dst, mask, nds, Address(rscratch, 0), merge, vector_len);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -1791,0 +1792,3 @@\n+  using Assembler::evpaddq;\n+  void evpaddq(XMMRegister dst, KRegister mask, XMMRegister nds, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/relocInfo_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -367,1 +367,2 @@\n-\n+  void ev_add128(XMMRegister xmmdst, XMMRegister xmmsrc1, XMMRegister xmmsrc2,\n+                 int vector_len, KRegister ktmp, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -124,0 +124,10 @@\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_ONES[] = {\n+    0x0000000000000000UL, 0x0000000000000001UL,\n+    0x0000000000000000UL, 0x0000000000000001UL,\n+    0x0000000000000000UL, 0x0000000000000001UL,\n+    0x0000000000000000UL, 0x0000000000000001UL,\n+};\n+static address counter_mask_ones_addr() {\n+  return (address)COUNTER_MASK_ONES;\n+}\n+\n@@ -1626,0 +1636,11 @@\n+\/\/ Add 128-bit integers in xmmsrc1 to xmmsrc2, then place the result in xmmdst.\n+\/\/ Clobber ktmp and rscratch.\n+\/\/ Used by aesctr_encrypt.\n+void StubGenerator::ev_add128(XMMRegister xmmdst, XMMRegister xmmsrc1, XMMRegister xmmsrc2,\n+                            int vector_len, KRegister ktmp, Register rscratch) {\n+  __ vpaddq(xmmdst, xmmsrc1, xmmsrc2, vector_len);\n+  __ evpcmpuq(ktmp, xmmdst, xmmsrc2, __ lt, vector_len);\n+  __ kshiftlbl(ktmp, ktmp, 1);\n+  __ evpaddq(xmmdst, ktmp, xmmdst, ExternalAddress(counter_mask_ones_addr()), \/*merge*\/true,\n+             vector_len, rscratch);\n+}\n@@ -2049,1 +2070,0 @@\n-\n@@ -2107,8 +2127,11 @@\n-  __ vpaddd(xmm8,  xmm8,  ExternalAddress(counter_mask_linc0_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm9,  xmm8,  ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm10, xmm9,  ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm11, xmm10, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm12, xmm11, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm13, xmm12, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm14, xmm13, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n-  __ vpaddd(xmm15, xmm14, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc0_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  ev_add128(xmm8, xmm8, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  ev_add128(xmm9,  xmm8,  xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm10, xmm9,  xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm11, xmm10, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm12, xmm11, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm13, xmm12, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm14, xmm13, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm15, xmm14, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2162,1 +2185,1 @@\n-  __ vpaddq(xmm8, xmm8, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm8,   xmm8, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2164,1 +2187,1 @@\n-  __ vpaddq(xmm9, xmm9, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm9,   xmm9, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2166,1 +2189,1 @@\n-  __ vpaddq(xmm10, xmm10, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm10, xmm10, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2168,1 +2191,1 @@\n-  __ vpaddq(xmm11, xmm11, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm11, xmm11, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2170,1 +2193,1 @@\n-  __ vpaddq(xmm12, xmm12, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm12, xmm12, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2172,1 +2195,1 @@\n-  __ vpaddq(xmm13, xmm13, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm13, xmm13, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2174,1 +2197,1 @@\n-  __ vpaddq(xmm14, xmm14, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm14, xmm14, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2176,1 +2199,1 @@\n-  __ vpaddq(xmm15, xmm15, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm15, xmm15, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2254,2 +2277,2 @@\n-  __ vpaddq(xmm8, xmm8, xmm19, Assembler::AVX_512bit);\n-  __ vpaddq(xmm9, xmm9, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm8, xmm8, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n+  ev_add128(xmm9, xmm9, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2322,1 +2345,1 @@\n-  __ vpaddq(xmm8, xmm8, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm8, xmm8, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2379,0 +2402,1 @@\n+\n@@ -2380,1 +2404,1 @@\n-  __ vpaddq(xmm8, xmm8, xmm19, Assembler::AVX_512bit);\n+  ev_add128(xmm8, xmm8, xmm19, Assembler::AVX_512bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n@@ -2430,1 +2454,1 @@\n-  __ vpaddq(xmm8, xmm8, xmm19, Assembler::AVX_128bit);\n+  ev_add128(xmm8, xmm8, xmm19, Assembler::AVX_128bit, \/*ktmp*\/k1, r15 \/*rscratch*\/);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":46,"deletions":22,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -209,1 +210,2 @@\n-  __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ movptr(rcx, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(rsp, Address(rbp, rcx, Address::times_ptr));\n@@ -1619,0 +1621,1 @@\n+  __ lea(rbx, Address(rbp, rbx, Address::times_ptr));\n@@ -1627,0 +1630,1 @@\n+  __ lea(c_rarg2, Address(rbp, c_rarg2, Address::times_ptr));\n@@ -1634,1 +1638,2 @@\n-  __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ movptr(rcx, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(rsp, Address(rbp, rcx, Address::times_ptr));\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1569,0 +1569,2 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n@@ -3963,1 +3965,0 @@\n-  predicate(UseFMA);\n@@ -3968,0 +3969,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -3975,1 +3977,0 @@\n-  predicate(UseFMA);\n@@ -3980,0 +3981,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9867,0 +9869,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9881,0 +9884,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -111,1 +112,1 @@\n-  static int write_fully(int s, char* buf, int len);\n+  static int write_fully(int s, char* buf, size_t len);\n@@ -279,1 +280,1 @@\n-  const int max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n+  const size_t max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n@@ -288,2 +289,2 @@\n-  int off = 0;\n-  int left = max_len;\n+  size_t off = 0;\n+  size_t left = max_len;\n@@ -292,1 +293,1 @@\n-    int n;\n+    ssize_t n;\n@@ -296,1 +297,1 @@\n-    assert(n <= left, \"buffer was too small, impossible!\");\n+    assert(n <= checked_cast<ssize_t>(left), \"buffer was too small, impossible!\");\n@@ -417,1 +418,1 @@\n-int AixAttachListener::write_fully(int s, char* buf, int len) {\n+int AixAttachListener::write_fully(int s, char* buf, size_t len) {\n@@ -419,1 +420,1 @@\n-    int n = ::write(s, buf, len);\n+    ssize_t n = ::write(s, buf, len);\n@@ -582,9 +583,0 @@\n-AttachOperationFunctionInfo* AttachListener::pd_find_operation(const char* n) {\n-  return nullptr;\n-}\n-\n-jint AttachListener::pd_set_flag(AttachOperation* op, outputStream* out) {\n-  out->print_cr(\"flag '%s' cannot be changed\", op->arg(0));\n-  return JNI_ERR;\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -2950,10 +2951,2 @@\n-\/\/ Get the current stack base from the OS (actually, the pthread library).\n-\/\/ Note: usually not page aligned.\n-address os::current_stack_base() {\n-  AixMisc::stackbounds_t bounds;\n-  bool rc = AixMisc::query_stack_bounds_for_current_thread(&bounds);\n-  guarantee(rc, \"Unable to retrieve stack bounds.\");\n-  return bounds.base;\n-}\n-\n-\/\/ Get the current stack size from the OS (actually, the pthread library).\n+\/\/ Get the current stack base and size from the OS (actually, the pthread library).\n+\/\/ Note: base usually not page aligned.\n@@ -2961,1 +2954,1 @@\n-size_t os::current_stack_size() {\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n@@ -2965,1 +2958,3 @@\n-  \/\/ Align the returned stack size such that the stack low address\n+  *stack_base = bounds.base;\n+\n+  \/\/ Align the reported stack size such that the stack low address\n@@ -2971,2 +2966,1 @@\n-  size_t s = bounds.base - low_aligned;\n-  return s;\n+  *stack_size = bounds.base - low_aligned;\n@@ -2988,1 +2982,1 @@\n-  return strlen(buffer);\n+  return checked_cast<int>(strlen(buffer));\n@@ -3026,1 +3020,1 @@\n-  return t1 - t2;\n+  return primitive_compare(t1, t2);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  int len;\n+  size_t len;\n","filename":"src\/hotspot\/os\/aix\/os_perf_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -105,1 +106,1 @@\n-  static int write_fully(int s, char* buf, int len);\n+  static int write_fully(int s, char* buf, size_t len);\n@@ -260,1 +261,1 @@\n-  const int max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n+  const size_t max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n@@ -269,2 +270,2 @@\n-  int off = 0;\n-  int left = max_len;\n+  size_t off = 0;\n+  size_t left = max_len;\n@@ -273,1 +274,1 @@\n-    int n;\n+    ssize_t n;\n@@ -275,1 +276,1 @@\n-    assert(n <= left, \"buffer was too small, impossible!\");\n+    assert(n <= checked_cast<ssize_t>(left), \"buffer was too small, impossible!\");\n@@ -283,1 +284,1 @@\n-    for (int i=0; i<n; i++) {\n+    for (ssize_t i=0; i<n; i++) {\n@@ -386,1 +387,1 @@\n-int BsdAttachListener::write_fully(int s, char* buf, int len) {\n+int BsdAttachListener::write_fully(int s, char* buf, size_t len) {\n@@ -388,1 +389,1 @@\n-    int n = ::write(s, buf, len);\n+    ssize_t n = ::write(s, buf, len);\n@@ -545,9 +546,0 @@\n-AttachOperationFunctionInfo* AttachListener::pd_find_operation(const char* n) {\n-  return nullptr;\n-}\n-\n-jint AttachListener::pd_set_flag(AttachOperation* op, outputStream* out) {\n-  out->print_cr(\"flag '%s' cannot be changed\", op->arg(0));\n-  return JNI_ERR;\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2211,1 +2211,1 @@\n-  int diff = filetime1.tv_sec - filetime2.tv_sec;\n+  int diff = primitive_compare(filetime1.tv_sec, filetime2.tv_sec);\n@@ -2213,1 +2213,1 @@\n-    return filetime1.tv_nsec - filetime2.tv_nsec;\n+    diff = primitive_compare(filetime1.tv_nsec, filetime2.tv_nsec);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -106,1 +107,1 @@\n-  static int write_fully(int s, char* buf, int len);\n+  static int write_fully(int s, char* buf, size_t len);\n@@ -260,1 +261,1 @@\n-  const int max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n+  const size_t max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n@@ -269,2 +270,2 @@\n-  int off = 0;\n-  int left = max_len;\n+  size_t off = 0;\n+  size_t left = max_len;\n@@ -273,1 +274,1 @@\n-    int n;\n+    ssize_t n;\n@@ -275,1 +276,1 @@\n-    assert(n <= left, \"buffer was too small, impossible!\");\n+    assert(n <= checked_cast<ssize_t>(left), \"buffer was too small, impossible!\");\n@@ -283,1 +284,1 @@\n-    for (int i=0; i<n; i++) {\n+    for (ssize_t i=0; i<n; i++) {\n@@ -386,1 +387,1 @@\n-int LinuxAttachListener::write_fully(int s, char* buf, int len) {\n+int LinuxAttachListener::write_fully(int s, char* buf, size_t len) {\n@@ -550,9 +551,0 @@\n-AttachOperationFunctionInfo* AttachListener::pd_find_operation(const char* n) {\n-  return nullptr;\n-}\n-\n-jint AttachListener::pd_set_flag(AttachOperation* op, outputStream* out) {\n-  out->print_cr(\"flag '%s' cannot be changed\", op->arg(0));\n-  return JNI_ERR;\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -404,1 +405,1 @@\n-  int rslt = syscall(SYS_gettid);\n+  long rslt = syscall(SYS_gettid);\n@@ -426,1 +427,1 @@\n-  set_processor_count(sysconf(_SC_NPROCESSORS_CONF));\n+  set_processor_count((int)sysconf(_SC_NPROCESSORS_CONF));\n@@ -745,1 +746,1 @@\n-  osthread->set_thread_id(os::current_thread_id());\n+  osthread->set_thread_id(checked_cast<OSThread::thread_id_t>(os::current_thread_id()));\n@@ -1268,1 +1269,1 @@\n-    int statlen;\n+    size_t statlen;\n@@ -1477,1 +1478,1 @@\n-      if (offset != nullptr) *offset = addr - (address)dlinfo.dli_saddr;\n+      if (offset != nullptr) *offset = pointer_delta_as_int(addr, (address)dlinfo.dli_saddr);\n@@ -1505,1 +1506,1 @@\n-      *offset = addr - (address)dlinfo.dli_fbase;\n+      *offset = pointer_delta_as_int(addr, (address)dlinfo.dli_fbase);\n@@ -1604,4 +1605,3 @@\n-  int diag_msg_max_length=ebuflen-strlen(ebuf);\n-  char* diag_msg_buf=ebuf+strlen(ebuf);\n-\n-  if (diag_msg_max_length==0) {\n+  size_t prefix_len = strlen(ebuf);\n+  ssize_t diag_msg_max_length = ebuflen - prefix_len;\n+  if (diag_msg_max_length <= 0) {\n@@ -1612,0 +1612,1 @@\n+  char* diag_msg_buf = ebuf + prefix_len;\n@@ -1894,1 +1895,1 @@\n-  int bytes;\n+  ssize_t bytes;\n@@ -2385,1 +2386,1 @@\n-        steal_ticks_perc = (double) steal_ticks_difference \/ total_ticks_difference;\n+        steal_ticks_perc = (double) steal_ticks_difference \/ (double)total_ticks_difference;\n@@ -2427,1 +2428,1 @@\n-      if (fgets(buf, buflen, fp)) {\n+      if (fgets(buf, (int)buflen, fp)) {\n@@ -2670,1 +2671,1 @@\n-        len = strlen(buf);\n+        len = checked_cast<int>(strlen(buf));\n@@ -2680,1 +2681,1 @@\n-          len = strlen(buf);\n+          len = (int)strlen(buf);\n@@ -2833,0 +2834,10 @@\n+\/\/ Note that the value for MAP_FIXED_NOREPLACE differs between architectures, but all architectures\n+\/\/ supported by OpenJDK share the same flag value.\n+#define MAP_FIXED_NOREPLACE_value 0x100000\n+#ifndef MAP_FIXED_NOREPLACE\n+  #define MAP_FIXED_NOREPLACE MAP_FIXED_NOREPLACE_value\n+#else\n+  \/\/ Sanity-check our assumed default value if we build with a new enough libc.\n+  static_assert(MAP_FIXED_NOREPLACE == MAP_FIXED_NOREPLACE_value);\n+#endif\n+\n@@ -2973,1 +2984,1 @@\n-  int retval = -1;\n+  long retval = -1;\n@@ -2992,1 +3003,1 @@\n-  return (retval == -1) ? retval : cpu;\n+  return (retval == -1) ? -1 : cpu;\n@@ -3145,12 +3156,12 @@\n-  const size_t NCPUS = 32768; \/\/ Since the buffer size computation is very obscure\n-                              \/\/ in libnuma (possible values are starting from 16,\n-                              \/\/ and continuing up with every other power of 2, but less\n-                              \/\/ than the maximum number of CPUs supported by kernel), and\n-                              \/\/ is a subject to change (in libnuma version 2 the requirements\n-                              \/\/ are more reasonable) we'll just hardcode the number they use\n-                              \/\/ in the library.\n-  const size_t BitsPerCLong = sizeof(long) * CHAR_BIT;\n-\n-  size_t cpu_num = processor_count();\n-  size_t cpu_map_size = NCPUS \/ BitsPerCLong;\n-  size_t cpu_map_valid_size =\n+  const int NCPUS = 32768; \/\/ Since the buffer size computation is very obscure\n+                           \/\/ in libnuma (possible values are starting from 16,\n+                           \/\/ and continuing up with every other power of 2, but less\n+                           \/\/ than the maximum number of CPUs supported by kernel), and\n+                           \/\/ is a subject to change (in libnuma version 2 the requirements\n+                           \/\/ are more reasonable) we'll just hardcode the number they use\n+                           \/\/ in the library.\n+  constexpr int BitsPerCLong = (int)sizeof(long) * CHAR_BIT;\n+\n+  int cpu_num = processor_count();\n+  int cpu_map_size = NCPUS \/ BitsPerCLong;\n+  int cpu_map_valid_size =\n@@ -3162,1 +3173,1 @@\n-  size_t node_num = get_existing_num_nodes();\n+  int node_num = get_existing_num_nodes();\n@@ -3168,1 +3179,1 @@\n-  for (size_t i = 0; i < node_num; i++) {\n+  for (int i = 0; i < node_num; i++) {\n@@ -3179,1 +3190,1 @@\n-      for (size_t m = 0; m < node_num; m++) {\n+      for (int m = 0; m < node_num; m++) {\n@@ -3201,2 +3212,2 @@\n-    if (numa_node_to_cpus(nindex_to_node()->at(i), cpu_map, cpu_map_size * sizeof(unsigned long)) != -1) {\n-      for (size_t j = 0; j < cpu_map_valid_size; j++) {\n+    if (numa_node_to_cpus(nindex_to_node()->at(i), cpu_map, cpu_map_size * (int)sizeof(unsigned long)) != -1) {\n+      for (int j = 0; j < cpu_map_valid_size; j++) {\n@@ -3204,1 +3215,1 @@\n-          for (size_t k = 0; k < BitsPerCLong; k++) {\n+          for (int k = 0; k < BitsPerCLong; k++) {\n@@ -3289,1 +3300,1 @@\n-  unsigned pages = size \/ page_sz;\n+  unsigned pages = checked_cast<unsigned>(size \/ page_sz);\n@@ -3339,1 +3350,1 @@\n-  size_t pages = size \/ page_sz;\n+  uintx pages = size \/ page_sz;\n@@ -3346,1 +3357,1 @@\n-  int loops = (pages + stripe - 1) \/ stripe;\n+  int loops = checked_cast<int>((pages + stripe - 1) \/ stripe);\n@@ -3353,1 +3364,1 @@\n-    int pages_to_query = (pages >= stripe) ? stripe : pages;\n+    uintx pages_to_query = (pages >= stripe) ? stripe : pages;\n@@ -3369,1 +3380,1 @@\n-    for (int vecIdx = 0; vecIdx < pages_to_query; vecIdx ++) {\n+    for (uintx vecIdx = 0; vecIdx < pages_to_query; vecIdx ++) {\n@@ -3473,2 +3484,17 @@\n-  \/\/ MAP_FIXED is intentionally left out, to leave existing mappings intact.\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  \/\/ If a requested address was given:\n+  \/\/\n+  \/\/ The POSIX-conforming way is to *omit* MAP_FIXED. This will leave existing mappings intact.\n+  \/\/ If the requested mapping area is blocked by a pre-existing mapping, the kernel will map\n+  \/\/ somewhere else. On Linux, that alternative address appears to have no relation to the\n+  \/\/ requested address.\n+  \/\/ Unfortunately, this is not what we need - if we requested a specific address, we'd want\n+  \/\/ to map there and nowhere else. Therefore we will unmap the block again, which means we\n+  \/\/ just executed a needless mmap->munmap cycle.\n+  \/\/ Since Linux 4.17, the kernel offers MAP_FIXED_NOREPLACE. With this flag, if a pre-\n+  \/\/ existing mapping exists, the kernel will not map at an alternative point but instead\n+  \/\/ return an error. We can therefore save that unnecessary mmap-munmap cycle.\n+  \/\/\n+  \/\/ Backward compatibility: Older kernels will ignore the unknown flag; so mmap will behave\n+  \/\/ as in mode (a).\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS |\n+                    ((requested_addr != nullptr) ? MAP_FIXED_NOREPLACE : 0);\n@@ -3796,4 +3822,9 @@\n-  \/\/ 2) check if large pages are configured\n-  if ( ( UseTransparentHugePages && HugePages::supports_thp() == false) ||\n-       (!UseTransparentHugePages && HugePages::supports_static_hugepages() == false) ) {\n-    \/\/ No large pages configured, return.\n+  \/\/ 2) check if the OS supports THPs resp. static hugepages.\n+  if (UseTransparentHugePages && !HugePages::supports_thp()) {\n+    if (!FLAG_IS_DEFAULT(UseTransparentHugePages)) {\n+      log_warning(pagesize)(\"UseTransparentHugePages disabled, transparent huge pages are not supported by the operating system.\");\n+    }\n+    UseLargePages = UseTransparentHugePages = UseHugeTLBFS = UseSHM = false;\n+    return;\n+  }\n+  if (!UseTransparentHugePages && !HugePages::supports_static_hugepages()) {\n@@ -3801,4 +3832,1 @@\n-    UseLargePages = false;\n-    UseTransparentHugePages = false;\n-    UseHugeTLBFS = false;\n-    UseSHM = false;\n+    UseLargePages = UseTransparentHugePages = UseHugeTLBFS = UseSHM = false;\n@@ -4212,0 +4240,1 @@\n+    log_trace(os, map)(\"Kernel rejected \" PTR_FORMAT \", offered \" PTR_FORMAT \".\", p2i(requested_addr), p2i(addr));\n@@ -4396,2 +4425,2 @@\n-  clock_tics_per_sec = sysconf(_SC_CLK_TCK);\n-  int sys_pg_size = sysconf(_SC_PAGESIZE);\n+  clock_tics_per_sec = checked_cast<int>(sysconf(_SC_CLK_TCK));\n+  int sys_pg_size = checked_cast<int>(sysconf(_SC_PAGESIZE));\n@@ -4402,1 +4431,1 @@\n-  size_t page_size = (size_t) sys_pg_size;\n+  size_t page_size = sys_pg_size;\n@@ -4746,1 +4775,1 @@\n-  int cpus_size = sizeof(cpu_set_t);\n+  size_t cpus_size = sizeof(cpu_set_t);\n@@ -4770,1 +4799,1 @@\n-       int online_cpus = ::sysconf(_SC_NPROCESSORS_ONLN);\n+       int online_cpus = checked_cast<int>(::sysconf(_SC_NPROCESSORS_ONLN));\n@@ -4802,1 +4831,1 @@\n-    cpu_count = ::sysconf(_SC_NPROCESSORS_ONLN);\n+    cpu_count = checked_cast<int>(::sysconf(_SC_NPROCESSORS_ONLN));\n@@ -5164,1 +5193,1 @@\n-  int statlen;\n+  size_t statlen;\n@@ -5310,1 +5339,1 @@\n-  return strlen(buffer);\n+  return checked_cast<int>(strlen(buffer));\n@@ -5370,1 +5399,1 @@\n-\/\/ ** P1 (aka bottom) and size (P2 = P1 - size) are the address and stack size\n+\/\/ ** P1 (aka bottom) and size are the address and stack size\n@@ -5372,0 +5401,1 @@\n+\/\/ ** P2 (aka stack top or base) = P1 + size\n@@ -5377,1 +5407,2 @@\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::current_stack_base_and_size(address* base, size_t* size) {\n+  address bottom;\n@@ -5381,2 +5412,3 @@\n-    *bottom = os::Linux::initial_thread_stack_bottom();\n-    *size   = os::Linux::initial_thread_stack_size();\n+    bottom = os::Linux::initial_thread_stack_bottom();\n+    *size = os::Linux::initial_thread_stack_size();\n+    *base = bottom + *size;\n@@ -5397,1 +5429,1 @@\n-    if (pthread_attr_getstack(&attr, (void **)bottom, size) != 0) {\n+    if (pthread_attr_getstack(&attr, (void **)&bottom, size) != 0) {\n@@ -5401,0 +5433,2 @@\n+    *base = bottom + *size;\n+\n@@ -5407,2 +5441,2 @@\n-      *bottom += guard_size;\n-      *size   -= guard_size;\n+      bottom += guard_size;\n+      *size  -= guard_size;\n@@ -5412,1 +5446,0 @@\n-\n@@ -5414,2 +5447,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n@@ -5418,15 +5451,0 @@\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ This stack size includes the usable stack and HotSpot guard pages\n-  \/\/ (for the threads that have Hotspot guard pages).\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n-}\n@@ -5445,1 +5463,1 @@\n-  int diff = filetime1.tv_sec - filetime2.tv_sec;\n+  int diff = primitive_compare(filetime1.tv_sec, filetime2.tv_sec);\n@@ -5447,1 +5465,1 @@\n-    return filetime1.tv_nsec - filetime2.tv_nsec;\n+    diff = primitive_compare(filetime1.tv_nsec, filetime2.tv_nsec);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":103,"deletions":85,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  int n;\n+  ssize_t n;\n@@ -385,1 +385,1 @@\n-  *pkernelLoad = (kdiff \/ (double)tdiff);\n+  *pkernelLoad = ((double)kdiff \/ (double)tdiff);\n@@ -390,1 +390,1 @@\n-  user_load = (udiff \/ (double)tdiff);\n+  user_load = ((double)udiff \/ (double)tdiff);\n@@ -476,1 +476,1 @@\n-      *rate      = ( (double)(sw - lastSwitches) \/ d ) * 1000;\n+      *rate      = ( (double)(sw - lastSwitches) \/ (double)d ) * 1000;\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-static int membarrier(int cmd, unsigned int flags, int cpu_id) {\n+static long membarrier(int cmd, unsigned int flags, int cpu_id) {\n@@ -64,1 +64,1 @@\n-  int ret = membarrier(MEMBARRIER_CMD_QUERY, 0, 0);\n+  long ret = membarrier(MEMBARRIER_CMD_QUERY, 0, 0);\n@@ -81,1 +81,1 @@\n-  int s = membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED, 0, 0);\n+  long s = membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED, 0, 0);\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-static int futex(volatile int *addr, int futex_op, int op_arg) {\n+static long futex(volatile int *addr, int futex_op, int op_arg) {\n@@ -54,3 +54,3 @@\n-  int s = futex(&_futex_barrier,\n-                FUTEX_WAKE_PRIVATE,\n-                INT_MAX \/* wake a max of this many threads *\/);\n+  long s = futex(&_futex_barrier,\n+                 FUTEX_WAKE_PRIVATE,\n+                 INT_MAX \/* wake a max of this many threads *\/);\n@@ -68,3 +68,3 @@\n-    int s = futex(&_futex_barrier,\n-                  FUTEX_WAIT_PRIVATE,\n-                  barrier_tag \/* should be this tag *\/);\n+    long s = futex(&_futex_barrier,\n+                   FUTEX_WAIT_PRIVATE,\n+                   barrier_tag \/* should be this tag *\/);\n","filename":"src\/hotspot\/os\/linux\/waitBarrier_linux.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -52,0 +53,4 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfrEvents.hpp\"\n+#endif\n+\n@@ -448,1 +453,1 @@\n-  int currsec = time(nullptr);\n+  time_t currsec = time(nullptr);\n@@ -459,1 +464,1 @@\n-    os::print_dhm(st, \"OS uptime:\", (long) (currsec-bootsec));\n+    os::print_dhm(st, \"OS uptime:\", currsec-bootsec);\n@@ -717,0 +722,1 @@\n+\n@@ -724,0 +730,6 @@\n+\n+#if INCLUDE_JFR\n+  EventNativeLibraryUnload event;\n+  event.set_name(l_path);\n+#endif\n+\n@@ -733,0 +745,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n@@ -743,0 +760,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(error_report);\n+    event.commit();\n+#endif\n@@ -802,2 +824,2 @@\n-int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n+ssize_t os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n+  RESTARTABLE_RETURN_SSIZE_T(::recv(fd, buf, nBytes, flags));\n@@ -806,2 +828,2 @@\n-int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n+ssize_t os::send(int fd, char* buf, size_t nBytes, uint flags) {\n+  RESTARTABLE_RETURN_SSIZE_T(::send(fd, buf, nBytes, flags));\n@@ -810,1 +832,1 @@\n-int os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n+ssize_t os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n@@ -814,2 +836,2 @@\n-int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n+ssize_t os::connect(int fd, struct sockaddr* him, socklen_t len) {\n+  RESTARTABLE_RETURN_SSIZE_T(::connect(fd, him, len));\n@@ -1211,1 +1233,1 @@\n-  clock_tics_per_sec = sysconf(_SC_CLK_TCK);\n+  clock_tics_per_sec = checked_cast<int>(sysconf(_SC_CLK_TCK));\n@@ -1335,1 +1357,1 @@\n-  DEBUG_ONLY(int max_secs = MAX_SECS;)\n+  DEBUG_ONLY(time_t max_secs = MAX_SECS;)\n@@ -1417,1 +1439,1 @@\n-  return ((double)os::elapsed_counter()) \/ os::elapsed_frequency(); \/\/ nanosecond resolution\n+  return ((double)os::elapsed_counter()) \/ (double)os::elapsed_frequency(); \/\/ nanosecond resolution\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":34,"deletions":12,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-#define RESTARTABLE_RETURN_INT(_cmd) do { \\\n-  int _result; \\\n+#define RESTARTABLE_RETURN_SSIZE_T(_cmd) do { \\\n+  ssize_t _result; \\\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -47,0 +48,1 @@\n+#include \"utilities\/parseInteger.hpp\"\n@@ -684,1 +686,1 @@\n-  os::print_function_and_library_name(os, handler, buf, buflen,\n+  os::print_function_and_library_name(os, handler, buf, checked_cast<int>(buflen),\n@@ -1729,2 +1731,3 @@\n-    int sig = ::strtol(s, 0, 10);\n-    if (sig > MAX2(SIGSEGV, SIGBUS) &&  \/\/ See 4355769.\n+    int sig;\n+    bool result = parse_integer(s, &sig);\n+    if (result && sig > MAX2(SIGSEGV, SIGBUS) &&  \/\/ See 4355769.\n@@ -1734,2 +1737,2 @@\n-      warning(\"You set _JAVA_SR_SIGNUM=%d. It must be in range [%d, %d]. Using %d instead.\",\n-              sig, MAX2(SIGSEGV, SIGBUS)+1, NSIG-1, PosixSignals::SR_signum);\n+      warning(\"You set _JAVA_SR_SIGNUM=%s. It must be a number in range [%d, %d]. Using %d instead.\",\n+              s, MAX2(SIGSEGV, SIGBUS)+1, NSIG-1, PosixSignals::SR_signum);\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -394,9 +394,0 @@\n-AttachOperationFunctionInfo* AttachListener::pd_find_operation(const char* n) {\n-  return nullptr;\n-}\n-\n-jint AttachListener::pd_set_flag(AttachOperation* op, outputStream* out) {\n-  out->print_cr(\"flag '%s' cannot be changed\", op->arg(0));\n-  return JNI_ERR;\n-}\n-\n","filename":"src\/hotspot\/os\/windows\/attachListener_windows.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -428,2 +428,0 @@\n-\/\/ os::current_stack_base()\n-\/\/\n@@ -434,1 +432,1 @@\n-address os::current_stack_base() {\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n@@ -437,1 +435,1 @@\n-  size_t stack_size;\n+  size_t size;\n@@ -440,2 +438,2 @@\n-  stack_bottom =  (address)minfo.AllocationBase;\n-  stack_size = minfo.RegionSize;\n+  stack_bottom = (address)minfo.AllocationBase;\n+  size = minfo.RegionSize;\n@@ -446,1 +444,1 @@\n-    VirtualQuery(stack_bottom+stack_size, &minfo, sizeof(minfo));\n+    VirtualQuery(stack_bottom + size, &minfo, sizeof(minfo));\n@@ -448,1 +446,1 @@\n-      stack_size += minfo.RegionSize;\n+      size += minfo.RegionSize;\n@@ -453,9 +451,2 @@\n-  return stack_bottom + stack_size;\n-}\n-\n-size_t os::current_stack_size() {\n-  size_t sz;\n-  MEMORY_BASIC_INFORMATION minfo;\n-  VirtualQuery(&minfo, &minfo, sizeof(minfo));\n-  sz = (size_t)os::current_stack_base() - (size_t)minfo.AllocationBase;\n-  return sz;\n+  *stack_base = stack_bottom + size;\n+  *stack_size = size;\n@@ -1257,0 +1248,6 @@\n+\n+#if INCLUDE_JFR\n+  EventNativeLibraryUnload event;\n+  event.set_name(name);\n+#endif\n+\n@@ -1260,0 +1257,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n@@ -1262,0 +1264,2 @@\n+    char buf[500];\n+    size_t tl = os::lasterror(buf, sizeof(buf));\n@@ -1264,0 +1268,8 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    if (tl == 0) {\n+      os::snprintf(buf, sizeof(buf), \"Attempt to unload dll failed (error code %d)\", (int) errcode);\n+    }\n+    event.set_errorMessage(buf);\n+    event.commit();\n+#endif\n@@ -1765,1 +1777,1 @@\n-  return t1 - t2;\n+  return primitive_compare(t1, t2);\n@@ -5611,1 +5623,1 @@\n-int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n+ssize_t os::connect(int fd, struct sockaddr* him, socklen_t len) {\n@@ -5615,1 +5627,1 @@\n-int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n+ssize_t os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n@@ -5619,1 +5631,1 @@\n-int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n+ssize_t os::send(int fd, char* buf, size_t nBytes, uint flags) {\n@@ -5623,1 +5635,1 @@\n-int os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n+ssize_t os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -466,1 +466,1 @@\n-  print_instructions(st, pc, \/*instrsize=*\/4);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -357,2 +357,2 @@\n-\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::current_stack_base_and_size(address* base, size_t* size) {\n+  address bottom;\n@@ -361,1 +361,1 @@\n-  void *stacktop = pthread_get_stackaddr_np(self);\n+  *base = (address) pthread_get_stackaddr_np(self);\n@@ -363,1 +363,1 @@\n-  *bottom = (address) stacktop - *size;\n+  bottom = *base - *size;\n@@ -371,2 +371,3 @@\n-  *bottom = (address)((char *)ss.ss_sp - ss.ss_size);\n-  *size   = ss.ss_size;\n+  *base = (address) ss.ss_sp;\n+  *size = ss.ss_size;\n+  bottom = *base - *size;\n@@ -387,2 +388,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **)bottom) != 0 ||\n-    pthread_attr_getstacksize(&attr, size) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **)&bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -392,0 +393,2 @@\n+  *base = bottom + *size;\n+\n@@ -394,17 +397,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n@@ -480,1 +468,1 @@\n-  print_instructions(st, pc, 4\/*native instruction size*\/);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-\/\/ needed by current_stack_region() workaround for Mavericks\n+\/\/ needed by current_stack_base_and_size() workaround for Mavericks\n@@ -712,2 +712,3 @@\n-\/\/ ** P1 (aka bottom) and size ( P2 = P1 - size) are the address and stack size returned from\n-\/\/    pthread_attr_getstack()\n+\/\/ ** P1 (aka bottom) and size are the address and stack size\n+\/\/    returned from pthread_attr_getstack().\n+\/\/ ** P2 (aka stack top or base) = P1 + size\n@@ -715,1 +716,2 @@\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::current_stack_base_and_size(address* base, size_t* size) {\n+  address bottom;\n@@ -718,1 +720,1 @@\n-  void *stacktop = pthread_get_stackaddr_np(self);\n+  *base = (address) pthread_get_stackaddr_np(self);\n@@ -741,1 +743,1 @@\n-  *bottom = (address) stacktop - *size;\n+  bottom = *base - *size;\n@@ -749,2 +751,3 @@\n-  *bottom = (address)((char *)ss.ss_sp - ss.ss_size);\n-  *size   = ss.ss_size;\n+  *base = (address) ss.ss_sp;\n+  *size = ss.ss_size;\n+  bottom = *base - *size;\n@@ -765,2 +768,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **)bottom) != 0 ||\n-    pthread_attr_getstacksize(&attr, size) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **)&bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -770,0 +773,2 @@\n+  *base = bottom + *size;\n+\n@@ -772,17 +777,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n@@ -857,1 +847,1 @@\n-  print_instructions(st, pc, sizeof(char));\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -179,4 +179,2 @@\n-static void current_stack_region(address *bottom, size_t *size) {\n-  address stack_bottom;\n-  address stack_top;\n-  size_t stack_bytes;\n+void os::current_stack_base_and_size(address* base, size_t* size)\n+  address bottom;\n@@ -186,3 +184,3 @@\n-  stack_top = (address) pthread_get_stackaddr_np(self);\n-  stack_bytes = pthread_get_stacksize_np(self);\n-  stack_bottom = stack_top - stack_bytes;\n+  *base = (address) pthread_get_stackaddr_np(self);\n+  *size = pthread_get_stacksize_np(self);\n+  bottom = *base - *size;\n@@ -194,1 +192,1 @@\n-    fatal(\"pthread_stackseg_np failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_stackseg_np failed with error = %d\", rslt);\n@@ -196,3 +194,3 @@\n-  stack_top = (address) ss.ss_sp;\n-  stack_bytes  = ss.ss_size;\n-  stack_bottom = stack_top - stack_bytes;\n+  *base = (address) ss.ss_sp;\n+  *size  = ss.ss_size;\n+  bottom = *base - *size;\n@@ -206,1 +204,1 @@\n-    fatal(\"pthread_attr_init failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_attr_init failed with error = %d\", rslt);\n@@ -211,1 +209,1 @@\n-    fatal(\"pthread_attr_get_np failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_attr_get_np failed with error = %d\", rslt);\n@@ -213,2 +211,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **) &stack_bottom) != 0 ||\n-      pthread_attr_getstacksize(&attr, &stack_bytes) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **) &bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -218,0 +216,2 @@\n+  *base = bottom + *size;\n+\n@@ -220,1 +220,0 @@\n-  stack_top = stack_bottom + stack_bytes;\n@@ -222,21 +221,2 @@\n-\n-  assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-  assert(os::current_stack_pointer() < stack_top, \"should do\");\n-\n-  *bottom = stack_bottom;\n-  *size = stack_top - stack_bottom;\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return bottom + size;\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":17,"deletions":37,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-  print_instructions(st, pc, 4\/*native instruction size*\/);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -486,1 +486,1 @@\n-  print_instructions(st, pc, Assembler::InstructionSize);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-  print_instructions(st, pc, \/*instrsize=*\/4);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-  print_instructions(st, pc, UseRVC ? sizeof(char) : (int)NativeInstruction::instruction_size);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-  print_instructions(st, pc, \/*intrsize=*\/4);\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -466,1 +466,1 @@\n-    size_t len = sizeof(data);\n+    int len = (int)sizeof(data);\n@@ -574,1 +574,1 @@\n-  print_instructions(st, pc, sizeof(char));\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -309,1 +309,2 @@\n-static void current_stack_region(address *bottom, size_t *size) {\n+void os::current_stack_base_and_size(address* base, size_t* size) {\n+  address bottom;\n@@ -313,2 +314,4 @@\n-    address stack_bottom = os::Linux::initial_thread_stack_bottom();\n-    size_t stack_bytes  = os::Linux::initial_thread_stack_size();\n+    bottom = os::Linux::initial_thread_stack_bottom();\n+    *size = os::Linux::initial_thread_stack_size();\n+    *base = bottom + *size;\n+  } else {\n@@ -316,2 +319,1 @@\n-    assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-    assert(os::current_stack_pointer() < stack_bottom + stack_bytes, \"should do\");\n+    pthread_attr_t attr;\n@@ -319,4 +321,1 @@\n-    *bottom = stack_bottom;\n-    *size = stack_bytes;\n-    return;\n-  }\n+    int rslt = pthread_getattr_np(pthread_self(), &attr);\n@@ -324,5 +323,7 @@\n-  pthread_attr_t attr;\n-  int res = pthread_getattr_np(pthread_self(), &attr);\n-  if (res != 0) {\n-    if (res == ENOMEM) {\n-      vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n+    \/\/ JVM needs to know exact stack location, abort if it fails\n+    if (rslt != 0) {\n+      if (rslt == ENOMEM) {\n+        vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n+      } else {\n+        fatal(\"pthread_getattr_np failed with error = %d\", rslt);\n+      }\n@@ -330,2 +331,3 @@\n-    else {\n-      fatal(\"pthread_getattr_np failed with error = %d\", res);\n+\n+    if (pthread_attr_getstack(&attr, (void **)&bottom, size) != 0) {\n+      fatal(\"Cannot locate current stack attributes!\");\n@@ -333,1 +335,0 @@\n-  }\n@@ -335,7 +336,1 @@\n-  address stack_bottom;\n-  size_t stack_bytes;\n-  res = pthread_attr_getstack(&attr, (void **) &stack_bottom, &stack_bytes);\n-  if (res != 0) {\n-    fatal(\"pthread_attr_getstack failed with error = %d\", res);\n-  }\n-  address stack_top = stack_bottom + stack_bytes;\n+    *base = bottom + *size;\n@@ -343,4 +338,4 @@\n-  \/\/ The block of memory returned by pthread_attr_getstack() includes\n-  \/\/ guard pages where present.  We need to trim these off.\n-  size_t page_bytes = os::vm_page_size();\n-  assert(((intptr_t) stack_bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n+    \/\/ The block of memory returned by pthread_attr_getstack() includes\n+    \/\/ guard pages where present.  We need to trim these off.\n+    size_t page_bytes = os::vm_page_size();\n+    assert(((intptr_t) bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n@@ -348,7 +343,7 @@\n-  size_t guard_bytes;\n-  res = pthread_attr_getguardsize(&attr, &guard_bytes);\n-  if (res != 0) {\n-    fatal(\"pthread_attr_getguardsize failed with errno = %d\", res);\n-  }\n-  int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n-  assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n+    size_t guard_bytes;\n+    rslt = pthread_attr_getguardsize(&attr, &guard_bytes);\n+    if (rslt != 0) {\n+      fatal(\"pthread_attr_getguardsize failed with errno = %d\", rslt);\n+    }\n+    int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n+    assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n@@ -357,9 +352,9 @@\n-  \/\/ IA64 has two stacks sharing the same area of memory, a normal\n-  \/\/ stack growing downwards and a register stack growing upwards.\n-  \/\/ Guard pages, if present, are in the centre.  This code splits\n-  \/\/ the stack in two even without guard pages, though in theory\n-  \/\/ there's nothing to stop us allocating more to the normal stack\n-  \/\/ or more to the register stack if one or the other were found\n-  \/\/ to grow faster.\n-  int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n-  stack_bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n+    \/\/ IA64 has two stacks sharing the same area of memory, a normal\n+    \/\/ stack growing downwards and a register stack growing upwards.\n+    \/\/ Guard pages, if present, are in the centre.  This code splits\n+    \/\/ the stack in two even without guard pages, though in theory\n+    \/\/ there's nothing to stop us allocating more to the normal stack\n+    \/\/ or more to the register stack if one or the other were found\n+    \/\/ to grow faster.\n+    int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n+    bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n@@ -368,1 +363,2 @@\n-  stack_bottom += guard_bytes;\n+    bottom += guard_bytes;\n+    *size = *base - bottom;\n@@ -370,15 +366,2 @@\n-  pthread_attr_destroy(&attr);\n-\n-  assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-  assert(os::current_stack_pointer() < stack_top, \"should do\");\n-\n-  *bottom = stack_bottom;\n-  *size = stack_top - stack_bottom;\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return bottom + size;\n-}\n+    pthread_attr_destroy(&attr);\n+  }\n@@ -386,6 +369,2 @@\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n@@ -412,1 +391,1 @@\n-  print_instructions(st, pc, sizeof(char));\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":46,"deletions":67,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-  print_instructions(st, pc, sizeof(char));\n+  print_instructions(st, pc);\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-    int src_hash = src_obj->identity_hash();\n+    intptr_t src_hash = src_obj->identity_hash();\n@@ -463,2 +463,2 @@\n-    DEBUG_ONLY(int archived_hash = fake_oop->identity_hash());\n-    assert(src_hash == archived_hash, \"Different hash codes: original %x, archived %x\", src_hash, archived_hash);\n+    DEBUG_ONLY(intptr_t archived_hash = fake_oop->identity_hash());\n+    assert(src_hash == archived_hash, \"Different hash codes: original \" INTPTR_FORMAT \", archived \" INTPTR_FORMAT, src_hash, archived_hash);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  _token = _line;\n@@ -416,1 +417,1 @@\n-  int error_index = _token - _line;\n+  int error_index = pointer_delta_as_int(_token, _line);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -226,1 +226,0 @@\n-  _num_module_paths = ClassLoader::num_module_path_entries();\n@@ -228,0 +227,1 @@\n+  _num_module_paths = ClassLoader::num_module_path_entries();\n@@ -357,1 +357,1 @@\n-  if (ent->is_jar() && !ent->is_signed() && ent->manifest() != nullptr) {\n+  if (ent->is_jar() && ent->manifest() != nullptr) {\n@@ -611,23 +611,0 @@\n-\n-  \/\/ The return value indicates if the JAR is signed or not\n-  bool check_is_signed() {\n-    u1* attr = _current;\n-    bool isSigned = false;\n-    while (_current < _buffer_end) {\n-      if (*_current == '\\n') {\n-        *_current = '\\0';\n-        u1* value = (u1*)strchr((char*)attr, ':');\n-        if (value != nullptr) {\n-          assert(*(value+1) == ' ', \"Unrecognized format\" );\n-          if (strstr((char*)attr, \"-Digest\") != nullptr) {\n-            isSigned = true;\n-            break;\n-          }\n-        }\n-        *_current = '\\n'; \/\/ restore\n-        attr = _current + 1;\n-      }\n-      _current ++;\n-    }\n-    return isSigned;\n-  }\n@@ -646,12 +623,8 @@\n-    if (stream->check_is_signed()) {\n-      ent->set_is_signed();\n-    } else {\n-      \/\/ Copy the manifest into the shared archive\n-      manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n-      Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n-                                                      manifest_size,\n-                                                      CHECK);\n-      char* p = (char*)(buf->data());\n-      memcpy(p, manifest, manifest_size);\n-      ent->set_manifest(buf);\n-    }\n+    \/\/ Copy the manifest into the shared archive\n+    manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n+    Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n+                                                    manifest_size,\n+                                                    CHECK);\n+    char* p = (char*)(buf->data());\n+    memcpy(p, manifest, manifest_size);\n+    ent->set_manifest(buf);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":37,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    signed_jar_entry,\n@@ -93,4 +92,0 @@\n-  bool is_signed()        const { return _type == signed_jar_entry; }\n-  void set_is_signed() {\n-    _type = signed_jar_entry;\n-  }\n@@ -220,1 +215,0 @@\n-  jshort _num_module_paths;             \/\/ number of module path entries\n@@ -222,0 +216,1 @@\n+  int    _num_module_paths;             \/\/ number of module path entries\n@@ -279,1 +274,1 @@\n-  jshort num_module_paths()                const { return _num_module_paths; }\n+  int    num_module_paths()                const { return _num_module_paths; }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-  bool equals(DictionaryEntry** value, bool* is_dead) {\n+  bool equals(DictionaryEntry** value) {\n@@ -234,1 +234,0 @@\n-    *is_dead = false;\n@@ -237,0 +236,3 @@\n+  bool is_dead(DictionaryEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -4714,1 +4715,1 @@\n-    _page_size = (int)os::vm_page_size();\n+    _page_size = AIX_ONLY(sysconf(_SC_PAGESIZE)) NOT_AIX((int)os::vm_page_size());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapTableFormat.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -182,2 +182,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -194,0 +192,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n@@ -211,1 +213,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -214,2 +216,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -226,0 +226,5 @@\n+\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -377,1 +377,5 @@\n-  bool equals(Symbol* value, bool* is_dead) {\n+  \/\/ Note: When equals() returns \"true\", the symbol's refcount is incremented. This is\n+  \/\/ needed to ensure that the symbol is kept alive before equals() returns to the caller,\n+  \/\/ so that another thread cannot clean the symbol up concurrently. The caller is\n+  \/\/ responsible for decrementing the refcount, when the symbol is no longer needed.\n+  bool equals(Symbol* value) {\n@@ -386,1 +390,0 @@\n-        *is_dead = true;\n@@ -390,1 +393,0 @@\n-      *is_dead = (sym->refcount() == 0);\n@@ -394,0 +396,3 @@\n+  bool is_dead(Symbol* value) {\n+    return value->refcount() == 0;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  enum {\n+  enum : char {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/vtableStubs.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,0 +154,3 @@\n+  \/\/ Compiler threads are hidden by default.\n+  virtual bool is_hidden_from_external_view() const { return true; }\n+\n","filename":"src\/hotspot\/share\/compiler\/abstractCompiler.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,0 +64,5 @@\n+\n+\/\/ Hide native compiler threads from external view.\n+bool CompilerThread::is_hidden_from_external_view() const {\n+  return _compiler == nullptr || _compiler->is_hidden_from_external_view();\n+}\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,2 +75,3 @@\n-  \/\/ Hide native compiler threads from external view.\n-  bool is_hidden_from_external_view() const      { return !can_call_java(); }\n+  \/\/ Returns true if this CompilerThread is hidden from JVMTI and FlightRecorder.  C1 and C2 are\n+  \/\/ always hidden but JVMCI compiler threads might be hidden.\n+  virtual bool is_hidden_from_external_view() const;\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  _bitmap_hash_mask(~(~(0) << _log2_max_cards_in_howl_bitmap)),\n+  _bitmap_hash_mask((1U << _log2_max_cards_in_howl_bitmap) - 1),\n@@ -261,2 +261,1 @@\n-    bool equals(G1CardSetHashTableValue* value, bool* is_dead) {\n-      *is_dead = false;\n+    bool equals(G1CardSetHashTableValue* value) {\n@@ -265,0 +264,4 @@\n+\n+    bool is_dead(G1CardSetHashTableValue*) {\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  size_t _bitmap_hash_mask;\n+  uint _bitmap_hash_mask;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -147,1 +148,1 @@\n-  _data[0] = card_in_region;\n+  _data[0] = checked_cast<EntryDataType>(card_in_region);\n@@ -198,1 +199,1 @@\n-  _data[num_entries] = card_idx;\n+  _data[num_entries] = checked_cast<EntryDataType>(card_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void apply_to_buffer(BufferNode* node, size_t buffer_capacity, uint worker_id) {\n+  void apply_to_buffer(BufferNode* node, uint worker_id) {\n@@ -44,1 +44,2 @@\n-    for (size_t i = node->index(); i < buffer_capacity; ++i) {\n+    size_t capacity = node->capacity();\n+    for (size_t i = node->index(); i < capacity; ++i) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableEntryClosure.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,1 +134,0 @@\n-\n@@ -140,2 +139,0 @@\n-    bool should_add(HeapRegion* hr) { return G1CollectionSetChooser::should_add(hr); }\n-\n@@ -150,5 +147,23 @@\n-      \/\/ We will skip any region that's currently used as an old GC\n-      \/\/ alloc region (we should not consider those for collection\n-      \/\/ before we fill them up).\n-      if (should_add(r) && !G1CollectedHeap::heap()->is_old_gc_alloc_region(r)) {\n-        assert(r->rem_set()->is_complete(), \"must be %u\", r->hrm_index());\n+      \/\/ Candidates from marking are always old; also keep regions that are already\n+      \/\/ collection set candidates (some retained regions) in that list.\n+      if (!r->is_old() || r->is_collection_set_candidate()) {\n+        \/\/ Keep remembered sets and everything for these regions.\n+        return false;\n+      }\n+\n+      \/\/ Can not add a region without a remembered set to the candidates.\n+      assert(!r->rem_set()->is_updating(), \"must be\");\n+      if (!r->rem_set()->is_complete()) {\n+        return false;\n+      }\n+\n+      \/\/ Skip any region that is currently used as an old GC alloc region. We should\n+      \/\/ not consider those for collection before we fill them up as the effective\n+      \/\/ gain from them is small. I.e. we only actually reclaim from the filled part,\n+      \/\/ as the remainder is still eligible for allocation. These objects are also\n+      \/\/ likely to have already survived a few collections, so they might be longer\n+      \/\/ lived anyway.\n+      \/\/ Otherwise the Old region must satisfy the liveness condition.\n+      bool should_add = !G1CollectedHeap::heap()->is_old_gc_alloc_region(r) &&\n+                        G1CollectionSetChooser::region_occupancy_low_enough_for_evac(r->live_bytes());\n+      if (should_add) {\n@@ -156,4 +171,0 @@\n-      } else if (r->is_old() && !r->is_collection_set_candidate()) {\n-        \/\/ Keep remembered sets for humongous regions and collection set candidates,\n-        \/\/ otherwise clean them out.\n-        r->rem_set()->clear(true \/* only_cardset *\/);\n@@ -161,3 +172,1 @@\n-        assert(r->is_collection_set_candidate() || !r->is_old() || !r->rem_set()->is_tracked(),\n-               \"Missed to clear unused remembered set of region %u (%s) that is %s\",\n-               r->hrm_index(), r->get_type_str(), r->rem_set()->get_state_str());\n+        r->rem_set()->clear(true \/* only_cardset *\/);\n@@ -255,11 +264,0 @@\n-bool G1CollectionSetChooser::should_add(HeapRegion* hr) {\n-  return !hr->is_young() &&\n-         !hr->is_humongous() &&\n-         \/\/ A region might have been retained (after evacuation failure) and already put\n-         \/\/ into the candidates list during concurrent marking. These should keep being\n-         \/\/ considered as retained regions.\n-         !hr->is_collection_set_candidate() &&\n-         region_occupancy_low_enough_for_evac(hr->live_bytes()) &&\n-         hr->rem_set()->is_complete();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -50,5 +50,0 @@\n-  \/\/ Determine whether to add the given region to the collection set candidates from\n-  \/\/ marking or not. Currently, we skip regions whose live bytes are over the threshold.\n-  \/\/ Regions also need a complete remembered set to be a candidate.\n-  static bool should_add(HeapRegion* hr);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -439,2 +439,1 @@\n-  _num_concurrent_workers = ConcGCThreads;\n-  _max_concurrent_workers = _num_concurrent_workers;\n+  _max_concurrent_workers = ConcGCThreads;\n@@ -444,0 +443,1 @@\n+  _num_concurrent_workers = _concurrent_workers->active_workers();\n@@ -979,6 +979,3 @@\n-    _num_concurrent_workers = MIN2(calc_active_marking_workers(),\n-                                   \/\/ We distribute work on a per-region basis, so starting\n-                                   \/\/ more threads than that is useless.\n-                                   root_regions()->num_root_regions());\n-    assert(_num_concurrent_workers <= _max_concurrent_workers,\n-           \"Maximum number of marking threads exceeded\");\n+    \/\/ Assign one worker to each root-region but subject to the max constraint.\n+    const uint num_workers = MIN2(root_regions()->num_root_regions(),\n+                                  _max_concurrent_workers);\n@@ -988,2 +985,2 @@\n-                        task.name(), _num_concurrent_workers, root_regions()->num_root_regions());\n-    _concurrent_workers->run_task(&task, _num_concurrent_workers);\n+                        task.name(), num_workers, root_regions()->num_root_regions());\n+    _concurrent_workers->run_task(&task, num_workers);\n@@ -1049,3 +1046,1 @@\n-  _num_concurrent_workers = calc_active_marking_workers();\n-\n-  uint active_workers = MAX2(1U, _num_concurrent_workers);\n+  uint active_workers = calc_active_marking_workers();\n@@ -1059,0 +1054,2 @@\n+  _num_concurrent_workers = active_workers;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -91,3 +91,2 @@\n-    \/\/ has been aborted for any reason. Yielded is set if there has been an actual\n-    \/\/ yield for a pause.\n-    bool yield_if_necessary(bool& yielded) {\n+    \/\/ has been aborted for any reason.\n+    bool yield_if_necessary() {\n@@ -96,1 +95,1 @@\n-        yielded = _cm->do_yield_check();\n+        _cm->do_yield_check();\n@@ -126,2 +125,1 @@\n-        bool yielded;\n-        bool mark_aborted = yield_if_necessary(yielded);\n+        bool mark_aborted = yield_if_necessary();\n@@ -130,1 +128,1 @@\n-        } else if (yielded && !should_rebuild_or_scrub(hr)) {\n+        } else if (!should_rebuild_or_scrub(hr)) {\n@@ -132,1 +130,1 @@\n-          \/\/ have been reclaimed during the yield.\n+          \/\/ have been reclaimed during above yield\/safepoint.\n@@ -195,2 +193,1 @@\n-        bool yielded;\n-        bool mark_aborted = yield_if_necessary(yielded);\n+        bool mark_aborted = yield_if_necessary();\n@@ -199,2 +196,3 @@\n-        } else if (yielded && !should_rebuild_or_scrub(hr)) {\n-          \/\/ Region has been reclaimed while yielding. Exit continuing with the next region.\n+        } else if (!should_rebuild_or_scrub(hr)) {\n+          \/\/ We need to check should_rebuild_or_scrub() again because the region might\n+          \/\/ have been reclaimed during above yield\/safepoint.\n@@ -215,2 +213,1 @@\n-        bool yielded = true;\n-        bool mark_aborted = yield_if_necessary(yielded);\n+        bool mark_aborted = yield_if_necessary();\n@@ -219,1 +216,3 @@\n-        } else if (yielded && !should_rebuild_or_scrub(hr)) {\n+        } else if (!should_rebuild_or_scrub(hr)) {\n+          \/\/ We need to check should_rebuild_or_scrub() again because the region might\n+          \/\/ have been reclaimed during above yield\/safepoint.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    stats->inc_dirtied_cards(buffer_capacity() - queue.index());\n+    stats->inc_dirtied_cards(queue.size());\n@@ -107,0 +107,1 @@\n+    assert(old_node->index() == 0, \"invariant\");\n@@ -108,1 +109,1 @@\n-    stats->inc_dirtied_cards(buffer_capacity());\n+    stats->inc_dirtied_cards(old_node->capacity());\n@@ -126,1 +127,1 @@\n-  Atomic::add(&_num_cards, buffer_capacity() - cbn->index());\n+  Atomic::add(&_num_cards, cbn->size());\n@@ -162,1 +163,1 @@\n-  Atomic::sub(&_num_cards, buffer_capacity() - result->index());\n+  Atomic::sub(&_num_cards, result->size());\n@@ -172,1 +173,1 @@\n-    actual += buffer_capacity() - cur->index();\n+    actual += cur->size();\n@@ -288,1 +289,1 @@\n-  Atomic::add(&_num_cards, buffer_capacity() - node->index());\n+  Atomic::add(&_num_cards, node->size());\n@@ -425,1 +426,0 @@\n-                        size_t node_buffer_capacity,\n@@ -430,1 +430,1 @@\n-    _node_buffer_capacity(node_buffer_capacity),\n+    _node_buffer_capacity(node->capacity()),\n@@ -459,4 +459,1 @@\n-  G1RefineBufferedCards buffered_cards(node,\n-                                       buffer_capacity(),\n-                                       worker_id,\n-                                       stats);\n+  G1RefineBufferedCards buffered_cards(node, worker_id, stats);\n@@ -471,3 +468,2 @@\n-    assert(node->index() == buffer_capacity(),\n-           \"Buffer not fully consumed: index: \" SIZE_FORMAT \", size: \" SIZE_FORMAT,\n-           node->index(), buffer_capacity());\n+    assert(node->is_empty(), \"Buffer not fully consumed: index: %zu, size: %zu\",\n+           node->index(), node->capacity());\n@@ -476,1 +472,1 @@\n-    assert(node->index() < buffer_capacity(), \"Buffer fully consumed.\");\n+    assert(!node->is_empty(), \"Buffer fully consumed.\");\n@@ -578,2 +574,1 @@\n-  if ((queue.buffer() != nullptr) &&\n-      (queue.index() != buffer_capacity())) {\n+  if (!queue.is_empty()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  _buffers._entry_count += buffer_capacity() - node->index();\n+  _buffers._entry_count += node->size();\n@@ -133,1 +133,1 @@\n-  Atomic::add(&_entry_count, buffer_capacity() - node->index());\n+  Atomic::add(&_entry_count, node->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1267,1 +1267,0 @@\n-    size_t buffer_capacity = dcqs.buffer_capacity();\n@@ -1269,1 +1268,1 @@\n-      cl->apply_to_buffer(node, buffer_capacity, worker_id);\n+      cl->apply_to_buffer(node, worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -417,1 +417,0 @@\n-    const size_t buffer_capacity = _rdcqs->buffer_capacity();\n@@ -423,1 +422,1 @@\n-        cl.apply_to_buffer(node, buffer_capacity, worker_id);\n+        cl.apply_to_buffer(node, worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -170,2 +170,1 @@\n-    size_t _buffer_capacity;\n-    Verifier() : _buffer_capacity(G1BarrierSet::dirty_card_queue_set().buffer_capacity()) {}\n+    Verifier() {}\n@@ -174,2 +173,1 @@\n-      assert((queue.buffer() == nullptr) || (queue.index() == _buffer_capacity),\n-             \"non-empty dirty card queue for thread %s\", t->name());\n+      assert(queue.is_empty(), \"non-empty dirty card queue for thread %s\", t->name());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-          range(1, max_uintx)                                               \\\n+          constraint(G1SATBBufferSizeConstraintFunc, AtParse)               \\\n@@ -169,1 +169,1 @@\n-          range(1, NOT_LP64(32*M) LP64_ONLY(1*G))                           \\\n+          constraint(G1UpdateBufferSizeConstraintFunc, AtParse)             \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/ptrQueue.hpp\"\n@@ -183,0 +184,29 @@\n+\n+static JVMFlag::Error buffer_size_constraint_helper(JVMFlagsEnum flagid,\n+                                                    size_t value,\n+                                                    bool verbose) {\n+  if (UseG1GC) {\n+    const size_t min_size = 1;\n+    const size_t max_size = BufferNode::max_size();\n+    JVMFlag* flag = JVMFlag::flag_from_enum(flagid);\n+    if ((value < min_size) || (value > max_size)) {\n+      JVMFlag::printError(verbose,\n+                          \"%s (%zu) must be in range [%zu, %zu]\\n\",\n+                          flag->name(), value, min_size, max_size);\n+      return JVMFlag::OUT_OF_BOUNDS;\n+    }\n+  }\n+  return JVMFlag::SUCCESS;\n+}\n+\n+JVMFlag::Error G1SATBBufferSizeConstraintFunc(size_t value, bool verbose) {\n+  return buffer_size_constraint_helper(FLAG_MEMBER_ENUM(G1SATBBufferSize),\n+                                       value,\n+                                       verbose);\n+}\n+\n+JVMFlag::Error G1UpdateBufferSizeConstraintFunc(size_t value, bool verbose) {\n+  return buffer_size_constraint_helper(FLAG_MEMBER_ENUM(G1UpdateBufferSize),\n+                                       value,\n+                                       verbose);\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -46,1 +46,6 @@\n-  f(size_t, NewSizeConstraintFuncG1)\n+  f(size_t, NewSizeConstraintFuncG1)                  \\\n+                                                      \\\n+  \/* G1 PtrQueue buffer size constraints *\/           \\\n+  f(size_t, G1SATBBufferSizeConstraintFunc)           \\\n+  f(size_t, G1UpdateBufferSizeConstraintFunc)         \\\n+  \/* *\/\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -678,0 +678,7 @@\n+  if (is_array) {\n+    \/\/ Ensure the array payload size is rounded up to the next BytesPerLong\n+    \/\/ multiple when converting to double-words. This is necessary because array\n+    \/\/ size does not include object alignment padding, so it might not be a\n+    \/\/ multiple of BytesPerLong for sub-long element types.\n+    payload_size = kit->gvn().transform(new AddXNode(payload_size, kit->MakeConX(BytesPerLong - 1)));\n+  }\n@@ -679,1 +686,1 @@\n-  ArrayCopyNode* ac = ArrayCopyNode::make(kit, false, src_base, offset,  dst_base, offset, payload_size, true, false);\n+  ArrayCopyNode* ac = ArrayCopyNode::make(kit, false, src_base, offset, dst_base, offset, payload_size, true, false);\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-JVMFlag::Error MinMetaspaceFreeRatioConstraintFunc(uintx value, bool verbose) {\n+JVMFlag::Error MinMetaspaceFreeRatioConstraintFunc(uint value, bool verbose) {\n@@ -162,2 +162,2 @@\n-                        \"MinMetaspaceFreeRatio (\" UINTX_FORMAT \") must be \"\n-                        \"less than or equal to MaxMetaspaceFreeRatio (\" UINTX_FORMAT \")\\n\",\n+                        \"MinMetaspaceFreeRatio (%u) must be \"\n+                        \"less than or equal to MaxMetaspaceFreeRatio (%u)\\n\",\n@@ -171,1 +171,1 @@\n-JVMFlag::Error MaxMetaspaceFreeRatioConstraintFunc(uintx value, bool verbose) {\n+JVMFlag::Error MaxMetaspaceFreeRatioConstraintFunc(uint value, bool verbose) {\n@@ -174,2 +174,2 @@\n-                        \"MaxMetaspaceFreeRatio (\" UINTX_FORMAT \") must be \"\n-                        \"greater than or equal to MinMetaspaceFreeRatio (\" UINTX_FORMAT \")\\n\",\n+                        \"MaxMetaspaceFreeRatio (%u) must be \"\n+                        \"greater than or equal to MinMetaspaceFreeRatio (%u)\\n\",\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n- f(uintx,  MinMetaspaceFreeRatioConstraintFunc)                \\\n- f(uintx,  MaxMetaspaceFreeRatioConstraintFunc)                \\\n+ f(uint,   MinMetaspaceFreeRatioConstraintFunc)                \\\n+ f(uint,   MaxMetaspaceFreeRatioConstraintFunc)                \\\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-  _capacity_in_bytes(index_to_byte_index(qset->buffer_capacity())),\n@@ -41,1 +40,14 @@\n-BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_capacity(size) {}\n+size_t PtrQueue::current_capacity() const {\n+  if (_buf == nullptr) {\n+    return 0;\n+  } else {\n+    return BufferNode::make_node_from_buffer(_buf)->capacity();\n+  }\n+}\n+\n+BufferNode::AllocatorConfig::AllocatorConfig(size_t size)\n+  : _buffer_capacity(size)\n+{\n+  assert(size >= 1, \"Invalid buffer capacity %zu\", size);\n+  assert(size <= max_size(), \"Invalid buffer capacity %zu\", size);\n+}\n@@ -44,1 +56,1 @@\n-  size_t byte_size = _buffer_capacity * sizeof(void*);\n+  size_t byte_size = buffer_capacity() * sizeof(void*);\n@@ -56,3 +68,1 @@\n-{\n-\n-}\n+{}\n@@ -65,1 +75,2 @@\n-  return ::new (_free_list.allocate()) BufferNode();\n+  auto internal_capacity = static_cast<InternalSizeType>(buffer_capacity());\n+  return ::new (_free_list.allocate()) BufferNode(internal_capacity);\n@@ -71,0 +82,2 @@\n+  assert(node->capacity() == buffer_capacity(),\n+         \"Wrong size %zu, expected %zu\", node->capacity(), buffer_capacity());\n@@ -82,3 +95,1 @@\n-  if (queue.buffer() != nullptr) {\n-    queue.set_index(buffer_capacity());\n-  }\n+  queue.set_index(queue.current_capacity());\n@@ -94,1 +105,1 @@\n-    if (index == buffer_capacity()) {\n+    if (index == node->capacity()) {\n@@ -131,2 +142,3 @@\n-  queue.set_buffer(allocate_buffer());\n-  queue.set_index(buffer_capacity());\n+  BufferNode* node = _allocator->allocate();\n+  queue.set_buffer(BufferNode::make_buffer_from_node(node));\n+  queue.set_index(node->capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include <limits>\n@@ -53,4 +54,0 @@\n-  \/\/ Size of the current buffer, in bytes.\n-  \/\/ Value is always pointer-size aligned.\n-  size_t _capacity_in_bytes;\n-\n@@ -59,6 +56,0 @@\n-  \/\/ Get the capacity, in bytes.  The capacity must have been set.\n-  size_t capacity_in_bytes() const {\n-    assert(_capacity_in_bytes > 0, \"capacity not set\");\n-    return _capacity_in_bytes;\n-  }\n-\n@@ -95,1 +86,1 @@\n-    assert(new_index <= capacity(), \"precondition\");\n+    assert(new_index <= current_capacity(), \"precondition\");\n@@ -99,3 +90,3 @@\n-  size_t capacity() const {\n-    return byte_index_to_index(capacity_in_bytes());\n-  }\n+  \/\/ Returns the capacity of the buffer, or 0 if the queue doesn't currently\n+  \/\/ have a buffer.\n+  size_t current_capacity() const;\n@@ -103,1 +94,2 @@\n-  \/\/ To support compiler.\n+  bool is_empty() const { return index() == current_capacity(); }\n+  size_t size() const { return current_capacity() - index(); }\n@@ -106,0 +98,1 @@\n+  \/\/ To support compiler.\n@@ -122,1 +115,5 @@\n-  size_t _index;\n+  using InternalSizeType = LP64_ONLY(uint32_t) NOT_LP64(uint16_t);\n+  static_assert(sizeof(InternalSizeType) <= sizeof(size_t), \"assumption\");\n+\n+  InternalSizeType _index;\n+  InternalSizeType _capacity;\n@@ -126,2 +123,5 @@\n-  BufferNode() : _index(0), _next(nullptr) { }\n-  ~BufferNode() { }\n+  BufferNode(InternalSizeType capacity)\n+    : _index(capacity), _capacity(capacity), _next(nullptr)\n+  {}\n+\n+  ~BufferNode() = default;\n@@ -136,0 +136,4 @@\n+  static constexpr size_t max_size() {\n+    return std::numeric_limits<InternalSizeType>::max();\n+  }\n+\n@@ -142,1 +146,16 @@\n-  void set_index(size_t i)     { _index = i; }\n+\n+  void set_index(size_t i)     {\n+    assert(i <= capacity(), \"precondition\");\n+    _index = static_cast<InternalSizeType>(i);\n+  }\n+\n+  size_t capacity() const      { return _capacity; }\n+\n+  bool is_empty() const { return index() == capacity(); }\n+  size_t size() const { return capacity() - index(); }\n+\n+  \/\/ Return the BufferNode containing the buffer, WITHOUT setting its index.\n+  static BufferNode* make_node_from_buffer(void** buffer) {\n+    char* base = reinterpret_cast<char*>(buffer) - buffer_offset();\n+    return reinterpret_cast<BufferNode*>(base);\n+  }\n@@ -146,3 +165,1 @@\n-    BufferNode* node =\n-      reinterpret_cast<BufferNode*>(\n-        reinterpret_cast<char*>(buffer) - buffer_offset());\n+    BufferNode* node = make_node_from_buffer(buffer);\n@@ -169,0 +186,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":40,"deletions":22,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  print_satb_buffer(name, _buf, index(), capacity());\n+  print_satb_buffer(name, _buf, index(), current_capacity());\n@@ -196,4 +196,4 @@\n-      if (queue.buffer() != nullptr) {\n-        assert(!_active || queue.index() == _qset->buffer_capacity(),\n-               \"queues should be empty when activated\");\n-        queue.set_index(_qset->buffer_capacity());\n+      if (_active) {\n+        assert(queue.is_empty(), \"queues should be empty when activated\");\n+      } else {\n+        queue.set_index(queue.current_capacity());\n@@ -211,4 +211,1 @@\n-    size_t index = nd->index();\n-    size_t size = buffer_capacity();\n-    assert(index <= size, \"invariant\");\n-    cl->do_buffer(buf + index, size - index);\n+    cl->do_buffer(buf + nd->index(), nd->size());\n@@ -253,0 +250,1 @@\n+  assert(queue.buffer() != nullptr, \"precondition\");\n@@ -258,1 +256,1 @@\n-  assert(threshold <= buffer_capacity(),\n+  assert(threshold <= queue.current_capacity(),\n@@ -260,1 +258,1 @@\n-         threshold, buffer_capacity());\n+         threshold, queue.current_capacity());\n@@ -313,1 +311,1 @@\n-    print_satb_buffer(buffer, buf, nd->index(), buffer_capacity());\n+    print_satb_buffer(buffer, buf, nd->index(), nd->capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-    \/\/ nothing to do\n+    \/\/ Nothing to do, and avoid pointer arithmetic on nullptr below.\n@@ -183,2 +183,2 @@\n-  void** src = &buf[queue.index()];\n-  void** dst = &buf[buffer_capacity()];\n+  void** src = buf + queue.index();\n+  void** dst = buf + queue.current_capacity();\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/gc\/x\/xPage.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  ZRootStatTimer timer(ZSubPhaseConcurrentWeakRootsOopStorageSet, _generation);\n+  ZRootStatTimer timer(ZSubPhaseConcurrentRootsOopStorageSet, _generation);\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -1336,1 +1337,1 @@\n-                          SignatureHandlerLibrary::buffer_size - align_offset);\n+                          checked_cast<int>(SignatureHandlerLibrary::buffer_size - align_offset));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -53,1 +54,1 @@\n-  int max_aligned_bytes = max_aligned_codelets * (HeapWordSize + CodeEntryAlignment);\n+  int max_aligned_bytes = checked_cast<int>(max_aligned_codelets * (HeapWordSize + CodeEntryAlignment));\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -949,0 +949,7 @@\n+  <Event name=\"NativeLibraryUnload\" category=\"Java Virtual Machine, Runtime\" label=\"Native Library Unload\" thread=\"false\" stackTrace=\"true\" startTime=\"true\"\n+    description=\"Information about a dynamic library or other native image unload operation\">\n+    <Field type=\"string\" name=\"name\" label=\"Name\" \/>\n+    <Field type=\"boolean\" name=\"success\" label=\"Success\" description=\"Success or failure of the unload operation\" \/>\n+    <Field type=\"string\" name=\"errorMessage\" label=\"Error Message\" description=\"In case of an unload error, error description\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -106,0 +106,3 @@\n+  virtual bool is_hidden_from_external_view() const { return UseJVMCINativeLibrary && LibJVMCICompilerThreadHidden; }\n+\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -620,4 +620,1 @@\n-    resolved_klass = SystemDictionary::resolve_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n-    if (resolved_klass == nullptr) {\n-      JVMCI_THROW_MSG_NULL(NoClassDefFoundError, str);\n-    }\n+    resolved_klass = SystemDictionary::resolve_or_fail(class_name, class_loader, protection_domain, true, CHECK_NULL);\n@@ -909,1 +906,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))\n+C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which))\n@@ -911,1 +908,1 @@\n-  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, index);\n+  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, which);\n@@ -1623,0 +1620,8 @@\n+C2V_VMENTRY_0(int, decodeFieldIndexToCPIndex, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint field_index))\n+  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));\n+  if (field_index < 0 || field_index >= cp->resolved_field_entries_length()) {\n+    JVMCI_THROW_MSG_0(IllegalStateException, err_msg(\"invalid field index %d\", field_index));\n+  }\n+  return cp->resolved_field_entry_at(field_index)->constant_pool_index();\n+C2V_END\n+\n@@ -3146,0 +3151,1 @@\n+  {CC \"decodeFieldIndexToCPIndex\",                    CC \"(\" HS_CONSTANT_POOL2 \"I)I\",                                                       FN_PTR(decodeFieldIndexToCPIndex)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#ifdef COMPILER1\n@@ -26,0 +27,1 @@\n+#endif\n@@ -46,0 +48,1 @@\n+#ifdef COMPILER2\n@@ -47,0 +50,1 @@\n+#endif\n@@ -228,0 +232,16 @@\n+static jboolean is_c1_supported(vmIntrinsics::ID id){\n+    jboolean supported = false;\n+#ifdef COMPILER1\n+    supported = (jboolean) Compiler::is_intrinsic_supported(id);\n+#endif\n+    return supported;\n+}\n+\n+static jboolean is_c2_supported(vmIntrinsics::ID id){\n+    jboolean supported = false;\n+#ifdef COMPILER2\n+    supported = (jboolean) C2Compiler::is_intrinsic_supported(id);\n+#endif\n+    return supported;\n+}\n+\n@@ -246,2 +266,2 @@\n-                                    (jboolean) Compiler::is_intrinsic_supported(vmIntrinsics::id),                       \\\n-                                    (jboolean) C2Compiler::is_intrinsic_supported(vmIntrinsics::id), JVMCI_CHECK_NULL);  \\\n+                                    is_c1_supported(vmIntrinsics::id),                       \\\n+                                    is_c2_supported(vmIntrinsics::id), JVMCI_CHECK_NULL);    \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -76,4 +76,5 @@\n-  CHECK_NOT_SET(BootstrapJVMCI,   UseJVMCICompiler)\n-  CHECK_NOT_SET(PrintBootstrap,   UseJVMCICompiler)\n-  CHECK_NOT_SET(JVMCIThreads,     UseJVMCICompiler)\n-  CHECK_NOT_SET(JVMCIHostThreads, UseJVMCICompiler)\n+  CHECK_NOT_SET(BootstrapJVMCI,               UseJVMCICompiler)\n+  CHECK_NOT_SET(PrintBootstrap,               UseJVMCICompiler)\n+  CHECK_NOT_SET(JVMCIThreads,                 UseJVMCICompiler)\n+  CHECK_NOT_SET(JVMCIHostThreads,             UseJVMCICompiler)\n+  CHECK_NOT_SET(LibJVMCICompilerThreadHidden, UseJVMCICompiler)\n@@ -132,0 +133,3 @@\n+  JVMCI_FLAG_CHECKED(EnableVectorAggressiveReboxing)\n+  JVMCI_FLAG_CHECKED(EnableVectorReboxing)\n+  JVMCI_FLAG_CHECKED(EnableVectorSupport)\n@@ -139,0 +143,1 @@\n+  JVMCI_FLAG_CHECKED(UseVectorStubs)\n@@ -188,0 +193,1 @@\n+    \"LibJVMCICompilerThreadHidden\",\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -160,0 +160,5 @@\n+  product(bool, LibJVMCICompilerThreadHidden, true, EXPERIMENTAL,           \\\n+          \"If true then native JVMCI compiler threads are hidden from \"     \\\n+          \"JVMTI and FlightRecorder.  This must be set to false if you \"    \\\n+          \"wish to use a Java debugger against JVMCI threads.\")             \\\n+                                                                            \\\n@@ -173,1 +178,13 @@\n-          \"Enables intrinsification of BigInteger.montgomerySquare()\"))\n+          \"Enables intrinsification of BigInteger.montgomerySquare()\"))     \\\n+                                                                            \\\n+  NOT_COMPILER2(product(bool, EnableVectorSupport, false, EXPERIMENTAL,     \\\n+          \"Enables VectorSupport intrinsics\"))                              \\\n+                                                                            \\\n+  NOT_COMPILER2(product(bool, EnableVectorReboxing, false, EXPERIMENTAL,    \\\n+          \"Enables reboxing of vectors\"))                                   \\\n+                                                                            \\\n+  NOT_COMPILER2(product(bool, EnableVectorAggressiveReboxing, false, EXPERIMENTAL, \\\n+          \"Enables aggressive reboxing of vectors\"))                        \\\n+                                                                            \\\n+  NOT_COMPILER2(product(bool, UseVectorStubs, false, EXPERIMENTAL,          \\\n+          \"Use stubs for vector transcendental operations\"))                \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-static int tag_cmp(const void *a, const void *b) {\n-  return static_cast<const LogTagType*>(a) - static_cast<const LogTagType*>(b);\n+static int tag_cmp(const LogTagType *a, const LogTagType *b) {\n+  return primitive_compare(a, b);\n@@ -77,1 +77,1 @@\n-  qsort(tags, ntags, sizeof(*tags), tag_cmp);\n+  qsort(tags, ntags, sizeof(*tags), (_sort_Fn)tag_cmp);\n","filename":"src\/hotspot\/share\/logging\/logOutput.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  return 2.0 * intersecting \/ (_ntags + other._ntags);\n+  return 2.0 * (double)intersecting \/ (double)(_ntags + other._ntags);\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-  const size_t used_after_gc = MetaspaceUtils::committed_bytes();\n+  const double used_after_gc = (double)MetaspaceUtils::committed_bytes();\n@@ -467,4 +467,4 @@\n-                               minimum_desired_capacity \/ (double) K,\n-                               expand_bytes \/ (double) K,\n-                               MinMetaspaceExpansion \/ (double) K,\n-                               new_capacity_until_GC \/ (double) K);\n+                               (double) minimum_desired_capacity \/ (double) K,\n+                               (double) expand_bytes \/ (double) K,\n+                               (double) MinMetaspaceExpansion \/ (double) K,\n+                               (double) new_capacity_until_GC \/ (double) K);\n@@ -493,1 +493,1 @@\n-                             minimum_desired_capacity \/ (double) K, maximum_desired_capacity \/ (double) K);\n+                             (double) minimum_desired_capacity \/ (double) K, (double) maximum_desired_capacity \/ (double) K);\n@@ -520,1 +520,1 @@\n-                               MetaspaceSize \/ (double) K, maximum_desired_capacity \/ (double) K);\n+                               (double) MetaspaceSize \/ (double) K, (double) maximum_desired_capacity \/ (double) K);\n@@ -522,1 +522,1 @@\n-                               shrink_bytes \/ (double) K, current_shrink_factor, _shrink_factor, MinMetaspaceExpansion \/ (double) K);\n+                               (double) shrink_bytes \/ (double) K, current_shrink_factor, _shrink_factor, (double) MinMetaspaceExpansion \/ (double) K);\n@@ -711,1 +711,1 @@\n-    size_t max_ccs_size = MaxMetaspaceSize * 0.8;\n+    size_t max_ccs_size = 8 * (MaxMetaspaceSize \/ 10);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2023 Red Hat, Inc. All rights reserved.\n@@ -41,4 +42,1 @@\n-\/\/ Memory blocks are kept in linked lists. Each list\n-\/\/ contains blocks of only one size. There is a list for blocks of two words,\n-\/\/ for blocks of three words, etc. The list heads are kept in a vector,\n-\/\/ ordered by block size.\n+\/\/ Memory blocks are kept in a vector of linked lists of equi-sized blocks:\n@@ -46,1 +44,0 @@\n-\n@@ -76,1 +73,1 @@\n-template <size_t smallest_word_size, int num_lists>\n+template <int num_lists>\n@@ -81,5 +78,1 @@\n-    const size_t _word_size;\n-    Block(Block* next, size_t word_size) :\n-      _next(next),\n-      _word_size(word_size)\n-    {}\n+    Block(Block* next) : _next(next) {}\n@@ -88,2 +81,2 @@\n-#define BLOCK_FORMAT          \"Block @\" PTR_FORMAT \": size: \" SIZE_FORMAT \", next: \" PTR_FORMAT\n-#define BLOCK_FORMAT_ARGS(b)  p2i(b), (b)->_word_size, p2i((b)->_next)\n+#define BLOCK_FORMAT              \"Block @\" PTR_FORMAT \": size: \" SIZE_FORMAT \", next: \" PTR_FORMAT\n+#define BLOCK_FORMAT_ARGS(b, sz)  p2i(b), (sz), p2i((b)->_next)\n@@ -91,2 +84,2 @@\n-  \/\/ Smallest block size must be large enough to hold a Block structure.\n-  STATIC_ASSERT(smallest_word_size * sizeof(MetaWord) >= sizeof(Block));\n+  \/\/ Block size must be exactly one word size.\n+  STATIC_ASSERT(sizeof(Block) == BytesPerWord);\n@@ -98,1 +91,1 @@\n-  const static size_t MinWordSize = smallest_word_size;\n+  const static size_t MinWordSize = 1;\n@@ -101,1 +94,1 @@\n-  const static size_t MaxWordSize = MinWordSize + num_lists - 1;\n+  const static size_t MaxWordSize = num_lists;\n@@ -109,0 +102,1 @@\n+  \/\/ Given a word size, returns the index of the list holding blocks of that size\n@@ -115,0 +109,1 @@\n+  \/\/ Given an index of a list, return the word size that list serves\n@@ -117,1 +112,1 @@\n-    return MinWordSize + index;\n+    return index + MinWordSize;\n@@ -130,0 +125,13 @@\n+#ifdef ASSERT\n+  static const uintptr_t canary = 0xFFEEFFEE;\n+  static void write_canary(MetaWord* p, size_t word_size) {\n+    if (word_size > 1) { \/\/ 1-word-sized blocks have no space for a canary\n+      ((uintptr_t*)p)[word_size - 1] = canary;\n+    }\n+  }\n+  static bool check_canary(const Block* b, size_t word_size) {\n+    return word_size == 1 || \/\/ 1-word-sized blocks have no space for a canary\n+           ((const uintptr_t*)b)[word_size - 1] == canary;\n+  }\n+#endif\n+\n@@ -141,0 +149,1 @@\n+    DEBUG_ONLY(write_canary(p, word_size);)\n@@ -143,1 +152,1 @@\n-    Block* new_head = new(p)Block(old_head, word_size);\n+    Block* new_head = new (p) Block(old_head);\n@@ -159,3 +168,2 @@\n-      assert(b->_word_size >= word_size &&\n-             b->_word_size == real_word_size,\n-             \"bad block size in list[%d] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b));\n+      assert(check_canary(b, real_word_size),\n+             \"bad block in list[%d] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b, real_word_size));\n@@ -184,1 +192,1 @@\n-      const size_t s = MinWordSize + i;\n+      const size_t s = word_size_for_index(i);\n@@ -187,3 +195,1 @@\n-        assert(b->_word_size == s,\n-               \"bad block size in list[%d] at pos %d (\" BLOCK_FORMAT \")\",\n-               i, pos, BLOCK_FORMAT_ARGS(b));\n+        assert(check_canary(b, s), \"\");\n@@ -199,1 +205,1 @@\n-typedef BinListImpl<2, 32> BinList32;\n+typedef BinListImpl<32> BinList32;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-\/\/  imposes a minimum size to the managed memory blocks.\n-\/\/  See get_raw_word_size_for_requested_word_size() (msCommon.hpp).\n+\/\/  imposes a minimum size to the managed memory blocks (1 word)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  assert(word_size >= MinWordSize, \"sanity (\" SIZE_FORMAT \")\", word_size);\n@@ -43,2 +42,0 @@\n-  assert(requested_word_size >= MinWordSize,\n-      \"requested_word_size too small (\" SIZE_FORMAT \")\", requested_word_size);\n@@ -56,1 +53,1 @@\n-    if (waste > MinWordSize) {\n+    if (waste >= MinWordSize) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeBlocks.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  if (remaining_words > FreeBlocks::MinWordSize) {\n+  if (remaining_words >= FreeBlocks::MinWordSize) {\n@@ -104,0 +104,4 @@\n+  assert(p != nullptr, \"p is null\");\n+  assert_is_aligned_metaspace_pointer(p);\n+  assert(word_size > 0, \"zero sized\");\n+\n@@ -134,1 +138,1 @@\n-    SOMETIMES(verify_allocation_guards();)\n+    verify_allocation_guards();\n@@ -227,1 +231,1 @@\n-  const size_t raw_word_size = get_raw_word_size_for_requested_word_size(requested_word_size);\n+  const size_t aligned_word_size = get_raw_word_size_for_requested_word_size(requested_word_size);\n@@ -231,1 +235,1 @@\n-    p = _fbl->remove_block(raw_word_size);\n+    p = _fbl->remove_block(aligned_word_size);\n@@ -234,2 +238,3 @@\n-      UL2(trace, \"taken from fbl (now: %d, \" SIZE_FORMAT \").\",\n-          _fbl->count(), _fbl->total_size());\n+      UL2(trace, \"returning \" PTR_FORMAT \" - taken from fbl (now: %d, \" SIZE_FORMAT \").\",\n+          p2i(p), _fbl->count(), _fbl->total_size());\n+      assert_is_aligned_metaspace_pointer(p);\n@@ -244,1 +249,1 @@\n-  p = allocate_inner(requested_word_size);\n+  p = allocate_inner(aligned_word_size);\n@@ -267,1 +272,1 @@\n-MetaWord* MetaspaceArena::allocate_inner(size_t requested_word_size) {\n+MetaWord* MetaspaceArena::allocate_inner(size_t word_size) {\n@@ -270,0 +275,1 @@\n+  assert_is_aligned(word_size, metaspace::AllocationAlignmentWordSize);\n@@ -271,1 +277,0 @@\n-  const size_t raw_word_size = get_raw_word_size_for_requested_word_size(requested_word_size);\n@@ -282,2 +287,2 @@\n-    if (current_chunk()->free_words() < raw_word_size) {\n-      if (!attempt_enlarge_current_chunk(raw_word_size)) {\n+    if (current_chunk()->free_words() < word_size) {\n+      if (!attempt_enlarge_current_chunk(word_size)) {\n@@ -295,2 +300,2 @@\n-      if (!current_chunk()->ensure_committed_additional(raw_word_size)) {\n-        UL2(info, \"commit failure (requested size: \" SIZE_FORMAT \")\", raw_word_size);\n+      if (!current_chunk()->ensure_committed_additional(word_size)) {\n+        UL2(info, \"commit failure (requested size: \" SIZE_FORMAT \")\", word_size);\n@@ -303,1 +308,1 @@\n-      p = current_chunk()->allocate(raw_word_size);\n+      p = current_chunk()->allocate(word_size);\n@@ -313,1 +318,1 @@\n-    Metachunk* new_chunk = allocate_new_chunk(raw_word_size);\n+    Metachunk* new_chunk = allocate_new_chunk(word_size);\n@@ -316,1 +321,1 @@\n-          METACHUNK_FORMAT_ARGS(new_chunk), requested_word_size);\n+          METACHUNK_FORMAT_ARGS(new_chunk), word_size);\n@@ -318,1 +323,1 @@\n-      assert(new_chunk->free_below_committed_words() >= raw_word_size, \"Sanity\");\n+      assert(new_chunk->free_below_committed_words() >= word_size, \"Sanity\");\n@@ -329,1 +334,1 @@\n-      p = current_chunk()->allocate(raw_word_size);\n+      p = current_chunk()->allocate(word_size);\n@@ -332,1 +337,1 @@\n-      UL2(info, \"failed to allocate new chunk for requested word size \" SIZE_FORMAT \".\", requested_word_size);\n+      UL2(info, \"failed to allocate new chunk for requested word size \" SIZE_FORMAT \".\", word_size);\n@@ -340,1 +345,1 @@\n-    _total_used_words_counter->increment_by(raw_word_size);\n+    _total_used_words_counter->increment_by(word_size);\n@@ -352,0 +357,3 @@\n+\n+  assert_is_aligned_metaspace_pointer(p);\n+\n@@ -368,0 +376,5 @@\n+  \/\/ Only blocks that had been allocated via MetaspaceArena::allocate(size) must be handed in\n+  \/\/ to MetaspaceArena::deallocate(), and only with the same size that had been original used for allocation.\n+  \/\/ Therefore the pointer must be aligned correctly, and size can be alignment-adjusted (the latter\n+  \/\/ only matters on 32-bit):\n+  assert_is_aligned_metaspace_pointer(p);\n@@ -369,0 +382,1 @@\n+\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":34,"deletions":20,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+    NOT_LP64(uintx _dummy;)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-      float display_value = (float) byte_size \/ scale;\n+      float display_value = (float) byte_size \/ (float)scale;\n@@ -121,1 +121,1 @@\n-      float display_value = (float) byte_size \/ scale;\n+      float display_value = (float) byte_size \/ (float)scale;\n@@ -145,1 +145,1 @@\n-    float p = ((float)part \/ total) * 100.0f;\n+    float p = ((float)part \/ (float)total) * 100.0f;\n@@ -171,18 +171,0 @@\n-\/\/ Given a net allocation word size, return the raw word size we actually allocate.\n-\/\/ Note: externally visible for gtests.\n-\/\/static\n-size_t get_raw_word_size_for_requested_word_size(size_t word_size) {\n-  size_t byte_size = word_size * BytesPerWord;\n-\n-  \/\/ Deallocated metablocks are kept in a binlist which limits their minimal\n-  \/\/  size to at least the size of a binlist item (2 words).\n-  byte_size = MAX2(byte_size, FreeBlocks::MinWordSize * BytesPerWord);\n-\n-  \/\/ Metaspace allocations are aligned to word size.\n-  byte_size = align_up(byte_size, AllocationAlignmentByteSize);\n-\n-  size_t raw_word_size = byte_size \/ BytesPerWord;\n-  assert(raw_word_size * BytesPerWord == byte_size, \"Sanity\");\n-  return raw_word_size;\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.cpp","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -41,2 +41,3 @@\n-\/\/ 1) Metaspace allocations have to be aligned such that 64bit values are aligned\n-\/\/  correctly.\n+\/\/ Metaspace allocations have to be aligned such that 64-bit values are aligned\n+\/\/  correctly. We currently don't hold members with a larger alignment requirement\n+\/\/  than 64-bit inside MetaData, so 8-byte alignment is enough.\n@@ -44,1 +45,2 @@\n-\/\/ 2) Klass* structures allocated from Metaspace have to be aligned to KlassAlignmentInBytes.\n+\/\/ Klass* structures need to be aligned to KlassAlignmentInBytes, but since that is\n+\/\/ 64-bit, we don't need special handling for allocating Klass*.\n@@ -46,5 +48,1 @@\n-\/\/ At the moment LogKlassAlignmentInBytes is 3, so KlassAlignmentInBytes == 8,\n-\/\/  so (1) and (2) can both be fulfilled with an alignment of 8. Should we increase\n-\/\/  KlassAlignmentInBytes at any time this will increase the necessary alignment as well. In\n-\/\/  that case we may think about introducing a separate alignment just for the class space\n-\/\/  since that alignment would only be needed for Klass structures.\n+\/\/ On 64-bit platforms, we align to word size; on 32-bit, we align to two words.\n@@ -57,2 +55,7 @@\n-\/\/ Returns the raw word size allocated for a given net allocation\n-size_t get_raw_word_size_for_requested_word_size(size_t word_size);\n+\/\/ Returns the raw word size allocated for a given net allocation. This only matters on 32-bit, where\n+\/\/ allocations have to be 64-bit aligned too and therefore must be 2-word-aligned.\n+inline size_t get_raw_word_size_for_requested_word_size(size_t word_size) {\n+  LP64_ONLY(STATIC_ASSERT(AllocationAlignmentWordSize == 1)); \/\/ rewrite if this does not hold true anymore\n+  return LP64_ONLY(word_size) \/\/ no-op on 64-bit\n+         NOT_LP64(align_up(word_size, AllocationAlignmentWordSize));\n+}\n@@ -84,0 +87,2 @@\n+#define assert_is_aligned_metaspace_pointer(p) \\\n+  assert_is_aligned((p), metaspace::AllocationAlignmentByteSize);\n@@ -86,0 +91,1 @@\n+#define assert_is_aligned_metaspace_pointer(pointer)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.hpp","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1781,1 +1781,0 @@\n-    \/\/ _sort_Fn is defined in growableArray.hpp.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-  int print_len = MIN2((intx) oa->length(), MaxElementPrintSize);\n+  int print_len = MIN2(oa->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-  int print_len = MIN2((intx) ta->length(), MaxElementPrintSize);\n+  int print_len = MIN2(ta->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -505,1 +505,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaD)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaD)) return false;\n@@ -508,1 +508,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaF)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaF)) return false;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+#include \"logging\/log.hpp\"\n+#include \"logging\/logLevel.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logStream.hpp\"\n@@ -49,1 +53,9 @@\n-void trace_type_profile(Compile* C, ciMethod *method, int depth, int bci, ciMethod *prof_method, ciKlass *prof_klass, int site_count, int receiver_count) {\n+void print_trace_type_profile(outputStream* out, int depth, ciKlass* prof_klass, int site_count, int receiver_count) {\n+  CompileTask::print_inline_indent(depth, out);\n+  out->print(\" \\\\-> TypeProfile (%d\/%d counts) = \", receiver_count, site_count);\n+  prof_klass->name()->print_symbol_on(out);\n+  out->cr();\n+}\n+\n+void trace_type_profile(Compile* C, ciMethod* method, int depth, int bci, ciMethod* prof_method,\n+                        ciKlass* prof_klass, int site_count, int receiver_count) {\n@@ -61,6 +73,7 @@\n-    CompileTask::print_inline_indent(depth, out);\n-    out->print(\" \\\\-> TypeProfile (%d\/%d counts) = \", receiver_count, site_count);\n-    stringStream ss;\n-    prof_klass->name()->print_symbol_on(&ss);\n-    out->print(\"%s\", ss.freeze());\n-    out->cr();\n+    print_trace_type_profile(out, depth, prof_klass, site_count, receiver_count);\n+  }\n+\n+  LogTarget(Debug, jit, inlining) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    print_trace_type_profile(&ls, depth, prof_klass, site_count, receiver_count);\n@@ -987,0 +1000,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n@@ -1018,0 +1033,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -3731,1 +3731,4 @@\n-\/\/ See comments on new_instance for the meaning of the other arguments.\n+\/\/ The optional arguments are for specialized use by intrinsics:\n+\/\/  - If 'return_size_val', report the non-padded array size (sum of header size\n+\/\/    and array body) to the caller.\n+\/\/  - deoptimize_on_exception controls how Java exceptions are handled (rethrow vs deoptimize)\n@@ -3782,1 +3785,0 @@\n-  int   header_size_min  = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n@@ -3787,1 +3789,0 @@\n-    BasicType etype  = Klass::layout_helper_element_type(layout_con);\n@@ -3791,0 +3792,1 @@\n+    int header_size_min = arrayOopDesc::base_offset_in_bytes(T_BYTE);\n@@ -3792,2 +3794,1 @@\n-    header_size_min = hsize;\n-    header_size = intcon(hsize + round_mask);\n+    header_size = intcon(hsize);\n@@ -3797,4 +3798,2 @@\n-    Node* hsize = _gvn.transform( new URShiftINode(layout_val, hss) );\n-    hsize       = _gvn.transform( new AndINode(hsize, hsm) );\n-    Node* mask  = intcon(round_mask);\n-    header_size = _gvn.transform( new AddINode(hsize, mask) );\n+    header_size = _gvn.transform(new URShiftINode(layout_val, hss));\n+    header_size = _gvn.transform(new AndINode(header_size, hsm));\n@@ -3852,4 +3851,4 @@\n-  \/\/ Combine header size (plus rounding) and body size.  Then round down.\n-  \/\/ This computation cannot overflow, because it is used only in two\n-  \/\/ places, one where the length is sharply limited, and the other\n-  \/\/ after a successful allocation.\n+  \/\/ Combine header size and body size for the array copy part, then align (if\n+  \/\/ necessary) for the allocation part. This computation cannot overflow,\n+  \/\/ because it is used only in two places, one where the length is sharply\n+  \/\/ limited, and the other after a successful allocation.\n@@ -3857,6 +3856,2 @@\n-  if (elem_shift != nullptr)\n-    abody     = _gvn.transform( new LShiftXNode(lengthx, elem_shift) );\n-  Node* size  = _gvn.transform( new AddXNode(headerx, abody) );\n-  if (round_mask != 0) {\n-    Node* mask = MakeConX(~round_mask);\n-    size       = _gvn.transform( new AndXNode(size, mask) );\n+  if (elem_shift != nullptr) {\n+    abody = _gvn.transform(new LShiftXNode(lengthx, elem_shift));\n@@ -3864,1 +3859,1 @@\n-  \/\/ else if round_mask == 0, the size computation is self-rounding\n+  Node* non_rounded_size = _gvn.transform(new AddXNode(headerx, abody));\n@@ -3868,1 +3863,1 @@\n-    (*return_size_val) = size;\n+    (*return_size_val) = non_rounded_size;\n@@ -3871,0 +3866,9 @@\n+  Node* size = non_rounded_size;\n+  if (round_mask != 0) {\n+    Node* mask1 = MakeConX(round_mask);\n+    size = _gvn.transform(new AddXNode(size, mask1));\n+    Node* mask2 = MakeConX(~round_mask);\n+    size = _gvn.transform(new AndXNode(size, mask2));\n+  }\n+  \/\/ else if round_mask == 0, the size computation is self-rounding\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5024,2 +5024,2 @@\n-      Node* obj_size  = nullptr;\n-      Node* alloc_obj = new_array(obj_klass, obj_length, 0, &obj_size, \/*deoptimize_on_exception=*\/true);\n+      Node* array_size = nullptr; \/\/ Size of the array without object alignment padding.\n+      Node* alloc_obj = new_array(obj_klass, obj_length, 0, &array_size, \/*deoptimize_on_exception=*\/true);\n@@ -5058,1 +5058,1 @@\n-        copy_to_clone(obj, alloc_obj, obj_size, true);\n+        copy_to_clone(obj, alloc_obj, array_size, true);\n@@ -5098,1 +5098,1 @@\n-      Node* obj_size  = nullptr;\n+      Node* obj_size = nullptr; \/\/ Total object size, including object alignment padding.\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2082,0 +2082,1 @@\n+  const Node* parse_predicate_uncommon_trap = predicate_block->parse_predicate()->uncommon_trap();\n@@ -2085,0 +2086,5 @@\n+    ProjNode* uncommon_proj = iff->proj_out(1 - next_regular_predicate_proj->as_Proj()->_con);\n+    if (uncommon_proj->unique_ctrl_out() != parse_predicate_uncommon_trap) {\n+      \/\/ Does not belong to this Predicate Block anymore.\n+      break;\n+    }\n@@ -2087,1 +2093,0 @@\n-      ProjNode* uncommon_proj = iff->proj_out(1 - next_regular_predicate_proj->as_Proj()->_con);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1645,1 +1645,1 @@\n-            if (u->is_ConstraintCast() && u->bottom_type()->higher_equal(_igvn.type(n)) && u->in(0) == x_ctrl) {\n+            if (u->is_ConstraintCast() && _igvn.type(n)->higher_equal(u->bottom_type()) && u->in(0) == x_ctrl) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1714,0 +1714,14 @@\n+\/\/=============================================================================\n+\/\/------------------------------Ideal------------------------------------------\n+Node* FmaNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  \/\/ We canonicalize the node by converting \"(-a)*b+c\" into \"b*(-a)+c\"\n+  \/\/ This reduces the number of rules in the matcher, as we only need to check\n+  \/\/ for negations on the second argument, and not the symmetric case where\n+  \/\/ the first argument is negated.\n+  if (in(1)->is_Neg() && !in(2)->is_Neg()) {\n+    swap_edges(1, 2);\n+    return this;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -360,0 +360,10 @@\n+\/\/------------------------------FmaNode--------------------------------------\n+\/\/ fused-multiply-add\n+class FmaNode : public Node {\n+public:\n+  FmaNode(Node* c, Node* in1, Node* in2, Node* in3) : Node(c, in1, in2, in3) {\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+  }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+};\n+\n@@ -362,1 +372,1 @@\n-class FmaDNode : public Node {\n+class FmaDNode : public FmaNode {\n@@ -364,1 +374,1 @@\n-  FmaDNode(Node *c, Node *in1, Node *in2, Node *in3) : Node(c, in1, in2, in3) {}\n+  FmaDNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n@@ -366,1 +376,1 @@\n-  const Type *bottom_type() const { return Type::DOUBLE; }\n+  const Type* bottom_type() const { return Type::DOUBLE; }\n@@ -373,1 +383,1 @@\n-class FmaFNode : public Node {\n+class FmaFNode : public FmaNode {\n@@ -375,1 +385,1 @@\n-  FmaFNode(Node *c, Node *in1, Node *in2, Node *in3) : Node(c, in1, in2, in3) {}\n+  FmaFNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n@@ -377,1 +387,1 @@\n-  const Type *bottom_type() const { return Type::FLOAT; }\n+  const Type* bottom_type() const { return Type::FLOAT; }\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -132,0 +132,2 @@\n+class NegNode;\n+class NegVNode;\n@@ -728,0 +730,1 @@\n+        DEFINE_CLASS_ID(NegV, Vector, 8)\n@@ -783,0 +786,1 @@\n+    DEFINE_CLASS_ID(Neg,      Node, 19)\n@@ -784,1 +788,1 @@\n-    _max_classes  = ClassMask_LShift\n+    _max_classes  = ClassMask_Neg\n@@ -944,0 +948,2 @@\n+  DEFINE_CLASS_QUERY(Neg)\n+  DEFINE_CLASS_QUERY(NegV)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -433,1 +433,3 @@\n-  NegNode( Node *in1 ) : Node(0,in1) {}\n+  NegNode(Node* in1) : Node(0, in1) {\n+    init_class_id(Class_Neg);\n+  }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1273,0 +1273,1 @@\n+  if (s1->is_Bool() && s1->as_Bool()->_test._test != s2->as_Bool()->_test._test) return false;\n@@ -2659,0 +2660,8 @@\n+#ifdef ASSERT\n+        for (uint j = 0; j < p_bol->size(); j++) {\n+          Node* m = p_bol->at(j);\n+          assert(m->as_Bool()->_test._test == bol_test,\n+                 \"all bool nodes must have same test\");\n+        }\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1879,0 +1879,15 @@\n+Node* FmaVNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  \/\/ We canonicalize the node by converting \"(-a)*b+c\" into \"b*(-a)+c\"\n+  \/\/ This reduces the number of rules in the matcher, as we only need to check\n+  \/\/ for negations on the second argument, and not the symmetric case where\n+  \/\/ the first argument is negated.\n+  \/\/ We cannot do this if the FmaV is masked, since the inactive lanes have to return\n+  \/\/ the first input (i.e. \"-a\"). If we were to swap the inputs, the inactive lanes would\n+  \/\/ incorrectly return \"b\".\n+  if (!is_predicated_vector() && in(1)->is_NegV() && !in(2)->is_NegV()) {\n+    swap_edges(1, 2);\n+    return this;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -379,0 +379,10 @@\n+\/\/------------------------------FmaVNode--------------------------------------\n+\/\/ Vector fused-multiply-add\n+class FmaVNode : public VectorNode {\n+public:\n+  FmaVNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+  }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+};\n+\n@@ -380,2 +390,2 @@\n-\/\/ Vector multiply double\n-class FmaVDNode : public VectorNode {\n+\/\/ Vector fused-multiply-add double\n+class FmaVDNode : public FmaVNode {\n@@ -383,1 +393,1 @@\n-  FmaVDNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {}\n+  FmaVDNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : FmaVNode(in1, in2, in3, vt) {}\n@@ -388,2 +398,2 @@\n-\/\/ Vector multiply float\n-class FmaVFNode : public VectorNode {\n+\/\/ Vector fused-multiply-add float\n+class FmaVFNode : public FmaVNode {\n@@ -391,1 +401,1 @@\n-  FmaVFNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {}\n+  FmaVFNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : FmaVNode(in1, in2, in3, vt) {}\n@@ -511,1 +521,3 @@\n-  NegVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {}\n+  NegVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+    init_class_id(Class_NegV);\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -132,2 +132,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -144,0 +142,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/vmstorage.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1615,1 +1615,1 @@\n-  print_on(st, min_index, max_index, v0, v1, true \/* on_heap *\/);\n+  print_on(st, min_index, max_index, v0, v1);\n@@ -1618,1 +1618,1 @@\n-void FrameValues::print_on(outputStream* st, int min_index, int max_index, intptr_t* v0, intptr_t* v1, bool on_heap) {\n+void FrameValues::print_on(outputStream* st, int min_index, int max_index, intptr_t* v0, intptr_t* v1) {\n@@ -1633,2 +1633,1 @@\n-      if (on_heap\n-          && *fv.location != 0 && *fv.location > -100 && *fv.location < 100\n+      if (*fv.location != 0 && *fv.location > -100 && *fv.location < 100\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -252,0 +253,6 @@\n+  intptr_t  at_relative_or_null(int index) const {\n+    return (fp()[index] != 0)\n+      ? (intptr_t)(fp() + fp()[index])\n+      : 0;\n+  }\n+\n@@ -522,2 +529,1 @@\n-  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1,\n-                bool on_heap = false);\n+  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1);\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-  product(intx, HeapDumpGzipLevel, 0, MANAGEABLE,                           \\\n+  product(int, HeapDumpGzipLevel, 0, MANAGEABLE,                            \\\n@@ -1318,1 +1318,1 @@\n-  notproduct(intx, MaxElementPrintSize, 256,                                \\\n+  notproduct(int, MaxElementPrintSize, 256,                                 \\\n@@ -1460,1 +1460,1 @@\n-  product(uintx, MaxMetaspaceFreeRatio,    70,                              \\\n+  product(uint, MaxMetaspaceFreeRatio,    70,                               \\\n@@ -1466,1 +1466,1 @@\n-  product(uintx, MinMetaspaceFreeRatio,    40,                              \\\n+  product(uint, MinMetaspaceFreeRatio,    40,                               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -500,2 +500,11 @@\n-  MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n-  return get_op_for_self(allow_suspend, check_async_exception) != nullptr;\n+  \/\/ We must not block here as that could lead to deadlocks if we already hold an\n+  \/\/ \"external\" mutex. If the try_lock fails then we assume that there is an operation\n+  \/\/ and force the caller to check more carefully in a safer context. If we can't get\n+  \/\/ the lock it means another thread is trying to handshake with us, so it can't\n+  \/\/ happen during thread termination and destruction.\n+  bool ret = true;\n+  if (_lock.try_lock()) {\n+    ret = get_op_for_self(allow_suspend, check_async_exception) != nullptr;\n+    _lock.unlock();\n+  }\n+  return ret;\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"utilities\/checkedCast.hpp\"\n+\n","filename":"src\/hotspot\/share\/runtime\/jfieldIDWorkaround.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -945,0 +946,1 @@\n+  assert(is_aligned(p, unitsize), \"Unaligned\");\n@@ -964,0 +966,4 @@\n+    \/\/ bytes:   CA FE BA BE DE AD C0 DE\n+    \/\/ bytoff:   0  1  2  3  4  5  6  7\n+    \/\/ LE bits:  0  8 16 24 32 40 48 56\n+    \/\/ BE bits: 56 48 40 32 24 16  8  0\n@@ -967,1 +973,1 @@\n-      BIG_ENDIAN_ONLY((int)(sizeof(intptr_t) - 1 - offset) * BitsPerByte);\n+      BIG_ENDIAN_ONLY((int)((sizeof(intptr_t) - unitsize - offset) * BitsPerByte));\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -599,2 +599,1 @@\n-  static address current_stack_base();\n-  static size_t current_stack_size();\n+  static void current_stack_base_and_size(address* base, size_t* size);\n@@ -775,1 +774,1 @@\n-  static void print_instructions(outputStream* st, address pc, int unitsize);\n+  static void print_instructions(outputStream* st, address pc, int unitsize = 1);\n@@ -889,4 +888,4 @@\n-  static int recv(int fd, char* buf, size_t nBytes, uint flags);\n-  static int send(int fd, char* buf, size_t nBytes, uint flags);\n-  static int raw_send(int fd, char* buf, size_t nBytes, uint flags);\n-  static int connect(int fd, struct sockaddr* him, socklen_t len);\n+  static ssize_t recv(int fd, char* buf, size_t nBytes, uint flags);\n+  static ssize_t send(int fd, char* buf, size_t nBytes, uint flags);\n+  static ssize_t raw_send(int fd, char* buf, size_t nBytes, uint flags);\n+  static ssize_t connect(int fd, struct sockaddr* him, socklen_t len);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/relocator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1875,1 +1875,2 @@\n-  if (caller.is_compiled_frame() && !caller.is_deoptimized_frame()) {\n+  if ((caller.is_compiled_frame() && !caller.is_deoptimized_frame()) ||\n+      (caller.is_native_frame() && ((CompiledMethod*)caller.cb())->method()->is_continuation_enter_intrinsic())) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -172,2 +172,5 @@\n-  set_stack_base(os::current_stack_base());\n-  set_stack_size(os::current_stack_size());\n+  address base;\n+  size_t size;\n+  os::current_stack_base_and_size(&base, &size);\n+  set_stack_base(base);\n+  set_stack_size(size);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -322,3 +322,1 @@\n-      \/\/ if the flag is not manageable try to change it through\n-      \/\/ the platform dependent implementation\n-      return AttachListener::pd_set_flag(op, out);\n+      out->print_cr(\"flag '%s' cannot be changed\", op->arg(0));\n@@ -328,1 +326,0 @@\n-\n@@ -414,5 +411,0 @@\n-      \/\/ check for platform dependent attach operation\n-      if (info == nullptr) {\n-        info = AttachListener::pd_find_operation(op->name());\n-      }\n-\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -124,6 +124,0 @@\n-  \/\/ platform specific operation\n-  static AttachOperationFunctionInfo* pd_find_operation(const char* name);\n-\n-  \/\/ platform specific flag change\n-  static jint pd_set_flag(AttachOperation* op, outputStream* out);\n-\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"utilities\/parseInteger.hpp\"\n@@ -881,1 +882,1 @@\n-  long max = -1;\n+  int max = -1;\n@@ -884,2 +885,2 @@\n-    max = ::strtol(max_value, &endptr, 10);\n-    if (max == 0 && max_value == endptr) {\n+    int max;\n+    if (!parse_integer(max_value, &max)) {\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  bool equals(FinalizerEntry** value, bool* is_dead) {\n+  bool equals(FinalizerEntry** value) {\n@@ -145,0 +145,3 @@\n+  bool is_dead(FinalizerEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -970,1 +971,1 @@\n-  return size + field_count * (sizeof(address) + 1);\n+  return checked_cast<u4>(size + field_count * (sizeof(address) + 1));\n@@ -1083,1 +1084,1 @@\n-  u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size;\n+  u4 size = checked_cast<u4>(1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size);\n@@ -1193,1 +1194,1 @@\n-  u4 size = header_size + length * sizeof(address);\n+  u4 size = checked_cast<u4>(header_size + length * sizeof(address));\n@@ -2156,1 +2157,1 @@\n-      DumperSupport::write_header(writer(), HPROF_TRACE, 3*sizeof(u4) + depth*oopSize);\n+      DumperSupport::write_header(writer(), HPROF_TRACE, checked_cast<u4>(3*sizeof(u4) + depth*oopSize));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-                  empty_entries, ((float)empty_entries * 100) \/ total_entries);\n+                  empty_entries, ((float)empty_entries * 100) \/ (float)total_entries);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        out->print_cr(\"%27s (thread #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n+        out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n@@ -237,1 +237,1 @@\n-        out->print_cr(\"%27s (thread #\" SIZE_FORMAT \")\", \" \", thread_stack_memory->malloc_count());\n+        out->print_cr(\"%27s (threads #\" SIZE_FORMAT \")\", \" \", thread_stack_memory->malloc_count());\n@@ -285,1 +285,1 @@\n-  float waste_percentage = stats.committed() > 0 ? (((float)waste * 100)\/stats.committed()) : 0.0f;\n+  float waste_percentage = stats.committed() > 0 ? (((float)waste * 100)\/(float)stats.committed()) : 0.0f;\n@@ -598,1 +598,1 @@\n-      out->print(\"%27s (thread #\" SIZE_FORMAT \"\", \" \", _current_baseline.thread_count());\n+      out->print(\"%27s (threads #\" SIZE_FORMAT \"\", \" \", _current_baseline.thread_count());\n@@ -716,1 +716,1 @@\n-                                 (current_waste * 100.0f) \/ current_stats.committed();\n+                                 ((float)current_waste * 100.0f) \/ (float)current_stats.committed();\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -165,1 +166,1 @@\n-    return hash % table_size;\n+    return checked_cast<index_t>(hash % table_size);\n","filename":"src\/hotspot\/share\/services\/nmtPreInit.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,1 @@\n-  return ((double)_items_count) \/ _current_size;\n+  return ((double)_items_count) \/ (double)_current_size;\n@@ -190,1 +190,1 @@\n-  bool equals(ThreadIdTableEntry** value, bool* is_dead) {\n+  bool equals(ThreadIdTableEntry** value) {\n@@ -197,0 +197,3 @@\n+  bool is_dead(ThreadIdTableEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-  static jlong get_live_thread_count()        { return _atomic_threads_count; }\n-  static jlong get_daemon_thread_count()      { return _atomic_daemon_threads_count; }\n+  static int get_live_thread_count()          { return _atomic_threads_count; }\n+  static int get_daemon_thread_count()        { return _atomic_daemon_threads_count; }\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  return s1.base() - s2.base();\n+  return primitive_compare(s1.base(), s2.base());\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -336,0 +336,1 @@\n+    _committed_regions.clear();\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_CHECKEDCAST_HPP\n+#define SHARE_UTILITIES_CHECKEDCAST_HPP\n+\n+#include \"utilities\/debug.hpp\"\n+\n+\/\/ In many places we've added C-style casts to silence compiler\n+\/\/ warnings, for example when truncating a size_t to an int when we\n+\/\/ know the size_t is a small struct. Such casts are risky because\n+\/\/ they effectively disable useful compiler warnings. We can make our\n+\/\/ lives safer with this function, which ensures that any cast is\n+\/\/ reversible without loss of information. It doesn't check\n+\/\/ everything: it isn't intended to make sure that pointer types are\n+\/\/ compatible, for example.\n+template <typename T2, typename T1>\n+constexpr T2 checked_cast(T1 thing) {\n+  T2 result = static_cast<T2>(thing);\n+  assert(static_cast<T1>(result) == thing, \"must be\");\n+  return result;\n+}\n+\n+#endif \/\/ SHARE_UTILITIES_CHECKEDCAST_HPP\n+\n","filename":"src\/hotspot\/share\/utilities\/checkedCast.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -458,1 +458,0 @@\n-  bool have_dead = false;\n@@ -460,1 +459,1 @@\n-    if (lookup_f.equals(rem_n->value(), &have_dead)) {\n+    if (lookup_f.equals(rem_n->value())) {\n@@ -549,3 +548,1 @@\n-    bool is_dead = false;\n-    lookup_f.equals(rem_n->value(), &is_dead);\n-    if (is_dead) {\n+    if (lookup_f.is_dead(rem_n->value())) {\n@@ -629,1 +626,0 @@\n-    bool is_dead = false;\n@@ -631,1 +627,1 @@\n-    if (lookup_f.equals(node->value(), &is_dead)) {\n+    if (lookup_f.equals(node->value())) {\n@@ -634,1 +630,1 @@\n-    if (is_dead && !(*have_dead)) {\n+    if (!(*have_dead) && lookup_f.is_dead(node->value())) {\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    fill += fill << 8;\n+    fill += (jshort)(fill << 8);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  void _Copy_conjoint_oops_atomic   (const oop*    from, oop*    to, size_t count);\n","filename":"src\/hotspot\/share\/utilities\/copy.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -792,1 +793,1 @@\n-  uint8_t padding = alignment - (_reader.get_position() - _section_start_address) % alignment;\n+  long padding = alignment - (_reader.get_position() - _section_start_address) % alignment;\n@@ -1426,1 +1427,1 @@\n-      _state->_discriminator = discriminator;\n+      _state->_discriminator = static_cast<uint32_t>(discriminator);\n@@ -1449,2 +1450,2 @@\n-      uint64_t operation_advance;\n-      if (!_reader.read_uleb128(&operation_advance, 4)) {\n+      uint64_t adv;\n+      if (!_reader.read_uleb128(&adv, 4)) {\n@@ -1454,0 +1455,1 @@\n+      uint32_t operation_advance = checked_cast<uint32_t>(adv);\n@@ -1467,1 +1469,1 @@\n-      _state->_line += line;\n+      _state->_line += static_cast<uint32_t>(line);\n@@ -1476,1 +1478,1 @@\n-      _state->_file = file;\n+      _state->_file = static_cast<uint32_t>(file);\n@@ -1485,1 +1487,1 @@\n-      _state->_column = column;\n+      _state->_column = static_cast<uint32_t>(column);\n@@ -1531,1 +1533,1 @@\n-      _state->_isa = isa;\n+      _state->_isa = static_cast<uint32_t>(isa);  \/\/ only save 4 bytes\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -486,1 +487,1 @@\n-    uint32_t _section_start_address;\n+    uintptr_t _section_start_address;\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-address ElfFuncDescTable::lookup(Elf_Word index) {\n+address ElfFuncDescTable::lookup(Elf_Addr index) {\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  address lookup(Elf_Word index);\n+  address lookup(Elf_Addr index);\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -51,1 +52,1 @@\n-    Elf_Word st_size = sym->st_size;\n+    Elf64_Xword st_size = sym->st_size;\n@@ -80,1 +81,1 @@\n-  int count = _section.section_header()->sh_size \/ sym_size;\n+  int count = checked_cast<int>(_section.section_header()->sh_size \/ sym_size);\n","filename":"src\/hotspot\/share\/utilities\/elfSymbolTable.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-#define ATTRIBUTE_ALIGNED(x)\n+#define ATTRIBUTE_ALIGNED(x) alignas(x)\n@@ -478,0 +478,10 @@\n+\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n+\/\/ returns a non-negative int, usually used as a size of a code buffer range.\n+\/\/ This scales to sizeof(T).\n+template <typename T>\n+inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n+  size_t delta = pointer_delta(left, right, sizeof(T));\n+  assert(delta <= size_t(INT_MAX), \"pointer delta out of range: %zu\", delta);\n+  return static_cast<int>(delta);\n+}\n+\n@@ -494,23 +504,0 @@\n-\/\/ In many places we've added C-style casts to silence compiler\n-\/\/ warnings, for example when truncating a size_t to an int when we\n-\/\/ know the size_t is a small struct. Such casts are risky because\n-\/\/ they effectively disable useful compiler warnings. We can make our\n-\/\/ lives safer with this function, which ensures that any cast is\n-\/\/ reversible without loss of information. It doesn't check\n-\/\/ everything: it isn't intended to make sure that pointer types are\n-\/\/ compatible, for example.\n-template <typename T2, typename T1>\n-constexpr T2 checked_cast(T1 thing) {\n-  T2 result = static_cast<T2>(thing);\n-  assert(static_cast<T1>(result) == thing, \"must be\");\n-  return result;\n-}\n-\n-\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n-\/\/ returns a non-negative int, usually used as a size of a code buffer range.\n-\/\/ This scales to sizeof(T).\n-template <typename T>\n-inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n-  return checked_cast<int>(pointer_delta(left, right, sizeof(T)));\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-  char space[sizeof (klass)] ATTRIBUTE_ALIGNED(16);     \\\n+  alignas(16) char space[sizeof (klass)];               \\\n@@ -163,4 +163,0 @@\n-\/\/ Alignment\n-\/\/\n-#define ATTRIBUTE_ALIGNED(x) __attribute__((aligned(x)))\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -118,3 +118,0 @@\n-\/\/ Alignment\n-#define ATTRIBUTE_ALIGNED(x) __declspec(align(x))\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1099,2 +1099,2 @@\n-int networkStream::read(char *buf, size_t len) {\n-  return os::recv(_socket, buf, (int)len, 0);\n+ssize_t networkStream::read(char *buf, size_t len) {\n+  return os::recv(_socket, buf, len, 0);\n@@ -1105,1 +1105,1 @@\n-    int result = os::raw_send(_socket, (char *)base(), size(), 0);\n+    ssize_t result = os::raw_send(_socket, (char *)base(), size(), 0);\n@@ -1107,1 +1107,1 @@\n-    assert(result == (int)size(), \"didn't send enough data\");\n+    assert(result >= 0 && (size_t)result == size(), \"didn't send enough data\");\n@@ -1146,1 +1146,1 @@\n-  ret = os::connect(_socket, addr_info->ai_addr, (socklen_t)addr_info->ai_addrlen);\n+  ssize_t conn = os::connect(_socket, addr_info->ai_addr, (socklen_t)addr_info->ai_addrlen);\n@@ -1148,1 +1148,1 @@\n-  return (ret >= 0);\n+  return (conn >= 0);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    int read(char *buf, size_t len);\n+    ssize_t read(char *buf, size_t len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -67,1 +68,1 @@\n-  return static_cast<T>(r) >> (((sizeof(T) - 1) * BitsPerByte));\n+  return checked_cast<unsigned>(static_cast<T>(r) >> (((sizeof(T) - 1) * BitsPerByte)));\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  return (float)((_added_items_stamp - _added_items_stamp_prev) \/ _seconds_stamp);\n+  return (float)(((double)_added_items_stamp - (double)_added_items_stamp_prev) \/ _seconds_stamp);\n@@ -81,1 +81,1 @@\n-  return (float)((_removed_items_stamp - _removed_items_stamp_prev) \/ _seconds_stamp);\n+  return (float)(_removed_items_stamp - _removed_items_stamp_prev) \/ (float)_seconds_stamp;\n@@ -104,1 +104,1 @@\n-  _number_of_entries = summary.sum();\n+  _number_of_entries = (size_t)summary.sum();\n@@ -106,4 +106,4 @@\n-  _maximum_bucket_size = summary.maximum();\n-  _average_bucket_size = summary.avg();\n-  _variance_of_bucket_size = summary.variance();\n-  _stddev_of_bucket_size = summary.sd();\n+  _maximum_bucket_size = (size_t)summary.maximum();\n+  _average_bucket_size = (float)summary.avg();\n+  _variance_of_bucket_size = (float)summary.variance();\n+  _stddev_of_bucket_size = (float)summary.sd();\n@@ -143,1 +143,1 @@\n-    float literal_avg = (_number_of_entries <= 0) ? 0 : (_literal_bytes \/ _number_of_entries);\n+    float literal_avg = (_number_of_entries <= 0) ? 0.0f : (float)(_literal_bytes \/ _number_of_entries);\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -181,1 +181,4 @@\n-  const size_t stack_size = os::current_stack_size();\n+  size_t stack_size = 0;\n+  address stack_base = nullptr;\n+  os::current_stack_base_and_size(&stack_base, &stack_size);\n+\n@@ -189,1 +192,0 @@\n-  const address stack_base          = os::current_stack_base();\n@@ -202,1 +204,4 @@\n-    const size_t stack_size     = os::current_stack_size();\n+    size_t stack_size = 0;\n+    address stack_base = nullptr;\n+    os::current_stack_base_and_size(&stack_base, &stack_size);\n+\n@@ -204,1 +209,0 @@\n-    const address stack_base    = os::current_stack_base();\n@@ -978,2 +982,1 @@\n-      stack_top = os::current_stack_base();\n-      stack_size = os::current_stack_size();\n+      os::current_stack_base_and_size(&stack_top, &stack_size);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-    int old_len = _element_close_stack_high - old_ptr;\n+    int old_len = pointer_delta_as_int(_element_close_stack_high, old_ptr);\n","filename":"src\/hotspot\/share\/utilities\/xmlstream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include \"java_nio_MappedMemoryUtils.h\"\n+#include <assert.h>\n+#include <sys\/mman.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys\/procfs.h>\n+#include <unistd.h>\n+\n+typedef char mincore_vec_t;\n+\n+static long calculate_number_of_pages_in_range(void* address, size_t len, size_t pagesize) {\n+    uintptr_t address_unaligned = (uintptr_t) address;\n+    uintptr_t address_aligned = address_unaligned & (~(pagesize - 1));\n+    size_t len2 = len + (address_unaligned - address_aligned);\n+    long numPages = (len2 + pagesize - 1) \/ pagesize;\n+    return numPages;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_java_nio_MappedMemoryUtils_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n+                                         jlong len, jlong numPages)\n+{\n+    jboolean loaded = JNI_TRUE;\n+    int result = 0;\n+    long i = 0;\n+    void *a = (void *) jlong_to_ptr(address);\n+    mincore_vec_t* vec = NULL;\n+\n+    \/* See JDK-8186665 *\/\n+    size_t pagesize = (size_t)sysconf(_SC_PAGESIZE);\n+    if ((long)pagesize == -1) {\n+        return JNI_FALSE;\n+    }\n+    numPages = (jlong) calculate_number_of_pages_in_range(a, len, pagesize);\n+\n+    \/* Include space for one sentinel byte at the end of the buffer\n+     * to catch overflows. *\/\n+    vec = (mincore_vec_t*) malloc(numPages + 1);\n+\n+    if (vec == NULL) {\n+        JNU_ThrowOutOfMemoryError(env, NULL);\n+        return JNI_FALSE;\n+    }\n+\n+    vec[numPages] = '\\x7f'; \/* Write sentinel. *\/\n+    result = mincore(a, (size_t)len, vec);\n+    assert(vec[numPages] == '\\x7f'); \/* Check sentinel. *\/\n+\n+    if (result == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"mincore failed\");\n+        free(vec);\n+        return JNI_FALSE;\n+    }\n+\n+    for (i=0; i<numPages; i++) {\n+        if (vec[i] == 0) {\n+            loaded = JNI_FALSE;\n+            break;\n+        }\n+    }\n+    free(vec);\n+    return loaded;\n+}\n+\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_load0(JNIEnv *env, jobject obj, jlong address,\n+                                     jlong len)\n+{\n+    char *a = (char *)jlong_to_ptr(address);\n+    int result = madvise((caddr_t)a, (size_t)len, MADV_WILLNEED);\n+    if (result == -1) {\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env, \"madvise with advise MADV_WILLNEED failed\");\n+    }\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,\n+                                     jlong len)\n+{\n+    char *a = (char *)jlong_to_ptr(address);\n+    int result = madvise((caddr_t)a, (size_t)len, MADV_DONTNEED);\n+    if (result == -1) {\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env, \"madvise with advise MADV_DONTNEED failed\");\n+    }\n+}\n+\n+static void set_error_if_shared(JNIEnv* env, prmap_t* map_entry)\n+{\n+    if (map_entry->pr_mflags & MA_SHARED) {\n+        \/\/ MA_SHARED => MAP_SHARED => !MAP_PRIVATE. This error is valid and should be thrown.\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env, \"msync with parameter MS_SYNC failed (MAP_SHARED)\");\n+        return;\n+    } else {\n+        \/\/ O.W. MAP_PRIVATE or no flag was specified and EINVAL is the expected behaviour.\n+        return;\n+    }\n+}\n+\n+static void check_proc_map_array(JNIEnv* env, FILE* proc_file, prmap_t* map_entry, void* end_address)\n+{\n+    while (!feof(proc_file)) {\n+        memset(map_entry, '\\0', sizeof(prmap_t));\n+        fread((char*)map_entry, sizeof(prmap_t), 1, proc_file);\n+        if (ferror(proc_file)) {\n+            JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                        \"msync with parameter MS_SYNC failed (could not read \/proc\/<pid>\/map)\");\n+            return;\n+        } else if (map_entry->pr_vaddr <= end_address &&\n+                   (uint64_t)end_address <= (uint64_t)map_entry->pr_vaddr + map_entry->pr_size) {\n+            set_error_if_shared(env, map_entry);\n+            return;\n+        }\n+    }\n+    JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                                    \"msync with parameter MS_SYNC failed (address not found)\");\n+}\n+\n+\/\/ '\/proc\/' + <pid> + '\/map' + '\\0'\n+#define PFNAME_LEN 32\n+static void check_aix_einval(JNIEnv* env, void* end_address)\n+{\n+    \/\/ If EINVAL is set for a mmap address on AIX, additional validation is required.\n+    \/\/ AIX will set EINVAL when msync is called on a mmap address that didn't receive MAP_SHARED\n+    \/\/ as a flag (since MAP_PRIVATE is the default).\n+    \/\/ https:\/\/www.ibm.com\/docs\/en\/aix\/7.2?topic=m-msync-subroutine\n+\n+    FILE* proc_file;\n+    {\n+        char* fname = (char*) malloc(sizeof(char) * PFNAME_LEN);\n+        pid_t the_pid = getpid();\n+        jio_snprintf(fname, PFNAME_LEN, \"\/proc\/%d\/map\", the_pid);\n+        proc_file = fopen(fname, \"r\");\n+        free(fname);\n+    }\n+    if (!proc_file) {\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+                        \"msync with parameter MS_SYNC failed (could not open \/proc\/<pid>\/map)\");\n+        return;\n+    }\n+    {\n+        prmap_t* map_entry = (prmap_t*) malloc(sizeof(prmap_t));\n+        check_proc_map_array(env, proc_file, map_entry, end_address);\n+        free(map_entry);\n+    }\n+    fclose(proc_file);\n+}\n+\n+\/\/ Normally we would just let msync handle this, but since we'll be (potentially) ignoring\n+\/\/ the error code returned by msync, we check the args before the call instead.\n+static int validate_msync_address(size_t address)\n+{\n+    size_t pagesize = (size_t)sysconf(_SC_PAGESIZE);\n+    if (address % pagesize != 0) {\n+        errno = EINVAL;\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,\n+                                      jlong address, jlong len)\n+{\n+    void* a = (void *)jlong_to_ptr(address);\n+    if (validate_msync_address((size_t)a) > 0) {\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env,\n+            \"msync with parameter MS_SYNC failed (arguments invalid)\");\n+        return;\n+    }\n+    int result = msync(a, (size_t)len, MS_SYNC);\n+    if (result == -1) {\n+        void* end_address = (void*)jlong_to_ptr(address + len);\n+        if (errno == EINVAL) {\n+            check_aix_einval(env, end_address);\n+            return;\n+        }\n+        JNU_ThrowIOExceptionWithMessageAndLastError(env, \"msync with parameter MS_SYNC failed\");\n+    }\n+}\n","filename":"src\/java.base\/aix\/native\/libnio\/MappedMemoryUtils.c","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,1 +184,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -274,1 +274,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -305,1 +305,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -340,1 +340,1 @@\n-            Object entry = entries.get(alias.toLowerCase());\n+            Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -362,1 +362,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -430,1 +430,1 @@\n-                String lowerAlias = alias.toLowerCase();\n+                String lowerAlias = alias.toLowerCase(Locale.ROOT);\n@@ -494,1 +494,1 @@\n-            String lowerAlias = alias.toLowerCase();\n+            String lowerAlias = alias.toLowerCase(Locale.ROOT);\n@@ -524,0 +524,1 @@\n+        String lowerAlias = alias.toLowerCase(Locale.ROOT);\n@@ -525,2 +526,2 @@\n-            Object entry = entries.remove(alias.toLowerCase());\n-            deletedEntries.put(alias.toLowerCase(), entry);\n+            Object entry = entries.remove(lowerAlias);\n+            deletedEntries.put(lowerAlias, entry);\n@@ -549,1 +550,1 @@\n-        return entries.containsKey(alias.toLowerCase());\n+        return entries.containsKey(alias.toLowerCase(Locale.ROOT));\n@@ -571,1 +572,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -584,1 +585,1 @@\n-        Object entry = entries.get(alias.toLowerCase());\n+        Object entry = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -809,1 +810,1 @@\n-            if (entries.contains(alias.toLowerCase())) {\n+            if (entries.contains(alias.toLowerCase(Locale.ROOT))) {\n@@ -812,1 +813,1 @@\n-                var co = entries.get(alias.toLowerCase());\n+                var co = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -820,1 +821,1 @@\n-                    co = entries.get(alias.toLowerCase());\n+                    co = entries.get(alias.toLowerCase(Locale.ROOT));\n@@ -903,1 +904,1 @@\n-            entries.put(alias.toLowerCase(), tce);\n+            entries.put(alias.toLowerCase(Locale.ROOT), tce);\n@@ -974,1 +975,1 @@\n-        while (entries.containsKey(alias.toLowerCase())) {\n+        while (entries.containsKey(alias.toLowerCase(Locale.ROOT))) {\n@@ -979,1 +980,1 @@\n-        entries.put(alias.toLowerCase(), ke);\n+        entries.put(alias.toLowerCase(Locale.ROOT), ke);\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1575,0 +1575,7 @@\n+            \/\/ Check that input data is long enough to fit the expected tag.\n+            if (len < 0) {\n+                throw new AEADBadTagException(\"Input data too short to \" +\n+                    \"contain an expected tag length of \" + tagLenBytes +\n+                    \"bytes\");\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -502,2 +502,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -395,2 +395,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,2 +160,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStreamReader.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,2 +179,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/io\/OutputStreamWriter.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-     * to write to, a file with the specified name. A new\n+     * to write to, a file with the specified pathname. A new\n@@ -106,1 +106,1 @@\n-     * is called with the {@code name} argument\n+     * is called with the {@code pathname} argument\n@@ -110,1 +110,1 @@\n-     * is also called with the {@code name} argument\n+     * is also called with the {@code pathname} argument\n@@ -113,2 +113,2 @@\n-     * @param      name   the system-dependent filename\n-     * @param      mode   the access <a href=\"#mode\">mode<\/a>\n+     * @param      pathname   the system-dependent pathname string\n+     * @param      mode       the access <a href=\"#mode\">mode<\/a>\n@@ -119,1 +119,1 @@\n-     *             if the mode is {@code \"r\"} but the given string does not\n+     *             if the mode is {@code \"r\"} but the given pathname string does not\n@@ -121,1 +121,1 @@\n-     *             {@code \"rw\"} but the given string does not denote an\n+     *             {@code \"rw\"} but the given pathname string does not denote an\n@@ -123,2 +123,2 @@\n-     *             that name cannot be created, or if some other error occurs\n-     *             while opening or creating the file\n+     *             that pathname cannot be created, or if some other error\n+     *             occurs while opening or creating the file\n@@ -132,1 +132,0 @@\n-     * @revised 1.4\n@@ -134,1 +133,1 @@\n-    public RandomAccessFile(String name, String mode)\n+    public RandomAccessFile(String pathname, String mode)\n@@ -137,1 +136,1 @@\n-        this(name != null ? new File(name) : null, mode);\n+        this(pathname != null ? new File(pathname) : null, mode);\n@@ -195,2 +194,2 @@\n-     * also called with the path argument to see if write access to the file is\n-     * allowed.\n+     * also called with the pathname of the {@code file} argument to see if\n+     * write access to the file is allowed.\n@@ -209,2 +208,2 @@\n-     *             that name cannot be created, or if some other error occurs\n-     *             while opening or creating the file\n+     *             that pathname cannot be created, or if some other error\n+     *             occurs while opening or creating the file\n@@ -218,1 +217,0 @@\n-     * @revised 1.4\n@@ -706,2 +704,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1171,1 +1171,0 @@\n-     * @revised 9\n@@ -3032,1 +3031,0 @@\n-     * @revised 9\n@@ -3128,1 +3126,0 @@\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,1 +230,0 @@\n- * @revised 9\n@@ -884,1 +883,0 @@\n-     * @revised 9\n@@ -1018,2 +1016,0 @@\n-     *\n-     * @revised 9\n@@ -1094,1 +1090,0 @@\n-     * @revised 9\n@@ -1407,1 +1402,0 @@\n-     * @revised 9\n@@ -1472,1 +1466,0 @@\n-     * @revised 9\n@@ -1570,1 +1563,0 @@\n-     * @revised 9\n@@ -1605,1 +1597,0 @@\n-     * @revised 9\n@@ -1690,1 +1681,0 @@\n-     * @revised 9\n@@ -1726,1 +1716,0 @@\n-     * @revised 9\n@@ -1758,1 +1747,0 @@\n-     * @revised 9\n@@ -1791,1 +1779,0 @@\n-     * @revised 9\n@@ -1951,3 +1938,0 @@\n-     *\n-     * @revised  1.4\n-     * @revised 9\n@@ -2220,1 +2204,0 @@\n-     * @revised 9\n@@ -2329,1 +2312,0 @@\n-     * @revised 9\n@@ -2364,1 +2346,0 @@\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,27 +58,28 @@\n- * measured in terms of <i>ulps<\/i>, units in the last place.  For a\n- * given floating-point format, an {@linkplain #ulp(double) ulp} of a\n- * specific real number value is the distance between the two\n- * floating-point values bracketing that numerical value.  When\n- * discussing the accuracy of a method as a whole rather than at a\n- * specific argument, the number of ulps cited is for the worst-case\n- * error at any argument.  If a method always has an error less than\n- * 0.5 ulps, the method always returns the floating-point number\n- * nearest the exact result; such a method is <i>correctly\n- * rounded<\/i>.  A correctly rounded method is generally the best a\n- * floating-point approximation can be; however, it is impractical for\n- * many floating-point methods to be correctly rounded.  Instead, for\n- * the {@code Math} class, a larger error bound of 1 or 2 ulps is\n- * allowed for certain methods.  Informally, with a 1 ulp error bound,\n- * when the exact result is a representable number, the exact result\n- * should be returned as the computed result; otherwise, either of the\n- * two floating-point values which bracket the exact result may be\n- * returned.  For exact results large in magnitude, one of the\n- * endpoints of the bracket may be infinite.  Besides accuracy at\n- * individual arguments, maintaining proper relations between the\n- * method at different arguments is also important.  Therefore, most\n- * methods with more than 0.5 ulp errors are required to be\n- * <i>semi-monotonic<\/i>: whenever the mathematical function is\n- * non-decreasing, so is the floating-point approximation, likewise,\n- * whenever the mathematical function is non-increasing, so is the\n- * floating-point approximation.  Not all approximations that have 1\n- * ulp accuracy will automatically meet the monotonicity requirements.\n+ * measured in terms of <dfn>{@index ulp}s<\/dfn>, {@index \"units in\n+ * the last place\"}.  For a given floating-point format, an\n+ * {@linkplain #ulp(double) ulp} of a specific real number value is\n+ * the distance between the two floating-point values bracketing that\n+ * numerical value.  When discussing the accuracy of a method as a\n+ * whole rather than at a specific argument, the number of ulps cited\n+ * is for the worst-case error at any argument.  If a method always\n+ * has an error less than 0.5 ulps, the method always returns the\n+ * floating-point number nearest the exact result; such a method is\n+ * <dfn>correctly rounded<\/dfn>.  A {@index \"correctly rounded\"}\n+ * method is generally the best a floating-point approximation can be;\n+ * however, it is impractical for many floating-point methods to be\n+ * correctly rounded.  Instead, for the {@code Math} class, a larger\n+ * error bound of 1 or 2 ulps is allowed for certain methods.\n+ * Informally, with a 1 ulp error bound, when the exact result is a\n+ * representable number, the exact result should be returned as the\n+ * computed result; otherwise, either of the two floating-point values\n+ * which bracket the exact result may be returned.  For exact results\n+ * large in magnitude, one of the endpoints of the bracket may be\n+ * infinite.  Besides accuracy at individual arguments, maintaining\n+ * proper relations between the method at different arguments is also\n+ * important.  Therefore, most methods with more than 0.5 ulp errors\n+ * are required to be <dfn>{@index \"semi-monotonic\"}<\/dfn>: whenever\n+ * the mathematical function is non-decreasing, so is the\n+ * floating-point approximation, likewise, whenever the mathematical\n+ * function is non-increasing, so is the floating-point approximation.\n+ * Not all approximations that have 1 ulp accuracy will automatically\n+ * meet the monotonicity requirements.\n@@ -88,8 +89,9 @@\n- * int and long primitive types.  The developer should choose\n- * the primitive type to ensure that arithmetic operations consistently\n- * produce correct results, which in some cases means the operations\n- * will not overflow the range of values of the computation.\n- * The best practice is to choose the primitive type and algorithm to avoid\n- * overflow. In cases where the size is {@code int} or {@code long} and\n- * overflow errors need to be detected, the methods whose names end with\n- * {@code Exact} throw an {@code ArithmeticException} when the results overflow.\n+ * {@code int} and {@code long} primitive types.  The developer should\n+ * choose the primitive type to ensure that arithmetic operations\n+ * consistently produce correct results, which in some cases means the\n+ * operations will not overflow the range of values of the\n+ * computation.  The best practice is to choose the primitive type and\n+ * algorithm to avoid overflow. In cases where the size is {@code int}\n+ * or {@code long} and overflow errors need to be detected, the\n+ * methods whose names end with {@code Exact} throw an {@code\n+ * ArithmeticException} when the results overflow.\n@@ -122,1 +124,0 @@\n- * @author  Joseph D. Darcy\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":37,"deletions":36,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,0 @@\n- * @revised 9\n@@ -214,2 +213,0 @@\n-     *\n-     * @revised 9\n@@ -358,2 +355,0 @@\n-     *\n-     * @revised 9\n@@ -382,2 +377,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Package.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,2 +105,3 @@\n-     * @param declaringClass the fully qualified name of the class containing\n-     *        the execution point represented by the stack trace element\n+     * @param declaringClass the {@linkplain ClassLoader##binary-name binary name}\n+     *        of the class containing the execution point represented by\n+     *        the stack trace element\n@@ -120,1 +121,0 @@\n-     * @revised 9\n@@ -140,2 +140,3 @@\n-     * @param declaringClass the fully qualified name of the class containing\n-     *        the execution point represented by the stack trace element\n+     * @param declaringClass the {@linkplain ClassLoader##binary-name binary name}\n+     *        of the class containing the execution point represented by\n+     *        the stack trace element\n@@ -252,5 +253,3 @@\n-     * Returns the fully qualified name of the class containing the\n-     * execution point represented by this stack trace element.\n-     *\n-     * @return the fully qualified name of the {@code Class} containing\n-     *         the execution point represented by this stack trace element.\n+     * {@return the {@linkplain ClassLoader##binary-name binary name}\n+     * of the {@code Class} containing the execution point represented\n+     * by this stack trace element}\n@@ -335,1 +334,1 @@\n-     * fully-qualified class name and \"{@code run}\" is the name of the method.\n+     * binary name and \"{@code run}\" is the name of the method.\n@@ -358,1 +357,0 @@\n-     * @revised 9\n@@ -429,2 +427,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackTraceElement.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1696,2 +1696,0 @@\n-     *\n-     * @revised 6.0, 14\n@@ -1729,1 +1727,0 @@\n-     * @revised 6.0, 14\n@@ -1742,1 +1739,0 @@\n-     * @revised 6.0, 14\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -633,4 +633,2 @@\n-                long deadline = startTime + nanos;\n-                if (deadline < 0L)\n-                    deadline = Long.MAX_VALUE;\n-                parkOnCarrierThread(true, deadline - System.nanoTime());\n+                long remainingNanos = nanos - (System.nanoTime() - startTime);\n+                parkOnCarrierThread(true, remainingNanos);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -178,2 +178,0 @@\n-     *\n-     * @revised 9\n@@ -1440,2 +1438,0 @@\n-     *\n-     * @revised 9\n@@ -1624,2 +1620,0 @@\n-         *\n-         *  @revised 9\n@@ -1706,1 +1700,0 @@\n-         * @revised 9\n@@ -2602,2 +2595,0 @@\n-         *\n-         * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -850,3 +850,1 @@\n-         * Returns the fully qualified class name of the service type.\n-         *\n-         * @return The fully qualified class name of the service type\n+         * {@return the {@linkplain ClassLoader##binary-name binary name} of the service type}\n@@ -857,2 +855,2 @@\n-         * Returns the list of the fully qualified class names of the providers\n-         * or provider factories.\n+         * Returns the list of the {@linkplain ClassLoader##binary-name binary names}\n+         * of the providers or provider factories.\n@@ -860,2 +858,2 @@\n-         * @return A non-empty and unmodifiable list of the fully qualified class\n-         *         names of the providers or provider factories\n+         * @return A non-empty and unmodifiable list of the {@linkplain ClassLoader##binary-name\n+         *         binary names} of the providers or provider factories\n@@ -868,2 +866,3 @@\n-         * <p> Two {@code Provides} objects are compared by comparing the fully\n-         * qualified class name of the service type lexicographically. Where the\n+         * <p> Two {@code Provides} objects are compared by comparing the\n+         * {@linkplain ClassLoader##binary-name binary name}\n+         * of the service type lexicographically. Where the\n@@ -1449,2 +1448,2 @@\n-     * @return  A possibly-empty unmodifiable set of the fully qualified class\n-     *          names of the service types used\n+     * @return  A possibly-empty unmodifiable set of the {@linkplain ClassLoader##binary-name\n+     *          binary names} of the service types used\n@@ -1513,1 +1512,1 @@\n-     * @return The fully qualified class name of the module's main class\n+     * @return The {@linkplain ClassLoader##binary-name binary name} of the module's main class\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n- * @revised 9\n@@ -122,1 +121,0 @@\n-     * @revised 9\n@@ -210,1 +208,0 @@\n-     * @revised 9\n@@ -427,2 +424,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -295,1 +295,0 @@\n- * @revised 9\n@@ -385,1 +384,0 @@\n-     * @revised 9\n@@ -1018,1 +1016,0 @@\n-     * @revised 9\n@@ -1103,2 +1100,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,0 @@\n- * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/package-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -659,1 +659,0 @@\n-     * @revised 1.4\n@@ -711,1 +710,0 @@\n-     * @revised 1.4\n@@ -1085,2 +1083,0 @@\n-     *\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/net\/DatagramSocket.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.Locale;\n+\n@@ -213,1 +215,1 @@\n-            String scheme = uri.getScheme().toLowerCase();\n+            String scheme = uri.getScheme().toLowerCase(Locale.ROOT);\n","filename":"src\/java.base\/share\/classes\/java\/net\/ProxySelector.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-     * @revised 1.4\n@@ -535,1 +534,0 @@\n-     * @revised 1.4\n@@ -578,1 +576,0 @@\n-     * @revised 1.4\n@@ -744,1 +741,0 @@\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,1 +179,0 @@\n-     * @revised 1.4\n@@ -1054,2 +1053,0 @@\n-     *\n-     * @revised 1.4\n@@ -1152,1 +1149,0 @@\n-     * @revised 1.4\n@@ -1720,1 +1716,0 @@\n-     * @revised 1.4\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -542,2 +542,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLClassLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-    private ByteBuffer put$Type$(long a, $type$ x) {\n@@ -63,0 +62,1 @@\n+    private ByteBuffer put$Type$(long a, $type$ x) {\n@@ -70,3 +70,0 @@\n-#else[rw]\n-        throw new ReadOnlyBufferException();\n-#end[rw]\n@@ -74,0 +71,1 @@\n+#end[rw]\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer-bin.java.template","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1534,1 +1534,2 @@\n-     *          method is invoked to check read access to both files.\n+     *          method is invoked to check read access to both files when the\n+     *          two paths are not equal\n@@ -1574,0 +1575,3 @@\n+     * <p> If both {@code Path} objects are equal, then this method returns\n+     * {@code true} without checking if the file exists.\n+     *\n@@ -1586,1 +1590,2 @@\n-     *          method is invoked to check read access to both files.\n+     *          method is invoked to check read access to both files when the\n+     *          two paths are not equal\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -820,1 +820,1 @@\n-            pdebug.println(\"KeyStore.\" + type.toUpperCase() + \" type from: \" +\n+            pdebug.println(\"KeyStore.\" + type.toUpperCase(Locale.ROOT) + \" type from: \" +\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -299,1 +299,4 @@\n-     * 1 is most preferred, followed by 2, and so on.\n+     * 1 is most preferred, followed by 2, and so on.  If the position\n+     * is less than 1 or greater than n, where n is the number of installed\n+     * providers, the provider (if not already installed) is inserted at\n+     * the end of the list, or at the n + 1 position.\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -115,1 +115,10 @@\n-        for (int i=0; i < count; ++i) {\n+        return !nonZeroAfterIndex(0);\n+    }\n+\n+\n+    \/**\n+     * Return true if there exists a non-zero digit in the digit list\n+     * from the given index until the end.\n+     *\/\n+    private boolean nonZeroAfterIndex(int index) {\n+        for (int i=index; i < count; ++i) {\n@@ -117,1 +126,1 @@\n-                return false;\n+                return true;\n@@ -120,1 +129,1 @@\n-        return true;\n+        return false;\n@@ -193,3 +202,1 @@\n-        for (int i = count; i < decimalAt; ++i) {\n-            temp.append('0');\n-        }\n+        temp.append(\"0\".repeat(Math.max(0, decimalAt - count)));\n@@ -395,0 +402,11 @@\n+    \/**\n+     * Round the representation to the given number of digits.\n+     * @param maximumDigits The maximum number of digits to be shown.\n+     *\n+     * Upon return, count will be less than or equal to maximumDigits.\n+     *\/\n+    private void roundInt(int maximumDigits) {\n+        \/\/ Integers do not need to worry about double rounding\n+        round(maximumDigits, false, true);\n+    }\n+\n@@ -411,19 +429,2 @@\n-                \/\/ Rounding up involved incrementing digits from LSD to MSD.\n-                \/\/ In most cases this is simple, but in a worst case situation\n-                \/\/ (9999..99) we have to adjust the decimalAt value.\n-                for (;;) {\n-                    --maximumDigits;\n-                    if (maximumDigits < 0) {\n-                        \/\/ We have all 9's, so we increment to a single digit\n-                        \/\/ of one and adjust the exponent.\n-                        digits[0] = '1';\n-                        ++decimalAt;\n-                        maximumDigits = 0; \/\/ Adjust the count\n-                        break;\n-                    }\n-\n-                    ++digits[maximumDigits];\n-                    if (digits[maximumDigits] <= '9') break;\n-                    \/\/ digits[maximumDigits] = '0'; \/\/ Unnecessary since we'll truncate this\n-                }\n-                ++maximumDigits; \/\/ Increment for use as count\n+                \/\/ Rounding can adjust the max digits\n+                maximumDigits = roundUp(maximumDigits);\n@@ -511,6 +512,1 @@\n-                for (int i=maximumDigits; i<count; ++i) {\n-                    if (digits[i] != '0') {\n-                        return true;\n-                    }\n-                }\n-                break;\n+                return nonZeroAfterIndex(maximumDigits);\n@@ -520,6 +516,1 @@\n-                for (int i=maximumDigits; i<count; ++i) {\n-                    if (digits[i] != '0') {\n-                        return !isNegative;\n-                    }\n-                }\n-                break;\n+                return nonZeroAfterIndex(maximumDigits) && !isNegative;\n@@ -527,6 +518,1 @@\n-                for (int i=maximumDigits; i<count; ++i) {\n-                    if (digits[i] != '0') {\n-                        return isNegative;\n-                    }\n-                }\n-                break;\n+                return nonZeroAfterIndex(maximumDigits) && isNegative;\n@@ -535,25 +521,0 @@\n-                if (digits[maximumDigits] > '5') {\n-                    \/\/ Value is above tie ==> must round up\n-                    return true;\n-                } else if (digits[maximumDigits] == '5') {\n-                    \/\/ Digit at rounding position is a '5'. Tie cases.\n-                    if (maximumDigits != (count - 1)) {\n-                        \/\/ There are remaining digits. Above tie => must round up\n-                        return true;\n-                    } else {\n-                        \/\/ Digit at rounding position is the last one !\n-                        if (valueExactAsDecimal) {\n-                            \/\/ Exact binary representation. On the tie.\n-                            \/\/ Apply rounding given by roundingMode.\n-                            return roundingMode == RoundingMode.HALF_UP;\n-                        } else {\n-                            \/\/ Not an exact binary representation.\n-                            \/\/ Digit sequence either rounded up or truncated.\n-                            \/\/ Round up only if it was truncated.\n-                            return !alreadyRounded;\n-                        }\n-                    }\n-                }\n-                \/\/ Digit at rounding position is < '5' ==> no round up.\n-                \/\/ Just let do the default, which is no round up (thus break).\n-                break;\n@@ -561,1 +522,1 @@\n-                \/\/ Implement IEEE half-even rounding\n+                \/\/ Above tie, round up for all cases\n@@ -564,0 +525,1 @@\n+                    \/\/ At tie, consider UP, DOWN, and EVEN logic\n@@ -565,0 +527,1 @@\n+                    \/\/ Rounding position is the last index, there are 3 Cases.\n@@ -566,17 +529,8 @@\n-                        \/\/ the rounding position is exactly the last index :\n-                        if (alreadyRounded)\n-                            \/\/ If FloatingDecimal rounded up (value was below tie),\n-                            \/\/ then we should not round up again.\n-                            return false;\n-\n-                        if (!valueExactAsDecimal)\n-                            \/\/ Otherwise if the digits don't represent exact value,\n-                            \/\/ value was above tie and FloatingDecimal truncated\n-                            \/\/ digits to tie. We must round up.\n-                            return true;\n-                        else {\n-                            \/\/ This is an exact tie value, and FloatingDecimal\n-                            \/\/ provided all of the exact digits. We thus apply\n-                            \/\/ HALF_EVEN rounding rule.\n-                            return ((maximumDigits > 0) &&\n-                                    (digits[maximumDigits-1] % 2 != 0));\n+                        \/\/ When exact, consider specific contract logic\n+                        if (valueExactAsDecimal) {\n+                            return (roundingMode == RoundingMode.HALF_UP) ||\n+                                    (roundingMode == RoundingMode.HALF_EVEN\n+                                            && (maximumDigits > 0) && (digits[maximumDigits - 1] % 2 != 0));\n+                        \/\/ If already rounded, do not round again, otherwise round up\n+                        } else {\n+                            return !alreadyRounded;\n@@ -584,0 +538,2 @@\n+                    \/\/ Rounding position is not the last index\n+                    \/\/ If any further digits have a non-zero value, round up\n@@ -585,5 +541,1 @@\n-                        \/\/ Rounds up if it gives a non null digit after '5'\n-                        for (int i=maximumDigits+1; i<count; ++i) {\n-                            if (digits[i] != '0')\n-                                return true;\n-                        }\n+                        return nonZeroAfterIndex(maximumDigits+1);\n@@ -592,0 +544,1 @@\n+                \/\/ Below tie, do not round up for all cases\n@@ -594,3 +547,2 @@\n-                for (int i=maximumDigits; i<count; ++i) {\n-                    if (digits[i] != '0') {\n-                        throw new ArithmeticException(\n+                if (nonZeroAfterIndex(maximumDigits)) {\n+                    throw new ArithmeticException(\n@@ -598,1 +550,0 @@\n-                    }\n@@ -608,0 +559,27 @@\n+    \/**\n+     * Round the digit list up numerically.\n+     * This involves incrementing digits from the LSD to the MSD.\n+     * @param maximumDigits The maximum number of digits to be shown.\n+     * @return The new maximum digits after rounding.\n+     *\/\n+    private int roundUp(int maximumDigits) {\n+        do {\n+            --maximumDigits;\n+            \/*\n+             * We have exhausted the max digits while attempting to round up\n+             * from the LSD to the MSD. This implies a value of all 9's. As such,\n+             * adjust representation to a single digit of one and increment the exponent.\n+             *\/\n+            if (maximumDigits < 0) {\n+                digits[0] = '1';\n+                ++decimalAt;\n+                maximumDigits = 0; \/\/ Adjust the count\n+                break;\n+            }\n+            ++digits[maximumDigits];\n+        }\n+        while (digits[maximumDigits] > '9');\n+\n+        return ++maximumDigits; \/\/ Increment for use as count\n+    }\n+\n@@ -652,2 +630,4 @@\n-            for (right = MAX_COUNT - 1; digits[right] == '0'; --right)\n-                ;\n+            right = MAX_COUNT - 1;\n+            while (digits[right] == '0') {\n+                --right;\n+            }\n@@ -657,1 +637,3 @@\n-        if (maximumDigits > 0) round(maximumDigits, false, true);\n+        if (maximumDigits > 0) {\n+            roundInt(maximumDigits);\n+        }\n@@ -695,3 +677,4 @@\n-        int right;\n-        for (right = len - 1; right >= 0 && digits[right] == '0'; --right)\n-            ;\n+        int right = len - 1;\n+        while (right >= 0 && digits[right] == '0') {\n+            --right;\n+        }\n@@ -701,1 +684,1 @@\n-            round(maximumDigits, false, true);\n+            roundInt(maximumDigits);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":85,"deletions":102,"binary":false,"changes":187,"status":"modified"},{"patch":"@@ -4728,1 +4728,1 @@\n-            String prefix = text.subSequence(prefixPos, position).toString().toUpperCase();\n+            String prefix = text.subSequence(prefixPos, position).toString().toUpperCase(Locale.ROOT);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -376,1 +376,0 @@\n- * @revised 9\n@@ -897,1 +896,0 @@\n-     * @revised 9\n@@ -1057,1 +1055,0 @@\n-     * @revised 9\n@@ -1270,1 +1267,0 @@\n-     * @revised 9\n@@ -1495,1 +1491,0 @@\n-     * @revised 9\n@@ -2238,1 +2233,0 @@\n-     * @revised 9\n@@ -2527,1 +2521,0 @@\n-     * @revised 9\n@@ -3153,1 +3146,0 @@\n-         * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,17 @@\n-import java.io.*;\n-import java.math.*;\n-import java.nio.*;\n-import java.nio.channels.*;\n-import java.nio.charset.*;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.StringReader;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.CharBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n@@ -35,1 +47,3 @@\n-import java.text.*;\n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n@@ -38,1 +52,4 @@\n-import java.util.regex.*;\n+import java.util.regex.MatchResult;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n@@ -320,1 +337,1 @@\n-    private static final int BUFFER_SIZE = 1024; \/\/ change to 1024;\n+    private static final int BUFFER_SIZE = 1024;\n@@ -326,1 +343,1 @@\n-    private Matcher matcher;\n+    private final Matcher matcher;\n@@ -374,1 +391,1 @@\n-    private PatternLRUCache patternCache = new PatternLRUCache(7);\n+    private final PatternLRUCache patternCache = new PatternLRUCache(7);\n@@ -385,1 +402,1 @@\n-    private static Pattern WHITESPACE_PATTERN = Pattern.compile(\n+    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(\n@@ -389,1 +406,1 @@\n-    private static Pattern FIND_ANY_PATTERN = Pattern.compile(\"(?s).*\");\n+    private static final Pattern FIND_ANY_PATTERN = Pattern.compile(\"(?s).*\");\n@@ -392,1 +409,1 @@\n-    private static Pattern NON_ASCII_DIGIT = Pattern.compile(\n+    private static final Pattern NON_ASCII_DIGIT = Pattern.compile(\n@@ -426,3 +443,3 @@\n-    private String digits = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n-    private String non0Digit = \"[\\\\p{javaDigit}&&[^0]]\";\n-    private int SIMPLE_GROUP_INDEX = 5;\n+    private static final String digits = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+    private static final String non0Digit = \"[\\\\p{javaDigit}&&[^0]]\";\n+    private static final int SIMPLE_GROUP_INDEX = 5;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Scanner.java","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -389,1 +389,0 @@\n- * @revised 9\n@@ -1358,2 +1357,0 @@\n-     *\n-     * @revised 9\n@@ -1643,2 +1640,0 @@\n-     *\n-     * @revised 9\n@@ -1689,2 +1684,0 @@\n-     *\n-     * @revised 9\n@@ -1724,2 +1717,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/util\/ServiceLoader.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -579,2 +579,0 @@\n-        boolean started = false;\n-\n@@ -591,1 +589,0 @@\n-                started = true;\n@@ -598,2 +595,2 @@\n-        \/\/ force owner to join if thread started\n-        if (started && Thread.currentThread() == flock.owner() && round > forkRound) {\n+        \/\/ force owner to join if this is the first fork in the round\n+        if (Thread.currentThread() == flock.owner() && round > forkRound) {\n@@ -759,0 +756,6 @@\n+     * <p> The {@linkplain Subtask.State state} of unfinished subtasks that complete at\n+     * around the time that the task scope is shutdown is not defined. A subtask that\n+     * completes successfully with a result, or fails with an exception, at around\n+     * the time that the task scope is shutdown may or may not <i>transition<\/i> to a\n+     * terminal state.\n+     *\n@@ -936,1 +939,2 @@\n-            throw new IllegalStateException(\"Subtask not completed or did not complete successfully\");\n+            throw new IllegalStateException(\n+                    \"Result is unavailable or subtask did not complete successfully\");\n@@ -946,1 +950,2 @@\n-            throw new IllegalStateException(\"Subtask not completed or did not complete with exception\");\n+            throw new IllegalStateException(\n+                    \"Exception is unavailable or subtask did not complete with exception\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-     * @since 21\n+     * @since 22\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,2 +250,1 @@\n-        int parentGroupCount = Math.max(parent.capturingGroupCount, 10);\n-        groups = new int[parentGroupCount * 2];\n+        groups = new int[parent.capturingGroupCount * 2];\n@@ -425,2 +424,1 @@\n-        int parentGroupCount = Math.max(newPattern.capturingGroupCount, 10);\n-        groups = new int[parentGroupCount * 2];\n+        groups = new int[newPattern.capturingGroupCount * 2];\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5190,0 +5190,6 @@\n+            \/\/ reference to not existing group must never match\n+            \/\/ group does not exist if matcher didn't allocate space for it\n+            if (groupIndex >= matcher.groups.length) {\n+                return false;\n+            }\n+\n@@ -5226,0 +5232,6 @@\n+            \/\/ reference to not existing group must never match\n+            \/\/ group does not exist if matcher didn't allocate space for it\n+            if (groupIndex >= matcher.groups.length) {\n+                return false;\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n- * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/ResourceBundleControlProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-import sun.security.action.GetBooleanAction;\n+import sun.security.action.GetPropertyAction;\n@@ -126,2 +126,2 @@\n-     * Flag which specifies whether the validation of the Zip64 extra\n-     * fields should be disabled\n+     * Flag to specify whether the Extra ZIP64 validation should be\n+     * disabled.\n@@ -129,2 +129,3 @@\n-    private static final boolean disableZip64ExtraFieldValidation =\n-            GetBooleanAction.privilegedGetProperty(\"jdk.util.zip.disableZip64ExtraFieldValidation\");\n+    private static final boolean DISABLE_ZIP64_EXTRA_VALIDATION =\n+            getDisableZip64ExtraFieldValidation();\n+\n@@ -1095,0 +1096,16 @@\n+    \/**\n+     * Returns the value of the System property which indicates whether the\n+     * Extra ZIP64 validation should be disabled.\n+     *\/\n+    static boolean getDisableZip64ExtraFieldValidation() {\n+        boolean result;\n+        String value = GetPropertyAction.privilegedGetProperty(\n+                \"jdk.util.zip.disableZip64ExtraFieldValidation\");\n+        if (value == null) {\n+            result = false;\n+        } else {\n+            result = value.isEmpty() || value.equalsIgnoreCase(\"true\");\n+        }\n+        return result;\n+    }\n+\n@@ -1211,1 +1228,1 @@\n-            if (elen > 0 && !disableZip64ExtraFieldValidation) {\n+            if (elen > 0 && !DISABLE_ZIP64_EXTRA_VALIDATION) {\n@@ -1263,1 +1280,4 @@\n-            while (currentOffset < extraEndOffset) {\n+            \/\/ Walk through each Extra Header. Each Extra Header Must consist of:\n+            \/\/       Header ID - 2 bytes\n+            \/\/       Data Size - 2 bytes:\n+            while (currentOffset + Integer.BYTES <= extraEndOffset) {\n@@ -1268,0 +1288,1 @@\n+                currentOffset += Short.BYTES;\n@@ -1273,1 +1294,4 @@\n-                    zerror(\"Invalid CEN header (invalid zip64 extra data field size)\");\n+                    zerror(String.format(\n+                            \"Invalid CEN header (invalid extra data field size for \" +\n+                                    \"tag: 0x%04x at %d)\",\n+                            tag, cenPos));\n@@ -1275,1 +1299,0 @@\n-                currentOffset += Short.BYTES;\n@@ -1282,0 +1305,1 @@\n+\n@@ -1305,0 +1329,10 @@\n+            \/\/ if ZIP64_EXTID blocksize == 0, which may occur with some older\n+            \/\/ versions of Apache Ant and Commons Compress, validate csize and size\n+            \/\/ to make sure neither field == ZIP64_MAGICVAL\n+            if (blockSize == 0) {\n+                if (csize == ZIP64_MAGICVAL || size == ZIP64_MAGICVAL) {\n+                    zerror(\"Invalid CEN header (invalid zip64 extra data field size)\");\n+                }\n+                \/\/ Only validate the ZIP64_EXTID data if the block size > 0\n+                return;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":43,"deletions":9,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * under the terms of the GNU General License version 2 only, as\n+ * under the terms of the GNU General Public License version 2 only, as\n@@ -13,1 +13,1 @@\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n@@ -17,1 +17,1 @@\n- * You should have received a copy of the GNU General License version\n+ * You should have received a copy of the GNU General Public License version\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * under the terms of the GNU General License version 2 only, as\n+ * under the terms of the GNU General Public License version 2 only, as\n@@ -13,1 +13,1 @@\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General License\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n@@ -17,1 +17,1 @@\n- * You should have received a copy of the GNU General License version\n+ * You should have received a copy of the GNU General Public License version\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    LINUX_S390,\n@@ -84,1 +85,5 @@\n-            }\n+            } else if (arch.equals(\"s390x\")) {\n+                if (OperatingSystem.isLinux()) {\n+                    return LINUX_S390;\n+                }\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.foreign.abi.s390.linux.LinuxS390Linker;\n@@ -63,1 +64,2 @@\n-                                                                      LinuxRISCV64Linker, FallbackLinker {\n+                                                                      LinuxRISCV64Linker, LinuxS390Linker,\n+                                                                      FallbackLinker {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.foreign.abi.s390.linux.LinuxS390Linker;\n@@ -245,0 +246,1 @@\n+            case LINUX_S390 -> LinuxS390Linker.getInstance();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 IBM Corp. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.s390;\n+\n+import jdk.internal.foreign.abi.ABIDescriptor;\n+import jdk.internal.foreign.abi.Architecture;\n+import jdk.internal.foreign.abi.StubLocations;\n+import jdk.internal.foreign.abi.VMStorage;\n+\n+public final class S390Architecture implements Architecture {\n+    public static final Architecture INSTANCE = new S390Architecture();\n+\n+    \/\/ Needs to be consistent with vmstorage_s390.hpp.\n+    public static final short REG32_MASK = 0b0000_0000_0000_0001;\n+    public static final short REG64_MASK = 0b0000_0000_0000_0011;\n+\n+    private static final int INTEGER_REG_SIZE = 8;\n+    private static final int FLOAT_REG_SIZE = 8;\n+    private static final int STACK_SLOT_SIZE = 8;\n+\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private S390Architecture() {\n+    }\n+\n+    @Override\n+    public boolean isStackType(int cls) {\n+        return cls == StorageType.STACK;\n+    }\n+\n+    @Override\n+    public int typeSize(int cls) {\n+        switch (cls) {\n+            case StorageType.INTEGER:\n+                return INTEGER_REG_SIZE;\n+            case StorageType.FLOAT:\n+                return FLOAT_REG_SIZE;\n+                \/\/ STACK is deliberately omitted\n+        }\n+\n+        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+    }\n+\n+    public interface StorageType {\n+        byte INTEGER = 0;\n+        byte FLOAT = 1;\n+        byte STACK = 2;\n+        byte PLACEHOLDER = 3;\n+    }\n+\n+    public static class Regs { \/\/ break circular dependency\n+        public static final VMStorage r0 = integerRegister(0);\n+        public static final VMStorage r1 = integerRegister(1);\n+        public static final VMStorage r2 = integerRegister(2);\n+        public static final VMStorage r3 = integerRegister(3);\n+        public static final VMStorage r4 = integerRegister(4);\n+        public static final VMStorage r5 = integerRegister(5);\n+        public static final VMStorage r6 = integerRegister(6);\n+        public static final VMStorage r7 = integerRegister(7);\n+        public static final VMStorage r8 = integerRegister(8);\n+        public static final VMStorage r9 = integerRegister(9);\n+        public static final VMStorage r10 = integerRegister(10);\n+        public static final VMStorage r11 = integerRegister(11);\n+        public static final VMStorage r12 = integerRegister(12);\n+        public static final VMStorage r13 = integerRegister(13);\n+        public static final VMStorage r14 = integerRegister(14);\n+        public static final VMStorage r15 = integerRegister(15);\n+\n+        public static final VMStorage f0 = floatRegister(0);\n+        public static final VMStorage f1 = floatRegister(1);\n+        public static final VMStorage f2 = floatRegister(2);\n+        public static final VMStorage f3 = floatRegister(3);\n+        public static final VMStorage f4 = floatRegister(4);\n+        public static final VMStorage f5 = floatRegister(5);\n+        public static final VMStorage f6 = floatRegister(6);\n+        public static final VMStorage f7 = floatRegister(7);\n+        public static final VMStorage f8 = floatRegister(8);\n+        public static final VMStorage f9 = floatRegister(9);\n+        public static final VMStorage f10 = floatRegister(10);\n+        public static final VMStorage f11 = floatRegister(11);\n+        public static final VMStorage f12 = floatRegister(12);\n+        public static final VMStorage f13 = floatRegister(13);\n+        public static final VMStorage f14 = floatRegister(14);\n+        public static final VMStorage f15 = floatRegister(15);\n+    }\n+\n+    private static VMStorage integerRegister(int index) {\n+        return new VMStorage(StorageType.INTEGER, REG64_MASK, index, \"r\" + index);\n+    }\n+\n+    private static VMStorage floatRegister(int index) {\n+        return new VMStorage(StorageType.FLOAT, REG64_MASK, index, \"f\" + index);\n+    }\n+\n+    public static VMStorage stackStorage(short size, int byteOffset) {\n+        return new VMStorage(StorageType.STACK, size, byteOffset);\n+    }\n+\n+    public static ABIDescriptor abiFor(VMStorage[] inputIntRegs,\n+                                       VMStorage[] inputFloatRegs,\n+                                       VMStorage[] outputIntRegs,\n+                                       VMStorage[] outputFloatRegs,\n+                                       VMStorage[] volatileIntRegs,\n+                                       VMStorage[] volatileFloatRegs,\n+                                       int stackAlignment,\n+                                       int shadowSpace,\n+                                       VMStorage scratch1, VMStorage scratch2) {\n+        return new ABIDescriptor(\n+            INSTANCE,\n+            new VMStorage[][] {\n+                inputIntRegs,\n+                inputFloatRegs,\n+            },\n+            new VMStorage[][] {\n+                outputIntRegs,\n+                outputFloatRegs,\n+            },\n+            new VMStorage[][] {\n+                volatileIntRegs,\n+                volatileFloatRegs,\n+            },\n+            stackAlignment,\n+            shadowSpace,\n+            scratch1, scratch2,\n+            StubLocations.TARGET_ADDRESS.storage(StorageType.PLACEHOLDER),\n+            StubLocations.RETURN_BUFFER.storage(StorageType.PLACEHOLDER),\n+            StubLocations.CAPTURED_STATE_BUFFER.storage(StorageType.PLACEHOLDER));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/s390\/S390Architecture.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -0,0 +1,311 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 IBM Corp. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.s390.linux;\n+\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import jdk.internal.foreign.abi.ABIDescriptor;\n+import jdk.internal.foreign.abi.AbstractLinker.UpcallStubFactory;\n+import jdk.internal.foreign.abi.Binding;\n+import jdk.internal.foreign.abi.CallingSequence;\n+import jdk.internal.foreign.abi.CallingSequenceBuilder;\n+import jdk.internal.foreign.abi.DowncallLinker;\n+import jdk.internal.foreign.abi.LinkerOptions;\n+import jdk.internal.foreign.abi.UpcallLinker;\n+import jdk.internal.foreign.abi.SharedUtils;\n+import jdk.internal.foreign.abi.VMStorage;\n+import jdk.internal.foreign.Utils;\n+\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static jdk.internal.foreign.abi.s390.linux.TypeClass.*;\n+import static jdk.internal.foreign.abi.s390.S390Architecture.*;\n+import static jdk.internal.foreign.abi.s390.S390Architecture.Regs.*;\n+\n+\/**\n+ * For the S390 C ABI specifically, this class uses CallingSequenceBuilder\n+ * to translate a C FunctionDescriptor into a CallingSequence, which can then be turned into a MethodHandle.\n+ *\n+ * This includes taking care of synthetic arguments like pointers to return buffers for 'in-memory' returns.\n+ *\/\n+public class LinuxS390CallArranger {\n+\n+    private static final int STACK_SLOT_SIZE = 8;\n+    public static final int MAX_REGISTER_ARGUMENTS = 5;\n+    public static final int MAX_FLOAT_REGISTER_ARGUMENTS = 4;\n+\n+    private static final ABIDescriptor CLinux = abiFor(\n+            new VMStorage[] { r2, r3, r4, r5, r6, }, \/\/ GP input\n+            new VMStorage[] { f0, f2, f4, f6 }, \/\/ FP input\n+            new VMStorage[] { r2, }, \/\/ GP output\n+            new VMStorage[] { f0, }, \/\/ FP output\n+            new VMStorage[] { r0, r1, r2, r3, r4, r5, r14 }, \/\/ volatile GP\n+            new VMStorage[] { f1, f3, f5, f7 }, \/\/ volatile FP (excluding argument registers)\n+            8, \/\/ Stack is always 8 byte aligned on S390\n+            160, \/\/ ABI header\n+            r0, r1 \/\/ scratch reg r0 & r1\n+            );\n+\n+    public record Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {}\n+\n+    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {\n+        return getBindings(mt, cDesc, forUpcall, LinkerOptions.empty());\n+    }\n+\n+    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall, LinkerOptions options) {\n+        CallingSequenceBuilder csb = new CallingSequenceBuilder(CLinux, forUpcall, options);\n+\n+        BindingCalculator argCalc = forUpcall ? new BoxBindingCalculator(true) : new UnboxBindingCalculator(true);\n+        BindingCalculator retCalc = forUpcall ? new UnboxBindingCalculator(false) : new BoxBindingCalculator(false);\n+\n+        boolean returnInMemory = isInMemoryReturn(cDesc.returnLayout());\n+        if (returnInMemory) {\n+            Class<?> carrier = MemorySegment.class;\n+            MemoryLayout layout =SharedUtils.C_POINTER;\n+            csb.addArgumentBindings(carrier, layout, argCalc.getBindings(carrier, layout));\n+        } else if (cDesc.returnLayout().isPresent()) {\n+            Class<?> carrier = mt.returnType();\n+            MemoryLayout layout = cDesc.returnLayout().get();\n+            csb.setReturnBindings(carrier, layout, retCalc.getBindings(carrier, layout));\n+        }\n+\n+        for (int i = 0; i < mt.parameterCount(); i++) {\n+            Class<?> carrier = mt.parameterType(i);\n+            MemoryLayout layout = cDesc.argumentLayouts().get(i);\n+            csb.addArgumentBindings(carrier, layout, argCalc.getBindings(carrier, layout));\n+        }\n+\n+        return new Bindings(csb.build(), returnInMemory);\n+    }\n+\n+    public static MethodHandle arrangeDowncall(MethodType mt, FunctionDescriptor cDesc, LinkerOptions options) {\n+        Bindings bindings = getBindings(mt, cDesc, false, options);\n+\n+        MethodHandle handle = new DowncallLinker(CLinux, bindings.callingSequence).getBoundMethodHandle();\n+\n+        if (bindings.isInMemoryReturn) {\n+            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc, bindings.callingSequence);\n+        }\n+\n+        return handle;\n+    }\n+\n+    public static UpcallStubFactory arrangeUpcall(MethodType mt, FunctionDescriptor cDesc, LinkerOptions options) {\n+        Bindings bindings = getBindings(mt, cDesc, true, options);\n+\n+        final boolean dropReturn = true; \/* drop return, since we don't have bindings for it *\/\n+        return SharedUtils.arrangeUpcallHelper(mt, bindings.isInMemoryReturn, dropReturn, CLinux,\n+                bindings.callingSequence);\n+    }\n+\n+    private static boolean isInMemoryReturn(Optional<MemoryLayout> returnLayout) {\n+        return returnLayout\n+            .filter(layout -> layout instanceof GroupLayout)\n+            .isPresent();\n+    }\n+\n+    static class StorageCalculator {\n+        private final boolean forArguments;\n+\n+        private final int[] nRegs = new int[] { 0, 0 };\n+        private long stackOffset = 0;\n+\n+        public StorageCalculator(boolean forArguments) {\n+            this.forArguments = forArguments;\n+        }\n+\n+        VMStorage stackAlloc(long size, long alignment) {\n+            long alignedStackOffset = Utils.alignUp(stackOffset, alignment);\n+\n+            short encodedSize = (short) size;\n+            assert (encodedSize & 0xFFFF) == size;\n+\n+            VMStorage storage = stackStorage(encodedSize, (int) alignedStackOffset);\n+            stackOffset = alignedStackOffset + size;\n+            return storage;\n+        }\n+\n+        VMStorage regAlloc(int type) {\n+            int gpRegCnt = (type == StorageType.INTEGER) ? 1 : 0;\n+            int fpRegCnt = (type == StorageType.FLOAT) ? 1 : 0;\n+\n+            \/\/ Use stack if not enough registers available.\n+            if ((type == StorageType.FLOAT && (nRegs[StorageType.FLOAT] + fpRegCnt) > MAX_FLOAT_REGISTER_ARGUMENTS)\n+                    || (type == StorageType.INTEGER && (nRegs[StorageType.INTEGER] + gpRegCnt) > MAX_REGISTER_ARGUMENTS)) return null;\n+\n+            VMStorage[] source = (forArguments ? CLinux.inputStorage : CLinux.outputStorage)[type];\n+            VMStorage result = source[nRegs[type]];\n+\n+            nRegs[StorageType.INTEGER] += gpRegCnt;\n+            nRegs[StorageType.FLOAT] += fpRegCnt;\n+            return result;\n+\n+        }\n+        VMStorage getStorage(int type, boolean is32Bit) {\n+            VMStorage reg = regAlloc(type);\n+            if (reg != null) {\n+                if (is32Bit) {\n+                    reg = new VMStorage(reg.type(), REG32_MASK, reg.indexOrOffset());\n+                }\n+                return reg;\n+            }\n+            VMStorage stack;\n+            if (is32Bit) {\n+                stackAlloc(4, STACK_SLOT_SIZE); \/\/ Skip first half of stack slot.\n+                stack = stackAlloc(4, 4);\n+            } else\n+                stack = stackAlloc(8, STACK_SLOT_SIZE);\n+\n+            return stack;\n+        }\n+    }\n+\n+    abstract static class BindingCalculator {\n+        protected final StorageCalculator storageCalculator;\n+\n+        protected BindingCalculator(boolean forArguments) {\n+            this.storageCalculator = new LinuxS390CallArranger.StorageCalculator(forArguments);\n+        }\n+\n+        abstract List<Binding> getBindings(Class<?> carrier, MemoryLayout layout);\n+    }\n+\n+    \/\/ Compute recipe for transferring arguments \/ return values to C from Java.\n+    static class UnboxBindingCalculator extends BindingCalculator {\n+        UnboxBindingCalculator(boolean forArguments) {\n+            super(forArguments);\n+        }\n+\n+        @Override\n+        List<Binding> getBindings(Class<?> carrier, MemoryLayout layout) {\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout);\n+            Binding.Builder bindings = Binding.builder();\n+            switch (argumentClass) {\n+                case STRUCT_REGISTER -> {\n+                    assert carrier == MemorySegment.class;\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    Class<?> type = SharedUtils.primitiveCarrierForSize(layout.byteSize(), false);\n+                    bindings.bufferLoad(0, type)\n+                            .vmStore(storage, type);\n+                }\n+                case STRUCT_SFA -> {\n+                    assert carrier == MemorySegment.class;\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.FLOAT, layout.byteSize() == 4);\n+                    Class<?> type = SharedUtils.primitiveCarrierForSize(layout.byteSize(), true);\n+                    bindings.bufferLoad(0, type)\n+                            .vmStore(storage, type);\n+                }\n+                case STRUCT_REFERENCE -> {\n+                    assert carrier == MemorySegment.class;\n+                    bindings.copy(layout)\n+                            .unboxAddress();\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.vmStore(storage, long.class);\n+                }\n+                case POINTER -> {\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.unboxAddress()\n+                            .vmStore(storage, long.class);\n+                }\n+                case INTEGER -> {\n+                    \/\/ ABI requires all int types to get extended to 64 bit.\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.vmStore(storage, carrier);\n+                }\n+                case FLOAT -> {\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.FLOAT, carrier == float.class);\n+                    bindings.vmStore(storage, carrier);\n+                }\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+            }\n+            return bindings.build();\n+        }\n+    }\n+\n+    \/\/ Compute recipe for transferring arguments \/ return values from C to Java.\n+    static class BoxBindingCalculator extends BindingCalculator {\n+        BoxBindingCalculator(boolean forArguments) {\n+            super(forArguments);\n+        }\n+\n+        @Override\n+        List<Binding> getBindings(Class<?> carrier, MemoryLayout layout) {\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout);\n+            Binding.Builder bindings = Binding.builder();\n+            switch (argumentClass) {\n+                case STRUCT_REGISTER -> {\n+                    assert carrier == MemorySegment.class;\n+                    bindings.allocate(layout)\n+                            .dup();\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    Class<?> type = SharedUtils.primitiveCarrierForSize(layout.byteSize(), false);\n+                    bindings.vmLoad(storage, type)\n+                            .bufferStore(0, type);\n+                }\n+                case STRUCT_SFA -> {\n+                    assert carrier == MemorySegment.class;\n+                    bindings.allocate(layout)\n+                            .dup();\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.FLOAT, layout.byteSize() == 4);\n+                    Class<?> type = SharedUtils.primitiveCarrierForSize(layout.byteSize(), true);\n+                    bindings.vmLoad(storage, type)\n+                            .bufferStore(0, type);\n+                }\n+                case STRUCT_REFERENCE -> {\n+                    assert carrier == MemorySegment.class;\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.vmLoad(storage, long.class)\n+                            .boxAddress(layout);\n+                }\n+                case POINTER -> {\n+                    AddressLayout addressLayout = (AddressLayout) layout;\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.vmLoad(storage, long.class)\n+                            .boxAddressRaw(Utils.pointeeByteSize(addressLayout), Utils.pointeeByteAlign(addressLayout));\n+                }\n+                case INTEGER -> {\n+                    \/\/ We could use carrier != long.class for BoxBindingCalculator, but C always uses 64 bit slots.\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.INTEGER, false);\n+                    bindings.vmLoad(storage, carrier);\n+                }\n+                case FLOAT -> {\n+                    VMStorage storage = storageCalculator.getStorage(StorageType.FLOAT, carrier == float.class);\n+                    bindings.vmLoad(storage, carrier);\n+                }\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+            }\n+            return bindings.build();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/s390\/linux\/LinuxS390CallArranger.java","additions":311,"deletions":0,"binary":false,"changes":311,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 IBM Corp. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.s390.linux;\n+\n+import jdk.internal.foreign.abi.AbstractLinker;\n+import jdk.internal.foreign.abi.LinkerOptions;\n+\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.nio.ByteOrder;\n+\n+public final class LinuxS390Linker extends AbstractLinker {\n+\n+    public static LinuxS390Linker getInstance() {\n+        final class Holder {\n+            private static final LinuxS390Linker INSTANCE = new LinuxS390Linker();\n+        }\n+\n+        return Holder.INSTANCE;\n+    }\n+\n+    private LinuxS390Linker() {\n+        \/\/ Ensure there is only one instance\n+    }\n+\n+    @Override\n+    protected MethodHandle arrangeDowncall(MethodType inferredMethodType, FunctionDescriptor function, LinkerOptions options) {\n+        return LinuxS390CallArranger.arrangeDowncall(inferredMethodType, function, options);\n+    }\n+\n+    @Override\n+    protected UpcallStubFactory arrangeUpcall(MethodType targetType, FunctionDescriptor function, LinkerOptions options) {\n+        return LinuxS390CallArranger.arrangeUpcall(targetType, function, options);\n+    }\n+\n+    @Override\n+    protected ByteOrder linkerByteOrder() {\n+        return ByteOrder.BIG_ENDIAN;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/s390\/linux\/LinuxS390Linker.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 IBM Corp. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.s390.linux;\n+\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public enum TypeClass {\n+    STRUCT_REGISTER,\n+    STRUCT_SFA, \/\/ Single Float Aggregate\n+    STRUCT_REFERENCE,\n+    POINTER,\n+    INTEGER,\n+    FLOAT;\n+\n+    private static TypeClass classifyValueType(ValueLayout type) {\n+        Class<?> carrier = type.carrier();\n+        if (carrier == boolean.class || carrier == byte.class || carrier == char.class ||\n+                carrier == short.class || carrier == int.class || carrier == long.class) {\n+            return INTEGER;\n+        } else if (carrier == float.class || carrier == double.class) {\n+            return FLOAT;\n+        } else if (carrier == MemorySegment.class) {\n+            return POINTER;\n+        } else {\n+            throw new IllegalStateException(\"Cannot get here: \" + carrier.getName());\n+        }\n+    }\n+\n+    private static boolean isRegisterAggregate(MemoryLayout type) {\n+        long byteSize = type.byteSize();\n+        if (byteSize > 8 || byteSize == 3 || byteSize == 5 || byteSize == 6 || byteSize == 7)\n+            return false;\n+        return true;\n+    }\n+\n+    static List<MemoryLayout> scalarLayouts(GroupLayout gl) {\n+        List<MemoryLayout> out = new ArrayList<>();\n+        scalarLayoutsInternal(out, gl);\n+        return out;\n+    }\n+\n+    private static void scalarLayoutsInternal(List<MemoryLayout> out, GroupLayout gl) {\n+        for (MemoryLayout member : gl.memberLayouts()) {\n+            if (member instanceof GroupLayout memberGl) {\n+                scalarLayoutsInternal(out, memberGl);\n+            } else if (member instanceof SequenceLayout memberSl) {\n+                for (long i = 0; i < memberSl.elementCount(); i++) {\n+                    out.add(memberSl.elementLayout());\n+                }\n+            } else {\n+                \/\/ padding or value layouts\n+                out.add(member);\n+            }\n+        }\n+    }\n+\n+    static boolean isSingleFloatAggregate(MemoryLayout type) {\n+        List<MemoryLayout> scalarLayouts = scalarLayouts((GroupLayout) type);\n+\n+        final int numElements = scalarLayouts.size();\n+        if (numElements > 1 || numElements == 0)\n+            return false;\n+\n+        MemoryLayout baseType = scalarLayouts.get(0);\n+\n+        if (!(baseType instanceof ValueLayout))\n+            return false;\n+\n+        TypeClass baseArgClass = classifyValueType((ValueLayout) baseType);\n+        if (baseArgClass != FLOAT)\n+            return false;\n+\n+        return true;\n+    }\n+\n+    private static TypeClass classifyStructType(MemoryLayout layout) {\n+\n+        if (!isRegisterAggregate(layout)) {\n+            return TypeClass.STRUCT_REFERENCE;\n+        }\n+\n+        if (isSingleFloatAggregate(layout)) {\n+            return TypeClass.STRUCT_SFA;\n+        }\n+        return TypeClass.STRUCT_REGISTER;\n+    }\n+\n+    public static TypeClass classifyLayout(MemoryLayout type) {\n+        if (type instanceof ValueLayout) {\n+            return classifyValueType((ValueLayout) type);\n+        } else if (type instanceof GroupLayout) {\n+            return classifyStructType(type);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + type);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/s390\/linux\/TypeClass.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -119,1 +119,1 @@\n-        if (!forUpcall) {\n+        if (!forUpcall && options.isVariadicFunction()) {\n@@ -132,1 +132,3 @@\n-        handle = MethodHandles.insertArguments(handle, handle.type().parameterCount() - 1, bindings.nVectorArgs);\n+        if (options.isVariadicFunction()) {\n+            handle = MethodHandles.insertArguments(handle, handle.type().parameterCount() - 1, bindings.nVectorArgs);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,4 +44,0 @@\n-    \/**\n-     * current index\n-     *\/\n-    private char mAttrIdx = 0;\n@@ -53,1 +49,1 @@\n-        \/\/              The default number of attributies capacity is 8.\n+        \/\/              The default number of attributes capacity is 8.\n@@ -139,1 +135,1 @@\n-     * \"CDATA\" as stated in the XML 1.0 Recommentation (clause 3.3.3,\n+     * \"CDATA\" as stated in the XML 1.0 Recommendation (clause 3.3.3,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/impl\/Attrs.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.util.Locale;\n@@ -1604,1 +1605,1 @@\n-                                    || (mXml.name.equals(str.toLowerCase()) == true)) {\n+                                    || (mXml.name.equals(str.toLowerCase(Locale.ROOT)) == true)) {\n@@ -2861,1 +2862,1 @@\n-                expenc = is.getEncoding().toUpperCase();\n+                expenc = is.getEncoding().toUpperCase(Locale.ROOT);\n@@ -3159,1 +3160,1 @@\n-                            str = name(false).toLowerCase();\n+                            str = name(false).toLowerCase(Locale.ROOT);\n@@ -3173,1 +3174,1 @@\n-                                mInp.xmlenc = eqstr('=').toUpperCase();\n+                                mInp.xmlenc = eqstr('=').toUpperCase(Locale.ROOT);\n@@ -3181,1 +3182,1 @@\n-                                str = eqstr('=').toLowerCase();\n+                                str = eqstr('=').toLowerCase(Locale.ROOT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/impl\/Parser.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1318,1 +1318,1 @@\n-        return s.stream().map(e -> e.toString().toLowerCase());\n+        return s.stream().map(e -> e.toString().toLowerCase(Locale.ROOT));\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-            String regex = disjunctToRegex(disjunct.toLowerCase());\n+            String regex = disjunctToRegex(disjunct.toLowerCase(Locale.ROOT));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/spi\/DefaultProxySelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private Hashtable<String, MimeEntry> entries = new Hashtable<>();\n+    private final Hashtable<String, MimeEntry> entries = new Hashtable<>();\n@@ -51,1 +51,1 @@\n-    private Hashtable<String, MimeEntry> extensionMap = new Hashtable<>();\n+    private final Hashtable<String, MimeEntry> extensionMap = new Hashtable<>();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    private static HashMap<String,Void> proxiedHosts = new HashMap<>();\n+    private static final HashMap<String,Void> proxiedHosts = new HashMap<>();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/URLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    private HttpClient hc;\n+    private final HttpClient hc;\n@@ -59,1 +59,1 @@\n-    private MessageHeader responses;\n+    private final MessageHeader responses;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/ChunkedInputStream.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    private byte buf[];\n+    private final byte[] buf;\n@@ -62,3 +62,3 @@\n-    private int preferredChunkDataSize;\n-    private int preferedHeaderSize;\n-    private int preferredChunkGrossSize;\n+    private final int preferredChunkDataSize;\n+    private final int preferredHeaderSize;\n+    private final int preferredChunkGrossSize;\n@@ -66,1 +66,1 @@\n-    private byte[] completeHeader;\n+    private final byte[] completeHeader;\n@@ -122,2 +122,2 @@\n-        preferedHeaderSize = getHeaderSize(preferredChunkDataSize);\n-        preferredChunkGrossSize = preferedHeaderSize + preferredChunkDataSize\n+        preferredHeaderSize = getHeaderSize(preferredChunkDataSize);\n+        preferredChunkGrossSize = preferredHeaderSize + preferredChunkDataSize\n@@ -154,1 +154,1 @@\n-                int adjustedHeaderStartIndex = preferedHeaderSize -\n+                int adjustedHeaderStartIndex = preferredHeaderSize -\n@@ -280,1 +280,1 @@\n-            count = preferedHeaderSize;\n+            count = preferredHeaderSize;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/ChunkedOutputStream.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-    private File file;\n+    private final File file;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpCapture.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    protected static KeepAliveCache kac = new KeepAliveCache();\n+    protected static final KeepAliveCache kac = new KeepAliveCache();\n@@ -103,1 +103,1 @@\n-    private static boolean keepAliveProp = true;\n+    private static final boolean keepAliveProp;\n@@ -107,1 +107,1 @@\n-    private static boolean retryPostProp = true;\n+    private static final boolean retryPostProp;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    protected static int MAX_DATA_REMAINING = 512;\n+    protected static final int MAX_DATA_REMAINING;\n@@ -57,1 +57,1 @@\n-    protected static int MAX_CAPACITY = 10;\n+    protected static final int MAX_CAPACITY;\n@@ -71,1 +71,1 @@\n-                    return NetProperties.getInteger(maxDataKey, MAX_DATA_REMAINING);\n+                    return NetProperties.getInteger(maxDataKey, 512);\n@@ -80,1 +80,1 @@\n-                    return NetProperties.getInteger(maxCapacityKey, MAX_CAPACITY);\n+                    return NetProperties.getInteger(maxCapacityKey, 10);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveStreamCleaner.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,4 +45,4 @@\n-    static String CONTENT_LENGTH = \"content-length\";\n-    static String CONTENT_TYPE = \"content-type\";\n-    static String TEXT_PLAIN = \"text\/plain\";\n-    static String LAST_MODIFIED = \"last-modified\";\n+    private static final String CONTENT_LENGTH = \"content-length\";\n+    private static final String CONTENT_TYPE = \"content-type\";\n+    private static final String TEXT_PLAIN = \"text\/plain\";\n+    private static final String LAST_MODIFIED = \"last-modified\";\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,4 +26,0 @@\n-\/**\n- * FTP stream opener.\n- *\/\n-\n@@ -87,1 +83,1 @@\n-    private Proxy instProxy;\n+    private final Proxy instProxy;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/ftp\/FtpURLConnection.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    static String authPref=null;\n+    private static final String authPref;\n@@ -101,1 +101,1 @@\n-        authPref = GetPropertyAction.privilegedGetProperty(\"http.auth.preference\");\n+        String pref = GetPropertyAction.privilegedGetProperty(\"http.auth.preference\");\n@@ -109,4 +109,4 @@\n-        if (authPref != null) {\n-            authPref = authPref.toLowerCase(Locale.ROOT);\n-            if(authPref.equals(\"spnego\") || authPref.equals(\"kerberos\")) {\n-                authPref = \"negotiate\";\n+        if (pref != null) {\n+            pref = pref.toLowerCase(Locale.ROOT);\n+            if (pref.equals(\"spnego\") || pref.equals(\"kerberos\")) {\n+                pref = \"negotiate\";\n@@ -115,0 +115,1 @@\n+        authPref = pref;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthenticationHeader.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -174,5 +174,1 @@\n-        private static Random   random;\n-\n-        static {\n-            random = new Random();\n-        }\n+        private static final Random random = new Random();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-    private static boolean enableESBuffer = false;\n+    private static final boolean enableESBuffer;\n@@ -169,1 +169,1 @@\n-    private static int timeout4ESBuffer = 0;\n+    private static final int timeout4ESBuffer;\n@@ -173,1 +173,1 @@\n-    private static int bufSize4ES = 0;\n+    private static final int bufSize4ES;\n@@ -267,1 +267,1 @@\n-        timeout4ESBuffer = GetIntegerAction.privilegedGetProperty(\n+        int esBufferTimeout = GetIntegerAction.privilegedGetProperty(\n@@ -269,2 +269,2 @@\n-        if (timeout4ESBuffer <= 0) {\n-            timeout4ESBuffer = 300; \/\/ use the default\n+        if (esBufferTimeout <= 0) {\n+            esBufferTimeout = 300; \/\/ use the default\n@@ -272,0 +272,1 @@\n+        timeout4ESBuffer = esBufferTimeout;\n@@ -273,1 +274,1 @@\n-        bufSize4ES = GetIntegerAction.privilegedGetProperty(\n+        int esBufSize = GetIntegerAction.privilegedGetProperty(\n@@ -275,2 +276,2 @@\n-        if (bufSize4ES <= 0) {\n-            bufSize4ES = 4096; \/\/ use the default\n+        if (esBufSize <= 0) {\n+            esBufSize = 4096; \/\/ use the default\n@@ -278,0 +279,1 @@\n+        bufSize4ES = esBufSize;\n@@ -352,1 +354,1 @@\n-    private MessageHeader userHeaders;\n+    private final MessageHeader userHeaders;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,1 +249,1 @@\n-        private JarEntry je;\n+        private final JarEntry je;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/URLJarFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -213,2 +213,0 @@\n-    private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];\n-\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/TypeVariableImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -560,11 +560,0 @@\n-    \/**\n-     * Returns all signerInfos which self-verify.\n-     *\n-     * @exception NoSuchAlgorithmException on unrecognized algorithms.\n-     * @exception SignatureException on signature handling errors.\n-     *\/\n-    public SignerInfo[] verify()\n-    throws NoSuchAlgorithmException, SignatureException {\n-        return verify(null);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Locale;\n@@ -152,1 +153,1 @@\n-            ntdomain = s.substring (0, i).toUpperCase();\n+            ntdomain = s.substring (0, i).toUpperCase(Locale.ROOT);\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/www\/protocol\/http\/ntlm\/NTLMAuthentication.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import static sun.nio.fs.UnixConstants.*;\n@@ -265,2 +266,3 @@\n-            try {\n-                if (followLinks) {\n+\n+            if (followLinks) {\n+                try {\n@@ -268,2 +270,16 @@\n-                } else {\n-                    int fd = file.openForAttributeAccess(false);\n+                } catch (UnixException e) {\n+                    e.rethrowAsIOException(file);\n+                }\n+                return;\n+            }\n+\n+            if (O_NOFOLLOW == 0) {\n+                throw new IOException(\"NOFOLLOW_LINKS is not supported on this platform\");\n+            }\n+\n+            int fd = -1;\n+            try {\n+                fd = open(file, O_RDONLY, O_NOFOLLOW);\n+            } catch (UnixException e1) {\n+                if (e1.errno() == EACCES) {\n+                    \/\/ retry with write access if there is no read permission\n@@ -271,3 +287,3 @@\n-                        fchmod(fd, mode);\n-                    } finally {\n-                        close(fd);\n+                        fd = open(file, O_WRONLY, O_NOFOLLOW);\n+                    } catch (UnixException e2) {\n+                        e2.rethrowAsIOException(file);\n@@ -275,0 +291,2 @@\n+                } else {\n+                    e1.rethrowAsIOException(file);\n@@ -276,2 +294,10 @@\n-            } catch (UnixException x) {\n-                x.rethrowAsIOException(file);\n+            }\n+\n+            try {\n+                try {\n+                    fchmod(fd, mode);\n+                } finally {\n+                    close(fd);\n+                }\n+            } catch (UnixException e) {\n+                e.rethrowAsIOException(file);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-                s = s.trim().toLowerCase();\n+                s = s.trim().toLowerCase(Locale.ROOT);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.FileSystemException;\n@@ -522,0 +523,2 @@\n+            if (x.errno() == EEXIST && flags.replaceExisting)\n+                throw new FileSystemException(target.toString());\n@@ -668,0 +671,2 @@\n+                if (x.errno() == EEXIST && flags.replaceExisting)\n+                    throw new FileSystemException(target.toString());\n@@ -786,0 +791,2 @@\n+            if (x.errno() == EEXIST && flags.replaceExisting)\n+                throw new FileSystemException(target.toString());\n@@ -800,0 +807,2 @@\n+            if (x.errno() == EEXIST && flags.replaceExisting)\n+                throw new FileSystemException(target.toString());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-#ifdef _AIX\n-#include <unistd.h>\n-#endif\n-\n@@ -47,10 +43,0 @@\n-#ifdef _AIX\n-static long calculate_number_of_pages_in_range(void* address, size_t len, size_t pagesize) {\n-    uintptr_t address_unaligned = (uintptr_t) address;\n-    uintptr_t address_aligned = address_unaligned & (~(pagesize - 1));\n-    size_t len2 = len + (address_unaligned - address_aligned);\n-    long numPages = (len2 + pagesize - 1) \/ pagesize;\n-    return numPages;\n-}\n-#endif\n-\n@@ -67,9 +53,0 @@\n-#ifdef _AIX\n-    \/* See JDK-8186665 *\/\n-    size_t pagesize = (size_t)sysconf(_SC_PAGESIZE);\n-    if ((long)pagesize == -1) {\n-        return JNI_FALSE;\n-    }\n-    numPages = (jlong) calculate_number_of_pages_in_range(a, len, pagesize);\n-#endif\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/MappedMemoryUtils.c","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,1 +396,1 @@\n-        String upPath = executablePath.toUpperCase();\n+        String upPath = executablePath.toUpperCase(Locale.ROOT);\n","filename":"src\/java.base\/windows\/classes\/java\/lang\/ProcessImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Locale;\n@@ -98,1 +99,1 @@\n-                    localhost = InetAddress.getLocalHost().getHostName().toUpperCase();\n+                    localhost = InetAddress.getLocalHost().getHostName().toUpperCase(Locale.ROOT);\n@@ -139,1 +140,1 @@\n-                ntdomain = s.substring (0, i).toUpperCase();\n+                ntdomain = s.substring (0, i).toUpperCase(Locale.ROOT);\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/http\/ntlm\/NTLMAuthentication.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -156,1 +156,0 @@\n-     * @revised 9\n@@ -197,1 +196,0 @@\n-     * @revised 9\n@@ -234,1 +232,0 @@\n-     * @revised 9\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Element.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -130,2 +130,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-     * returning the <i>prototypical<\/i> type for an element\n+     * returning the <dfn>{@index \"prototypical type\"}<\/dfn> for an element\n@@ -101,0 +101,6 @@\n+     * Otherwise, for a non-generic class or interface, the\n+     * prototypical type mirror corresponds to a use of the type.\n+     * None of the components of the prototypical type are annotated,\n+     * including the prototypical type itself.\n+     *\n+     * @apiNote\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,0 +113,1 @@\n+ * @see javax.lang.model##elementsAndTypes Elements and Types\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * model\"}, a model of the declarations and types of the Java\n+ * model\"}, a reflective API that models the declarations and types of the Java\n@@ -55,0 +55,79 @@\n+ * <h2><a id=elementsAndTypes>Elements and Types<\/a><\/h2>\n+ *\n+ * <h3><a id=DefUse>Definitions and Uses<\/a><\/h3>\n+ *\n+ * In broad terms the {@link javax.lang.model.element element} package\n+ * models the declarations, that is the <em>definitions<\/em>, of elements while\n+ * the {@link javax.lang.model.type type} package models <em>uses<\/em>\n+ * of types. In general, distinct uses can have individualized\n+ * information separate from the information associated with the\n+ * definition. In some sense, the information in the definition is\n+ * shared by all the uses.\n+\n+ * <p>For example, consider the uses of {@code\n+ * java.lang.String} in the string processing method {@code\n+ * identityOrEmpty} below:\n+ *\n+ * {@snippet lang=java :\n+ * \/\/ Return the argument if it is non-null and the empty string otherwise.\n+ * public static @DefinitelyNotNull String identityOrEmpty(@MightBeNull String argument) {\n+ *    ...\n+ * }\n+ * }\n+ *\n+ * The return type of the method is a {@code String} annotated with\n+ * a {@code @DefinitelyNotNull} type annotation while the type of\n+ * the parameter is a {@code String} annotated with a {@code\n+ * @MightBeNull} type annotation. In a reflective API, since the set\n+ * of annotations is different for the two <em>uses<\/em> of {@code\n+ * String} as a type, the return type and argument type would need to\n+ * be represented by different objects to distinguish between these two\n+ * cases. The <em>definition<\/em> of {@code java.lang.String} itself\n+ * is annotated with neither of the type annotations in question.\n+ *\n+ * <p>Another example, consider the declaration of the generic\n+ * interface (JLS {@jls 9.1.2}) {@code java.util.Set} which has one\n+ * type parameter. This declaration captures commonality between the\n+ * many parameterized types (JLS {@jls 4.5}) derived from that\n+ * declaration such as {@code java.util.Set<String>}, {@code\n+ * java.util.Set<E>}, {@code java.util.Set<?>}, and also the raw type\n+ * (JLS {@jls 4.8}) {@code java.util.Set}.\n+ *\n+ * <h3><a id=elementTypeMapping>Mapping between Elements and Types<\/a><\/h3>\n+ *\n+ * While distinct concepts, there are bidirectional (partial) mappings\n+ * between elements and types, between definitions and uses. For\n+ * example, roughly speaking, information that would be invariant for\n+ * all uses of a type can be retrieved from the element defining a\n+ * type. For example, consider a {@link\n+ * javax.lang.model.type.DeclaredType DeclaredType} type mirror\n+ * modeling a use of {@code java.lang.String}. Calling {@link\n+ * javax.lang.model.type.DeclaredType#asElement()} would return the\n+ * {@link javax.lang.model.element.TypeElement} for {@code\n+ * java.lang.String}. From the {@code TypeElement}, common information\n+ * such as {@linkplain\n+ * javax.lang.model.element.TypeElement#getSimpleName() name} and\n+ * {@linkplain javax.lang.model.element.TypeElement#getModifiers()\n+ * modifiers} can be retrieved.\n+ *\n+ * <p>All elements can be {@linkplain\n+ * javax.lang.model.element.Element#asType() mapped to} some type.\n+ * The elements for classes and interfaces get {@linkplain\n+ * javax.lang.model.element.TypeElement#asType() mapped to} a\n+ * {@linkplain javax.lang.model.element.TypeElement#asType() prototypical type}.\n+ * Conversely, in general, many types can map to the same\n+ * {@linkplain javax.lang.model.element.TypeElement type element}. For\n+ * example, the type mirror for the raw type {@code java.util.Set},\n+ * the prototypical type {@code java.util.Set<E>}, and the type {@code\n+ * java.util.Set<String>} would all {@linkplain\n+ * javax.lang.model.type.DeclaredType#asElement() map to} the type\n+ * element for {@code java.util.Set}. Several kinds of types can be\n+ * mapped to elements, but other kinds of types do <em>not<\/em> have\n+ * an {@linkplain javax.lang.model.util.Types#asElement(TypeMirror)\n+ * element mapping}.  For example, the type mirror of an {@linkplain\n+ * javax.lang.model.type.ExecutableType executable type} does\n+ * <em>not<\/em> have an element mapping while a {@linkplain\n+ * javax.lang.model.type.DeclaredType declared type} would map to a\n+ * {@linkplain javax.lang.model.element.TypeElement type element}, as\n+ * discussed above.\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/package-info.java","additions":81,"deletions":2,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+ * @see javax.lang.model##elementsAndTypes Elements and Types\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/type\/package-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,2 +123,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/StandardLocation.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.security.AccessController;\n@@ -43,0 +44,1 @@\n+import sun.security.action.GetBooleanAction;\n@@ -51,4 +53,4 @@\n-    \/*\n-     * Name of the system property that enables the Jar soundbank loading\n-     * true if jar sound bank is allowed to be loaded\n-     * default is false\n+    \/**\n+     * Value of the system property that enables the Jar soundbank loading\n+     * {@code true} if jar sound bank is allowed to be loaded default is\n+     * {@code false}.\n@@ -56,1 +58,4 @@\n-    private final static String JAR_SOUNDBANK_ENABLED = \"jdk.sound.jarsoundbank\";\n+    @SuppressWarnings(\"removal\")\n+    private static final boolean JAR_SOUNDBANK_ENABLED =\n+            AccessController.doPrivileged(\n+                    new GetBooleanAction(\"jdk.sound.jarsoundbank\"));\n@@ -81,1 +86,1 @@\n-        if (!Boolean.getBoolean(JAR_SOUNDBANK_ENABLED) || !isZIP(url))\n+        if (!JAR_SOUNDBANK_ENABLED || !isZIP(url))\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JARSoundbankReader.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-     * The maximum normalized component values.\n+     * The minimum normalized component values.\n@@ -101,1 +101,1 @@\n-     * The minimum normalized component values.\n+     * The maximum normalized component values.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ColorSpace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n- *   <p><img src=\"doc-files\/BoxLayout-1.gif\"\n+ *   <p><img src=\"doc-files\/BoxLayout-1.svg\"\n@@ -43,1 +43,1 @@\n- *      width=\"191\" height=\"201\">\n+ *      width=\"160\" height=\"160\">\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BoxLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"filename":"src\/java.desktop\/share\/classes\/javax\/swing\/doc-files\/BoxLayout-1.gif","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+ Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ This code is free software; you can redistribute it and\/or modify it\n+ under the terms of the GNU General Public License version 2 only, as\n+ published by the Free Software Foundation.  Oracle designates this\n+ particular file as subject to the \"Classpath\" exception as provided\n+ by Oracle in the LICENSE file that accompanied this code.\n+\n+ This code is distributed in the hope that it will be useful, but WITHOUT\n+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ version 2 for more details (a copy is included in the LICENSE file that\n+ accompanied this code).\n+\n+ You should have received a copy of the GNU General Public License version\n+ 2 along with this work; if not, write to the Free Software Foundation,\n+ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ or visit www.oracle.com if you need additional information or have any\n+ questions.\n+-->\n+\n+<svg width=\"160\" height=\"160\"\n+     version=\"1.1\"\n+     xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+     xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\n+    <style><![CDATA[\n+        rect {\n+            fill: none;\n+            stroke: black;\n+            stroke-width: 1;\n+        }\n+        text {\n+            font: 16px 'DejaVu Sans', sans-serif;\n+            text-anchor: middle;\n+            dominant-baseline: middle;\n+        }\n+        text.left {\n+            text-anchor: start;\n+            dominant-baseline: auto;\n+        }\n+    ]]><\/style>\n+\n+    <rect x=\"8\" y=\"8\"\n+          width=\"144\" height=\"144\"\/>\n+    <text x=\"16\" y=\"24\" class=\"left\">P1<\/text>\n+    <g id=\"leftBox\">\n+        <rect x=\"16\" y=\"28\"\n+              width=\"56\" height=\"116\"\/>\n+\n+        <rect x=\"24\" y=\"36\"\n+              width=\"40\" height=\"28\"\/>\n+        <rect x=\"24\" y=\"72\"\n+              width=\"40\" height=\"28\"\/>\n+        <rect x=\"24\" y=\"108\"\n+              width=\"40\" height=\"28\"\/>\n+    <\/g>\n+\n+    <text x=\"44\" y=\"50\">C1<\/text>\n+    <text x=\"44\" y=\"86\">C2<\/text>\n+    <text x=\"44\" y=\"122\">C3<\/text>\n+\n+    <use xlink:href=\"#leftBox\" x=\"72\" y=\"0\"\/>\n+    <text x=\"86\" y=\"24\" class=\"left\">P2<\/text>\n+    <text x=\"116\" y=\"50\">C4<\/text>\n+    <text x=\"116\" y=\"86\">C5<\/text>\n+    <text x=\"116\" y=\"122\">C6<\/text>\n+\n+<\/svg>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/doc-files\/BoxLayout-1.svg","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import javax.swing.*;\n@@ -32,2 +31,3 @@\n-import java.awt.Insets;\n-import java.awt.Rectangle;\n+import javax.swing.JComponent;\n+import javax.swing.JSeparator;\n+import javax.swing.LookAndFeel;\n@@ -155,1 +155,9 @@\n-    public Dimension getMaximumSize( JComponent c ) { return null; }\n+\n+    public Dimension getMaximumSize( JComponent c ) {\n+        Dimension d = getPreferredSize(c);\n+        if (((JSeparator)c).getOrientation() == JSeparator.VERTICAL) {\n+            return new Dimension(d.width, Short.MAX_VALUE);\n+        } else {\n+            return new Dimension(Short.MAX_VALUE, d.height);\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicSeparatorUI.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,1 +551,2 @@\n-        (context->transform.xx > 0) && (context->transform.yy > 0))\n+        (context->transform.xx > 0) && (context->transform.yy > 0) &&\n+        (context->transform.xx == context->transform.yy))\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/freetypeScaler.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.util.Timer;\n+import java.util.TimerTask;\n@@ -57,0 +59,7 @@\n+    private static final int DELAY_BEFORE_SESSION_CLOSE = 2000;\n+\n+    private static volatile TimerTask timerTask = null;\n+    private static final Timer timerCloseSession\n+            = new Timer(\"auto-close screencast session\", true);\n+\n+\n@@ -108,0 +117,17 @@\n+    private static synchronized native void closeSession();\n+\n+    private static void timerCloseSessionRestart() {\n+        if (timerTask != null) {\n+            timerTask.cancel();\n+        }\n+\n+        timerTask = new TimerTask() {\n+            @Override\n+            public void run() {\n+                closeSession();\n+            }\n+        };\n+\n+        timerCloseSession.schedule(timerTask, DELAY_BEFORE_SESSION_CLOSE);\n+    }\n+\n@@ -113,0 +139,2 @@\n+        timerCloseSessionRestart();\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/ScreencastHelper.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -327,0 +327,4 @@\n+                    .sorted((t1, t2) -> \/\/Token with more screens preferred\n+                            t2.allowedScreensBounds.size()\n+                            - t1.allowedScreensBounds.size()\n+                    )\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/TokenStorage.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -607,0 +607,1 @@\n+        fp_g_string_set_size = dl_symbol(\"g_string_set_size\");\n@@ -3113,0 +3114,1 @@\n+    gtk->g_string_set_size = fp_g_string_set_size;\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -761,0 +761,3 @@\n+static GString *(*fp_g_string_set_size)(GString* string,\n+                                        gsize len);\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -719,0 +719,4 @@\n+    GString *(*g_string_set_size)(GString* string,\n+                                  gsize len);\n+\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk_interface.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,3 @@\n+static volatile gboolean sessionClosed = TRUE;\n+static GString *activeSessionToken;\n+\n@@ -92,1 +95,0 @@\n-                fp_pw_thread_loop_lock(pw.loop);\n@@ -94,0 +96,1 @@\n+                fp_pw_thread_loop_lock(pw.loop);\n@@ -126,0 +129,1 @@\n+        screenSpace.screenCount = 0;\n@@ -127,0 +131,3 @@\n+\n+    gtk->g_string_set_size(activeSessionToken, 0);\n+    sessionClosed = TRUE;\n@@ -135,0 +142,18 @@\n+    gboolean isSameToken = !token\n+            ? FALSE\n+            : strcmp(token, activeSessionToken->str) == 0;\n+\n+    if (!sessionClosed) {\n+        if (isSameToken) {\n+            DEBUG_SCREENCAST(\"Reusing active session.\\n\", NULL);\n+            return TRUE;\n+        } else {\n+            DEBUG_SCREENCAST(\n+                    \"Active session has a different token |%s| -> |%s|,\"\n+                    \" closing current session.\\n\",\n+                    activeSessionToken->str, token\n+            );\n+            doCleanup();\n+        }\n+    }\n+\n@@ -148,0 +173,2 @@\n+    gtk->g_string_printf(activeSessionToken, \"%s\", token);\n+    sessionClosed = FALSE;\n@@ -389,1 +416,11 @@\n-    data->hasFormat = FALSE;\n+    if (!sessionClosed && data->stream) {\n+        fp_pw_thread_loop_lock(pw.loop);\n+        int result = fp_pw_stream_set_active(data->stream, TRUE);\n+        fp_pw_thread_loop_unlock(pw.loop);\n+\n+        DEBUG_SCREEN_PREFIX(data->screenProps,\n+                            \"stream %p: activate result |%i|\\n\",\n+                            data->stream, result);\n+\n+        return result == 0; \/\/ 0 - success\n+    };\n@@ -391,0 +428,1 @@\n+    data->hasFormat = FALSE;\n@@ -508,13 +546,2 @@\n-    pw.loop = fp_pw_thread_loop_new(\"AWT Pipewire Thread\", NULL);\n-\n-    if (!pw.loop) {\n-        DEBUG_SCREENCAST(\"!!! Could not create a loop\\n\", NULL);\n-        doCleanup();\n-        return FALSE;\n-    }\n-\n-    pw.context = fp_pw_context_new(\n-            fp_pw_thread_loop_get_loop(pw.loop),\n-            NULL,\n-            0\n-    );\n+    if (!pw.loop && !sessionClosed) {\n+        pw.loop = fp_pw_thread_loop_new(\"AWT Pipewire Thread\", NULL);\n@@ -522,5 +549,5 @@\n-    if (!pw.context) {\n-        DEBUG_SCREENCAST(\"!!! Could not create a pipewire context\\n\", NULL);\n-        doCleanup();\n-        return FALSE;\n-    }\n+        if (!pw.loop) {\n+            DEBUG_SCREENCAST(\"!!! Could not create a loop\\n\", NULL);\n+            doCleanup();\n+            return FALSE;\n+        }\n@@ -528,5 +555,5 @@\n-    if (fp_pw_thread_loop_start(pw.loop) != 0) {\n-        DEBUG_SCREENCAST(\"!!! Could not start pipewire thread loop\\n\", NULL);\n-        doCleanup();\n-        return FALSE;\n-    }\n+        pw.context = fp_pw_context_new(\n+                fp_pw_thread_loop_get_loop(pw.loop),\n+                NULL,\n+                0\n+        );\n@@ -534,1 +561,5 @@\n-    fp_pw_thread_loop_lock(pw.loop);\n+        if (!pw.context) {\n+            DEBUG_SCREENCAST(\"!!! Could not create a pipewire context\\n\", NULL);\n+            doCleanup();\n+            return FALSE;\n+        }\n@@ -536,6 +567,5 @@\n-    pw.core = fp_pw_context_connect_fd(\n-            pw.context,\n-            pw.pwFd,\n-            NULL,\n-            0\n-    );\n+        if (fp_pw_thread_loop_start(pw.loop) != 0) {\n+            DEBUG_SCREENCAST(\"!!! Could not start pipewire thread loop\\n\", NULL);\n+            doCleanup();\n+            return FALSE;\n+        }\n@@ -543,4 +573,1 @@\n-    if (!pw.core) {\n-        DEBUG_SCREENCAST(\"!!! Could not create pipewire core\\n\", NULL);\n-        goto fail;\n-    }\n+        fp_pw_thread_loop_lock(pw.loop);\n@@ -548,1 +575,6 @@\n-    pw_core_add_listener(pw.core, &pw.coreListener, &coreEvents, NULL);\n+        pw.core = fp_pw_context_connect_fd(\n+                pw.context,\n+                pw.pwFd,\n+                NULL,\n+                0\n+        );\n@@ -550,5 +582,2 @@\n-    for (int i = 0; i < screenSpace.screenCount; ++i) {\n-        struct PwStreamData *data =\n-                (struct PwStreamData*) malloc(sizeof (struct PwStreamData));\n-        if (!data) {\n-            ERR(\"failed to allocate memory\\n\");\n+        if (!pw.core) {\n+            DEBUG_SCREENCAST(\"!!! Could not create pipewire core\\n\", NULL);\n@@ -558,1 +587,2 @@\n-        memset(data, 0, sizeof (struct PwStreamData));\n+        pw_core_add_listener(pw.core, &pw.coreListener, &coreEvents, NULL);\n+    }\n@@ -560,0 +590,1 @@\n+    for (int i = 0; i < screenSpace.screenCount; ++i) {\n@@ -561,1 +592,12 @@\n-        screen->data = data;\n+        if (!screen->data && !sessionClosed) {\n+            struct PwStreamData *data =\n+                    (struct PwStreamData*) malloc(sizeof (struct PwStreamData));\n+            if (!data) {\n+                ERR(\"failed to allocate memory\\n\");\n+                goto fail;\n+            }\n+\n+            memset(data, 0, sizeof (struct PwStreamData));\n+\n+            screen->data = data;\n+        }\n@@ -749,0 +791,2 @@\n+    activeSessionToken = gtk->g_string_new(\"\");\n+\n@@ -786,0 +830,11 @@\n+\/*\n+ * Class:     sun_awt_screencast_ScreencastHelper\n+ * Method:    closeSession\n+ * Signature: ()V\n+ *\/\n+JNIEXPORT void JNICALL\n+Java_sun_awt_screencast_ScreencastHelper_closeSession(JNIEnv *env, jclass cls) {\n+    DEBUG_SCREENCAST(\"closing screencast session\\n\\n\", NULL);\n+    doCleanup();\n+}\n+\n@@ -808,1 +863,1 @@\n-            DEBUG_SCREENCAST(\"%s:%i incorrect array length\\n\", __FUNCTION__, __LINE__);\n+            DEBUG_SCREENCAST(\"incorrect array length\\n\", NULL);\n@@ -899,1 +954,0 @@\n-            fp_pw_stream_disconnect(screenProps->data->stream);\n@@ -901,0 +955,2 @@\n+\n+            screenProps->captureDataReady = FALSE;\n@@ -903,1 +959,1 @@\n-    doCleanup();\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_pipewire.c","additions":103,"deletions":47,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -780,0 +780,4 @@\n+    if (!portal) {\n+        return;\n+    }\n+\n@@ -799,3 +803,0 @@\n-    if (!portal) {\n-        return;\n-    }\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_portal.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,2 +193,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/ClassFileTransformer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -330,2 +330,0 @@\n- * @revised 1.6\n- * @revised 9\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/package-info.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -888,2 +888,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ThreadInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -646,8 +646,6 @@\n-                    try {\n-                        outStream.flush();\n-                        sock.close();\n-                        unpauseReader();\n-                    } catch (IOException ie) {\n-                        if (debug)\n-                            System.err.println(\"Connection: problem closing socket: \" + ie);\n-                    }\n+\n+                    flushAndCloseOutputStream();\n+                    \/\/ 8313657 socket is not closed until GC is run\n+                    closeOpenedSocket();\n+                    tryUnpauseReader();\n+\n@@ -687,0 +685,37 @@\n+    \/\/ flush and close output stream\n+    private void flushAndCloseOutputStream() {\n+        try {\n+            outStream.flush();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.flushOutputStream: OutputStream flush problem \" + ioEx);\n+        }\n+        try {\n+            outStream.close();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.closeOutputStream: OutputStream close problem \" + ioEx);\n+        }\n+    }\n+\n+    \/\/ close socket\n+    private void closeOpenedSocket() {\n+        try {\n+            sock.close();\n+        } catch (IOException ioEx) {\n+            if (debug) {\n+                System.err.println(\"Connection.closeConnectionSocket: Socket close problem: \" + ioEx);\n+                System.err.println(\"Socket isClosed: \" + sock.isClosed());\n+            }\n+        }\n+    }\n+\n+    \/\/ unpause reader\n+    private void tryUnpauseReader() {\n+        try {\n+            unpauseReader();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.tryUnpauseReader: unpauseReader problem \" + ioEx);\n+        }\n+    }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":44,"deletions":9,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -541,2 +541,2 @@\n-            if (buffers.isEmpty()) return 0;\n-            return 1;\n+            if (!buffers.isEmpty() && buffers.peek() != LAST_LIST ) return 1;\n+            return available;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-    int result[2];\n+    int result[2] = {0, 0};\n@@ -93,0 +93,1 @@\n+        result[1] = errno;\n","filename":"src\/java.prefs\/unix\/native\/libprefs\/FileSystemPreferences.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4612,0 +4612,13 @@\n+\n+                boolean allPatternCaseLabels = c.labels.stream().allMatch(p -> p instanceof JCPatternCaseLabel);\n+\n+                if (allPatternCaseLabels) {\n+                    preview.checkSourceLevel(c.labels.tail.head.pos(), Feature.UNNAMED_VARIABLES);\n+                }\n+\n+                for (JCCaseLabel label : c.labels.tail) {\n+                    if (label instanceof JCConstantCaseLabel) {\n+                        log.error(label.pos(), Errors.InvalidCaseLabelCombination);\n+                        break;\n+                    }\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3313,0 +3313,2 @@\n+                    } else if (typeDepth == 0 && parenDepth == 0 && (peekToken(lookahead, tk -> tk == ARROW || tk == COMMA))) {\n+                        return PatternResult.EXPRESSION;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1562,11 +1562,0 @@\n-        if (alias != null) {\n-            attrList.add(new CK_ATTRIBUTE(CKA_LABEL, alias));\n-            attrList.add(new CK_ATTRIBUTE(CKA_ID, alias));\n-        } else {\n-            \/\/ ibutton requires something to be set\n-            \/\/ - alias must be unique\n-            attrList.add(new CK_ATTRIBUTE(CKA_ID,\n-                        getID(cert.getSubjectX500Principal().getName\n-                                        (X500Principal.CANONICAL), cert)));\n-        }\n-\n@@ -1576,0 +1565,33 @@\n+            long[] ch = findObjects(session,\n+                    attrList.toArray(new CK_ATTRIBUTE[attrList.size()]));\n+            if (ch.length != 0) { \/\/ found a match\n+                if (debug != null) {\n+                    String certInfo = (alias == null?\n+                            \"CA cert \" + cert.getSubjectX500Principal() :\n+                            \"EE cert for alias \" + alias);\n+                    debug.println(\"storeCert: found a match for \" + certInfo);\n+                }\n+                if (alias != null) {\n+                    \/\/ Add the alias to the existing cert\n+                    CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[] {\n+                        new CK_ATTRIBUTE(CKA_LABEL, alias),\n+                        new CK_ATTRIBUTE(CKA_ID, alias) };\n+                    token.p11.C_SetAttributeValue\n+                        (session.id(), ch[0], attrs);\n+                    if (debug != null) {\n+                        debug.println(\"storeCert: added alias: \" + alias);\n+                    }\n+                }\n+                \/\/ done; no need to create the cert\n+                return;\n+            }\n+            if (alias != null) {\n+                attrList.add(new CK_ATTRIBUTE(CKA_LABEL, alias));\n+                attrList.add(new CK_ATTRIBUTE(CKA_ID, alias));\n+            } else {\n+                \/\/ ibutton requires something to be set\n+                \/\/ - alias must be unique\n+                attrList.add(new CK_ATTRIBUTE(CKA_ID,\n+                        getID(cert.getSubjectX500Principal().getName\n+                                        (X500Principal.CANONICAL), cert)));\n+            }\n@@ -1577,1 +1599,7 @@\n-                        attrList.toArray(new CK_ATTRIBUTE[attrList.size()]));\n+                    attrList.toArray(new CK_ATTRIBUTE[attrList.size()]));\n+            if (debug != null) {\n+                String certInfo = (alias == null?\n+                        \"CA cert \" + cert.getSubjectX500Principal() :\n+                        \"EE cert for alias \" + alias);\n+                debug.println(\"storeCert: created \" + certInfo);\n+            }\n@@ -1590,1 +1618,0 @@\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyStore.java","additions":40,"deletions":13,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+    vTableTypeMap = null; \/\/ force vTableTypeMap to get re-initialized later\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,0 @@\n-  public long      longAt(int slot)      { return VM.getVM().buildLongFromIntsPD((int) get(slot).getInteger(),\n-                                                                                 (int) get(slot+1).getInteger()); }\n@@ -62,1 +60,0 @@\n-  public double    doubleAt(int slot)    { return Double.longBitsToDouble(longAt(slot)); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/StackValueCollection.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -730,10 +730,0 @@\n-  \/** Utility routine for building a long from two \"unsigned\" 32-bit\n-      ints in <b>platform-dependent<\/b> order *\/\n-  public long buildLongFromIntsPD(int oneHalf, int otherHalf) {\n-    if (isBigEndian) {\n-      return (((long) otherHalf) << 32) | (((long) oneHalf) & 0x00000000FFFFFFFFL);\n-    } else{\n-      return (((long) oneHalf) << 32) | (((long) otherHalf) & 0x00000000FFFFFFFFL);\n-    }\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -89,4 +89,2 @@\n-      if (heap instanceof ShenandoahHeap) {\n-         printValMB(\"ShenandoahRegionSize     = \", ShenandoahHeapRegion.regionSizeBytes());\n-      } else {\n-         printValMB(\"G1HeapRegionSize         = \", HeapRegion.grainBytes());\n+      if (heap instanceof G1CollectedHeap) {\n+        printValMB(\"G1HeapRegionSize         = \", HeapRegion.grainBytes());\n@@ -141,0 +139,1 @@\n+         printValMB(\"region size = \", ShenandoahHeapRegion.regionSizeBytes());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,2 +70,6 @@\n-    Oop oop = heap.newOop(obj);\n-    tty.println(\"  _object: \" + obj + \", a \" + oop.getKlass().getName().asString());\n+    if (obj == null) {\n+      tty.println(\"  _object: null\");\n+    } else {\n+      Oop oop = heap.newOop(obj);\n+      tty.println(\"  _object: \" + obj + \", a \" + oop.getKlass().getName().asString());\n+    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ui\/MonitorCacheDumpPanel.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-     * @return the type for {@code name} or 0 if resolution failed and {@code resolve == false}\n+     * @return the type for {@code name} or {@code null} if resolution failed and {@code resolve == false}\n@@ -438,0 +438,13 @@\n+    \/**\n+     * Converts the {@code rawIndex} operand of a rewritten getfield\/putfield\/getstatic\/putstatic instruction\n+     * to an index directly into {@code constantPool}.\n+     *\n+     * @throws IllegalArgumentException if {@code rawIndex} is out of range.\n+     * @return {@code JVM_CONSTANT_FieldRef} constant pool entry index for the invokedynamic\n+     *\/\n+    int decodeFieldIndexToCPIndex(HotSpotConstantPool constantPool, int rawIndex) {\n+        return decodeFieldIndexToCPIndex(constantPool, constantPool.getConstantPoolPointer(), rawIndex);\n+    }\n+\n+    private native int decodeFieldIndexToCPIndex(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex);\n+\n@@ -510,2 +523,2 @@\n-     * Looks up and attempts to resolve the {@code JVM_CONSTANT_Field} entry for at index\n-     * {@code cpi} in {@code constantPool}. For some opcodes, checks are performed that require the\n+     * Looks up and attempts to resolve the {@code JVM_CONSTANT_Field} entry denoted by\n+     * {@code rawIndex}. For some opcodes, checks are performed that require the\n@@ -523,2 +536,1 @@\n-     * The behavior of this method is undefined if {@code cpi} does not denote a\n-     * {@code JVM_CONSTANT_Field} entry.\n+     * The behavior of this method is undefined if {@code rawIndex} is invalid.\n@@ -529,1 +541,1 @@\n-    HotSpotResolvedObjectTypeImpl resolveFieldInPool(HotSpotConstantPool constantPool, int cpi, HotSpotResolvedJavaMethodImpl method, byte opcode, int[] info) {\n+    HotSpotResolvedObjectTypeImpl resolveFieldInPool(HotSpotConstantPool constantPool, int rawIndex, HotSpotResolvedJavaMethodImpl method, byte opcode, int[] info) {\n@@ -531,1 +543,1 @@\n-        return resolveFieldInPool(constantPool, constantPool.getConstantPoolPointer(), cpi, method, methodPointer, opcode, info);\n+        return resolveFieldInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, method, methodPointer, opcode, info);\n@@ -535,1 +547,1 @@\n-                    int cpi, HotSpotResolvedJavaMethodImpl method, long methodPointer, byte opcode, int[] info);\n+                    int rawIndex, HotSpotResolvedJavaMethodImpl method, long methodPointer, byte opcode, int[] info);\n@@ -551,2 +563,5 @@\n-     * Gets the appendix object (if any) associated with the entry at index {@code cpi} in\n-     * {@code constantPool}.\n+     * Gets the appendix object (if any) associated with the entry identified by {@code which}.\n+     *\n+     * @param which if negative, is treated as an encoded indy index for INVOKEDYNAMIC;\n+     *              Otherwise, it's treated as a constant pool cache index (returned by HotSpotConstantPool::rawIndexToConstantPoolCacheIndex)\n+     *              for INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}.\n@@ -554,2 +569,2 @@\n-    HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, int cpi) {\n-        return lookupAppendixInPool(constantPool, constantPool.getConstantPoolPointer(), cpi);\n+    HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, int which) {\n+        return lookupAppendixInPool(constantPool, constantPool.getConstantPoolPointer(), which);\n@@ -558,1 +573,1 @@\n-    private native HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi);\n+    private native HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -50,0 +50,13 @@\n+ *\n+ * The following convention is used in the jdk.vm.ci.hotspot package when accessing the ConstantPool with an index:\n+ * <ul>\n+ * <li>rawIndex - Index in the bytecode stream after the opcode (could be rewritten for some opcodes)<\/li>\n+ * <li>cpi -      The constant pool index (as specified in JVM Spec)<\/li>\n+ * <li>cpci -     The constant pool cache index, used only by the four bytecodes INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}.\n+ *                It's the same as {@code rawIndex + HotSpotVMConfig::constantPoolCpCacheIndexTag}. <\/li>\n+ * <li>which -    May be either a {@code rawIndex} or a {@code cpci}.<\/li>\n+ * <\/ul>\n+ *\n+ * Note that {@code cpci} and {@code which} are used only in the HotSpot-specific implementation. They\n+ * are not used by the public interface in jdk.vm.ci.meta.*.\n+ * After JDK-8301993, all uses of {@code cpci} and {@code which} will be replaced with {@code rawIndex}.\n@@ -255,7 +268,5 @@\n-        int index;\n-        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n-            index = rawIndex;\n-            \/\/ See: ConstantPool::is_invokedynamic_index\n-            if (index >= 0) {\n-                throw new IllegalArgumentException(\"not an invokedynamic constant pool index \" + index);\n-            }\n+        if (opcode == Bytecodes.INVOKEINTERFACE ||\n+            opcode == Bytecodes.INVOKEVIRTUAL ||\n+            opcode == Bytecodes.INVOKESPECIAL ||\n+            opcode == Bytecodes.INVOKESTATIC) {\n+            return rawIndex + config().constantPoolCpCacheIndexTag;\n@@ -263,13 +274,2 @@\n-            if (opcode == Bytecodes.GETFIELD ||\n-                            opcode == Bytecodes.PUTFIELD ||\n-                            opcode == Bytecodes.GETSTATIC ||\n-                            opcode == Bytecodes.PUTSTATIC ||\n-                            opcode == Bytecodes.INVOKEINTERFACE ||\n-                            opcode == Bytecodes.INVOKEVIRTUAL ||\n-                            opcode == Bytecodes.INVOKESPECIAL ||\n-                            opcode == Bytecodes.INVOKESTATIC) {\n-                index = rawIndex + config().constantPoolCpCacheIndexTag;\n-            } else {\n-                throw new IllegalArgumentException(\"unexpected opcode \" + opcode);\n-\n-            }\n+            \/\/ Only the above 4 bytecodes use ConstantPoolCacheIndex\n+            throw new IllegalArgumentException(\"unexpected opcode \" + opcode);\n@@ -277,1 +277,0 @@\n-        return index;\n@@ -588,2 +587,2 @@\n-    public BootstrapMethodInvocation lookupBootstrapMethodInvocation(int rawCpi, int opcode) {\n-        int cpi = opcode == -1 ? rawCpi : rawIndexToConstantPoolIndex(rawCpi, opcode);\n+    public BootstrapMethodInvocation lookupBootstrapMethodInvocation(int index, int opcode) {\n+        int cpi = opcode == -1 ? index : indyIndexConstantPoolIndex(index, opcode);\n@@ -692,1 +691,1 @@\n-    public JavaConstant lookupAppendix(int cpi, int opcode) {\n+    public JavaConstant lookupAppendix(int rawIndex, int opcode) {\n@@ -694,1 +693,1 @@\n-            throw new IllegalArgumentException(\"expected an invoke bytecode at \" + cpi + \", got \" + opcode);\n+            throw new IllegalArgumentException(\"expected an invoke bytecode for \" + rawIndex + \", got \" + opcode);\n@@ -697,2 +696,8 @@\n-        final int index = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-        return compilerToVM().lookupAppendixInPool(this, index);\n+        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n+          if (!isInvokedynamicIndex(rawIndex)) {\n+              throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n+          }\n+          return compilerToVM().lookupAppendixInPool(this, rawIndex);\n+        } else {\n+          return compilerToVM().lookupAppendixInPool(this, rawIndexToConstantPoolCacheIndex(rawIndex, opcode));\n+        }\n@@ -716,3 +721,3 @@\n-    public JavaMethod lookupMethod(int cpi, int opcode, ResolvedJavaMethod caller) {\n-        final int index = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, index, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n+    public JavaMethod lookupMethod(int rawIndex, int opcode, ResolvedJavaMethod caller) {\n+        final int cpci = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n+        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, cpci, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n@@ -723,2 +728,2 @@\n-            String name = getNameOf(index, opcode);\n-            HotSpotSignature signature = new HotSpotSignature(runtime(), getSignatureOf(index, opcode));\n+            String name = getNameOf(cpci, opcode);\n+            HotSpotSignature signature = new HotSpotSignature(runtime(), getSignatureOf(cpci, opcode));\n@@ -728,1 +733,1 @@\n-                final int klassIndex = getKlassRefIndexAt(index, opcode);\n+                final int klassIndex = getKlassRefIndexAt(cpci, opcode);\n@@ -751,2 +756,2 @@\n-    public JavaType lookupReferencedType(int cpi, int opcode) {\n-        int index;\n+    public JavaType lookupReferencedType(int rawIndex, int opcode) {\n+        int cpi;\n@@ -762,1 +767,1 @@\n-                index = cpi;\n+                cpi = rawIndex;\n@@ -768,0 +773,2 @@\n+                cpi = getKlassRefIndexAt(rawIndex, opcode);\n+                break;\n@@ -772,2 +779,2 @@\n-                index = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-                index = getKlassRefIndexAt(index, opcode);\n+                int cpci = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n+                cpi = getKlassRefIndexAt(cpci, opcode);\n@@ -779,1 +786,1 @@\n-        final Object type = compilerToVM().lookupKlassInPool(this, index);\n+        final Object type = compilerToVM().lookupKlassInPool(this, cpi);\n@@ -784,3 +791,2 @@\n-    public JavaField lookupField(int cpi, ResolvedJavaMethod method, int opcode) {\n-        final int index = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-        final int nameAndTypeIndex = getNameAndTypeRefIndexAt(index, opcode);\n+    public JavaField lookupField(int rawIndex, ResolvedJavaMethod method, int opcode) {\n+        final int nameAndTypeIndex = getNameAndTypeRefIndexAt(rawIndex, opcode);\n@@ -791,1 +797,1 @@\n-        final int holderIndex = getKlassRefIndexAt(index, opcode);\n+        final int holderIndex = getKlassRefIndexAt(rawIndex, opcode);\n@@ -798,1 +804,1 @@\n-                resolvedHolder = compilerToVM().resolveFieldInPool(this, index, (HotSpotResolvedJavaMethodImpl) method, (byte) opcode, info);\n+                resolvedHolder = compilerToVM().resolveFieldInPool(this, rawIndex, (HotSpotResolvedJavaMethodImpl) method, (byte) opcode, info);\n@@ -818,1 +824,1 @@\n-     * Converts a raw index from the bytecodes to a constant pool index (not a cache index).\n+     * Converts a raw index for the INVOKEDYNAMIC bytecode to a constant pool index.\n@@ -822,1 +828,1 @@\n-     * @param opcode bytecode to convert the index for\n+     * @param opcode bytecode to convert the index for. Must be INVOKEDYNAMIC.\n@@ -826,1 +832,1 @@\n-    public int rawIndexToConstantPoolIndex(int rawIndex, int opcode) {\n+    private int indyIndexConstantPoolIndex(int rawIndex, int opcode) {\n@@ -832,0 +838,2 @@\n+        } else {\n+          throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n@@ -833,5 +841,0 @@\n-        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n-            throw new IllegalArgumentException(\"unexpected INVOKEDYNAMIC at \" + rawIndex);\n-        }\n-        int index = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n-        return compilerToVM().constantPoolRemapInstructionOperandFromCache(this, index);\n@@ -841,2 +844,2 @@\n-    public void loadReferencedType(int cpi, int opcode) {\n-        loadReferencedType(cpi, opcode, true \/* initialize *\/);\n+    public void loadReferencedType(int rawIndex, int opcode) {\n+        loadReferencedType(rawIndex, opcode, true \/* initialize *\/);\n@@ -847,2 +850,2 @@\n-    public void loadReferencedType(int cpi, int opcode, boolean initialize) {\n-        int index;\n+    public void loadReferencedType(int rawIndex, int opcode, boolean initialize) {\n+        int cpi;\n@@ -858,1 +861,1 @@\n-                index = cpi;\n+                cpi = rawIndex;\n@@ -862,2 +865,2 @@\n-                if (!isInvokedynamicIndex(cpi)) {\n-                    throw new IllegalArgumentException(\"must use invokedynamic index but got \" + cpi);\n+                if (!isInvokedynamicIndex(rawIndex)) {\n+                    throw new IllegalArgumentException(\"must use invokedynamic index but got \" + rawIndex);\n@@ -865,1 +868,1 @@\n-                index = compilerToVM().decodeIndyIndexToCPIndex(this, cpi, true);\n+                cpi = compilerToVM().decodeIndyIndexToCPIndex(this, rawIndex, true);\n@@ -872,0 +875,2 @@\n+                cpi = compilerToVM().decodeFieldIndexToCPIndex(this, rawIndex);\n+                break;\n@@ -877,2 +882,2 @@\n-                index = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-                index = compilerToVM().constantPoolRemapInstructionOperandFromCache(this, index);\n+                int cpci = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n+                cpi = compilerToVM().constantPoolRemapInstructionOperandFromCache(this, cpci);\n@@ -885,1 +890,1 @@\n-        final JvmConstant tag = getTagAt(index);\n+        final JvmConstant tag = getTagAt(cpi);\n@@ -887,1 +892,1 @@\n-            assert getTagAt(index - 1) == constants.jvmDouble || getTagAt(index - 1) == constants.jvmLong;\n+            assert getTagAt(cpi - 1) == constants.jvmDouble || getTagAt(cpi - 1) == constants.jvmLong;\n@@ -894,1 +899,1 @@\n-                index = getUncachedKlassRefIndexAt(index);\n+                cpi = getUncachedKlassRefIndexAt(cpi);\n@@ -896,1 +901,1 @@\n-                final JvmConstant klassTag = getTagAt(index);\n+                final JvmConstant klassTag = getTagAt(cpi);\n@@ -902,1 +907,1 @@\n-                final HotSpotResolvedObjectTypeImpl type = compilerToVM().resolveTypeInPool(this, index);\n+                final HotSpotResolvedObjectTypeImpl type = compilerToVM().resolveTypeInPool(this, cpi);\n@@ -908,1 +913,1 @@\n-                        final int methodRefCacheIndex = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n+                        final int methodRefCacheIndex = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n@@ -946,20 +951,0 @@\n-    \/**\n-     * Check for a resolved dynamic adapter method at the specified index, resulting from either a\n-     * resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method\n-     * (HotSpot invokehandle).\n-     *\n-     * @param cpi the constant pool index\n-     * @param opcode the opcode of the instruction for which the lookup is being performed\n-     * @return {@code true} if a signature polymorphic method reference was found, otherwise\n-     *         {@code false}\n-     *\/\n-    public boolean isResolvedDynamicInvoke(int cpi, int opcode) {\n-        if (Bytecodes.isInvokeHandleAlias(opcode)) {\n-            final int methodRefCacheIndex = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-            checkTag(compilerToVM().constantPoolRemapInstructionOperandFromCache(this, methodRefCacheIndex), constants.jvmMethodref);\n-            int op = compilerToVM().isResolvedInvokeHandleInPool(this, methodRefCacheIndex);\n-            return op == opcode;\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":73,"deletions":88,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,8 @@\n+ *\n+ * The following convention is used when accessing the ConstantPool with an index:\n+ * <ul>\n+ * <li>rawIndex - index in the bytecode stream after the opcode (could be rewritten for some opcodes)<\/li>\n+ * <li>cpi - the constant pool index (as specified in JVM Spec)<\/li>\n+ * <\/ul>\n+ *\n+ * Some of the methods are currently not using the convention correctly. That will be addressed in JDK-8314172.\n@@ -47,1 +55,1 @@\n-     * @param cpi the index of the constant pool entry that references the type\n+     * @param rawIndex index in the bytecode stream after the {@code opcode} (could be rewritten for some opcodes)\n@@ -50,1 +58,1 @@\n-    void loadReferencedType(int cpi, int opcode);\n+    void loadReferencedType(int rawIndex, int opcode);\n@@ -57,1 +65,1 @@\n-     * @param cpi the index of the constant pool entry that references the type\n+     * @param rawIndex index in the bytecode stream after the {@code opcode} (could be rewritten for some opcodes)\n@@ -62,1 +70,1 @@\n-    default void loadReferencedType(int cpi, int opcode, boolean initialize) {\n+    default void loadReferencedType(int rawIndex, int opcode, boolean initialize) {\n@@ -64,1 +72,1 @@\n-            loadReferencedType(cpi, opcode);\n+            loadReferencedType(rawIndex, opcode);\n@@ -71,2 +79,1 @@\n-     * Looks up the type referenced by the constant pool entry at {@code cpi} as referenced by the\n-     * {@code opcode} bytecode instruction.\n+     * Looks up the type referenced by the {@code rawIndex}.\n@@ -74,2 +81,2 @@\n-     * @param cpi the index of a constant pool entry that references a type\n-     * @param opcode the opcode of the instruction with {@code cpi} as an operand\n+     * @param rawIndex index in the bytecode stream after the {@code opcode} (could be rewritten for some opcodes)\n+     * @param opcode the opcode of the instruction with {@code rawIndex} as an operand\n@@ -78,1 +85,1 @@\n-    JavaType lookupReferencedType(int cpi, int opcode);\n+    JavaType lookupReferencedType(int rawIndex, int opcode);\n@@ -81,1 +88,1 @@\n-     * Looks up a reference to a field. If {@code opcode} is non-negative, then resolution checks\n+     * Looks up a reference to a field. Resolution checks\n@@ -86,3 +93,2 @@\n-     * @param cpi the constant pool index\n-     * @param opcode the opcode of the instruction for which the lookup is being performed or\n-     *            {@code -1}\n+     * @param rawIndex rewritten index in the bytecode stream after the {@code opcode}\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -90,2 +96,1 @@\n-     * @return a reference to the field at {@code cpi} in this pool\n-     * @throws ClassFormatError if the entry at {@code cpi} is not a field\n+     * @return a reference to the field at {@code rawIndex} in this pool\n@@ -93,1 +98,1 @@\n-    JavaField lookupField(int cpi, ResolvedJavaMethod method, int opcode);\n+    JavaField lookupField(int rawIndex, ResolvedJavaMethod method, int opcode);\n@@ -170,1 +175,1 @@\n-     * {@code CONSTANT_Dynamic_info} or {@code CONSTANT_InvokeDynamic_info} pool entry {@code cpi}\n+     * {@code CONSTANT_Dynamic_info} or {@code CONSTANT_InvokeDynamic_info} pool entry\n@@ -173,4 +178,6 @@\n-     * @param cpi a constant pool index\n-     * @param opcode the opcode of the instruction that has {@code cpi} as an operand or -1 if\n-     *            {@code cpi} was not decoded from an instruction stream\n-     * @return the bootstrap method invocation details or {@code null} if the entry at {@code cpi}\n+     * @param index if {@code opcode} is -1,  {@code index} is a constant pool index. Otherwise {@code opcode}\n+     *              must be {@code Bytecodes.INVOKEDYNAMIC}, and {@code index} must be the operand of that\n+     *              opcode in the bytecode stream (i.e., a {@code rawIndex}).\n+     * @param opcode must be {@code Bytecodes.INVOKEDYNAMIC}, or -1 if\n+     *            {@code index} was not decoded from a bytecode stream\n+     * @return the bootstrap method invocation details or {@code null} if the entry specified by {@code index}\n@@ -182,1 +189,1 @@\n-    default BootstrapMethodInvocation lookupBootstrapMethodInvocation(int cpi, int opcode) {\n+    default BootstrapMethodInvocation lookupBootstrapMethodInvocation(int index, int opcode) {\n@@ -240,3 +247,2 @@\n-     * @param cpi the constant pool index\n-     * @param opcode the opcode of the instruction for which the lookup is being performed or\n-     *            {@code -1}\n+     * @param rawIndex index in the bytecode stream after the {@code opcode} (could be rewritten for some opcodes)\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -245,1 +251,1 @@\n-    JavaConstant lookupAppendix(int cpi, int opcode);\n+    JavaConstant lookupAppendix(int rawIndex, int opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ConstantPool.java","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import com.sun.source.doctree.BlockTagTree;\n@@ -55,0 +56,1 @@\n+import com.sun.source.doctree.InlineTagTree;\n@@ -352,1 +354,0 @@\n-        CommentHelper ch = utils.getCommentHelper(element);\n@@ -354,1 +355,5 @@\n-            String name = tag.getKind().tagName;\n+            String name = switch (tag.getKind()) {\n+                case UNKNOWN_INLINE_TAG -> ((InlineTagTree) tag).getTagName();\n+                case UNKNOWN_BLOCK_TAG -> ((BlockTagTree) tag).getTagName();\n+                default -> tag.getKind().tagName;\n+            };\n@@ -356,1 +361,1 @@\n-                continue;\n+                continue; \/\/ not a tag\n@@ -358,10 +363,8 @@\n-            if (!name.isEmpty() && name.charAt(0) == '@') {\n-                name = name.substring(1);\n-            }\n-            if (! (standardTags.contains(name) || allTaglets.containsKey(name))) {\n-                if (standardTagsLowercase.contains(Utils.toLowerCase(name))) {\n-                    messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagLowercase\", ch.getTagName(tag));\n-                    continue;\n-                } else {\n-                    messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTag\", ch.getTagName(tag));\n-                    continue;\n+            if (!allTaglets.containsKey(name)) {\n+                if (!config.isDocLintSyntaxGroupEnabled()) {\n+                    var ch = utils.getCommentHelper(element);\n+                    if (standardTagsLowercase.contains(Utils.toLowerCase(name))) {\n+                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagLowercase\", ch.getTagName(tag));\n+                    } else {\n+                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTag\", ch.getTagName(tag));\n+                    }\n@@ -369,0 +372,1 @@\n+                continue; \/\/ unknown tag\n@@ -371,6 +375,3 @@\n-            \/\/ Check and verify tag usage\n-            if (taglet != null) {\n-                if (taglet instanceof SimpleTaglet st && !st.isEnabled()) {\n-                    \/\/ taglet has been disabled\n-                    return;\n-                }\n+            if (taglet instanceof SimpleTaglet st && !st.isEnabled()) {\n+                continue; \/\/ taglet has been disabled\n+            }\n@@ -378,7 +379,6 @@\n-                new SimpleElementVisitor14<Void, Void>() {\n-                    @Override\n-                    public Void visitModule(ModuleElement e, Void p) {\n-                        if (!taglet.inModule()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n-                        }\n-                        return null;\n+            \/\/ Check and verify tag usage\n+            new SimpleElementVisitor14<Void, Void>() {\n+                @Override\n+                public Void visitModule(ModuleElement e, Void p) {\n+                    if (!taglet.inModule()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n@@ -386,0 +386,2 @@\n+                    return null;\n+                }\n@@ -387,6 +389,4 @@\n-                    @Override\n-                    public Void visitPackage(PackageElement e, Void p) {\n-                        if (!taglet.inPackage()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitPackage(PackageElement e, Void p) {\n+                    if (!taglet.inPackage()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n@@ -394,0 +394,2 @@\n+                    return null;\n+                }\n@@ -395,6 +397,4 @@\n-                    @Override\n-                    public Void visitType(TypeElement e, Void p) {\n-                        if (!taglet.inType()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitType(TypeElement e, Void p) {\n+                    if (!taglet.inType()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n@@ -402,0 +402,2 @@\n+                    return null;\n+                }\n@@ -403,8 +405,6 @@\n-                    @Override\n-                    public Void visitExecutable(ExecutableElement e, Void p) {\n-                        if (utils.isConstructor(e) && !taglet.inConstructor()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n-                        } else if (!taglet.inMethod()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitExecutable(ExecutableElement e, Void p) {\n+                    if (utils.isConstructor(e) && !taglet.inConstructor()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n+                    } else if (!taglet.inMethod()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n@@ -412,0 +412,2 @@\n+                    return null;\n+                }\n@@ -413,6 +415,4 @@\n-                    @Override\n-                    public Void visitVariable(VariableElement e, Void p) {\n-                        if (utils.isField(e) && !taglet.inField()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitVariable(VariableElement e, Void p) {\n+                    if (utils.isField(e) && !taglet.inField()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n@@ -420,0 +420,2 @@\n+                    return null;\n+                }\n@@ -421,6 +423,4 @@\n-                    @Override\n-                    public Void visitUnknown(Element e, Void p) {\n-                        if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitUnknown(Element e, Void p) {\n+                    if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n@@ -428,0 +428,2 @@\n+                    return null;\n+                }\n@@ -429,6 +431,5 @@\n-                    @Override\n-                    protected Void defaultAction(Element e, Void p) {\n-                        return null;\n-                    }\n-                }.visit(element);\n-            }\n+                @Override\n+                protected Void defaultAction(Element e, Void p) {\n+                    return null;\n+                }\n+            }.visit(element);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletManager.java","additions":65,"deletions":64,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -1141,0 +1143,7 @@\n+        \/\/ if it were a standard tag, this method wouldn't be called:\n+        \/\/ a standard tag is never represented by Unknown{Block,Inline}TagTree\n+        var k = tree.getKind();\n+        assert k == DocTree.Kind.UNKNOWN_BLOCK_TAG\n+                || k == DocTree.Kind.UNKNOWN_INLINE_TAG;\n+        assert !getStandardTags().contains(tagName);\n+        \/\/ report an unknown tag only if custom tags are set, see 8314213\n@@ -1145,0 +1154,7 @@\n+    private Set<String> getStandardTags() {\n+        return Stream.of(DocTree.Kind.values())\n+                .filter(k -> k.tagName != null) \/\/ not all DocTree represent tags\n+                .map(k -> k.tagName)\n+                .collect(Collectors.toUnmodifiableSet());\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -547,0 +547,1 @@\n+            throw new RuntimeException(ioe);\n@@ -550,0 +551,1 @@\n+            throw new RuntimeException(icae);\n@@ -555,0 +557,1 @@\n+            throw new RuntimeException(vmse);\n@@ -556,1 +559,0 @@\n-        return null; \/\/ Shuts up the compiler\n@@ -567,0 +569,1 @@\n+            throw new RuntimeException(ioe);\n@@ -570,0 +573,1 @@\n+            throw new RuntimeException(icae);\n@@ -571,1 +575,0 @@\n-        return null; \/\/ Shuts up the compiler\n@@ -586,0 +589,1 @@\n+            throw new RuntimeException(ioe);\n@@ -589,0 +593,1 @@\n+            throw new RuntimeException(icae);\n@@ -590,1 +595,0 @@\n-        return null; \/\/ Shuts up the compiler\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/VMConnection.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -739,1 +739,1 @@\n-        \/\/ No address of preferred address family found, grab the fist one.\n+        \/\/ No address of preferred address family found, grab the first one.\n@@ -743,5 +743,0 @@\n-    if (listenAddr == NULL) {\n-        dbgsysFreeAddrInfo(addrInfo);\n-        RETURN_ERROR(JDWPTRANSPORT_ERROR_INTERNAL, \"listen failed: wrong address\");\n-    }\n-\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libdt_socket\/socketTransport.c","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -703,0 +703,6 @@\n+    <event name=\"jdk.NativeLibraryUnload\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -703,0 +703,6 @@\n+    <event name=\"jdk.NativeLibraryUnload\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n@@ -71,1 +71,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -210,42 +210,0 @@\n-    public static String findKey(String keyPrefix, String teamName, String keychainName) {\n-\n-        boolean useAsIs = teamName.startsWith(keyPrefix)\n-                || teamName.startsWith(\"Developer ID\")\n-                || teamName.startsWith(\"3rd Party Mac\");\n-\n-        String key = (useAsIs) ? teamName : (keyPrefix + teamName);\n-\n-        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                PrintStream ps = new PrintStream(baos)) {\n-            List<String> searchOptions = new ArrayList<>();\n-            searchOptions.add(\"\/usr\/bin\/security\");\n-            searchOptions.add(\"find-certificate\");\n-            searchOptions.add(\"-c\");\n-            searchOptions.add(key);\n-            searchOptions.add(\"-a\");\n-            if (keychainName != null && !keychainName.isEmpty()) {\n-                searchOptions.add(keychainName);\n-            }\n-\n-            ProcessBuilder pb = new ProcessBuilder(searchOptions);\n-\n-            IOUtils.exec(pb, false, ps);\n-            Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n-            Matcher m = p.matcher(baos.toString());\n-            if (!m.find()) {\n-                Log.error(MessageFormat.format(I18N.getString(\n-                        \"error.cert.not.found\"), key, keychainName));\n-                return null;\n-            }\n-            String matchedKey = m.group(1);\n-            if (m.find()) {\n-                Log.error(MessageFormat.format(I18N.getString(\n-                        \"error.multiple.certs.found\"), key, keychainName));\n-            }\n-            return matchedKey;\n-        } catch (IOException ioe) {\n-            Log.verbose(ioe);\n-            return null;\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.text.MessageFormat;\n@@ -43,0 +44,3 @@\n+import java.util.HexFormat;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -55,2 +59,2 @@\n-    private static Path findCertificate(String certificate) {\n-        Path result = null;\n+    public static String findCertificateKey(String keyPrefix, String teamName,\n+                                            String keychainName) {\n@@ -58,0 +62,108 @@\n+        String matchedKey = null;\n+        boolean useAsIs = (keyPrefix == null)\n+                || teamName.startsWith(keyPrefix)\n+                || teamName.startsWith(\"Developer ID\")\n+                || teamName.startsWith(\"3rd Party Mac\");\n+\n+        String name = (useAsIs) ? teamName : (keyPrefix + teamName);\n+\n+        String output = getFindCertificateOutput(name, keychainName);\n+        if (output == null) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                        \"error.cert.not.found\"), name, keychainName));\n+            return null;\n+        }\n+\n+        \/\/ Check and warn user if multiple certificates found\n+        \/\/ We will use different regex to count certificates.\n+        \/\/ ASCII case: \"alis\"<blob>=\"NAME\"\n+        \/\/ UNICODE case: \"alis\"<blob>=0xSOMEHEXDIGITS  \"NAME (\\SOMEDIGITS)\"\n+        \/\/ In UNICODE case name will contain octal sequence representing UTF-8\n+        \/\/ characters.\n+        \/\/ Just look for at least two '\"alis\"<blob>'.\n+        Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>\");\n+        Matcher m = p.matcher(output);\n+        if (m.find() && m.find()) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                        \"error.multiple.certs.found\"), name, keychainName));\n+        }\n+\n+        \/\/ Try to get ASCII only certificate first. This aproach only works\n+        \/\/ if certificate name has ASCII only characters in name. For certificates\n+        \/\/ with UNICODE characters in name we will use combination of \"security\"\n+        \/\/ and \"openssl\". We keeping ASCII only aproach to avoid regressions and\n+        \/\/ it works for many use cases.\n+        p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n+        m = p.matcher(output);\n+        if (m.find()) {\n+            matchedKey = m.group(1);;\n+        }\n+\n+        \/\/ Maybe it has UNICODE characters in name. In this case use \"security\"\n+        \/\/ and \"openssl\" to exctract name. We cannot use just \"security\", since\n+        \/\/ name can be truncated.\n+        if (matchedKey == null) {\n+            Path  file = null;\n+            try {\n+                file = getFindCertificateOutputPEM(name, keychainName);\n+                if (file != null) {\n+                    matchedKey = findCertificateSubject(\n+                                    file.toFile().getCanonicalPath());\n+                }\n+            } catch (IOException ioe) {\n+                Log.verbose(ioe);\n+            } finally {\n+                try {\n+                    Files.deleteIfExists(file);\n+                } catch (IOException ignored) {}\n+            }\n+        }\n+\n+        if (matchedKey == null) {\n+            Log.error(MessageFormat.format(I18N.getString(\n+                \"error.cert.not.found\"), name, keychainName));\n+        }\n+\n+        return matchedKey;\n+    }\n+\n+    private static String getFindCertificateOutput(String name,\n+                                                   String keychainName) {\n+        try (ByteArrayOutputStream baos = getFindCertificateOutput(name,\n+                                                                   keychainName,\n+                                                                   false)) {\n+            if (baos != null) {\n+                return baos.toString();\n+            }\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+        }\n+\n+        return null;\n+    }\n+\n+    private static Path getFindCertificateOutputPEM(String name,\n+                                                    String keychainName) {\n+        Path output = null;\n+        try (ByteArrayOutputStream baos = getFindCertificateOutput(name,\n+                                                                   keychainName,\n+                                                                   true)) {\n+            if (baos != null) {\n+                output = Files.createTempFile(\"tempfile\", \".tmp\");\n+                Files.copy(new ByteArrayInputStream(baos.toByteArray()),\n+                        output, StandardCopyOption.REPLACE_EXISTING);\n+                return output;\n+            }\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+            try {\n+                Files.deleteIfExists(output);\n+            } catch (IOException ignored) {}\n+        }\n+\n+        return null;\n+    }\n+\n+    private static ByteArrayOutputStream getFindCertificateOutput(String name,\n+                                                                  String keychainName,\n+                                                                  boolean isPEMFormat) {\n@@ -62,1 +174,1 @@\n-        args.add(certificate);\n+        args.add(name);\n@@ -64,1 +176,28 @@\n-        args.add(\"-p\");\n+        if (isPEMFormat) {\n+            args.add(\"-p\");\n+        }\n+        if (keychainName != null && !keychainName.isEmpty()) {\n+            args.add(keychainName);\n+        }\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (PrintStream ps = new PrintStream(baos)) {\n+            ProcessBuilder pb = new ProcessBuilder(args);\n+            IOUtils.exec(pb, false, ps);\n+            return baos;\n+        } catch (IOException ioe) {\n+            Log.verbose(ioe);\n+            return null;\n+        }\n+    }\n+\n+    private static String findCertificateSubject(String filename) {\n+        String result = null;\n+\n+        List<String> args = new ArrayList<>();\n+        args.add(\"\/usr\/bin\/openssl\");\n+        args.add(\"x509\");\n+        args.add(\"-noout\");\n+        args.add(\"-subject\");\n+        args.add(\"-in\");\n+        args.add(filename);\n@@ -70,0 +209,16 @@\n+            String output = baos.toString().strip();\n+            \/\/ Example output:\n+            \/\/ subject= \/UID=ABCDABCD\/CN=jpackage.openjdk.java.net (\\xC3\\xB6) (ABCDABCD)\/C=US\n+            \/\/ We need 'CN' value\n+            String [] pairs = output.split(\"\/\");\n+            for (String pair : pairs) {\n+                if (pair.startsWith(\"CN=\")) {\n+                    result = pair.substring(3);\n+                    \/\/ Convert escaped UTF-8 code points to characters\n+                    result = convertHexToChar(result);\n+                    break;\n+                }\n+            }\n+        } catch (IOException ex) {\n+            Log.verbose(ex);\n+        }\n@@ -71,1 +226,2 @@\n-            Path output = Files.createTempFile(\"tempfile\", \".tmp\");\n+        return result;\n+    }\n@@ -73,2 +229,7 @@\n-            Files.copy(new ByteArrayInputStream(baos.toByteArray()),\n-                    output, StandardCopyOption.REPLACE_EXISTING);\n+    \/\/ Certificate name with Unicode will be:\n+    \/\/ Developer ID Application: jpackage.openjdk.java.net (\\xHH\\xHH)\n+    \/\/ Convert UTF-8 code points '\\xHH\\xHH' to character.\n+    private static String convertHexToChar(String input) {\n+        if (input == null || input.isEmpty()) {\n+            return input;\n+        }\n@@ -76,1 +237,2 @@\n-            result = output;\n+        if (!input.contains(\"\\\\x\")) {\n+            return input;\n@@ -78,1 +240,0 @@\n-        catch (IOException ignored) {}\n@@ -80,1 +241,28 @@\n-        return result;\n+        StringBuilder output = new StringBuilder();\n+        try {\n+            int len = input.length();\n+            for (int i = 0; i < len; i++) {\n+                if (input.codePointAt(i) == '\\\\' &&\n+                    (i + 8) <= len &&\n+                    input.codePointAt(i + 1) == 'x' &&\n+                    input.codePointAt(i + 4) == '\\\\' &&\n+                    input.codePointAt(i + 5) == 'x') {\n+                        \/\/ We found '\\xHH\\xHH'\n+                        \/\/ HEX code points to byte array\n+                        byte [] bytes = HexFormat.of().parseHex(\n+                            input.substring(i + 2, i + 4) + input.substring(i + 6, i + 8));\n+                        \/\/ Byte array with UTF-8 code points to character\n+                        output.append(new String(bytes, \"UTF-8\"));\n+                        i += 7; \/\/ Skip '\\xHH\\xHH'\n+                } else {\n+                    output.appendCodePoint(input.codePointAt(i));\n+                }\n+            }\n+        } catch (Exception ex) {\n+            Log.verbose(ex);\n+            \/\/ We will consider any excpetions during conversion as\n+            \/\/ certificate not found.\n+            return null;\n+        }\n+\n+        return output.toString();\n@@ -83,1 +271,1 @@\n-    private static Date findCertificateDate(String filename) {\n+    private Date findCertificateDate(String filename) {\n@@ -110,1 +298,1 @@\n-    private static boolean verifyCertificate(String certificate) {\n+    private boolean verifyCertificate(String certificate) {\n@@ -118,1 +306,1 @@\n-                file = findCertificate(certificate);\n+                file = getFindCertificateOutputPEM(certificate, null);\n@@ -124,2 +312,1 @@\n-            }\n-            finally {\n+            } finally {\n@@ -127,1 +314,1 @@\n-                    Files.delete(file);\n+                    Files.deleteIfExists(file);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacCertificate.java","additions":204,"deletions":17,"binary":false,"changes":221,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n@@ -119,1 +119,1 @@\n-                        result = MacBaseInstallerBundler.findKey(\n+                        result = MacCertificate.findCertificateKey(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3088,1 +3088,4 @@\n-                    throw new ZipException(\"Invalid CEN header (invalid zip64 extra data field size)\");\n+                    throw new ZipException(String.format(\n+                            \"Invalid CEN header (invalid extra data field size for \" +\n+                                    \"tag: 0x%04x size: %d)\",\n+                            tag, sz));\n@@ -3092,0 +3095,9 @@\n+                    \/\/ if ZIP64_EXTID blocksize == 0, which may occur with some older\n+                    \/\/ versions of Apache Ant and Commons Compress, validate csize\n+                    \/\/ size, and locoff to make sure the fields != ZIP64_MAGICVAL\n+                    if (sz == 0) {\n+                        if (csize == ZIP64_MINVAL || size == ZIP64_MINVAL || locoff == ZIP64_MINVAL) {\n+                            throw new ZipException(\"Invalid CEN header (invalid zip64 extra data field size)\");\n+                        }\n+                        break;\n+                    }\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -128,0 +128,14 @@\n+\n+TEST_VM(SymbolTable, test_cleanup_leak) {\n+  \/\/ Check that dead entry cleanup doesn't increment refcount of live entry in same bucket.\n+\n+  \/\/ Create symbol and release ref, marking it available for cleanup.\n+  Symbol* entry1 = SymbolTable::new_symbol(\"hash_collision_123\");\n+  entry1->decrement_refcount();\n+\n+  \/\/ Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.\n+  \/\/ Note: relies on SymbolTable's use of String::hashCode which collides for these two values.\n+  Symbol* entry2 = SymbolTable::new_symbol(\"hash_collision_397476851\");\n+\n+  ASSERT_EQ(entry2->refcount(), 1) << \"Symbol refcount just created is 1\";\n+}\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include <iomanip>\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+using testing::HasSubstr;\n+\n@@ -74,2 +76,2 @@\n-  EXPECT_PRED2(string_contains_substring, description, LogConfiguration::StdoutLog->name());\n-  EXPECT_PRED2(string_contains_substring, description, LogConfiguration::StderrLog->name());\n+  EXPECT_THAT(description, HasSubstr(LogConfiguration::StdoutLog->name()));\n+  EXPECT_THAT(description, HasSubstr(LogConfiguration::StderrLog->name()));\n@@ -79,1 +81,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogTag::name(static_cast<LogTagType>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogTag::name(static_cast<LogTagType>(i))));\n@@ -82,1 +84,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogLevel::name(static_cast<LogLevelType>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogLevel::name(static_cast<LogLevelType>(i))));\n@@ -85,1 +87,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogDecorators::name(static_cast<LogDecorators::Decorator>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogDecorators::name(static_cast<LogDecorators::Decorator>(i))));\n@@ -92,2 +94,2 @@\n-  EXPECT_PRED2(string_contains_substring, description, expected_buf);\n-  EXPECT_PRED2(string_contains_substring, description, \"#1: stderr all=off\");\n+  EXPECT_THAT(description, HasSubstr(expected_buf));\n+  EXPECT_THAT(description, HasSubstr(\"#1: stderr all=off\"));\n@@ -110,1 +112,1 @@\n-  EXPECT_PRED2(string_contains_substring, description, expected_buf);\n+  EXPECT_THAT(description, HasSubstr(expected_buf));\n@@ -496,2 +498,2 @@\n-  EXPECT_TRUE(string_contains_substring(msg, \"No tag set matches selection:\"));\n-  EXPECT_TRUE(string_contains_substring(msg, invalid_tagset));\n+  EXPECT_THAT(msg, HasSubstr(\"No tag set matches selection:\"));\n+  EXPECT_THAT(msg, HasSubstr(invalid_tagset));\n@@ -562,1 +564,1 @@\n-  EXPECT_TRUE(string_contains_substring(ss.as_string(), \"Did you mean any of the following?\"));\n+  EXPECT_THAT(suggestion, HasSubstr(\"Did you mean any of the following?\"));\n","filename":"test\/hotspot\/gtest\/logging\/test_logConfiguration.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  EXPECT_TRUE(string_contains_substring(logger_output, expected_output_substring))\n+  EXPECT_THAT(logger_output, testing::HasSubstr(expected_output_substring))\n","filename":"test\/hotspot\/gtest\/logging\/test_logFileOutput.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    EXPECT_PRED2(string_contains_substring, stream.as_string(), expected)\n+    EXPECT_THAT(stream.base(), testing::HasSubstr(expected))\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSetDescriptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  EXPECT_EQ(0, strcmp(str, str_copy)) << \"Not identical copy\";\n+  EXPECT_STREQ(str, str_copy) << \"Not identical copy\";\n","filename":"test\/hotspot\/gtest\/memory\/test_guardedMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  static const size_t minws;\n@@ -60,1 +59,1 @@\n-    size_t innocous_size = minws + ((maxws - minws) \/ 2);\n+    size_t innocous_size = MAX2((size_t)1, maxws \/ 2);\n@@ -91,2 +90,2 @@\n-    for (size_t s1 = minws; s1 <= maxws; s1++) {\n-      for (size_t s2 = minws; s2 <= maxws; s2++) {\n+    for (size_t s1 = 1; s1 <= maxws; s1++) {\n+      for (size_t s2 = 1; s2 <= maxws; s2++) {\n@@ -111,1 +110,1 @@\n-          p = bl.remove_block(minws, &real_size);\n+          p = bl.remove_block(1, &real_size);\n@@ -132,1 +131,1 @@\n-    RandSizeGenerator rgen(minws, maxws + 1);\n+    RandSizeGenerator rgen(1, maxws + 1);\n@@ -187,1 +186,1 @@\n-        MetaWord* p = bl[which].remove_block(minws, &real_size);\n+        MetaWord* p = bl[which].remove_block(1, &real_size);\n@@ -190,1 +189,1 @@\n-        ASSERT_GE(real_size, minws);\n+        ASSERT_GE(real_size, (size_t)1);\n@@ -208,1 +207,0 @@\n-template <typename BINLISTTYPE> const size_t BinListBasicTest<BINLISTTYPE>::minws = BINLISTTYPE::MinWordSize;\n@@ -211,2 +209,2 @@\n-TEST_VM(metaspace, BinList_basic_8)     { BinListBasicTest< BinListImpl<2, 8> >::basic_test(); }\n-TEST_VM(metaspace, BinList_basic_16)    { BinListBasicTest< BinListImpl<2, 16> >::basic_test(); }\n+TEST_VM(metaspace, BinList_basic_1)     { BinListBasicTest< BinListImpl<1> >::basic_test(); }\n+TEST_VM(metaspace, BinList_basic_8)     { BinListBasicTest< BinListImpl<8> >::basic_test(); }\n@@ -214,2 +212,0 @@\n-TEST_VM(metaspace, BinList_basic_1331)  { BinListBasicTest< BinListImpl<13, 31> >::basic_test(); }\n-TEST_VM(metaspace, BinList_basic_131)   { BinListBasicTest< BinListImpl<13, 1> >::basic_test(); }\n@@ -217,11 +213,3 @@\n-TEST_VM(metaspace, BinList_basic2_8)     { BinListBasicTest< BinListImpl<2, 8> >::basic_test_2(); }\n-TEST_VM(metaspace, BinList_basic2_16)    { BinListBasicTest< BinListImpl<2, 16> >::basic_test_2(); }\n-TEST_VM(metaspace, BinList_basic2_32)    { BinListBasicTest<BinList32 >::basic_test_2(); }\n-TEST_VM(metaspace, BinList_basic2_1331)  { BinListBasicTest< BinListImpl<13, 31> >::basic_test_2(); }\n-TEST_VM(metaspace, BinList_basic2_131)   { BinListBasicTest< BinListImpl<13, 1> >::basic_test_2(); }\n-\n-TEST_VM(metaspace, BinList_random_test_8)     { BinListBasicTest< BinListImpl<2, 8> >::random_test(); }\n-TEST_VM(metaspace, BinList_random_test_16)    { BinListBasicTest< BinListImpl<2, 16> >::random_test(); }\n-TEST_VM(metaspace, BinList_random_test_32)    { BinListBasicTest<BinList32>::random_test(); }\n-TEST_VM(metaspace, BinList_random_test_1331)  { BinListBasicTest< BinListImpl<13, 31> >::random_test(); }\n-TEST_VM(metaspace, BinList_random_test_131)   { BinListBasicTest< BinListImpl<13, 1> >::random_test(); }\n+TEST_VM(metaspace, BinList_basic_2_1)     { BinListBasicTest< BinListImpl<1> >::basic_test_2(); }\n+TEST_VM(metaspace, BinList_basic_2_8)     { BinListBasicTest< BinListImpl<8> >::basic_test_2(); }\n+TEST_VM(metaspace, BinList_basic_2_32)    { BinListBasicTest<BinList32>::basic_test_2(); }\n@@ -229,0 +217,3 @@\n+TEST_VM(metaspace, BinList_basic_rand_1)     { BinListBasicTest< BinListImpl<1> >::random_test(); }\n+TEST_VM(metaspace, BinList_basic_rand_8)     { BinListBasicTest< BinListImpl<8> >::random_test(); }\n+TEST_VM(metaspace, BinList_basic_rand_32)    { BinListBasicTest<BinList32>::random_test(); }\n","filename":"test\/hotspot\/gtest\/metaspace\/test_binlist.cpp","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    int max_chunks = (max_footprint_words * commit_factor) \/ largest_chunk_size;\n+    int max_chunks = (int)((max_footprint_words * commit_factor) \/ (float) largest_chunk_size);\n@@ -99,1 +99,1 @@\n-    const size_t sz = word_size_for_level(lvl) * commit_factor;\n+    const size_t sz = (size_t)((float)word_size_for_level(lvl) * commit_factor);\n@@ -197,1 +197,1 @@\n-    for (int j = 0; j < 1000; j++) {\n+    for (int j = 0; j < 750; j++) {\n@@ -252,1 +252,1 @@\n-    const int num_runs = 5;\n+    const int num_runs = 3;\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkManager_stress.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    int iter = 100000; \/\/ safety stop\n+    int iter = 25000; \/\/ safety stop\n","filename":"test\/hotspot\/gtest\/metaspace\/test_freeblocks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+using metaspace::AllocationAlignmentByteSize;\n@@ -53,5 +54,0 @@\n-\/\/ See metaspaceArena.cpp : needed for predicting commit sizes.\n-namespace metaspace {\n-  extern size_t get_raw_word_size_for_requested_word_size(size_t net_word_size);\n-}\n-\n@@ -182,1 +178,1 @@\n-      ASSERT_TRUE(is_aligned(p, sizeof(MetaWord)));\n+      ASSERT_TRUE(is_aligned(p, AllocationAlignmentByteSize));\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+using metaspace::AllocationAlignmentByteSize;\n@@ -55,5 +56,0 @@\n-\/\/ See metaspaceArena.cpp : needed for predicting commit sizes.\n-namespace metaspace {\n-  extern size_t get_raw_word_size_for_requested_word_size(size_t net_word_size);\n-}\n-\n@@ -182,1 +178,2 @@\n-      EXPECT_TRUE(is_aligned(p, sizeof(MetaWord)));\n+      EXPECT_TRUE(is_aligned(p, AllocationAlignmentByteSize));\n+\n@@ -386,1 +383,1 @@\n-    const int iterations = 10000;\n+    const int iterations = 2500;\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena_stress.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-    for (int run = 0; run < 1000; run++) {\n+    for (int run = 0; run < 750; run++) {\n@@ -428,1 +428,1 @@\n-    \/\/ Allocate a root chunk and commit a random part of it. Then repeatedly split\n+    \/\/ Allocate a root chunk and commit a part of it. Then repeatedly split\n@@ -565,1 +565,0 @@\n-  double d = os::elapsedTime();\n@@ -567,7 +566,3 @@\n-  for (int run = 0; run < 100; run++) {\n-    VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE,\n-        metaspace::chunklevel::MAX_CHUNK_WORD_SIZE);\n-    test.test_split_and_merge_chunks();\n-  }\n-  double d2 = os::elapsedTime();\n-  LOG(\"%f\", (d2-d));\n+  VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE,\n+      metaspace::chunklevel::MAX_CHUNK_WORD_SIZE);\n+  test.test_split_and_merge_chunks();\n","filename":"test\/hotspot\/gtest\/metaspace\/test_virtualspacenode.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"services\/memTracker.hpp\"\n+#include \"services\/virtualMemoryTracker.hpp\"\n+#include \"unittest.hpp\"\n+\n+\/\/ Tests the assignment operator of ReservedMemoryRegion\n+TEST_VM(NMT, ReservedRegionCopy) {\n+  address dummy1 = (address)0x10000000;\n+  NativeCallStack stack1(&dummy1, 1);\n+  ReservedMemoryRegion region1(dummy1, os::vm_page_size(), stack1, mtThreadStack);\n+  VirtualMemorySummary::record_reserved_memory(os::vm_page_size(), region1.flag());\n+  region1.add_committed_region(dummy1, os::vm_page_size(), stack1);\n+  address dummy2 = (address)0x20000000;\n+  NativeCallStack stack2(&dummy2, 1);\n+  ReservedMemoryRegion region2(dummy2, os::vm_page_size(), stack2, mtCode);\n+  VirtualMemorySummary::record_reserved_memory(os::vm_page_size(), region2.flag());\n+  region2.add_committed_region(dummy2, os::vm_page_size(), stack2);\n+\n+  region2 = region1;\n+\n+  CommittedRegionIterator itr = region2.iterate_committed_regions();\n+  const CommittedMemoryRegion* rgn = itr.next();\n+  ASSERT_EQ(rgn->base(), dummy1); \/\/ Now we should see dummy1\n+  ASSERT_EQ(region2.flag(), mtThreadStack); \/\/ Should be correct flag\n+  ASSERT_EQ(region2.call_stack()->get_frame(0), dummy1); \/\/ Check the stack\n+  rgn = itr.next();\n+  ASSERT_EQ(rgn, (const CommittedMemoryRegion*)nullptr); \/\/ and nothing else\n+}\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_reserved_region.cpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -45,17 +45,16 @@\n-  \/\/ method entry test\n-  ASSERT_TRUE(strstr(output, \"this\") != NULL) << \"must have \\\"this\\\"\";\n-  ASSERT_TRUE(strstr(output, \"bytecode 1:\") != NULL) << \"must have \\\"bytecode 1\\\"\";\n-  ASSERT_TRUE(strstr(output, \"bytecode 2:\") != NULL) << \"must have \\\"bytecode 2\\\"\";\n-  ASSERT_TRUE(strstr(output, \"cp index:\") != NULL) << \"must have constant pool index\";\n-  ASSERT_TRUE(strstr(output, \"F1:\") != NULL) << \"must have F1 value\";\n-  ASSERT_TRUE(strstr(output, \"F2:\") != NULL) << \"must have F2 value\";\n-  ASSERT_TRUE(strstr(output, \"method:\") != NULL) << \"must have a method\";\n-  ASSERT_TRUE(strstr(output, \"flag values:\") != NULL) << \"must have a flag\";\n-  ASSERT_TRUE(strstr(output, \"tos:\") != NULL) << \"must have result type\";\n-  ASSERT_TRUE(strstr(output, \"local signature:\") != NULL) << \"must have local signature flag\";\n-  ASSERT_TRUE(strstr(output, \"has appendix:\") != NULL) << \"must have appendix flag\";\n-  ASSERT_TRUE(strstr(output, \"forced virtual:\") != NULL) << \"must have forced virtual flag\";\n-  ASSERT_TRUE(strstr(output, \"final:\") != NULL) << \"must have final flag\";\n-  ASSERT_TRUE(strstr(output, \"virtual final:\") != NULL) << \"must have virtual final flag\";\n-  ASSERT_TRUE(strstr(output, \"resolution failed:\") != NULL) << \"must have resolution failed flag\";\n-  ASSERT_TRUE(strstr(output, \"num parameters:\") != NULL) << \"must have number of parameters\";\n+  static const char* const expected_strings[] = {\n+    \/\/ Method entry tests:\n+    \"this\", \"bytecode 1:\", \"bytecode 2:\", \"cp index:\", \"F1:\", \"F2:\",\n+    \"method:\", \"flag values:\", \"tos:\", \"local signature:\", \"has appendix:\",\n+    \"forced virtual:\", \"final:\", \"virtual final:\", \"resolution failed:\",\n+    \"num parameters:\",\n+\n+    \/\/ field entry test\n+    \"Offset:\", \"Field Index:\", \"CP Index:\", \"TOS:\", \"Is Final:\", \"Is Volatile:\",\n+    \"Put Bytecode:\", \"Get Bytecode:\",\n+    nullptr\n+  };\n+\n+  for (int i = 0; expected_strings[i] != nullptr; i++) {\n+    ASSERT_THAT(output, testing::HasSubstr(expected_strings[i]));\n+  }\n@@ -63,9 +62,0 @@\n-  \/\/ field entry test\n-  ASSERT_TRUE(strstr(output, \"Offset:\") != NULL) << \"must have field offset\";\n-  ASSERT_TRUE(strstr(output, \"Field Index:\") != NULL) << \"must have field index\";\n-  ASSERT_TRUE(strstr(output, \"CP Index:\") != NULL) << \"must have constant pool index\";\n-  ASSERT_TRUE(strstr(output, \"TOS:\") != NULL) << \"must have type\";\n-  ASSERT_TRUE(strstr(output, \"Is Final:\") != NULL) << \"must have final flag\";\n-  ASSERT_TRUE(strstr(output, \"Is Volatile:\") != NULL) << \"must have volatile flag\";\n-  ASSERT_TRUE(strstr(output, \"Put Bytecode:\") != NULL) << \"must have \\\"put code\\\"\";\n-  ASSERT_TRUE(strstr(output, \"Get Bytecode:\") != NULL) << \"must have \\\"get code\\\"\";\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+using testing::HasSubstr;\n+\n@@ -54,1 +56,1 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"injected 'loader_data'\") != NULL) << \"Must contain injected fields\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"injected 'loader_data'\")) << \"Must contain injected fields\";\n@@ -59,1 +61,1 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"injected 'protection_domain'\") != NULL) << \"Must contain injected fields\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"injected 'protection_domain'\")) << \"Must contain injected fields\";\n@@ -66,2 +68,2 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"method holder:\") != NULL) << \"Must contain method_holder field\";\n-  ASSERT_TRUE(strstr(st.as_string(), \"'java\/lang\/ClassLoader'\") != NULL) << \"Must be in ClassLoader\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"method holder:\")) << \"Must contain method_holder field\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"'java\/lang\/ClassLoader'\")) << \"Must be in ClassLoader\";\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,3 +43,0 @@\n-static bool test_pattern(stringStream* st, const char* pattern) {\n-  return (strstr(st->as_string(), pattern) != NULL);\n-}\n@@ -50,1 +47,1 @@\n-  ASSERT_TRUE(test_pattern(&st, pattern)) << pattern << \" not in \" << st.as_string();\n+  ASSERT_THAT(st.base(), testing::HasSubstr(pattern));\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+using testing::HasSubstr;\n+\n@@ -41,3 +43,3 @@\n-  ASSERT_TRUE(strstr(output, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(output, \"method wait : (J)V\") != NULL) << \"must find java\/lang\/Object::wait\";\n-  ASSERT_TRUE(strstr(output, \"method finalize : ()V\\n   0 return\") != NULL) << \"must find java\/lang\/Object::finalize and disasm\";\n+  ASSERT_THAT(output, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(output, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait\";\n+  ASSERT_THAT(output, HasSubstr(\"method finalize : ()V\\n   0 return\")) << \"must find java\/lang\/Object::finalize and disasm\";\n@@ -54,4 +56,4 @@\n-  ASSERT_TRUE(strstr(o1, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(o1, \"method wait : (J)V\")    != NULL) << \"must find java\/lang\/Object::wait(long)\";\n-  ASSERT_TRUE(strstr(o1, \"method wait : ()V\")     != NULL) << \"must find java\/lang\/Object::wait()\";\n-  ASSERT_TRUE(strstr(o1, \"method finalize : ()V\") == NULL) << \"must not find java\/lang\/Object::finalize\";\n+  ASSERT_THAT(o1, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(o1, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait(long)\";\n+  ASSERT_THAT(o1, HasSubstr(\"method wait : ()V\")) << \"must find java\/lang\/Object::wait()\";\n+  ASSERT_THAT(o1, Not(HasSubstr(\"method finalize : ()V\"))) << \"must not find java\/lang\/Object::finalize\";\n@@ -62,4 +64,4 @@\n-  ASSERT_TRUE(strstr(o2, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : (J)V\")  != NULL) << \"must find java\/lang\/Object::wait(long)\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : (JI)V\") != NULL) << \"must find java\/lang\/Object::wait(long,int)\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : ()V\")   == NULL) << \"must not find java\/lang\/Object::wait()\";\n+  ASSERT_THAT(o2, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(o2, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait(long)\";\n+  ASSERT_THAT(o2, HasSubstr(\"method wait : (JI)V\")) << \"must find java\/lang\/Object::wait(long,int)\";\n+  ASSERT_THAT(o2, Not(HasSubstr(\"method wait : ()V\"))) << \"must not find java\/lang\/Object::wait()\";\n","filename":"test\/hotspot\/gtest\/runtime\/test_classPrinter.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"\"), 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"\");\n@@ -84,1 +84,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"foobar\") , 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"foobar\");\n@@ -92,1 +92,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"xyz\"), 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"xyz\");\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+using testing::HasSubstr;\n+\n@@ -174,1 +176,1 @@\n-  EXPECT_THAT(buf, testing::HasSubstr(expected));\n+  EXPECT_THAT(buf, HasSubstr(expected));\n@@ -771,1 +773,1 @@\n-  ASSERT_EQ(strcmp(expected, buffer), 0);\n+  EXPECT_STREQ(expected, buffer);\n@@ -780,1 +782,1 @@\n-  EXPECT_NE(::strstr(haystack, needle), (char*)NULL)\n+  EXPECT_THAT(haystack, HasSubstr(needle));\n@@ -782,1 +784,1 @@\n-  EXPECT_EQ(::strstr(haystack, needle), (char*)NULL)\n+  EXPECT_THAT(haystack, Not(HasSubstr(needle)));\n@@ -927,0 +929,21 @@\n+\n+TEST_VM(os, reserve_at_wish_address_shall_not_replace_mappings_smallpages) {\n+  char* p1 = os::reserve_memory(M, false, mtTest);\n+  ASSERT_NE(p1, nullptr);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M);\n+  ASSERT_EQ(p2, nullptr); \/\/ should have failed\n+  os::release_memory(p1, M);\n+}\n+\n+TEST_VM(os, reserve_at_wish_address_shall_not_replace_mappings_largepages) {\n+  if (UseLargePages && !os::can_commit_large_page_memory()) { \/\/ aka special\n+    const size_t lpsz = os::large_page_size();\n+    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false);\n+    ASSERT_NE(p1, nullptr);\n+    char* p2 = os::reserve_memory_special(lpsz, lpsz, lpsz, p1, false);\n+    ASSERT_EQ(p2, nullptr); \/\/ should have failed\n+    os::release_memory(p1, M);\n+  } else {\n+    tty->print_cr(\"Skipped.\");\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-  ASSERT_TRUE(strstr(buf, \"JNI_CreateJavaVM\") != nullptr);\n+  ASSERT_THAT(buf, testing::HasSubstr(\"JNI_CreateJavaVM\"));\n@@ -447,1 +447,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"jniCheck.hpp\") == 0);\n+  EXPECT_STREQ(buf, \"jniCheck.hpp\");\n@@ -474,1 +474,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"<OVERFLOW>\") == 0);\n+  EXPECT_STREQ(buf, \"<OVERFLOW>\");\n@@ -485,1 +485,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"L\") == 0); \/\/ Overflow message does not fit, so we fall back to \"L:line_number\"\n+  EXPECT_STREQ(buf, \"L\"); \/\/ Overflow message does not fit, so we fall back to \"L:line_number\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -113,0 +113,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n@@ -564,1 +567,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -567,0 +570,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-    EXPECT_EQ(strcmp(result, (expected)), 0) << \"Failed with\"  \\\n+    EXPECT_STREQ((result), (expected)) << \"Failed with\"        \\\n@@ -231,3 +231,1 @@\n-        << \" value '\"    << (value)    << \"'\"                  \\\n-        << \" result '\"   << result     << \"'\"                  \\\n-        << \" expected '\" << (expected) << \"'\";                 \\\n+        << \" value '\"    << (value);                           \\\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  ASSERT_EQ(strcmp(end, \":-)\"), 0);\n+  EXPECT_STREQ(end, \":-)\");\n","filename":"test\/hotspot\/gtest\/utilities\/test_parse_memory_size.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-    ASSERT_TRUE(strstr(st.as_string(), str) != nullptr) << \"string not present \" << str;\n+    ASSERT_THAT(st.base(), testing::HasSubstr(str));\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+serviceability\/sa\/ClhsdbAttachDifferentJVMs.java              8307393   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-generational-zgc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+runtime\/cds\/appcds\/customLoader\/HelloCustom_JFR.java 8241075 linux-all,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-requiredVersion=7.3+1\n+requiredVersion=7.3.1+1\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,2 +387,0 @@\n- -runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java \\\n- -runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @requires vm.flagless\n@@ -50,1 +49,3 @@\n-        OutputAnalyzer output = new OutputAnalyzer(ProcessTools.createJavaProcessBuilder(\n+        System.setProperty(\"test.noclasspath\", \"true\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/applications\/scimark\/Scimark.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test running with log:jit*=debug enabled.\n+ * @run main\/othervm -Xlog:jit*=debug compiler.arguments.TestTraceTypeProfile\n+ *\/\n+\n+package compiler.arguments;\n+\n+public class TestLogJIT {\n+\n+    static public void main(String[] args) {\n+        System.out.println(\"Passed\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestLogJIT.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test running TraceTypeProfile enabled.\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+TraceTypeProfile compiler.arguments.TestTraceTypeProfile\n+ *\/\n+\n+package compiler.arguments;\n+\n+public class TestTraceTypeProfile {\n+\n+    static public void main(String[] args) {\n+        System.out.println(\"Passed\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestTraceTypeProfile.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -64,1 +64,1 @@\n-    @IR(failOn = {IRNode.MIN_V})\n+    @IR(failOn = {IRNode.MIN_VI, IRNode.MIN_VF, IRNode.MIN_VD})\n@@ -80,1 +80,1 @@\n-    @IR(failOn = {IRNode.MAX_V})\n+    @IR(failOn = {IRNode.MAX_VI, IRNode.MAX_VF, IRNode.MAX_VD})\n@@ -95,1 +95,1 @@\n-    @IR(failOn = {IRNode.MIN_V})\n+    @IR(failOn = {IRNode.MIN_VI, IRNode.MIN_VF, IRNode.MIN_VD})\n@@ -111,1 +111,1 @@\n-    @IR(failOn = {IRNode.MAX_V})\n+    @IR(failOn = {IRNode.MAX_VI, IRNode.MAX_VF, IRNode.MAX_VD})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMinMaxSubword.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR,  \" >0 \"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,  \" >0 \"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestAutoVecCountingDownLoop.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,3 +51,6 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR,  \" >0 \" })\n-    @IR(counts = { IRNode.ADD_VD,       \" >0 \" })\n-    @IR(counts = { IRNode.STORE_VECTOR, \" >0 \" })\n+    \/\/ Given small iteration count, the unrolling factor is not very predictable,\n+    \/\/ hence it is difficult to exactly predict the vector size. But let's at least\n+    \/\/ check that there is some vectorization of any size.\n+    @IR(counts = { IRNode.LOAD_VECTOR_D, IRNode.VECTOR_SIZE_ANY, \" >0 \" })\n+    @IR(counts = { IRNode.ADD_VD,        IRNode.VECTOR_SIZE_ANY, \" >0 \" })\n+    @IR(counts = { IRNode.STORE_VECTOR,                          \" >0 \" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestAutoVectorization2DArray.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    @IR(failOn = {IRNode.VECTOR_CAST_D2X})\n+    @IR(failOn = {IRNode.VECTOR_CAST_D2I})\n@@ -64,1 +64,1 @@\n-    @IR(failOn = {IRNode.VECTOR_CAST_L2X})\n+    @IR(failOn = {IRNode.VECTOR_CAST_L2F})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestDisableAutoVectOpcodes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8308340\n+ * @key randomness\n+ * @summary Test fma match rule after C2 optimizer.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestIRFma\n+ *\/\n+\n+public class TestIRFma {\n+\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\"})\n+    public void runMethod() {\n+        float fa = RANDOM.nextFloat();\n+        float fb = RANDOM.nextFloat();\n+        float fc = RANDOM.nextFloat();\n+        assertResult(fa, fb, fc);\n+\n+        double da = RANDOM.nextDouble();\n+        double db = RANDOM.nextDouble();\n+        double dc = RANDOM.nextDouble();\n+        assertResult(da, db, dc);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(float a, float b, float c) {\n+        Asserts.assertEquals(Math.fma(-a, -b, c)  , test1(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, c)   , test3(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, c)   , test5(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, -c)  , test7(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, -c)  , test9(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, b, -c)   , test11(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, -b, -c) , test13(a, b, c));\n+    }\n+\n+    @DontCompile\n+    public void assertResult(double a, double b, double c) {\n+        Asserts.assertEquals(Math.fma(-a, -b, c)  , test2(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, c)   , test4(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, c)   , test6(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, -c)  , test8(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, -c)  , test10(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, b, -c)   , test12(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, -b, -c) , test14(a, b, c));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test1(float a, float b, float c) {\n+        return Math.fma(-a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test2(double a, double b, double c) {\n+        return Math.fma(-a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test3(float a, float b, float c) {\n+        return Math.fma(-a, b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test4(double a, double b, double c) {\n+        return Math.fma(-a, b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test5(float a, float b, float c) {\n+        return Math.fma(a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test6(double a, double b, double c) {\n+        return Math.fma(a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test7(float a, float b, float c) {\n+        return Math.fma(-a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test8(double a, double b, double c) {\n+        return Math.fma(-a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test9(float a, float b, float c) {\n+        return Math.fma(a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test10(double a, double b, double c) {\n+        return Math.fma(a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test11(float a, float b, float c) {\n+        return Math.fma(a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test12(double a, double b, double c) {\n+        return Math.fma(a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test13(float a, float b, float c) {\n+        return Math.fma(-a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test14(double a, double b, double c) {\n+        return Math.fma(-a, -b, -c);\n+    }\n+\n+ }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRFma.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8289422 8306088\n+ * @bug 8289422 8306088 8313720\n@@ -206,1 +206,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -215,1 +218,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -224,1 +230,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -233,1 +242,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -242,1 +254,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -251,1 +266,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -260,1 +278,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -269,1 +290,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -278,1 +302,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -287,1 +314,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -297,1 +327,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -306,1 +339,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -315,1 +351,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -324,1 +363,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -333,1 +375,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -342,1 +387,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -351,1 +399,56 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveFLTforFConstH2(float[] a, float[] b, float[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] < b[i+0]) ? 0.1f : -0.1f;\n+            c[i+1] = (a[i+1] < b[i+1]) ? 0.1f : -0.1f;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveFLEforFConstH2(float[] a, float[] b, float[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <= b[i+0]) ? 0.1f : -0.1f;\n+            c[i+1] = (a[i+1] <= b[i+1]) ? 0.1f : -0.1f;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"=0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \"=0\",\n+                  IRNode.VECTOR_BLEND_F, \"=0\",\n+                  IRNode.STORE_VECTOR, \"=0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveFYYforFConstH2(float[] a, float[] b, float[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <= b[i+0]) ? 0.1f : -0.1f;\n+            c[i+1] = (a[i+1] <  b[i+1]) ? 0.1f : -0.1f;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"=0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \"=0\",\n+                  IRNode.VECTOR_BLEND_F, \"=0\",\n+                  IRNode.STORE_VECTOR, \"=0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveFXXforFConstH2(float[] a, float[] b, float[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <  b[i+0]) ? 0.1f : -0.1f;\n+            c[i+1] = (a[i+1] <= b[i+1]) ? 0.1f : -0.1f;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -360,1 +463,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -369,1 +475,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -378,1 +487,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -387,1 +499,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -396,1 +511,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -404,0 +522,52 @@\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveDLTforDConstH2(double[] a, double[] b, double[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] < b[i+0]) ? 0.1 : -0.1;\n+            c[i+1] = (a[i+1] < b[i+1]) ? 0.1 : -0.1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveDLEforDConstH2(double[] a, double[] b, double[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <= b[i+0]) ? 0.1 : -0.1;\n+            c[i+1] = (a[i+1] <= b[i+1]) ? 0.1 : -0.1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"=0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \"=0\",\n+                  IRNode.VECTOR_BLEND_D, \"=0\",\n+                  IRNode.STORE_VECTOR, \"=0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveDYYforDConstH2(double[] a, double[] b, double[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <= b[i+0]) ? 0.1 : -0.1;\n+            c[i+1] = (a[i+1] <  b[i+1]) ? 0.1 : -0.1;\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"=0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \"=0\",\n+                  IRNode.VECTOR_BLEND_D, \"=0\",\n+                  IRNode.STORE_VECTOR, \"=0\"},\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    private static void testCMoveDXXforDConstH2(double[] a, double[] b, double[] c) {\n+        for (int i = 0; i < a.length; i+=2) {\n+            c[i+0] = (a[i+0] <  b[i+0]) ? 0.1 : -0.1;\n+            c[i+1] = (a[i+1] <= b[i+1]) ? 0.1 : -0.1;\n+        }\n+    }\n+\n@@ -411,1 +581,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -422,1 +592,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -433,1 +603,5 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,     IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \">0\",\n+                  IRNode.LOAD_VECTOR_F,     IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \">0\",\n+                  IRNode.VECTOR_MASK_CMP_I, IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \">0\",\n+                  IRNode.VECTOR_BLEND_F,    IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -445,1 +619,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -456,1 +630,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -467,1 +641,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -478,1 +652,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -489,1 +663,5 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L,     IRNode.VECTOR_SIZE + \"min(max_long, max_double)\", \">0\",\n+                  IRNode.LOAD_VECTOR_D,     IRNode.VECTOR_SIZE + \"min(max_long, max_double)\", \">0\",\n+                  IRNode.VECTOR_MASK_CMP_L, IRNode.VECTOR_SIZE + \"min(max_long, max_double)\", \">0\",\n+                  IRNode.VECTOR_BLEND_D,    IRNode.VECTOR_SIZE + \"min(max_long, max_double)\", \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -502,1 +680,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -513,1 +691,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -524,1 +702,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -536,1 +717,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -547,1 +728,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -558,1 +739,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -569,1 +750,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -580,1 +761,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_D, \">0\",\n+                  IRNode.VECTOR_BLEND_D, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -593,1 +777,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -605,1 +792,4 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.VECTOR_MASK_CMP, \">0\", IRNode.VECTOR_BLEND, \">0\", IRNode.STORE_VECTOR, \">0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \">0\",\n+                  IRNode.VECTOR_MASK_CMP_F, \">0\",\n+                  IRNode.VECTOR_BLEND_F, \">0\",\n+                  IRNode.STORE_VECTOR, \">0\"},\n@@ -618,1 +808,1 @@\n-    @IR(failOn = {IRNode.VECTOR_MASK_CMP, IRNode.VECTOR_BLEND})\n+    @IR(failOn = {IRNode.STORE_VECTOR})\n@@ -633,1 +823,5 @@\n-                 \"testCMoveDLEforDConst\", \"testCMoveDEQforDConst\", \"testCMoveDNEQforDConst\"})\n+                 \"testCMoveDLEforDConst\", \"testCMoveDEQforDConst\", \"testCMoveDNEQforDConst\",\n+                 \"testCMoveFLTforFConstH2\", \"testCMoveFLEforFConstH2\",\n+                 \"testCMoveFYYforFConstH2\", \"testCMoveFXXforFConstH2\",\n+                 \"testCMoveDLTforDConstH2\", \"testCMoveDLEforDConstH2\",\n+                 \"testCMoveDYYforDConstH2\", \"testCMoveDXXforDConstH2\"})\n@@ -732,0 +926,33 @@\n+\n+        \/\/ Hand-unrolled (H2) examples:\n+        testCMoveFLTforFConstH2(floata, floatb, floatc);\n+        testCMoveDLTforDConstH2(doublea, doubleb, doublec);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(floatc[i], cmoveFLTforFConst(floata[i], floatb[i]));\n+            Asserts.assertEquals(doublec[i], cmoveDLTforDConst(doublea[i], doubleb[i]));\n+        }\n+\n+        testCMoveFLEforFConstH2(floata, floatb, floatc);\n+        testCMoveDLEforDConstH2(doublea, doubleb, doublec);\n+        for (int i = 0; i < SIZE; i++) {\n+            Asserts.assertEquals(floatc[i], cmoveFLEforFConst(floata[i], floatb[i]));\n+            Asserts.assertEquals(doublec[i], cmoveDLEforDConst(doublea[i], doubleb[i]));\n+        }\n+\n+        testCMoveFYYforFConstH2(floata, floatb, floatc);\n+        testCMoveDYYforDConstH2(doublea, doubleb, doublec);\n+        for (int i = 0; i < SIZE; i+=2) {\n+            Asserts.assertEquals(floatc[i+0], cmoveFLEforFConst(floata[i+0], floatb[i+0]));\n+            Asserts.assertEquals(doublec[i+0], cmoveDLEforDConst(doublea[i+0], doubleb[i+0]));\n+            Asserts.assertEquals(floatc[i+1], cmoveFLTforFConst(floata[i+1], floatb[i+1]));\n+            Asserts.assertEquals(doublec[i+1], cmoveDLTforDConst(doublea[i+1], doubleb[i+1]));\n+        }\n+\n+        testCMoveFXXforFConstH2(floata, floatb, floatc);\n+        testCMoveDXXforDConstH2(doublea, doubleb, doublec);\n+        for (int i = 0; i < SIZE; i+=2) {\n+            Asserts.assertEquals(floatc[i+0], cmoveFLTforFConst(floata[i+0], floatb[i+0]));\n+            Asserts.assertEquals(doublec[i+0], cmoveDLTforDConst(doublea[i+0], doubleb[i+0]));\n+            Asserts.assertEquals(floatc[i+1], cmoveFLEforFConst(floata[i+1], floatb[i+1]));\n+            Asserts.assertEquals(doublec[i+1], cmoveDLEforDConst(doublea[i+1], doubleb[i+1]));\n+        }\n@@ -898,4 +1125,11 @@\n-            a[i] = RANDOM.nextFloat();\n-            if (RANDOM.nextInt() % 20 == 0) {\n-                a[i] = Float.NaN;\n-            }\n+            a[i] = switch(RANDOM.nextInt() % 20) {\n+                case 0  -> Float.NaN;\n+                case 1  -> 0;\n+                case 2  -> 1;\n+                case 3  -> Float.POSITIVE_INFINITY;\n+                case 4  -> Float.NEGATIVE_INFINITY;\n+                case 5  -> Float.MAX_VALUE;\n+                case 6  -> Float.MIN_VALUE;\n+                case 7, 8, 9 -> RANDOM.nextFloat();\n+                default -> Float.intBitsToFloat(RANDOM.nextInt());\n+            };\n@@ -907,4 +1141,11 @@\n-            a[i] = RANDOM.nextDouble();\n-            if (RANDOM.nextInt() % 20 == 0) {\n-                a[i] = Double.NaN;\n-            }\n+            a[i] = switch(RANDOM.nextInt() % 20) {\n+                case 0  -> Double.NaN;\n+                case 1  -> 0;\n+                case 2  -> 1;\n+                case 3  -> Double.POSITIVE_INFINITY;\n+                case 4  -> Double.NEGATIVE_INFINITY;\n+                case 5  -> Double.MAX_VALUE;\n+                case 6  -> Double.MIN_VALUE;\n+                case 7, 8, 9 -> RANDOM.nextDouble();\n+                default -> Double.longBitsToDouble(RANDOM.nextLong());\n+            };\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorConditionalMove.java","additions":292,"deletions":51,"binary":false,"changes":343,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -166,1 +166,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -179,1 +179,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -192,1 +192,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -206,1 +206,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -220,1 +220,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -232,1 +232,0 @@\n-    \/\/ It would be legal to vectorize this one but it's not currently\n@@ -234,1 +233,1 @@\n-    \/\/@IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -247,1 +246,1 @@\n-    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    @IR(failOn = { IRNode.LOAD_VECTOR_L, IRNode.STORE_VECTOR })\n@@ -260,1 +259,1 @@\n-    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    @IR(failOn = { IRNode.LOAD_VECTOR_L, IRNode.STORE_VECTOR })\n@@ -274,1 +273,1 @@\n-    @IR(failOn = { IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR })\n+    @IR(failOn = { IRNode.LOAD_VECTOR_L, IRNode.STORE_VECTOR })\n@@ -288,1 +287,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -301,1 +300,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -314,1 +313,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -327,1 +326,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -78,1 +78,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_B, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -109,1 +109,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_I, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMultiInvar.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationNotRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\",\n-                  IRNode.VECTOR_CAST_I2X, \">0\",\n+    \/\/ Mixing types of different sizes has the effect that some vectors are shorter than the type allows.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,   IRNode.VECTOR_SIZE + \"min(max_int, max_double)\", \">0\",\n+                  IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE + \"min(max_int, max_double)\", \">0\",\n@@ -71,3 +72,5 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\",\n-                  IRNode.VECTOR_CAST_I2X, \">0\",\n-                  IRNode.VECTOR_CAST_L2X, \">0\",\n+    \/\/ Mixing types of different sizes has the effect that some vectors are shorter than the type allows.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L,   IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \">0\",\n+                  IRNode.LOAD_VECTOR_I,   IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \">0\",\n+                  IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \">0\",\n+                  IRNode.VECTOR_CAST_L2I, IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \">0\",\n@@ -83,3 +86,5 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\",\n-                  IRNode.VECTOR_CAST_D2X, \">0\",\n-                  IRNode.VECTOR_CAST_F2X, \">0\",\n+    \/\/ Mixing types of different sizes has the effect that some vectors are shorter than the type allows.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F,   IRNode.VECTOR_SIZE + \"min(max_float, max_double)\", \">0\",\n+                  IRNode.LOAD_VECTOR_D,   IRNode.VECTOR_SIZE + \"min(max_float, max_double)\", \">0\",\n+                  IRNode.VECTOR_CAST_D2F, IRNode.VECTOR_SIZE + \"min(max_float, max_double)\", \">0\",\n+                  IRNode.VECTOR_CAST_F2D, IRNode.VECTOR_SIZE + \"min(max_float, max_double)\", \">0\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizeTypeConversion.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.RSHIFT_VB, \">0\", IRNode.STORE_VECTOR, \">0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \">0\", IRNode.RSHIFT_VB, \">0\", IRNode.STORE_VECTOR, \">0\"})\n@@ -81,1 +81,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.RSHIFT_VB, \">0\", IRNode.STORE_VECTOR, \">0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \">0\", IRNode.RSHIFT_VB, \">0\", IRNode.STORE_VECTOR, \">0\"})\n@@ -89,1 +89,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.RSHIFT_VB, IRNode.STORE_VECTOR})\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.RSHIFT_VB, IRNode.STORE_VECTOR})\n@@ -97,1 +97,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.RSHIFT_VS, \">0\", IRNode.STORE_VECTOR, \">0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \">0\", IRNode.RSHIFT_VS, \">0\", IRNode.STORE_VECTOR, \">0\"})\n@@ -105,1 +105,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">0\", IRNode.RSHIFT_VS, \">0\", IRNode.STORE_VECTOR, \">0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \">0\", IRNode.RSHIFT_VS, \">0\", IRNode.STORE_VECTOR, \">0\"})\n@@ -113,1 +113,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.RSHIFT_VS, IRNode.STORE_VECTOR})\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.RSHIFT_VS, IRNode.STORE_VECTOR})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizeURShiftSubword.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,0 +46,3 @@\n+                                   \"-XX:CompileCommand=inline,*::charAt*\",\n+                                   \"-XX:CompileCommand=inline,*PicturePositions::*\",\n+                                   \"-XX:CompileCommand=inline,*Point::*\",\n@@ -95,0 +98,2 @@\n+        invocations++;\n+\n@@ -96,2 +101,2 @@\n-        boolean cond1 = random.nextBoolean();\n-        boolean cond2 = random.nextBoolean();\n+        boolean cond1 = invocations % 2 == 0;\n+        boolean cond2 = !cond1;\n@@ -554,0 +559,1 @@\n+        int res = s.a;\n@@ -556,1 +562,1 @@\n-        return s.a;\n+        return res;\n@@ -1199,0 +1205,1 @@\n+        int res = p.x;\n@@ -1204,1 +1211,1 @@\n-        return p.y;\n+        return res;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/AllocationMergesTests.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,5 @@\n-        oa.shouldHaveExitValue(0);\n+        \/\/ Ignore adapter creation failures\n+        if (oa.getExitValue() != 0 && !oa.getStderr().contains(\"Out of space in CodeCache for adapters\")) {\n+            oa.reportDiagnosticSummary();\n+            throw new RuntimeException(\"VM finished with exit code \" + oa.getExitValue());\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CodeCacheFullCountTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.gcbarriers;\n+\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8312749\n+ * @summary Test that, when using a larger object alignment, ZGC arraycopy\n+ *          barriers are only applied to actual OOPs, and not to object\n+ *          alignment padding words.\n+ * @requires vm.gc.ZGenerational\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation\n+ *                   -XX:CompileOnly=compiler.gcbarriers.TestArrayCopyWithLargeObjectAlignment::*\n+ *                   -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:+UseZGC -XX:+ZGenerational\n+ *                   compiler.gcbarriers.TestArrayCopyWithLargeObjectAlignment\n+ *\/\n+\n+public class TestArrayCopyWithLargeObjectAlignment {\n+\n+    static Object[] doCopyOf(Object[] array) {\n+        return Arrays.copyOf(array, array.length);\n+    }\n+\n+    static Object[] doClone(Object[] array) {\n+        return array.clone();\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            \/\/ This test allocates an array 'a', copies it into a new array 'b'\n+            \/\/ using Arrays.copyOf, and clones 'b' into yet another array. For\n+            \/\/ ObjectAlignmentInBytes=16, the intrinsic implementation of\n+            \/\/ Arrays.copyOf leaves the object alignment padding word \"b[1]\"\n+            \/\/ untouched, preserving the badHeapWordVal value '0xbaadbabe'. The\n+            \/\/ test checks that this padding word is not processed as a valid\n+            \/\/ OOP by the ZGC arraycopy stub underlying the intrinsic\n+            \/\/ implementation of Object.clone. Allocating b using the intrinsic\n+            \/\/ implementation of Arrays.copyOf is key to reproducing the issue\n+            \/\/ because, unlike regular (fast or slow) array allocation,\n+            \/\/ Arrays.copyOf does not zero-clear the padding word.\n+            Object[] a = {new Object()};\n+            Object[] b = doCopyOf(a);\n+            doClone(b);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestArrayCopyWithLargeObjectAlignment.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -87,1 +87,1 @@\n-            Class<?> accessClass, boolean resolve) throws ClassNotFoundException {\n+            Class<?> accessClass, boolean resolve) throws NoClassDefFoundError {\n@@ -97,5 +97,1 @@\n-        try {\n-            return lookupType(name, accessingClass, resolve);\n-        } catch (ClassNotFoundException e) {\n-            throw (NoClassDefFoundError) new NoClassDefFoundError().initCause(e);\n-        }\n+        return lookupType(name, accessingClass, resolve);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n@@ -46,0 +48,1 @@\n+import jdk.vm.ci.hotspot.HotSpotJVMCIRuntime;\n@@ -47,0 +50,2 @@\n+import jdk.vm.ci.meta.MetaAccessProvider;\n+import jdk.vm.ci.meta.ResolvedJavaType;\n@@ -48,2 +53,5 @@\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.io.ByteArrayOutputStream;\n+import java.io.CharArrayWriter;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -52,0 +60,8 @@\n+\n+    \/**\n+     * Abstracts which lookup method is being tested.\n+     *\/\n+    public interface Lookup {\n+        ResolvedJavaType lookupType(String name, Class<?> accessingClass, boolean resolve);\n+    }\n+\n@@ -54,2 +70,12 @@\n-        for (TestCase tcase : createTestCases()) {\n-            test.runTest(tcase);\n+\n+        \/\/ Test CompilerToVM.lookupType\n+        for (TestCase tcase : createTestCases(false, true)) {\n+            test.runTest(tcase, CompilerToVMHelper::lookupType);\n+        }\n+\n+        \/\/ Test HotSpotJVMCIRuntime.lookupType\n+        HotSpotJVMCIRuntime runtime = HotSpotJVMCIRuntime.runtime();\n+        MetaAccessProvider metaAccess = runtime.getHostJVMCIBackend().getMetaAccess();\n+        for (TestCase tcase : createTestCases(true, false)) {\n+            test.runTest(tcase, (name, accessingClass, resolve) -> (ResolvedJavaType) runtime.lookupType(name,\n+                (HotSpotResolvedObjectType) metaAccess.lookupJavaType(accessingClass), resolve));\n@@ -59,2 +85,2 @@\n-    private static Set<TestCase> createTestCases() {\n-        Set<TestCase> result = new HashSet<>();\n+    private static List<TestCase> createTestCases(boolean allowPrimitive, boolean allowNullAccessingClass) {\n+        List<TestCase> result = new ArrayList<>();\n@@ -62,1 +88,5 @@\n-        result.add(new TestCase(Utils.toJVMTypeSignature(int.class),\n+        if (allowPrimitive) {\n+            result.add(new TestCase(Utils.toJVMTypeSignature(int.class),\n+                LookupTypeTest.class, true, true));\n+        } else {\n+            result.add(new TestCase(Utils.toJVMTypeSignature(int.class),\n@@ -64,0 +94,1 @@\n+        }\n@@ -66,1 +97,1 @@\n-                true, false, ClassNotFoundException.class));\n+                true, false, NoClassDefFoundError.class));\n@@ -69,1 +100,1 @@\n-                true, false, ClassNotFoundException.class));\n+                true, false, NoClassDefFoundError.class));\n@@ -74,1 +105,1 @@\n-                ClassNotFoundException.class));\n+                NoClassDefFoundError.class));\n@@ -83,1 +114,2 @@\n-        result.add(new TestCase(\n+        if (allowNullAccessingClass) {\n+            result.add(new TestCase(\n@@ -86,0 +118,1 @@\n+        }\n@@ -89,1 +122,1 @@\n-    private void runTest(TestCase tcase) {\n+    private void runTest(TestCase tcase, Lookup lookup) {\n@@ -91,1 +124,1 @@\n-        HotSpotResolvedObjectType metaspaceKlass;\n+        ResolvedJavaType metaspaceKlass;\n@@ -93,1 +126,1 @@\n-            metaspaceKlass = CompilerToVMHelper.lookupType(tcase.className,\n+            metaspaceKlass = lookup.lookupType(tcase.className,\n@@ -96,0 +129,3 @@\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            t.printStackTrace(new PrintStream(bos));\n+            String tString = bos.toString();\n@@ -97,1 +133,1 @@\n-                    \"Assumed no exception, but got \" + t);\n+                    \"Assumed no exception, but got \" + tString);\n@@ -99,1 +135,1 @@\n-                    \"Got unexpected exception \" + t);\n+                    \"Got unexpected exception \" + tString);\n@@ -101,1 +137,1 @@\n-                    \"Unexpected exception\");\n+                    \"Unexpected exception: \" + tString);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupTypeTest.java","additions":53,"deletions":17,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -274,2 +274,2 @@\n-        int cpi = getFirstInvokedynamicOperand(shouldNotBeCalled);\n-        BootstrapMethodInvocation bmi = cp.lookupBootstrapMethodInvocation(cpi, INVOKEDYNAMIC);\n+        int rawIndex = getFirstInvokedynamicOperand(shouldNotBeCalled);\n+        BootstrapMethodInvocation bmi = cp.lookupBootstrapMethodInvocation(rawIndex, INVOKEDYNAMIC);\n@@ -411,2 +411,2 @@\n-        int cpi = getFirstInvokedynamicOperand(method);\n-        cp.loadReferencedType(cpi, INVOKEDYNAMIC, false);\n+        int rawIndex = getFirstInvokedynamicOperand(method);\n+        cp.loadReferencedType(rawIndex, INVOKEDYNAMIC, false);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestDynamicConstant.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -186,0 +186,5 @@\n+\n+    @Test\n+    public void lookupTypeTest() throws Exception {\n+        \/\/ This is tested by compiler\/jvmci\/compilerToVM\/LookupTypeTest.java\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestHotSpotJVMCIRuntime.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,5 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.MethodType;\n+\n@@ -43,0 +48,2 @@\n+import jdk.vm.ci.meta.JavaConstant;\n+import jdk.vm.ci.meta.JavaField;\n@@ -47,0 +54,1 @@\n+import jdk.vm.ci.meta.Signature;\n@@ -83,2 +91,6 @@\n-    public static final int ALOAD_0 = 42; \/\/ 0x2A\n-    public static final int INVOKEVIRTUAL = 182; \/\/ 0xB6\n+    public static final int ICONST_0 = 3;\n+    public static final int ALOAD_0 = 42;\n+    public static final int ALOAD_1 = 43;\n+    public static final int GETSTATIC = 178;\n+    public static final int INVOKEVIRTUAL = 182;\n+    public static final int INVOKEDYNAMIC = 186;\n@@ -94,0 +106,4 @@\n+    public static int beS4(byte[] data, int bci) {\n+        return (data[bci] << 24) | ((data[bci + 1] & 0xff) << 16) | ((data[bci + 2] & 0xff) << 8) | (data[bci + 3] & 0xff);\n+    }\n+\n@@ -111,0 +127,109 @@\n+\n+    static int someStaticField = 1;\n+    static int getStaticField() {\n+        return someStaticField;\n+    }\n+\n+    @Test\n+    public void lookupFieldTest() throws Exception {\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+\n+        String methodName = \"getStaticField\";\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"()I\");\n+        ResolvedJavaMethod m = type.findMethod(methodName, methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected:\n+        \/\/ 0: getstatic \"someStaticField\":\"I\";\n+        \/\/ 3: ireturn;\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(4, bytecode.length);\n+        Assert.assertEquals(GETSTATIC, beU1(bytecode, 0));\n+        int rawIndex = beU2(bytecode, 1);\n+        JavaField field =  m.getConstantPool().lookupField(rawIndex, m, GETSTATIC);\n+        Assert.assertEquals(\"someStaticField\", field.getName(), \"Wrong field name; rawIndex = \" + rawIndex + \";\");\n+    }\n+\n+    static String concatString1(String a, String b) {\n+        return a + b;\n+    }\n+\n+    static String concatString2(String a, String b) {\n+        return a + b;\n+    }\n+\n+    static void invokeHandle(MethodHandle mh) throws Throwable  {\n+        mh.invokeExact(0);\n+    }\n+\n+    static void intFunc(int t) {}\n+\n+    @Test\n+    public void lookupAppendixTest() throws Throwable {\n+        \/\/ We want at least two indy bytecodes -- with a single indy, the rawIndex is -1,\n+        \/\/ or 0xffffffff. Even if we load it with the wrong endianness, it will still come\n+        \/\/ \"correctly\" out as -1.\n+        concatString1(\"aaa\", \"bbb\"); \/\/ force the indy to be resolved\n+        concatString2(\"aaa\", \"bbb\"); \/\/ force the indy to be resolved\n+\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        MethodType mt = MethodType.methodType(void.class, int.class);\n+        MethodHandle mh = lookup.findStatic(ConstantPoolTest.class, \"intFunc\", mt);\n+        invokeHandle(mh);\n+\n+        lookupAppendixTest_dynamic(\"concatString1\");\n+        lookupAppendixTest_dynamic(\"concatString2\");\n+        lookupAppendixTest_virtual();\n+    }\n+\n+    public void lookupAppendixTest_dynamic(String methodName) throws Exception {\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;\");\n+        ResolvedJavaMethod m = type.findMethod(methodName, methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected:\n+        \/\/ aload_0;\n+        \/\/ aload_1;\n+        \/\/ invokedynamic ...StringConcatFactory.makeConcatWithConstants...\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(8, bytecode.length);\n+        Assert.assertEquals(ALOAD_0, beU1(bytecode, 0));\n+        Assert.assertEquals(ALOAD_1, beU1(bytecode, 1));\n+        Assert.assertEquals(INVOKEDYNAMIC, beU1(bytecode, 2));\n+\n+        \/\/ Note: internally HotSpot stores the indy index as a native int32, but m.getCode() byte-swaps all such\n+        \/\/ indices so they appear to be big-endian.\n+        int rawIndex = beS4(bytecode, 3);\n+        JavaConstant constant = m.getConstantPool().lookupAppendix(rawIndex, INVOKEDYNAMIC);\n+        Assert.assertTrue(constant.toString().startsWith(\"Object[\"), \"wrong appendix: \" + constant);\n+    }\n+\n+    public void lookupAppendixTest_virtual() throws Exception {\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"(Ljava\/lang\/invoke\/MethodHandle;)V\");\n+        ResolvedJavaMethod m = type.findMethod(\"invokeHandle\", methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected\n+        \/\/ aload_0\n+        \/\/ iconst_0\n+        \/\/ invokevirtual #rawIndex \/\/ Method java\/lang\/invoke\/MethodHandle.invokeExact:(I)V\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(6, bytecode.length);\n+        Assert.assertEquals(ALOAD_0, beU1(bytecode, 0));\n+        Assert.assertEquals(ICONST_0, beU1(bytecode, 1));\n+        Assert.assertEquals(INVOKEVIRTUAL, beU1(bytecode, 2));\n+\n+        int rawIndex = beU2(bytecode, 3);\n+        \/\/System.out.println(\"rawIndex = \" + rawIndex);\n+        JavaConstant constant = m.getConstantPool().lookupAppendix(rawIndex, INVOKEVIRTUAL);\n+        \/\/System.out.println(\"constant = \" + constant);\n+        Assert.assertTrue(constant.toString().startsWith(\"Object[\"), \"wrong appendix: \" + constant);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/ConstantPoolTest.java","additions":128,"deletions":3,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -72,0 +73,11 @@\n+ *     <li><p>Vector IR nodes:  The IR node placeholder string contains an additional {@link #VECTOR_PREFIX}.\n+ *                              Using this IR node, one can check for the type and size of a vector. The type must\n+ *                              be directly specified in {@link #vectorNode}. The size can be specified directly with\n+ *                              an additional argument using {@link #VECTOR_SIZE}, followed by a size tag or a comma\n+ *                              separated list of sizes. If the size argument is not given, then a default size of\n+ *                              {@link #VECTOR_SIZE_MAX} is taken, which is the number of elements that can fit in a\n+ *                              vector of the specified type (depends on the VM flag MaxVectorSize and CPU features).\n+ *                              However, when using {@link IR#failOn} or {@link IR#counts()} with comparison {@code <},\n+ *                              or {@code <=} or {@code =0}, the default size is {@link #VECTOR_SIZE_ANY}, allowing any\n+ *                              size. The motivation for these default values is that in most cases one wants to have\n+ *                              vectorization with maximal vector width, or no vectorization of any vector width.\n@@ -83,0 +95,5 @@\n+    \/**\n+     * Prefix for vector IR nodes.\n+     *\/\n+    private static final String VECTOR_PREFIX = PREFIX + \"V#\";\n+\n@@ -93,0 +110,19 @@\n+    public static final String VECTOR_SIZE = \"_@\";\n+    public static final String VECTOR_SIZE_TAG_ANY = \"any\";\n+    public static final String VECTOR_SIZE_TAG_MAX = \"max_for_type\";\n+    public static final String VECTOR_SIZE_ANY = VECTOR_SIZE + VECTOR_SIZE_TAG_ANY; \/\/ default for counts \"=0\" and failOn\n+    public static final String VECTOR_SIZE_MAX = VECTOR_SIZE + VECTOR_SIZE_TAG_MAX; \/\/ default in counts\n+    public static final String VECTOR_SIZE_2   = VECTOR_SIZE + \"2\";\n+    public static final String VECTOR_SIZE_4   = VECTOR_SIZE + \"4\";\n+    public static final String VECTOR_SIZE_8   = VECTOR_SIZE + \"8\";\n+    public static final String VECTOR_SIZE_16  = VECTOR_SIZE + \"16\";\n+    public static final String VECTOR_SIZE_32  = VECTOR_SIZE + \"32\";\n+    public static final String VECTOR_SIZE_64  = VECTOR_SIZE + \"64\";\n+\n+    private static final String TYPE_BYTE   = \"byte\";\n+    private static final String TYPE_CHAR   = \"char\";\n+    private static final String TYPE_SHORT  = \"short\";\n+    private static final String TYPE_INT    = \"int\";\n+    private static final String TYPE_LONG   = \"long\";\n+    private static final String TYPE_FLOAT  = \"float\";\n+    private static final String TYPE_DOUBLE = \"double\";\n@@ -99,0 +135,5 @@\n+    \/**\n+     * Map every vectorNode to a type string.\n+     *\/\n+    private static final Map<String, String> VECTOR_NODE_TYPE = new HashMap<>();\n+\n@@ -102,1 +143,1 @@\n-     * nodes (see class description above).\n+     * nodes, or VECTOR_PREFIX for vector nodes (see class description above).\n@@ -106,1 +147,1 @@\n-     * public static final String IR_NODE = [PREFIX|COMPOSITE_PREFIX] + \"IR_NODE\" + POSTFIX;\n+     * public static final String IR_NODE = [PREFIX|COMPOSITE_PREFIX|VECTOR_PREFIX] + \"IR_NODE\" + POSTFIX;\n@@ -134,1 +175,28 @@\n-    public static final String ABS_V = PREFIX + \"ABS_V\" + POSTFIX;\n+    public static final String ABS_VB = VECTOR_PREFIX + \"ABS_VB\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VB, \"AbsVB\", TYPE_BYTE);\n+    }\n+\n+    \/\/ ABS_VC \/ AbsVC does not exist (char is 2 byte unsigned)\n+\n+    public static final String ABS_VS = VECTOR_PREFIX + \"ABS_VS\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VS, \"AbsVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String ABS_VI = VECTOR_PREFIX + \"ABS_VI\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VI, \"AbsVI\", TYPE_INT);\n+    }\n+\n+    public static final String ABS_VL = VECTOR_PREFIX + \"ABS_VL\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VL, \"AbsVL\", TYPE_LONG);\n+    }\n+\n+    public static final String ABS_VF = VECTOR_PREFIX + \"ABS_VF\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VF, \"AbsVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String ABS_VD = VECTOR_PREFIX + \"ABS_VD\" + POSTFIX;\n@@ -136,1 +204,1 @@\n-        beforeMatchingNameRegex(ABS_V, \"AbsV(B|S|I|L|F|D)\");\n+        vectorNode(ABS_VD, \"AbsVD\", TYPE_DOUBLE);\n@@ -154,1 +222,1 @@\n-    public static final String ADD_V = PREFIX + \"ADD_V\" + POSTFIX;\n+    public static final String ADD_VD = VECTOR_PREFIX + \"ADD_VD\" + POSTFIX;\n@@ -156,1 +224,1 @@\n-        beforeMatchingNameRegex(ADD_V, \"AddV(B|S|I|L|F|D)\");\n+        vectorNode(ADD_VD, \"AddVD\", TYPE_DOUBLE);\n@@ -159,1 +227,1 @@\n-    public static final String ADD_VD = PREFIX + \"ADD_VD\" + POSTFIX;\n+    public static final String ADD_VI = VECTOR_PREFIX + \"ADD_VI\" + POSTFIX;\n@@ -161,1 +229,1 @@\n-        beforeMatchingNameRegex(ADD_VD, \"AddVD\");\n+        vectorNode(ADD_VI, \"AddVI\", TYPE_INT);\n@@ -164,1 +232,1 @@\n-    public static final String ADD_VI = PREFIX + \"ADD_VI\" + POSTFIX;\n+    public static final String ADD_VF = VECTOR_PREFIX + \"ADD_VF\" + POSTFIX;\n@@ -166,1 +234,1 @@\n-        beforeMatchingNameRegex(ADD_VI, \"AddVI\");\n+        vectorNode(ADD_VF, \"AddVF\", TYPE_FLOAT);\n@@ -169,1 +237,1 @@\n-    public static final String ADD_VF = PREFIX + \"ADD_VF\" + POSTFIX;\n+    public static final String ADD_VB = VECTOR_PREFIX + \"ADD_VB\" + POSTFIX;\n@@ -171,1 +239,11 @@\n-        beforeMatchingNameRegex(ADD_VF, \"AddVF\");\n+        vectorNode(ADD_VB, \"AddVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String ADD_VS = VECTOR_PREFIX + \"ADD_VS\" + POSTFIX;\n+    static {\n+        vectorNode(ADD_VS, \"AddVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String ADD_VL = VECTOR_PREFIX + \"ADD_VL\" + POSTFIX;\n+    static {\n+        vectorNode(ADD_VL, \"AddVL\", TYPE_LONG);\n@@ -238,1 +316,1 @@\n-    public static final String AND_V = PREFIX + \"AND_V\" + POSTFIX;\n+    public static final String AND_VB = VECTOR_PREFIX + \"AND_VB\" + POSTFIX;\n@@ -240,1 +318,21 @@\n-        beforeMatchingNameRegex(AND_V, \"AndV\");\n+        vectorNode(AND_VB, \"AndV\", TYPE_BYTE);\n+    }\n+\n+    public static final String AND_VC = VECTOR_PREFIX + \"AND_VC\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VC, \"AndV\", TYPE_CHAR);\n+    }\n+\n+    public static final String AND_VS = VECTOR_PREFIX + \"AND_VS\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VS, \"AndV\", TYPE_SHORT);\n+    }\n+\n+    public static final String AND_VI = VECTOR_PREFIX + \"AND_VI\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VI, \"AndV\", TYPE_INT);\n+    }\n+\n+    public static final String AND_VL = VECTOR_PREFIX + \"AND_VL\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VL, \"AndV\", TYPE_LONG);\n@@ -389,1 +487,6 @@\n-    public static final String DIV_V = PREFIX + \"DIV_V\" + POSTFIX;\n+    public static final String DIV_VF = VECTOR_PREFIX + \"DIV_VF\" + POSTFIX;\n+    static {\n+        vectorNode(DIV_VF, \"DivVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String DIV_VD = VECTOR_PREFIX + \"DIV_VD\" + POSTFIX;\n@@ -391,1 +494,1 @@\n-        beforeMatchingNameRegex(DIV_V, \"DivV(F|D)\");\n+        vectorNode(DIV_VD, \"DivVD\", TYPE_DOUBLE);\n@@ -421,1 +524,1 @@\n-    public static final String FMA_V = PREFIX + \"FMA_V\" + POSTFIX;\n+    public static final String FMA_VF = VECTOR_PREFIX + \"FMA_VF\" + POSTFIX;\n@@ -423,1 +526,6 @@\n-        beforeMatchingNameRegex(FMA_V, \"FmaV(F|D)\");\n+        vectorNode(FMA_VF, \"FmaVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String FMA_VD = VECTOR_PREFIX + \"FMA_VD\" + POSTFIX;\n+    static {\n+        vectorNode(FMA_VD, \"FmaVD\", TYPE_DOUBLE);\n@@ -585,1 +693,31 @@\n-    public static final String LOAD_VECTOR = PREFIX + \"LOAD_VECTOR\" + POSTFIX;\n+    public static final String LOAD_VECTOR_B = VECTOR_PREFIX + \"LOAD_VECTOR_B\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_B, \"LoadVector\", TYPE_BYTE);\n+    }\n+\n+    public static final String LOAD_VECTOR_C = VECTOR_PREFIX + \"LOAD_VECTOR_C\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_C, \"LoadVector\", TYPE_CHAR);\n+    }\n+\n+    public static final String LOAD_VECTOR_S = VECTOR_PREFIX + \"LOAD_VECTOR_S\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_S, \"LoadVector\", TYPE_SHORT);\n+    }\n+\n+    public static final String LOAD_VECTOR_I = VECTOR_PREFIX + \"LOAD_VECTOR_I\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_I, \"LoadVector\", TYPE_INT);\n+    }\n+\n+    public static final String LOAD_VECTOR_L = VECTOR_PREFIX + \"LOAD_VECTOR_L\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_L, \"LoadVector\", TYPE_LONG);\n+    }\n+\n+    public static final String LOAD_VECTOR_F = VECTOR_PREFIX + \"LOAD_VECTOR_F\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_F, \"LoadVector\", TYPE_FLOAT);\n+    }\n+\n+    public static final String LOAD_VECTOR_D = VECTOR_PREFIX + \"LOAD_VECTOR_D\" + POSTFIX;\n@@ -587,1 +725,1 @@\n-        beforeMatchingNameRegex(LOAD_VECTOR, \"LoadVector\");\n+        vectorNode(LOAD_VECTOR_D, \"LoadVector\", TYPE_DOUBLE);\n@@ -627,1 +765,1 @@\n-    public static final String LSHIFT_V = PREFIX + \"LSHIFT_V\" + POSTFIX;\n+    public static final String LSHIFT_VB = VECTOR_PREFIX + \"LSHIFT_VB\" + POSTFIX;\n@@ -629,1 +767,21 @@\n-        beforeMatchingNameRegex(LSHIFT_V, \"LShiftV(B|S|I|L)\");\n+        vectorNode(LSHIFT_VB, \"LShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String LSHIFT_VS = VECTOR_PREFIX + \"LSHIFT_VS\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VS, \"LShiftVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String LSHIFT_VC = VECTOR_PREFIX + \"LSHIFT_VC\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VC, \"LShiftVS\", TYPE_CHAR); \/\/ using short op with char type\n+    }\n+\n+    public static final String LSHIFT_VI = VECTOR_PREFIX + \"LSHIFT_VI\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VI, \"LShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String LSHIFT_VL = VECTOR_PREFIX + \"LSHIFT_VL\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VL, \"LShiftVL\", TYPE_LONG);\n@@ -672,1 +830,11 @@\n-    public static final String MAX_V = PREFIX + \"MAX_V\" + POSTFIX;\n+    public static final String MAX_VI = VECTOR_PREFIX + \"MAX_VI\" + POSTFIX;\n+    static {\n+        vectorNode(MAX_VI, \"MaxV\", TYPE_INT);\n+    }\n+\n+    public static final String MAX_VF = VECTOR_PREFIX + \"MAX_VF\" + POSTFIX;\n+    static {\n+        vectorNode(MAX_VF, \"MaxV\", TYPE_FLOAT);\n+    }\n+\n+    public static final String MAX_VD = VECTOR_PREFIX + \"MAX_VD\" + POSTFIX;\n@@ -674,1 +842,1 @@\n-        beforeMatchingNameRegex(MAX_V, \"MaxV\");\n+        vectorNode(MAX_VD, \"MaxV\", TYPE_DOUBLE);\n@@ -722,1 +890,6 @@\n-    public static final String MIN_V = PREFIX + \"MIN_V\" + POSTFIX;\n+    public static final String MIN_VI = VECTOR_PREFIX + \"MIN_VI\" + POSTFIX;\n+    static {\n+        vectorNode(MIN_VI, \"MinV\", TYPE_INT);\n+    }\n+\n+    public static final String MIN_VF = VECTOR_PREFIX + \"MIN_VF\" + POSTFIX;\n@@ -724,1 +897,6 @@\n-        beforeMatchingNameRegex(MIN_V, \"MinV\");\n+        vectorNode(MIN_VF, \"MinV\", TYPE_FLOAT);\n+    }\n+\n+    public static final String MIN_VD = VECTOR_PREFIX + \"MIN_VD\" + POSTFIX;\n+    static {\n+        vectorNode(MIN_VD, \"MinV\", TYPE_DOUBLE);\n@@ -752,1 +930,6 @@\n-    public static final String MUL_V = PREFIX + \"MUL_V\" + POSTFIX;\n+    public static final String MUL_VL = VECTOR_PREFIX + \"MUL_VL\" + POSTFIX;\n+    static {\n+        vectorNode(MUL_VL, \"MulVL\", TYPE_LONG);\n+    }\n+\n+    public static final String MUL_VI = VECTOR_PREFIX + \"MUL_VI\" + POSTFIX;\n@@ -754,1 +937,1 @@\n-        beforeMatchingNameRegex(MUL_V, \"MulV(B|S|I|L|F|D)\");\n+        vectorNode(MUL_VI, \"MulVI\", TYPE_INT);\n@@ -757,1 +940,1 @@\n-    public static final String MUL_VL = PREFIX + \"MUL_VL\" + POSTFIX;\n+    public static final String MUL_VF = VECTOR_PREFIX + \"MUL_VF\" + POSTFIX;\n@@ -759,1 +942,1 @@\n-        beforeMatchingNameRegex(MUL_VL, \"MulVL\");\n+        vectorNode(MUL_VF, \"MulVF\", TYPE_FLOAT);\n@@ -762,1 +945,1 @@\n-    public static final String MUL_VI = PREFIX + \"MUL_VI\" + POSTFIX;\n+    public static final String MUL_VD = VECTOR_PREFIX + \"MUL_VD\" + POSTFIX;\n@@ -764,1 +947,1 @@\n-        beforeMatchingNameRegex(MUL_VI, \"MulVI\");\n+        vectorNode(MUL_VD, \"MulVD\", TYPE_DOUBLE);\n@@ -767,1 +950,1 @@\n-    public static final String MUL_VF = PREFIX + \"MUL_VF\" + POSTFIX;\n+    public static final String MUL_VB = VECTOR_PREFIX + \"MUL_VB\" + POSTFIX;\n@@ -769,1 +952,1 @@\n-        beforeMatchingNameRegex(MUL_VF, \"MulVF\");\n+        vectorNode(MUL_VB, \"MulVB\", TYPE_BYTE);\n@@ -772,1 +955,1 @@\n-    public static final String MUL_VD = PREFIX + \"MUL_VD\" + POSTFIX;\n+    public static final String MUL_VS = VECTOR_PREFIX + \"MUL_VS\" + POSTFIX;\n@@ -774,1 +957,1 @@\n-        beforeMatchingNameRegex(MUL_VD, \"MulVD\");\n+        vectorNode(MUL_VS, \"MulVS\", TYPE_SHORT);\n@@ -807,1 +990,1 @@\n-    public static final String NEG_V = PREFIX + \"NEG_V\" + POSTFIX;\n+    public static final String NEG_VF = VECTOR_PREFIX + \"NEG_VF\" + POSTFIX;\n@@ -809,1 +992,6 @@\n-        beforeMatchingNameRegex(NEG_V, \"NegV(F|D)\");\n+        vectorNode(NEG_VF, \"NegVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String NEG_VD = VECTOR_PREFIX + \"NEG_VD\" + POSTFIX;\n+    static {\n+        vectorNode(NEG_VD, \"NegVD\", TYPE_DOUBLE);\n@@ -827,1 +1015,11 @@\n-    public static final String OR_V = PREFIX + \"OR_V\" + POSTFIX;\n+    public static final String OR_VB = VECTOR_PREFIX + \"OR_VB\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VB, \"OrV\", TYPE_BYTE);\n+    }\n+\n+    public static final String OR_VS = VECTOR_PREFIX + \"OR_VS\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VS, \"OrV\", TYPE_SHORT);\n+    }\n+\n+    public static final String OR_VI = VECTOR_PREFIX + \"OR_VI\" + POSTFIX;\n@@ -829,1 +1027,6 @@\n-        beforeMatchingNameRegex(OR_V, \"OrV\");\n+        vectorNode(OR_VI, \"OrV\", TYPE_INT);\n+    }\n+\n+    public static final String OR_VL = VECTOR_PREFIX + \"OR_VL\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VL, \"OrV\", TYPE_LONG);\n@@ -858,1 +1061,1 @@\n-    public static final String POPCOUNT_VI = PREFIX + \"POPCOUNT_VI\" + POSTFIX;\n+    public static final String POPCOUNT_VI = VECTOR_PREFIX + \"POPCOUNT_VI\" + POSTFIX;\n@@ -860,1 +1063,1 @@\n-        superWordNodes(POPCOUNT_VI, \"PopCountVI\");\n+        vectorNode(POPCOUNT_VI, \"PopCountVI\", TYPE_INT);\n@@ -863,1 +1066,1 @@\n-    public static final String POPCOUNT_VL = PREFIX + \"POPCOUNT_VL\" + POSTFIX;\n+    public static final String POPCOUNT_VL = VECTOR_PREFIX + \"POPCOUNT_VL\" + POSTFIX;\n@@ -865,1 +1068,1 @@\n-        superWordNodes(POPCOUNT_VL, \"PopCountVL\");\n+        vectorNode(POPCOUNT_VL, \"PopCountVL\", TYPE_LONG);\n@@ -868,1 +1071,1 @@\n-    public static final String COUNTTRAILINGZEROS_VL = PREFIX + \"COUNTTRAILINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNTTRAILINGZEROS_VL = VECTOR_PREFIX + \"COUNTTRAILINGZEROS_VL\" + POSTFIX;\n@@ -870,1 +1073,1 @@\n-        superWordNodes(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\");\n+        vectorNode(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\", TYPE_LONG);\n@@ -873,1 +1076,1 @@\n-    public static final String COUNTLEADINGZEROS_VL = PREFIX + \"COUNTLEADINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNTLEADINGZEROS_VL = VECTOR_PREFIX + \"COUNTLEADINGZEROS_VL\" + POSTFIX;\n@@ -875,1 +1078,1 @@\n-        superWordNodes(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\");\n+        vectorNode(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\", TYPE_LONG);\n@@ -944,1 +1147,1 @@\n-    public static final String REVERSE_BYTES_V = PREFIX + \"REVERSE_BYTES_V\" + POSTFIX;\n+    public static final String REVERSE_BYTES_VB = VECTOR_PREFIX + \"REVERSE_BYTES_VB\" + POSTFIX;\n@@ -946,1 +1149,16 @@\n-        beforeMatchingNameRegex(REVERSE_BYTES_V, \"ReverseBytesV\");\n+        vectorNode(REVERSE_BYTES_VB, \"ReverseBytesV\", TYPE_BYTE);\n+    }\n+\n+    public static final String REVERSE_BYTES_VS = VECTOR_PREFIX + \"REVERSE_BYTES_VS\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VS, \"ReverseBytesV\", TYPE_SHORT);\n+    }\n+\n+    public static final String REVERSE_BYTES_VI = VECTOR_PREFIX + \"REVERSE_BYTES_VI\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VI, \"ReverseBytesV\", TYPE_INT);\n+    }\n+\n+    public static final String REVERSE_BYTES_VL = VECTOR_PREFIX + \"REVERSE_BYTES_VL\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VL, \"ReverseBytesV\", TYPE_LONG);\n@@ -959,1 +1177,1 @@\n-    public static final String REVERSE_V = PREFIX + \"REVERSE_V\" + POSTFIX;\n+    public static final String REVERSE_VI = VECTOR_PREFIX + \"REVERSE_VI\" + POSTFIX;\n@@ -961,1 +1179,1 @@\n-        beforeMatchingNameRegex(REVERSE_V, \"ReverseV\");\n+        vectorNode(REVERSE_VI, \"ReverseV\", TYPE_INT);\n@@ -964,1 +1182,1 @@\n-    public static final String ROUND_VD = PREFIX + \"ROUND_VD\" + POSTFIX;\n+    public static final String REVERSE_VL = VECTOR_PREFIX + \"REVERSE_VL\" + POSTFIX;\n@@ -966,1 +1184,1 @@\n-        beforeMatchingNameRegex(ROUND_VD, \"RoundVD\");\n+        vectorNode(REVERSE_VL, \"ReverseV\", TYPE_LONG);\n@@ -969,1 +1187,1 @@\n-    public static final String ROUND_VF = PREFIX + \"ROUND_VF\" + POSTFIX;\n+    public static final String ROUND_VD = VECTOR_PREFIX + \"ROUND_VD\" + POSTFIX;\n@@ -971,1 +1189,6 @@\n-        beforeMatchingNameRegex(ROUND_VF, \"RoundVF\");\n+        vectorNode(ROUND_VD, \"RoundVD\", TYPE_LONG);\n+    }\n+\n+    public static final String ROUND_VF = VECTOR_PREFIX + \"ROUND_VF\" + POSTFIX;\n+    static {\n+        vectorNode(ROUND_VF, \"RoundVF\", TYPE_INT);\n@@ -994,1 +1217,1 @@\n-    public static final String ROUND_DOUBLE_MODE_V = PREFIX + \"ROUND_DOUBLE_MODE_V\" + POSTFIX;\n+    public static final String ROUND_DOUBLE_MODE_V = VECTOR_PREFIX + \"ROUND_DOUBLE_MODE_V\" + POSTFIX;\n@@ -996,1 +1219,1 @@\n-        beforeMatchingNameRegex(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\");\n+        vectorNode(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\", TYPE_DOUBLE);\n@@ -1014,1 +1237,6 @@\n-    public static final String RSHIFT_VB = PREFIX + \"RSHIFT_VB\" + POSTFIX;\n+    public static final String RSHIFT_VB = VECTOR_PREFIX + \"RSHIFT_VB\" + POSTFIX;\n+    static {\n+        vectorNode(RSHIFT_VB, \"RShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String RSHIFT_VS = VECTOR_PREFIX + \"RSHIFT_VS\" + POSTFIX;\n@@ -1016,1 +1244,1 @@\n-        beforeMatchingNameRegex(RSHIFT_VB, \"RShiftVB\");\n+        vectorNode(RSHIFT_VS, \"RShiftVS\", TYPE_SHORT);\n@@ -1019,1 +1247,1 @@\n-    public static final String RSHIFT_VS = PREFIX + \"RSHIFT_VS\" + POSTFIX;\n+    public static final String RSHIFT_VC = VECTOR_PREFIX + \"RSHIFT_VC\" + POSTFIX;\n@@ -1021,1 +1249,1 @@\n-        beforeMatchingNameRegex(RSHIFT_VS, \"RShiftVS\");\n+        vectorNode(RSHIFT_VC, \"RShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n@@ -1024,1 +1252,1 @@\n-    public static final String RSHIFT_V = PREFIX + \"RSHIFT_V\" + POSTFIX;\n+    public static final String RSHIFT_VI = VECTOR_PREFIX + \"RSHIFT_VI\" + POSTFIX;\n@@ -1026,1 +1254,6 @@\n-        beforeMatchingNameRegex(RSHIFT_V, \"RShiftV(B|S|I|L)\");\n+        vectorNode(RSHIFT_VI, \"RShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String RSHIFT_VL = VECTOR_PREFIX + \"RSHIFT_VL\" + POSTFIX;\n+    static {\n+        vectorNode(RSHIFT_VL, \"RShiftVL\", TYPE_LONG);\n@@ -1040,1 +1273,6 @@\n-    public static final String SIGNUM_VD = PREFIX + \"SIGNUM_VD\" + POSTFIX;\n+    public static final String SIGNUM_VD = VECTOR_PREFIX + \"SIGNUM_VD\" + POSTFIX;\n+    static {\n+        vectorNode(SIGNUM_VD, \"SignumVD\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String SIGNUM_VF = VECTOR_PREFIX + \"SIGNUM_VF\" + POSTFIX;\n@@ -1042,1 +1280,1 @@\n-        beforeMatchingNameRegex(SIGNUM_VD, \"SignumVD\");\n+        vectorNode(SIGNUM_VF, \"SignumVF\", TYPE_FLOAT);\n@@ -1045,1 +1283,1 @@\n-    public static final String SIGNUM_VF = PREFIX + \"SIGNUM_VF\" + POSTFIX;\n+    public static final String SQRT_VF = VECTOR_PREFIX + \"SQRT_VF\" + POSTFIX;\n@@ -1047,1 +1285,1 @@\n-        beforeMatchingNameRegex(SIGNUM_VF, \"SignumVF\");\n+        vectorNode(SQRT_VF, \"SqrtVF\", TYPE_FLOAT);\n@@ -1050,1 +1288,1 @@\n-    public static final String SQRT_V = PREFIX + \"SQRT_V\" + POSTFIX;\n+    public static final String SQRT_VD = VECTOR_PREFIX + \"SQRT_VD\" + POSTFIX;\n@@ -1052,1 +1290,1 @@\n-        beforeMatchingNameRegex(SQRT_V, \"SqrtV(F|D)\");\n+        vectorNode(SQRT_VD, \"SqrtVD\", TYPE_DOUBLE);\n@@ -1191,1 +1429,1 @@\n-    public static final String SUB_V = PREFIX + \"SUB_V\" + POSTFIX;\n+    public static final String SUB_VB = VECTOR_PREFIX + \"SUB_VB\" + POSTFIX;\n@@ -1193,1 +1431,26 @@\n-        beforeMatchingNameRegex(SUB_V, \"SubV(B|S|I|L|F|D)\");\n+        vectorNode(SUB_VB, \"SubVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String SUB_VS = VECTOR_PREFIX + \"SUB_VS\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VS, \"SubVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String SUB_VI = VECTOR_PREFIX + \"SUB_VI\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VI, \"SubVI\", TYPE_INT);\n+    }\n+\n+    public static final String SUB_VL = VECTOR_PREFIX + \"SUB_VL\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VL, \"SubVL\", TYPE_LONG);\n+    }\n+\n+    public static final String SUB_VF = VECTOR_PREFIX + \"SUB_VF\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VF, \"SubVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String SUB_VD = VECTOR_PREFIX + \"SUB_VD\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VD, \"SubVD\", TYPE_DOUBLE);\n@@ -1271,1 +1534,21 @@\n-    public static final String URSHIFT_V = PREFIX + \"URSHIFT_V\" + POSTFIX;\n+    public static final String URSHIFT_VB = VECTOR_PREFIX + \"URSHIFT_VB\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VB, \"URShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String URSHIFT_VS = VECTOR_PREFIX + \"URSHIFT_VS\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VS, \"URShiftVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String URSHIFT_VC = VECTOR_PREFIX + \"URSHIFT_VC\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VC, \"URShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n+    }\n+\n+    public static final String URSHIFT_VI = VECTOR_PREFIX + \"URSHIFT_VI\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VI, \"URShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String URSHIFT_VL = VECTOR_PREFIX + \"URSHIFT_VL\" + POSTFIX;\n@@ -1273,1 +1556,1 @@\n-        beforeMatchingNameRegex(URSHIFT_V, \"URShiftV(B|S|I|L)\");\n+        vectorNode(URSHIFT_VL, \"URShiftVL\", TYPE_LONG);\n@@ -1286,1 +1569,16 @@\n-    public static final String VECTOR_BLEND = PREFIX + \"VECTOR_BLEND\" + POSTFIX;\n+    public static final String VECTOR_BLEND_B = VECTOR_PREFIX + \"VECTOR_BLEND_B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_B, \"VectorBlend\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_BLEND_F = VECTOR_PREFIX + \"VECTOR_BLEND_F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_F, \"VectorBlend\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_BLEND_D = VECTOR_PREFIX + \"VECTOR_BLEND_D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_D, \"VectorBlend\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_MASK_CMP_I = VECTOR_PREFIX + \"VECTOR_MASK_CMP_I\" + POSTFIX;\n@@ -1288,1 +1586,1 @@\n-        beforeMatchingNameRegex(VECTOR_BLEND, \"VectorBlend\");\n+        vectorNode(VECTOR_MASK_CMP_I, \"VectorMaskCmp\", TYPE_INT);\n@@ -1291,1 +1589,1 @@\n-    public static final String VECTOR_MASK_CMP = PREFIX + \"VECTOR_MASK_CMP\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_L = VECTOR_PREFIX + \"VECTOR_MASK_CMP_L\" + POSTFIX;\n@@ -1293,1 +1591,1 @@\n-        beforeMatchingNameRegex(VECTOR_MASK_CMP, \"VectorMaskCmp\");\n+        vectorNode(VECTOR_MASK_CMP_L, \"VectorMaskCmp\", TYPE_LONG);\n@@ -1296,1 +1594,1 @@\n-    public static final String VECTOR_CAST_B2X = PREFIX + \"VECTOR_CAST_B2X\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_F = VECTOR_PREFIX + \"VECTOR_MASK_CMP_F\" + POSTFIX;\n@@ -1298,1 +1596,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_B2X, \"VectorCastB2X\");\n+        vectorNode(VECTOR_MASK_CMP_F, \"VectorMaskCmp\", TYPE_FLOAT);\n@@ -1301,1 +1599,1 @@\n-    public static final String VECTOR_CAST_D2X = PREFIX + \"VECTOR_CAST_D2X\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_D = VECTOR_PREFIX + \"VECTOR_MASK_CMP_D\" + POSTFIX;\n@@ -1303,1 +1601,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_D2X, \"VectorCastD2X\");\n+        vectorNode(VECTOR_MASK_CMP_D, \"VectorMaskCmp\", TYPE_DOUBLE);\n@@ -1306,1 +1604,1 @@\n-    public static final String VECTOR_CAST_F2X = PREFIX + \"VECTOR_CAST_F2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2S = VECTOR_PREFIX + \"VECTOR_CAST_B2S\" + POSTFIX;\n@@ -1308,1 +1606,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_F2X, \"VectorCastF2X\");\n+        vectorNode(VECTOR_CAST_B2S, \"VectorCastB2X\", TYPE_SHORT);\n@@ -1311,1 +1609,1 @@\n-    public static final String VECTOR_CAST_I2X = PREFIX + \"VECTOR_CAST_I2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2I = VECTOR_PREFIX + \"VECTOR_CAST_B2I\" + POSTFIX;\n@@ -1313,1 +1611,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_I2X, \"VectorCastI2X\");\n+        vectorNode(VECTOR_CAST_B2I, \"VectorCastB2X\", TYPE_INT);\n@@ -1316,1 +1614,1 @@\n-    public static final String VECTOR_CAST_L2X = PREFIX + \"VECTOR_CAST_L2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2L = VECTOR_PREFIX + \"VECTOR_CAST_B2L\" + POSTFIX;\n@@ -1318,1 +1616,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_L2X, \"VectorCastL2X\");\n+        vectorNode(VECTOR_CAST_B2L, \"VectorCastB2X\", TYPE_LONG);\n@@ -1321,1 +1619,1 @@\n-    public static final String VECTOR_CAST_S2X = PREFIX + \"VECTOR_CAST_S2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2F = VECTOR_PREFIX + \"VECTOR_CAST_B2F\" + POSTFIX;\n@@ -1323,1 +1621,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_S2X, \"VectorCastS2X\");\n+        vectorNode(VECTOR_CAST_B2F, \"VectorCastB2X\", TYPE_FLOAT);\n@@ -1326,1 +1624,1 @@\n-    public static final String VECTOR_CAST_F2HF = PREFIX + \"VECTOR_CAST_F2HF\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2D = VECTOR_PREFIX + \"VECTOR_CAST_B2D\" + POSTFIX;\n@@ -1328,1 +1626,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_F2HF, \"VectorCastF2HF\");\n+        vectorNode(VECTOR_CAST_B2D, \"VectorCastB2X\", TYPE_DOUBLE);\n@@ -1331,1 +1629,1 @@\n-    public static final String VECTOR_CAST_HF2F = PREFIX + \"VECTOR_CAST_HF2F\" + POSTFIX;\n+    public static final String VECTOR_CAST_D2B = VECTOR_PREFIX + \"VECTOR_CAST_D2B\" + POSTFIX;\n@@ -1333,1 +1631,131 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_HF2F, \"VectorCastHF2F\");\n+        vectorNode(VECTOR_CAST_D2B, \"VectorCastD2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_D2S = VECTOR_PREFIX + \"VECTOR_CAST_D2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2S, \"VectorCastD2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_D2I = VECTOR_PREFIX + \"VECTOR_CAST_D2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2I, \"VectorCastD2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_D2L = VECTOR_PREFIX + \"VECTOR_CAST_D2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2L, \"VectorCastD2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_D2F = VECTOR_PREFIX + \"VECTOR_CAST_D2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2F, \"VectorCastD2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2B = VECTOR_PREFIX + \"VECTOR_CAST_F2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2B, \"VectorCastF2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_F2S = VECTOR_PREFIX + \"VECTOR_CAST_F2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2S, \"VectorCastF2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2I = VECTOR_PREFIX + \"VECTOR_CAST_F2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2I, \"VectorCastF2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2L = VECTOR_PREFIX + \"VECTOR_CAST_F2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2L, \"VectorCastF2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_F2D = VECTOR_PREFIX + \"VECTOR_CAST_F2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2D, \"VectorCastF2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_I2B = VECTOR_PREFIX + \"VECTOR_CAST_I2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2B, \"VectorCastI2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_I2S = VECTOR_PREFIX + \"VECTOR_CAST_I2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2S, \"VectorCastI2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_I2L = VECTOR_PREFIX + \"VECTOR_CAST_I2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2L, \"VectorCastI2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_I2F = VECTOR_PREFIX + \"VECTOR_CAST_I2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2F, \"VectorCastI2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_I2D = VECTOR_PREFIX + \"VECTOR_CAST_I2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2D, \"VectorCastI2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_L2B = VECTOR_PREFIX + \"VECTOR_CAST_L2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2B, \"VectorCastL2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_L2S = VECTOR_PREFIX + \"VECTOR_CAST_L2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2S, \"VectorCastL2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2I = VECTOR_PREFIX + \"VECTOR_CAST_L2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2I, \"VectorCastL2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2F = VECTOR_PREFIX + \"VECTOR_CAST_L2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2F, \"VectorCastL2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2D = VECTOR_PREFIX + \"VECTOR_CAST_L2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2D, \"VectorCastL2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_S2B = VECTOR_PREFIX + \"VECTOR_CAST_S2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2B, \"VectorCastS2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_S2I = VECTOR_PREFIX + \"VECTOR_CAST_S2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2I, \"VectorCastS2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_S2L = VECTOR_PREFIX + \"VECTOR_CAST_S2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2L, \"VectorCastS2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_S2F = VECTOR_PREFIX + \"VECTOR_CAST_S2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2F, \"VectorCastS2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_S2D = VECTOR_PREFIX + \"VECTOR_CAST_S2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2D, \"VectorCastS2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_F2HF = VECTOR_PREFIX + \"VECTOR_CAST_F2HF\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2HF, \"VectorCastF2HF\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_HF2F = VECTOR_PREFIX + \"VECTOR_CAST_HF2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_HF2F, \"VectorCastHF2F\", TYPE_FLOAT);\n@@ -1346,1 +1774,1 @@\n-    public static final String VECTOR_UCAST_B2X = PREFIX + \"VECTOR_UCAST_B2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2S = VECTOR_PREFIX + \"VECTOR_UCAST_B2S\" + POSTFIX;\n@@ -1348,1 +1776,1 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_B2X, \"VectorUCastB2X\");\n+        vectorNode(VECTOR_UCAST_B2S, \"VectorUCastB2X\", TYPE_SHORT);\n@@ -1351,1 +1779,1 @@\n-    public static final String VECTOR_UCAST_I2X = PREFIX + \"VECTOR_UCAST_I2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2I = VECTOR_PREFIX + \"VECTOR_UCAST_B2I\" + POSTFIX;\n@@ -1353,1 +1781,1 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_I2X, \"VectorUCastI2X\");\n+        vectorNode(VECTOR_UCAST_B2I, \"VectorUCastB2X\", TYPE_INT);\n@@ -1356,1 +1784,1 @@\n-    public static final String VECTOR_UCAST_S2X = PREFIX + \"VECTOR_UCAST_S2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2L = VECTOR_PREFIX + \"VECTOR_UCAST_B2L\" + POSTFIX;\n@@ -1358,1 +1786,16 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_S2X, \"VectorUCastS2X\");\n+        vectorNode(VECTOR_UCAST_B2L, \"VectorUCastB2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_UCAST_I2L = VECTOR_PREFIX + \"VECTOR_UCAST_I2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_I2L, \"VectorUCastI2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_UCAST_S2I = VECTOR_PREFIX + \"VECTOR_UCAST_S2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_S2I, \"VectorUCastS2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_UCAST_S2L = VECTOR_PREFIX + \"VECTOR_UCAST_S2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_S2L, \"VectorUCastS2X\", TYPE_LONG);\n@@ -1391,0 +1834,5 @@\n+    public static final String VFMAD_MASKED = PREFIX + \"VFMAD_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMAD_MASKED, \"vfmad_masked\");\n+    }\n+\n@@ -1406,0 +1854,30 @@\n+    public static final String FMSUB = PREFIX + \"FMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FMSUB, \"msub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMADD = PREFIX + \"FNMADD\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMADD, \"mnadd(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMSUB = PREFIX + \"FNMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMSUB, \"mnsub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String VFMLA = PREFIX + \"VFMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLA, \"vfmla\");\n+    }\n+\n+    public static final String VFMLS = PREFIX + \"VFMLS\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLS, \"vfmls\");\n+    }\n+\n+    public static final String VFNMLA = PREFIX + \"VFNMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFNMLA, \"vfnmla\");\n+    }\n+\n@@ -1506,1 +1984,16 @@\n-    public static final String XOR_V = PREFIX + \"XOR_V\" + POSTFIX;\n+    public static final String XOR_VB = VECTOR_PREFIX + \"XOR_VB\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VB, \"XorV\", TYPE_BYTE);\n+    }\n+\n+    public static final String XOR_VS = VECTOR_PREFIX + \"XOR_VS\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VS, \"XorV\", TYPE_SHORT);\n+    }\n+\n+    public static final String XOR_VI = VECTOR_PREFIX + \"XOR_VI\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VI, \"XorV\", TYPE_INT);\n+    }\n+\n+    public static final String XOR_VL = VECTOR_PREFIX + \"XOR_VL\" + POSTFIX;\n@@ -1508,1 +2001,1 @@\n-        beforeMatchingNameRegex(XOR_V, \"XorV\");\n+        vectorNode(XOR_VL, \"XorV\", TYPE_LONG);\n@@ -1531,1 +2024,6 @@\n-    public static final String COMPRESS_BITSV = PREFIX + \"COMPRESS_BITSV\" + POSTFIX;\n+    public static final String COMPRESS_BITS_VI = VECTOR_PREFIX + \"COMPRESS_BITS_VI\" + POSTFIX;\n+    static {\n+        vectorNode(COMPRESS_BITS_VI, \"CompressBitsV\", TYPE_INT);\n+    }\n+\n+    public static final String COMPRESS_BITS_VL = VECTOR_PREFIX + \"COMPRESS_BITS_VL\" + POSTFIX;\n@@ -1533,1 +2031,1 @@\n-        beforeMatchingNameRegex(COMPRESS_BITSV, \"CompressBitsV\");\n+        vectorNode(COMPRESS_BITS_VL, \"CompressBitsV\", TYPE_LONG);\n@@ -1536,1 +2034,1 @@\n-    public static final String EXPAND_BITSV = PREFIX + \"EXPAND_BITSV\" + POSTFIX;\n+    public static final String EXPAND_BITS_VI = VECTOR_PREFIX + \"EXPAND_BITS_VI\" + POSTFIX;\n@@ -1538,1 +2036,6 @@\n-        beforeMatchingNameRegex(EXPAND_BITSV, \"ExpandBitsV\");\n+        vectorNode(EXPAND_BITS_VI, \"ExpandBitsV\", TYPE_INT);\n+    }\n+\n+    public static final String EXPAND_BITS_VL = VECTOR_PREFIX + \"EXPAND_BITS_VL\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_BITS_VL, \"ExpandBitsV\", TYPE_LONG);\n@@ -1640,0 +2143,14 @@\n+    \/**\n+     * Apply {@code irNodeRegex} as regex for the IR vector node name on all machine independent ideal graph phases up to and\n+     * including {@link CompilePhase#BEFORE_MATCHING}. Since this is a vector node, we can also check the vector element\n+     * type {@code typeString} and the vector size (number of elements), {@see VECTOR_SIZE}.\n+     *\/\n+    private static void vectorNode(String irNodePlaceholder, String irNodeRegex, String typeString) {\n+        TestFramework.check(isVectorIRNode(irNodePlaceholder), \"vectorNode: failed prefix check for irNodePlaceholder \"\n+                                                               + irNodePlaceholder + \" -> did you use VECTOR_PREFIX?\");\n+        \/\/ IS_REPLACED is later replaced with the specific type and size of the vector.\n+        String regex = START + irNodeRegex + MID  + IS_REPLACED + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new RegexTypeEntry(RegexType.IDEAL_INDEPENDENT, regex));\n+        VECTOR_NODE_TYPE.put(irNodePlaceholder, typeString);\n+    }\n+\n@@ -1755,0 +2272,143 @@\n+    \/**\n+     * Is {@code irVectorNodeString} an IR vector node placeholder string?\n+     *\/\n+    public static boolean isVectorIRNode(String irVectorNodeString) {\n+        return irVectorNodeString.startsWith(VECTOR_PREFIX);\n+    }\n+\n+    \/**\n+     * Is {@code irVectorSizeString} a vector size string?\n+     *\/\n+    public static boolean isVectorSize(String irVectorSizeString) {\n+        return irVectorSizeString.startsWith(VECTOR_SIZE);\n+    }\n+\n+    \/**\n+     * Parse {@code sizeString} and generate a regex pattern to match for the size in the IR dump.\n+     *\/\n+    public static String parseVectorNodeSize(String sizeString, String typeString, VMInfo vmInfo) {\n+        if (sizeString.equals(VECTOR_SIZE_TAG_ANY)) {\n+            return \"\\\\\\\\d+\"; \/\/ match with any number\n+        }\n+        \/\/ Try to parse any tags, convert to comma separated list of ints\n+        sizeString = parseVectorNodeSizeTag(sizeString, typeString, vmInfo);\n+        \/\/ Parse comma separated list of numbers\n+        String[] sizes = sizeString.split(\",\");\n+        String regex = \"\";\n+        for (int i = 0; i < sizes.length; i++) {\n+            int size = 0;\n+            try {\n+                size = Integer.parseInt(sizes[i]);\n+            } catch (NumberFormatException e) {\n+                throw new TestFormatException(\"Vector node has invalid size \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n+            }\n+            TestFormat.checkNoReport(size > 1, \"Vector node size must be 2 or larger, but got \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n+            regex += ((i > 0) ? \"|\" : \"\") + size;\n+        }\n+        if (sizes.length > 1) {\n+           regex = \"(\" + regex + \")\";\n+        }\n+        return regex;\n+    }\n+\n+    \/**\n+     * If {@code sizeTagString} is a size tag, return the list of accepted sizes, else return sizeTagString.\n+     *\/\n+    public static String parseVectorNodeSizeTag(String sizeTagString, String typeString, VMInfo vmInfo) {\n+        \/\/ Parse out \"min(a,b,c,...)\"\n+        if (sizeTagString.startsWith(\"min(\") && sizeTagString.endsWith(\")\")) {\n+            return parseVectorNodeSizeTagMin(sizeTagString, typeString, vmInfo);\n+        }\n+\n+        \/\/ Parse individual tags\n+        return switch (sizeTagString) {\n+            case VECTOR_SIZE_TAG_MAX -> String.valueOf(getMaxElementsForType(typeString, vmInfo));\n+            case \"max_byte\"          -> String.valueOf(getMaxElementsForType(TYPE_BYTE, vmInfo));\n+            case \"max_char\"          -> String.valueOf(getMaxElementsForType(TYPE_CHAR, vmInfo));\n+            case \"max_short\"         -> String.valueOf(getMaxElementsForType(TYPE_SHORT, vmInfo));\n+            case \"max_int\"           -> String.valueOf(getMaxElementsForType(TYPE_INT, vmInfo));\n+            case \"max_long\"          -> String.valueOf(getMaxElementsForType(TYPE_LONG, vmInfo));\n+            case \"max_float\"         -> String.valueOf(getMaxElementsForType(TYPE_FLOAT, vmInfo));\n+            case \"max_double\"        -> String.valueOf(getMaxElementsForType(TYPE_DOUBLE, vmInfo));\n+            case \"LoopMaxUnroll\"     -> String.valueOf(vmInfo.getLongValue(\"LoopMaxUnroll\"));\n+            default                  -> sizeTagString;\n+        };\n+    }\n+\n+    \/**\n+     * Parse {@code sizeTagString}, which must be a min-clause.\n+     *\/\n+    public static String parseVectorNodeSizeTagMin(String sizeTagString, String typeString, VMInfo vmInfo) {\n+        String[] tags = sizeTagString.substring(4, sizeTagString.length() - 1).split(\",\");\n+        TestFormat.checkNoReport(tags.length > 1, \"Vector node size \\\"min(...)\\\" must have at least 2 comma separated arguments, got \\\"\" + sizeTagString + \"\\\"\");\n+        int minVal = 1024;\n+        for (int i = 0; i < tags.length; i++) {\n+            String tag = parseVectorNodeSizeTag(tags[i].trim(), typeString, vmInfo);\n+            int tag_val = 0;\n+            try {\n+                tag_val = Integer.parseInt(tag);\n+            } catch (NumberFormatException e) {\n+                throw new TestFormatException(\"Vector node has invalid size in \\\"min(...)\\\", argument \" + i + \", \\\"\" + tag + \"\\\", in \\\"\" + sizeTagString + \"\\\"\");\n+            }\n+            minVal = Math.min(minVal, tag_val);\n+        }\n+        return String.valueOf(minVal);\n+    }\n+\n+    \/**\n+     * Return maximal number of elements that can fit in a vector of the specified type.\n+     *\/\n+    public static long getMaxElementsForType(String typeString, VMInfo vmInfo) {\n+        long maxVectorSize = vmInfo.getLongValue(\"MaxVectorSize\");\n+        TestFormat.checkNoReport(maxVectorSize > 0, \"VMInfo: MaxVectorSize is not larger than zero\");\n+        long maxBytes = maxVectorSize;\n+\n+        if (Platform.isX64() || Platform.isX86()) {\n+            maxBytes = Math.min(maxBytes, getMaxElementsForTypeOnX86(typeString, vmInfo));\n+        }\n+\n+        \/\/ compute elements per vector: vector bytes divided by bytes per element\n+        int bytes = getTypeSizeInBytes(typeString);\n+        return maxBytes \/ bytes;\n+    }\n+\n+    \/**\n+     * Return maximal number of elements that can fit in a vector of the specified type, on x86 \/ x64.\n+     *\/\n+    public static long getMaxElementsForTypeOnX86(String typeString, VMInfo vmInfo) {\n+        \/\/ restrict maxBytes for specific features, see Matcher::vector_width_in_bytes in x86.ad:\n+        boolean avx1 = vmInfo.hasCPUFeature(\"avx\");\n+        boolean avx2 = vmInfo.hasCPUFeature(\"avx2\");\n+        boolean avx512 = vmInfo.hasCPUFeature(\"avx512f\");\n+        boolean avx512bw = vmInfo.hasCPUFeature(\"avx512bw\");\n+        long maxBytes;\n+        if (avx512) {\n+            maxBytes = 64;\n+        } else if (avx2) {\n+            maxBytes = 32;\n+        } else {\n+            maxBytes = 16;\n+        }\n+        if (avx1 && (typeString.equals(TYPE_FLOAT) || typeString.equals(TYPE_DOUBLE))) {\n+            maxBytes = avx512 ? 64 : 32;\n+        }\n+        if (avx512 && (typeString.equals(TYPE_BYTE) || typeString.equals(TYPE_SHORT) || typeString.equals(TYPE_CHAR))) {\n+            maxBytes = avx512bw ? 64 : 32;\n+        }\n+\n+        return maxBytes;\n+    }\n+\n+    \/**\n+     * Return size in bytes of type named by {@code typeString}, return 0 if it does not name a type.\n+     *\/\n+    public static int getTypeSizeInBytes(String typeString) {\n+        return switch (typeString) {\n+            case TYPE_BYTE              -> 1;\n+            case TYPE_CHAR, TYPE_SHORT  -> 2;\n+            case TYPE_INT, TYPE_FLOAT   -> 4;\n+            case TYPE_LONG, TYPE_DOUBLE -> 8;\n+            default                     -> 0;\n+        };\n+    }\n+\n@@ -1764,0 +2424,4 @@\n+        } else if (isVectorIRNode(irNodeString)) {\n+            TestFramework.check(irNodeString.length() > VECTOR_PREFIX.length() + POSTFIX.length(),\n+                                \"Invalid vector node placeholder: \" + irNodeString);\n+            prefixLength = VECTOR_PREFIX.length();\n@@ -1838,0 +2502,7 @@\n+\n+    public static String getVectorNodeType(String irNode) {\n+        String typeString = VECTOR_NODE_TYPE.get(irNode);\n+        String failMsg = \"\\\"\" + irNode + \"\\\" is not a Vector IR node defined in class IRNode\";\n+        TestFormat.check(typeString != null, failMsg);\n+        return typeString;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":777,"deletions":106,"binary":false,"changes":883,"status":"modified"},{"patch":"@@ -74,0 +74,20 @@\n+#### Vector IR Nodes\n+For vector nodes, we not only check for the presence of the node, but also its type and size (number of elements in the vector). Every node has an associated type, for example `IRNode.LOAD_VECTOR_I` has type `int` and `IRNode.LOAD_VECTOR_F` has type `float`. The size can be explicitly specified as an additional argument. For example:\n+\n+```\n+@IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_16, \"> 0\"},\n+    applyIf = {\"MaxVectorSize\", \"=64\"},\n+    applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+static float[] test() {\n+    float[] a = new float[1024*8];\n+    for (int i = 0; i < a.length; i++) {\n+        a[i]++;\n+    }\n+    return a;\n+}\n+```\n+\n+However, the size does not have to be specified. In most cases, one either wants to have vectorization at the maximal possible vector width, or no vectorization at all. Hence, for lower bound counts ('>' or '>=') and equal count comparisons with strictly positive count (e.g. \"=2\") the default size is `IRNode.VECTOR_SIZE_MAX`, and for upper bound counts ('<' or '<=' or '=0' or failOn) the default is `IRNode.VECTOR_SIZE_ANY`. On machines with 'canTrustVectorSize == false' (default Cascade Lake) the maximal vector width is not predictable currently (32 byte for SuperWord and 64 byte for VectorAPI). Hence, on such a machine we have to automatically weaken the IR rules. All lower bound counts are performed checking with `IRNode.VECTOR_SIZE_ANY`. Upper bound counts with no user specified size are performed with `IRNode.VECTOR_SIZE_ANY` but upper bound counts with a user specified size are not checked at all. Equal count comparisons with strictly positive count are also not checked at all. Details and reasoning can be found in [RawIRNode](.\/driver\/irmatching\/irrule\/checkattribute\/parsing\/RawIRNode.java).\n+\n+More examples can be found in [IRExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/IRExample.java). You can also find many examples in the Vector API and SuperWord tests, when searching for `IRNode.VECTOR_SIZE` or `IRNode.LOAD_VECTOR`.\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver;\n+\n+import compiler.lib.ir_framework.driver.irmatching.irrule.constraint.Constraint;\n+\n+\/**\n+ * Exception used to signal that a {@link Constraint} should always succeed.\n+ *\/\n+public class SuccessOnlyConstraintException extends RuntimeException {\n+    public SuccessOnlyConstraintException(String message) {\n+        super(\"Unhandled SuccessOnlyConstraintException, should have created a Constraint that always succeeds:\" + System.lineSeparator() + message);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/SuccessOnlyConstraintException.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -53,1 +54,1 @@\n-    public IRMethod(Method method, int[] ruleIds, IR[] irAnnos, Compilation compilation) {\n+    public IRMethod(Method method, int[] ruleIds, IR[] irAnnos, Compilation compilation, VMInfo vmInfo) {\n@@ -55,1 +56,1 @@\n-        this.matcher = new MatchableMatcher(createIRRules(method, ruleIds, irAnnos, compilation));\n+        this.matcher = new MatchableMatcher(createIRRules(method, ruleIds, irAnnos, compilation, vmInfo));\n@@ -58,1 +59,1 @@\n-    private List<Matchable> createIRRules(Method method, int[] ruleIds, IR[] irAnnos, Compilation compilation) {\n+    private List<Matchable> createIRRules(Method method, int[] ruleIds, IR[] irAnnos, Compilation compilation, VMInfo vmInfo) {\n@@ -62,1 +63,1 @@\n-                irRules.add(new IRRule(ruleId, irAnnos[ruleId - 1], compilation));\n+                irRules.add(new IRRule(ruleId, irAnnos[ruleId - 1], compilation, vmInfo));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irmethod\/IRMethod.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -47,1 +48,1 @@\n-    public IRRule(int ruleId, IR irAnno, Compilation compilation) {\n+    public IRRule(int ruleId, IR irAnno, Compilation compilation, VMInfo vmInfo) {\n@@ -50,1 +51,1 @@\n-        this.matcher = new MatchableMatcher(new CompilePhaseIRRuleBuilder(irAnno, compilation).build());\n+        this.matcher = new MatchableMatcher(new CompilePhaseIRRuleBuilder(irAnno, compilation).build(vmInfo));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/IRRule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,8 +63,3 @@\n-            String irNode = IRNode.getIRNodeAccessString(node);\n-            int nextIndex = iterator.nextIndex();\n-            TestFormat.checkNoReport(iterator.hasNext(), \"Must provide additional value at index \" +\n-                                                         nextIndex + \" right after \" + irNode);\n-            CheckAttributeString userPostfix = new CheckAttributeString(iterator.next());\n-            TestFormat.checkNoReport(userPostfix.isValidUserPostfix(), \"Provided empty string for composite node \" +\n-                                                                       irNode + \" at index \" + nextIndex);\n-            return userPostfix;\n+            return readUserPostfixForCompositeIRNode(node);\n+        } else if (IRNode.isVectorIRNode(node)) {\n+            return readUserPostfixForVectorIRNode(node);\n@@ -75,0 +70,23 @@\n+\n+    private final CheckAttributeString readUserPostfixForCompositeIRNode(String node) {\n+        String irNode = IRNode.getIRNodeAccessString(node);\n+        int nextIndex = iterator.nextIndex();\n+        TestFormat.checkNoReport(iterator.hasNext(), \"Must provide additional value at index \" +\n+                                                     nextIndex + \" right after \" + irNode);\n+        CheckAttributeString userPostfix = new CheckAttributeString(iterator.next());\n+        TestFormat.checkNoReport(userPostfix.isValidUserPostfix(), \"Provided empty string for composite node \" +\n+                                                                   irNode + \" at index \" + nextIndex);\n+        return userPostfix;\n+    }\n+\n+    private final CheckAttributeString readUserPostfixForVectorIRNode(String node) {\n+        if (iterator.hasNext()) {\n+            String maybeVectorType = iterator.next();\n+            if (IRNode.isVectorSize(maybeVectorType)) {\n+                return new CheckAttributeString(maybeVectorType);\n+            }\n+            \/\/ If we do not find that pattern, then revert the iterator once\n+            iterator.previous();\n+        }\n+        return CheckAttributeString.invalid();\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/checkattribute\/parsing\/CheckAttributeReader.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import compiler.lib.ir_framework.shared.Comparison;\n+import compiler.lib.ir_framework.shared.TestFormat;\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n+import compiler.lib.ir_framework.driver.SuccessOnlyConstraintException;\n@@ -54,1 +58,1 @@\n-    public String regex(CompilePhase compilePhase) {\n+    public String regex(CompilePhase compilePhase, VMInfo vmInfo, Comparison.Bound bound) {\n@@ -58,1 +62,3 @@\n-            if (userPostfix.isValid()) {\n+            if (IRNode.isVectorIRNode(node)) {\n+                nodeRegex = regexForVectorIRNode(nodeRegex, vmInfo, bound);\n+            } else if (userPostfix.isValid()) {\n@@ -64,0 +70,69 @@\n+\n+    private String regexForVectorIRNode(String nodeRegex, VMInfo vmInfo, Comparison.Bound bound) {\n+        String type = IRNode.getVectorNodeType(node);\n+        TestFormat.checkNoReport(IRNode.getTypeSizeInBytes(type) > 0,\n+                                 \"Vector node's type must have valid type, got \\\"\" + type + \"\\\" for \\\"\" + node + \"\\\"\");\n+        String size = null;\n+        if (userPostfix.isValid()) {\n+            \/\/ Size is explicitly stated\n+            String value = userPostfix.value();\n+            TestFormat.checkNoReport(value.startsWith(IRNode.VECTOR_SIZE),\n+                                     \"Vector node's vector size must start with IRNode.VECTOR_SIZE, got: \\\"\" + value + \"\\\"\");\n+            size = value.substring(2);\n+\n+            if (!vmInfo.canTrustVectorSize()) {\n+                \/\/ Parse it already just to get errors before we overwrite size\n+                IRNode.parseVectorNodeSize(size, type, vmInfo);\n+            }\n+        }\n+\n+        \/\/ Set default values in some cases:\n+        if (!userPostfix.isValid() || !vmInfo.canTrustVectorSize()) {\n+            switch (bound) {\n+                case LOWER -> {\n+                    \/\/ For lower bound we check for the maximal size by default. But if we cannot trust the\n+                    \/\/ vector size we at least check there are vectors of any size.\n+                    if (vmInfo.canTrustVectorSize()) {\n+                        \/\/ No size specified, so assume maximal size\n+                        size = IRNode.VECTOR_SIZE_TAG_MAX;\n+                    } else {\n+                        System.out.println(\"WARNING: you are on a system with \\\"canTrustVectorSize == false\\\" (default Cascade Lake).\");\n+                        System.out.println(\"         The lower bound rule for \\\"\" + node + \"\\\" is now performed with\");\n+                        System.out.println(\"         \\\"IRNode.VECTOR_SIZE_TAG_ANY\\\" instead of \\\"IRNode.VECTOR_SIZE_TAG_MAX\\\".\");\n+                        size = IRNode.VECTOR_SIZE_TAG_ANY;\n+                    }\n+                }\n+                case UPPER -> {\n+                    if (userPostfix.isValid()) {\n+                        TestFormat.checkNoReport(!vmInfo.canTrustVectorSize(), \"sanity\");\n+                        \/\/ If we have a size specified but cannot trust the size, and must check an upper\n+                        \/\/ bound, this can be impossible to count correctly - if we have an incorrect size\n+                        \/\/ we may count either too many nodes. We just create an impossible regex which will\n+                        \/\/ always have count zero and make the upper bound rule pass.\n+                        System.out.println(\"WARNING: you are on a system with \\\"canTrustVectorSize == false\\\" (default Cascade Lake).\");\n+                        System.out.println(\"         The upper bound rule for \\\"\" + node + \"\\\" cannot be checked.\");\n+                        throw new SuccessOnlyConstraintException(\"upper bound with specified size\");\n+                    } else {\n+                        \/\/ For upper bound we check for vectors of any size by default.\n+                        size = IRNode.VECTOR_SIZE_TAG_ANY;\n+                    }\n+                }\n+                case EQUAL -> {\n+                    if (vmInfo.canTrustVectorSize()) {\n+                        \/\/ No size specified, so assume maximal size\n+                        size = IRNode.VECTOR_SIZE_TAG_MAX;\n+                    } else {\n+                        \/\/ Equal comparison to a strictly positive number would lead us to an impossible\n+                        \/\/ situation: we might have to know the exact vector size or else we count too many\n+                        \/\/ or too few cases. We therefore skip such a constraint and treat it as success.\n+                        System.out.println(\"WARNING: you are on a system with \\\"canTrustVectorSize == false\\\" (default Cascade Lake).\");\n+                        System.out.println(\"         The equal count comparison rule for \\\"\" + node + \"\\\" cannot be checked.\");\n+                        throw new SuccessOnlyConstraintException(\"equal count comparison\");\n+                    }\n+                }\n+            }\n+        }\n+        String sizeRegex = IRNode.parseVectorNodeSize(size, type, vmInfo);\n+        return nodeRegex.replaceAll(IRNode.IS_REPLACED,\n+                                    \"vector[A-Za-z]\\\\\\\\[\" + sizeRegex + \"\\\\\\\\]:\\\\\\\\{\" + type + \"\\\\\\\\}\");\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/checkattribute\/parsing\/RawIRNode.java","additions":78,"deletions":3,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -64,0 +64,6 @@\n+    public static Constraint createSuccess() {\n+        String nodeRegex = \"impossible_regex\";\n+        String compilationOutput = \"\"; \/\/ empty\n+        return new Constraint(new SuccessConstraintCheck(), nodeRegex, compilationOutput);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/Constraint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.irrule.constraint;\n+\n+import compiler.lib.ir_framework.driver.irmatching.MatchResult;\n+\n+import java.util.List;\n+\n+\/**\n+ * This class provides a check that always succeeds.\n+ *\n+ * @see Constraint\n+ *\/\n+class SuccessConstraintCheck implements ConstraintCheck {\n+\n+    @Override\n+    public MatchResult check(List<String> matchedNodes) {\n+        return SuccessResult.getInstance();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/SuccessConstraintCheck.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -41,1 +42,1 @@\n-    Constraint parse(CompilePhase compilePhase, String compilationOutput);\n+    Constraint parse(CompilePhase compilePhase, String compilationOutput, VMInfo vmInfo);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawConstraint.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import compiler.lib.ir_framework.IRNode;\n@@ -32,0 +33,2 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n+import compiler.lib.ir_framework.driver.SuccessOnlyConstraintException;\n@@ -33,0 +36,2 @@\n+import compiler.lib.ir_framework.shared.TestFormat;\n+import compiler.lib.ir_framework.shared.TestFormatException;\n@@ -55,0 +60,36 @@\n+    private Comparison.Bound getComparisonBound() {\n+        switch (comparison.getComparator()) {\n+            case \"<\" -> {\n+                TestFormat.checkNoReport(comparison.getGivenValue() > 0, \"Node count comparison \\\"<\" +\n+                                         comparison.getGivenValue() + \"\\\" is not allowed: always false.\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() > 1, \"Node count comparison \\\"<\" +\n+                                         comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n+                return Comparison.Bound.UPPER;\n+            }\n+            case \"<=\" -> {\n+                TestFormat.checkNoReport(comparison.getGivenValue() >= 0, \"Node count comparison \\\"<=\" +\n+                                         comparison.getGivenValue() + \"\\\" is not allowed: always false.\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() >= 1, \"Node count comparison \\\"<=\" +\n+                                         comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n+                return Comparison.Bound.UPPER;\n+            }\n+            case \"=\" -> {\n+                \/\/ \"=0\" is same as setting upper bound - just like for failOn. But if we compare equals a\n+                \/\/ strictly positive number it is like setting both upper and lower bound (equal).\n+                return comparison.getGivenValue() > 0 ? Comparison.Bound.EQUAL : Comparison.Bound.UPPER;\n+            }\n+            case \">\" -> {\n+                TestFormat.checkNoReport(comparison.getGivenValue() >= 0, \"Node count comparison \\\">\" +\n+                                         comparison.getGivenValue() + \"\\\" is useless, please only use positive numbers.\");\n+                return Comparison.Bound.LOWER;\n+            }\n+            case \">=\" -> {\n+                TestFormat.checkNoReport(comparison.getGivenValue() > 0, \"Node count comparison \\\">=\" +\n+                                         comparison.getGivenValue() + \"\\\" is useless, please only use strictly positive numbers with greater-equal.\");\n+                return Comparison.Bound.LOWER;\n+            }\n+            case \"!=\" -> throw new TestFormatException(\"Not-equal comparator not supported. Please rewrite the rule.\");\n+            default -> throw new TestFormatException(\"Comparator not handled: \" + comparison.getComparator());\n+        }\n+    }\n+\n@@ -56,1 +97,1 @@\n-    public Constraint parse(CompilePhase compilePhase, String compilationOutput) {\n+    public Constraint parse(CompilePhase compilePhase, String compilationOutput, VMInfo vmInfo) {\n@@ -58,1 +99,5 @@\n-        return Constraint.createCounts(rawIRNode.regex(compilePhase), constraintIndex, comparison, compilationOutput);\n+        try {\n+            return Constraint.createCounts(rawIRNode.regex(compilePhase, vmInfo, getComparisonBound()), constraintIndex, comparison, compilationOutput);\n+        } catch (SuccessOnlyConstraintException e) {\n+            return Constraint.createSuccess();\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawCountsConstraint.java","additions":47,"deletions":2,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import compiler.lib.ir_framework.IRNode;\n@@ -29,0 +30,1 @@\n+import compiler.lib.ir_framework.shared.Comparison;\n@@ -31,0 +33,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -52,1 +55,1 @@\n-    public Constraint parse(CompilePhase compilePhase, String compilationOutput) {\n+    public Constraint parse(CompilePhase compilePhase, String compilationOutput, VMInfo vmInfo) {\n@@ -54,1 +57,1 @@\n-        return Constraint.createFailOn(rawIRNode.regex(compilePhase), constraintIndex, compilationOutput);\n+        return Constraint.createFailOn(rawIRNode.regex(compilePhase, vmInfo, Comparison.Bound.UPPER), constraintIndex, compilationOutput);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawFailOnConstraint.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -63,1 +64,1 @@\n-    public SortedSet<CompilePhaseIRRuleMatchable> build() {\n+    public SortedSet<CompilePhaseIRRuleMatchable> build(VMInfo vmInfo) {\n@@ -69,1 +70,1 @@\n-                createCompilePhaseIRRulesForDefault();\n+                createCompilePhaseIRRulesForDefault(vmInfo);\n@@ -71,1 +72,1 @@\n-                createCompilePhaseIRRule(compilePhase);\n+                createCompilePhaseIRRule(compilePhase, vmInfo);\n@@ -77,1 +78,1 @@\n-    private void createCompilePhaseIRRulesForDefault() {\n+    private void createCompilePhaseIRRulesForDefault(VMInfo vmInfo) {\n@@ -80,1 +81,1 @@\n-                parser.parse(rawFailOnConstraints, rawCountsConstraints);\n+                parser.parse(rawFailOnConstraints, rawCountsConstraints, vmInfo);\n@@ -91,3 +92,3 @@\n-    private void createCompilePhaseIRRule(CompilePhase compilePhase) {\n-        List<Constraint> failOnConstraints = parseRawConstraints(rawFailOnConstraints, compilePhase);\n-        List<Constraint> countsConstraints = parseRawConstraints(rawCountsConstraints, compilePhase);\n+    private void createCompilePhaseIRRule(CompilePhase compilePhase, VMInfo vmInfo) {\n+        List<Constraint> failOnConstraints = parseRawConstraints(rawFailOnConstraints, compilePhase, vmInfo);\n+        List<Constraint> countsConstraints = parseRawConstraints(rawCountsConstraints, compilePhase, vmInfo);\n@@ -116,1 +117,2 @@\n-                                                 CompilePhase compilePhase) {\n+                                                 CompilePhase compilePhase,\n+                                                 VMInfo vmInfo) {\n@@ -119,1 +121,1 @@\n-            constraintResultList.add(rawConstraint.parse(compilePhase, compilation.output(compilePhase)));\n+            constraintResultList.add(rawConstraint.parse(compilePhase, compilation.output(compilePhase), vmInfo));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/phase\/CompilePhaseIRRuleBuilder.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -55,1 +56,2 @@\n-                                                    List<RawConstraint> rawCountsConstraints) {\n+                                                    List<RawConstraint> rawCountsConstraints,\n+                                                    VMInfo vmInfo) {\n@@ -57,1 +59,2 @@\n-                                                                                 CheckAttributeType.FAIL_ON);\n+                                                                                 CheckAttributeType.FAIL_ON,\n+                                                                                 vmInfo);\n@@ -59,1 +62,2 @@\n-                                                                                 CheckAttributeType.COUNTS);\n+                                                                                 CheckAttributeType.COUNTS,\n+                                                                                 vmInfo);\n@@ -64,1 +68,2 @@\n-                                                             CheckAttributeType checkAttributeType) {\n+                                                             CheckAttributeType checkAttributeType,\n+                                                             VMInfo vmInfo) {\n@@ -70,1 +75,1 @@\n-            checkAttribute.add(rawConstraint.parse(compilePhase, compilation.output(compilePhase)));\n+            checkAttribute.add(rawConstraint.parse(compilePhase, compilation.output(compilePhase), vmInfo));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/phase\/DefaultPhaseRawConstraintParser.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public SortedSet<IRMethodMatchable> build() {\n+    public SortedSet<IRMethodMatchable> build(VMInfo vmInfo) {\n@@ -57,1 +57,1 @@\n-                (methodName, testMethod) -> irMethods.add(createIRMethod(methodName, testMethod)));\n+                (methodName, testMethod) -> irMethods.add(createIRMethod(methodName, testMethod, vmInfo)));\n@@ -61,1 +61,1 @@\n-    private IRMethodMatchable createIRMethod(String methodName, TestMethod testMethod) {\n+    private IRMethodMatchable createIRMethod(String methodName, TestMethod testMethod, VMInfo vmInfo) {\n@@ -65,1 +65,1 @@\n-                                new Compilation(loggedMethod.compilationOutput()));\n+                                new Compilation(loggedMethod.compilationOutput()), vmInfo);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/IRMethodBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+        VMInfo vmInfo = VMInfoParser.parseVMInfo(irEncoding);\n@@ -60,1 +61,1 @@\n-            return createTestClass(testMethods, loggedMethods);\n+            return createTestClass(testMethods, loggedMethods, vmInfo);\n@@ -69,1 +70,1 @@\n-    private Matchable createTestClass(TestMethods testMethods, LoggedMethods loggedMethods) {\n+    private Matchable createTestClass(TestMethods testMethods, LoggedMethods loggedMethods, VMInfo vmInfo) {\n@@ -71,1 +72,1 @@\n-        SortedSet<IRMethodMatchable> irMethods = irMethodBuilder.build();\n+        SortedSet<IRMethodMatchable> irMethods = irMethodBuilder.build(vmInfo);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/TestClassParser.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.shared.TestFrameworkException;\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * This class stores the key value mapping from the VMInfo.\n+ *\n+ * @see IREncodingParser\n+ *\/\n+public class VMInfo {\n+    \/**\n+     * Stores the key-value mapping.\n+     *\/\n+    private final Map<String, String> keyValueMap;\n+\n+    private static final Pattern CPU_SKYLAKE_PATTERN =\n+            Pattern.compile(\"family 6 model 85 stepping (\\\\d) \");\n+\n+    public VMInfo(Map<String, String> map) {\n+        this.keyValueMap = map;\n+\n+        TestFramework.check(isKey(\"cpuFeatures\"),   \"VMInfo does not contain cpuFeatures\");\n+        TestFramework.check(isKey(\"MaxVectorSize\"), \"VMInfo does not contain MaxVectorSize\");\n+        TestFramework.check(isKey(\"MaxVectorSizeIsDefault\"), \"VMInfo does not contain MaxVectorSizeIsDefault\");\n+        TestFramework.check(isKey(\"LoopMaxUnroll\"), \"VMInfo does not contain LoopMaxUnroll\");\n+        TestFramework.check(isKey(\"UseAVX\"), \"VMInfo does not contain UseAVX\");\n+        TestFramework.check(isKey(\"UseAVXIsDefault\"), \"VMInfo does not contain UseAVXIsDefault\");\n+    }\n+\n+    public String getStringValue(String key) {\n+        TestFramework.check(isKey(key), \"VMInfo does not contain \\\"\" + key + \"\\\"\");\n+        return keyValueMap.get(key);\n+    }\n+\n+    public long getLongValue(String key) {\n+        try {\n+            return Long.parseLong(getStringValue(key));\n+        } catch (NumberFormatException e) {\n+            throw new TestFrameworkException(\"VMInfo value for \\\"\" + key + \"\\\" is not a long, got \\\"\" + getStringValue(key) + \"\\\"\");\n+        }\n+    }\n+\n+    public boolean hasCPUFeature(String feature) {\n+        String features = getStringValue(\"cpuFeatures\") + \",\";\n+        return features.contains(\" \" + feature + \",\");\n+    }\n+\n+    public boolean isCascadeLake() {\n+        Matcher matcher = CPU_SKYLAKE_PATTERN.matcher(getStringValue(\"cpuFeatures\"));\n+        if (!matcher.find()) {\n+            return false; \/\/ skylake pattern not found\n+        }\n+        String stepping = matcher.group(1).trim();\n+        return Long.parseLong(stepping) >= 5; \/\/ this makes it Cascade Lake\n+    }\n+\n+    public boolean isDefaultCascadeLake() {\n+        \/\/ See VM_Version::is_default_intel_cascade_lake\n+        return isCascadeLake() &&\n+               getLongValue(\"MaxVectorSizeIsDefault\") == 1 &&\n+               getLongValue(\"UseAVXIsDefault\") == 1 &&\n+               getLongValue(\"UseAVX\") > 2;\n+    }\n+\n+    \/**\n+     * Some platforms do not behave as expected, and one cannot trust that the vectors\n+     * make use of the full MaxVectorSize. For Cascade Lake, we only use 32 bytes for\n+     * SuperWord by default even though MaxVectorSize is 64. But the VectorAPI still\n+     * uses 64 bytes. Thus MaxVectorSize is not a reliable indicator for the expected\n+     * maximal vector size on that platform.\n+     *\/\n+    public boolean canTrustVectorSize() {\n+        return !isDefaultCascadeLake();\n+    }\n+\n+    public boolean isKey(String key) {\n+        return keyValueMap.containsKey(key);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfo.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.shared.TestFrameworkException;\n+import compiler.lib.ir_framework.test.VMInfoPrinter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Class to parse the VMInfo emitted by the test VM and creating {@link VMInfo} objects for each entry.\n+ *\n+ * @see VMInfo\n+ *\/\n+public class VMInfoParser {\n+\n+    private static final Pattern VM_INFO_PATTERN =\n+            Pattern.compile(\"(?<=\" + VMInfoPrinter.START_VM_INFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + VMInfoPrinter.END_VM_INFO + \")\");\n+\n+    \/**\n+     * Extract VMInfo from the irEncoding.\n+     *\/\n+    public static VMInfo parseVMInfo(String irEncoding) {\n+        Map<String, String> map = new HashMap<>();\n+        String[] lines = getVMInfoLines(irEncoding);\n+        for (String s : lines) {\n+            String line = s.trim();\n+            String[] splitLine = line.split(\":\", 2);\n+            if (splitLine.length != 2) {\n+                throw new TestFrameworkException(\"Invalid VMInfo key:value encoding. Found: \" + splitLine[0]);\n+            }\n+            String key = splitLine[0];\n+            String value = splitLine[1];\n+            map.put(key, value);\n+        }\n+        return new VMInfo(map);\n+    }\n+\n+    \/**\n+     * Extract the VMInfo from the irEncoding string, strip away the header and return the individual key-value lines.\n+     *\/\n+    private static String[] getVMInfoLines(String irEncoding) {\n+        Matcher matcher = VM_INFO_PATTERN.matcher(irEncoding);\n+        TestFramework.check(matcher.find(), \"Did not find VMInfo in:\" + System.lineSeparator() + irEncoding);\n+        String lines = matcher.group(1).trim();\n+        if (lines.isEmpty()) {\n+            \/\/ Nothing to IR match.\n+            return new String[0];\n+        }\n+        return lines.split(\"\\\\R\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfoParser.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -41,0 +41,6 @@\n+    public enum Bound {\n+        LOWER,\n+        UPPER,\n+        EQUAL,\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/shared\/Comparison.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -269,0 +269,1 @@\n+            VMInfoPrinter.emit();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.test;\n+\n+import compiler.lib.ir_framework.shared.TestFrameworkSocket;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * Prints some test VM info to the socket.\n+ *\/\n+public class VMInfoPrinter {\n+    public static final String START_VM_INFO = \"##### IRMatchingVMInfo - used by TestFramework #####\";\n+    public static final String END_VM_INFO = \"----- END VMInfo -----\";\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    public static void emit() {\n+        StringBuilder vmInfo = new StringBuilder();\n+        vmInfo.append(START_VM_INFO).append(System.lineSeparator());\n+        vmInfo.append(\"<key>:<value>\").append(System.lineSeparator());\n+\n+        \/\/ CPU feature independent info\n+        String cpuFeatures = WHITE_BOX.getCPUFeatures();\n+        vmInfo.append(\"cpuFeatures:\").append(cpuFeatures).append(System.lineSeparator());\n+        long maxVectorSize = WHITE_BOX.getIntxVMFlag(\"MaxVectorSize\");\n+        vmInfo.append(\"MaxVectorSize:\").append(maxVectorSize).append(System.lineSeparator());\n+        boolean maxVectorSizeIsDefault = WHITE_BOX.isDefaultVMFlag(\"MaxVectorSize\");\n+        vmInfo.append(\"MaxVectorSizeIsDefault:\")\n+              .append(maxVectorSizeIsDefault ? 1 : 0)\n+              .append(System.lineSeparator());\n+        long loopMaxUnroll = WHITE_BOX.getIntxVMFlag(\"LoopMaxUnroll\");\n+        vmInfo.append(\"LoopMaxUnroll:\").append(loopMaxUnroll).append(System.lineSeparator());\n+\n+        \/\/ CPU feature dependent info\n+        long useAVX = 0;\n+        boolean useAVXIsDefault = true;\n+        if (cpuFeatures.contains(\" sse, \")) {\n+            useAVX = WHITE_BOX.getIntVMFlag(\"UseAVX\");\n+            useAVXIsDefault = WHITE_BOX.isDefaultVMFlag(\"UseAVX\");\n+        }\n+        vmInfo.append(\"UseAVX:\").append(useAVX).append(System.lineSeparator());\n+        vmInfo.append(\"UseAVXIsDefault:\")\n+              .append(useAVXIsDefault ? 1 : 0)\n+              .append(System.lineSeparator());\n+\n+        vmInfo.append(END_VM_INFO);\n+        TestFrameworkSocket.write(vmInfo.toString(), \"VMInfo\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/VMInfoPrinter.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -95,1 +95,1 @@\n-        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.ABS_V, IRNode.NEG_V})\n+        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.ABS_VD, IRNode.NEG_VD})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Double.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        failOn = {IRNode.ADD_REDUCTION_VF, IRNode.ABS_V, IRNode.NEG_V})\n+        failOn = {IRNode.ADD_REDUCTION_VF, IRNode.ABS_VF, IRNode.NEG_VF})\n@@ -96,1 +96,3 @@\n-        counts = {IRNode.ADD_REDUCTION_VF, \">= 1\", IRNode.ABS_V, \">= 1\", IRNode.NEG_V, \">= 1\"})\n+        counts = {IRNode.ADD_REDUCTION_VF, \">= 1\",\n+                  IRNode.ABS_VF, IRNode.VECTOR_SIZE + \"min(LoopMaxUnroll, max_float)\", \">= 1\",\n+                  IRNode.NEG_VF, IRNode.VECTOR_SIZE + \"min(LoopMaxUnroll, max_float)\", \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedAbsNeg_Float.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.SQRT_V})\n+        failOn = {IRNode.ADD_REDUCTION_VD, IRNode.SQRT_VD})\n@@ -93,1 +93,1 @@\n-        counts = {IRNode.ADD_REDUCTION_VD, \">= 1\", IRNode.SQRT_V, \">= 1\"})\n+        counts = {IRNode.ADD_REDUCTION_VD, \">= 1\", IRNode.SQRT_VD, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRedSqrt_Double.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -349,1 +349,1 @@\n-    @IR(counts = {IRNode.ADD_VF, \"> 0\"},\n+    @IR(counts = {IRNode.ADD_VF, IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCyclicDependency.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *       https:\/\/bugs.openjdk.org\/browse\/JDK-8308606\n+ *       https:\/\/bugs.openjdk.org\/browse\/JDK-8310308\n@@ -1392,1 +1392,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1396,1 +1396,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1400,1 +1400,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1404,1 +1404,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1424,1 +1424,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1428,1 +1428,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1432,1 +1432,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1436,1 +1436,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1440,1 +1440,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1444,1 +1444,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1448,1 +1448,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1452,1 +1452,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1500,1 +1500,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1504,1 +1504,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1508,1 +1508,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1512,1 +1512,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1533,1 +1533,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1538,1 +1538,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1543,1 +1543,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1548,1 +1548,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1568,1 +1568,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1572,1 +1572,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1576,1 +1576,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1580,1 +1580,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1584,1 +1584,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1588,1 +1588,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1592,1 +1592,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1596,1 +1596,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1617,1 +1617,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1622,1 +1622,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1627,1 +1627,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1632,1 +1632,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1652,1 +1652,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1656,1 +1656,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1660,1 +1660,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1664,1 +1664,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1684,1 +1684,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1688,1 +1688,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1693,1 +1693,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1698,1 +1698,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1703,1 +1703,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1723,1 +1723,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1727,1 +1727,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1731,1 +1731,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1735,1 +1735,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1739,1 +1739,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1743,1 +1743,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1747,1 +1747,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1751,1 +1751,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -1771,1 +1771,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1776,1 +1776,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1781,1 +1781,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1786,1 +1786,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1806,1 +1806,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1810,1 +1810,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1814,1 +1814,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1818,1 +1818,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1838,1 +1838,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1842,1 +1842,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1846,1 +1846,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1850,1 +1850,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1855,1 +1855,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1859,1 +1859,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1863,1 +1863,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1883,1 +1883,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1887,1 +1887,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1891,1 +1891,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1895,1 +1895,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1915,1 +1915,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1919,1 +1919,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1924,1 +1924,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1928,1 +1928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1948,1 +1948,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1952,1 +1952,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1956,1 +1956,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1960,1 +1960,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1980,1 +1980,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1984,1 +1984,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1988,1 +1988,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1992,1 +1992,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -1996,1 +1996,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2000,1 +2000,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2004,1 +2004,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2008,1 +2008,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2028,1 +2028,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2032,1 +2032,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2036,1 +2036,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2040,1 +2040,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2060,1 +2060,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2064,1 +2064,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2068,1 +2068,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2072,1 +2072,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2092,1 +2092,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2096,1 +2096,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2100,1 +2100,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2104,1 +2104,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2124,1 +2124,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2128,1 +2128,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2132,1 +2132,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2136,1 +2136,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2140,1 +2140,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2160,1 +2160,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2164,1 +2164,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2168,1 +2168,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2172,1 +2172,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2176,1 +2176,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2180,1 +2180,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2184,1 +2184,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2188,1 +2188,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2208,1 +2208,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2212,1 +2212,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2216,1 +2216,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2220,1 +2220,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2240,1 +2240,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2244,1 +2244,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2248,1 +2248,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2252,1 +2252,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2272,1 +2272,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2276,1 +2276,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2280,1 +2280,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2284,1 +2284,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2288,1 +2288,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2292,1 +2292,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2296,1 +2296,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2300,1 +2300,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2320,1 +2320,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2324,1 +2324,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2328,1 +2328,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2332,1 +2332,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2336,1 +2336,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2340,1 +2340,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2344,1 +2344,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2348,1 +2348,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2368,1 +2368,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2372,1 +2372,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2376,1 +2376,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2380,1 +2380,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2400,1 +2400,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2404,1 +2404,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2408,1 +2408,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2412,1 +2412,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2432,1 +2432,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2436,1 +2436,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2440,1 +2440,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2444,1 +2444,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2448,1 +2448,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2452,1 +2452,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2456,1 +2456,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2460,1 +2460,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2480,1 +2480,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2484,1 +2484,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2488,1 +2488,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2492,1 +2492,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2496,1 +2496,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2500,1 +2500,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2504,1 +2504,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2508,1 +2508,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2528,1 +2528,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2532,1 +2532,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2536,1 +2536,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2540,1 +2540,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2560,1 +2560,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2564,1 +2564,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2568,1 +2568,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2572,1 +2572,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2592,1 +2592,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2596,1 +2596,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2600,1 +2600,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2604,1 +2604,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2608,1 +2608,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2612,1 +2612,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2616,1 +2616,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2620,1 +2620,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2640,1 +2640,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2644,1 +2644,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2648,1 +2648,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2652,1 +2652,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2656,1 +2656,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2660,1 +2660,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2664,1 +2664,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2668,1 +2668,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n@@ -2688,1 +2688,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2692,1 +2692,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2696,1 +2696,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2700,1 +2700,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2720,1 +2720,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2724,1 +2724,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2728,1 +2728,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2732,1 +2732,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2752,1 +2752,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2756,1 +2756,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2760,1 +2760,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2764,1 +2764,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2768,1 +2768,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2772,1 +2772,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2776,1 +2776,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2780,1 +2780,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2800,1 +2800,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2804,1 +2804,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2808,1 +2808,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2812,1 +2812,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2832,1 +2832,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2836,1 +2836,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2840,1 +2840,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2844,1 +2844,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2848,1 +2848,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2852,1 +2852,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2856,1 +2856,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2860,1 +2860,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2908,1 +2908,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2912,1 +2912,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2916,1 +2916,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2920,1 +2920,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2940,1 +2940,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2944,1 +2944,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2949,1 +2949,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2954,1 +2954,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2959,1 +2959,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2979,1 +2979,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2983,1 +2983,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2987,1 +2987,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2991,1 +2991,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -2995,1 +2995,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -2999,1 +2999,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3003,1 +3003,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3007,1 +3007,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3027,1 +3027,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3032,1 +3032,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3037,1 +3037,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3042,1 +3042,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3062,1 +3062,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3066,1 +3066,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3070,1 +3070,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3074,1 +3074,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3094,1 +3094,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3098,1 +3098,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3102,1 +3102,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3106,1 +3106,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3111,1 +3111,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3115,1 +3115,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3119,1 +3119,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3139,1 +3139,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3143,1 +3143,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3147,1 +3147,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3151,1 +3151,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3155,1 +3155,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3159,1 +3159,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3163,1 +3163,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3167,1 +3167,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3187,1 +3187,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3191,1 +3191,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3196,1 +3196,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3200,1 +3200,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3220,1 +3220,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3224,1 +3224,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3228,1 +3228,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3232,1 +3232,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3252,1 +3252,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3256,1 +3256,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3260,1 +3260,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3264,1 +3264,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3268,1 +3268,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3272,1 +3272,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3276,1 +3276,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3280,1 +3280,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3300,1 +3300,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3304,1 +3304,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3308,1 +3308,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3312,1 +3312,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3332,1 +3332,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3336,1 +3336,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3340,1 +3340,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3344,1 +3344,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3348,1 +3348,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3368,1 +3368,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3372,1 +3372,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3376,1 +3376,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3380,1 +3380,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3400,1 +3400,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3404,1 +3404,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3408,1 +3408,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3412,1 +3412,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3416,1 +3416,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3420,1 +3420,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3424,1 +3424,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3428,1 +3428,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3448,1 +3448,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3452,1 +3452,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3456,1 +3456,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3460,1 +3460,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3480,1 +3480,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3484,1 +3484,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3488,1 +3488,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3492,1 +3492,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3496,1 +3496,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3516,1 +3516,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3520,1 +3520,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3524,1 +3524,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3528,1 +3528,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3548,1 +3548,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3552,1 +3552,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3556,1 +3556,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3560,1 +3560,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3564,1 +3564,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3568,1 +3568,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3572,1 +3572,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3592,1 +3592,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3596,1 +3596,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3600,1 +3600,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3604,1 +3604,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3608,1 +3608,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3612,1 +3612,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3616,1 +3616,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3620,1 +3620,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3640,1 +3640,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3644,1 +3644,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3648,1 +3648,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3652,1 +3652,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3672,1 +3672,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3676,1 +3676,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3680,1 +3680,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3684,1 +3684,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3704,1 +3704,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3708,1 +3708,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3712,1 +3712,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3716,1 +3716,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3720,1 +3720,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3724,1 +3724,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3728,1 +3728,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3732,1 +3732,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3752,1 +3752,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3756,1 +3756,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3760,1 +3760,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3764,1 +3764,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3768,1 +3768,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3772,1 +3772,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3776,1 +3776,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3780,1 +3780,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3800,1 +3800,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3804,1 +3804,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3808,1 +3808,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3812,1 +3812,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3832,1 +3832,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3836,1 +3836,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3840,1 +3840,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3844,1 +3844,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3864,1 +3864,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3868,1 +3868,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3872,1 +3872,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3876,1 +3876,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3880,1 +3880,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3884,1 +3884,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3888,1 +3888,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3892,1 +3892,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3912,1 +3912,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3916,1 +3916,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3920,1 +3920,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3924,1 +3924,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3928,1 +3928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3932,1 +3932,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3936,1 +3936,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3940,1 +3940,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -3960,1 +3960,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3964,1 +3964,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3968,1 +3968,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3972,1 +3972,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3992,1 +3992,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -3996,1 +3996,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4000,1 +4000,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4004,1 +4004,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4024,1 +4024,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4028,1 +4028,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4032,1 +4032,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4036,1 +4036,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4040,1 +4040,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4044,1 +4044,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4048,1 +4048,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4052,1 +4052,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4072,1 +4072,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4076,1 +4076,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -4080,1 +4080,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4084,1 +4084,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -4088,1 +4088,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4092,1 +4092,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -4096,1 +4096,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4100,1 +4100,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n@@ -4120,1 +4120,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4124,1 +4124,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4128,1 +4128,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4132,1 +4132,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4152,1 +4152,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4156,1 +4156,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4160,1 +4160,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4164,1 +4164,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4184,1 +4184,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4188,1 +4188,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4192,1 +4192,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4196,1 +4196,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4200,1 +4200,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4204,1 +4204,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4208,1 +4208,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4212,1 +4212,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4232,1 +4232,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4236,1 +4236,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4240,1 +4240,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4244,1 +4244,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4264,1 +4264,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4268,1 +4268,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4272,1 +4272,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4276,1 +4276,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4280,1 +4280,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4284,1 +4284,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4288,1 +4288,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4292,1 +4292,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4340,1 +4340,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4344,1 +4344,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4348,1 +4348,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4352,1 +4352,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4373,1 +4373,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4378,1 +4378,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4383,1 +4383,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4388,1 +4388,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4408,1 +4408,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4412,1 +4412,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4416,1 +4416,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4420,1 +4420,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4424,1 +4424,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4428,1 +4428,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4432,1 +4432,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4436,1 +4436,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4457,1 +4457,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4462,1 +4462,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4467,1 +4467,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4472,1 +4472,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4492,1 +4492,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4496,1 +4496,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4500,1 +4500,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4504,1 +4504,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4525,1 +4525,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4530,1 +4530,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4535,1 +4535,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4540,1 +4540,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4560,1 +4560,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4564,1 +4564,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4568,1 +4568,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4572,1 +4572,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4576,1 +4576,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4580,1 +4580,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4584,1 +4584,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4588,1 +4588,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4609,1 +4609,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4614,1 +4614,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4619,1 +4619,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4624,1 +4624,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4644,1 +4644,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4648,1 +4648,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4652,1 +4652,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4656,1 +4656,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4676,1 +4676,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4680,1 +4680,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4685,1 +4685,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4690,1 +4690,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4695,1 +4695,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4715,1 +4715,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4719,1 +4719,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4723,1 +4723,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4727,1 +4727,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4747,1 +4747,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4752,1 +4752,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4757,1 +4757,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4762,1 +4762,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4782,1 +4782,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4786,1 +4786,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4790,1 +4790,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4794,1 +4794,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4814,1 +4814,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4818,1 +4818,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4822,1 +4822,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4826,1 +4826,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4831,1 +4831,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4835,1 +4835,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4839,1 +4839,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4859,1 +4859,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4863,1 +4863,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4867,1 +4867,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4871,1 +4871,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4891,1 +4891,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4895,1 +4895,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4900,1 +4900,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4904,1 +4904,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4924,1 +4924,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4928,1 +4928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4932,1 +4932,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4936,1 +4936,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4956,1 +4956,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4960,1 +4960,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4965,1 +4965,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4969,1 +4969,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4989,1 +4989,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -4993,1 +4993,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -4997,1 +4997,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5001,1 +5001,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5005,1 +5005,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5009,1 +5009,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5013,1 +5013,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5017,1 +5017,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5037,1 +5037,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5041,1 +5041,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5046,1 +5046,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5050,1 +5050,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5070,1 +5070,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5074,1 +5074,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5078,1 +5078,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5082,1 +5082,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5102,1 +5102,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5106,1 +5106,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5110,1 +5110,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5114,1 +5114,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5118,1 +5118,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5122,1 +5122,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5126,1 +5126,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5130,1 +5130,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5150,1 +5150,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5154,1 +5154,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5158,1 +5158,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5162,1 +5162,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5166,1 +5166,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5170,1 +5170,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5174,1 +5174,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5178,1 +5178,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5198,1 +5198,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5202,1 +5202,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5206,1 +5206,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5210,1 +5210,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5230,1 +5230,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5234,1 +5234,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5238,1 +5238,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5242,1 +5242,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5262,1 +5262,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5266,1 +5266,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5270,1 +5270,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5274,1 +5274,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5278,1 +5278,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5282,1 +5282,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5286,1 +5286,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5290,1 +5290,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5310,1 +5310,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5314,1 +5314,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5318,1 +5318,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5322,1 +5322,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5326,1 +5326,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5330,1 +5330,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5334,1 +5334,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5338,1 +5338,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5358,1 +5358,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5362,1 +5362,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5366,1 +5366,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5370,1 +5370,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5390,1 +5390,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5394,1 +5394,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5398,1 +5398,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5402,1 +5402,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5422,1 +5422,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5426,1 +5426,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5430,1 +5430,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5434,1 +5434,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5438,1 +5438,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5442,1 +5442,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5446,1 +5446,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5450,1 +5450,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5470,1 +5470,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5474,1 +5474,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5478,1 +5478,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5482,1 +5482,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5486,1 +5486,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5490,1 +5490,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5494,1 +5494,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5498,1 +5498,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5518,1 +5518,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5522,1 +5522,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5526,1 +5526,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5530,1 +5530,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5550,1 +5550,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5554,1 +5554,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5558,1 +5558,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5562,1 +5562,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5582,1 +5582,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5586,1 +5586,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5590,1 +5590,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5594,1 +5594,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5598,1 +5598,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5602,1 +5602,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5606,1 +5606,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5610,1 +5610,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5630,1 +5630,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5634,1 +5634,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5638,1 +5638,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5642,1 +5642,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5662,1 +5662,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5666,1 +5666,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5670,1 +5670,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5674,1 +5674,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5678,1 +5678,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5682,1 +5682,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5686,1 +5686,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5690,1 +5690,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5738,1 +5738,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5742,1 +5742,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5746,1 +5746,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5750,1 +5750,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5771,1 +5771,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5776,1 +5776,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5781,1 +5781,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5786,1 +5786,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5806,1 +5806,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5810,1 +5810,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5814,1 +5814,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5818,1 +5818,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5822,1 +5822,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5826,1 +5826,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5830,1 +5830,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5834,1 +5834,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5855,1 +5855,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5860,1 +5860,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5865,1 +5865,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5870,1 +5870,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5890,1 +5890,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5894,1 +5894,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5898,1 +5898,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5902,1 +5902,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5923,1 +5923,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5928,1 +5928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5933,1 +5933,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5938,1 +5938,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5958,1 +5958,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5962,1 +5962,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5966,1 +5966,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5970,1 +5970,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5974,1 +5974,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5978,1 +5978,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -5982,1 +5982,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -5986,1 +5986,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6007,1 +6007,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6012,1 +6012,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6017,1 +6017,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6022,1 +6022,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6042,1 +6042,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6046,1 +6046,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6050,1 +6050,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6054,1 +6054,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6074,1 +6074,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6078,1 +6078,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6083,1 +6083,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6088,1 +6088,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6093,1 +6093,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6113,1 +6113,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6117,1 +6117,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6121,1 +6121,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6125,1 +6125,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6145,1 +6145,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6150,1 +6150,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6155,1 +6155,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6160,1 +6160,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6180,1 +6180,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6184,1 +6184,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6188,1 +6188,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6192,1 +6192,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6212,1 +6212,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6216,1 +6216,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6220,1 +6220,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6224,1 +6224,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6229,1 +6229,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6233,1 +6233,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6237,1 +6237,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6257,1 +6257,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6261,1 +6261,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6265,1 +6265,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6269,1 +6269,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6289,1 +6289,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6293,1 +6293,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6298,1 +6298,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6302,1 +6302,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6322,1 +6322,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6326,1 +6326,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6330,1 +6330,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6334,1 +6334,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6354,1 +6354,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6358,1 +6358,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6363,1 +6363,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6367,1 +6367,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6387,1 +6387,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6391,1 +6391,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6395,1 +6395,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6399,1 +6399,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6403,1 +6403,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6407,1 +6407,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6411,1 +6411,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6415,1 +6415,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6435,1 +6435,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6439,1 +6439,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6444,1 +6444,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6448,1 +6448,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6468,1 +6468,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6472,1 +6472,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6476,1 +6476,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6480,1 +6480,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6500,1 +6500,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6504,1 +6504,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6508,1 +6508,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6512,1 +6512,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6516,1 +6516,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6520,1 +6520,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6524,1 +6524,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6528,1 +6528,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6548,1 +6548,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6552,1 +6552,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6556,1 +6556,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6560,1 +6560,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6564,1 +6564,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6568,1 +6568,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6572,1 +6572,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6576,1 +6576,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6596,1 +6596,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6600,1 +6600,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6604,1 +6604,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6608,1 +6608,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6628,1 +6628,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6632,1 +6632,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6636,1 +6636,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6640,1 +6640,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6660,1 +6660,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6664,1 +6664,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6668,1 +6668,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6672,1 +6672,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6676,1 +6676,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6680,1 +6680,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6684,1 +6684,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6688,1 +6688,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6708,1 +6708,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6712,1 +6712,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6716,1 +6716,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6720,1 +6720,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6724,1 +6724,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6728,1 +6728,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6732,1 +6732,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6736,1 +6736,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6756,1 +6756,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6760,1 +6760,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6764,1 +6764,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6768,1 +6768,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6788,1 +6788,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6792,1 +6792,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6796,1 +6796,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6800,1 +6800,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6820,1 +6820,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6824,1 +6824,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6828,1 +6828,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6832,1 +6832,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6836,1 +6836,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6840,1 +6840,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6844,1 +6844,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6848,1 +6848,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6868,1 +6868,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6872,1 +6872,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6876,1 +6876,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6880,1 +6880,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6884,1 +6884,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6888,1 +6888,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6892,1 +6892,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6896,1 +6896,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n@@ -6916,1 +6916,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6920,1 +6920,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6924,1 +6924,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6928,1 +6928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6948,1 +6948,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6952,1 +6952,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6956,1 +6956,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6960,1 +6960,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6980,1 +6980,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6984,1 +6984,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6988,1 +6988,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6992,1 +6992,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -6996,1 +6996,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7000,1 +7000,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7004,1 +7004,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7008,1 +7008,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7028,1 +7028,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7032,1 +7032,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7036,1 +7036,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7040,1 +7040,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7060,1 +7060,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7064,1 +7064,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7068,1 +7068,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7072,1 +7072,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7076,1 +7076,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7080,1 +7080,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7084,1 +7084,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7088,1 +7088,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7136,1 +7136,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7140,1 +7140,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7144,1 +7144,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7148,1 +7148,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7152,1 +7152,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7156,1 +7156,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7160,1 +7160,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7164,1 +7164,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7212,1 +7212,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7216,1 +7216,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7220,1 +7220,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7224,1 +7224,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7228,1 +7228,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7232,1 +7232,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7236,1 +7236,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7240,1 +7240,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7288,1 +7288,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7292,1 +7292,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7296,1 +7296,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7300,1 +7300,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7321,1 +7321,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7326,1 +7326,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7331,1 +7331,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7336,1 +7336,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7356,1 +7356,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7360,1 +7360,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7364,1 +7364,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7368,1 +7368,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7372,1 +7372,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7376,1 +7376,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7380,1 +7380,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7384,1 +7384,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7405,1 +7405,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7410,1 +7410,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7415,1 +7415,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7420,1 +7420,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7440,1 +7440,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7444,1 +7444,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7448,1 +7448,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7452,1 +7452,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7473,1 +7473,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7478,1 +7478,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7483,1 +7483,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7488,1 +7488,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7508,1 +7508,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7512,1 +7512,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7516,1 +7516,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7520,1 +7520,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7524,1 +7524,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7528,1 +7528,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7532,1 +7532,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7536,1 +7536,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7557,1 +7557,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7562,1 +7562,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7567,1 +7567,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7572,1 +7572,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7592,1 +7592,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7596,1 +7596,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7600,1 +7600,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7604,1 +7604,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7624,1 +7624,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7628,1 +7628,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7633,1 +7633,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7638,1 +7638,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7643,1 +7643,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7663,1 +7663,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7667,1 +7667,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7671,1 +7671,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7675,1 +7675,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7679,1 +7679,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7683,1 +7683,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7687,1 +7687,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7691,1 +7691,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7711,1 +7711,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7716,1 +7716,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7721,1 +7721,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7726,1 +7726,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7746,1 +7746,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7750,1 +7750,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7754,1 +7754,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7758,1 +7758,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7778,1 +7778,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7783,1 +7783,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7788,1 +7788,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7793,1 +7793,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7813,1 +7813,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7817,1 +7817,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7821,1 +7821,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7825,1 +7825,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7829,1 +7829,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7833,1 +7833,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7837,1 +7837,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7841,1 +7841,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7861,1 +7861,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7866,1 +7866,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7871,1 +7871,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7876,1 +7876,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7896,1 +7896,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7900,1 +7900,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7904,1 +7904,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7908,1 +7908,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7928,1 +7928,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7932,1 +7932,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7936,1 +7936,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7940,1 +7940,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7945,1 +7945,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7949,1 +7949,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7953,1 +7953,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7973,1 +7973,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7977,1 +7977,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7981,1 +7981,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7985,1 +7985,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7989,1 +7989,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -7993,1 +7993,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -7997,1 +7997,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8001,1 +8001,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8021,1 +8021,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8025,1 +8025,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8030,1 +8030,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8034,1 +8034,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8054,1 +8054,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8058,1 +8058,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8062,1 +8062,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8066,1 +8066,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8086,1 +8086,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8090,1 +8090,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8094,1 +8094,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8098,1 +8098,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8102,1 +8102,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8106,1 +8106,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8110,1 +8110,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8114,1 +8114,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8134,1 +8134,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8138,1 +8138,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8142,1 +8142,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8146,1 +8146,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8150,1 +8150,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8154,1 +8154,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8158,1 +8158,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8162,1 +8162,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8182,1 +8182,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8186,1 +8186,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8190,1 +8190,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8194,1 +8194,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8214,1 +8214,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8218,1 +8218,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8222,1 +8222,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8226,1 +8226,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8246,1 +8246,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8250,1 +8250,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8254,1 +8254,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8258,1 +8258,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8262,1 +8262,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8266,1 +8266,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8270,1 +8270,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8274,1 +8274,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8294,1 +8294,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8298,1 +8298,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8302,1 +8302,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8306,1 +8306,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8310,1 +8310,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8314,1 +8314,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8318,1 +8318,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8322,1 +8322,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n@@ -8342,1 +8342,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8346,1 +8346,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8350,1 +8350,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8354,1 +8354,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8374,1 +8374,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8378,1 +8378,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8382,1 +8382,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8386,1 +8386,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8406,1 +8406,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8410,1 +8410,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8414,1 +8414,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8418,1 +8418,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8422,1 +8422,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8426,1 +8426,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8430,1 +8430,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8434,1 +8434,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8454,1 +8454,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8458,1 +8458,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8462,1 +8462,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8466,1 +8466,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8486,1 +8486,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8490,1 +8490,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8494,1 +8494,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8498,1 +8498,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8502,1 +8502,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8506,1 +8506,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8510,1 +8510,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8514,1 +8514,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8562,1 +8562,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8566,1 +8566,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8570,1 +8570,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8574,1 +8574,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8595,1 +8595,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8600,1 +8600,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8605,1 +8605,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8610,1 +8610,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8630,1 +8630,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8634,1 +8634,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8638,1 +8638,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8642,1 +8642,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8646,1 +8646,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8650,1 +8650,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8654,1 +8654,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8658,1 +8658,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8679,1 +8679,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8684,1 +8684,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8689,1 +8689,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8694,1 +8694,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8714,1 +8714,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8718,1 +8718,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8722,1 +8722,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8726,1 +8726,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8746,1 +8746,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8750,1 +8750,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8755,1 +8755,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8760,1 +8760,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8765,1 +8765,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8785,1 +8785,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8789,1 +8789,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8793,1 +8793,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8797,1 +8797,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8801,1 +8801,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8805,1 +8805,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8809,1 +8809,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8813,1 +8813,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -8833,1 +8833,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8838,1 +8838,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8843,1 +8843,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8848,1 +8848,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8868,1 +8868,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8872,1 +8872,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8876,1 +8876,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8880,1 +8880,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8900,1 +8900,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8904,1 +8904,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8908,1 +8908,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8912,1 +8912,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8917,1 +8917,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8921,1 +8921,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8925,1 +8925,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8945,1 +8945,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8949,1 +8949,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8953,1 +8953,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8957,1 +8957,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8977,1 +8977,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8981,1 +8981,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8986,1 +8986,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -8990,1 +8990,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9010,1 +9010,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9014,1 +9014,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9018,1 +9018,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9022,1 +9022,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9042,1 +9042,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9046,1 +9046,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9050,1 +9050,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9054,1 +9054,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9058,1 +9058,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9062,1 +9062,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9066,1 +9066,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9070,1 +9070,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9090,1 +9090,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9094,1 +9094,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9098,1 +9098,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9102,1 +9102,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9122,1 +9122,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9126,1 +9126,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9130,1 +9130,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9134,1 +9134,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9154,1 +9154,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9158,1 +9158,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9162,1 +9162,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9166,1 +9166,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9186,1 +9186,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9190,1 +9190,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9194,1 +9194,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9198,1 +9198,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9202,1 +9202,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9222,1 +9222,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9226,1 +9226,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9230,1 +9230,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9234,1 +9234,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9238,1 +9238,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9242,1 +9242,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9246,1 +9246,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9250,1 +9250,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9270,1 +9270,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9274,1 +9274,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9278,1 +9278,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9282,1 +9282,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9302,1 +9302,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9306,1 +9306,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9310,1 +9310,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9314,1 +9314,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9334,1 +9334,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9338,1 +9338,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9342,1 +9342,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9346,1 +9346,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9350,1 +9350,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9354,1 +9354,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9358,1 +9358,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9362,1 +9362,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9382,1 +9382,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9386,1 +9386,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9390,1 +9390,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9394,1 +9394,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9398,1 +9398,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9402,1 +9402,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9406,1 +9406,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9410,1 +9410,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9430,1 +9430,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9434,1 +9434,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9438,1 +9438,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9442,1 +9442,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9462,1 +9462,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9466,1 +9466,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9470,1 +9470,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9474,1 +9474,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9494,1 +9494,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9498,1 +9498,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9502,1 +9502,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9506,1 +9506,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9510,1 +9510,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9514,1 +9514,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9518,1 +9518,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9522,1 +9522,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9542,1 +9542,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9546,1 +9546,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9550,1 +9550,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9554,1 +9554,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9558,1 +9558,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9562,1 +9562,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9566,1 +9566,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9570,1 +9570,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9590,1 +9590,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9594,1 +9594,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9598,1 +9598,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9602,1 +9602,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9622,1 +9622,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9626,1 +9626,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9630,1 +9630,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9634,1 +9634,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9654,1 +9654,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9658,1 +9658,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9662,1 +9662,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9666,1 +9666,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9670,1 +9670,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9674,1 +9674,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9678,1 +9678,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9682,1 +9682,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9702,1 +9702,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9706,1 +9706,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9710,1 +9710,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9714,1 +9714,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9718,1 +9718,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9722,1 +9722,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9726,1 +9726,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9730,1 +9730,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n@@ -9750,1 +9750,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9754,1 +9754,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9758,1 +9758,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9762,1 +9762,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9782,1 +9782,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9786,1 +9786,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9790,1 +9790,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9794,1 +9794,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9814,1 +9814,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9818,1 +9818,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9822,1 +9822,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9826,1 +9826,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9830,1 +9830,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9834,1 +9834,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9838,1 +9838,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9842,1 +9842,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9862,1 +9862,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9866,1 +9866,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9870,1 +9870,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9874,1 +9874,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9894,1 +9894,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9898,1 +9898,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -9902,1 +9902,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9906,1 +9906,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -9910,1 +9910,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9914,1 +9914,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -9918,1 +9918,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9922,1 +9922,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -9970,1 +9970,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9974,1 +9974,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9978,1 +9978,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -9982,1 +9982,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10002,1 +10002,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10006,1 +10006,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10011,1 +10011,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10016,1 +10016,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10021,1 +10021,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10041,1 +10041,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10045,1 +10045,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10049,1 +10049,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10053,1 +10053,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10057,1 +10057,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10061,1 +10061,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10065,1 +10065,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10069,1 +10069,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10089,1 +10089,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10094,1 +10094,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10099,1 +10099,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10104,1 +10104,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10124,1 +10124,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10128,1 +10128,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10132,1 +10132,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10136,1 +10136,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10156,1 +10156,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10160,1 +10160,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10164,1 +10164,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10168,1 +10168,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10173,1 +10173,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10177,1 +10177,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10181,1 +10181,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10201,1 +10201,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10205,1 +10205,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10209,1 +10209,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10213,1 +10213,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10217,1 +10217,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10221,1 +10221,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10225,1 +10225,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10229,1 +10229,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10249,1 +10249,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10253,1 +10253,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10258,1 +10258,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10262,1 +10262,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10282,1 +10282,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10286,1 +10286,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10290,1 +10290,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10294,1 +10294,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10314,1 +10314,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10318,1 +10318,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10322,1 +10322,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10326,1 +10326,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10330,1 +10330,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10334,1 +10334,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10338,1 +10338,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10342,1 +10342,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10362,1 +10362,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10366,1 +10366,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10370,1 +10370,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10374,1 +10374,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10394,1 +10394,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10398,1 +10398,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10402,1 +10402,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10406,1 +10406,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10410,1 +10410,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10430,1 +10430,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10434,1 +10434,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10438,1 +10438,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10442,1 +10442,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10462,1 +10462,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10466,1 +10466,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10470,1 +10470,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10474,1 +10474,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10478,1 +10478,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10482,1 +10482,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10486,1 +10486,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10490,1 +10490,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10510,1 +10510,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10514,1 +10514,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10518,1 +10518,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10522,1 +10522,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10542,1 +10542,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10546,1 +10546,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10550,1 +10550,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10554,1 +10554,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10558,1 +10558,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10578,1 +10578,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10582,1 +10582,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10586,1 +10586,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10590,1 +10590,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10610,1 +10610,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10614,1 +10614,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10618,1 +10618,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10622,1 +10622,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10626,1 +10626,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10630,1 +10630,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10634,1 +10634,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10654,1 +10654,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10658,1 +10658,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10662,1 +10662,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10666,1 +10666,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10670,1 +10670,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10674,1 +10674,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10678,1 +10678,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10682,1 +10682,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10702,1 +10702,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10706,1 +10706,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10710,1 +10710,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10714,1 +10714,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10734,1 +10734,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10738,1 +10738,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10742,1 +10742,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10746,1 +10746,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10766,1 +10766,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10770,1 +10770,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10774,1 +10774,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10778,1 +10778,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10782,1 +10782,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10786,1 +10786,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10790,1 +10790,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10794,1 +10794,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10814,1 +10814,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10818,1 +10818,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10822,1 +10822,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10826,1 +10826,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10830,1 +10830,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10834,1 +10834,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10838,1 +10838,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10842,1 +10842,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10862,1 +10862,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10866,1 +10866,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10870,1 +10870,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10874,1 +10874,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10894,1 +10894,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10898,1 +10898,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10902,1 +10902,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10906,1 +10906,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10926,1 +10926,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10930,1 +10930,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10934,1 +10934,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10938,1 +10938,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10942,1 +10942,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10946,1 +10946,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10950,1 +10950,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10954,1 +10954,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10974,1 +10974,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10978,1 +10978,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10982,1 +10982,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10986,1 +10986,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10990,1 +10990,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -10994,1 +10994,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -10998,1 +10998,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11002,1 +11002,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -11022,1 +11022,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11026,1 +11026,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11030,1 +11030,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11034,1 +11034,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11054,1 +11054,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11058,1 +11058,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11062,1 +11062,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11066,1 +11066,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11086,1 +11086,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11090,1 +11090,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11094,1 +11094,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11098,1 +11098,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11102,1 +11102,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11106,1 +11106,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11110,1 +11110,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11114,1 +11114,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11134,1 +11134,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11138,1 +11138,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -11142,1 +11142,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11146,1 +11146,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -11150,1 +11150,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11154,1 +11154,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -11158,1 +11158,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11162,1 +11162,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n@@ -11182,1 +11182,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11186,1 +11186,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11190,1 +11190,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11194,1 +11194,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11214,1 +11214,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11218,1 +11218,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11222,1 +11222,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11226,1 +11226,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11246,1 +11246,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11250,1 +11250,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11254,1 +11254,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11258,1 +11258,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11262,1 +11262,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11266,1 +11266,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11270,1 +11270,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -11274,1 +11274,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestDependencyOffsets.java","additions":1381,"deletions":1381,"binary":false,"changes":2762,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.VECTOR_CAST_F2X, \"> 0\", IRNode.VECTOR_CAST_I2X, \"> 0\"},\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.VECTOR_CAST_F2I, \"> 0\", IRNode.VECTOR_CAST_I2F, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestIndependentPacksWithCyclicDependency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\",\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n@@ -117,1 +117,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\",\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n@@ -152,1 +152,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\",\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestUnorderedReduction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,2 +62,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\",\n-                  IRNode.OR_REDUCTION_V, \"> 0\",},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,   IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \"> 0\",\n+                  IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE + \"min(max_int, max_long)\", \"> 0\",\n+                  IRNode.OR_REDUCTION_V,                                                 \"> 0\",},\n@@ -78,1 +79,1 @@\n-            sum |= v;        \/\/ long reduction\n+            sum |= v;        \/\/ long reduction (and implicit cast from int to long)\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestUnorderedReductionPartialVectorization.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class MissingSafepointOnTryCatch version 52:0 {\n+\n+    static Method m:\"()V\" {\n+        return;\n+    }\n+\n+    static Method test1:\"()V\" stack 1 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            return;\n+\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t;\n+    }\n+\n+    static Method test2:\"()V\" stack 1 {\n+        try t0;\n+            try t1;\n+                invokestatic m:\"()V\";\n+            endtry t1;\n+            return;\n+\n+            catch t1 java\/lang\/Exception;\n+            stack_map class java\/lang\/Exception;\n+            return;\n+\n+            catch t0 java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t0;\n+    }\n+\n+    public static Method th:\"()V\"\n+      throws java\/lang\/Exception\n+      stack 2 locals 0\n+    {\n+          new\tclass java\/lang\/Exception;\n+          dup;\n+          invokespecial\tMethod java\/lang\/Exception.\"<init>\":\"()V\";\n+          athrow;\n+    }\n+\n+    static Method test3:\"()V\" stack 1 locals 2 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            iconst_1;\n+            istore_0;\n+    \t\ticonst_0;\n+    \t\tistore_1;\n+            return;\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            invokestatic th:\"()V\";\n+            return;\n+        endtry t;\n+    }\n+\n+    static Method test4:\"()V\" stack 2 locals 2 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            iconst_1;\n+            istore_0;\n+            iconst_0;\n+            istore_1;\n+            return;\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            iconst_1;\n+            istore_0;\n+            invokestatic th:\"()V\";\n+            return;\n+        endtry t;\n+    }\n+\n+    static Method testInfinite:\"()V\" stack 1 {\n+        try t;\n+            invokestatic th:\"()V\";\n+            return;\n+\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t;\n+    }\n+\n+} \/\/ end Class MissingSafepointOnTryCatch\n","filename":"test\/hotspot\/jtreg\/compiler\/parsing\/MissingSafepointOnTryCatch.jasm","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8313626\n+ * @summary  assert(false) failed: malformed control flow to missing safepoint on backedge of a try-catch\n+ * @library \/test\/lib\n+ * @compile MissingSafepointOnTryCatch.jasm\n+ * @run main\/othervm -XX:CompileCommand=quiet\n+ *      -XX:CompileCommand=compileonly,MissingSafepointOnTryCatch::test*\n+ *      -XX:CompileCommand=dontinline,MissingSafepointOnTryCatch::m\n+ *      -XX:CompileCommand=inline,MissingSafepointOnTryCatch::th\n+ *      -XX:-TieredCompilation -Xcomp TestMissingSafepointOnTryCatch\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestMissingSafepointOnTryCatch {\n+\n+    public static void infiniteLoop() {\n+        try {\n+            Thread thread = new Thread() {\n+                public void run() {\n+                    MissingSafepointOnTryCatch.testInfinite();\n+                }\n+            };\n+            thread.setDaemon(true);\n+            thread.start();\n+            Thread.sleep(Utils.adjustTimeout(500));\n+        } catch (Exception e) {}\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            \/\/ to make sure java\/lang\/Exception class is resolved\n+            MissingSafepointOnTryCatch.th();\n+        } catch (Exception e) {}\n+        MissingSafepointOnTryCatch.test1();\n+        MissingSafepointOnTryCatch.test2();\n+        MissingSafepointOnTryCatch.test3();\n+        MissingSafepointOnTryCatch.test4();\n+        infiniteLoop();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/parsing\/TestMissingSafepointOnTryCatch.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314233\n+ * @requires vm.compiler2.enabled\n+ * @summary Test that loop peeling does not treat unrelated Opaque4 node as Template Assertion Predicate.\n+ * @run main\/othervm -Xbatch -XX:LoopMaxUnroll=0\n+ *                   -XX:CompileCommand=compileonly,compiler.predicates.TestPeelingFindsUnrelatedOpaque4Node::*\n+ *                   -XX:CompileCommand=inline,*String::* compiler.predicates.TestPeelingFindsUnrelatedOpaque4Node\n+ *\/\n+\n+package compiler.predicates;\n+\n+public class TestPeelingFindsUnrelatedOpaque4Node {\n+    static int iFld;\n+    static boolean flag;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 1000; i++) {\n+            test();\n+            flag = !flag;\n+        }\n+    }\n+\n+    static void test() {\n+        String s = flag ? \"34323653\" : \"343423\";\n+        s.contains(\"343\");\n+        \/\/ Inlined and will call StringLatin1.indexOf intrinsics which emits Opaque4 node which will be wrongly\n+        \/\/ found as Template Assertion Predicate when trying to initialize them which triggers the assert.\n+        s.contains(\"3442\");\n+\n+        for (int i = 0; i < 100; i++) {\n+            if (flag) { \/\/ Triggers peeling\n+                return;\n+            }\n+            iFld = 34;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestPeelingFindsUnrelatedOpaque4Node.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -283,1 +283,3 @@\n-    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"}, counts = {IRNode.AND_V, \" > 0 \", IRNode.XOR_V, \" > 0 \"})\n+    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"},\n+        counts = {IRNode.AND_VI, IRNode.VECTOR_SIZE_4, \" > 0 \",\n+                  IRNode.XOR_VI, IRNode.VECTOR_SIZE_4, \" > 0 \"})\n@@ -288,1 +290,3 @@\n-    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"}, counts = {IRNode.AND_V, \" > 0 \", IRNode.XOR_V, \" > 0 \"})\n+    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"},\n+        counts = {IRNode.AND_VI, IRNode.VECTOR_SIZE_8, \" > 0 \",\n+                  IRNode.XOR_VI, IRNode.VECTOR_SIZE_8, \" > 0 \"})\n@@ -293,1 +297,3 @@\n-    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"}, counts = {IRNode.AND_V, \" > 0 \", IRNode.XOR_V, \" > 0 \"})\n+    @IR(applyIfAnd = {\"UseAVX\", \"3\", \"UseSSE\", \" > 3 \"},\n+        counts = {IRNode.AND_VI, IRNode.VECTOR_SIZE_16, \" > 0 \",\n+                  IRNode.XOR_VI, IRNode.VECTOR_SIZE_16, \" > 0 \"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestMaskedMacroLogicVector.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VL, \" > 0 \"})\n@@ -103,1 +103,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VL, \" > 0 \"})\n@@ -123,1 +123,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_VL})\n@@ -141,1 +141,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VI, \" > 0 \"})\n@@ -160,1 +160,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VI, \" > 0 \"})\n@@ -180,1 +180,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_VI})\n@@ -198,1 +198,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VS, \" > 0 \"})\n@@ -217,1 +217,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_V , \" > 0 \"})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, counts = {IRNode.REVERSE_BYTES_VS, \" > 0 \"})\n@@ -237,1 +237,1 @@\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\"}, failOn = {IRNode.REVERSE_BYTES_VS})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestReverseByteTransforms.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_VL})\n@@ -100,1 +100,1 @@\n-    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_VI})\n@@ -119,1 +119,1 @@\n-    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(applyIf = {\"UseSVE\", \" > 0\"}, failOn = {IRNode.REVERSE_BYTES_VS})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestReverseByteTransformsSVE.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    @IR(counts = {IRNode.COMPRESS_BITSV, \"> 0\"})\n+    @IR(counts = {IRNode.COMPRESS_BITS_VI, \"> 0\"})\n@@ -99,1 +99,1 @@\n-    @IR(counts = {IRNode.EXPAND_BITSV, \"> 0\"})\n+    @IR(counts = {IRNode.EXPAND_BITS_VI, \"> 0\"})\n@@ -118,1 +118,1 @@\n-    @IR(counts = {IRNode.COMPRESS_BITSV, \"> 0\"})\n+    @IR(counts = {IRNode.COMPRESS_BITS_VL, \"> 0\"})\n@@ -137,1 +137,1 @@\n-    @IR(counts = {IRNode.EXPAND_BITSV, \"> 0\"})\n+    @IR(counts = {IRNode.EXPAND_BITS_VL, \"> 0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorCompressExpandBits.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -89,1 +89,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_F2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE_16, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n@@ -106,1 +107,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_F2X, \"> 0\"}, applyIfCPUFeature = {\"avx512dq\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512dq\", \"true\"})\n@@ -123,1 +125,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_F2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE_16, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n@@ -140,1 +143,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_F2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2B, IRNode.VECTOR_SIZE_16, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n@@ -157,1 +161,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_D2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n@@ -174,1 +179,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_D2X, \"> 0\"}, applyIfCPUFeature = {\"avx512dq\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512dq\", \"true\"})\n@@ -191,1 +197,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_D2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n@@ -208,1 +215,2 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_D2X, \"> 0\"}, applyIfCPUFeature = {\"avx512f\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2B, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIfCPUFeature = {\"avx512f\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFPtoIntCastTest.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -63,1 +63,1 @@\n-    private static int LENGTH = 1024;\n+    private static int LENGTH = 128;\n@@ -226,0 +226,20 @@\n+    private static void assertArrayEqualsNeg(float[] r, float[] a, float[] b, float[] c, boolean[] m, FTenOp f) {\n+       for (int i = 0; i < LENGTH; i++) {\n+           if (m[i % F_SPECIES.length()]) {\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n+           } else {\n+               Asserts.assertEquals(-a[i], r[i]);\n+           }\n+       }\n+    }\n+\n+    private static void assertArrayEqualsNeg(double[] r, double[] a, double[] b, double[] c, boolean[] m, DTenOp f) {\n+       for (int i = 0; i < LENGTH; i++) {\n+           if (m[i % D_SPECIES.length()]) {\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n+           } else {\n+               Asserts.assertEquals(-a[i], r[i]);\n+           }\n+       }\n+    }\n+\n@@ -343,0 +363,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFMAD_MASKED, \">= 1\" })\n+    public static void testFloatMultiplyNegAMasked() {\n+        VectorMask<Float> mask = VectorMask.fromArray(F_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            FloatVector cv = FloatVector.fromArray(F_SPECIES, fc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv, mask).intoArray(fr, i);\n+        }\n+        assertArrayEqualsNeg(fr, fa, fb, fc, m, (a, b, c) -> (float) Math.fma(-a, b, c));\n+    }\n+\n@@ -356,0 +389,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFNMSB_MASKED, \">= 1\" })\n+    public static void testFloatNegatedMultiplyNegAMasked() {\n+        VectorMask<Float> mask = VectorMask.fromArray(F_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            FloatVector cv = FloatVector.fromArray(F_SPECIES, fc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv.neg(), mask).intoArray(fr, i);\n+        }\n+        assertArrayEqualsNeg(fr, fa, fb, fc, m, (a, b, c) -> (float) Math.fma(-a, b, -c));\n+    }\n+\n@@ -382,0 +428,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFMAD_MASKED, \">= 1\" })\n+    public static void testDoubleMultiplyNegAMasked() {\n+        VectorMask<Double> mask = VectorMask.fromArray(D_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            DoubleVector cv = DoubleVector.fromArray(D_SPECIES, dc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv, mask).intoArray(dr, i);\n+        }\n+        assertArrayEqualsNeg(dr, da, db, dc, m, (a, b, c) -> (double) Math.fma(-a, b, c));\n+    }\n+\n@@ -395,0 +454,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFNMSB_MASKED, \">= 1\" })\n+    public static void testDoubleNegatedMultiplyNegAMasked() {\n+        VectorMask<Double> mask = VectorMask.fromArray(D_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            DoubleVector cv = DoubleVector.fromArray(D_SPECIES, dc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv.neg(), mask).intoArray(dr, i);\n+        }\n+        assertArrayEqualsNeg(dr, da, db, dc, m, (a, b, c) -> (double) Math.fma(-a, b, -c));\n+    }\n+\n@@ -409,2 +481,4 @@\n-        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\",\n-                                   \"-XX:UseSVE=1\");\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(5000)\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseSVE=1\")\n+                     .start();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java","additions":78,"deletions":4,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VB, counts = {IRNode.LOAD_VECTOR_B, \">=1\"})\n@@ -120,1 +120,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VS, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -133,1 +133,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VI, counts = {IRNode.LOAD_VECTOR_I, \">=1\"})\n@@ -146,1 +146,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VL, counts = {IRNode.LOAD_VECTOR_L, \">=1\"})\n@@ -166,2 +166,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">=1\"})\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \">=1\"})\n+    @IR(failOn = IRNode.AND_VB, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -188,1 +188,1 @@\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.AND_VS, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -207,1 +207,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VI, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -226,1 +226,1 @@\n-    @IR(failOn = IRNode.AND_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.AND_VL, counts = {IRNode.LOAD_VECTOR_L, \">=1\"})\n@@ -245,1 +245,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"})\n+    @IR(counts = {IRNode.AND_VI, \"1\"})\n@@ -260,1 +260,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"})\n+    @IR(counts = {IRNode.AND_VL, \"1\"})\n@@ -275,1 +275,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"})\n+    @IR(counts = {IRNode.AND_VI, \"1\"})\n@@ -290,1 +290,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"})\n+    @IR(counts = {IRNode.AND_VL, \"1\"})\n@@ -305,1 +305,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_VI, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -326,1 +326,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_VL, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -347,1 +347,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_VI, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -371,1 +371,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VB, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -384,1 +384,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VS, counts = {IRNode.LOAD_VECTOR_S, \">=1\"})\n@@ -397,1 +397,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VI, counts = {IRNode.LOAD_VECTOR_I, \">=1\"})\n@@ -412,1 +412,1 @@\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.OR_VB, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -431,1 +431,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VB, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -450,1 +450,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VS, counts = {IRNode.LOAD_VECTOR_S, \">=1\"})\n@@ -470,2 +470,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \">=1\"})\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \">=1\"})\n+    @IR(failOn = IRNode.OR_VB, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -490,1 +490,1 @@\n-    @IR(failOn = IRNode.OR_V, counts = {IRNode.LOAD_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.OR_VL, counts = {IRNode.LOAD_VECTOR_L, \">=1\"})\n@@ -509,1 +509,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"})\n+    @IR(counts = {IRNode.OR_VI, \"1\"})\n@@ -524,1 +524,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"})\n+    @IR(counts = {IRNode.OR_VL, \"1\"})\n@@ -539,1 +539,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"})\n+    @IR(counts = {IRNode.OR_VI, \"1\"})\n@@ -554,1 +554,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"})\n+    @IR(counts = {IRNode.OR_VL, \"1\"})\n@@ -569,1 +569,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_VI, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -590,1 +590,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_VL, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -611,1 +611,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_VI, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -635,1 +635,1 @@\n-    @IR(failOn = IRNode.XOR_V, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = IRNode.XOR_VB, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -650,1 +650,1 @@\n-    @IR(failOn = IRNode.XOR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.XOR_VS, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -669,1 +669,1 @@\n-    @IR(failOn = {IRNode.AND_V, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.AND_VI, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -683,1 +683,1 @@\n-    @IR(failOn = {IRNode.AND_V, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.AND_VS, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -697,1 +697,1 @@\n-    @IR(failOn = {IRNode.AND_V, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.AND_VB, IRNode.AND_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -710,1 +710,1 @@\n-    @IR(failOn = {IRNode.OR_V, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.OR_VS, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -724,1 +724,1 @@\n-    @IR(failOn = {IRNode.OR_V, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.OR_VI, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -738,1 +738,1 @@\n-    @IR(failOn = {IRNode.OR_V, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.OR_VB, IRNode.OR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n@@ -751,1 +751,1 @@\n-    @IR(failOn = {IRNode.XOR_V, IRNode.XOR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n+    @IR(failOn = {IRNode.XOR_VI, IRNode.XOR_V_MASK}, counts = {IRNode.STORE_VECTOR, \">=1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    @IR(failOn = IRNode.REVERSE_BYTES_V)\n+    @IR(failOn = IRNode.REVERSE_BYTES_VB)\n@@ -87,2 +87,2 @@\n-    @IR(failOn = IRNode.REVERSE_BYTES_V)\n-    @IR(failOn = IRNode.VECTOR_BLEND)\n+    @IR(failOn = IRNode.REVERSE_BYTES_VB)\n+    @IR(failOn = IRNode.VECTOR_BLEND_B)\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReverseBytesTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import compiler.lib.ir_framework.IRNode;\n@@ -47,1 +48,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -58,1 +59,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -69,1 +70,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2S, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -80,1 +81,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2S, IRNode.VECTOR_SIZE_32, \"1\"})\n@@ -91,1 +92,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -102,1 +103,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -113,1 +114,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -124,1 +125,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2I, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -135,1 +136,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -146,1 +147,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -157,1 +158,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -168,1 +169,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -179,1 +180,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -190,1 +191,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2F, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -201,1 +202,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2F, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -212,1 +213,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2F, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -223,1 +224,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -234,1 +235,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -245,1 +246,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2D, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -256,1 +257,1 @@\n-    @IR(counts = {B2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_B2D, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -267,1 +268,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2B, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -278,1 +279,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2B, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -289,1 +290,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2B, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -300,1 +301,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2B, IRNode.VECTOR_SIZE_32, \"1\"})\n@@ -311,1 +312,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -322,1 +323,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -333,1 +334,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -344,1 +345,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2I, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -355,1 +356,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -366,1 +367,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -377,1 +378,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -388,1 +389,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -399,1 +400,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -410,1 +411,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2F, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -421,1 +422,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2F, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -432,1 +433,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2F, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -443,1 +444,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -454,1 +455,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -465,1 +466,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -476,1 +477,1 @@\n-    @IR(counts = {S2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -487,1 +488,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -498,1 +499,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2B, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -509,1 +510,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2B, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -520,1 +521,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2B, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -531,1 +532,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -542,1 +543,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -553,1 +554,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -564,1 +565,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2S, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -575,1 +576,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -586,1 +587,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -597,1 +598,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -608,1 +609,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -619,1 +620,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -630,1 +631,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2F, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -641,1 +642,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2F, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -652,1 +653,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2F, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -663,1 +664,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -674,1 +675,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -685,1 +686,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -696,1 +697,1 @@\n-    @IR(counts = {I2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -707,1 +708,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -718,1 +719,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -729,1 +730,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2B, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -740,1 +741,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2B, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -751,1 +752,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -762,1 +763,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -773,1 +774,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -784,1 +785,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -795,1 +796,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -806,1 +807,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -817,1 +818,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -828,1 +829,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -839,1 +840,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -850,1 +851,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -861,1 +862,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2F, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -872,1 +873,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2F, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -883,1 +884,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -894,1 +895,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -905,1 +906,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2D, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -916,1 +917,1 @@\n-    @IR(counts = {L2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_L2D, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -927,1 +928,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -938,1 +939,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2B, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -949,1 +950,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2B, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -960,1 +961,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2B, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -971,1 +972,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -982,1 +983,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -993,1 +994,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1004,1 +1005,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -1015,1 +1016,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1026,1 +1027,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1037,1 +1038,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1048,1 +1049,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -1059,1 +1060,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1070,1 +1071,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1081,1 +1082,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1092,1 +1093,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1103,1 +1104,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1114,1 +1115,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2D, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1125,1 +1126,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2D, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1136,1 +1137,1 @@\n-    @IR(counts = {F2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2D, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1147,1 +1148,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1158,1 +1159,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2B, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1169,1 +1170,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2B, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1180,1 +1181,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2B, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1191,1 +1192,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1202,1 +1203,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1213,1 +1214,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1224,1 +1225,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1235,1 +1236,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1246,1 +1247,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1257,1 +1258,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1268,1 +1269,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1279,1 +1280,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1290,1 +1291,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1301,1 +1302,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1312,1 +1313,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1323,1 +1324,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1334,1 +1335,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2F, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1345,1 +1346,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2F, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1356,1 +1357,1 @@\n-    @IR(counts = {D2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_D2F, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1367,1 +1368,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2S, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1378,1 +1379,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2S, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1389,1 +1390,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2S, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -1400,1 +1401,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2S, IRNode.VECTOR_SIZE_32, \"1\"})\n@@ -1411,1 +1412,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1422,1 +1423,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1433,1 +1434,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1444,1 +1445,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2I, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -1455,1 +1456,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1466,1 +1467,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1477,1 +1478,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1488,1 +1489,1 @@\n-    @IR(counts = {UB2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_B2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1499,1 +1500,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2I, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1510,1 +1511,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2I, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1521,1 +1522,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2I, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1532,1 +1533,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2I, IRNode.VECTOR_SIZE_16, \"1\"})\n@@ -1543,1 +1544,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1554,1 +1555,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1565,1 +1566,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1576,1 +1577,1 @@\n-    @IR(counts = {US2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_S2L, IRNode.VECTOR_SIZE_8, \"1\"})\n@@ -1587,1 +1588,1 @@\n-    @IR(counts = {UI2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_I2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1598,1 +1599,1 @@\n-    @IR(counts = {UI2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_I2L, IRNode.VECTOR_SIZE_2, \"1\"})\n@@ -1609,1 +1610,1 @@\n-    @IR(counts = {UI2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_I2L, IRNode.VECTOR_SIZE_4, \"1\"})\n@@ -1620,1 +1621,1 @@\n-    @IR(counts = {UI2X_NODE, \"1\"})\n+    @IR(counts = {IRNode.VECTOR_UCAST_I2L, IRNode.VECTOR_SIZE_8, \"1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorCast.java","additions":145,"deletions":144,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -74,9 +74,0 @@\n-    public static final String B2X_NODE  = IRNode.VECTOR_CAST_B2X;\n-    public static final String S2X_NODE  = IRNode.VECTOR_CAST_S2X;\n-    public static final String I2X_NODE  = IRNode.VECTOR_CAST_I2X;\n-    public static final String L2X_NODE  = IRNode.VECTOR_CAST_L2X;\n-    public static final String F2X_NODE  = IRNode.VECTOR_CAST_F2X;\n-    public static final String D2X_NODE  = IRNode.VECTOR_CAST_D2X;\n-    public static final String UB2X_NODE = IRNode.VECTOR_UCAST_B2X;\n-    public static final String US2X_NODE = IRNode.VECTOR_UCAST_S2X;\n-    public static final String UI2X_NODE = IRNode.VECTOR_UCAST_I2X;\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/VectorReshapeHelper.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR,  \" >0 \"})\n-    @IR(counts = {IRNode.MIN_V, \" >0 \"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,  \" >0 \"})\n+    @IR(counts = {IRNode.MIN_VI, \" >0 \"})\n@@ -76,2 +76,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR,  \" >0 \"})\n-    @IR(counts = {IRNode.MIN_V, \" >0 \"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,  \" >0 \"})\n+    @IR(counts = {IRNode.MIN_VI, \" >0 \"})\n@@ -87,2 +87,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR,  \" >0 \"})\n-    @IR(counts = {IRNode.MAX_V, \" >0 \"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,  \" >0 \"})\n+    @IR(counts = {IRNode.MAX_VI, \" >0 \"})\n@@ -98,2 +98,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR,  \" >0 \"})\n-    @IR(counts = {IRNode.MAX_V, \" >0 \"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I,  \" >0 \"})\n+    @IR(counts = {IRNode.MAX_VI, \" >0 \"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestAutoVecIntMinMax.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_F2HF, \"> 0\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_F2HF, IRNode.VECTOR_SIZE + \"min(max_float, max_short)\", \"> 0\"})\n@@ -97,1 +97,1 @@\n-    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, IRNode.VECTOR_SIZE + \"min(max_float, max_short)\", \"> 0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-    static final int RANGE = 512;\n-    static final int ITER  = 100;\n+    static int RANGE = 1024*2;\n+    static int ITER  = 100;\n@@ -223,1 +223,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -234,1 +234,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.REPLICATE_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.REPLICATE_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -276,1 +276,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -286,1 +286,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -350,1 +350,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.ADD_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -360,1 +360,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.ADD_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -423,1 +423,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.ADD_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -433,1 +433,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.ADD_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -496,1 +496,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.ADD_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -506,1 +506,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.ADD_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -568,1 +568,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.ADD_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -578,1 +578,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.ADD_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -640,1 +640,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.ADD_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n@@ -650,1 +650,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.ADD_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestOptionVectorizeIR.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  @IR(counts = {IRNode.REVERSE_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_VL, \"> 0\"})\n@@ -92,1 +92,1 @@\n-  @IR(failOn = {IRNode.REVERSE_V, IRNode.REVERSE_L})\n+  @IR(failOn = {IRNode.REVERSE_VL, IRNode.REVERSE_L})\n@@ -108,1 +108,1 @@\n-  @IR(failOn = {IRNode.REVERSE_V, IRNode.REVERSE_L})\n+  @IR(failOn = {IRNode.REVERSE_VL, IRNode.REVERSE_L})\n@@ -124,1 +124,1 @@\n-  @IR(counts = {IRNode.REVERSE_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_VI, \"> 0\"})\n@@ -140,1 +140,1 @@\n-  @IR(failOn = {IRNode.REVERSE_V, IRNode.REVERSE_I})\n+  @IR(failOn = {IRNode.REVERSE_VI, IRNode.REVERSE_I})\n@@ -156,1 +156,1 @@\n-  @IR(failOn = {IRNode.REVERSE_V, IRNode.REVERSE_I})\n+  @IR(failOn = {IRNode.REVERSE_VI, IRNode.REVERSE_I})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBitsVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  @IR(counts = {IRNode.REVERSE_BYTES_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_BYTES_VL, \"> 0\"})\n@@ -93,1 +93,1 @@\n-  @IR(counts = {IRNode.REVERSE_BYTES_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_BYTES_VI, \"> 0\"})\n@@ -109,1 +109,1 @@\n-  @IR(counts = {IRNode.REVERSE_BYTES_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_BYTES_VS, \"> 0\"})\n@@ -125,1 +125,1 @@\n-  @IR(counts = {IRNode.REVERSE_BYTES_V, \"> 0\"})\n+  @IR(counts = {IRNode.REVERSE_BYTES_VS, \"> 0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    @IR(failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(failOn = {IRNode.REVERSE_BYTES_VS})\n@@ -78,1 +78,1 @@\n-    @IR(failOn = {IRNode.REVERSE_BYTES_V})\n+    @IR(failOn = {IRNode.REVERSE_BYTES_VS})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSubwordReverseBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VI, \">0\"})\n@@ -112,1 +112,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VI, \">0\"})\n@@ -123,1 +123,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VS, \">0\"})\n@@ -134,1 +134,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VS, \">0\"})\n@@ -145,1 +145,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VL, \">0\"})\n@@ -156,1 +156,1 @@\n-        counts = {IRNode.URSHIFT_V, \">0\"})\n+        counts = {IRNode.URSHIFT_VL, \">0\"})\n@@ -189,1 +189,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayShiftOpTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-        counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_I2F, IRNode.VECTOR_SIZE + \"min(max_int, max_float)\", \">0\"})\n@@ -149,1 +149,1 @@\n-        counts = {IRNode.VECTOR_CAST_I2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_I2D, IRNode.VECTOR_SIZE + \"min(max_int, max_double)\", \">0\"})\n@@ -160,1 +160,1 @@\n-        counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_L2F, IRNode.VECTOR_SIZE + \"min(max_long, max_float)\", \">0\"})\n@@ -171,1 +171,1 @@\n-        counts = {IRNode.VECTOR_CAST_L2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_L2D, IRNode.VECTOR_SIZE + \"min(max_long, max_double)\", \">0\"})\n@@ -183,1 +183,1 @@\n-        counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_S2F, IRNode.VECTOR_SIZE + \"min(max_short, max_float)\", \">0\"})\n@@ -195,1 +195,1 @@\n-        counts = {IRNode.VECTOR_CAST_S2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_S2D, IRNode.VECTOR_SIZE + \"min(max_short, max_double)\", \">0\"})\n@@ -225,1 +225,1 @@\n-        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_F2I, IRNode.VECTOR_SIZE + \"min(max_float, max_int)\", \">0\"})\n@@ -239,1 +239,1 @@\n-        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_F2L, IRNode.VECTOR_SIZE + \"min(max_float, max_long)\", \">0\"})\n@@ -250,1 +250,1 @@\n-        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_D2I, IRNode.VECTOR_SIZE + \"min(max_double, max_int)\", \">0\"})\n@@ -261,1 +261,1 @@\n-        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_D2L, IRNode.VECTOR_SIZE + \"min(max_double, max_long)\", \">0\"})\n@@ -273,1 +273,1 @@\n-        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE + \"min(max_float, max_short)\", \">0\"})\n@@ -284,1 +284,1 @@\n-        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_F2S, IRNode.VECTOR_SIZE + \"min(max_float, max_char)\", \">0\"})\n@@ -296,1 +296,1 @@\n-        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE + \"min(max_double, max_short)\", \">0\"})\n@@ -308,1 +308,1 @@\n-        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_D2S, IRNode.VECTOR_SIZE + \"min(max_double, max_char)\", \">0\"})\n@@ -323,1 +323,1 @@\n-        counts = {IRNode.VECTOR_CAST_F2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_F2D, IRNode.VECTOR_SIZE + \"min(max_float, max_double)\", \">0\"})\n@@ -334,1 +334,1 @@\n-        counts = {IRNode.VECTOR_CAST_D2X, \">0\"})\n+        counts = {IRNode.VECTOR_CAST_D2F, IRNode.VECTOR_SIZE + \"min(max_double, max_float)\", \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayTypeConvertTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private static final int SIZE = 543;\n+    private static final int SIZE = 6543;\n@@ -75,1 +75,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VB, \">0\"})\n@@ -77,1 +77,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VB, \">0\"})\n@@ -90,1 +90,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VB, \">0\"})\n@@ -101,1 +101,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VB, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicBooleanOpTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+ *                   -XX:CompileCommand=CompileOnly,compiler.vectorization.runner.BasicByteOpTest::*\n+ *                   -XX:LoopUnrollLimit=1000\n@@ -48,1 +50,1 @@\n-    private static final int SIZE = 543;\n+    private static int SIZE = 6543;\n@@ -68,1 +70,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VB, \">0\"})\n@@ -79,1 +81,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VB, \">0\"})\n@@ -90,1 +92,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VB, \">0\"})\n@@ -101,1 +103,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VB, \">0\"})\n@@ -112,1 +114,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VB, \">0\"})\n@@ -123,1 +125,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.MUL_VB, \">0\", IRNode.ADD_VB, \">0\"})\n@@ -134,1 +136,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.MUL_VB, \">0\", IRNode.SUB_VB, \">0\"})\n@@ -146,1 +148,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VB, \">0\"})\n@@ -157,1 +159,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VB, \">0\"})\n@@ -168,1 +170,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VB, \">0\"})\n@@ -179,1 +181,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VB, \">0\"})\n@@ -191,1 +193,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VB, \">0\"})\n@@ -202,1 +204,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VB, \">0\"})\n@@ -213,1 +215,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VB, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicByteOpTest.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VS, \">0\"})\n@@ -82,1 +82,1 @@\n-    @IR(failOn = {IRNode.ABS_V})\n+    @IR(failOn = {IRNode.ABS_VI, IRNode.ABS_VB, IRNode.ABS_VL}) \/\/ AVS_VC does not exist\n@@ -93,1 +93,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VS, \">0\"}) \/\/ char add same as for short\n@@ -104,1 +104,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VS, \">0\"})\n@@ -115,1 +115,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\"})\n@@ -126,1 +126,2 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\",\n+                  IRNode.ADD_VS, \">0\"}) \/\/ char add same as for short\n@@ -137,1 +138,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\", IRNode.SUB_VS, \">0\"})\n@@ -149,1 +150,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VS, \">0\"})\n@@ -160,1 +161,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VS, \">0\"})\n@@ -171,1 +172,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VS, \">0\"})\n@@ -182,1 +183,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VS, \">0\"})\n@@ -194,1 +195,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VC, \">0\"})\n@@ -205,1 +206,1 @@\n-        counts = {IRNode.URSHIFT_V, \">0\"})\n+        counts = {IRNode.URSHIFT_VC, \">0\"})\n@@ -216,1 +217,1 @@\n-        counts = {IRNode.URSHIFT_V, \">0\"})\n+        counts = {IRNode.URSHIFT_VC, \">0\"})\n@@ -228,1 +229,1 @@\n-        counts = {IRNode.REVERSE_BYTES_V, \">0\"})\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        counts = {IRNode.NEG_V, \">0\"})\n+        counts = {IRNode.NEG_VD, \">0\"})\n@@ -79,1 +79,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VD, \">0\"})\n@@ -90,1 +90,1 @@\n-        counts = {IRNode.SQRT_V, \">0\"})\n+        counts = {IRNode.SQRT_VD, \">0\"})\n@@ -134,1 +134,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VD, \">0\"})\n@@ -145,1 +145,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VD, \">0\"})\n@@ -156,1 +156,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VD, \">0\"})\n@@ -167,1 +167,1 @@\n-        counts = {IRNode.DIV_V, \">0\"})\n+        counts = {IRNode.DIV_VD, \">0\"})\n@@ -178,1 +178,1 @@\n-        counts = {IRNode.MAX_V, \">0\"})\n+        counts = {IRNode.MAX_VD, \">0\"})\n@@ -189,1 +189,1 @@\n-        counts = {IRNode.MIN_V, \">0\"})\n+        counts = {IRNode.MIN_VD, \">0\"})\n@@ -200,1 +200,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\", IRNode.VFMLA, \">0\"})\n@@ -202,1 +202,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -213,1 +213,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\", IRNode.VFMLS, \">0\"})\n@@ -215,1 +215,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -226,1 +226,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\", IRNode.VFMLS, \">0\"})\n@@ -228,1 +228,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -239,1 +239,3 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -241,1 +243,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -252,1 +254,3 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -254,1 +258,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -265,1 +269,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n@@ -267,1 +271,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VD, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        counts = {IRNode.NEG_V, \">0\"})\n+        counts = {IRNode.NEG_VF, \">0\"})\n@@ -79,1 +79,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VF, \">0\"})\n@@ -90,1 +90,1 @@\n-        counts = {IRNode.SQRT_V, \">0\"})\n+        counts = {IRNode.SQRT_VF, \">0\"})\n@@ -101,1 +101,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VF, \">0\"})\n@@ -112,1 +112,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VF, \">0\"})\n@@ -123,1 +123,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VF, \">0\"})\n@@ -134,1 +134,1 @@\n-        counts = {IRNode.DIV_V, \">0\"})\n+        counts = {IRNode.DIV_VF, \">0\"})\n@@ -145,1 +145,1 @@\n-        counts = {IRNode.MAX_V, \">0\"})\n+        counts = {IRNode.MAX_VF, \">0\"})\n@@ -156,1 +156,1 @@\n-        counts = {IRNode.MIN_V, \">0\"})\n+        counts = {IRNode.MIN_VF, \">0\"})\n@@ -167,1 +167,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\", IRNode.VFMLA, \">0\"})\n@@ -169,1 +169,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -180,1 +180,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\", IRNode.VFMLS, \">0\"})\n@@ -182,1 +182,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -193,1 +193,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\", IRNode.VFMLS, \">0\"})\n@@ -195,1 +195,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -206,1 +206,3 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -208,1 +210,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -219,1 +221,3 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -221,1 +225,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -232,1 +236,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n@@ -234,1 +238,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_VF, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicFloatOpTest.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VI, \">0\"})\n@@ -79,1 +79,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VI, \">0\"})\n@@ -90,1 +90,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VI, \">0\"})\n@@ -101,1 +101,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VI, \">0\"})\n@@ -112,1 +112,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\"})\n@@ -123,1 +123,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\", IRNode.ADD_VI, \">0\"})\n@@ -134,1 +134,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\", IRNode.SUB_VI, \">0\"})\n@@ -157,1 +157,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VI, \">0\"})\n@@ -168,1 +168,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VI, \">0\"})\n@@ -179,1 +179,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VI, \">0\"})\n@@ -190,1 +190,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VI, \">0\"})\n@@ -202,1 +202,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VI, \">0\"})\n@@ -213,1 +213,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VI, \">0\"})\n@@ -224,1 +224,1 @@\n-        counts = {IRNode.URSHIFT_V, \">0\"})\n+        counts = {IRNode.URSHIFT_VI, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicIntOpTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VL, \">0\"})\n@@ -80,1 +80,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VL, \">0\"})\n@@ -91,1 +91,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VL, \">0\"})\n@@ -102,1 +102,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VL, \">0\"})\n@@ -113,1 +113,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VL, \">0\"})\n@@ -124,1 +124,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VL, \">0\"})\n@@ -126,1 +126,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VL, \">0\"})\n@@ -137,1 +137,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.MUL_VL, \">0\", IRNode.SUB_VL, \">0\"})\n@@ -149,1 +149,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VL, \">0\"})\n@@ -160,1 +160,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VL, \">0\"})\n@@ -171,1 +171,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VL, \">0\"})\n@@ -182,1 +182,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VL, \">0\"})\n@@ -194,1 +194,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VL, \">0\"})\n@@ -205,1 +205,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VL, \">0\"})\n@@ -216,1 +216,1 @@\n-        counts = {IRNode.URSHIFT_V, \">0\"})\n+        counts = {IRNode.URSHIFT_VL, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicLongOpTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VS, \">0\"})\n@@ -81,1 +81,1 @@\n-        counts = {IRNode.ABS_V, \">0\"})\n+        counts = {IRNode.ABS_VS, \">0\"})\n@@ -92,1 +92,1 @@\n-        counts = {IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.ADD_VS, \">0\"})\n@@ -103,1 +103,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VS, \">0\"})\n@@ -114,1 +114,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\"})\n@@ -125,1 +125,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.ADD_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\", IRNode.ADD_VS, \">0\"})\n@@ -136,1 +136,1 @@\n-        counts = {IRNode.MUL_V, \">0\", IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.MUL_VS, \">0\", IRNode.SUB_VS, \">0\"})\n@@ -148,1 +148,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VS, \">0\"})\n@@ -159,1 +159,1 @@\n-        counts = {IRNode.AND_V, \">0\"})\n+        counts = {IRNode.AND_VS, \">0\"})\n@@ -170,1 +170,1 @@\n-        counts = {IRNode.OR_V, \">0\"})\n+        counts = {IRNode.OR_VS, \">0\"})\n@@ -181,1 +181,1 @@\n-        counts = {IRNode.XOR_V, \">0\"})\n+        counts = {IRNode.XOR_VS, \">0\"})\n@@ -193,1 +193,1 @@\n-        counts = {IRNode.LSHIFT_V, \">0\"})\n+        counts = {IRNode.LSHIFT_VS, \">0\"})\n@@ -204,1 +204,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VS, \">0\"})\n@@ -240,1 +240,1 @@\n-        counts = {IRNode.RSHIFT_V, \">0\"})\n+        counts = {IRNode.RSHIFT_VS, \">0\"})\n@@ -252,1 +252,1 @@\n-        counts = {IRNode.REVERSE_BYTES_V, \">0\"})\n+        counts = {IRNode.REVERSE_BYTES_VS, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private static final int SIZE = 543;\n+    private static final int SIZE = 6543;\n@@ -98,1 +98,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\"})\n@@ -111,1 +111,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\"})\n@@ -125,1 +125,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\"})\n@@ -139,1 +139,1 @@\n-        counts = {IRNode.MUL_V, \">0\"})\n+        counts = {IRNode.MUL_VI, \">0\"})\n@@ -153,1 +153,1 @@\n-        counts = {IRNode.SUB_V, \">0\"})\n+        counts = {IRNode.SUB_VI, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopArrayIndexComputeTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -82,3 +82,2 @@\n-        counts = {IRNode.LOAD_VECTOR, \">0\"})\n-    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse3\", \"true\"},\n-        counts = {IRNode.ADD_REDUCTION_V, \">0\"})\n+        counts = {IRNode.LOAD_VECTOR_I, \">0\",\n+                  IRNode.ADD_REDUCTION_V, \">0\"})\n@@ -124,3 +123,2 @@\n-        counts = {IRNode.LOAD_VECTOR, \">0\"})\n-    @IR(applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx2\", \"true\"},\n-        counts = {IRNode.ADD_REDUCTION_V, \">0\"})\n+        counts = {IRNode.LOAD_VECTOR_I, \">0\",\n+                  IRNode.ADD_REDUCTION_V, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopReductionOpTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    static int timeout = 5000;\n+    static int timeoutMillis = 5000;\n@@ -49,2 +49,0 @@\n-        long startTime = System.currentTimeMillis();\n-\n@@ -64,3 +62,1 @@\n-        while (System.currentTimeMillis() < startTime + timeout) {\n-            sleep(1000);\n-        }\n+        sleep(timeoutMillis);\n","filename":"test\/hotspot\/jtreg\/gc\/cslocker\/TestCSLocker.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    public static final long MAX_MILLIS_FOR_RUN = 50 * 1000; \/\/ The maximum runtime for the actual test.\n+    public static final long MAX_NANOS_FOR_RUN = 50L * 1_000_000_000L; \/\/ The maximum runtime for the actual test.\n@@ -96,1 +96,1 @@\n-        long start_millis = System.currentTimeMillis();\n+        long start_nanos = System.nanoTime();\n@@ -99,2 +99,2 @@\n-            long current_millis = System.currentTimeMillis();\n-            if ((current_millis - start_millis) > MAX_MILLIS_FOR_RUN) {\n+            long current_nanos = System.nanoTime();\n+            if ((current_nanos - start_nanos) > MAX_NANOS_FOR_RUN) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,1 @@\n-        long timeout = 2000;\n-        long startTime = System.currentTimeMillis();\n+        long timeoutMillis = 2000;\n@@ -69,4 +68,1 @@\n-            while (System.currentTimeMillis() < startTime + timeout) {\n-                System.out.println(\"Sleeping to let periodic GC trigger...\");\n-                Thread.sleep(200);\n-            }\n+            Thread.sleep(timeoutMillis);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPeriodicCollectionJNI.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-        long duration = Integer.parseInt(args[0]) * 1000L;\n+        long durationNanos = Integer.parseInt(args[0]) * 1_000_000_000L;\n@@ -185,1 +185,1 @@\n-        long startTime = System.currentTimeMillis();\n+        long startTimeNanos = System.nanoTime();\n@@ -222,1 +222,1 @@\n-        while ((System.currentTimeMillis() - startTime < duration) && error == null) {\n+        while ((System.nanoTime() - startTimeNanos < durationNanos) && error == null) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestNoAllocationsInHRegions.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPErgo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @requires !(vm.graal.enabled & vm.compMode == \"Xcomp\")\n+ * @requires !vm.graal.enabled\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPStatic.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.test.lib.ByteCodeLoader;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n@@ -94,3 +96,0 @@\n-    \/\/ Propagate test.src for the jar file.\n-    String testSrc= \"-Dtest.src=\" + System.getProperty(\"test.src\", \".\");\n-\n@@ -105,1 +104,1 @@\n-          testSrc, StressMetaSpace.class.getName());\n+          StressMetaSpace.class.getName());\n@@ -120,10 +119,0 @@\n-    private static URL[] urls = new URL[1];\n-\n-    static {\n-      try {\n-        File jarFile = new File(System.getProperty(\"test.src\") + \"\/testcases.jar\");\n-        urls[0] = jarFile.toURI().toURL();\n-      } catch (Exception e) {\n-        e.printStackTrace();\n-      }\n-    }\n@@ -132,5 +121,2 @@\n-      WhiteBox wb = WhiteBox.getWhiteBox();\n-      for(int i = 0; i < 10000; i++) {\n-        loadClass(wb);\n-      }\n-      wb.fullGC();\n+      loadManyClasses();\n+      WhiteBox.getWhiteBox().fullGC();\n@@ -139,1 +125,4 @@\n-    public static void loadClass(WhiteBox wb) {\n+    public static void loadManyClasses() {\n+      String className = \"Tmp\";\n+      String sourceCode = \"public class Tmp {}\";\n+      byte[] byteCode = InMemoryJavaCompiler.compile(className, sourceCode);\n@@ -141,2 +130,3 @@\n-        URLClassLoader ucl = new URLClassLoader(urls);\n-        Class.forName(\"case00\", false, ucl);\n+        for (int i = 0; i < 10000; i++) {\n+          ByteCodeLoader.load(className, byteCode);\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestMetaSpaceLog.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,1 +225,1 @@\n-        long duration = Integer.parseInt(args[0]) * 1000;\n+        long durationNanos = Integer.parseInt(args[0]) * 1_000_000_000L;\n@@ -227,1 +227,1 @@\n-        long startTime = System.currentTimeMillis();\n+        long startTimeNanos = System.nanoTime();\n@@ -241,1 +241,1 @@\n-        while (System.currentTimeMillis() - startTime < duration) {\n+        while (System.nanoTime() - startTimeNanos < durationNanos) {\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestUnifiedLoggingSwitchStress.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"filename":"test\/hotspot\/jtreg\/gc\/logging\/testcases.jar","binary":true,"status":"deleted"},{"patch":"@@ -116,1 +116,1 @@\n-    private static final long MAX_REWRITE_TIME = 30*1000; \/\/ ms\n+    private static final long MAX_REWRITE_TIME_NS = 30L * 1_000_000_000L; \/\/ 30s in ns\n@@ -214,1 +214,1 @@\n-        long timeBeforeRewrite = System.currentTimeMillis();\n+        long timeBeforeRewriteNanos = System.nanoTime();\n@@ -232,1 +232,1 @@\n-                if (System.currentTimeMillis() - timeBeforeRewrite >= MAX_REWRITE_TIME) {\n+                if (System.nanoTime() - timeBeforeRewriteNanos >= MAX_REWRITE_TIME_NS) {\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * bug 8313262\n+ * @summary Sinking node may cause required cast to be dropped\n+ * @requires vm.gc.Shenandoah\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC TestSinkingNodeDropsNotNullCast\n+ *\/\n+\n+import java.util.Arrays;\n+\n+public class TestSinkingNodeDropsNotNullCast {\n+    public static void main(String[] args) {\n+        Object[] array1 = new Object[100];\n+        Object[] array2 = new Object[100];\n+        Arrays.fill(array2, new Object());\n+        for (int i = 0; i < 20_000; i++) {\n+            test(array1);\n+            test(array1);\n+            test(array2);\n+        }\n+    }\n+\n+    private static Object test(Object[] array) {\n+        Object o;\n+        int i = 1;\n+        do {\n+            synchronized (new Object()) {\n+            }\n+            o = array[i];\n+            if (o != null) {\n+                if (o instanceof A) {\n+                    return ((A) o).field;\n+                } else {\n+                    return o;\n+                }\n+            }\n+            i++;\n+        } while (i < 100);\n+        return o;\n+    }\n+\n+    private static class A {\n+        Object field;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestSinkingNodeDropsNotNullCast.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-    private static final int TIME_MSEC = 120000;\n+    private static final long TIME_NSEC = 120L * 1_000_000_000L;\n@@ -63,3 +63,3 @@\n-        long start = System.currentTimeMillis();\n-        long current = start;\n-        while (current - start < TIME_MSEC) {\n+        long startNanos = System.nanoTime();\n+        long currentNanos = startNanos;\n+        while (currentNanos - startNanos < TIME_NSEC) {\n@@ -69,1 +69,1 @@\n-            current = System.currentTimeMillis();\n+            currentNanos = System.nanoTime();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestJNIGlobalRefs.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        final long startTime = System.currentTimeMillis();\n+        final long startTimeNanos = System.nanoTime();\n@@ -179,2 +179,2 @@\n-        long spentTime = System.currentTimeMillis() - startTime;\n-        long maxTries = (Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) - spentTime) \/ STEP_MS \/ 4;\n+        long spentTimeNanos = System.nanoTime() - startTimeNanos;\n+        long maxTries = (Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) - (spentTimeNanos \/ 1_000_000L)) \/ STEP_MS \/ 4;\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-        final long startTime = System.currentTimeMillis();\n+        final long startTimeNanos = System.nanoTime();\n@@ -176,2 +176,2 @@\n-        long spentTime = System.currentTimeMillis() - startTime;\n-        long maxTries = (Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) - spentTime) \/ STEP_MS \/ 4;\n+        long spentTimeNanos = System.nanoTime() - startTimeNanos;\n+        long maxTries = (Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) - (spentTimeNanos \/ 1_000_000L)) \/ STEP_MS \/ 4;\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    public static void warmUp(long warmupEndTime, int size, long seed) {\n+    public static void warmUp(long warmupEndTimeNanos, int size, long seed) {\n@@ -70,1 +70,1 @@\n-        while (System.currentTimeMillis() < warmupEndTime) {\n+        while (System.nanoTime() - warmupEndTimeNanos < 0) {\n@@ -81,1 +81,1 @@\n-    public static void runTest(long endTime, int size, double alive, long seed) {\n+    public static void runTest(long endTimeNanos, int size, double alive, long seed) {\n@@ -94,1 +94,1 @@\n-            while (!hadError && (System.currentTimeMillis() < endTime)) {\n+            while (!hadError && (System.nanoTime() - endTimeNanos < 0)) {\n@@ -139,2 +139,2 @@\n-        int warmupDuration = Integer.parseInt(args[1]);\n-        System.out.println(\"WarmUp Duration = \" + warmupDuration);\n+        long warmupDurationNanos = 1_000_000L * Integer.parseInt(args[1]);\n+        System.out.println(\"WarmUp Duration Millis = \" + args[1]);\n@@ -146,2 +146,2 @@\n-        int mainDuration = Integer.parseInt(args[4]);\n-        System.out.println(\"Main Duration = \" + mainDuration);\n+        long mainDurationNanos = 1_000_000L * Integer.parseInt(args[4]);\n+        System.out.println(\"Main Duration Millis = \" + args[4]);\n@@ -157,1 +157,1 @@\n-        long warmupStartTime = System.currentTimeMillis();\n+        long warmupStartTimeNanos = System.nanoTime();\n@@ -162,1 +162,1 @@\n-                    warmUp(warmupStartTime + warmupDuration, warmupIterations, seed);\n+                    warmUp(warmupStartTimeNanos + warmupDurationNanos, warmupIterations, seed);\n@@ -173,1 +173,1 @@\n-        long startTime = System.currentTimeMillis();\n+        long startTimeNanos = System.nanoTime();\n@@ -178,1 +178,1 @@\n-                    runTest(startTime + mainDuration, mainIterations, liveFrac, seed);\n+                    runTest(startTimeNanos + mainDurationNanos, mainIterations, liveFrac, seed);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestJNIBlockFullGC\/TestJNIBlockFullGC.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-        new TestMultiThreadStressRSet().test(time * 1000, threads);\n+        new TestMultiThreadStressRSet().test(time * 1_000_000_000L, threads);\n@@ -150,1 +150,1 @@\n-     * @param timeInMillis how long to stress\n+     * @param timeInNanos how long to stress\n@@ -153,2 +153,2 @@\n-    public void test(long timeInMillis, int maxThreads) {\n-        if (timeInMillis <= 0 || maxThreads <= 0) {\n+    public void test(long timeInNanos, int maxThreads) {\n+        if (timeInNanos <= 0 || maxThreads <= 0) {\n@@ -157,1 +157,1 @@\n-        System.out.println(\"%% Time to work: \" + timeInMillis \/ 1000 + \"s\");\n+        System.out.println(\"%% Time to work: \" + timeInNanos \/ 1_000_000_000L + \"s\");\n@@ -159,1 +159,1 @@\n-        long finish = System.currentTimeMillis() + timeInMillis;\n+        long finishNanos = System.nanoTime() + timeInNanos;\n@@ -166,1 +166,1 @@\n-            while (System.currentTimeMillis() < finish && errorMessage == null) {\n+            while (System.nanoTime() - finishNanos < 0 && errorMessage == null) {\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestMultiThreadStressRSet.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-    public final long start;\n+    public final long startNanos;\n@@ -147,1 +147,1 @@\n-    public final long finishAt;\n+    public final long finishAtNanos;\n@@ -154,1 +154,1 @@\n-    TestStressRSetCoarsening(int objPerRegions, int regsToRefresh, int timeout) {\n+    TestStressRSetCoarsening(int objPerRegions, int regsToRefresh, int timeoutSec) {\n@@ -157,2 +157,2 @@\n-        this.start = System.currentTimeMillis();\n-        this.finishAt = start + timeout * 900; \/\/ 10% ahead of jtreg timeout\n+        this.startNanos = System.nanoTime();\n+        this.finishAtNanos = startNanos + (timeoutSec * 900_000_000L); \/\/ 10% ahead of jtreg timeout\n@@ -287,1 +287,1 @@\n-                            if (System.currentTimeMillis() > finishAt) {\n+                            if (System.nanoTime() - finishAtNanos > 0) {\n@@ -325,1 +325,1 @@\n-        long now = System.currentTimeMillis();\n+        long nowNanos = System.nanoTime();\n@@ -327,1 +327,1 @@\n-        System.out.println(\"%%   Time spent          : \" + ((now - start) \/ 1000) + \" seconds\");\n+        System.out.println(\"%%   Time spent          : \" + ((nowNanos - startNanos) \/ 1_000_000_000L) + \" seconds\");\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressRSetCoarsening.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,3 @@\n-        long durationMillis = Long.valueOf(args[0]);\n-        long start = System.currentTimeMillis();\n-        while (System.currentTimeMillis() - start < durationMillis) {\n+        long durationNanos = Long.valueOf(args[0]) * 1_000_000L;\n+        long startNanos = System.nanoTime();\n+        while (System.nanoTime() - startNanos < durationNanos) {\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,11 +136,4 @@\n-        long durationMS = (long) (1000 * durationSec);\n-        long start = System.currentTimeMillis();\n-        long now = start;\n-        long soFar = now - start;\n-        while (soFar < durationMS) {\n-            try {\n-                Thread.sleep(durationMS - soFar);\n-            } catch (Exception e) {\n-            }\n-            now = System.currentTimeMillis();\n-            soFar = now - start;\n+        try {\n+            Thread.sleep(durationSec * 1000L);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test Failure, did not expect an InterruptedException\", e);\n@@ -148,0 +141,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,3 +81,3 @@\n-    private final int minGCWaitMS = 1000;\n-    private final int minFreeWaitElapsedMS = 30000;\n-    private final int minFreeCriticalWaitMS;\n+    private final long minGCWaitNanos = 1_000_000_000L;\n+    private final long minFreeWaitElapsedNanos = 30L * 1_000_000_000L;\n+    private final long minFreeCriticalWaitNanos;\n@@ -86,2 +86,2 @@\n-    private long lastGCDetected = System.currentTimeMillis();\n-    private long lastFree = System.currentTimeMillis();\n+    private long lastGCDetectedNanos = System.nanoTime();\n+    private long lastFreeNanos = System.nanoTime();\n@@ -89,2 +89,2 @@\n-    public MemoryWatcher(String mxBeanName, int minFreeCriticalWaitMS) {\n-        this.minFreeCriticalWaitMS = minFreeCriticalWaitMS;\n+    public MemoryWatcher(String mxBeanName, long minFreeCriticalWaitNanos) {\n+        this.minFreeCriticalWaitNanos = minFreeCriticalWaitNanos;\n@@ -114,1 +114,1 @@\n-        long now = System.currentTimeMillis();\n+        long nowNanos = System.nanoTime();\n@@ -118,1 +118,1 @@\n-            lastGCDetected = now;\n+            lastGCDetectedNanos = nowNanos;\n@@ -124,2 +124,2 @@\n-        long elapsed = now - lastFree;\n-        long timeSinceLastGC = now - lastGCDetected;\n+        long elapsedNanos = nowNanos - lastFreeNanos;\n+        long timeSinceLastGCNanos = nowNanos - lastGCDetectedNanos;\n@@ -127,2 +127,2 @@\n-        if (usage > criticalThresholdPromille && elapsed > minFreeCriticalWaitMS) {\n-            lastFree = now;\n+        if (usage > criticalThresholdPromille && elapsedNanos > minFreeCriticalWaitNanos) {\n+            lastFreeNanos = nowNanos;\n@@ -131,2 +131,2 @@\n-            if (elapsed > minFreeWaitElapsedMS || timeSinceLastGC > minGCWaitMS) {\n-                lastFree = now;\n+            if (elapsedNanos > minFreeWaitElapsedNanos || timeSinceLastGCNanos > minGCWaitNanos) {\n+                lastFreeNanos = nowNanos;\n@@ -155,2 +155,2 @@\n-    public MemoryUser(String mxBeanName, int minFreeCriticalWaitMS) {\n-        watcher = new MemoryWatcher(mxBeanName, minFreeCriticalWaitMS);\n+    public MemoryUser(String mxBeanName, long minFreeCriticalWaitNanos) {\n+        watcher = new MemoryWatcher(mxBeanName, minFreeCriticalWaitNanos);\n@@ -195,2 +195,2 @@\n-    private static Exitable startMemoryUser(String mxBeanName, int minFreeCriticalWaitMS) {\n-        MemoryUser task = new MemoryUser(mxBeanName, minFreeCriticalWaitMS);\n+    private static Exitable startMemoryUser(String mxBeanName, long minFreeCriticalWaitNanos) {\n+        MemoryUser task = new MemoryUser(mxBeanName, minFreeCriticalWaitNanos);\n@@ -210,3 +210,3 @@\n-        int minFreeCriticalWaitMS = args.length > 2 ? Integer.parseInt(args[2]) : 500;\n-\n-        long startMS = System.currentTimeMillis();\n+        long minFreeCriticalWaitNanos = args.length > 2\n+            ? Integer.parseInt(args[2]) * 1_000_000L\n+            : 500_000_000L;\n@@ -216,1 +216,1 @@\n-        Exitable memoryUser = startMemoryUser(mxBeanName, minFreeCriticalWaitMS);\n+        Exitable memoryUser = startMemoryUser(mxBeanName, minFreeCriticalWaitNanos);\n@@ -218,3 +218,4 @@\n-        long durationMS = durationMinutes * 60 * 1000;\n-        while ((System.currentTimeMillis() - startMS) < durationMS) {\n-            ThreadUtils.sleep(10 * 1010);\n+        try {\n+            Thread.sleep(durationMinutes * 60_000L);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test Failure, did not except an InterruptedException\", e);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestGCLocker.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,1 +372,1 @@\n-    long start = System.currentTimeMillis();\n+    long startNanos = System.nanoTime();\n@@ -378,2 +378,2 @@\n-    long end = System.currentTimeMillis();\n-    float secs = ((float)(end-start))\/1000.0F;\n+    long endNanos = System.nanoTime();\n+    float secs = (endNanos - startNanos) \/ 1_000_000_000F;\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOld.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-    private static long endTime;\n+    private static long endTimeNanos;\n@@ -140,1 +140,1 @@\n-               if (System.currentTimeMillis() >= endTime) {\n+               if (System.nanoTime() - endTimeNanos >= 0) {\n@@ -168,1 +168,1 @@\n-        for (int i = 0; i < 4 && System.currentTimeMillis() < endTime; i++) {\n+        for (int i = 0; i < 4 && System.nanoTime() - endTimeNanos < 0; i++) {\n@@ -194,3 +194,3 @@\n-        int timeout = Integer.parseInt(args[0]) * 1000;\n-        System.out.println(\"Running with timeout of \" + timeout + \"ms\");\n-        endTime = System.currentTimeMillis() + timeout;\n+        long timeoutNanos = Integer.parseInt(args[0]) * 1_000_000_000L;\n+        System.out.println(\"Running with timeout of \" + args[0] + \" seconds\");\n+        endTimeNanos = System.nanoTime() + timeoutNanos;\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/systemgc\/TestSystemGC.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/BooleanFlagWithInvalidValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/CompilerConfigFileWarning.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/ConfigFileParsing.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/ConfigFileWarning.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/DoubleFlagWithIntegerValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/FlagWithInvalidValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- *\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/IgnoreUnrecognizedVMOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/NonBooleanFlagWithInvalidBooleanPrefix.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/ObsoleteFlagErrorMessage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestJcmdOutput.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n@@ -41,0 +42,1 @@\n+ * @requires vm.flagless\n@@ -52,0 +54,1 @@\n+ * @requires vm.flagless\n@@ -63,0 +66,1 @@\n+ * @requires vm.flagless\n@@ -74,0 +78,1 @@\n+ * @requires vm.flagless\n@@ -85,0 +90,1 @@\n+ * @requires vm.flagless\n@@ -96,0 +102,1 @@\n+ * @requires vm.flagless\n@@ -107,0 +114,1 @@\n+ * @requires vm.flagless\n@@ -118,0 +126,1 @@\n+ * @requires vm.flagless\n@@ -129,0 +138,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRangesDynamic.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-for i in {1..10}; do \n+for i in {1..10}; do\n@@ -33,0 +33,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges_generate.sh","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestHexArguments.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestLongUnrecognizedVMOption.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @requires vm.flagless\n@@ -67,1 +68,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestNullTerminatedFlags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestVMOptions.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TraceExceptionsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/UnrecognizedVMOption.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMAliasOptions.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionWarning.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionsFile\/TestVMOptionsFile.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,18 @@\n- *      TestMetaspaceAllocationMT1\n+ *      TestMetaspaceAllocationMT1 3\n+ *\/\n+\n+\/*\n+ * @test id=debug-default-strict\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @key randomness\n+ * @requires (vm.debug == true)\n+ *\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\/manual\n+ *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:VerifyMetaspaceInterval=10\n+ *      TestMetaspaceAllocationMT1 10\n@@ -75,1 +92,1 @@\n- *      TestMetaspaceAllocationMT1\n+ *      TestMetaspaceAllocationMT1 3\n@@ -91,1 +108,1 @@\n- *      TestMetaspaceAllocationMT1\n+ *      TestMetaspaceAllocationMT1 3\n@@ -100,1 +117,1 @@\n-        final int seconds = 10;\n+        final int seconds = Integer.parseInt(args[0]);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -57,1 +57,18 @@\n- *      TestMetaspaceAllocationMT2\n+ *      TestMetaspaceAllocationMT2 3\n+ *\/\n+\n+\/*\n+ * @test id=debug-default-strict\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @key randomness\n+ * @requires (vm.debug == true)\n+ *\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\/manual\n+ *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:VerifyMetaspaceInterval=10\n+ *      TestMetaspaceAllocationMT2 10\n@@ -75,1 +92,1 @@\n- *      TestMetaspaceAllocationMT2\n+ *      TestMetaspaceAllocationMT2 3\n@@ -91,1 +108,1 @@\n- *      TestMetaspaceAllocationMT2\n+ *      TestMetaspaceAllocationMT2 3\n@@ -100,1 +117,1 @@\n-        final int seconds = 10;\n+        final int seconds = Integer.parseInt(args[0]);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,0 +262,2 @@\n+    static final String keyTool = JDKToolFinder.getJDKTool(\"keytool\");\n+    static final String jarSigner = JDKToolFinder.getJDKTool(\"jarsigner\");\n@@ -263,3 +265,7 @@\n-    public static void signJar() throws Exception {\n-        String keyTool = JDKToolFinder.getJDKTool(\"keytool\");\n-        String jarSigner = JDKToolFinder.getJDKTool(\"jarsigner\");\n+    public static void signJarWithDisabledAlgorithm(String jarName) throws Exception {\n+        String keyName = \"key_with_disabled_alg\";\n+        executeProcess(keyTool,\n+            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", keyName,\n+            \"-storepass\", \"abc123\", \"-keypass\", \"abc123\", \"-keyalg\", \"dsa\",\n+            \"-sigalg\", \"SHA1withDSA\", \"-keysize\", \"512\", \"-dname\", \"CN=jvmtest2\")\n+            .shouldHaveExitValue(0);\n@@ -267,0 +273,5 @@\n+        doSigning(jarName, keyName);\n+    }\n+\n+    public static void signJar(String jarName) throws Exception {\n+        String keyName = \"mykey\";\n@@ -268,1 +279,1 @@\n-            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", \"mykey\",\n+            \"-genkey\", \"-keystore\", \".\/keystore\", \"-alias\", keyName,\n@@ -273,0 +284,4 @@\n+        doSigning(jarName, keyName);\n+    }\n+\n+    private static void doSigning(String jarName, String keyName) throws Exception {\n@@ -275,2 +290,2 @@\n-           \"abc123\", \"-signedjar\", getJarFilePath(\"signed_hello\"),\n-           getJarFilePath(\"hello\"), \"mykey\")\n+           \"abc123\", \"-signedjar\", getJarFilePath(\"signed_\" + jarName),\n+           getJarFilePath(jarName), keyName)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312434\n+ * @summary A jar file containing classes in the same package. Sign the jar file with\n+ *          a disabled algorithm. The jar will be treated as unsigned.\n+ *          Dump only one class into the CDS archive. During runtime, load the class\n+ *          stored in the archive and then load another class not from the archive\n+ *          but from the same pacakge. Loading of the second class should not result\n+ *          in sealing violation.\n+ *\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/GenericTestApp.java test-classes\/pkg\/ClassInPackage.java test-classes\/C2.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n+ * @run driver SealingViolation\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class SealingViolation {\n+    public static void main(String[] args) throws Exception {\n+        String[] classList = {\"pkg\/ClassInPackage\"};\n+        String appJar = ClassFileInstaller.writeJar(\"pkg-classes-sealed.jar\",\n+            ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/pkg\/package_seal.mf\"),\n+            \"GenericTestApp\", \"pkg\/ClassInPackage\", \"pkg\/C2\");\n+\n+        JarBuilder.signJarWithDisabledAlgorithm(\"pkg-classes-sealed\");\n+        String signedJar = TestCommon.getTestJar(\"pkg-classes-sealed.jar\");\n+\n+        \/\/ GenericTestApp requires WhiteBox\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String bootclasspath = \"-Xbootclasspath\/a:\" + wbJar;\n+\n+        OutputAnalyzer output = TestCommon.dump(signedJar, classList, bootclasspath,\n+                                     \"-Xlog:cds+class=debug\");\n+        output.shouldMatch(\"cds.class.*klasses.*app   pkg.ClassInPackage\")\n+              .shouldHaveExitValue(0);\n+\n+        output = TestCommon.exec(signedJar, \"-Xlog:cds=debug,class+load\",\n+                                 bootclasspath,\n+                                 \"-XX:+UnlockDiagnosticVMOptions\",\n+                                 \"-XX:+WhiteBoxAPI\",\n+                                 \"GenericTestApp\",\n+                                 \"assertShared:pkg.ClassInPackage\",\n+                                 \"assertNotShared:pkg.C2\");\n+        output.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SealingViolation.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -41,1 +41,1 @@\n-        JarBuilder.signJar();\n+        JarBuilder.signJar(\"hello\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SignedJar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        output.shouldContain(\"17 3: jdk\/test\/lib\/apps\\n\");\n+        output.shouldContain(\"17 2: jdk\/test\/lib\/apps\\n\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicSharedSymbols.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+Manifest-Version: 1.0\n+Created-By: 1.9.0-internal (Oracle Corporation)\n+\n+Name: pkg\/\n+Sealed: true\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/pkg\/package_seal.mf","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -173,1 +173,0 @@\n-            output.shouldContain(\"Native heap trimmer stop\");\n@@ -254,1 +253,1 @@\n-            System.out.println(\"Sleeping...\");\n+            System.out.println(\"Sleeping for \" + sleeptime + \" ms...\");\n@@ -299,0 +298,1 @@\n+                long ms1 = System.currentTimeMillis();\n@@ -303,0 +303,2 @@\n+                long ms2 = System.currentTimeMillis();\n+                int maxTrimsExpected = (int)(ms2 - ms1); \/\/ 1ms trim interval\n@@ -304,1 +306,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 1, 3000, strictTesting);\n+                parseOutputAndLookForNegativeTrim(output, 1, (int)maxTrimsExpected, strictTesting);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8314679\n+ * @summary Test clhsdb attach, detach, and then attach to different JVM\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbAttachDifferentJVMs\n+ *\/\n+\n+public class ClhsdbAttachDifferentJVMs {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting ClhsdbAttach test\");\n+\n+        LingeredApp theApp1 = null;\n+        LingeredApp theApp2 = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            theApp1 = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp1.getPid());\n+            theApp2 = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp2.getPid());\n+            String attach1 = \"attach \" + theApp1.getPid();\n+            String attach2 = \"attach \" + theApp2.getPid();\n+\n+            List<String> cmds = List.of(\n+                    \"where\",\n+                    attach1,\n+                    \"threads\",\n+                    \"detach\",\n+                    attach2,\n+                    \"jstack\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            expStrMap.put(\"where\", List.of(\n+                    \"Command not valid until attached to a VM\"));\n+            expStrMap.put(attach1, List.of(\n+                    \"Attaching to process \" + theApp1.getPid()));\n+            expStrMap.put(\"threads\", List.of(\n+                    \"Reference Handler\"));\n+            expStrMap.put(attach2, List.of(\n+                    \"Attaching to process \" + theApp2.getPid()));\n+            expStrMap.put(\"jstack\", List.of(\n+                    \"Reference Handler\"));\n+\n+            Map<String, List<String>> unexpStrMap = new HashMap<>();\n+            unexpStrMap.put(\"jstack\", List.of(\n+                    \"WARNING\"));\n+\n+            test.run(-1, cmds, expStrMap, unexpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp1);\n+            LingeredApp.stopApp(theApp2);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbAttachDifferentJVMs.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -122,0 +122,103 @@\n+\n+    \/\/ Rules for vector nodes.\n+    @Test\n+    \/\/ By default, we search for the maximal size possible\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ We can also specify that we want the maximum explicitly\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE_MAX, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Explicitly take the maximum size for this type (here int)\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"max_for_type\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Exlicitly take the maximum size for the int type\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"max_int\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ As a last resort, we can match with any size\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE_ANY, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Specify comma separated list of numbers, match for any of them\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"2,4,8,16,32,64\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Two or more arguments to min(...): the minimal value is applied\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"min(max_for_type, max_int, LoopMaxUnroll, 64)\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    static int[] testVectorNode() {\n+        int[] a = new int[1024*8];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i]++;\n+        }\n+        return a;\n+    }\n+\n+    \/\/ Rules for vector nodes.\n+    @Test\n+    \/\/ By default, we search for the maximal size possible\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ In some cases, we can know the exact size, here 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_16, \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \"=64\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_8, \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \"=32\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ In some cases, we can know the exact size, here 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_4, \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \"=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    static float[] testVectorNodeExactSize1() {\n+        float[] a = new float[1024*8];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i]++;\n+        }\n+        return a;\n+    }\n+\n+    \/\/ Rules for vector nodes. Same as badTestVectorNodeSize but with good rules.\n+    @Test\n+    \/\/ In some cases, we can know the exact size, here 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_4, \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Hence, we know any other sizes are impossible.\n+    \/\/ We can also specify that explicitly for failOn\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_2,\n+                  IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_8,\n+                  IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_16,\n+                  IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_32,\n+                  IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE_64,\n+                  IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE + \"2,8,16,32,64\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    static float[] testVectorNodeExactSize2() {\n+        float[] a = new float[1024*8];\n+        for (int i = 0; i < a.length\/8; i++) {\n+            a[i*8 + 0]++; \/\/ block of 4, then gap of 4\n+            a[i*8 + 1]++;\n+            a[i*8 + 2]++;\n+            a[i*8 + 3]++;\n+        }\n+        return a;\n+    }\n+\n+    @Test\n+    \/\/ Here, we can pack at most 8 given the 8-blocks and 8-gaps.\n+    \/\/ But we can also never pack more than max_float\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, IRNode.VECTOR_SIZE + \"min(8, max_float)\", \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    static float[] testVectorNodeSizeMinClause() {\n+        float[] a = new float[1024*8];\n+        for (int i = 0; i < a.length\/16; i++) {\n+            a[i*16 + 0]++; \/\/ block of 8, then gap of 8\n+            a[i*16 + 1]++;\n+            a[i*16 + 2]++;\n+            a[i*16 + 3]++;\n+            a[i*16 + 4]++;\n+            a[i*16 + 5]++;\n+            a[i*16 + 6]++;\n+            a[i*16 + 7]++;\n+        }\n+        return a;\n+    }\n@@ -197,0 +300,25 @@\n+\n+    \/\/ Failing rules for vector nodes. Same as testVectorNodeExactSize2 but with bad rules.\n+    @Test\n+    \/\/ By default we look for the IRNode.VECTOR_SIZE_MAX, which is more than 4.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\"},\n+        applyIf = {\"MaxVectorSize\", \">16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ By default, we look for IRNode.VECTOR_SIZE_ANY. But there are some of size 4.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    \/\/ By default, we look for IRNode.VECTOR_SIZE_ANY. But there are at least two of size 4.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"<2\"},\n+        applyIf = {\"MaxVectorSize\", \">=16\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    static float[] badTestVectorNodeSize() {\n+        float[] a = new float[1024*8];\n+        for (int i = 0; i < a.length\/8; i++) {\n+            a[i*8 + 0]++; \/\/ block of 4, then gap of 4\n+            a[i*8 + 1]++;\n+            a[i*8 + 2]++;\n+            a[i*8 + 3]++;\n+        }\n+        return a;\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/IRExample.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -1002,1 +1002,1 @@\n-    @FailCount(45)\n+    @FailCount(51)\n@@ -1028,0 +1028,6 @@\n+    @IR(counts = {IRNode.STORE, \"!= 1000\"})\n+    @IR(counts = {IRNode.STORE, \"< 0\"})\n+    @IR(counts = {IRNode.STORE, \"< 1\"})\n+    @IR(counts = {IRNode.STORE, \"<= 0\"})\n+    @IR(counts = {IRNode.STORE, \"> -1\"})\n+    @IR(counts = {IRNode.STORE, \">= 0\"})\n@@ -1049,0 +1055,32 @@\n+\n+    @Test\n+    @FailCount(8)\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE_MAX, \"> 0\"}, \/\/ valid\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE_ANY, \"> 0\"}, \/\/ valid\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"xxx\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"min()\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"min(max_for_type)\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"2,4,8,16,32,64,max_int\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"2,4,8,16,32,64,-3\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"min(max_for_type, xxx)\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, IRNode.VECTOR_SIZE + \"min(max_for_type, min(max_for_type, max_for_type))\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    public int[] badVectorNodeSize() {\n+        int[] a = new int[1024*8];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i]++;\n+        }\n+        return a;\n+    }\n@@ -1099,1 +1137,1 @@\n-    @IR(failOn = IRNode.LOAD_VECTOR, phase = CompilePhase.BEFORE_REMOVEUSELESS) \/\/ works\n+    @IR(failOn = IRNode.LOAD_VECTOR_I, phase = CompilePhase.BEFORE_REMOVEUSELESS) \/\/ works\n@@ -1101,2 +1139,2 @@\n-    @IR(failOn = IRNode.VECTOR_CAST_B2X, phase = CompilePhase.BEFORE_REMOVEUSELESS) \/\/ works\n-    @IR(failOn = IRNode.LOAD_VECTOR, phase = CompilePhase.BEFORE_MATCHING) \/\/ works\n+    @IR(failOn = IRNode.VECTOR_CAST_B2I, phase = CompilePhase.BEFORE_REMOVEUSELESS) \/\/ works\n+    @IR(failOn = IRNode.LOAD_VECTOR_I, phase = CompilePhase.BEFORE_MATCHING) \/\/ works\n@@ -1104,2 +1142,2 @@\n-    @IR(failOn = IRNode.VECTOR_CAST_B2X, phase = CompilePhase.BEFORE_MATCHING) \/\/ works\n-    @IR(failOn = IRNode.LOAD_VECTOR, phase = {CompilePhase.MATCHING, CompilePhase.MATCHING})\n+    @IR(failOn = IRNode.VECTOR_CAST_B2I, phase = CompilePhase.BEFORE_MATCHING) \/\/ works\n+    @IR(failOn = IRNode.LOAD_VECTOR_I, phase = {CompilePhase.MATCHING, CompilePhase.MATCHING})\n@@ -1107,2 +1145,2 @@\n-    @IR(failOn = IRNode.VECTOR_CAST_B2X, phase = {CompilePhase.MATCHING, CompilePhase.MATCHING})\n-    @IR(failOn = IRNode.LOAD_VECTOR, phase = CompilePhase.FINAL_CODE)\n+    @IR(failOn = IRNode.VECTOR_CAST_B2I, phase = {CompilePhase.MATCHING, CompilePhase.MATCHING})\n+    @IR(failOn = IRNode.LOAD_VECTOR_I, phase = CompilePhase.FINAL_CODE)\n@@ -1110,1 +1148,1 @@\n-    @IR(failOn = IRNode.VECTOR_CAST_B2X, phase = CompilePhase.FINAL_CODE)\n+    @IR(failOn = IRNode.VECTOR_CAST_B2I, phase = CompilePhase.FINAL_CODE)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":47,"deletions":9,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        runCheck(BadCountsConstraint.create(BadCount.class, \"bad1()\", 1, 1, \"Load\"),\n+        runCheck(BadCountsConstraint.create(BadCount.class, \"bad1()\", 1, 2, \"Load\"),\n@@ -106,3 +106,3 @@\n-                 BadCountsConstraint.create(BadCount.class, \"bad2()\", 2,  1, \"Store\"),\n-                 BadCountsConstraint.create(BadCount.class, \"bad3()\", 1,  1, \"Load\"),\n-                 BadCountsConstraint.create(BadCount.class, \"bad3()\", 2,  1, \"Store\")\n+                 BadCountsConstraint.create(BadCount.class, \"bad2()\", 2,  2, \"Store\"),\n+                 BadCountsConstraint.create(BadCount.class, \"bad3()\", 1,  2, \"Load\"),\n+                 BadCountsConstraint.create(BadCount.class, \"bad3()\", 2,  2, \"Store\")\n@@ -632,4 +632,0 @@\n-                  IRNode.STORE, \"!= 0\",\n-                  IRNode.STORE, \"!=0\",\n-                  IRNode.STORE, \" != 0\",\n-                  IRNode.STORE, \"  !=  0\",\n@@ -826,0 +822,1 @@\n+    int iFld2;\n@@ -827,0 +824,1 @@\n+    int result2;\n@@ -828,1 +826,1 @@\n-    @IR(counts = {IRNode.LOAD, \"!= 1\"}) \/\/ fail\n+    @IR(counts = {IRNode.LOAD, \"> 1000\"}) \/\/ fail\n@@ -832,0 +830,1 @@\n+        result2 = iFld2;\n@@ -835,2 +834,2 @@\n-    @IR(counts = {IRNode.LOAD, \"1\"}) \/\/ fail\n-    @IR(counts = {IRNode.STORE, \"< 1\"})\n+    @IR(counts = {IRNode.LOAD, \"2\"}) \/\/ fail\n+    @IR(counts = {IRNode.STORE, \"< 2\"})\n@@ -839,0 +838,1 @@\n+        result2 = iFld2;\n@@ -844,1 +844,1 @@\n-    @IR(counts = {IRNode.STORE, \" <= 0\"}) \/\/ fail\n+    @IR(counts = {IRNode.STORE, \" <= 1\"}) \/\/ fail\n@@ -847,0 +847,1 @@\n+        result2 = iFld2;\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -78,0 +78,9 @@\n+                ##### IRMatchingVMInfo - used by TestFramework #####\n+                <key>:<value>\n+                cpuFeatures:empty_cpu_info\n+                MaxVectorSize:64\n+                MaxVectorSizeIsDefault:1\n+                LoopMaxUnroll:64\n+                UseAVX:1\n+                UseAVXIsDefault:1\n+                ----- END VMInfo -----\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSafepointWhilePrinting.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.lang.reflect.Method;\n@@ -66,1 +65,1 @@\n-                if (!isVirtual(thrs[i])) {\n+                if (!thrs[i].isVirtual()) {\n@@ -115,9 +114,0 @@\n-    private static boolean isVirtual(Thread thread) {\n-        try {\n-            Method isVirtual = Thread.class.getMethod(\"isVirtual\");\n-            return (boolean) isVirtual.invoke(thread);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/stepRequests\/stepreq001t.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+                \"jdk.internal.event.ThreadSleepEvent.<init>\",\n@@ -213,1 +214,1 @@\n-        int expectedLength = depth + 6;\n+        int expectedLength = depth + 7;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/thread\/strace001.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-requiredVersion=7.3+1\n+requiredVersion=7.3.1+1\n","filename":"test\/jaxp\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,2 +481,0 @@\n-java\/lang\/invoke\/MethodHandleProxies\/BasicTest.java              8312482 linux-all\n-java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java 8312482 linux-all\n@@ -767,2 +765,0 @@\n-java\/foreign\/TestByteBuffer.java 8309475 aix-ppc64\n-\n@@ -772,3 +768,0 @@\n-javax\/swing\/JFileChooser\/FileSystemView\/SystemIconTest.java 8313902 windows-all\n-sanity\/client\/SwingSet\/src\/FileChooserDemoTest.java 8313903 windows-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-requiredVersion=7.3+1\n+requiredVersion=7.3.1+1\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314045\n+ * @summary ArithmeticException in GaloisCounterMode\n+ *\/\n+\n+import java.nio.ByteBuffer;\n+\n+import javax.crypto.AEADBadTagException;\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+public class GCMShortInput {\n+\n+    public static void main(String args[]) throws Exception {\n+        SecretKeySpec keySpec =\n+                new SecretKeySpec(\n+                        new byte[] {\n+                            88, 26, 43, -100, -24, -29, -70, 10, 34, -85, 52, 101, 45, -68, -105,\n+                            -123\n+                        },\n+                        \"AES\");\n+        GCMParameterSpec params =\n+                new GCMParameterSpec(8 * 16, new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n+        Cipher cipher = Cipher.getInstance(\"AES\/GCM\/NoPadding\");\n+        cipher.init(Cipher.DECRYPT_MODE, keySpec, params);\n+        try {\n+            cipher.doFinal(ByteBuffer.allocate(0), ByteBuffer.allocate(0));\n+            throw new AssertionError(\"AEADBadTagException expected\");\n+        } catch (AEADBadTagException e) {\n+            \/\/ expected\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/AEAD\/GCMShortInput.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -325,0 +325,1 @@\n+            throw new RuntimeException(ioe);\n@@ -328,0 +329,1 @@\n+            throw new RuntimeException(icae);\n@@ -332,0 +334,1 @@\n+            throw new RuntimeException(vmse);\n@@ -333,1 +336,0 @@\n-        return null; \/\/ Shuts up the compiler\n@@ -344,0 +346,1 @@\n+            throw new RuntimeException(ioe);\n@@ -347,0 +350,1 @@\n+            throw new RuntimeException(icae);\n@@ -348,1 +352,0 @@\n-        return null; \/\/ Shuts up the compiler\n@@ -363,0 +366,1 @@\n+            throw new RuntimeException(ioe);\n@@ -366,0 +370,1 @@\n+            throw new RuntimeException(icae);\n@@ -367,1 +372,0 @@\n-        return null; \/\/ Shuts up the compiler\n","filename":"test\/jdk\/com\/sun\/jdi\/VMConnection.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.naming.Context;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.net.SocketFactory;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Hashtable;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8313657\n+ * @summary make sure socket is closed when the error happens for OutputStream flushing\n+ * The value of provider url can be random, not necessary to be the one in the code\n+ * @library \/test\/lib\n+ * @run main\/othervm SocketCloseTest\n+ *\/\n+\n+public class SocketCloseTest {\n+    public static String SOCKET_CLOSED_MSG = \"The socket has been closed.\";\n+    public static String SOCKET_NOT_CLOSED_MSG = \"The socket was not closed.\";\n+    public static String BAD_FLUSH = \"Bad flush!\";\n+    private static final byte[] BIND_RESPONSE = new byte[]{\n+            48, 12, 2, 1, 1, 97, 7, 10, 1, 0, 4, 0, 4, 0\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        SocketCloseTest scTest = new SocketCloseTest();\n+        scTest.runCloseSocketScenario();\n+    }\n+\n+    public void runCloseSocketScenario() throws Exception {\n+        Hashtable<String, Object> props = new Hashtable<>();\n+\n+        props.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        props.put(Context.PROVIDER_URL, \"ldap:\/\/localhost:1389\/o=example\");\n+        props.put(\"java.naming.ldap.factory.socket\", CustomSocketFactory.class.getName());\n+        try {\n+            final DirContext ctx = new InitialDirContext(props);\n+        } catch (Exception e) {\n+            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0) {\n+                System.out.println(SOCKET_CLOSED_MSG);\n+            } else {\n+                System.out.println(SOCKET_NOT_CLOSED_MSG);\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    public static class CustomSocketFactory extends SocketFactory {\n+        public static CustomSocket customSocket = new CustomSocket();\n+\n+        public static CustomSocketFactory getDefault() {\n+            return new CustomSocketFactory();\n+        }\n+\n+        @Override\n+        public Socket createSocket() {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String s, int timeout) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String host, int port, InetAddress localHost,\n+                                   int localPort) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress address, int port,\n+                                   InetAddress localAddress, int localPort) {\n+            return customSocket;\n+        }\n+    }\n+\n+    private static class LdapInputStream extends InputStream {\n+        private ByteArrayInputStream bos;\n+\n+        public LdapInputStream() {\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            bos = new ByteArrayInputStream(BIND_RESPONSE);\n+            return bos.read();\n+        }\n+    }\n+\n+    private static class LdapOutputStream extends OutputStream {\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            System.out.println(\"output stream writing\");\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+            System.out.println(BAD_FLUSH);\n+            throw new IOException(BAD_FLUSH);\n+        }\n+    }\n+\n+    private static class CustomSocket extends Socket {\n+        private int closeMethodCalled = 0;\n+        private LdapOutputStream output = new LdapOutputStream();\n+        private LdapInputStream input = new LdapInputStream();\n+\n+        public void connect(SocketAddress address, int timeout) {\n+        }\n+\n+        public InputStream getInputStream() {\n+            return input;\n+        }\n+\n+        public OutputStream getOutputStream() {\n+            return output;\n+        }\n+\n+        public int closeMethodCalledCount() {\n+            return closeMethodCalled;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            closeMethodCalled++;\n+            super.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/SocketCloseTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.net.IPSupport\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -157,4 +159,6 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n-                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        if (IPSupport.hasIPv6()) {\n+            simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n+                    .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.net.IPSupport\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -157,4 +159,6 @@\n-        simpleserver(JWEBSERVER, opt, \"::0\")\n-                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        if (IPSupport.hasIPv6()) {\n+            simpleserver(JWEBSERVER, opt, \"::0\")\n+                    .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                    .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                    .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,221 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.imageio.ImageIO;\n+\n+import static java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment;\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_OFF;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n+import static java.awt.image.BufferedImage.TYPE_3BYTE_BGR;\n+\n+\/*\n+ * @test\n+ * @bug 8312555\n+ * @summary Verifies that hieroglyphs are stretched by AffineTransform.scale(2, 1)\n+ * @run main StretchedFontTest\n+ *\/\n+public final class StretchedFontTest {\n+    private static final String TEXT = \"\\u6F22\";\n+    private static final int FONT_SIZE = 20;\n+\n+    private static final Color BACKGROUND = Color.WHITE;\n+    private static final Color[] FOREGROUNDS = {\n+            new Color(0xFF000000, true),\n+            new Color(0x7F000000, true)\n+    };\n+\n+    private static final AffineTransform STRETCH_TRANSFORM =\n+            AffineTransform.getScaleInstance(2.0, 1.0);\n+\n+    public static void main(String[] args) {\n+        List<String> errors =\n+                Arrays.stream(getLocalGraphicsEnvironment()\n+                              .getAvailableFontFamilyNames(Locale.ENGLISH))\n+                      .map(family -> new Font(family, Font.PLAIN, FONT_SIZE))\n+                      .filter(font -> font.canDisplay(TEXT.codePointAt(0)))\n+                      .map(font -> font.deriveFont(STRETCH_TRANSFORM))\n+                      .flatMap(StretchedFontTest::testFont)\n+                      .filter(Objects::nonNull)\n+                      .toList();\n+\n+        if (!errors.isEmpty()) {\n+            errors.forEach(System.err::println);\n+            throw new Error(errors.size() + \" failure(s) found;\"\n+                            + \" the first one: \" + errors.get(0));\n+        }\n+    }\n+\n+    \/**\n+     * Tests the font with a set of text antialiasing hints.\n+     *\n+     * @param font the font to test\n+     * @return a stream of test results\n+     * @see #testFont(Font, Object)\n+     *\/\n+    private static Stream<String> testFont(final Font font) {\n+        return Stream.of(VALUE_TEXT_ANTIALIAS_OFF,\n+                         VALUE_TEXT_ANTIALIAS_ON,\n+                         VALUE_TEXT_ANTIALIAS_LCD_HRGB)\n+                     .flatMap(hint -> testFont(font, hint));\n+    }\n+\n+    \/**\n+     * Tests the font with the specified text antialiasing hint and a set of\n+     * foreground colors.\n+     *\n+     * @param font the font to test\n+     * @param hint the text antialiasing hint to test\n+     * @return a stream of test results\n+     * @see #testFont(Font, Object, Color)\n+     *\/\n+    private static Stream<String> testFont(final Font font, final Object hint) {\n+        return Stream.of(FOREGROUNDS)\n+                     .map(foreground -> testFont(font, hint, foreground));\n+    }\n+\n+    \/**\n+     * Tests the font with the specified text antialiasing hint and\n+     * foreground color. In case of failure, it saves the rendered\n+     * image to a file.\n+     *\n+     * @param font the font to test\n+     * @param hint the text antialiasing hint to test\n+     * @param foreground the foreground color to use\n+     * @return {@code null} if the text rendered correctly; otherwise,\n+     *         a {@code String} with the font family name, the value of\n+     *         the rendering hint and the color in hex\n+     *\/\n+    private static String testFont(final Font font,\n+                                   final Object hint,\n+                                   final Color foreground) {\n+        final Dimension size = getTextSize(font);\n+        final BufferedImage image =\n+                new BufferedImage(size.width, size.height, TYPE_3BYTE_BGR);\n+\n+        final Graphics2D g2d = image.createGraphics();\n+        try {\n+            g2d.setColor(BACKGROUND);\n+            g2d.fillRect(0, 0, size.width, size.height);\n+\n+            g2d.setRenderingHint(KEY_TEXT_ANTIALIASING, hint);\n+            g2d.setColor(foreground);\n+            g2d.setFont(font);\n+            g2d.drawString(TEXT, 0, g2d.getFontMetrics(font).getAscent());\n+        } finally {\n+            g2d.dispose();\n+        }\n+\n+        if (verifyImage(image)) {\n+            return null;\n+        }\n+        String fontName = font.getFontName(Locale.ENGLISH);\n+        String hintValue = getHintString(hint);\n+        String hexColor = String.format(\"0x%08x\", foreground.getRGB());\n+        saveImage(image, fontName + \"-\" + hintValue + \"-\" + hexColor);\n+        return \"Font: \" + fontName + \", Hint: \" + hintValue + \", Color: \" + hexColor;\n+    }\n+\n+    \/**\n+     * Verifies the rendered image of the hieroglyph. The hieroglyph\n+     * should be stretched across the entire width of the image.\n+     * If the right half of the image contains only pixels of the background\n+     * color, the hieroglyph isn't stretched correctly\n+     * &mdash; it's a failure.\n+     *\n+     * @param image the image to verify\n+     * @return {@code true} if the hieroglyph is stretched correctly; or\n+     *         {@code false} if right half of the image contains only\n+     *         background-colored pixels, which means the hieroglyph isn't\n+     *         stretched.\n+     *\/\n+    private static boolean verifyImage(final BufferedImage image) {\n+        final int width = image.getWidth();\n+        final int height = image.getHeight();\n+        for (int x = width \/ 2; x < width; x++) {\n+            for (int y = 0; y < height; y++) {\n+                if (image.getRGB(x, y) != BACKGROUND.getRGB()) {\n+                    \/\/ Any other color but background means the glyph is stretched\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        \/\/ The right side of the image is filled with the background color only,\n+        \/\/ the glyph isn't stretched.\n+        return false;\n+    }\n+\n+    private static String getHintString(final Object hint) {\n+        if (hint == VALUE_TEXT_ANTIALIAS_OFF) {\n+            return \"off\";\n+        } else if (hint == VALUE_TEXT_ANTIALIAS_ON) {\n+            return \"on\";\n+        } else if (hint == VALUE_TEXT_ANTIALIAS_LCD_HRGB) {\n+            return \"lcd\";\n+        } else {\n+            throw new IllegalArgumentException(\"Unexpected hint: \" + hint);\n+        }\n+    }\n+\n+    private static final BufferedImage dummyImage =\n+            new BufferedImage(5, 5, TYPE_3BYTE_BGR);\n+\n+    private static Dimension getTextSize(final Font font) {\n+        final Graphics g = dummyImage.getGraphics();\n+        try {\n+            return g.getFontMetrics(font)\n+                    .getStringBounds(TEXT, g)\n+                    .getBounds()\n+                    .getSize();\n+        } finally {\n+            g.dispose();\n+        }\n+    }\n+\n+    private static void saveImage(final BufferedImage image,\n+                                  final String fileName) {\n+        try {\n+            ImageIO.write(image,\n+                          \"png\",\n+                          new File(fileName + \".png\"));\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/FontScaling\/StretchedFontTest.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.awt.AWTException;\n@@ -27,0 +28,1 @@\n+import java.awt.GraphicsDevice;\n@@ -28,0 +30,1 @@\n+import java.awt.Image;\n@@ -30,0 +33,1 @@\n+import java.awt.Robot;\n@@ -34,0 +38,3 @@\n+import java.awt.image.RenderedImage;\n+import java.io.File;\n+import java.io.IOException;\n@@ -36,0 +43,1 @@\n+import java.util.Arrays;\n@@ -39,0 +47,3 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.imageio.ImageIO;\n@@ -40,0 +51,2 @@\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n@@ -43,0 +56,1 @@\n+import javax.swing.JOptionPane;\n@@ -48,1 +62,0 @@\n-\n@@ -71,0 +84,1 @@\n+    private static final AtomicInteger imgCounter = new AtomicInteger(0);\n@@ -72,0 +86,1 @@\n+    private static Robot robot;\n@@ -117,0 +132,38 @@\n+        this(title, instructions, testTimeOut, rows, columns, false);\n+    }\n+\n+    \/**\n+     * Constructs a JFrame with a given title & serves as test instructional\n+     * frame where the user follows the specified test instruction in order\n+     * to test the test case & mark the test pass or fail. If the expected\n+     * result is seen then the user click on the 'Pass' button else click\n+     * on the 'Fail' button and the reason for the failure should be\n+     * specified in the JDialog JTextArea.\n+     * <p>\n+     * The test instruction frame also provides a way for the tester to take\n+     * a screenshot (full screen or individual frame) if this feature\n+     * is enabled by passing {@code true} as {@code  enableScreenCapture}\n+     * parameter.\n+     *\n+     * @param title        title of the Frame.\n+     * @param instructions the instruction for the tester on how to test\n+     *                     and what is expected (pass) and what is not\n+     *                     expected (fail).\n+     * @param testTimeOut  test timeout where time is specified in minutes.\n+     * @param rows         number of visible rows of the JTextArea where the\n+     *                     instruction is show.\n+     * @param columns      Number of columns of the instructional\n+     *                     JTextArea\n+     * @param enableScreenCapture if set to true, 'Capture Screen' button & its\n+     *                            associated UIs are added to test instruction\n+     *                            frame\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *                                   creating the test instruction frame on\n+     *                                   EDT\n+     *\/\n+    public PassFailJFrame(String title, String instructions, long testTimeOut,\n+                          int rows, int columns,\n+                          boolean enableScreenCapture) throws InterruptedException,\n+            InvocationTargetException {\n@@ -118,1 +171,2 @@\n-            createUI(title, instructions, testTimeOut, rows, columns);\n+            createUI(title, instructions, testTimeOut, rows, columns,\n+                    enableScreenCapture);\n@@ -121,1 +175,1 @@\n-                    rows, columns));\n+                    rows, columns, enableScreenCapture));\n@@ -125,0 +179,6 @@\n+    private PassFailJFrame(Builder builder) throws InterruptedException,\n+            InvocationTargetException {\n+        this(builder.title, builder.instructions, builder.testTimeOut,\n+                builder.rows, builder.columns, builder.screenCapture);\n+    }\n+\n@@ -126,1 +186,2 @@\n-                                 long testTimeOut, int rows, int columns) {\n+                                 long testTimeOut, int rows, int columns,\n+                                 boolean enableScreenCapture) {\n@@ -170,0 +231,4 @@\n+        if (enableScreenCapture) {\n+            buttonsPanel.add(createCapturePanel());\n+        }\n+\n@@ -187,0 +252,85 @@\n+    private static JComponent createCapturePanel() {\n+        JComboBox<CaptureType> screenShortType = new JComboBox<>(CaptureType.values());\n+\n+        JButton capture = new JButton(\"ScreenShot\");\n+        capture.addActionListener((e) ->\n+                captureScreen((CaptureType) screenShortType.getSelectedItem()));\n+\n+        JPanel panel = new JPanel();\n+        panel.add(screenShortType);\n+        panel.add(capture);\n+        return panel;\n+    }\n+\n+    private enum CaptureType {\n+        FULL_SCREEN(\"Capture Full Screen\"),\n+        WINDOWS(\"Capture Individual Frame\");\n+\n+        private final String type;\n+        CaptureType(String type) {\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return type;\n+        }\n+    }\n+\n+    private static Robot createRobot() {\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+            } catch (AWTException e) {\n+                String errorMsg = \"Failed to create an instance of Robot.\";\n+                JOptionPane.showMessageDialog(frame, errorMsg, \"Failed\",\n+                                              JOptionPane.ERROR_MESSAGE);\n+                forceFail(errorMsg + e.getMessage());\n+            }\n+        }\n+        return robot;\n+    }\n+\n+    private static void captureScreen(Rectangle bounds) {\n+        Robot robot = createRobot();\n+\n+        List<Image> imageList = robot.createMultiResolutionScreenCapture(bounds)\n+                                     .getResolutionVariants();\n+        Image image = imageList.get(imageList.size() - 1);\n+\n+        File file = new File(\"CaptureScreen_\"\n+                             + imgCounter.incrementAndGet() + \".png\");\n+        try {\n+            ImageIO.write((RenderedImage) image, \"png\", file);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void captureScreen(CaptureType type) {\n+        switch (type) {\n+            case FULL_SCREEN:\n+                Arrays.stream(GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                 .getScreenDevices())\n+                      .map(GraphicsDevice::getDefaultConfiguration)\n+                      .map(GraphicsConfiguration::getBounds)\n+                      .forEach(PassFailJFrame::captureScreen);\n+                break;\n+\n+            case WINDOWS:\n+                windowList.stream()\n+                          .filter(Window::isShowing)\n+                          .map(Window::getBounds)\n+                          .forEach(PassFailJFrame::captureScreen);\n+                break;\n+\n+            default:\n+                throw new IllegalStateException(\"Unexpected value of capture type\");\n+        }\n+\n+        JOptionPane.showMessageDialog(frame,\n+                                      \"Screen Captured Successfully\",\n+                                      \"Screen Capture\",\n+                                      JOptionPane.INFORMATION_MESSAGE);\n+    }\n+\n@@ -424,0 +574,68 @@\n+\n+    public static class Builder {\n+        private String title;\n+        private String instructions;\n+        private long testTimeOut;\n+        private int rows;\n+        private int columns;\n+        private boolean screenCapture = false;\n+\n+        public Builder title(String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        public Builder instructions(String instructions) {\n+            this.instructions = instructions;\n+            return this;\n+        }\n+\n+        public Builder testTimeOut(long testTimeOut) {\n+            this.testTimeOut = testTimeOut;\n+            return this;\n+        }\n+\n+        public Builder rows(int rows) {\n+            this.rows = rows;\n+            return this;\n+        }\n+\n+        public Builder columns(int columns) {\n+            this.columns = columns;\n+            return this;\n+        }\n+\n+        public Builder screenCapture() {\n+            this.screenCapture = true;\n+            return this;\n+        }\n+\n+        public PassFailJFrame build() throws InterruptedException,\n+                InvocationTargetException {\n+            validate();\n+            return new PassFailJFrame(this);\n+        }\n+\n+        private void validate() {\n+            if (this.title == null) {\n+                this.title = TITLE;\n+            }\n+\n+            if (this.instructions == null || this.instructions.length() == 0) {\n+                throw new RuntimeException(\"Please provide the test \" +\n+                        \"instruction for this manual test\");\n+            }\n+\n+            if (this.testTimeOut == 0L) {\n+                this.testTimeOut = TEST_TIMEOUT;\n+            }\n+\n+            if (this.rows == 0) {\n+                this.rows = ROWS;\n+            }\n+\n+            if (this.columns == 0) {\n+                this.columns = COLUMNS;\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":223,"deletions":5,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestByteBuffer\n+ * @run testng\/othervm\/timeout=600 --enable-native-access=ALL-UNNAMED TestByteBuffer\n@@ -85,1 +85,1 @@\n-    static Path tempPath;\n+    static final Path tempPath;\n@@ -112,7 +112,7 @@\n-    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100, JAVA_BYTE);\n-    static SequenceLayout chars = MemoryLayout.sequenceLayout(100, BB_CHAR);\n-    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100, BB_SHORT);\n-    static SequenceLayout ints = MemoryLayout.sequenceLayout(100, BB_INT);\n-    static SequenceLayout floats = MemoryLayout.sequenceLayout(100, BB_FLOAT);\n-    static SequenceLayout longs = MemoryLayout.sequenceLayout(100, BB_LONG);\n-    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100, BB_DOUBLE);\n+    static final SequenceLayout bytes = MemoryLayout.sequenceLayout(100, JAVA_BYTE);\n+    static final SequenceLayout chars = MemoryLayout.sequenceLayout(100, BB_CHAR);\n+    static final SequenceLayout shorts = MemoryLayout.sequenceLayout(100, BB_SHORT);\n+    static final SequenceLayout ints = MemoryLayout.sequenceLayout(100, BB_INT);\n+    static final SequenceLayout floats = MemoryLayout.sequenceLayout(100, BB_FLOAT);\n+    static final SequenceLayout longs = MemoryLayout.sequenceLayout(100, BB_LONG);\n+    static final SequenceLayout doubles = MemoryLayout.sequenceLayout(100, BB_DOUBLE);\n@@ -120,2 +120,2 @@\n-    static VarHandle indexHandle = tuples.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"index\"));\n-    static VarHandle valueHandle = tuples.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"value\"));\n+    static final VarHandle indexHandle = tuples.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"index\"));\n+    static final VarHandle valueHandle = tuples.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"value\"));\n@@ -341,1 +341,1 @@\n-    static final long LARGE_SIZE = 3L * 1024L * 1024L * 1024L; \/\/ 3GB\n+    static final long LARGE_SIZE = (2L * 1024L + 512L) * 1024L * 1024L; \/\/ 2.5 GiB\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.nio.ByteOrder;\n@@ -36,1 +37,1 @@\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n@@ -61,2 +62,2 @@\n-        MemorySegment segment = SymbolLookup.loaderLookup().find(\"c\").get().reinterpret(1);\n-        assertEquals(segment.get(JAVA_BYTE, 0), 42);\n+        MemorySegment segment = SymbolLookup.loaderLookup().find(\"c\").get().reinterpret(4);\n+        assertEquals(segment.get(JAVA_INT, 0), 42);\n","filename":"test\/jdk\/java\/foreign\/TestClassLoaderFindNative.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    private static final boolean IS_LE = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n@@ -115,1 +116,1 @@\n-                    \"Unsupported layout: [2:i4]\"\n+                    IS_LE ? \"Unsupported layout: [2:i4]\" : \"Unsupported layout: [2:I4]\"\n@@ -120,1 +121,1 @@\n-                    \"Unsupported layout: [2:i4]\"\n+                    IS_LE ? \"Unsupported layout: [2:i4]\" : \"Unsupported layout: [2:I4]\"\n@@ -125,1 +126,1 @@\n-                    \"Unsupported layout: 2%i4\"\n+                    IS_LE ? \"Unsupported layout: 2%i4\" : \"Unsupported layout: 2%I4\"\n@@ -130,1 +131,1 @@\n-                    \"Unsupported layout: 2%a8\"\n+                    IS_LE ? \"Unsupported layout: 2%a8\" : \"Unsupported layout: 2%A8\"\n@@ -135,1 +136,1 @@\n-                    \"Unsupported layout: 4%c2\"\n+                    IS_LE ? \"Unsupported layout: 4%c2\" : \"Unsupported layout: 4%C2\"\n@@ -144,1 +145,1 @@\n-                    \"Unsupported layout: 1%s2\"\n+                    IS_LE ? \"Unsupported layout: 1%s2\" : \"Unsupported layout: 1%S2\"\n@@ -154,1 +155,1 @@\n-                    \"Unsupported layout: 1%s2\"\n+                    IS_LE ? \"Unsupported layout: 1%s2\" : \"Unsupported layout: 1%S2\"\n@@ -162,1 +163,1 @@\n-                    \"Unsupported layout: 1%i4\"\n+                    IS_LE ? \"Unsupported layout: 1%i4\" : \"Unsupported layout: 1%I4\"\n@@ -175,1 +176,1 @@\n-                    \"Unsupported layout: I4\"\n+                    IS_LE ? \"Unsupported layout: I4\" : \"Unsupported layout: i4\"\n@@ -180,1 +181,1 @@\n-                    \"Unsupported layout: I4\"\n+                    IS_LE ? \"Unsupported layout: I4\" : \"Unsupported layout: i4\"\n@@ -185,1 +186,1 @@\n-                    \"Unsupported layout: I4\"\n+                    IS_LE ? \"Unsupported layout: I4\" : \"Unsupported layout: i4\"\n@@ -229,1 +230,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n@@ -30,1 +30,0 @@\n-import java.nio.file.Paths;\n@@ -60,5 +59,0 @@\n-            Paths.get(Utils.TEST_JDK)\n-                    .resolve(\"bin\")\n-                    .resolve(\"java\")\n-                    .toAbsolutePath()\n-                    .toString(),\n@@ -69,1 +63,0 @@\n-            \"-cp\", Utils.TEST_CLASS_PATH,\n@@ -73,3 +66,2 @@\n-        Process process = new ProcessBuilder()\n-            .command(command)\n-            .start();\n+\n+        Process process = ProcessTools.createTestJvm(command).start();\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,2 +74,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -79,1 +79,0 @@\n-            { vmStore(rax, long.class) }\n@@ -102,2 +101,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -109,1 +108,0 @@\n-            { vmStore(rax, long.class) },\n@@ -133,2 +131,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -140,1 +138,0 @@\n-            { vmStore(rax, long.class) },\n@@ -158,2 +155,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -169,1 +166,0 @@\n-            { vmStore(rax, long.class) },\n@@ -189,2 +185,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -202,1 +198,0 @@\n-            { vmStore(rax, long.class) },\n@@ -224,2 +219,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -247,1 +242,0 @@\n-            { vmStore(rax, long.class) },\n@@ -281,2 +275,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -300,1 +294,0 @@\n-            { vmStore(rax, long.class) },\n@@ -324,2 +317,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -330,1 +323,0 @@\n-            { vmStore(rax, long.class) },\n@@ -346,2 +338,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS));\n@@ -352,1 +344,0 @@\n-            { vmStore(rax, long.class) },\n@@ -405,2 +396,2 @@\n-        assertEquals(callingSequence.callerMethodType(), mt.appendParameterTypes(long.class).insertParameterTypes(0, MemorySegment.class, MemorySegment.class));\n-        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG).insertArgumentLayouts(0, ADDRESS, ADDRESS));\n+        assertEquals(callingSequence.callerMethodType(), mt.insertParameterTypes(0, MemorySegment.class, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), fd.insertArgumentLayouts(0, ADDRESS, ADDRESS));\n@@ -411,1 +402,0 @@\n-            { vmStore(rax, long.class) }\n@@ -437,2 +427,2 @@\n-        assertEquals(callingSequence.callerMethodType(), MethodType.methodType(void.class, MemorySegment.class, MemorySegment.class, long.class));\n-        assertEquals(callingSequence.functionDesc(), FunctionDescriptor.ofVoid(ADDRESS, C_POINTER, C_LONG));\n+        assertEquals(callingSequence.callerMethodType(), MethodType.methodType(void.class, MemorySegment.class, MemorySegment.class));\n+        assertEquals(callingSequence.functionDesc(), FunctionDescriptor.ofVoid(ADDRESS, C_POINTER));\n@@ -442,2 +432,1 @@\n-            { unboxAddress(), vmStore(rdi, long.class) },\n-            { vmStore(rax, long.class) }\n+            { unboxAddress(), vmStore(rdi, long.class) }\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":23,"deletions":34,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -306,1 +306,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/callarranger\/platform\/PlatformLayouts.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8314120\n+ * @summary Sanity test for FileDescriptor.sync\n+ * @library \/test\/lib\n+ * @run main Sync\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.SyncFailedException;\n+import jdk.test.lib.thread.VThreadRunner;\n+\n+public class Sync {\n+\n+    static final String TEST_DIR = System.getProperty(\"test.dir\", \".\");\n+    static final int TRIES = 10_000;\n+\n+    public static void testWith(File file) throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            FileDescriptor fd = fos.getFD();\n+            for (int t = 0; t < TRIES; t++) {\n+                fd.sync();\n+            }\n+        } catch (SyncFailedException sfe) {\n+            \/\/ Can happen on some filesystems, print it in the log\n+            System.out.println(\"Sync failed (acceptable)\");\n+            sfe.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Run on platform threads\n+        System.out.println(\"With platform threads\");\n+        run();\n+\n+        \/\/ Run on virtual threads\n+        System.out.println(\"With virtual threads\");\n+        VThreadRunner.run(Sync::run);\n+\n+        System.out.println(\"Complete\");\n+    }\n+\n+    private static class AutoDelete implements AutoCloseable {\n+        private final File file;\n+\n+        public AutoDelete(File file) {\n+            this.file = file;\n+        }\n+\n+        public File file() {\n+            return file;\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            file.delete();\n+        }\n+    }\n+\n+    public static void run() throws Exception {\n+        try (var w = new AutoDelete(new File(TEST_DIR, \"FileDescriptorSync1\"))) {\n+            testWith(w.file());\n+        }\n+\n+        try (var w = new AutoDelete(File.createTempFile(\"FileDescriptorSync2\", \"tmp\"))) {\n+            testWith(w.file());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/FileDescriptor\/Sync.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -42,0 +44,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform jdk.test.lib.net.IPSupport\n@@ -109,0 +113,3 @@\n+        if (!IPSupport.hasIPv6()) {\n+            return ExpectedOrder.IPV4_ONLY;\n+        }\n","filename":"test\/jdk\/java\/net\/InetAddress\/HostsFileOrderingTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n@@ -41,0 +43,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -131,11 +135,10 @@\n-\n-        \/\/ IPV6 tests\n-        addMappingToHostsFile(\"host-ipv6.sample-domain\", \"::1\", hostsFileName,\n-                true);\n-        testAddress = InetAddress.getByName(\"host-ipv6.sample-domain\");\n-        retrievedIpAddr = testAddress.getAddress();\n-        if (!Arrays.equals(retrievedIpAddr, expectedIpAddrIpv6_1)) {\n-            System.out.println(\"retrieved ipv6 addr == \" + Arrays.toString(retrievedIpAddr));\n-            System.out.println(\"expected ipv6 addr == \" + Arrays.toString(expectedIpAddrIpv6_1));\n-            throw new RuntimeException(\n-                    \"retrieved IPV6 Addr not equal to expected IPV6 Addr\");\n+        if (IPSupport.hasIPv6()) {\n+            addMappingToHostsFile(\"host-ipv6.sample-domain\", \"::1\", hostsFileName, true);\n+            testAddress = InetAddress.getByName(\"host-ipv6.sample-domain\");\n+            retrievedIpAddr = testAddress.getAddress();\n+            if (!Arrays.equals(retrievedIpAddr, expectedIpAddrIpv6_1)) {\n+                System.out.println(\"retrieved ipv6 addr == \" + Arrays.toString(retrievedIpAddr));\n+                System.out.println(\"expected ipv6 addr == \" + Arrays.toString(expectedIpAddrIpv6_1));\n+                throw new RuntimeException(\n+                        \"retrieved IPV6 Addr not equal to expected IPV6 Addr\");\n+            }\n","filename":"test\/jdk\/java\/net\/InetAddress\/InternalNameServiceTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n@@ -39,0 +41,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -55,6 +59,9 @@\n-        \/\/ ::1     ip6-localhost ip6-loopback\n-        testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n-        \/\/ fe00::0 ip6-localnet\n-        testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n-        \/\/ fe80::1 link-local-host\n-        testHostsMapping(expectedIpv6Address, \"link-local-host\");\n+\n+        if (IPSupport.hasIPv6()) {\n+            \/\/ ::1     ip6-localhost ip6-loopback\n+            testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n+            \/\/ fe00::0 ip6-localnet\n+            testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n+            \/\/ fe80::1 link-local-host\n+            testHostsMapping(expectedIpv6Address, \"link-local-host\");\n+        }\n@@ -64,3 +71,4 @@\n-        testReverseLookup(\"::1\", \"ip6-localhost\");\n-        testReverseLookup(\"0:0:0:0:0:0:0:1\", \"ip6-localhost\");\n-        testReverseLookup(\"0000:0000:0000:0000:0000:0000:0000:0001\", \"ip6-localhost\");\n+        if (IPSupport.hasIPv6()) {\n+            testReverseLookup(\"::1\", \"ip6-localhost\");\n+            testReverseLookup(\"0:0:0:0:0:0:0:1\", \"ip6-localhost\");\n+            testReverseLookup(\"0000:0000:0000:0000:0000:0000:0000:0001\", \"ip6-localhost\");\n@@ -68,3 +76,3 @@\n-        testReverseLookup(\"fe00::0\", \"ip6-localnet\");\n-        testReverseLookup(\"fe00:0:0:0:0:0:0:0\", \"ip6-localnet\");\n-        testReverseLookup(\"fe00:0000:0000:0000:0000:0000:0000:0000\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00::0\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00:0:0:0:0:0:0:0\", \"ip6-localnet\");\n+            testReverseLookup(\"fe00:0000:0000:0000:0000:0000:0000:0000\", \"ip6-localnet\");\n@@ -72,3 +80,4 @@\n-        testReverseLookup(\"fe80::1\", \"link-local-host\");\n-        testReverseLookup(\"fe80:000:0:00:0:000:00:1\", \"link-local-host\");\n-        testReverseLookup(\"fe80:0000:0000:0000:0000:0000:0000:0001\", \"link-local-host\");\n+            testReverseLookup(\"fe80::1\", \"link-local-host\");\n+            testReverseLookup(\"fe80:000:0:00:0:000:00:1\", \"link-local-host\");\n+            testReverseLookup(\"fe80:0000:0000:0000:0000:0000:0000:0001\", \"link-local-host\");\n+        }\n","filename":"test\/jdk\/java\/net\/InetAddress\/InternalNameServiceWithHostsFileTest.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8306040\n+ * @summary HttpResponseInputStream.available() returns 1 on empty stream\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @run junit\/othervm HttpInputStreamAvailableTest\n+ *\n+ *\/\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class HttpInputStreamAvailableTest {\n+\n+    private HttpServer server;\n+    private int port;\n+    static final String TEST_MESSAGE = \"This is test message\";\n+    static final int ZERO = 0;\n+\n+    @BeforeAll\n+    void setup() throws Exception {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress(loopback, 0);\n+        server = HttpServer.create(addr, 0);\n+        port = server.getAddress().getPort();\n+        FirstHandler fHandler = new FirstHandler();\n+        server.createContext(\"\/NonZeroResponse\/\", fHandler);\n+        SecondHandler sHandler = new SecondHandler();\n+        server.createContext(\"\/ZeroResponse\/\", sHandler);\n+        server.start();\n+    }\n+\n+    @AfterAll\n+    void teardown() throws Exception {\n+        server.stop(0);\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .proxy(HttpClient.Builder.NO_PROXY)\n+                .build();\n+\n+        URI uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/NonZeroResponse\/\")\n+                .build();\n+\n+        HttpRequest request = HttpRequest\n+                .newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        \/\/ Send a httpRequest and assert the bytes available\n+        HttpResponse<InputStream> response = client.send(request,\n+                HttpResponse.BodyHandlers.ofInputStream());\n+        try ( InputStream in = response.body()) {\n+            in.readNBytes(2);\n+            \/\/ this is not guaranteed, but a failure here would be surprising\n+            assertEquals(TEST_MESSAGE.length() - 2, in.available());\n+            \/\/read the remaining data\n+            in.readAllBytes();\n+            \/\/available should return 0\n+            assertEquals(ZERO, in.available());\n+        }\n+    }\n+\n+    @Test\n+    public void test1() throws Exception {\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .proxy(HttpClient.Builder.NO_PROXY)\n+                .build();\n+\n+        URI uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/ZeroResponse\/\")\n+                .build();\n+\n+        HttpRequest request = HttpRequest\n+                .newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        \/\/ Send a httpRequest and assert the bytes available\n+        HttpResponse<InputStream> response = client.send(request,\n+                HttpResponse.BodyHandlers.ofInputStream());\n+        try ( InputStream in = response.body()) {\n+            assertEquals(ZERO, in.available());\n+            in.readAllBytes();\n+            assertEquals(ZERO, in.available());\n+        }\n+    }\n+\n+    static class FirstHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            try ( OutputStream os = exchange.getResponseBody()) {\n+                byte[] workingResponse = TEST_MESSAGE.getBytes();\n+                exchange.sendResponseHeaders(200, workingResponse.length);\n+                os.write(workingResponse);\n+                os.flush();\n+            }\n+        }\n+    }\n+\n+    static class SecondHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(204, -1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpInputStreamAvailableTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8114830\n+ * @summary Verify FileAlreadyExistsException is not thrown for REPLACE_EXISTING\n+ * @library ..\n+ * @build CopyInterference\n+ * @run junit CopyInterference\n+ *\/\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.nio.file.CopyOption;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.FileSystemException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+\n+import static java.nio.file.StandardCopyOption.*;\n+import static java.nio.file.LinkOption.*;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class CopyInterference {\n+\n+    private static final int N_THREADS = 2;\n+\n+    private static final AtomicBoolean running = new AtomicBoolean(true);\n+\n+    private static class CopyTask implements Runnable {\n+        final Path source;\n+        final Path target;\n+        final CopyOption[] options;\n+\n+        CopyTask(Path source, Path target, CopyOption[] options) {\n+            this.source = source;\n+            this.target = target;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                while (running.get()) {\n+                    Files.copy(source, target, options);\n+                }\n+            } catch (FileAlreadyExistsException e) {\n+                throw new RuntimeException(\"Unexpected exception\", e);\n+            } catch (FileSystemException e) {\n+                System.out.printf(\"Expected FileSystemException: \\\"%s\\\"%n\",\n+                                  e.getMessage());\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Unexpected exception\", e);\n+            } finally {\n+                running.set(false);\n+            }\n+        }\n+    }\n+\n+    private static Stream<Arguments> pathAndOptionsProvider()\n+        throws IOException {\n+        Path parent = Path.of(System.getProperty(\"test.dir\", \".\"));\n+        Path dir = Files.createTempDirectory(parent, \"foobargus\");\n+\n+        List<Arguments> list = new ArrayList<Arguments>();\n+\n+        \/\/ regular file\n+        Path sourceFile = Files.createTempFile(dir, \"foo\", \"baz\");\n+        Class c = CopyInterference.class;\n+        String name = \"CopyInterference.class\";\n+\n+        try (InputStream in = c.getResourceAsStream(name)) {\n+            Files.copy(in, sourceFile, REPLACE_EXISTING);\n+        }\n+\n+        Arguments args = Arguments.of(sourceFile, dir.resolve(\"targetFile\"),\n+                                      new CopyOption[] {REPLACE_EXISTING});\n+        list.add(args);\n+\n+        \/\/ directory\n+        Path sourceDirectory = Files.createTempDirectory(dir, \"fubar\");\n+        args = Arguments.of(sourceDirectory, dir.resolve(\"targetDir\"),\n+                            new CopyOption[] {REPLACE_EXISTING});\n+        list.add(args);\n+\n+        if (TestUtil.supportsLinks(dir)) {\n+            \/\/ symbolic link, followed\n+            Path link = dir.resolve(\"link\");\n+            Files.createSymbolicLink(link, sourceFile);\n+            args = Arguments.of(link, dir.resolve(\"linkFollowed\"),\n+                                new CopyOption[] {REPLACE_EXISTING});\n+            list.add(args);\n+\n+            \/\/ symbolic link, not followed\n+            args = Arguments.of(link, dir.resolve(\"linkNotFollowed\"),\n+                                new CopyOption[] {REPLACE_EXISTING,\n+                                                  NOFOLLOW_LINKS});\n+            list.add(args);\n+        } else {\n+            System.out.println(\"Links not supported: not testing links\");\n+        }\n+\n+        return list.stream();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"pathAndOptionsProvider\")\n+    void copy(Path source, Path target, CopyOption[] options)\n+        throws InterruptedException, IOException {\n+\n+        Future<?>[] results = new Future<?>[N_THREADS];\n+        try (ExecutorService es = Executors.newFixedThreadPool(N_THREADS)) {\n+            CopyTask copyTask = new CopyTask(source, target, options);\n+            for (int i = 0; i < N_THREADS; i++)\n+                results[i] = es.submit(copyTask);\n+        }\n+\n+        for (Future<?> res : results) {\n+            try {\n+                res.get();\n+            } catch (ExecutionException e) {\n+                throw new RuntimeException(res.exceptionNow());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyInterference.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333\n+ * @bug 4313887 6838333 8062795\n@@ -170,2 +170,0 @@\n-        \/\/ create link (to file that doesn't exist) and test reading of\n-        \/\/ permissions\n@@ -173,0 +171,2 @@\n+            \/\/ create link (to file that doesn't exist) and test reading of\n+            \/\/ permissions\n@@ -188,0 +188,40 @@\n+\n+            \/\/ test that setting permissions on paths with and without\n+            \/\/ links succeeds when the NOFOLLOW_LINKS option is set\n+\n+            \/\/ ensure there are no links in the path to test\n+            Path realDir = dir.toRealPath();\n+\n+            \/\/ realDir\/a\/b\/c\/d\n+            Path leaf = realDir.resolve(Path.of(\"a\", \"b\", \"c\", \"d\"));\n+            Files.createDirectories(leaf);\n+\n+            \/\/ realDir\/a\/b\/c\/d\/FUBAR\n+            Path sansLinks = Files.createTempFile(leaf, \"FU\", \"BAR\");\n+\n+            PosixFileAttributeView sansView =\n+                Files.getFileAttributeView(sansLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ reinstate read permission\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_READ,\n+                                           PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ lien -> realDir\/a\/b\/c\n+            Path lien = realDir.resolve(Path.of(\"a\", \"lien\"));\n+            Files.createSymbolicLink(lien,\n+                                     realDir.resolve(Path.of(\"a\", \"b\", \"c\")));\n+\n+            \/\/ lien\/d\/FUBAR\n+            Path withLinks = lien.resolve(Path.of(\"d\"),\n+                                          sansLinks.getFileName());\n+\n+            PosixFileAttributeView withView =\n+                Files.getFileAttributeView(withLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/PosixFileAttributeView\/Basic.java","additions":44,"deletions":4,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4856968 7054918 8130181\n+ * @bug 4856968 7054918 8130181 8175874\n@@ -84,0 +84,13 @@\n+        \/\/ Ensure that providers inserted at positions outside of [1..n] are placed\n+        \/\/ at the n+1st position\n+        Security.removeProvider(p.getName());\n+        Security.insertProviderAt(p, 0);\n+        if (plen() != n + 1 || Security.getProviders()[n] != p) {\n+            throw new Exception(\"Provider inserted at zero not at pos n+1\");\n+        }\n+        Security.removeProvider(p.getName());\n+        Security.insertProviderAt(p, n + 5);\n+        if (plen() != n + 1 || Security.getProviders()[n] != p) {\n+            throw new Exception(\"Provider inserted at n+5 not at pos n+1\");\n+        }\n+\n","filename":"test\/jdk\/java\/security\/Provider\/ChangeProviders.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+            scope.join();\n@@ -676,16 +677,0 @@\n-    \/**\n-     * Test that shutdown prevents new threads from starting.\n-     *\/\n-    @Test\n-    void testShutdownWithFork() throws Exception {\n-        ThreadFactory factory = task -> null;\n-        try (var scope = new StructuredTaskScope<Object>(null, factory)) {\n-            scope.shutdown();\n-            \/\/ should not invoke the ThreadFactory to create thread\n-            Subtask<Void> subtask = scope.fork(() -> null);\n-            assertEquals(Subtask.State.UNAVAILABLE, subtask.state());\n-            assertThrows(IllegalStateException.class, subtask::get);\n-            assertThrows(IllegalStateException.class, subtask::exception);\n-        }\n-    }\n-\n@@ -1380,0 +1365,1 @@\n+            scope.join();\n","filename":"test\/jdk\/java\/util\/concurrent\/StructuredTaskScope\/StructuredTaskScopeTest.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2044,0 +2044,52 @@\n+    @Test\n+    public static void ciBackRefTest() {\n+        Pattern pattern = Pattern.compile(\"(?i)(a*)bc\\\\1\");\n+        check(pattern, \"zzzaabcazzz\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a*)bc\\\\1\");\n+        check(pattern, \"zzzaabcaazzz\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(abc)(def)\\\\1\");\n+        check(pattern, \"abcdefabc\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(abc)(def)\\\\3\");\n+        check(pattern, \"abcdefabc\", false);\n+\n+        for (int i = 1; i < 10; i++) {\n+            \/\/ Make sure backref 1-9 are always accepted\n+            pattern = Pattern.compile(\"(?i)abcdef\\\\\" + i);\n+            \/\/ and fail to match if the target group does not exit\n+            check(pattern, \"abcdef\", false);\n+        }\n+\n+        pattern = Pattern.compile(\"(?i)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\\\\11\");\n+        check(pattern, \"abcdefghija\", false);\n+        check(pattern, \"abcdefghija1\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\\\11\");\n+        check(pattern, \"abcdefghijkk\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a)bcdefghij\\\\11\");\n+        check(pattern, \"abcdefghija1\", true);\n+\n+        \/\/ Supplementary character tests\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a*)bc\\\\1\"));\n+        check(pattern, toSupplementaries(\"zzzaabcazzz\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a*)bc\\\\1\"));\n+        check(pattern, toSupplementaries(\"zzzaabcaazzz\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(abc)(def)\\\\1\"));\n+        check(pattern, toSupplementaries(\"abcdefabc\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(abc)(def)\\\\3\"));\n+        check(pattern, toSupplementaries(\"abcdefabc\"), false);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\\\\11\"));\n+        check(pattern, toSupplementaries(\"abcdefghija\"), false);\n+        check(pattern, toSupplementaries(\"abcdefghija1\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\\\11\"));\n+        check(pattern, toSupplementaries(\"abcdefghijkk\"), true);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4770745 6218846 6218848 6237956\n+ * @bug 4770745 6218846 6218848 6237956 8313765\n@@ -32,2 +32,0 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.BeforeAll;\n@@ -35,0 +33,2 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -37,1 +37,4 @@\n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n@@ -42,1 +45,0 @@\n-import java.util.Arrays;\n@@ -261,3 +263,3 @@\n-        short existingExtraLength = buffer.getShort(cenpos + CENEXT);\n-        buffer.putShort(cenpos+CENEXT, (short) (existingExtraLength + 1));\n-        assertZipException(\".*invalid zip64 extra data field size.*\");\n+        buffer.put(cenpos+CENEXT, (byte) 0xff);\n+        buffer.put(cenpos+CENEXT+1, (byte) 0xff);\n+        assertZipException(\".*extra data field size too long.*\");\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/CorruptedZipFiles.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,934 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Formatter;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipFile;\n+\n+\/* @test\n+ * @bug 8313765\n+ * @summary Validate that a Zip File with an Extra Header with a data size\n+ * of 0 can be read.\n+ * @run junit ReadNonStandardExtraHeadersTest\n+ *\/\n+public class ReadNonStandardExtraHeadersTest {\n+\n+    \/*\n+     * Byte array holding a ZIP file which contains an\n+     * Extra field header which has a data size of 0.\n+     *\n+     * ---------------#1--------------------\n+     * [Central Directory Header]\n+     *   0x664: Signature        : 0x02014b50\n+     *   0x668: Created Zip Spec :        0xa [1.0]\n+     *   0x669: Created OS       :        0x0 [MS-DOS]\n+     *   0x66a: VerMadeby        :        0xa [0, 1.0]\n+     *   0x66b: VerExtract       :        0xa [1.0]\n+     *   0x66c: Flag             :      0x800\n+     *   0x66e: Method           :        0x0 [STORED]\n+     *   0x670: Last Mod Time    : 0x385ca437 [Thu Feb 28 20:33:46 EST 2008]\n+     *   0x674: CRC              : 0x694c6952\n+     *   0x678: Compressed Size  :      0x624\n+     *   0x67c: Uncompressed Size:      0x624\n+     *   0x680: Name Length      :       0x1b\n+     *   0x682: Extra Length     :        0x7\n+     *          ->[tag=cafe, size=0]\n+     *   0x684: Comment Length   :        0x0\n+     *   0x686: Disk Start       :        0x0\n+     *   0x688: Attrs            :        0x0\n+     *   0x68a: AttrsEx          :        0x0\n+     *   0x68e: Loc Header Offset:        0x0\n+     *   0x692: File Name        : res\/drawable\/size_48x48.jpg\n+     *\n+     * [Local File Header]\n+     *     0x0: Signature   :   0x04034b50\n+     *     0x4: Version     :          0xa    [1.0]\n+     *     0x6: Flag        :        0x800\n+     *     0x8: Method      :          0x0    [STORED]\n+     *     0xa: LastMTime   :   0x385ca437    [Thu Feb 28 20:33:46 EST 2008]\n+     *     0xe: CRC         :   0x694c6952\n+     *    0x12: CSize       :        0x624\n+     *    0x16: Size        :        0x624\n+     *    0x1a: Name Length :         0x1b    [res\/drawable\/size_48x48.jpg]\n+     *    0x1c: ExtraLength :          0x7\n+     *          ->[tag=cafe, size=0]\n+     *    0x1e: File Name  : [res\/drawable\/size_48x48.jpg]\n+     *  [End Central Directory Header]\n+     *    Signature   :   0x06054b50\n+     *    ENDCEN Off  :        0x6b4\n+     *    Disk Entries:          0x1\n+     *    Total Entries:         0x1\n+     *    CEN Size    :         0x50\n+     *    Offset CEN  :        0x664\n+     *    Comment Len :          0x0 []\n+     *\/\n+    public static byte[] VALID_APK_FILE = {\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0xa, (byte) 0x0, (byte) 0x0, (byte) 0x8,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x37, (byte) 0xa4, (byte) 0x5c, (byte) 0x38, (byte) 0x52, (byte) 0x69,\n+            (byte) 0x4c, (byte) 0x69, (byte) 0x24, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x24, (byte) 0x6,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x1b, (byte) 0x0, (byte) 0x7, (byte) 0x0, (byte) 0x72, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2f, (byte) 0x64, (byte) 0x72, (byte) 0x61, (byte) 0x77, (byte) 0x61, (byte) 0x62,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x2f, (byte) 0x73, (byte) 0x69, (byte) 0x7a, (byte) 0x65, (byte) 0x5f,\n+            (byte) 0x34, (byte) 0x38, (byte) 0x78, (byte) 0x34, (byte) 0x38, (byte) 0x2e, (byte) 0x6a, (byte) 0x70,\n+            (byte) 0x67, (byte) 0xfe, (byte) 0xca, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0xff, (byte) 0xd8, (byte) 0xff, (byte) 0xe0, (byte) 0x0, (byte) 0x10, (byte) 0x4a, (byte) 0x46,\n+            (byte) 0x49, (byte) 0x46, (byte) 0x0, (byte) 0x1, (byte) 0x1, (byte) 0x1, (byte) 0x0, (byte) 0x48,\n+            (byte) 0x0, (byte) 0x48, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xfe, (byte) 0x0, (byte) 0x16,\n+            (byte) 0x28, (byte) 0x63, (byte) 0x29, (byte) 0x20, (byte) 0x32, (byte) 0x30, (byte) 0x30, (byte) 0x37,\n+            (byte) 0x20, (byte) 0x50, (byte) 0x68, (byte) 0x69, (byte) 0x6c, (byte) 0x20, (byte) 0x44, (byte) 0x75,\n+            (byte) 0x62, (byte) 0x61, (byte) 0x63, (byte) 0x68, (byte) 0xff, (byte) 0xdb, (byte) 0x0, (byte) 0x43,\n+            (byte) 0x0, (byte) 0x6, (byte) 0x4, (byte) 0x5, (byte) 0x6, (byte) 0x5, (byte) 0x4, (byte) 0x6,\n+            (byte) 0x6, (byte) 0x5, (byte) 0x6, (byte) 0x7, (byte) 0x7, (byte) 0x6, (byte) 0x8, (byte) 0xa,\n+            (byte) 0x10, (byte) 0xa, (byte) 0xa, (byte) 0x9, (byte) 0x9, (byte) 0xa, (byte) 0x14, (byte) 0xe,\n+            (byte) 0xf, (byte) 0xc, (byte) 0x10, (byte) 0x17, (byte) 0x14, (byte) 0x18, (byte) 0x18, (byte) 0x17,\n+            (byte) 0x14, (byte) 0x16, (byte) 0x16, (byte) 0x1a, (byte) 0x1d, (byte) 0x25, (byte) 0x1f, (byte) 0x1a,\n+            (byte) 0x1b, (byte) 0x23, (byte) 0x1c, (byte) 0x16, (byte) 0x16, (byte) 0x20, (byte) 0x2c, (byte) 0x20,\n+            (byte) 0x23, (byte) 0x26, (byte) 0x27, (byte) 0x29, (byte) 0x2a, (byte) 0x29, (byte) 0x19, (byte) 0x1f,\n+            (byte) 0x2d, (byte) 0x30, (byte) 0x2d, (byte) 0x28, (byte) 0x30, (byte) 0x25, (byte) 0x28, (byte) 0x29,\n+            (byte) 0x28, (byte) 0xff, (byte) 0xdb, (byte) 0x0, (byte) 0x43, (byte) 0x1, (byte) 0x7, (byte) 0x7,\n+            (byte) 0x7, (byte) 0xa, (byte) 0x8, (byte) 0xa, (byte) 0x13, (byte) 0xa, (byte) 0xa, (byte) 0x13,\n+            (byte) 0x28, (byte) 0x1a, (byte) 0x16, (byte) 0x1a, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28,\n+            (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0x28, (byte) 0xff, (byte) 0xc0,\n+            (byte) 0x0, (byte) 0x11, (byte) 0x8, (byte) 0x0, (byte) 0x30, (byte) 0x0, (byte) 0x30, (byte) 0x3,\n+            (byte) 0x1, (byte) 0x11, (byte) 0x0, (byte) 0x2, (byte) 0x11, (byte) 0x1, (byte) 0x3, (byte) 0x11,\n+            (byte) 0x1, (byte) 0xff, (byte) 0xc4, (byte) 0x0, (byte) 0x1b, (byte) 0x0, (byte) 0x0, (byte) 0x2,\n+            (byte) 0x2, (byte) 0x3, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0x5,\n+            (byte) 0x6, (byte) 0x7, (byte) 0x1, (byte) 0x3, (byte) 0x8, (byte) 0x2, (byte) 0xff, (byte) 0xc4,\n+            (byte) 0x0, (byte) 0x2e, (byte) 0x10, (byte) 0x0, (byte) 0x2, (byte) 0x2, (byte) 0x1, (byte) 0x2,\n+            (byte) 0x4, (byte) 0x4, (byte) 0x5, (byte) 0x4, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x2, (byte) 0x3, (byte) 0x4, (byte) 0x11,\n+            (byte) 0x0, (byte) 0x5, (byte) 0x6, (byte) 0x12, (byte) 0x21, (byte) 0x31, (byte) 0x41, (byte) 0x51,\n+            (byte) 0x61, (byte) 0x71, (byte) 0x7, (byte) 0x13, (byte) 0x22, (byte) 0x42, (byte) 0x91, (byte) 0x33,\n+            (byte) 0x62, (byte) 0x81, (byte) 0xa1, (byte) 0x52, (byte) 0xd1, (byte) 0xf0, (byte) 0xff, (byte) 0xc4,\n+            (byte) 0x0, (byte) 0x1b, (byte) 0x1, (byte) 0x0, (byte) 0x1, (byte) 0x5, (byte) 0x1, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x6, (byte) 0x2, (byte) 0x3, (byte) 0x4, (byte) 0x5,\n+            (byte) 0x7, (byte) 0x1, (byte) 0x0, (byte) 0xff, (byte) 0xc4, (byte) 0x0, (byte) 0x33, (byte) 0x11,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x3, (byte) 0x2, (byte) 0x4, (byte) 0x4, (byte) 0x4, (byte) 0x4,\n+            (byte) 0x5, (byte) 0x5, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x0, (byte) 0x2, (byte) 0x3, (byte) 0x4, (byte) 0x11, (byte) 0x5, (byte) 0x12,\n+            (byte) 0x21, (byte) 0x31, (byte) 0x13, (byte) 0x51, (byte) 0x61, (byte) 0x71, (byte) 0x6, (byte) 0x32,\n+            (byte) 0x41, (byte) 0x81, (byte) 0x91, (byte) 0xa1, (byte) 0xb1, (byte) 0xc1, (byte) 0x7, (byte) 0x14,\n+            (byte) 0x42, (byte) 0xd1, (byte) 0xf0, (byte) 0x22, (byte) 0x33, (byte) 0x62, (byte) 0xa2, (byte) 0xf1,\n+            (byte) 0xff, (byte) 0xda, (byte) 0x0, (byte) 0xc, (byte) 0x3, (byte) 0x1, (byte) 0x0, (byte) 0x2,\n+            (byte) 0x11, (byte) 0x3, (byte) 0x11, (byte) 0x0, (byte) 0x3f, (byte) 0x0, (byte) 0xb4, (byte) 0x11,\n+            (byte) 0xf4, (byte) 0x4c, (byte) 0xa, (byte) 0x12, (byte) 0x7b, (byte) 0x16, (byte) 0x2e, (byte) 0x5d,\n+            (byte) 0xaf, (byte) 0x46, (byte) 0xac, (byte) 0x96, (byte) 0x6e, (byte) 0xcf, (byte) 0x1c, (byte) 0x10,\n+            (byte) 0x46, (byte) 0x32, (byte) 0xd2, (byte) 0x48, (byte) 0xd8, (byte) 0x3, (byte) 0x48, (byte) 0x96,\n+            (byte) 0x46, (byte) 0x44, (byte) 0xd2, (byte) 0xf7, (byte) 0x9b, (byte) 0x0, (byte) 0x91, (byte) 0x5,\n+            (byte) 0x24, (byte) 0xd5, (byte) 0x52, (byte) 0x8, (byte) 0x60, (byte) 0x69, (byte) 0x73, (byte) 0x8e,\n+            (byte) 0xc0, (byte) 0x6f, (byte) 0xfc, (byte) 0xfa, (byte) 0x28, (byte) 0x26, (byte) 0xe5, (byte) 0xf1,\n+            (byte) 0x5f, (byte) 0x6b, (byte) 0x82, (byte) 0x52, (byte) 0x9b, (byte) 0x7d, (byte) 0x3b, (byte) 0x17,\n+            (byte) 0x0, (byte) 0x38, (byte) 0xe7, (byte) 0x62, (byte) 0x22, (byte) 0x53, (byte) 0xea, (byte) 0x32,\n+            (byte) 0x9, (byte) 0xfc, (byte) 0x81, (byte) 0xaa, (byte) 0x19, (byte) 0xfc, (byte) 0x43, (byte) 0x13,\n+            (byte) 0xd, (byte) 0xa3, (byte) 0x69, (byte) 0x77, (byte) 0xcb, (byte) 0xf7, (byte) 0x47, (byte) 0xb4,\n+            (byte) 0x1f, (byte) 0x86, (byte) 0x95, (byte) 0xd3, (byte) 0xb7, (byte) 0x35, (byte) 0x4c, (byte) 0xad,\n+            (byte) 0x8f, (byte) 0xa5, (byte) 0xb3, (byte) 0x1f, (byte) 0x7d, (byte) 0x40, (byte) 0xf8, (byte) 0x12,\n+            (byte) 0x8a, (byte) 0xd9, (byte) 0x7e, (byte) 0x26, (byte) 0x6d, (byte) 0xb7, (byte) 0x98, (byte) 0x8b,\n+            (byte) 0x95, (byte) 0x2c, (byte) 0xd3, (byte) 0x3, (byte) 0xbc, (byte) 0x9f, (byte) 0xaa, (byte) 0x8b,\n+            (byte) 0xee, (byte) 0x40, (byte) 0xc8, (byte) 0xfc, (byte) 0x6b, (byte) 0xb4, (byte) 0xf8, (byte) 0xfc,\n+            (byte) 0x52, (byte) 0x7f, (byte) 0x71, (byte) 0xa5, (byte) 0xbd, (byte) 0x77, (byte) 0x1e, (byte) 0xff,\n+            (byte) 0x0, (byte) 0xf1, (byte) 0x7b, (byte) 0x10, (byte) 0xfc, (byte) 0x34, (byte) 0xc4, (byte) 0x29,\n+            (byte) 0x9b, (byte) 0x9e, (byte) 0x9a, (byte) 0x46, (byte) 0xcb, (byte) 0xd3, (byte) 0xca, (byte) 0xef,\n+            (byte) 0x6b, (byte) 0x92, (byte) 0xf, (byte) 0xc4, (byte) 0x29, (byte) 0xd4, (byte) 0x13, (byte) 0x47,\n+            (byte) 0x62, (byte) 0x14, (byte) 0x9a, (byte) 0x9, (byte) 0x12, (byte) 0x58, (byte) 0x9c, (byte) 0x73,\n+            (byte) 0x2b, (byte) 0xa1, (byte) 0x4, (byte) 0x30, (byte) 0xf3, (byte) 0x7, (byte) 0x57, (byte) 0xac,\n+            (byte) 0x7b, (byte) 0x5e, (byte) 0xd0, (byte) 0xe6, (byte) 0x9b, (byte) 0x82, (byte) 0x80, (byte) 0x24,\n+            (byte) 0x82, (byte) 0x48, (byte) 0x1e, (byte) 0x62, (byte) 0x95, (byte) 0xa5, (byte) 0xae, (byte) 0x1a,\n+            (byte) 0x10, (byte) 0x45, (byte) 0x88, (byte) 0x3d, (byte) 0x42, (byte) 0xf7, (byte) 0x83, (byte) 0xae,\n+            (byte) 0xdd, (byte) 0x75, (byte) 0xa1, (byte) 0x2, (byte) 0xd2, (byte) 0x47, (byte) 0x1a, (byte) 0x33,\n+            (byte) 0xbb, (byte) 0x5, (byte) 0x45, (byte) 0x5, (byte) 0x99, (byte) 0x89, (byte) 0xc0, (byte) 0x0,\n+            (byte) 0x77, (byte) 0x27, (byte) 0x49, (byte) 0xce, (byte) 0x0, (byte) 0xb9, (byte) 0x53, (byte) 0xcc,\n+            (byte) 0x2e, (byte) 0x71, (byte) 0xb0, (byte) 0x17, (byte) 0x25, (byte) 0x73, (byte) 0xff, (byte) 0x0,\n+            (byte) 0x1d, (byte) 0x71, (byte) 0x54, (byte) 0xfc, (byte) 0x4f, (byte) 0xba, (byte) 0x30, (byte) 0x46,\n+            (byte) 0x64, (byte) 0xdb, (byte) 0x21, (byte) 0x62, (byte) 0x2b, (byte) 0xc5, (byte) 0xdb, (byte) 0x3f,\n+            (byte) 0xbd, (byte) 0x87, (byte) 0xf9, (byte) 0x1f, (byte) 0xe8, (byte) 0x74, (byte) 0xf3, (byte) 0xc8,\n+            (byte) 0x46, (byte) 0x25, (byte) 0x5e, (byte) 0xea, (byte) 0xb9, (byte) 0x3f, (byte) 0xc4, (byte) 0x6c,\n+            (byte) 0x3e, (byte) 0xeb, (byte) 0x6d, (byte) 0xf0, (byte) 0xbf, (byte) 0x87, (byte) 0xa3, (byte) 0xc2,\n+            (byte) 0xa0, (byte) 0x5, (byte) 0xc2, (byte) 0xf2, (byte) 0xbb, (byte) 0xcc, (byte) 0x7e, (byte) 0xc3,\n+            (byte) 0xa0, (byte) 0xf9, (byte) 0x9d, (byte) 0x79, (byte) 0x59, (byte) 0xa, (byte) 0x2e, (byte) 0x7,\n+            (byte) 0x4d, (byte) 0x54, (byte) 0x92, (byte) 0x8c, (byte) 0xd8, (byte) 0xdb, (byte) 0x29, (byte) 0x1f,\n+            (byte) 0xe, (byte) 0x55, (byte) 0xbc, (byte) 0x86, (byte) 0x69, (byte) 0xea, (byte) 0x30, (byte) 0xc,\n+            (byte) 0x22, (byte) 0x62, (byte) 0x63, (byte) 0x75, (byte) 0x24, (byte) 0x48, (byte) 0x83, (byte) 0xbe,\n+            (byte) 0x7d, (byte) 0x3b, (byte) 0x75, (byte) 0x3e, (byte) 0x24, (byte) 0xe, (byte) 0xe4, (byte) 0x69,\n+            (byte) 0xe8, (byte) 0xc, (byte) 0x8c, (byte) 0xbb, (byte) 0xd8, (byte) 0xa2, (byte) 0x56, (byte) 0x54,\n+            (byte) 0xd3, (byte) 0x87, (byte) 0x32, (byte) 0x9, (byte) 0x4e, (byte) 0xae, (byte) 0x3a, (byte) 0x5b,\n+            (byte) 0xd3, (byte) 0xaa, (byte) 0x7f, (byte) 0xc0, (byte) 0x7c, (byte) 0x5e, (byte) 0xdb, (byte) 0x2d,\n+            (byte) 0xd1, (byte) 0x5, (byte) 0xd9, (byte) 0x11, (byte) 0x36, (byte) 0xb9, (byte) 0x64, (byte) 0xc3,\n+            (byte) 0x87, (byte) 0x6c, (byte) 0x8, (byte) 0x89, (byte) 0xfb, (byte) 0x86, (byte) 0x7b, (byte) 0xf,\n+            (byte) 0x3d, (byte) 0x59, (byte) 0xe1, (byte) 0x38, (byte) 0x8b, (byte) 0xa0, (byte) 0x7e, (byte) 0x43,\n+            (byte) 0xe5, (byte) 0x3e, (byte) 0x9c, (byte) 0xba, (byte) 0xa1, (byte) 0x6f, (byte) 0x1b, (byte) 0x78,\n+            (byte) 0x6e, (byte) 0x9a, (byte) 0xbe, (byte) 0x98, (byte) 0xd5, (byte) 0x5c, (byte) 0x36, (byte) 0x66,\n+            (byte) 0xd, (byte) 0x9, (byte) 0xb0, (byte) 0xcd, (byte) 0x6f, (byte) 0xd2, (byte) 0x6f, (byte) 0xfe,\n+            (byte) 0xbc, (byte) 0x8f, (byte) 0x4b, (byte) 0xab, (byte) 0xa6, (byte) 0xad, (byte) 0x9a, (byte) 0xf7,\n+            (byte) 0x2b, (byte) 0xa4, (byte) 0xf4, (byte) 0xe7, (byte) 0x86, (byte) 0xc4, (byte) 0xf, (byte) 0xd5,\n+            (byte) 0x65, (byte) 0x85, (byte) 0xc3, (byte) 0xab, (byte) 0x7b, (byte) 0x11, (byte) 0xd0, (byte) 0xe8,\n+            (byte) 0xc5, (byte) 0xaf, (byte) 0xe, (byte) 0x17, (byte) 0x69, (byte) 0xba, (byte) 0xc2, (byte) 0xf2,\n+            (byte) 0x16, (byte) 0x9b, (byte) 0x38, (byte) 0x59, (byte) 0x40, (byte) 0x78, (byte) 0xd6, (byte) 0xf3,\n+            (byte) 0xa7, (byte) 0x8, (byte) 0xee, (byte) 0xe6, (byte) 0x33, (byte) 0xf5, (byte) 0x1a, (byte) 0xec,\n+            (byte) 0xbd, (byte) 0x3c, (byte) 0x8f, (byte) 0x43, (byte) 0xfd, (byte) 0x13, (byte) 0xaa, (byte) 0xea,\n+            (byte) 0xd9, (byte) 0x4f, (byte) 0x1, (byte) 0xe0, (byte) 0x72, (byte) 0x45, (byte) 0x78, (byte) 0x4c,\n+            (byte) 0x2d, (byte) 0xfc, (byte) 0xf4, (byte) 0x39, (byte) 0xb6, (byte) 0xcc, (byte) 0x3e, (byte) 0x5b,\n+            (byte) 0x7c, (byte) 0xd5, (byte) 0xb, (byte) 0x59, (byte) 0xb3, (byte) 0xa0, (byte) 0xd7, (byte) 0x85,\n+            (byte) 0xb5, (byte) 0x53, (byte) 0x3e, (byte) 0xe9, (byte) 0xe6, (byte) 0xc6, (byte) 0x6a, (byte) 0x35,\n+            (byte) 0xe4, (byte) 0x5d, (byte) 0xc1, (byte) 0x9d, (byte) 0x6b, (byte) 0xb0, (byte) 0x21, (byte) 0x9a,\n+            (byte) 0x3c, (byte) 0x64, (byte) 0x7a, (byte) 0x8c, (byte) 0xe9, (byte) 0xa6, (byte) 0xe5, (byte) 0x7,\n+            (byte) 0xfa, (byte) 0xb6, (byte) 0x53, (byte) 0xe5, (byte) 0x74, (byte) 0x9c, (byte) 0x33, (byte) 0xc2,\n+            (byte) 0xf3, (byte) 0x75, (byte) 0x5b, (byte) 0xa5, (byte) 0xdf, (byte) 0x61, (byte) 0xda, (byte) 0x4f,\n+            (byte) 0xc9, (byte) 0xb7, (byte) 0x3d, (byte) 0xc6, (byte) 0x4b, (byte) 0x32, (byte) 0x34, (byte) 0xb,\n+            (byte) 0x65, (byte) 0x47, (byte) 0x53, (byte) 0x0, (byte) 0xc1, (byte) 0x18, (byte) 0xcf, (byte) 0x7f,\n+            (byte) 0xbb, (byte) 0xa7, (byte) 0x99, (byte) 0xf5, (byte) 0x3a, (byte) 0x71, (byte) 0xb1, (byte) 0x49,\n+            (byte) 0x35, (byte) 0xf2, (byte) 0x1d, (byte) 0x96, (byte) 0x6f, (byte) 0x8d, (byte) 0x62, (byte) 0x2f,\n+            (byte) 0xa2, (byte) 0xc5, (byte) 0x44, (byte) 0xf1, (byte) 0x58, (byte) 0x90, (byte) 0xdb, (byte) 0x5b,\n+            (byte) 0x70, (byte) 0xe, (byte) 0xbb, (byte) 0xf5, (byte) 0x6, (byte) 0xc5, (byte) 0x19, (byte) 0xc5,\n+            (byte) 0xd4, (byte) 0xf6, (byte) 0xad, (byte) 0xbe, (byte) 0x18, (byte) 0x2d, (byte) 0x52, (byte) 0x13,\n+            (byte) 0xd9, (byte) 0x2e, (byte) 0x3, (byte) 0x27, (byte) 0x2c, (byte) 0x79, (byte) 0x3c, (byte) 0x84,\n+            (byte) 0x2, (byte) 0xf, (byte) 0x29, (byte) 0x39, (byte) 0xd, (byte) 0xea, (byte) 0x7d, (byte) 0x3b,\n+            (byte) 0x75, (byte) 0xcb, (byte) 0x70, (byte) 0xe7, (byte) 0x75, (byte) 0xe2, (byte) 0x6, (byte) 0xdc,\n+            (byte) 0xfd, (byte) 0x2, (byte) 0x8d, (byte) 0x84, (byte) 0xe2, (byte) 0x74, (byte) 0xfc, (byte) 0x73,\n+            (byte) 0x55, (byte) 0x5d, (byte) 0x1b, (byte) 0xa6, (byte) 0x94, (byte) 0xed, (byte) 0xb1, (byte) 0xb7,\n+            (byte) 0x60, (byte) 0x4f, (byte) 0xc3, (byte) 0x4d, (byte) 0x3d, (byte) 0x2, (byte) 0xb9, (byte) 0xf8,\n+            (byte) 0x3, (byte) 0x88, (byte) 0xdb, (byte) 0x88, (byte) 0xf6, (byte) 0x48, (byte) 0x67, (byte) 0x6d,\n+            (byte) 0xaf, (byte) 0x72, (byte) 0xa5, (byte) 0xcb, (byte) 0x1a, (byte) 0xab, (byte) 0x49, (byte) 0x6e,\n+            (byte) 0x25, (byte) 0x45, (byte) 0x99, (byte) 0x80, (byte) 0xc3, (byte) 0x14, (byte) 0xc3, (byte) 0x12,\n+            (byte) 0x46, (byte) 0x41, (byte) 0xee, (byte) 0x6, (byte) 0x8f, (byte) 0x68, (byte) 0xe7, (byte) 0x32,\n+            (byte) 0xc4, (byte) 0xd2, (byte) 0x79, (byte) 0x6f, (byte) 0xe8, (byte) 0x4a, (byte) 0x2, (byte) 0xc5,\n+            (byte) 0x29, (byte) 0x44, (byte) 0x15, (byte) 0x52, (byte) 0x34, (byte) 0x2, (byte) 0xd1, (byte) 0x72,\n+            (byte) 0x43, (byte) 0x48, (byte) 0xb1, (byte) 0x0, (byte) 0xea, (byte) 0x1, (byte) 0x1d, (byte) 0x88,\n+            (byte) 0x49, (byte) 0xae, (byte) 0xc0, (byte) 0x96, (byte) 0xea, (byte) 0x4f, (byte) 0x5a, (byte) 0x6f,\n+            (byte) 0xd2, (byte) 0x9a, (byte) 0x36, (byte) 0x8d, (byte) 0xbd, (byte) 0x88, (byte) 0xc1, (byte) 0xd4,\n+            (byte) 0x77, (byte) 0x8c, (byte) 0xcd, (byte) 0x2d, (byte) 0x3e, (byte) 0xaa, (byte) 0xce, (byte) 0x37,\n+            (byte) 0x18, (byte) 0x9e, (byte) 0x24, (byte) 0x6e, (byte) 0xe0, (byte) 0xdf, (byte) 0xe0, (byte) 0xb9,\n+            (byte) 0xfa, (byte) 0x4a, (byte) 0xf3, (byte) 0x50, (byte) 0xbd, (byte) 0x3d, (byte) 0x4b, (byte) 0x0,\n+            (byte) 0xac, (byte) 0xd0, (byte) 0xb9, (byte) 0x46, (byte) 0x1e, (byte) 0xa3, (byte) 0xc7, (byte) 0xdb,\n+            (byte) 0x42, (byte) 0xd3, (byte) 0x30, (byte) 0xb4, (byte) 0x90, (byte) 0x56, (byte) 0xaf, (byte) 0x86,\n+            (byte) 0xd4, (byte) 0x89, (byte) 0x58, (byte) 0x1e, (byte) 0xd3, (byte) 0xa1, (byte) 0x4c, (byte) 0x76,\n+            (byte) 0xe1, (byte) 0x1b, (byte) 0xdc, (byte) 0x84, (byte) 0xd9, (byte) 0x23, (byte) 0xe4, (byte) 0x2b,\n+            (byte) 0x7, (byte) 0x91, (byte) 0x73, (byte) 0x8e, (byte) 0x65, (byte) 0x1d, (byte) 0x48, (byte) 0xf7,\n+            (byte) 0x20, (byte) 0x11, (byte) 0xfc, (byte) 0xea, (byte) 0x31, (byte) 0xd1, (byte) 0x59, (byte) 0x55,\n+            (byte) 0x36, (byte) 0x69, (byte) 0x20, (byte) 0x73, (byte) 0x62, (byte) 0x75, (byte) 0x9c, (byte) 0x74,\n+            (byte) 0x1d, (byte) 0x2f, (byte) 0xa5, (byte) 0xfd, (byte) 0xb7, (byte) 0xf6, (byte) 0x52, (byte) 0x7b,\n+            (byte) 0xd3, (byte) 0x52, (byte) 0xde, (byte) 0x52, (byte) 0x2b, (byte) 0x97, (byte) 0xab, (byte) 0x6,\n+            (byte) 0x44, (byte) 0x95, (byte) 0x5a, (byte) 0x34, (byte) 0xce, (byte) 0x3e, (byte) 0x5a, (byte) 0x82,\n+            (byte) 0xa0, (byte) 0x9f, (byte) 0xe, (byte) 0xfd, (byte) 0x7d, (byte) 0x87, (byte) 0xe7, (byte) 0x4c,\n+            (byte) 0xc, (byte) 0xf1, (byte) 0x13, (byte) 0xc2, (byte) 0x36, (byte) 0xb8, (byte) 0x59, (byte) 0xdc,\n+            (byte) 0xf8, (byte) 0x23, (byte) 0xdd, (byte) 0x59, (byte) 0x25, (byte) 0x2d, (byte) 0x35, (byte) 0xdd,\n+            (byte) 0xc3, (byte) 0x0, (byte) 0x9e, (byte) 0xa7, (byte) 0x7b, (byte) 0x77, (byte) 0x20, (byte) 0xe9,\n+            (byte) 0xd9, (byte) 0x1, (byte) 0x7e, (byte) 0xed, (byte) 0xcd, (byte) 0xd4, (byte) 0xc5, (byte) 0x16,\n+            (byte) 0xcc, (byte) 0xcb, (byte) 0x60, (byte) 0xca, (byte) 0xe1, (byte) 0xd, (byte) 0x76, (byte) 0x24,\n+            (byte) 0x16, (byte) 0x70, (byte) 0x70, (byte) 0x1, (byte) 0xfd, (byte) 0xd8, (byte) 0xc7, (byte) 0x5f,\n+            (byte) 0x51, (byte) 0x9e, (byte) 0xd8, (byte) 0xd3, (byte) 0xd1, (byte) 0x42, (byte) 0x1, (byte) 0x11,\n+            (byte) 0xbe, (byte) 0xf7, (byte) 0x3c, (byte) 0xb9, (byte) 0xfd, (byte) 0xd5, (byte) 0x9e, (byte) 0xd,\n+            (byte) 0x1d, (byte) 0x4c, (byte) 0x14, (byte) 0xe7, (byte) 0x10, (byte) 0xa0, (byte) 0x94, (byte) 0x59,\n+            (byte) 0xb7, (byte) 0xce, (byte) 0xc7, (byte) 0xed, (byte) 0xa6, (byte) 0xfa, (byte) 0xfa, (byte) 0x5c,\n+            (byte) 0x6b, (byte) 0xe9, (byte) 0xd4, (byte) 0x9b, (byte) 0x2b, (byte) 0xe3, (byte) 0x82, (byte) 0x23,\n+            (byte) 0x9a, (byte) 0xaf, (byte) 0xc, (byte) 0xd1, (byte) 0xa9, (byte) 0x6a, (byte) 0x8c, (byte) 0xd4,\n+            (byte) 0x6c, (byte) 0x57, (byte) 0x4f, (byte) 0x97, (byte) 0x24, (byte) 0x32, (byte) 0xb2, (byte) 0x3f,\n+            (byte) 0xd5, (byte) 0xdc, (byte) 0xb0, (byte) 0x64, (byte) 0x24, (byte) 0x15, (byte) 0x24, (byte) 0x92,\n+            (byte) 0xe, (byte) 0x7f, (byte) 0x81, (byte) 0xa3, (byte) 0x8a, (byte) 0x48, (byte) 0xf8, (byte) 0x10,\n+            (byte) 0xb6, (byte) 0x2e, (byte) 0x4b, (byte) 0x3c, (byte) 0xc5, (byte) 0xaa, (byte) 0xce, (byte) 0x21,\n+            (byte) 0x5b, (byte) 0x25, (byte) 0x5b, (byte) 0xbf, (byte) 0x59, (byte) 0xbf, (byte) 0x61, (byte) 0xb0,\n+            (byte) 0x1e, (byte) 0xc0, (byte) 0x4, (byte) 0xbe, (byte) 0x6a, (byte) 0xf9, (byte) 0xce, (byte) 0x35,\n+            (byte) 0xe7, (byte) 0x35, (byte) 0x4b, (byte) 0x50, (byte) 0xe, (byte) 0x3c, (byte) 0xe1, (byte) 0x64,\n+            (byte) 0xdc, (byte) 0xe5, (byte) 0x4b, (byte) 0x35, (byte) 0xf1, (byte) 0x15, (byte) 0xe0, (byte) 0x30,\n+            (byte) 0x5b, (byte) 0xc2, (byte) 0x41, (byte) 0xe0, (byte) 0x1b, (byte) 0xfd, (byte) 0xff, (byte) 0x0,\n+            (byte) 0xc2, (byte) 0xae, (byte) 0xae, (byte) 0x97, (byte) 0x89, (byte) 0xa8, (byte) 0xdd, (byte) 0x5d,\n+            (byte) 0x61, (byte) 0x38, (byte) 0xb3, (byte) 0xa8, (byte) 0x8e, (byte) 0x57, (byte) 0x6a, (byte) 0xcf,\n+            (byte) 0xa7, (byte) 0x6f, (byte) 0xd9, (byte) 0x40, (byte) 0xdf, (byte) 0x68, (byte) 0xdc, (byte) 0xab,\n+            (byte) 0x37, (byte) 0x24, (byte) 0xd4, (byte) 0xa6, (byte) 0x38, (byte) 0xf1, (byte) 0x45, (byte) 0xe7,\n+            (byte) 0x1f, (byte) 0x91, (byte) 0xaa, (byte) 0x39, (byte) 0x29, (byte) 0x65, (byte) 0x6e, (byte) 0xed,\n+            (byte) 0x5a, (byte) 0x15, (byte) 0x1e, (byte) 0x37, (byte) 0x47, (byte) 0x30, (byte) 0xd2, (byte) 0x40,\n+            (byte) 0x3b, (byte) 0x9b, (byte) 0x7d, (byte) 0x53, (byte) 0x3d, (byte) 0xaf, (byte) 0x67, (byte) 0xdd,\n+            (byte) 0xf7, (byte) 0x14, (byte) 0x58, (byte) 0xaa, (byte) 0xd1, (byte) 0x9d, (byte) 0xd5, (byte) 0x49,\n+            (byte) 0xc1, (byte) 0x65, (byte) 0xe5, (byte) 0x51, (byte) 0x9c, (byte) 0x7d, (byte) 0xc7, (byte) 0x3,\n+            (byte) 0xc3, (byte) 0x4d, (byte) 0xb2, (byte) 0x92, (byte) 0x69, (byte) 0x8d, (byte) 0x98, (byte) 0xd2,\n+            (byte) 0xa4, (byte) 0x49, (byte) 0x89, (byte) 0x61, (byte) 0x94, (byte) 0xf, (byte) 0x7d, (byte) 0x44,\n+            (byte) 0x92, (byte) 0x0, (byte) 0xe7, (byte) 0xda, (byte) 0xfa, (byte) 0xdc, (byte) 0x9b, (byte) 0x6d,\n+            (byte) 0xa0, (byte) 0xb9, (byte) 0x56, (byte) 0x47, (byte) 0x5, (byte) 0xf0, (byte) 0x2c, (byte) 0x5b,\n+            (byte) 0x4d, (byte) 0x94, (byte) 0xdc, (byte) 0x37, (byte) 0x7, (byte) 0xf9, (byte) 0x97, (byte) 0x81,\n+            (byte) 0xe6, (byte) 0x54, (byte) 0x89, (byte) 0x8a, (byte) 0xa2, (byte) 0x1f, (byte) 0x33, (byte) 0x8c,\n+            (byte) 0x73, (byte) 0x1f, (byte) 0x7e, (byte) 0x9d, (byte) 0x4f, (byte) 0x7d, (byte) 0x5f, (byte) 0xd1,\n+            (byte) 0x61, (byte) 0xdc, (byte) 0x1b, (byte) 0x3e, (byte) 0x53, (byte) 0x72, (byte) 0x36, (byte) 0x1c,\n+            (byte) 0xbf, (byte) 0x9f, (byte) 0xe, (byte) 0xeb, (byte) 0x3a, (byte) 0xc7, (byte) 0xf1, (byte) 0xf8,\n+            (byte) 0xab, (byte) 0x9e, (byte) 0xf6, (byte) 0xd1, (byte) 0x47, (byte) 0x90, (byte) 0x3b, (byte) 0xcc,\n+            (byte) 0xed, (byte) 0x8b, (byte) 0xfb, (byte) 0x81, (byte) 0xa5, (byte) 0xbb, (byte) 0xdc, (byte) 0xf6,\n+            (byte) 0xd4, (byte) 0x2b, (byte) 0x1e, (byte) 0x26, (byte) 0xe6, (byte) 0x41, (byte) 0x9e, (byte) 0xfa,\n+            (byte) 0xb8, (byte) 0xe, (byte) 0xb8, (byte) 0x41, (byte) 0xce, (byte) 0x65, (byte) 0x8a, (byte) 0x5,\n+            (byte) 0xea, (byte) 0x83, (byte) 0xe1, (byte) 0xa7, (byte) 0x4b, (byte) 0x41, (byte) 0x56, (byte) 0x65,\n+            (byte) 0x2d, (byte) 0xbb, (byte) 0xb7, (byte) 0x7, (byte) 0x90, (byte) 0x12, (byte) 0x3c, (byte) 0x34,\n+            (byte) 0xc3, (byte) 0xa3, (byte) 0xd5, (byte) 0x26, (byte) 0xeb, (byte) 0x4c, (byte) 0x5b, (byte) 0x6c,\n+            (byte) 0x68, (byte) 0x73, (byte) 0xca, (byte) 0x33, (byte) 0xa4, (byte) 0xf0, (byte) 0xc0, (byte) 0x49,\n+            (byte) 0x25, (byte) 0x1f, (byte) 0x14, (byte) 0x41, (byte) 0x40, (byte) 0xd7, (byte) 0x53, (byte) 0x64,\n+            (byte) 0x22, (byte) 0x54, (byte) 0x79, (byte) 0x69, (byte) 0x4, (byte) 0xaf, (byte) 0x6, (byte) 0xa2,\n+            (byte) 0xe2, (byte) 0xfa, (byte) 0x53, (byte) 0xd7, (byte) 0x5d, (byte) 0x1a, (byte) 0x4, (byte) 0xd3,\n+            (byte) 0x85, (byte) 0xca, (byte) 0xff, (byte) 0xd9, (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2,\n+            (byte) 0xa, (byte) 0x0, (byte) 0xa, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x37, (byte) 0xa4, (byte) 0x5c, (byte) 0x38, (byte) 0x52, (byte) 0x69, (byte) 0x4c, (byte) 0x69,\n+            (byte) 0x24, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x24, (byte) 0x6, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1b, (byte) 0x0, (byte) 0x7, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x72, (byte) 0x65, (byte) 0x73, (byte) 0x2f, (byte) 0x64, (byte) 0x72,\n+            (byte) 0x61, (byte) 0x77, (byte) 0x61, (byte) 0x62, (byte) 0x6c, (byte) 0x65, (byte) 0x2f, (byte) 0x73,\n+            (byte) 0x69, (byte) 0x7a, (byte) 0x65, (byte) 0x5f, (byte) 0x34, (byte) 0x38, (byte) 0x78, (byte) 0x34,\n+            (byte) 0x38, (byte) 0x2e, (byte) 0x6a, (byte) 0x70, (byte) 0x67, (byte) 0xfe, (byte) 0xca, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x5, (byte) 0x6,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x50, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x64, (byte) 0x6, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0,\n+    };\n+\n+    \/*\n+     * Jar file created by Apache Commons-Compress which creates\n+     * a CEN entry with a Zip64 extra header entry with a size of 0\n+     *    ----------------#1--------------------\n+     *            [Central Directory Header]\n+     *            0x52b: Signature        : 0x02014b50\n+     *            0x52f: Created Zip Spec :       0x2d [4.5]\n+     *            0x530: Created OS       :        0x3 [UNIX]\n+     *            0x531: VerMadeby        :      0x32d [3, 4.5]\n+     *            0x532: VerExtract       :       0x2d [4.5]\n+     *            0x533: Flag             :      0x800\n+     *            0x535: Method           :        0x0 [STORED]\n+     *            0x537: Last Mod Time    : 0x570169c0 [Tue Aug 01 13:14:00 EDT 2023]\n+     *            0x53b: CRC              :        0x0\n+     *            0x53f: Compressed Size  :        0x0\n+     *            0x543: Uncompressed Size:        0x0\n+     *            0x547: Name Length      :        0x9\n+     *            0x549: Extra Length     :        0x8\n+     *            [tag=0x0001, sz=0, data= ]\n+     *                ->ZIP64:\n+     *            [tag=0xcafe, sz=0, data= ]\n+     *                 ->[tag=cafe, size=0]\n+     *            0x54b: Comment Length   :        0x0\n+     *            0x54d: Disk Start       :        0x0\n+     *            0x54f: Attrs            :        0x0\n+     *            0x551: AttrsEx          : 0x41ed0010\n+     *            0x555: Loc Header Offset:        0x0\n+     *            0x559: File Name        : META-INF\/\n+     *\/\n+    public static byte[] COMMONS_COMPRESS_JAR = {\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xc0, (byte) 0x69, (byte) 0x1, (byte) 0x57, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0x9, (byte) 0x0, (byte) 0x18, (byte) 0x0, (byte) 0x4d, (byte) 0x45,\n+            (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xfe, (byte) 0xca, (byte) 0x0, (byte) 0x0, (byte) 0x50,\n+            (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x8,\n+            (byte) 0x0, (byte) 0xbd, (byte) 0x69, (byte) 0x1, (byte) 0x57, (byte) 0x71, (byte) 0xa7, (byte) 0x16,\n+            (byte) 0x53, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0x14, (byte) 0x0, (byte) 0x14, (byte) 0x0, (byte) 0x4d, (byte) 0x45, (byte) 0x54,\n+            (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f, (byte) 0x4d, (byte) 0x41,\n+            (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53, (byte) 0x54, (byte) 0x2e, (byte) 0x4d,\n+            (byte) 0x46, (byte) 0x1, (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x68, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x5b, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xf3, (byte) 0x4d, (byte) 0xcc,\n+            (byte) 0xcb, (byte) 0x4c, (byte) 0x4b, (byte) 0x2d, (byte) 0x2e, (byte) 0xd1, (byte) 0xd, (byte) 0x4b,\n+            (byte) 0x2d, (byte) 0x2a, (byte) 0xce, (byte) 0xcc, (byte) 0xcf, (byte) 0xb3, (byte) 0x52, (byte) 0x30,\n+            (byte) 0xd4, (byte) 0x33, (byte) 0xe0, (byte) 0xe5, (byte) 0x72, (byte) 0xcc, (byte) 0x43, (byte) 0x12,\n+            (byte) 0x71, (byte) 0x2c, (byte) 0x48, (byte) 0x4c, (byte) 0xce, (byte) 0x48, (byte) 0x55, (byte) 0x0,\n+            (byte) 0x8a, (byte) 0x1, (byte) 0x25, (byte) 0xd, (byte) 0xd, (byte) 0xf4, (byte) 0x2c, (byte) 0x78,\n+            (byte) 0xb9, (byte) 0x9c, (byte) 0x8b, (byte) 0x52, (byte) 0x13, (byte) 0x4b, (byte) 0x52, (byte) 0x53,\n+            (byte) 0x74, (byte) 0x9d, (byte) 0x2a, (byte) 0x81, (byte) 0x1a, (byte) 0x2c, (byte) 0xf4, (byte) 0xc,\n+            (byte) 0xf4, (byte) 0x80, (byte) 0x12, (byte) 0xda, (byte) 0x46, (byte) 0xba, (byte) 0x66, (byte) 0xa,\n+            (byte) 0x1a, (byte) 0xfe, (byte) 0x45, (byte) 0x89, (byte) 0xc9, (byte) 0x39, (byte) 0xa9, (byte) 0xa,\n+            (byte) 0xce, (byte) 0xf9, (byte) 0x45, (byte) 0x5, (byte) 0xf9, (byte) 0x45, (byte) 0x89, (byte) 0x25,\n+            (byte) 0x40, (byte) 0x3, (byte) 0x34, (byte) 0x79, (byte) 0xb9, (byte) 0x78, (byte) 0xb9, (byte) 0x0,\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8,\n+            (byte) 0x8, (byte) 0x0, (byte) 0x61, (byte) 0x69, (byte) 0x1, (byte) 0x57, (byte) 0x16, (byte) 0x64,\n+            (byte) 0x9c, (byte) 0xc5, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0x19, (byte) 0x0, (byte) 0x14, (byte) 0x0, (byte) 0x5a, (byte) 0x69,\n+            (byte) 0x70, (byte) 0x46, (byte) 0x69, (byte) 0x6c, (byte) 0x65, (byte) 0x50, (byte) 0x72, (byte) 0x6f,\n+            (byte) 0x70, (byte) 0x65, (byte) 0x72, (byte) 0x74, (byte) 0x79, (byte) 0x54, (byte) 0x65, (byte) 0x73,\n+            (byte) 0x74, (byte) 0x2e, (byte) 0x63, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0xf, (byte) 0x7, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x85, (byte) 0x55, (byte) 0xcf, (byte) 0x53, (byte) 0xdb,\n+            (byte) 0x46, (byte) 0x14, (byte) 0xfe, (byte) 0xd6, (byte) 0x3f, (byte) 0x90, (byte) 0x2d, (byte) 0x8b,\n+            (byte) 0x38, (byte) 0x36, (byte) 0x21, (byte) 0xc1, (byte) 0x34, (byte) 0x4, (byte) 0x12, (byte) 0x70,\n+            (byte) 0x63, (byte) 0xb0, (byte) 0x8d, (byte) 0xdb, (byte) 0x42, (byte) 0xd3, (byte) 0x36, (byte) 0xa6,\n+            (byte) 0xf9, (byte) 0x45, (byte) 0x42, (byte) 0xb, (byte) 0x35, (byte) 0xe0, (byte) 0x62, (byte) 0x87,\n+            (byte) 0xd4, (byte) 0xa4, (byte) 0x6d, (byte) 0x22, (byte) 0xdb, (byte) 0x4a, (byte) 0x22, (byte) 0x2a,\n+            (byte) 0x4b, (byte) 0x1a, (byte) 0x49, (byte) 0x2e, (byte) 0x49, (byte) 0x67, (byte) 0x7a, (byte) 0xe8,\n+            (byte) 0x4c, (byte) 0xcf, (byte) 0x9d, (byte) 0x69, (byte) 0xfe, (byte) 0x82, (byte) 0xde, (byte) 0x38,\n+            (byte) 0xf5, (byte) 0x40, (byte) 0xe, (byte) 0x86, (byte) 0x94, (byte) 0x49, (byte) 0x73, (byte) 0xcb,\n+            (byte) 0x21, (byte) 0xff, (byte) 0x51, (byte) 0x2f, (byte) 0xa5, (byte) 0x6f, (byte) 0x25, (byte) 0xc0,\n+            (byte) 0x86, (byte) 0x98, (byte) 0x29, (byte) 0xcc, (byte) 0x68, (byte) 0x77, (byte) 0xdf, (byte) 0xee,\n+            (byte) 0xf7, (byte) 0xbd, (byte) 0xf7, (byte) 0xbe, (byte) 0xf7, (byte) 0x76, (byte) 0xfd, (byte) 0xf6,\n+            (byte) 0xdf, (byte) 0xbf, (byte) 0xfe, (byte) 0x6, (byte) 0x70, (byte) 0xb, (byte) 0xf, (byte) 0x45,\n+            (byte) 0xf8, (byte) 0xe0, (byte) 0x17, (byte) 0x10, (byte) 0x90, (byte) 0x10, (byte) 0x44, (byte) 0xf,\n+            (byte) 0xc3, (byte) 0xe9, (byte) 0x75, (byte) 0xf9, (byte) 0x47, (byte) 0x39, (byte) 0xa7, (byte) 0xc9,\n+            (byte) 0xfa, (byte) 0xe3, (byte) 0xdc, (byte) 0x72, (byte) 0x75, (byte) 0x5d, (byte) 0xa9, (byte) 0x39,\n+            (byte) 0xc, (byte) 0x3d, (byte) 0x33, (byte) 0xaa, (byte) 0xae, (byte) 0x3a, (byte) 0xd7, (byte) 0x18,\n+            (byte) 0xfc, (byte) 0xa9, (byte) 0xf1, (byte) 0x55, (byte) 0x1, (byte) 0x21, (byte) 0x86, (byte) 0xbe,\n+            (byte) 0x35, (byte) 0xd5, (byte) 0x9c, (byte) 0x53, (byte) 0x35, (byte) 0xa5, (byte) 0x68, (byte) 0x19,\n+            (byte) 0xa6, (byte) 0x62, (byte) 0x39, (byte) 0xcf, (byte) 0xca, (byte) 0x8a, (byte) 0xed, (byte) 0x88,\n+            (byte) 0x10, (byte) 0xe0, (byte) 0xe7, (byte) 0x9f, (byte) 0x88, (byte) 0x4, (byte) 0x89, (byte) 0x33,\n+            (byte) 0x9d, (byte) 0xb2, (byte) 0x14, (byte) 0xb9, (byte) 0x5e, (byte) 0x52, (byte) 0xf5, (byte) 0xc7,\n+            (byte) 0x9a, (byte) 0xc2, (byte) 0xcf, (byte) 0xa, (byte) 0x38, (byte) 0xc5, (byte) 0xd0, (byte) 0xef,\n+            (byte) 0xb2, (byte) 0x37, (byte) 0x1d, (byte) 0x55, (byte) 0xcb, (byte) 0xfd, (byte) 0xa4, (byte) 0x9a,\n+            (byte) 0xb9, (byte) 0x7d, (byte) 0x9a, (byte) 0x10, (byte) 0x4e, (byte) 0x33, (byte) 0x64, (byte) 0x72,\n+            (byte) 0x77, (byte) 0x6d, (byte) 0xc5, (byte) 0xb2, (byte) 0x73, (byte) 0xda, (byte) 0xba, (byte) 0xac,\n+            (byte) 0xd7, (byte) 0xf9, (byte) 0xe4, (byte) 0xb6, (byte) 0xb1, (byte) 0xa1, (byte) 0x6b, (byte) 0x86,\n+            (byte) 0x5c, (byte) 0xb7, (byte) 0x73, (byte) 0x1b, (byte) 0xb5, (byte) 0x29, (byte) 0xab, (byte) 0x6e,\n+            (byte) 0xca, (byte) 0xe4, (byte) 0x48, (byte) 0x53, (byte) 0xab, (byte) 0xf6, (byte) 0xe4, (byte) 0xba,\n+            (byte) 0x6c, (byte) 0x89, (byte) 0xe8, (byte) 0x45, (byte) 0x9c, (byte) 0x47, (byte) 0xdc, (byte) 0x47,\n+            (byte) 0x9c, (byte) 0xa9, (byte) 0x42, (byte) 0x3b, (byte) 0xe6, (byte) 0x92, (byte) 0x63, (byte) 0x91,\n+            (byte) 0xc7, (byte) 0xfc, (byte) 0xf8, (byte) 0x6a, (byte) 0x18, (byte) 0xfd, (byte) 0x38, (byte) 0x2b,\n+            (byte) 0xe0, (byte) 0x9c, (byte) 0x84, (byte) 0x1, (byte) 0x24, (byte) 0x8e, (byte) 0xa4, (byte) 0x55,\n+            (byte) 0x7a, (byte) 0x66, (byte) 0x3b, (byte) 0x4a, (byte) 0x83, (byte) 0xb2, (byte) 0x31, (byte) 0x9a,\n+            (byte) 0x94, (byte) 0x5c, (byte) 0xbf, (byte) 0x7, (byte) 0x56, (byte) 0x8d, (byte) 0x5c, (byte) 0x91,\n+            (byte) 0x90, (byte) 0xe, (byte) 0xe1, (byte) 0x15, (byte) 0xb9, (byte) 0x91, (byte) 0xf, (byte) 0xe1,\n+            (byte) 0x3d, (byte) 0xc2, (byte) 0xf0, (byte) 0xd8, (byte) 0x46, (byte) 0x92, (byte) 0xf6, (byte) 0x8,\n+            (byte) 0x25, (byte) 0xa9, (byte) 0x2b, (byte) 0xf5, (byte) 0xa4, (byte) 0x2e, (byte) 0x62, (byte) 0x8,\n+            (byte) 0x17, (byte) 0x4, (byte) 0xc, (byte) 0x4b, (byte) 0x18, (byte) 0xc1, (byte) 0x45, (byte) 0x52,\n+            (byte) 0xa1, (byte) 0xb, (byte) 0x92, (byte) 0xd4, (byte) 0x32, (byte) 0xf9, (byte) 0xea, (byte) 0x11,\n+            (byte) 0xc3, (byte) 0x4c, (byte) 0x97, (byte) 0xb8, (byte) 0xee, (byte) 0x17, (byte) 0x8e, (byte) 0xcb,\n+            (byte) 0x9b, (byte) 0x1f, (byte) 0xef, (byte) 0x1a, (byte) 0x0, (byte) 0x4f, (byte) 0x70, (byte) 0x54,\n+            (byte) 0xc2, (byte) 0x18, (byte) 0x17, (byte) 0x32, (byte) 0x58, (byte) 0xd3, (byte) 0xc, (byte) 0x9b,\n+            (byte) 0xf4, (byte) 0x7b, (byte) 0xff, (byte) 0xc0, (byte) 0xa5, (byte) 0xb, (byte) 0x2f, (byte) 0x3f,\n+            (byte) 0xb1, (byte) 0x8c, (byte) 0xd, (byte) 0xb9, (byte) 0xaa, (byte) 0x29, (byte) 0x22, (byte) 0x92,\n+            (byte) 0x48, (byte) 0x49, (byte) 0x18, (byte) 0xc7, (byte) 0x4, (byte) 0x43, (byte) 0xaf, (byte) 0x5c,\n+            (byte) 0xaf, (byte) 0x97, (byte) 0x9a, (byte) 0xa6, (byte) 0x69, (byte) 0x29, (byte) 0xb6, (byte) 0xad,\n+            (byte) 0xd4, (byte) 0x19, (byte) 0x6, (byte) 0x3a, (byte) 0x63, (byte) 0x38, (byte) 0x44, (byte) 0xe4,\n+            (byte) 0x79, (byte) 0x19, (byte) 0x33, (byte) 0x1d, (byte) 0x9, (byte) 0xcc, (byte) 0x2f, (byte) 0xdf,\n+            (byte) 0x79, (byte) 0x5a, (byte) 0x53, (byte) 0x4c, (byte) 0x47, (byte) 0x35, (byte) 0x74, (byte) 0x1,\n+            (byte) 0x93, (byte) 0xc, (byte) 0x83, (byte) 0x6d, (byte) 0xd0, (byte) 0x4a, (byte) 0x53, (byte) 0x77,\n+            (byte) 0xd4, (byte) 0x86, (byte) 0x72, (byte) 0xb8, (byte) 0x2f, (byte) 0x22, (byte) 0x8b, (byte) 0xf,\n+            (byte) 0xb8, (byte) 0xf2, (byte) 0x13, (byte) 0x2, (byte) 0x3e, (byte) 0x3a, (byte) 0xaa, (byte) 0xab,\n+            (byte) 0x9b, (byte) 0x62, (byte) 0x4, (byte) 0xd3, (byte) 0xf8, (byte) 0x58, (byte) 0xc0, (byte) 0x15,\n+            (byte) 0x9, (byte) 0x9f, (byte) 0xe0, (byte) 0x53, (byte) 0x86, (byte) 0xb8, (byte) 0xbb, (byte) 0xaf,\n+            (byte) 0x93, (byte) 0x8f, (byte) 0x47, (byte) 0x24, (byte) 0x66, (byte) 0xae, (byte) 0x28, (byte) 0x3b,\n+            (byte) 0x4f, (byte) 0x18, (byte) 0x7c, (byte) 0x6, (byte) 0xc9, (byte) 0x93, (byte) 0xff, (byte) 0x1f,\n+            (byte) 0x79, (byte) 0xe, (byte) 0x2a, (byte) 0x59, (byte) 0x78, (byte) 0x97, (byte) 0x21, (byte) 0x1f,\n+            (byte) 0xc1, (byte) 0x55, (byte) 0xe4, (byte) 0x5, (byte) 0xcc, (byte) 0x70, (byte) 0x27, (byte) 0x9f,\n+            (byte) 0x53, (byte) 0xd6, (byte) 0xed, (byte) 0xae, (byte) 0x5a, (byte) 0x94, (byte) 0x4d, (byte) 0x86,\n+            (byte) 0x58, (byte) 0x6a, (byte) 0x1f, (byte) 0x75, (byte) 0x60, (byte) 0x22, (byte) 0x39, (byte) 0xaf,\n+            (byte) 0xe3, (byte) 0x86, (byte) 0x80, (byte) 0x9b, (byte) 0x12, (byte) 0x75, (byte) 0xfc, (byte) 0x2c,\n+            (byte) 0x43, (byte) 0xe2, (byte) 0x28, (byte) 0x27, (byte) 0xaf, (byte) 0xb3, (byte) 0xd7, (byte) 0x15,\n+            (byte) 0x36, (byte) 0x91, (byte) 0xe9, (byte) 0xca, (byte) 0x46, (byte) 0xdb, (byte) 0xc0, (byte) 0x70,\n+            (byte) 0x3d, (byte) 0xd5, (byte) 0x2d, (byte) 0x82, (byte) 0x63, (byte) 0xfc, (byte) 0xc7, (byte) 0xa3,\n+            (byte) 0x6c, (byte) 0x13, (byte) 0x50, (byte) 0x2b, (byte) 0xdd, (byte) 0x61, (byte) 0x88, (byte) 0x74,\n+            (byte) 0x74, (byte) 0x11, (byte) 0x57, (byte) 0xe8, (byte) 0xb, (byte) 0x9, (byte) 0x5f, (byte) 0x62,\n+            (byte) 0x9e, (byte) 0xee, (byte) 0x88, (byte) 0x63, (byte) 0xdc, (byte) 0xac, (byte) 0xda, (byte) 0x86,\n+            (byte) 0xd6, (byte) 0x74, (byte) 0x14, (byte) 0x4f, (byte) 0x9a, (byte) 0xb3, (byte) 0xa9, (byte) 0x13,\n+            (byte) 0x12, (byte) 0x9e, (byte) 0xc6, (byte) 0x57, (byte) 0x12, (byte) 0xa, (byte) 0x58, (byte) 0x64,\n+            (byte) 0x8, (byte) 0x39, (byte) 0x86, (byte) 0xa7, (byte) 0xd, (byte) 0xc3, (byte) 0x99, (byte) 0x83,\n+            (byte) 0xd3, (byte) 0x9d, (byte) 0x8a, (byte) 0x89, (byte) 0x58, (byte) 0xc6, (byte) 0xa8, (byte) 0x80,\n+            (byte) 0x22, (byte) 0x55, (byte) 0xff, (byte) 0xa4, (byte) 0xa0, (byte) 0x42, (byte) 0x58, (byte) 0xa1,\n+            (byte) 0x22, (byte) 0x27, (byte) 0x75, (byte) 0xfe, (byte) 0x3f, (byte) 0x46, (byte) 0x7f, (byte) 0xbc,\n+            (byte) 0xc9, (byte) 0x97, (byte) 0x96, (byte) 0xcb, (byte) 0x1d, (byte) 0x8d, (byte) 0x9e, (byte) 0x46,\n+            (byte) 0x59, (byte) 0xc2, (byte) 0x5d, (byte) 0xde, (byte) 0x7d, (byte) 0x51, (byte) 0xd3, (byte) 0x6b,\n+            (byte) 0x4b, (byte) 0xb9, (byte) 0xf6, (byte) 0x43, (byte) 0xd9, (byte) 0x92, (byte) 0x6b, (byte) 0xa,\n+            (byte) 0x5, (byte) 0xb0, (byte) 0x36, (byte) 0x5f, (byte) 0x7c, (byte) 0x30, (byte) 0x37, (byte) 0x5f,\n+            (byte) 0xa0, (byte) 0xbc, (byte) 0xe2, (byte) 0xef, (byte) 0xba, (byte) 0x27, (byte) 0x5, (byte) 0x67,\n+            (byte) 0xd, (byte) 0xdd, (byte) 0x76, (byte) 0x64, (byte) 0xdd, (byte) 0x59, (byte) 0x95, (byte) 0xb5,\n+            (byte) 0x26, (byte) 0x9d, (byte) 0xf, (byte) 0xcc, (byte) 0x1a, (byte) 0x75, (byte) 0x1a, (byte) 0xa2,\n+            (byte) 0x5, (byte) 0x55, (byte) 0x57, (byte) 0x96, (byte) 0x9a, (byte) 0x8d, (byte) 0xaa, (byte) 0x62,\n+            (byte) 0x95, (byte) 0x79, (byte) 0x17, (byte) 0xd2, (byte) 0x46, (byte) 0x43, (byte) 0x56, (byte) 0x75,\n+            (byte) 0x9e, (byte) 0x73, (byte) 0xb7, (byte) 0xba, (byte) 0xaf, (byte) 0x12, (byte) 0x91, (byte) 0xeb,\n+            (byte) 0x95, (byte) 0xf4, (byte) 0xdd, (byte) 0x3f, (byte) 0x2f, (byte) 0x96, (byte) 0x8c, (byte) 0xa6,\n+            (byte) 0x55, (byte) 0x73, (byte) 0x5f, (byte) 0x13, (byte) 0x4a, (byte) 0xae, (byte) 0xcb, (byte) 0x1b,\n+            (byte) 0x34, (byte) 0xc9, (byte) 0x69, (byte) 0x70, (byte) 0x91, (byte) 0x1e, (byte) 0x21, (byte) 0x1f,\n+            (byte) 0x3d, (byte) 0x6e, (byte) 0x54, (byte) 0x67, (byte) 0xac, (byte) 0xe2, (byte) 0x1e, (byte) 0x8d,\n+            (byte) 0xdf, (byte) 0xd0, (byte) 0xca, (byte) 0x87, (byte) 0x28, (byte) 0xfc, (byte) 0x34, (byte) 0xa7,\n+            (byte) 0x57, (byte) 0x8e, (byte) 0xbe, (byte) 0x15, (byte) 0xb2, (byte) 0xc, (byte) 0xd1, (byte) 0xc8,\n+            (byte) 0x68, (byte) 0xc, (byte) 0x4e, (byte) 0x6c, (byte) 0x83, (byte) 0x6d, (byte) 0xb9, (byte) 0x80,\n+            (byte) 0x35, (byte) 0xfa, (byte) 0xf6, (byte) 0xb8, (byte) 0xc6, (byte) 0x10, (byte) 0xc2, (byte) 0xb8,\n+            (byte) 0x8f, (byte) 0x6f, (byte) 0xf7, (byte) 0x8f, (byte) 0x5e, (byte) 0x26, (byte) 0x38, (byte) 0xb7,\n+            (byte) 0x46, (byte) 0x76, (byte) 0x21, (byte) 0x54, (byte) 0xb6, (byte) 0x11, (byte) 0x6e, (byte) 0x41,\n+            (byte) 0x6c, (byte) 0x3, (byte) 0x44, (byte) 0xd7, (byte) 0x9b, (byte) 0x4, (byte) 0x7e, (byte) 0x67,\n+            (byte) 0x7d, (byte) 0xfc, (byte) 0xed, (byte) 0xf3, (byte) 0x40, (byte) 0xec, (byte) 0xf, (byte) 0x9a,\n+            (byte) 0x5, (byte) 0x69, (byte) 0xe7, (byte) 0xc5, (byte) 0x2e, (byte) 0x7a, (byte) 0x2b, (byte) 0xf1,\n+            (byte) 0xe8, (byte) 0x36, (byte) 0x62, (byte) 0x85, (byte) 0x17, (byte) 0x38, (byte) 0x13, (byte) 0x1f,\n+            (byte) 0xc, (byte) 0xbc, (byte) 0x82, (byte) 0xaf, (byte) 0xe2, (byte) 0x8f, (byte) 0x47, (byte) 0x4b,\n+            (byte) 0x2d, (byte) 0x9c, (byte) 0xbf, (byte) 0x97, (byte) 0x6e, (byte) 0xe1, (byte) 0xd2, (byte) 0x26,\n+            (byte) 0xfa, (byte) 0x16, (byte) 0xbd, (byte) 0x31, (byte) 0xbc, (byte) 0x94, (byte) 0xc9, (byte) 0xb6,\n+            (byte) 0x70, (byte) 0x39, (byte) 0xf3, (byte) 0x7a, (byte) 0x13, (byte) 0xbd, (byte) 0x85, (byte) 0x5d,\n+            (byte) 0x64, (byte) 0x2b, (byte) 0xe9, (byte) 0x6d, (byte) 0xe4, (byte) 0x5e, (byte) 0xc7, (byte) 0xa3,\n+            (byte) 0xfe, (byte) 0x57, (byte) 0xf8, (byte) 0x70, (byte) 0x7, (byte) 0x53, (byte) 0x85, (byte) 0xf4,\n+            (byte) 0xe, (byte) 0x3e, (byte) 0xdb, (byte) 0xc1, (byte) 0xb5, (byte) 0x45, (byte) 0xce, (byte) 0x73,\n+            (byte) 0xdb, (byte) 0xe3, (byte) 0x49, (byte) 0xbf, (byte) 0xc4, (byte) 0x1c, (byte) 0xc3, (byte) 0x4b,\n+            (byte) 0x2c, (byte) 0x30, (byte) 0xb8, (byte) 0x84, (byte) 0x99, (byte) 0x37, (byte) 0x18, (byte) 0xc9,\n+            (byte) 0xb4, (byte) 0xb0, (byte) 0xb4, (byte) 0x89, (byte) 0xc4, (byte) 0x12, (byte) 0xcd, (byte) 0xe3,\n+            (byte) 0xde, (byte) 0x3c, (byte) 0x72, (byte) 0x35, (byte) 0x90, (byte) 0x4d, (byte) 0x4, (byte) 0x88,\n+            (byte) 0x3a, (byte) 0x4b, (byte) 0xd4, (byte) 0xa3, (byte) 0x2e, (byte) 0xfe, (byte) 0xeb, (byte) 0x13,\n+            (byte) 0xf0, (byte) 0x2d, (byte) 0x94, (byte) 0xb6, (byte) 0x28, (byte) 0x72, (byte) 0x11, (byte) 0xe7,\n+            (byte) 0x31, (byte) 0x4a, (byte) 0x4f, (byte) 0xcb, (byte) 0x18, (byte) 0x52, (byte) 0xd4, (byte) 0xd,\n+            (byte) 0x49, (byte) 0xca, (byte) 0x63, (byte) 0xa, (byte) 0x57, (byte) 0x68, (byte) 0xb6, (byte) 0x82,\n+            (byte) 0x6, (byte) 0x9e, (byte) 0xd2, (byte) 0xfa, (byte) 0x67, (byte) 0xfc, (byte) 0x82, (byte) 0x5f,\n+            (byte) 0x69, (byte) 0x5c, (byte) 0xc0, (byte) 0x6f, (byte) 0xf8, (byte) 0x9d, (byte) 0xec, (byte) 0x3e,\n+            (byte) 0x57, (byte) 0x8b, (byte) 0x39, (byte) 0xc4, (byte) 0xe8, (byte) 0x1b, (byte) 0x23, (byte) 0xf4,\n+            (byte) 0x39, (byte) 0xc2, (byte) 0xf, (byte) 0x10, (byte) 0x43, (byte) 0x8c, (byte) 0x70, (byte) 0x83,\n+            (byte) 0x84, (byte) 0x1c, (byte) 0xa0, (byte) 0xbb, (byte) 0x9a, (byte) 0xc0, (byte) 0xd, (byte) 0xb2,\n+            (byte) 0x2e, (byte) 0x90, (byte) 0xf2, (byte) 0x2b, (byte) 0xb8, (byte) 0x40, (byte) 0x3c, (byte) 0xc3,\n+            (byte) 0xc4, (byte) 0x34, (byte) 0x44, (byte) 0xf8, (byte) 0x4b, (byte) 0xc4, (byte) 0x30, (byte) 0x8c,\n+            (byte) 0xe7, (byte) 0xf4, (byte) 0xac, (byte) 0xfe, (byte) 0x49, (byte) 0xd5, (byte) 0xdb, (byte) 0x22,\n+            (byte) 0xd4, (byte) 0x77, (byte) 0xc4, (byte) 0xf2, (byte) 0x10, (byte) 0xd2, (byte) 0x1e, (byte) 0x4d,\n+            (byte) 0x7d, (byte) 0x2, (byte) 0x4, (byte) 0x81, (byte) 0xa4, (byte) 0x65, (byte) 0x2, (byte) 0x92,\n+            (byte) 0x7b, (byte) 0xfc, (byte) 0x47, (byte) 0xc6, (byte) 0x5b, (byte) 0xd3, (byte) 0xca, (byte) 0x35,\n+            (byte) 0x5, (byte) 0xff, (byte) 0x1, (byte) 0xbb, (byte) 0x25, (byte) 0x20, (byte) 0x1d, (byte) 0xde,\n+            (byte) 0x23, (byte) 0x7, (byte) 0xde, (byte) 0xde, (byte) 0xb4, (byte) 0x40, (byte) 0x57, (byte) 0xc0,\n+            (byte) 0x3b, (byte) 0x1e, (byte) 0x41, (byte) 0xe0, (byte) 0xd0, (byte) 0x74, (byte) 0x80, (byte) 0x10,\n+            (byte) 0xf6, (byte) 0x11, (byte) 0xc3, (byte) 0x54, (byte) 0xa7, (byte) 0xef, (byte) 0xdd, (byte) 0xce,\n+            (byte) 0x78, (byte) 0xf0, (byte) 0x1f, (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d,\n+            (byte) 0x3, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x0, (byte) 0x0, (byte) 0xc0,\n+            (byte) 0x69, (byte) 0x1, (byte) 0x57, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x9,\n+            (byte) 0x0, (byte) 0x8, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0xed, (byte) 0x41, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x4d, (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e,\n+            (byte) 0x46, (byte) 0x2f, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xfe, (byte) 0xca,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d, (byte) 0x3,\n+            (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0xbd, (byte) 0x69,\n+            (byte) 0x1, (byte) 0x57, (byte) 0x71, (byte) 0xa7, (byte) 0x16, (byte) 0x53, (byte) 0x5b, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x68, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x14, (byte) 0x0,\n+            (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xa4, (byte) 0x81, (byte) 0x3f, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x4d, (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46,\n+            (byte) 0x2f, (byte) 0x4d, (byte) 0x41, (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53,\n+            (byte) 0x54, (byte) 0x2e, (byte) 0x4d, (byte) 0x46, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d, (byte) 0x3, (byte) 0x2d, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x61, (byte) 0x69, (byte) 0x1, (byte) 0x57,\n+            (byte) 0x16, (byte) 0x64, (byte) 0x9c, (byte) 0xc5, (byte) 0x0, (byte) 0x4, (byte) 0x0, (byte) 0x0,\n+            (byte) 0xf, (byte) 0x7, (byte) 0x0, (byte) 0x0, (byte) 0x19, (byte) 0x0, (byte) 0x4, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0xa4, (byte) 0x81, (byte) 0xe0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x5a, (byte) 0x69,\n+            (byte) 0x70, (byte) 0x46, (byte) 0x69, (byte) 0x6c, (byte) 0x65, (byte) 0x50, (byte) 0x72, (byte) 0x6f,\n+            (byte) 0x70, (byte) 0x65, (byte) 0x72, (byte) 0x74, (byte) 0x79, (byte) 0x54, (byte) 0x65, (byte) 0x73,\n+            (byte) 0x74, (byte) 0x2e, (byte) 0x63, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x6, (byte) 0x6, (byte) 0x2c,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2d,\n+            (byte) 0x0, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xd0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2b, (byte) 0x5, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x6, (byte) 0x7, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xfb, (byte) 0x5, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50,\n+            (byte) 0x4b, (byte) 0x5, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3,\n+            (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0xd0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2b,\n+            (byte) 0x5, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+    };\n+\n+    \/*\n+     * Jar file created by Ant specifying zip64mode=\"always\" and createUnicodeExtraFields=\"always\"\n+     * ----------------#1--------------------\n+     * [Central Directory Header]\n+     * 0x51b: Signature        : 0x02014b50\n+     * 0x51f: Created Zip Spec :       0x2d [4.5]\n+     * 0x520: Created OS       :        0x3 [UNIX]\n+     * 0x521: VerMadeby        :      0x32d [3, 4.5]\n+     * 0x522: VerExtract       :       0x2d [4.5]\n+     * 0x523: Flag             :      0x800\n+     * 0x525: Method           :        0x8 [DEFLATED]\n+     * 0x527: Last Mod Time    : 0x570b3767 [Fri Aug 11 06:59:14 EDT 2023]\n+     * 0x52b: CRC              : 0x5e4fa53f\n+     * 0x52f: Compressed Size  : 0xffffffff\n+     * 0x533: Uncompressed Size: 0xffffffff\n+     * 0x537: Name Length      :       0x10\n+     * 0x539: Extra Length     :       0x35\n+     *      Extra data:[01, 00, 18, 00, 87, 04, 00, 00, 00, 00, 00, 00, c7, 02, 00, 00, 00, 00, 00, 00, 15, 01, 00, 00, 00, 00, 00, 00, 75, 70, 15, 00, 01, 94, 82, 60, 61, 52, 65, 61, 64, 41, 6e, 74, 4a, 61, 72, 2e, 63, 6c, 61, 73, 73]\n+     *      [tag=0x0001, sz=24]\n+     *          ->ZIP64: size *0x487 csize *0x2c7 LOC Off *0x115\n+     *          [data= 87 04 00 00 00 00 00 00 c7 02 00 00 00 00 00 00 15 01 00 00 00 00 00 00 ]\n+     *      [tag=0x7075, sz=21]\n+     *          ->[Unknown tag]\n+     *          [data= 01 94 82 60 61 52 65 61 64 41 6e 74 4a 61 72 2e 63 6c 61 73 73 ]\n+     * 0x53b: Comment Length   :        0x0\n+     * 0x53d: Disk Start       :        0x0\n+     * 0x53f: Attrs            :        0x0\n+     * 0x541: AttrsEx          : 0x81a40000\n+     * 0x545: Loc Header Offset: 0xffffffff\n+     * 0x549: File Name        : ReadAntJar.class\n+     *\/\n+    public static byte[] ANT_ZIP64_UNICODE_EXTRA_JAR = {\n+\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x18, (byte) 0x7e, (byte) 0xe, (byte) 0x57, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0x9, (byte) 0x0, (byte) 0x2a, (byte) 0x0, (byte) 0x4d, (byte) 0x45,\n+            (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xfe, (byte) 0xca, (byte) 0x0, (byte) 0x0, (byte) 0x75,\n+            (byte) 0x70, (byte) 0xe, (byte) 0x0, (byte) 0x1, (byte) 0x8, (byte) 0xa1, (byte) 0x8c, (byte) 0x13,\n+            (byte) 0x4d, (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46,\n+            (byte) 0x2f, (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x17, (byte) 0x7e, (byte) 0xe, (byte) 0x57, (byte) 0x31,\n+            (byte) 0x59, (byte) 0x76, (byte) 0x4d, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x14, (byte) 0x0, (byte) 0x31, (byte) 0x0, (byte) 0x4d,\n+            (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f,\n+            (byte) 0x4d, (byte) 0x41, (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53, (byte) 0x54,\n+            (byte) 0x2e, (byte) 0x4d, (byte) 0x46, (byte) 0x1, (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x6e,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x61,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75,\n+            (byte) 0x70, (byte) 0x19, (byte) 0x0, (byte) 0x1, (byte) 0x85, (byte) 0x85, (byte) 0x84, (byte) 0x2,\n+            (byte) 0x4d, (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46,\n+            (byte) 0x2f, (byte) 0x4d, (byte) 0x41, (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53,\n+            (byte) 0x54, (byte) 0x2e, (byte) 0x4d, (byte) 0x46, (byte) 0xf3, (byte) 0x4d, (byte) 0xcc, (byte) 0xcb,\n+            (byte) 0x4c, (byte) 0x4b, (byte) 0x2d, (byte) 0x2e, (byte) 0xd1, (byte) 0xd, (byte) 0x4b, (byte) 0x2d,\n+            (byte) 0x2a, (byte) 0xce, (byte) 0xcc, (byte) 0xcf, (byte) 0xb3, (byte) 0x52, (byte) 0x30, (byte) 0xd4,\n+            (byte) 0x33, (byte) 0xe0, (byte) 0xe5, (byte) 0x72, (byte) 0xcc, (byte) 0x43, (byte) 0x12, (byte) 0x71,\n+            (byte) 0x2c, (byte) 0x48, (byte) 0x4c, (byte) 0xce, (byte) 0x48, (byte) 0x55, (byte) 0x0, (byte) 0x8a,\n+            (byte) 0x1, (byte) 0x25, (byte) 0xd, (byte) 0xd, (byte) 0xf4, (byte) 0xc, (byte) 0x4d, (byte) 0x12,\n+            (byte) 0x73, (byte) 0xa, (byte) 0x32, (byte) 0x12, (byte) 0x79, (byte) 0xb9, (byte) 0x9c, (byte) 0x8b,\n+            (byte) 0x52, (byte) 0x13, (byte) 0x4b, (byte) 0x52, (byte) 0x53, (byte) 0x74, (byte) 0x9d, (byte) 0x2a,\n+            (byte) 0x81, (byte) 0xda, (byte) 0x2c, (byte) 0xf4, (byte) 0x80, (byte) 0x32, (byte) 0x7a, (byte) 0x86,\n+            (byte) 0xda, (byte) 0x46, (byte) 0xba, (byte) 0x66, (byte) 0xa, (byte) 0x1a, (byte) 0xfe, (byte) 0x45,\n+            (byte) 0x89, (byte) 0xc9, (byte) 0x39, (byte) 0xa9, (byte) 0xa, (byte) 0xce, (byte) 0xf9, (byte) 0x45,\n+            (byte) 0x5, (byte) 0xf9, (byte) 0x45, (byte) 0x89, (byte) 0x25, (byte) 0x40, (byte) 0x63, (byte) 0x34,\n+            (byte) 0x79, (byte) 0xb9, (byte) 0x78, (byte) 0xb9, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x3,\n+            (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x67,\n+            (byte) 0x37, (byte) 0xb, (byte) 0x57, (byte) 0x3f, (byte) 0xa5, (byte) 0x4f, (byte) 0x5e, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x10,\n+            (byte) 0x0, (byte) 0x2d, (byte) 0x0, (byte) 0x52, (byte) 0x65, (byte) 0x61, (byte) 0x64, (byte) 0x41,\n+            (byte) 0x6e, (byte) 0x74, (byte) 0x4a, (byte) 0x61, (byte) 0x72, (byte) 0x2e, (byte) 0x63, (byte) 0x6c,\n+            (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x1, (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x87,\n+            (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xc7,\n+            (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75,\n+            (byte) 0x70, (byte) 0x15, (byte) 0x0, (byte) 0x1, (byte) 0x94, (byte) 0x82, (byte) 0x60, (byte) 0x61,\n+            (byte) 0x52, (byte) 0x65, (byte) 0x61, (byte) 0x64, (byte) 0x41, (byte) 0x6e, (byte) 0x74, (byte) 0x4a,\n+            (byte) 0x61, (byte) 0x72, (byte) 0x2e, (byte) 0x63, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x73,\n+            (byte) 0x75, (byte) 0x53, (byte) 0x5b, (byte) 0x57, (byte) 0x12, (byte) 0x51, (byte) 0x18, (byte) 0xdd,\n+            (byte) 0x3, (byte) 0xc3, (byte) 0x1c, (byte) 0x18, (byte) 0x47, (byte) 0x41, (byte) 0xcc, (byte) 0xb,\n+            (byte) 0x96, (byte) 0x89, (byte) 0x25, (byte) 0x89, (byte) 0x17, (byte) 0xa0, (byte) 0x8b, (byte) 0x76,\n+            (byte) 0x41, (byte) 0x33, (byte) 0xab, (byte) 0x95, (byte) 0x99, (byte) 0x21, (byte) 0xb4, (byte) 0x84,\n+            (byte) 0x65, (byte) 0x8b, (byte) 0x7a, (byte) 0x1a, (byte) 0x61, (byte) 0xb2, (byte) 0x51, (byte) 0x98,\n+            (byte) 0x99, (byte) 0x35, (byte) 0xc, (byte) 0x76, (byte) 0x79, (byte) 0xea, (byte) 0xa1, (byte) 0x7e,\n+            (byte) 0x8b, (byte) 0xcf, (byte) 0xf6, (byte) 0x80, (byte) 0x6b, (byte) 0xe5, (byte) 0x2a, (byte) 0xdf,\n+            (byte) 0x7c, (byte) 0xe8, (byte) 0x47, (byte) 0x65, (byte) 0xdf, (byte) 0x19, (byte) 0x50, (byte) 0xb0,\n+            (byte) 0x65, (byte) 0x33, (byte) 0x8b, (byte) 0xef, (byte) 0x70, (byte) 0xbe, (byte) 0xb3, (byte) 0xf7,\n+            (byte) 0xfe, (byte) 0x6e, (byte) 0x73, (byte) 0x7e, (byte) 0xff, (byte) 0xf9, (byte) 0xf1, (byte) 0xb,\n+            (byte) 0xc0, (byte) 0x2c, (byte) 0x1e, (byte) 0xc9, (byte) 0x90, (byte) 0x31, (byte) 0xc6, (byte) 0x70,\n+            (byte) 0x4d, (byte) 0x86, (byte) 0x7, (byte) 0x63, (byte) 0xdc, (byte) 0x5c, (byte) 0xf7, (byte) 0x63,\n+            (byte) 0x9c, (byte) 0x21, (byte) 0x26, (byte) 0x43, (byte) 0xc2, (byte) 0x8d, (byte) 0x0, (byte) 0x26,\n+            (byte) 0x10, (byte) 0xf7, (byte) 0x63, (byte) 0x92, (byte) 0x61, (byte) 0x4a, (byte) 0xc6, (byte) 0x34,\n+            (byte) 0x66, (byte) 0xb8, (byte) 0x33, (byte) 0xc1, (byte) 0x90, (byte) 0x94, (byte) 0xd1, (byte) 0x8d,\n+            (byte) 0x14, (byte) 0xc3, (byte) 0x4d, (byte) 0x3f, (byte) 0x6e, (byte) 0xc9, (byte) 0x8, (byte) 0xe2,\n+            (byte) 0xb6, (byte) 0x0, (byte) 0x69, (byte) 0x41, (byte) 0x37, (byte) 0x74, (byte) 0x67, (byte) 0x51,\n+            (byte) 0x80, (byte) 0x37, (byte) 0x3e, (byte) 0xb9, (byte) 0x21, (byte) 0x40, (byte) 0x7c, (byte) 0x6a,\n+            (byte) 0x96, (byte) 0x35, (byte) 0x1, (byte) 0xc1, (byte) 0x8c, (byte) 0x6e, (byte) 0x68, (byte) 0xd9,\n+            (byte) 0x7a, (byte) 0x75, (byte) 0x53, (byte) 0xb3, (byte) 0xb, (byte) 0xea, (byte) 0x66, (byte) 0x85,\n+            (byte) 0x3c, (byte) 0x62, (byte) 0x55, (byte) 0xd5, (byte) 0xd, (byte) 0x1, (byte) 0x3, (byte) 0xf1,\n+            (byte) 0xb7, (byte) 0x99, (byte) 0x6d, (byte) 0x75, (byte) 0x57, (byte) 0x4d, (byte) 0x55, (byte) 0x54,\n+            (byte) 0x63, (byte) 0x2b, (byte) 0x95, (byte) 0x77, (byte) 0x6c, (byte) 0xdd, (byte) 0xd8, (byte) 0x9a,\n+            (byte) 0xe7, (byte) 0x44, (byte) 0xbf, (byte) 0xad, (byte) 0xa9, (byte) 0xe5, (byte) 0x55, (byte) 0xd5,\n+            (byte) 0xae, (byte) 0x9, (byte) 0xe8, (byte) 0xce, (byte) 0x3b, (byte) 0x6a, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x4d, (byte) 0xb5, (byte) 0x5c, (byte) 0x2a, (byte) 0xa5, (byte) 0xc8, (byte) 0x70, (byte) 0x87,\n+            (byte) 0x12, (byte) 0xa3, (byte) 0xf0, (byte) 0x14, (byte) 0x59, (byte) 0x80, (byte) 0x9c, (byte) 0x37,\n+            (byte) 0xeb, (byte) 0x76, (byte) 0x49, (byte) 0x5b, (byte) 0xd6, (byte) 0xb9, (byte) 0x6c, (byte) 0x70,\n+            (byte) 0x9d, (byte) 0x68, (byte) 0x8f, (byte) 0xd, (byte) 0x87, (byte) 0x98, (byte) 0x49, (byte) 0xae,\n+            (byte) 0xab, (byte) 0x20, (byte) 0x8c, (byte) 0x3e, (byte) 0xc2, (byte) 0xb4, (byte) 0xdd, (byte) 0xa,\n+            (byte) 0x86, (byte) 0xb8, (byte) 0xa7, (byte) 0x47, (byte) 0x35, (byte) 0x9c, (byte) 0x6d, (byte) 0xd5,\n+            (byte) 0x76, (byte) 0xb4, (byte) 0x9a, (byte) 0x43, (byte) 0x40, (byte) 0x5b, (byte) 0x40, (byte) 0xbf,\n+            (byte) 0x9b, (byte) 0x46, (byte) 0xdd, (byte) 0xd1, (byte) 0x2b, (byte) 0xa9, (byte) 0xcf, (byte) 0xba,\n+            (byte) 0x95, (byte) 0x7a, (byte) 0xa3, (byte) 0x5b, (byte) 0x5c, (byte) 0x91, (byte) 0xf3, (byte) 0x67,\n+            (byte) 0x19, (byte) 0xe6, (byte) 0x14, (byte) 0xdc, (byte) 0xc5, (byte) 0x3d, (byte) 0x1, (byte) 0x83,\n+            (byte) 0xb1, (byte) 0x5a, (byte) 0xd4, (byte) 0xb4, (byte) 0x34, (byte) 0x43, (byte) 0x2b, (byte) 0x47,\n+            (byte) 0x77, (byte) 0x75, (byte) 0x35, (byte) 0xda, (byte) 0x2, (byte) 0xc5, (byte) 0xa8, (byte) 0x90,\n+            (byte) 0x50, (byte) 0xbb, (byte) 0x8a, (byte) 0xdc, (byte) 0xe6, (byte) 0xb6, (byte) 0x56, (byte) 0x72,\n+            (byte) 0x18, (byte) 0xee, (byte) 0x2b, (byte) 0x78, (byte) 0x80, (byte) 0xb4, (byte) 0x82, (byte) 0x79,\n+            (byte) 0x1e, (byte) 0xaf, (byte) 0xaf, (byte) 0x7d, (byte) 0x5e, (byte) 0x78, (byte) 0x6f, (byte) 0x9b,\n+            (byte) 0x1f, (byte) 0x78, (byte) 0x29, (byte) 0xa, (byte) 0x16, (byte) 0xf0, (byte) 0xf0, (byte) 0xf4,\n+            (byte) 0x48, (byte) 0x37, (byte) 0x53, (byte) 0x2f, (byte) 0x72, (byte) 0xcf, (byte) 0x3e, (byte) 0x96,\n+            (byte) 0x34, (byte) 0xcb, (byte) 0xd1, (byte) 0x4d, (byte) 0x12, (byte) 0x1c, (byte) 0x8e, (byte) 0x19,\n+            (byte) 0xfc, (byte) 0x1d, (byte) 0xa7, (byte) 0x27, (byte) 0x4a, (byte) 0x51, (byte) 0xb3, (byte) 0xb9,\n+            (byte) 0x42, (byte) 0x2b, (byte) 0x72, (byte) 0xcc, (byte) 0x50, (byte) 0xb0, (byte) 0xc8, (byte) 0x25,\n+            (byte) 0x43, (byte) 0xff, (byte) 0x36, (byte) 0x8e, (byte) 0x8a, (byte) 0x88, (byte) 0x5f, (byte) 0xdc,\n+            (byte) 0xcd, (byte) 0x4e, (byte) 0xe8, (byte) 0xa7, (byte) 0x9a, (byte) 0xa3, (byte) 0x55, (byte) 0x69,\n+            (byte) 0x3e, (byte) 0x66, (byte) 0xdd, (byte) 0x21, (byte) 0x42, (byte) 0xe6, (byte) 0x34, (byte) 0xf8,\n+            (byte) 0x2b, (byte) 0x2, (byte) 0x3b, (byte) 0x44, (byte) 0xd1, (byte) 0xd4, (byte) 0xea, (byte) 0x7c,\n+            (byte) 0x47, (byte) 0x4e, (byte) 0x1d, (byte) 0x6e, (byte) 0x1a, (byte) 0xae, (byte) 0xc5, (byte) 0x77,\n+            (byte) 0xef, (byte) 0x4, (byte) 0x2c, (byte) 0x5c, (byte) 0x10, (byte) 0xa7, (byte) 0x73, (byte) 0x90,\n+            (byte) 0xcd, (byte) 0x16, (byte) 0xcc, (byte) 0x4f, (byte) 0xfe, (byte) 0x47, (byte) 0xdd, (byte) 0x57,\n+            (byte) 0xaa, (byte) 0x98, (byte) 0x35, (byte) 0x9a, (byte) 0x56, (byte) 0xb7, (byte) 0x5a, (byte) 0x2e,\n+            (byte) 0xe7, (byte) 0xeb, (byte) 0x96, (byte) 0x65, (byte) 0x6b, (byte) 0xb5, (byte) 0x9a, (byte) 0x56,\n+            (byte) 0x16, (byte) 0x30, (byte) 0xd4, (byte) 0x29, (byte) 0x7b, (byte) 0xd6, (byte) 0x26, (byte) 0xb7,\n+            (byte) 0x82, (byte) 0xa0, (byte) 0xd5, (byte) 0x54, (byte) 0xa0, (byte) 0x2f, (byte) 0xa1, (byte) 0x60,\n+            (byte) 0xab, (byte) 0x25, (byte) 0xd, (byte) 0x63, (byte) 0xf4, (byte) 0x89, (byte) 0xca, (byte) 0xe0,\n+            (byte) 0x8f, (byte) 0x17, (byte) 0x2, (byte) 0x9f, (byte) 0x32, (byte) 0xd9, (byte) 0x4b, (byte) 0xb4,\n+            (byte) 0x1b, (byte) 0xa1, (byte) 0x55, (byte) 0xa0, (byte) 0xd5, (byte) 0x37, (byte) 0x75, (byte) 0x0,\n+            (byte) 0x61, (byte) 0x9f, (byte) 0xfe, (byte) 0x50, (byte) 0x91, (byte) 0x64, (byte) 0x25, (byte) 0xd7,\n+            (byte) 0x29, (byte) 0x21, (byte) 0x80, (byte) 0x1, (byte) 0xc, (byte) 0xb6, (byte) 0xa0, (byte) 0x13,\n+            (byte) 0x24, (byte) 0xc1, (byte) 0xbd, (byte) 0x5d, (byte) 0x87, (byte) 0xf0, (byte) 0x14, (byte) 0xf,\n+            (byte) 0xe0, (byte) 0x6d, (byte) 0x40, (byte) 0x6c, (byte) 0x13, (byte) 0xf8, (byte) 0x15, (byte) 0x0,\n+            (byte) 0xfc, (byte) 0xb4, (byte) 0x6, (byte) 0xc8, (byte) 0x33, (byte) 0x74, (byte) 0xaa, (byte) 0x2f,\n+            (byte) 0xac, (byte) 0x92, (byte) 0x8, (byte) 0xa3, (byte) 0x93, (byte) 0x6f, (byte) 0x61, (byte) 0x5f,\n+            (byte) 0xe6, (byte) 0x10, (byte) 0x52, (byte) 0x71, (byte) 0xfa, (byte) 0x0, (byte) 0x6c, (byte) 0x4d,\n+            (byte) 0xc8, (byte) 0x7e, (byte) 0x87, (byte) 0x3f, (byte) 0x1c, (byte) 0x10, (byte) 0x7f, (byte) 0x42,\n+            (byte) 0x2e, (byte) 0x7a, (byte) 0xa7, (byte) 0xf3, (byte) 0xd, (byte) 0x74, (byte) 0xbd, (byte) 0x9e,\n+            (byte) 0x39, (byte) 0xc6, (byte) 0xcb, (byte) 0xc4, (byte) 0x31, (byte) 0xfa, (byte) 0x67, (byte) 0x1a,\n+            (byte) 0x50, (byte) 0xf6, (byte) 0xb0, (byte) 0x94, (byte) 0x16, (byte) 0x13, (byte) 0x11, (byte) 0xb1,\n+            (byte) 0x81, (byte) 0x9e, (byte) 0x3d, (byte) 0xcc, (byte) 0x35, (byte) 0x3d, (byte) 0xc9, (byte) 0xb4,\n+            (byte) 0x18, (byte) 0x11, (byte) 0xb3, (byte) 0x11, (byte) 0xf1, (byte) 0x28, (byte) 0xed, (byte) 0x23,\n+            (byte) 0xe8, (byte) 0x48, (byte) 0x1b, (byte) 0x1a, (byte) 0x4e, (byte) 0x4b, (byte) 0x89, (byte) 0x88,\n+            (byte) 0xe4, (byte) 0x42, (byte) 0x19, (byte) 0xf7, (byte) 0x44, (byte) 0x7c, (byte) 0x47, (byte) 0x7b,\n+            (byte) 0x88, (byte) 0xac, (byte) 0xf1, (byte) 0x0, (byte) 0xa1, (byte) 0x73, (byte) 0x1, (byte) 0x1a,\n+            (byte) 0xe8, (byte) 0xdd, (byte) 0xa7, (byte) 0x64, (byte) 0x26, (byte) 0xe8, (byte) 0x42, (byte) 0x26,\n+            (byte) 0xe9, (byte) 0x1e, (byte) 0xf6, (byte) 0x60, (byte) 0x14, (byte) 0x4b, (byte) 0xad, (byte) 0x75,\n+            (byte) 0x85, (byte) 0x12, (byte) 0x5c, (byte) 0xc7, (byte) 0x6, (byte) 0x8a, (byte) 0xb4, (byte) 0x5f,\n+            (byte) 0xc2, (byte) 0xaa, (byte) 0xbb, (byte) 0xf7, (byte) 0x62, (byte) 0x7, (byte) 0x6, (byte) 0x5d,\n+            (byte) 0x52, (byte) 0x8f, (byte) 0x5b, (byte) 0x5e, (byte) 0x12, (byte) 0x5d, (byte) 0x64, (byte) 0x15,\n+            (byte) 0xf2, (byte) 0x72, (byte) 0x6, (byte) 0xe7, (byte) 0x4, (byte) 0x5d, (byte) 0xf6, (byte) 0xa,\n+            (byte) 0xad, (byte) 0x3b, (byte) 0xd4, (byte) 0x4e, (byte) 0x8e, (byte) 0x34, (byte) 0x11, (byte) 0xc2,\n+            (byte) 0x17, (byte) 0xf4, (byte) 0xe2, (byte) 0x2b, (byte) 0x15, (byte) 0x1e, (byte) 0x21, (byte) 0x74,\n+            (byte) 0xe, (byte) 0xf2, (byte) 0x9, (byte) 0x11, (byte) 0x45, (byte) 0x86, (byte) 0x61, (byte) 0x86,\n+            (byte) 0xcb, (byte) 0xc, (byte) 0x57, (byte) 0x18, (byte) 0xef, (byte) 0x36, (byte) 0x19, (byte) 0x79,\n+            (byte) 0x99, (byte) 0xcc, (byte) 0x73, (byte) 0xfa, (byte) 0x9d, (byte) 0x10, (byte) 0x43, (byte) 0x3a,\n+            (byte) 0x77, (byte) 0x7c, (byte) 0x6, (byte) 0xf1, (byte) 0x9e, (byte) 0x50, (byte) 0x64, (byte) 0x4f,\n+            (byte) 0xf3, (byte) 0xc, (byte) 0x78, (byte) 0xc2, (byte) 0x70, (byte) 0xb5, (byte) 0x9f, (byte) 0x3a,\n+            (byte) 0x3a, (byte) 0x4a, (byte) 0xb2, (byte) 0x1e, (byte) 0x44, (byte) 0xff, (byte) 0x2, (byte) 0x50,\n+            (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d, (byte) 0x3, (byte) 0x2d, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x8, (byte) 0x0, (byte) 0x0, (byte) 0x18, (byte) 0x7e, (byte) 0xe, (byte) 0x57, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x9, (byte) 0x0, (byte) 0x32, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0xed,\n+            (byte) 0x41, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x4d, (byte) 0x45, (byte) 0x54,\n+            (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x18, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xfe, (byte) 0xca, (byte) 0x0, (byte) 0x0, (byte) 0x75, (byte) 0x70,\n+            (byte) 0xe, (byte) 0x0, (byte) 0x1, (byte) 0x8, (byte) 0xa1, (byte) 0x8c, (byte) 0x13, (byte) 0x4d,\n+            (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f,\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d, (byte) 0x3, (byte) 0x2d, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x17, (byte) 0x7e, (byte) 0xe, (byte) 0x57,\n+            (byte) 0x31, (byte) 0x59, (byte) 0x76, (byte) 0x4d, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x14, (byte) 0x0, (byte) 0x39, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0xa4, (byte) 0x81, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x4d, (byte) 0x45,\n+            (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f, (byte) 0x4d,\n+            (byte) 0x41, (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53, (byte) 0x54, (byte) 0x2e,\n+            (byte) 0x4d, (byte) 0x46, (byte) 0x1, (byte) 0x0, (byte) 0x18, (byte) 0x0, (byte) 0x6e, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x61, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x51, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75, (byte) 0x70,\n+            (byte) 0x19, (byte) 0x0, (byte) 0x1, (byte) 0x85, (byte) 0x85, (byte) 0x84, (byte) 0x2, (byte) 0x4d,\n+            (byte) 0x45, (byte) 0x54, (byte) 0x41, (byte) 0x2d, (byte) 0x49, (byte) 0x4e, (byte) 0x46, (byte) 0x2f,\n+            (byte) 0x4d, (byte) 0x41, (byte) 0x4e, (byte) 0x49, (byte) 0x46, (byte) 0x45, (byte) 0x53, (byte) 0x54,\n+            (byte) 0x2e, (byte) 0x4d, (byte) 0x46, (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d,\n+            (byte) 0x3, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x67,\n+            (byte) 0x37, (byte) 0xb, (byte) 0x57, (byte) 0x3f, (byte) 0xa5, (byte) 0x4f, (byte) 0x5e, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x10,\n+            (byte) 0x0, (byte) 0x35, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xa4, (byte) 0x81, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0x52, (byte) 0x65, (byte) 0x61, (byte) 0x64, (byte) 0x41, (byte) 0x6e, (byte) 0x74,\n+            (byte) 0x4a, (byte) 0x61, (byte) 0x72, (byte) 0x2e, (byte) 0x63, (byte) 0x6c, (byte) 0x61, (byte) 0x73,\n+            (byte) 0x73, (byte) 0x1, (byte) 0x0, (byte) 0x18, (byte) 0x0, (byte) 0x87, (byte) 0x4, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xc7, (byte) 0x2, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x15, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75, (byte) 0x70, (byte) 0x15,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x94, (byte) 0x82, (byte) 0x60, (byte) 0x61, (byte) 0x52, (byte) 0x65,\n+            (byte) 0x61, (byte) 0x64, (byte) 0x41, (byte) 0x6e, (byte) 0x74, (byte) 0x4a, (byte) 0x61, (byte) 0x72,\n+            (byte) 0x2e, (byte) 0x63, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x50, (byte) 0x4b,\n+            (byte) 0x6, (byte) 0x6, (byte) 0x2c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x2d, (byte) 0x0, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x57, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x37, (byte) 0x4,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b,\n+            (byte) 0x6, (byte) 0x7, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x8e, (byte) 0x5,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x5, (byte) 0x6, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x57, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x37, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+    };\n+\n+    \/*\n+     * ----------------#1--------------------\n+     * [Central Directory Header]\n+     * 0x47: Signature        : 0x02014b50\n+     * 0x4b: Created Zip Spec :       0x2d [4.5]\n+     * 0x4c: Created OS       :        0x3 [UNIX]\n+     * 0x4d: VerMadeby        :      0x32d [3, 4.5]\n+     * 0x4e: VerExtract       :       0x2d [4.5]\n+     * 0x4f: Flag             :      0x800\n+     * 0x51: Method           :        0x8 [DEFLATED]\n+     * 0x53: Last Mod Time    : 0x570375bc [Thu Aug 03 14:45:56 EDT 2023]\n+     * 0x57: CRC              :        0x0\n+     * 0x5b: Compressed Size  :        0x2\n+     * 0x5f: Uncompressed Size:        0x0\n+     * * 0x63: Name Length      :        0x5\n+     * 0x65: Extra Length     :       0x12\n+     *       Extra data:[01, 00, 00, 00, 75, 70, 0a, 00, 01, ba, f7, eb, c1, 61, 2e, 74, 78, 74]\n+     *       [tag=0x0001, sz=0]\n+     *           ->ZIP64:\n+     *       [tag=0x7075, sz=10]\n+     *           ->[Unknown tag]\n+     *       [data= 01 ba f7 eb c1 61 2e 74 78 74 ]\n+     * 0x67: Comment Length   :        0x0\n+     * 0x69: Disk Start       :        0x0\n+     * 0x6b: Attrs            :        0x0\n+     * 0x6d: AttrsEx          : 0x81a40000\n+     * 0x71: Loc Header Offset:        0x0\n+     * 0x75: File Name        : a.txt\n+     *\/\n+    public static byte[] ANT_ZIP64_UNICODE_EXTRA_ZIP= {\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x8,\n+            (byte) 0x8, (byte) 0x0, (byte) 0xbc, (byte) 0x75, (byte) 0x3, (byte) 0x57, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0x5, (byte) 0x0, (byte) 0x22, (byte) 0x0, (byte) 0x61, (byte) 0x2e,\n+            (byte) 0x74, (byte) 0x78, (byte) 0x74, (byte) 0x1, (byte) 0x0, (byte) 0x10, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75,\n+            (byte) 0x70, (byte) 0xa, (byte) 0x0, (byte) 0x1, (byte) 0xba, (byte) 0xf7, (byte) 0xeb, (byte) 0xc1,\n+            (byte) 0x61, (byte) 0x2e, (byte) 0x74, (byte) 0x78, (byte) 0x74, (byte) 0x3, (byte) 0x0, (byte) 0x50,\n+            (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x2d, (byte) 0x3, (byte) 0x2d, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0xbc, (byte) 0x75, (byte) 0x3, (byte) 0x57, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x5, (byte) 0x0, (byte) 0x12, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xa4,\n+            (byte) 0x81, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x61, (byte) 0x2e, (byte) 0x74,\n+            (byte) 0x78, (byte) 0x74, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x75, (byte) 0x70,\n+            (byte) 0xa, (byte) 0x0, (byte) 0x1, (byte) 0xba, (byte) 0xf7, (byte) 0xeb, (byte) 0xc1, (byte) 0x61,\n+            (byte) 0x2e, (byte) 0x74, (byte) 0x78, (byte) 0x74, (byte) 0x50, (byte) 0x4b, (byte) 0x6, (byte) 0x6,\n+            (byte) 0x2c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x2d, (byte) 0x0, (byte) 0x2d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x45, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x47, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x6, (byte) 0x7,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x8c, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x5, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x45, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x47, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+    };\n+\n+    \/\/ Name of Zip file and Jar File used by the test\n+    public static final Path VALID_APK = Path.of(\"working-apk.zip\");\n+    public static final Path VALID_APACHE_COMPRESS_JAR =\n+            Path.of(\"valid-apache-compress.jar\");\n+    public static final Path VALID_ANT_JAR =\n+            Path.of(\"valid-ant-zip64-unicode-extrafields.jar\");\n+    public static final Path VALID_ANT_ZIP =\n+            Path.of(\"valid-ant-zip64-unicode-extrafields.zip\");\n+    \/**\n+     * Setup method used to create the Zip and Jar files used by the test\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeAll\n+    public static void setup() throws IOException {\n+        Files.deleteIfExists(VALID_APK);\n+        Files.deleteIfExists(VALID_APACHE_COMPRESS_JAR);\n+        Files.deleteIfExists(VALID_ANT_JAR);\n+        Files.deleteIfExists(VALID_ANT_ZIP);\n+\n+        \/\/ Create the Zip file to read\n+        Files.write(VALID_APK, VALID_APK_FILE);\n+        Files.write(VALID_APACHE_COMPRESS_JAR, COMMONS_COMPRESS_JAR);\n+        Files.write(VALID_ANT_JAR, ANT_ZIP64_UNICODE_EXTRA_JAR);\n+        Files.write(VALID_ANT_ZIP, ANT_ZIP64_UNICODE_EXTRA_ZIP);\n+\n+    }\n+\n+    \/**\n+     * Zip and Jars files to validate we can open\n+     *\/\n+    private static Stream<Path> zipFilesToTest() {\n+        return Stream.of(VALID_APK, VALID_APACHE_COMPRESS_JAR, VALID_ANT_JAR, VALID_ANT_ZIP);\n+    }\n+\n+    \/**\n+     * Validate that a Zip file which contains an extra header with a data size\n+     * 0f 0 can be opened using ZipFile\n+     * @throws IOException if an error occurs\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"zipFilesToTest\")\n+    public void zipFilesToTest(Path jar) throws IOException {\n+        try (ZipFile zf = new ZipFile(jar.toFile())) {\n+            System.out.printf(\"%s opened%n\", jar.toAbsolutePath());\n+        } catch (IOException ie) {\n+            System.out.printf(\"%n%n%n$$$$ %s NOT opened%n\", jar.toAbsolutePath());\n+            throw ie;\n+        }\n+    }\n+\n+    \/**\n+     * Validate that a Zip file which contains an extra header with a data size\n+     * 0f 0 can be opened using ZipFS\n+     * @throws IOException if an error occurs\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"zipFilesToTest\")\n+    public void readZipFSTest(Path jar) throws IOException {\n+        try (FileSystem fs = FileSystems.newFileSystem(jar, Map.of())) {\n+            System.out.printf(\"%s opened%n\", jar.toAbsolutePath());\n+        } catch (IOException ie) {\n+            System.out.printf(\"%n%n%n$$$$ %s NOT opened%n\", jar.toAbsolutePath());\n+            throw ie;\n+        }\n+    }\n+    \/**\n+     * Utility method which takes a byte array and converts to byte array\n+     * declaration.  For example:\n+     * <pre>\n+     *     {@code\n+     *        var fooJar = Files.readAllBytes(Path.of(\"foo.jar\"));\n+     *        var result = createByteArray(fooJar, \"FOOBYTES\");\n+     *        System.out.println(result);\n+     *      }\n+     * <\/pre>\n+     *\n+     * @param bytes A byte array used to create a byte array declaration\n+     * @param name  Name to be used in the byte array declaration\n+     * @return The formatted byte array declaration\n+     *\/\n+    public static String createByteArray(byte[] bytes, String name) {\n+        StringBuilder sb = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    public static byte[] %s = {\", name);\n+        final int linelen = 8;\n+        for (int i = 0; i < bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadNonStandardExtraHeadersTest.java","additions":934,"deletions":0,"binary":false,"changes":934,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+import javax.sound.midi.InvalidMidiDataException;\n+import javax.sound.midi.MidiSystem;\n+\n+\/**\n+ * @test\n+ * @bug 8312535\n+ * @summary MidiSystem.getSoundbank() throws unexpected SecurityException\n+ * @run main\/othervm\/policy=security.policy GetSoundBankSecurityException\n+ *\/\n+public final class GetSoundBankSecurityException {\n+\n+    public static void main(String[] args) throws Exception {\n+        File tempFile = new File(\"sound.bank\");\n+        tempFile.createNewFile();\n+        try {\n+            MidiSystem.getSoundbank(tempFile);\n+            throw new RuntimeException(\"InvalidMidiDataException is expected\");\n+        } catch (InvalidMidiDataException ignore) {\n+        } finally {\n+            Files.delete(Paths.get(tempFile.getAbsolutePath()));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/midi\/Soundbanks\/GetSoundBankSecurityException\/GetSoundBankSecurityException.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+grant {\n+    permission java.io.FilePermission \"*\", \"read,write,delete\";\n+    permission java.util.PropertyPermission  \"user.dir\",  \"read\";\n+};\n","filename":"test\/jdk\/javax\/sound\/midi\/Soundbanks\/GetSoundBankSecurityException\/security.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,8 +24,0 @@\n-\/*\n- * @test\n- * @key headful\n- * @bug     4529206\n- * @summary JToolBar - setFloating does not work correctly\n- * @run     main bug4529206\n- *\/\n-\n@@ -35,2 +27,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -44,0 +34,8 @@\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4529206\n+ * @summary JToolBar - setFloating does not work correctly\n+ * @run main bug4529206\n+ *\/\n+\n@@ -61,5 +59,1 @@\n-        jButton1.addActionListener(new ActionListener() {\n-            public void actionPerformed(ActionEvent e) {\n-                buttonPressed(e);\n-            }\n-        });\n+        jButton1.addActionListener(e -> buttonPressed());\n@@ -80,1 +74,1 @@\n-    private static void buttonPressed(ActionEvent e) {\n+    private static void buttonPressed() {\n@@ -86,5 +80,1 @@\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    test();\n-                }\n-            });\n+            SwingUtilities.invokeAndWait(() -> test());\n@@ -92,1 +82,1 @@\n-            robot.waitForIdle();\n+            robot.setAutoWaitForIdle(true);\n@@ -95,3 +85,2 @@\n-            SwingUtilities.invokeAndWait(() -> {\n-                makeToolbarFloat();\n-            });\n+            SwingUtilities.invokeAndWait(() -> makeToolbarFloat());\n+            robot.delay(300);\n@@ -99,7 +88,4 @@\n-            robot.waitForIdle();\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    if (frame.isFocused()) {\n-                        throw\n-                          new RuntimeException(\"setFloating does not work correctly\");\n-                    }\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame.isFocused()) {\n+                    throw\n+                      new RuntimeException(\"setFloating does not work correctly\");\n","filename":"test\/jdk\/javax\/swing\/JToolBar\/4529206\/bug4529206.java","additions":19,"deletions":33,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4346610\n+ * @key headful\n+ * @summary Verifies if Adding JSeparator to JToolBar \"pushes\" buttons added\n+ *          after separator to edge\n+ * @run main ToolBarSeparatorSizeTest\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.image.BufferedImage;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.JToolBar;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+\n+import javax.imageio.ImageIO;\n+\n+public class ToolBarSeparatorSizeTest {\n+\n+    private static JFrame frame;\n+    private static JSeparator separator;\n+    private static JToolBar toolBar;\n+    private static volatile Rectangle toolBarBounds;\n+    private static volatile int sepWidth;\n+    private static volatile int sepPrefWidth;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"ToolBar Separator Test\");\n+                toolBar = new JToolBar();\n+                toolBar.add(new JButton(\"button 1\"));\n+                toolBar.add(new JButton(\"button 2\"));\n+                separator = new JSeparator(SwingConstants.VERTICAL);\n+                toolBar.add(separator);\n+                toolBar.add(new JButton(\"button 3\"));\n+                frame.getContentPane().setLayout(new BorderLayout());\n+                frame.getContentPane().add(toolBar, BorderLayout.NORTH);\n+                frame.getContentPane().add(new JPanel(), BorderLayout.CENTER);\n+                frame.setSize(400, 100);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                toolBarBounds = new Rectangle(toolBar.getLocationOnScreen(),\n+                                              toolBar.getSize());\n+                sepWidth = separator.getSize().width;\n+                sepPrefWidth = separator.getPreferredSize().width;\n+            });\n+            if (sepWidth != sepPrefWidth) {\n+                System.out.println(\"size \" + sepWidth);\n+                System.out.println(\"preferredSize \" + sepPrefWidth);\n+                BufferedImage img = robot.createScreenCapture(toolBarBounds);\n+                ImageIO.write(img, \"png\", new java.io.File(\"image.png\"));\n+                throw new RuntimeException(\"Separator size is too wide\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolBar\/ToolBarSeparatorSizeTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-            \"DataLoss\", \"IntFlag\", \"ReservedStackActivation\",\n+            \"DataLoss\", \"IntFlag\", \"ReservedStackActivation\", \"NativeLibraryUnload\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.Platform jdk.test.lib.net.IPSupport\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -48,13 +49,18 @@\n-        testDatagramChannel();\n-        StandardProtocolFamily fam = args[0].equals(\"ipv4\") ? INET : INET6;\n-        System.out.println(\"Family = \" + fam);\n-        testDatagramChannel(args, fam);\n-        try (DatagramSocket c = new DatagramSocket()) {\n-            testDatagramSocket(c);\n-        }\n-        try (DatagramChannel dc = DatagramChannel.open(fam)) {\n-            var c = dc.socket();\n-            testDatagramSocket(c);\n-        }\n-        try (MulticastSocket mc = new MulticastSocket()) {\n-            testDatagramSocket(mc);\n+        boolean ipv6 = args[0].equals(\"ipv6\");\n+        if (ipv6 && !IPSupport.hasIPv6()) {\n+            System.out.println(\"No IPv6 support detected, skipping IPv6 test case\");\n+        } else {\n+            testDatagramChannel();\n+            StandardProtocolFamily fam = ipv6 ? INET6 : INET;\n+            System.out.println(\"Family = \" + fam);\n+            testDatagramChannel(args, fam);\n+            try (DatagramSocket c = new DatagramSocket()) {\n+                testDatagramSocket(c);\n+            }\n+            try (DatagramChannel dc = DatagramChannel.open(fam)) {\n+                var c = dc.socket();\n+                testDatagramSocket(c);\n+            }\n+            try (MulticastSocket mc = new MulticastSocket()) {\n+                testDatagramSocket(mc);\n+            }\n","filename":"test\/jdk\/jdk\/net\/ExtendedSocketOption\/DontFragmentTest.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,0 +396,2 @@\n+                \"-Duser.language=en\",\n+                \"-Duser.country=US\",\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/JMXStartStopTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-        SignerInfo[] verifs1 = pkcs71.verify();\n+        SignerInfo[] verifs1 = pkcs71.verify(null);\n@@ -108,1 +108,1 @@\n-        SignerInfo[] verifs2 = pkcs72.verify();\n+        SignerInfo[] verifs2 = pkcs72.verify(null);\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs7\/SignerOrder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8301154\n+ * @bug 8301154 8309214\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/CertChainRemoval.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,0 +161,3 @@\n+            \/\/ Needed so we can properly parse the \"Welcome to JShell\" output.\n+            pb.command().add(\"-J-Duser.language=en\");\n+            pb.command().add(\"-J-Duser.country=US\");\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/JShellHeapDumpTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,2 +60,1 @@\n-        \"CompressedClassSpaceSize\",\n-        \"G1HeapRegionSize\"};\n+        \"CompressedClassSpaceSize\"};\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/JMapHeapConfigTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import tests.JImageGenerator;\n+import tests.Result;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that modules can be linked using jlink\n+ * and deduplication works correctly when creating sub methods\n+ * @bug 8311591\n+ * @library \/test\/lib\n+ *          ..\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.* JLinkDedupTestBatchSizeOne jdk.test.lib.compiler.CompilerUtils\n+ * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLinkDedupTestBatchSizeOne\n+ *\/\n+public class JLinkDedupTestBatchSizeOne {\n+\n+    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"dedup\", \"src\");\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+\n+    private static final String MODULE_PATH =\n+            Paths.get(JAVA_HOME, \"jmods\").toString() +\n+                    File.pathSeparator + MODS_DIR.toString();\n+\n+    \/\/ the names of the modules in this test\n+    private static String[] modules = new String[]{\"m1\", \"m2\", \"m3\", \"m4\"};\n+\n+    private static boolean hasJmods() {\n+        if (!Files.exists(Paths.get(JAVA_HOME, \"jmods\"))) {\n+            System.err.println(\"Test skipped. No jmods directory\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static void compileAll() throws Throwable {\n+        if (!hasJmods()) return;\n+\n+        for (String mn : modules) {\n+            Path msrc = SRC_DIR.resolve(mn);\n+            CompilerUtils.compile(msrc, MODS_DIR,\n+                    \"--module-source-path\", SRC_DIR.toString());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        compileAll();\n+        Path image = Paths.get(\"bug8311591\");\n+\n+        JImageGenerator.getJLinkTask()\n+                .modulePath(MODULE_PATH)\n+                .output(image.resolve(\"out-jlink-dedup\"))\n+                .addMods(\"m1\")\n+                .addMods(\"m2\")\n+                .addMods(\"m3\")\n+                .addMods(\"m4\")\n+                .option(\"--system-modules=batchSize=1\")\n+                .call()\n+                .assertSuccess();\n+\n+        Path binDir = image.resolve(\"out-jlink-dedup\").resolve(\"bin\").toAbsolutePath();\n+        Path bin = binDir.resolve(\"java\");\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder(bin.toString(),\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+BytecodeVerificationLocal\",\n+                \"-m\", \"m4\/p4.Main\");\n+        processBuilder.inheritIO();\n+        processBuilder.directory(binDir.toFile());\n+        Process process = processBuilder.start();\n+        int exitCode = process.waitFor();\n+        if (exitCode != 0)\n+            throw new AssertionError(\"JLinkDedupTest100Modules failed to launch\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import p1.AInterface;\n+import p3.ServiceInterface;\n+\n+module m1 {\n+    exports p1 to m4;\n+\n+    opens p1 to m4;\n+\n+    requires transitive java.desktop;\n+    requires m3;\n+\n+    provides ServiceInterface with AInterface;\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m1\/module-info.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p1;\n+import p3.ServiceInterface;\n+\n+public class AInterface implements ServiceInterface {\n+\n+    public String getString() {\n+        return \"A1_A2\";\n+    }\n+\n+    public String getServiceName() {\n+        return \"AService\";\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m1\/p1\/AInterface.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import p2.BInterface;\n+import p3.ServiceInterface;\n+\n+module m2 {\n+    exports p2 to m3,m4;\n+\n+    opens p2 to m4;\n+\n+    requires transitive java.desktop;\n+    requires m3;\n+\n+    provides ServiceInterface with BInterface;\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m2\/module-info.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p2;\n+import p3.ServiceInterface;\n+public class BInterface implements ServiceInterface {\n+\n+    public String getString() {\n+        return \"B1_B2\";\n+    }\n+\n+    public String getServiceName() {\n+        return \"BService\";\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m2\/p2\/BInterface.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module m3 {\n+    exports p3;\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m3\/module-info.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p3;\n+public interface ServiceInterface {\n+\n+    String getString();\n+\n+    String getServiceName();\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m3\/p3\/ServiceInterface.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import p3.ServiceInterface;\n+\n+module m4 {\n+    requires m3;\n+    requires transitive java.desktop;\n+    uses ServiceInterface;\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m4\/module-info.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p4;\n+\n+import p3.ServiceInterface;\n+\n+import java.lang.module.ModuleFinder;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws Exception {\n+        List<ServiceInterface> services = getServices();\n+        for (var service : services) {\n+            System.out.println(\"Service name  \" + service.getServiceName());\n+            System.out.println(\"Service string \" + service.getString());\n+        }\n+        var moduleClass = Class.forName(\"jdk.internal.module.SystemModules$all\");\n+        long subMethodCount = Arrays.stream(moduleClass.getDeclaredMethods())\n+                                    .filter(method -> method.getName().startsWith(\"sub\"))\n+                                    .count();\n+\n+        \/\/ one subX method per each module is generated as the image is linked with\n+        \/\/ --system-modules=batchSize=1\n+        var moduleCount = (long) ModuleFinder.ofSystem().findAll().size();\n+        if (subMethodCount != moduleCount) {\n+            throw new AssertionError(\"Difference in generated sub module methods count! Expected: \" +\n+                    moduleCount + \" but was \" + subMethodCount);\n+        }\n+    }\n+\n+    private static List<ServiceInterface> getServices() {\n+        List<ServiceInterface> services = new ArrayList<>();\n+        ServiceLoader.load(ServiceInterface.class).forEach(services::add);\n+        return services;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m4\/p4\/Main.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,8 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public void test(boolean doSign) throws Exception {\n-        SigningCheck.checkCertificates();\n+    @Parameter({\"true\", \"0\"}) \/\/ ({\"sign or not\", \"certificate index\"})\n+    @Parameter({\"true\", \"1\"})\n+    @Parameter({\"false\", \"-1\"})\n+    public void test(String... testArgs) throws Exception {\n+        boolean doSign = Boolean.parseBoolean(testArgs[0]);\n+        int certIndex = Integer.parseInt(testArgs[1]);\n+\n+        SigningCheck.checkCertificates(certIndex);\n@@ -71,3 +75,5 @@\n-            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+            cmd.addArguments(\"--mac-sign\",\n+                    \"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(certIndex),\n+                    \"--mac-signing-keychain\",\n+                    SigningBase.getKeyChain());\n@@ -80,1 +86,1 @@\n-        SigningBase.verifyCodesign(launcherPath, doSign);\n+        SigningBase.verifyCodesign(launcherPath, doSign, certIndex);\n@@ -83,1 +89,1 @@\n-        SigningBase.verifyCodesign(testALPath, doSign);\n+        SigningBase.verifyCodesign(testALPath, doSign, certIndex);\n@@ -86,1 +92,1 @@\n-        SigningBase.verifyCodesign(appImage, doSign);\n+        SigningBase.verifyCodesign(appImage, doSign, certIndex);\n@@ -88,1 +94,1 @@\n-            SigningBase.verifySpctl(appImage, \"exec\");\n+            SigningBase.verifySpctl(appImage, \"exec\", certIndex);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n@@ -78,3 +78,5 @@\n-            appImageCmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+            appImageCmd.addArguments(\"--mac-sign\",\n+                    \"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n+                    \"--mac-signing-keychain\",\n+                    SigningBase.getKeyChain());\n@@ -98,2 +100,3 @@\n-            .addArguments(\"--mac-signing-key-user-name\", SigningBase.DEV_NAME)\n-            .addArguments(\"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+            .addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n+            .addArguments(\"--mac-signing-keychain\", SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTwoStepsTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifySpctl(outputBundle, \"install\", SigningBase.DEFAULT_INDEX);\n@@ -92,3 +92,3 @@\n-                SigningBase.verifyCodesign(launcherPath, true);\n-                SigningBase.verifyCodesign(dmgImage, true);\n-                SigningBase.verifySpctl(dmgImage, \"exec\");\n+                SigningBase.verifyCodesign(launcherPath, true, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifyCodesign(dmgImage, true, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifySpctl(dmgImage, \"exec\", SigningBase.DEFAULT_INDEX);\n@@ -103,1 +103,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n@@ -114,2 +114,2 @@\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n+                    \"--mac-signing-keychain\", SigningBase.getKeyChain());\n@@ -129,2 +129,3 @@\n-            .addArguments(\"--mac-signing-key-user-name\", SigningBase.DEV_NAME)\n-            .addArguments(\"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+            .addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n+            .addArguments(\"--mac-signing-keychain\", SigningBase.getKeyChain());\n@@ -144,1 +145,1 @@\n-                                SigningBase.DEV_NAME,\n+                                SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n@@ -146,1 +147,1 @@\n-                                SigningBase.KEYCHAIN);\n+                                SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -68,2 +69,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, getCertIndex(cmd));\n+        SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n@@ -84,3 +85,3 @@\n-                SigningBase.verifyCodesign(launcherPath, true);\n-                SigningBase.verifyCodesign(dmgImage, true);\n-                SigningBase.verifySpctl(dmgImage, \"exec\");\n+                SigningBase.verifyCodesign(launcherPath, true, getCertIndex(cmd));\n+                SigningBase.verifyCodesign(dmgImage, true, getCertIndex(cmd));\n+                SigningBase.verifySpctl(dmgImage, \"exec\", getCertIndex(cmd));\n@@ -91,0 +92,5 @@\n+    private static int getCertIndex(JPackageCommand cmd) {\n+        String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n+        return SigningBase.getDevNameIndex(devName);\n+    }\n+\n@@ -92,2 +98,4 @@\n-    public static void test() throws Exception {\n-        SigningCheck.checkCertificates();\n+    @Parameter(\"0\")\n+    @Parameter(\"1\")\n+    public static void test(int certIndex) throws Exception {\n+        SigningCheck.checkCertificates(certIndex);\n@@ -100,2 +108,2 @@\n-                            \"--mac-signing-key-user-name\", SigningBase.DEV_NAME,\n-                            \"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+                            \"--mac-signing-key-user-name\", SigningBase.getDevName(certIndex),\n+                            \"--mac-signing-keychain\", SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-        SigningBase.verifyPkgutil(outputBundle);\n-        SigningBase.verifySpctl(outputBundle, \"install\");\n+        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifySpctl(outputBundle, \"install\", SigningBase.DEFAULT_INDEX);\n@@ -94,2 +94,2 @@\n-                SigningBase.verifyCodesign(launcherPath, isSigned);\n-                SigningBase.verifyCodesign(dmgImage, isSigned);\n+                SigningBase.verifyCodesign(launcherPath, isSigned, SigningBase.DEFAULT_INDEX);\n+                SigningBase.verifyCodesign(dmgImage, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -97,1 +97,1 @@\n-                    SigningBase.verifySpctl(dmgImage, \"exec\");\n+                    SigningBase.verifySpctl(dmgImage, \"exec\", SigningBase.DEFAULT_INDEX);\n@@ -107,1 +107,1 @@\n-        SigningCheck.checkCertificates();\n+        SigningCheck.checkCertificates(0);\n@@ -116,1 +116,1 @@\n-                            SigningBase.DEV_NAME)\n+                            SigningBase.getDevName(0))\n@@ -118,1 +118,1 @@\n-                            SigningBase.KEYCHAIN);\n+                            SigningBase.getKeyChain());\n@@ -130,1 +130,1 @@\n-                                SigningBase.DEV_NAME,\n+                                SigningBase.getDevName(0),\n@@ -132,1 +132,1 @@\n-                                SigningBase.KEYCHAIN);\n+                                SigningBase.getKeyChain());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Arrays;\n@@ -34,5 +35,23 @@\n-    public static String DEV_NAME;\n-    public static String APP_CERT;\n-    public static String INSTALLER_CERT;\n-    public static String KEYCHAIN;\n-    static {\n+    public static int DEFAULT_INDEX = 0;\n+    private static String [] DEV_NAMES = {\n+        \"jpackage.openjdk.java.net\",\n+        \"jpackage.openjdk.java.net (ö)\",\n+    };\n+    private static String DEFAULT_KEYCHAIN = \"jpackagerTest.keychain\";\n+\n+    public static String getDevName(int certIndex) {\n+        \/\/ Always use values from system properties if set\n+        String value = System.getProperty(\"jpackage.mac.signing.key.user.name\");\n+        if (value != null) {\n+            return value;\n+        }\n+\n+        return DEV_NAMES[certIndex];\n+    }\n+\n+    public static int getDevNameIndex(String devName) {\n+        return Arrays.binarySearch(DEV_NAMES, devName);\n+    }\n+\n+    \/\/ Returns 'true' if dev name from DEV_NAMES\n+    public static boolean isDevNameDefault() {\n@@ -40,5 +59,23 @@\n-        DEV_NAME = (value == null) ?  \"jpackage.openjdk.java.net\" : value;\n-        APP_CERT = \"Developer ID Application: \" + DEV_NAME;\n-        INSTALLER_CERT = \"Developer ID Installer: \" + DEV_NAME;\n-        value = System.getProperty(\"jpackage.mac.signing.keychain\");\n-        KEYCHAIN = (value == null) ? \"jpackagerTest.keychain\" : value;\n+        if (value != null) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static String getAppCert(int certIndex) {\n+        return \"Developer ID Application: \" + getDevName(certIndex);\n+    }\n+\n+    public static String getInstallerCert(int certIndex) {\n+        return \"Developer ID Installer: \" + getDevName(certIndex);\n+    }\n+\n+    public static String getKeyChain() {\n+        \/\/ Always use values from system properties if set\n+        String value = System.getProperty(\"jpackage.mac.signing.keychain\");\n+        if (value != null) {\n+            return value;\n+        }\n+\n+        return DEFAULT_KEYCHAIN;\n@@ -66,1 +103,1 @@\n-            case CodesignCheckType.VERIFY_UNSIGNED:\n+            case VERIFY_UNSIGNED:\n@@ -68,1 +105,1 @@\n-            case CodesignCheckType.VERIFY:\n+            case VERIFY:\n@@ -72,1 +109,1 @@\n-            case CodesignCheckType.DISPLAY:\n+            case DISPLAY:\n@@ -83,1 +120,1 @@\n-            boolean signed, CodesignCheckType type) {\n+            boolean signed, CodesignCheckType type, int certIndex) {\n@@ -87,1 +124,1 @@\n-            case CodesignCheckType.VERIFY:\n+            case VERIFY:\n@@ -93,1 +130,1 @@\n-            case CodesignCheckType.VERIFY_UNSIGNED:\n+            case VERIFY_UNSIGNED:\n@@ -97,1 +134,1 @@\n-            case CodesignCheckType.DISPLAY:\n+            case DISPLAY:\n@@ -99,1 +136,1 @@\n-                    lookupString = \"Authority=\" + APP_CERT;\n+                    lookupString = \"Authority=\" + getAppCert(certIndex);\n@@ -127,1 +164,1 @@\n-            String type, int exitCode) {\n+            String type, int exitCode, int certIndex) {\n@@ -141,1 +178,1 @@\n-            lookupString = \"origin=\" + INSTALLER_CERT;\n+            lookupString = \"origin=\" + getInstallerCert(certIndex);\n@@ -143,1 +180,1 @@\n-            lookupString = \"origin=\" + APP_CERT;\n+            lookupString = \"origin=\" + getAppCert(certIndex);\n@@ -158,1 +195,1 @@\n-    private static void verifyPkgutilResult(List<String> result) {\n+    private static void verifyPkgutilResult(List<String> result, int certIndex) {\n@@ -162,1 +199,1 @@\n-        lookupString = \"1. \" + INSTALLER_CERT;\n+        lookupString = \"1. \" + getInstallerCert(certIndex);\n@@ -166,1 +203,1 @@\n-    public static void verifyCodesign(Path target, boolean signed) {\n+    public static void verifyCodesign(Path target, boolean signed, int certIndex) {\n@@ -168,1 +205,1 @@\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.VERIFY);\n+        verifyCodesignResult(result, target, signed, CodesignCheckType.VERIFY, certIndex);\n@@ -171,1 +208,1 @@\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.DISPLAY);\n+        verifyCodesignResult(result, target, signed, CodesignCheckType.DISPLAY, certIndex);\n@@ -184,1 +221,1 @@\n-        verifyCodesignResult(result, target, false, CodesignCheckType.VERIFY_UNSIGNED);\n+        verifyCodesignResult(result, target, false, CodesignCheckType.VERIFY_UNSIGNED, -1);\n@@ -187,1 +224,1 @@\n-    public static void verifySpctl(Path target, String type) {\n+    public static void verifySpctl(Path target, String type, int certIndex) {\n@@ -191,1 +228,1 @@\n-        verifySpctlResult(output, target, type, result.getExitCode());\n+        verifySpctlResult(output, target, type, result.getExitCode(), certIndex);\n@@ -194,1 +231,1 @@\n-    public static void verifyPkgutil(Path target) {\n+    public static void verifyPkgutil(Path target, int certIndex) {\n@@ -196,1 +233,1 @@\n-        verifyPkgutilResult(result);\n+        verifyPkgutilResult(result, certIndex);\n@@ -202,1 +239,1 @@\n-        SigningBase.verifyCodesign(launcherPath, isSigned);\n+        SigningBase.verifyCodesign(launcherPath, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -207,1 +244,1 @@\n-            SigningBase.verifyCodesign(testALPath, isSigned);\n+            SigningBase.verifyCodesign(testALPath, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -211,1 +248,1 @@\n-        SigningBase.verifyCodesign(appImage, isSigned);\n+        SigningBase.verifyCodesign(appImage, isSigned, SigningBase.DEFAULT_INDEX);\n@@ -213,1 +250,1 @@\n-            SigningBase.verifySpctl(appImage, \"exec\");\n+            SigningBase.verifySpctl(appImage, \"exec\", 0);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":72,"deletions":35,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,11 +36,8 @@\n-    public static void checkCertificates() {\n-        List<String> result = findCertificate(SigningBase.APP_CERT, SigningBase.KEYCHAIN);\n-        String key = findKey(SigningBase.APP_CERT, result);\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.APP_CERT);\n-\n-        result = findCertificate(SigningBase.INSTALLER_CERT, SigningBase.KEYCHAIN);\n-        key = findKey(SigningBase.INSTALLER_CERT, result);\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.INSTALLER_CERT);\n-    }\n+    public static void checkCertificates(int certIndex) {\n+        if (!SigningBase.isDevNameDefault()) {\n+            \/\/ Do not validate user supplied certificates.\n+            \/\/ User supplied certs whose trust is set to \"Use System Defaults\"\n+            \/\/ will not be listed as trusted by dump-trust-settings, so we\n+            \/\/ cannot verify them completely.\n+            return;\n+        }\n@@ -48,5 +45,6 @@\n-    private static List<String> findCertificate(String name, String keyChain) {\n-        List<String> result = new Executor()\n-                .setExecutable(\"\/usr\/bin\/security\")\n-                .addArguments(\"find-certificate\", \"-c\", name, \"-a\", keyChain)\n-                .executeAndGetOutput();\n+        \/\/ Index can be -1 for unsigned tests, but we still skipping test\n+        \/\/ if machine is not configured for signing testing, so default it to\n+        \/\/ SigningBase.DEFAULT_INDEX\n+        if (certIndex <= -1) {\n+            certIndex = SigningBase.DEFAULT_INDEX;\n+        }\n@@ -54,2 +52,5 @@\n-        return result;\n-    }\n+        String key = MacCertificate.findCertificateKey(null,\n+                        SigningBase.getAppCert(certIndex),\n+                        SigningBase.getKeyChain());\n+        validateCertificate(key);\n+        validateCertificateTrust(SigningBase.getAppCert(certIndex));\n@@ -57,14 +58,5 @@\n-    private static String findKey(String name, List<String> result) {\n-        Pattern p = Pattern.compile(\"\\\"alis\\\"<blob>=\\\"([^\\\"]+)\\\"\");\n-        Matcher m = p.matcher(result.stream().collect(Collectors.joining()));\n-        if (!m.find()) {\n-            TKit.trace(\"Did not found a key for '\" + name + \"'\");\n-            return null;\n-        }\n-        String matchedKey = m.group(1);\n-        if (m.find()) {\n-            TKit.trace(\"Found more than one key for '\" + name + \"'\");\n-            return null;\n-        }\n-        TKit.trace(\"Using key '\" + matchedKey);\n-        return matchedKey;\n+        key = MacCertificate.findCertificateKey(null,\n+                SigningBase.getInstallerCert(certIndex),\n+                SigningBase.getKeyChain());\n+        validateCertificate(key);\n+        validateCertificateTrust(SigningBase.getInstallerCert(certIndex));\n@@ -88,14 +80,10 @@\n-        \/\/ User supplied certs whose trust is set to \"Use System Defaults\"\n-        \/\/ will not be listed as trusted by dump-trust-settings\n-        if (SigningBase.DEV_NAME.equals(\"jpackage.openjdk.java.net\")) {\n-            List<String> result = new Executor()\n-                    .setExecutable(\"\/usr\/bin\/security\")\n-                    .addArguments(\"dump-trust-settings\")\n-                    .executeWithoutExitCodeCheckAndGetOutput();\n-            result.stream().forEachOrdered(TKit::trace);\n-            TKit.assertTextStream(name)\n-                    .predicate((line, what) -> line.trim().endsWith(what))\n-                    .orElseThrow(() -> TKit.throwSkippedException(\n-                            \"Certifcate not trusted by current user: \" + name))\n-                    .apply(result.stream());\n-        }\n+        List<String> result = new Executor()\n+                .setExecutable(\"\/usr\/bin\/security\")\n+                .addArguments(\"dump-trust-settings\")\n+                .executeWithoutExitCodeCheckAndGetOutput();\n+        result.stream().forEachOrdered(TKit::trace);\n+        TKit.assertTextStream(name)\n+                .predicate((line, what) -> line.trim().endsWith(what))\n+                .orElseThrow(() -> TKit.throwSkippedException(\n+                        \"Certifcate not trusted by current user: \" + name))\n+                .apply(result.stream());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningCheck.java","additions":35,"deletions":47,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -18,1 +18,1 @@\n-requiredVersion=7.3+1\n+requiredVersion=7.3.1+1\n","filename":"test\/langtools\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-                                return null;\n+                                return Set.of();\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAutoLoadTaglets\/TestAutoLoadTaglets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314448\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestUnknownTags\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestUnknownTags extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestUnknownTags().runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    \/\/ DocLint or not, there should be exactly one diagnostic message about\n+    \/\/ an unknown tag. No doubled, no \"swallowed\" messages, just one.\n+    @Test\n+    public void testExactlyOneMessage(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                \/** @mytag *\/\n+                public class MyClass { }\n+                \"\"\");\n+        \/\/ don't check exit status: we don't care if it's an error or warning\n+\n+        \/\/ DocLint is explicit\n+        int i = 0;\n+        for (var check : new String[]{\":all\", \":none\", \"\"}) {\n+            var outputDir = \"out-DocLint-\" + i++; \/\/ use separate output directories\n+            javadoc(\"-Xdoclint\" + check,\n+                    \"-d\", base.resolve(outputDir).toString(),\n+                    \"--source-path\", src.toString(),\n+                    \"x\");\n+            new OutputChecker(Output.OUT)\n+                    .setExpectFound(true)\n+                    .checkUnique(\"unknown tag\");\n+        }\n+        \/\/ DocLint is default\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"x\");\n+        new OutputChecker(Output.OUT)\n+                .setExpectFound(true)\n+                .checkUnique(\"unknown tag\");\n+    }\n+\n+    \/\/ Disabled simple tags are treated as known tags, but aren't checked\n+    \/\/ for misuse. Additionally, they don't prevent other tags from being\n+    \/\/ checked.\n+    @Test\n+    public void testDisabledSimpleTags(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                \/**\n+                 * @myDisabledTag foo\n+                 * @myEnabledTag bar\n+                 *\/\n+                public class MyClass extends RuntimeException { }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-tag\", \"myDisabledTag:mX:Disabled Tag\", \/\/ may appear in methods; disabled\n+                \"-tag\", \"myEnabledTag:mf:Enabled Tag\", \/\/ may appear in method and fields; enabled\n+                \"x\");\n+        checkOutput(Output.OUT, false, \"unknown tag\");\n+        checkOutput(Output.OUT, false, \"Tag @myDisabledTag cannot be used in class documentation\");\n+        checkOutput(Output.OUT, true, \"Tag @myEnabledTag cannot be used in class documentation\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUknownTags\/TestUnknownTags.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+\/*\n+ * @test  \/nodynamiccopyright\/\n+ * @bug 8314216\n+ * @summary Multiple patterns without unnamed variables\n+ * @compile\/fail\/ref=T8314216.out -XDrawDiagnostics --enable-preview --source ${jdk.version} T8314216.java\n+ *\/\n+\n+public class T8314216 {\n+    enum X {A, B}\n+\n+    void test(Object obj) {\n+        switch (obj) {\n+            case X.A, Integer _ -> System.out.println(\"A or Integer\");\n+            case String _, X.B -> System.out.println(\"B or String\");\n+            default -> System.out.println(\"other\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8314216.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+T8314216.java:13:23: compiler.err.invalid.case.label.combination\n+T8314216.java:14:28: compiler.err.invalid.case.label.combination\n+- compiler.note.preview.filename: T8314216.java, DEFAULT\n+- compiler.note.preview.recompile\n+2 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8314216.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test  \/nodynamiccopyright\/\n+ * @bug 8314423\n+ * @summary Multiple patterns without unnamed variables\n+ * @compile\/fail\/ref=T8314423.out -XDrawDiagnostics T8314423.java\n+ * @compile --enable-preview --source ${jdk.version} T8314423.java\n+ *\/\n+\n+public class T8314423 {\n+    record R1() {}\n+    record R2() {}\n+\n+    static void test(Object obj) {\n+        switch (obj) {\n+            case R1(), R2() -> System.out.println(\"R1 or R2\");\n+            default -> System.out.println(\"other\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test(new R1());\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8314423.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8314423.java:15:24: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.unnamed.variables)\n+1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8314423.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -32,1 +32,1 @@\n-requiredVersion=7.3+1\n+requiredVersion=7.3.1+1\n","filename":"test\/lib-test\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,2 +69,3 @@\n-                if (!Platform.isRoot() && !canAddPrivileges()) {\n-                    throw new SkippedException(\"SA Attach not expected to work. Insufficient privileges (not root and can't use sudo).\");\n+                if (needsPrivileges() && !canAddPrivileges()) {\n+                    throw new SkippedException(\"SA Attach not expected to work. Insufficient privileges \" +\n+                                               \"(developer mode disabled, not root, and can't use sudo).\");\n@@ -80,0 +81,1 @@\n+     * If we are running as root or developer mode is enabled, then sudo is not needed.\n@@ -82,1 +84,7 @@\n-        return Platform.isOSX() && !Platform.isRoot();\n+        if (!Platform.isOSX()) {\n+            return false;\n+        }\n+        if (Platform.isRoot()) {\n+            return false;\n+        }\n+        return !developerModeEnabled();\n@@ -85,0 +93,36 @@\n+    \/*\n+     * Run \"DevToolsSecurity --status\" to see if developer mode is enabled.\n+     *\/\n+    private static boolean developerModeEnabled() {\n+        List<String> cmd = new ArrayList<String>();\n+        cmd.add(\"DevToolsSecurity\");\n+        cmd.add(\"--status\");\n+        ProcessBuilder pb = new ProcessBuilder(cmd);\n+        Process p;\n+        try {\n+            p = pb.start();\n+            try {\n+                p.waitFor();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(\"DevToolsSecurity process interrupted\", e);\n+            }\n+\n+            String out = new String(p.getInputStream().readAllBytes());\n+            String err = new String(p.getErrorStream().readAllBytes());\n+            System.out.print(\"DevToolsSecurity stdout: \" + out);\n+            if (out.equals(\"\")) System.out.println();\n+            System.out.print(\"DevToolsSecurity stderr: \" + err);\n+            if (err.equals(\"\")) System.out.println();\n+\n+            if (out.contains(\"Developer mode is currently enabled\")) {\n+                return true;\n+            }\n+            if (out.contains(\"Developer mode is currently disabled\")) {\n+                return false;\n+            }\n+            throw new RuntimeException(\"DevToolsSecurity failed to generate expected output: \" + out);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+  }\n+\n@@ -221,0 +265,7 @@\n+     *\n+     * Note that we also can't run these tests even if OSX developer mode is enabled (see\n+     * developerModeEnabled()). For the most part the test runs fine, but some reason you end up\n+     * needing to provide admin credentials as the test shuts down. If you don't, it just hangs forever.\n+     * And even after providing the credetials, the test still fails with a timeout.\n+     *\n+     * JDK-8314133 has been filed for these issues.\n@@ -223,1 +274,1 @@\n-        if (needsPrivileges()) {\n+        if (Platform.isOSX() && !Platform.isRoot()) {\n","filename":"test\/lib\/jdk\/test\/lib\/SA\/SATestUtils.java","additions":55,"deletions":4,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -187,0 +187,1 @@\n+    public static final String NativeLibraryUnload = PREFIX + \"NativeLibraryUnload\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.SyncFailedException;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests the cost of FileDescriptor.sync\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class FileDescriptorSync {\n+\n+    private FileOutputStream fos;\n+    private FileDescriptor fd;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+        File tmp = File.createTempFile(\"FileDescriptorSync\", \"bin\");\n+        fos = new FileOutputStream(tmp);\n+        fd = fos.getFD();\n+    }\n+\n+    @TearDown\n+    public void tearDown() throws IOException {\n+        fos.close();\n+    }\n+\n+    @Benchmark\n+    public void sync() {\n+        try {\n+            fd.sync();\n+        } catch (SyncFailedException e) {\n+            \/\/ The test assumes the temp filesystem accepts syncs.\n+            \/\/ Avoid failing if it does not, measure the exceptional path then.\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/FileDescriptorSync.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}