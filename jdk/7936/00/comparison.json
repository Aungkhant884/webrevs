{"files":[{"patch":"@@ -177,1 +177,1 @@\n-\/\/   - Klass*            : dynamic to static type through Klass::id() -> table index\n+\/\/   - Klass*            : dynamic to static type through Klass::kind() -> table index\n@@ -193,1 +193,1 @@\n-\/\/   A table mapping from *Klass::ID to function is setup. This happens once\n+\/\/   A table mapping from *Klass::Kind to function is setup. This happens once\n@@ -226,1 +226,1 @@\n-      _function[KlassType::ID] = &init<KlassType>;\n+      _function[KlassType::Kind] = &init<KlassType>;\n@@ -235,1 +235,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate<KlassType, narrowOop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate<KlassType, narrowOop>;\n@@ -237,1 +237,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate<KlassType, oop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate<KlassType, oop>;\n@@ -244,1 +244,1 @@\n-      _function[KlassType::ID](cl, obj, k);\n+      _function[KlassType::Kind](cl, obj, k);\n@@ -248,1 +248,1 @@\n-    FunctionType _function[KLASS_ID_COUNT];\n+    FunctionType _function[KLASS_KIND_COUNT];\n@@ -264,1 +264,1 @@\n-    return _table._function[klass->id()];\n+    return _table._function[klass->kind()];\n@@ -291,1 +291,1 @@\n-      _function[KlassType::ID] = &init<KlassType>;\n+      _function[KlassType::Kind] = &init<KlassType>;\n@@ -297,1 +297,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate_bounded<KlassType, narrowOop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate_bounded<KlassType, narrowOop>;\n@@ -299,1 +299,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate_bounded<KlassType, oop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate_bounded<KlassType, oop>;\n@@ -306,1 +306,1 @@\n-      _function[KlassType::ID](cl, obj, k, mr);\n+      _function[KlassType::Kind](cl, obj, k, mr);\n@@ -310,1 +310,1 @@\n-    FunctionType _function[KLASS_ID_COUNT];\n+    FunctionType _function[KLASS_KIND_COUNT];\n@@ -326,1 +326,1 @@\n-    return _table._function[klass->id()];\n+    return _table._function[klass->kind()];\n@@ -353,1 +353,1 @@\n-      _function[KlassType::ID] = &init<KlassType>;\n+      _function[KlassType::Kind] = &init<KlassType>;\n@@ -359,1 +359,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate_backwards<KlassType, narrowOop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate_backwards<KlassType, narrowOop>;\n@@ -361,1 +361,1 @@\n-        _function[KlassType::ID] = &oop_oop_iterate_backwards<KlassType, oop>;\n+        _function[KlassType::Kind] = &oop_oop_iterate_backwards<KlassType, oop>;\n@@ -368,1 +368,1 @@\n-      _function[KlassType::ID](cl, obj, k);\n+      _function[KlassType::Kind](cl, obj, k);\n@@ -372,1 +372,1 @@\n-    FunctionType _function[KLASS_ID_COUNT];\n+    FunctionType _function[KLASS_KIND_COUNT];\n@@ -388,1 +388,1 @@\n-    return _table._function[klass->id()];\n+    return _table._function[klass->kind()];\n","filename":"src\/hotspot\/share\/memory\/iterator.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-ArrayKlass::ArrayKlass(Symbol* name, KlassID id) :\n-  Klass(id),\n+ArrayKlass::ArrayKlass(Symbol* name, KlassKind kind) :\n+  Klass(kind),\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  ArrayKlass(Symbol* name, KlassID id);\n+  ArrayKlass(Symbol* name, KlassKind kind);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  static const KlassID ID = InstanceClassLoaderKlassID;\n+  static const KlassKind Kind = InstanceClassLoaderKlassKind;\n@@ -46,1 +46,1 @@\n-  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n+  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -488,2 +488,2 @@\n-InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassID id) :\n-  Klass(id),\n+InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassKind kind) :\n+  Klass(kind),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  static const KlassID ID = InstanceKlassID;\n+  static const KlassKind Kind = InstanceKlassKind;\n@@ -139,1 +139,1 @@\n-  InstanceKlass(const ClassFileParser& parser, KlassID id = ID);\n+  InstanceKlass(const ClassFileParser& parser, KlassKind kind = Kind);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  static const KlassID ID = InstanceMirrorKlassID;\n+  static const KlassKind Kind = InstanceMirrorKlassKind;\n@@ -53,1 +53,1 @@\n-  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n+  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  static const KlassID ID = InstanceRefKlassID;\n+  static const KlassKind ID = InstanceRefKlassKind;\n@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n+  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-Klass::Klass(KlassID id) : _id(id),\n+Klass::Klass(KlassKind kind) : _kind(kind),\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,8 +40,8 @@\n-\/\/ Klass IDs for all subclasses of Klass\n-enum KlassID {\n-  InstanceKlassID,\n-  InstanceRefKlassID,\n-  InstanceMirrorKlassID,\n-  InstanceClassLoaderKlassID,\n-  TypeArrayKlassID,\n-  ObjArrayKlassID\n+\/\/ Klass Kinds for all subclasses of Klass\n+enum KlassKind {\n+  InstanceKlassKind,\n+  InstanceRefKlassKind,\n+  InstanceMirrorKlassKind,\n+  InstanceClassLoaderKlassKind,\n+  TypeArrayKlassKind,\n+  ObjArrayKlassKind\n@@ -50,1 +50,1 @@\n-const uint KLASS_ID_COUNT = 6;\n+const uint KLASS_KIND_COUNT = ObjArrayKlassKind + 1;\n@@ -117,2 +117,4 @@\n-  \/\/ Klass identifier used to implement devirtualized oop closure dispatching.\n-  const KlassID _id;\n+  \/\/ Klass kind used to resolve the runtime type of the instance.\n+  \/\/  - Used to implement devirtualized oop closure dispatching.\n+  \/\/  - Various type checking in the JVM\n+  const KlassKind _kind;\n@@ -189,2 +191,2 @@\n-  Klass(KlassID id);\n-  Klass() : _id(KlassID(-1)) { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n+  Klass(KlassKind kind);\n+  Klass() : _kind(KlassKind(-1)) { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n@@ -195,1 +197,1 @@\n-  int id() { return _id; }\n+  int kind() { return _kind; }\n@@ -618,1 +620,1 @@\n-  bool is_instance_klass()              const { return assert_same_query(_id <= InstanceClassLoaderKlassID, is_instance_klass_slow()); }\n+  bool is_instance_klass()              const { return assert_same_query(_kind <= InstanceClassLoaderKlassKind, is_instance_klass_slow()); }\n@@ -620,7 +622,7 @@\n-  bool is_other_instance_klass()        const { return _id == InstanceKlassID; }\n-  bool is_reference_instance_klass()    const { return _id == InstanceRefKlassID; }\n-  bool is_mirror_instance_klass()       const { return _id == InstanceMirrorKlassID; }\n-  bool is_class_loader_instance_klass() const { return _id == InstanceClassLoaderKlassID; }\n-  bool is_array_klass()                 const { return assert_same_query( _id >= TypeArrayKlassID, is_array_klass_slow()); }\n-  bool is_objArray_klass()              const { return assert_same_query( _id == ObjArrayKlassID,  is_objArray_klass_slow()); }\n-  bool is_typeArray_klass()             const { return assert_same_query( _id == TypeArrayKlassID, is_typeArray_klass_slow()); }\n+  bool is_other_instance_klass()        const { return _kind == InstanceKlassKind; }\n+  bool is_reference_instance_klass()    const { return _kind == InstanceRefKlassKind; }\n+  bool is_mirror_instance_klass()       const { return _kind == InstanceMirrorKlassKind; }\n+  bool is_class_loader_instance_klass() const { return _kind == InstanceClassLoaderKlassKind; }\n+  bool is_array_klass()                 const { return assert_same_query( _kind >= TypeArrayKlassKind, is_array_klass_slow()); }\n+  bool is_objArray_klass()              const { return assert_same_query( _kind == ObjArrayKlassKind,  is_objArray_klass_slow()); }\n+  bool is_typeArray_klass()             const { return assert_same_query( _kind == TypeArrayKlassKind, is_typeArray_klass_slow()); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-ObjArrayKlass::ObjArrayKlass(int n, Klass* element_klass, Symbol* name) : ArrayKlass(name, ID) {\n+ObjArrayKlass::ObjArrayKlass(int n, Klass* element_klass, Symbol* name) : ArrayKlass(name, Kind) {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static const KlassID ID = ObjArrayKlassID;\n+  static const KlassKind Kind = ObjArrayKlassKind;\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-TypeArrayKlass::TypeArrayKlass(BasicType type, Symbol* name) : ArrayKlass(name, ID) {\n+TypeArrayKlass::TypeArrayKlass(BasicType type, Symbol* name) : ArrayKlass(name, Kind) {\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  static const KlassID ID = TypeArrayKlassID;\n+  static const KlassKind Kind = TypeArrayKlassKind;\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}