{"files":[{"patch":"@@ -249,0 +249,2 @@\n+    private static final Pattern useGcPattern = Pattern.compile(\n+            \"(?:\\\\-XX\\\\:[\\\\+\\\\-]Use.+GC)\");\n@@ -256,2 +258,0 @@\n-    private static final Pattern useGcPattern = Pattern.compile(\n-            \"(?:\\\\-XX\\\\:[\\\\+\\\\-]Use.+GC)\");\n@@ -567,1 +567,1 @@\n-     * @param condition, a condition to wait for\n+     * @param condition a condition to wait for\n@@ -576,1 +576,1 @@\n-     * @param condition, a condition to wait for\n+     * @param condition a condition to wait for\n@@ -589,1 +589,1 @@\n-     * @param condition, a condition to wait for\n+     * @param condition a condition to wait for\n@@ -622,7 +622,7 @@\n-     * @param test - method that is invoked and checked for exception.\n-     * @param filter - function that checks if the thrown exception matches\n-     *                 criteria given in the filter's implementation.\n-     * @return - exception that matches the filter if it has been thrown or\n-     *           {@code null} otherwise.\n-     * @throws Throwable - if test has thrown an exception that does not\n-     *                     match the filter.\n+     * @param test method that is invoked and checked for exception.\n+     * @param filter function that checks if the thrown exception matches\n+     *               criteria given in the filter's implementation.\n+     * @return exception that matches the filter if it has been thrown or\n+     *         {@code null} otherwise.\n+     * @throws Throwable if test has thrown an exception that does not\n+     *                   match the filter.\n@@ -789,1 +789,1 @@\n-     * This method is meant as a replacement for {@code Files#createTempFile(String, String, FileAttribute...)}\n+     * This method is meant as a replacement for {@link Files#createTempFile(String, String, FileAttribute...)}\n@@ -794,3 +794,5 @@\n-     * @param prefix\n-     * @param suffix\n-     * @param attrs\n+     * @param prefix the prefix string to be used in generating the file's name;\n+     *               may be null\n+     * @param suffix the suffix string to be used in generating the file's name;\n+     *               may be null, in which case \".tmp\" is used\n+     * @param attrs an optional list of file attributes to set atomically when creating the file\n@@ -799,1 +801,1 @@\n-     * @throws IOException\n+     * @throws IOException if an I\/O error occurs or dir does not exist\n@@ -801,1 +803,1 @@\n-     * @see {@link Files#createTempFile(String, String, FileAttribute...)}\n+     * @see Files#createTempFile(String, String, FileAttribute...)\n@@ -811,1 +813,1 @@\n-     * This method is meant as a replacement for {@code Files#createTempDirectory(String, String, FileAttribute...)}\n+     * This method is meant as a replacement for {@link Files#createTempDirectory(Path, String, FileAttribute...)}\n@@ -816,2 +818,2 @@\n-     * @param prefix\n-     * @param attrs\n+     * @param prefix the prefix string to be used in generating the directory's name; may be null\n+     * @param attrs an optional list of file attributes to set atomically when creating the directory\n@@ -819,1 +821,1 @@\n-     * @throws IOException\n+     * @throws IOException if an I\/O error occurs or dir does not exist\n@@ -821,1 +823,1 @@\n-     * @see {@link Files#createTempDirectory(String, String, FileAttribute...)}\n+     * @see Files#createTempDirectory(Path, String, FileAttribute...)\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"}]}