{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.misc.Unsafe;\n+\n@@ -40,0 +42,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -43,0 +46,1 @@\n+    private static final Unsafe UNSAFE;\n@@ -45,0 +49,1 @@\n+        UNSAFE = Unsafe.getUnsafe();\n@@ -101,1 +106,2 @@\n-        ByteBuffer buf = newDirectByteBuffer(capacity);\n+        long addr = UNSAFE.allocateMemory(capacity);\n+        ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n@@ -103,0 +109,2 @@\n+            assertEquals(addr, getDirectBufferAddress(buf),\n+                \"GetDirectBufferAddress does not return supplied address\");\n@@ -105,1 +113,1 @@\n-            freeDirectByteBufferMemory(buf);\n+            UNSAFE.freeMemory(addr);\n@@ -115,1 +123,2 @@\n-            ByteBuffer buf = newDirectByteBuffer(capacity);\n+            long addr = UNSAFE.allocateMemory(capacity);\n+            ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n@@ -117,1 +126,1 @@\n-                freeDirectByteBufferMemory(buf);\n+                UNSAFE.freeMemory(addr);\n@@ -123,1 +132,1 @@\n-    private static native ByteBuffer newDirectByteBuffer(long size);\n+    private static native ByteBuffer newDirectByteBuffer(long addr, long capacity);\n@@ -125,1 +134,1 @@\n-    private static native void freeDirectByteBufferMemory(ByteBuffer buf);\n+    private static native long getDirectBufferAddress(ByteBuffer buf);\n","filename":"test\/jdk\/java\/nio\/jni\/NewDirectByteBuffer.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/\/ private static native ByteBuffer newDirectByteBuffer(long size)\n+\/\/ private static native ByteBuffer newDirectByteBuffer(long addr, long size)\n@@ -29,1 +29,1 @@\n-    (JNIEnv *env, jclass cls, jlong size)\n+    (JNIEnv *env, jclass cls, jlong addr, jlong size)\n@@ -31,10 +31,0 @@\n-    \/\/ Allocate memory, on failure throwing an OOME or returning NULL\n-    \/\/ if throwing the OOME fails\n-    void* addr = malloc(size);\n-    if (addr == NULL) {\n-        jclass oomeCls = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n-        if ((*env)->ThrowNew(env, oomeCls, \"malloc failed\") < 0) {\n-            return NULL;\n-        }\n-    }\n-\n@@ -43,5 +33,1 @@\n-    jobject dbb = (*env)->NewDirectByteBuffer(env, addr, size);\n-    if ((*env)->ExceptionOccurred(env) != NULL) {\n-        free(addr);\n-    }\n-    return dbb;\n+    return (*env)->NewDirectByteBuffer(env, (void*)addr, size);\n@@ -58,3 +44,3 @@\n-\/\/ private static native void freeDirectByteBufferMemory(ByteBuffer buf)\n-JNIEXPORT void JNICALL\n-Java_NewDirectByteBuffer_freeDirectByteBufferMemory\n+\/\/ private static native long getDirectBufferAddress(ByteBuffer buf)\n+JNIEXPORT jlong JNICALL\n+Java_NewDirectByteBuffer_getDirectBufferAddress\n@@ -63,2 +49,1 @@\n-    void* addr = (*env)->GetDirectBufferAddress(env, buf);\n-    free(addr);\n+    return (jlong)(*env)->GetDirectBufferAddress(env, buf);\n","filename":"test\/jdk\/java\/nio\/jni\/libNewDirectByteBuffer.c","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"}]}