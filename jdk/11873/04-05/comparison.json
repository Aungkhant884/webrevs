{"files":[{"patch":"@@ -0,0 +1,32 @@\n+-g\n+-Xlint:all\n+-source\n+21\n+-target\n+21\n+-implicit:none\n+-Xprefer:source\n+-XDignore.symbol.file=true\n+-encoding\n+ascii\n+-Werror\n+-Xdoclint:all\/protected\n+-Xdoclint\/package:java.*,javax.*\n+-XDstringConcat=inline\n+--module-source-path\n+\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/support\/gensrc\/*:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/closed\/src\/*\/macosx\/classes:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/open\/src\/*\/macosx\/classes:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/closed\/src\/*\/unix\/classes:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/open\/src\/*\/unix\/classes:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/closed\/src\/*\/share\/classes:\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/open\/src\/*\/share\/classes\n+--module-path\n+\n+--system\n+none\n+-classpath\n+\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/buildtools\/depend\n+\"-Xplugin:depend \/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/jdk\/modules\/java.base\/_the.java.base_pubapi\"\n+-XDinternalAPIPath=\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/jdk\/modules\/java.base\/_the.java.base_internalapi\n+-XDLOG_LEVEL=warn\n+-XDmodifiedInputs=\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/jdk\/modules\/java.base\/_the.java.base_batch.modfiles.fixed\n+-d\n+\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/jdk\/modules\n+-h\n+\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/support\/headers.java.base.tmp\n+@\/Users\/bpb\/Work\/CoreLibs\/jdk\/git\/jdk\/build\/NewDirectByteBuffer-8299684\/jdk\/modules\/java.base\/_the.java.base_batch.filelist\n","filename":"make\/javac.20230111_091339.args","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -81,1 +81,1 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := -ljava -lc\n+  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := $(WIN_LIB_JAVA)\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-                + capacity + \" < 0)\");\n+                + capacity + \")\");\n@@ -201,1 +201,1 @@\n-                + capacity + \" > Integer.MAX_VALUE)\");\n+                + capacity + \")\");\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+        Long.MIN_VALUE,\n@@ -50,1 +51,2 @@\n-        5_000_000_000L\n+        5_000_000_000L,\n+        Long.MAX_VALUE\n@@ -75,7 +77,11 @@\n-            ByteBuffer buf = newDirectByteBuffer(cap);\n-            if (buf != null) {\n-                try {\n-                    checkBuffer(buf, cap);\n-                    System.out.println(\"Verified buffer for capacity \" + cap);\n-                } finally {\n-                    freeDirectBufferMemory(buf);\n+            try {\n+                ByteBuffer buf = newDirectByteBuffer(cap);\n+                if (buf != null) {\n+                    try {\n+                        checkBuffer(buf, cap);\n+                        System.out.println(\"Verified buffer for capacity \" + cap);\n+                    } finally {\n+                        freeDirectBufferMemory(buf);\n+                    }\n+                } else {\n+                    throw new RuntimeException(\"Direct buffer is null but no OOME\");\n@@ -83,2 +89,2 @@\n-            } else {\n-                throw new RuntimeException(\"Direct buffer is null but no OOME\");\n+            } catch (OutOfMemoryError ignored) {\n+                \/\/ Ignore the error so test may continue\n","filename":"test\/jdk\/java\/nio\/jni\/NewDirectByteBuffer.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-        jclass rtExCls = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n-        if ((*env)->ThrowNew(env, rtExCls, \"malloc failed\") < 0) {\n+        jclass oomeCls = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n+        if ((*env)->ThrowNew(env, oomeCls, \"malloc failed\") < 0) {\n","filename":"test\/jdk\/java\/nio\/jni\/libNewDirectByteBuffer.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}