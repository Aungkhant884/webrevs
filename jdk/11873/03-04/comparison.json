{"files":[{"patch":"@@ -85,1 +85,1 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := -ljava -lc\n+  BUILD_JDK_JTREG_LIBRARIES_LIBS_libNewDirectByteBuffer := -ljava\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-        super(-1, 0, clampCapacity(cap), (int)cap, null);\n+        super(-1, 0, checkCapacity(cap), (int)cap, null);\n@@ -190,0 +190,16 @@\n+    \/\/ Throw an IllegalArgumentException if the capacity is not in\n+    \/\/ the range [0, Integer.MAX_VALUE]\n+    \/\/\n+    private static int checkCapacity(long capacity) {\n+        if (capacity < 0) {\n+            throw new IllegalArgumentException\n+                (\"JNI NewDirectByteBuffer passed capacity < 0: (\"\n+                + capacity + \" < 0)\");\n+        } else if (capacity > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException\n+                (\"JNI NewDirectByteBuffer passed capacity > Integer.MAX_VALUE: (\"\n+                + capacity + \" > Integer.MAX_VALUE)\");\n+        }\n+        return (int)capacity;\n+    }\n+\n@@ -243,13 +259,0 @@\n-    \/\/ Constrain the capacity to int range throwing IAE if not possible\n-    \/\/\n-    private static int clampCapacity(long capacity) {\n-        try {\n-            return Math.toIntExact(capacity);\n-        } catch (ArithmeticException ignore) {\n-            String msg = \"JNI NewDirectByteBuffer passed illegal capacity: \"\n-                + capacity + (capacity < Integer.MIN_VALUE\n-                ? \" < Integer.MIN_VALUE\" : \" > Integer.MAX_VALUE\");\n-            throw new IllegalArgumentException(msg);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,0 +37,8 @@\n+    private static final long[] LEGAL_CAPACITIES = {\n+        0L,\n+        1L,\n+        (long)Integer.MAX_VALUE\/2,\n+        (long)Integer.MAX_VALUE - 1,\n+        (long)Integer.MAX_VALUE\n+    };\n+\n@@ -45,6 +53,17 @@\n-    private static final long[] LEGAL_CAPACITIES = {\n-        0L,\n-        1L,\n-        (long)Integer.MAX_VALUE - 1,\n-        (long)Integer.MAX_VALUE\n-    };\n+    private static final void checkBuffer(ByteBuffer buf, long capacity) {\n+        if (!buf.isDirect())\n+            throw new RuntimeException(\"Buffer is not direct\");\n+        long bufferCapacity = getDirectBufferCapacity(buf);\n+        if (bufferCapacity != capacity)\n+            throw new RuntimeException(\"GetDirectBufferCapacity \"\n+                + bufferCapacity + \" is not \" + capacity);\n+        if (buf.capacity() != capacity)\n+            throw new RuntimeException(\"buf.capacity() \"\n+                + buf.capacity() + \" is not \" + capacity);\n+        if (buf.position() != 0)\n+            throw new RuntimeException(\"buf.position() \"\n+                + buf.position() + \" is nonzero\");\n+        if (buf.limit() != capacity)\n+            throw new RuntimeException(\"buf.limit() \"\n+                + buf.limit() + \" is not \" + capacity);\n+    }\n@@ -55,8 +74,11 @@\n-            System.out.println(\"Allocating buffer with capacity \" + cap);\n-            ByteBuffer buf = allocBigBuffer(cap);\n-            long bufferCapacity = getLongCapacity(buf);\n-            System.out.printf(\"buf.capacity(): %d, getLongCapacity(buf): %d%n\",\n-                buf.capacity(), bufferCapacity);\n-            if (bufferCapacity != cap) {\n-                throw new RuntimeException(\"GetDirectBufferCapacity returned \"\n-                    + bufferCapacity + \", not \" + cap + \"as expected\");\n+            System.out.println(\"Capacity \" + cap);\n+            ByteBuffer buf = newDirectByteBuffer(cap);\n+            if (buf != null) {\n+                try {\n+                    checkBuffer(buf, cap);\n+                    System.out.println(\"Verified buffer for capacity \" + cap);\n+                } finally {\n+                    freeDirectBufferMemory(buf);\n+                }\n+            } else {\n+                throw new RuntimeException(\"Direct buffer is null but no OOME\");\n@@ -68,0 +90,1 @@\n+            System.out.println(\"Capacity \" + cap);\n@@ -69,1 +92,4 @@\n-                ByteBuffer buf = allocBigBuffer(cap);\n+                ByteBuffer buf = newDirectByteBuffer(cap);\n+                if (buf != null) {\n+                    freeDirectBufferMemory(buf);\n+                }\n@@ -78,2 +104,3 @@\n-    private static native ByteBuffer allocBigBuffer(long size);\n-    private static native long getLongCapacity(ByteBuffer buf);\n+    private static native ByteBuffer newDirectByteBuffer(long size);\n+    private static native long getDirectBufferCapacity(ByteBuffer buf);\n+    private static native void freeDirectBufferMemory(ByteBuffer buf);\n","filename":"test\/jdk\/java\/nio\/jni\/NewDirectByteBuffer.java","additions":44,"deletions":17,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/\/ private static native ByteBuffer allocBigBuffer(long size)\n+\/\/ private static native ByteBuffer newDirectByteBuffer(long size)\n@@ -28,1 +28,2 @@\n-Java_NewDirectByteBuffer_allocBigBuffer(JNIEnv *env, jclass cls, jlong size)\n+Java_NewDirectByteBuffer_newDirectByteBuffer\n+    (JNIEnv *env, jclass cls, jlong size)\n@@ -30,1 +31,17 @@\n-    return (*env)->NewDirectByteBuffer(env, malloc(size), size);\n+    \/\/ Allocate memory, on failure throwing an OOME or returning NULL\n+    \/\/ if throwing the OOME fails\n+    void* addr = malloc(size);\n+    if (addr == NULL) {\n+        jclass rtExCls = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n+        if ((*env)->ThrowNew(env, rtExCls, \"malloc failed\") < 0) {\n+            return NULL;\n+        }\n+    }\n+\n+    \/\/ Create the direct byte buffer, freeing the native memory if an exception\n+    \/\/ is thrown while constructing the buffer\n+    jobject dbb = (*env)->NewDirectByteBuffer(env, addr, size);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        free(addr);\n+    }\n+    return dbb;\n@@ -33,1 +50,1 @@\n-\/\/ private static native long getLongCapacity(ByteBuffer buf)\n+\/\/ private static native long getDirectBufferCapacity(ByteBuffer buf)\n@@ -35,1 +52,2 @@\n-Java_NewDirectByteBuffer_getLongCapacity(JNIEnv *env, jclass cls, jobject buf)\n+Java_NewDirectByteBuffer_getDirectBufferCapacity\n+    (JNIEnv *env, jclass cls, jobject buf)\n@@ -39,0 +57,9 @@\n+\n+\/\/ private static native void freeDirectBufferMemory(ByteBuffer buf)\n+JNIEXPORT void JNICALL\n+Java_NewDirectByteBuffer_freeDirectBufferMemory\n+    (JNIEnv *env, jclass cls, jobject buf)\n+{\n+    void* addr = (*env)->GetDirectBufferAddress(env, buf);\n+    free(addr);\n+}\n","filename":"test\/jdk\/java\/nio\/jni\/libNewDirectByteBuffer.c","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"}]}