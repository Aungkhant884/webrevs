{"files":[{"patch":"@@ -106,0 +106,1 @@\n+        long addr;\n@@ -107,9 +108,1 @@\n-            long addr = UNSAFE.allocateMemory(capacity);\n-            try {\n-                ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n-                assertEquals(addr, getDirectBufferAddress(buf),\n-                    \"GetDirectBufferAddress does not return supplied address\");\n-                checkBuffer(buf, capacity);\n-            } finally {\n-                UNSAFE.freeMemory(addr);\n-            }\n+            addr = UNSAFE.allocateMemory(capacity);\n@@ -117,0 +110,11 @@\n+            System.err.println(\"legalCapacities( \" + capacity\n+                + \") test skipped due to insufficient memory\");\n+            return;\n+        }\n+        try {\n+            ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n+            assertEquals(addr, getDirectBufferAddress(buf),\n+                \"GetDirectBufferAddress does not return supplied address\");\n+            checkBuffer(buf, capacity);\n+        } finally {\n+            UNSAFE.freeMemory(addr);\n@@ -126,0 +130,1 @@\n+            long addr = UNSAFE.allocateMemory(capacity);\n@@ -127,7 +132,3 @@\n-                long addr = UNSAFE.allocateMemory(capacity);\n-                try {\n-                    ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n-                } finally {\n-                    UNSAFE.freeMemory(addr);\n-                }\n-            } catch (OutOfMemoryError ignore) {\n+                ByteBuffer buf = newDirectByteBuffer(addr, capacity);\n+            } finally {\n+                UNSAFE.freeMemory(addr);\n","filename":"test\/jdk\/java\/nio\/jni\/NewDirectByteBuffer.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"}]}