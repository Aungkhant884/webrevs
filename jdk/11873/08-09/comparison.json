{"files":[{"patch":"@@ -26,1 +26,0 @@\n-import org.junit.jupiter.api.Assertions;\n@@ -30,0 +29,6 @@\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -33,3 +38,1 @@\n- * @summary Verify that JNI NewDirectByteBuffer throws\n- * IllegalArgumentException if the capacity is negative or greater than\n- * Integer::MAX_VALUE\n+ * @summary Unit test for the JNI function NewDirectByteBuffer\n@@ -45,2 +48,2 @@\n-        Assertions.assertTrue(buf.isDirect(), \"Buffer is not direct\");\n-        Assertions.assertEquals(capacity, getDirectByteBufferCapacity(buf),\n+        \/\/ Verify that the JNI function returns the correct capacity\n+        assertEquals(capacity, getDirectByteBufferCapacity(buf),\n@@ -48,1 +51,9 @@\n-        Assertions.assertEquals(capacity, buf.capacity(),\n+\n+        \/\/ Verify that the initial state values are correct\n+        assertTrue(buf.isDirect(), \"Buffer is not direct\");\n+        assertFalse(buf.hasArray(), \"Buffer has an array\");\n+        if (capacity > 0) {\n+            assertTrue(buf.hasRemaining(), \"Buffer has no remaining values\");\n+        }\n+        assertFalse(buf.isReadOnly(), \"Buffer s read-only\");\n+        assertEquals(capacity, buf.capacity(),\n@@ -50,1 +61,1 @@\n-        Assertions.assertEquals(0L, buf.position(),\n+        assertEquals(0L, buf.position(),\n@@ -52,1 +63,1 @@\n-        Assertions.assertEquals(capacity, buf.limit(),\n+        assertEquals(capacity, buf.limit(),\n@@ -54,0 +65,30 @@\n+\n+        \/\/ Verify that the various state mutators work correctly\n+        int halfPos = buf.capacity()\/2;\n+        buf.position(halfPos);\n+        assertEquals(halfPos, buf.position(),\n+            \"Position not set to halfPos\");\n+        assertEquals(buf.capacity() - halfPos, buf.remaining(),\n+            \"Remaining not capacity - halfPos\");\n+\n+        buf.mark();\n+\n+        int twoThirdsPos = 2*(buf.capacity()\/3);\n+        buf.position(twoThirdsPos);\n+        assertEquals(twoThirdsPos, buf.position(),\n+            \"Position not set to twoThirdsPos\");\n+        assertEquals(buf.capacity() - twoThirdsPos, buf.remaining(),\n+            \"Remaining != capacity - twoThirdsPos\");\n+\n+        buf.reset();\n+        assertEquals(halfPos, buf.position(),\n+            \"Buffer not reset to halfPos\");\n+\n+        buf.limit(twoThirdsPos);\n+        assertEquals(twoThirdsPos, buf.limit(),\n+            \"Limit not set to twoThirdsPos\");\n+        assertEquals(twoThirdsPos - halfPos, buf.remaining(),\n+            \"Remaining != twoThirdsPos - halfPos\");\n+\n+        buf.position(twoThirdsPos);\n+        assertFalse(buf.hasRemaining(), \"Buffer has remaining values\");\n@@ -61,13 +102,2 @@\n-            final AtomicReference<ByteBuffer> bufHolder = new AtomicReference();\n-            Assertions.assertDoesNotThrow(() -> {\n-                try {\n-                    bufHolder.set(newDirectByteBuffer(capacity));\n-                } finally {\n-                    ByteBuffer buf = bufHolder.get();\n-                    if (buf != null) {\n-                        freeDirectByteBufferMemory(buf);\n-                    }\n-                }\n-            });\n-            ByteBuffer buf = bufHolder.get();\n-            if (buf != null) {\n+            ByteBuffer buf = newDirectByteBuffer(capacity);\n+            try {\n@@ -75,0 +105,2 @@\n+            } finally {\n+                freeDirectByteBufferMemory(buf);\n@@ -87,1 +119,1 @@\n-            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            assertThrows(IllegalArgumentException.class, () -> {\n","filename":"test\/jdk\/java\/nio\/jni\/NewDirectByteBuffer.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"}]}