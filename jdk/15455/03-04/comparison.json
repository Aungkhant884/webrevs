{"files":[{"patch":"@@ -3314,4 +3314,0 @@\n-  \/\/ compute return type\n-  \/\/ x86 uses a shift and mask or wings it with a shift plus assert\n-  \/\/ the mask is not needed. aarch64 just uses bitfield extract\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3797,4 +3797,3 @@\n-  load_resolved_method_entry_special_or_static(rcx, \/\/ ResolvedMethodEntry*\n-                                               rbx, \/\/ Method*\n-                                               rdx  \/\/ flags\n-                                               );\n+  load_resolved_method_entry_special_or_static(rcx,  \/\/ ResolvedMethodEntry*\n+                                               rbx,  \/\/ Method*\n+                                               rdx); \/\/ flags\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -282,3 +282,3 @@\n-                                               Register method,\n-                                               Register ref_index,\n-                                               Register flags);\n+                                                Register method,\n+                                                Register ref_index,\n+                                                Register flags);\n@@ -286,3 +286,3 @@\n-                                               Register klass,\n-                                               Register method_or_table_index,\n-                                               Register flags);\n+                                                   Register klass,\n+                                                   Register method_or_table_index,\n+                                                   Register flags);\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-                                             bool sender_is_interface) {\n+                                        bool sender_is_interface) {\n@@ -247,3 +247,3 @@\n-                                             int method_index,\n-                                             Klass* referenced_klass,\n-                                             const methodHandle& method, int index) {\n+                                        int method_index,\n+                                        Klass* referenced_klass,\n+                                        const methodHandle& method, int index) {\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-      assert(_method->is_valid() && _method->is_method(), \"m is a valid method\");\n-      return !_method->is_old() && !_method->is_obsolete(); \/\/ old is always set for old and obsolete\n+    assert(_method->is_valid() && _method->is_method(), \"m is a valid method\");\n+    return !_method->is_old() && !_method->is_obsolete(); \/\/ old is always set for old and obsolete\n@@ -35,1 +35,1 @@\n-      return true;\n+    return true;\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"oops\/instanceKlass.hpp\"\n@@ -65,0 +64,1 @@\n+class InstanceKlass;\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}