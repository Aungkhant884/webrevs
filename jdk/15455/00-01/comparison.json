{"files":[{"patch":"@@ -1804,1 +1804,0 @@\n-  \/\/ Take shortcut if the size is a power of 2\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2261,37 +2261,0 @@\n-void TemplateTable::resolve_cache_and_index_for_field(int byte_no,\n-                                            Register Rcache,\n-                                            Register index) {\n-  const Register temp = r19;\n-  assert_different_registers(Rcache, index, temp);\n-\n-  Label resolved;\n-\n-  Bytecodes::Code code = bytecode();\n-  switch (code) {\n-  case Bytecodes::_nofast_getfield: code = Bytecodes::_getfield; break;\n-  case Bytecodes::_nofast_putfield: code = Bytecodes::_putfield; break;\n-  default: break;\n-  }\n-\n-  assert(byte_no == f1_byte || byte_no == f2_byte, \"byte_no out of range\");\n-  __ load_field_entry(Rcache, index);\n-  if (byte_no == f1_byte) {\n-    __ lea(temp, Address(Rcache, in_bytes(ResolvedFieldEntry::get_code_offset())));\n-  } else {\n-    __ lea(temp, Address(Rcache, in_bytes(ResolvedFieldEntry::put_code_offset())));\n-  }\n-  \/\/ Load-acquire the bytecode to match store-release in ResolvedFieldEntry::fill_in()\n-  __ ldarb(temp, temp);\n-  __ subs(zr, temp, (int) code);  \/\/ have we resolved this bytecode?\n-  __ br(Assembler::EQ, resolved);\n-\n-  \/\/ resolve first time through\n-  address entry = CAST_FROM_FN_PTR(address, InterpreterRuntime::resolve_from_cache);\n-  __ mov(temp, (int) code);\n-  __ call_VM(noreg, entry, temp);\n-\n-  \/\/ Update registers with resolved info\n-  __ load_field_entry(Rcache, index);\n-  __ bind(resolved);\n-}\n-\n@@ -2343,0 +2306,37 @@\n+void TemplateTable::resolve_cache_and_index_for_field(int byte_no,\n+                                            Register Rcache,\n+                                            Register index) {\n+  const Register temp = r19;\n+  assert_different_registers(Rcache, index, temp);\n+\n+  Label resolved;\n+\n+  Bytecodes::Code code = bytecode();\n+  switch (code) {\n+  case Bytecodes::_nofast_getfield: code = Bytecodes::_getfield; break;\n+  case Bytecodes::_nofast_putfield: code = Bytecodes::_putfield; break;\n+  default: break;\n+  }\n+\n+  assert(byte_no == f1_byte || byte_no == f2_byte, \"byte_no out of range\");\n+  __ load_field_entry(Rcache, index);\n+  if (byte_no == f1_byte) {\n+    __ lea(temp, Address(Rcache, in_bytes(ResolvedFieldEntry::get_code_offset())));\n+  } else {\n+    __ lea(temp, Address(Rcache, in_bytes(ResolvedFieldEntry::put_code_offset())));\n+  }\n+  \/\/ Load-acquire the bytecode to match store-release in ResolvedFieldEntry::fill_in()\n+  __ ldarb(temp, temp);\n+  __ subs(zr, temp, (int) code);  \/\/ have we resolved this bytecode?\n+  __ br(Assembler::EQ, resolved);\n+\n+  \/\/ resolve first time through\n+  address entry = CAST_FROM_FN_PTR(address, InterpreterRuntime::resolve_from_cache);\n+  __ mov(temp, (int) code);\n+  __ call_VM(noreg, entry, temp);\n+\n+  \/\/ Update registers with resolved info\n+  __ load_field_entry(Rcache, index);\n+  __ bind(resolved);\n+}\n+\n@@ -2369,3 +2369,3 @@\n-void TemplateTable::load_resolved_method_entry_common(Register cache,\n-                                               Register method,\n-                                               Register flags) {\n+void TemplateTable::load_resolved_method_entry_special_or_static(Register cache,\n+                                                                 Register method,\n+                                                                 Register flags) {\n@@ -2389,1 +2389,0 @@\n-  \/\/const Register cache = rscratch2;\n@@ -2422,1 +2421,0 @@\n-  assert_different_registers(method_or_table_index, flags);\n@@ -2429,2 +2427,0 @@\n-  \/\/ table_or_ref_index can either be an itable index or a resolved reference index depending on the bytecode\n-\n@@ -3305,1 +3301,1 @@\n-  __ save_bcp(); \/\/ probably don't need this\n+  __ save_bcp();\n@@ -3313,6 +3309,1 @@\n-    \/\/ FIXME -- is this actually correct? looks like it should be 2\n-    \/\/ const int no_return_pc_pushed_yet = -1;  \/\/ argument slot correction before we push return address\n-    \/\/ const int receiver_is_at_end      = -1;  \/\/ back off one slot to get receiver\n-    \/\/ Address recv_addr = __ argument_address(recv, no_return_pc_pushed_yet + receiver_is_at_end);\n-    \/\/ __ movptr(recv, recv_addr);\n-    __ add(rscratch1, esp, recv, ext::uxtx, 3); \/\/ FIXME: uxtb here?\n+    __ add(rscratch1, esp, recv, ext::uxtx, 3);\n@@ -3400,3 +3391,3 @@\n-  load_resolved_method_entry_common(r2,      \/\/ ResolvedMethodEntry*\n-                                    rmethod, \/\/ Method*\n-                                    r3);     \/\/ flags\n+  load_resolved_method_entry_special_or_static(r2,      \/\/ ResolvedMethodEntry*\n+                                               rmethod, \/\/ Method*\n+                                               r3);     \/\/ flags\n@@ -3417,3 +3408,3 @@\n-  load_resolved_method_entry_common(r2,      \/\/ ResolvedMethodEntry*\n-                                    rmethod, \/\/ Method*\n-                                    r3);     \/\/ flags\n+  load_resolved_method_entry_special_or_static(r2,      \/\/ ResolvedMethodEntry*\n+                                               rmethod, \/\/ Method*\n+                                               r3);     \/\/ flags\n@@ -3587,1 +3578,1 @@\n-  \/\/ rmethod: MH.linkToCallSite method (from f2)\n+  \/\/ rmethod: MH.linkToCallSite method\n@@ -3589,1 +3580,1 @@\n-  \/\/ Note:  r0_callsite is already pushed by prepare_invoke\n+  \/\/ Note:  r0_callsite is already pushed\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":50,"deletions":59,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -2838,3 +2838,3 @@\n-void TemplateTable::load_resolved_method_entry_common(Register cache,\n-                                               Register method,\n-                                               Register flags) {\n+void TemplateTable::load_resolved_method_entry_special_or_static(Register cache,\n+                                                                 Register method,\n+                                                                 Register flags) {\n@@ -2896,2 +2896,0 @@\n-  \/\/ table_or_ref_index can either be an itable index or a resolved reference index depending on the bytecode\n-\n@@ -3799,4 +3797,4 @@\n-  load_resolved_method_entry_common(rcx, \/\/ ResolvedMethodEntry*\n-                                    rbx, \/\/ Method*\n-                                    rdx \/\/ flags\n-                                    );\n+  load_resolved_method_entry_special_or_static(rcx, \/\/ ResolvedMethodEntry*\n+                                               rbx, \/\/ Method*\n+                                               rdx \/\/ flags\n+                                               );\n@@ -3819,4 +3817,4 @@\n-  load_resolved_method_entry_common(rcx, \/\/ ResolvedMethodEntry*\n-                                    rbx, \/\/ Method*\n-                                    rdx \/\/ flags\n-                                    );\n+  load_resolved_method_entry_special_or_static(rcx, \/\/ ResolvedMethodEntry*\n+                                               rbx, \/\/ Method*\n+                                               rdx \/\/ flags\n+                                               );\n@@ -4017,1 +4015,1 @@\n-  \/\/ rax: CallSite object (from cpool->resolved_references[f1])\n+  \/\/ rax: CallSite object (from cpool->resolved_references[])\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -414,4 +414,0 @@\n-      \/\/ ResolvedIndyEntry and ConstantPoolCacheEntry must currently coexist.\n-      \/\/ To address this, the variables below contain the values that *might*\n-      \/\/ be used to avoid multiple blocks of similar code. When CPCE is obsoleted\n-      \/\/ these can be removed\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -282,3 +282,3 @@\n-  static void load_resolved_method_entry_common(Register cache,\n-                                               Register method,\n-                                               Register flags);\n+  static void load_resolved_method_entry_special_or_static(Register cache,\n+                                                           Register method,\n+                                                           Register flags);\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}