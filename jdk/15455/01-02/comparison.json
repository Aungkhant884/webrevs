{"files":[{"patch":"@@ -143,3 +143,0 @@\n-  void get_cache_and_index_at_bcp(Register cache, Register index, int bcp_offset, size_t index_size = sizeof(u2));\n-  void get_cache_and_index_and_bytecode_at_bcp(Register cache, Register index, Register bytecode, int byte_no, int bcp_offset, size_t index_size = sizeof(u2));\n-  void get_cache_entry_pointer_at_bcp(Register cache, Register tmp, int bcp_offset, size_t index_size = sizeof(u2));\n@@ -155,2 +152,0 @@\n-  void load_resolved_method_at_index(int byte_no, Register method, Register cache);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,14 +106,1 @@\n-  void get_cache_and_index_at_bcp(Register cache,\n-                                  Register index,\n-                                  int bcp_offset,\n-                                  size_t index_size = sizeof(u2));\n-  void get_cache_and_index_and_bytecode_at_bcp(Register cache,\n-                                               Register index,\n-                                               Register bytecode,\n-                                               int byte_no,\n-                                               int bcp_offset,\n-                                               size_t index_size = sizeof(u2));\n-  void get_cache_entry_pointer_at_bcp(Register cache,\n-                                      Register tmp,\n-                                      int bcp_offset,\n-                                      size_t index_size = sizeof(u2));\n+\n@@ -132,5 +119,0 @@\n-  void load_resolved_method_at_index(int byte_no,\n-                                     Register method,\n-                                     Register cache,\n-                                     Register index);\n-\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3799,1 +3799,1 @@\n-                                               rdx \/\/ flags\n+                                               rdx  \/\/ flags\n@@ -3819,1 +3819,1 @@\n-                                               rdx \/\/ flags\n+                                               rdx  \/\/ flags\n@@ -3841,3 +3841,3 @@\n-  load_resolved_method_entry_interface(rcx, \/\/ ResolvedMethodEntry*\n-                                       rax, \/\/ Klass*\n-                                       rbx, \/\/ Method* or itable\/vtable index\n+  load_resolved_method_entry_interface(rcx,  \/\/ ResolvedMethodEntry*\n+                                       rax,  \/\/ Klass*\n+                                       rbx,  \/\/ Method* or itable\/vtable index\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1057,2 +1057,2 @@\n-        pool->cache()->set_method_handle(index, info);\n-        appendix = Handle(current, pool->cache()->appendix_if_resolved(index));\n+        ResolvedMethodEntry* entry = pool->cache()->set_method_handle(index, info);\n+        appendix = Handle(current, pool->cache()->appendix_if_resolved(entry));\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1542,1 +1542,1 @@\n-      oop appendix = cp->cache()->appendix_if_resolved(index);\n+      oop appendix = cp->cache()->appendix_if_resolved(method_entry);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,4 +431,2 @@\n-        ResolvedMethodEntry* method_entry = cp->cache()->resolved_method_entry_at(index);\n-        cp->cache()->set_method_handle(index, callInfo);\n-\n-        appendix = cp->cache()->appendix_if_resolved(index);\n+        ResolvedMethodEntry* method_entry = cp->cache()->set_method_handle(index, callInfo);\n+        appendix = cp->cache()->appendix_if_resolved(method_entry);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -838,0 +838,1 @@\n+  ConstantPoolCache* cache = pool->cache();\n@@ -867,1 +868,1 @@\n-  if (pool->cache()->resolved_method_entry_at(method_index)->is_resolved(bytecode)) return;\n+  if (cache->resolved_method_entry_at(method_index)->is_resolved(bytecode)) return;\n@@ -901,1 +902,1 @@\n-    pool->cache()->set_direct_call(bytecode, method_index, resolved_method, sender->is_interface());\n+    cache->set_direct_call(bytecode, method_index, resolved_method, sender->is_interface());\n@@ -904,1 +905,1 @@\n-    pool->cache()->set_vtable_call(bytecode, method_index, resolved_method, info.vtable_index());\n+    cache->set_vtable_call(bytecode, method_index, resolved_method, info.vtable_index());\n@@ -907,1 +908,1 @@\n-    pool->cache()->set_itable_call(\n+    cache->set_itable_call(\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1706,1 +1706,1 @@\n-    Handle     appendix(THREAD, pool->cache()->appendix_if_resolved(index));\n+    Handle     appendix(THREAD, pool->cache()->appendix_if_resolved(method_entry));\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,2 +87,2 @@\n-  guarantee((int) _cp_cache_map.length() - 1 <= (int) ((u2)-1),\n-            \"all cp cache indexes fit in a u2\");\n+  guarantee(_initialized_field_entries.length() - 1 <= (int)((u2)-1), \"All resolved field indices fit in a u2\");\n+  guarantee(_initialized_method_entries.length() - 1 <= (int)((u2)-1), \"All resolved method indices fit in a u2\");\n@@ -228,5 +228,9 @@\n-    _initialized_method_entries.push(ResolvedMethodEntry((u2)cp_index));\n-    Bytes::put_native_u2(p, (u2)_method_entry_index);\n-    _method_entry_index++;\n-    if (_method_entry_index != (int)(u2)_method_entry_index) {\n-      *invokespecial_error = true;\n+    if (_pool->tag_at(cp_index).is_interface_method()) {\n+      _initialized_method_entries.push(ResolvedMethodEntry((u2)cp_index));\n+      Bytes::put_native_u2(p, (u2)_method_entry_index);\n+      _method_entry_index++;\n+      if (_method_entry_index != (int)(u2)_method_entry_index) {\n+        *invokespecial_error = true;\n+      }\n+    } else {\n+      rewrite_method_reference(bcp, offset, reverse);\n@@ -244,1 +248,2 @@\n-        ((*opc) == (u1)Bytecodes::_invokespecial && _pool->tag_at(cp_index).is_method())) {\n+        ((*opc) == (u1)Bytecodes::_invokespecial)) {\n+          assert(_pool->tag_at(cp_index).is_method(), \"wrong index\");\n@@ -582,1 +587,0 @@\n-    _cp_cache_map(cpool->length() \/ 2),\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -44,3 +44,0 @@\n-  GrowableArray<int>  _cpi_to_method_index_map;\n-  GrowableArray<int>  _cp_cache_map;  \/\/ for Methodref, Fieldref,\n-                                      \/\/ InterfaceMethodref and InvokeDynamic\n@@ -68,1 +65,0 @@\n-    _cp_cache_map.trunc_to(0);\n@@ -77,1 +73,0 @@\n-    _first_iteration_cp_cache_limit = -1;\n@@ -80,1 +75,0 @@\n-  int _first_iteration_cp_cache_limit;\n@@ -84,1 +78,0 @@\n-    _first_iteration_cp_cache_limit = _cp_cache_map.length();\n@@ -88,7 +81,0 @@\n-  int cp_cache_delta() {\n-    \/\/ How many cp cache entries were added since recording map limits after\n-    \/\/ cp cache initialization?\n-    assert(_first_iteration_cp_cache_limit != -1, \"only valid after first iteration\");\n-    return _cp_cache_map.length() - _first_iteration_cp_cache_limit;\n-  }\n-\n@@ -105,26 +91,0 @@\n-  int add_cp_cache_entry(int cp_index) {\n-    assert(_pool->tag_at(cp_index).value() != JVM_CONSTANT_InvokeDynamic, \"use indy version\");\n-    assert(_first_iteration_cp_cache_limit == -1, \"do not add cache entries after first iteration\");\n-    int cache_index = add_map_entry(cp_index, &_cp_map, &_cp_cache_map);\n-    assert(cp_entry_to_cp_cache(cp_index) == cache_index, \"\");\n-    assert(cp_cache_entry_pool_index(cache_index) == cp_index, \"\");\n-    return cache_index;\n-  }\n-\n-  \/\/ add a new CP cache entry beyond the normal cache for the special case of\n-  \/\/ invokespecial with InterfaceMethodref as cpool operand.\n-  int add_invokespecial_cp_cache_entry(int cp_index) {\n-    assert(_first_iteration_cp_cache_limit >= 0, \"add these special cache entries after first iteration\");\n-    \/\/ Don't add InterfaceMethodref if it already exists at the end.\n-    for (int i = _first_iteration_cp_cache_limit; i < _cp_cache_map.length(); i++) {\n-      if (cp_cache_entry_pool_index(i) == cp_index) {\n-        return i;\n-      }\n-    }\n-    int cache_index = _cp_cache_map.append(cp_index);\n-    assert(cache_index >= _first_iteration_cp_cache_limit, \"\");\n-    \/\/ do not update _cp_map, since the mapping is one-to-many\n-    assert(cp_cache_entry_pool_index(cache_index) == cp_index, \"\");\n-    return cache_index;\n-  }\n-\n@@ -162,6 +122,0 @@\n-  \/\/ Access the contents of _cp_cache_map to determine CP cache layout.\n-  int cp_cache_entry_pool_index(int cache_index) {\n-    int cp_index = _cp_cache_map.at(cache_index);\n-    return cp_index;\n-  }\n-\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -265,4 +265,0 @@\n-  static void resolve_cache_and_index(int byte_no,       \/\/ one of 1,2,11\n-                                      Register cache,    \/\/ output for CP cache\n-                                      Register index,    \/\/ output for CP index\n-                                      size_t index_size); \/\/ one of 1,2,4\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2292,1 +2292,1 @@\n-          SET_STACK_OBJECT(cp->cache()->appendix_if_resolved(index), 0);\n+          SET_STACK_OBJECT(cp->cache()->appendix_if_resolved(entry), 0);\n@@ -2314,1 +2314,0 @@\n-          entry = cp->resolved_method_entry_at(index);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1685,1 +1685,1 @@\n-      vmassert(cp->cache()->appendix_if_resolved(index) == nullptr, \"!\");\n+      vmassert(cp->cache()->appendix_if_resolved(entry) == nullptr, \"!\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -330,8 +330,1 @@\n-\n-void ConstantPoolCache::set_method_handle(int method_index, const CallInfo &call_info) {\n-  set_method_handle_common(method_index, Bytecodes::_invokehandle, call_info);\n-}\n-\n-void ConstantPoolCache::set_method_handle_common(int method_index,\n-                                                 Bytecodes::Code invoke_code,\n-                                                 const CallInfo &call_info) {\n+ResolvedMethodEntry* ConstantPoolCache::set_method_handle(int method_index, const CallInfo &call_info) {\n@@ -347,0 +340,1 @@\n+  Bytecodes::Code invoke_code = Bytecodes::_invokehandle;\n@@ -350,2 +344,2 @@\n-  if (method_entry->is_resolved(invoke_code)) { \/\/method_entry->method() != nullptr &&\n-    return;\n+  if (method_entry->is_resolved(invoke_code)) {\n+    return method_entry;\n@@ -369,1 +363,1 @@\n-  \/\/ f1 contains the adapter method which manages the actual call.\n+  \/\/ method_entry->method() contains the adapter method which manages the actual call.\n@@ -378,1 +372,1 @@\n-  \/\/ the f1 method has signature '(Ljl\/Object;Ljl\/invoke\/MethodType;)Ljl\/Object;',\n+  \/\/ the method has signature '(Ljl\/Object;Ljl\/invoke\/MethodType;)Ljl\/Object;',\n@@ -401,0 +395,1 @@\n+  return method_entry;\n@@ -643,0 +638,4 @@\n+  return appendix_if_resolved(method_entry);\n+}\n+\n+oop ConstantPoolCache::appendix_if_resolved(ResolvedMethodEntry* method_entry) const {\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-\/\/ holds interpreter runtime information for all field access and invoke bytecodes. The cache\n+\/\/ holds runtime information for all field access and invoke bytecodes. The cache\n@@ -153,7 +153,0 @@\n-  void set_method_handle(\n-    int method_index,\n-    const CallInfo &call_info                    \/\/ Call link information\n-  );\n-\n-  \/\/ Common code for invokedynamic and MH invocations.\n-\n@@ -173,1 +166,1 @@\n-  void set_method_handle_common(\n+  ResolvedMethodEntry* set_method_handle(\n@@ -175,1 +168,0 @@\n-    Bytecodes::Code invoke_code,                 \/\/ _invokehandle or _invokedynamic\n@@ -249,0 +241,1 @@\n+  oop appendix_if_resolved(ResolvedMethodEntry* method_entry) const;\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,5 +40,11 @@\n-  u2 saved_resolved_references_index = _resolved_references_index;\n-  u2 saved_cpool_index = _cpool_index;\n-  memset(this, 0, sizeof(*this));\n-  _resolved_references_index = saved_resolved_references_index;\n-  _cpool_index = saved_cpool_index;\n+  if (_bytecode1 == Bytecodes::_invokehandle) {\n+    u2 saved_resolved_references_index = _entry_specific._resolved_references_index;\n+    u2 saved_cpool_index = _cpool_index;\n+    memset(this, 0, sizeof(*this));\n+    _entry_specific._resolved_references_index = saved_resolved_references_index;\n+    _cpool_index = saved_cpool_index;\n+  } else {\n+    u2 saved_cpool_index = _cpool_index;\n+    memset(this, 0, sizeof(*this));\n+    _cpool_index = saved_cpool_index;\n+  }\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/\/ relevant information.These entries are contained within the ConstantPoolCache and are\n+\/\/ relevant information. These entries are contained within the ConstantPoolCache and are\n@@ -68,9 +68,12 @@\n-  InstanceKlass* _interface_klass; \/\/ for interface and static\n-  Method* _method;                 \/\/ Method for non virtual calls, adapter method for invokevirtual, final method for virtual\n-  u2 _cpool_index;                 \/\/ Constant pool index\n-  u2 _resolved_references_index;   \/\/ Index of resolved references array that holds the appendix oop for invokehandle\n-  u2 _table_index;                 \/\/ vtable\/itable index for virtual and interface calls\n-  u2 _number_of_parameters;        \/\/ Number of arguments for method\n-  u1 _tos_state;                   \/\/ TOS state\n-  u1 _flags;                       \/\/ Flags: [000|has_local_signature|has_appendix|forced_virtual|final|virtual_final]\n-  u1 _bytecode1, _bytecode2;       \/\/ Bytecodes for f1 and f2\n+  Method* _method;                   \/\/ Method for non virtual calls, adapter method for invokevirtual, final method for virtual\n+  union {                            \/\/ These fields are mutually exclusive and are only used by some invoke codes\n+    InstanceKlass* _interface_klass; \/\/ for interface and static\n+    u2 _resolved_references_index;   \/\/ Index of resolved references array that holds the appendix oop for invokehandle\n+    u2 _table_index;                 \/\/ vtable\/itable index for virtual and interface calls\n+  } _entry_specific;\n+\n+  u2 _cpool_index;                   \/\/ Constant pool index\n+  u2 _number_of_parameters;          \/\/ Number of arguments for method\n+  u1 _tos_state;                     \/\/ TOS state\n+  u1 _flags;                         \/\/ Flags: [000|has_local_signature|has_appendix|forced_virtual|final|virtual_final]\n+  u1 _bytecode1, _bytecode2;         \/\/ Bytecodes for f1 and f2\n@@ -80,2 +83,1 @@\n-    ResolvedMethodEntry(u2 cpi, u2 resolved_references_index) :\n-      _interface_klass(nullptr),\n+    ResolvedMethodEntry(u2 cpi) :\n@@ -84,2 +86,0 @@\n-      _resolved_references_index(resolved_references_index),\n-      _table_index(0),\n@@ -91,2 +91,0 @@\n-    ResolvedMethodEntry(u2 cpi) :\n-      ResolvedMethodEntry(cpi, 0) {}\n@@ -106,1 +104,0 @@\n-  InstanceKlass* interface_klass() const { return _interface_klass; }\n@@ -108,0 +105,3 @@\n+  InstanceKlass* interface_klass() const { return _entry_specific._interface_klass; }\n+  u2 resolved_references_index() const { return _entry_specific._resolved_references_index; }\n+  u2 table_index() const { return _entry_specific._table_index; }\n@@ -109,2 +109,0 @@\n-  u2 resolved_references_index() const { return _resolved_references_index; }\n-  u2 table_index() const { return _table_index; }\n@@ -172,1 +170,1 @@\n-    _interface_klass = klass;\n+    _entry_specific._interface_klass = klass;\n@@ -176,1 +174,1 @@\n-    _resolved_references_index = ref_index;\n+    _entry_specific._resolved_references_index = ref_index;\n@@ -180,1 +178,1 @@\n-    _table_index = table_index;\n+    _entry_specific._table_index = table_index;\n@@ -198,1 +196,1 @@\n-  static ByteSize klass_offset()                     { return byte_offset_of(ResolvedMethodEntry, _interface_klass); }\n+  static ByteSize klass_offset()                     { return byte_offset_of(ResolvedMethodEntry, _entry_specific._interface_klass); }\n@@ -200,2 +198,2 @@\n-  static ByteSize resolved_references_index_offset() { return byte_offset_of(ResolvedMethodEntry, _resolved_references_index); }\n-  static ByteSize table_index_offset()               { return byte_offset_of(ResolvedMethodEntry, _table_index);       }\n+  static ByteSize resolved_references_index_offset() { return byte_offset_of(ResolvedMethodEntry, _entry_specific._resolved_references_index); }\n+  static ByteSize table_index_offset()               { return byte_offset_of(ResolvedMethodEntry, _entry_specific._table_index);       }\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.hpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"}]}