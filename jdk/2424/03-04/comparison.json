{"files":[{"patch":"@@ -338,9 +338,2 @@\n-                if (exc.lastError() == ERROR_CANT_ACCESS_FILE &&\n-                        isUnixDomainSocket(file))\n-                {\n-                    FileChannel fc = WindowsChannelFactory\n-                        .newFileChannel(file.getPathForWin32Calls(),\n-                                file.getPathForPermissionCheck(),\n-                                Set.of(WindowsChannelFactory.OPEN_REPARSE_POINT),\n-                                0L);\n-                    fc.close();\n+                if (exc.lastError() == ERROR_CANT_ACCESS_FILE && isUnixDomainSocket(file)) {\n+                    \/\/ socket file is accessible\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -840,4 +840,1 @@\n-            long handle = openSocketForReadAttributeAccess();\n-            if (handle == INVALID_HANDLE_VALUE)\n-                throw e;\n-            return handle;\n+            return openSocketForReadAttributeAccess();\n@@ -859,2 +856,2 @@\n-     * Returns INVALID_HANDLE_VALUE if path is not a socket\n-     * and a handle to the socket file if it is.\n+     * Returns a handle to the file if it is a socket.\n+     * Throws WindowsException if file is not a socket\n@@ -862,1 +859,3 @@\n-    private long openSocketForReadAttributeAccess() {\n+    private long openSocketForReadAttributeAccess()\n+        throws WindowsException\n+    {\n@@ -865,3 +864,2 @@\n-        try {\n-            \/\/ needs to specify FILE_FLAG_OPEN_REPARSE_POINT if the file is a socket\n-            int flags = FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT;\n+        \/\/ needs to specify FILE_FLAG_OPEN_REPARSE_POINT if the file is a socket\n+        int flags = FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT;\n@@ -869,4 +867,1 @@\n-            handle = openFileForReadAttributeAccess(flags);\n-        } catch (WindowsException ignore) {\n-            return INVALID_HANDLE_VALUE;\n-        }\n+        handle = openFileForReadAttributeAccess(flags);\n@@ -877,2 +872,1 @@\n-                CloseHandle(handle);\n-                return INVALID_HANDLE_VALUE;\n+                throw new WindowsException(\"not a socket\");\n@@ -881,1 +875,1 @@\n-        } catch (WindowsException e) {\n+        } finally {\n@@ -883,1 +877,0 @@\n-            return INVALID_HANDLE_VALUE;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsPath.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"}]}