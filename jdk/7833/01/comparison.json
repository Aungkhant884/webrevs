{"files":[{"patch":"@@ -1603,2 +1603,0 @@\n-  assert(thread->is_VM_thread() || thread->is_Java_thread(), \"Must be VMThread or JavaThread\");\n-\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1578,0 +1578,4 @@\n+  product(bool, IncludeNonJavaThreadStackTrace, true,                       \\\n+          \"Include non-java-thread stacktrace during thread dump. Note \"    \\\n+          \"this may block application a while when trying thread dump\")     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+#include \"runtime\/frame.hpp\"\n@@ -3670,0 +3671,18 @@\n+static void print_native_stack(outputStream* st, frame fr, Thread* thread) {\n+  char buf[O_BUFLEN];\n+  VMError::print_native_stack(st, fr, thread, buf, sizeof(buf));\n+}\n+\n+class PrintNonJavaThreadStack : public os::SuspendedThreadTask {\n+private:\n+  outputStream* _st;\n+public:\n+  PrintNonJavaThreadStack(Thread* thread, outputStream* st) :\n+    os::SuspendedThreadTask(thread), _st(st) {}\n+\n+  void do_task(const os::SuspendedThreadTaskContext& ctx) {\n+    frame fr = os::fetch_frame_from_context(ctx.ucontext());\n+    print_native_stack(_st, fr, ctx.thread());\n+  }\n+};\n+\n@@ -3681,1 +3700,14 @@\n-      _st->cr();\n+      if (IncludeNonJavaThreadStackTrace) {\n+        Thread* current_thread = Thread::current();\n+        if (current_thread == thread) {\n+          \/\/ Target thread is current thread, we don't suspend itself, instead, we\n+          \/\/ walk its frames directly.\n+          print_native_stack(_st, os::current_frame(), current_thread);\n+        } else {\n+          \/\/ Otherwise, we need to suspend target thread a while to make it walking safe\n+          PrintNonJavaThreadStack st(thread, _st);\n+          st.run();\n+        }\n+      } else {\n+        _st->cr();\n+      }\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -106,4 +106,0 @@\n-  \/\/ public for use by the internal non-product debugger.\n-  NOT_PRODUCT(public:)\n-  static void print_native_stack(outputStream* st, frame fr, Thread* t,\n-                                 char* buf, int buf_size);\n@@ -140,0 +136,3 @@\n+  \/\/ Print native stack for non-java thread\n+  static void print_native_stack(outputStream* st, frame fr, Thread* t,\n+                                 char* buf, int buf_size);\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}