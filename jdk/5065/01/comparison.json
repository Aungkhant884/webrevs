{"files":[{"patch":"@@ -97,5 +97,0 @@\n-  \/\/ The dest for Young is used when the objects are aged enough to\n-  \/\/ need to be moved to the next space.\n-  _dest[G1HeapRegionAttr::Young] = G1HeapRegionAttr::Old;\n-  _dest[G1HeapRegionAttr::Old]   = G1HeapRegionAttr::Old;\n-\n@@ -359,0 +354,2 @@\n+  assert(region_attr.is_young() || region_attr.is_old(), \"must be either Young or Old\");\n+\n@@ -366,1 +363,2 @@\n-  return dest(region_attr);\n+  \/\/ young-to-old (promotion) or old-to-old; destination is old in both cases.\n+  return G1HeapRegionAttr::Old;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-  G1HeapRegionAttr _dest[G1HeapRegionAttr::Num];\n@@ -91,8 +90,0 @@\n-  G1HeapRegionAttr dest(G1HeapRegionAttr original) const {\n-    assert(original.is_valid(),\n-           \"Original region attr invalid: %s\", original.get_type_str());\n-    assert(_dest[original.type()].is_valid_gen(),\n-           \"Dest region attr is invalid: %s\", _dest[original.type()].get_type_str());\n-    return _dest[original.type()];\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}