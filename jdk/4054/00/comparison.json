{"files":[{"patch":"@@ -929,0 +929,5 @@\n+            @Override\n+            public void visitSwitchExpression(JCSwitchExpression tree) {\n+                scan(tree.cases);\n+            }\n+\n@@ -1154,1 +1159,1 @@\n-            super(EnumSet.of(CONDEXPR, PARENS, LAMBDA, REFERENCE));\n+            super(EnumSet.of(CONDEXPR, PARENS, LAMBDA, REFERENCE, SWITCH_EXPRESSION));\n@@ -1290,0 +1295,18 @@\n+\n+        @Override\n+        public void visitSwitchExpression(JCSwitchExpression expr) {\n+            SwitchExpressionScanner switchScanner = new SwitchExpressionScanner() {\n+                @Override\n+                public void visitYield(JCYield tree) {\n+                    Type prevPt = CheckStuckPolicy.this.pt;\n+                    try {\n+                        CheckStuckPolicy.this.pt = pt;\n+                        CheckStuckPolicy.this.scan(tree.value);\n+                    } finally {\n+                        CheckStuckPolicy.this.pt = prevPt;\n+                    }\n+                }\n+            };\n+            switchScanner.scan(expr.cases);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-ExpressionSwitch.java:40:16: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.switch.expressions), 9, 14\n-ExpressionSwitch.java:41:20: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.switch.rules), 9, 14\n-ExpressionSwitch.java:93:31: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.multiple.case.labels), 9, 14\n+ExpressionSwitch.java:41:16: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.switch.expressions), 9, 14\n+ExpressionSwitch.java:42:20: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.switch.rules), 9, 14\n+ExpressionSwitch.java:94:31: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.multiple.case.labels), 9, 14\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitch-old.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8206986 8222169 8224031 8240964\n+ * @bug 8206986 8222169 8224031 8240964 8267119\n@@ -37,0 +37,1 @@\n+        testTypeInference(true, 0);\n@@ -147,0 +148,11 @@\n+    private void testTypeInference(boolean b, int i) {\n+        m(s -> s.length(), String.class);\n+        m(b ? s -> s.length() : s -> s.length(), String.class);\n+        m(switch (i) {\n+            case 0 -> s -> s.length();\n+            default -> s -> s.length();\n+        }, String.class);\n+    }\n+\n+    <Z> void m(Consumer<Z> c, Class<Z> cl) {}\n+\n@@ -165,0 +177,4 @@\n+\n+    interface Consumer<Z> {\n+        public void consume(Z z);\n+    }\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitch.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}