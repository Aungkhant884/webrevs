{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262981\n+ * @summary Test JSlider Accessibility\n+ * @run main AccessibleJSliderTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JSlider;\n+import javax.swing.SwingUtilities;\n+\n+public class AccessibleJSliderTest extends AccessibleComponentTest {\n+\n+    private void createSlider() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"\"\"\n+                INSTRUCTIONS:\n+                \"Turn on screen reader. Press Tab key to move the focus to the JSlider \n+                or click on the JSlider.\n+                \n+                Note: Pressing the following keys, check that screen reader reads the JSlider value\n+                correctly & it should match with the JLabel value above the JSlider then the\n+                testcase pass else testcase is failed.\n+                             \n+                1) Use arrow keys to increase and decrease the value of JSlider.\n+                2) Use Page Up to increase the value of JSlider.\n+                3) Use Page Down to decrease the value of JSlider.\n+                4) Use Home key to set the JSlider value to 0%.\n+                5) Use End key to set the JSlider value to 100%\n+                \"\"\";\n+        String accName = \"JSlider Test\";\n+        String accDesc = \"Regression Test: AccessibleJSliderTest\";\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BorderLayout());\n+        JSlider jSlider = new JSlider();\n+        final JLabel sliderValueLbl = new JLabel(\"JSlider value : \" + jSlider.getValue() + \"%\",\n+                JLabel.CENTER);\n+        AccessibleContext accessibleContext = jSlider.getAccessibleContext();\n+        accessibleContext.setAccessibleName(accName);\n+        accessibleContext.setAccessibleDescription(accDesc);\n+        jSlider.setMajorTickSpacing(10);\n+        jSlider.setPaintTicks(true);\n+        jSlider.setPaintLabels(true);\n+\n+        jSlider.addChangeListener((changeEvent) -> {\n+            sliderValueLbl.setText(\"Slider value : \" + jSlider.getValue() + \"%\");\n+        });\n+        panel.add(sliderValueLbl, BorderLayout.CENTER);\n+        panel.add(jSlider, BorderLayout.SOUTH);\n+        exceptionString = \"Simple JSlider test failed!\";\n+        super.createUI(panel, \"AccessibleJSliderTest\");\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        AccessibleJSliderTest test = new AccessibleJSliderTest();\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createSlider);\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+    }\n+\n+    @Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJSliderTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -1,248 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8262981\n- * @summary Test JSlider Accessibility\n- * @run main JSliderAccessibilityTest\n- *\/\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Locale;\n-import javax.accessibility.AccessibleAction;\n-import javax.accessibility.AccessibleComponent;\n-import javax.accessibility.AccessibleContext;\n-import javax.accessibility.AccessibleRole;\n-import javax.accessibility.AccessibleSelection;\n-import javax.accessibility.AccessibleState;\n-import javax.accessibility.AccessibleStateSet;\n-import javax.accessibility.AccessibleText;\n-import javax.accessibility.AccessibleValue;\n-import javax.swing.JFrame;\n-import javax.swing.JSlider;\n-import javax.swing.SwingUtilities;\n-\n-public class JSliderAccessibilityTest {\n-\n-    public static JFrame frame;\n-    public static final String accName = \"JSlider Test\";\n-    public static final String accDesc = \"Regression Test:  javax\" +\n-            \".accessibility, JSlider\";\n-    public static JSlider jSlider;\n-    public static final AccessibleRole role = AccessibleRole.SLIDER;\n-\n-    public static void createTestUI() {\n-        frame = new JFrame(\"JSlider Accessibility Test\");\n-        jSlider = new JSlider();\n-        AccessibleContext ac = jSlider.getAccessibleContext();\n-\n-        \/\/ Set the AccessibleName and Description for later one.\n-        ac.setAccessibleName(accName);\n-        ac.setAccessibleDescription(accDesc);\n-        frame.getContentPane().add(jSlider);\n-        frame.setSize(200, 200);\n-        frame.setLocationRelativeTo(null);\n-        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-        frame.setVisible(true);\n-    }\n-\n-    public static void test() {\n-        AccessibleContext accessibleContext = jSlider.getAccessibleContext();\n-        if (accessibleContext == null) {\n-            throw new RuntimeException(\"getAccessibleContext returned null!\");\n-        }\n-\n-        String name = accessibleContext.getAccessibleName();\n-        if (name == null) {\n-            throw new RuntimeException(\"getAccessibleName returned null even though an Accessible name was explicitly set\");\n-        }\n-\n-        if (!name.equals(accName)) {\n-            throw new RuntimeException(\"getAccessibleName returned an incorrect name\");\n-        }\n-\n-        \/\/ AccessibleDescription\n-        String desc = accessibleContext.getAccessibleDescription();\n-        if (desc == null) {\n-            throw new RuntimeException(\"getAccessibleDescription returned null even though an Accessible description was explicitly set\");\n-        }\n-\n-        if (!desc.equals(accDesc)) {\n-            throw new RuntimeException(\"getAccessibleDescription returned an incorrect description\");\n-        }\n-\n-        \/\/ AccessibleRole\n-        AccessibleRole accessibleRole = accessibleContext.getAccessibleRole();\n-        if (accessibleRole == null) {\n-            throw new RuntimeException(\"getAccessibleRole should not return null\");\n-        }\n-\n-        if (accessibleRole != role) {\n-            throw new RuntimeException(\"the AccessibleRole for this button is incorrect\");\n-        }\n-\n-        AccessibleStateSet set = accessibleContext.getAccessibleStateSet();\n-        if (set == null) {\n-            throw new RuntimeException(\"getAccessibleStateSet should not return a null value\");\n-        }\n-\n-        if (set.contains(AccessibleState.BUSY)) {\n-            if (!jSlider.getValueIsAdjusting()) {\n-                throw new RuntimeException(\"AccessibleStateSet contains BUSY but this slider is not currently busy\");\n-            }\n-        } else {\n-            if (jSlider.getValueIsAdjusting()) {\n-                throw new RuntimeException(\"AccessibleStateSet does not contain BUSY but this slider is currently busy\");\n-            }\n-        }\n-\n-        if (set.contains(AccessibleState.HORIZONTAL)) {\n-            if (set.contains(AccessibleState.VERTICAL)) {\n-                throw new RuntimeException(\"AccessibleStateSet shouldn't contain both HORIZONTAL and VERTICAL\");\n-            }\n-            if (jSlider.getOrientation() != jSlider.HORIZONTAL) {\n-                throw new RuntimeException(\"AccessibleStateSet contains HORIZONTAL but this Slider's orientation is not horizontal\");\n-            }\n-        } else {\n-            if (!set.contains(AccessibleState.VERTICAL)) {\n-                throw new RuntimeException(\"AccessibleStateSet for a JSlider must contain HORIZONTAL or VERTICAL but this one does not\");\n-            }\n-            if (jSlider.getOrientation() != jSlider.VERTICAL) {\n-                throw new RuntimeException(\"AccessibleStateSet does not contain HORIZONTAL but this Slider's orientation is horizontal\");\n-            }\n-        }\n-\n-        if (set.contains(AccessibleState.VERTICAL)) {\n-            if (set.contains(AccessibleState.HORIZONTAL)) {\n-                throw new RuntimeException(\"AccessibleStateSet shouldn't contain both HORIZONTAL and VERTICAL\");\n-            }\n-            if (jSlider.getOrientation() != jSlider.VERTICAL) {\n-                throw new RuntimeException(\"AccessibleStateSet contains VERTICAL but this Slider's orientation is not vertical\");\n-            }\n-        } else {\n-            if (!set.contains(AccessibleState.HORIZONTAL)) {\n-                throw new RuntimeException(\"AccessibleStateSet for a JSlider must contain HORIZONTAL or VERTICAL but this one does not\");\n-            }\n-            if (jSlider.getOrientation() != jSlider.HORIZONTAL) {\n-                \/\/System.err.println(this.set.toString());\n-                throw new RuntimeException(\"AccessibleStateSet does not contain HORIZONTAL but this Slider's orientation is horizontal\");\n-            }\n-        }\n-\n-        \/\/ Locale\n-        Locale aLocale = accessibleContext.getLocale();\n-        if (aLocale == null) {\n-            throw new RuntimeException(\"AccessibleComponent.getLocale returned null\");\n-        }\n-\n-        Locale locale = jSlider.getLocale();\n-        if (locale == null) {\n-            throw new RuntimeException(\"JComponent.this.getLocale returned null\");\n-        }\n-\n-        if (!locale.equals(aLocale)) {\n-            throw new RuntimeException(\"An accessible component should not have a different locale than the component it represents\");\n-        }\n-\n-        \/\/ AccessibleAction\n-        AccessibleAction accessibleAction = accessibleContext.getAccessibleAction();\n-        if (accessibleAction != null) {\n-            if (accessibleAction.getAccessibleActionCount() != 2) {\n-                throw new RuntimeException(\"Expected that getAccessibleActionCount value to be 2 but got \" + accessibleAction.getAccessibleActionCount());\n-            }\n-\n-            if (!accessibleAction.getAccessibleActionDescription(0).equals(\"increment\")) {\n-                throw new RuntimeException(\"Expected increment but got \" + accessibleAction.getAccessibleActionDescription(0));\n-            }\n-\n-            if (!accessibleAction.getAccessibleActionDescription(1).equals(\"decrement\")) {\n-                throw new RuntimeException(\"Expected decrement but got \" + accessibleAction.getAccessibleActionDescription(0));\n-            }\n-\n-            if (accessibleAction.getAccessibleActionDescription(-1) != null) {\n-                throw new RuntimeException(\"Expected null but got \" + accessibleAction.getAccessibleActionDescription(-1));\n-            }\n-        }\n-\n-        AccessibleComponent accessibleComponent = accessibleContext.getAccessibleComponent();\n-        if (accessibleComponent == null) {\n-            throw new RuntimeException(\"getAccessibleComponent returned null\");\n-        }\n-\n-        \/\/ AccessibleSelection\n-        AccessibleSelection accessibleSelection = accessibleContext.getAccessibleSelection();\n-        if (accessibleSelection != null) {\n-            throw new RuntimeException(\"getAccessibleSelection should not return a non-null value for JSlider\");\n-        }\n-\n-        \/\/ AccessibleText\n-        AccessibleText accessibleText = accessibleContext.getAccessibleText();\n-        if (accessibleText != null) {\n-            throw new RuntimeException(\"getAccessibleText should not return a non-null value for JSlider\");\n-        }\n-\n-        \/\/ AccessibleValue\n-        AccessibleValue accessibleValue = accessibleContext.getAccessibleValue();\n-        if (accessibleValue == null) {\n-            throw new RuntimeException(\"getAccessibleValue should not return a null value for JSlider\");\n-        }\n-\n-        if (accessibleValue.getCurrentAccessibleValue() == null) {\n-            throw new RuntimeException(\"getCurrentAccessibleValue should not return a null value\");\n-        }\n-\n-        Number cur = accessibleValue.getCurrentAccessibleValue();\n-        Number min = accessibleValue.getMinimumAccessibleValue();\n-        Number max = accessibleValue.getMaximumAccessibleValue();\n-\n-        if (cur.intValue() < min.intValue() || cur.intValue() > max.intValue()) {\n-            throw new RuntimeException(\"getCurrentAccessibleValue is out of range\");\n-        }\n-        if (cur.intValue() != jSlider.getValue()) {\n-            throw new RuntimeException(\"getCurrentAccessibleValue returned an incorrect value\");\n-        }\n-\n-        if (min == null) {\n-            throw new RuntimeException(\"getMinimumAccessibleValue should not return a null value\");\n-        }\n-        if (min.intValue() != jSlider.getMinimum()) {\n-            throw new RuntimeException(\"getMinimumAccessibleValue returned an incorrect value\");\n-        }\n-\n-        if (max == null) {\n-            throw new RuntimeException(\"getMaximumAccessibleValue should not return a null value\");\n-        }\n-        if (max.intValue() != jSlider.getMaximum()) {\n-            throw new RuntimeException(\"getMaximumAccessibleValue returned an incorrect value\");\n-        }\n-\n-    }\n-\n-    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n-        SwingUtilities.invokeAndWait(JSliderAccessibilityTest::createTestUI);\n-        SwingUtilities.invokeAndWait(JSliderAccessibilityTest::test);\n-    }\n-}\n-\n","filename":"test\/jdk\/javax\/accessibility\/JSlider\/JSliderAccessibilityTest.java","additions":0,"deletions":248,"binary":false,"changes":248,"status":"deleted"}]}