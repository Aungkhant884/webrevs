{"files":[{"patch":"@@ -151,0 +151,1 @@\n+  _unloading_next(nullptr),\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -156,1 +156,22 @@\n-  ClassLoaderData* _next; \/\/\/ Next loader_datas created\n+  \/\/ The ClassLoaderDataGraph maintains two lists of CLDs, one list which\n+  \/\/ contains the created CLDs, and another which contains the unloading\n+  \/\/ CLDs. To enable the lock free concurrent iteration of the created\n+  \/\/ CLDs list used by the GC for root scanning, it is important that unlinking\n+  \/\/ CLDs from the created list upholds the invariant that all unlinked CLDs are\n+  \/\/ is_unloading() and that the new tail list inserted is the same as the tail\n+  \/\/ list before unlinking.\n+  \/\/ That is given a list A -> B -> C -> D -> E where B and C are is_unloading()\n+  \/\/ the only valid calls to set_next(ClassLoaderData*) are:\n+  \/\/   A.set_next(B),A.set_next(C),A.set_next(D)\n+  \/\/   B.set_next(C),B.set_next(D)\n+  \/\/   C.set_next(D)\n+  \/\/   D.set_next(E)\n+  \/\/   E.set_next(nullptr)\n+  \/\/ Any insertions to the created CLDs list is done at the head and keeps\n+  \/\/ the list tail invariant.\n+  \/\/ CLDs are unlinked in ClassLoaderDataGraph::do_unloading() and released in\n+  \/\/ ClassLoaderDataGraph::purge(), so some syncronization is required between\n+  \/\/ the two to ensure that no unlinked CLD remains in the system leading\n+  \/\/ to a use after free.\n+  ClassLoaderData* _next;\n+  ClassLoaderData* _unloading_next;\n@@ -163,2 +184,5 @@\n-  void set_next(ClassLoaderData* next) { Atomic::store(&_next, next); }\n-  ClassLoaderData* next() const        { return Atomic::load(&_next); }\n+  void set_next(ClassLoaderData* next);\n+  ClassLoaderData* next() const;\n+\n+  void set_unloading_next(ClassLoaderData* unloading_next);\n+  ClassLoaderData* unloading_next() const;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,0 +36,29 @@\n+inline void ClassLoaderData::set_next(ClassLoaderData* next) {\n+#ifdef ASSERT\n+  if (this->next() != nullptr) {\n+    ClassLoaderData* cld = this->next();\n+    for (;;) {\n+      \/\/ Next must be in the tail of the list\n+      if (cld == next) {\n+        break;\n+      }\n+      assert(cld->is_unloading(), \"only remove unloading clds\");\n+      cld = cld->next();\n+    }\n+  }\n+#endif\n+    Atomic::store(&_next, next);\n+  }\n+\n+inline ClassLoaderData* ClassLoaderData::next() const {\n+  return Atomic::load(&_next);\n+}\n+\n+inline void ClassLoaderData::set_unloading_next(ClassLoaderData* unloading_next) {\n+  _unloading_next = unloading_next;\n+}\n+\n+inline ClassLoaderData* ClassLoaderData::unloading_next() const {\n+  return _unloading_next;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.inline.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classLoaderData.inline.hpp\"\n@@ -271,8 +272,0 @@\n-void ClassLoaderDataGraph::cld_unloading_do(CLDClosure* cl) {\n-  assert_is_safepoint_or_gc();\n-  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->next()) {\n-    assert(cld->is_unloading(), \"invariant\");\n-    cl->do_cld(cld);\n-  }\n-}\n-\n@@ -433,1 +426,1 @@\n-  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->next()) {\n+  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->unloading_next()) {\n@@ -533,1 +526,1 @@\n-    dead->set_next(_unloading);\n+    dead->set_unloading_next(_unloading);\n@@ -572,1 +565,1 @@\n-    next = purge_me->next();\n+    next = purge_me->unloading_next();\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-  static void cld_unloading_do(CLDClosure* cl);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}