{"files":[{"patch":"@@ -161,9 +161,1 @@\n-  \/\/ is_unloading() and that the new tail list inserted is the same as the tail\n-  \/\/ list before unlinking.\n-  \/\/ That is given a list A -> B -> C -> D -> E where B and C are is_unloading()\n-  \/\/ the only valid calls to set_next(ClassLoaderData*) are:\n-  \/\/   A.set_next(B),A.set_next(C),A.set_next(D)\n-  \/\/   B.set_next(C),B.set_next(D)\n-  \/\/   C.set_next(D)\n-  \/\/   D.set_next(E)\n-  \/\/   E.set_next(nullptr)\n+  \/\/ is_unloading().\n@@ -186,0 +178,1 @@\n+  void unlink_next();\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,15 +37,3 @@\n-#ifdef ASSERT\n-  if (this->next() != nullptr) {\n-    ClassLoaderData* cld = this->next();\n-    for (;;) {\n-      \/\/ Next must be in the tail of the list\n-      if (cld == next) {\n-        break;\n-      }\n-      assert(cld->is_unloading(), \"only remove unloading clds\");\n-      cld = cld->next();\n-    }\n-  }\n-#endif\n-    Atomic::store(&_next, next);\n-  }\n+  assert(this->next() == nullptr, \"only link once\");\n+  Atomic::store(&_next, next);\n+}\n@@ -57,0 +45,5 @@\n+inline void ClassLoaderData::unlink_next() {\n+  assert(next()->is_unloading(), \"only remove unloading clds\");\n+  Atomic::store(&_next, _next->_next);\n+}\n+\n@@ -58,0 +51,1 @@\n+  assert(this->unloading_next() == nullptr, \"only link once\");\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.inline.hpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-ClassLoaderData* ClassLoaderDataGraph::_unloading = nullptr;\n+ClassLoaderData* ClassLoaderDataGraph::_unloading_head = nullptr;\n@@ -426,1 +426,1 @@\n-  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->unloading_next()) {\n+  for (ClassLoaderData* cld = _unloading_head; cld != nullptr; cld = cld->unloading_next()) {\n@@ -497,1 +497,0 @@\n-  ClassLoaderData* data = _head;\n@@ -503,2 +502,1 @@\n-  data = _head;\n-  while (data != nullptr) {\n+  for (ClassLoaderData* data = _head; data != nullptr; data = data->next()) {\n@@ -507,1 +505,0 @@\n-      data = data->next();\n@@ -511,1 +508,2 @@\n-    seen_dead_loader = true;\n+\n+    \/\/ Found dead CLD.\n@@ -513,6 +511,4 @@\n-    ClassLoaderData* dead = data;\n-    dead->unload();\n-    data = data->next();\n-    \/\/ Remove from loader list.\n-    \/\/ This class loader data will no longer be found\n-    \/\/ in the ClassLoaderDataGraph.\n+    seen_dead_loader = true;\n+    data->unload();\n+\n+    \/\/ Move dead CLD to unloading list.\n@@ -520,1 +516,1 @@\n-      prev->set_next(data);\n+      prev->unlink_next();\n@@ -522,1 +518,1 @@\n-      assert(dead == _head, \"sanity check\");\n+      assert(data == _head, \"sanity check\");\n@@ -524,1 +520,1 @@\n-      Atomic::store(&_head, data);\n+      Atomic::store(&_head, data->next());\n@@ -526,2 +522,3 @@\n-    dead->set_unloading_next(_unloading);\n-    _unloading = dead;\n+    data->set_unloading_next(_unloading_head);\n+    _unloading_head = data;\n+\n@@ -559,2 +556,2 @@\n-  ClassLoaderData* list = _unloading;\n-  _unloading = nullptr;\n+  ClassLoaderData* list = _unloading_head;\n+  _unloading_head = nullptr;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  static ClassLoaderData* _unloading;\n+  static ClassLoaderData* _unloading_head;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}