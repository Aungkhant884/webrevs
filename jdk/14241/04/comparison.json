{"files":[{"patch":"@@ -151,0 +151,1 @@\n+  _unloading_next(nullptr),\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -156,1 +156,23 @@\n-  ClassLoaderData* _next; \/\/\/ Next loader_datas created\n+  \/\/\n+  \/\/ The ClassLoaderDataGraph maintains two lists to keep track of CLDs.\n+  \/\/\n+  \/\/ The first list [_head, _next] is where new CLDs are registered. The CLDs\n+  \/\/ are only inserted at the _head, and the _next pointers are only rewritten\n+  \/\/ from unlink_next() which unlinks one unloading CLD by setting _next to\n+  \/\/ _next->_next. This allows GCs to concurrently walk the list while the CLDs\n+  \/\/ are being concurrently unlinked.\n+  \/\/\n+  \/\/ The second list [_unloading_head, _unloading_next] is where dead CLDs get\n+  \/\/ moved to during class unloading. See: ClassLoaderDataGraph::do_unloading().\n+  \/\/ This list is never modified while other threads are iterating over it.\n+  \/\/\n+  \/\/ After all dead CLDs have been moved to the unloading list, there's a\n+  \/\/ synchronization point (handshake) to ensure that all threads reading these\n+  \/\/ CLDs finish their work. This ensures that we don't have a use-after-free\n+  \/\/ when we later delete the CLDs.\n+  \/\/\n+  \/\/ And finally, when no threads are using the unloading CLDs anymore, we\n+  \/\/ remove them from the class unloading list and delete them. See:\n+  \/\/ ClassLoaderDataGraph::purge();\n+  ClassLoaderData* _next;\n+  ClassLoaderData* _unloading_next;\n@@ -163,2 +185,6 @@\n-  void set_next(ClassLoaderData* next) { Atomic::store(&_next, next); }\n-  ClassLoaderData* next() const        { return Atomic::load(&_next); }\n+  void set_next(ClassLoaderData* next);\n+  ClassLoaderData* next() const;\n+  void unlink_next();\n+\n+  void set_unloading_next(ClassLoaderData* unloading_next);\n+  ClassLoaderData* unloading_next() const;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -36,0 +36,23 @@\n+inline void ClassLoaderData::set_next(ClassLoaderData* next) {\n+  assert(this->next() == nullptr, \"only link once\");\n+  Atomic::store(&_next, next);\n+}\n+\n+inline ClassLoaderData* ClassLoaderData::next() const {\n+  return Atomic::load(&_next);\n+}\n+\n+inline void ClassLoaderData::unlink_next() {\n+  assert(next()->is_unloading(), \"only remove unloading clds\");\n+  Atomic::store(&_next, _next->_next);\n+}\n+\n+inline void ClassLoaderData::set_unloading_next(ClassLoaderData* unloading_next) {\n+  assert(this->unloading_next() == nullptr, \"only link once\");\n+  _unloading_next = unloading_next;\n+}\n+\n+inline ClassLoaderData* ClassLoaderData::unloading_next() const {\n+  return _unloading_next;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.inline.hpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classLoaderData.inline.hpp\"\n@@ -205,1 +206,1 @@\n-ClassLoaderData* ClassLoaderDataGraph::_unloading = nullptr;\n+ClassLoaderData* ClassLoaderDataGraph::_unloading_head = nullptr;\n@@ -271,8 +272,0 @@\n-void ClassLoaderDataGraph::cld_unloading_do(CLDClosure* cl) {\n-  assert_is_safepoint_or_gc();\n-  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->next()) {\n-    assert(cld->is_unloading(), \"invariant\");\n-    cl->do_cld(cld);\n-  }\n-}\n-\n@@ -433,1 +426,1 @@\n-  for (ClassLoaderData* cld = _unloading; cld != nullptr; cld = cld->next()) {\n+  for (ClassLoaderData* cld = _unloading_head; cld != nullptr; cld = cld->unloading_next()) {\n@@ -504,1 +497,0 @@\n-  ClassLoaderData* data = _head;\n@@ -510,2 +502,1 @@\n-  data = _head;\n-  while (data != nullptr) {\n+  for (ClassLoaderData* data = _head; data != nullptr; data = data->next()) {\n@@ -514,1 +505,0 @@\n-      data = data->next();\n@@ -516,12 +506,0 @@\n-      continue;\n-    }\n-    seen_dead_loader = true;\n-    loaders_removed++;\n-    ClassLoaderData* dead = data;\n-    dead->unload();\n-    data = data->next();\n-    \/\/ Remove from loader list.\n-    \/\/ This class loader data will no longer be found\n-    \/\/ in the ClassLoaderDataGraph.\n-    if (prev != nullptr) {\n-      prev->set_next(data);\n@@ -529,3 +507,15 @@\n-      assert(dead == _head, \"sanity check\");\n-      \/\/ The GC might be walking this concurrently\n-      Atomic::store(&_head, data);\n+      \/\/ Found dead CLD.\n+      loaders_removed++;\n+      seen_dead_loader = true;\n+      data->unload();\n+\n+      \/\/ Move dead CLD to unloading list.\n+      if (prev != nullptr) {\n+        prev->unlink_next();\n+      } else {\n+        assert(data == _head, \"sanity check\");\n+        \/\/ The GC might be walking this concurrently\n+        Atomic::store(&_head, data->next());\n+      }\n+      data->set_unloading_next(_unloading_head);\n+      _unloading_head = data;\n@@ -533,2 +523,0 @@\n-    dead->set_next(_unloading);\n-    _unloading = dead;\n@@ -566,2 +554,2 @@\n-  ClassLoaderData* list = _unloading;\n-  _unloading = nullptr;\n+  ClassLoaderData* list = _unloading_head;\n+  _unloading_head = nullptr;\n@@ -572,1 +560,1 @@\n-    next = purge_me->next();\n+    next = purge_me->unloading_next();\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":22,"deletions":34,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  static ClassLoaderData* _unloading;\n+  static ClassLoaderData* _unloading_head;\n@@ -72,1 +72,0 @@\n-  static void cld_unloading_do(CLDClosure* cl);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}