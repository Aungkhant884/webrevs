{"files":[{"patch":"@@ -543,2 +543,2 @@\n-     * option that allows javac plugins and annotation processors to javac internal\n-     * API.\n+     * option that allows javac plugins and annotation processors to access\n+     * javac internal API.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n- * The class is a subtype of javac's Log, and is primarily a transducer between\n+ * The class is a subtype of javac's Log, and is primarily an adapter between\n@@ -91,2 +91,2 @@\n- *     <li>{@code Element} -- maps to {@code DiagnosticSource and {@code DiagnosticPosition}\n- *     <li>{@code DocTreePath} -- maps to {@code DiagnosticSource and {@code DiagnosticPosition}\n+ *     <li>{@code Element} -- maps to {@code DiagnosticSource} and {@code DiagnosticPosition}\n+ *     <li>{@code DocTreePath} -- maps to {@code DiagnosticSource} and {@code DiagnosticPosition}\n@@ -95,5 +95,8 @@\n- * The javac layer deals primarily in pre-localized (key, args) pairs,\n- * while the javadoc layer, especially the {@code Reporter} interface, deals in localized strings.\n- * To accommodate this, \"wrapper\" resources are used, whose value is {@code {0}}, to pass\n- * the localized string down to javac; given the limitations of the API, it is not possible\n- * to do any better.\n+ * The reporting methods in the javac layer primarily take pre-localized (key, args) pairs,\n+ * while the methods in the javadoc layer, especially the {@code Reporter} interface, take\n+ * localized strings. To accommodate this, \"wrapper\" resources are used, whose value is {@code {0}},\n+ * to pass the localized string down to javac. A side-effect is that clients using a\n+ * {@code DiagnosticListener} with a {@code DocumentationTask} cannot access the original resource\n+ * key for the localized message.\n+ * Given the limitations of the API, it is not possible to do any better.\n+ * The javac Annotation Processing API has the same problem.\n@@ -125,1 +128,1 @@\n-    \/** The utility class to access the positions of items in doc comments., *\/\n+    \/** The utility class to access the positions of items in doc comments. *\/\n@@ -332,1 +335,1 @@\n-     * Print a \"notice\" message.\n+     * Prints a \"notice\" message.\n@@ -448,1 +451,1 @@\n-     * and error streams via {@code DocletEnvironment}.\n+     * and error streams via {@code Reporter}).\n@@ -474,1 +477,0 @@\n-        ToolEnvironment toolEnv = getToolEnv();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Messager.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"}]}