{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import javax.swing.*;\n@@ -34,0 +33,3 @@\n+import javax.swing.JComponent;\n+import javax.swing.JSeparator;\n+import javax.swing.LookAndFeel;\n@@ -155,1 +157,9 @@\n-    public Dimension getMaximumSize( JComponent c ) { return null; }\n+\n+    public Dimension getMaximumSize( JComponent c ) {\n+        Dimension d = getPreferredSize(c);\n+        if (((JSeparator)c).getOrientation() == JSeparator.VERTICAL) {\n+            return new Dimension(d.width, Short.MAX_VALUE);\n+        } else {\n+            return new Dimension(Short.MAX_VALUE, d.height);\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicSeparatorUI.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4346610\n+ * @key headful\n+ * @summary Verifies if Adding JSeparator to JToolBar \"pushes\" buttons added\n+ *          after separator to edge\n+ * @run main ToolBarSeparatorTest\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Insets;\n+import java.awt.image.BufferedImage;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.JToolBar;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+\n+import javax.imageio.ImageIO;\n+\n+public class ToolBarSeparatorTest {\n+\n+    private static JFrame frame;\n+    private static JSeparator separator;\n+    private static JToolBar toolBar;\n+    private static JButton btn;\n+    private static volatile Point pt;\n+    private static volatile Dimension size;\n+    private static volatile int sepWidth;\n+    private static volatile int sepPrefWidth;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"Troy's ToolBarTest\");\n+                toolBar = new JToolBar();\n+                toolBar.setMargin(new Insets(0,0,0,0));\n+                btn = new JButton(\"button 1\");\n+                toolBar.add(btn);\n+                toolBar.add(new JButton(\"button 2\"));\n+                separator = new JSeparator(SwingConstants.VERTICAL);\n+                toolBar.add(separator);\n+                toolBar.add(new JButton(\"button 3\"));\n+                toolBar.setBackground(Color.red);\n+                frame.getContentPane().setLayout(new BorderLayout());\n+                frame.getContentPane().add(toolBar, BorderLayout.NORTH);\n+                frame.getContentPane().add(new JPanel(), BorderLayout.CENTER);\n+                frame.setSize(400, 100);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = toolBar.getLocationOnScreen();\n+                size = toolBar.getSize();\n+                sepWidth = separator.getSize().width;\n+                sepPrefWidth = separator.getPreferredSize().width;\n+            });\n+            if (separator.getSize().width != separator.getPreferredSize().width) {\n+                System.out.println(\"size \" + sepWidth);\n+                System.out.println(\"preferredsize \" + sepPrefWidth);\n+                BufferedImage img = robot.createScreenCapture(\n+                    new Rectangle(pt.x, pt.y, size.width, size.height));\n+                ImageIO.write(img, \"png\", new java.io.File(\"image.png\"));\n+                throw new RuntimeException(\"separator size is too wide\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolBar\/ToolBarSeparatorTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}