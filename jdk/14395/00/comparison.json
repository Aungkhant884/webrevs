{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.net.URLStreamHandler;\n@@ -40,0 +41,1 @@\n+import sun.net.www.protocol.jar.Handler;\n@@ -67,0 +69,3 @@\n+        \/\/ we use the system provided jar protocol handler implementation for loading jars\n+        \/\/ in the classpath of the app classloader\n+        URLStreamHandler jarHandler = new Handler();\n@@ -77,1 +82,1 @@\n-                    ? new URLClassPath(append, true)\n+                    ? new URLClassPath(append, jarHandler, true)\n@@ -92,1 +97,1 @@\n-        URLClassPath ucp = new URLClassPath(cp, false);\n+        URLClassPath ucp = new URLClassPath(cp, jarHandler, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -180,0 +180,1 @@\n+     * @param jarHandler the {@link URLStreamHandler} for {@code jar} protocol\n@@ -185,1 +186,1 @@\n-    URLClassPath(String cp, boolean skipEmptyElements) {\n+    URLClassPath(String cp, URLStreamHandler jarHandler, boolean skipEmptyElements) {\n@@ -212,1 +213,1 @@\n-        this.jarHandler = null;\n+        this.jarHandler = jarHandler;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarBuilder;\n+\n+\/*\n+ * @test\n+ * @bug 8308184\n+ * @summary Verify that an application can be launched when the classpath contains large number of\n+ *          jars and the java.protocol.handler.pkgs system property is set\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.util.JarBuilder\n+ * @run driver LargeClasspathWithPkgPrefix\n+ *\/\n+public class LargeClasspathWithPkgPrefix {\n+\n+    private static final Path CWD = Path.of(\".\");\n+\n+    private static final String JAVA_MAIN_CONTENT = \"\"\"\n+            public class Foo {\n+                public static void main(String[] args) throws Exception {\n+                    if (args.length != 0) {\n+                        System.out.println(\"unexpected args: \" + java.util.Arrays.toString(args));\n+                        System.exit(1);\n+                    }\n+                    System.out.println(\"Running application on Java version: \"\n+                                + System.getProperty(\"java.version\"));\n+                    System.out.println(\"Application launched with java.protocol.handler.pkgs=\"\n+                                + System.getProperty(\"java.protocol.handler.pkgs\"));\n+                    System.out.println(\"Application launched with classpath: \"\n+                                + System.getProperty(\"java.class.path\"));\n+                    System.out.println(\"Hello World\");\n+                }\n+            }\n+            \"\"\";\n+\n+    public static void main(final String[] args) throws Exception {\n+        \/\/ dir to which the application main's .class file will be compiled to\n+        Path classesDir = Files.createTempDirectory(CWD, \"8308184-classes\").toAbsolutePath();\n+        \/\/ dir contains many jars\n+        Path libDir = Files.createTempDirectory(CWD, \"8308184-libs\").toAbsolutePath();\n+        Files.createDirectories(libDir);\n+\n+        \/\/ trivial jar file\n+        Path jarPath = Path.of(libDir.toString(), \"8308184-dummy.jar\");\n+        createJar(jarPath);\n+\n+        \/\/ create multiple such jar files in the lib dir\n+        int numCopies = 1000;\n+        for (int i = 1; i <= numCopies; i++) {\n+            Path dest = Path.of(libDir.toString(), \"8308184-dummy-\" + i + \".jar\");\n+            Files.copy(jarPath, dest);\n+        }\n+        System.out.println(\"Created \" + numCopies + \" jars under \" + libDir);\n+\n+        \/\/ create the application's main java file\n+        Path fooJavaSrcFile = Path.of(classesDir.toString(), \"Foo.java\");\n+        Files.writeString(fooJavaSrcFile, JAVA_MAIN_CONTENT);\n+\n+        \/\/ compile this java file\n+        compile(fooJavaSrcFile, classesDir);\n+\n+        \/\/ Create the classpath string. It is important that the classes directory which contains\n+        \/\/ application's main class, is at the end of the classpath (or too far into the classpath).\n+        \/\/ The initial entries in the classpath should be jar files.\n+        \/\/ constructed classpath is of the form -cp lib\/*:classes\/\n+        \/\/ (the * in lib\/* is parsed\/interpreted by the java launcher and includes all jars in that\n+        \/\/ directory)\n+        String classpath = File.pathSeparator + libDir.toString() + \"\/*\"\n+                + File.pathSeparator + classesDir.toString();\n+        \/\/ launch the application\n+        launchApplication(classpath);\n+        \/\/ test passed successfully, we don't need the lib directory which has too many jars,\n+        \/\/ anymore. we let the dir stay only if the test fails, for debug purpose\n+        libDir.toFile().deleteOnExit();\n+    }\n+\n+    \/\/ creates a trivial jar file\n+    private static void createJar(Path p) throws Exception {\n+        JarBuilder jb = new JarBuilder(p.toString());\n+        jb.addEntry(\"foobar.txt\", \"foobar\".getBytes());\n+        jb.build();\n+        System.out.println(\"Created jar at \" + p);\n+    }\n+\n+    \/\/ javac -d <destDir> <javaFile>\n+    private static void compile(Path javaFile, Path destDir) throws Exception {\n+        String javacPath = JDKToolFinder.getJDKTool(\"javac\");\n+        ProcessBuilder pb = new ProcessBuilder(javacPath, javaFile.toString(),\n+                \"-d\", destDir.toString());\n+        pb.directory(CWD.toFile());\n+        System.out.println(\"Compiling: \" + pb.command());\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        analyzer.shouldHaveExitValue(0);\n+    }\n+\n+    \/\/ java -Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg -cp <classpath> Foo\n+    private static void launchApplication(String classPath) throws Exception {\n+        String java = JDKToolFinder.getJDKTool(\"java\");\n+        ProcessBuilder pb = new ProcessBuilder(java,\n+                \"-Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg\",\n+                \"-cp\", classPath,\n+                \"Foo\");\n+        pb.directory(CWD.toFile());\n+        System.out.println(\"Launching java application: \" + pb.command());\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Hello World\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/URL\/HandlersPkgPrefix\/LargeClasspathWithPkgPrefix.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}