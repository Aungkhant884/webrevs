{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -808,0 +808,4 @@\n+OopStorage* OopStorage::create(const char* name, MEMFLAGS memflags) {\n+  return new (memflags) OopStorage(name, memflags);\n+}\n+\n@@ -818,9 +822,0 @@\n-void* OopStorage::operator new(size_t size, MEMFLAGS memflags) {\n-  assert(size >= sizeof(OopStorage), \"precondition\");\n-  return NEW_C_HEAP_ARRAY(char, size, memflags);\n-}\n-\n-void OopStorage::operator delete(void* obj, MEMFLAGS \/* memflags *\/) {\n-  FREE_C_HEAP_ARRAY(char, obj);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-class OopStorage {\n+class OopStorage : public CHeapObjBase {\n@@ -77,1 +77,1 @@\n-  explicit OopStorage(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create(const char* name, MEMFLAGS memflags);\n@@ -80,3 +80,0 @@\n-  void* operator new(size_t size, MEMFLAGS memflags);\n-  void operator delete(void* obj, MEMFLAGS memflags);\n-\n@@ -285,0 +282,4 @@\n+  \/\/ Clients construct via \"create\" factory function.\n+  OopStorage(const char* name, MEMFLAGS memflags);\n+  NONCOPYABLE(OopStorage);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  OopStorage* storage = new (memflags) OopStorage(name, memflags);\n+  OopStorage* storage = OopStorage::create(name, memflags);\n@@ -45,1 +45,1 @@\n-  OopStorage* storage = new (memflags) OopStorage(name, memflags);\n+  OopStorage* storage = OopStorage::create(name, memflags);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,0 +175,2 @@\n+  OopStorage* _storage;\n+\n@@ -179,1 +181,1 @@\n-  OopStorage _storage;\n+  OopStorage& storage() const { return *_storage; }\n@@ -186,1 +188,1 @@\n-  _storage(\"Test Storage\", mtGC)\n+  _storage(OopStorage::create(\"Test Storage\", mtGC))\n@@ -190,1 +192,2 @@\n-  clear_list(TestAccess::allocation_list(_storage));\n+  clear_list(TestAccess::allocation_list(storage()));\n+  delete _storage;\n@@ -203,1 +206,1 @@\n-    _entries[i] = _storage.allocate();\n+    _entries[i] = storage().allocate();\n@@ -205,1 +208,1 @@\n-    EXPECT_EQ(i + 1, _storage.allocation_count());\n+    EXPECT_EQ(i + 1, storage().allocation_count());\n@@ -236,2 +239,2 @@\n-  EXPECT_EQ(0u, active_count(_storage));\n-  EXPECT_TRUE(is_list_empty(TestAccess::allocation_list(_storage)));\n+  EXPECT_EQ(0u, active_count(storage()));\n+  EXPECT_TRUE(is_list_empty(TestAccess::allocation_list(storage())));\n@@ -239,1 +242,1 @@\n-  oop* ptr = _storage.allocate();\n+  oop* ptr = storage().allocate();\n@@ -241,1 +244,1 @@\n-  EXPECT_EQ(1u, _storage.allocation_count());\n+  EXPECT_EQ(1u, storage().allocation_count());\n@@ -243,3 +246,3 @@\n-  EXPECT_EQ(1u, active_count(_storage));\n-  EXPECT_EQ(1u, _storage.block_count());\n-  EXPECT_EQ(1u, list_length(TestAccess::allocation_list(_storage)));\n+  EXPECT_EQ(1u, active_count(storage()));\n+  EXPECT_EQ(1u, storage().block_count());\n+  EXPECT_EQ(1u, list_length(TestAccess::allocation_list(storage())));\n@@ -247,1 +250,1 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -249,1 +252,1 @@\n-  const OopBlock* block = TestAccess::allocation_list(_storage).chead();\n+  const OopBlock* block = TestAccess::allocation_list(storage()).chead();\n@@ -251,1 +254,1 @@\n-  EXPECT_EQ(block, active_head(_storage));\n+  EXPECT_EQ(block, active_head(storage()));\n@@ -256,2 +259,2 @@\n-  release_entry(_storage, ptr);\n-  EXPECT_EQ(0u, _storage.allocation_count());\n+  release_entry(storage(), ptr);\n+  EXPECT_EQ(0u, storage().allocation_count());\n@@ -259,3 +262,3 @@\n-  EXPECT_EQ(1u, active_count(_storage));\n-  EXPECT_EQ(1u, _storage.block_count());\n-  EXPECT_EQ(1u, list_length(TestAccess::allocation_list(_storage)));\n+  EXPECT_EQ(1u, active_count(storage()));\n+  EXPECT_EQ(1u, storage().block_count());\n+  EXPECT_EQ(1u, list_length(TestAccess::allocation_list(storage())));\n@@ -263,1 +266,1 @@\n-  EXPECT_EQ(1u, empty_block_count(_storage));\n+  EXPECT_EQ(1u, empty_block_count(storage()));\n@@ -265,1 +268,1 @@\n-  const OopBlock* new_block = TestAccess::allocation_list(_storage).chead();\n+  const OopBlock* new_block = TestAccess::allocation_list(storage()).chead();\n@@ -267,1 +270,1 @@\n-  EXPECT_EQ(block, active_head(_storage));\n+  EXPECT_EQ(block, active_head(storage()));\n@@ -277,1 +280,1 @@\n-  AllocationList& allocation_list = TestAccess::allocation_list(_storage);\n+  AllocationList& allocation_list = TestAccess::allocation_list(storage());\n@@ -279,2 +282,2 @@\n-  EXPECT_EQ(0u, active_count(_storage));\n-  EXPECT_EQ(0u, _storage.block_count());\n+  EXPECT_EQ(0u, active_count(storage()));\n+  EXPECT_EQ(0u, storage().block_count());\n@@ -285,5 +288,5 @@\n-    EXPECT_EQ(allocated, _storage.allocation_count());\n-    if (active_count(_storage) != 0) {\n-      EXPECT_EQ(1u, active_count(_storage));\n-      EXPECT_EQ(1u, _storage.block_count());\n-      const OopBlock& block = *TestAccess::active_array(_storage).at(0);\n+    EXPECT_EQ(allocated, storage().allocation_count());\n+    if (active_count(storage()) != 0) {\n+      EXPECT_EQ(1u, active_count(storage()));\n+      EXPECT_EQ(1u, storage().block_count());\n+      const OopBlock& block = *TestAccess::active_array(storage()).at(0);\n@@ -298,1 +301,1 @@\n-    entries[allocated] = _storage.allocate();\n+    entries[allocated] = storage().allocate();\n@@ -301,3 +304,3 @@\n-  EXPECT_EQ(allocated, _storage.allocation_count());\n-  EXPECT_EQ(1u, active_count(_storage));\n-  EXPECT_EQ(1u, _storage.block_count());\n+  EXPECT_EQ(allocated, storage().allocation_count());\n+  EXPECT_EQ(1u, active_count(storage()));\n+  EXPECT_EQ(1u, storage().block_count());\n@@ -305,1 +308,1 @@\n-  const OopBlock& block = *TestAccess::active_array(_storage).at(0);\n+  const OopBlock& block = *TestAccess::active_array(storage()).at(0);\n@@ -310,1 +313,1 @@\n-    release_entry(_storage, entries[i]);\n+    release_entry(storage(), entries[i]);\n@@ -313,1 +316,1 @@\n-    EXPECT_EQ(remaining, _storage.allocation_count());\n+    EXPECT_EQ(remaining, storage().allocation_count());\n@@ -322,1 +325,1 @@\n-  AllocationList& allocation_list = TestAccess::allocation_list(_storage);\n+  AllocationList& allocation_list = TestAccess::allocation_list(storage());\n@@ -324,1 +327,1 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -326,1 +329,1 @@\n-  entries[0] = _storage.allocate();\n+  entries[0] = storage().allocate();\n@@ -328,2 +331,2 @@\n-  EXPECT_EQ(1u, active_count(_storage));\n-  EXPECT_EQ(1u, _storage.block_count());\n+  EXPECT_EQ(1u, active_count(storage()));\n+  EXPECT_EQ(1u, storage().block_count());\n@@ -331,1 +334,1 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -333,1 +336,1 @@\n-  const OopBlock* block = TestAccess::active_array(_storage).at(0);\n+  const OopBlock* block = TestAccess::active_array(storage()).at(0);\n@@ -338,2 +341,2 @@\n-    entries[i] = _storage.allocate();\n-    EXPECT_EQ(i + 1, _storage.allocation_count());\n+    entries[i] = storage().allocate();\n+    EXPECT_EQ(i + 1, storage().allocation_count());\n@@ -341,1 +344,1 @@\n-    EXPECT_EQ(0u, empty_block_count(_storage));\n+    EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -348,1 +351,1 @@\n-      EXPECT_EQ(block, active_head(_storage));\n+      EXPECT_EQ(block, active_head(storage()));\n@@ -355,1 +358,1 @@\n-      EXPECT_EQ(block, active_head(_storage));\n+      EXPECT_EQ(block, active_head(storage()));\n@@ -363,1 +366,1 @@\n-    EXPECT_EQ(block, active_head(_storage));\n+    EXPECT_EQ(block, active_head(storage()));\n@@ -367,3 +370,3 @@\n-    release_entry(_storage, entries[i]);\n-    EXPECT_TRUE(is_allocation_list_sorted(_storage));\n-    EXPECT_EQ(max_entries - (i + 1), total_allocation_count(_storage));\n+    release_entry(storage(), entries[i]);\n+    EXPECT_TRUE(is_allocation_list_sorted(storage()));\n+    EXPECT_EQ(max_entries - (i + 1), total_allocation_count(storage()));\n@@ -372,3 +375,3 @@\n-  EXPECT_EQ(active_count(_storage), list_length(allocation_list));\n-  EXPECT_EQ(active_count(_storage), _storage.block_count());\n-  EXPECT_EQ(active_count(_storage), empty_block_count(_storage));\n+  EXPECT_EQ(active_count(storage()), list_length(allocation_list));\n+  EXPECT_EQ(active_count(storage()), storage().block_count());\n+  EXPECT_EQ(active_count(storage()), empty_block_count(storage()));\n@@ -386,1 +389,1 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -388,1 +391,1 @@\n-  AllocationList& allocation_list = TestAccess::allocation_list(_storage);\n+  AllocationList& allocation_list = TestAccess::allocation_list(storage());\n@@ -390,1 +393,1 @@\n-  EXPECT_EQ(_max_entries, total_allocation_count(_storage));\n+  EXPECT_EQ(_max_entries, total_allocation_count(storage()));\n@@ -397,1 +400,1 @@\n-      release_entry(_storage, _entries[i]);\n+      release_entry(storage(), _entries[i]);\n@@ -400,2 +403,2 @@\n-      EXPECT_EQ(_max_entries - released, total_allocation_count(_storage));\n-      EXPECT_TRUE(is_allocation_list_sorted(_storage));\n+      EXPECT_EQ(_max_entries - released, total_allocation_count(storage()));\n+      EXPECT_TRUE(is_allocation_list_sorted(storage()));\n@@ -405,4 +408,4 @@\n-  EXPECT_EQ(active_count(_storage), list_length(allocation_list));\n-  EXPECT_EQ(active_count(_storage), _storage.block_count());\n-  EXPECT_EQ(0u, total_allocation_count(_storage));\n-  EXPECT_EQ(list_length(allocation_list), empty_block_count(_storage));\n+  EXPECT_EQ(active_count(storage()), list_length(allocation_list));\n+  EXPECT_EQ(active_count(storage()), storage().block_count());\n+  EXPECT_EQ(0u, total_allocation_count(storage()));\n+  EXPECT_EQ(list_length(allocation_list), empty_block_count(storage()));\n@@ -416,1 +419,1 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n@@ -418,1 +421,1 @@\n-  AllocationList& allocation_list = TestAccess::allocation_list(_storage);\n+  AllocationList& allocation_list = TestAccess::allocation_list(storage());\n@@ -420,1 +423,1 @@\n-  EXPECT_EQ(_max_entries, total_allocation_count(_storage));\n+  EXPECT_EQ(_max_entries, total_allocation_count(storage()));\n@@ -429,1 +432,1 @@\n-      release_entry(_storage, _entries[i]);\n+      release_entry(storage(), _entries[i]);\n@@ -433,2 +436,2 @@\n-      EXPECT_EQ(_max_entries - released, total_allocation_count(_storage));\n-      EXPECT_TRUE(is_allocation_list_sorted(_storage));\n+      EXPECT_EQ(_max_entries - released, total_allocation_count(storage()));\n+      EXPECT_TRUE(is_allocation_list_sorted(storage()));\n@@ -436,1 +439,1 @@\n-        _entries[i] = _storage.allocate();\n+        _entries[i] = storage().allocate();\n@@ -438,2 +441,2 @@\n-        EXPECT_EQ(_max_entries - released, total_allocation_count(_storage));\n-        EXPECT_TRUE(is_allocation_list_sorted(_storage));\n+        EXPECT_EQ(_max_entries - released, total_allocation_count(storage()));\n+        EXPECT_TRUE(is_allocation_list_sorted(storage()));\n@@ -444,4 +447,4 @@\n-  EXPECT_EQ(active_count(_storage), list_length(allocation_list));\n-  EXPECT_EQ(active_count(_storage), _storage.block_count());\n-  EXPECT_EQ(0u, total_allocation_count(_storage));\n-  EXPECT_EQ(list_length(allocation_list), empty_block_count(_storage));\n+  EXPECT_EQ(active_count(storage()), list_length(allocation_list));\n+  EXPECT_EQ(active_count(storage()), storage().block_count());\n+  EXPECT_EQ(0u, total_allocation_count(storage()));\n+  EXPECT_EQ(list_length(allocation_list), empty_block_count(storage()));\n@@ -465,2 +468,2 @@\n-    _storage.release(to_release, nrelease);\n-    EXPECT_EQ(_max_entries - nrelease, _storage.allocation_count());\n+    storage().release(to_release, nrelease);\n+    EXPECT_EQ(_max_entries - nrelease, storage().allocation_count());\n@@ -469,2 +472,2 @@\n-      release_entry(_storage, _entries[2 * i + 1], false);\n-      EXPECT_EQ(_max_entries - nrelease - (i + 1), _storage.allocation_count());\n+      release_entry(storage(), _entries[2 * i + 1], false);\n+      EXPECT_EQ(_max_entries - nrelease - (i + 1), storage().allocation_count());\n@@ -472,1 +475,1 @@\n-    EXPECT_TRUE(process_deferred_updates(_storage));\n+    EXPECT_TRUE(process_deferred_updates(storage()));\n@@ -474,1 +477,1 @@\n-    EXPECT_EQ(_storage.block_count(), empty_block_count(_storage));\n+    EXPECT_EQ(storage().block_count(), empty_block_count(storage()));\n@@ -497,1 +500,1 @@\n-  AllocationList& allocation_list = TestAccess::allocation_list(_storage);\n+  AllocationList& allocation_list = TestAccess::allocation_list(storage());\n@@ -499,2 +502,2 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n-  size_t allocated = _storage.allocate(entries, max_entries);\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n+  size_t allocated = storage().allocate(entries, max_entries);\n@@ -507,1 +510,1 @@\n-    EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, _storage.allocation_status(entries[i]));\n+    EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, storage().allocation_status(entries[i]));\n@@ -512,2 +515,2 @@\n-  _storage.release(entries, allocated);\n-  EXPECT_EQ(0u, _storage.allocation_count());\n+  storage().release(entries, allocated);\n+  EXPECT_EQ(0u, storage().allocation_count());\n@@ -515,1 +518,1 @@\n-    EXPECT_EQ(OopStorage::UNALLOCATED_ENTRY, _storage.allocation_status(entries[i]));\n+    EXPECT_EQ(OopStorage::UNALLOCATED_ENTRY, storage().allocation_status(entries[i]));\n@@ -525,1 +528,1 @@\n-    EXPECT_EQ(OopStorage::INVALID_ENTRY, _storage.allocation_status(ptr));\n+    EXPECT_EQ(OopStorage::INVALID_ENTRY, storage().allocation_status(ptr));\n@@ -533,1 +536,1 @@\n-    EXPECT_EQ(OopStorage::INVALID_ENTRY, _storage.allocation_status(ptr));\n+    EXPECT_EQ(OopStorage::INVALID_ENTRY, storage().allocation_status(ptr));\n@@ -597,1 +600,1 @@\n-      entries[allocated] = _storage.allocate();\n+      entries[allocated] = storage().allocate();\n@@ -607,1 +610,1 @@\n-      VM_CountAtSafepoint<false> op(&_storage, &cl);\n+      VM_CountAtSafepoint<false> op(&storage(), &cl);\n@@ -620,1 +623,1 @@\n-      VM_CountAtSafepoint<true> op(&_storage, &cl);\n+      VM_CountAtSafepoint<true> op(&storage(), &cl);\n@@ -633,1 +636,1 @@\n-    release_entry(_storage, entries[--allocated], false);\n+    release_entry(storage(), entries[--allocated], false);\n@@ -635,1 +638,1 @@\n-  process_deferred_updates(_storage);\n+  process_deferred_updates(storage());\n@@ -654,1 +657,1 @@\n-    for ( ; empty_block_count(_storage) < 2; ++initial_release) {\n+    for ( ; empty_block_count(storage()) < 2; ++initial_release) {\n@@ -656,1 +659,1 @@\n-      release_entry(_storage, _entries[initial_release]);\n+      release_entry(storage(), _entries[initial_release]);\n@@ -661,1 +664,1 @@\n-      release_entry(_storage, _entries[i], false);\n+      release_entry(storage(), _entries[i], false);\n@@ -664,1 +667,1 @@\n-    process_deferred_updates(_storage);\n+    process_deferred_updates(storage());\n@@ -834,1 +837,1 @@\n-  VM_Verify<false> op(&_storage, &vstate);\n+  VM_Verify<false> op(&storage(), &vstate);\n@@ -845,1 +848,1 @@\n-  VM_Verify<true> op(&_storage, &vstate);\n+  VM_Verify<true> op(&storage(), &vstate);\n@@ -856,1 +859,1 @@\n-  VM_VerifyUsingOopsDo op(&_storage, &vstate);\n+  VM_VerifyUsingOopsDo op(&storage(), &vstate);\n@@ -949,1 +952,1 @@\n-  Task<false, false> task(\"test\", &_storage, &vstate);\n+  Task<false, false> task(\"test\", &storage(), &vstate);\n@@ -960,1 +963,1 @@\n-  Task<false, true> task(\"test\", &_storage, &vstate);\n+  Task<false, true> task(\"test\", &storage(), &vstate);\n@@ -971,1 +974,1 @@\n-  TaskUsingOopsDo<false, false> task(\"test\", &_storage, &vstate);\n+  TaskUsingOopsDo<false, false> task(\"test\", &storage(), &vstate);\n@@ -982,1 +985,1 @@\n-  TaskUsingOopsDo<false, true> task(\"test\", &_storage, &vstate);\n+  TaskUsingOopsDo<false, true> task(\"test\", &storage(), &vstate);\n@@ -993,1 +996,1 @@\n-  Task<true, false> task(\"test\", &_storage, &vstate);\n+  Task<true, false> task(\"test\", &storage(), &vstate);\n@@ -1000,1 +1003,1 @@\n-  Task<true, true> task(\"test\", &_storage, &vstate);\n+  Task<true, true> task(\"test\", &storage(), &vstate);\n@@ -1007,1 +1010,1 @@\n-  TaskUsingOopsDo<true, false> task(\"test\", &_storage, &vstate);\n+  TaskUsingOopsDo<true, false> task(\"test\", &storage(), &vstate);\n@@ -1014,1 +1017,1 @@\n-  TaskUsingOopsDo<true, true> task(\"test\", &_storage, &vstate);\n+  TaskUsingOopsDo<true, true> task(\"test\", &storage(), &vstate);\n@@ -1020,2 +1023,2 @@\n-  size_t initial_active_size = active_count(_storage);\n-  EXPECT_EQ(initial_active_size, _storage.block_count());\n+  size_t initial_active_size = active_count(storage());\n+  EXPECT_EQ(initial_active_size, storage().block_count());\n@@ -1024,1 +1027,1 @@\n-  for (size_t i = 0; empty_block_count(_storage) < 3; ++i) {\n+  for (size_t i = 0; empty_block_count(storage()) < 3; ++i) {\n@@ -1026,1 +1029,1 @@\n-    release_entry(_storage, _entries[i]);\n+    release_entry(storage(), _entries[i]);\n@@ -1029,3 +1032,3 @@\n-  EXPECT_EQ(initial_active_size, active_count(_storage));\n-  EXPECT_EQ(initial_active_size, _storage.block_count());\n-  EXPECT_EQ(3u, empty_block_count(_storage));\n+  EXPECT_EQ(initial_active_size, active_count(storage()));\n+  EXPECT_EQ(initial_active_size, storage().block_count());\n+  EXPECT_EQ(3u, empty_block_count(storage()));\n@@ -1034,1 +1037,1 @@\n-    while (_storage.delete_empty_blocks()) {}\n+    while (storage().delete_empty_blocks()) {}\n@@ -1036,3 +1039,3 @@\n-  EXPECT_EQ(0u, empty_block_count(_storage));\n-  EXPECT_EQ(initial_active_size - 3, active_count(_storage));\n-  EXPECT_EQ(initial_active_size - 3, _storage.block_count());\n+  EXPECT_EQ(0u, empty_block_count(storage()));\n+  EXPECT_EQ(initial_active_size - 3, active_count(storage()));\n+  EXPECT_EQ(initial_active_size - 3, storage().block_count());\n@@ -1045,1 +1048,1 @@\n-  release_entry(_storage, released);\n+  release_entry(storage(), released);\n@@ -1047,3 +1050,3 @@\n-  EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, _storage.allocation_status(retained));\n-  EXPECT_EQ(OopStorage::UNALLOCATED_ENTRY, _storage.allocation_status(released));\n-  EXPECT_EQ(OopStorage::INVALID_ENTRY, _storage.allocation_status(garbage));\n+  EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, storage().allocation_status(retained));\n+  EXPECT_EQ(OopStorage::UNALLOCATED_ENTRY, storage().allocation_status(released));\n+  EXPECT_EQ(OopStorage::INVALID_ENTRY, storage().allocation_status(garbage));\n@@ -1054,1 +1057,1 @@\n-      release_entry(_storage, _entries[i], false);\n+      release_entry(storage(), _entries[i], false);\n@@ -1060,1 +1063,1 @@\n-    while (_storage.delete_empty_blocks()) {}\n+    while (storage().delete_empty_blocks()) {}\n@@ -1062,3 +1065,3 @@\n-  EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, _storage.allocation_status(retained));\n-  EXPECT_EQ(OopStorage::INVALID_ENTRY, _storage.allocation_status(released));\n-  EXPECT_EQ(OopStorage::INVALID_ENTRY, _storage.allocation_status(garbage));\n+  EXPECT_EQ(OopStorage::ALLOCATED_ENTRY, storage().allocation_status(retained));\n+  EXPECT_EQ(OopStorage::INVALID_ENTRY, storage().allocation_status(released));\n+  EXPECT_EQ(OopStorage::INVALID_ENTRY, storage().allocation_status(garbage));\n@@ -1072,1 +1075,1 @@\n-  EXPECT_EQ(0u, _storage.block_count());\n+  EXPECT_EQ(0u, storage().block_count());\n@@ -1074,1 +1077,1 @@\n-  EXPECT_LT(0u, _storage.total_memory_usage());\n+  EXPECT_LT(0u, storage().total_memory_usage());\n@@ -1076,3 +1079,3 @@\n-  while (_storage.block_count() < goal_blocks) {\n-    size_t this_count = _storage.block_count();\n-    while (_storage.block_count() == this_count) {\n+  while (storage().block_count() < goal_blocks) {\n+    size_t this_count = storage().block_count();\n+    while (storage().block_count() == this_count) {\n@@ -1080,1 +1083,1 @@\n-      entries[allocated] = _storage.allocate();\n+      entries[allocated] = storage().allocate();\n@@ -1084,2 +1087,2 @@\n-    EXPECT_NE(0u, _storage.block_count());\n-    EXPECT_NE(0u, _storage.total_memory_usage());\n+    EXPECT_NE(0u, storage().block_count());\n+    EXPECT_NE(0u, storage().total_memory_usage());\n@@ -1088,2 +1091,2 @@\n-  EXPECT_LT(TestAccess::memory_per_block() * _storage.block_count(),\n-            _storage.total_memory_usage());\n+  EXPECT_LT(TestAccess::memory_per_block() * storage().block_count(),\n+            storage().total_memory_usage());\n@@ -1098,1 +1101,1 @@\n-    release_entry(_storage, _entries[i], false);\n+    release_entry(storage(), _entries[i], false);\n@@ -1104,1 +1107,1 @@\n-    release_entry(_storage, _entries[i], false);\n+    release_entry(storage(), _entries[i], false);\n@@ -1109,1 +1112,1 @@\n-  EXPECT_EQ(expected_entries, _storage.allocation_count());\n+  EXPECT_EQ(expected_entries, storage().allocation_count());\n@@ -1113,1 +1116,1 @@\n-  EXPECT_EQ(expected_blocks, _storage.block_count());\n+  EXPECT_EQ(expected_blocks, storage().block_count());\n@@ -1126,1 +1129,1 @@\n-                      _storage.total_memory_usage());\n+                      storage().total_memory_usage());\n@@ -1128,1 +1131,1 @@\n-    _storage.print_on(&st);\n+    storage().print_on(&st);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":155,"deletions":152,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,2 @@\n+  OopStorage* _storage;\n+\n@@ -65,0 +67,1 @@\n+  OopStorage& storage() const { return *_storage; }\n@@ -71,1 +74,0 @@\n-  OopStorage _storage;\n@@ -88,1 +90,1 @@\n-  _storage(\"Test Storage\", mtGC)\n+  _storage(OopStorage::create(\"Test Storage\", mtGC))\n@@ -91,1 +93,1 @@\n-    _entries[i] = _storage.allocate();\n+    _entries[i] = storage().allocate();\n@@ -97,1 +99,2 @@\n-  _storage.release(_entries, ARRAY_SIZE(_entries));\n+  storage().release(_entries, ARRAY_SIZE(_entries));\n+  delete _storage;\n@@ -180,1 +183,1 @@\n-    Task task(&_storage, &closure, nthreads);\n+    Task task(&storage(), &closure, nthreads);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}