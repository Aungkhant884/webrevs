{"files":[{"patch":"@@ -331,1 +331,1 @@\n-      \/\/ Convert \"a*b+a*c into a *(b+c)\n+      \/\/ Convert \"a*b+a*c into a*(b+c)\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270366\n+ * @summary Test corner cases of integer associative rules\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestAssociative\n+ *\n+ *\/\n+\n+public class TestAssociative {\n+    private static class IntParams {\n+        int a;\n+        int b;\n+        int c;\n+        public IntParams(int a, int b, int c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    private static class LongParams {\n+        long a;\n+        long b;\n+        long c;\n+        public LongParams(long a, long b, long c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    private static final IntParams[]  intParamsArray = {\n+        new IntParams(17, 34, 10),\n+        new IntParams(Integer.MAX_VALUE - 4, 34, 10),\n+        new IntParams(7, Integer.MAX_VALUE, 10),\n+        new IntParams(7, Integer.MAX_VALUE, Integer.MAX_VALUE),\n+        new IntParams(10, Integer.MIN_VALUE, Integer.MIN_VALUE),\n+        new IntParams(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE)\n+    };\n+\n+    private static final LongParams[] longParamsArray = {\n+        new LongParams(17, 34, 10),\n+        new LongParams(Long.MAX_VALUE - 4, 34, 10),\n+        new LongParams(7, Long.MAX_VALUE, 10),\n+        new LongParams(7, Long.MAX_VALUE, Long.MAX_VALUE),\n+        new LongParams(10, Long.MIN_VALUE, Long.MIN_VALUE),\n+        new LongParams(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE)\n+    };\n+\n+    \/\/ Integer\n+    private static interface IntAssociativeTest {\n+        public int test(int a, int b, int c);\n+    }\n+\n+    \/\/ Integer Add\n+    private static class IntAssociativeTest0 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + a * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest1 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest2 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * c +  b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest3 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + c * a;\n+        }\n+    }\n+\n+    \/\/ Integer Substract\n+    private static class IntAssociativeTest4 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - a * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest5 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest6 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * c -  b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest7 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - c * a;\n+        }\n+    }\n+\n+\n+    \/\/ Long\n+    private static interface LongAssociativeTest {\n+        public long test(long a, long b, long c);\n+    }\n+\n+    \/\/ Long Add\n+    private static class LongAssociativeTest0 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + a * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest1 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest2 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * c +  b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest3 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + c * a;\n+        }\n+    }\n+\n+    \/\/ Long Substract\n+    private static class LongAssociativeTest4 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - a * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest5 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest6 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * c -  b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest7 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - c * a;\n+        }\n+    }\n+\n+    private static void runIntTest(IntAssociativeTest t) {\n+        for (IntParams p : intParamsArray) {\n+            int result = t.test(p.a, p.b, p.c);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != t.test(p.a, p.b, p.c)) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void runLongTest(LongAssociativeTest t) {\n+        for (LongParams p : longParamsArray) {\n+            long result = t.test(p.a, p.b, p.c);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != t.test(p.a, p.b, p.c)) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final IntAssociativeTest[] intTests = {\n+        new IntAssociativeTest0(),\n+        new IntAssociativeTest1(),\n+        new IntAssociativeTest2(),\n+        new IntAssociativeTest3(),\n+        new IntAssociativeTest4(),\n+        new IntAssociativeTest5(),\n+        new IntAssociativeTest6(),\n+        new IntAssociativeTest7()\n+    };\n+\n+    private static final LongAssociativeTest[] longTests = {\n+        new LongAssociativeTest0(),\n+        new LongAssociativeTest1(),\n+        new LongAssociativeTest2(),\n+        new LongAssociativeTest3(),\n+        new LongAssociativeTest4(),\n+        new LongAssociativeTest5(),\n+        new LongAssociativeTest6(),\n+        new LongAssociativeTest7()\n+    };\n+\n+    public static void main(String[] args) {\n+        for (IntAssociativeTest t: intTests) {\n+            runIntTest(t);\n+        }\n+\n+        for (LongAssociativeTest t: longTests) {\n+            runLongTest(t);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestAssociative.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"},{"patch":"@@ -1,122 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8270366\n- * @summary Test corner cases of integer associative rules\n- *\n- * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestIntegerAssociative\n- *\n- *\/\n-\n-public class TestIntegerAssociative {\n-    public static void main(String[] args) {\n-        int a = 17;\n-        int b = 34;\n-        int c = 10;\n-\n-        \/\/ Test a*b+a*c => a*(b+c) transformation\n-        runAddTest(a, b, c);\n-\n-        a = Integer.MAX_VALUE - 4;\n-        runAddTest(a, b, c);\n-\n-        a = 7;\n-        b = Integer.MAX_VALUE;\n-        runAddTest(a, b, c);\n-\n-        c = Integer.MAX_VALUE;\n-        runAddTest(a, b, c);\n-\n-        b = Integer.MIN_VALUE + 7;\n-        c = Integer.MIN_VALUE + 18;\n-        runAddTest(a, b, c);\n-\n-        a = Integer.MAX_VALUE;\n-        b = Integer.MAX_VALUE;\n-        c = Integer.MAX_VALUE;\n-        runAddTest(a, b, c);\n-\n-        \/\/ Test a*b-a*c => a*(b-c) transformation\n-        a = 17;\n-        b = 34;\n-        c = 10;\n-        runSubTest(a, b, c);\n-\n-        a = Integer.MIN_VALUE + 40;\n-        runSubTest(a, b, c);\n-\n-        a = Integer.MAX_VALUE - 4;\n-        runSubTest(a, b, c);\n-\n-        a = 34;\n-        b = Integer.MIN_VALUE + 3;\n-        c = Integer.MIN_VALUE + 20;\n-        runSubTest(a, b, c);\n-\n-        a = Integer.MAX_VALUE;\n-        b = Integer.MAX_VALUE;\n-        c = Integer.MAX_VALUE;\n-        runSubTest(a, b, c);\n-\n-        a = Integer.MIN_VALUE;\n-        b = Integer.MIN_VALUE;\n-        c = Integer.MIN_VALUE;\n-        runSubTest(a, b, c);\n-    }\n-\n-    private static void runAddTest(int a, int b, int c) {\n-        int intResult = addInt(a, b, c);\n-        for (int i = 0; i < 20_000; i++) {\n-            if (intResult != addComp(a, b, c)) {\n-                throw new RuntimeException(\"incorrect result\");\n-            }\n-        }\n-    }\n-    \/\/ Method should run under interpreter mode\n-    private static int addInt(int a, int b, int c) {\n-        return a * b + a * c;\n-    }\n-    \/\/ Method should be compiled\n-    private static int addComp(int a, int b, int c) {\n-        return a * b + a * c;\n-    }\n-\n-    private static void runSubTest(int a, int b, int c) {\n-        int intResult = subInt(a, b, c);\n-        for (int i = 0; i < 20_000; i++) {\n-            if (intResult != subComp(a, b, c)) {\n-                throw new RuntimeException(\"incorrect result\");\n-            }\n-        }\n-    }\n-    \/\/ Method should run under interpreter mode\n-    private static int subInt(int a, int b, int c) {\n-        return a * b + a * c;\n-    }\n-    \/\/ Method should be compiled\n-    private static int subComp(int a, int b, int c) {\n-        return a * b + a * c;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestIntegerAssociative.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"deleted"}]}