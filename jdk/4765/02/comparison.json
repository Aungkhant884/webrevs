{"files":[{"patch":"@@ -324,0 +324,21 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulI && op2 == Op_MulI) {\n+    \/\/ Convert \"a*b+a*c into a *(b+c)\n+    if (in1->in(1) == in2->in(1)) {\n+      Node* add = phase->transform(new AddINode(in1->in(2), in2->in(2)));\n+      return new MulINode(in1->in(1), add);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b+b*c into b*(a+c)\n+      Node* add = phase->transform(new AddINode(in1->in(1), in2->in(2)));\n+      return new MulINode(in1->in(2), add);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c+b*c into (a+b)*c\n+      Node* add = phase->transform(new AddINode(in1->in(1), in2->in(1)));\n+      return new MulINode(in1->in(2), add);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b+c*a into a*(b+c)\n+      Node* add = phase->transform(new AddINode(in1->in(2), in2->in(1)));\n+      return new MulINode(in1->in(1), add);\n+    }\n+  }\n+\n@@ -472,0 +493,21 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulL && op2 == Op_MulL) {\n+    \/\/ Convert \"a*b+a*c into a*(b+c)\n+    if (in1->in(1) == in2->in(1)) {\n+      Node* add = phase->transform(new AddLNode(in1->in(2), in2->in(2)));\n+      return new MulLNode(in1->in(1), add);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b+b*c into b*(a+c)\n+      Node* add = phase->transform(new AddLNode(in1->in(1), in2->in(2)));\n+      return new MulLNode(in1->in(2), add);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c+b*c into (a+b)*c\n+      Node* add = phase->transform(new AddLNode(in1->in(1), in2->in(1)));\n+      return new MulLNode(in1->in(2), add);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b+c*a into a*(b+c)\n+      Node* add = phase->transform(new AddLNode(in1->in(2), in2->in(1)));\n+      return new MulLNode(in1->in(1), add);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -272,0 +272,21 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulI && op2 == Op_MulI) {\n+    \/\/ Convert \"a*b-a*c into a*(b-c)\n+    if (in1->in(1) == in2->in(1)) {\n+      Node* sub = phase->transform(new SubINode(in1->in(2), in2->in(2)));\n+      return new MulINode(in1->in(1), sub);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b-b*c into b*(a-c)\n+      Node* sub = phase->transform(new SubINode(in1->in(1), in2->in(2)));\n+      return new MulINode(in1->in(2), sub);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c-b*c into (a-b)*c\n+      Node* sub = phase->transform(new SubINode(in1->in(1), in2->in(1)));\n+      return new MulINode(sub, in1->in(2));\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b-c*a into a*(b-c)\n+      Node* sub = phase->transform(new SubINode(in1->in(2), in2->in(1)));\n+      return new MulINode(in1->in(1), sub);\n+    }\n+  }\n+\n@@ -396,0 +417,21 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulL && op2 == Op_MulL) {\n+    \/\/ Convert \"a*b-a*c into a*(b+c)\n+    if (in1->in(1) == in2->in(1)) {\n+      Node* sub = phase->transform(new SubLNode(in1->in(2), in2->in(2)));\n+      return new MulLNode(in1->in(1), sub);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b-b*c into b*(a-c)\n+      Node* sub = phase->transform(new SubLNode(in1->in(1), in2->in(2)));\n+      return new MulLNode(in1->in(2), sub);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c-b*c into (a-b)*c\n+      Node* sub = phase->transform(new SubLNode(in1->in(1), in2->in(1)));\n+      return new MulLNode(sub, in1->in(2));\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b-c*a into a*(b-c)\n+      Node* sub = phase->transform(new SubLNode(in1->in(2), in2->in(1)));\n+      return new MulLNode(in1->in(1), sub);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270366\n+ * @summary Test corner cases of integer associative rules\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestIntegerAssociative\n+ *\n+ *\/\n+\n+public class TestIntegerAssociative {\n+    public static void main(String[] args) {\n+        int a = 17;\n+        int b = 34;\n+        int c = 10;\n+\n+        \/\/ Test a*b+a*c => a*(b+c) transformation\n+        runAddTest(a, b, c);\n+\n+        a = Integer.MAX_VALUE - 4;\n+        runAddTest(a, b, c);\n+\n+        a = 7;\n+        b = Integer.MAX_VALUE;\n+        runAddTest(a, b, c);\n+\n+        c = Integer.MAX_VALUE;\n+        runAddTest(a, b, c);\n+\n+        b = Integer.MIN_VALUE + 7;\n+        c = Integer.MIN_VALUE + 18;\n+        runAddTest(a, b, c);\n+\n+        a = Integer.MAX_VALUE;\n+        b = Integer.MAX_VALUE;\n+        c = Integer.MAX_VALUE;\n+        runAddTest(a, b, c);\n+\n+        \/\/ Test a*b-a*c => a*(b-c) transformation\n+        a = 17;\n+        b = 34;\n+        c = 10;\n+        runSubTest(a, b, c);\n+\n+        a = Integer.MIN_VALUE + 40;\n+        runSubTest(a, b, c);\n+\n+        a = Integer.MAX_VALUE - 4;\n+        runSubTest(a, b, c);\n+\n+        a = 34;\n+        b = Integer.MIN_VALUE + 3;\n+        c = Integer.MIN_VALUE + 20;\n+        runSubTest(a, b, c);\n+\n+        a = Integer.MAX_VALUE;\n+        b = Integer.MAX_VALUE;\n+        c = Integer.MAX_VALUE;\n+        runSubTest(a, b, c);\n+\n+        a = Integer.MIN_VALUE;\n+        b = Integer.MIN_VALUE;\n+        c = Integer.MIN_VALUE;\n+        runSubTest(a, b, c);\n+    }\n+\n+    private static void runAddTest(int a, int b, int c) {\n+        int intResult = addInt(a, b, c);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (intResult != addComp(a, b, c)) {\n+                throw new RuntimeException(\"incorrect result\");\n+            }\n+        }\n+    }\n+    \/\/ Method should run under interpreter mode\n+    private static int addInt(int a, int b, int c) {\n+        return a * b + a * c;\n+    }\n+    \/\/ Method should be compiled\n+    private static int addComp(int a, int b, int c) {\n+        return a * b + a * c;\n+    }\n+\n+    private static void runSubTest(int a, int b, int c) {\n+        int intResult = subInt(a, b, c);\n+        for (int i = 0; i < 20_000; i++) {\n+            if (intResult != subComp(a, b, c)) {\n+                throw new RuntimeException(\"incorrect result\");\n+            }\n+        }\n+    }\n+    \/\/ Method should run under interpreter mode\n+    private static int subInt(int a, int b, int c) {\n+        return a * b + a * c;\n+    }\n+    \/\/ Method should be compiled\n+    private static int subComp(int a, int b, int c) {\n+        return a * b + a * c;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestIntegerAssociative.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}