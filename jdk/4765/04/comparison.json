{"files":[{"patch":"@@ -324,0 +324,34 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulI && op2 == Op_MulI) {\n+    Node* add_in1 = NULL;\n+    Node* add_in2 = NULL;\n+    Node* mul_in = NULL;\n+\n+    if (in1->in(1) == in2->in(1)) {\n+      \/\/ Convert \"a*b+a*c into a*(b+c)\n+      add_in1 = in1->in(2);\n+      add_in2 = in2->in(2);\n+      mul_in = in1->in(1);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b+b*c into b*(a+c)\n+      add_in1 = in1->in(1);\n+      add_in2 = in2->in(2);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c+b*c into (a+b)*c\n+      add_in1 = in1->in(1);\n+      add_in2 = in2->in(1);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b+c*a into a*(b+c)\n+      add_in1 = in1->in(2);\n+      add_in2 = in2->in(1);\n+      mul_in = in1->in(1);\n+    }\n+\n+    if (mul_in != NULL) {\n+      Node* add = phase->transform(new AddINode(add_in1, add_in2));\n+      return new MulINode(mul_in, add);\n+    }\n+  }\n+\n@@ -472,0 +506,34 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulL && op2 == Op_MulL) {\n+    Node* add_in1 = NULL;\n+    Node* add_in2 = NULL;\n+    Node* mul_in = NULL;\n+\n+    if (in1->in(1) == in2->in(1)) {\n+      \/\/ Convert \"a*b+a*c into a*(b+c)\n+      add_in1 = in1->in(2);\n+      add_in2 = in2->in(2);\n+      mul_in = in1->in(1);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b+b*c into b*(a+c)\n+      add_in1 = in1->in(1);\n+      add_in2 = in2->in(2);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c+b*c into (a+b)*c\n+      add_in1 = in1->in(1);\n+      add_in2 = in2->in(1);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b+c*a into a*(b+c)\n+      add_in1 = in1->in(2);\n+      add_in2 = in2->in(1);\n+      mul_in = in1->in(1);\n+    }\n+\n+    if (mul_in != NULL) {\n+      Node* add = phase->transform(new AddLNode(add_in1, add_in2));\n+      return new MulLNode(mul_in, add);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -272,0 +272,34 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulI && op2 == Op_MulI) {\n+    Node* sub_in1 = NULL;\n+    Node* sub_in2 = NULL;\n+    Node* mul_in = NULL;\n+\n+    if (in1->in(1) == in2->in(1)) {\n+      \/\/ Convert \"a*b-a*c into a*(b-c)\n+      sub_in1 = in1->in(2);\n+      sub_in2 = in2->in(2);\n+      mul_in = in1->in(1);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b-b*c into b*(a-c)\n+      sub_in1 = in1->in(1);\n+      sub_in2 = in2->in(2);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c-b*c into (a-b)*c\n+      sub_in1 = in1->in(1);\n+      sub_in2 = in2->in(1);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b-c*a into a*(b-c)\n+      sub_in1 = in1->in(2);\n+      sub_in2 = in2->in(1);\n+      mul_in = in1->in(1);\n+    }\n+\n+    if (mul_in != NULL) {\n+      Node* sub = phase->transform(new SubINode(sub_in1, sub_in2));\n+      return new MulINode(mul_in, sub);\n+    }\n+  }\n+\n@@ -396,0 +430,34 @@\n+  \/\/ Associative\n+  if (op1 == Op_MulL && op2 == Op_MulL) {\n+    Node* sub_in1 = NULL;\n+    Node* sub_in2 = NULL;\n+    Node* mul_in = NULL;\n+\n+    if (in1->in(1) == in2->in(1)) {\n+      \/\/ Convert \"a*b-a*c into a*(b+c)\n+      sub_in1 = in1->in(2);\n+      sub_in2 = in2->in(2);\n+      mul_in = in1->in(1);\n+    } else if (in1->in(2) == in2->in(1)) {\n+      \/\/ Convert a*b-b*c into b*(a-c)\n+      sub_in1 = in1->in(1);\n+      sub_in2 = in2->in(2);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(2) == in2->in(2)) {\n+      \/\/ Convert a*c-b*c into (a-b)*c\n+      sub_in1 = in1->in(1);\n+      sub_in2 = in2->in(1);\n+      mul_in = in1->in(2);\n+    } else if (in1->in(1) == in2->in(2)) {\n+      \/\/ Convert a*b-c*a into a*(b-c)\n+      sub_in1 = in1->in(2);\n+      sub_in2 = in2->in(1);\n+      mul_in = in1->in(1);\n+    }\n+\n+    if (mul_in != NULL) {\n+      Node* sub = phase->transform(new SubLNode(sub_in1, sub_in2));\n+      return new MulLNode(mul_in, sub);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270366\n+ * @summary Test corner cases of integer associative rules\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestAssociative\n+ *\n+ *\/\n+\n+public class TestAssociative {\n+    private static class IntParams {\n+        int a;\n+        int b;\n+        int c;\n+        public IntParams(int a, int b, int c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    private static class LongParams {\n+        long a;\n+        long b;\n+        long c;\n+        public LongParams(long a, long b, long c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    private static final IntParams[]  intParamsArray = {\n+        new IntParams(17, 34, 10),\n+        new IntParams(Integer.MAX_VALUE - 4, 34, 10),\n+        new IntParams(7, Integer.MAX_VALUE, 10),\n+        new IntParams(7, Integer.MAX_VALUE, Integer.MAX_VALUE),\n+        new IntParams(10, Integer.MIN_VALUE, Integer.MIN_VALUE),\n+        new IntParams(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE)\n+    };\n+\n+    private static final LongParams[] longParamsArray = {\n+        new LongParams(17, 34, 10),\n+        new LongParams(Long.MAX_VALUE - 4, 34, 10),\n+        new LongParams(7, Long.MAX_VALUE, 10),\n+        new LongParams(7, Long.MAX_VALUE, Long.MAX_VALUE),\n+        new LongParams(10, Long.MIN_VALUE, Long.MIN_VALUE),\n+        new LongParams(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE)\n+    };\n+\n+    \/\/ Integer\n+    private static interface IntAssociativeTest {\n+        public int test(int a, int b, int c);\n+    }\n+\n+    \/\/ Integer Add\n+    private static class IntAssociativeTest0 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + a * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest1 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest2 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * c +  b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest3 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b + c * a;\n+        }\n+    }\n+\n+    \/\/ Integer Substract\n+    private static class IntAssociativeTest4 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - a * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest5 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest6 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * c -  b * c;\n+        }\n+    }\n+\n+    private static class IntAssociativeTest7 implements IntAssociativeTest {\n+        public int test(int a, int b, int c) {\n+            return a * b - c * a;\n+        }\n+    }\n+\n+\n+    \/\/ Long\n+    private static interface LongAssociativeTest {\n+        public long test(long a, long b, long c);\n+    }\n+\n+    \/\/ Long Add\n+    private static class LongAssociativeTest0 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + a * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest1 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest2 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * c +  b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest3 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b + c * a;\n+        }\n+    }\n+\n+    \/\/ Long Substract\n+    private static class LongAssociativeTest4 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - a * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest5 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest6 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * c -  b * c;\n+        }\n+    }\n+\n+    private static class LongAssociativeTest7 implements LongAssociativeTest {\n+        public long test(long a, long b, long c) {\n+            return a * b - c * a;\n+        }\n+    }\n+\n+    private static void runIntTest(IntAssociativeTest t) {\n+        for (IntParams p : intParamsArray) {\n+            int result = t.test(p.a, p.b, p.c);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != t.test(p.a, p.b, p.c)) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void runLongTest(LongAssociativeTest t) {\n+        for (LongParams p : longParamsArray) {\n+            long result = t.test(p.a, p.b, p.c);\n+            for (int i = 0; i < 20_000; i++) {\n+                if (result != t.test(p.a, p.b, p.c)) {\n+                    throw new RuntimeException(\"incorrect result\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final IntAssociativeTest[] intTests = {\n+        new IntAssociativeTest0(),\n+        new IntAssociativeTest1(),\n+        new IntAssociativeTest2(),\n+        new IntAssociativeTest3(),\n+        new IntAssociativeTest4(),\n+        new IntAssociativeTest5(),\n+        new IntAssociativeTest6(),\n+        new IntAssociativeTest7()\n+    };\n+\n+    private static final LongAssociativeTest[] longTests = {\n+        new LongAssociativeTest0(),\n+        new LongAssociativeTest1(),\n+        new LongAssociativeTest2(),\n+        new LongAssociativeTest3(),\n+        new LongAssociativeTest4(),\n+        new LongAssociativeTest5(),\n+        new LongAssociativeTest6(),\n+        new LongAssociativeTest7()\n+    };\n+\n+    public static void main(String[] args) {\n+        for (IntAssociativeTest t: intTests) {\n+            runIntTest(t);\n+        }\n+\n+        for (LongAssociativeTest t: longTests) {\n+            runLongTest(t);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestAssociative.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"}]}