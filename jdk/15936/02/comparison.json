{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -226,1 +226,1 @@\n-        return new CollectorImpl<>(collectionFactory, Collection<T>::add,\n+        return new CollectorImpl<>(collectionFactory, Collection::add,\n@@ -339,1 +339,1 @@\n-        return new CollectorImpl<CharSequence, StringBuilder, String>(\n+        return new CollectorImpl<>(\n@@ -341,1 +341,4 @@\n-                (r1, r2) -> { r1.append(r2); return r1; },\n+                (r1, r2) -> {\n+                    r1.append(r2);\n+                    return r1;\n+                },\n@@ -905,1 +908,1 @@\n-        return new CollectorImpl<T, OptionalBox, Optional<T>>(\n+        return new CollectorImpl<>(\n@@ -907,1 +910,4 @@\n-                (a, b) -> { if (b.present) a.accept(b.value); return a; },\n+                (a, b) -> {\n+                    if (b.present) a.accept(b.value);\n+                    return a;\n+                },\n@@ -1109,1 +1115,1 @@\n-        BinaryOperator<Map<K, A>> merger = Collectors.<K, A, Map<K, A>>mapMerger(downstream.combiner());\n+        BinaryOperator<Map<K, A>> merger = Collectors.mapMerger(downstream.combiner());\n@@ -1262,1 +1268,1 @@\n-        BinaryOperator<ConcurrentMap<K, A>> merger = Collectors.<K, A, ConcurrentMap<K, A>>mapMerger(downstream.combiner());\n+        BinaryOperator<ConcurrentMap<K, A>> merger = Collectors.mapMerger(downstream.combiner());\n@@ -1819,1 +1825,1 @@\n-        return new CollectorImpl<T, IntSummaryStatistics, IntSummaryStatistics>(\n+        return new CollectorImpl<>(\n@@ -1822,1 +1828,4 @@\n-                (l, r) -> { l.combine(r); return l; }, CH_ID);\n+                (l, r) -> {\n+                    l.combine(r);\n+                    return l;\n+                }, CH_ID);\n@@ -1839,1 +1848,1 @@\n-        return new CollectorImpl<T, LongSummaryStatistics, LongSummaryStatistics>(\n+        return new CollectorImpl<>(\n@@ -1842,1 +1851,4 @@\n-                (l, r) -> { l.combine(r); return l; }, CH_ID);\n+                (l, r) -> {\n+                    l.combine(r);\n+                    return l;\n+                }, CH_ID);\n@@ -1859,1 +1871,1 @@\n-        return new CollectorImpl<T, DoubleSummaryStatistics, DoubleSummaryStatistics>(\n+        return new CollectorImpl<>(\n@@ -1862,1 +1874,4 @@\n-                (l, r) -> { l.combine(r); return l; }, CH_ID);\n+                (l, r) -> {\n+                    l.combine(r);\n+                    return l;\n+                }, CH_ID);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Collectors.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-                    return new Sink.ChainedReference<T, T>(sink) {\n+                    return new Sink.ChainedReference<>(sink) {\n@@ -156,1 +156,1 @@\n-                    return new Sink.ChainedReference<T, T>(sink) {\n+                    return new Sink.ChainedReference<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DistinctOps.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,1 @@\n-        return new ReferencePipeline.StatelessOp<Double, U>(this, StreamShape.DOUBLE_VALUE, opFlags) {\n+        return new ReferencePipeline.StatelessOp<>(this, StreamShape.DOUBLE_VALUE, opFlags) {\n@@ -173,1 +173,1 @@\n-                return new Sink.ChainedDouble<U>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -205,2 +205,2 @@\n-        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                       StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -209,1 +209,1 @@\n-                return new Sink.ChainedDouble<Double>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -228,2 +228,2 @@\n-        return new IntPipeline.StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                                   StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new IntPipeline.StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -232,1 +232,1 @@\n-                return new Sink.ChainedDouble<Integer>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -245,2 +245,2 @@\n-        return new LongPipeline.StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                                    StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new LongPipeline.StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -249,1 +249,1 @@\n-                return new Sink.ChainedDouble<Long>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -262,2 +262,2 @@\n-        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -266,1 +266,1 @@\n-                return new Sink.ChainedDouble<Double>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -284,2 +284,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -287,1 +286,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsDouble));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsDouble));\n@@ -336,1 +336,1 @@\n-        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE, StreamOpFlag.NOT_ORDERED) {\n+        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE, StreamOpFlag.NOT_ORDERED) {\n@@ -347,2 +347,2 @@\n-        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                       StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                StreamOpFlag.NOT_SIZED) {\n@@ -351,1 +351,1 @@\n-                return new Sink.ChainedDouble<Double>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n@@ -370,2 +370,2 @@\n-        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,\n-                                       0) {\n+        return new StatelessOp<>(this, StreamShape.DOUBLE_VALUE,\n+                0) {\n@@ -374,1 +374,1 @@\n-                return new Sink.ChainedDouble<Double>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,1 +174,1 @@\n-        return new ReferencePipeline.StatelessOp<Integer, U>(this, StreamShape.INT_VALUE, opFlags) {\n+        return new ReferencePipeline.StatelessOp<>(this, StreamShape.INT_VALUE, opFlags) {\n@@ -177,1 +177,1 @@\n-                return new Sink.ChainedInt<U>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -203,1 +203,1 @@\n-        return new LongPipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE, 0) {\n+        return new LongPipeline.StatelessOp<>(this, StreamShape.INT_VALUE, 0) {\n@@ -206,1 +206,1 @@\n-                return new Sink.ChainedInt<Long>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -218,1 +218,1 @@\n-        return new DoublePipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE, 0) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.INT_VALUE, 0) {\n@@ -221,1 +221,1 @@\n-                return new Sink.ChainedInt<Double>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -239,2 +239,2 @@\n-        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new StatelessOp<>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -243,1 +243,1 @@\n-                return new Sink.ChainedInt<Integer>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -262,2 +262,2 @@\n-        return new LongPipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new LongPipeline.StatelessOp<>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -266,1 +266,1 @@\n-                return new Sink.ChainedInt<Long>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -279,2 +279,2 @@\n-        return new DoublePipeline.StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                                       StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -283,1 +283,1 @@\n-                return new Sink.ChainedInt<Double>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -296,2 +296,2 @@\n-        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -300,1 +300,1 @@\n-                return new Sink.ChainedInt<Integer>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -318,2 +318,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -321,1 +320,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsInt));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsInt));\n@@ -369,1 +369,1 @@\n-        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE, StreamOpFlag.NOT_ORDERED) {\n+        return new StatelessOp<>(this, StreamShape.INT_VALUE, StreamOpFlag.NOT_ORDERED) {\n@@ -380,2 +380,2 @@\n-        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                        StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.INT_VALUE,\n+                StreamOpFlag.NOT_SIZED) {\n@@ -384,1 +384,1 @@\n-                return new Sink.ChainedInt<Integer>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -403,2 +403,2 @@\n-        return new StatelessOp<Integer>(this, StreamShape.INT_VALUE,\n-                                        0) {\n+        return new StatelessOp<>(this, StreamShape.INT_VALUE,\n+                0) {\n@@ -407,1 +407,1 @@\n-                return new Sink.ChainedInt<Integer>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntPipeline.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-        return new ReferencePipeline.StatelessOp<Long, U>(this, StreamShape.LONG_VALUE, opFlags) {\n+        return new ReferencePipeline.StatelessOp<>(this, StreamShape.LONG_VALUE, opFlags) {\n@@ -174,1 +174,1 @@\n-                return new Sink.ChainedLong<U>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -200,1 +200,1 @@\n-        return new DoublePipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE, StreamOpFlag.NOT_DISTINCT) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.LONG_VALUE, StreamOpFlag.NOT_DISTINCT) {\n@@ -203,1 +203,1 @@\n-                return new Sink.ChainedLong<Double>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -221,2 +221,2 @@\n-        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -225,1 +225,1 @@\n-                return new Sink.ChainedLong<Long>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -244,2 +244,2 @@\n-        return new IntPipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                                 StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new IntPipeline.StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -248,1 +248,1 @@\n-                return new Sink.ChainedLong<Integer>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -261,2 +261,2 @@\n-        return new DoublePipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                                    StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -265,1 +265,1 @@\n-                return new Sink.ChainedLong<Double>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -278,2 +278,2 @@\n-        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -282,1 +282,1 @@\n-                return new Sink.ChainedLong<Long>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -300,2 +300,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -303,1 +302,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsLong));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsLong));\n@@ -351,1 +351,1 @@\n-        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE, StreamOpFlag.NOT_ORDERED) {\n+        return new StatelessOp<>(this, StreamShape.LONG_VALUE, StreamOpFlag.NOT_ORDERED) {\n@@ -362,2 +362,2 @@\n-        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                     StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                StreamOpFlag.NOT_SIZED) {\n@@ -366,1 +366,1 @@\n-                return new Sink.ChainedLong<Long>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -385,2 +385,2 @@\n-        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,\n-                                     0) {\n+        return new StatelessOp<>(this, StreamShape.LONG_VALUE,\n+                0) {\n@@ -389,1 +389,1 @@\n-                return new Sink.ChainedLong<Long>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,1 +155,1 @@\n-        return new StatelessOp<P_OUT, P_OUT>(this, StreamShape.REFERENCE, StreamOpFlag.NOT_ORDERED) {\n+        return new StatelessOp<>(this, StreamShape.REFERENCE, StreamOpFlag.NOT_ORDERED) {\n@@ -166,2 +166,2 @@\n-        return new StatelessOp<P_OUT, P_OUT>(this, StreamShape.REFERENCE,\n-                                     StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SIZED) {\n@@ -170,1 +170,1 @@\n-                return new Sink.ChainedReference<P_OUT, P_OUT>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -190,2 +190,2 @@\n-        return new StatelessOp<P_OUT, R>(this, StreamShape.REFERENCE,\n-                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -194,1 +194,1 @@\n-                return new Sink.ChainedReference<P_OUT, R>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -207,2 +207,2 @@\n-        return new IntPipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                              StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new IntPipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -211,1 +211,1 @@\n-                return new Sink.ChainedReference<P_OUT, Integer>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -224,2 +224,2 @@\n-        return new LongPipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                      StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new LongPipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -228,1 +228,1 @@\n-                return new Sink.ChainedReference<P_OUT, Long>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -241,2 +241,2 @@\n-        return new DoublePipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n@@ -245,1 +245,1 @@\n-                return new Sink.ChainedReference<P_OUT, Double>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -258,2 +258,2 @@\n-        return new StatelessOp<P_OUT, R>(this, StreamShape.REFERENCE,\n-                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -277,2 +277,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -280,1 +279,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstream));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstream));\n@@ -303,2 +303,2 @@\n-        return new IntPipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                              StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new IntPipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -307,1 +307,1 @@\n-                return new Sink.ChainedReference<P_OUT, Integer>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -325,2 +325,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -328,1 +327,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsInt));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsInt));\n@@ -347,2 +347,2 @@\n-        return new DoublePipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new DoublePipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -351,1 +351,1 @@\n-                return new Sink.ChainedReference<P_OUT, Double>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -369,2 +369,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -372,1 +371,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsDouble));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsDouble));\n@@ -392,2 +392,2 @@\n-        return new LongPipeline.StatelessOp<P_OUT>(this, StreamShape.REFERENCE,\n-                                                   StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n+        return new LongPipeline.StatelessOp<>(this, StreamShape.REFERENCE,\n+                StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n@@ -396,1 +396,1 @@\n-                return new Sink.ChainedReference<P_OUT, Long>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -414,2 +414,1 @@\n-                                }\n-                                else {\n+                                } else {\n@@ -417,1 +416,2 @@\n-                                    do { } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsLong));\n+                                    do {\n+                                    } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsLong));\n@@ -533,2 +533,2 @@\n-        return new StatelessOp<P_OUT, P_OUT>(this, StreamShape.REFERENCE,\n-                                     0) {\n+        return new StatelessOp<>(this, StreamShape.REFERENCE,\n+                0) {\n@@ -537,1 +537,1 @@\n-                return new Sink.ChainedReference<P_OUT, P_OUT>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ReferencePipeline.java","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1387,1 +1387,1 @@\n-        return StreamSupport.stream(Spliterators.<T>emptySpliterator(), false);\n+        return StreamSupport.stream(Spliterators.emptySpliterator(), false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        return new ReferencePipeline.StatefulOp<T, T>(upstream, StreamShape.REFERENCE, TAKE_FLAGS) {\n+        return new ReferencePipeline.StatefulOp<>(upstream, StreamShape.REFERENCE, TAKE_FLAGS) {\n@@ -71,2 +71,1 @@\n-                }\n-                else {\n+                } else {\n@@ -88,1 +87,1 @@\n-                return new Sink.ChainedReference<T, T>(sink) {\n+                return new Sink.ChainedReference<>(sink) {\n@@ -121,1 +120,1 @@\n-        return new IntPipeline.StatefulOp<Integer>(upstream, StreamShape.INT_VALUE, TAKE_FLAGS) {\n+        return new IntPipeline.StatefulOp<>(upstream, StreamShape.INT_VALUE, TAKE_FLAGS) {\n@@ -128,2 +127,1 @@\n-                }\n-                else {\n+                } else {\n@@ -145,1 +143,1 @@\n-                return new Sink.ChainedInt<Integer>(sink) {\n+                return new Sink.ChainedInt<>(sink) {\n@@ -178,1 +176,1 @@\n-        return new LongPipeline.StatefulOp<Long>(upstream, StreamShape.LONG_VALUE, TAKE_FLAGS) {\n+        return new LongPipeline.StatefulOp<>(upstream, StreamShape.LONG_VALUE, TAKE_FLAGS) {\n@@ -185,2 +183,1 @@\n-                }\n-                else {\n+                } else {\n@@ -202,1 +199,1 @@\n-                return new Sink.ChainedLong<Long>(sink) {\n+                return new Sink.ChainedLong<>(sink) {\n@@ -235,1 +232,1 @@\n-        return new DoublePipeline.StatefulOp<Double>(upstream, StreamShape.DOUBLE_VALUE, TAKE_FLAGS) {\n+        return new DoublePipeline.StatefulOp<>(upstream, StreamShape.DOUBLE_VALUE, TAKE_FLAGS) {\n@@ -242,2 +239,1 @@\n-                }\n-                else {\n+                } else {\n@@ -259,1 +255,1 @@\n-                return new Sink.ChainedDouble<Double>(sink) {\n+                return new Sink.ChainedDouble<>(sink) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/WhileOps.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"}]}