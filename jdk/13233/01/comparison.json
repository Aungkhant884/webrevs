{"files":[{"patch":"@@ -177,6 +177,2 @@\n-            try {\n-                \/\/ invoke the target method handle via an invoker\n-                return invoker.invokeExact(target, obj, args);\n-            } catch (IllegalArgumentException e) {\n-                throw new InvocationTargetException(e);\n-            }\n+            \/\/ invoke the target method handle via an invoker\n+            return invoker.invokeExact(target, obj, args);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304585\n+ * @run junit CallerSensitiveMethodInvoke\n+ * @run junit\/othervm -Djdk.reflect.useDirectMethodHandle=false CallerSensitiveMethodInvoke\n+ * @summary Test Method::invoke that wraps exception in InvocationTargetException properly\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+public class CallerSensitiveMethodInvoke {\n+    private int value = 10;\n+\n+    private void m() throws Exception {\n+        throw new InvocationTargetException(new IllegalArgumentException(\"testing\"));\n+    }\n+\n+    \/**\n+     * Tests the Field::get method being invoked via Method::invoke which\n+     * should throw InvocationTargetException thrown by Field::get.\n+     *\/\n+    @Test\n+    public void csMethodInvoke() throws ReflectiveOperationException {\n+        Field f = CallerSensitiveMethodInvoke.class.getDeclaredField(\"value\");\n+        try {\n+            \/\/ Field::get throws IAE\n+            Method m = Field.class.getDeclaredMethod(\"get\", Object.class);\n+            m.invoke(f, new Object());  \/\/ illegal receiver type. IAE thrown\n+            fail(\"should not reach here\");\n+        } catch (InvocationTargetException e) {\n+            Throwable t = e.getCause();\n+            if (!(t instanceof IllegalArgumentException)) {\n+                throw new RuntimeException(\"Unexpected cause of InvocationTargetException: \" + t);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Tests the method being invoked throws InvocationTargetException which\n+     * will be wrapped with another InvocationTargetException by Method::invoke.\n+     *\/\n+    @Test\n+    public void methodInvoke() throws ReflectiveOperationException {\n+        try {\n+            \/\/ m() throws InvocationTargetException which will be wrapped by Method::invoke\n+            Method m = CallerSensitiveMethodInvoke.class.getDeclaredMethod(\"m\");\n+            m.invoke(new CallerSensitiveMethodInvoke());\n+            fail(\"should not reach here\");\n+        } catch (InvocationTargetException e) {\n+            Throwable t = e.getCause();\n+            if (!(t instanceof InvocationTargetException)) {\n+                throw new RuntimeException(\"Unexpected cause of InvocationTargetException: \" + t);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/CallerSensitiveMethodInvoke.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}