{"files":[{"patch":"@@ -164,4 +164,4 @@\n-  Thread* current = Thread::current_or_null_safe();\n-  assert(current != nullptr, \"cannot be called by a detached thread\");\n-  guarantee(current != this || JavaThread::cast(current)->is_oop_safe(),\n-            \"current cannot touch oops after its GC barrier is detached.\");\n+  \/\/ Ideally we would verify the current thread is oop_safe when this is called, but as we can\n+  \/\/ be called from a signal handler we would have to use Thread::current_or_null_safe(). That\n+  \/\/ has overhead and also interacts poorly with GetLastError on Windows due to the use of TLS.\n+  \/\/ Instead callers must verify oop safe access.\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1000,0 +1000,3 @@\n+    Thread* current = Thread::current();\n+    guarantee(current != thread || JavaThread::cast(thread)->is_oop_safe(),\n+              \"current cannot touch oops after its GC barrier is detached.\");\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8292302\n+ * @summary Test persistence of native last error value under jdb (Windows)\n+ * @requires (os.family == \"windows\")\n+ * @library \/test\/lib\n+ * @run compile --release 20 --enable-preview JdbLastErrorTest.java\n+ * @run main\/othervm --enable-preview JdbLastErrorTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import lib.jdb.JdbCommand;\n+import lib.jdb.JdbTest;\n+\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+\n+class TestNativeLastError {\n+\n+    static final int VALUE = 42;\n+\n+    public static void main(String[] args) throws Throwable {\n+        testWindows();\n+    }\n+\n+    private static void testWindows() throws Throwable {\n+        Linker linker = Linker.nativeLinker();\n+        System.loadLibrary(\"Kernel32\");\n+        SymbolLookup lookup = SymbolLookup.loaderLookup();\n+        MethodHandle getLastError = linker.downcallHandle(\n+            lookup.lookup(\"GetLastError\").orElseThrow(),\n+            FunctionDescriptor.of(ValueLayout.JAVA_INT));\n+        MethodHandle setLastError = linker.downcallHandle(\n+            lookup.lookup(\"SetLastError\").orElseThrow(),\n+            FunctionDescriptor.ofVoid(ValueLayout.JAVA_INT));\n+\n+        for (int i = 0; i < 10; i++) {\n+            setLastError.invoke(VALUE);\n+            int lastError = (int) getLastError.invoke();\n+            System.out.println(lastError);\n+            if (lastError != VALUE) {\n+                throw new RuntimeException(\"failed, lastError = \" + lastError);\n+            }\n+        }\n+    }\n+}\n+\n+public class JdbLastErrorTest extends JdbTest {\n+\n+    public static void main(String argv[]) {\n+        LaunchOptions lo = new LaunchOptions(DEBUGGEE_CLASS);\n+        lo.addVMOptions(\"--enable-preview\");\n+        new JdbLastErrorTest(lo).run();\n+    }\n+\n+    private JdbLastErrorTest(LaunchOptions launchOptions) {\n+        super(launchOptions);\n+    }\n+\n+    private static final String DEBUGGEE_CLASS = TestNativeLastError.class.getName();\n+\n+    @Override\n+    protected void runCases() {\n+        \/\/ Simply run app within jdb.\n+        \/\/ App should finish and exit, or report last error mismatch on failure.\n+        JdbCommand runCommand = JdbCommand.run();\n+        runCommand.allowExit();\n+        jdb.command(runCommand);\n+        new OutputAnalyzer(jdb.getJdbOutput()).shouldMatch(\"The application exited\");\n+        new OutputAnalyzer(jdb.getJdbOutput()).shouldNotMatch(\"failed, lastError = \");\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbLastErrorTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}