{"files":[{"patch":"@@ -1314,1 +1314,1 @@\n-void PerfMemory::detach(char* addr, size_t bytes, TRAPS) {\n+void PerfMemory::detach(char* addr, size_t bytes) {\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1826,1 +1826,1 @@\n-void PerfMemory::detach(char* addr, size_t bytes, TRAPS) {\n+void PerfMemory::detach(char* addr, size_t bytes) {\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-Handle java_lang_String::create_from_platform_dependent_str(const char* str, TRAPS) {\n+Handle java_lang_String::create_from_platform_dependent_str(JavaThread* current, const char* str) {\n@@ -418,4 +418,3 @@\n-    JavaThread* thread = THREAD->as_Java_thread();\n-    HandleMark hm(thread);\n-    ThreadToNativeFromVM ttn(thread);\n-    js = (_to_java_string_fn)(thread->jni_environment(), str);\n+    HandleMark hm(current);\n+    ThreadToNativeFromVM ttn(current);\n+    js = (_to_java_string_fn)(current->jni_environment(), str);\n@@ -424,1 +423,1 @@\n-  Handle native_platform_string(THREAD, JNIHandles::resolve(js));\n+  Handle native_platform_string(current, JNIHandles::resolve(js));\n@@ -431,1 +430,1 @@\n-char* java_lang_String::as_platform_dependent_str(Handle java_string, TRAPS) {\n+char* java_lang_String::as_platform_dependent_str(JavaThread* current, Handle java_string) {\n@@ -444,2 +443,2 @@\n-  { JavaThread* thread = THREAD->as_Java_thread();\n-    jstring js = (jstring) JNIHandles::make_local(thread, java_string());\n+  {\n+    jstring js = (jstring) JNIHandles::make_local(current, java_string());\n@@ -447,3 +446,3 @@\n-    HandleMark hm(thread);\n-    ThreadToNativeFromVM ttn(thread);\n-    JNIEnv *env = thread->jni_environment();\n+    HandleMark hm(current);\n+    ThreadToNativeFromVM ttn(current);\n+    JNIEnv *env = current->jni_environment();\n@@ -971,1 +970,1 @@\n-void java_lang_Class::set_mirror_module_field(Klass* k, Handle mirror, Handle module, TRAPS) {\n+void java_lang_Class::set_mirror_module_field(JavaThread* current, Klass* k, Handle mirror, Handle module) {\n@@ -980,1 +979,1 @@\n-      MutexLocker m1(THREAD, Module_lock);\n+      MutexLocker m1(current, Module_lock);\n@@ -997,1 +996,1 @@\n-      Handle javabase_handle(THREAD, javabase_entry->module());\n+      Handle javabase_handle(current, javabase_entry->module());\n@@ -1090,1 +1089,1 @@\n-    set_mirror_module_field(k, mirror, module, THREAD);\n+    set_mirror_module_field(THREAD->as_Java_thread(), k, mirror, module);\n@@ -1397,1 +1396,1 @@\n-  set_mirror_module_field(k, mirror, module, THREAD);\n+  set_mirror_module_field(THREAD->as_Java_thread(), k, mirror, module);\n@@ -2884,1 +2883,1 @@\n-  MethodHandles::init_method_MemberName(mname, info, THREAD);\n+  MethodHandles::init_method_MemberName(mname, info);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  static Handle create_from_platform_dependent_str(const char* str, TRAPS);\n+  static Handle create_from_platform_dependent_str(JavaThread* current, const char* str);\n@@ -158,1 +158,1 @@\n-  static char*  as_platform_dependent_str(Handle java_string, TRAPS);\n+  static char*  as_platform_dependent_str(JavaThread* current, Handle java_string);\n@@ -264,1 +264,1 @@\n-  static void set_mirror_module_field(Klass* K, Handle mirror, Handle module, TRAPS);\n+  static void set_mirror_module_field(JavaThread* current, Klass* K, Handle mirror, Handle module);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,2 @@\n-static ClassFileStream* check_class_file_load_hook(ClassFileStream* stream,\n+static ClassFileStream* check_class_file_load_hook(JavaThread* current,\n+                                                   ClassFileStream* stream,\n@@ -116,2 +117,1 @@\n-                                                   JvmtiCachedClassFileData** cached_class_file,\n-                                                   TRAPS) {\n+                                                   JvmtiCachedClassFileData** cached_class_file) {\n@@ -122,3 +122,1 @@\n-    const JavaThread* jt = THREAD->as_Java_thread();\n-\n-    Handle class_loader(THREAD, loader_data->class_loader());\n+    Handle class_loader(current, loader_data->class_loader());\n@@ -128,1 +126,1 @@\n-    \/\/ instead of JvmtiThreadState::state_for(jt) so we don't allocate\n+    \/\/ instead of JvmtiThreadState::state_for(current) so we don't allocate\n@@ -132,1 +130,1 @@\n-    JvmtiThreadState* state = jt->jvmti_thread_state();\n+    JvmtiThreadState* state = current->jvmti_thread_state();\n@@ -191,1 +189,2 @@\n-    stream = check_class_file_load_hook(stream,\n+    stream = check_class_file_load_hook(THREAD->as_Java_thread(),\n+                                        stream,\n@@ -195,2 +194,1 @@\n-                                        &cached_class_file,\n-                                        CHECK_NULL);\n+                                        &cached_class_file);\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1217,1 +1217,1 @@\n-  load_shared_class_misc(ik, loader_data, CHECK_NULL);\n+  load_shared_class_misc(ik, loader_data);\n@@ -1221,1 +1221,1 @@\n-void SystemDictionary::load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data, TRAPS) {\n+void SystemDictionary::load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data) {\n@@ -1243,1 +1243,1 @@\n-        ResourceMark rm(THREAD);\n+        ResourceMark rm;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  static void load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data, TRAPS) NOT_CDS_RETURN;\n+  static void load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  SystemDictionary::load_shared_class_misc(klass, loader_data, CHECK);\n+  SystemDictionary::load_shared_class_misc(klass, loader_data);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-void vmSymbols::initialize(TRAPS) {\n+void vmSymbols::initialize() {\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -772,1 +772,1 @@\n-  static void initialize(TRAPS);\n+  static void initialize();\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,9 +160,0 @@\n-Handle Bytecode_invoke::appendix(TRAPS) {\n-  ConstantPoolCacheEntry* cpce = cpcache_entry();\n-  if (cpce->has_appendix()) {\n-    constantPoolHandle cp(THREAD, constants());\n-    return Handle(THREAD, cpce->appendix_if_resolved(cp));\n-  }\n-  return Handle();  \/\/ usual case\n-}\n-\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,0 @@\n-  Handle       appendix(TRAPS);                  \/\/ if CPCE::has_appendix (from constant pool)\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-        MethodHandles::lookup_basic_type_signature(full_signature, keep_last_arg, CHECK_NULL);\n+        MethodHandles::lookup_basic_type_signature(full_signature, keep_last_arg);\n@@ -522,1 +522,1 @@\n-          MethodHandles::lookup_basic_type_signature(full_signature, CHECK_NULL);\n+          MethodHandles::lookup_basic_type_signature(full_signature);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    vmSymbols::initialize(CHECK);\n+    vmSymbols::initialize();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1081,1 +1081,1 @@\n-    ResourceMark rm;\n+    ResourceMark rm(THREAD);\n@@ -1105,1 +1105,1 @@\n-    ResourceMark rm;\n+    ResourceMark rm(THREAD);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -302,2 +302,2 @@\n-  Handle key_str    = java_lang_String::create_from_platform_dependent_str(key, CHECK);\n-  Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK);\n+  Handle key_str    = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), key);\n+  Handle value_str  = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), (value != NULL ? value : \"\"));\n@@ -325,0 +325,1 @@\n+  JavaThread* current = THREAD->as_Java_thread();\n@@ -340,2 +341,2 @@\n-        Handle key_str    = java_lang_String::create_from_platform_dependent_str(key, CHECK_NULL);\n-        Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK_NULL);\n+        Handle key_str    = java_lang_String::create_from_platform_dependent_str(current, key);\n+        Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, (value != NULL ? value : \"\"));\n@@ -357,2 +358,2 @@\n-    Handle key_str = java_lang_String::create_from_platform_dependent_str(\"sun.nio.MaxDirectMemorySize\", CHECK_NULL);\n-    Handle value_str  = java_lang_String::create_from_platform_dependent_str(as_chars, CHECK_NULL);\n+    Handle key_str = java_lang_String::create_from_platform_dependent_str(current, \"sun.nio.MaxDirectMemorySize\");\n+    Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, as_chars);\n@@ -390,2 +391,2 @@\n-      Handle key_str = java_lang_String::create_from_platform_dependent_str(\"sun.management.compiler\", CHECK_NULL);\n-      Handle value_str  = java_lang_String::create_from_platform_dependent_str(compiler_name, CHECK_NULL);\n+      Handle key_str = java_lang_String::create_from_platform_dependent_str(current, \"sun.management.compiler\");\n+      Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, compiler_name);\n@@ -413,1 +414,1 @@\n-  Handle h = java_lang_String::create_from_platform_dependent_str(temp_dir, CHECK_NULL);\n+  Handle h = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), temp_dir);\n@@ -1505,1 +1506,1 @@\n-static bool jvm_get_field_common(jobject field, fieldDescriptor& fd, TRAPS) {\n+static bool jvm_get_field_common(jobject field, fieldDescriptor& fd) {\n@@ -1596,1 +1597,1 @@\n-  bool gotFd = jvm_get_field_common(field, fd, CHECK_NULL);\n+  bool gotFd = jvm_get_field_common(field, fd);\n@@ -3847,0 +3848,1 @@\n+  JavaThread* current = THREAD->as_Java_thread();\n@@ -3848,1 +3850,1 @@\n-    Handle h = java_lang_String::create_from_platform_dependent_str(vm_flags[j], CHECK_NULL);\n+    Handle h = java_lang_String::create_from_platform_dependent_str(current, vm_flags[j]);\n@@ -3852,1 +3854,1 @@\n-    Handle h = java_lang_String::create_from_platform_dependent_str(vm_args[i], CHECK_NULL);\n+    Handle h = java_lang_String::create_from_platform_dependent_str(current, vm_args[i]);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-    Handle path = java_lang_String::create_from_platform_dependent_str(segment, THREAD);\n+    Handle path = java_lang_String::create_from_platform_dependent_str(THREAD, segment);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-      return init_method_MemberName(mname, info, THREAD);\n+      return init_method_MemberName(mname, info);\n@@ -227,1 +227,1 @@\n-      return init_method_MemberName(mname, info, THREAD);\n+      return init_method_MemberName(mname, info);\n@@ -233,1 +233,1 @@\n-oop MethodHandles::init_method_MemberName(Handle mname, CallInfo& info, TRAPS) {\n+oop MethodHandles::init_method_MemberName(Handle mname, CallInfo& info) {\n@@ -577,1 +577,1 @@\n-Symbol* MethodHandles::lookup_basic_type_signature(Symbol* sig, bool keep_last_arg, TRAPS) {\n+Symbol* MethodHandles::lookup_basic_type_signature(Symbol* sig, bool keep_last_arg) {\n@@ -804,1 +804,1 @@\n-      oop mname2 = init_method_MemberName(mname, result, THREAD);\n+      oop mname2 = init_method_MemberName(mname, result);\n@@ -827,1 +827,1 @@\n-      oop mname2 = init_method_MemberName(mname, result, THREAD);\n+      oop mname2 = init_method_MemberName(mname, result);\n@@ -1028,1 +1028,1 @@\n-        oop saved = MethodHandles::init_method_MemberName(result, info, THREAD);\n+        oop saved = MethodHandles::init_method_MemberName(result, info);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  static oop init_method_MemberName(Handle mname_h, CallInfo& info, TRAPS);\n+  static oop init_method_MemberName(Handle mname_h, CallInfo& info);\n@@ -155,3 +155,3 @@\n-  static Symbol* lookup_basic_type_signature(Symbol* sig, bool keep_last_arg, TRAPS);  \/\/ use TempNewSymbol\n-  static Symbol* lookup_basic_type_signature(Symbol* sig, TRAPS) {\n-    return lookup_basic_type_signature(sig, false, THREAD);\n+  static Symbol* lookup_basic_type_signature(Symbol* sig, bool keep_last_arg);  \/\/ use TempNewSymbol\n+  static Symbol* lookup_basic_type_signature(Symbol* sig) {\n+    return lookup_basic_type_signature(sig, false);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-  PerfMemory::detach((char*)address, capacity, CHECK);\n+  PerfMemory::detach((char*)address, capacity);\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -732,3 +732,1 @@\n-void BiasedLocking::revoke_own_lock(Handle obj, TRAPS) {\n-  JavaThread* thread = THREAD->as_Java_thread();\n-\n+void BiasedLocking::revoke_own_lock(JavaThread* current, Handle obj) {\n@@ -742,1 +740,1 @@\n-  assert(mark.biased_locker() == thread &&\n+  assert(mark.biased_locker() == current &&\n@@ -744,1 +742,1 @@\n-  ResourceMark rm;\n+  ResourceMark rm(current);\n@@ -747,2 +745,2 @@\n-  BiasedLocking::walk_stack_and_revoke(obj(), thread);\n-  thread->set_cached_monitor_info(NULL);\n+  BiasedLocking::walk_stack_and_revoke(obj(), current);\n+  current->set_cached_monitor_info(NULL);\n@@ -755,1 +753,1 @@\n-void BiasedLocking::revoke(Handle obj, TRAPS) {\n+void BiasedLocking::revoke(JavaThread* current, Handle obj) {\n@@ -820,1 +818,1 @@\n-      if (blt == THREAD) {\n+      if (blt == current) {\n@@ -828,1 +826,1 @@\n-        ResourceMark rm;\n+        ResourceMark rm(current);\n@@ -837,1 +835,1 @@\n-        BiasedLocking::Condition cond = single_revoke_with_handshake(obj, THREAD->as_Java_thread(), blt);\n+        BiasedLocking::Condition cond = single_revoke_with_handshake(obj, current, blt);\n@@ -846,2 +844,1 @@\n-      VM_BulkRevokeBias bulk_revoke(&obj, THREAD->as_Java_thread(),\n-                                    (heuristics == HR_BULK_REBIAS));\n+      VM_BulkRevokeBias bulk_revoke(&obj, current, (heuristics == HR_BULK_REBIAS));\n","filename":"src\/hotspot\/share\/runtime\/biasedLocking.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,1 @@\n-  static void revoke(Handle obj, TRAPS);\n+  static void revoke(JavaThread* current, Handle obj);\n@@ -194,1 +194,1 @@\n-  static void revoke_own_lock(Handle obj, TRAPS);\n+  static void revoke_own_lock(JavaThread* current, Handle obj);\n","filename":"src\/hotspot\/share\/runtime\/biasedLocking.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1657,1 +1657,1 @@\n-    BiasedLocking::revoke_own_lock(objects_to_revoke->at(i), thread);\n+    BiasedLocking::revoke_own_lock(thread, objects_to_revoke->at(i));\n@@ -1690,1 +1690,1 @@\n-    BiasedLocking::revoke(objects_to_revoke->at(i), thread);\n+    BiasedLocking::revoke(thread, objects_to_revoke->at(i));\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,1 @@\n-    static void detach(char* addr, size_t bytes, TRAPS);\n+    static void detach(char* addr, size_t bytes);\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -955,1 +955,1 @@\n-static BasicType basic_type_mirror_to_basic_type(oop basic_type_mirror, TRAPS) {\n+static BasicType basic_type_mirror_to_basic_type(oop basic_type_mirror) {\n@@ -1107,1 +1107,1 @@\n-      BasicType ptype = basic_type_mirror_to_basic_type(type_mirror, CHECK_NULL);\n+      BasicType ptype = basic_type_mirror_to_basic_type(type_mirror);\n@@ -1179,1 +1179,1 @@\n-    rtype = basic_type_mirror_to_basic_type(return_type_mirror, CHECK_NULL);\n+    rtype = basic_type_mirror_to_basic_type(return_type_mirror);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-void ResolvingSignatureStream::cache_handles(TRAPS) {\n+void ResolvingSignatureStream::cache_handles() {\n@@ -461,2 +461,3 @@\n-  _class_loader = Handle(THREAD, _load_origin->class_loader());\n-  _protection_domain = Handle(THREAD, _load_origin->protection_domain());\n+  JavaThread* current = JavaThread::current();\n+  _class_loader = Handle(current, _load_origin->class_loader());\n+  _protection_domain = Handle(current, _load_origin->protection_domain());\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -582,1 +582,1 @@\n-  void need_handles(TRAPS) {\n+  void need_handles() {\n@@ -584,1 +584,1 @@\n-      cache_handles(THREAD);\n+      cache_handles();\n@@ -588,1 +588,1 @@\n-  void cache_handles(TRAPS);\n+  void cache_handles();\n@@ -596,3 +596,3 @@\n-  Klass* load_origin()            { return _load_origin; }\n-  Handle class_loader(TRAPS)      { need_handles(THREAD); return _class_loader; }\n-  Handle protection_domain(TRAPS) { need_handles(THREAD); return _protection_domain; }\n+  Klass* load_origin()       { return _load_origin; }\n+  Handle class_loader()      { need_handles(); return _class_loader; }\n+  Handle protection_domain() { need_handles(); return _protection_domain; }\n@@ -602,1 +602,1 @@\n-    need_handles(THREAD);\n+    need_handles();\n@@ -608,1 +608,1 @@\n-      need_handles(THREAD);\n+      need_handles();\n","filename":"src\/hotspot\/share\/runtime\/signature.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-      BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -538,1 +538,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -552,1 +552,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -578,1 +578,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -599,1 +599,1 @@\n-    BiasedLocking::revoke(h_obj, current);\n+    BiasedLocking::revoke(current, h_obj);\n@@ -641,1 +641,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -667,1 +667,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -680,1 +680,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -699,1 +699,1 @@\n-    BiasedLocking::revoke(obj, current);\n+    BiasedLocking::revoke(current, obj);\n@@ -861,1 +861,1 @@\n-        BiasedLocking::revoke(hobj, current);\n+        BiasedLocking::revoke(current->as_Java_thread(), hobj);\n@@ -988,1 +988,1 @@\n-    BiasedLocking::revoke(h_obj, current);\n+    BiasedLocking::revoke(current, h_obj);\n@@ -1019,1 +1019,1 @@\n-      BiasedLocking::revoke(h_obj, JavaThread::current());\n+      BiasedLocking::revoke(JavaThread::current(), h_obj);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1922,1 +1922,1 @@\n-  char* name = java_lang_String::as_platform_dependent_str(onhandle, CHECK_(-1));\n+  char* name = java_lang_String::as_platform_dependent_str(THREAD->as_Java_thread(), onhandle);\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-      msg = java_lang_String::create_from_platform_dependent_str(message, thread);\n+      msg = java_lang_String::create_from_platform_dependent_str(thread->as_Java_thread(), message);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}