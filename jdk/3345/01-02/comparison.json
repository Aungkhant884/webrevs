{"files":[{"patch":"@@ -396,1 +396,1 @@\n-Handle java_lang_String::create_from_platform_dependent_str(JavaThread* current, const char* str) {\n+Handle java_lang_String::create_from_platform_dependent_str(const char* str, TRAPS) {\n@@ -418,3 +418,4 @@\n-    HandleMark hm(current);\n-    ThreadToNativeFromVM ttn(current);\n-    js = (_to_java_string_fn)(current->jni_environment(), str);\n+    JavaThread* thread = THREAD->as_Java_thread();\n+    HandleMark hm(thread);\n+    ThreadToNativeFromVM ttn(thread);\n+    js = (_to_java_string_fn)(thread->jni_environment(), str);\n@@ -423,1 +424,1 @@\n-  Handle native_platform_string(current, JNIHandles::resolve(js));\n+  Handle native_platform_string(THREAD, JNIHandles::resolve(js));\n@@ -430,1 +431,1 @@\n-char* java_lang_String::as_platform_dependent_str(JavaThread* current, Handle java_string) {\n+char* java_lang_String::as_platform_dependent_str(Handle java_string, TRAPS) {\n@@ -443,2 +444,2 @@\n-  {\n-    jstring js = (jstring) JNIHandles::make_local(current, java_string());\n+  { JavaThread* thread = THREAD->as_Java_thread();\n+    jstring js = (jstring) JNIHandles::make_local(thread, java_string());\n@@ -446,3 +447,3 @@\n-    HandleMark hm(current);\n-    ThreadToNativeFromVM ttn(current);\n-    JNIEnv *env = current->jni_environment();\n+    HandleMark hm(thread);\n+    ThreadToNativeFromVM ttn(thread);\n+    JNIEnv *env = thread->jni_environment();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  static Handle create_from_platform_dependent_str(JavaThread* current, const char* str);\n+  static Handle create_from_platform_dependent_str(const char* str, TRAPS);\n@@ -158,1 +158,1 @@\n-  static char*  as_platform_dependent_str(JavaThread* current, Handle java_string);\n+  static char*  as_platform_dependent_str(Handle java_string, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,2 +112,1 @@\n-static ClassFileStream* check_class_file_load_hook(JavaThread* current,\n-                                                   ClassFileStream* stream,\n+static ClassFileStream* check_class_file_load_hook(ClassFileStream* stream,\n@@ -117,1 +116,2 @@\n-                                                   JvmtiCachedClassFileData** cached_class_file) {\n+                                                   JvmtiCachedClassFileData** cached_class_file,\n+                                                   TRAPS) {\n@@ -122,1 +122,3 @@\n-    Handle class_loader(current, loader_data->class_loader());\n+    const JavaThread* jt = THREAD->as_Java_thread();\n+\n+    Handle class_loader(THREAD, loader_data->class_loader());\n@@ -126,1 +128,1 @@\n-    \/\/ instead of JvmtiThreadState::state_for(current) so we don't allocate\n+    \/\/ instead of JvmtiThreadState::state_for(jt) so we don't allocate\n@@ -130,1 +132,1 @@\n-    JvmtiThreadState* state = current->jvmti_thread_state();\n+    JvmtiThreadState* state = jt->jvmti_thread_state();\n@@ -189,2 +191,1 @@\n-    stream = check_class_file_load_hook(THREAD->as_Java_thread(),\n-                                        stream,\n+    stream = check_class_file_load_hook(stream,\n@@ -194,1 +195,2 @@\n-                                        &cached_class_file);\n+                                        &cached_class_file,\n+                                        CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -302,2 +302,2 @@\n-  Handle key_str    = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), key);\n-  Handle value_str  = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), (value != NULL ? value : \"\"));\n+  Handle key_str    = java_lang_String::create_from_platform_dependent_str(key, CHECK);\n+  Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK);\n@@ -325,1 +325,0 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n@@ -341,2 +340,2 @@\n-        Handle key_str    = java_lang_String::create_from_platform_dependent_str(current, key);\n-        Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, (value != NULL ? value : \"\"));\n+        Handle key_str    = java_lang_String::create_from_platform_dependent_str(key, CHECK_NULL);\n+        Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK_NULL);\n@@ -358,2 +357,2 @@\n-    Handle key_str = java_lang_String::create_from_platform_dependent_str(current, \"sun.nio.MaxDirectMemorySize\");\n-    Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, as_chars);\n+    Handle key_str = java_lang_String::create_from_platform_dependent_str(\"sun.nio.MaxDirectMemorySize\", CHECK_NULL);\n+    Handle value_str  = java_lang_String::create_from_platform_dependent_str(as_chars, CHECK_NULL);\n@@ -391,2 +390,2 @@\n-      Handle key_str = java_lang_String::create_from_platform_dependent_str(current, \"sun.management.compiler\");\n-      Handle value_str  = java_lang_String::create_from_platform_dependent_str(current, compiler_name);\n+      Handle key_str = java_lang_String::create_from_platform_dependent_str(\"sun.management.compiler\", CHECK_NULL);\n+      Handle value_str  = java_lang_String::create_from_platform_dependent_str(compiler_name, CHECK_NULL);\n@@ -414,1 +413,1 @@\n-  Handle h = java_lang_String::create_from_platform_dependent_str(THREAD->as_Java_thread(), temp_dir);\n+  Handle h = java_lang_String::create_from_platform_dependent_str(temp_dir, CHECK_NULL);\n@@ -3850,1 +3849,1 @@\n-    Handle h = java_lang_String::create_from_platform_dependent_str(current, vm_flags[j]);\n+    Handle h = java_lang_String::create_from_platform_dependent_str(vm_flags[j], CHECK_NULL);\n@@ -3854,1 +3853,1 @@\n-    Handle h = java_lang_String::create_from_platform_dependent_str(current, vm_args[i]);\n+    Handle h = java_lang_String::create_from_platform_dependent_str(vm_args[i], CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-    Handle path = java_lang_String::create_from_platform_dependent_str(THREAD, segment);\n+    Handle path = java_lang_String::create_from_platform_dependent_str(segment, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1922,1 +1922,1 @@\n-  char* name = java_lang_String::as_platform_dependent_str(THREAD->as_Java_thread(), onhandle);\n+  char* name = java_lang_String::as_platform_dependent_str(onhandle, CHECK_(-1));\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-      msg = java_lang_String::create_from_platform_dependent_str(thread->as_Java_thread(), message);\n+      msg = java_lang_String::create_from_platform_dependent_str(message, thread);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}