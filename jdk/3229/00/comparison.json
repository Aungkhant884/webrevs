{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.util.Map;\n-import java.util.Iterator;\n@@ -144,1 +142,1 @@\n-            context.setBindings(bindings, ScriptContext.GLOBAL_SCOPE);;\n+            context.setBindings(bindings, ScriptContext.GLOBAL_SCOPE);\n@@ -146,1 +144,1 @@\n-            context.setBindings(bindings, ScriptContext.ENGINE_SCOPE);;\n+            context.setBindings(bindings, ScriptContext.ENGINE_SCOPE);\n","filename":"src\/java.scripting\/share\/classes\/javax\/script\/AbstractScriptEngine.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n@@ -61,2 +63,1 @@\n-        ClassLoader ctxtLoader = Thread.currentThread().getContextClassLoader();\n-        init(ctxtLoader);\n+        this(Thread.currentThread().getContextClassLoader());\n@@ -75,12 +76,0 @@\n-        init(loader);\n-    }\n-\n-    private void init(final ClassLoader loader) {\n-        globalScope = new SimpleBindings();\n-        engineSpis = new TreeSet<ScriptEngineFactory>(Comparator.comparing(\n-            ScriptEngineFactory::getEngineName,\n-            Comparator.nullsLast(Comparator.naturalOrder()))\n-        );\n-        nameAssociations = new HashMap<String, ScriptEngineFactory>();\n-        extensionAssociations = new HashMap<String, ScriptEngineFactory>();\n-        mimeTypeAssociations = new HashMap<String, ScriptEngineFactory>();\n@@ -99,1 +88,1 @@\n-        Iterator<ScriptEngineFactory> itr = null;\n+        Iterator<ScriptEngineFactory> itr;\n@@ -101,8 +90,2 @@\n-            ServiceLoader<ScriptEngineFactory> sl = AccessController.doPrivileged(\n-                new PrivilegedAction<ServiceLoader<ScriptEngineFactory>>() {\n-                    @Override\n-                    public ServiceLoader<ScriptEngineFactory> run() {\n-                        return getServiceLoader(loader);\n-                    }\n-                });\n-\n+            var sl = AccessController.doPrivileged(\n+                (PrivilegedAction<ServiceLoader<ScriptEngineFactory>>)() -> getServiceLoader(loader));\n@@ -111,5 +94,1 @@\n-            System.err.println(\"Can't find ScriptEngineFactory providers: \" +\n-                          err.getMessage());\n-            if (DEBUG) {\n-                err.printStackTrace();\n-            }\n+            reportException(\"Can't find ScriptEngineFactory providers: \", err);\n@@ -128,5 +107,1 @@\n-                    System.err.println(\"ScriptEngineManager providers.next(): \"\n-                                 + err.getMessage());\n-                    if (DEBUG) {\n-                        err.printStackTrace();\n-                    }\n+                    reportException(\"ScriptEngineManager providers.next(): \", err);\n@@ -134,1 +109,0 @@\n-                    continue;\n@@ -138,5 +112,1 @@\n-            System.err.println(\"ScriptEngineManager providers.hasNext(): \"\n-                            + err.getMessage());\n-            if (DEBUG) {\n-                err.printStackTrace();\n-            }\n+            reportException(\"ScriptEngineManager providers.hasNext(): \", err);\n@@ -146,1 +116,0 @@\n-            return;\n@@ -215,38 +184,1 @@\n-        if (shortName == null) throw new NullPointerException();\n-        \/\/look for registered name first\n-        Object obj;\n-        if (null != (obj = nameAssociations.get(shortName))) {\n-            ScriptEngineFactory spi = (ScriptEngineFactory)obj;\n-            try {\n-                ScriptEngine engine = spi.getScriptEngine();\n-                engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                return engine;\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-        }\n-\n-        for (ScriptEngineFactory spi : engineSpis) {\n-            List<String> names = null;\n-            try {\n-                names = spi.getNames();\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-\n-            if (names != null) {\n-                for (String name : names) {\n-                    if (shortName.equals(name)) {\n-                        try {\n-                            ScriptEngine engine = spi.getScriptEngine();\n-                            engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                            return engine;\n-                        } catch (Exception exp) {\n-                            if (DEBUG) exp.printStackTrace();\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        return null;\n+        return getEngineBy(shortName, nameAssociations, ScriptEngineFactory::getNames);\n@@ -266,35 +198,1 @@\n-        if (extension == null) throw new NullPointerException();\n-        \/\/look for registered extension first\n-        Object obj;\n-        if (null != (obj = extensionAssociations.get(extension))) {\n-            ScriptEngineFactory spi = (ScriptEngineFactory)obj;\n-            try {\n-                ScriptEngine engine = spi.getScriptEngine();\n-                engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                return engine;\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-        }\n-\n-        for (ScriptEngineFactory spi : engineSpis) {\n-            List<String> exts = null;\n-            try {\n-                exts = spi.getExtensions();\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-            if (exts == null) continue;\n-            for (String ext : exts) {\n-                if (extension.equals(ext)) {\n-                    try {\n-                        ScriptEngine engine = spi.getScriptEngine();\n-                        engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                        return engine;\n-                    } catch (Exception exp) {\n-                        if (DEBUG) exp.printStackTrace();\n-                    }\n-                }\n-            }\n-        }\n-        return null;\n+        return getEngineBy(extension, extensionAssociations, ScriptEngineFactory::getExtensions);\n@@ -314,13 +212,2 @@\n-        if (mimeType == null) throw new NullPointerException();\n-        \/\/look for registered types first\n-        Object obj;\n-        if (null != (obj = mimeTypeAssociations.get(mimeType))) {\n-            ScriptEngineFactory spi = (ScriptEngineFactory)obj;\n-            try {\n-                ScriptEngine engine = spi.getScriptEngine();\n-                engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                return engine;\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-        }\n+        return getEngineBy(mimeType, mimeTypeAssociations, ScriptEngineFactory::getMimeTypes);\n+    }\n@@ -328,17 +215,13 @@\n-        for (ScriptEngineFactory spi : engineSpis) {\n-            List<String> types = null;\n-            try {\n-                types = spi.getMimeTypes();\n-            } catch (Exception exp) {\n-                if (DEBUG) exp.printStackTrace();\n-            }\n-            if (types == null) continue;\n-            for (String type : types) {\n-                if (mimeType.equals(type)) {\n-                    try {\n-                        ScriptEngine engine = spi.getScriptEngine();\n-                        engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n-                        return engine;\n-                    } catch (Exception exp) {\n-                        if (DEBUG) exp.printStackTrace();\n-                    }\n+    private ScriptEngine getEngineBy(String selector, Map<String, ScriptEngineFactory> associations, Function<ScriptEngineFactory, List<String>> valuesFn) {\n+        Objects.requireNonNull(selector);\n+        Stream<ScriptEngineFactory> spis = Stream.concat(\n+            \/\/look for registered types first\n+            Stream.ofNullable(associations.get(selector)),\n+\n+            engineSpis.stream().filter(spi -> {\n+                try {\n+                    List<String> matches = valuesFn.apply(spi);\n+                    return matches != null && matches.contains(selector);\n+                } catch (Exception exp) {\n+                    debugPrint(exp);\n+                    return false;\n@@ -346,1 +229,26 @@\n-            }\n+            })\n+        );\n+        return spis\n+            .map(spi -> {\n+                try {\n+                    ScriptEngine engine = spi.getScriptEngine();\n+                    engine.setBindings(getBindings(), ScriptContext.GLOBAL_SCOPE);\n+                    return engine;\n+                } catch (Exception exp) {\n+                    debugPrint(exp);\n+                    return null;\n+                }\n+            })\n+            .filter(Objects::nonNull)\n+            .findFirst()\n+            .orElse(null);\n+    }\n+\n+    private static void reportException(String msg, Throwable exp) {\n+        System.err.println(msg + exp.getMessage());\n+        debugPrint(exp);\n+    }\n+\n+    private static void debugPrint(Throwable exp) {\n+        if (DEBUG) {\n+            exp.printStackTrace();\n@@ -348,1 +256,0 @@\n-        return null;\n@@ -357,5 +264,1 @@\n-        List<ScriptEngineFactory> res = new ArrayList<ScriptEngineFactory>(engineSpis.size());\n-        for (ScriptEngineFactory spi : engineSpis) {\n-            res.add(spi);\n-        }\n-        return Collections.unmodifiableList(res);\n+        return List.copyOf(engineSpis);\n@@ -372,2 +275,1 @@\n-        if (name == null || factory == null) throw new NullPointerException();\n-        nameAssociations.put(name, factory);\n+        associateFactory(nameAssociations, name, factory);\n@@ -387,2 +289,1 @@\n-        if (type == null || factory == null) throw new NullPointerException();\n-        mimeTypeAssociations.put(type, factory);\n+        associateFactory(mimeTypeAssociations, type, factory);\n@@ -401,2 +302,1 @@\n-        if (extension == null || factory == null) throw new NullPointerException();\n-        extensionAssociations.put(extension, factory);\n+        associateFactory(extensionAssociations, extension, factory);\n@@ -405,0 +305,10 @@\n+    private static void associateFactory(Map<String, ScriptEngineFactory> associations, String association, ScriptEngineFactory factory) {\n+        if (association == null || factory == null) throw new NullPointerException();\n+        associations.put(association, factory);\n+    }\n+\n+    private static final Comparator<ScriptEngineFactory> COMPARATOR = Comparator.comparing(\n+        ScriptEngineFactory::getEngineName,\n+        Comparator.nullsLast(Comparator.naturalOrder())\n+    );\n+\n@@ -406,1 +316,1 @@\n-    private TreeSet<ScriptEngineFactory> engineSpis;\n+    private final TreeSet<ScriptEngineFactory> engineSpis = new TreeSet<>(COMPARATOR);\n@@ -409,1 +319,1 @@\n-    private HashMap<String, ScriptEngineFactory> nameAssociations;\n+    private final HashMap<String, ScriptEngineFactory> nameAssociations = new HashMap<>();\n@@ -412,1 +322,1 @@\n-    private HashMap<String, ScriptEngineFactory> extensionAssociations;\n+    private final HashMap<String, ScriptEngineFactory> extensionAssociations = new HashMap<>();\n@@ -415,1 +325,1 @@\n-    private HashMap<String, ScriptEngineFactory> mimeTypeAssociations;\n+    private final HashMap<String, ScriptEngineFactory> mimeTypeAssociations = new HashMap<>();\n@@ -418,1 +328,1 @@\n-    private Bindings globalScope;\n+    private Bindings globalScope = new SimpleBindings();\n","filename":"src\/java.scripting\/share\/classes\/javax\/script\/ScriptEngineManager.java","additions":71,"deletions":161,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n-    private String fileName;\n-    private int lineNumber;\n-    private int columnNumber;\n+    private final String fileName;\n+    private final int lineNumber;\n+    private final int columnNumber;\n","filename":"src\/java.scripting\/share\/classes\/javax\/script\/ScriptException.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -45,1 +46,1 @@\n-    private Map<String,Object> map;\n+    private final Map<String,Object> map;\n@@ -53,4 +54,1 @@\n-        if (m == null) {\n-            throw new NullPointerException();\n-        }\n-        this.map = m;\n+        this.map = Objects.requireNonNull(m);\n@@ -63,1 +61,1 @@\n-        this(new HashMap<String,Object>());\n+        this(new HashMap<>());\n@@ -94,3 +92,1 @@\n-        if (toMerge == null) {\n-            throw new NullPointerException(\"toMerge map is null\");\n-        }\n+        Objects.requireNonNull(toMerge, \"toMerge map is null\");\n@@ -214,3 +210,1 @@\n-        if (key == null) {\n-            throw new NullPointerException(\"key can not be null\");\n-        }\n+        Objects.requireNonNull(key, \"key can not be null\");\n","filename":"src\/java.scripting\/share\/classes\/javax\/script\/SimpleBindings.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -341,7 +341,1 @@\n-    private static List<Integer> scopes;\n-    static {\n-        scopes = new ArrayList<Integer>(2);\n-        scopes.add(ENGINE_SCOPE);\n-        scopes.add(GLOBAL_SCOPE);\n-        scopes = Collections.unmodifiableList(scopes);\n-    }\n+    private static final List<Integer> scopes = List.of(ENGINE_SCOPE, GLOBAL_SCOPE);\n","filename":"src\/java.scripting\/share\/classes\/javax\/script\/SimpleScriptContext.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}