{"files":[{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7093691\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @summary Tests if Nimbus JComboBox has correct font\n- * @run main\/manual DisabledComboBoxFontTest\n- *\/\n-\n-import java.awt.FlowLayout;\n-import java.awt.event.ActionListener;\n-import java.lang.reflect.InvocationTargetException;\n-\n-import javax.swing.DefaultListCellRenderer;\n-import javax.swing.JButton;\n-import javax.swing.JComboBox;\n-import javax.swing.JFrame;\n-import javax.swing.JList;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-\n-public class DisabledComboBoxFontTest {\n-    private static final String instructionsText = \"Pass if you can see two \" +\n-            \"editable JComboBoxes and two JLists displayed correctly when \" +\n-            \"enabled and disabled. Fail if they don't. Toggle UI enabled \" +\n-            \"status with the button on the right of the frame.\";\n-\n-    private static JFrame frame;\n-\n-    public static void createAndShowGUI() throws InterruptedException,\n-            InvocationTargetException {\n-        SwingUtilities.invokeAndWait(() -> {\n-\n-            JComboBox combo = new JComboBox();\n-            combo.addItem(\"Simple JComboBox\");\n-            combo.addItem(\"Simple JComboBox2\");\n-            combo.setEnabled(false);\n-\n-            JComboBox customCombo = new JComboBox();\n-            customCombo.setRenderer(new DefaultListCellRenderer());\n-            customCombo.addItem(\"JComboBox with DefaultListCellRenderer\");\n-            customCombo.addItem(\"JComboBox with DefaultListCellRenderer2\");\n-            customCombo.setEnabled(false);\n-\n-            String[] s = {\"one\", \"two\", \"three\"};\n-            JList list = new JList(s);\n-            list.setEnabled(false);\n-            JList list2 = new JList(s);\n-            list2.setCellRenderer(new DefaultListCellRenderer());\n-            list2.setEnabled(false);\n-\n-            JButton btn = new JButton(\"Enable\/Disable\");\n-            ActionListener actionListener = event -> {\n-                combo.setEnabled(!combo.isEnabled());\n-                customCombo.setEnabled(!customCombo.isEnabled());\n-                list.setEnabled(!list.isEnabled());\n-                list2.setEnabled(!list2.isEnabled());\n-                String str = event.getActionCommand();\n-                System.out.println(\"Clicked = \" + str + \" \" + customCombo.isEnabled());\n-            };\n-            btn.addActionListener(actionListener);\n-\n-            FlowLayout layout = new FlowLayout(FlowLayout.LEADING);\n-            JPanel panel = new JPanel(layout);\n-            panel.add(combo);\n-            panel.add(customCombo);\n-            panel.add(list);\n-            panel.add(list2);\n-            panel.add(btn);\n-            System.out.println(\"RENDERER1: \" + combo.getRenderer());\n-            System.out.println(\"RENDERER2: \" + customCombo.getRenderer());\n-            System.out.println(\"RENDERER3: \" + list.getCellRenderer());\n-            System.out.println(\"RENDERER4: \" + list2.getCellRenderer());\n-\n-            frame = new JFrame();\n-            frame.getContentPane().add(panel);\n-            frame.pack();\n-            frame.setLocationRelativeTo(null);\n-\n-            PassFailJFrame.addTestWindow(frame);\n-            PassFailJFrame.positionTestWindow(frame,\n-                    PassFailJFrame.Position.HORIZONTAL);\n-\n-            frame.setVisible(true);\n-        });\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        try {\n-            UIManager.setLookAndFeel(\"javax.swing.plaf.nimbus.NimbusLookAndFeel\");\n-        } catch (Exception e) {\n-            System.err.println(\"Nimbus L&F not found\");\n-            return;\n-        }\n-\n-        PassFailJFrame pfjFrame = new PassFailJFrame(\"Disabled Nimbus \"\n-                + \"CustomComboBox Test Instructions\", instructionsText, 5);\n-\n-        createAndShowGUI();\n-\n-        pfjFrame.awaitAndCheck();\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/DisabledComboBoxFontTest.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7093691\n+ * @summary Tests if JComboBox has correct font when disabled\/enabled\n+ * @run main DisabledComboBoxFontTestAuto\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.DefaultListCellRenderer;\n+import javax.swing.JComboBox;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class DisabledComboBoxFontTestAuto {\n+    private static JComboBox combo, combo2;\n+    private static BufferedImage enabledImage, disabledImage, enabledImage2, disabledImage2;\n+    private static Path testDir;\n+    private static String lafName;\n+    private static int COMBO_HEIGHT, COMBO_WIDTH, COMBO2_HEIGHT, COMBO2_WIDTH;\n+\n+    private static void createCombo() {\n+        combo = new JComboBox();\n+        combo.addItem(\"Simple JComboBox\");\n+        combo.setRenderer(new DefaultListCellRenderer());\n+        combo2 = new JComboBox();\n+        combo2.addItem(\"Simple JComboBox\");\n+        COMBO_WIDTH = (int) combo.getPreferredSize().getWidth();\n+        COMBO_HEIGHT = (int) combo.getPreferredSize().getHeight();\n+        COMBO2_WIDTH = (int) combo2.getPreferredSize().getWidth();\n+        COMBO2_HEIGHT = (int) combo2.getPreferredSize().getHeight();\n+        combo.setSize(COMBO_WIDTH, COMBO_HEIGHT);\n+        combo2.setSize(COMBO2_WIDTH, COMBO2_HEIGHT);\n+    }\n+\n+    private static void paintCombo() {\n+        combo.setEnabled(true);\n+        enabledImage = new BufferedImage(COMBO_WIDTH, COMBO_HEIGHT, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = enabledImage.createGraphics();\n+        combo.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo.setEnabled(false);\n+        disabledImage = new BufferedImage(COMBO_WIDTH, COMBO_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = disabledImage.createGraphics();\n+        combo.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo2.setEnabled(true);\n+        enabledImage2 = new BufferedImage(COMBO2_WIDTH, COMBO2_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = enabledImage2.createGraphics();\n+        combo2.paint(graphics2D);\n+        graphics2D.dispose();\n+        combo2.setEnabled(false);\n+        disabledImage2 = new BufferedImage(COMBO2_WIDTH, COMBO2_HEIGHT, TYPE_INT_ARGB);\n+        graphics2D = disabledImage2.createGraphics();\n+        combo2.paint(graphics2D);\n+        graphics2D.dispose();\n+    }\n+\n+    private static void testMethod() throws IOException {\n+        ImageIO.write(enabledImage, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"Enabled.png\"));\n+        ImageIO.write(disabledImage, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"Disabled.png\"));\n+        ImageIO.write(enabledImage2, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"EnabledDLCR.png\"));\n+        ImageIO.write(disabledImage2, \"png\", new File(testDir\n+                + \"\/\" + lafName + \"DisabledDLCR.png\"));\n+        System.out.println(\"DIR: \" + testDir);\n+\n+        boolean isIdentical = true;\n+        Color eColor1, eColor2, dColor1, dColor2;\n+\n+        \/\/ Use center line to compare RGB values\n+        int y = 10;\n+        for (int x = (enabledImage.getWidth() \/ 2) - 20;\n+             x < (enabledImage.getWidth() \/ 2) + 20; x++) {\n+            \/\/ Nimbus has a pixel offset in coordinates since Nimbus is 2px\n+            \/\/ smaller in width than other L&F's\n+            if (lafName.equals(\"Nimbus\")) {\n+                eColor1 = new Color(enabledImage.getRGB(x + 1, y));\n+                eColor2 = new Color(enabledImage2.getRGB(x, y));\n+                dColor1 = new Color(disabledImage.getRGB(x + 1, y));\n+                dColor2 = new Color(disabledImage2.getRGB(x, y));\n+            } else {\n+                eColor1 = new Color(enabledImage.getRGB(x, y));\n+                eColor2 = new Color(enabledImage2.getRGB(x, y));\n+                dColor1 = new Color(disabledImage.getRGB(x, y));\n+                dColor2 = new Color(disabledImage2.getRGB(x, y));\n+            }\n+            if ((!isColorMatching(eColor1, eColor2)) || (!isColorMatching(dColor1, dColor2))) {\n+                isIdentical = false;\n+                break;\n+            }\n+        }\n+\n+        if (isIdentical) {\n+            System.out.println(\"PASSED\");\n+        } else {\n+            throw new RuntimeException(\"FAIL: \" +\n+                    \"Enabled and disabled ComboBox matches\");\n+        }\n+    }\n+\n+    private static boolean isColorMatching(Color c1, Color c2) {\n+        if ((c1.getRed() != c2.getRed())\n+                || (c1.getBlue() != c2.getBlue())\n+                || (c1.getGreen() != c2.getGreen())) {\n+\n+            System.out.println(lafName + \" Enabled RGB failure: \"\n+                    + c1.getRed() + \", \"\n+                    + c1.getBlue() + \", \"\n+                    + c1.getGreen() + \" vs \"\n+                    + c2.getRed() + \", \"\n+                    + c2.getBlue() + \", \"\n+                    + c2.getGreen());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored){\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        lafName = \"null\";\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            lafName = laf.getName().equals(\"CDE\/Motif\") ? \"Motif\" : laf.getName();\n+            System.out.println(\"LAF is \" + lafName);\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            SwingUtilities.invokeAndWait(DisabledComboBoxFontTestAuto::createCombo);\n+            SwingUtilities.invokeAndWait(DisabledComboBoxFontTestAuto::paintCombo);\n+            testMethod();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/DisabledComboBoxFontTestAuto.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}