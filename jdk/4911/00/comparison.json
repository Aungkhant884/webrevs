{"files":[{"patch":"@@ -2111,4 +2111,0 @@\n-  \/\/ Now that all inlining is over, cut edge from root to loop\n-  \/\/ safepoints\n-  remove_root_to_sfpts_edges(igvn);\n-\n@@ -2151,1 +2147,5 @@\n-  \/\/ Perform escape analysis\n+  \/\/ Now that all inlining is over and no PhaseRemoveUseless will run, cut edge from root to loop\n+  \/\/ safepoints\n+  remove_root_to_sfpts_edges(igvn);\n+\n+    \/\/ Perform escape analysis\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270886\n+ * @library \/test\/lib\n+ * @summary Crash in PhaseIdealLoop::verify_strip_mined_scheduling\n+ *\n+ * @run main TestRenumberLiveNodesInfiniteLoop\n+ *\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestRenumberLiveNodesInfiniteLoop {\n+    public long m2 (double a_do0, byte a_by1){\n+        double do3 = -2074076350.2364243247;\n+        int in4 = 129;\n+        do3 = do3;\n+        return -3480877547L;\n+    }\n+\n+    public void mainTest (String[] args){\n+        byte by14 = (byte)9;\n+        long lo15 = 1502432357L;\n+        short sha16[] = new short[473];\n+\n+        for (short sh17 : sha16) {\n+            try {\n+                sha16[2] = (short)23;\n+                for (int i18 = 0; i18 < 17; i18++) {\n+                    sha16[i18] = sh17;\n+                    m2(1120187380.53448312, by14);\n+                }\n+            } catch (ArithmeticException a_e) {}\n+            sha16[1] = sh17;\n+            sha16[2] = sh17;\n+        }\n+        m2(825278101.1289499682, by14);\n+        by14 = (byte)(by14 - by14);\n+        for (int i19 = 0; i19 < 20; i19++) {\n+            if (i19 == i19) {\n+                sha16[i19] *= (short)-24;\n+                i19 = i19;\n+            }\n+            for (short sh20 : sha16) {\n+                for (int i21 = 0; i21 < 83; i21++) {\n+                    sha16[0] -= (short)-46;\n+                    i19 += 127;\n+                }\n+                for (int i22 = 0; i22 < 89; i22++) {\n+                    i22 = 8;\n+                }\n+            }\n+            ;\n+        }\n+        ;\n+        ;\n+        for (int i23 = 0; i23 < 33; i23++) {\n+            sha16[i23] = (short)46;\n+            for (int i24 = 0; i24 < 94; i24++) {\n+                sha16[2] = (short)-3;\n+            }\n+        }\n+        sha16[0] = (short)14;\n+        for (int i25 = 0; i25 < 35; i25++) {\n+            for (short sh26 : sha16) {\n+                if (i25 > 5) {\n+                    m2(1121925038.1118634045, by14);\n+                }\n+            }\n+            m2(-1914069692.1375346593, (byte)16);\n+        }\n+        ;\n+        for (int i27 = 0; i27 < 10; i27++) {\n+            for (int i28 = 0; i28 < 44; i28++) {\n+                if (i28 == i28) {\n+                    break;\n+                }\n+                sha16[i27] = (short)62;\n+                for (int i29 = 0; i29 < 95; i29++) {\n+                    sha16[2] = (short)50;\n+                    sha16[2] = (short)30;\n+                    m2(1250986231.1599386644, by14);\n+                }\n+            }\n+            sha16[2] = (short)28;\n+            m2(672818118.3111172289, (byte)0);\n+        }\n+        sha16[0] = (short)19;\n+        sha16[5] = (short)((short)-11 * (short)60);\n+        for (int i30 = 0; i30 < 38; i30++) {\n+            sha16[i30] = (short)43;\n+            sha16[i30] = (short)49;\n+            try {\n+                for (short sh31 : sha16) {\n+                    m2(720645491.3777510146, by14);\n+                    sha16[i30] -= (short)-44;\n+                    sha16[i30] = (short)58;\n+                }\n+                for (short sh32 : sha16) {\n+                    m2(-3548500610.1703635180 % -2696439975.1456774235 % 2299457624.855537726, by14);\n+                    sha16[2] = (short)12;\n+                    sha16[i30] = (short)8;\n+                }\n+                i30 = 4;\n+            } catch (ArithmeticException a_e) {}\n+        }\n+        for (int i33 = 0; i33 < 31; i33++) {\n+            for (int i34 = 0; i34 < i33; i34++) {\n+                try {\n+                    sha16[i34] \/= (short)-25;\n+                    i34 = -65536;\n+                    i33 = i33;\n+                } catch (ArithmeticException a_e) {}\n+                for (short sh35 : sha16) {\n+                    sha16[i34] += sha16[i33];\n+                    sha16[i34] = sh35;\n+                    sha16[i33] = (short)15;\n+                }\n+                for (short sh36 : sha16) {\n+                    m2(3573835015.2140351447, by14);\n+                    m2(2984270380.1830267895, by14);\n+                }\n+            }\n+            sha16[i33] = (short)57;\n+            m2(-3061961160.3118322232, (byte)-4);\n+        }\n+        sha16[256] -= (short)50;\n+    }\n+\n+    public static void main(String[] args) throws Exception{\n+        Thread thread = new Thread() {\n+                public void run() {\n+                    TestRenumberLiveNodesInfiniteLoop instance = new TestRenumberLiveNodesInfiniteLoop();\n+                    for (int i = 0; i < 100; ++i) {\n+                        instance.mainTest(args);\n+                    }\n+                }\n+            };\n+        \/\/ Give thread some time to trigger compilation\n+        thread.setDaemon(true);\n+        thread.start();\n+        Thread.sleep(Utils.adjustTimeout(4000));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestRenumberLiveNodesInfiniteLoop.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}