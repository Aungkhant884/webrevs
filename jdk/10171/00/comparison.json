{"files":[{"patch":"@@ -500,0 +500,1 @@\n+        c.isPermittedExplicit = tree.permitting.nonEmpty();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -731,8 +731,0 @@\n-            \/\/ Determine permits.\n-            ListBuffer<Symbol> permittedSubtypeSymbols = new ListBuffer<>();\n-            List<JCExpression> permittedTrees = tree.permitting;\n-            for (JCExpression permitted : permittedTrees) {\n-                Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n-                permittedSubtypeSymbols.append(pt.tsym);\n-            }\n-\n@@ -747,9 +739,0 @@\n-\n-            \/* it could be that there are already some symbols in the permitted list, for the case\n-             * where there are subtypes in the same compilation unit but the permits list is empty\n-             * so don't overwrite the permitted list if it is not empty\n-             *\/\n-            if (!permittedSubtypeSymbols.isEmpty()) {\n-                sym.permitted = permittedSubtypeSymbols.toList();\n-            }\n-            sym.isPermittedExplicit = !permittedSubtypeSymbols.isEmpty();\n@@ -766,1 +749,1 @@\n-            super(CompletionCause.HIERARCHY_PHASE, new PermitsPhase());\n+            super(CompletionCause.HIERARCHY_PHASE, new HeaderPhase());\n@@ -840,27 +823,0 @@\n-    private final class PermitsPhase extends AbstractHeaderPhase {\n-\n-        public PermitsPhase() {\n-            super(CompletionCause.HIERARCHY_PHASE, new HeaderPhase());\n-        }\n-\n-        @Override\n-        protected void runPhase(Env<AttrContext> env) {\n-            JCClassDecl tree = env.enclClass;\n-            if (!tree.sym.isAnonymous() || tree.sym.isEnum()) {\n-                for (Type supertype : types.directSupertypes(tree.sym.type)) {\n-                    if (supertype.tsym.kind == TYP) {\n-                        ClassSymbol supClass = (ClassSymbol) supertype.tsym;\n-                        Env<AttrContext> supClassEnv = enter.getEnv(supClass);\n-                        if (supClass.isSealed() &&\n-                            !supClass.isPermittedExplicit &&\n-                            supClassEnv != null &&\n-                            supClassEnv.toplevel == env.toplevel) {\n-                            supClass.permitted = supClass.permitted.append(tree.sym);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-    }\n-\n@@ -890,0 +846,2 @@\n+            fillPermits(tree, baseEnv);\n+\n@@ -917,0 +875,30 @@\n+        }\n+\n+        private void fillPermits(JCClassDecl tree, Env<AttrContext> baseEnv) {\n+            ClassSymbol sym = tree.sym;\n+\n+            \/\/fill in implicit permits in supertypes:\n+            if (!sym.isAnonymous() || sym.isEnum()) {\n+                for (Type supertype : types.directSupertypes(sym.type)) {\n+                    if (supertype.tsym.kind == TYP) {\n+                        ClassSymbol supClass = (ClassSymbol) supertype.tsym;\n+                        Env<AttrContext> supClassEnv = enter.getEnv(supClass);\n+                        if (supClass.isSealed() &&\n+                            !supClass.isPermittedExplicit &&\n+                            supClassEnv != null &&\n+                            supClassEnv.toplevel == baseEnv.toplevel) {\n+                            supClass.permitted = supClass.permitted.append(sym);\n+                        }\n+                    }\n+                }\n+            }\n+            \/\/ attribute (explicit) permits of the current class:\n+            if (sym.isPermittedExplicit) {\n+                ListBuffer<Symbol> permittedSubtypeSymbols = new ListBuffer<>();\n+                List<JCExpression> permittedTrees = tree.permitting;\n+                for (JCExpression permitted : permittedTrees) {\n+                    Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n+                    permittedSubtypeSymbols.append(pt.tsym);\n+                }\n+                sym.permitted = permittedSubtypeSymbols.toList();\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":33,"deletions":45,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test 8247352\n+ * @test 8247352 8293348\n@@ -665,0 +665,31 @@\n+\n+    @Test \/\/JDK-8293348\n+    public void testSupertypePermitsLoop(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"class Main implements T2 {}\",\n+                          \"non-sealed interface T2 extends T {}\",\n+                          \"sealed interface T permits T2 {}\");\n+\n+        Path out = base.resolve(\"out\");\n+\n+        Files.createDirectories(out);\n+\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        Files.delete(out.resolve(\"Main.class\"));\n+        Files.delete(out.resolve(\"T.class\"));\n+\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .options(\"-cp\", out.toString(),\n+                         \"-sourcepath\", src.toString())\n+                .files(src.resolve(\"Main.java\"))\n+                .run()\n+                .writeAll();\n+    }\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}