{"files":[{"patch":"@@ -1496,0 +1496,31 @@\n+void C2_MacroAssembler::load_vector(XMMRegister dst, Address src, int vlen_in_bytes) {\n+  switch (vlen_in_bytes) {\n+  case 4:  movdl(dst, src);   break;\n+  case 8:  movq(dst, src);    break;\n+  case 16: movdqu(dst, src);  break;\n+  case 32: vmovdqu(dst, src); break;\n+  case 64: evmovdquq(dst, src, Assembler::AVX_512bit); break;\n+  default: ShouldNotReachHere();\n+  }\n+}\n+\n+void C2_MacroAssembler::load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n+  if (reachable(src)) {\n+    load_vector(dst, as_Address(src), vlen_in_bytes);\n+  } else {\n+    lea(rscratch, src);\n+    load_vector(dst, Address(rscratch, 0), vlen_in_bytes);\n+  }\n+}\n+\n+void C2_MacroAssembler::store_vector(Address dst, XMMRegister src, int vlen_in_bytes) {\n+  switch (vlen_in_bytes) {\n+  case 4:  movdl(dst, src);   break;\n+  case 8:  movq(dst, src);    break;\n+  case 16: movdqu(dst, src);  break;\n+  case 32: vmovdqu(dst, src); break;\n+  case 64: evmovdquq(dst, src, Assembler::AVX_512bit); break;\n+  default: ShouldNotReachHere();\n+  }\n+}\n+\n@@ -4074,1 +4105,0 @@\n-#ifdef _LP64\n@@ -4116,0 +4146,2 @@\n+\n+#ifdef __LP64\n@@ -4161,0 +4193,18 @@\n+#else \/\/ __LP64\n+  int src_vlen_in_bytes = vlen * type2aelembytes(T_LONG);\n+  int dst_vlen_in_bytes = vlen * type2aelembytes(bt);\n+  assert(src_vlen_in_bytes + dst_vlen_in_bytes <= 128, \"red zone\");\n+  store_vector(Address(rsp, -src_vlen_in_bytes), src, src_vlen_in_bytes);\n+  for (int i = 0; i < vlen; i++) {\n+    int src_ele_offset = -src_vlen_in_bytes + i * type2aelembytes(T_LONG);\n+    int dst_ele_offset = -src_vlen_in_bytes - dst_vlen_in_bytes + i * type2aelembytes(bt);\n+    fild_d(Address(rsp, src_ele_offset));\n+    if (bt == T_FLOAT) {\n+      fstp_s(Address(rsp, dst_ele_offset));\n+    } else {\n+      fstp_d(Address(rsp, dst_ele_offset));\n+    }\n+  }\n+  load_vector(dst, Address(rsp, -src_vlen_in_bytes - dst_vlen_in_bytes), dst_vlen_in_bytes);\n+#endif \/\/ __LP64\n+\n@@ -4163,1 +4213,0 @@\n-#endif \/\/ _LP64\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":51,"deletions":2,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -147,0 +147,3 @@\n+  void load_vector(XMMRegister dst, Address src, int vlen_in_bytes);\n+  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n+  void store_vector(Address dst, XMMRegister src, int vlen_in_bytes);\n@@ -303,1 +306,0 @@\n-#ifdef _LP64\n@@ -306,1 +308,0 @@\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1785,7 +1785,0 @@\n-#ifndef _LP64\n-    case Op_VectorCastL2X:\n-      if (is_floating_point_type(bt) && !VM_Version::supports_avx512dq()) {\n-        return false;\n-      }\n-      break;\n-#endif\n@@ -7156,3 +7149,1 @@\n-#ifdef _LP64\n-\n-instruct vcastLtoFD_avx(vec dst, vec src, vec xtmp1, vec xtmp2, rRegL tmp, rFlagsReg cr) %{\n+instruct vcastLtoFD_avx(vec dst, vec src, vec xtmp1, vec xtmp2, rRegI tmp, rFlagsReg cr) %{\n@@ -7175,1 +7166,1 @@\n-instruct vcastLtoFD_evex(vec dst, vec src, vec xtmp1, vec xtmp2, rRegL tmp, kReg ktmp, rFlagsReg cr) %{\n+instruct vcastLtoFD_evex(vec dst, vec src, vec xtmp1, vec xtmp2, rRegI tmp, kReg ktmp, rFlagsReg cr) %{\n@@ -7192,2 +7183,0 @@\n-#endif \/\/ _LP64\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"}]}