{"files":[{"patch":"@@ -1502,1 +1502,1 @@\n-  case 64: evmovdquq(dst, src, Assembler::AVX_512bit); break;\n+  case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n@@ -1522,1 +1522,1 @@\n-  case 64: evmovdquq(dst, src, Assembler::AVX_512bit); break;\n+  case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n@@ -4036,0 +4036,1 @@\n+  Label slow_path_loop;\n@@ -4038,0 +4039,1 @@\n+  assert(bt == T_FLOAT || bt == T_DOUBLE, \"\");\n@@ -4045,1 +4047,1 @@\n-    vpermpd(xtmp1, xtmp1, 0x08, vec_enc);\n+    vpermq(xtmp1, xtmp1, 0x08, vec_enc);\n@@ -4073,0 +4075,3 @@\n+  subptr(rsp, vlen * (type2aelembytes(T_LONG) + type2aelembytes(bt)));\n+  store_vector(Address(rsp, 0), src, vlen * type2aelembytes(T_LONG));\n+  movl(tmp, vlen);\n@@ -4074,0 +4079,3 @@\n+  Address src_ele(rsp, tmp, Address::times_8, -type2aelembytes(T_LONG));\n+  Address dst_ele(rsp, tmp, bt == T_FLOAT ? Address::times_4 : Address::times_8, vlen * type2aelembytes(T_LONG) - type2aelembytes(bt));\n+  bind(slow_path_loop);\n@@ -4075,44 +4083,6 @@\n-  int dst_eles_per_lane = MIN2(vlen, 16 \/ type2aelembytes(bt));\n-  int dst_lane_num = vlen \/ dst_eles_per_lane;\n-  for (int dst_lane = 0; dst_lane < dst_lane_num; dst_lane++) {\n-    for (int dst_ele = dst_eles_per_lane - 1; dst_ele >= 0; dst_ele--) {\n-      int index = dst_lane * dst_eles_per_lane + dst_ele;\n-      int src_lane = index \/ 2;\n-      int src_ele = index % 2;\n-      XMMRegister src_tmp;\n-      if (src_lane == 0) {\n-        src_tmp = src;\n-      } else {\n-        src_tmp = xtmp1;\n-        if (src_ele == 1) {\n-          if (vec_enc == AVX_512bit) {\n-            vextractf32x4(xtmp1, src, src_lane);\n-          } else {\n-            vextractf128(xtmp1, src, src_lane);\n-          }\n-        }\n-      }\n-      if (src_ele == 0) {\n-        movq(tmp, src_tmp);\n-      } else {\n-        extract(T_LONG, tmp, src_tmp, src_ele);\n-      }\n-\n-      XMMRegister dst_tmp = (dst_lane == 0 ? dst : xtmp2);\n-      if (bt == T_FLOAT) {\n-        cvtsi2ssq(dst_tmp, tmp);\n-      } else {\n-        cvtsi2sdq(dst_tmp, tmp);\n-      }\n-      if (dst_ele == 0) {\n-        if (dst_lane != 0) {\n-          if (bt == T_DOUBLE && vec_enc == AVX_512bit) {\n-            vinsertf32x4(dst, dst, xtmp2, dst_lane);\n-          } else {\n-            vinsertf128(dst, dst, xtmp2, dst_lane);\n-          }\n-        }\n-      } else {\n-        vpshufd(dst_tmp, dst_tmp, bt == T_FLOAT ? 0x90 : 0x40, AVX_128bit);\n-      }\n-    }\n+  if (bt == T_FLOAT) {\n+    cvtsi2ssq(xtmp1, src_ele);\n+    movflt(dst_ele, xtmp1);\n+  } else {\n+    cvtsi2sdq(xtmp1, src_ele);\n+    movdbl(dst_ele, xtmp1);\n@@ -4121,13 +4091,6 @@\n-  int src_vlen_in_bytes = vlen * type2aelembytes(T_LONG);\n-  int dst_vlen_in_bytes = vlen * type2aelembytes(bt);\n-  subptr(rsp, src_vlen_in_bytes + dst_vlen_in_bytes);\n-  store_vector(Address(rsp, dst_vlen_in_bytes), src, src_vlen_in_bytes);\n-  for (int i = 0; i < vlen; i++) {\n-    int src_ele_offset = dst_vlen_in_bytes + i * type2aelembytes(T_LONG);\n-    int dst_ele_offset = i * type2aelembytes(bt);\n-    fild_d(Address(rsp, src_ele_offset));\n-    if (bt == T_FLOAT) {\n-      fstp_s(Address(rsp, dst_ele_offset));\n-    } else {\n-      fstp_d(Address(rsp, dst_ele_offset));\n-    }\n+  if (bt == T_FLOAT) {\n+    fild_d(src_ele);\n+    fstp_s(dst_ele);\n+  } else {\n+    fild_d(src_ele);\n+    fstp_d(dst_ele);\n@@ -4135,2 +4098,0 @@\n-  load_vector(dst, Address(rsp, 0), dst_vlen_in_bytes);\n-  addptr(rsp, src_vlen_in_bytes + dst_vlen_in_bytes);\n@@ -4138,0 +4099,5 @@\n+  decl(tmp);\n+  jccb(Assembler::notZero, slow_path_loop);\n+\n+  load_vector(dst, Address(rsp, vlen * type2aelembytes(T_LONG)), vlen * type2aelembytes(bt));\n+  addptr(rsp, vlen * (type2aelembytes(T_LONG) + type2aelembytes(bt)));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":28,"deletions":62,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -3808,8 +3808,1 @@\n-    switch (Matcher::vector_length_in_bytes(this)) {\n-      case  4: __ movdl    ($dst$$XMMRegister, $mem$$Address); break;\n-      case  8: __ movq     ($dst$$XMMRegister, $mem$$Address); break;\n-      case 16: __ movdqu   ($dst$$XMMRegister, $mem$$Address); break;\n-      case 32: __ vmovdqu  ($dst$$XMMRegister, $mem$$Address); break;\n-      case 64: __ evmovdqul($dst$$XMMRegister, $mem$$Address, Assembler::AVX_512bit); break;\n-      default: ShouldNotReachHere();\n-    }\n+    __ load_vector($dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n@@ -3826,8 +3819,1 @@\n-    switch (Matcher::vector_length_in_bytes(this, $src)) {\n-      case  4: __ movdl    ($mem$$Address, $src$$XMMRegister); break;\n-      case  8: __ movq     ($mem$$Address, $src$$XMMRegister); break;\n-      case 16: __ movdqu   ($mem$$Address, $src$$XMMRegister); break;\n-      case 32: __ vmovdqu  ($mem$$Address, $src$$XMMRegister); break;\n-      case 64: __ evmovdqul($mem$$Address, $src$$XMMRegister, Assembler::AVX_512bit); break;\n-      default: ShouldNotReachHere();\n-    }\n+    __ store_vector($mem$$Address, $src$$XMMRegister, Matcher::vector_length_in_bytes(this, $src));\n@@ -6977,3 +6963,0 @@\n-        if (!VM_Version::supports_avx512vl()) {\n-          vlen_enc = Assembler::AVX_512bit;\n-        }\n@@ -7005,1 +6988,1 @@\n-instruct vcastBStoF(vec dst, vec src, vec xtmp) %{\n+instruct vcastBStoF_avx1(vec dst, vec src, vec xtmp) %{\n@@ -7163,1 +7146,1 @@\n-  predicate((UseAVX <= 2 || !VM_Version::supports_avx512dq()) &&\n+  predicate(!VM_Version::supports_avx512dq() &&\n@@ -7167,1 +7150,1 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP tmp, KILL cr);\n+  effect(TEMP xtmp1, TEMP xtmp2, TEMP tmp, KILL cr);\n@@ -7180,1 +7163,1 @@\n-  predicate((UseAVX <= 2 || !VM_Version::supports_avx512dq()) &&\n+  predicate(!VM_Version::supports_avx512dq() &&\n@@ -7184,1 +7167,1 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP tmp, TEMP ktmp, KILL cr);\n+  effect(TEMP xtmp1, TEMP xtmp2, TEMP tmp, TEMP ktmp, KILL cr);\n@@ -7199,1 +7182,1 @@\n-            (is_floating_point_type(Matcher::vector_element_basic_type(n)) && UseAVX > 2 && VM_Version::supports_avx512dq()));\n+            (is_floating_point_type(Matcher::vector_element_basic_type(n)) && VM_Version::supports_avx512dq()));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":8,"deletions":25,"binary":false,"changes":33,"status":"modified"}]}