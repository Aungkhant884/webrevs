{"files":[{"patch":"@@ -3697,0 +3697,6 @@\n+\n+  \/\/ There might have been a condition guarding the counted loop.\n+  \/\/ We need to pin the exact limit to prevent if to float above that check\n+  Node* cast_ii = ConstraintCastNode::make(cl->in(LoopNode::EntryControl), exact_limit, phase->_igvn.type(exact_limit), ConstraintCastNode::UnconditionalDependency, T_INT);\n+  phase->register_new_node(cast_ii, cl->in(LoopNode::EntryControl));\n+  phase->_igvn.replace_input_of(final_iv, 1, cast_ii);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8289748\n+ * @summary SIGFPE caused by C2 IdealLoopTree::do_remove_empty_loop\n+ * @key stress randomness\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM\n+ *                   -XX:CompileOnly=compiler.loopopts.TestRemoveEmptyCountedLoop::test,compiler.loopopts.TestRemoveEmptyCountedLoop::test2\n+ *                   compiler.loopopts.TestRemoveEmptyCountedLoop\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:StressSeed=2160808391\n+ *                   -XX:CompileOnly=compiler.loopopts.TestRemoveEmptyCountedLoop::test,compiler.loopopts.TestRemoveEmptyCountedLoop::test2\n+ *                   compiler.loopopts.TestRemoveEmptyCountedLoop\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestRemoveEmptyCountedLoop {\n+\n+    public void test() {\n+      int k = 3;\n+      for (int i=9; i>0; i--) {\n+        for (int j=2; j<i; j++) {\n+          k = k;\n+          k = (1 % j);\n+        }\n+      }\n+    }\n+\n+    public void test2() {\n+      int k = 3;\n+      for (int i=9; i>0; i--) {\n+          int j = 2;\n+          do {\n+              try {\n+                  k = k;\n+                  k = (1 % j);\n+              } catch (Exception e) {}\n+          } while (++j < i);\n+      }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRemoveEmptyCountedLoop _instance = new TestRemoveEmptyCountedLoop();\n+        _instance.test();\n+        _instance.test2();\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRemoveEmptyCountedLoop.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}