{"files":[{"patch":"@@ -1997,1 +1997,1 @@\n-      log_info(cds)(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC or UseSerialGC are required.\");\n+      log_info(cds)(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC, UseSerialGC or UseParallelGC are required.\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -801,0 +801,10 @@\n+HeapWord* ParallelScavengeHeap::allocate_loaded_archive_space(size_t size) {\n+  return _old_gen->allocate(size);\n+}\n+\n+void ParallelScavengeHeap::complete_loaded_archive_space(MemRegion archive_space) {\n+  assert(_old_gen->object_space()->used_region().contains(archive_space),\n+         \"Archive space not contained in old gen\");\n+  _old_gen->complete_loaded_archive_space(archive_space);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -276,0 +276,5 @@\n+\n+  \/\/ Support for loading objects from CDS archive into the heap\n+  bool can_load_archived_objects() const { return UseCompressedOops; }\n+  HeapWord* allocate_loaded_archive_space(size_t size);\n+  void complete_loaded_archive_space(MemRegion archive_space);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -286,0 +286,9 @@\n+void PSOldGen::complete_loaded_archive_space(MemRegion archive_space) {\n+  HeapWord* cur = archive_space.start();\n+  while (cur < archive_space.end()) {\n+    _start_array.allocate_block(cur);\n+    size_t word_size = cast_to_oop(cur)->size();\n+    cur += word_size;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -136,0 +136,2 @@\n+  void complete_loaded_archive_space(MemRegion archive_space);\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,0 +431,1 @@\n+ -runtime\/cds\/appcds\/TestParallelGCWithCDS.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test Loading CDS archived heap objects into ParallelGC\n+ * @bug 8274788\n+ * @requires vm.cds\n+ * @requires vm.gc.Parallel\n+ * @requires vm.gc.G1\n+ *\n+ * @comment don't run this test if any -XX::+Use???GC options are specified, since they will\n+ *          interfere with the the test.\n+ * @requires vm.gc == null\n+ *\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestParallelGCWithCDS\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestParallelGCWithCDS {\n+    public final static String HELLO = \"Hello World\";\n+    static String helloJar;\n+\n+    public static void main(String... args) throws Exception {\n+        helloJar = JarBuilder.build(\"hello\", \"Hello\");\n+\n+        \/\/ Check if we can use ParallelGC during dump time, or run time, or both.\n+        test(false, true);\n+        test(true,  false);\n+        test(true,  true);\n+\n+        \/\/ With G1 we usually have 2 heap regions. To increase test coverage, we can have 3 heap regions\n+        \/\/ by using \"-Xmx256m -XX:ObjectAlignmentInBytes=64\"\n+        if (Platform.is64bit()) test(false, true, true);\n+    }\n+\n+    final static String G1 = \"-XX:+UseG1GC\";\n+    final static String Parallel = \"-XX:+UseParallelGC\";\n+\n+    static void test(boolean dumpWithParallel, boolean execWithParallel) throws Exception {\n+        test(dumpWithParallel, execWithParallel, false);\n+    }\n+\n+    static void test(boolean dumpWithParallel, boolean execWithParallel, boolean useSmallRegions) throws Exception {\n+        String dumpGC = dumpWithParallel ? Parallel : G1;\n+        String execGC = execWithParallel ? Parallel : G1;\n+        String small1 = useSmallRegions ? \"-Xmx256m\" : \"-showversion\";\n+        String small2 = useSmallRegions ? \"-XX:ObjectAlignmentInBytes=64\" : \"-showversion\";\n+        OutputAnalyzer out;\n+\n+        System.out.println(\"0. Dump with \" + dumpGC);\n+        out = TestCommon.dump(helloJar,\n+                              new String[] {\"Hello\"},\n+                              dumpGC,\n+                              small1,\n+                              small2,\n+                              \"-Xlog:cds\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldHaveExitValue(0);\n+\n+        System.out.println(\"1. Exec with \" + execGC);\n+        out = TestCommon.exec(helloJar,\n+                              execGC,\n+                              small1,\n+                              small2,\n+                              \"-Xlog:cds\",\n+                              \"Hello\");\n+        out.shouldContain(HELLO);\n+        out.shouldHaveExitValue(0);\n+\n+        int n = 2;\n+        if (!dumpWithParallel && execWithParallel) {\n+            \/\/ We dumped with G1, so we have an archived heap. At exec time, try to load them into\n+            \/\/ a small ParallelGC heap that may be too small.\n+            String[] sizes = {\n+                \"4m\",   \/\/ usually this will success load the archived heap\n+                \"2m\",   \/\/ usually this will fail to load the archived heap, but app can launch\n+                        \/\/ or fail with \"GC triggered before VM initialization completed\"\n+                \"1m\"    \/\/ usually this will cause VM launch to fail with \"Too small maximum heap\"\n+            };\n+            for (String sz : sizes) {\n+                String xmx = \"-Xmx\" + sz;\n+                System.out.println(\"=======\\n\" + n + \". Exec with \" + execGC + \" \" + xmx);\n+                out = TestCommon.exec(helloJar,\n+                                      execGC,\n+                                      small1,\n+                                      small2,\n+                                      xmx,\n+                                      \"-Xlog:cds\",\n+                                      \"Hello\");\n+                if (out.getExitValue() == 0) {\n+                    out.shouldContain(HELLO);\n+                } else {\n+                    String output = out.getStdout() + out.getStderr();\n+                    String exp1 = \"Too small maximum heap\";\n+                    String exp2 = \"GC triggered before VM initialization completed\";\n+                    if (!output.contains(exp1) && !output.contains(exp2)) {\n+                        throw new RuntimeException(\"Either '\" + exp1 + \"' or '\" + exp2 + \"' must be in stdout\/stderr \\n\");\n+                    }\n+                }\n+                n++;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestParallelGCWithCDS.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}