{"files":[{"patch":"@@ -1279,0 +1279,27 @@\n+\/\/ Returns true if the current mismatch is due to a resolved\/unresolved\n+\/\/ class pair. Otherwise, returns false.\n+bool ConstantPool::is_unresolved_class_mismatch(int index1,\n+  const constantPoolHandle& cp2, int index2) {\n+\n+  jbyte t1 = tag_at(index1).value();\n+  if (t1 != JVM_CONSTANT_Class && t1 != JVM_CONSTANT_UnresolvedClass) {\n+    return false;  \/\/ wrong entry type; not our special case\n+  }\n+\n+  jbyte t2 = cp2->tag_at(index2).value();\n+  if (t2 != JVM_CONSTANT_Class && t2 != JVM_CONSTANT_UnresolvedClass) {\n+    return false;  \/\/ wrong entry type; not our special case\n+  }\n+\n+  if (t1 == t2) {\n+    return false;  \/\/ not a mismatch; not our special case\n+  }\n+\n+  char *s1 = klass_name_at(index1)->as_C_string();\n+  char *s2 = cp2->klass_name_at(index2)->as_C_string();\n+  if (strcmp(s1, s2) != 0) {\n+    return false;  \/\/ strings don't match; not our special case\n+  }\n+\n+  return true;  \/\/ made it through the gauntlet; this is our special case\n+} \/\/ end is_unresolved_class_mismatch()\n@@ -1334,0 +1361,1 @@\n+    match |= is_unresolved_class_mismatch(recur1, cp2, recur2);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -856,0 +856,1 @@\n+  bool is_unresolved_class_mismatch(int index1, const constantPoolHandle& cp2, int index2);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1285,29 +1285,0 @@\n-\/\/ Returns true if the current mismatch is due to a resolved\/unresolved\n-\/\/ class pair. Otherwise, returns false.\n-bool VM_RedefineClasses::is_unresolved_class_mismatch(const constantPoolHandle& cp1,\n-       int index1, const constantPoolHandle& cp2, int index2) {\n-\n-  jbyte t1 = cp1->tag_at(index1).value();\n-  if (t1 != JVM_CONSTANT_Class && t1 != JVM_CONSTANT_UnresolvedClass) {\n-    return false;  \/\/ wrong entry type; not our special case\n-  }\n-\n-  jbyte t2 = cp2->tag_at(index2).value();\n-  if (t2 != JVM_CONSTANT_Class && t2 != JVM_CONSTANT_UnresolvedClass) {\n-    return false;  \/\/ wrong entry type; not our special case\n-  }\n-\n-  if (t1 == t2) {\n-    return false;  \/\/ not a mismatch; not our special case\n-  }\n-\n-  char *s1 = cp1->klass_name_at(index1)->as_C_string();\n-  char *s2 = cp2->klass_name_at(index2)->as_C_string();\n-  if (strcmp(s1, s2) != 0) {\n-    return false;  \/\/ strings don't match; not our special case\n-  }\n-\n-  return true;  \/\/ made it through the gauntlet; this is our special case\n-} \/\/ end is_unresolved_class_mismatch()\n-\n-\n@@ -1703,2 +1674,2 @@\n-      } else if (is_unresolved_class_mismatch(scratch_cp, scratch_i,\n-                                              *merge_cp_p, scratch_i)) {\n+      } else if (scratch_cp->is_unresolved_class_mismatch(scratch_i, *merge_cp_p,\n+        scratch_i)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -441,2 +441,0 @@\n-  bool is_unresolved_class_mismatch(const constantPoolHandle& cp1, int index1,\n-    const constantPoolHandle& cp2, int index2);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}