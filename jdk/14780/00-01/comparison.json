{"files":[{"patch":"@@ -543,0 +543,1 @@\n+  -serviceability\/jvmti\/RedefineClasses\/RedefineLeakThrowable.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ # @bug 8308762\n+ * @library \/test\/lib\n+ * @summary Test that redefinition of class containing Throwable refs does not leak constant pool\n+ * @requires vm.jvmti\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.instrument\n+ *          jdk.jartool\/sun.tools.jar\n+ * @run driver RedefineLeakThrowable buildagent\n+ * @run driver\/timeout=6000  RedefineLeakThrowable runtest\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.io.PrintWriter;\n+import java.lang.RuntimeException;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+import java.lang.instrument.IllegalClassFormatException;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefineLeakThrowable {\n+    static class Tester {\n+        void test() {\n+            try {\n+                int i = 42;\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    static class LoggingTransformer implements ClassFileTransformer {\n+        static int transformCount = 0;\n+\n+        public LoggingTransformer() {}\n+\n+        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,\n+            ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+\n+            transformCount++;\n+            if (transformCount % 1000 == 0) System.out.println(\"transformCount:\" + transformCount);\n+            return null;\n+        }\n+    }\n+\n+    public static void premain(String agentArgs, Instrumentation inst) throws Exception {\n+        System.gc();\n+        LoggingTransformer t = new LoggingTransformer();\n+        inst.addTransformer(t, true);\n+        {\n+            Class demoClass = Class.forName(\"RedefineLeakThrowable$Tester\");\n+\n+            for (int i = 0; i < 10000; i++) {\n+               inst.retransformClasses(demoClass);\n+            }\n+        }\n+        System.gc();\n+    }\n+    private static void buildAgent() {\n+        try {\n+            ClassFileInstaller.main(\"RedefineLeakThrowable\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not write agent classfile\", e);\n+        }\n+\n+        try {\n+            PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n+            pw.println(\"Premain-Class: RedefineLeakThrowable\");\n+            pw.println(\"Agent-Class: RedefineLeakThrowable\");\n+            pw.println(\"Can-Redefine-Classes: true\");\n+            pw.println(\"Can-Retransform-Classes: true\");\n+            pw.close();\n+        } catch (FileNotFoundException e) {\n+            throw new RuntimeException(\"Could not write manifest file for the agent\", e);\n+        }\n+\n+        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarTool.run(new String[] { \"-cmf\", \"MANIFEST.MF\", \"redefineagent.jar\", \"RedefineLeakThrowable.class\" })) {\n+            throw new RuntimeException(\"Could not write the agent jar file\");\n+        }\n+    }\n+    public static void main(String argv[]) throws Exception {\n+        if (argv.length == 1 && argv[0].equals(\"buildagent\")) {\n+            buildAgent();\n+            return;\n+        }\n+        if (argv.length == 1 && argv[0].equals(\"runtest\")) {\n+            \/\/ run outside of jtreg to not OOM on jtreg classes that are loaded after metaspace is full\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-XX:MetaspaceSize=12m\",\n+                    \"-XX:MaxMetaspaceSize=12m\",\n+                    \"-javaagent:redefineagent.jar\",\n+                    \"RedefineLeakThrowable\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldContain(\"transformCount:10000\");\n+            output.shouldHaveExitValue(0);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineLeakThrowable.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}