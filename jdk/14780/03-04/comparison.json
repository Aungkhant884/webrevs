{"files":[{"patch":"@@ -1289,0 +1289,3 @@\n+  \/\/ Some classes are pre-resolved (like Throwable) which may lead to\n+  \/\/ consider it as a different entry. We then revert them back temporarily\n+  \/\/ to ensure proper comparison.\n@@ -1290,3 +1293,0 @@\n-    \/\/ Some classes are pre-resolved (like Throwable) which may lead to\n-    \/\/ consider it as a different entry. we then revert them back temporarily\n-    \/\/ to ensure proper comparison.\n@@ -1295,0 +1295,3 @@\n+  if (t2 == JVM_CONSTANT_Class) {\n+    t2 = JVM_CONSTANT_UnresolvedClass;\n+  }\n@@ -1307,9 +1310,0 @@\n-  case JVM_CONSTANT_Class:\n-  {\n-    Klass* k1 = resolved_klass_at(index1);\n-    Klass* k2 = cp2->resolved_klass_at(index2);\n-    if (k1 == k2) {\n-      return true;\n-    }\n-  } break;\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1687,7 +1687,0 @@\n-      \/\/ The find_matching_entry() call above could fail to find a match\n-      \/\/ due to a resolved versus unresolved class or string entry situation\n-      \/\/ like we solved above with the is_unresolved_*_mismatch() calls.\n-      \/\/ However, we would have to call is_unresolved_*_mismatch() over\n-      \/\/ all of *merge_cp_p (potentially) and that doesn't seem to be\n-      \/\/ worth the time.\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,3 @@\n- *          jdk.jartool\/sun.tools.jar\n- * @run driver RedefineLeakThrowable buildagent\n- * @run driver\/timeout=6000  RedefineLeakThrowable runtest\n+ *          java.compiler\n+ * @run main RedefineClassHelper\n+ * @run main\/othervm\/timeout=6000 -javaagent:redefineagent.jar -XX:MetaspaceSize=12m  -XX:MaxMetaspaceSize=12m RedefineLeakThrowable\n@@ -38,33 +38,6 @@\n-import java.io.FileNotFoundException;\n-import java.io.PrintWriter;\n-import java.lang.RuntimeException;\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.Instrumentation;\n-import java.security.ProtectionDomain;\n-import java.lang.instrument.IllegalClassFormatException;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class RedefineLeakThrowable {\n-    static class Tester {\n-        void test() {\n-            try {\n-                int i = 42;\n-            } catch (Throwable t) {\n-                t.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    static class LoggingTransformer implements ClassFileTransformer {\n-        static int transformCount = 0;\n-\n-        public LoggingTransformer() {}\n-\n-        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,\n-            ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n-\n-            transformCount++;\n-            if (transformCount % 1000 == 0) System.out.println(\"transformCount:\" + transformCount);\n-            return null;\n+class Tester {\n+    void test() {\n+        try {\n+            int i = 42;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n@@ -73,0 +46,1 @@\n+}\n@@ -74,6 +48,1 @@\n-    public static void premain(String agentArgs, Instrumentation inst) throws Exception {\n-        System.gc();\n-        LoggingTransformer t = new LoggingTransformer();\n-        inst.addTransformer(t, true);\n-        {\n-            Class demoClass = Class.forName(\"RedefineLeakThrowable$Tester\");\n+public class RedefineLeakThrowable {\n@@ -81,12 +50,10 @@\n-            for (int i = 0; i < 10000; i++) {\n-               inst.retransformClasses(demoClass);\n-            }\n-        }\n-        System.gc();\n-    }\n-    private static void buildAgent() {\n-        try {\n-            ClassFileInstaller.main(\"RedefineLeakThrowable\");\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Could not write agent classfile\", e);\n-        }\n+    static final String NEW_TESTER = \n+        \"class Tester {\" +\n+        \"   void test() {\" +\n+        \"        try {\" +\n+        \"            int i = 42;\" +\n+        \"        } catch (Throwable t) {\" +\n+        \"            t.printStackTrace();\" +\n+        \"        }\" +\n+        \"    }\" +\n+        \"}\";\n@@ -94,10 +61,0 @@\n-        try {\n-            PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n-            pw.println(\"Premain-Class: RedefineLeakThrowable\");\n-            pw.println(\"Agent-Class: RedefineLeakThrowable\");\n-            pw.println(\"Can-Redefine-Classes: true\");\n-            pw.println(\"Can-Retransform-Classes: true\");\n-            pw.close();\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(\"Could not write manifest file for the agent\", e);\n-        }\n@@ -105,5 +62,0 @@\n-        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n-        if (!jarTool.run(new String[] { \"-cmf\", \"MANIFEST.MF\", \"redefineagent.jar\", \"RedefineLeakThrowable.class\" })) {\n-            throw new RuntimeException(\"Could not write the agent jar file\");\n-        }\n-    }\n@@ -111,14 +63,2 @@\n-        if (argv.length == 1 && argv[0].equals(\"buildagent\")) {\n-            buildAgent();\n-            return;\n-        }\n-        if (argv.length == 1 && argv[0].equals(\"runtest\")) {\n-            \/\/ run outside of jtreg to not OOM on jtreg classes that are loaded after metaspace is full\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-XX:MetaspaceSize=12m\",\n-                    \"-XX:MaxMetaspaceSize=12m\",\n-                    \"-javaagent:redefineagent.jar\",\n-                    \"RedefineLeakThrowable\");\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-            output.shouldContain(\"transformCount:10000\");\n-            output.shouldHaveExitValue(0);\n+        for (int i = 0; i < 500; i++) {\n+            RedefineClassHelper.redefineClass(Tester.class, NEW_TESTER);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineLeakThrowable.java","additions":24,"deletions":84,"binary":false,"changes":108,"status":"modified"}]}