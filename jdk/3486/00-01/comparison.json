{"files":[{"patch":"@@ -109,1 +109,1 @@\n-  inline bool is_not_compacted_but_marked_through(uint region_index) const;\n+  inline bool is_compacted_or_marked_through(uint region_index) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-bool G1FullCollector::is_not_compacted_but_marked_through(uint region_index) const {\n-  return _region_attr_table.is_not_compacted_but_marked_through(region_index);\n+bool G1FullCollector::is_compacted_or_marked_through(uint region_index) const {\n+  return _region_attr_table.is_compacted_or_marked_through(region_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    if (!_collector->is_not_compacted_but_marked_through(region_index)) {\n+    if (_collector->is_compacted_or_marked_through(region_index)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-\n+  void set_compacted(uint idx) { set_by_index(idx, Compacted); }\n@@ -59,0 +59,1 @@\n+  void set_not_compacted(uint idx) { set_by_index(idx, NotCompacted); }\n@@ -65,8 +66,0 @@\n-  void set_not_compacted(uint idx) { set_by_index(idx, NotCompacted); }\n-\n-  bool is_not_compacted_but_marked_through(uint idx) const {\n-    return get_by_index(idx) == NotCompacted;\n-  }\n-\n-  void set_compacted(uint idx) { set_by_index(idx, Compacted); }\n-\n@@ -77,0 +70,4 @@\n+\n+  bool is_compacted_or_marked_through(uint idx) const {\n+    return get_by_index(idx) != NotCompacted;\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}