{"files":[{"patch":"@@ -231,1 +231,1 @@\n-void G1FullCollector::update_attribute_table(HeapRegion* hr, bool force_pinned) {\n+void G1FullCollector::update_attribute_table(HeapRegion* hr, bool force_not_compacted) {\n@@ -235,3 +235,3 @@\n-    _region_attr_table.set_closed_archive(hr->hrm_index());\n-  } else if (hr->is_pinned() || force_pinned) {\n-    _region_attr_table.set_pinned(hr->hrm_index());\n+    _region_attr_table.set_not_marked_through(hr->hrm_index());\n+  } else if (hr->is_pinned() || force_not_compacted) {\n+    _region_attr_table.set_not_compacted(hr->hrm_index());\n@@ -240,1 +240,1 @@\n-    _region_attr_table.set_normal(hr->hrm_index());\n+    _region_attr_table.set_compacted(hr->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  void update_attribute_table(HeapRegion* hr, bool force_pinned = false);\n+  void update_attribute_table(HeapRegion* hr, bool force_not_compacted = false);\n@@ -108,4 +108,3 @@\n-  inline bool is_in_pinned_or_closed(oop obj) const;\n-  inline bool is_in_pinned(oop obj) const;\n-  inline bool is_in_pinned(uint region_index) const;\n-  inline bool is_in_closed(oop obj) const;\n+  inline bool is_compacted(oop obj) const;\n+  inline bool is_not_compacted_but_marked_through(uint region_index) const;\n+  inline bool is_not_marked_through(oop obj) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-bool G1FullCollector::is_in_pinned_or_closed(oop obj) const {\n-  return _region_attr_table.is_pinned_or_closed(cast_from_oop<HeapWord*>(obj));\n-}\n@@ -36,2 +33,2 @@\n-bool G1FullCollector::is_in_pinned(oop obj) const {\n-  return _region_attr_table.is_pinned(cast_from_oop<HeapWord*>(obj));\n+bool G1FullCollector::is_compacted(oop obj) const {\n+  return _region_attr_table.is_compacted(cast_from_oop<HeapWord*>(obj));\n@@ -40,2 +37,2 @@\n-bool G1FullCollector::is_in_pinned(uint region_index) const {\n-  return _region_attr_table.is_pinned(region_index);\n+bool G1FullCollector::is_not_compacted_but_marked_through(uint region_index) const {\n+  return _region_attr_table.is_not_compacted_but_marked_through(region_index);\n@@ -44,2 +41,2 @@\n-bool G1FullCollector::is_in_closed(oop obj) const {\n-  return _region_attr_table.is_closed_archive(cast_from_oop<HeapWord*>(obj));\n+bool G1FullCollector::is_not_marked_through(oop obj) const {\n+  return _region_attr_table.is_not_marked_through(cast_from_oop<HeapWord*>(obj));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-class G1ResetPinnedClosure : public HeapRegionClosure {\n+\/\/ Do work for all not-compacted regions.\n+class G1ResetNotCompactedClosure : public HeapRegionClosure {\n@@ -42,1 +43,1 @@\n-  G1ResetPinnedClosure(G1FullCollector* collector) : _collector(collector) { }\n+  G1ResetNotCompactedClosure(G1FullCollector* collector) : _collector(collector) { }\n@@ -46,1 +47,2 @@\n-    if (!_collector->is_in_pinned(region_index)) {\n+    \/\/ There is nothing to do for compacted or not marked through regions.\n+    if (!_collector->is_not_compacted_but_marked_through(region_index)) {\n@@ -98,1 +100,1 @@\n-  G1ResetPinnedClosure hc(collector());\n+  G1ResetNotCompactedClosure hc(collector());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-\/\/ In particular, the table collects whether a region should be considered pinned\n-\/\/ during full gc (only), and that there are two reasons a\n-\/\/ region is pinned (and excluded from compaction):\n+\/\/ In particular, the table collects whether a region should be compacted, not\n+\/\/ compacted, or not even marked through.\n+\/\/ Reasons for not compacting a region:\n@@ -39,0 +39,2 @@\n+\/\/ Not marked through regions are neither compacted nor even marked through for\n+\/\/ performance reasons. Currently only Closed Archive regions are of this kind.\n@@ -40,5 +42,3 @@\n-  static const uint8_t Normal = 0;        \/\/ Other kind of region\n-  static const uint8_t Pinned = 1;        \/\/ Region is a pinned (non-Closed Archive) region\n-  static const uint8_t ClosedArchive = 2; \/\/ Region is a (pinned) Closed Archive region\n-\n-  STATIC_ASSERT(ClosedArchive > Pinned);\n+  static const uint8_t Compacted = 0;        \/\/ Region will be compacted.\n+  static const uint8_t NotCompacted = 1;     \/\/ Region should not be compacted, but otherwise handled as usual.\n+  static const uint8_t NotMarkedThrough = 2; \/\/ Region should not even be marked through.\n@@ -58,1 +58,1 @@\n-  void set_closed_archive(uint idx) { set_by_index(idx, ClosedArchive); }\n+  void set_not_marked_through(uint idx) { set_by_index(idx, NotMarkedThrough); }\n@@ -60,1 +60,1 @@\n-  bool is_closed_archive(HeapWord* obj) const {\n+  bool is_not_marked_through(HeapWord* obj) const {\n@@ -62,1 +62,1 @@\n-    return get_by_address(obj) == ClosedArchive;\n+    return get_by_address(obj) == NotMarkedThrough;\n@@ -65,11 +65,1 @@\n-  void set_pinned(uint idx) { set_by_index(idx, Pinned); }\n-\n-  bool is_pinned_or_closed(HeapWord* obj) const {\n-    assert(!is_invalid(obj), \"not initialized yet\");\n-    return get_by_address(obj) >= Pinned;\n-  }\n-\n-  bool is_pinned(HeapWord* obj) const {\n-    assert(!is_invalid(obj), \"not initialized yet\");\n-    return get_by_address(obj) == Pinned;\n-  }\n+  void set_not_compacted(uint idx) { set_by_index(idx, NotCompacted); }\n@@ -77,2 +67,2 @@\n-  bool is_pinned(uint idx) const {\n-    return get_by_index(idx) == Pinned;\n+  bool is_not_compacted_but_marked_through(uint idx) const {\n+    return get_by_index(idx) == NotCompacted;\n@@ -81,1 +71,1 @@\n-  void set_normal(uint idx) { set_by_index(idx, Normal); }\n+  void set_compacted(uint idx) { set_by_index(idx, Compacted); }\n@@ -83,1 +73,1 @@\n-  bool is_normal(HeapWord* obj) const {\n+  bool is_compacted(HeapWord* obj) const {\n@@ -85,1 +75,1 @@\n-    return get_by_address(obj) == Normal;\n+    return get_by_address(obj) == Compacted;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":17,"deletions":27,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  if (_collector->is_in_closed(obj)) {\n+  if (_collector->is_not_marked_through(obj)) {\n@@ -58,3 +58,3 @@\n-      \/\/ It is not necessary to preserve marks for objects in pinned regions because\n-      \/\/ we do not change their headers (i.e. forward them).\n-      !_collector->is_in_pinned(obj)) {\n+      \/\/ It is not necessary to preserve marks for objects in regions we do not\n+      \/\/ compact because we do not change their headers (i.e. forward them).\n+      _collector->is_compacted(obj)) {\n@@ -84,2 +84,2 @@\n-      assert(_bitmap->is_marked(obj) || _collector->is_in_closed(obj),\n-             \"Must be marked by other or closed archive object\");\n+      assert(_bitmap->is_marked(obj) || _collector->is_not_marked_through(obj),\n+             \"Must be marked by other or object in not marked through region\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  if (_collector->is_in_pinned_or_closed(obj)) {\n-    \/\/ We never forward objects in pinned regions so there is no need to\n+  if (!_collector->is_compacted(obj)) {\n+    \/\/ We never forward objects in non-compacted regions so there is no need to\n@@ -99,1 +99,1 @@\n-  return _bitmap->is_marked(p) || _collector->is_in_closed(p);\n+  return _bitmap->is_marked(p) || _collector->is_not_marked_through(p);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  bool force_pinned = false;\n+  bool force_not_compacted = false;\n@@ -69,1 +69,1 @@\n-      force_pinned = true;\n+      force_not_compacted = true;\n@@ -77,1 +77,1 @@\n-  _collector->update_attribute_table(hr, force_pinned);\n+  _collector->update_attribute_table(hr, force_not_compacted);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}