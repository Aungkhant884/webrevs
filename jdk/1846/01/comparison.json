{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -647,1 +647,0 @@\n-  DEBUG_ONLY(ResetNoHandleMark rnhm);\n@@ -649,6 +648,4 @@\n-  address continuation = NULL;\n-  {\n-    \/\/ Enter VM mode by calling the helper\n-    ResetNoHandleMark rnhm;\n-    continuation = exception_handler_for_pc_helper(thread, exception, pc, nm);\n-  }\n+\n+  \/\/ Enter VM mode by calling the helper\n+  address continuation = exception_handler_for_pc_helper(thread, exception, pc, nm);\n+\n@@ -1310,4 +1307,0 @@\n-  Thread* THREAD = thread;\n-  debug_only(NoHandleMark nhm;)\n-  {\n-    \/\/ Enter VM mode\n@@ -1315,3 +1308,3 @@\n-    ResetNoHandleMark rnhm;\n-    patch_code(thread, load_klass_patching_id);\n-  }\n+  \/\/ Enter VM mode\n+  patch_code(thread, load_klass_patching_id);\n+\n@@ -1321,1 +1314,0 @@\n-\n@@ -1329,4 +1321,2 @@\n-  Thread* THREAD = thread;\n-  debug_only(NoHandleMark nhm;)\n-  {\n-    \/\/ Enter VM mode\n+  \/\/ Enter VM mode\n+  patch_code(thread, load_mirror_patching_id);\n@@ -1334,3 +1324,0 @@\n-    ResetNoHandleMark rnhm;\n-    patch_code(thread, load_mirror_patching_id);\n-  }\n@@ -1340,1 +1327,0 @@\n-\n@@ -1348,4 +1334,2 @@\n-  Thread* THREAD = thread;\n-  debug_only(NoHandleMark nhm;)\n-  {\n-    \/\/ Enter VM mode\n+  \/\/ Enter VM mode\n+  patch_code(thread, load_appendix_patching_id);\n@@ -1353,3 +1337,0 @@\n-    ResetNoHandleMark rnhm;\n-    patch_code(thread, load_appendix_patching_id);\n-  }\n@@ -1359,1 +1340,0 @@\n-\n@@ -1375,4 +1355,3 @@\n-  Thread* THREAD = thread;\n-  debug_only(NoHandleMark nhm;)\n-  {\n-    \/\/ Enter VM mode\n+  \/\/ Enter VM mode\n+\n+  patch_code(thread, access_field_patching_id);\n@@ -1380,3 +1359,0 @@\n-    ResetNoHandleMark rnhm;\n-    patch_code(thread, access_field_patching_id);\n-  }\n@@ -1386,1 +1362,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":15,"deletions":40,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-  ResetNoHandleMark rnhm;                   \\\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -706,2 +706,0 @@\n-    ResetNoHandleMark rnm; \/\/ Might be called from LEAF\/QUICK ENTRY\n-    HandleMark hm(thread);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1806,1 +1806,0 @@\n-    ResetNoHandleMark rnhm;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -375,1 +375,0 @@\n-  ResetNoHandleMark     _rnhm;\n@@ -382,1 +381,0 @@\n-      _rnhm(),\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,1 +391,0 @@\n-  ResetNoHandleMark rnhm;\n@@ -419,1 +418,0 @@\n-  ResetNoHandleMark rnhm;\n@@ -431,1 +429,0 @@\n-    ResetNoHandleMark rnhm;\n@@ -471,1 +468,0 @@\n-      ResetNoHandleMark rnhm;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n-  ResetNoHandleMark rnhm;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,0 @@\n-  ResetNoHandleMark rnhm;                     \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -375,1 +375,0 @@\n-  DEBUG_ONLY(ResetNoHandleMark rnhm);\n@@ -377,6 +376,4 @@\n-  address continuation = NULL;\n-  {\n-    \/\/ Enter VM mode by calling the helper\n-    ResetNoHandleMark rnhm;\n-    continuation = exception_handler_for_pc_helper(thread, exception, pc, cm);\n-  }\n+\n+  \/\/ Enter VM mode by calling the helper\n+  address continuation = exception_handler_for_pc_helper(thread, exception, pc, cm);\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,0 @@\n-  ResetNoHandleMark rnm; \/\/ Might be called from LEAF\/QUICK ENTRY\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1362,1 +1362,0 @@\n-  debug_only(NoHandleMark __hm;)\n@@ -1364,3 +1363,0 @@\n-  address handler_address = NULL;\n-  {\n-    \/\/ Enter the VM\n@@ -1368,3 +1364,2 @@\n-    ResetNoHandleMark rnhm;\n-    handler_address = handle_exception_C_helper(thread, nm);\n-  }\n+  \/\/ Enter the VM\n+  address handler_address = handle_exception_C_helper(thread, nm);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1944,2 +1944,0 @@\n-  \/* jni_GetField_probe_nh() assumes that is not okay to create handles *\/ \\\n-  \/* and creates a ResetNoHandleMark.                                   *\/ \\\n@@ -2011,2 +2009,0 @@\n-  \/\/ jni_SetField_probe_nh() assumes that is not okay to create handles\n-  \/\/ and creates a ResetNoHandleMark.\n@@ -2035,2 +2031,0 @@\n-  \/* jni_SetField_probe_nh() assumes that is not okay to create handles *\/ \\\n-  \/* and creates a ResetNoHandleMark.                                   *\/ \\\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1889,5 +1889,1 @@\n-    \/\/ At least one field access watch is set so we have more work\n-    \/\/ to do. This wrapper is used by \"quick\" entry points that don't\n-    \/\/ allow us to create handles in post_field_access_by_jni(). We\n-    \/\/ override that with a ResetNoHandleMark.\n-    ResetNoHandleMark rnhm;\n+    \/\/ At least one field access watch is set so we have more work to do.\n@@ -1984,5 +1980,1 @@\n-    \/\/ At least one field modification watch is set so we have more work\n-    \/\/ to do. This wrapper is used by \"quick\" entry points that don't\n-    \/\/ allow us to create handles in post_field_modification_by_jni(). We\n-    \/\/ override that with a ResetNoHandleMark.\n-    ResetNoHandleMark rnhm;\n+    \/\/ At least one field modification watch is set so we have more work to do.\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,4 +153,3 @@\n-\/\/ analysis, The method was changed from JRT_LEAF to JRT_BLOCK_ENTRY and\n-\/\/ ResetNoHandleMark and HandleMark were removed from it. The actual reallocation\n-\/\/ of previously eliminated objects occurs in realloc_objects, which is\n-\/\/ called from the method fetch_unroll_info_helper below.\n+\/\/ analysis, The method was changed from JRT_LEAF to JRT_BLOCK_ENTRY.\n+\/\/ The actual reallocation of previously eliminated objects occurs in realloc_objects,\n+\/\/ which is called from the method fetch_unroll_info_helper below.\n@@ -692,4 +691,0 @@\n-  \/\/ It is actually ok to allocate handles in a leaf method. It causes no safepoints,\n-  \/\/ but makes the entry a little slower. There is however a little dance we have to\n-  \/\/ do in debug mode to get around the NoHandleMark code in the JRT_LEAF macro\n-  ResetNoHandleMark rnhm; \/\/ No-op in release\/product versions\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,0 +291,3 @@\n+\/\/ ResetNoHandleMark is called in a context where there is an enclosing\n+\/\/ NoHandleMark.  Thread in _thread_in_native cannot create handles so\n+\/\/ this is used when transitioning via. ThreadInVMfromNative.\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,0 +194,1 @@\n+  ResetNoHandleMark __rnhm;\n@@ -353,1 +354,0 @@\n-  debug_only(NoHandleMark __hm;)                                     \\\n@@ -359,1 +359,0 @@\n-  debug_only(ResetNoHandleMark __rnhm;)                              \\\n@@ -452,0 +451,1 @@\n+    debug_only(NoHandleMark __hm;)                                   \\\n@@ -484,0 +484,1 @@\n+    debug_only(NoHandleMark __hm;)                                   \\\n@@ -492,0 +493,1 @@\n+    debug_only(ResetNoHandleMark __rnhm;)                            \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  ResetNoHandleMark _rnhm;\n@@ -87,1 +86,0 @@\n-      _rnhm(),\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}