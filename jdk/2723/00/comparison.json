{"files":[{"patch":"@@ -8,2 +8,0 @@\n-import java.util.*;\n-\n@@ -11,0 +9,41 @@\n+\n+    interface C<E> {\n+        boolean add(E e);\n+    }\n+\n+    interface L<E> extends C<E> {\n+        @Override\n+        boolean add(E e);\n+        void add(int index, E element);\n+    }\n+\n+    static abstract class AC<E> implements C<E> {\n+        @Override\n+        public boolean add(E e) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    static abstract class AL<E> extends AC<E> implements L<E> {\n+        @Override\n+        public boolean add(E e) {\n+            return true;\n+        }\n+        @Override\n+        public void add(int index, E element) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    static class ARL<E> extends AL<E> implements L<E> {\n+        @Override\n+        public boolean add(E e) {\n+            throw new UnsupportedOperationException();\n+        }\n+        @Override\n+        public void add(int index, E element) {\n+        }\n+        private void add(E e, Object[] elementData, int s) {\n+        }\n+    }\n+\n@@ -12,1 +51,1 @@\n-        make(new ArrayList<String>(), new ArrayList<Integer>()).add(\"\");\n+        make(new ARL<String>(), new ARL<Integer>()).add(\"\");\n","filename":"test\/langtools\/tools\/javac\/T8187978\/FilterOutCandidatesForDiagnosticsTest.java","additions":42,"deletions":3,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-FilterOutCandidatesForDiagnosticsTest.java:12:64: compiler.err.cant.apply.symbols: kindname.method, add, java.lang.String,{(compiler.misc.inapplicable.method: kindname.method, java.util.ArrayList, add(compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc,java.lang.Object[],int), (compiler.misc.arg.length.mismatch)),(compiler.misc.inapplicable.method: kindname.method, java.util.ArrayList, add(compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: java.lang.String, compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc))),(compiler.misc.inapplicable.method: kindname.method, java.util.ArrayList, add(int,compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc), (compiler.misc.arg.length.mismatch))}\n+FilterOutCandidatesForDiagnosticsTest.java:51:52: compiler.err.cant.apply.symbols: kindname.method, add, java.lang.String,{(compiler.misc.inapplicable.method: kindname.method, FilterOutCandidatesForDiagnosticsTest.ARL, add(compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: java.lang.String, compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc))),(compiler.misc.inapplicable.method: kindname.method, FilterOutCandidatesForDiagnosticsTest.ARL, add(int,compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc), (compiler.misc.arg.length.mismatch)),(compiler.misc.inapplicable.method: kindname.method, FilterOutCandidatesForDiagnosticsTest.ARL, add(compiler.misc.type.captureof: 1, ? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<? extends java.lang.Object&java.io.Serializable&java.lang.Comparable<?>&java.lang.constant.Constable&java.lang.constant.ConstantDesc>&java.lang.constant.Constable&java.lang.constant.ConstantDesc,java.lang.Object[],int), (compiler.misc.arg.length.mismatch))}\n","filename":"test\/langtools\/tools\/javac\/T8187978\/FilterOutCandidatesForDiagnosticsTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}