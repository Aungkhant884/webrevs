{"files":[{"patch":"@@ -532,1 +532,1 @@\n-                xml.writeAttribute(\"Argument\", \"\\\"%1\\\"\");\n+                xml.writeAttribute(\"Argument\", \"\\\"%1\\\" %*\");\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.awt.Desktop;\n+import java.io.IOException;\n@@ -26,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.Collection;\n@@ -27,0 +31,1 @@\n+import java.util.List;\n@@ -28,0 +33,2 @@\n+import java.util.Objects;\n+import java.util.Optional;\n@@ -100,0 +107,138 @@\n+    Iterable<TestRun> getTestRuns() {\n+        return Optional.ofNullable(testRuns).orElseGet(() -> {\n+            var builder = createTestRuns()\n+                    .setCurrentInvocationType(InvocationType.DesktopOpenAssociatedFile)\n+                    .addTestRunForFilenames(\"test_desktop_open_file\");\n+            if (TKit.isWindows()) {\n+                builder.setCurrentInvocationType(InvocationType.WinCommandLine)\n+                        .addTestRunForFilenames(\"test_cmd_line\")\n+                        .setCurrentInvocationType(InvocationType.WinDesktopOpenShortcut)\n+                        .addTestRunForFilenames(\"test_desktop_open_shortcut\");\n+            }\n+            return builder.testRuns;\n+        });\n+    }\n+\n+    public static TestRunsBuilder createTestRuns() {\n+        return new TestRunsBuilder();\n+    }\n+\n+    static class TestRun {\n+        Iterable<String> getFileNames() {\n+            return testFileNames;\n+        }\n+\n+        List<String> openFiles(List<Path> testFiles) throws IOException {\n+            \/\/ current supported invocation types work only on single files\n+            Path testFile = testFiles.get(0);\n+\n+            \/\/ To test unicode arguments on Windows manually:\n+            \/\/ 1. add the following argument (\"Hello\" in Bulgarian) to the\n+            \/\/    additionalArgs list: \"\\u0417\\u0434\\u0440\\u0430\\u0432\\u0435\\u0439\\u0442\\u0435\"\n+            \/\/ 2. in Control Panel -> Region -> Administrative -> Language for non-Unicode programs\n+            \/\/    change the system locale to \"Bulgarian (Bulgaria)\"\n+            \/\/ 3. reboot Windows and re-run the test\n+\n+            switch (invocationType) {\n+                case DesktopOpenAssociatedFile: {\n+                    TKit.trace(String.format(\"Use desktop to open [%s] file\", testFile));\n+                    Desktop.getDesktop().open(testFile.toFile());\n+                    return List.of(testFile.toString());\n+                }\n+                case WinCommandLine: {\n+                    List<String> additionalArgs = List.of(\"foo\", \"bar baz\", \"boo\");\n+                    TKit.trace(String.format(\"Use command line to open [%s] file\", testFile));\n+                    ArrayList<String> cmdLine = new ArrayList<>(List.of(\"cmd\", \"\/c\", testFile.toString()));\n+                    cmdLine.addAll(additionalArgs);\n+                    Executor.of(cmdLine.toArray(new String[0])).execute();\n+                    ArrayList<String> expectedArgs = new ArrayList<>(List.of(testFile.toString()));\n+                    expectedArgs.addAll(additionalArgs);\n+                    return expectedArgs;\n+                }\n+                case WinDesktopOpenShortcut: {\n+                    Path testDir = testFile.getParent();\n+                    List<String> additionalArgs = List.of(\"foo\", \"bar baz\", \"boo\");\n+                    \/\/ create a shortcut and open it with desktop\n+                    final Path createShortcutVbs = testDir.resolve(\"createShortcut.vbs\");\n+                    final Path shortcutLnk = testDir.resolve(\"shortcut.lnk\");\n+                    StringBuilder shortcutArgs = new StringBuilder();\n+                    for (int i = 0; i < additionalArgs.size(); i++) {\n+                        String arg = additionalArgs.get(i);\n+                        if (arg.contains(\" \")) {\n+                            shortcutArgs.append(String.format(\"\\\"\\\"%s\\\"\\\"\", arg));\n+                        } else {\n+                            shortcutArgs.append(arg);\n+                        }\n+                        if (i < additionalArgs.size() - 1) {\n+                            shortcutArgs.append(\" \");\n+                        }\n+                    }\n+                    TKit.createTextFile(createShortcutVbs, List.of(\n+                            \"Dim sc, shell\",\n+                            \"Set shell = WScript.CreateObject (\\\"WScript.Shell\\\")\",\n+                            String.format(\"Set sc = shell.CreateShortcut (\\\"%s\\\")\", shortcutLnk),\n+                            String.format(\"sc.TargetPath = \\\"\\\"\\\"%s\\\"\\\"\\\"\", testFile),\n+                            String.format(\"sc.Arguments = \\\"%s\\\"\", shortcutArgs.toString()),\n+                            String.format(\"sc.WorkingDirectory = \\\"\\\"\\\"%s\\\"\\\"\\\"\", testDir),\n+                            \"sc.Save()\"\n+                    ));\n+                    Executor.of(\"cscript\", \"\/nologo\", createShortcutVbs.toString()).execute();\n+                    TKit.assertFileExists(shortcutLnk);\n+                    TKit.trace(String.format(\"Use desktop to open [%s] file\", shortcutLnk));\n+                    Desktop.getDesktop().open(shortcutLnk.toFile());\n+                    ArrayList<String> expectedArgs = new ArrayList<>(List.of(testFile.toString()));\n+                    expectedArgs.addAll(additionalArgs);\n+                    return expectedArgs;\n+                }\n+                default:\n+                    throw new IllegalStateException(String.format(\n+                            \"Invalid invocationType: [%s]\", invocationType));\n+            }\n+        }\n+\n+        private TestRun(Collection<String> testFileNames,\n+                InvocationType invocationType) {\n+\n+            Objects.requireNonNull(invocationType);\n+\n+            if (testFileNames.size() == 0) {\n+                throw new IllegalArgumentException(\"Empty test file names list\");\n+            }\n+\n+            if (invocationType == InvocationType.DesktopOpenAssociatedFile && testFileNames.size() != 1) {\n+                throw new IllegalArgumentException(\"Only one file can be configured for opening with the desktop\");\n+            }\n+\n+            this.testFileNames = testFileNames;\n+            this.invocationType = invocationType;\n+        }\n+\n+        private final Collection<String> testFileNames;\n+        private final InvocationType invocationType;\n+    }\n+\n+    public static class TestRunsBuilder {\n+        public TestRunsBuilder setCurrentInvocationType(InvocationType v) {\n+            curInvocationType = v;\n+            return this;\n+        }\n+\n+        public TestRunsBuilder addTestRunForFilenames(String ... filenames) {\n+            testRuns.add(new TestRun(List.of(filenames), curInvocationType));\n+            return this;\n+        }\n+\n+        public void applyTo(FileAssociations fa) {\n+            fa.testRuns = testRuns;\n+        }\n+\n+        private InvocationType curInvocationType = InvocationType.DesktopOpenAssociatedFile;\n+        private List<TestRun> testRuns = new ArrayList<>();\n+    }\n+\n+    public static enum InvocationType {\n+        DesktopOpenAssociatedFile,\n+        WinCommandLine,\n+        WinDesktopOpenShortcut\n+    }\n+\n@@ -104,0 +249,1 @@\n+    private Collection<TestRun> testRuns;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/FileAssociations.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.test.Functional.ThrowingConsumer;\n@@ -474,0 +475,11 @@\n+    private static void withTestFileAssociationsFile(FileAssociations fa,\n+            ThrowingConsumer<Path> consumer) {\n+        boolean iterated[] = new boolean[] { false };\n+        PackageTest.withFileAssociationsTestRuns(fa, (testRun, testFiles) -> {\n+            if (!iterated[0]) {\n+                iterated[0] = true;\n+                consumer.accept(testFiles.get(0));\n+            }\n+        });\n+    }\n+\n@@ -480,1 +492,1 @@\n-            PackageTest.withTestFileAssociationsFile(fa, testFile -> {\n+            withTestFileAssociationsFile(fa, testFile -> {\n@@ -504,1 +516,1 @@\n-            PackageTest.withTestFileAssociationsFile(fa, testFile -> {\n+            withTestFileAssociationsFile(fa, testFile -> {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.util.stream.StreamSupport;\n@@ -230,9 +231,17 @@\n-    static void withTestFileAssociationsFile(FileAssociations fa,\n-            ThrowingConsumer<Path> consumer) {\n-        final Path testFileDefaultName = Path.of(\"test\" + fa.getSuffix());\n-        TKit.withTempFile(testFileDefaultName, testFile -> {\n-            if (TKit.isLinux()) {\n-                LinuxHelper.initFileAssociationsTestFile(testFile);\n-            }\n-            consumer.accept(testFile);\n-        });\n+    static void withFileAssociationsTestRuns(FileAssociations fa,\n+            ThrowingBiConsumer<FileAssociations.TestRun, List<Path>> consumer) {\n+        for (var testRun : fa.getTestRuns()) {\n+            TKit.withTempDirectory(\"fa-test-files\", tempDir -> {\n+                List<Path> testFiles = StreamSupport.stream(testRun.getFileNames().spliterator(), false).map(fname -> {\n+                    return tempDir.resolve(fname + fa.getSuffix()).toAbsolutePath().normalize();\n+                }).toList();\n+\n+                testFiles.forEach(toConsumer(Files::createFile));\n+\n+                if (TKit.isLinux()) {\n+                    testFiles.forEach(LinuxHelper::initFileAssociationsTestFile);\n+                }\n+\n+                consumer.accept(testRun, testFiles);\n+            });\n+        }\n@@ -241,2 +250,1 @@\n-    PackageTest addHelloAppFileAssociationsVerifier(FileAssociations fa,\n-            String... faLauncherDefaultArgs) {\n+    PackageTest addHelloAppFileAssociationsVerifier(FileAssociations fa) {\n@@ -264,4 +272,2 @@\n-            withTestFileAssociationsFile(fa, testFile -> {\n-                testFile = testFile.toAbsolutePath().normalize();\n-\n-                final Path appOutput = testFile.getParent()\n+            withFileAssociationsTestRuns(fa, (testRun, testFiles) -> {\n+                final Path appOutput = testFiles.get(0).getParent()\n@@ -271,3 +277,1 @@\n-                TKit.trace(String.format(\"Use desktop to open [%s] file\",\n-                        testFile));\n-                Desktop.getDesktop().open(testFile.toFile());\n+                List<String> expectedArgs = testRun.openFiles(testFiles);\n@@ -276,4 +280,0 @@\n-                List<String> expectedArgs = new ArrayList<>(List.of(\n-                        faLauncherDefaultArgs));\n-                expectedArgs.add(testFile.toString());\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n@@ -79,1 +79,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/share\/FileAssociationsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}