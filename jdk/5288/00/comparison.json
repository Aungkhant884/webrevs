{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,4 @@\n-\t$(GREP) -v HelloClasslist $@.raw.2 > $@\n+\t$(GREP) -v HelloClasslist $@.raw.2 > $@.raw.3\n+\t$(FIXPATH) $(INTERIM_IMAGE_DIR)\/bin\/java \\\n+\t    -cp $(SUPPORT_OUTPUTDIR)\/classlist.jar \\\n+\t    build.tools.classlist.SortClasslist $@.raw.3 > $@\n","filename":"make\/GenerateLinkOptData.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * This application is meant to be run to create a classlist file representing\n+ * common use.\n+ *\n+ * The classlist is produced by adding -XX:DumpLoadedClassList=classlist\n+ *\/\n+package build.tools.classlist;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+import java.util.Scanner;\n+\n+\/**\n+ * The classlist generated by build.tools.classlist.HelloClasslist\n+ * may have non-deterministic contents, affected by Java thread execution order.\n+ * SortClasslist sorts the file to make the JDK image's contents more deterministic.\n+ *\/\n+public class SortClasslist {\n+    public static void main(String args[]) throws FileNotFoundException  {\n+        ArrayList<String> classes = new ArrayList<>();\n+        ArrayList<String> lambdas = new ArrayList<>();\n+\n+        FileInputStream fis = new FileInputStream(args[0]);\n+        Scanner scanner = new Scanner(fis);\n+        Pattern p = Pattern.compile(\"^(.*)[ ]+id:[ ]+([0-9]+)$\");\n+        while (scanner.hasNextLine()) {\n+            String line = scanner.nextLine();\n+            Matcher m = p.matcher(line);\n+            if (m.find()) {\n+                \/\/ We found a pattern like this:\n+                \/\/\n+                \/\/    <beginning of line>java\/lang\/Object id: 0<end of line>\n+                \/\/\n+                \/\/ This is a class used by one of the three builtin class loaders\n+                \/\/ (boot\/platform\/app). Since the default classlist does not support unregistered\n+                \/\/ classes, the ID is unused. Let's omit the ID, as it may be non-deterministic.\n+                String className = m.group(1); \/\/ matches the (.*) part of the pattern.\n+                classes.add(className);\n+            } else if (line.startsWith(\"#\")) {\n+                \/\/ Comments -- print them first without sorting. These appear only at the top\n+                \/\/ of the file.\n+                System.out.println(line);\n+            } else if (line.startsWith(\"@\")) {\n+                \/\/ @lambda-form-invoker, @lambda-proxy, etc.\n+                lambdas.add(line);\n+            } else {\n+                \/\/ HelloClasslist should not load classes in custom class loaders, or else\n+                \/\/ we might end up with output like this:\n+                \/\/\n+                \/\/     SomeClass id: 123 super: 0 source: foo.jar\n+                \/\/\n+                \/\/ Such classes won't be usable for common applications, so they should\n+                \/\/ not be included in the JDK's default classlist.\n+                System.err.println(\"Unexpected line: \" + line);\n+                System.err.println(\"The default classlist should not contain unregistered classes\");\n+                System.exit(1);\n+            }\n+        }\n+\n+        Collections.sort(classes);\n+        Collections.sort(lambdas);\n+\n+        for (String s : classes) {\n+            System.out.println(s);\n+        }\n+        for (String s : lambdas) {\n+            System.out.println(s);\n+        }\n+    }\n+}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/classlist\/SortClasslist.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -359,2 +359,2 @@\n-            elif [[ \"$f\" = *\"\/lib\/classlist\" ]] || [ \"$SUFFIX\" = \"jar_contents\" ]; then\n-                # The classlist files may have some lines in random order\n+            elif [ \"$SUFFIX\" = \"jar_contents\" ]; then\n+                # The jar_contents files may have some lines in random order\n@@ -365,8 +365,2 @@\n-                # Also filter out the \"id: NNNN\" in the classlists\n-                if [[ \"$f\" = *\"\/lib\/classlist\" ]]; then\n-                    $CAT $OTHER_DIR\/$f | $SORT | $SED \"s| id: .*||g\" > $OTHER_FILE\n-                    $CAT $THIS_DIR\/$f  | $SORT | $SED \"s| id: .*||g\" > $THIS_FILE\n-                else\n-                    $CAT $OTHER_DIR\/$f | $SORT > $OTHER_FILE\n-                    $CAT $THIS_DIR\/$f  | $SORT > $THIS_FILE\n-                fi\n+                $CAT $OTHER_DIR\/$f | $SORT > $OTHER_FILE\n+                $CAT $THIS_DIR\/$f  | $SORT > $THIS_FILE\n","filename":"make\/scripts\/compare.sh","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"}]}