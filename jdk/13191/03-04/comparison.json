{"files":[{"patch":"@@ -556,1 +556,1 @@\n-    if (!VM_ParallelGCSystemGC::is_cause_full(cause) || op.full_gc_succeeded()) {\n+    if (!VM_ParallelGCSystemGC::is_cause_full(cause) || op.gc_succeeded()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  _full_gc_succeeded(false)\n+  _gc_succeeded(false)\n@@ -74,1 +74,1 @@\n-    _full_gc_succeeded = heap->invoke_scavenge();\n+    _gc_succeeded = heap->invoke_scavenge();\n@@ -76,1 +76,1 @@\n-    _full_gc_succeeded = PSParallelCompact::invoke(false);\n+    _gc_succeeded = PSParallelCompact::invoke(false);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  bool _full_gc_succeeded;\n+  bool _gc_succeeded;\n@@ -48,1 +48,1 @@\n-  bool full_gc_succeeded() const { return _full_gc_succeeded; }\n+  bool gc_succeeded() const { return _gc_succeeded; }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,0 +209,3 @@\n+        \/\/ Start threads to allocate memory, this will trigger both GCLocker initiated\n+        \/\/ garbage collections (GCs) and regular GCs. Thus increasing the likelihood of\n+        \/\/ having different types of GCs happening concurrently with the System.gc call.\n","filename":"test\/hotspot\/jtreg\/gc\/TestJNICriticalStressTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}