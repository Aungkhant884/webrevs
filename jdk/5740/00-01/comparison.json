{"files":[{"patch":"@@ -65,0 +65,6 @@\n+        \/\/ podman versions below 3.3.1 hava a bug where cross-container testing with correct\n+        \/\/ permissions fails. See JDK-8273216\n+        if (IS_PODMAN && PodmanVersion.VERSION_3_3_1.compareTo(getPodmanVersion()) > 0) {\n+            throw new SkippedException(\"Podman version too old for this test. Expected >= 3.3.1\");\n+        }\n+\n@@ -200,0 +206,74 @@\n+\n+    \/\/ pre: IS_PODMAN == true\n+    private static String getPodmanVersionStr() {\n+        if (!IS_PODMAN) {\n+            return null;\n+        }\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(Container.ENGINE_COMMAND, \"--version\");\n+            OutputAnalyzer out = new OutputAnalyzer(pb.start())\n+                .shouldHaveExitValue(0);\n+            String result = out.asLines().get(0);\n+            System.out.println(Container.ENGINE_COMMAND + \" --version returning: \" + result);\n+            return result;\n+        } catch (Exception e) {\n+            System.out.println(Container.ENGINE_COMMAND + \" --version command failed. Returning null\");\n+            return null;\n+        }\n+    }\n+\n+    private static PodmanVersion getPodmanVersion() {\n+        return PodmanVersion.fromVersionString(getPodmanVersionStr());\n+    }\n+\n+    private static class PodmanVersion implements Comparable<PodmanVersion> {\n+        private static final PodmanVersion DEFAULT = new PodmanVersion(0, 0, 0);\n+        private static final PodmanVersion VERSION_3_3_1 = new PodmanVersion(3, 3, 1);\n+        private final int major;\n+        private final int minor;\n+        private final int micro;\n+\n+        private PodmanVersion(int major, int minor, int micro) {\n+            this.major = major;\n+            this.minor = minor;\n+            this.micro = micro;\n+        }\n+\n+        @Override\n+        public int compareTo(PodmanVersion other) {\n+            if (this.major > other.major) {\n+                return 1;\n+            } else if (this.major < other.major) {\n+                return -1;\n+            } else { \/\/ equal major\n+                if (this.minor > other.minor) {\n+                    return 1;\n+                } else if (this.minor < other.minor) {\n+                    return -1;\n+                } else { \/\/ equal majors and minors\n+                    if (this.micro > other.micro) {\n+                        return 1;\n+                    } else if (this.micro < other.micro) {\n+                        return -1;\n+                    } else {\n+                        \/\/ equal majors, minors, micro\n+                        return 0;\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static PodmanVersion fromVersionString(String version) {\n+            try {\n+                \/\/ Example 'podman version 3.2.1'\n+                String versNums = version.split(\"\\\\s+\", 3)[2];\n+                String[] numbers = versNums.split(\"\\\\.\", 3);\n+                return new PodmanVersion(Integer.parseInt(numbers[0]),\n+                                         Integer.parseInt(numbers[1]),\n+                                         Integer.parseInt(numbers[2]));\n+            } catch (Exception e) {\n+                System.out.println(\"Failed to parse podman version: \" + version);\n+                return DEFAULT;\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJcmd.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"}]}