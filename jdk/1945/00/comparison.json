{"files":[{"patch":"@@ -3732,1 +3732,1 @@\n-                if (t1 != t2 && types.isSubtypeNoCapture(t2, t1)) {\n+                if (t1 != t2 && !t2.hasTag(ERROR) && types.isSubtypeNoCapture(t2, t1)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,15 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8259235\n+ * @summary Invocation of a method from a superinterface in a class that has an erroneous supertype\n+ *          should not crash javac.\n+ * @compile\/fail\/ref=SuperMethodCallBroken.out -XDdev -XDrawDiagnostics SuperMethodCallBroken.java\n+ *\/\n+public abstract class SuperMethodCallBroken extends Undef implements I, java.util.List<String> {\n+    public void test() {\n+        I.super.test();\n+    }\n+}\n+interface I {\n+    public default void test() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/SuperMethodCallBroken.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+SuperMethodCallBroken.java:8:53: compiler.err.cant.resolve: kindname.class, Undef, , \n+1 error\n","filename":"test\/langtools\/tools\/javac\/recovery\/SuperMethodCallBroken.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}