{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerCPUThrottling\")\n+@Label(\"CPU Throttling\")\n+@Category({\"Operating System\", \"Container\", \"Processor\"})\n+@Description(\"Container CPU throttling related information.\")\n+public class ContainerCPUThrottlingEvent extends AbstractJDKEvent {\n+  @Label(\"CPU Elapsed Slices\")\n+  @Description(\"Number of time-slice periods that have elapsed if a CPU quota has been setup for the container.\")\n+  public long cpuElapsedSlices;\n+\n+  @Label(\"CPU Throttled Slices\")\n+  @Description(\"Number of time-slice periods that the CPU has been throttled or limited due to exceeding CPU quota.\")\n+  public long cpuThrottledSlices;\n+\n+  @Label(\"CPU Throttled Time\")\n+  @Description(\"Total time duration, in nanoseconds, that the CPU has been throttled or limited due to exceeding CPU quota.\")\n+  @Timespan\n+  public long cpuThrottledTime;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUThrottlingEvent.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -59,13 +59,0 @@\n-    @Label(\"CPU Elapsed Slices\")\n-    @Description(\"Number of time-slice periods that have elapsed if a CPU quota has been setup for the container.\")\n-    public long cpuElapsedSlices;\n-\n-    @Label(\"CPU Throttled Slices\")\n-    @Description(\"Number of time-slice periods that the CPU has been throttled or limited due to exceeding CPU quota.\")\n-    public long cpuThrottledSlices;\n-\n-    @Label(\"CPU Throttled Time\")\n-    @Description(\"Total time duration, in nanoseconds, that the CPU has been throttled or limited due to exceeding CPU quota.\")\n-    @Timespan\n-    public long cpuThrottledTime;\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.jfr.events.ContainerCPUThrottlingEvent;\n@@ -94,0 +95,1 @@\n+        ContainerCPUThrottlingEvent.class,\n@@ -116,0 +118,1 @@\n+    private static final Runnable emitContainerCPUThrottling = JDKEvents::emitContainerCPUThrottling;\n@@ -137,0 +140,1 @@\n+                RequestEngine.addTrustedJDKHook(ContainerCPUThrottlingEvent.class, emitContainerCPUThrottling);\n@@ -177,2 +181,0 @@\n-            t.cpuThrottledSlices = containerMetrics.getCpuNumThrottled();\n-            t.cpuThrottledTime = containerMetrics.getCpuThrottledTime();\n@@ -220,0 +222,11 @@\n+    private static void emitContainerCPUThrottling() {\n+        if (containerMetrics != null) {\n+            ContainerCPUThrottlingEvent event = new ContainerCPUThrottlingEvent();\n+\n+            event.cpuElapsedSlices = containerMetrics.getCpuNumPeriods();\n+            event.cpuThrottledSlices = containerMetrics.getCpuNumThrottled();\n+            event.cpuThrottledTime = containerMetrics.getCpuThrottledTime();\n+            event.commit();\n+        }\n+    }\n+\n@@ -250,0 +263,1 @@\n+        RequestEngine.removeHook(emitContainerCPUThrottling);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}