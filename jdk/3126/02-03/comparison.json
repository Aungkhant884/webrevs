{"files":[{"patch":"@@ -203,6 +203,4 @@\n-            if (event.shouldCommit()) {\n-                event.memoryFailCount = containerMetrics.getMemoryFailCount();\n-                event.memoryUsage = containerMetrics.getMemoryUsage();\n-                event.swapMemoryUsage = containerMetrics.getMemoryAndSwapUsage();\n-                event.commit();\n-            }\n+            event.memoryFailCount = containerMetrics.getMemoryFailCount();\n+            event.memoryUsage = containerMetrics.getMemoryUsage();\n+            event.swapMemoryUsage = containerMetrics.getMemoryAndSwapUsage();\n+            event.commit();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.jfr.EventSettings;\n@@ -37,1 +38,5 @@\n-            r.enable(eventName);\n+            EventSettings es = r.enable(eventName);\n+            for (int i = 1; i < args.length; i++) {\n+                String[] kv = args[i].split(\"=\");\n+                es = es.with(kv[0], kv[1]);\n+            }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/JfrReporter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -73,0 +73,6 @@\n+\n+            containerInfoTestCase();\n+            testCpuUsage();\n+            testCpuThrottling();\n+            testMemoryUsage();\n+            testIOUsage();\n@@ -78,4 +84,1 @@\n-    \/\/ This test case is currently not in use.\n-    \/\/ Once new Container events are available, this test case can be used to test\n-    \/\/ processor-related configuration such as active processor count (see JDK-8203359).\n-    private static void cpuTestCase() throws Exception {\n+    private static void containerInfoTestCase() throws Exception {\n@@ -85,1 +88,3 @@\n-                testCPUInfo(\"jdk.ContainerConfiguration\", i, i);\n+                for (int j=64; j <= 256; j *= 2) {\n+                    testContainerInfo(i, j);\n+                }\n@@ -89,3 +94,11 @@\n-    private static void testCPUInfo(String eventName, int valueToSet, int expectedValue) throws Exception {\n-        Common.logNewTestCase(\"CPUInfo: --cpus = \" + valueToSet);\n-        String fieldName = \"activeProcessorCount\";\n+    private static void testContainerInfo(int expectedCPUs, int expectedMemoryMB) throws Exception {\n+        Common.logNewTestCase(\"ContainerInfo: --cpus = \" + expectedCPUs + \" --memory=\" + expectedMemoryMB + \"m\");\n+        String eventName = \"jdk.ContainerConfiguration\";\n+        long expectedSlicePeriod = 100000; \/\/ default slice period\n+        long expectedMemoryLimit = expectedMemoryMB * 1024 * 1024;\n+\n+        String cpuCountFld = \"effectiveCpuCount\";\n+        String cpuQuotaFld = \"cpuQuota\";\n+        String cpuSlicePeriodFld = \"cpuSlicePeriod\";\n+        String memoryLimitFld = \"memoryLimit\";\n+\n@@ -94,1 +107,2 @@\n-                                      .addDockerOpts(\"--cpus=\" + valueToSet)\n+                                      .addDockerOpts(\"--cpus=\" + expectedCPUs)\n+                                      .addDockerOpts(\"--memory=\" + expectedMemoryMB + \"m\")\n@@ -97,1 +111,72 @@\n-            .shouldContain(fieldName + \" = \" + expectedValue);\n+            .shouldContain(cpuCountFld + \" = \" + expectedCPUs)\n+            .shouldContain(cpuSlicePeriodFld + \" = \" + expectedSlicePeriod)\n+            .shouldContain(cpuQuotaFld + \" = \" + expectedCPUs * expectedSlicePeriod)\n+            .shouldContain(memoryLimitFld + \" = \" + expectedMemoryLimit);\n+    }\n+\n+    private static void testCpuUsage() throws Exception {\n+        Common.logNewTestCase(\"CPU Usage\");\n+        String eventName = \"jdk.ContainerCPUUsage\";\n+\n+        String cpuTimeFld = \"cpuTime\";\n+        String cpuUserTimeFld = \"cpuUserTime\";\n+        String cpuSystemTimeFld = \"cpuSystemTime\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldNotContain(cpuTimeFld + \" = \" + 0)\n+            .shouldNotContain(cpuUserTimeFld + \" = \" + 0)\n+            .shouldNotContain(cpuSystemTimeFld + \" = \" + 0);\n+    }\n+\n+    private static void testMemoryUsage() throws Exception {\n+        Common.logNewTestCase(\"Memory Usage\");\n+        String eventName = \"jdk.ContainerMemoryUsage\";\n+\n+        String memoryPressureFld = \"memoryPressure\";\n+        String memoryFailCountFld = \"memoryFailCount\";\n+        String memoryUsageFld = \"memoryUsage\";\n+        String swapMemoryUsageFld = \"swapMemoryUsage\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(memoryPressureFld)\n+            .shouldContain(memoryFailCountFld)\n+            .shouldContain(memoryUsageFld)\n+            .shouldContain(swapMemoryUsageFld);\n+    }\n+\n+    private static void testIOUsage() throws Exception {\n+        Common.logNewTestCase(\"I\/O Usage\");\n+        String eventName = \"jdk.ContainerIOUsage\";\n+\n+        String serviceRequestsFld = \"serviceRequests\";\n+        String dataTransferredFld = \"dataTransferred\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(serviceRequestsFld)\n+            .shouldContain(dataTransferredFld);\n+    }\n+\n+    private static void testCpuThrottling() throws Exception {\n+        Common.logNewTestCase(\"CPU Throttling\");\n+        String eventName = \"jdk.ContainerCPUThrottling\";\n+\n+        String cpuElapsedSlicesFld = \"cpuElapsedSlices\";\n+        String cpuThrottledSlicesFld = \"cpuThrottledSlices\";\n+        String cpuThrottledTimeFld = \"cpuThrottledTime\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(cpuElapsedSlicesFld)\n+            .shouldContain(cpuThrottledSlicesFld)\n+            .shouldContain(cpuThrottledTimeFld);\n@@ -121,1 +206,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":95,"deletions":11,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -204,0 +204,6 @@\n+    \/\/ Containers\n+    public static final String ContainerConfiguration = PREFIX + \"ContainerConfiguration\";\n+    public static final String ContainerCPUUsage = PREFIX + \"ContainerCPUUsage\";\n+    public static final String ContainerCPUThrottling = PREFIX + \"ContainerCPUThrottling\";\n+    public static final String ContainerMemoryUsage = PREFIX + \"ContainerMemoryUsage\";\n+    public static final String ContainerIOUsage = PREFIX + \"ContainerIOUsage\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}