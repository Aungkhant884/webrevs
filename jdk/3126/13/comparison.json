{"files":[{"patch":"@@ -221,1 +221,2 @@\n-        jdk.management;\n+        jdk.management,\n+        jdk.jfr;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerCPUThrottling\")\n+@Label(\"CPU Throttling\")\n+@Category({\"Operating System\", \"Processor\"})\n+@Description(\"Container CPU throttling related information\")\n+public class ContainerCPUThrottlingEvent extends AbstractJDKEvent {\n+  @Label(\"CPU Elapsed Slices\")\n+  @Description(\"Number of time-slice periods that have elapsed if a CPU quota has been setup for the container\")\n+  public long cpuElapsedSlices;\n+\n+  @Label(\"CPU Throttled Slices\")\n+  @Description(\"Number of time-slice periods that the CPU has been throttled or limited due to exceeding CPU quota\")\n+  public long cpuThrottledSlices;\n+\n+  @Label(\"CPU Throttled Time\")\n+  @Description(\"Total time duration, in nanoseconds, that the CPU has been throttled or limited due to exceeding CPU quota\")\n+  @Timespan\n+  public long cpuThrottledTime;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUThrottlingEvent.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerCPUUsage\")\n+@Label(\"CPU Usage\")\n+@Category({\"Operating System\", \"Processor\"})\n+@Description(\"Container CPU usage related information\")\n+public class ContainerCPUUsageEvent extends AbstractJDKEvent {\n+  @Label(\"CPU Time\")\n+  @Description(\"Aggregate time consumed by all tasks in the container\")\n+  @Timespan\n+  public long cpuTime;\n+\n+  @Label(\"CPU User Time\")\n+  @Description(\"Aggregate user time consumed by all tasks in the container\")\n+  @Timespan\n+  public long cpuUserTime;\n+\n+  @Label(\"CPU System Time\")\n+  @Description(\"Aggregate system time consumed by all tasks in the container\")\n+  @Timespan\n+  public long cpuSystemTime;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUUsageEvent.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerConfiguration\")\n+@Label(\"Container Configuration\")\n+@Category({\"Operating System\"})\n+@Description(\"A set of container specific attributes\")\n+public final class ContainerConfigurationEvent extends AbstractJDKEvent {\n+    @Label(\"Container Type\")\n+    @Description(\"Container type information\")\n+    public String containerType;\n+\n+    @Label(\"CPU Slice Period\")\n+    @Description(\"Length of the scheduling period for processes within the container\")\n+    @Timespan(Timespan.MICROSECONDS)\n+    public long cpuSlicePeriod;\n+\n+    @Label(\"CPU Quota\")\n+    @Description(\"Total available run-time allowed during each scheduling period for all tasks in the container\")\n+    @Timespan(Timespan.MICROSECONDS)\n+    public long cpuQuota;\n+\n+    @Label(\"CPU Shares\")\n+    @Description(\"Relative weighting of processes with the container used for prioritizing the scheduling of processes across \" +\n+                 \"all containers running on a host\")\n+    public long cpuShares;\n+\n+    @Label(\"Effective CPU Count\")\n+    @Description(\"Number of effective processors that this container has available to it\")\n+    public long effectiveCpuCount;\n+\n+    @Label(\"Memory Soft Limit\")\n+    @Description(\"Hint to the operating system that allows groups to specify the minimum required amount of physical memory\")\n+    @DataAmount\n+    public long memorySoftLimit;\n+\n+    @Label(\"Memory Limit\")\n+    @Description(\"Maximum amount of physical memory that can be allocated in the container\")\n+    @DataAmount\n+    public long memoryLimit;\n+\n+    @Label(\"Memory and Swap Limit\")\n+    @Description(\"Maximum amount of physical memory and swap space, in bytes, that can be allocated in the container\")\n+    @DataAmount\n+    public long swapMemoryLimit;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerIOUsage\")\n+@Label(\"Container IO Usage\")\n+@Category({\"Operating System\", \"File System\"})\n+@Description(\"Container IO usage related information\")\n+public class ContainerIOUsageEvent extends AbstractJDKEvent {\n+\n+  @Label(\"Block IO Request Count\")\n+  @Description(\"Number of block IO requests to the disk that have been issued by the container\")\n+  public long serviceRequests;\n+\n+  @Label(\"Block IO Transfer\")\n+  @Description(\"Number of block IO bytes that have been transferred to\/from the disk by the container\")\n+  @DataAmount\n+  public long dataTransferred;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerIOUsageEvent.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerMemoryUsage\")\n+@Label(\"Container Memory Usage\")\n+@Category({\"Operating System\", \"Memory\"})\n+@Description(\"Container memory usage related information\")\n+public final class ContainerMemoryUsageEvent extends AbstractJDKEvent {\n+    @Label(\"Memory Fail Count\")\n+    @Description(\"Number of times that user memory requests in the container have exceeded the memory limit\")\n+    public long memoryFailCount;\n+\n+    @Label(\"Memory Usage\")\n+    @Description(\"Amount of physical memory, in bytes, that is currently allocated in the current container\")\n+    @DataAmount\n+    public long memoryUsage;\n+\n+    @Label(\"Memory and Swap Usage\")\n+    @Description(\"Amount of physical memory and swap space, in bytes, that is currently allocated in the current container\")\n+    @DataAmount\n+    public long swapMemoryUsage;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerMemoryUsageEvent.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -59,0 +59,1 @@\n+import jdk.internal.platform.Metrics;\n@@ -93,0 +94,5 @@\n+    \/*\n+     * This field will be lazily initialized and the access is not synchronized.\n+     * The possible data race is benign and is worth of not introducing any contention here.\n+     *\/\n+    private static Metrics[] metrics;\n@@ -723,0 +729,14 @@\n+    public static boolean shouldSkipBytecode(String eventName, Class<?> superClass) {\n+        if (superClass.getClassLoader() != null || !superClass.getName().equals(\"jdk.jfr.events.AbstractJDKEvent\")) {\n+            return false;\n+        }\n+        return eventName.startsWith(\"jdk.Container\") && getMetrics() == null;\n+    }\n+\n+    private static Metrics getMetrics() {\n+        if (metrics == null) {\n+            metrics = new Metrics[]{Metrics.systemMetrics()};\n+        }\n+        return metrics[0];\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Map;\n@@ -34,0 +35,5 @@\n+import jdk.jfr.events.ContainerIOUsageEvent;\n+import jdk.jfr.events.ContainerConfigurationEvent;\n+import jdk.jfr.events.ContainerCPUUsageEvent;\n+import jdk.jfr.events.ContainerCPUThrottlingEvent;\n+import jdk.jfr.events.ContainerMemoryUsageEvent;\n@@ -56,1 +62,2 @@\n-public final class JDKEvents {\n+import jdk.internal.platform.Container;\n+import jdk.internal.platform.Metrics;\n@@ -58,0 +65,1 @@\n+public final class JDKEvents {\n@@ -103,0 +111,6 @@\n+    private static final Runnable emitContainerConfiguration = JDKEvents::emitContainerConfiguration;\n+    private static final Runnable emitContainerCPUUsage = JDKEvents::emitContainerCPUUsage;\n+    private static final Runnable emitContainerCPUThrottling = JDKEvents::emitContainerCPUThrottling;\n+    private static final Runnable emitContainerMemoryUsage = JDKEvents::emitContainerMemoryUsage;\n+    private static final Runnable emitContainerIOUsage = JDKEvents::emitContainerIOUsage;\n+    private static Metrics containerMetrics = null;\n@@ -115,1 +129,1 @@\n-                initializationTriggered = true;\n+\n@@ -118,0 +132,3 @@\n+\n+                initializeContainerEvents();\n+                initializationTriggered = true;\n@@ -144,0 +161,15 @@\n+    private static void initializeContainerEvents() {\n+        containerMetrics = Container.metrics();\n+        SecuritySupport.registerEvent(ContainerConfigurationEvent.class);\n+        SecuritySupport.registerEvent(ContainerCPUUsageEvent.class);\n+        SecuritySupport.registerEvent(ContainerCPUThrottlingEvent.class);\n+        SecuritySupport.registerEvent(ContainerMemoryUsageEvent.class);\n+        SecuritySupport.registerEvent(ContainerIOUsageEvent.class);\n+\n+        RequestEngine.addTrustedJDKHook(ContainerConfigurationEvent.class, emitContainerConfiguration);\n+        RequestEngine.addTrustedJDKHook(ContainerCPUUsageEvent.class, emitContainerCPUUsage);\n+        RequestEngine.addTrustedJDKHook(ContainerCPUThrottlingEvent.class, emitContainerCPUThrottling);\n+        RequestEngine.addTrustedJDKHook(ContainerMemoryUsageEvent.class, emitContainerMemoryUsage);\n+        RequestEngine.addTrustedJDKHook(ContainerIOUsageEvent.class, emitContainerIOUsage);\n+    }\n+\n@@ -150,0 +182,57 @@\n+    private static void emitContainerConfiguration() {\n+        if (containerMetrics != null) {\n+            ContainerConfigurationEvent t = new ContainerConfigurationEvent();\n+            t.containerType = containerMetrics.getProvider();\n+            t.cpuSlicePeriod = containerMetrics.getCpuPeriod();\n+            t.cpuQuota = containerMetrics.getCpuQuota();\n+            t.cpuShares = containerMetrics.getCpuShares();\n+            t.effectiveCpuCount = containerMetrics.getEffectiveCpuCount();\n+            t.memorySoftLimit = containerMetrics.getMemorySoftLimit();\n+            t.memoryLimit = containerMetrics.getMemoryLimit();\n+            t.swapMemoryLimit = containerMetrics.getMemoryAndSwapLimit();\n+            t.commit();\n+        }\n+    }\n+\n+    private static void emitContainerCPUUsage() {\n+        if (containerMetrics != null) {\n+            ContainerCPUUsageEvent event = new ContainerCPUUsageEvent();\n+\n+            event.cpuTime = containerMetrics.getCpuUsage();\n+            event.cpuSystemTime = containerMetrics.getCpuSystemUsage();\n+            event.cpuUserTime = containerMetrics.getCpuUserUsage();\n+            event.commit();\n+        }\n+    }\n+    private static void emitContainerMemoryUsage() {\n+        if (containerMetrics != null) {\n+            ContainerMemoryUsageEvent event = new ContainerMemoryUsageEvent();\n+\n+            event.memoryFailCount = containerMetrics.getMemoryFailCount();\n+            event.memoryUsage = containerMetrics.getMemoryUsage();\n+            event.swapMemoryUsage = containerMetrics.getMemoryAndSwapUsage();\n+            event.commit();\n+        }\n+    }\n+\n+    private static void emitContainerIOUsage() {\n+        if (containerMetrics != null) {\n+            ContainerIOUsageEvent event = new ContainerIOUsageEvent();\n+\n+            event.serviceRequests = containerMetrics.getBlkIOServiceCount();\n+            event.dataTransferred = containerMetrics.getBlkIOServiced();\n+            event.commit();\n+        }\n+    }\n+\n+    private static void emitContainerCPUThrottling() {\n+        if (containerMetrics != null) {\n+            ContainerCPUThrottlingEvent event = new ContainerCPUThrottlingEvent();\n+\n+            event.cpuElapsedSlices = containerMetrics.getCpuNumPeriods();\n+            event.cpuThrottledSlices = containerMetrics.getCpuNumThrottled();\n+            event.cpuThrottledTime = containerMetrics.getCpuThrottledTime();\n+            event.commit();\n+        }\n+    }\n+\n@@ -175,1 +264,1 @@\n-        RequestEngine.removeHook(JDKEvents::emitExceptionStatistics);\n+        RequestEngine.removeHook(emitExceptionStatistics);\n@@ -177,0 +266,6 @@\n+\n+        RequestEngine.removeHook(emitContainerConfiguration);\n+        RequestEngine.removeHook(emitContainerCPUUsage);\n+        RequestEngine.removeHook(emitContainerCPUThrottling);\n+        RequestEngine.removeHook(emitContainerMemoryUsage);\n+        RequestEngine.removeHook(emitContainerIOUsage);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":98,"deletions":3,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -557,0 +557,25 @@\n+    <event name=\"jdk.ContainerConfiguration\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUThrottling\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerMemoryUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerIOUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -557,0 +557,25 @@\n+    <event name=\"jdk.ContainerConfiguration\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUThrottling\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerMemoryUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerIOUsage\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.jfr.EventSettings;\n@@ -37,1 +38,5 @@\n-            r.enable(eventName);\n+            EventSettings es = r.enable(eventName);\n+            for (int i = 1; i < args.length; i++) {\n+                String[] kv = args[i].split(\"=\");\n+                es = es.with(kv[0], kv[1]);\n+            }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/JfrReporter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -73,0 +73,6 @@\n+\n+            containerInfoTestCase();\n+            testCpuUsage();\n+            testCpuThrottling();\n+            testMemoryUsage();\n+            testIOUsage();\n@@ -78,4 +84,1 @@\n-    \/\/ This test case is currently not in use.\n-    \/\/ Once new Container events are available, this test case can be used to test\n-    \/\/ processor-related configuration such as active processor count (see JDK-8203359).\n-    private static void cpuTestCase() throws Exception {\n+    private static void containerInfoTestCase() throws Exception {\n@@ -85,1 +88,3 @@\n-                testCPUInfo(\"jdk.ContainerConfiguration\", i, i);\n+                for (int j=64; j <= 256; j *= 2) {\n+                    testContainerInfo(i, j);\n+                }\n@@ -89,3 +94,11 @@\n-    private static void testCPUInfo(String eventName, int valueToSet, int expectedValue) throws Exception {\n-        Common.logNewTestCase(\"CPUInfo: --cpus = \" + valueToSet);\n-        String fieldName = \"activeProcessorCount\";\n+    private static void testContainerInfo(int expectedCPUs, int expectedMemoryMB) throws Exception {\n+        Common.logNewTestCase(\"ContainerInfo: --cpus = \" + expectedCPUs + \" --memory=\" + expectedMemoryMB + \"m\");\n+        String eventName = \"jdk.ContainerConfiguration\";\n+        long expectedSlicePeriod = 100000; \/\/ default slice period\n+        long expectedMemoryLimit = expectedMemoryMB * 1024 * 1024;\n+\n+        String cpuCountFld = \"effectiveCpuCount\";\n+        String cpuQuotaFld = \"cpuQuota\";\n+        String cpuSlicePeriodFld = \"cpuSlicePeriod\";\n+        String memoryLimitFld = \"memoryLimit\";\n+\n@@ -94,1 +107,2 @@\n-                                      .addDockerOpts(\"--cpus=\" + valueToSet)\n+                                      .addDockerOpts(\"--cpus=\" + expectedCPUs)\n+                                      .addDockerOpts(\"--memory=\" + expectedMemoryMB + \"m\")\n@@ -97,1 +111,70 @@\n-            .shouldContain(fieldName + \" = \" + expectedValue);\n+            .shouldContain(cpuCountFld + \" = \" + expectedCPUs)\n+            .shouldContain(cpuSlicePeriodFld + \" = \" + expectedSlicePeriod)\n+            .shouldContain(cpuQuotaFld + \" = \" + expectedCPUs * expectedSlicePeriod)\n+            .shouldContain(memoryLimitFld + \" = \" + expectedMemoryLimit);\n+    }\n+\n+    private static void testCpuUsage() throws Exception {\n+        Common.logNewTestCase(\"CPU Usage\");\n+        String eventName = \"jdk.ContainerCPUUsage\";\n+\n+        String cpuTimeFld = \"cpuTime\";\n+        String cpuUserTimeFld = \"cpuUserTime\";\n+        String cpuSystemTimeFld = \"cpuSystemTime\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldNotContain(cpuTimeFld + \" = \" + 0)\n+            .shouldNotContain(cpuUserTimeFld + \" = \" + 0)\n+            .shouldNotContain(cpuSystemTimeFld + \" = \" + 0);\n+    }\n+\n+    private static void testMemoryUsage() throws Exception {\n+        Common.logNewTestCase(\"Memory Usage\");\n+        String eventName = \"jdk.ContainerMemoryUsage\";\n+\n+        String memoryFailCountFld = \"memoryFailCount\";\n+        String memoryUsageFld = \"memoryUsage\";\n+        String swapMemoryUsageFld = \"swapMemoryUsage\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(memoryFailCountFld)\n+            .shouldContain(memoryUsageFld)\n+            .shouldContain(swapMemoryUsageFld);\n+    }\n+\n+    private static void testIOUsage() throws Exception {\n+        Common.logNewTestCase(\"I\/O Usage\");\n+        String eventName = \"jdk.ContainerIOUsage\";\n+\n+        String serviceRequestsFld = \"serviceRequests\";\n+        String dataTransferredFld = \"dataTransferred\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(serviceRequestsFld)\n+            .shouldContain(dataTransferredFld);\n+    }\n+\n+    private static void testCpuThrottling() throws Exception {\n+        Common.logNewTestCase(\"CPU Throttling\");\n+        String eventName = \"jdk.ContainerCPUThrottling\";\n+\n+        String cpuElapsedSlicesFld = \"cpuElapsedSlices\";\n+        String cpuThrottledSlicesFld = \"cpuThrottledSlices\";\n+        String cpuThrottledTimeFld = \"cpuThrottledTime\";\n+\n+        DockerTestUtils.dockerRunJava(\n+                                      commonDockerOpts()\n+                                      .addClassOptions(eventName, \"period=endChunk\"))\n+            .shouldHaveExitValue(0)\n+            .shouldContain(cpuElapsedSlicesFld)\n+            .shouldContain(cpuThrottledSlicesFld)\n+            .shouldContain(cpuThrottledTimeFld);\n@@ -121,1 +204,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":93,"deletions":11,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -74,0 +74,7 @@\n+    \/\/ Container events are tested in hotspot\/jtreg\/containers\/docker\/TestJFREvents.java\n+    private static final Set<String> coveredContainerEvents = new HashSet<>(\n+        Arrays.asList(\n+            \"ContainerConfiguration\", \"ContainerCPUUsage\", \"ContainerCPUThrottling\",\n+            \"ContainerMemoryUsage\", \"ContainerIOUsage\")\n+    );\n+\n@@ -118,0 +125,1 @@\n+        eventsNotCoveredByTest.removeAll(coveredContainerEvents);\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -204,0 +204,6 @@\n+    \/\/ Containers\n+    public static final String ContainerConfiguration = PREFIX + \"ContainerConfiguration\";\n+    public static final String ContainerCPUUsage = PREFIX + \"ContainerCPUUsage\";\n+    public static final String ContainerCPUThrottling = PREFIX + \"ContainerCPUThrottling\";\n+    public static final String ContainerMemoryUsage = PREFIX + \"ContainerMemoryUsage\";\n+    public static final String ContainerIOUsage = PREFIX + \"ContainerIOUsage\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}