{"files":[{"patch":"@@ -220,1 +220,2 @@\n-        jdk.management;\n+        jdk.management,\n+        jdk.jfr;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerCPUThrottling\")\n+@Label(\"CPU Throttling\")\n+@Category({\"Operating System\", \"Container\", \"Processor\"})\n+@Description(\"Container CPU throttling related information.\")\n+public class ContainerCPUThrottlingEvent extends AbstractJDKEvent {\n+  @Label(\"CPU Elapsed Slices\")\n+  @Description(\"Number of time-slice periods that have elapsed if a CPU quota has been setup for the container.\")\n+  public long cpuElapsedSlices;\n+\n+  @Label(\"CPU Throttled Slices\")\n+  @Description(\"Number of time-slice periods that the CPU has been throttled or limited due to exceeding CPU quota.\")\n+  public long cpuThrottledSlices;\n+\n+  @Label(\"CPU Throttled Time\")\n+  @Description(\"Total time duration, in nanoseconds, that the CPU has been throttled or limited due to exceeding CPU quota.\")\n+  @Timespan\n+  public long cpuThrottledTime;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUThrottlingEvent.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerCPUUsage\")\n+@Label(\"CPU Usage\")\n+@Category({\"Operating System\", \"Container\", \"Processor\"})\n+@Description(\"Container CPU usage related information.\")\n+public class ContainerCPUUsageEvent extends AbstractJDKEvent {\n+  @Label(\"CPU Time\")\n+  @Description(\"Aggregate time, in nanoseconds, consumed by all tasks in the container.\")\n+  @Timespan\n+  public long cpuTime;\n+\n+  @Label(\"CPU User Time\")\n+  @Description(\"Aggregate user time, in nanoseconds, consumed by all tasks in the container.\")\n+  @Timespan\n+  public long cpuUserTime;\n+\n+  @Label(\"CPU System Time\")\n+  @Description(\"Aggregate system time, in nanoseconds, consumed by all tasks in the container.\")\n+  @Timespan\n+  public long cpuSystemTime;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerCPUUsageEvent.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerConfiguration\")\n+@Label(\"Container Configuration\")\n+@Category({\"Operating System\", \"Container\"})\n+@Description(\"A set of container specific attributes.\")\n+public final class ContainerConfigurationEvent extends AbstractJDKEvent {\n+    @Label(\"CPU Slice Period\")\n+    @Description(\"Length of the scheduling period, in microseconds, for processes within the container.\")\n+    @Timespan(Timespan.MICROSECONDS)\n+    public long cpuSlicePeriod;\n+\n+    @Label(\"CPU Quota\")\n+    @Description(\"Total available run-time allowed, in microseconds, during each scheduling period for all tasks in the container.\")\n+    public long cpuQuota;\n+\n+    @Label(\"CPU Shares\")\n+    @Description(\"Relative weighting of processes with the container used for prioritizing the scheduling of processes across \" +\n+                 \"all containers running on a host.\")\n+    public long cpuShares;\n+\n+    @Label(\"Effective CPU Count\")\n+    @Description(\"Number of effective processors that this container has available to it.\")\n+    public long effectiveCpuCount;\n+\n+    @Label(\"Memory Soft Limit\")\n+    @Description(\"Hint to the operating system that allows groups to specify the minimum required amount of physical memory.\")\n+    @DataAmount\n+    public long memorySoftLimit;\n+\n+    @Label(\"Memory Limit\")\n+    @Description(\"Maximum amount of physical memory, in bytes, that can be allocated in the container.\")\n+    @DataAmount\n+    public long memoryLimit;\n+\n+    @Label(\"Memory and Swap Limit\")\n+    @Description(\"Maximum amount of physical memory and swap space, in bytes, that can be allocated in the container.\")\n+    @DataAmount\n+    public long swapMemoryLimit;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerIOUsage\")\n+@Label(\"Container I\/O Usage\")\n+@Category({\"Operating System\", \"Container\", \"I\/O\"})\n+@Description(\"Container I\/O usage related information.\")\n+public class ContainerIOUsageEvent extends AbstractJDKEvent {\n+\n+  @Label(\"BlkIO Request Count\")\n+  @Description(\"Number of block I\/O requests to the disk that have been issued by the container.\")\n+  public long serviceRequests;\n+\n+  @Label(\"BlkIO Transfer\")\n+  @Description(\"Number of block I\/O bytes that have been transferred to\/from the disk by the container.\")\n+  @DataAmount\n+  public long dataTransferred;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerIOUsageEvent.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, DataDog. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Description;\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"ContainerMemoryUsage\")\n+@Label(\"Container Memory Usage\")\n+@Category({\"Operating System\", \"Container\", \"Memory\"})\n+@Description(\"Container memory usage related information.\")\n+public final class ContainerMemoryUsageEvent extends AbstractJDKEvent {\n+    @Label(\"Memory Pressure\")\n+    @Description(\"(attempts per second * 1000), if enabled, that the operating system tries to satisfy a memory request for any \" +\n+                 \"process in the current container when no free memory is readily available.\")\n+    public double memoryPressure;\n+\n+    @Label(\"Memory Fail Count\")\n+    @Description(\"Number of times that user memory requests in the container have exceeded the memory limit.\")\n+    public long memoryFailCount;\n+\n+    @Label(\"Memory Usage\")\n+    @Description(\"Amount of physical memory, in bytes, that is currently allocated in the current container.\")\n+    @DataAmount\n+    public long memoryUsage;\n+\n+    @Label(\"Memory and Swap Usage\")\n+    @Description(\"Amount of physical memory and swap space, in bytes, that is currently allocated in the current container.\")\n+    @DataAmount\n+    public long swapMemoryUsage;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerMemoryUsageEvent.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Map;\n@@ -34,0 +35,5 @@\n+import jdk.jfr.events.ContainerIOUsageEvent;\n+import jdk.jfr.events.ContainerConfigurationEvent;\n+import jdk.jfr.events.ContainerCPUUsageEvent;\n+import jdk.jfr.events.ContainerCPUThrottlingEvent;\n+import jdk.jfr.events.ContainerMemoryUsageEvent;\n@@ -56,1 +62,2 @@\n-public final class JDKEvents {\n+import jdk.internal.platform.Container;\n+import jdk.internal.platform.Metrics;\n@@ -58,0 +65,1 @@\n+public final class JDKEvents {\n@@ -85,0 +93,5 @@\n+        ContainerConfigurationEvent.class,\n+        ContainerCPUUsageEvent.class,\n+        ContainerCPUThrottlingEvent.class,\n+        ContainerMemoryUsageEvent.class,\n+        ContainerIOUsageEvent.class,\n@@ -103,0 +116,6 @@\n+    private static final Runnable emitContainerConfiguration = JDKEvents::emitContainerConfiguration;\n+    private static final Runnable emitContainerCPUUsage = JDKEvents::emitContainerCPUUsage;\n+    private static final Runnable emitContainerCPUThrottling = JDKEvents::emitContainerCPUThrottling;\n+    private static final Runnable emitContainerMemoryUsage = JDKEvents::emitContainerMemoryUsage;\n+    private static final Runnable emitContainerIOUsage = JDKEvents::emitContainerIOUsage;\n+    private static Metrics containerMetrics = null;\n@@ -115,0 +134,1 @@\n+                containerMetrics = Container.metrics();\n@@ -118,0 +138,5 @@\n+                RequestEngine.addTrustedJDKHook(ContainerConfigurationEvent.class, emitContainerConfiguration);\n+                RequestEngine.addTrustedJDKHook(ContainerCPUUsageEvent.class, emitContainerCPUUsage);\n+                RequestEngine.addTrustedJDKHook(ContainerCPUThrottlingEvent.class, emitContainerCPUThrottling);\n+                RequestEngine.addTrustedJDKHook(ContainerMemoryUsageEvent.class, emitContainerMemoryUsage);\n+                RequestEngine.addTrustedJDKHook(ContainerIOUsageEvent.class, emitContainerIOUsage);\n@@ -150,0 +175,58 @@\n+    private static void emitContainerConfiguration() {\n+        if (containerMetrics != null) {\n+            ContainerConfigurationEvent t = new ContainerConfigurationEvent();\n+            t.cpuSlicePeriod = containerMetrics.getCpuPeriod();\n+            t.cpuQuota = containerMetrics.getCpuQuota();\n+            t.cpuShares = containerMetrics.getCpuShares();\n+            t.effectiveCpuCount = containerMetrics.getEffectiveCpuCount();\n+            t.memorySoftLimit = containerMetrics.getMemorySoftLimit();\n+            t.memoryLimit = containerMetrics.getMemoryLimit();\n+            t.swapMemoryLimit = containerMetrics.getMemoryAndSwapLimit();\n+            t.commit();\n+        }\n+    }\n+\n+    private static void emitContainerCPUUsage() {\n+        if (containerMetrics != null) {\n+            ContainerCPUUsageEvent event = new ContainerCPUUsageEvent();\n+\n+            event.cpuTime = containerMetrics.getCpuUsage();\n+            event.cpuSystemTime = containerMetrics.getCpuSystemUsage();\n+            event.cpuUserTime = containerMetrics.getCpuUserUsage();\n+            event.commit();\n+        }\n+    }\n+    private static void emitContainerMemoryUsage() {\n+        if (containerMetrics != null) {\n+            ContainerMemoryUsageEvent event = new ContainerMemoryUsageEvent();\n+\n+            if (event.shouldCommit()) {\n+                event.memoryFailCount = containerMetrics.getMemoryFailCount();\n+                event.memoryUsage = containerMetrics.getMemoryUsage();\n+                event.swapMemoryUsage = containerMetrics.getMemoryAndSwapUsage();\n+                event.commit();\n+            }\n+        }\n+    }\n+\n+    private static void emitContainerIOUsage() {\n+        if (containerMetrics != null) {\n+            ContainerIOUsageEvent event = new ContainerIOUsageEvent();\n+\n+            event.serviceRequests = containerMetrics.getBlkIOServiceCount();\n+            event.dataTransferred = containerMetrics.getBlkIOServiced();\n+            event.commit();\n+        }\n+    }\n+\n+    private static void emitContainerCPUThrottling() {\n+        if (containerMetrics != null) {\n+            ContainerCPUThrottlingEvent event = new ContainerCPUThrottlingEvent();\n+\n+            event.cpuElapsedSlices = containerMetrics.getCpuNumPeriods();\n+            event.cpuThrottledSlices = containerMetrics.getCpuNumThrottled();\n+            event.cpuThrottledTime = containerMetrics.getCpuThrottledTime();\n+            event.commit();\n+        }\n+    }\n+\n@@ -175,1 +258,1 @@\n-        RequestEngine.removeHook(JDKEvents::emitExceptionStatistics);\n+        RequestEngine.removeHook(emitExceptionStatistics);\n@@ -177,0 +260,6 @@\n+\n+        RequestEngine.removeHook(emitContainerConfiguration);\n+        RequestEngine.removeHook(emitContainerCPUUsage);\n+        RequestEngine.removeHook(emitContainerCPUThrottling);\n+        RequestEngine.removeHook(emitContainerMemoryUsage);\n+        RequestEngine.removeHook(emitContainerIOUsage);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":91,"deletions":2,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -557,0 +557,25 @@\n+    <event name=\"jdk.ContainerConfiguration\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUThrottling\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerMemoryUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerIOUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n@@ -1026,0 +1051,2 @@\n+      <flag name=\"container-events-enabled\" label=\"Container Events\">true<\/flag>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -557,0 +557,25 @@\n+    <event name=\"jdk.ContainerConfiguration\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerCPUThrottling\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerMemoryUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.ContainerIOUsage\">\n+      <setting name=\"enabled\" control=\"container-events-enabled\">true<\/setting>\n+      <setting name=\"period\">30 s<\/setting>\n+    <\/event>\n+\n@@ -1025,0 +1050,1 @@\n+      <flag name=\"container-events-enabled\" label=\"Container Events\">true<\/flag>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}