{"files":[{"patch":"@@ -81,1 +81,1 @@\n-    private static void checkResult(List<String> lines, String lineMarker, String value) {\n+    private static void checkResult(List<String> lines, String lineMarker, String expectedValue) {\n@@ -98,1 +98,19 @@\n-                Asserts.assertEquals(actual, value);\n+                \/\/ Unlimited pids leads on some setups not to \"max\" in the output, but to a high number\n+                if (expectedValue.equals(\"max\")) {\n+                    if (actual.equals(\"max\")) {\n+                        System.out.println(\"Found expected max for unlimited pids value.\");\n+                    } else {\n+                        try {\n+                            int ai = Integer.parseInt(actual);\n+                            if (ai > 20000) {\n+                                System.out.println(\"Limit value \" + ai + \" got accepted as unlimited, log line was \" + line);\n+                            } else {\n+                                throw new RuntimeException(\"Limit value \" + ai + \" is not accepted as unlimited, log line was \" + line);\n+                            }\n+                        } catch (NumberFormatException ex) {\n+                            throw new RuntimeException(\"Could not convert \" + actual + \" to an integer, log line was \" + line);\n+                        }\n+                    }\n+                } else {\n+                    Asserts.assertEquals(actual, expectedValue);\n+                }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestPids.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -38,0 +40,1 @@\n+import jdk.test.lib.Asserts;\n@@ -60,0 +63,42 @@\n+    private static void checkResult(List<String> lines, String lineMarker, String expectedValue) {\n+        boolean lineMarkerFound = false;\n+\n+        for (String line : lines) {\n+            if (line.contains(\"WARNING: Your kernel does not support pids limit capabilities\")) {\n+                System.out.println(\"Docker pids limitation seems not to work, avoiding check\");\n+                return;\n+            }\n+\n+            if (line.contains(lineMarker)) {\n+                lineMarkerFound = true;\n+                String[] parts = line.split(\":\");\n+                System.out.println(\"DEBUG: line = \" + line);\n+                System.out.println(\"DEBUG: parts.length = \" + parts.length);\n+\n+                Asserts.assertEquals(parts.length, 2);\n+                String actual = parts[1].replaceAll(\"\\\\s\",\"\");\n+                \/\/ Unlimited pids leads on some setups not to \"max\" in the output, but to a high number\n+                if (expectedValue.equals(\"Unlimited\")) {\n+                    if (actual.equals(\"Unlimited\")) {\n+                        System.out.println(\"Found expected value for unlimited pids.\");\n+                    } else {\n+                        try {\n+                            int ai = Integer.parseInt(actual);\n+                            if (ai > 20000) {\n+                                System.out.println(\"Limit value \" + ai + \" got accepted as unlimited, log line was \" + line);\n+                            } else {\n+                                throw new RuntimeException(\"Limit value \" + ai + \" is not accepted as unlimited, log line was \" + line);\n+                            }\n+                        } catch (NumberFormatException ex) {\n+                            throw new RuntimeException(\"Could not convert \" + actual + \" to an integer, log line was \" + line);\n+                        }\n+                    }\n+                } else {\n+                    Asserts.assertEquals(actual, expectedValue);\n+                }\n+                break;\n+            }\n+        }\n+        Asserts.assertTrue(lineMarkerFound);\n+    }\n+\n@@ -76,1 +121,3 @@\n-            out.shouldContain(\"Maximum Processes Limit: \" + pidsLimit);\n+            List<String> lines = new ArrayList<>();\n+            sdr.lines().forEach(s -> lines.add(s));\n+            checkResult(lines, \"Maximum Processes Limit: \", pidsLimit);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestPidsLimit.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"}]}