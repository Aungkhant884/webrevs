{"files":[{"patch":"@@ -559,2 +559,2 @@\n-  \/\/ Unlimited memory in Cgroups V2 is the literal string 'max'\n-  \/\/ it is also found in the pids controller\n+  \/\/ Unlimited memory in cgroups is the literal string 'max' for\n+  \/\/ some controllers, for example the pids controller.\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -267,2 +267,1 @@\n-  jlong pidsmax = limit_from_str(pidsmax_str);\n-  return pidsmax;\n+  return limit_from_str(pidsmax_str);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -249,2 +249,1 @@\n-  jlong pidsmax = limit_from_str(pidsmax_str);\n-  return pidsmax;\n+  return limit_from_str(pidsmax_str);\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -362,2 +362,2 @@\n-     * @return The maximum number of tasks or -1 if the metric is not available.\n-     *         Returns -3 if it is unlimited (\"max\")\n+     * @return The maximum number of tasks, -1 if the quota is unlimited or\n+     *         -2 if not supported.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/platform\/Metrics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -408,0 +408,3 @@\n+        limit = c.getPidsMax();\n+        ostream.println(formatLimitString(limit, INDENT + \"Maximum number of tasks available to the process: \",\n+                                          longRetvalNotSupported, false));\n@@ -412,0 +415,4 @@\n+        return formatLimitString(limit, prefix, unavailable, true);\n+    }\n+\n+    private static String formatLimitString(long limit, String prefix, long unavailable, boolean scale) {\n@@ -413,1 +420,5 @@\n-            return prefix + SizePrefix.scaleValue(limit);\n+            if (scale) {\n+                return prefix + SizePrefix.scaleValue(limit);\n+            } else {\n+                return prefix + limit;\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key cgroups\n+ * @summary Test JDK Metrics class when running inside a docker container with limited pids\n+ * @bug 8266490\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @build TestPidsLimit\n+ * @run driver TestPidsLimit\n+ *\/\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestPidsLimit {\n+    private static final String imageName = Common.imageName(\"pids\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+\n+        try {\n+            testPidsLimit(\"1000\");\n+            testPidsLimit(\"2000\");\n+            testPidsLimit(\"Unlimited\");\n+        } finally {\n+            if (!DockerTestUtils.RETAIN_IMAGE_AFTER_TEST) {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        }\n+    }\n+\n+    private static void testPidsLimit(String pidsLimit) throws Exception {\n+        Common.logNewTestCase(\"TestPidsLimit\");\n+        DockerRunOptions opts = Common.newOptsShowSettings(imageName);\n+        if (! pidsLimit.equals(\"Unlimited\")) {\n+            opts.addDockerOpts(\"--pids-limit=\"+pidsLimit);\n+        }\n+\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldHaveExitValue(0);\n+        \/\/ some docker enviroments do not have the pids limit capabilities\n+        String sdr = out.getOutput();\n+        if (sdr.contains(\"WARNING: Your kernel does not support pids limit capabilities\")) {\n+            System.out.println(\"Docker pids limitation seems not to work, avoiding check\");\n+        } else {\n+            out.shouldContain(\"Maximum number of tasks available to the process: \" + pidsLimit);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestPidsLimit.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,4 @@\n+    public static DockerRunOptions newOptsShowSettings(String imageNameAndTag) {\n+        return new DockerRunOptions(imageNameAndTag, \"\/jdk\/bin\/java\", \"-version\", \"-XshowSettings:system\");\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/Common.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}