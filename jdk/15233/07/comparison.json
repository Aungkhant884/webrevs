{"files":[{"patch":"@@ -459,1 +459,1 @@\n-    int src_hash = src_obj->identity_hash();\n+    intptr_t src_hash = src_obj->identity_hash();\n@@ -463,2 +463,2 @@\n-    DEBUG_ONLY(int archived_hash = fake_oop->identity_hash());\n-    assert(src_hash == archived_hash, \"Different hash codes: original %x, archived %x\", src_hash, archived_hash);\n+    DEBUG_ONLY(intptr_t archived_hash = fake_oop->identity_hash());\n+    assert(src_hash == archived_hash, \"Different hash codes: original \" INTPTR_FORMAT \", archived \" INTPTR_FORMAT, src_hash, archived_hash);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  _token = _line;\n@@ -416,1 +417,1 @@\n-  int error_index = _token - _line;\n+  int error_index = pointer_delta_as_int(_token, _line);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -226,1 +226,0 @@\n-  _num_module_paths = ClassLoader::num_module_path_entries();\n@@ -228,0 +227,1 @@\n+  _num_module_paths = ClassLoader::num_module_path_entries();\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,1 +220,0 @@\n-  jshort _num_module_paths;             \/\/ number of module path entries\n@@ -222,0 +221,1 @@\n+  int    _num_module_paths;             \/\/ number of module path entries\n@@ -279,1 +279,1 @@\n-  jshort num_module_paths()                const { return _num_module_paths; }\n+  int    num_module_paths()                const { return _num_module_paths; }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  enum {\n+  enum : char {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-JVMFlag::Error MinMetaspaceFreeRatioConstraintFunc(uintx value, bool verbose) {\n+JVMFlag::Error MinMetaspaceFreeRatioConstraintFunc(uint value, bool verbose) {\n@@ -162,2 +162,2 @@\n-                        \"MinMetaspaceFreeRatio (\" UINTX_FORMAT \") must be \"\n-                        \"less than or equal to MaxMetaspaceFreeRatio (\" UINTX_FORMAT \")\\n\",\n+                        \"MinMetaspaceFreeRatio (%u) must be \"\n+                        \"less than or equal to MaxMetaspaceFreeRatio (%u)\\n\",\n@@ -171,1 +171,1 @@\n-JVMFlag::Error MaxMetaspaceFreeRatioConstraintFunc(uintx value, bool verbose) {\n+JVMFlag::Error MaxMetaspaceFreeRatioConstraintFunc(uint value, bool verbose) {\n@@ -174,2 +174,2 @@\n-                        \"MaxMetaspaceFreeRatio (\" UINTX_FORMAT \") must be \"\n-                        \"greater than or equal to MinMetaspaceFreeRatio (\" UINTX_FORMAT \")\\n\",\n+                        \"MaxMetaspaceFreeRatio (%u) must be \"\n+                        \"greater than or equal to MinMetaspaceFreeRatio (%u)\\n\",\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n- f(uintx,  MinMetaspaceFreeRatioConstraintFunc)                \\\n- f(uintx,  MaxMetaspaceFreeRatioConstraintFunc)                \\\n+ f(uint,   MinMetaspaceFreeRatioConstraintFunc)                \\\n+ f(uint,   MaxMetaspaceFreeRatioConstraintFunc)                \\\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1336,1 +1336,1 @@\n-                          SignatureHandlerLibrary::buffer_size - align_offset);\n+                          checked_cast<int>(SignatureHandlerLibrary::buffer_size - align_offset));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  int max_aligned_bytes = max_aligned_codelets * (HeapWordSize + CodeEntryAlignment);\n+  int max_aligned_bytes = checked_cast<int>(max_aligned_codelets * (HeapWordSize + CodeEntryAlignment));\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-static int tag_cmp(const void *a, const void *b) {\n-  return static_cast<const LogTagType*>(a) - static_cast<const LogTagType*>(b);\n+static int tag_cmp(const LogTagType *a, const LogTagType *b) {\n+  return primitive_compare(a, b);\n@@ -77,1 +77,1 @@\n-  qsort(tags, ntags, sizeof(*tags), tag_cmp);\n+  qsort(tags, ntags, sizeof(*tags), (_sort_Fn)tag_cmp);\n","filename":"src\/hotspot\/share\/logging\/logOutput.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  return 2.0 * intersecting \/ (_ntags + other._ntags);\n+  return 2.0 * (double)intersecting \/ (double)(_ntags + other._ntags);\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-  const size_t used_after_gc = MetaspaceUtils::committed_bytes();\n+  const double used_after_gc = (double)MetaspaceUtils::committed_bytes();\n@@ -467,4 +467,4 @@\n-                               minimum_desired_capacity \/ (double) K,\n-                               expand_bytes \/ (double) K,\n-                               MinMetaspaceExpansion \/ (double) K,\n-                               new_capacity_until_GC \/ (double) K);\n+                               (double) minimum_desired_capacity \/ (double) K,\n+                               (double) expand_bytes \/ (double) K,\n+                               (double) MinMetaspaceExpansion \/ (double) K,\n+                               (double) new_capacity_until_GC \/ (double) K);\n@@ -493,1 +493,1 @@\n-                             minimum_desired_capacity \/ (double) K, maximum_desired_capacity \/ (double) K);\n+                             (double) minimum_desired_capacity \/ (double) K, (double) maximum_desired_capacity \/ (double) K);\n@@ -520,1 +520,1 @@\n-                               MetaspaceSize \/ (double) K, maximum_desired_capacity \/ (double) K);\n+                               (double) MetaspaceSize \/ (double) K, (double) maximum_desired_capacity \/ (double) K);\n@@ -522,1 +522,1 @@\n-                               shrink_bytes \/ (double) K, current_shrink_factor, _shrink_factor, MinMetaspaceExpansion \/ (double) K);\n+                               (double) shrink_bytes \/ (double) K, current_shrink_factor, _shrink_factor, (double) MinMetaspaceExpansion \/ (double) K);\n@@ -711,1 +711,1 @@\n-    size_t max_ccs_size = MaxMetaspaceSize * 0.8;\n+    size_t max_ccs_size = 8 * (MaxMetaspaceSize \/ 10);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-      float display_value = (float) byte_size \/ scale;\n+      float display_value = (float) byte_size \/ (float)scale;\n@@ -121,1 +121,1 @@\n-      float display_value = (float) byte_size \/ scale;\n+      float display_value = (float) byte_size \/ (float)scale;\n@@ -145,1 +145,1 @@\n-    float p = ((float)part \/ total) * 100.0f;\n+    float p = ((float)part \/ (float)total) * 100.0f;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1781,1 +1781,0 @@\n-    \/\/ _sort_Fn is defined in growableArray.hpp.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-  int print_len = MIN2((intx) oa->length(), MaxElementPrintSize);\n+  int print_len = MIN2(oa->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-  int print_len = MIN2((intx) ta->length(), MaxElementPrintSize);\n+  int print_len = MIN2(ta->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-  product(intx, HeapDumpGzipLevel, 0, MANAGEABLE,                           \\\n+  product(int, HeapDumpGzipLevel, 0, MANAGEABLE,                            \\\n@@ -1318,1 +1318,1 @@\n-  notproduct(intx, MaxElementPrintSize, 256,                                \\\n+  notproduct(int, MaxElementPrintSize, 256,                                 \\\n@@ -1460,1 +1460,1 @@\n-  product(uintx, MaxMetaspaceFreeRatio,    70,                              \\\n+  product(uint, MaxMetaspaceFreeRatio,    70,                               \\\n@@ -1466,1 +1466,1 @@\n-  product(uintx, MinMetaspaceFreeRatio,    40,                              \\\n+  product(uint, MinMetaspaceFreeRatio,    40,                               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"utilities\/parseInteger.hpp\"\n@@ -881,1 +882,1 @@\n-  long max = -1;\n+  int max = -1;\n@@ -884,2 +885,2 @@\n-    max = ::strtol(max_value, &endptr, 10);\n-    if (max == 0 && max_value == endptr) {\n+    int max;\n+    if (!parse_integer(max_value, &max)) {\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -970,1 +970,1 @@\n-  return size + field_count * (sizeof(address) + 1);\n+  return checked_cast<u4>(size + field_count * (sizeof(address) + 1));\n@@ -1083,1 +1083,1 @@\n-  u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size;\n+  u4 size = checked_cast<u4>(1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size);\n@@ -1193,1 +1193,1 @@\n-  u4 size = header_size + length * sizeof(address);\n+  u4 size = checked_cast<u4>(header_size + length * sizeof(address));\n@@ -2156,1 +2156,1 @@\n-      DumperSupport::write_header(writer(), HPROF_TRACE, 3*sizeof(u4) + depth*oopSize);\n+      DumperSupport::write_header(writer(), HPROF_TRACE, checked_cast<u4>(3*sizeof(u4) + depth*oopSize));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-                  empty_entries, ((float)empty_entries * 100) \/ total_entries);\n+                  empty_entries, ((float)empty_entries * 100) \/ (float)total_entries);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  float waste_percentage = stats.committed() > 0 ? (((float)waste * 100)\/stats.committed()) : 0.0f;\n+  float waste_percentage = stats.committed() > 0 ? (((float)waste * 100)\/(float)stats.committed()) : 0.0f;\n@@ -716,1 +716,1 @@\n-                                 (current_waste * 100.0f) \/ current_stats.committed();\n+                                 ((float)current_waste * 100.0f) \/ (float)current_stats.committed();\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-    return hash % table_size;\n+    return checked_cast<index_t>(hash % table_size);\n","filename":"src\/hotspot\/share\/services\/nmtPreInit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,1 @@\n-  return ((double)_items_count) \/ _current_size;\n+  return ((double)_items_count) \/ (double)_current_size;\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-  static jlong get_live_thread_count()        { return _atomic_threads_count; }\n-  static jlong get_daemon_thread_count()      { return _atomic_daemon_threads_count; }\n+  static int get_live_thread_count()          { return _atomic_threads_count; }\n+  static int get_daemon_thread_count()        { return _atomic_daemon_threads_count; }\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  return s1.base() - s2.base();\n+  return primitive_compare(s1.base(), s2.base());\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    fill += fill << 8;\n+    fill += (jshort)(fill << 8);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -792,1 +792,1 @@\n-  uint8_t padding = alignment - (_reader.get_position() - _section_start_address) % alignment;\n+  long padding = alignment - (_reader.get_position() - _section_start_address) % alignment;\n@@ -1426,1 +1426,1 @@\n-      _state->_discriminator = discriminator;\n+      _state->_discriminator = static_cast<uint32_t>(discriminator);\n@@ -1449,2 +1449,2 @@\n-      uint64_t operation_advance;\n-      if (!_reader.read_uleb128(&operation_advance, 4)) {\n+      uint64_t adv;\n+      if (!_reader.read_uleb128(&adv, 4)) {\n@@ -1454,0 +1454,1 @@\n+      uint32_t operation_advance = checked_cast<uint32_t>(adv);\n@@ -1467,1 +1468,1 @@\n-      _state->_line += line;\n+      _state->_line += static_cast<uint32_t>(line);\n@@ -1476,1 +1477,1 @@\n-      _state->_file = file;\n+      _state->_file = static_cast<uint32_t>(file);\n@@ -1485,1 +1486,1 @@\n-      _state->_column = column;\n+      _state->_column = static_cast<uint32_t>(column);\n@@ -1531,1 +1532,1 @@\n-      _state->_isa = isa;\n+      _state->_isa = static_cast<uint32_t>(isa);  \/\/ only save 4 bytes\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -486,1 +486,1 @@\n-    uint32_t _section_start_address;\n+    uintptr_t _section_start_address;\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-address ElfFuncDescTable::lookup(Elf_Word index) {\n+address ElfFuncDescTable::lookup(Elf_Addr index) {\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  address lookup(Elf_Word index);\n+  address lookup(Elf_Addr index);\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    Elf_Word st_size = sym->st_size;\n+    Elf64_Xword st_size = sym->st_size;\n@@ -80,1 +80,1 @@\n-  int count = _section.section_header()->sh_size \/ sym_size;\n+  int count = checked_cast<int>(_section.section_header()->sh_size \/ sym_size);\n","filename":"src\/hotspot\/share\/utilities\/elfSymbolTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-  return static_cast<T>(r) >> (((sizeof(T) - 1) * BitsPerByte));\n+  return checked_cast<unsigned>(static_cast<T>(r) >> (((sizeof(T) - 1) * BitsPerByte)));\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  return (float)((_added_items_stamp - _added_items_stamp_prev) \/ _seconds_stamp);\n+  return (float)(((double)_added_items_stamp - (double)_added_items_stamp_prev) \/ _seconds_stamp);\n@@ -81,1 +81,1 @@\n-  return (float)((_removed_items_stamp - _removed_items_stamp_prev) \/ _seconds_stamp);\n+  return (float)(_removed_items_stamp - _removed_items_stamp_prev) \/ (float)_seconds_stamp;\n@@ -104,1 +104,1 @@\n-  _number_of_entries = summary.sum();\n+  _number_of_entries = (size_t)summary.sum();\n@@ -106,4 +106,4 @@\n-  _maximum_bucket_size = summary.maximum();\n-  _average_bucket_size = summary.avg();\n-  _variance_of_bucket_size = summary.variance();\n-  _stddev_of_bucket_size = summary.sd();\n+  _maximum_bucket_size = (size_t)summary.maximum();\n+  _average_bucket_size = (float)summary.avg();\n+  _variance_of_bucket_size = (float)summary.variance();\n+  _stddev_of_bucket_size = (float)summary.sd();\n@@ -143,1 +143,1 @@\n-    float literal_avg = (_number_of_entries <= 0) ? 0 : (_literal_bytes \/ _number_of_entries);\n+    float literal_avg = (_number_of_entries <= 0) ? 0.0f : (float)(_literal_bytes \/ _number_of_entries);\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-    int old_len = _element_close_stack_high - old_ptr;\n+    int old_len = pointer_delta_as_int(_element_close_stack_high, old_ptr);\n","filename":"src\/hotspot\/share\/utilities\/xmlstream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    int max_chunks = (max_footprint_words * commit_factor) \/ largest_chunk_size;\n+    int max_chunks = (int)((max_footprint_words * commit_factor) \/ (float) largest_chunk_size);\n@@ -99,1 +99,1 @@\n-    const size_t sz = word_size_for_level(lvl) * commit_factor;\n+    const size_t sz = (size_t)((float)word_size_for_level(lvl) * commit_factor);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkManager_stress.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}