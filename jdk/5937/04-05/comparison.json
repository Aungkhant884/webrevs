{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.BufferUnderflowException;\n@@ -67,0 +66,1 @@\n+    private boolean eof;\n@@ -71,6 +71,6 @@\n-        STATUS_LINE,\n-        STATUS_LINE_FOUND_CR,\n-        STATUS_LINE_FOUND_LF,\n-        STATUS_LINE_END,\n-        STATUS_LINE_END_CR,\n-        STATUS_LINE_END_LF,\n+        STATUS_OR_REQUEST_LINE,\n+        STATUS_OR_REQUEST_LINE_FOUND_CR,\n+        STATUS_OR_REQUEST_LINE_FOUND_LF,\n+        STATUS_OR_REQUEST_LINE_END,\n+        STATUS_OR_REQUEST_LINE_END_CR,\n+        STATUS_OR_REQUEST_LINE_END_LF,\n@@ -99,2 +99,2 @@\n-        if(headerMap.containsKey(key.toLowerCase())) {\n-            return headerMap.get(key.toLowerCase());\n+        if(headerMap.containsKey(key.toLowerCase(Locale.ROOT))) {\n+            return headerMap.get(key.toLowerCase(Locale.ROOT));\n@@ -114,8 +114,3 @@\n-     * Parses HTTP\/1.X status-line and headers from the given bytes. Must be\n-     * called successive times, with additional data, until returns true.\n-     *\n-     * All given ByteBuffers will be consumed, until ( possibly ) the last one\n-     * ( when true is returned ), which may not be fully consumed.\n-     *\n-     * @param input the ( partial ) header data\n-     * @return true iff the end of the headers block has been reached\n+     * Parses HTTP\/1.X status-line or request-line and headers from the given input stream.\n+     * @param input Containing the input stream of bytes representing request or response header data\n+     * @return true if the end of the headers block has been reached\n@@ -125,1 +120,1 @@\n-        while (canContinueParsing(input)) {\n+        while (canContinueParsing()) {\n@@ -127,5 +122,5 @@\n-                case INITIAL                                    ->  state = HttpHeaderParser.State.STATUS_LINE;\n-                case STATUS_LINE                                ->  readResumeStatusLine(input);\n-                case STATUS_LINE_FOUND_CR, STATUS_LINE_FOUND_LF ->  readStatusLineFeed(input);\n-                case STATUS_LINE_END                            ->  maybeStartHeaders(input);\n-                case STATUS_LINE_END_CR, STATUS_LINE_END_LF     ->  maybeEndHeaders(input);\n+                case INITIAL                                    ->  state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE;\n+                case STATUS_OR_REQUEST_LINE ->  readResumeStatusLine(input);\n+                case STATUS_OR_REQUEST_LINE_FOUND_CR, STATUS_OR_REQUEST_LINE_FOUND_LF ->  readStatusLineFeed(input);\n+                case STATUS_OR_REQUEST_LINE_END ->  maybeStartHeaders(input);\n+                case STATUS_OR_REQUEST_LINE_END_CR, STATUS_OR_REQUEST_LINE_END_LF ->  maybeEndHeaders(input);\n@@ -142,1 +137,1 @@\n-    private boolean canContinueParsing(InputStream buffer) throws IOException {\n+    private boolean canContinueParsing() {\n@@ -147,2 +142,2 @@\n-            case STATUS_LINE_FOUND_LF, STATUS_LINE_END_LF, HEADER_FOUND_LF -> true;\n-            default -> buffer.available() >= 0;\n+            case STATUS_OR_REQUEST_LINE_FOUND_LF, STATUS_OR_REQUEST_LINE_END_LF, HEADER_FOUND_LF -> true;\n+            default -> !eof;\n@@ -162,1 +157,1 @@\n-     * @param input a {@code ByteBuffer} containing a partial input\n+     * @param input a {@code InputStream} containing input stream of Bytes.\n@@ -165,3 +160,2 @@\n-     * @throws BufferUnderflowException\n-     *          if the input buffer's current position is not smaller\n-     *          than its limit\n+     * @throws IOException\n+     *          if an I\/O error occurs.\n@@ -170,1 +164,4 @@\n-        return (char)(input.read() & 0xFF);\n+        int c = input.read();\n+        if(c < 0)\n+            eof = true;\n+        return (char)(c & 0xFF);\n@@ -174,2 +171,2 @@\n-        char c = 0;\n-        while (input.available() > 0 && (c = get(input)) != CR) {\n+        char c;\n+        while ((c = get(input)) != CR && !eof) {\n@@ -180,1 +177,1 @@\n-            state = HttpHeaderParser.State.STATUS_LINE_FOUND_CR;\n+            state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_FOUND_CR;\n@@ -182,1 +179,1 @@\n-            state = HttpHeaderParser.State.STATUS_LINE_FOUND_LF;\n+            state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_FOUND_LF;\n@@ -187,1 +184,1 @@\n-        char c = state == HttpHeaderParser.State.STATUS_LINE_FOUND_LF ? LF : get(input);\n+        char c = state == HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_FOUND_LF ? LF : get(input);\n@@ -192,1 +189,0 @@\n-\n@@ -198,2 +194,2 @@\n-                    !requestOrStatusLine.startsWith(\"OPTION\") && !requestOrStatusLine.startsWith(\"HEAD\")\n-            && !requestOrStatusLine.startsWith(\"CONNECT\")) {\n+                    !requestOrStatusLine.startsWith(\"OPTIONS\") && !requestOrStatusLine.startsWith(\"HEAD\") &&\n+            !requestOrStatusLine.startsWith(\"PATCH\") && !requestOrStatusLine.startsWith(\"CONNECT\")) {\n@@ -202,2 +198,1 @@\n-                System.out.println(\"THIS IS REQUEST :\"+requestOrStatusLine);\n-\n+                System.out.println(\"Request is :\"+requestOrStatusLine);\n@@ -219,1 +214,1 @@\n-        state = HttpHeaderParser.State.STATUS_LINE_END;\n+        state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END;\n@@ -223,1 +218,1 @@\n-        assert state == HttpHeaderParser.State.STATUS_LINE_END;\n+        assert state == HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END;\n@@ -226,7 +221,9 @@\n-        if (c == CR) {\n-            state = HttpHeaderParser.State.STATUS_LINE_END_CR;\n-        } else if (c == LF) {\n-            state = HttpHeaderParser.State.STATUS_LINE_END_LF;\n-        } else {\n-            sb.append(c);\n-            state = HttpHeaderParser.State.HEADER;\n+        if(!eof) {\n+            if (c == CR) {\n+                state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END_CR;\n+            } else if (c == LF) {\n+                state = HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END_LF;\n+            } else {\n+                sb.append(c);\n+                state = HttpHeaderParser.State.HEADER;\n+            }\n@@ -237,1 +234,1 @@\n-        assert state == HttpHeaderParser.State.STATUS_LINE_END_CR || state == HttpHeaderParser.State.STATUS_LINE_END_LF;\n+        assert state == HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END_CR || state == HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END_LF;\n@@ -239,1 +236,1 @@\n-        char c = state == HttpHeaderParser.State.STATUS_LINE_END_LF ? LF : get(input);\n+        char c = state == HttpHeaderParser.State.STATUS_OR_REQUEST_LINE_END_LF ? LF : get(input);\n@@ -249,3 +246,3 @@\n-        assert input.available() > 0;\n-        while (input.available() > 0) {\n-            char c = get(input);\n+        assert !eof;\n+        char c = get(input);\n+        while (!eof) {\n@@ -262,0 +259,1 @@\n+            c = get(input);\n@@ -291,9 +289,11 @@\n-        if (c == LF) {\n-            state = HttpHeaderParser.State.HEADER_FOUND_CR_LF;\n-        } else if (c == SP || c == HT) {\n-            sb.append(SP); \/\/ parity with MessageHeaders\n-            state = HttpHeaderParser.State.HEADER;\n-        } else {\n-            sb = new StringBuilder();\n-            sb.append(c);\n-            state = HttpHeaderParser.State.HEADER;\n+        if (!eof) {\n+            if (c == LF) {\n+                state = HttpHeaderParser.State.HEADER_FOUND_CR_LF;\n+            } else if (c == SP || c == HT) {\n+                sb.append(SP); \/\/ parity with MessageHeaders\n+                state = HttpHeaderParser.State.HEADER;\n+            } else {\n+                sb = new StringBuilder();\n+                sb.append(c);\n+                state = HttpHeaderParser.State.HEADER;\n+            }\n@@ -306,10 +306,18 @@\n-        if (c == CR || c == LF) {\n-            if (sb.length() > 0) {\n-                \/\/ no continuation line - flush\n-                \/\/ previous header value.\n-                String headerString = sb.toString();\n-                sb = new StringBuilder();\n-                addHeaderFromString(headerString);\n-            }\n-            if (c == CR) {\n-                state = HttpHeaderParser.State.HEADER_FOUND_CR_LF_CR;\n+        if (!eof) {\n+            if (c == CR || c == LF) {\n+                if (sb.length() > 0) {\n+                    \/\/ no continuation line - flush\n+                    \/\/ previous header value.\n+                    String headerString = sb.toString();\n+                    sb = new StringBuilder();\n+                    addHeaderFromString(headerString);\n+                }\n+                if (c == CR) {\n+                    state = HttpHeaderParser.State.HEADER_FOUND_CR_LF_CR;\n+                } else {\n+                    state = HttpHeaderParser.State.FINISHED;\n+                }\n+            } else if (c == SP || c == HT) {\n+                assert sb.length() != 0;\n+                sb.append(SP); \/\/ continuation line\n+                state = HttpHeaderParser.State.HEADER;\n@@ -317,13 +325,9 @@\n-                state = HttpHeaderParser.State.FINISHED;\n-            }\n-        } else if (c == SP || c == HT) {\n-            assert sb.length() != 0;\n-            sb.append(SP); \/\/ continuation line\n-            state = HttpHeaderParser.State.HEADER;\n-        } else {\n-            if (sb.length() > 0) {\n-                \/\/ no continuation line - flush\n-                \/\/ previous header value.\n-                String headerString = sb.toString();\n-                sb = new StringBuilder();\n-                addHeaderFromString(headerString);\n+                if (sb.length() > 0) {\n+                    \/\/ no continuation line - flush\n+                    \/\/ previous header value.\n+                    String headerString = sb.toString();\n+                    sb = new StringBuilder();\n+                    addHeaderFromString(headerString);\n+                }\n+                sb.append(c);\n+                state = HttpHeaderParser.State.HEADER;\n@@ -331,2 +335,0 @@\n-            sb.append(c);\n-            state = HttpHeaderParser.State.HEADER;\n@@ -339,4 +341,6 @@\n-        if (c == LF) {\n-            state = HttpHeaderParser.State.FINISHED;\n-        } else {\n-            throw protocolException(\"Unexpected \\\"%s\\\", after CR LF CR\", c);\n+        if (!eof) {\n+            if (c == LF) {\n+                state = HttpHeaderParser.State.FINISHED;\n+            } else {\n+                throw protocolException(\"Unexpected \\\"%s\\\", after CR LF CR\", c);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/net\/HttpHeaderParser.java","additions":97,"deletions":93,"binary":false,"changes":190,"status":"modified"}]}