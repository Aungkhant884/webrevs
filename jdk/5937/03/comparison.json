{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules java.base\/sun.net.www\n@@ -33,3 +32,12 @@\n-import java.net.*;\n-import java.io.*;\n-import sun.net.www.MessageHeader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -138,2 +146,1 @@\n-\n-            MessageHeader headers =  new MessageHeader (is);\n+            HttpHeaderParser httpHeaderParser = new HttpHeaderParser(is);\n@@ -141,2 +148,1 @@\n-\n-            headers =  new MessageHeader (is);\n+            httpHeaderParser = new HttpHeaderParser(is);\n@@ -146,1 +152,0 @@\n-\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/ProxyFromCache.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/sun.net.www\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import sun.net.www.MessageHeader;\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -94,2 +95,2 @@\n-            MessageHeader headers =  new MessageHeader (is);\n-            String requestLine = headers.getValue(0);\n+            HttpHeaderParser headers =  new HttpHeaderParser (is);\n+            String requestLine = headers.getRequestDetails();\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/RequestURI.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/sun.net.www\n@@ -33,4 +32,12 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import sun.net.www.MessageHeader;\n+import java.io.BufferedOutputStream;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.util.List;\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -52,4 +59,9 @@\n-            MessageHeader mh = new MessageHeader(is);\n-            String connHeader = mh.findValue(\"Connection\");\n-            if (connHeader != null && connHeader.equalsIgnoreCase(\"close\")) {\n-                hasCloseHeader = true;\n+            HttpHeaderParser mh = new HttpHeaderParser(is);\n+            List <String> connHeader = mh.getHeaderValue(\"Connection\");\n+            if (connHeader != null) {\n+                for(String value : connHeader) {\n+                    if (value.equalsIgnoreCase(\"close\")) {\n+                        hasCloseHeader = true;\n+                        break;\n+                    }\n+                }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/CloseOptionHeader.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/sun.net.www\n@@ -35,1 +34,2 @@\n-import sun.net.www.MessageHeader;\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -163,1 +163,1 @@\n-                MessageHeader header = new MessageHeader (s.getInputStream());\n+                HttpHeaderParser httpHeaderParser = new HttpHeaderParser(s.getInputStream());\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NTLMTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @modules java.base\/sun.net.www\n- *          java.base\/sun.net.www.protocol.http:open\n+ * @modules java.base\/sun.net.www.protocol.http:open\n@@ -45,0 +44,2 @@\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -46,1 +47,0 @@\n-import sun.net.www.MessageHeader;\n@@ -166,1 +166,1 @@\n-                new MessageHeader().parseHeader(s.getInputStream());\n+                new HttpHeaderParser(s.getInputStream());\n@@ -174,2 +174,1 @@\n-                MessageHeader mh = new MessageHeader();\n-                mh.parseHeader(s.getInputStream());\n+                HttpHeaderParser mh = new HttpHeaderParser(s.getInputStream());\n@@ -177,1 +176,1 @@\n-                auth = mh.findValue(\"Authorization\");\n+                auth = mh.getHeaderValue(\"Authorization\").get(0);\n@@ -211,1 +210,1 @@\n-                new MessageHeader().parseHeader(s.getInputStream());\n+                new HttpHeaderParser(s.getInputStream());\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NoNTLM.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @modules java.base\/sun.net.www\n@@ -34,0 +33,2 @@\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -35,1 +36,0 @@\n-import sun.net.www.*;\n@@ -45,1 +45,1 @@\n-                MessageHeader header = new MessageHeader (is);\n+                HttpHeaderParser header = new HttpHeaderParser (is);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/RetryUponTimeout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules java.base\/sun.net.www\n@@ -37,0 +36,2 @@\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n@@ -38,1 +39,0 @@\n-import sun.net.www.MessageHeader;\n@@ -49,2 +49,2 @@\n-            MessageHeader header = new MessageHeader (s.getInputStream());\n-            String v = header.findValue (\"User-Agent\");\n+            HttpHeaderParser header = new HttpHeaderParser (s.getInputStream());\n+            String v = header.getHeaderValue (\"User-Agent\").get(0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/UserAgent.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/sun.net.www\n+ * @library \/test\/lib\n@@ -40,1 +40,3 @@\n-import sun.net.www.MessageHeader;\n+\n+import jdk.test.lib.net.HttpHeaderParser;\n+\n@@ -141,2 +143,2 @@\n-        MessageHeader mheader = new MessageHeader(in);\n-        String statusLine = mheader.getValue(0);\n+        HttpHeaderParser mheader = new HttpHeaderParser(in);\n+        String statusLine = mheader.getRequestDetails();\n@@ -148,1 +150,1 @@\n-           if (mheader.findValue(\"X-TestHeader\") != null) {\n+           if (mheader.getHeaderValue(\"X-TestHeader\") != null) {\n@@ -155,1 +157,1 @@\n-           if ((value = mheader.findValue(\"Proxy-Connection\")) == null ||\n+           if ((value = mheader.getHeaderValue(\"Proxy-Connection\").get(0)) == null ||\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/B6226610.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-import sun.net.www.MessageHeader;\n+import jdk.test.lib.net.HttpHeaderParser;\n+\n@@ -264,1 +265,1 @@\n-                MessageHeader mhead = new MessageHeader (is);\n+                HttpHeaderParser mhead = new HttpHeaderParser (is);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/TunnelProxy.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.net;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HttpHeaderParser {\n+    private Map <String, List<String>>  headerMap = new LinkedHashMap<>();\n+    private InputStream is;\n+    private List <String> keyList = new ArrayList<>();\n+    private String requestOrStatusLine;\n+\n+    public HttpHeaderParser(InputStream is) throws IOException {\n+        this.is = is;\n+        String headerString = \"\";\n+        BufferedReader br = new BufferedReader(new InputStreamReader(this.is));\n+        \/\/First line is either request line or status line\n+        requestOrStatusLine = br.readLine();\n+        while(true) {\n+            headerString = br.readLine();\n+            if(headerString == null || headerString.isEmpty()) {\n+                break;\n+            }\n+            if(headerString.contains(\": \")) {\n+                String key = headerString.substring(0, headerString.indexOf(\": \"));\n+                List <String> values = new ArrayList<>();\n+                String headerValue = headerString.substring(headerString.indexOf(\": \") + 2);\n+                String [] valueArray = headerValue.split(\",\");\n+                for(String value : valueArray) {\n+                    values.add(value.strip());\n+                }\n+                if(!headerMap.containsKey(key.strip())) {\n+                    headerMap.put(key, values);\n+                    keyList.add(key);\n+                } else {\n+                    headerMap.get(key).addAll(values);\n+                }\n+            }\n+        }\n+    }\n+    public List<String> getHeaderValue(String key) {\n+        if(headerMap.containsKey(key)) {\n+            return headerMap.get(key);\n+        }\n+        return null;\n+    }\n+    public List<String> getValue(int id) {\n+        String key = keyList.get(id);\n+        return headerMap.get(key);\n+    }\n+\n+    public String getRequestDetails() {\n+        return requestOrStatusLine;\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/net\/HttpHeaderParser.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}