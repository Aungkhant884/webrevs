{"files":[{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler.x86;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsAppend = {\"-XX:-UseSuperWord\"})\n+public class ConvertF2I {\n+    static final int LENGTH = 1000;\n+    static final int[] INT_ARRAY = new int[LENGTH];\n+    static final long[] LONG_ARRAY = new long[LENGTH];\n+    static final float[] FLOAT_ARRAY = new float[LENGTH];\n+    static final double[] DOUBLE_ARRAY = new double[LENGTH];\n+    float f;\n+    double d;\n+\n+    @Benchmark\n+    public int f2iSingle() {\n+        return (int)f;\n+    }\n+\n+    @Benchmark\n+    public long f2lSingle() {\n+        return (long)f;\n+    }\n+\n+    @Benchmark\n+    public int d2iSingle() {\n+        return (int)d;\n+    }\n+\n+    @Benchmark\n+    public long d2lSingle() {\n+        return (long)d;\n+    }\n+\n+    @Benchmark\n+    public void f2iArray() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            INT_ARRAY[i] = (int)FLOAT_ARRAY[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void f2lArray() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            LONG_ARRAY[i] = (long)FLOAT_ARRAY[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void d2iArray() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            INT_ARRAY[i] = (int)DOUBLE_ARRAY[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void d2lArray() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            LONG_ARRAY[i] = (long)DOUBLE_ARRAY[i];\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/ConvertF2I.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}