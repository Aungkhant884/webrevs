{"files":[{"patch":"@@ -191,0 +191,4 @@\n+\/\/ Converts any type T to a reference type.\n+template<typename T>\n+std::add_rvalue_reference_t<T> declval() noexcept;\n+\n@@ -192,5 +196,8 @@\n-#define CHECK_NONSTATIC_VM_STRUCT_ENTRY(typeName, fieldName, type) {               \\\n-    char space[sizeof (typeName)];                                                 \\\n-    typeName *dummyObj = (typeName *)space; type* dummy = &dummyObj->fieldName;    \\\n-    assert(offset_of(typeName, fieldName) < sizeof(typeName), \"Illegal nonstatic struct entry, field offset too large\"); \\\n-  }\n+#define CHECK_NONSTATIC_VM_STRUCT_ENTRY(typeName, fieldName, type) { \\\n+  static_assert( \\\n+    std::is_convertible< \\\n+      std::add_pointer_t<decltype(declval<typeName>().fieldName)>, \\\n+      std::add_pointer_t<type>>::value, \\\n+    \"type mismatch for \" XSTR(fieldName) \" member of \" XSTR(typeName)); \\\n+  assert(offset_of(typeName, fieldName) < sizeof(typeName), \"...\"); \\\n+}\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.hpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}