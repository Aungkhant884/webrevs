{"files":[{"patch":"@@ -2005,1 +2005,1 @@\n-    if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->isNeverBranch()) {\n+    if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->is_NeverBranch()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -373,17 +373,0 @@\n-#ifdef ASSERT\n-  if (UseMallocOnly) {\n-    \/\/ really slow, but not easy to make fast\n-    char** bottom = (char**)_chunk->bottom();\n-    for (char** p = (char**)_hwm - 1; p >= bottom; p--) {\n-      if (*p == ptr) return true;\n-    }\n-    for (Chunk *c = _first; c != NULL; c = c->next()) {\n-      if (c == _chunk) continue;  \/\/ current chunk has been processed\n-      char** bottom = (char**)c->bottom();\n-      for (char** p = (char**)c->top() - 1; p >= bottom; p--) {\n-        if (*p == ptr) return true;\n-      }\n-    }\n-    return false;\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -191,4 +191,0 @@\n-\/\/ Converts any type T to a reference type.\n-template<typename T>\n-std::add_rvalue_reference_t<T> declval() noexcept;\n-\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+#include <type_traits>\n+\n@@ -174,0 +176,4 @@\n+\/\/ Converts any type T to a reference type.\n+template<typename T>\n+std::add_rvalue_reference_t<T> declval() noexcept;\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}