{"files":[{"patch":"@@ -17081,2 +17081,3 @@\n-       iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2, iRegINoSp tmp3,\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg cr)\n+                          iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n+                          iRegINoSp tmp3, iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6,\n+                          vRegD_V0 vtmp0, vRegD_V1 vtmp1, rFlagsReg cr)\n@@ -17087,2 +17088,4 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL cr);\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (UU)\" %}\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6,\n+         TEMP vtmp0, TEMP vtmp1, KILL cr);\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (UU) \"\n+            \"# KILL $str1 $cnt1 $str2 $cnt2 $tmp1 $tmp2 $tmp3 $tmp4 $tmp5 $tmp6 V0-V1 cr\" %}\n@@ -17102,2 +17105,3 @@\n-       iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2, iRegINoSp tmp3,\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg cr)\n+                          iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2, iRegINoSp tmp3,\n+                          iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6,\n+                          vRegD_V0 vtmp0, vRegD_V1 vtmp1, rFlagsReg cr)\n@@ -17108,2 +17112,4 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL cr);\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (LL)\" %}\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6,\n+         TEMP vtmp0, TEMP vtmp1, KILL cr);\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (LL) \"\n+            \"# KILL $str1 $cnt1 $str2 $cnt2 $tmp1 $tmp2 $tmp3 $tmp4 $tmp5 $tmp6 V0-V1 cr\" %}\n@@ -17123,2 +17129,3 @@\n-       iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2, iRegINoSp tmp3,\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg cr)\n+                          iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,iRegINoSp tmp3,\n+                          iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6,\n+                          vRegD_V0 vtmp0, vRegD_V1 vtmp1, rFlagsReg cr)\n@@ -17129,2 +17136,4 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL cr);\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (UL)\" %}\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5,\n+         TEMP tmp6, TEMP vtmp0, TEMP vtmp1, KILL cr);\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$cnt2 -> $result (UL) \"\n+            \"# KILL $str1 cnt1 $str2 $cnt2 $tmp1 $tmp2 $tmp3 $tmp4 $tmp5 $tmp6 V0-V1 cr\" %}\n@@ -17144,2 +17153,2 @@\n-                 immI_le_4 int_cnt2, iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n+                              immI_le_4 int_cnt2, iRegI_R0 result, iRegINoSp tmp1,\n+                              iRegINoSp tmp2, iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n@@ -17151,1 +17160,2 @@\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (UU)\" %}\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (UU) \"\n+            \"# KILL $str1 $cnt1 $str2 $tmp1 $tmp2 $tmp3 $tmp4 cr\" %}\n@@ -17165,2 +17175,2 @@\n-                 immI_le_4 int_cnt2, iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n+                              immI_le_4 int_cnt2, iRegI_R0 result, iRegINoSp tmp1,\n+                              iRegINoSp tmp2, iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n@@ -17172,1 +17182,2 @@\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (LL)\" %}\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (LL) \"\n+            \"# KILL $str1 $cnt1 $str2 $tmp1 $tmp2 $tmp3 $tmp4 cr\" %}\n@@ -17186,2 +17197,2 @@\n-                 immI_1 int_cnt2, iRegI_R0 result, iRegINoSp tmp1, iRegINoSp tmp2,\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n+                              immI_1 int_cnt2, iRegI_R0 result, iRegINoSp tmp1,\n+                              iRegINoSp tmp2, iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n@@ -17193,1 +17204,2 @@\n-  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (UL)\" %}\n+  format %{ \"String IndexOf $str1,$cnt1,$str2,$int_cnt2 -> $result (UL) \"\n+            \"# KILL $str1 $cnt1 $str2 $tmp1 $tmp2 $tmp3 $tmp4 cr\" %}\n@@ -17310,0 +17322,2 @@\n+                       vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                       vRegD_V4 vtmp4, vRegD_V5 vtmp5, vRegD_V6 vtmp6, vRegD_V7 vtmp7,\n@@ -17314,1 +17328,3 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3,\n+         TEMP vtmp0, TEMP vtmp1, TEMP vtmp2, TEMP vtmp3, TEMP vtmp4, TEMP vtmp5,\n+         TEMP vtmp6, TEMP vtmp7, KILL cr);\n@@ -17316,1 +17332,1 @@\n-  format %{ \"Array Equals $ary1,ary2 -> $result    \/\/ KILL $tmp\" %}\n+  format %{ \"Array Equals $ary1,ary2 -> $result # KILL $ary1 $ary2 $tmp $tmp1 $tmp2 $tmp3 V0-V7 cr\" %}\n@@ -17331,0 +17347,2 @@\n+                       vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                       vRegD_V4 vtmp4, vRegD_V5 vtmp5, vRegD_V6 vtmp6, vRegD_V7 vtmp7,\n@@ -17335,1 +17353,3 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3,\n+         TEMP vtmp0, TEMP vtmp1, TEMP vtmp2, TEMP vtmp3, TEMP vtmp4, TEMP vtmp5,\n+         TEMP vtmp6, TEMP vtmp7, KILL cr);\n@@ -17337,1 +17357,1 @@\n-  format %{ \"Array Equals $ary1,ary2 -> $result    \/\/ KILL $tmp\" %}\n+  format %{ \"Array Equals $ary1,ary2 -> $result # KILL $ary1 $ary2 $tmp $tmp1 $tmp2 $tmp3 V0-V7 cr\" %}\n@@ -17367,2 +17387,2 @@\n-                         vRegD_V0 tmp1, vRegD_V1 tmp2,\n-                         vRegD_V2 tmp3, vRegD_V3 tmp4,\n+                         vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2,\n+                         vRegD_V3 vtmp3, vRegD_V4 vtmp4, vRegD_V5 vtmp5,\n@@ -17372,1 +17392,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4,\n+  effect(TEMP vtmp0, TEMP vtmp1, TEMP vtmp2, TEMP vtmp3, TEMP vtmp4, TEMP vtmp5,\n@@ -17375,1 +17395,1 @@\n-  format %{ \"String Compress $src,$dst,$len -> $result  \/\/ KILL $src,$dst\" %}\n+  format %{ \"String Compress $src,$dst,$len -> $result # KILL $src $dst V0-V5 cr\" %}\n@@ -17378,3 +17398,3 @@\n-                           $result$$Register,\n-                           $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n-                           $tmp3$$FloatRegister, $tmp4$$FloatRegister);\n+                           $result$$Register, $vtmp0$$FloatRegister, $vtmp1$$FloatRegister,\n+                           $vtmp2$$FloatRegister, $vtmp3$$FloatRegister,\n+                           $vtmp4$$FloatRegister, $vtmp5$$FloatRegister);\n@@ -17386,2 +17406,3 @@\n-instruct string_inflate(Universe dummy, iRegP_R0 src, iRegP_R1 dst, iRegI_R2 len,\n-                        vRegD_V0 tmp1, vRegD_V1 tmp2, vRegD_V2 tmp3, iRegP_R3 tmp4, rFlagsReg cr)\n+instruct string_inflate(Universe dummy, iRegP_R0 src, iRegP_R1 dst, iRegI_R2 len, iRegP_R3 tmp,\n+                        vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                        vRegD_V4 vtmp4, vRegD_V5 vtmp5, vRegD_V6 vtmp6, rFlagsReg cr)\n@@ -17390,1 +17411,3 @@\n-  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n+  effect(TEMP vtmp0, TEMP vtmp1, TEMP vtmp2, TEMP vtmp3,\n+         TEMP vtmp4, TEMP vtmp5, TEMP vtmp6, TEMP tmp,\n+         USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n@@ -17392,1 +17415,1 @@\n-  format %{ \"String Inflate $src,$dst    \/\/ KILL $tmp1, $tmp2\" %}\n+  format %{ \"String Inflate $src,$dst # KILL $tmp $src $dst $len V0-V6 cr\" %}\n@@ -17395,2 +17418,2 @@\n-                                        $tmp1$$FloatRegister, $tmp2$$FloatRegister,\n-                                        $tmp3$$FloatRegister, $tmp4$$Register);\n+                                        $vtmp0$$FloatRegister, $vtmp1$$FloatRegister,\n+                                        $vtmp2$$FloatRegister, $tmp$$Register);\n@@ -17407,2 +17430,2 @@\n-                          vRegD_V0 vtmp0, vRegD_V1 vtmp1,\n-                          vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                          vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2,\n+                          vRegD_V3 vtmp3, vRegD_V4 vtmp4, vRegD_V5 vtmp5,\n@@ -17413,2 +17436,2 @@\n-  effect(USE_KILL src, USE_KILL dst, USE len,\n-         KILL vtmp0, KILL vtmp1, KILL vtmp2, KILL vtmp3, KILL cr);\n+  effect(USE_KILL src, USE_KILL dst, USE len, KILL vtmp0, KILL vtmp1,\n+         KILL vtmp2, KILL vtmp3, KILL vtmp4, KILL vtmp5, KILL cr);\n@@ -17416,1 +17439,1 @@\n-  format %{ \"Encode ISO array $src,$dst,$len -> $result\" %}\n+  format %{ \"Encode ISO array $src,$dst,$len -> $result # KILL $src $dst V0-V5 cr\" %}\n@@ -17421,1 +17444,2 @@\n-                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister);\n+                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister,\n+                        $vtmp4$$FloatRegister, $vtmp5$$FloatRegister);\n@@ -17427,2 +17451,2 @@\n-                            vRegD_V0 vtmp0, vRegD_V1 vtmp1,\n-                            vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                            vRegD_V0 vtmp0, vRegD_V1 vtmp1, vRegD_V2 vtmp2,\n+                            vRegD_V3 vtmp3, vRegD_V4 vtmp4, vRegD_V5 vtmp5,\n@@ -17433,2 +17457,2 @@\n-  effect(USE_KILL src, USE_KILL dst, USE len,\n-         KILL vtmp0, KILL vtmp1, KILL vtmp2, KILL vtmp3, KILL cr);\n+  effect(USE_KILL src, USE_KILL dst, USE len, KILL vtmp0, KILL vtmp1,\n+         KILL vtmp2, KILL vtmp3, KILL vtmp4, KILL vtmp5, KILL cr);\n@@ -17436,1 +17460,1 @@\n-  format %{ \"Encode ASCII array $src,$dst,$len -> $result\" %}\n+  format %{ \"Encode ASCII array $src,$dst,$len -> $result # KILL $src $dst V0-V5 cr\" %}\n@@ -17441,1 +17465,2 @@\n-                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister);\n+                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister,\n+                        $vtmp4$$FloatRegister, $vtmp5$$FloatRegister);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":75,"deletions":50,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+\/\/ Clobbers: rscratch1, rscratch2, rflags. May also clobber v0-v1, when icnt1==-1.\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5011,0 +5011,2 @@\n+\/\/ Clobbers: rscratch1, rscratch2, rflags\n+\/\/ May also clobber v0-v7 when (!UseSimpleArrayEquals && UseSIMDForArrayEquals)\n@@ -5560,0 +5562,1 @@\n+\/\/ Clobbers: src, dst, res, rscratch1, rscratch2, rflags\n@@ -5563,1 +5566,2 @@\n-                                      FloatRegister vtmp2, FloatRegister vtmp3)\n+                                      FloatRegister vtmp2, FloatRegister vtmp3,\n+                                      FloatRegister vtmp4, FloatRegister vtmp5)\n@@ -5582,2 +5586,2 @@\n-    FloatRegister vlo0 = v4;\n-    FloatRegister vlo1 = v5;\n+    FloatRegister vlo0 = vtmp4;\n+    FloatRegister vlo1 = vtmp5;\n@@ -5656,0 +5660,1 @@\n+\/\/ Clobbers: src, dst, len, rflags, rscratch1, v0-v6\n@@ -5764,2 +5769,3 @@\n-                                         FloatRegister tmp2, FloatRegister tmp3) {\n-  encode_iso_array(src, dst, len, res, false, tmp0, tmp1, tmp2, tmp3);\n+                                         FloatRegister tmp2, FloatRegister tmp3,\n+                                         FloatRegister tmp4, FloatRegister tmp5) {\n+  encode_iso_array(src, dst, len, res, false, tmp0, tmp1, tmp2, tmp3, tmp4, tmp5);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1396,1 +1396,2 @@\n-                           FloatRegister vtmp2, FloatRegister vtmp3);\n+                           FloatRegister vtmp2, FloatRegister vtmp3,\n+                           FloatRegister vtmp4, FloatRegister vtmp5);\n@@ -1401,1 +1402,2 @@\n-                        FloatRegister vtmp2, FloatRegister vtmp3);\n+                        FloatRegister vtmp2, FloatRegister vtmp3,\n+                        FloatRegister vtmp4, FloatRegister vtmp5);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5154,0 +5154,1 @@\n+  \/\/ Clobbers: v0-v7 when UseSIMDForArrayEquals, rscratch1, rscratch2\n@@ -5737,0 +5738,2 @@\n+  \/\/ Clobbers: rscratch1, rscratch2, v0, v1, rflags\n+  \/\/\n@@ -6051,0 +6054,1 @@\n+  \/\/ Clobbers: r0, r1, r3, rscratch1, rflags, v0-v6\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,296 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307572\n+ * @summary Verify vector register clobbering in some aarch64 intrinsics\n+ * @library \/compiler\/patches \/test\/lib\n+ * @build java.base\/java.lang.Helper\n+ * @run main\/othervm -Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation compiler.c2.aarch64.TestIntrinsicsRegStress\n+ *\/\n+\n+package compiler.c2.aarch64;\n+\n+import java.util.Arrays;\n+\n+public class TestIntrinsicsRegStress {\n+\n+    final int LENGTH = 1024;\n+    final int ITER = 10000;\n+    final int NUM = 32;\n+\n+    byte[] ba;\n+    char[] ca;\n+    char[] cb;\n+    float[] fv;\n+\n+    String str;\n+    String[] strings;\n+    String needle = \"01234567890123456789\";\n+\n+    public void init() {\n+        ca = new char[LENGTH];\n+        fv = new float[NUM];\n+        strings = new String[NUM];\n+        for (int i = 0; i < LENGTH; i++) {\n+            ca[i] = (char) ('a' + i % NUM);\n+        }\n+        cb = ca.clone();\n+        str = new String(ca);\n+        for (int i = 0; i < NUM; i++) {\n+            fv[i] = 1;\n+        }\n+        for (int i = 0; i < NUM; i++) {\n+            strings[i] = str.substring(i) + needle;\n+        }\n+    }\n+\n+    public void checkIndexOf(int iter) {\n+        float t0 = 0;\n+        float t1 = fv[1] * fv[0];\n+        float t2 = fv[2] * fv[0];\n+        float t3 = fv[3] * fv[0];\n+        float t4 = fv[4] * fv[0];\n+        float t5 = fv[5] * fv[0];\n+        float t6 = fv[6] * fv[0];\n+        float t7 = fv[7] * fv[0];\n+        float t8 = fv[8] * fv[0];\n+        float t9 = fv[9] * fv[0];\n+        float t10 = fv[10] * fv[0];\n+        float t11 = fv[11] * fv[0];\n+        float t12 = fv[12] * fv[0];\n+        float t13 = fv[13] * fv[0];\n+        float t14 = fv[14] * fv[0];\n+        float t15 = fv[15] * fv[0];\n+        float t16 = fv[16] * fv[0];\n+        float t17 = fv[17] * fv[0];\n+        float t18 = fv[18] * fv[0];\n+        float t19 = fv[19] * fv[0];\n+        float t20 = fv[20] * fv[0];\n+        float t21 = fv[21] * fv[0];\n+        float t22 = fv[22] * fv[0];\n+        float t23 = fv[23] * fv[0];\n+        float t24 = fv[24] * fv[0];\n+        float t25 = fv[25] * fv[0];\n+        float t26 = fv[26] * fv[0];\n+        float t27 = fv[27] * fv[0];\n+        float t28 = fv[28] * fv[0];\n+        float t29 = fv[29] * fv[0];\n+        float t30 = fv[30] * fv[0];\n+\n+        int result = strings[iter % NUM].indexOf(needle);\n+\n+        if (result > LENGTH - NUM \/ 2) {\n+            \/\/ Use fp registers as many as possible and try to make them\n+            \/\/ live across above intrinsic function.\n+            t0 += t1 - t2 + t3 - t4 + t5 - t6 + t7 - t8 + t9 - t10 + t11 - t12 + t13 - t14 + t15\n+                    - t16 + t17 - t18 + t19 - t20 + t21 - t22 + t23 - t24 + t25 - t26 + t27 - t28\n+                    + t29 - t30; \/\/ 0\n+        }\n+        fv[31] += t0 + t2 - t11 + t16 - t29;\n+    }\n+\n+    public void testIndexOf() {\n+        for (int i = 0; i < ITER; i++) {\n+            checkIndexOf(i);\n+        }\n+    }\n+\n+    public void checkArraysEquals() {\n+        float t0 = 0;\n+        float t1 = fv[1] * fv[0];\n+        float t2 = fv[2] * fv[0];\n+        float t3 = fv[3] * fv[0];\n+        float t4 = fv[4] * fv[0];\n+        float t5 = fv[5] * fv[0];\n+        float t6 = fv[6] * fv[0];\n+        float t7 = fv[7] * fv[0];\n+        float t8 = fv[8] * fv[0];\n+        float t9 = fv[9] * fv[0];\n+        float t10 = fv[10] * fv[0];\n+        float t11 = fv[11] * fv[0];\n+        float t12 = fv[12] * fv[0];\n+        float t13 = fv[13] * fv[0];\n+        float t14 = fv[14] * fv[0];\n+        float t15 = fv[15] * fv[0];\n+        float t16 = fv[16] * fv[0];\n+        float t17 = fv[17] * fv[0];\n+        float t18 = fv[18] * fv[0];\n+        float t19 = fv[19] * fv[0];\n+        float t20 = fv[20] * fv[0];\n+        float t21 = fv[21] * fv[0];\n+        float t22 = fv[22] * fv[0];\n+        float t23 = fv[23] * fv[0];\n+        float t24 = fv[24] * fv[0];\n+        float t25 = fv[25] * fv[0];\n+        float t26 = fv[26] * fv[0];\n+        float t27 = fv[27] * fv[0];\n+        float t28 = fv[28] * fv[0];\n+        float t29 = fv[29] * fv[0];\n+        float t30 = fv[30] * fv[0];\n+\n+        if (Arrays.equals(ca, cb)) {\n+            \/\/ Use fp registers as many as possible and try to make them\n+            \/\/ live across above intrinsic function.\n+            t0 += t1 - t2 + t3 - t4 + t5 - t6 + t7 - t8 + t9 - t10 + t11 - t12 + t13 - t14 + t15\n+                    - t16 + t17 - t18 + t19 - t20 + t21 - t22 + t23 - t24 + t25 - t26 + t27 - t28\n+                    + t29 - t30; \/\/ 0\n+        }\n+        fv[31] += t0 + t2 - t11 + t16 - t29;\n+    }\n+\n+    public void testArraysEquals() {\n+        for (int i = 0; i < ITER; i++) {\n+            checkArraysEquals();\n+        }\n+    }\n+\n+    public void checkCompress(int iter) {\n+        float t0 = 0;\n+        float t1 = fv[1] * fv[0];\n+        float t2 = fv[2] * fv[0];\n+        float t3 = fv[3] * fv[0];\n+        float t4 = fv[4] * fv[0];\n+        float t5 = fv[5] * fv[0];\n+        float t6 = fv[6] * fv[0];\n+        float t7 = fv[7] * fv[0];\n+        float t8 = fv[8] * fv[0];\n+        float t9 = fv[9] * fv[0];\n+        float t10 = fv[10] * fv[0];\n+        float t11 = fv[11] * fv[0];\n+        float t12 = fv[12] * fv[0];\n+        float t13 = fv[13] * fv[0];\n+        float t14 = fv[14] * fv[0];\n+        float t15 = fv[15] * fv[0];\n+        float t16 = fv[16] * fv[0];\n+        float t17 = fv[17] * fv[0];\n+        float t18 = fv[18] * fv[0];\n+        float t19 = fv[19] * fv[0];\n+        float t20 = fv[20] * fv[0];\n+        float t21 = fv[21] * fv[0];\n+        float t22 = fv[22] * fv[0];\n+        float t23 = fv[23] * fv[0];\n+        float t24 = fv[24] * fv[0];\n+        float t25 = fv[25] * fv[0];\n+        float t26 = fv[26] * fv[0];\n+        float t27 = fv[27] * fv[0];\n+        float t28 = fv[28] * fv[0];\n+        float t29 = fv[29] * fv[0];\n+        float t30 = fv[30] * fv[0];\n+\n+        ba = Helper.compressChar(ca, 0, LENGTH, 0, LENGTH);\n+\n+        if (ba[iter % LENGTH] > (byte) ('a' + 5)) {\n+            \/\/ Use fp registers as many as possible and try to make them\n+            \/\/ live across above intrinsic function.\n+            t0 += t1 - t2 + t3 - t4 + t5 - t6 + t7 - t8 + t9 - t10 + t11 - t12 + t13 - t14 + t15\n+                    - t16 + t17 - t18 + t19 - t20 + t21 - t22 + t23 - t24 + t25 - t26 + t27 - t28\n+                    + t29 - t30; \/\/ 0\n+        }\n+        fv[31] += t0 + t2 - t11 + t16 - t29;\n+    }\n+\n+    public void testCompress() {\n+        for (int i = 0; i < ITER; i++) {\n+            checkCompress(i);\n+        }\n+    }\n+\n+    public void checkInflate(int iter) {\n+        float t0 = 0;\n+        float t1 = fv[1] * fv[0];\n+        float t2 = fv[2] * fv[0];\n+        float t3 = fv[3] * fv[0];\n+        float t4 = fv[4] * fv[0];\n+        float t5 = fv[5] * fv[0];\n+        float t6 = fv[6] * fv[0];\n+        float t7 = fv[7] * fv[0];\n+        float t8 = fv[8] * fv[0];\n+        float t9 = fv[9] * fv[0];\n+        float t10 = fv[10] * fv[0];\n+        float t11 = fv[11] * fv[0];\n+        float t12 = fv[12] * fv[0];\n+        float t13 = fv[13] * fv[0];\n+        float t14 = fv[14] * fv[0];\n+        float t15 = fv[15] * fv[0];\n+        float t16 = fv[16] * fv[0];\n+        float t17 = fv[17] * fv[0];\n+        float t18 = fv[18] * fv[0];\n+        float t19 = fv[19] * fv[0];\n+        float t20 = fv[20] * fv[0];\n+        float t21 = fv[21] * fv[0];\n+        float t22 = fv[22] * fv[0];\n+        float t23 = fv[23] * fv[0];\n+        float t24 = fv[24] * fv[0];\n+        float t25 = fv[25] * fv[0];\n+        float t26 = fv[26] * fv[0];\n+        float t27 = fv[27] * fv[0];\n+        float t28 = fv[28] * fv[0];\n+        float t29 = fv[29] * fv[0];\n+        float t30 = fv[30] * fv[0];\n+\n+        str.getChars(0, LENGTH, ca, 0);\n+\n+        if (ca[iter % LENGTH] > (byte) ('a' + NUM \/ 2)) {\n+            \/\/ Use fp registers as many as possible and try to make them\n+            \/\/ live across above intrinsic function.\n+            t0 += t1 - t2 + t3 - t4 + t5 - t6 + t7 - t8 + t9 - t10 + t11 - t12 + t13 - t14 + t15\n+                    - t16 + t17 - t18 + t19 - t20 + t21 - t22 + t23 - t24 + t25 - t26 + t27 - t28\n+                    + t29 - t30; \/\/ 0\n+        }\n+        fv[31] += t0 + t2 - t11 + t16 - t29;\n+    }\n+\n+    public void testInflate() {\n+        for (int i = 0; i < ITER; i++) {\n+            checkInflate(i);\n+        }\n+    }\n+\n+    public void verifyAndReset() {\n+        if (fv[31] != 1.0) {\n+            throw new RuntimeException(\"Failed with \" + Float.toString(fv[31]));\n+        } else {\n+            System.out.println(\"Success!\");\n+        }\n+        fv[31] = 1.0f;\n+    }\n+\n+    public static void main(String[] args) {\n+        TestIntrinsicsRegStress t = new TestIntrinsicsRegStress();\n+        t.init();\n+\n+        t.testIndexOf();\n+        t.verifyAndReset();\n+\n+        t.testArraysEquals();\n+        t.verifyAndReset();\n+\n+        t.testCompress();\n+        t.verifyAndReset();\n+\n+        t.testInflate();\n+        t.verifyAndReset();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestIntrinsicsRegStress.java","additions":296,"deletions":0,"binary":false,"changes":296,"status":"added"}]}