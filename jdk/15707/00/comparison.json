{"files":[{"patch":"@@ -730,36 +730,0 @@\n-    \/**\n-     * Detects if the given class may need to be initialized. This is often\n-     * needed in conjunction with obtaining the static field base of a\n-     * class.\n-     *\n-     * @deprecated No replacement API for this method.  As multiple threads\n-     * may be trying to initialize the same class or interface at the same time.\n-     * The only reliable result returned by this method is {@code false}\n-     * indicating that the given class has been initialized.  Instead, simply\n-     * call {@link java.lang.invoke.MethodHandles.Lookup#ensureInitialized(Class)}\n-     * that does nothing if the given class has already been initialized.\n-     * This method is subject to removal in a future version of JDK.\n-     *\n-     * @return false only if a call to {@code ensureClassInitialized} would have no effect\n-     *\n-     *\/\n-    @Deprecated(since = \"15\", forRemoval = true)\n-    @ForceInline\n-    public boolean shouldBeInitialized(Class<?> c) {\n-        return theInternalUnsafe.shouldBeInitialized(c);\n-    }\n-\n-    \/**\n-     * Ensures the given class has been initialized. This is often\n-     * needed in conjunction with obtaining the static field base of a\n-     * class.\n-     *\n-     * @deprecated Use the {@link java.lang.invoke.MethodHandles.Lookup#ensureInitialized(Class)}\n-     * method instead.  This method is subject to removal in a future version of JDK.\n-     *\/\n-    @Deprecated(since = \"15\", forRemoval = true)\n-    @ForceInline\n-    public void ensureClassInitialized(Class<?> c) {\n-        theInternalUnsafe.ensureClassInitialized(c);\n-    }\n-\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"}]}