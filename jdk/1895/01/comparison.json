{"files":[{"patch":"@@ -1819,0 +1819,1 @@\n+            FatalError fatalError = null;\n@@ -1823,6 +1824,6 @@\n-                    \/\/ When javac uses JDK 7 as a baseline, this code would be\n-                    \/\/ better written to set any\/all exceptions from all the\n-                    \/\/ Closeables as suppressed exceptions on the FatalError\n-                    \/\/ that is thrown.\n-                    JCDiagnostic msg = diagFactory.fragment(Fragments.FatalErrCantClose);\n-                    throw new FatalError(msg, e);\n+                    if (fatalError == null) {\n+                        JCDiagnostic msg = diagFactory.fragment(Fragments.FatalErrCantClose);\n+                        fatalError = new FatalError(msg, e);\n+                    } else {\n+                        fatalError.addSuppressed(e);\n+                    }\n@@ -1831,0 +1832,3 @@\n+            if (fatalError != null) {\n+                throw fatalError;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8069116 8216400\n+ * @summary Improve handling of IOExceptions and FatalError in JavaCompiler.close()\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox\n+ * @run main ImproveFatalErrorHandling\n+ *\/\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.JavaFileObject;\n+import javax.tools.ToolProvider;\n+import com.sun.tools.javac.api.JavacTaskImpl;\n+import com.sun.tools.javac.main.JavaCompiler;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.FatalError;\n+import static com.sun.tools.javac.main.JavaCompiler.compilerKey;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.Task;\n+import static toolbox.ToolBox.lineSeparator;\n+\n+public class ImproveFatalErrorHandling extends TestRunner {\n+    ToolBox tb;\n+\n+    String testCode = \"public class Test { }\";\n+\n+    public ImproveFatalErrorHandling() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ImproveFatalErrorHandling handling = new ImproveFatalErrorHandling();\n+        handling.runTests();\n+    }\n+\n+    @Test\n+    public void testIOExceptionInMethodClose() throws Exception {\n+        List<? extends JavaFileObject> files = Arrays.asList(new MemFile(\"Test.java\", testCode));\n+        JavacTaskImpl task = (JavacTaskImpl) ToolProvider\n+                .getSystemJavaCompiler()\n+                .getTask(null, null, null, null, null, files);\n+        Context context = task.getContext();\n+        task.call();\n+        JavaCompiler compiler = context.get(compilerKey);\n+        compiler.closeables = com.sun.tools.javac.util.List.of(\n+                new CloseException1(), new CloseException2(),\n+                new CloseSuccess(), new CloseException3());\n+\n+        try {\n+            compiler.close();\n+        } catch(FatalError fatalError) {\n+            \/\/ Do the check.\n+            List<String> expectedMsg = Arrays.asList(\n+                    \"Fatal Error: Cannot close compiler resources\",\n+                    \"exception 1\",\n+                    \"exception 2\",\n+                    \"exception 3\");\n+            ArrayList<String> actualMsg = new ArrayList();\n+            actualMsg.add(fatalError.getMessage());\n+            actualMsg.add(fatalError.getCause().getMessage());\n+            for (Throwable t : fatalError.getSuppressed()) {\n+                actualMsg.add(t.getMessage());\n+            }\n+            tb.checkEqual(expectedMsg, actualMsg);\n+        }\n+    }\n+\n+    class CloseException1 implements Closeable {\n+        public void close() throws IOException {\n+            throw new IOException(\"exception 1\");\n+        }\n+    }\n+\n+    class CloseException2 implements Closeable {\n+        public void close() throws IOException {\n+            throw new IOException(\"exception 2\");\n+        }\n+    }\n+\n+    class CloseException3 implements Closeable {\n+        public void close() throws IOException {\n+            throw new IOException(\"exception 3\");\n+        }\n+    }\n+\n+    class CloseSuccess implements Closeable {\n+        public void close() throws IOException { }\n+    }\n+\n+    class MemFile extends SimpleJavaFileObject {\n+        public final String text;\n+\n+        MemFile(String name, String text) {\n+            super(URI.create(name), JavaFileObject.Kind.SOURCE);\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return uri.toString();\n+        }\n+\n+        @Override\n+        public String getCharContent(boolean ignoreEncodingErrors) {\n+            return text;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/fatalErrors\/ImproveFatalErrorHandling.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}