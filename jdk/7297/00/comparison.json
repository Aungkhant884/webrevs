{"files":[{"patch":"@@ -677,3 +677,2 @@\n-  ReservedMemoryRegion& _region;\n-  const address         _p;\n-  bool                  _found_region;\n+  const ReservedMemoryRegion* _region;\n+  const address               _p;\n@@ -681,2 +680,2 @@\n-  FindAndSnapshotRegionWalker(void* p, ReservedMemoryRegion& region) :\n-    _region(region), _p((address)p), _found_region(false) { }\n+  FindAndSnapshotRegionWalker(const void* p) :\n+    _region(NULL), _p((address)p) { }\n@@ -686,2 +685,1 @@\n-      _region = *rgn;\n-      _found_region = true;\n+      _region = rgn;\n@@ -692,1 +690,3 @@\n-  bool found_region() const { return _found_region; }\n+  const ReservedMemoryRegion* region() const {\n+    return _region;\n+  }\n@@ -695,2 +695,2 @@\n-const bool VirtualMemoryTracker::snapshot_region_contains(void* p, ReservedMemoryRegion& region) {\n-  FindAndSnapshotRegionWalker walker(p, region);\n+const ReservedMemoryRegion* VirtualMemoryTracker::find_containing_region(const void* p) {\n+  FindAndSnapshotRegionWalker walker(p);\n@@ -698,1 +698,1 @@\n-  return walker.found_region();\n+  return walker.region();\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-  static const bool snapshot_region_contains(void* p, ReservedMemoryRegion& region);\n+  static const ReservedMemoryRegion* find_containing_region(const void* p);\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,1 +488,0 @@\n-      ReservedMemoryRegion region(0, 0);\n@@ -490,1 +489,3 @@\n-      if (VirtualMemoryTracker::snapshot_region_contains(p, region)) {\n+      const ReservedMemoryRegion* const region =\n+          VirtualMemoryTracker::find_containing_region(p);\n+      if (region != NULL) {\n@@ -492,1 +493,1 @@\n-          p2i(p), p2i(region.base()), p2i(region.base() + region.size()), region.flag_name());\n+          p2i(p), p2i(region->base()), p2i(region->base() + region->size()), region->flag_name());\n@@ -494,1 +495,1 @@\n-          region.call_stack()->print_on(tty);\n+          region->call_stack()->print_on(tty);\n@@ -500,1 +501,6 @@\n-      if (CanUseSafeFetchN() && SafeFetchN((intptr_t*)p, 0) != 0) {\n+      \/\/ GDB note: Before reading the malloc header from the assumed-to-be-malloced address, we do a basic\n+      \/\/  SafeFetch test to check if reading is safe. This will generate a signal if it isn't. That signal normally\n+      \/\/  is handled quietly by the VM, but it will trip up the debugger. gdb will catch the signal and disable\n+      \/\/  the pp() command for further use.\n+      \/\/ In order to avoid that, before invoking pp(), switch off SIGSEGV handling with \"handle SIGSEGV nostop\".\n+      if (CanUseSafeFetchN() && os::is_readable_pointer(p)) {\n@@ -504,1 +510,1 @@\n-        if (SafeFetchN((intptr_t*)mhdr, 0) != 0 && mhdr->check_block_integrity(msg, sizeof(msg), &p_corrupted)) {\n+        if (os::is_readable_pointer(mhdr) && mhdr->check_block_integrity(msg, sizeof(msg), &p_corrupted)) {\n@@ -518,1 +524,1 @@\n-    tty->print(PTR_FORMAT, p2i(p));\n+    tty->print_cr(PTR_FORMAT, p2i(p));\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}