{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -939,0 +939,23 @@\n+    \/**\n+     * Applies given function to this stream, then closes the stream.\n+     * No further operation on the stream will be possible after that.\n+     *\n+     * @apiNote\n+     * This method allows consuming and closing the stream in the single\n+     * operation, making it possible to perform the operation on the stream\n+     * holding a resource in a single statement.\n+     *\n+     * @param function function to apply\n+     * @param <R>      type of the function result\n+     * @return result of the function\n+     * @throws NullPointerException if the supplied function is null\n+     * @see #close()\n+     * @since 18\n+     *\/\n+    default <R> R consumeAndClose(Function<? super DoubleStream, ? extends R> function) {\n+        Objects.requireNonNull(function);\n+        try (this) {\n+            return function.apply(this);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoubleStream.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -881,0 +881,23 @@\n+    \/**\n+     * Applies given function to this stream, then closes the stream.\n+     * No further operation on the stream will be possible after that.\n+     *\n+     * @apiNote\n+     * This method allows consuming and closing the stream in the single\n+     * operation, making it possible to perform the operation on the stream\n+     * holding a resource in a single statement.\n+     *\n+     * @param function function to apply\n+     * @param <R>      type of the function result\n+     * @return result of the function\n+     * @throws NullPointerException if the supplied function is null\n+     * @see #close()\n+     * @since 18\n+     *\/\n+    default <R> R consumeAndClose(Function<? super IntStream, ? extends R> function) {\n+        Objects.requireNonNull(function);\n+        try (this) {\n+            return function.apply(this);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntStream.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -870,0 +870,23 @@\n+    \/**\n+     * Applies given function to this stream, then closes the stream.\n+     * No further operation on the stream will be possible after that.\n+     *\n+     * @apiNote\n+     * This method allows consuming and closing the stream in the single\n+     * operation, making it possible to perform the operation on the stream\n+     * holding a resource in a single statement.\n+     *\n+     * @param function function to apply\n+     * @param <R>      type of the function result\n+     * @return result of the function\n+     * @throws NullPointerException if the supplied function is null\n+     * @see #close()\n+     * @since 18\n+     *\/\n+    default <R> R consumeAndClose(Function<? super LongStream, ? extends R> function) {\n+        Objects.requireNonNull(function);\n+        try (this) {\n+            return function.apply(this);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongStream.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1368,0 +1368,34 @@\n+    \/**\n+     * Applies given function to this stream, then closes the stream.\n+     * No further operation on the stream will be possible after that.\n+     *\n+     * @apiNote\n+     * This method allows consuming and closing the stream in the single\n+     * operation, making it possible to perform the operation on the stream\n+     * holding a resource in a single statement. For example, it's possible to write:\n+     *\n+     * <pre>{@code\n+     * List<Path> paths = Files.list(Path.of(\".\")).consumeAndClose(Stream::toList);\n+     * }<\/pre>\n+     *\n+     * This is equivalent to:\n+     *\n+     * <pre>{@code\n+     * try (Stream<Path> stream = Files.list(Path.of(\".\"))) {\n+     *   List<Path> paths = stream.consumeAndClose(Stream::toList);\n+     * }}<\/pre>\n+     *\n+     * @param function function to apply\n+     * @param <R>      type of the function result\n+     * @return result of the function\n+     * @throws NullPointerException if the supplied function is null\n+     * @see #close()\n+     * @since 18\n+     *\/\n+    default <R> R consumeAndClose(Function<? super Stream<T>, ? extends R> function) {\n+        Objects.requireNonNull(function);\n+        try (this) {\n+            return function.apply(this);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8044047 8147505\n+ * @bug 8044047 8147505 8274412\n@@ -33,0 +33,4 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n@@ -191,0 +195,28 @@\n+\n+    public void testConsumeAndClose() {\n+        AtomicInteger count = new AtomicInteger();\n+        int result = Stream.of(1, 2, 3).onClose(count::incrementAndGet)\n+          .consumeAndClose(s -> s.mapToInt(x -> x).sum());\n+        assertEquals(result, 6);\n+        assertEquals(count.get(), 1);\n+        int resultInt = IntStream.of(1, 2, 3).onClose(count::incrementAndGet)\n+          .consumeAndClose(IntStream::sum);\n+        assertEquals(resultInt, 6);\n+        assertEquals(count.get(), 2);\n+        long resultLong = LongStream.of(1, 2, 3).onClose(count::incrementAndGet)\n+          .consumeAndClose(LongStream::sum);\n+        assertEquals(resultLong, 6L);\n+        assertEquals(count.get(), 3);\n+        double resultDouble = DoubleStream.of(1, 2, 3).onClose(count::incrementAndGet)\n+          .consumeAndClose(DoubleStream::sum);\n+        assertEquals(resultDouble, 6.0);\n+        assertEquals(count.get(), 4);\n+\n+        checkISE(() -> Stream.of(1, 2, 3)\n+          .consumeAndClose(s -> s.filter(n -> n > 0))\n+          .consumeAndClose(Stream::count));\n+        checkNPE(() -> Stream.empty().consumeAndClose(null));\n+        checkNPE(() -> IntStream.empty().consumeAndClose(null));\n+        checkNPE(() -> LongStream.empty().consumeAndClose(null));\n+        checkNPE(() -> DoubleStream.empty().consumeAndClose(null));\n+    }\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/StreamCloseTest.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"}]}