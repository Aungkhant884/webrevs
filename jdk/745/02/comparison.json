{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -304,0 +304,3 @@\n+     * @implSpec The default implementation of this method returns\n+     * {@code null}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/SelectorProvider.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.test.lib.Platform;\n@@ -34,1 +33,0 @@\n-import java.nio.channels.spi.AbstractSelector;\n@@ -37,2 +35,0 @@\n-import static java.lang.System.getProperty;\n-import static java.lang.Boolean.parseBoolean;\n@@ -308,20 +304,0 @@\n-    \/\/ A concrete subclass of SelectorProvider, in order to test implSpec\n-    static final SelectorProvider customerSelectorProvider = new SelectorProvider() {\n-        @Override public DatagramChannel openDatagramChannel() { return null; }\n-        @Override public DatagramChannel openDatagramChannel(ProtocolFamily family) { return null; }\n-        @Override public Pipe openPipe() { return null; }\n-        @Override public AbstractSelector openSelector() { return null; }\n-        @Override public ServerSocketChannel openServerSocketChannel() { return null; }\n-        @Override public SocketChannel openSocketChannel() { return null; }\n-    };\n-\n-    \/\/ Tests the specified default implementation of SelectorProvider\n-    @Test\n-    public void testCustomProvider() {\n-        assertThrows(NPE, () -> customerSelectorProvider.openSocketChannel(null));\n-        assertThrows(NPE, () -> customerSelectorProvider.openServerSocketChannel(null));\n-\n-        assertThrows(UOE, () -> customerSelectorProvider.openSocketChannel(BAD_PF));\n-        assertThrows(UOE, () -> customerSelectorProvider.openServerSocketChannel(BAD_PF));\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/ProtocolFamilies.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8254692\n+ * @summary Basic test for java.nio.channels.spi.SelectorProvider.java default behavior\n+ * @run testng TestDefaultBehaviour\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.ProtocolFamily;\n+import java.nio.channels.*;\n+import java.nio.channels.spi.AbstractSelector;\n+import java.nio.channels.spi.SelectorProvider;\n+\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertThrows;\n+\n+public class TestDefaultBehaviour {\n+    static final Class<UnsupportedOperationException> UOE = UnsupportedOperationException.class;\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n+    static final ProtocolFamily BAD_PF = () -> \"BAD_PROTOCOL_FAMILY\";\n+\n+    @Test\n+    public void testSelectorProvider() throws IOException {\n+        CustomSelectorProviderImpl customSpi = new CustomSelectorProviderImpl();\n+\n+        assertNull(customSpi.inheritedChannel());\n+\n+        assertThrows(NPE, () -> customSpi.openSocketChannel(null));\n+        assertThrows(NPE, () -> customSpi.openServerSocketChannel(null));\n+\n+        assertThrows(UOE, () -> customSpi.openSocketChannel(BAD_PF));\n+        assertThrows(UOE, () -> customSpi.openServerSocketChannel(BAD_PF));\n+    }\n+\n+    \/\/ A concrete subclass of SelectorProvider, in order to test the\n+    \/\/ default java.nio.channels.spi.SelectorProvider implementation\n+    static class CustomSelectorProviderImpl extends SelectorProvider {\n+        @Override public DatagramChannel openDatagramChannel() { return null; }\n+        @Override public DatagramChannel openDatagramChannel(ProtocolFamily family) { return null; }\n+        @Override public Pipe openPipe() { return null; }\n+        @Override public AbstractSelector openSelector() { return null; }\n+        @Override public ServerSocketChannel openServerSocketChannel() { return null; }\n+        @Override public SocketChannel openSocketChannel() { return null; }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/TestDefaultBehaviour.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}