{"files":[{"patch":"@@ -701,11 +701,0 @@\n-int StringtableDCmd::num_arguments() {\n-  ResourceMark rm;\n-  StringtableDCmd* dcmd = new StringtableDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -884,11 +884,0 @@\n-\n-int SymboltableDCmd::num_arguments() {\n-  ResourceMark rm;\n-  SymboltableDCmd* dcmd = new SymboltableDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2529,11 +2529,0 @@\n-\n-int SystemDictionaryDCmd::num_arguments() {\n-  ResourceMark rm;\n-  SystemDictionaryDCmd* dcmd = new SystemDictionaryDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -222,11 +222,0 @@\n-int HelpDCmd::num_arguments() {\n-  ResourceMark rm;\n-  HelpDCmd* dcmd = new HelpDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -261,11 +250,0 @@\n-int PrintVMFlagsDCmd::num_arguments() {\n-    ResourceMark rm;\n-    PrintVMFlagsDCmd* dcmd = new PrintVMFlagsDCmd(NULL, false);\n-    if (dcmd != NULL) {\n-      DCmdMark mark(dcmd);\n-      return dcmd->_dcmdparser.num_arguments();\n-    } else {\n-      return 0;\n-    }\n-}\n-\n@@ -295,11 +273,0 @@\n-int SetVMFlagDCmd::num_arguments() {\n-  ResourceMark rm;\n-  SetVMFlagDCmd* dcmd = new SetVMFlagDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -363,10 +330,0 @@\n-int JVMTIAgentLoadDCmd::num_arguments() {\n-  ResourceMark rm;\n-  JVMTIAgentLoadDCmd* dcmd = new JVMTIAgentLoadDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n@@ -435,11 +392,0 @@\n-int VMUptimeDCmd::num_arguments() {\n-  ResourceMark rm;\n-  VMUptimeDCmd* dcmd = new VMUptimeDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -547,11 +493,0 @@\n-int HeapDumpDCmd::num_arguments() {\n-  ResourceMark rm;\n-  HeapDumpDCmd* dcmd = new HeapDumpDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -571,11 +506,0 @@\n-int ClassHistogramDCmd::num_arguments() {\n-  ResourceMark rm;\n-  ClassHistogramDCmd* dcmd = new ClassHistogramDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -606,11 +530,0 @@\n-int ThreadDumpDCmd::num_arguments() {\n-  ResourceMark rm;\n-  ThreadDumpDCmd* dcmd = new ThreadDumpDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -732,13 +645,0 @@\n-\n-int JMXStartRemoteDCmd::num_arguments() {\n-  ResourceMark rm;\n-  JMXStartRemoteDCmd* dcmd = new JMXStartRemoteDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n-\n@@ -932,11 +832,0 @@\n-\n-int CodeHeapAnalyticsDCmd::num_arguments() {\n-  ResourceMark rm;\n-  CodeHeapAnalyticsDCmd* dcmd = new CodeHeapAnalyticsDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n@@ -973,11 +862,0 @@\n-int EventLogDCmd::num_arguments() {\n-  ResourceMark rm;\n-  EventLogDCmd* dcmd = new EventLogDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -998,11 +876,0 @@\n-int CompilerDirectivesAddDCmd::num_arguments() {\n-  ResourceMark rm;\n-  CompilerDirectivesAddDCmd* dcmd = new CompilerDirectivesAddDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -1035,12 +902,0 @@\n-\n-int ClassHierarchyDCmd::num_arguments() {\n-  ResourceMark rm;\n-  ClassHierarchyDCmd* dcmd = new ClassHierarchyDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -1064,4 +919,0 @@\n-TouchedMethodsDCmd::TouchedMethodsDCmd(outputStream* output, bool heap) :\n-                                       DCmdWithParser(output, heap)\n-{}\n-\n@@ -1076,5 +927,0 @@\n-\n-int TouchedMethodsDCmd::num_arguments() {\n-  return 0;\n-}\n-\n@@ -1086,3 +932,0 @@\n-DebugOnCmdStartDCmd::DebugOnCmdStartDCmd(outputStream* output, bool heap) : DCmdWithParser(output, heap) {\n-}\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":157,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-  static int num_arguments();\n@@ -72,1 +71,0 @@\n-  static int num_arguments() { return 0; }\n@@ -89,1 +87,0 @@\n-  static int num_arguments() { return 0; }\n@@ -111,1 +108,0 @@\n-    static int num_arguments() { return 0; }\n@@ -133,1 +129,0 @@\n-  static int num_arguments();\n@@ -156,1 +151,0 @@\n-  static int num_arguments();\n@@ -175,1 +169,0 @@\n-  static int num_arguments() { return 0; }\n@@ -197,1 +190,0 @@\n-  static int num_arguments();\n@@ -220,3 +212,0 @@\n-  static int num_arguments() {\n-    return 0;\n-  };\n@@ -238,1 +227,0 @@\n-  static int num_arguments();\n@@ -255,1 +243,0 @@\n-  static int num_arguments() { return 0; }\n@@ -269,1 +256,0 @@\n-    static int num_arguments() { return 0; }\n@@ -283,1 +269,0 @@\n-    static int num_arguments() { return 0; }\n@@ -297,1 +282,0 @@\n-  static int num_arguments() { return 0; }\n@@ -317,1 +301,0 @@\n-  static int num_arguments() { return 0; }\n@@ -351,1 +334,0 @@\n-  static int num_arguments();\n@@ -376,1 +358,0 @@\n-  static int num_arguments();\n@@ -403,1 +384,0 @@\n-  static int num_arguments();\n@@ -407,1 +387,1 @@\n-class TouchedMethodsDCmd : public DCmdWithParser {\n+class TouchedMethodsDCmd : public DCmd {\n@@ -409,1 +389,1 @@\n-  TouchedMethodsDCmd(outputStream* output, bool heap);\n+  TouchedMethodsDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n@@ -419,1 +399,0 @@\n-  static int num_arguments();\n@@ -442,1 +421,0 @@\n-  static int num_arguments();\n@@ -491,2 +469,0 @@\n-  static int num_arguments();\n-\n@@ -494,1 +470,0 @@\n-\n@@ -576,1 +551,0 @@\n-  static int num_arguments() { return 0; }\n@@ -598,1 +572,0 @@\n-  static int num_arguments() { return 0; }\n@@ -620,1 +593,0 @@\n-  static int num_arguments() { return 0; }\n@@ -641,1 +613,0 @@\n-  static int num_arguments() { return 0; }\n@@ -667,1 +638,0 @@\n-  static int num_arguments();\n@@ -689,1 +659,0 @@\n-  static int num_arguments() { return 0; }\n@@ -710,1 +679,0 @@\n-  static int num_arguments() { return 0; }\n@@ -733,1 +701,0 @@\n-  static int num_arguments();\n@@ -754,1 +721,0 @@\n-  static int num_arguments() { return 0; }\n@@ -820,1 +786,0 @@\n-  static int num_arguments();\n@@ -843,1 +808,0 @@\n-  static int num_arguments();\n@@ -866,1 +830,0 @@\n-  static int num_arguments();\n@@ -871,1 +834,1 @@\n-class DebugOnCmdStartDCmd : public DCmdWithParser {\n+class DebugOnCmdStartDCmd : public DCmd {\n@@ -873,1 +836,1 @@\n-  DebugOnCmdStartDCmd(outputStream* output, bool heap);\n+  DebugOnCmdStartDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n@@ -887,1 +850,0 @@\n-  static int num_arguments() { return 0; }\n@@ -912,1 +874,0 @@\n-  static int num_arguments();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":5,"deletions":44,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -34,0 +35,1 @@\n+#include <type_traits>\n@@ -277,0 +279,4 @@\n+  \/\/ num_arguments() is used by the DCmdFactoryImpl::get_num_arguments() template functions.\n+  \/\/ - For subclasses of DCmdWithParser, it's calculated by DCmdParser::num_arguments().\n+  \/\/ - Other subclasses of DCmd have zero arguments by default. You can change this\n+  \/\/   by defining your own version of MyDCmd::num_arguments().\n@@ -324,0 +330,3 @@\n+  DCmdParser* dcmdparser() {\n+    return &_dcmdparser;\n+  }\n@@ -407,1 +416,1 @@\n-    DCmdFactory(DCmdClass::num_arguments(), flags, enabled, hidden) { }\n+    DCmdFactory(get_num_arguments<DCmdClass>(), flags, enabled, hidden) { }\n@@ -427,0 +436,18 @@\n+\n+private:\n+  template <typename T, ENABLE_IF(!std::is_base_of<DCmdWithParser, T>::value)>\n+  static int get_num_arguments() {\n+    return T::num_arguments();\n+  }\n+\n+  template <typename T, ENABLE_IF(std::is_base_of<DCmdWithParser, T>::value)>\n+  static int get_num_arguments() {\n+    ResourceMark rm;\n+    DCmdClass* dcmd = new DCmdClass(NULL, false);\n+    if (dcmd != NULL) {\n+      DCmdMark mark(dcmd);\n+      return dcmd->dcmdparser()->num_arguments();\n+    } else {\n+      return 0;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,11 +163,0 @@\n-int NMTDCmd::num_arguments() {\n-  ResourceMark rm;\n-  NMTDCmd* dcmd = new NMTDCmd(NULL, false);\n-  if (dcmd != NULL) {\n-    DCmdMark mark(dcmd);\n-    return dcmd->_dcmdparser.num_arguments();\n-  } else {\n-    return 0;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/services\/nmtDCmd.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,0 @@\n-  static int num_arguments();\n","filename":"src\/hotspot\/share\/services\/nmtDCmd.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}