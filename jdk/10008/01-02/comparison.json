{"files":[{"patch":"@@ -522,0 +522,1 @@\n+\n@@ -525,1 +526,1 @@\n-            key = filter;\n+            key = filter.trim();\n@@ -529,2 +530,6 @@\n-            key = filter.substring(0, index);\n-            value = filter.substring(index + 1);\n+            key = filter.substring(0, index).trim();\n+            value = filter.substring(index + 1).trim();\n+            \/\/ ensure value is not empty here; rest will be checked in Criteria\n+            if (value.isEmpty()) {\n+                throw new InvalidParameterException(\"Invalid filter\");\n+            }\n@@ -595,1 +600,1 @@\n-        Set<String> keySet = filter.keySet();\n+        Set<Map.Entry<String, String>> entries = filter.entrySet();\n@@ -599,1 +604,1 @@\n-        if ((keySet == null) || (allProviders == null)) {\n+        if (entries == null || entries.isEmpty() || allProviders == null) {\n@@ -608,3 +613,5 @@\n-        for (String key : keySet) {\n-            String value = filter.get(key).trim();\n-            applyFilterOnCandidates(key, value, candidates);\n+        Iterator<Map.Entry<String, String>> iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            Map.Entry<String, String> e = iter.next();\n+            applyFilterOnCandidates(new Criteria(e.getKey(), e.getValue()),\n+                    candidates);\n@@ -615,1 +622,1 @@\n-        }\n+        };\n@@ -814,0 +821,48 @@\n+    private static class Criteria {\n+        private String serviceName;\n+        private String algName;\n+        private String attrName = null;\n+        private String attrValue;\n+\n+        Criteria(String key, String value) throws InvalidParameterException {\n+            int snEndIndex = key.indexOf('.');\n+            System.out.println(\"applying \" + key + \", \" + value);\n+\n+            if (snEndIndex <= 0) {\n+                \/\/ There must be a dot in the filter, and the dot\n+                \/\/ shouldn't be at the beginning of this string.\n+                throw new InvalidParameterException(\"Invalid filter\");\n+            }\n+\n+            serviceName = key.substring(0, snEndIndex);\n+            attrValue = value;\n+\n+            if (value.isEmpty()) {\n+                \/\/ value is empty. So the key should be in the format of\n+                \/\/ <crypto_service>.<algorithm_or_type>.\n+                algName = key.substring(snEndIndex + 1);\n+            } else {\n+                \/\/ value is non-empty. So the key must be in the format\n+                \/\/ of <crypto_service>.<algorithm_or_type>(one or more\n+                \/\/ spaces)<attribute_name>\n+                int algEndIndex = key.indexOf(' ', snEndIndex);\n+\n+                if (algEndIndex == -1) {\n+                    throw new InvalidParameterException(\"Invalid filter\");\n+                }\n+                algName = key.substring(snEndIndex + 1, algEndIndex);\n+                attrName = key.substring(algEndIndex + 1).trim();\n+                if (isKnownComposite(attrName) &&\n+                        attrValue.indexOf('|') != -1) {\n+                    throw new InvalidParameterException\n+                        (\"composite values unsupported for filtering\");\n+                }\n+            }\n+            \/\/ check required values\n+            if (serviceName.isEmpty() || algName.isEmpty() ||\n+                    (!attrValue.isEmpty() && attrName.isEmpty())) {\n+                throw new InvalidParameterException(\"Invalid filter\");\n+            }\n+        }\n+    }\n+\n@@ -818,13 +873,2 @@\n-    private static void applyFilterOnCandidates(String filterKey,\n-            String filterValue, LinkedList<Provider> candidates) {\n-\n-        String[] filterComponents = getFilterComponents(filterKey,\n-                                                        filterValue);\n-\n-        \/\/ The first component is the service name.\n-        \/\/ The second is the algorithm name.\n-        \/\/ If the third isn't null, that is the attribute name.\n-        String serviceName = filterComponents[0];\n-        String algName = filterComponents[1];\n-        String attrName = filterComponents[2];\n-\n+    private static void applyFilterOnCandidates(Criteria cr,\n+            LinkedList<Provider> candidates) {\n@@ -834,2 +878,1 @@\n-            if (!isCriterionSatisfied(p, serviceName, algName, attrName,\n-                    filterValue)) {\n+            if (!isCriterionSatisfied(p, cr)) {\n@@ -845,10 +888,4 @@\n-    private static boolean isCriterionSatisfied(Provider prov,\n-                                                String serviceName,\n-                                                String algName,\n-                                                String attrName,\n-                                                String filterValue) {\n-        String key = serviceName + '.' + algName;\n-\n-        if (attrName != null) {\n-            key += ' ' + attrName;\n-        }\n+    private static boolean isCriterionSatisfied(Provider prov, Criteria cr) {\n+        \/\/ Constructed key have ONLY 1 space between algName and attrName\n+        String key = cr.serviceName + '.' + cr.algName +\n+                (cr.attrName != null ? ' ' + cr.attrName : \"\");\n@@ -864,2 +901,2 @@\n-                                                      serviceName + \".\" +\n-                                                      algName,\n+                                                      cr.serviceName + \".\" +\n+                                                      cr.algName,\n@@ -868,6 +905,2 @@\n-                key = serviceName + \".\" + standardName;\n-\n-                if (attrName != null) {\n-                    key += ' ' + attrName;\n-                }\n-\n+                key = cr.serviceName + \".\" + cr.algName +\n+                        (cr.attrName != null ? ' ' + cr.attrName : \"\");\n@@ -887,1 +920,1 @@\n-        if (attrName == null) {\n+        if (cr.attrName == null) {\n@@ -893,1 +926,1 @@\n-        return isConstraintSatisfied(attrName, filterValue, propValue);\n+        return isConstraintSatisfied(cr.attrName, cr.attrValue, propValue);\n@@ -896,5 +929,5 @@\n-    private static boolean isKnownComposite(String attribute) {\n-        return (attribute.equalsIgnoreCase(\"SupportedKeyClasses\") ||\n-                attribute.equalsIgnoreCase(\"SupportedPaddings\") ||\n-                attribute.equalsIgnoreCase(\"SupportedModes\") ||\n-                attribute.equalsIgnoreCase(\"SupportedKeyFormats\"));\n+    private static boolean isKnownComposite(String attr) {\n+        return (attr.equalsIgnoreCase(\"SupportedKeyClasses\") ||\n+                attr.equalsIgnoreCase(\"SupportedPaddings\") ||\n+                attr.equalsIgnoreCase(\"SupportedModes\") ||\n+                attr.equalsIgnoreCase(\"SupportedKeyFormats\"));\n@@ -926,11 +959,4 @@\n-            if (value.indexOf('|') != -1) {\n-                StringTokenizer st = new StringTokenizer(value, \"| \");\n-                while (st.hasMoreTokens()) {\n-                    \/\/ check individual component for match and bail if no match\n-                    if (prop.indexOf(st.nextToken()) == -1) {\n-                        return false;\n-                    };\n-                }\n-                return true;\n-            } else {\n-                return (prop.indexOf(value) != -1);\n+            \/\/ match value to the property components\n+            String[] propComponents = prop.split(\"\\\\|\");\n+            for (String pc : propComponents) {\n+                if (value.equals(pc)) return true;\n@@ -938,0 +964,1 @@\n+            return false;\n@@ -944,56 +971,0 @@\n-    static String[] getFilterComponents(String filterKey, String filterValue) {\n-\n-        int algIndex = filterKey.indexOf('.');\n-\n-        if (algIndex < 0) {\n-            \/\/ There must be a dot in the filter, and the dot\n-            \/\/ shouldn't be at the beginning of this string.\n-            throw new InvalidParameterException(\"Invalid filter\");\n-        }\n-\n-        String serviceName = filterKey.substring(0, algIndex);\n-        String algName;\n-        String attrName = null;\n-\n-        if (filterValue.isEmpty()) {\n-            \/\/ The filterValue is an empty string. So the filterKey\n-            \/\/ should be in the format of <crypto_service>.<algorithm_or_type>.\n-            algName = filterKey.substring(algIndex + 1).trim();\n-            if (algName.isEmpty()) {\n-                \/\/ There must be an algorithm or type name.\n-                throw new InvalidParameterException(\"Invalid filter\");\n-            }\n-        } else {\n-            \/\/ The filterValue is a non-empty string. So the filterKey must be\n-            \/\/ in the format of\n-            \/\/ <crypto_service>.<algorithm_or_type> <attribute_name>\n-            int attrIndex = filterKey.indexOf(' ', algIndex + 1);\n-\n-            if (attrIndex == -1) {\n-                \/\/ There is no attribute name in the filter.\n-                throw new InvalidParameterException(\"Invalid filter\");\n-            } else {\n-                attrName = filterKey.substring(attrIndex + 1).trim();\n-                if (attrName.isEmpty()) {\n-                    \/\/ There is no attribute name in the filter.\n-                    throw new InvalidParameterException(\"Invalid filter\");\n-                }\n-            }\n-\n-            \/\/ There must be an algorithm name in the filter.\n-            if ((attrIndex < algIndex) ||\n-                (algIndex == attrIndex - 1)) {\n-                throw new InvalidParameterException(\"Invalid filter\");\n-            } else {\n-                algName = filterKey.substring(algIndex + 1, attrIndex);\n-            }\n-        }\n-\n-        String[] result = new String[3];\n-        result[0] = serviceName;\n-        result[1] = algName;\n-        result[2] = attrName;\n-\n-        return result;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":87,"deletions":116,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -36,0 +36,10 @@\n+    private static void testIPE(String s) {\n+        \/\/ check against invalid filter for InvalidParameterException\n+        try {\n+            Security.getProviders(s);\n+            throw new RuntimeException(\"Expected IPE not thrown: \" + s);\n+        } catch (InvalidParameterException ipe) {\n+            System.out.println(\"Expected IPE thrown for \" + s);\n+        }\n+    }\n+\n@@ -75,0 +85,8 @@\n+        testIPE(\"\");\n+        testIPE(\"Cipher.\");\n+        testIPE(\".RC2 \");\n+        testIPE(\"Cipher.RC2 :\");\n+        testIPE(\"Cipher.RC2 a: \");\n+        testIPE(\"Cipher.RC2 :b\");\n+        testIPE(\"Cipher.RC2 SupportedKeyClasses:a|b\");\n+\n@@ -76,1 +94,3 @@\n-        String key = \"Signature.SHA256withDSA SupportedKeyClasses\";\n+        String sigService = \"Signature.SHA256withDSA\";\n+        \/\/ javadoc allows extra spaces in between\n+        String key = sigService + \"   SupportedKeyClasses\";\n@@ -82,10 +102,3 @@\n-        \/\/ 1. exact match\n-        doit(key + \":\" + valComp1 + \"|\" + valComp2, p);\n-        \/\/ 2. value w\/ space prefix\n-        doit(key + \": \" + valComp1, p);\n-        \/\/ 3. value w\/ space suffix\n-        doit(key + \":\" + valComp2 + \" \", p);\n-        \/\/ 4. partial value, e.g. class name only\n-        doit(key + \":\" + valComp2CN, p);\n-        \/\/ 5. different values ordering\n-        doit(key + \":\" + valComp2 + \"|\" + valComp1, p);\n+        doit(key + \":\" + valComp1, p);\n+        doit(key + \":\" + valComp2, p);\n+        doit(key + \":\" + valComp2CN);\n@@ -95,3 +108,1 @@\n-        filters.put(key, valComp1 + \"|\" + valComp2);\n-        doit(filters, p);\n-        filters.put(key, \" \" + valComp1);\n+        filters.put(key, valComp1);\n@@ -99,1 +110,1 @@\n-        filters.put(key, valComp2 + \" \");\n+        filters.put(key, valComp2);\n@@ -102,3 +113,1 @@\n-        doit(filters, p);\n-        filters.put(key, valComp2 + \" | \" + valComp1);\n-        doit(filters, p);\n+        doit(filters);\n@@ -106,2 +115,3 @@\n-        \/\/ add more filters to the map\n-        filters.put(\"Signature.SHA256withDSA\", \"\");\n+        \/\/ try non-attribute filters\n+        filters.clear();\n+        filters.put(sigService, \"\");\n@@ -109,1 +119,1 @@\n-        filters.put(\"Cipher.Nonexisting\", \"\");\n+        filters.put(\"Cipher.RC2\", \"\");\n@@ -114,1 +124,0 @@\n-        String service = \"Signature.SHA256withDSA\";\n@@ -118,1 +127,1 @@\n-        Provider testProv = new TestProvider(pName, service, customKey,\n+        Provider testProv = new TestProvider(pName, sigService, customKey,\n@@ -122,2 +131,2 @@\n-        doit(service, pName, \"SUN\");\n-        filters.put(service, \"\");\n+        doit(sigService, pName, \"SUN\");\n+        filters.put(sigService, \"\");\n@@ -126,1 +135,1 @@\n-        String specAttr = service + \" \" + customKey + \":\" + customValue;\n+        String specAttr = sigService + \"  \" + customKey + \":\" + customValue;\n@@ -129,1 +138,1 @@\n-        filters.put(service + \" \" + customKey, \" \" + customValue + \" \");\n+        filters.put(sigService + \"  \" + customKey, customValue);\n@@ -135,1 +144,0 @@\n-        doit(filters);\n","filename":"test\/jdk\/java\/security\/Security\/ProviderFiltering.java","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"}]}