{"files":[{"patch":"@@ -123,0 +123,2 @@\n+\n+    private int moduleDescriptorsPerMethod = 75;\n@@ -145,1 +147,8 @@\n-            throw new IllegalArgumentException(getName() + \": \" + arg);\n+            String[] split = arg.split(\"=\");\n+            if (split.length != 2) {\n+                throw new IllegalArgumentException(getName() + \": \" + arg);\n+            }\n+            if (split[0].equals(\"batch-size\")) {\n+                throw new IllegalArgumentException(getName() + \": \" + arg);\n+            }\n+            this.moduleDescriptorsPerMethod = Integer.parseInt(split[1]);\n@@ -321,1 +330,1 @@\n-            = new SystemModulesClassGenerator(className, moduleInfos);\n+            = new SystemModulesClassGenerator(className, moduleInfos, moduleDescriptorsPerMethod);\n@@ -536,1 +545,0 @@\n-        private final int BUILDER_VAR    = 0;\n@@ -540,1 +548,3 @@\n-        private int nextLocalVar         = 2;  \/\/ index to next local variable\n+        private final int DEDUP_LIST_VAR = 2;\n+        private final int BUILDER_VAR    = 3;\n+        private int nextLocalVar         = 4;  \/\/ index to next local variable\n@@ -548,0 +558,2 @@\n+        private final int moduleDescriptorsPerMethod;\n+\n@@ -555,1 +567,2 @@\n-                                           List<ModuleInfo> moduleInfos) {\n+                                           List<ModuleInfo> moduleInfos,\n+                                           int moduleDescriptorsPerMethod) {\n@@ -558,0 +571,1 @@\n+            this.moduleDescriptorsPerMethod = moduleDescriptorsPerMethod;\n@@ -683,0 +697,70 @@\n+            if (moduleInfos.size() <= moduleDescriptorsPerMethod) {\n+                clb.withMethodBody(\n+                        \"moduleDescriptors\",\n+                        MTD_ModuleDescriptorArray,\n+                        ACC_PUBLIC,\n+                        cob -> {\n+                            cob.constantInstruction(moduleInfos.size())\n+                               .anewarray(CD_MODULE_DESCRIPTOR)\n+                               .astore(MD_VAR);\n+\n+                            for (int index = 0; index < moduleInfos.size(); index++) {\n+                                ModuleInfo minfo = moduleInfos.get(index);\n+                                new ModuleDescriptorBuilder(cob,\n+                                                            minfo.descriptor(),\n+                                                            minfo.packages(),\n+                                                            index).build();\n+                            }\n+                            cob.aload(MD_VAR)\n+                               .areturn();\n+                        });\n+                return;\n+            }\n+\n+\n+            \/\/ Split the module descriptors be created by multiple helper methods.\n+            \/\/ Each helper method \"subi\" creates the maximum N number of module descriptors\n+            \/\/     mi, m{i+1} ...\n+            \/\/ to avoid exceeding the 64kb limit of method length.  Then it will call\n+            \/\/ \"sub{i+1}\" to creates the next batch of module descriptors m{i+n}, m{i+n+1}...\n+            \/\/ and so on.  During the construction of the module descriptors, the string sets and\n+            \/\/ modifier sets are deduplicated (see SystemModulesClassGenerator.DedupSetBuilder)\n+            \/\/ and cached in the locals. These locals are saved in an array list so\n+            \/\/ that the helper method can restore the local variables that may be\n+            \/\/ referenced by the bytecode generated for creating module descriptors.\n+            \/\/ Pseudo code looks like this:\n+            \/\/\n+            \/\/ void subi(ModuleDescriptor[] mdescs, ArrayList<Object> localvars) {\n+            \/\/      \/\/ assign localvars to local variables\n+            \/\/      var l3 = localvars.get(0);\n+            \/\/      var l4 = localvars.get(1);\n+            \/\/        :\n+            \/\/      \/\/ fill mdescs[i] to mdescs[i+n-1]\n+            \/\/      mdescs[i] = ...\n+            \/\/      mdescs[i+1] = ...\n+            \/\/        :\n+            \/\/      \/\/ save new local variables added\n+            \/\/      localvars.add(lx)\n+            \/\/      localvars.add(l{x+1})\n+            \/\/        :\n+            \/\/      sub{i+i}(mdescs, localvars);\n+            \/\/ }\n+\n+            List<List<ModuleInfo>> splitModuleInfos = new ArrayList<>();\n+            List<ModuleInfo> currentModuleInfos = null;\n+            for (int index = 0; index < moduleInfos.size(); index++) {\n+                if (index % moduleDescriptorsPerMethod == 0) {\n+                    currentModuleInfos = new ArrayList<>();\n+                    splitModuleInfos.add(currentModuleInfos);\n+                }\n+                currentModuleInfos.add(moduleInfos.get(index));\n+            }\n+\n+            String helperMethodNamePrefix = \"sub\";\n+            ClassDesc arrayListClassDesc = ClassDesc.ofInternalName(\"java\/util\/ArrayList\");\n+\n+            int dedupVarStart = nextLocalVar;\n+            var wrapper = new Object() {\n+                int lastCopiedVar = firstVar - 1;\n+            };\n+\n@@ -690,0 +774,1 @@\n+                           .dup()\n@@ -691,9 +776,13 @@\n-\n-                        for (int index = 0; index < moduleInfos.size(); index++) {\n-                            ModuleInfo minfo = moduleInfos.get(index);\n-                            new ModuleDescriptorBuilder(cob,\n-                                                        minfo.descriptor(),\n-                                                        minfo.packages(),\n-                                                        index).build();\n-                        }\n-                        cob.aload(MD_VAR)\n+                        cob.new_(arrayListClassDesc)\n+                           .dup()\n+                           .constantInstruction(moduleInfos.size())\n+                           .invokespecial(arrayListClassDesc, INIT_NAME, MethodTypeDesc.of(CD_void, CD_int))\n+                           .astore(DEDUP_LIST_VAR);\n+                        cob.aload(0)\n+                           .aload(MD_VAR)\n+                           .aload(DEDUP_LIST_VAR)\n+                           .invokevirtual(\n+                                   this.classDesc,\n+                                   helperMethodNamePrefix + \"0\",\n+                                   MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc)\n+                           )\n@@ -702,0 +791,50 @@\n+\n+            for (int n = 0, count = 0; n < splitModuleInfos.size(); count += splitModuleInfos.get(n).size(), n++) {\n+                int index = n;       \/\/ the index of which ModuleInfo being processed in the current batch\n+                int start = count;   \/\/ the start index to the return ModuleDescriptor array for the current batch\n+                clb.withMethodBody(\n+                        helperMethodNamePrefix + index,\n+                        MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc),\n+                        ACC_PUBLIC,\n+                        cob -> {\n+                            if (nextLocalVar > firstVar) {\n+                                for (int i = firstVar; i < nextLocalVar; i++) {\n+                                    cob.aload(DEDUP_LIST_VAR)\n+                                       .constantInstruction(i - firstVar)\n+                                       .invokevirtual(arrayListClassDesc, \"get\", MethodTypeDesc.of(CD_Object, CD_int))\n+                                       .astore(i);\n+                                }\n+                            }\n+\n+                            List<ModuleInfo> currentBatch = splitModuleInfos.get(index);\n+                            for (int j = 0; j < currentBatch.size(); j++) {\n+                                ModuleInfo minfo = currentBatch.get(j);\n+                                new ModuleDescriptorBuilder(cob,\n+                                                            minfo.descriptor(),\n+                                                            minfo.packages(),\n+                                                            start + j).build();\n+                            }\n+\n+                            if (index < splitModuleInfos.size() - 1) {\n+                                if (nextLocalVar > firstLocalVar && nextLocalVar > curLocalVar) {\n+                                    for (int i = curLocalVar; i < nextLocalVar; i++) {\n+                                        cob.aload(DEDUP_LIST_VAR)\n+                                           .aload(i)\n+                                           .invokevirtual(arrayListClassDesc, \"add\", MethodTypeDesc.of(CD_boolean, CD_Object))\n+                                           .pop();\n+                                    }\n+                                    wrapper.lastCopiedVar = nextLocalVar - 1;\n+                                }\n+                                cob.aload(0)\n+                                   .aload(MD_VAR)\n+                                   .aload(DEDUP_LIST_VAR)\n+                                   .invokevirtual(\n+                                           this.classDesc,\n+                                           helperMethodNamePrefix + (index+1),\n+                                           MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc)\n+                                   );\n+                            }\n+\n+                            cob.return_();\n+                        });\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":153,"deletions":14,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -150,3 +150,3 @@\n-system-modules.argument=retainModuleTarget\n-\n-system-modules.description=Fast loading of module descriptors (always enabled)\n+system-modules.argument=batch-size=<N> sets the batch size of module descriptors\\n\\\n+\\                       to avoid exceeding the method length limit.  The default\\n\\\n+\\                       batch size is 75.\n@@ -155,2 +155,5 @@\n-\\  --system-modules retainModuleTarget\\n\\\n-\\                            Fast loading of module descriptors (always enabled)\n+\\  --system-modules [batch-size=<N>]\\n\\\n+\\                            The batch size specifies the maximum number of modules\\n\\\n+\\                            be handled in one method to workaround if the generated\\n\\\n+\\                            bytecode exceeds the method size limit. The default\\n\\\n+\\                            batch size is 75.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.StringJoiner;\n+import java.util.spi.ToolProvider;\n+\n+import tests.JImageGenerator;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that 100 modules can be linked using jlink.\n+ * @bug 8240567\n+ * @library ..\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.*\n+ * @run main\/othervm -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLink100Modules\n+ *\/\n+public class JLink100Modules {\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+            .orElseThrow(() -> new RuntimeException(\"javac tool not found\"));\n+\n+    static void report(String command, String[] args) {\n+        System.out.println(command + \" \" + String.join(\" \", Arrays.asList(args)));\n+    }\n+\n+    static void javac(String[] args) {\n+        report(\"javac\", args);\n+        JAVAC_TOOL.run(System.out, System.err, args);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path src = Paths.get(\"bug8240567\");\n+\n+        StringJoiner mainModuleInfoContent = new StringJoiner(\";\\n  requires \", \"module bug8240567x {\\n  requires \", \"\\n;}\");\n+\n+        \/\/ create 100 modules. With this naming schema up to 130 seem to work\n+        for (int i = 0; i < 150; i++) {\n+            String name = \"module\" + i + \"x\";\n+            Path moduleDir = Files.createDirectories(src.resolve(name));\n+\n+            StringBuilder builder = new StringBuilder(\"module \");\n+            builder.append(name).append(\" {\");\n+\n+            if (i != 0) {\n+                builder.append(\"requires module0x;\");\n+            }\n+\n+            builder.append(\"}\\n\");\n+            Files.writeString(moduleDir.resolve(\"module-info.java\"), builder.toString());\n+            mainModuleInfoContent.add(name);\n+        }\n+\n+        \/\/ create module reading the generated modules\n+        Path mainModulePath = src.resolve(\"bug8240567x\");\n+        Files.createDirectories(mainModulePath);\n+        Path mainModuleInfo = mainModulePath.resolve(\"module-info.java\");\n+        Files.writeString(mainModuleInfo, mainModuleInfoContent.toString());\n+\n+        Path mainClassDir = mainModulePath.resolve(\"testpackage\");\n+        Files.createDirectories(mainClassDir);\n+\n+        Files.writeString(mainClassDir.resolve(\"JLink100ModulesTest.java\"), \"\"\"\n+                package testpackage;\n+\n+                public class JLink100ModulesTest {\n+                    public static void main(String[] args) throws Exception {\n+                        System.out.println(\"JLink100ModulesTest started.\");\n+                    }\n+                }\n+                \"\"\");\n+\n+        String out = src.resolve(\"out\").toString();\n+        javac(new String[]{\n+                \"-d\", out,\n+                \"--module-source-path\", src.toString(),\n+                \"--module\", \"bug8240567x\"\n+        });\n+\n+        JImageGenerator.getJLinkTask()\n+                .modulePath(out)\n+                .output(src.resolve(\"out-jlink\"))\n+                .addMods(\"bug8240567x\")\n+                .call()\n+                .assertSuccess();\n+\n+        Path binDir = src.resolve(\"out-jlink\").resolve(\"bin\").toAbsolutePath();\n+        Path bin = binDir.resolve(\"java\");\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder(bin.toString(), \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+BytecodeVerificationLocal\", \"-m\", \"bug8240567x\/testpackage.JLink100ModulesTest\");\n+        processBuilder.inheritIO();\n+        processBuilder.directory(binDir.toFile());\n+        Process process = processBuilder.start();\n+        int exitCode = process.waitFor();\n+        if (exitCode != 0) throw new AssertionError(\"Exit code is not 0\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}