{"files":[{"patch":"@@ -121,1 +121,1 @@\n-    private boolean enabled;\n+    private final boolean enabled;\n@@ -520,0 +520,1 @@\n+        \/\/ Constant chosen for this generator, can be higher in practice\n@@ -522,1 +523,1 @@\n-        private final int BUILDER_VAR    = 0;\n+        private final int BUILDER_VAR    = MAX_LOCAL_VARS + 1; \/\/ we need 0 for \"this\"\n@@ -669,0 +670,46 @@\n+            if (moduleInfos.size() <= 75) {\n+                \/\/ In case there won't be a Method_Too_Large exception, we use the unsplit method to generate the method \"moduleDescriptors\"\n+                clb.withMethodBody(\n+                        \"moduleDescriptors\",\n+                        MethodTypeDesc.of(CD_MODULE_DESCRIPTOR.arrayType()),\n+                        ACC_PUBLIC,\n+                        cob -> {\n+                            cob.constantInstruction(moduleInfos.size())\n+                               .anewarray(CD_MODULE_DESCRIPTOR)\n+                               .astore(MD_VAR);\n+                            for (int index = 0; index < moduleInfos.size(); index++) {\n+                                ModuleInfo minfo = moduleInfos.get(index);\n+                                new ModuleDescriptorBuilder(cob,\n+                                        minfo.descriptor(),\n+                                        minfo.packages(),\n+                                        index).build();\n+                            }\n+                            cob.aload(MD_VAR)\n+                               .areturn();\n+                        });\n+                return;\n+            }\n+\n+            \/\/ split up module infos in \"consumable\" packages\n+            List<List<ModuleInfo>> splitModuleInfos = new ArrayList<>();\n+            List<ModuleInfo> currentModuleInfos = null;\n+            for (int index = 0; index < moduleInfos.size(); index++) {\n+                \/\/ The method is \"manually split\" based on the heuristics that 90 ModuleDescriptors are smaller than 64kb\n+                \/\/ The number 50 is chosen \"randomly\" to be below the 64kb limit of a method\n+                if (index % 50 == 0) {\n+                    \/\/ Prepare new list\n+                    currentModuleInfos = new ArrayList<>();\n+                    splitModuleInfos.add(currentModuleInfos);\n+                }\n+                currentModuleInfos.add(moduleInfos.get(index));\n+            }\n+\n+            final String helperMethodNamePrefix = \"moduleDescriptorsSub\";\n+            \/\/ Variable holding List<Set>, which needs to be restored at each helper method\n+            \/\/ This list grows at each call of each helper method\n+            final ClassDesc arrayListClassDesc = ClassDesc.ofInternalName(\"java\/util\/ArrayList\");\n+\n+            \/\/ dedupSetBuilder will (!) use this index for the first variable\n+            final int firstVariableForDedup = nextLocalVar;\n+\n+            \/\/ generate call to first helper method\n@@ -675,11 +722,17 @@\n-                           .anewarray(CD_MODULE_DESCRIPTOR)\n-                           .astore(MD_VAR);\n-\n-                        for (int index = 0; index < moduleInfos.size(); index++) {\n-                            ModuleInfo minfo = moduleInfos.get(index);\n-                            new ModuleDescriptorBuilder(cob,\n-                                                        minfo.descriptor(),\n-                                                        minfo.packages(),\n-                                                        index).build();\n-                        }\n-                        cob.aload(MD_VAR)\n+                                .anewarray(CD_MODULE_DESCRIPTOR)\n+                                .dup() \/\/ storing for the return at the end\n+                                .astore(MD_VAR);\n+                        \/\/ Generate List of Sets required by dedupSetBuilder\n+                        \/\/ We use slot \"nextLocalVar\" temporarily. We do net need the list later as the helper methods modify the list and pass it on.\n+                        cob.new_(arrayListClassDesc)\n+                           .dup()\n+                           .invokespecial(arrayListClassDesc, \"<init>\", MethodTypeDesc.of(CD_void))\n+                           .astore(nextLocalVar);\n+                        cob.aload(0)\n+                           .aload(MD_VAR)\n+                           .aload(nextLocalVar)\n+                           .invokevirtual(\n+                                   this.classDesc,\n+                                   helperMethodNamePrefix + \"0\",\n+                                   MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc)\n+                           )\n@@ -688,0 +741,63 @@\n+\n+            \/\/ generate all helper methods\n+            final int[] globalCount = {0};\n+            for (final int[] index = {0}; index[0] < splitModuleInfos.size(); index[0]++) {\n+                clb.withMethodBody(\n+                        helperMethodNamePrefix + index[0],\n+                        MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc),\n+                        ACC_PUBLIC,\n+                        cob -> {\n+                            List<ModuleInfo> moduleInfosPackage = splitModuleInfos.get(index[0]);\n+\n+                            \/\/ Restore all (!) sets from parameter to local variables\n+                            if (nextLocalVar > firstVariableForDedup) {\n+                                \/\/ We need to go from the end to the beginning as we will probably overwrite position 2 (which holds the list at the beginning)\n+                                for (int i = nextLocalVar-1; i >= firstVariableForDedup; i--) {\n+                                    cob.aload(2)\n+                                       .constantInstruction(i-firstVariableForDedup)\n+                                       .invokevirtual(arrayListClassDesc, \"get\", MethodTypeDesc.of(CD_Object, CD_int))\n+                                       .astore(i);\n+                                }\n+                            }\n+\n+                            for (int j = 0; j < moduleInfosPackage.size(); j++) {\n+                                ModuleInfo minfo = moduleInfosPackage.get(j);\n+                                \/\/ executed after the call, thus it is OK to overwrite index 0 (BUILDER_VAR)\n+                                new ModuleDescriptorBuilder(cob,\n+                                        minfo.descriptor(),\n+                                        minfo.packages(),\n+                                        globalCount[0]).build();\n+                                globalCount[0]++;\n+                            }\n+\n+                            if (index[0] + 1 < (splitModuleInfos.size())) {\n+                                \/\/ We are not the last one of the calling chain of helper methods\n+                                \/\/ Prepare next call\n+\n+                                \/\/ Store all new sets to List\n+                                if (nextLocalVar > firstVariableForDedup) {\n+                                    cob.new_(arrayListClassDesc)\n+                                       .dup()\n+                                       .invokespecial(arrayListClassDesc, \"<init>\", MethodTypeDesc.of(CD_void))\n+                                       .astore(nextLocalVar);\n+                                    for (int i = firstVariableForDedup; i < nextLocalVar; i++) {\n+                                        cob.aload(nextLocalVar)\n+                                           .aload(i)\n+                                           .invokevirtual(arrayListClassDesc, \"add\", MethodTypeDesc.of(CD_boolean, CD_Object))\n+                                           .pop(); \/\/ remove boolean result value\n+                                    }\n+                                }\n+                                \/\/ call to next helper method\n+                                cob.aload(0)\n+                                   .aload(MD_VAR) \/\/ load first parameter, which is MD_VAR\n+                                   .aload(nextLocalVar)\n+                                   .invokevirtual(\n+                                           this.classDesc,\n+                                           helperMethodNamePrefix + (index[0] + 1),\n+                                           MethodTypeDesc.of(CD_void, CD_MODULE_DESCRIPTOR.arrayType(), arrayListClassDesc)\n+                                   );\n+                            }\n+\n+                            cob.return_();\n+                        });\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":129,"deletions":13,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.StringJoiner;\n+import java.util.spi.ToolProvider;\n+\n+import tests.JImageGenerator;\n+import tests.JImageGenerator.JLinkTask;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that 100 modules can be linked using jlink.\n+ * @bug 8240567\n+ * @library ..\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.*\n+ * @run main\/othervm -verbose:gc -Xmx1g -Xlog:init=debug -XX:+UnlockDiagnosticVMOptions -XX:+BytecodeVerificationLocal JLink100Modules\n+ *\/\n+public class JLink100Modules {\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+            .orElseThrow(() -> new RuntimeException(\"javac tool not found\"));\n+    private static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+            .orElseThrow(() -> new RuntimeException(\"jlink tool not found\"));\n+\n+    static void report(String command, String[] args) {\n+        System.out.println(command + \" \" + String.join(\" \", Arrays.asList(args)));\n+    }\n+\n+    static void javac(String[] args) {\n+        report(\"javac\", args);\n+        JAVAC_TOOL.run(System.out, System.err, args);\n+    }\n+\n+    static void jlink(String[] args) {\n+        report(\"jlink\", args);\n+        JLINK_TOOL.run(System.out, System.err, args);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path src = Paths.get(\"bug8240567\");\n+\n+        StringJoiner mainModuleInfoContent = new StringJoiner(\";\\n  requires \", \"module bug8240567x {\\n  requires \", \"\\n;}\");\n+\n+        \/\/ create 100 modules. With this naming schema up to 130 seem to work\n+        for (int i = 0; i < 150; i++) {\n+            String name = \"module\" + i + \"x\";\n+            Path moduleDir = Files.createDirectories(src.resolve(name));\n+\n+            StringBuilder builder = new StringBuilder(\"module \");\n+            builder.append(name).append(\" {\");\n+\n+            if (i != 0) {\n+                builder.append(\"requires module0x;\");\n+            }\n+\n+            builder.append(\"}\\n\");\n+            Files.writeString(moduleDir.resolve(\"module-info.java\"), builder.toString());\n+            mainModuleInfoContent.add(name);\n+        }\n+\n+        \/\/ create module reading the generated modules\n+        Path mainModulePath = src.resolve(\"bug8240567x\");\n+        Files.createDirectories(mainModulePath);\n+        Path mainModuleInfo = mainModulePath.resolve(\"module-info.java\");\n+        Files.writeString(mainModuleInfo, mainModuleInfoContent.toString());\n+\n+        Path mainClassDir = mainModulePath.resolve(\"testpackage\");\n+        Files.createDirectories(mainClassDir);\n+\n+        Files.writeString(mainClassDir.resolve(\"JLink100ModulesTest.java\"), \"\"\"\n+                package testpackage;\n+\n+                public class JLink100ModulesTest {\n+                    public static void main(String[] args) throws Exception {\n+                        System.out.println(\"JLink100ModulesTest started.\");\n+                    }\n+                }\n+                \"\"\");\n+\n+        String out = src.resolve(\"out\").toString();\n+\n+        javac(new String[]{\n+                \"-d\", out,\n+                \"--module-source-path\", src.toString(),\n+                \"--module\", \"bug8240567x\"\n+        });\n+\n+        JImageGenerator.getJLinkTask()\n+                .modulePath(out)\n+                .output(src.resolve(\"out-jlink\"))\n+                .addMods(\"bug8240567x\")\n+                .call()\n+                .assertSuccess();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}