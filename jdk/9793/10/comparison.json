{"files":[{"patch":"@@ -349,1 +349,1 @@\n-        JLI_ReportErrorMessageSys(\"Could not create main thread: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"Could not create main thread\");\n@@ -353,1 +353,1 @@\n-        JLI_ReportErrorMessageSys(\"pthread_detach() failed: %s\\n\", strerror(errno));\n+        JLI_ReportErrorMessageSys(\"pthread_detach() failed\");\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,7 @@\n-\/* Reports a system error message to stderr or a window *\/\n+\/*\n+ * Just like JLI_ReportErrorMessage, except that it also displays the system\n+ * error message, if any, after the message passed to it by the caller.\n+ * The system errors reported depend on the platform, the only guarantee\n+ * is that the message passed to JLI_ReportErrorMessageSys will always be\n+ * displayed first\n+ *\/\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"jni_util.h\"\n@@ -203,10 +204,0 @@\n-    char *emsg;\n-\n-    \/*\n-     * TODO: its safer to use strerror_r but is not available on\n-     * Solaris 8. Until then....\n-     *\/\n-    emsg = strerror(errno);\n-    if (emsg != NULL) {\n-        fprintf(stderr, \"%s\\n\", emsg);\n-    }\n@@ -216,1 +207,8 @@\n-    fprintf(stderr, \"\\n\");\n+\n+    char err[1024];\n+    if (getLastErrorString(err, sizeof err) != 0) {\n+        fprintf(stderr, \"\\n%s\\n\", err);\n+    } else {\n+        fprintf(stderr, \"\\n\");\n+    }\n+\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -608,5 +608,0 @@\n-\/*\n- * Just like JLI_ReportErrorMessage, except that it concatenates the system\n- * error message if any, it's up to the calling routine to correctly\n- * format the separation of the messages.\n- *\/\n@@ -618,1 +613,2 @@\n-    int save_errno = errno;\n+    \/* C runtime error that has no corresponding DOS error code *\/\n+    char* crterr = strerror(errno);\n@@ -621,1 +617,1 @@\n-    char  *errtext = NULL;\n+    char  *winerr = NULL;\n@@ -625,1 +621,2 @@\n-    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n+    \/* Platform SDK \/ DOS Error *\/\n+    if ((errval = GetLastError()) != 0) {\n@@ -628,3 +625,3 @@\n-            NULL, errval, 0, (LPTSTR)&errtext, 0, NULL);\n-        if (errtext == NULL || n == 0) {                \/* Paranoia check *\/\n-            errtext = \"\";\n+            NULL, errval, 0, (LPTSTR)&winerr, 0, NULL);\n+        if (n == 0) {\n+            winerr = \"Java could not correctly determine the native platform error\";\n@@ -634,4 +631,6 @@\n-            if (n > 2) {                                \/* Drop final CR, LF *\/\n-                if (errtext[n - 1] == '\\n') n--;\n-                if (errtext[n - 1] == '\\r') n--;\n-                errtext[n] = '\\0';\n+            \/* Paranoia check *\/\n+            if (winerr != NULL && n > 2) {\n+                \/* Drop final CR, LF *\/\n+                if (winerr[n - 1] == '\\n') n--;\n+                if (winerr[n - 1] == '\\r') n--;\n+                winerr[n] = '\\0';\n@@ -640,2 +639,0 @@\n-    } else {   \/* C runtime error that has no corresponding DOS error code *\/\n-        errtext = strerror(save_errno);\n@@ -647,4 +644,8 @@\n-        \/* get the length of the string we need *\/\n-        int len = mlen =  _vscprintf(fmt, vl) + 1;\n-        if (freeit) {\n-           mlen += (int)JLI_StrLen(errtext);\n+        \/* Get the length of the string we need *\/\n+        int len = mlen = _vscprintf(fmt, vl) + 1;\n+        if (crterr != NULL) {\n+            mlen += 1 + (int) JLI_StrLen(crterr);\n+        }\n+\n+        if (winerr != NULL) {\n+            mlen += 1 + (int) JLI_StrLen(winerr);\n@@ -657,2 +658,9 @@\n-        if (freeit) {\n-           JLI_StrCat(message, errtext);\n+        if (crterr != NULL) {\n+            message[len + 1] = '\\n';\n+            JLI_StrCat(message, crterr);\n+        }\n+\n+        if (winerr != NULL) {\n+            \/* Trailing null terminator *\/\n+            message[mlen - 1 - JLI_StrLen(winerr)] = '\\n';\n+            JLI_StrCat(message, winerr);\n@@ -667,2 +675,7 @@\n-        if (freeit) {\n-           fprintf(stderr, \"%s\", errtext);\n+        if (crterr != NULL) {\n+            fprintf(stderr, \"\\nC Runtime Error: %s\", crterr);\n+        }\n+        if (winerr != NULL) {\n+            fprintf(stderr, \"\\nWindows API Error: %s\\n\", winerr);\n+        } else {\n+            fprintf(stderr, \"\\n\");\n@@ -672,1 +685,1 @@\n-        (void)LocalFree((HLOCAL)errtext);\n+        (void)LocalFree((HLOCAL)winerr);\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":39,"deletions":26,"binary":false,"changes":65,"status":"modified"}]}