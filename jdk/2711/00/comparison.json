{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -30,0 +31,1 @@\n+import java.lang.ref.WeakReference;\n@@ -32,0 +34,2 @@\n+import java.util.Map;\n+import java.util.WeakHashMap;\n@@ -33,1 +37,0 @@\n-import sun.awt.SoftCache;\n@@ -82,6 +85,0 @@\n-    private static class ObserverCache {\n-\n-        @SuppressWarnings(\"deprecation\")\n-        static final SoftCache INSTANCE = new SoftCache();\n-    }\n-\n@@ -106,1 +103,4 @@\n-            ImageObserver o = (ImageObserver) ObserverCache.INSTANCE.get(observer);\n+            return ObserverCache.INSTANCE.computeIfAbsent(observer,\n+                    key -> new ObserverCache(key, concatenateInfo, image));\n+        }\n+    }\n@@ -108,1 +108,1 @@\n-            if (o == null) {\n+    private static final class ObserverCache implements ImageObserver {\n@@ -110,2 +110,2 @@\n-                o = (Image resolutionVariant, int flags,\n-                        int x, int y, int width, int height) -> {\n+        private static final Map<ImageObserver, ImageObserver> INSTANCE =\n+                new WeakHashMap<>();\n@@ -113,3 +113,3 @@\n-                            if ((flags & (ImageObserver.WIDTH | BITS_INFO)) != 0) {\n-                                width = (width + 1) \/ 2;\n-                            }\n+        private final boolean concat;\n+        private final WeakReference<Image> imageRef;\n+        private final WeakReference<ImageObserver> observerRef;\n@@ -117,3 +117,5 @@\n-                            if ((flags & (ImageObserver.HEIGHT | BITS_INFO)) != 0) {\n-                                height = (height + 1) \/ 2;\n-                            }\n+        private ObserverCache(ImageObserver obs, boolean concat, Image img) {\n+            this.concat = concat;\n+            imageRef = new WeakReference<>(img);\n+            observerRef = new WeakReference<>(obs);\n+        }\n@@ -121,4 +123,5 @@\n-                            if ((flags & BITS_INFO) != 0) {\n-                                x \/= 2;\n-                                y \/= 2;\n-                            }\n+        @Override\n+        public boolean imageUpdate(Image img, int infoflags,\n+                                   int x, int y, int width, int height) {\n+            ImageObserver observer = observerRef.get();\n+            Image image = imageRef.get();\n@@ -126,4 +129,7 @@\n-                            if(concatenateInfo){\n-                                flags &= ((ToolkitImage) image).\n-                                        getImageRep().check(null);\n-                            }\n+            if (observer == null || image == null) {\n+                return false;\n+            }\n+\n+            if ((infoflags & (ImageObserver.WIDTH | BITS_INFO)) != 0) {\n+                width = (width + 1) \/ 2;\n+            }\n@@ -131,3 +137,8 @@\n-                            return observer.imageUpdate(\n-                                    image, flags, x, y, width, height);\n-                        };\n+            if ((infoflags & (ImageObserver.HEIGHT | BITS_INFO)) != 0) {\n+                height = (height + 1) \/ 2;\n+            }\n+\n+            if ((infoflags & BITS_INFO) != 0) {\n+                x \/= 2;\n+                y \/= 2;\n+            }\n@@ -135,1 +146,2 @@\n-                ObserverCache.INSTANCE.put(observer, o);\n+            if (concat) {\n+                infoflags &= ((ToolkitImage) image).getImageRep().check(null);\n@@ -137,1 +149,1 @@\n-            return o;\n+            return observer.imageUpdate(image, infoflags, x, y, width, height);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/MultiResolutionToolkitImage.java","additions":43,"deletions":31,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ImageObserver;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+\/**\n+ * @test\n+ * @bug 8257500\n+ * @summary Drawing MultiResolutionImage with ImageObserver may \"leaks\" memory\n+ *\/\n+public final class ImageObserverLeak {\n+\n+    public static void main(String[] args) throws Exception {\n+        Reference<ImageObserver> ref = test();\n+\n+        while (!ref.refersTo(null)) {\n+            Thread.sleep(500);\n+            \/\/ Cannot generate OOM here, it will clear the SoftRefs as well\n+            System.gc();\n+        }\n+    }\n+\n+    private static Reference<ImageObserver> test() throws Exception {\n+        BufferedImage src = new BufferedImage(200, 200, TYPE_INT_RGB);\n+        Image mri = new BaseMultiResolutionImage(src);\n+        ImageObserver observer = new ImageObserver() {\n+            @Override\n+            public boolean imageUpdate(Image img, int infoflags, int x, int y,\n+                                       int width, int height) {\n+                return false;\n+            }\n+        };\n+        Reference<ImageObserver> ref = new WeakReference<>(observer);\n+\n+        BufferedImage dst = new BufferedImage(200, 300, TYPE_INT_RGB);\n+        Graphics2D g2d = dst.createGraphics();\n+        g2d.drawImage(mri, 0, 0, observer);\n+        g2d.dispose();\n+        return ref;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/ImageObserverLeak.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import static java.awt.image.ImageObserver.ALLBITS;\n@@ -40,2 +39,2 @@\n- * @bug 8040291\n- * @author Alexander Scherbatiy\n+ * @bug 8040291 8257500\n+ * @requires os.family == \"mac\"\n@@ -47,1 +46,0 @@\n-\n@@ -143,1 +141,1 @@\n-            if (elem.getClassName().endsWith(\"MultiResolutionToolkitImage\")) {\n+            if (elem.getClassName().endsWith(\"ObserverCache\")) {\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/MultiResolutionToolkitImageTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}