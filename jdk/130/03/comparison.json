{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,3 @@\n+    \/\/ Represents the default \"unknown\" value for OS header, per RFC-1952\n+    private static final byte OS_UNKNOWN = (byte) 255;\n+\n@@ -192,1 +195,1 @@\n-                      0                         \/\/ Operating system (OS)\n+                      OS_UNKNOWN                \/\/ Operating system (OS)\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPOutputStream.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+\/**\n+ * @test\n+ * @bug 8244706\n+ * @summary Verify that the OS header flag in the stream written out by java.util.zip.GZIPOutputStream\n+ * has the correct expected value\n+ * @run testng GZIPOutputStreamHeaderTest\n+ *\/\n+public class GZIPOutputStreamHeaderTest {\n+\n+    private static final int OS_HEADER_INDEX = 9;\n+    private static final int HEADER_VALUE_OS_UNKNOWN = 255;\n+\n+    \/**\n+     * Test that the {@code OS} header field in the GZIP output stream\n+     * has a value of {@code 255} which represents \"unknown\"\n+     *\/\n+    @Test\n+    public void testOSHeader() throws Exception {\n+        final String data = \"Hello world!!!\";\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (final GZIPOutputStream gzipOutputStream = new GZIPOutputStream(baos);) {\n+            gzipOutputStream.write(data.getBytes(StandardCharsets.UTF_8));\n+        }\n+        final byte[] compressed = baos.toByteArray();\n+        Assert.assertNotNull(compressed, \"Compressed data is null\");\n+        Assert.assertEquals(toUnsignedByte(compressed[OS_HEADER_INDEX]), HEADER_VALUE_OS_UNKNOWN,\n+                \"Unexpected value for OS header\");\n+        \/\/ finally verify that the compressed data is readable back to the original\n+        final String uncompressed;\n+        try (final ByteArrayOutputStream os = new ByteArrayOutputStream();\n+             final ByteArrayInputStream bis = new ByteArrayInputStream(compressed);\n+             final GZIPInputStream gzipInputStream = new GZIPInputStream(bis)) {\n+            gzipInputStream.transferTo(os);\n+            uncompressed = new String(os.toByteArray(), StandardCharsets.UTF_8);\n+        }\n+        Assert.assertEquals(uncompressed, data, \"Unexpected data read from GZIPInputStream\");\n+    }\n+\n+    private static int toUnsignedByte(final byte b) {\n+        return b & 0xff;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPOutputStreamHeaderTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}