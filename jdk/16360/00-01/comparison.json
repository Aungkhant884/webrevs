{"files":[{"patch":"@@ -745,19 +745,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    AbstractMemorySegmentImpl requireSegmentConvertibleFor(MemorySegment segment, long offset, int elementByteSize)  {\n-        AbstractMemorySegmentImpl ams = (AbstractMemorySegmentImpl) segment;\n-        if (ams.maxAlignMask() > 1 && !ams.isAlignedForElement(offset, elementByteSize)) {\n-            String arrayComponent = ams.heapBase()\n-                    .map(Object::getClass)\n-                    .map(Class::componentType)\n-                    .map(Object::toString)\n-                    .orElse(\"?\");\n-            throw new IllegalArgumentException(\"Misaligned access in the backing \" + arrayComponent + \"[]\" +\n-                    \" array for elements of size \" + elementByteSize + \" bytes\" +\n-                    \" at address: \" + Utils.toHexString(ams.address() + offset));\n-        }\n-\n-        return ams;\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -3283,3 +3284,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code byte} aligned.\n@@ -3336,3 +3334,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code byte} aligned.\n@@ -3810,1 +3805,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3826,1 +3821,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3894,1 +3889,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3911,1 +3906,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2966,3 +2967,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code double} aligned.\n@@ -3024,3 +3022,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code double} aligned.\n@@ -3387,1 +3382,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3403,1 +3398,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3506,1 +3501,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3523,1 +3518,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2972,3 +2973,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code float} aligned.\n@@ -3030,3 +3028,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code float} aligned.\n@@ -3356,1 +3351,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3372,1 +3367,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3456,1 +3451,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3473,1 +3468,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -3128,3 +3129,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code int} aligned.\n@@ -3186,3 +3184,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code int} aligned.\n@@ -3512,1 +3507,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3528,1 +3523,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3612,1 +3607,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3629,1 +3624,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -3007,3 +3008,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code long} aligned.\n@@ -3065,3 +3063,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code long} aligned.\n@@ -3428,1 +3423,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3444,1 +3439,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3547,1 +3542,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3564,1 +3559,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -3277,3 +3278,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code short} aligned.\n@@ -3335,3 +3333,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code short} aligned.\n@@ -3796,1 +3791,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -3812,1 +3807,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -3863,1 +3858,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -3880,1 +3875,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -4079,3 +4080,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code $type$} aligned.\n@@ -4141,3 +4139,0 @@\n-     * @throws IllegalArgumentException if the memory segment is a heap segment that is\n-     *         not backed by a {@code byte[]} array and if access to the backing array\n-     *         is not {@code $type$} aligned.\n@@ -4938,1 +4933,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, vsp,\n@@ -4954,1 +4949,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n@@ -5085,1 +5080,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n@@ -5102,1 +5097,1 @@\n-                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n+                (AbstractMemorySegmentImpl) ms, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -111,38 +111,0 @@\n-    static Stream<IntFunction<MemorySegment>> memorySegmentGenerators(ValueLayout elementLayout) {\n-        return MEMORY_SEGMENT_GENERATORS.stream()\n-                .filter(f -> canBeConverted(f, elementLayout));\n-    }\n-\n-    private static boolean canBeConverted(IntFunction<MemorySegment> function, ValueLayout elementLayout) {\n-        \/\/ Create a sample to analyze\n-        MemorySegment s = function.apply(Long.BYTES);\n-        if (s.heapBase().isEmpty()) {\n-            \/\/ Native segments can always be converted\n-            return true;\n-        }\n-        Object heapBase = s.heapBase().orElseThrow();\n-        Class<?> arrayType = heapBase.getClass();\n-        Class<?> componentType = Objects.requireNonNull(arrayType.componentType());\n-        int componentSize = sizeOf(componentType);\n-        if (componentSize == 1) {\n-            \/\/ bytes can always be converted\n-            return true;\n-        }\n-\n-        \/\/ Only allow arrays with the correct alignment\n-        return componentSize % elementLayout.byteSize() == 0;\n-    }\n-\n-    private static int sizeOf(Class<?> type) {\n-        return switch (type) {\n-            case Class<?> c when c.equals(byte.class)   -> 1;\n-            case Class<?> c when c.equals(short.class)  -> 2;\n-            case Class<?> c when c.equals(char.class)   -> 2;\n-            case Class<?> c when c.equals(int.class)    -> 4;\n-            case Class<?> c when c.equals(float.class)  -> 4;\n-            case Class<?> c when c.equals(long.class)   -> 8;\n-            case Class<?> c when c.equals(double.class) -> 8;\n-            default -> throw new IllegalArgumentException(type.toString());\n-        };\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.vector\n+ * @run testng UnalignedHeapTest\n+ *\n+ *\/\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.ShortVector;\n+import jdk.incubator.vector.Vector;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.nio.ByteOrder;\n+import java.util.Arrays;\n+import java.util.stream.IntStream;\n+\n+public class UnalignedHeapTest {\n+\n+    \/\/ Big enough to hold all species variants for all array types\n+    private static final int ARRAY_LEN = 1024;\n+\n+    @Test\n+    public void testByteArray() {\n+        for (VectorSpecies<Byte> species: Arrays.asList(ByteVector.SPECIES_64, ByteVector.SPECIES_128, ByteVector.SPECIES_256, ByteVector.SPECIES_512, ByteVector.SPECIES_MAX)) {\n+            byte[] arr = new byte[ARRAY_LEN];\n+            IntStream.range(0, ARRAY_LEN).forEach(i -> arr[i] = (byte) i); \/\/ May wrap around\n+            MemorySegment segment = MemorySegment.ofArray(arr).asSlice(1);\n+            Vector<Byte> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            byte[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_BYTE);\n+            byte[] actual = (byte[]) vector.toArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testShortArray() {\n+        for (VectorSpecies<Short> species: Arrays.asList(ShortVector.SPECIES_64, ShortVector.SPECIES_128, ShortVector.SPECIES_256, ShortVector.SPECIES_512, ShortVector.SPECIES_MAX)) {\n+            short[] arr = new short[ARRAY_LEN];\n+            IntStream.range(0, ARRAY_LEN).forEach(i -> arr[i] = (short) i);\n+            MemorySegment segment = MemorySegment.ofArray(arr).asSlice(1);\n+            Vector<Short> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            short[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_SHORT_UNALIGNED);\n+            short[] actual = (short[]) vector.toArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testIntArray() {\n+        for (VectorSpecies<Integer> species: Arrays.asList(IntVector.SPECIES_64, IntVector.SPECIES_128, IntVector.SPECIES_256, IntVector.SPECIES_512, IntVector.SPECIES_MAX)) {\n+            MemorySegment segment = MemorySegment.ofArray(IntStream.range(0, ARRAY_LEN).toArray()).asSlice(1);\n+            Vector<Integer> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            int[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_INT_UNALIGNED);\n+            int[] actual = vector.toIntArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testFloatArray() {\n+        for (VectorSpecies<Float> species: Arrays.asList(FloatVector.SPECIES_64, FloatVector.SPECIES_128, FloatVector.SPECIES_256, FloatVector.SPECIES_512, FloatVector.SPECIES_MAX)) {\n+            float[] arr = new float[ARRAY_LEN];\n+            IntStream.range(0, ARRAY_LEN).forEach(i -> arr[i] = (float) i);\n+            MemorySegment segment = MemorySegment.ofArray(arr).asSlice(1);\n+            Vector<Float> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            float[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n+            float[] actual = (float[]) vector.toArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testLongArray() {\n+        for (VectorSpecies<Long> species: Arrays.asList(LongVector.SPECIES_64, LongVector.SPECIES_128, LongVector.SPECIES_256, LongVector.SPECIES_512, LongVector.SPECIES_MAX)) {\n+            long[] arr = new long[ARRAY_LEN];\n+            IntStream.range(0, ARRAY_LEN).forEach(i -> arr[i] = i);\n+            MemorySegment segment = MemorySegment.ofArray(arr).asSlice(1);\n+            Vector<Long> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            long[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_LONG_UNALIGNED);\n+            long[] actual = (long[]) vector.toArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testDoubleArray() {\n+        for (VectorSpecies<Double> species: Arrays.asList(DoubleVector.SPECIES_64, DoubleVector.SPECIES_128, DoubleVector.SPECIES_256, DoubleVector.SPECIES_512, DoubleVector.SPECIES_MAX)) {\n+            double[] arr = new double[ARRAY_LEN];\n+            IntStream.range(0, ARRAY_LEN).forEach(i -> arr[i] = (double) i);\n+            MemorySegment segment = MemorySegment.ofArray(arr).asSlice(1);\n+            Vector<Double> vector = species.fromMemorySegment(segment, 0, ByteOrder.nativeOrder());\n+            double[] expected = segment.asSlice(0, species.vectorByteSize()).toArray(ValueLayout.JAVA_DOUBLE_UNALIGNED);\n+            double[] actual = (double[]) vector.toArray();\n+            assertEquals(actual, expected, species.toString());\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/incubator\/vector\/UnalignedHeapTest.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -204,1 +204,1 @@\n-                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n@@ -215,1 +215,1 @@\n-                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n+                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}