{"files":[{"patch":"@@ -332,4 +332,0 @@\n-        \/\/ @@@ Smarter alignment checking if accessing heap segment backing non-byte[] array\n-        if (msp.maxAlignMask() > 1) {\n-            throw new IllegalArgumentException();\n-        }\n@@ -377,4 +373,0 @@\n-        \/\/ @@@ Smarter alignment checking if accessing heap segment backing non-byte[] array\n-        if (msp.maxAlignMask() > 1) {\n-            throw new IllegalArgumentException();\n-        }\n@@ -423,4 +415,0 @@\n-        \/\/ @@@ Smarter alignment checking if accessing heap segment backing non-byte[] array\n-        if (msp.maxAlignMask() > 1) {\n-            throw new IllegalArgumentException();\n-        }\n@@ -469,4 +457,0 @@\n-        \/\/ @@@ Smarter alignment checking if accessing heap segment backing non-byte[] array\n-        if (msp.maxAlignMask() > 1) {\n-            throw new IllegalArgumentException();\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.Utils;\n@@ -31,0 +34,2 @@\n+import java.lang.foreign.ValueLayout;\n+import java.lang.reflect.Array;\n@@ -32,0 +37,1 @@\n+import java.util.Objects;\n@@ -739,0 +745,19 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    AbstractMemorySegmentImpl requireSegmentConvertibleFor(MemorySegment segment, long offset, int elementByteSize)  {\n+        AbstractMemorySegmentImpl ams = (AbstractMemorySegmentImpl) segment;\n+        if (ams.maxAlignMask() > 1 && !ams.isAlignedForElement(offset, elementByteSize)) {\n+            String arrayComponent = ams.heapBase()\n+                    .map(Object::getClass)\n+                    .map(Class::componentType)\n+                    .map(Object::toString)\n+                    .orElse(\"?\");\n+            throw new IllegalArgumentException(\"Misaligned access in the backing \" + arrayComponent + \"[]\" +\n+                    \" array for elements of size \" + elementByteSize + \" bytes\" +\n+                    \" at address: \" + Utils.toHexString(ams.address() + offset));\n+        }\n+\n+        return ams;\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2848,1 +2847,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2866,1 +2865,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -3285,1 +3284,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code byte} aligned.\n@@ -3337,1 +3337,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code byte} aligned.\n@@ -3809,1 +3810,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3825,1 +3826,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3893,1 +3894,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3910,1 +3911,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2662,1 +2661,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2680,1 +2679,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2968,1 +2967,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code double} aligned.\n@@ -3025,1 +3025,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code double} aligned.\n@@ -3386,1 +3387,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3402,1 +3403,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3505,1 +3506,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3522,1 +3523,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2682,1 +2681,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2700,1 +2699,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2974,1 +2973,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code float} aligned.\n@@ -3031,1 +3031,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code float} aligned.\n@@ -3355,1 +3356,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3371,1 +3372,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3455,1 +3456,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3472,1 +3473,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2833,1 +2832,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2851,1 +2850,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -3130,1 +3129,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code int} aligned.\n@@ -3187,1 +3187,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code int} aligned.\n@@ -3511,1 +3512,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3527,1 +3528,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3611,1 +3612,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3628,1 +3629,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2699,1 +2698,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2717,1 +2716,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -3009,1 +3008,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code long} aligned.\n@@ -3066,1 +3066,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code long} aligned.\n@@ -3427,1 +3428,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3443,1 +3444,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3546,1 +3547,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3563,1 +3564,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -2849,1 +2848,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -2867,1 +2866,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -3279,1 +3278,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code short} aligned.\n@@ -3336,1 +3336,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code short} aligned.\n@@ -3795,1 +3796,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -3811,1 +3812,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -3862,1 +3863,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -3879,1 +3880,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -3361,1 +3360,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -3379,1 +3378,1 @@\n-     * @throws IllegalArgumentException if the index is is out of range\n+     * @throws IllegalArgumentException if the index is out of range\n@@ -4081,1 +4080,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code $type$} aligned.\n@@ -4142,1 +4142,2 @@\n-     *         not backed by a {@code byte[]} array.\n+     *         not backed by a {@code byte[]} array and if access to the backing array\n+     *         is not {@code $type$} aligned.\n@@ -4937,1 +4938,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, vsp,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, vsp,\n@@ -4953,1 +4954,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset, m, vsp, offsetInRange,\n@@ -5084,1 +5085,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n@@ -5101,1 +5102,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset,\n+                requireSegmentConvertibleFor(ms, offset, vsp.elementByteSize()), offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -28,0 +29,1 @@\n+import java.nio.IntBuffer;\n@@ -30,0 +32,1 @@\n+import java.util.Objects;\n@@ -32,0 +35,1 @@\n+import java.util.stream.Stream;\n@@ -53,1 +57,1 @@\n-            withToString(\"HMS\", (int s) ->\n+            withToString(\"DMS\", (int s) ->\n@@ -56,1 +60,1 @@\n-            withToString(\"DMS\", (int s) -> {\n+            withToString(\"HMS:byte[]\", (int s) -> {\n@@ -59,0 +63,45 @@\n+            }),\n+            withToString(\"HMS:short[]\", (int s) -> {\n+                short[] b = new short[s \/ Short.BYTES];\n+                return MemorySegment.ofArray(b);\n+            }),\n+            withToString(\"HMS:int[]\", (int s) -> {\n+                int[] b = new int[s \/ Integer.BYTES];\n+                return MemorySegment.ofArray(b);\n+            }),\n+            withToString(\"HMS:float[]\", (int s) -> {\n+                float[] b = new float[s \/ Float.BYTES];\n+                return MemorySegment.ofArray(b);\n+            }),\n+            withToString(\"HMS:long[]\", (int s) -> {\n+                long[] b = new long[s \/ Long.BYTES];\n+                return MemorySegment.ofArray(b);\n+            }),\n+            withToString(\"HMS:double[]\", (int s) -> {\n+                double[] b = new double[s \/ Double.BYTES];\n+                return MemorySegment.ofArray(b);\n+            }),\n+            withToString(\"HMS:ByteBuffer.wrap\", (int s) -> {\n+                byte[] b = new byte[s];\n+                ByteBuffer buff = ByteBuffer.wrap(b);\n+                return MemorySegment.ofBuffer(buff);\n+            }),\n+            \/\/ Just test one of the specialized buffers\n+            withToString(\"HMS:IntBuffer.wrap\", (int s) -> {\n+                int[] b = new int[s \/ Integer.BYTES];\n+                IntBuffer buff = IntBuffer.wrap(b);\n+                return MemorySegment.ofBuffer(buff);\n+            }),\n+            withToString(\"HMS:ByteBuffer.allocate\", (int s) -> {\n+                ByteBuffer buff = ByteBuffer.allocate(s);\n+                return MemorySegment.ofBuffer(buff);\n+            }),\n+            \/\/ Just test one of the specialized buffers\n+            withToString(\"HMS:IntBuffer.allocate\", (int s) -> {\n+                IntBuffer buff = IntBuffer.allocate(s \/ Integer.BYTES);\n+                return MemorySegment.ofBuffer(buff);\n+            }),\n+            \/\/ Slice\n+            withToString(\"HMS:long[].asSlice\", (int s) -> {\n+                long[] b = new long[s \/ Long.BYTES + 1];\n+                return MemorySegment.ofArray(b).asSlice(Long.BYTES);\n@@ -62,0 +111,38 @@\n+    static Stream<IntFunction<MemorySegment>> memorySegmentGenerators(ValueLayout elementLayout) {\n+        return MEMORY_SEGMENT_GENERATORS.stream()\n+                .filter(f -> canBeConverted(f, elementLayout));\n+    }\n+\n+    private static boolean canBeConverted(IntFunction<MemorySegment> function, ValueLayout elementLayout) {\n+        \/\/ Create a sample to analyze\n+        MemorySegment s = function.apply(Long.BYTES);\n+        if (s.heapBase().isEmpty()) {\n+            \/\/ Native segments can always be converted\n+            return true;\n+        }\n+        Object heapBase = s.heapBase().orElseThrow();\n+        Class<?> arrayType = heapBase.getClass();\n+        Class<?> componentType = Objects.requireNonNull(arrayType.componentType());\n+        int componentSize = sizeOf(componentType);\n+        if (componentSize == 1) {\n+            \/\/ bytes can always be converted\n+            return true;\n+        }\n+\n+        \/\/ Only allow arrays with the correct alignment\n+        return componentSize % elementLayout.byteSize() == 0;\n+    }\n+\n+    private static int sizeOf(Class<?> type) {\n+        return switch (type) {\n+            case Class<?> c when c.equals(byte.class)   -> 1;\n+            case Class<?> c when c.equals(short.class)  -> 2;\n+            case Class<?> c when c.equals(char.class)   -> 2;\n+            case Class<?> c when c.equals(int.class)    -> 4;\n+            case Class<?> c when c.equals(float.class)  -> 4;\n+            case Class<?> c when c.equals(long.class)   -> 8;\n+            case Class<?> c when c.equals(double.class) -> 8;\n+            default -> throw new IllegalArgumentException(type.toString());\n+        };\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":89,"deletions":2,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -195,1 +195,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -202,1 +202,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-                flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n@@ -215,1 +215,1 @@\n-                        flatMap(fa -> MEMORY_SEGMENT_GENERATORS.stream().\n+                        flatMap(fa -> memorySegmentGenerators(ELEMENT_LAYOUT).\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}