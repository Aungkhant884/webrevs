{"files":[{"patch":"@@ -46,19 +46,19 @@\n-    public static final byte ENGLISH = 0,\n-            FRENCH = 1,\n-            GERMAN = 2,\n-            ITALIAN = 3,\n-            JAPANESE = 4,\n-            KOREAN = 5,\n-            CHINESE = 6,\n-            SIMPLIFIED_CHINESE = 7,\n-            TRADITIONAL_CHINESE = 8,\n-            FRANCE = 9,\n-            GERMANY = 10,\n-            ITALY = 11,\n-            JAPAN = 12,\n-            KOREA = 13,\n-            UK = 14,\n-            US = 15,\n-            CANADA = 16,\n-            CANADA_FRENCH = 17,\n-            ROOT = 18,\n+    public static final byte ROOT = 0,\n+            ENGLISH = 1,\n+            US = 2,\n+            FRENCH = 3,\n+            GERMAN = 4,\n+            ITALIAN = 5,\n+            JAPANESE = 6,\n+            KOREAN = 7,\n+            CHINESE = 8,\n+            SIMPLIFIED_CHINESE = 9,\n+            TRADITIONAL_CHINESE = 10,\n+            FRANCE = 11,\n+            GERMANY = 12,\n+            ITALY = 13,\n+            JAPAN = 14,\n+            KOREA = 15,\n+            UK = 16,\n+            CANADA = 17,\n+            CANADA_FRENCH = 18,\n@@ -166,6 +166,8 @@\n-        return CACHE.computeIfAbsent(new BaseLocale(language, script, region, variant),\n-            (b) -> new BaseLocale(\n-                LocaleUtils.toLowerString(b.getLanguage()).intern(),\n-                LocaleUtils.toTitleString(b.getScript()).intern(),\n-                LocaleUtils.toUpperString(b.getRegion()).intern(),\n-                b.getVariant().intern()));\n+        synchronized (BaseLocale.class) {\n+            return CACHE.computeIfAbsent(new BaseLocale(language, script, region, variant),\n+                    (b) -> new BaseLocale(\n+                            LocaleUtils.toLowerString(b.getLanguage()).intern(),\n+                            LocaleUtils.toTitleString(b.getScript()).intern(),\n+                            LocaleUtils.toUpperString(b.getRegion()).intern(),\n+                            b.getVariant().intern()));\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -151,0 +151,14 @@\n+\/*\n+ * @test id=iu-aggressive-comp\n+ * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n+ * @key randomness\n+ * @bug 8289220 8309622\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify -Xcomp\n+ *      TestAllocHumongousFragment\n+ *\/\n+\n@@ -180,14 +194,0 @@\n-\/*\n- * @test id=iu-aggressive-comp\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @bug 8289220 8309622\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify -Xcomp\n- *      TestAllocHumongousFragment\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}