{"files":[{"patch":"@@ -1642,1 +1642,1 @@\n-    CodeCache::flush_dependents_on(deopt_scope, k);\n+    CodeCache::mark_dependents_on(deopt_scope, k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1397,2 +1397,2 @@\n-\/\/ Flushes compiled methods dependent on dependee.\n-void CodeCache::flush_dependents_on(DeoptimizationScope* deopt_scope, InstanceKlass* dependee) {\n+\/\/ Marks compiled methods dependent on dependee.\n+void CodeCache::mark_dependents_on(DeoptimizationScope* deopt_scope, InstanceKlass* dependee) {\n@@ -1416,1 +1416,1 @@\n-\/\/ Flushes compiled methods dependent on dependee\n+\/\/ Marks compiled methods dependent on dependee\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -312,2 +312,2 @@\n-  \/\/ Flushing and deoptimization\n-  static void flush_dependents_on(DeoptimizationScope* deopt_scope, InstanceKlass* dependee);\n+  \/\/ Marks dependents during classloading\n+  static void mark_dependents_on(DeoptimizationScope* deopt_scope, InstanceKlass* dependee);\n@@ -316,1 +316,1 @@\n-  \/\/ Flushing and deoptimization in case of evolution\n+  \/\/ Marks in case of evolution\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1172,0 +1172,6 @@\n+\n+  \/\/ If post call nops have been already patched, we can just bail-out.\n+  if (has_been_deoptimized()) {\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1184,1 +1184,1 @@\n-      \/\/ Now flush all code that assume the class is not linked.\n+      \/\/ Now flush all code that assumes the class is not linked.\n@@ -1191,1 +1191,1 @@\n-      CodeCache::flush_dependents_on(&deopt_scope, this);\n+      CodeCache::mark_dependents_on(&deopt_scope, this);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -959,1 +959,1 @@\n-    MutexLocker mu2(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker ml(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -1222,1 +1222,1 @@\n-    \/\/ This assumed to be an 'atomic' operation by verification.\n+    \/\/ This is assumed to be an 'atomic' operation by verification.\n@@ -1238,1 +1238,1 @@\n-    \/\/ This assumed to be an 'atomic' operation by verification.\n+    \/\/ This is assumed to be an 'atomic' operation by verification.\n@@ -1336,1 +1336,1 @@\n-    \/\/ This assumed to be an 'atomic' operation by verification.\n+    \/\/ This is assumed to be an 'atomic' operation by verification.\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/methodHandles.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  \/\/ If there is nothing to deopt _gen is the same as comitted.\n+  \/\/ If there is nothing to deopt _required_gen is the same as comitted.\n@@ -142,2 +142,2 @@\n-  \/\/ A method marked by someone else may have a _gen lower than what we marked with.\n-  \/\/ Therefore only store it if it's higher than _gen.\n+  \/\/ A method marked by someone else may have a _required_gen lower than what we marked with.\n+  \/\/ Therefore only store it if it's higher than _required_gen.\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}