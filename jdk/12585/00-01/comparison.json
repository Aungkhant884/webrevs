{"files":[{"patch":"@@ -1417,3 +1417,2 @@\n-void CodeCache::flush_dependents_on_method_for_breakpoint(const methodHandle& m_h) {\n-  \/\/ --- Compile_lock is not held. However we are at a safepoint.\n-  assert_locked_or_safepoint(Compile_lock);\n+void CodeCache::mark_dependents_on_method_for_breakpoint(const methodHandle& m_h) {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  static void flush_dependents_on_method_for_breakpoint(const methodHandle& dependee);\n+  static void mark_dependents_on_method_for_breakpoint(const methodHandle& dependee);\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-\/\/ deoptimization.  Returns the number of nmethods found.\n+\/\/ deoptimization.\n@@ -73,1 +73,1 @@\n-        deopt_scope->dependant(nm);\n+        deopt_scope->dependent(nm);\n","filename":"src\/hotspot\/share\/code\/dependencyContext.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2011,1 +2011,1 @@\n-    CodeCache::flush_dependents_on_method_for_breakpoint(mh);\n+    CodeCache::mark_dependents_on_method_for_breakpoint(mh);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -953,1 +953,1 @@\n-void MethodHandles::flush_dependent_nmethods(DeoptimizationScope* deopt_scope, Handle call_site, Handle target) {\n+void MethodHandles::mark_dependent_nmethods(DeoptimizationScope* deopt_scope, Handle call_site, Handle target) {\n@@ -1220,1 +1220,1 @@\n-    MethodHandles::flush_dependent_nmethods(&deopt_scope, call_site, target);\n+    MethodHandles::mark_dependent_nmethods(&deopt_scope, call_site, target);\n@@ -1236,1 +1236,1 @@\n-    MethodHandles::flush_dependent_nmethods(&deopt_scope, call_site, target);\n+    MethodHandles::mark_dependent_nmethods(&deopt_scope, call_site, target);\n@@ -1330,0 +1330,1 @@\n+  DeoptimizationScope deopt_scope;\n@@ -1331,10 +1332,7 @@\n-    DeoptimizationScope deopt_scope;\n-    {\n-      NoSafepointVerifier nsv;\n-      MutexLocker mu2(THREAD, CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-      DependencyContext deps = java_lang_invoke_MethodHandleNatives_CallSiteContext::vmdependencies(context());\n-      deps.remove_and_mark_for_deoptimization_all_dependents(&deopt_scope);\n-      \/\/ This assumed to be an 'atomic' operation by verification.\n-      \/\/ So keep it under lock for now.\n-      deopt_scope.deoptimize_marked();\n-    }\n+    NoSafepointVerifier nsv;\n+    MutexLocker ml(THREAD, CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    DependencyContext deps = java_lang_invoke_MethodHandleNatives_CallSiteContext::vmdependencies(context());\n+    deps.remove_and_mark_for_deoptimization_all_dependents(&deopt_scope);\n+    \/\/ This assumed to be an 'atomic' operation by verification.\n+    \/\/ So keep it under lock for now.\n+    deopt_scope.deoptimize_marked();\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static void flush_dependent_nmethods(DeoptimizationScope* deopt_scope, Handle call_site, Handle target);\n+  static void mark_dependent_nmethods(DeoptimizationScope* deopt_scope, Handle call_site, Handle target);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-DeoptimizationScope::DeoptimizationScope() : _gen(0) {\n+DeoptimizationScope::DeoptimizationScope() : _required_gen(0) {\n@@ -110,1 +110,1 @@\n-  _gen = DeoptimizationScope::_committed_deopt_gen;\n+  _required_gen = DeoptimizationScope::_committed_deopt_gen;\n@@ -123,1 +123,1 @@\n-    dependant(cm);\n+    dependent(cm);\n@@ -131,1 +131,1 @@\n-  \/\/ Make sure active is not committted\n+  \/\/ Make sure active is not committed\n@@ -136,1 +136,1 @@\n-  _gen                           = DeoptimizationScope::_active_deopt_gen;\n+  _required_gen                  = DeoptimizationScope::_active_deopt_gen;\n@@ -139,1 +139,1 @@\n-void DeoptimizationScope::dependant(CompiledMethod* cm) {\n+void DeoptimizationScope::dependent(CompiledMethod* cm) {\n@@ -144,2 +144,2 @@\n-  if (_gen < cm->_deoptimization_generation) {\n-    _gen = cm->_deoptimization_generation;\n+  if (_required_gen < cm->_deoptimization_generation) {\n+    _required_gen = cm->_deoptimization_generation;\n@@ -150,1 +150,1 @@\n-  assert(!_deopted, \"Already deopt\");\n+  assert(!_deopted, \"Already deopted\");\n@@ -152,1 +152,1 @@\n-  \/\/ Safepoint are a special case, handled here.\n+  \/\/ Safepoints are a special case, handled here.\n@@ -168,1 +168,1 @@\n-      if (DeoptimizationScope::_committed_deopt_gen >= _gen) {\n+      if (DeoptimizationScope::_committed_deopt_gen >= _required_gen) {\n@@ -190,1 +190,1 @@\n-      Deoptimization::deoptimize_all_marked(); \/\/ May safepoint and an additional deopt may have occured.\n+      Deoptimization::deoptimize_all_marked(); \/\/ May safepoint and an additional deopt may have occurred.\n@@ -195,1 +195,1 @@\n-        \/\/ Make sure that committed don't go backwards.\n+        \/\/ Make sure that committed doesn't go backwards.\n@@ -202,1 +202,1 @@\n-        assert(DeoptimizationScope::_committed_deopt_gen >= _gen, \"Must be\");\n+        assert(DeoptimizationScope::_committed_deopt_gen >= _required_gen, \"Must be\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  \/\/ Indicate a in-progress deopt handshake.\n+  \/\/ Indicate an in-progress deopt handshake.\n@@ -52,2 +52,2 @@\n-  \/\/ The highest gen we need to execute\/wait for\n-  uint64_t _gen;\n+  \/\/ The required gen we need to execute\/wait for\n+  uint64_t _required_gen;\n@@ -59,1 +59,1 @@\n-  \/\/ Mark a method, if already marked as dependant.\n+  \/\/ Mark a method, if already marked as dependent.\n@@ -61,2 +61,2 @@\n-  \/\/ Record this as a dependant method.\n-  void dependant(CompiledMethod* cm);\n+  \/\/ Record this as a dependent method.\n+  void dependent(CompiledMethod* cm);\n@@ -65,1 +65,1 @@\n-  \/\/ Mmake the nmethods not entrant, stackwalks and patch return pcs and sets post call nops.\n+  \/\/ Make the nmethods not entrant, stackwalks and patch return pcs and sets post call nops.\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}