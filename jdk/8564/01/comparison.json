{"files":[{"patch":"@@ -570,0 +570,3 @@\n+  assert(CodeCache::find_blob(entry.target()) != NULL,\n+         \"destination of trampoline call not found in code cache\");\n+  assert(cbuf == NULL || cbuf == code(), \"CodeBuffers for generated code and marked code not the same\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1087,0 +1087,28 @@\n+  \/\/ Trampoline_call generates a call of the provided address.\n+  \/\/ The address must be inside the code cache.\n+  \/\/ Supported entry.rspec():\n+  \/\/ - relocInfo::runtime_call_type\n+  \/\/ - relocInfo::opt_virtual_call_type\n+  \/\/ - relocInfo::static_call_type\n+  \/\/ - relocInfo::virtual_call_type\n+  \/\/\n+  \/\/ If the distance to the address can exceed the branch range\n+  \/\/ (128M for the release build, 2M for the debug build; see branch_range definition)\n+  \/\/ for direct calls(BL), a special code with BR (trampoline) is put in the stub code section.\n+  \/\/ The call is redirected to it. When CodeBuffer is copied to CodeCache, the distance to\n+  \/\/ callee's address is checked to bypass the trampoline by replacing the call of the trampoline\n+  \/\/ with the call of the target.\n+  \/\/\n+  \/\/ Trampoline_call is most suitable for calls of Java methods. Java calls callees can be changed\n+  \/\/ to the interpreter or different versions of a compiled method. Those callees can be\n+  \/\/ near-distant or far-distant. Trampoline_call supports switching between near-distant callees\n+  \/\/ and far-distant callees by having a reserved trampoline. The trampoline is only used if needed.\n+  \/\/\n+  \/\/ The code for runtime calls can also be generated with far_call. For possible far-distant callees\n+  \/\/ far_call does not use the stub code section for additional code. It inserts the code at a call site.\n+  \/\/ This prevents the call from optimization to a direct call when the code is copied to CodeCache.\n+  \/\/\n+  \/\/ If a mark of the generated call BL is needed, a pointer to CodeBuffer keeping the generated code\n+  \/\/ must be provided.\n+  \/\/\n+  \/\/ Return: PC pointing after the generated call in the code section.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}