{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,0 @@\n-import java.util.jar.Attributes;\n-import java.util.jar.JarFile;\n-import java.util.jar.Manifest;\n@@ -510,9 +507,0 @@\n-            if (hasMainJar && !hasMainClass) {\n-                \/\/ try to get main-class from manifest\n-                String mainClass = getMainClassFromManifest();\n-                if (mainClass != null) {\n-                    CLIOptions.setOptionValue(\n-                            CLIOptions.APPCLASS.getId(), mainClass);\n-                }\n-            }\n-\n@@ -828,23 +816,0 @@\n-\n-    private String getMainClassFromManifest() {\n-        if (mainJarPath == null ||\n-            input == null ) {\n-            return null;\n-        }\n-\n-        JarFile jf;\n-        try {\n-            Path file = Path.of(input, mainJarPath);\n-            if (!Files.exists(file)) {\n-                return null;\n-            }\n-            jf = new JarFile(file.toFile());\n-            Manifest m = jf.getManifest();\n-            Attributes attrs = (m != null) ? m.getMainAttributes() : null;\n-            if (attrs != null) {\n-                return attrs.getValue(Attributes.Name.MAIN_CLASS);\n-            }\n-        } catch (IOException ignore) {}\n-        return null;\n-    }\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":1,"deletions":36,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,3 +69,0 @@\n-            \/\/ If the app is contained in an unnamed jar then launch it the\n-            \/\/ legacy way and the main class string must be\n-            \/\/ of the format com\/foo\/Main\n@@ -73,3 +70,13 @@\n-                content.add(Map.entry(\"app.classpath\",\n-                        appCfgLayout.appDirectory().resolve(\n-                                launcherData.mainJarName())));\n+                Path mainJarPath = appCfgLayout.appDirectory().resolve(\n+                        launcherData.mainJarName());\n+\n+                if (launcherData.isClassNameFromMainJar()) {\n+                    content.add(Map.entry(\"app.mainjar\", mainJarPath));\n+                } else {\n+                    content.add(Map.entry(\"app.classpath\", mainJarPath));\n+                }\n+            }\n+\n+            if (!launcherData.isClassNameFromMainJar()) {\n+                content.add(Map.entry(\"app.mainclass\",\n+                        launcherData.qualifiedClassName()));\n@@ -77,2 +84,0 @@\n-            content.add(Map.entry(\"app.mainclass\",\n-                    launcherData.qualifiedClassName()));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/CfgFile.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,4 @@\n+    boolean isClassNameFromMainJar() {\n+        return jarMainClass != null;\n+    }\n+\n@@ -212,0 +216,1 @@\n+                    launcherData.jarMainClass = launcherData.qualifiedClassName;\n@@ -318,0 +323,1 @@\n+    private String jarMainClass;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.jpackage.test.CfgFile;\n@@ -249,0 +250,33 @@\n+\n+        CfgFile cfg = cmd.readLauncherCfgFile();\n+        if (!cmd.hasArgument(\"--module\")) {\n+            verifyCfgFileForNonModularApp(cmd, cfg);\n+        }\n+    }\n+\n+    private static void verifyCfgFileForNonModularApp(JPackageCommand cmd,\n+            CfgFile cfg) {\n+        final List<String> mainJarProperties = List.of(\"app.mainjar\");\n+        final List<String> classPathProperties = List.of(\"app.mainclass\",\n+                \"app.classpath\");\n+\n+        final List<String> withProperties;\n+        final List<String> withoutProperties;\n+\n+        if (cmd.hasArgument(\"--main-jar\") && !cmd.hasArgument(\"--main-class\")) {\n+            withProperties = mainJarProperties;\n+            withoutProperties = classPathProperties;\n+        } else {\n+            withProperties = classPathProperties;\n+            withoutProperties = mainJarProperties;\n+        }\n+\n+        withProperties.forEach(prop -> {\n+            TKit.assertNotNull(cfg.getValue(\"Application\", prop), String.format(\n+                    \"Check \\\"%s\\\" property is set\", prop));\n+        });\n+\n+        withoutProperties.forEach(prop -> {\n+            TKit.assertNull(cfg.getValueUnchecked(\"Application\", prop),\n+                    String.format(\"Check \\\"%s\\\" property is NOT set\", prop));\n+        });\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/MainClassTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}