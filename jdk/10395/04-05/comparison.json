{"files":[{"patch":"@@ -415,1 +415,1 @@\n-    protected DCReference reference() throws ParseException {\n+    protected DCReference reference(ReferenceParser.Mode mode) throws ParseException {\n@@ -470,1 +470,1 @@\n-            ReferenceParser.Reference ref = new ReferenceParser(fac).parse(sig);\n+            ReferenceParser.Reference ref = new ReferenceParser(fac).parse(sig, mode);\n@@ -1234,1 +1234,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_DISALLOWED);\n@@ -1291,1 +1291,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_OPTIONAL);\n@@ -1301,1 +1301,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_OPTIONAL);\n@@ -1348,1 +1348,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_DISALLOWED);\n@@ -1408,1 +1408,1 @@\n-                                DCReference ref = reference();\n+                                DCReference ref = reference(ReferenceParser.Mode.MEMBER_OPTIONAL);\n@@ -1433,1 +1433,1 @@\n-                    DCReference type = reference();\n+                    DCReference type = reference(ReferenceParser.Mode.MEMBER_DISALLOWED);\n@@ -1585,1 +1585,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_DISALLOWED);\n@@ -1596,1 +1596,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_DISALLOWED);\n@@ -1621,1 +1621,1 @@\n-                    DCReference ref = reference();\n+                    DCReference ref = reference(ReferenceParser.Mode.MEMBER_REQUIRED);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.tools.javac.util.DiagnosticSource;\n@@ -52,0 +51,12 @@\n+\n+    \/**\n+     * Context dependent parsing mode which either disallows, allows or requires\n+     * a member reference. The <code>MEMBER_OPTIONAL<\/code> value also allows\n+     * arbitrary URI fragments using a double hash mark.\n+     *\/\n+    public enum Mode {\n+        MEMBER_DISALLOWED,\n+        MEMBER_OPTIONAL,\n+        MEMBER_REQUIRED\n+    }\n+\n@@ -99,0 +110,1 @@\n+     * @param mode the parsing mode\n@@ -102,1 +114,1 @@\n-    public Reference parse(String sig) throws ParseException {\n+    public Reference parse(String sig, Mode mode) throws ParseException {\n@@ -130,1 +142,1 @@\n-                if (lparen == -1) {\n+                if (lparen == -1 && mode != Mode.MEMBER_REQUIRED) {\n@@ -134,0 +146,3 @@\n+                    if (mode == Mode.MEMBER_DISALLOWED) {\n+                        throw new ParseException(hash, \"dc.ref.unexpected.input\");\n+                    }\n@@ -135,1 +150,1 @@\n-                    member = parseMember(sig, afterSlash, lparen, dh);\n+                    member = parseMember(sig, afterSlash, lparen > -1 ? lparen : sig.length(), dh);\n@@ -138,0 +153,3 @@\n+                if (mode == Mode.MEMBER_DISALLOWED) {\n+                    throw new ParseException(hash, \"dc.ref.unexpected.input\");\n+                }\n@@ -141,0 +159,3 @@\n+                    if (mode != Mode.MEMBER_OPTIONAL) {\n+                        throw new ParseException(afterHash, \"dc.ref.unexpected.input\");\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ReferenceParser.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-import com.sun.tools.javac.util.DiagnosticSource;\n@@ -94,1 +93,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n@@ -355,1 +353,1 @@\n-            ReferenceParser.Reference ref = referenceParser.parse(signature);\n+            ReferenceParser.Reference ref = referenceParser.parse(signature, ReferenceParser.Mode.MEMBER_OPTIONAL);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                    src\/nolabel\/Class1.java:5: warning: missing reference label\n+                    Class1.java:5: warning: missing reference label\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeLinkAnchor\/TestSeeLinkAnchor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7021614 8273244\n+ * @bug 7021614 8273244 8200337\n@@ -194,0 +194,20 @@\n+*\/\n+\n+    \/**\n+     * abc {@linkplain java.lang.String##fragment desc} def\n+     *\/\n+    void fragment_desc() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Link[LINK_PLAIN, pos:5\n+      reference:\n+        Reference[REFERENCE, pos:17, java.lang.String##fragment]\n+      body: 1\n+        Text[TEXT, pos:44, desc]\n+    ]\n+    Text[TEXT, pos:49, _def]\n+  body: empty\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/LinkPlainTest.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7021614 8273244\n+ * @bug 7021614 8273244 8200337\n@@ -194,0 +194,20 @@\n+*\/\n+\n+    \/**\n+     * abc {@link java.lang.String##fragment desc} def\n+     *\/\n+    void fragment_desc() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Link[LINK, pos:5\n+      reference:\n+        Reference[REFERENCE, pos:12, java.lang.String##fragment]\n+      body: 1\n+        Text[TEXT, pos:39, desc]\n+    ]\n+    Text[TEXT, pos:44, _def]\n+  body: empty\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/LinkTest.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7021614 8031212 8273244 8284908\n+ * @bug 7021614 8031212 8273244 8284908 8200337\n@@ -158,0 +158,19 @@\n+*\/\n+\n+    \/**\n+     * abc.\n+     * @see java.lang.String##fragment text\n+     *\/\n+    void j_l_string_anchor() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: empty\n+  block tags: 1\n+    See[SEE, pos:7\n+      reference: 2\n+        Reference[REFERENCE, pos:12, java.lang.String##fragment]\n+        Text[TEXT, pos:39, text]\n+    ]\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/SeeTest.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -75,0 +75,32 @@\n+*\/\n+\n+    \/**\n+     * @serialField field String#member f3 is a String\n+     *\/\n+    String f3;\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: empty\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:1, prefPos:26\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: @serialField_fie...ld_String#member_f3_is_a_String\n+    ]\n+]\n+*\/\n+\n+    \/**\n+     * @serialField field String##fragment f4 is a String\n+     *\/\n+    String f4;\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: empty\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:1, prefPos:26\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: @serialField_fie...ld_String##fragment_f4_is_a_String\n+    ]\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/SerialFieldTest.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,31 @@\n+    \/**\n+     * @throws Exception#member text\n+     *\/\n+    void exception_member() throws Exception { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: empty\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:1, prefPos:18\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: @throws_Exception#member_text\n+    ]\n+]\n+*\/\n+\n+    \/**\n+     * @throws Exception##fragment text\n+     *\/\n+    void exception_fragment() throws Exception { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: empty\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:1, prefPos:18\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: @throws_Exceptio...n##fragment_text\n+    ]\n+]\n+*\/\n","filename":"test\/langtools\/tools\/javac\/doctree\/ThrowableTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -180,0 +180,36 @@\n+*\/\n+\n+    \/**\n+     * abc {@value java.awt.Color}\n+     *\/\n+    int type_reference() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5, prefPos:17\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: {@value_java.awt.Color\n+    ]\n+    Text[TEXT, pos:27, }]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@value java.awt.Color##fragment}\n+     *\/\n+    int anchor_reference() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5, prefPos:28\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: {@value_java.awt....Color##fragment\n+    ]\n+    Text[TEXT, pos:37, }]\n+  body: empty\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/ValueTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}