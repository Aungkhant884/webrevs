{"files":[{"patch":"@@ -3971,0 +3971,58 @@\n+void MacroAssembler::kernel_crc32c_using_crypto_pmull(Register crc, Register buf,\n+        Register len, Register tmp0, Register tmp1, Register tmp2, Register tmp3) {\n+    Label CRC_by4_loop, CRC_by1_loop, CRC_less128, CRC_by128_pre, CRC_by32_loop, CRC_less32, L_exit;\n+    assert_different_registers(crc, buf, len, tmp0, tmp1, tmp2);\n+\n+    subs(tmp0, len, 384);\n+    br(Assembler::GE, CRC_by128_pre);\n+  BIND(CRC_less128);\n+    subs(len, len, 32);\n+    br(Assembler::GE, CRC_by32_loop);\n+  BIND(CRC_less32);\n+    adds(len, len, 32 - 4);\n+    br(Assembler::GE, CRC_by4_loop);\n+    adds(len, len, 4);\n+    br(Assembler::GT, CRC_by1_loop);\n+    b(L_exit);\n+\n+  BIND(CRC_by32_loop);\n+    ldp(tmp0, tmp1, Address(buf));\n+    crc32cx(crc, crc, tmp0);\n+    ldr(tmp2, Address(buf, 16));\n+    crc32cx(crc, crc, tmp1);\n+    ldr(tmp3, Address(buf, 24));\n+    crc32cx(crc, crc, tmp2);\n+    add(buf, buf, 32);\n+    subs(len, len, 32);\n+    crc32cx(crc, crc, tmp3);\n+    br(Assembler::GE, CRC_by32_loop);\n+    cmn(len, (u1)32);\n+    br(Assembler::NE, CRC_less32);\n+    b(L_exit);\n+\n+  BIND(CRC_by4_loop);\n+    ldrw(tmp0, Address(post(buf, 4)));\n+    subs(len, len, 4);\n+    crc32cw(crc, crc, tmp0);\n+    br(Assembler::GE, CRC_by4_loop);\n+    adds(len, len, 4);\n+    br(Assembler::LE, L_exit);\n+  BIND(CRC_by1_loop);\n+    ldrb(tmp0, Address(post(buf, 1)));\n+    subs(len, len, 1);\n+    crc32cb(crc, crc, tmp0);\n+    br(Assembler::GT, CRC_by1_loop);\n+    b(L_exit);\n+\n+  BIND(CRC_by128_pre);\n+    kernel_crc32_common_fold_using_crypto_pmull(crc, buf, len, tmp0, tmp1, tmp2,\n+      4*256*sizeof(juint) + 8*sizeof(juint) + 0x50);\n+    mov(crc, 0);\n+    crc32cx(crc, crc, tmp0);\n+    crc32cx(crc, crc, tmp1);\n+\n+    cbnz(len, CRC_less128);\n+\n+  BIND(L_exit);\n+}\n+\n@@ -4077,1 +4135,5 @@\n-  kernel_crc32c_using_crc32c(crc, buf, len, table0, table1, table2, table3);\n+  if (UseCryptoPmullForCRC32) {\n+    kernel_crc32c_using_crypto_pmull(crc, buf, len, table0, table1, table2, table3);\n+  } else {\n+    kernel_crc32c_using_crc32c(crc, buf, len, table0, table1, table2, table3);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1431,0 +1431,3 @@\n+  void kernel_crc32c_using_crypto_pmull(Register crc, Register buf,\n+        Register len, Register tmp0, Register tmp1, Register tmp2,\n+        Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -305,0 +305,12 @@\n+\n+    \/\/ Constants for CRC-32C crypto pmull implementation\n+    0x6992cea2UL, 0x00000000UL,\n+    0x0d3b6092UL, 0x00000000UL,\n+    0x740eef02UL, 0x00000000UL,\n+    0x9e4addf8UL, 0x00000000UL,\n+    0x1c291d04UL, 0x00000000UL,\n+    0xd82c63daUL, 0x00000001UL,\n+    0x384aa63aUL, 0x00000001UL,\n+    0xba4fc28eUL, 0x00000000UL,\n+    0xf20c0dfeUL, 0x00000000UL,\n+    0x4cd00bd6UL, 0x00000001UL,\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}