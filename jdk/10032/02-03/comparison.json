{"files":[{"patch":"@@ -4333,1 +4333,1 @@\n-    \/\/ 1. the_class doesn't have a cache yet, scratch_class does have.\n+    \/\/ 1. the_class doesn't have a cache yet, scratch_class does have a cache.\n@@ -4337,2 +4337,2 @@\n-    \/\/ In such cases we need to deallocate one of the buffer.\n-    \/\/ 3. RedefineClasses and the_class has cached bytes from previous transformation.\n+    \/\/ In such cases we need to deallocate one of the buffers.\n+    \/\/ 3. RedefineClasses and the_class has cached bytes from a previous transformation.\n@@ -4340,1 +4340,1 @@\n-    if (the_class->get_cached_class_file() != 0) {\n+    if (the_class->get_cached_class_file() != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        \/\/ verity ClassFileLoadHook get expected class bytes\n+        \/\/ verity ClassFileLoadHook gets the expected class bytes\n@@ -197,1 +197,1 @@\n-            testCase= Integer.valueOf(args[0]);\n+            testCase = Integer.valueOf(args[0]);\n@@ -215,1 +215,1 @@\n-                redefine(3);        \/\/ resets cached class bytes\n+                redefine(3);        \/\/ resets cached class bytes to nullptr\n@@ -224,1 +224,1 @@\n-                redefine(3);        \/\/ resets cached class bytes\n+                redefine(3);        \/\/ resets cached class bytes to nullptr\n@@ -232,1 +232,1 @@\n-                redefine(2);        \/\/ resets cached class bytes\n+                redefine(2);        \/\/ resets cached class bytes to nullptr\n@@ -242,1 +242,1 @@\n-                redefine(3, 6);     \/\/ resets cached class bytes,\n+                redefine(3, 6);     \/\/ resets cached class bytes to nullptr,\n@@ -251,1 +251,1 @@\n-                redefine(2, 5);     \/\/ resets cached class bytes,\n+                redefine(2, 5);     \/\/ resets cached class bytes to nullptr,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRetransform\/RedefineRetransform.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -23,2 +23,1 @@\n-#include <stdio.h>\n-#include <jvmti.h>\n+\n@@ -26,0 +25,2 @@\n+#include <jvmti.h>\n+#include <stdio.h>\n@@ -28,1 +29,0 @@\n-\n@@ -48,0 +48,6 @@\n+\/*\n+ * Helper class for data exchange between RedefineClasses\/RetransformClasses and\n+ * ClassFileLoadHook callback (saves class bytes passed to CFLH,\n+ * allows to set new class bytes to return from CFLH).\n+ * Callers create an instance on the stack, ClassFileLoadHook handler uses getInstance().\n+ *\/\n@@ -215,1 +221,5 @@\n-    jvmti->AddCapabilities(&caps);\n+    res = jvmti->AddCapabilities(&caps);\n+    if (res != JVMTI_ERROR_NONE) {\n+        _log(\"Failed to add capabilities: %ld\\n\", res);\n+        return JNI_ERR;\n+    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRetransform\/libRedefineRetransform.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}