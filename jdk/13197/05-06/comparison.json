{"files":[{"patch":"@@ -31,11 +31,0 @@\n-\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.util.ClassFileDumper;\n-import sun.invoke.WrapperInstance;\n-\n@@ -55,0 +44,3 @@\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.TypeKind;\n@@ -57,0 +49,1 @@\n+import jdk.internal.util.ClassFileDumper;\n@@ -275,12 +268,2 @@\n-            \/\/ WrapperInstance is in non-exported package\n-            @SuppressWarnings(\"removal\")\n-            var sm = System.getSecurityManager();\n-            @SuppressWarnings(\"removal\")\n-            WrapperInstance anno = sm != null ? AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public WrapperInstance run() {\n-                    return type.getDeclaredAnnotation(WrapperInstance.class);\n-                }\n-            }) : type.getDeclaredAnnotation(WrapperInstance.class);\n-\n-            if (anno == null)\n+            var interfaces = type.getInterfaces();\n+            if (interfaces.length != 1)\n@@ -289,1 +272,1 @@\n-            var implementedType = anno.implementedType();\n+            var implementedType = interfaces[0];\n@@ -309,1 +292,0 @@\n-    private static final ClassDesc CD_WrapperInstance = desc(WrapperInstance.class);\n@@ -329,2 +311,0 @@\n-            clb.with(RuntimeVisibleAnnotationsAttribute.of(Annotation.of(CD_WrapperInstance,\n-                    AnnotationElement.of(\"implementedType\", AnnotationValue.ofClass(ifaceDesc)))));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.invoke;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-\/**\n- * Private API used inside of java.lang.invoke.MethodHandles.\n- * This annotation is present on by every class produced by\n- * {@link java.lang.invoke.MethodHandleProxies#asInterfaceInstance\n- * MethodHandleProxies.asInterfaceInstance}.\n- * <p>\n- * This allows applications to repeatedly convert between method handles\n- * and SAM objects, without the risk of creating unbounded delegation chains.\n- * <p>\n- * The {@link #implementedType)} method allows recovering the\n- * interface that was implemented, after which {@code asInterfaceInstance}\n- * will perform more validation to enable recovery of method handle and\n- * SAM objects.\n- * <p>\n- * This annotation is only scanned when it's first used; the wrapper\n- * information is then cached in a {@code ClassValue} to speed up\n- * wrapper testing and retrieval.\n- *\/\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.TYPE)\n-public @interface WrapperInstance {\n-    Class<?> implementedType();\n-}\n-\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/WrapperInstance.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"}]}