{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.util.ClassFileDumper;\n@@ -46,0 +47,1 @@\n+import java.nio.file.Path;\n@@ -208,2 +210,2 @@\n-            \/\/ Intentionally weak + no nestmate\n-            var lookup = info.lookup.defineHiddenClassWithClassData(info.template, List.of(mhs), true);\n+            var lookup = info.lookup.makeHiddenClassDefiner(info.template, DUMPER)\n+                    .defineClassAsLookup(true, List.of(mhs));\n@@ -229,0 +231,3 @@\n+    private static final ClassFileDumper DUMPER = ClassFileDumper.getInstance(\n+            \"jdk.invoke.MethodHandleProxies.dumpInterfaceInstances\", Path.of(\"DUMP_INTERFACE_INSTANCES\"));\n+\n@@ -244,1 +249,1 @@\n-                    infos.add(new LocalMethodInfo(desc(mt), DEFAULT_RETHROWNS));\n+                    infos.add(new LocalMethodInfo(desc(mt), DEFAULT_RETHROWS));\n@@ -246,2 +251,2 @@\n-                    infos.add(new LocalMethodInfo(desc(mt), Stream.concat(Stream.of(RuntimeException.class, Error.class),\n-                            Arrays.stream(thrown)).map(MethodHandleProxies::desc).distinct().toList()));\n+                    infos.add(new LocalMethodInfo(desc(mt), Stream.concat(DEFAULT_RETHROWS.stream(),\n+                            Arrays.stream(thrown).map(MethodHandleProxies::desc)).distinct().toList()));\n@@ -282,3 +287,1 @@\n-    private static final ClassDesc CD_RuntimeException = desc(RuntimeException.class);\n-    private static final ClassDesc CD_Error = desc(Error.class);\n-    private static final List<ClassDesc> DEFAULT_RETHROWNS = List.of(CD_RuntimeException, CD_Error);\n+    private static final List<ClassDesc> DEFAULT_RETHROWS = List.of(desc(RuntimeException.class), desc(Error.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,5 +130,0 @@\n-\n-    public Object invokeDefault(Object proxy, Method method, Object[] args, Class<?> caller)\n-            throws Throwable {\n-        return Proxy.invokeDefault(proxy, method, args, caller);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ReflectAccess.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,7 +105,0 @@\n-\n-    \/** Invokes the given default method if the method's declaring interface is\n-     *  accessible to the given caller.  Otherwise, IllegalAccessException will\n-     *  be thrown.  If the caller is null, no access check is performed.\n-     *\/\n-    public Object invokeDefault(Object proxy, Method method, Object[] args, Class<?> caller)\n-        throws Throwable;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangReflectAccess.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}