{"files":[{"patch":"@@ -746,1 +746,22 @@\n-Node *OrINode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+\/\/ Find shift value for Integer or Long OR.\n+Node* rotate_shift(PhaseGVN* phase, Node* lshift, Node* rshift, int mask) {\n+  \/\/ val << norm_con_shift | val >> ({32|64} - norm_con_shift) => rotate_left val, norm_con_shift\n+  const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n+  const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n+  if (lshift_t != NULL && lshift_t->is_con() &&\n+      rshift_t != NULL && rshift_t->is_con() &&\n+      ((lshift_t->get_con() & mask) == ((mask + 1) - (rshift_t->get_con() & mask)))) {\n+    return phase->intcon(lshift_t->get_con() & mask);\n+  }\n+  \/\/ val << var_shift | val >> ({0|32|64} - var_shift) => rotate_left val, var_shift\n+  if (rshift->Opcode() == Op_SubI && rshift->in(2) == lshift && rshift->in(1)->is_Con()){\n+    const TypeInt* shift_t = phase->type(rshift->in(1))->isa_int();\n+    if (shift_t != NULL && shift_t->is_con() &&\n+        (shift_t->get_con() == 0 || shift_t->get_con() == (mask + 1))) {\n+      return lshift;\n+    }\n+  }\n+  return NULL;\n+}\n+\n+Node* OrINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -751,13 +772,5 @@\n-     Node *lshift = in(1)->in(2);\n-     Node *rshift = in(2)->in(2);\n-     \/\/ val << norm_con_shift | val >> (32 - norm_con_shift) => rotate_left val , norm_con_shift\n-     if (lshift->is_Con() && rshift->is_Con() &&\n-         ((lshift->get_int() & 0x1F) == (32 - (rshift->get_int() & 0x1F)))) {\n-       return  new RotateLeftNode(in(1)->in(1),\n-                 phase->intcon(lshift->get_int() & 0x1F), TypeInt::INT);\n-     }\n-     \/\/ val << var_shift | val >> (0\/32 - var_shift) => rotate_left val , var_shift\n-     if (rshift->Opcode() == Op_SubI && rshift->in(2) == lshift &&\n-         rshift->in(1)->is_Con() &&\n-         (rshift->in(1)->get_int() == 0 || rshift->in(1)->get_int() == 32)) {\n-       return  new RotateLeftNode(in(1)->in(1), lshift, TypeInt::INT);\n+     Node* lshift = in(1)->in(2);\n+     Node* rshift = in(2)->in(2);\n+     Node* shift = rotate_shift(phase, lshift, rshift, 0x1F);\n+     if (shift != NULL) {\n+       return new RotateLeftNode(in(1)->in(1), shift, TypeInt::INT);\n@@ -765,0 +778,1 @@\n+     return NULL;\n@@ -770,11 +784,3 @@\n-     \/\/ val >> norm_con_shift | val << (32 - norm_con_shift) => rotate_right val , norm_con_shift\n-     if (rshift->is_Con() && lshift->is_Con() &&\n-         ((rshift->get_int() & 0x1F) == (32 - (lshift->get_int() & 0x1F)))) {\n-       return  new RotateRightNode(in(1)->in(1),\n-                 phase->intcon(rshift->get_int() & 0x1F), TypeInt::INT);\n-     }\n-     \/\/ val >> var_shift | val << (0\/32 - var_shift) => rotate_right val , var_shift\n-     if (lshift->Opcode() == Op_SubI && lshift->in(2) == rshift &&\n-         lshift->in(1)->is_Con() &&\n-         (lshift->in(1)->get_int() == 0 || lshift->in(1)->get_int() == 32)) {\n-       return  new RotateRightNode(in(1)->in(1), rshift, TypeInt::INT);\n+     Node* shift = rotate_shift(phase, rshift, lshift, 0x1F);\n+     if (shift != NULL) {\n+       return new RotateRightNode(in(1)->in(1), shift, TypeInt::INT);\n@@ -827,1 +833,1 @@\n-Node *OrLNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+Node* OrLNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -832,14 +838,7 @@\n-     Node *lshift = in(1)->in(2);\n-     Node *rshift = in(2)->in(2);\n-     \/\/ val << norm_con_shift | val >> (64 - norm_con_shift) => rotate_left val , norm_con_shift\n-     if (lshift->is_Con() && rshift->is_Con() &&\n-         ((lshift->get_int() & 0x3F) == (64 - (rshift->get_int() & 0x3F)))) {\n-       return  new RotateLeftNode(in(1)->in(1),\n-                 phase->intcon(lshift->get_int() & 0x3F), TypeLong::LONG);\n-     }\n-     \/\/ val << var_shift | val >> (0\/64 - var_shift) => rotate_left val , var_shift\n-     if (rshift->Opcode() == Op_SubI && rshift->in(2) == lshift &&\n-         rshift->in(1)->is_Con() &&\n-         (rshift->in(1)->get_int() == 0 || rshift->in(1)->get_int() == 64)) {\n-       return  new RotateLeftNode(in(1)->in(1), lshift, TypeLong::LONG);\n-     }\n+    Node* lshift = in(1)->in(2);\n+    Node* rshift = in(2)->in(2);\n+    Node* shift = rotate_shift(phase, lshift, rshift, 0x3F);\n+    if (shift != NULL) {\n+      return new RotateLeftNode(in(1)->in(1), shift, TypeLong::LONG);\n+    }\n+    return NULL;\n@@ -849,14 +848,6 @@\n-     Node *rshift = in(1)->in(2);\n-     Node *lshift = in(2)->in(2);\n-     \/\/ val >> norm_con_shift | val << (64 - norm_con_shift) => rotate_right val , norm_con_shift\n-     if (rshift->is_Con() && lshift->is_Con() &&\n-         ((rshift->get_int() & 0x3F) == (64 - (lshift->get_int() & 0x3F)))) {\n-       return  new RotateRightNode(in(1)->in(1),\n-                 phase->intcon(rshift->get_int() & 0x3F), TypeLong::LONG);\n-     }\n-     \/\/ val >> var_shift | val << (0\/64 - var_shift) => rotate_right val , var_shift\n-     if (lshift->Opcode() == Op_SubI && lshift->in(2) == rshift &&\n-         lshift->in(1)->is_Con() &&\n-         (lshift->in(1)->get_int() == 0 || lshift->in(1)->get_int() == 64)) {\n-       return  new RotateRightNode(in(1)->in(1), rshift, TypeLong::LONG);\n-     }\n+    Node* rshift = in(1)->in(2);\n+    Node* lshift = in(2)->in(2);\n+    Node* shift = rotate_shift(phase, rshift, lshift, 0x3F);\n+    if (shift != NULL) {\n+      return new RotateRightNode(in(1)->in(1), shift, TypeLong::LONG);\n+    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":45,"deletions":54,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -838,4 +838,1 @@\n-  int shiftLOpc;\n-  int shiftROpc;\n-  Node* shiftLCnt = NULL;\n-  Node* shiftRCnt = NULL;\n+  assert(bt == T_INT || bt == T_LONG, \"sanity\");\n@@ -844,0 +841,4 @@\n+  int shift_mask = (bt == T_INT) ? 0x1F : 0x3F;\n+  int shiftLOpc = (bt == T_INT) ? Op_LShiftI : Op_LShiftL;\n+  int shiftROpc = (bt == T_INT) ? Op_URShiftI: Op_URShiftL;\n+\n@@ -846,1 +847,3 @@\n-  if (cnt->is_Con()) {\n+  Node* shiftRCnt = NULL;\n+  Node* shiftLCnt = NULL;\n+  if (cnt->is_Con() && cnt->bottom_type()->isa_int()) {\n@@ -848,13 +851,3 @@\n-    if (bt == T_INT) {\n-      int shift = cnt->get_int() & 31;\n-      shiftRCnt = phase->intcon(shift);\n-      shiftLCnt = phase->intcon(32 - shift);\n-      shiftLOpc = Op_LShiftI;\n-      shiftROpc = Op_URShiftI;\n-    } else {\n-      int shift = cnt->get_int() & 63;\n-      shiftRCnt = phase->intcon(shift);\n-      shiftLCnt = phase->intcon(64 - shift);\n-      shiftLOpc = Op_LShiftL;\n-      shiftROpc = Op_URShiftL;\n-    }\n+    int shift = cnt->get_int() & shift_mask;\n+    shiftRCnt = phase->intcon(shift);\n+    shiftLCnt = phase->intcon(shift_mask + 1 - shift);\n@@ -865,6 +858,2 @@\n-    if (bt == T_INT) {\n-      shiftRCnt = phase->transform(new AndINode(cnt, phase->intcon(31)));\n-      shiftLCnt = phase->transform(new SubINode(phase->intcon(32), shiftRCnt));\n-      shiftLOpc = Op_LShiftI;\n-      shiftROpc = Op_URShiftI;\n-    } else {\n+    if (bt == T_LONG) {\n+      \/\/ Shift count vector for Rotate vector has long elements too.\n@@ -873,4 +862,0 @@\n-      shiftRCnt = phase->transform(new AndINode(cnt, phase->intcon(63)));\n-      shiftLCnt = phase->transform(new SubINode(phase->intcon(64), shiftRCnt));\n-      shiftLOpc = Op_LShiftL;\n-      shiftROpc = Op_URShiftL;\n@@ -878,0 +863,2 @@\n+    shiftRCnt = phase->transform(new AndINode(cnt, phase->intcon(shift_mask)));\n+    shiftLCnt = phase->transform(new SubINode(phase->intcon(shift_mask + 1), shiftRCnt));\n@@ -911,83 +898,0 @@\n-Node* OrVNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  int lopcode = in(1)->Opcode();\n-  int ropcode = in(2)->Opcode();\n-  const TypeVect* vt = bottom_type()->is_vect();\n-  int vec_len = vt->length();\n-  BasicType bt = vt->element_basic_type();\n-\n-  \/\/ Vector Rotate operations inferencing, this will be useful when vector\n-  \/\/ operations are created via non-SLP route i.e. (VectorAPI).\n-  if (Matcher::match_rule_supported_vector(Op_RotateLeftV, vec_len, bt) &&\n-      ((ropcode == Op_LShiftVI && lopcode == Op_URShiftVI) ||\n-       (ropcode == Op_LShiftVL && lopcode == Op_URShiftVL)) &&\n-      in(1)->in(1) == in(2)->in(1)) {\n-    assert(Op_RShiftCntV == in(1)->in(2)->Opcode(), \"LShiftCntV operand expected\");\n-    assert(Op_LShiftCntV == in(2)->in(2)->Opcode(), \"RShiftCntV operand expected\");\n-    Node* lshift = in(1)->in(2)->in(1);\n-    Node* rshift = in(2)->in(2)->in(1);\n-    int mod_val = bt == T_LONG ? 64 : 32;\n-    int shift_mask = bt == T_LONG ? 0x3F : 0x1F;\n-    \/\/ val >> norm_con_shift | val << (32 - norm_con_shift) => rotate_right val ,\n-    \/\/ norm_con_shift\n-    if (lshift->is_Con() && rshift->is_Con() &&\n-        ((lshift->get_int() & shift_mask) ==\n-         (mod_val - (rshift->get_int() & shift_mask)))) {\n-      return new RotateRightVNode(\n-          in(1)->in(1), phase->intcon(lshift->get_int() & shift_mask), vt);\n-    }\n-    if (lshift->Opcode() == Op_AndI && rshift->Opcode() == Op_AndI &&\n-        lshift->in(2)->is_Con() && rshift->in(2)->is_Con() &&\n-        lshift->in(2)->get_int() == (mod_val - 1) &&\n-        rshift->in(2)->get_int() == (mod_val - 1)) {\n-      lshift = lshift->in(1);\n-      rshift = rshift->in(1);\n-      \/\/ val << var_shift | val >> (0\/32 - var_shift) => rotate_left val ,\n-      \/\/ var_shift\n-      if (lshift->Opcode() == Op_SubI && lshift->in(2) == rshift &&\n-          lshift->in(1)->is_Con() &&\n-          (lshift->in(1)->get_int() == 0 ||\n-           lshift->in(1)->get_int() == mod_val)) {\n-        Node* rotate_cnt = phase->transform(new ReplicateINode(rshift, vt));\n-        return new RotateLeftVNode(in(1)->in(1), rotate_cnt, vt);\n-      }\n-    }\n-  }\n-\n-  if (Matcher::match_rule_supported_vector(Op_RotateRightV, vec_len, bt) &&\n-      ((ropcode == Op_URShiftVI && lopcode == Op_LShiftVI) ||\n-       (ropcode == Op_URShiftVL && lopcode == Op_LShiftVL)) &&\n-      in(1)->in(1) == in(2)->in(1)) {\n-    assert(Op_LShiftCntV == in(1)->in(2)->Opcode(), \"RShiftCntV operand expected\");\n-    assert(Op_RShiftCntV == in(2)->in(2)->Opcode(), \"LShiftCntV operand expected\");\n-    Node* rshift = in(1)->in(2)->in(1);\n-    Node* lshift = in(2)->in(2)->in(1);\n-    int mod_val = bt == T_LONG ? 64 : 32;\n-    int shift_mask = bt == T_LONG ? 0x3F : 0x1F;\n-    \/\/ val << norm_con_shift | val >> (32 - norm_con_shift) => rotate_left val\n-    \/\/ , norm_con_shift\n-    if (rshift->is_Con() && lshift->is_Con() &&\n-        ((rshift->get_int() & shift_mask) ==\n-         (mod_val - (lshift->get_int() & shift_mask)))) {\n-      return new RotateLeftVNode(\n-          in(1)->in(1), phase->intcon(rshift->get_int() & shift_mask), vt);\n-    }\n-    if (lshift->Opcode() == Op_AndI && rshift->Opcode() == Op_AndI &&\n-        lshift->in(2)->is_Con() && rshift->in(2)->is_Con() &&\n-        rshift->in(2)->get_int() == (mod_val - 1) &&\n-        lshift->in(2)->get_int() == (mod_val - 1)) {\n-      rshift = rshift->in(1);\n-      lshift = lshift->in(1);\n-      \/\/ val >> var_shift | val << (0\/32 - var_shift) => rotate_right val ,\n-      \/\/ var_shift\n-      if (rshift->Opcode() == Op_SubI && rshift->in(2) == lshift &&\n-          rshift->in(1)->is_Con() &&\n-          (rshift->in(1)->get_int() == 0 ||\n-           rshift->in(1)->get_int() == mod_val)) {\n-        Node* rotate_cnt = phase->transform(new ReplicateINode(lshift, vt));\n-        return new RotateRightVNode(in(1)->in(1), rotate_cnt, vt);\n-      }\n-    }\n-  }\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":15,"deletions":111,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -627,1 +627,0 @@\n-  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-  private static final int SHIFT_LT_IMM8 = -128;\n-  private static final int SHIFT_GT_IMM8 = 128;\n@@ -154,7 +152,0 @@\n-      test1_ror(a0, a1);\n-      test1_rol(a0, a1);\n-      test2_ror(a0, a1);\n-      test2_rol(a0, a1);\n-      test3_ror(a0, a1, SHIFT);\n-      test3_rol(a0, a1, SHIFT);\n-\n@@ -388,24 +379,0 @@\n-      test1_ror(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test1_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT_GT_IMM8) | (int)(ADD_INIT+i)<<-SHIFT_GT_IMM8));\n-      }\n-      test1_rol(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test1_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT_GT_IMM8) | (int)(ADD_INIT+i)>>>-SHIFT_GT_IMM8));\n-      }\n-      test2_ror(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test2_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT_LT_IMM8) | (int)(ADD_INIT+i)<<-SHIFT_LT_IMM8));\n-      }\n-      test2_rol(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test2_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT_LT_IMM8) | (int)(ADD_INIT+i)>>>-SHIFT_LT_IMM8));\n-      }\n-      test3_rol(a0, a1, SHIFT);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test3_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT) | (int)(ADD_INIT+i)>>>-SHIFT));\n-      }\n-      test3_ror(a0, a1, SHIFT);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test3_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT) | (int)(ADD_INIT+i)<<-SHIFT));\n-      }\n@@ -940,42 +907,0 @@\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test1_rol(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test1_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test1_ror(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test1_ror: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test2_rol(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test2_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test2_ror(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test2_ror: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test3_rol(a0, a1, SHIFT);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test3_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test3_ror(a0, a1, SHIFT);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test3_ror: \" + (end - start));\n-\n@@ -1002,1 +927,0 @@\n-\n@@ -1178,30 +1102,1 @@\n-  static void test1_rol(int[] a0, int[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateLeft(a1[i], SHIFT_GT_IMM8));\n-    }\n-  }\n-  static void test1_ror(int[] a0, int[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateRight(a1[i], SHIFT_GT_IMM8));\n-    }\n-  }\n-  static void test2_rol(int[] a0, int[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateLeft(a1[i], SHIFT_LT_IMM8));\n-    }\n-  }\n-  static void test2_ror(int[] a0, int[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateRight(a1[i], SHIFT_LT_IMM8));\n-    }\n-  }\n-  static void test3_rol(int[] a0, int[] a1, int shift) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateLeft(a1[i], shift));\n-    }\n-  }\n-  static void test3_ror(int[] a0, int[] a1, int shift) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (int)(Integer.rotateRight(a1[i], shift));\n-    }\n-  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestIntVect.java","additions":2,"deletions":107,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -0,0 +1,467 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8248830\n+ * @summary Implement Rotate vectorization optimizations in hotspot-server\n+ *\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m compiler.c2.cr6340864.TestIntVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=8 compiler.c2.cr6340864.TestIntVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=16 compiler.c2.cr6340864.TestIntVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=32 compiler.c2.cr6340864.TestIntVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=3 compiler.c2.cr6340864.TestIntVectRotate\n+ *\/\n+\n+package compiler.c2.cr6340864;\n+\n+public class TestIntVectRotate {\n+  private static final int ARRLEN = 997;\n+  private static final int ITERS  = 11000;\n+  private static final int ADD_INIT = Integer.MAX_VALUE-500;\n+  private static final int VALUE = 15;\n+  private static final int SHIFT = 32;\n+  private static final int SHIFT_LT_IMM8 = -128;\n+  private static final int SHIFT_GT_IMM8 = 128;\n+\n+  public static void main(String args[]) {\n+    System.out.println(\"Testing Integer Rotate vectors\");\n+    test();\n+    int errn = verify();\n+    if (errn > 0) {\n+      System.err.println(\"FAILED: \" + errn + \" errors\");\n+      System.exit(97);\n+    }\n+    times();\n+    System.out.println(\"PASSED\");\n+  }\n+\n+  static int[] a0 = new int[ARRLEN];\n+  static int[] a1 = new int[ARRLEN];\n+\n+  static void test() {\n+    \/\/ Initialize\n+    for (int i=0; i<ARRLEN; i++) {\n+      int val = (int)(ADD_INIT+i);\n+      a1[i] = val;\n+    }\n+    System.out.println(\"Warmup\");\n+    for (int i=0; i<ITERS; i++) {\n+      test1_ror(a0, a1);\n+      test1_rol(a0, a1);\n+      test2_ror(a0, a1);\n+      test2_rol(a0, a1);\n+      test3_ror(a0, a1, SHIFT);\n+      test3_rol(a0, a1, SHIFT);\n+\n+      test_rolc(a0, a1);\n+      test_rolv(a0, a1, VALUE);\n+      test_rorc(a0, a1);\n+      test_rorv(a0, a1, VALUE);\n+\n+      test_rolc_n(a0, a1);\n+      test_rolv(a0, a1, -VALUE);\n+      test_rorc_n(a0, a1);\n+      test_rorv(a0, a1, -VALUE);\n+\n+      test_rolc_o(a0, a1);\n+      test_rolv(a0, a1, SHIFT);\n+      test_rorc_o(a0, a1);\n+      test_rorv(a0, a1, SHIFT);\n+\n+      test_rolc_on(a0, a1);\n+      test_rolv(a0, a1, -SHIFT);\n+      test_rorc_on(a0, a1);\n+      test_rorv(a0, a1, -SHIFT);\n+    }\n+  }\n+\n+  \/\/ Test and verify results\n+  static int verify() {\n+    System.out.println(\"Verification\");\n+    int errn = 0;\n+\n+    test1_ror(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test1_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT_GT_IMM8) | (int)(ADD_INIT+i)<<-SHIFT_GT_IMM8));\n+    }\n+    test1_rol(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test1_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT_GT_IMM8) | (int)(ADD_INIT+i)>>>-SHIFT_GT_IMM8));\n+    }\n+    test2_ror(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test2_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT_LT_IMM8) | (int)(ADD_INIT+i)<<-SHIFT_LT_IMM8));\n+    }\n+    test2_rol(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test2_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT_LT_IMM8) | (int)(ADD_INIT+i)>>>-SHIFT_LT_IMM8));\n+    }\n+    test3_rol(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test3_rol: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT) | (int)(ADD_INIT+i)>>>-SHIFT));\n+    }\n+    test3_ror(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test3_ror: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT) | (int)(ADD_INIT+i)<<-SHIFT));\n+    }\n+\n+    test_rolc(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<VALUE) | (int)(ADD_INIT+i)>>>(-VALUE)));\n+    }\n+    test_rolv(a0, a1, VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<VALUE) | (int)(ADD_INIT+i)>>>(-VALUE)));\n+    }\n+\n+    test_rorc(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>VALUE) | (int)(ADD_INIT+i)<<(-VALUE)));\n+    }\n+    test_rorv(a0, a1, VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>VALUE) | (int)(ADD_INIT+i)<<(-VALUE)));\n+    }\n+\n+    test_rolc_n(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_n: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<(-VALUE)) | (int)(ADD_INIT+i)>>>VALUE));\n+    }\n+    test_rolv(a0, a1, -VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_n: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<(-VALUE)) | (int)(ADD_INIT+i)>>>VALUE));\n+    }\n+\n+    test_rorc_n(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_n: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>(-VALUE)) | (int)(ADD_INIT+i)<<VALUE));\n+    }\n+    test_rorv(a0, a1, -VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv_n: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>(-VALUE)) | (int)(ADD_INIT+i)<<VALUE));\n+    }\n+\n+    test_rolc_o(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_o: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT) | (int)(ADD_INIT+i)>>>(-SHIFT)));\n+    }\n+    test_rolv(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_o: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<SHIFT) | (int)(ADD_INIT+i)>>>(-SHIFT)));\n+    }\n+\n+    test_rorc_o(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_o: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT) | (int)(ADD_INIT+i)<<(-SHIFT)));\n+    }\n+    test_rorv(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv_o: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>SHIFT) | (int)(ADD_INIT+i)<<(-SHIFT)));\n+    }\n+\n+    test_rolc_on(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_on: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<(-SHIFT)) | (int)(ADD_INIT+i)>>>SHIFT));\n+    }\n+    test_rolv(a0, a1, -SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_on: \", i, a0[i], (int)(((int)(ADD_INIT+i)<<(-SHIFT)) | (int)(ADD_INIT+i)>>>SHIFT));\n+    }\n+\n+    test_rorc_on(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_on: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>(-SHIFT)) | (int)(ADD_INIT+i)<<SHIFT));\n+    }\n+    test_rorv(a0, a1, -SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_on: \", i, a0[i], (int)(((int)(ADD_INIT+i)>>>(-SHIFT)) | (int)(ADD_INIT+i)<<SHIFT));\n+    }\n+\n+    return errn;\n+  }\n+\n+  static void times() {\n+    System.out.println(\"Time\");\n+    long start, end;\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test1_rol(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test1_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test1_ror(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test1_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test2_rol(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test2_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test2_ror(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test2_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test3_rol(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test3_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test3_ror(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test3_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_n(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, -VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_n(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, -VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_o(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_o(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_on(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, -SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_on(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, -SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_on: \" + (end - start));\n+  }\n+\n+  static void test_rolc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], VALUE));\n+    }\n+  }\n+\n+  static void test_rolc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], (-VALUE)));\n+    }\n+  }\n+\n+  static void test_rolc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], SHIFT));\n+    }\n+  }\n+\n+  static void test_rolc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], (-SHIFT)));\n+    }\n+  }\n+\n+  static void test_rolv(int[] a0, int[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], shift));\n+    }\n+  }\n+\n+  static void test_rorc(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], VALUE));\n+    }\n+  }\n+\n+  static void test_rorc_n(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], (-VALUE)));\n+    }\n+  }\n+\n+  static void test_rorc_o(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], SHIFT));\n+    }\n+  }\n+\n+  static void test_rorc_on(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], (-SHIFT)));\n+    }\n+  }\n+\n+  static void test_rorv(int[] a0, int[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], shift));\n+    }\n+  }\n+\n+  static void test1_rol(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], SHIFT_GT_IMM8));\n+    }\n+  }\n+\n+  static void test1_ror(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], SHIFT_GT_IMM8));\n+    }\n+  }\n+\n+  static void test2_rol(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], SHIFT_LT_IMM8));\n+    }\n+  }\n+\n+  static void test2_ror(int[] a0, int[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], SHIFT_LT_IMM8));\n+    }\n+  }\n+\n+  static void test3_rol(int[] a0, int[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateLeft(a1[i], shift));\n+    }\n+  }\n+\n+  static void test3_ror(int[] a0, int[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (int)(Integer.rotateRight(a1[i], shift));\n+    }\n+  }\n+\n+  static int verify(String text, int i, int elem, int val) {\n+    if (elem != val) {\n+      System.err.println(text + \"[\" + i + \"] = \" + elem + \" != \" + val);\n+      return 1;\n+    }\n+    return 0;\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestIntVectRotate.java","additions":467,"deletions":0,"binary":false,"changes":467,"status":"added"},{"patch":"@@ -45,2 +45,0 @@\n-  private static final int SHIFT_LT_IMM8 = -128;\n-  private static final int SHIFT_GT_IMM8 = 128;\n@@ -148,7 +146,0 @@\n-\n-      test1_ror(a0, a1);\n-      test1_rol(a0, a1);\n-      test2_ror(a0, a1);\n-      test2_rol(a0, a1);\n-      test3_ror(a0, a1, SHIFT);\n-      test3_rol(a0, a1, SHIFT);\n@@ -445,24 +436,0 @@\n-      test1_ror(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test1_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT_GT_IMM8) | (long)(ADD_INIT+i)<<-SHIFT_GT_IMM8));\n-      }\n-      test1_rol(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test1_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT_GT_IMM8) | (long)(ADD_INIT+i)>>>-SHIFT_GT_IMM8));\n-      }\n-      test2_ror(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test2_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT_LT_IMM8) | (long)(ADD_INIT+i)<<-SHIFT_LT_IMM8));\n-      }\n-      test2_rol(a0, a1);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test2_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT_LT_IMM8) | (long)(ADD_INIT+i)>>>-SHIFT_LT_IMM8));\n-      }\n-      test3_rol(a0, a1, SHIFT);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test3_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT) | (long)(ADD_INIT+i)>>>-SHIFT));\n-      }\n-      test3_ror(a0, a1, SHIFT);\n-      for (int i=0; i<ARRLEN; i++) {\n-        errn += verify(\"test3_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT) | (long)(ADD_INIT+i)<<-SHIFT));\n-      }\n@@ -889,42 +856,0 @@\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test1_rol(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test1_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test1_ror(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test1_ror: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test2_rol(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test2_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test2_ror(a0, a1);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test2_ror: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test3_rol(a0, a1, SHIFT);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test3_rol: \" + (end - start));\n-\n-    start = System.currentTimeMillis();\n-    for (int i=0; i<ITERS; i++) {\n-      test3_ror(a0, a1, SHIFT);\n-    }\n-    end = System.currentTimeMillis();\n-    System.out.println(\"test3_ror: \" + (end - start));\n-\n@@ -1201,30 +1126,0 @@\n-  static void test1_rol(long[] a0, long[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateLeft(a1[i], SHIFT_GT_IMM8));\n-    }\n-  }\n-  static void test1_ror(long[] a0, long[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateRight(a1[i], SHIFT_GT_IMM8));\n-    }\n-  }\n-  static void test2_rol(long[] a0, long[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateLeft(a1[i], SHIFT_LT_IMM8));\n-    }\n-  }\n-  static void test2_ror(long[] a0, long[] a1) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateRight(a1[i], SHIFT_LT_IMM8));\n-    }\n-  }\n-  static void test3_rol(long[] a0, long[] a1, int shift) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateLeft(a1[i], shift));\n-    }\n-  }\n-  static void test3_ror(long[] a0, long[] a1, int shift) {\n-    for (int i = 0; i < a0.length; i+=1) {\n-      a0[i] = (long)(Long.rotateRight(a1[i], shift));\n-    }\n-  }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestLongVect.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -0,0 +1,467 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8248830\n+ * @summary Implement Rotate vectorization optimizations in hotspot-server\n+ *\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m compiler.c2.cr6340864.TestLongVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=8 compiler.c2.cr6340864.TestLongVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=16 compiler.c2.cr6340864.TestLongVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:MaxVectorSize=32 compiler.c2.cr6340864.TestLongVectRotate\n+ * @run main\/othervm\/timeout=400 -Xbatch -Xmx128m -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=3 compiler.c2.cr6340864.TestLongVectRotate\n+ *\/\n+\n+package compiler.c2.cr6340864;\n+\n+public class TestLongVectRotate {\n+  private static final int ARRLEN = 997;\n+  private static final int ITERS  = 11000;\n+  private static final long ADD_INIT = Long.MAX_VALUE-500;\n+  private static final int VALUE = 31;\n+  private static final int SHIFT = 64;\n+  private static final int SHIFT_LT_IMM8 = -128;\n+  private static final int SHIFT_GT_IMM8 = 128;\n+\n+  public static void main(String args[]) {\n+    System.out.println(\"Testing Long Rotate vectors\");\n+    test();\n+    int errn = verify();\n+    if (errn > 0) {\n+      System.err.println(\"FAILED: \" + errn + \" errors\");\n+      System.exit(97);\n+    }\n+    times();\n+    System.out.println(\"PASSED\");\n+  }\n+\n+  static long[] a0 = new long[ARRLEN];\n+  static long[] a1 = new long[ARRLEN];\n+\n+  static void test() {\n+    \/\/ Initialize\n+    for (int i=0; i<ARRLEN; i++) {\n+      long val = (long)(ADD_INIT+i);\n+      a1[i] = val;\n+    }\n+    System.out.println(\"Warmup\");\n+    for (int i=0; i<ITERS; i++) {\n+      test1_ror(a0, a1);\n+      test1_rol(a0, a1);\n+      test2_ror(a0, a1);\n+      test2_rol(a0, a1);\n+      test3_ror(a0, a1, SHIFT);\n+      test3_rol(a0, a1, SHIFT);\n+\n+      test_rolc(a0, a1);\n+      test_rolv(a0, a1, VALUE);\n+      test_rorc(a0, a1);\n+      test_rorv(a0, a1, VALUE);\n+\n+      test_rolc_n(a0, a1);\n+      test_rolv(a0, a1, -VALUE);\n+      test_rorc_n(a0, a1);\n+      test_rorv(a0, a1, -VALUE);\n+\n+      test_rolc_o(a0, a1);\n+      test_rolv(a0, a1, SHIFT);\n+      test_rorc_o(a0, a1);\n+      test_rorv(a0, a1, SHIFT);\n+\n+      test_rolc_on(a0, a1);\n+      test_rolv(a0, a1, -SHIFT);\n+      test_rorc_on(a0, a1);\n+      test_rorv(a0, a1, -SHIFT);\n+    }\n+  }\n+\n+  \/\/ Test and verify results\n+  static int verify() {\n+    System.out.println(\"Verification\");\n+    int errn = 0;\n+\n+    test1_ror(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test1_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT_GT_IMM8) | (long)(ADD_INIT+i)<<-SHIFT_GT_IMM8));\n+    }\n+    test1_rol(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test1_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT_GT_IMM8) | (long)(ADD_INIT+i)>>>-SHIFT_GT_IMM8));\n+    }\n+    test2_ror(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test2_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT_LT_IMM8) | (long)(ADD_INIT+i)<<-SHIFT_LT_IMM8));\n+    }\n+    test2_rol(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test2_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT_LT_IMM8) | (long)(ADD_INIT+i)>>>-SHIFT_LT_IMM8));\n+    }\n+    test3_rol(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test3_rol: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT) | (long)(ADD_INIT+i)>>>-SHIFT));\n+    }\n+    test3_ror(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test3_ror: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT) | (long)(ADD_INIT+i)<<-SHIFT));\n+    }\n+\n+    test_rolc(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<VALUE) | (long)(ADD_INIT+i)>>>(-VALUE)));\n+    }\n+    test_rolv(a0, a1, VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<VALUE) | (long)(ADD_INIT+i)>>>(-VALUE)));\n+    }\n+\n+    test_rorc(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>VALUE) | (long)(ADD_INIT+i)<<(-VALUE)));\n+    }\n+    test_rorv(a0, a1, VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>VALUE) | (long)(ADD_INIT+i)<<(-VALUE)));\n+    }\n+\n+    test_rolc_n(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_n: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<(-VALUE)) | (long)(ADD_INIT+i)>>>VALUE));\n+    }\n+    test_rolv(a0, a1, -VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_n: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<(-VALUE)) | (long)(ADD_INIT+i)>>>VALUE));\n+    }\n+\n+    test_rorc_n(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_n: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>(-VALUE)) | (long)(ADD_INIT+i)<<VALUE));\n+    }\n+    test_rorv(a0, a1, -VALUE);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv_n: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>(-VALUE)) | (long)(ADD_INIT+i)<<VALUE));\n+    }\n+\n+    test_rolc_o(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_o: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT) | (long)(ADD_INIT+i)>>>(-SHIFT)));\n+    }\n+    test_rolv(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_o: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<SHIFT) | (long)(ADD_INIT+i)>>>(-SHIFT)));\n+    }\n+\n+    test_rorc_o(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_o: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT) | (long)(ADD_INIT+i)<<(-SHIFT)));\n+    }\n+    test_rorv(a0, a1, SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorv_o: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>SHIFT) | (long)(ADD_INIT+i)<<(-SHIFT)));\n+    }\n+\n+    test_rolc_on(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolc_on: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<(-SHIFT)) | (long)(ADD_INIT+i)>>>SHIFT));\n+    }\n+    test_rolv(a0, a1, -SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rolv_on: \", i, a0[i], (long)(((long)(ADD_INIT+i)<<(-SHIFT)) | (long)(ADD_INIT+i)>>>SHIFT));\n+    }\n+\n+    test_rorc_on(a0, a1);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_on: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>(-SHIFT)) | (long)(ADD_INIT+i)<<SHIFT));\n+    }\n+    test_rorv(a0, a1, -SHIFT);\n+    for (int i=0; i<ARRLEN; i++) {\n+      errn += verify(\"test_rorc_on: \", i, a0[i], (long)(((long)(ADD_INIT+i)>>>(-SHIFT)) | (long)(ADD_INIT+i)<<SHIFT));\n+    }\n+\n+    return errn;\n+  }\n+\n+  static void times() {\n+    System.out.println(\"Time\");\n+    long start, end;\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test1_rol(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test1_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test1_ror(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test1_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test2_rol(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test2_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test2_ror(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test2_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test3_rol(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test3_rol: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test3_ror(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test3_ror: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_n(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, -VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_n(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, -VALUE);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_n: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_o(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_o(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_o: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolc_on(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolc_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rolv(a0, a1, -SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rolv_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorc_on(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorc_on: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_rorv(a0, a1, -SHIFT);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_rorv_on: \" + (end - start));\n+  }\n+\n+  static void test_rolc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], VALUE));\n+    }\n+  }\n+\n+  static void test_rolc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], (-VALUE)));\n+    }\n+  }\n+\n+  static void test_rolc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], SHIFT));\n+    }\n+  }\n+\n+  static void test_rolc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], (-SHIFT)));\n+    }\n+  }\n+\n+  static void test_rolv(long[] a0, long[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], shift));\n+    }\n+  }\n+\n+  static void test_rorc(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], VALUE));\n+    }\n+  }\n+\n+  static void test_rorc_n(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], (-VALUE)));\n+    }\n+  }\n+\n+  static void test_rorc_o(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], SHIFT));\n+    }\n+  }\n+\n+  static void test_rorc_on(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], (-SHIFT)));\n+    }\n+  }\n+\n+  static void test_rorv(long[] a0, long[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], shift));\n+    }\n+  }\n+\n+  static void test1_rol(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], SHIFT_GT_IMM8));\n+    }\n+  }\n+\n+  static void test1_ror(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], SHIFT_GT_IMM8));\n+    }\n+  }\n+\n+  static void test2_rol(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], SHIFT_LT_IMM8));\n+    }\n+  }\n+\n+  static void test2_ror(long[] a0, long[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], SHIFT_LT_IMM8));\n+    }\n+  }\n+\n+  static void test3_rol(long[] a0, long[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateLeft(a1[i], shift));\n+    }\n+  }\n+\n+  static void test3_ror(long[] a0, long[] a1, int shift) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = (long)(Long.rotateRight(a1[i], shift));\n+    }\n+  }\n+\n+  static int verify(String text, int i, long elem, long val) {\n+    if (elem != val) {\n+      System.err.println(text + \"[\" + i + \"] = \" + elem + \" != \" + val);\n+      return 1;\n+    }\n+    return 0;\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestLongVectRotate.java","additions":467,"deletions":0,"binary":false,"changes":467,"status":"added"}]}