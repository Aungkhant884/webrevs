{"files":[{"patch":"@@ -78,1 +78,3 @@\n-  if( in(0) && remove_dead_region(phase, can_reshape) ) return this;\n+  if (in(0) != NULL && remove_dead_region(phase, can_reshape)) {\n+    return this;\n+  }\n@@ -80,1 +82,3 @@\n-  if( in(0) && in(0)->is_top() )  return NULL;\n+  if (in(0) != NULL && in(0)->is_top()) {\n+    return NULL;\n+  }\n@@ -82,11 +86,11 @@\n-         in(IfFalse) != this &&\n-         in(IfTrue) != this, \"dead loop in CMoveNode::Ideal\" );\n-  if( phase->type(in(Condition)) == Type::TOP )\n-  return NULL; \/\/ return NULL when Condition is dead\n-\n-  if( in(IfFalse)->is_Con() && !in(IfTrue)->is_Con() ) {\n-    if( in(Condition)->is_Bool() ) {\n-      BoolNode* b  = in(Condition)->as_Bool();\n-      BoolNode* b2 = b->negate(phase);\n-      return make(in(Control), phase->transform(b2), in(IfTrue), in(IfFalse), _type);\n-    }\n+         in(IfFalse)   != this &&\n+         in(IfTrue)    != this, \"dead loop in CMoveNode::Ideal\");\n+  if (phase->type(in(Condition)) == Type::TOP ||\n+      phase->type(in(IfFalse))   == Type::TOP ||\n+      phase->type(in(IfTrue))    == Type::TOP) {\n+    return NULL;\n+  }\n+  \/\/ Canonicalize the node by moving constants to the right input.\n+  if (in(Condition)->is_Bool() && phase->type(in(IfFalse))->singleton() && !phase->type(in(IfTrue))->singleton()) {\n+    BoolNode* b = in(Condition)->as_Bool()->negate(phase);\n+    return make(in(Control), phase->transform(b), in(IfTrue), in(IfFalse), _type);\n@@ -194,8 +198,4 @@\n-  \/\/ have moved the constant to the right).  This situation is bad for Intel\n-  \/\/ and a don't-care for Sparc.  It's bad for Intel because the zero has to\n-  \/\/ be manifested in a register with a XOR which kills flags, which are live\n-  \/\/ on input to the CMoveI, leading to a situation which causes excessive\n-  \/\/ spilling on Intel.  For Sparc, if the zero in on the left the Sparc will\n-  \/\/ zero a register via G0 and conditionally-move the other constant.  If the\n-  \/\/ zero is on the right, the Sparc will load the first constant with a\n-  \/\/ 13-bit set-lo and conditionally move G0.  See bug 4677505.\n+  \/\/ have moved the constant to the right). This situation is bad for x86 because\n+  \/\/ the zero has to be manifested in a register with a XOR which kills flags,\n+  \/\/ which are live on input to the CMoveI, leading to a situation which causes\n+  \/\/ excessive spilling. See bug 4677505.\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8280123\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.c2.TestCMoveInfiniteGVN::test\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=43739875\n+ *                   compiler.c2.TestCMoveInfiniteGVN\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.c2.TestCMoveInfiniteGVN::test\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN\n+ *                   compiler.c2.TestCMoveInfiniteGVN\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestCMoveInfiniteGVN {\n+\n+    static int test(boolean b, int i) {\n+        int iArr[] = new int[2];\n+\n+        double d = Math.max(i, i);\n+        for (int i1 = 1; i1 < 2; i1++) {\n+            if (i1 != 0) {\n+                return (b ? 1 : 0); \/\/ CMoveI\n+            }\n+            for (int i2 = 1; i2 < 2; i2++) {\n+                switch (i2) {\n+                    case 1: d -= Math.max(i1, i2); break;\n+                }\n+                d -= iArr[i1 - 1];\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    static void test() {\n+        test(true, 234);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        test(); \/\/ compilation, then nmethod invalidation during execution\n+        test(); \/\/ trigger crashing recompilation\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCMoveInfiniteGVN.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}