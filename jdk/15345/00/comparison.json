{"files":[{"patch":"@@ -53,0 +53,1 @@\n+import com.sun.source.doctree.BlockTagTree;\n@@ -55,0 +56,1 @@\n+import com.sun.source.doctree.InlineTagTree;\n@@ -352,1 +354,0 @@\n-        CommentHelper ch = utils.getCommentHelper(element);\n@@ -354,1 +355,5 @@\n-            String name = tag.getKind().tagName;\n+            String name = switch (tag.getKind()) {\n+                case UNKNOWN_INLINE_TAG -> ((InlineTagTree) tag).getTagName();\n+                case UNKNOWN_BLOCK_TAG -> ((BlockTagTree) tag).getTagName();\n+                default -> tag.getKind().tagName;\n+            };\n@@ -356,1 +361,1 @@\n-                continue;\n+                continue; \/\/ not a tag\n@@ -358,10 +363,8 @@\n-            if (!name.isEmpty() && name.charAt(0) == '@') {\n-                name = name.substring(1);\n-            }\n-            if (! (standardTags.contains(name) || allTaglets.containsKey(name))) { \/\/ defunct, see 8314213\n-                if (standardTagsLowercase.contains(Utils.toLowerCase(name))) {\n-                    messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagLowercase\", ch.getTagName(tag));\n-                    continue;\n-                } else {\n-                    messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTag\", ch.getTagName(tag));\n-                    continue;\n+            if (!allTaglets.containsKey(name)) {\n+                if (!config.isDocLintSyntaxGroupEnabled()) {\n+                    var ch = utils.getCommentHelper(element);\n+                    if (standardTagsLowercase.contains(Utils.toLowerCase(name))) {\n+                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagLowercase\", ch.getTagName(tag));\n+                    } else {\n+                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTag\", ch.getTagName(tag));\n+                    }\n@@ -369,0 +372,1 @@\n+                continue; \/\/ unknown tag\n@@ -371,6 +375,3 @@\n-            \/\/ Check and verify tag usage\n-            if (taglet != null) {\n-                if (taglet instanceof SimpleTaglet st && !st.isEnabled()) {\n-                    \/\/ taglet has been disabled\n-                    return;\n-                }\n+            if (taglet instanceof SimpleTaglet st && !st.isEnabled()) {\n+                continue; \/\/ taglet has been disabled\n+            }\n@@ -378,7 +379,6 @@\n-                new SimpleElementVisitor14<Void, Void>() {\n-                    @Override\n-                    public Void visitModule(ModuleElement e, Void p) {\n-                        if (!taglet.inModule()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n-                        }\n-                        return null;\n+            \/\/ Check and verify tag usage\n+            new SimpleElementVisitor14<Void, Void>() {\n+                @Override\n+                public Void visitModule(ModuleElement e, Void p) {\n+                    if (!taglet.inModule()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n@@ -386,0 +386,2 @@\n+                    return null;\n+                }\n@@ -387,6 +389,4 @@\n-                    @Override\n-                    public Void visitPackage(PackageElement e, Void p) {\n-                        if (!taglet.inPackage()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitPackage(PackageElement e, Void p) {\n+                    if (!taglet.inPackage()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n@@ -394,0 +394,2 @@\n+                    return null;\n+                }\n@@ -395,6 +397,4 @@\n-                    @Override\n-                    public Void visitType(TypeElement e, Void p) {\n-                        if (!taglet.inType()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitType(TypeElement e, Void p) {\n+                    if (!taglet.inType()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n@@ -402,0 +402,2 @@\n+                    return null;\n+                }\n@@ -403,8 +405,6 @@\n-                    @Override\n-                    public Void visitExecutable(ExecutableElement e, Void p) {\n-                        if (utils.isConstructor(e) && !taglet.inConstructor()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n-                        } else if (!taglet.inMethod()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitExecutable(ExecutableElement e, Void p) {\n+                    if (utils.isConstructor(e) && !taglet.inConstructor()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n+                    } else if (!taglet.inMethod()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n@@ -412,0 +412,2 @@\n+                    return null;\n+                }\n@@ -413,6 +415,4 @@\n-                    @Override\n-                    public Void visitVariable(VariableElement e, Void p) {\n-                        if (utils.isField(e) && !taglet.inField()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitVariable(VariableElement e, Void p) {\n+                    if (utils.isField(e) && !taglet.inField()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n@@ -420,0 +420,2 @@\n+                    return null;\n+                }\n@@ -421,6 +423,4 @@\n-                    @Override\n-                    public Void visitUnknown(Element e, Void p) {\n-                        if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n-                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n-                        }\n-                        return null;\n+                @Override\n+                public Void visitUnknown(Element e, Void p) {\n+                    if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n+                        printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n@@ -428,0 +428,2 @@\n+                    return null;\n+                }\n@@ -429,6 +431,5 @@\n-                    @Override\n-                    protected Void defaultAction(Element e, Void p) {\n-                        return null;\n-                    }\n-                }.visit(element);\n-            }\n+                @Override\n+                protected Void defaultAction(Element e, Void p) {\n+                    return null;\n+                }\n+            }.visit(element);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletManager.java","additions":65,"deletions":64,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -1145,2 +1145,3 @@\n-        assert tree instanceof UnknownBlockTagTree\n-                || tree instanceof UnknownInlineTagTree;\n+        var k = tree.getKind();\n+        assert k == DocTree.Kind.UNKNOWN_BLOCK_TAG\n+                || k == DocTree.Kind.UNKNOWN_INLINE_TAG;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-                                return null;\n+                                return Set.of();\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAutoLoadTaglets\/TestAutoLoadTaglets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314448\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestUnknownTags\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestUnknownTags extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestUnknownTags().runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    \/\/ DocLint or not, there should be exactly one diagnostic message about\n+    \/\/ an unknown tag. No doubled, no \"swallowed\" messages, just one.\n+    @Test\n+    public void testExactlyOneMessage(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                \/** @mytag *\/\n+                public class MyClass { }\n+                \"\"\");\n+        \/\/ don't check exit status: we don't care if it's an error or warning\n+\n+        \/\/ DocLint is explicit\n+        int i = 0;\n+        for (var check : new String[]{\":all\", \":none\", \"\"}) {\n+            var outputDir = \"out-DocLint-\" + i++; \/\/ use separate output directories\n+            javadoc(\"-Xdoclint\" + check,\n+                    \"-d\", base.resolve(outputDir).toString(),\n+                    \"--source-path\", src.toString(),\n+                    \"x\");\n+            new OutputChecker(Output.OUT)\n+                    .setExpectFound(true)\n+                    .checkUnique(\"unknown tag\");\n+        }\n+        \/\/ DocLint is default\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"x\");\n+        new OutputChecker(Output.OUT)\n+                .setExpectFound(true)\n+                .checkUnique(\"unknown tag\");\n+    }\n+\n+    \/\/ Disabled simple tags are treated as known tags, but aren't checked\n+    \/\/ for misuse. Additionally, they don't prevent other tags from being\n+    \/\/ checked.\n+    @Test\n+    public void testDisabledSimpleTags(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                \/**\n+                 * @myDisabledTag foo\n+                 * @myEnabledTag bar\n+                 *\/\n+                public class MyClass extends RuntimeException { }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-tag\", \"myDisabledTag:mX:Disabled Tag\", \/\/ may appear in methods; disabled\n+                \"-tag\", \"myEnabledTag:mf:Enabled Tag\", \/\/ may appear in method and fields; enabled\n+                \"x\");\n+        checkOutput(Output.OUT, false, \"unknown tag\");\n+        checkOutput(Output.OUT, false, \"Tag @myDisabledTag cannot be used in class documentation\");\n+        checkOutput(Output.OUT, true, \"Tag @myEnabledTag cannot be used in class documentation\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUknownTags\/TestUnknownTags.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}