{"files":[{"patch":"@@ -551,1 +551,1 @@\n-  case vmIntrinsics::_getModifiers           : {\n+  case vmIntrinsics::_getModifiers: {\n@@ -560,0 +560,3 @@\n+      } else {\n+        assert(t->is_primitive_type(), \"should be a primitive type\");\n+        set_constant(JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC);\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+  case vmIntrinsics::_getModifiers:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1314,0 +1314,29 @@\n+\/\/ Example: Foo.class.getModifiers()\n+void LIRGenerator::do_getModifiers(Intrinsic* x) {\n+  assert(x->number_of_arguments() == 1, \"wrong type\");\n+\n+  LIRItem receiver(x->argument_at(0), this);\n+  receiver.load_item();\n+  LIR_Opr result = rlock_result(x);\n+\n+  CodeEmitInfo* info = NULL;\n+  if (x->needs_null_check()) {\n+    info = state_for(x);\n+  }\n+\n+  LabelObj* L_not_prim = new LabelObj();\n+  LabelObj* L_done = new LabelObj();\n+\n+  LIR_Opr temp = new_register(T_METADATA);\n+  \/\/ Checking if it's a java mirror of primitive type\n+  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), temp, info);\n+  __ cmp(lir_cond_notEqual, temp, LIR_OprFact::metadataConst(0));\n+  __ branch(lir_cond_notEqual, L_not_prim->label());\n+  __ move(LIR_OprFact::intConst(JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), result);\n+  __ branch(lir_cond_always, L_done->label());\n+\n+  __ branch_destination(L_not_prim->label());\n+  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), temp, NULL);\n+  __ move(new LIR_Address(temp, in_bytes(Klass::modifier_flags_offset()), T_INT), result);\n+  __ branch_destination(L_done->label());\n+}\n@@ -3143,0 +3172,1 @@\n+  case vmIntrinsics::_getModifiers:   do_getModifiers(x);  break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -254,0 +254,1 @@\n+  void do_getModifiers(Intrinsic* x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    static void test() {\n+    static void test(Class poison) {\n@@ -85,0 +85,2 @@\n+        Asserts.assertEQ(Object[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n+        Asserts.assertEQ(CanonicalizeGetModifiers[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n@@ -91,0 +93,6 @@\n+        try {\n+            \/\/ null_check\n+            poison.getModifiers();\n+        } catch(NullPointerException npe) {\n+            \/\/ got it!\n+        }\n@@ -94,2 +102,2 @@\n-        for (int i = 0; i < 1_0000; i++) {\n-            test();\n+        for (int i = 0; i < 10_000; i++) {\n+            test(i == 9999 ? null : CanonicalizeGetModifiers.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/CanonicalizeGetModifiers.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}