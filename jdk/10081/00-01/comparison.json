{"files":[{"patch":"@@ -459,33 +459,7 @@\n-            if (nl >= 0) {\n-                \/\/ break up newlines\n-                if (nl == 0) {\n-                    @SuppressWarnings(\"serial\") \/\/ anonymous class\n-                    JPanel breakPanel = new JPanel() {\n-                        public Dimension getPreferredSize() {\n-                            Font f = getFont();\n-\n-                            if (f != null) {\n-                                return new Dimension(1, f.getSize() + 2);\n-                            }\n-                            return new Dimension(0, 0);\n-                        }\n-                    };\n-                    breakPanel.setName(\"OptionPane.break\");\n-                    addMessageComponents(container, cons, breakPanel, maxll,\n-                                         true);\n-                } else {\n-                    addMessageComponents(container, cons, s.substring(0, nl),\n-                                      maxll, false);\n-                }\n-                \/\/ Prevent recursion of more than\n-                \/\/ 200 successive newlines in a message\n-                \/\/ and indicate message is truncated via ellipsis\n-                if (recursionCount++ > 200) {\n-                    recursionCount = 0;\n-                    addMessageComponents(container, cons, new String(\"...\"),\n-                                         maxll,false);\n-                    return;\n-                }\n-                String str = s.substring(nl + nll);\n-                if (str.contains(\"<\/html>\")) {\n-                    str = str.replace(\"<\/html>\", \"\");\n+            if (s.contains(\"<html>\")) {\n+                int index1 = s.indexOf(\"<html>\");\n+                int index2 = s.indexOf(\"<\/html>\");\n+                String str = \"\";\n+                if (index2 >= 0) {\n+                    str = s.substring(index2 + \"<\/html>\".length());\n+                    s = s.substring(index1, index2);\n@@ -493,9 +467,0 @@\n-                addMessageComponents(container, cons, str, maxll,\n-                            false);\n-            } else if (len > maxll) {\n-                Container c = Box.createVerticalBox();\n-                c.setName(\"OptionPane.verticalBox\");\n-                burstStringInto(c, s, maxll);\n-                addMessageComponents(container, cons, c, maxll, true );\n-\n-            } else {\n@@ -503,1 +468,1 @@\n-                label = new JLabel( s, JLabel.LEADING );\n+                label = new JLabel(s, JLabel.LEADING);\n@@ -507,0 +472,50 @@\n+                if (!str.isEmpty()) {\n+                    addMessageComponents(container, cons, str, maxll, false);\n+                }\n+            } else {\n+                if (nl >= 0) {\n+                    \/\/ break up newlines\n+                    if (nl == 0) {\n+                        @SuppressWarnings(\"serial\") \/\/ anonymous class\n+                                JPanel breakPanel = new JPanel() {\n+                            public Dimension getPreferredSize() {\n+                                Font f = getFont();\n+\n+                                if (f != null) {\n+                                    return new Dimension(1, f.getSize() + 2);\n+                                }\n+                                return new Dimension(0, 0);\n+                            }\n+                        };\n+                        breakPanel.setName(\"OptionPane.break\");\n+                        addMessageComponents(container, cons, breakPanel, maxll,\n+                                true);\n+                    } else {\n+                        addMessageComponents(container, cons, s.substring(0, nl),\n+                                maxll, false);\n+                    }\n+                    \/\/ Prevent recursion of more than\n+                    \/\/ 200 successive newlines in a message\n+                    \/\/ and indicate message is truncated via ellipsis\n+                    if (recursionCount++ > 200) {\n+                        recursionCount = 0;\n+                        addMessageComponents(container, cons, new String(\"...\"),\n+                                maxll, false);\n+                        return;\n+                    }\n+                    addMessageComponents(container, cons, s.substring(nl + nll), maxll,\n+                            false);\n+\n+                } else if (len > maxll) {\n+                    Container c = Box.createVerticalBox();\n+                    c.setName(\"OptionPane.verticalBox\");\n+                    burstStringInto(c, s, maxll);\n+                    addMessageComponents(container, cons, c, maxll, true);\n+\n+                } else {\n+                    JLabel label;\n+                    label = new JLabel(s, JLabel.LEADING);\n+                    label.setName(\"OptionPane.label\");\n+                    configureMessageLabel(label);\n+                    addMessageComponents(container, cons, label, maxll, true);\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicOptionPaneUI.java","additions":58,"deletions":43,"binary":false,"changes":101,"status":"modified"}]}