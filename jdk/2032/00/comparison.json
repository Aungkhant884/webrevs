{"files":[{"patch":"@@ -74,1 +74,1 @@\n-#if !defined(IA64)\n+#if !defined(IA64) && !defined(S390)\n@@ -329,0 +329,15 @@\n+      \/\/ If a frame has no associated codeBlob, there is no reason for\n+      \/\/ frame::pc() to be non-NULL. If it is, nonetheless, there is\n+      \/\/ nothing we can do except returning false. Here is why:\n+      \/\/  - in the first loop iteration, candidate == *fr, thus candidate._cb == NULL\n+      \/\/  - in frame::safe_for_sender(), all except some range checks are\n+      \/\/    only performed for _cb != NULL. As a consequence, a frame is\n+      \/\/    considered \"safe_for_sender\" if it has no codeBlob.\n+      \/\/  - frame::sender() will then ask CodeCache::find_blob() to locate\n+      \/\/    the codeBlob associated with the pc() stored in the frame.\n+      \/\/  - If find_blob() succeeds, it will most likely have found an\n+      \/\/    invalid (e.g. zombie) entry, triggering the guarantee in find_blob().\n+      \/\/  - If, for any reason, that guarantee would not fire, the assertion\n+      \/\/      assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n+      \/\/    in frame::sender() would kill a debug vm.\n+      if (candidate.pc() != NULL) return false;\n@@ -433,1 +448,8 @@\n-  find_initial_Java_frame(thd, &top_frame, &initial_Java_frame, &method, &bci);\n+  if (!find_initial_Java_frame(thd, &top_frame, &initial_Java_frame, &method, &bci)) {\n+    \/\/ Don't overwrite error state set by other code.\n+    \/\/ Just ensure a value < 0 is set.\n+    if (trace->num_frames >= 0) {\n+      trace->num_frames = ticks_unknown_state;\n+    }\n+    return;\n+  }\n@@ -643,1 +665,1 @@\n-#endif \/\/ !IA64\n+#endif \/\/ !IA64 && !S390\n@@ -646,1 +668,1 @@\n-#if !defined(_WINDOWS) && !defined(IA64)\n+#if !defined(_WINDOWS) && !defined(IA64) && !defined(S390)\n@@ -652,1 +674,1 @@\n-#endif \/\/ !_WINDOWS && !IA64\n+#endif \/\/ !_WINDOWS && !IA64 && !S390\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"}]}