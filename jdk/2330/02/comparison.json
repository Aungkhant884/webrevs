{"files":[{"patch":"@@ -1189,3 +1189,0 @@\n-    int profileSize;\n-    byte[] profileData;\n-\n@@ -1193,12 +1190,1 @@\n-\n-        PCMM mdl = CMSManager.getModule();\n-\n-        \/* get the number of bytes needed for this profile *\/\n-        profileSize = mdl.getProfileSize(cmmProfile);\n-\n-        profileData = new byte [profileSize];\n-\n-        \/* get the data for the profile *\/\n-        mdl.getProfileData(cmmProfile, profileData);\n-\n-        return profileData;\n+        return CMSManager.getModule().getProfileData(cmmProfile);\n@@ -1228,4 +1214,1 @@\n-    static byte[] getData(Profile p, int tagSignature) {\n-    int tagSize;\n-    byte[] tagData;\n-\n+    private static byte[] getData(Profile p, int tagSignature) {\n@@ -1233,11 +1216,3 @@\n-            PCMM mdl = CMSManager.getModule();\n-\n-            \/* get the number of bytes needed for this tag *\/\n-            tagSize = mdl.getTagSize(p, tagSignature);\n-\n-            tagData = new byte[tagSize]; \/* get an array for the tag *\/\n-\n-            \/* get the tag's data *\/\n-            mdl.getTagData(p, tagSignature, tagData);\n-        } catch(CMMException c) {\n-            tagData = null;\n+            return CMSManager.getModule().getTagData(p, tagSignature);\n+        } catch (CMMException c) {\n+            return null;\n@@ -1245,2 +1220,0 @@\n-\n-        return tagData;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":5,"deletions":32,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,8 +103,1 @@\n-        public int getProfileSize(Profile p) {\n-            System.err.print(cName + \".getProfileSize(ID=\" + p + \")\");\n-            int size = tcmm.getProfileSize(p);\n-            System.err.println(\"=\" + size);\n-            return size;\n-        }\n-\n-        public void getProfileData(Profile p, byte[] data) {\n+        public byte[] getProfileData(Profile p) {\n@@ -112,0 +105,1 @@\n+            byte[] data = tcmm.getProfileData(p);\n@@ -113,9 +107,1 @@\n-            tcmm.getProfileData(p, data);\n-        }\n-\n-        public int getTagSize(Profile p, int tagSignature) {\n-            System.err.printf(cName + \".getTagSize(ID=%x, TagSig=%s)\",\n-                              p, signatureToString(tagSignature));\n-            int size = tcmm.getTagSize(p, tagSignature);\n-            System.err.println(\"=\" + size);\n-            return size;\n+            return data;\n@@ -124,2 +110,1 @@\n-        public void getTagData(Profile p, int tagSignature,\n-                               byte[] data) {\n+        public byte[] getTagData(Profile p, int tagSignature) {\n@@ -128,0 +113,1 @@\n+            byte[] data = tcmm.getTagData(p, tagSignature);\n@@ -129,1 +115,1 @@\n-            tcmm.getTagData(p, tagSignature, data);\n+            return data;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/CMSManager.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,2 @@\n-    public int  getProfileSize(Profile p);\n-    public void getProfileData(Profile p, byte[] data);\n-    public void getTagData(Profile p, int tagSignature, byte[] data);\n-    public int getTagSize(Profile p, int tagSignature);\n+    public byte[] getProfileData(Profile p);\n+    public byte[] getTagData(Profile p, int tagSignature);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/PCMM.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,4 @@\n-    public int getProfileSize(final Profile p) {\n-        synchronized (p) {\n-            return getProfileSizeNative(getLcmsProfile(p).getLcmsPtr());\n+    public byte[] getProfileData(final Profile p) {\n+        LCMSProfile lcmsProfile = getLcmsProfile(p);\n+        synchronized (lcmsProfile) {\n+            return getProfileDataNative(lcmsProfile.getLcmsPtr());\n@@ -67,20 +68,1 @@\n-    private native int getProfileSizeNative(long ptr);\n-\n-    @Override\n-    public void getProfileData(final Profile p, byte[] data) {\n-        synchronized (p) {\n-            getProfileDataNative(getLcmsProfile(p).getLcmsPtr(), data);\n-        }\n-    }\n-\n-    private native void getProfileDataNative(long ptr, byte[] data);\n-\n-    @Override\n-    public int getTagSize(Profile p, int tagSignature) {\n-        final LCMSProfile profile = getLcmsProfile(p);\n-\n-        synchronized (profile) {\n-            TagData t = profile.getTag(tagSignature);\n-            return t == null ? 0 : t.getSize();\n-        }\n-    }\n+    private native byte[] getProfileDataNative(long ptr);\n@@ -91,9 +73,5 @@\n-    public void getTagData(Profile p, int tagSignature, byte[] data)\n-    {\n-        final LCMSProfile profile = getLcmsProfile(p);\n-\n-        synchronized (profile) {\n-            TagData t = profile.getTag(tagSignature);\n-            if (t != null) {\n-                t.copyDataTo(data);\n-            }\n+    public byte[] getTagData(Profile p, int tagSignature) {\n+        final LCMSProfile lcmsProfile = getLcmsProfile(p);\n+        synchronized (lcmsProfile) {\n+            TagData t = lcmsProfile.getTag(tagSignature);\n+            return t != null ? t.getData() : null;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMS.java","additions":11,"deletions":33,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.awt.color.CMMException;\n-import java.util.Arrays;\n@@ -31,0 +29,1 @@\n+\n@@ -58,3 +57,3 @@\n-    static class TagCache  {\n-        final LCMSProfile profile;\n-        private HashMap<Integer, TagData> tags;\n+    private static final class TagCache  {\n+        private final LCMSProfile profile;\n+        private final HashMap<Integer, TagData> tags = new HashMap<>();\n@@ -62,1 +61,1 @@\n-        TagCache(LCMSProfile p) {\n+        private TagCache(LCMSProfile p) {\n@@ -64,1 +63,0 @@\n-            tags = new HashMap<>();\n@@ -67,1 +65,1 @@\n-        TagData getTag(int sig) {\n+        private TagData getTag(int sig) {\n@@ -72,1 +70,1 @@\n-                    t = new TagData(sig, tagData);\n+                    t = new TagData(tagData);\n@@ -79,1 +77,1 @@\n-        void clear() {\n+        private void clear() {\n@@ -84,3 +82,2 @@\n-    static class TagData {\n-        private int signature;\n-        private byte[] data;\n+    static final class TagData {\n+        private final byte[] data;\n@@ -88,2 +85,1 @@\n-        TagData(int sig, byte[] data) {\n-            this.signature = sig;\n+        TagData(byte[] data) {\n@@ -93,4 +89,0 @@\n-        int getSize() {\n-            return data.length;\n-        }\n-\n@@ -98,9 +90,1 @@\n-            return Arrays.copyOf(data, data.length);\n-        }\n-\n-        void copyDataTo(byte[] dst) {\n-            System.arraycopy(data, 0, dst, 0, data.length);\n-        }\n-\n-        int getSignature() {\n-            return signature;\n+            return data.clone();\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSProfile.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -312,20 +312,0 @@\n-\/*\n- * Class:     sun_java2d_cmm_lcms_LCMS\n- * Method:    getProfileSizeNative\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_sun_java2d_cmm_lcms_LCMS_getProfileSizeNative\n-  (JNIEnv *env, jobject obj, jlong id)\n-{\n-    lcmsProfile_p sProf = (lcmsProfile_p)jlong_to_ptr(id);\n-    cmsUInt32Number pfSize = 0;\n-\n-    if (cmsSaveProfileToMem(sProf->pf, NULL, &pfSize) && ((jint)pfSize > 0)) {\n-        return (jint)pfSize;\n-    } else {\n-      JNU_ThrowByName(env, \"java\/awt\/color\/CMMException\",\n-                      \"Can not access specified profile.\");\n-        return -1;\n-    }\n-}\n-\n@@ -337,2 +317,2 @@\n-JNIEXPORT void JNICALL Java_sun_java2d_cmm_lcms_LCMS_getProfileDataNative\n-  (JNIEnv *env, jobject obj, jlong id, jbyteArray data)\n+JNIEXPORT jbyteArray JNICALL Java_sun_java2d_cmm_lcms_LCMS_getProfileDataNative\n+  (JNIEnv *env, jobject obj, jlong id)\n@@ -341,2 +321,0 @@\n-    jint size;\n-    jbyte* dataArray;\n@@ -344,1 +322,0 @@\n-    cmsBool status;\n@@ -350,1 +327,1 @@\n-        return;\n+        return NULL;\n@@ -353,6 +330,4 @@\n-    \/\/ verify java buffer capacity\n-    size = (*env)->GetArrayLength(env, data);\n-    if (0 >= size || pfSize > (cmsUInt32Number)size) {\n-        JNU_ThrowByName(env, \"java\/awt\/color\/CMMException\",\n-                        \"Insufficient buffer capacity.\");\n-        return;\n+    jbyteArray data = (*env)->NewByteArray(env, pfSize);\n+    if (data == NULL) {\n+        \/\/ An exception should have already been thrown.\n+        return NULL;\n@@ -361,1 +336,1 @@\n-    dataArray = (*env)->GetByteArrayElements (env, data, 0);\n+    jbyte* dataArray = (*env)->GetByteArrayElements(env, data, 0);\n@@ -364,1 +339,1 @@\n-        return;\n+        return NULL;\n@@ -367,1 +342,1 @@\n-    status = cmsSaveProfileToMem(sProf->pf, dataArray, &pfSize);\n+    cmsBool status = cmsSaveProfileToMem(sProf->pf, dataArray, &pfSize);\n@@ -369,1 +344,1 @@\n-    (*env)->ReleaseByteArrayElements (env, data, dataArray, 0);\n+    (*env)->ReleaseByteArrayElements(env, data, dataArray, 0);\n@@ -374,1 +349,1 @@\n-        return;\n+        return NULL;\n@@ -376,0 +351,1 @@\n+    return data;\n","filename":"src\/java.desktop\/share\/native\/liblcms\/LCMS.c","additions":13,"deletions":37,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * @test\n+ * @bug 8260695\n+ * @summary Verifies MT safety of ICC_Profile#getData\n+ *\/\n+public final class MTGetData {\n+\n+    static volatile long endtime;\n+    static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        ICC_Profile[] profiles = {\n+                ICC_Profile.getInstance(ColorSpace.CS_sRGB),\n+                ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB),\n+                ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ),\n+                ICC_Profile.getInstance(ColorSpace.CS_PYCC),\n+                ICC_Profile.getInstance(ColorSpace.CS_GRAY)\n+        };\n+\n+        List<Integer> tags = new ArrayList<>();\n+        for (Field field : ICC_Profile.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers())\n+                    && Modifier.isPublic(field.getModifiers())\n+                    && Modifier.isFinal(field.getModifiers())\n+                    && field.getType() == int.class) {\n+                tags.add(field.getInt(null));\n+            }\n+        }\n+\n+        List<Thread> tasks = new ArrayList<>();\n+        for (int tag : tags) {\n+            for (ICC_Profile profile1 : profiles) {\n+                for (ICC_Profile profile2 : profiles) {\n+                    byte[] d1 = profile1.getData(tag);\n+                    byte[] d2 = profile2.getData(tag);\n+                    if (d1 == null || d2 == null || d1.length == d2.length) {\n+                        continue;\n+                    }\n+                    tasks.add(new Thread(() -> {\n+                        try {\n+                            test(profile1.getData(), d1, d2, tag);\n+                        } catch (Throwable throwable) {\n+                            throwable.printStackTrace();\n+                            failed = true;\n+                        }\n+                    }));\n+                }\n+            }\n+        }\n+\n+        \/\/ Will run the test no more than 15 seconds\n+        endtime = System.nanoTime() + TimeUnit.SECONDS.toNanos(15);\n+        for (Thread t : tasks) {\n+            t.start();\n+        }\n+        for (Thread t : tasks) {\n+            t.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private static void test(byte[] all, byte[] data1, byte[] data2, int tag)\n+            throws Exception {\n+        ICC_Profile icc = ICC_Profile.getInstance(all);\n+\n+        Thread swap = new Thread(() -> {\n+            try {\n+                while (!isComplete()) {\n+                    icc.setData(tag, data1);\n+                    icc.setData(tag, data2);\n+                }\n+            } catch (IllegalArgumentException ignored) {\n+            } catch (Throwable throwable) {\n+                throwable.printStackTrace();\n+                failed = true;\n+            }\n+        });\n+\n+        Thread fetch = new Thread(() -> {\n+            try {\n+                while (!isComplete()) {\n+                    icc.getData(tag);\n+                    icc.getData();\n+                }\n+            } catch (Throwable throwable) {\n+                throwable.printStackTrace();\n+                failed = true;\n+            }\n+        });\n+\n+        swap.start();\n+        fetch.start();\n+        swap.join();\n+        fetch.join();\n+    }\n+\n+    private static boolean isComplete() {\n+        return endtime - System.nanoTime() < 0 || failed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/MTGetData.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}