{"files":[{"patch":"@@ -153,1 +153,7 @@\n-    return (is_integral_type(bt) ? Op_RotateLeftV : 0);\n+    switch (bt) {\n+    case T_INT:\n+    case T_LONG: return Op_RotateLeftV;\n+    default:     return 0; \/\/ RotateLeftV for byte, short values produces incorrect Java result.\n+                           \/\/ Because java code should convert a byte, short value into int value,\n+                           \/\/ and then do RotateI.\n+    }\n@@ -155,1 +161,7 @@\n-    return (is_integral_type(bt) ? Op_RotateRightV : 0);\n+    switch (bt) {\n+    case T_INT:\n+    case T_LONG: return Op_RotateRightV;\n+    default:     return 0; \/\/ RotateRightV for byte, short values produces incorrect Java result.\n+                           \/\/ Because java code should convert a byte, short value into int value,\n+                           \/\/ and then do RotateI.\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Loongson Technology. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8261022\n+ * @summary Test vectorization of rotate byte\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestRotateByteVector::testRotate* -Xbatch TestRotateByteVector\n+ *\/\n+\n+public class TestRotateByteVector {\n+    private static final int ARRLEN = 512;\n+    private static final int ITERS = 50000;\n+    private static byte[] arr = new byte[ARRLEN];\n+    private static byte[] rolTest = new byte[ARRLEN];\n+    private static byte[] rorTest = new byte[ARRLEN];\n+    private static byte[] res = new byte[ARRLEN];\n+\n+    public static void main(String[] args) {\n+        \/\/ init\n+        for (int i = 0; i < ARRLEN; i++) {\n+            arr[i] = (byte) i;\n+        }\n+\n+        System.out.println(\"warmup\");\n+        warmup();\n+\n+        System.out.println(\"Testing rotate byte...\");\n+        test();\n+\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    static void warmup() {\n+        for (int i = 0; i < ITERS; i++) {\n+            testRotateLeft(arr, rolTest, i);\n+            testRotateRight(arr, rorTest, i);\n+        }\n+    }\n+\n+    static void test() {\n+        for (int shift = 0; shift <= 512; shift++) {\n+            testRotateLeft(arr, rolTest, shift);\n+            rotateLeftRes(arr, res, shift);\n+            verify(rolTest, res, shift, \"rol\");\n+\n+            testRotateRight(arr, rorTest, shift);\n+            rotateRightRes(arr, res, shift);\n+            verify(rorTest, res, shift, \"ror\");\n+        }\n+    }\n+\n+    static void testRotateLeft(byte[] arr, byte[] test, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void testRotateRight(byte[] arr, byte[] test, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+\n+    static void rotateLeftRes(byte[] arr, byte[] res, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            res[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void rotateRightRes(byte[] arr, byte[] res, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            res[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+\n+    static void verify(byte[] test, byte[] res, int shift, String op) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            if (test[i] != res[i]) {\n+                throw new RuntimeException(op + \" \" + shift + \" error: [\" + arr[i] + \"] expect \" + res[i] + \" but result is \" + test[i]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateByteVector.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Loongson Technology. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8261022\n+ * @summary Test vectorization of rotate short\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestRotateShortVector::testRotate* -Xbatch TestRotateShortVector\n+ *\/\n+\n+public class TestRotateShortVector {\n+    private static final int ARRLEN = 512;\n+    private static final int ITERS = 50000;\n+    private static short[] arr = new short[ARRLEN];\n+    private static short[] rolTest = new short[ARRLEN];\n+    private static short[] rorTest = new short[ARRLEN];\n+    private static short[] res = new short[ARRLEN];\n+\n+    public static void main(String[] args) {\n+        \/\/ init\n+        for (int i = 0; i < ARRLEN; i++) {\n+            arr[i] = (short) i;\n+        }\n+\n+        System.out.println(\"warmup\");\n+        warmup();\n+\n+        System.out.println(\"Testing rotate short...\");\n+        test();\n+\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    static void warmup() {\n+        for (int i = 0; i < ITERS; i++) {\n+            testRotateLeft(arr, rolTest, i);\n+            testRotateRight(arr, rorTest, i);\n+        }\n+    }\n+\n+    static void test() {\n+        for (int shift = 0; shift <= 512; shift++) {\n+            testRotateLeft(arr, rolTest, shift);\n+            rotateLeftRes(arr, res, shift);\n+            verify(rolTest, res, shift, \"rol\");\n+\n+            testRotateRight(arr, rorTest, shift);\n+            rotateRightRes(arr, res, shift);\n+            verify(rorTest, res, shift, \"ror\");\n+        }\n+    }\n+\n+    static void testRotateLeft(short[] arr, short[] test, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void testRotateRight(short[] arr, short[] test, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+\n+    static void rotateLeftRes(short[] arr, short[] res, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            res[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void rotateRightRes(short[] arr, short[] res, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            res[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+\n+    static void verify(short[] test, short[] res, int shift, String op) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            if (test[i] != res[i]) {\n+                throw new RuntimeException(op + \" \" + shift + \" error: [\" + arr[i] + \"] expect \" + res[i] + \" but result is \" + test[i]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateShortVector.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}