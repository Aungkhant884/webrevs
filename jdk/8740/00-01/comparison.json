{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8261022\n+ * @bug 8286847\n@@ -29,1 +29,2 @@\n- * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestRotateByteVector::testRotate* -Xbatch TestRotateByteVector\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestRotateByteVector::testRotate* -Xbatch TestRotateByteVector\n@@ -32,0 +33,3 @@\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n@@ -33,0 +37,1 @@\n+    private static final Random random = Utils.getRandomInstance();\n@@ -34,1 +39,1 @@\n-    private static final int ITERS = 50000;\n+    private static final int ITERS = 11000;\n@@ -36,3 +41,3 @@\n-    private static byte[] rolTest = new byte[ARRLEN];\n-    private static byte[] rorTest = new byte[ARRLEN];\n-    private static byte[] res = new byte[ARRLEN];\n+    private static byte[] rol = new byte[ARRLEN];\n+    private static byte[] ror = new byte[ARRLEN];\n+    private static byte res = 0;\n@@ -41,5 +46,0 @@\n-        \/\/ init\n-        for (int i = 0; i < ARRLEN; i++) {\n-            arr[i] = (byte) i;\n-        }\n-\n@@ -50,1 +50,2 @@\n-        test();\n+        runRotateLeftTest();\n+        runRotateRightTest();\n@@ -56,0 +57,1 @@\n+        random.nextBytes(arr);\n@@ -57,2 +59,2 @@\n-            testRotateLeft(arr, rolTest, i);\n-            testRotateRight(arr, rorTest, i);\n+            testRotateLeft(rol, arr, i);\n+            testRotateRight(ror, arr, i);\n@@ -62,21 +64,10 @@\n-    static void test() {\n-        for (int shift = 0; shift <= 512; shift++) {\n-            testRotateLeft(arr, rolTest, shift);\n-            rotateLeftRes(arr, res, shift);\n-            verify(rolTest, res, shift, \"rol\");\n-\n-            testRotateRight(arr, rorTest, shift);\n-            rotateRightRes(arr, res, shift);\n-            verify(rorTest, res, shift, \"ror\");\n-        }\n-    }\n-\n-    static void testRotateLeft(byte[] arr, byte[] test, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            test[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n-        }\n-    }\n-\n-    static void testRotateRight(byte[] arr, byte[] test, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            test[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+    static void runRotateLeftTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            random.nextBytes(arr);\n+            testRotateLeft(rol, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+                if (rol[i] != res) {\n+                    throw new RuntimeException(\"rol value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + rol[i]);\n+                }\n+            }\n@@ -86,3 +77,10 @@\n-    static void rotateLeftRes(byte[] arr, byte[] res, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            res[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+    static void runRotateRightTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            random.nextBytes(arr);\n+            testRotateRight(ror, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+                if (ror[i] != res) {\n+                    throw new RuntimeException(\"ror value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + ror[i]);\n+                }\n+            }\n@@ -92,1 +90,1 @@\n-    static void rotateRightRes(byte[] arr, byte[] res, int shift) {\n+    static void testRotateLeft(byte[] test, byte[] arr, int shift) {\n@@ -94,1 +92,1 @@\n-            res[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+            test[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n@@ -98,1 +96,1 @@\n-    static void verify(byte[] test, byte[] res, int shift, String op) {\n+    static void testRotateRight(byte[] test, byte[] arr, int shift) {\n@@ -100,3 +98,1 @@\n-            if (test[i] != res[i]) {\n-                throw new RuntimeException(op + \" \" + shift + \" error: [\" + arr[i] + \"] expect \" + res[i] + \" but result is \" + test[i]);\n-            }\n+            test[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateByteVector.java","additions":40,"deletions":44,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8261022\n+ * @bug 8286847\n@@ -29,1 +29,2 @@\n- * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestRotateShortVector::testRotate* -Xbatch TestRotateShortVector\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestRotateShortVector::testRotate* -Xbatch TestRotateShortVector\n@@ -32,0 +33,3 @@\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n@@ -33,0 +37,1 @@\n+    private static final Random random = Utils.getRandomInstance();\n@@ -34,1 +39,1 @@\n-    private static final int ITERS = 50000;\n+    private static final int ITERS = 11000;\n@@ -36,3 +41,3 @@\n-    private static short[] rolTest = new short[ARRLEN];\n-    private static short[] rorTest = new short[ARRLEN];\n-    private static short[] res = new short[ARRLEN];\n+    private static short[] rol = new short[ARRLEN];\n+    private static short[] ror = new short[ARRLEN];\n+    private static short res = 0;\n@@ -41,5 +46,0 @@\n-        \/\/ init\n-        for (int i = 0; i < ARRLEN; i++) {\n-            arr[i] = (short) i;\n-        }\n-\n@@ -50,1 +50,2 @@\n-        test();\n+        runRotateLeftTest();\n+        runRotateRightTest();\n@@ -55,16 +56,3 @@\n-    static void warmup() {\n-        for (int i = 0; i < ITERS; i++) {\n-            testRotateLeft(arr, rolTest, i);\n-            testRotateRight(arr, rorTest, i);\n-        }\n-    }\n-\n-    static void test() {\n-        for (int shift = 0; shift <= 512; shift++) {\n-            testRotateLeft(arr, rolTest, shift);\n-            rotateLeftRes(arr, res, shift);\n-            verify(rolTest, res, shift, \"rol\");\n-\n-            testRotateRight(arr, rorTest, shift);\n-            rotateRightRes(arr, res, shift);\n-            verify(rorTest, res, shift, \"ror\");\n+    static void randomShorts() {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            arr[i] = (short) random.nextInt();\n@@ -74,3 +62,5 @@\n-    static void testRotateLeft(short[] arr, short[] test, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            test[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+    static void warmup() {\n+        randomShorts();\n+        for (int i = 0; i < ITERS; i++) {\n+            testRotateLeft(rol, arr, i);\n+            testRotateRight(ror, arr, i);\n@@ -80,3 +70,10 @@\n-    static void testRotateRight(short[] arr, short[] test, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            test[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+    static void runRotateLeftTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            randomShorts();\n+            testRotateLeft(rol, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+                if (rol[i] != res) {\n+                    throw new RuntimeException(\"rol value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + rol[i]);\n+                }\n+            }\n@@ -86,3 +83,10 @@\n-    static void rotateLeftRes(short[] arr, short[] res, int shift) {\n-        for (int i = 0; i < ARRLEN; i++) {\n-            res[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+    static void runRotateRightTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            randomShorts();\n+            testRotateRight(ror, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+                if (ror[i] != res) {\n+                    throw new RuntimeException(\"ror value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + ror[i]);\n+                }\n+            }\n@@ -92,1 +96,1 @@\n-    static void rotateRightRes(short[] arr, short[] res, int shift) {\n+    static void testRotateLeft(short[] test, short[] arr, int shift) {\n@@ -94,1 +98,1 @@\n-            res[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+            test[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n@@ -98,1 +102,1 @@\n-    static void verify(short[] test, short[] res, int shift, String op) {\n+    static void testRotateRight(short[] test, short[] arr, int shift) {\n@@ -100,3 +104,1 @@\n-            if (test[i] != res[i]) {\n-                throw new RuntimeException(op + \" \" + shift + \" error: [\" + arr[i] + \"] expect \" + res[i] + \" but result is \" + test[i]);\n-            }\n+            test[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateShortVector.java","additions":45,"deletions":43,"binary":false,"changes":88,"status":"modified"}]}