{"files":[{"patch":"@@ -153,1 +153,7 @@\n-    return (is_integral_type(bt) ? Op_RotateLeftV : 0);\n+    switch (bt) {\n+    case T_INT:\n+    case T_LONG: return Op_RotateLeftV;\n+    default:     return 0; \/\/ RotateLeftV for byte, short values produces incorrect Java result.\n+                           \/\/ Because java code should convert a byte, short value into int value,\n+                           \/\/ and then do RotateI.\n+    }\n@@ -155,1 +161,7 @@\n-    return (is_integral_type(bt) ? Op_RotateRightV : 0);\n+    switch (bt) {\n+    case T_INT:\n+    case T_LONG: return Op_RotateRightV;\n+    default:     return 0; \/\/ RotateRightV for byte, short values produces incorrect Java result.\n+                           \/\/ Because java code should convert a byte, short value into int value,\n+                           \/\/ and then do RotateI.\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Loongson Technology. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8286847\n+ * @summary Test vectorization of rotate byte\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestRotateByteVector::testRotate* -Xbatch TestRotateByteVector\n+ *\/\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class TestRotateByteVector {\n+    private static final Random random = Utils.getRandomInstance();\n+    private static final int ARRLEN = 512;\n+    private static final int ITERS = 11000;\n+    private static byte[] arr = new byte[ARRLEN];\n+    private static byte[] rol = new byte[ARRLEN];\n+    private static byte[] ror = new byte[ARRLEN];\n+    private static byte res = 0;\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"warmup\");\n+        warmup();\n+\n+        System.out.println(\"Testing rotate byte...\");\n+        runRotateLeftTest();\n+        runRotateRightTest();\n+\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    static void warmup() {\n+        random.nextBytes(arr);\n+        for (int i = 0; i < ITERS; i++) {\n+            testRotateLeft(rol, arr, i);\n+            testRotateRight(ror, arr, i);\n+        }\n+    }\n+\n+    static void runRotateLeftTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            random.nextBytes(arr);\n+            testRotateLeft(rol, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+                if (rol[i] != res) {\n+                    throw new RuntimeException(\"rol value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + rol[i]);\n+                }\n+            }\n+        }\n+    }\n+\n+    static void runRotateRightTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            random.nextBytes(arr);\n+            testRotateRight(ror, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+                if (ror[i] != res) {\n+                    throw new RuntimeException(\"ror value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + ror[i]);\n+                }\n+            }\n+        }\n+    }\n+\n+    static void testRotateLeft(byte[] test, byte[] arr, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (byte) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void testRotateRight(byte[] test, byte[] arr, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (byte) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateByteVector.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Loongson Technology. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8286847\n+ * @summary Test vectorization of rotate short\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestRotateShortVector::testRotate* -Xbatch TestRotateShortVector\n+ *\/\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class TestRotateShortVector {\n+    private static final Random random = Utils.getRandomInstance();\n+    private static final int ARRLEN = 512;\n+    private static final int ITERS = 11000;\n+    private static short[] arr = new short[ARRLEN];\n+    private static short[] rol = new short[ARRLEN];\n+    private static short[] ror = new short[ARRLEN];\n+    private static short res = 0;\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"warmup\");\n+        warmup();\n+\n+        System.out.println(\"Testing rotate short...\");\n+        runRotateLeftTest();\n+        runRotateRightTest();\n+\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    static void randomShorts() {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            arr[i] = (short) random.nextInt();\n+        }\n+    }\n+\n+    static void warmup() {\n+        randomShorts();\n+        for (int i = 0; i < ITERS; i++) {\n+            testRotateLeft(rol, arr, i);\n+            testRotateRight(ror, arr, i);\n+        }\n+    }\n+\n+    static void runRotateLeftTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            randomShorts();\n+            testRotateLeft(rol, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+                if (rol[i] != res) {\n+                    throw new RuntimeException(\"rol value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + rol[i]);\n+                }\n+            }\n+        }\n+    }\n+\n+    static void runRotateRightTest() {\n+        for (int shift = 0; shift < 64; shift++) {\n+            randomShorts();\n+            testRotateRight(ror, arr, shift);\n+            for (int i = 0; i < ARRLEN; i++) {\n+                res = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+                if (ror[i] != res) {\n+                    throw new RuntimeException(\"ror value = \" + arr[i] + \", shift = \" + shift + \", error: \" + \"expect \" + res + \" but result is \" + ror[i]);\n+                }\n+            }\n+        }\n+    }\n+\n+    static void testRotateLeft(short[] test, short[] arr, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (short) ((arr[i] << shift) | (arr[i] >>> -shift));\n+        }\n+    }\n+\n+    static void testRotateRight(short[] test, short[] arr, int shift) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            test[i] = (short) ((arr[i] >>> shift) | (arr[i] << -shift));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRotateShortVector.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}