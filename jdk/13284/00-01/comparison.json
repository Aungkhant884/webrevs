{"files":[{"patch":"@@ -1053,1 +1053,0 @@\n-  \/\/ open and closed archive regions\n@@ -1075,1 +1074,5 @@\n-        \/\/ We have reached the end of the region\n+        \/\/ We have reached the end of the region, but have some unused space\n+        \/\/ at the end.\n+        log_info(cds, map)(PTR_FORMAT \": @@ Unused heap space \" SIZE_FORMAT \" bytes\",\n+                           p2i(to_requested(start)), size_t(end - start));\n+        log_data(start, end, to_requested(start), \/*is_heap=*\/true);\n@@ -1082,5 +1085,0 @@\n-    if (start < end) {\n-      log_info(cds, map)(PTR_FORMAT \": @@ Unused heap space \" SIZE_FORMAT \" bytes\",\n-                         p2i(to_requested(start)), size_t(end - start));\n-      log_data(start, end, to_requested(start), \/*is_heap=*\/true);\n-    }\n@@ -1088,0 +1086,1 @@\n+\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-void ArchiveHeapLoader::fixup_regions() {\n+void ArchiveHeapLoader::fixup_region() {\n@@ -83,1 +83,1 @@\n-    mapinfo->fixup_mapped_heap_regions();\n+    mapinfo->fixup_mapped_heap_region();\n@@ -324,1 +324,1 @@\n-bool ArchiveHeapLoader::load_heap_regions(FileMapInfo* mapinfo) {\n+bool ArchiveHeapLoader::load_heap_region(FileMapInfo* mapinfo) {\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  \/\/ At runtime, heap regions in the CDS archive can be used in two different ways,\n+  \/\/ At runtime, the heap region in the CDS archive can be used in two different ways,\n@@ -45,2 +45,2 @@\n-  \/\/ - Mapped: (G1 only) the regions are directly mapped into the Java heap\n-  \/\/ - Loaded: At VM start-up, the objects in the heap regions are copied into the\n+  \/\/ - Mapped: (G1 only) the region is directly mapped into the Java heap\n+  \/\/ - Loaded: At VM start-up, the objects in the heap region are copied into the\n@@ -51,1 +51,1 @@\n-  \/\/ Can this VM map archived heap regions? Currently only G1+compressed{oops,cp}\n+  \/\/ Can this VM map archived heap region? Currently only G1+compressed{oops,cp}\n@@ -57,1 +57,1 @@\n-  \/\/ Can this VM load the objects from archived heap regions into the heap at start-up?\n+  \/\/ Can this VM load the objects from archived heap region into the heap at start-up?\n@@ -86,1 +86,1 @@\n-  \/\/ than CompressedOops::{base,shift} -- see FileMapInfo::map_heap_regions_impl.\n+  \/\/ than CompressedOops::{base,shift} -- see FileMapInfo::map_heap_region_impl.\n@@ -104,1 +104,1 @@\n-  static void fixup_regions() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void fixup_region() NOT_CDS_JAVA_HEAP_RETURN;\n@@ -153,1 +153,1 @@\n-  static bool load_heap_regions(FileMapInfo* mapinfo);\n+  static bool load_heap_region(FileMapInfo* mapinfo);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  \/\/assert(is_in_requested_regions(request_oop), \"must be\");\n+  assert(is_in_requested_range(request_oop), \"must be\");\n@@ -528,4 +528,1 @@\n-\n-    if (max_idx < idx) {\n-      max_idx = idx;\n-    }\n+    max_idx = MAX2(max_idx, idx);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  msg.debug(\"Detailed metadata info (excluding heap regions):\");\n+  msg.debug(\"Detailed metadata info (excluding heap region):\");\n","filename":"src\/hotspot\/share\/cds\/dumpAllocStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1665,1 +1665,0 @@\n-  size_t size_in_bits = ptrmap->size();\n@@ -1673,0 +1672,4 @@\n+  \/\/ The bitmap region contains up to 3 parts:\n+  \/\/ ptrmap:              metaspace pointers inside the ro\/rw regions\n+  \/\/ heap_info->oopmap(): Java oop pointers in the heap region\n+  \/\/ heap_info->ptrmap(): metaspace pointers in the heap region\n@@ -1674,2 +1677,3 @@\n-  size_t written = write_bitmap(ptrmap, buffer, 0);\n-  header()->set_ptrmap_size_in_bits(size_in_bits);\n+  size_t written = 0;\n+  written = write_bitmap(ptrmap, buffer, written);\n+  header()->set_ptrmap_size_in_bits(ptrmap->size());\n@@ -2012,1 +2016,1 @@\n-bool FileMapInfo::has_heap_regions() {\n+bool FileMapInfo::has_heap_region() {\n@@ -2016,1 +2020,1 @@\n-\/\/ Returns the address range of the archived heap regions computed using the\n+\/\/ Returns the address range of the archived heap region computed using the\n@@ -2020,4 +2024,1 @@\n-MemRegion FileMapInfo::get_heap_regions_requested_range() {\n-  address start = (address) max_uintx;\n-  address end   = nullptr;\n-\n+MemRegion FileMapInfo::get_heap_region_requested_range() {\n@@ -2026,13 +2027,6 @@\n-  if (size > 0) {\n-    address s = heap_region_requested_address(r);\n-    address e = s + size;\n-    log_info(cds)(\"Heap region = \" INTPTR_FORMAT \" - \" INTPTR_FORMAT \" = \"  SIZE_FORMAT_W(8) \" bytes\",\n-                  p2i(s), p2i(e), size);\n-    if (start > s) {\n-      start = s;\n-    }\n-    if (end < e) {\n-      end = e;\n-    }\n-  }\n-  assert(end != nullptr, \"must have at least one used heap region\");\n+  assert(size > 0, \"must have non-empty heap region\");\n+\n+  address start = heap_region_requested_address(r);\n+  address end = start + size;\n+  log_info(cds)(\"Heap region = \" INTPTR_FORMAT \" - \" INTPTR_FORMAT \" = \"  SIZE_FORMAT_W(8) \" bytes\",\n+                p2i(start), p2i(end), size);\n@@ -2046,1 +2040,1 @@\n-void FileMapInfo::map_or_load_heap_regions() {\n+void FileMapInfo::map_or_load_heap_region() {\n@@ -2049,1 +2043,1 @@\n-  if (can_use_heap_regions()) {\n+  if (can_use_heap_region()) {\n@@ -2051,1 +2045,1 @@\n-      success = map_heap_regions();\n+      success = map_heap_region();\n@@ -2053,1 +2047,1 @@\n-      success = ArchiveHeapLoader::load_heap_regions(this);\n+      success = ArchiveHeapLoader::load_heap_region(this);\n@@ -2069,2 +2063,2 @@\n-bool FileMapInfo::can_use_heap_regions() {\n-  if (!has_heap_regions()) {\n+bool FileMapInfo::can_use_heap_region() {\n+  if (!has_heap_region()) {\n@@ -2164,15 +2158,1 @@\n-\/\/\n-\/\/ Map the closed and open archive heap objects to the runtime java heap.\n-\/\/\n-\/\/ The shared objects are mapped at (or close to ) the java heap top in\n-\/\/ closed archive regions. The mapped objects contain no out-going\n-\/\/ references to any other java heap regions. GC does not write into the\n-\/\/ mapped closed archive heap region.\n-\/\/\n-\/\/ The open archive heap objects are mapped below the shared objects in\n-\/\/ the runtime java heap. The mapped open archive heap data only contains\n-\/\/ references to the shared objects and open archive objects initially.\n-\/\/ During runtime execution, out-going references to any other java heap\n-\/\/ regions may be added. GC may mark and update references in the mapped\n-\/\/ open archive objects.\n-void FileMapInfo::map_heap_regions_impl() {\n+void FileMapInfo::map_heap_region_impl() {\n@@ -2184,1 +2164,1 @@\n-  MemRegion archive_range = get_heap_regions_requested_range();\n+  MemRegion archive_range = get_heap_region_requested_range();\n@@ -2227,2 +2207,1 @@\n-  \/\/ Now, map the open heap regions: GC can write into these regions.\n-  if (map_heap_regions_impl_inner()) {\n+  if (map_heap_region_impl_inner()) {\n@@ -2233,2 +2212,2 @@\n-bool FileMapInfo::map_heap_regions() {\n-  map_heap_regions_impl();\n+bool FileMapInfo::map_heap_region() {\n+  map_heap_region_impl();\n@@ -2239,1 +2218,1 @@\n-bool FileMapInfo::map_heap_regions_impl_inner() {\n+bool FileMapInfo::map_heap_region_impl_inner() {\n@@ -2314,1 +2293,1 @@\n-void FileMapInfo::fixup_mapped_heap_regions() {\n+void FileMapInfo::fixup_mapped_heap_region() {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":29,"deletions":50,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -458,2 +458,2 @@\n-  void  map_or_load_heap_regions() NOT_CDS_JAVA_HEAP_RETURN;\n-  void  fixup_mapped_heap_regions() NOT_CDS_JAVA_HEAP_RETURN;\n+  void  map_or_load_heap_region() NOT_CDS_JAVA_HEAP_RETURN;\n+  void  fixup_mapped_heap_region() NOT_CDS_JAVA_HEAP_RETURN;\n@@ -461,4 +461,2 @@\n-  void  patch_heap_embedded_pointers(MemRegion* regions, int num_regions,\n-                                     int first_region_idx) NOT_CDS_JAVA_HEAP_RETURN;\n-  bool  has_heap_regions()  NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  MemRegion get_heap_regions_requested_range() NOT_CDS_JAVA_HEAP_RETURN_(MemRegion());\n+  bool  has_heap_region()  NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  MemRegion get_heap_region_requested_range() NOT_CDS_JAVA_HEAP_RETURN_(MemRegion());\n@@ -562,1 +560,1 @@\n-  bool  map_heap_regions_impl_inner() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  bool  map_heap_region_impl_inner() NOT_CDS_JAVA_HEAP_RETURN_(false);\n@@ -564,4 +562,4 @@\n-  bool  can_use_heap_regions();\n-  bool  load_heap_regions() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  bool  map_heap_regions() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  void  map_heap_regions_impl() NOT_CDS_JAVA_HEAP_RETURN;\n+  bool  can_use_heap_region();\n+  bool  load_heap_region() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  bool  map_heap_region() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  void  map_heap_region_impl() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  \/\/ Can this VM write heap regions into the CDS archive? Currently only G1+compressed{oops,cp}\n+  \/\/ Can this VM write a heap region into the CDS archive? Currently only G1+compressed{oops,cp}\n@@ -369,1 +369,1 @@\n-  \/\/ archived heap regions are not prematurely collected. These roots include:\n+  \/\/ archived heap region are not prematurely collected. These roots include:\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,6 +101,1 @@\n-\/\/\n-\/\/     ca0 - closed archive heap space #0\n-\/\/     ca1 - closed archive heap space #1 (may be empty)\n-\/\/     oa0 - open archive heap space #0\n-\/\/     oa1 - open archive heap space #1 (may be empty)\n-\/\/\n+\/\/     hp  - heap region\n@@ -122,2 +117,3 @@\n-\/\/ The ca0\/ca1 and oa0\/oa1 regions are populated inside HeapShared::archive_objects.\n-\/\/ Their layout is independent of the rw\/ro regions.\n+\/\/ The heap region is populated by HeapShared::archive_objects.\n+\/\/\n+\/\/ The bitmap region is used to relocate the ro\/rw\/hp regions.\n@@ -1130,1 +1126,1 @@\n-          \/\/ map_heap_regions() compares the current narrow oop and klass encodings\n+          \/\/ map_or_load_heap_region() compares the current narrow oop and klass encodings\n@@ -1132,1 +1128,1 @@\n-          static_mapinfo->map_or_load_heap_regions();\n+          static_mapinfo->map_or_load_heap_region();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-  \/\/ Return true if given address is in the shared metaspace regions (i.e., excluding any\n-  \/\/ mapped heap regions.)\n+  \/\/ Return true if given address is in the shared metaspace regions (i.e., excluding the\n+  \/\/ mapped heap region.)\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-    ArchiveHeapLoader::fixup_regions();\n+    ArchiveHeapLoader::fixup_region();\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -516,5 +516,1 @@\n-  if (!reserved.contains(range.start()) || !reserved.contains(range.last())) {\n-    return false;\n-  } else {\n-    return true;\n-  }\n+  return reserved.contains(range.start()) && reserved.contains(range.last());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}