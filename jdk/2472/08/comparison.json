{"files":[{"patch":"@@ -2688,0 +2688,1 @@\n+    assert(!isSHR || (isSHR && (shift != 0)), \"Zero right shift\");      \\\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -530,0 +530,27 @@\n+  \/\/ AdvSIMD shift by immediate.\n+  \/\/ These are \"user friendly\" variants which allow a shift count of 0.\n+#define WRAP(INSN)                                                                \\\n+  void INSN(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int shift) {  \\\n+    if (shift == 0) {                                                             \\\n+      SIMD_Arrangement arrange = (T & 1) == 0 ? T8B : T16B;                       \\\n+      Assembler::orr(Vd, arrange, Vn, Vn);                                        \\\n+    } else {                                                                      \\\n+      Assembler::INSN(Vd, T, Vn, shift);                                          \\\n+    }                                                                             \\\n+  }                                                                               \\\n+\n+  WRAP(shl) WRAP(sshr) WRAP(ushr)\n+#undef WRAP\n+\n+#define WRAP(INSN)                                                                \\\n+  void INSN(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int shift) {  \\\n+    if (shift == 0) {                                                             \\\n+      Assembler::addv(Vd, T, Vd, Vn);                                             \\\n+    } else {                                                                      \\\n+      Assembler::INSN(Vd, T, Vn, shift);                                          \\\n+    }                                                                             \\\n+  }                                                                               \\\n+\n+  WRAP(usra) WRAP(ssra)\n+#undef WRAP\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,684 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import java.util.Random;\n+import java.util.Arrays;\n+\n+import jdk.incubator.vector.*;\n+\n+\/**\n+ * @test\n+ * @bug 8261142\n+ * @summary AArch64: Incorrect instruction encoding when right-shifting vectors with shift amount equals to the element width\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:CompileThreshold=1000 compiler.vectorapi.TestVectorShiftImm 128\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:CompileThreshold=1000 compiler.vectorapi.TestVectorShiftImm 64\n+ *\/\n+\n+public class TestVectorShiftImm {\n+    private static final int LARGE_LEN = 256;\n+    private static final int NUM_ITERS = 20000;\n+\n+    private static final int NUM_OPS          = 5;\n+    private static final int ACCUMULATE_OP_S  = 3;\n+    private static final int MAX_TESTS_PER_OP = 6;\n+    private static final int VLENS            = 2;\n+\n+    private static byte[]  bytesA,    bytesB;\n+    private static short[] shortsA,   shortsB;\n+    private static int[]   integersA, integersB;\n+    private static long[]  longsA,    longsB;\n+\n+    private static byte  tBytes[][],    gBytes[][];\n+    private static short tShorts[][],   gShorts[][];\n+    private static int   tIntegers[][], gIntegers[][];\n+    private static long  tLongs[][],    gLongs[][];\n+\n+    private static Random r = new Random(32781);\n+\n+    static final VectorSpecies<Byte> byte64SPECIES  = ByteVector.SPECIES_64;\n+    static final VectorSpecies<Byte> byte128SPECIES = ByteVector.SPECIES_128;\n+\n+    static final VectorSpecies<Short> short64SPECIES  = ShortVector.SPECIES_64;\n+    static final VectorSpecies<Short> short128SPECIES = ShortVector.SPECIES_128;\n+\n+    static final VectorSpecies<Integer> integer64SPECIES  = IntVector.SPECIES_64;\n+    static final VectorSpecies<Integer> integer128SPECIES = IntVector.SPECIES_128;\n+\n+    static final VectorSpecies<Long> long128SPECIES = LongVector.SPECIES_128;\n+\n+    static String[] opNames = {\"LSHL\", \"ASHR\", \"LSHR\", \"ASHR_AND_ACCUMULATE\", \"LSHR_AND_ACCUMULATE\"};\n+\n+    static boolean allTestsPassed = true;\n+    static StringBuilder errMsg = new StringBuilder();\n+\n+    public static void main(String args[]) {\n+\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"Please pass which vector length to test : 64 \/ 128.\");\n+        }\n+\n+        int vlen = Integer.parseInt(args[0]);\n+\n+        test_init();\n+\n+        if (vlen == 64) {\n+            test_shift_and_accumulate_vlen64();\n+            test_shift_immediate_vlen64();\n+        }\n+\n+        if (vlen == 128) {\n+            test_shift_and_accumulate_vlen128();\n+            test_shift_immediate_vlen128();\n+        }\n+\n+        if (allTestsPassed) {\n+            System.out.println(\"Test PASSED\");\n+        } else {\n+            throw new RuntimeException(\"Test Failed, failed tests:\\n\" + errMsg.toString());\n+        }\n+    }\n+\n+    static void test_shift_and_accumulate_vlen64() {\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            shift_and_accumulate_bytes64(tBytes,        true);\n+            shift_and_accumulate_shorts64(tShorts,      true);\n+            shift_and_accumulate_integers64(tIntegers,  true);\n+        }\n+    }\n+\n+    static void test_shift_and_accumulate_vlen128() {\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            shift_and_accumulate_bytes128(tBytes,        true);\n+            shift_and_accumulate_shorts128(tShorts,      true);\n+            shift_and_accumulate_integers128(tIntegers,  true);\n+            shift_and_accumulate_longs128(tLongs,        true);\n+        }\n+    }\n+\n+    static void test_shift_immediate_vlen64() {\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            shift_bytes64(tBytes,        true);\n+            shift_shorts64(tShorts,      true);\n+            shift_integers64(tIntegers,  true);\n+        }\n+    }\n+\n+    static void test_shift_immediate_vlen128() {\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            shift_bytes128(tBytes,        true);\n+            shift_shorts128(tShorts,      true);\n+            shift_integers128(tIntegers,  true);\n+            shift_longs128(tLongs,        true);\n+        }\n+    }\n+\n+    static void shift_bytes64(byte arrBytes[][], boolean verify) {\n+        int start = 0, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            end = start;\n+\n+            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, 8 * i);\n+            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, 8 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], 8 * i);\n+\n+            vbb64.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], 8 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], 8 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], 8 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_bytes64(byte arrBytes[][], boolean verify) {\n+        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            end = start;\n+\n+            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, 8 * i);\n+            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, 8 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], 8 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], 8 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], 8 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_bytes128(byte arrBytes[][], boolean verify) {\n+        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 16; i++) {\n+            end = start;\n+\n+            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, 16 * i);\n+            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, 16 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], 16 * i);\n+\n+            vbb128.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], 16 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], 16 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], 16 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_bytes128(byte arrBytes[][], boolean verify) {\n+        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 16; i++) {\n+            end = start;\n+\n+            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, 16 * i);\n+            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, 16 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], 16 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], 16 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], 16 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_shorts64(short arrShorts[][], boolean verify) {\n+        int start = 0, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            end = start;\n+\n+            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, 4 * i);\n+            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, 4 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHL, 1).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 8).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 13).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 19).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 24).intoArray(arrShorts[end++], 4 * i);\n+\n+            vbb64.lanewise(VectorOperators.ASHR, 1).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 8).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 13).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 19).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 24).intoArray(arrShorts[end++], 4 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHR, 1).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 8).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 13).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 19).intoArray(arrShorts[end++], 4 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 24).intoArray(arrShorts[end++], 4 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_shorts64(short arrShorts[][], boolean verify) {\n+        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            end = start;\n+\n+            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, 4 * i);\n+            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, 4 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 1)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 8)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 13)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 19)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 24)).intoArray(arrShorts[end++], 4 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 1)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 8)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 13)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 19)).intoArray(arrShorts[end++], 4 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 24)).intoArray(arrShorts[end++], 4 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_shorts128(short arrShorts[][], boolean verify) {\n+        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            end = start;\n+\n+            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, 8 * i);\n+            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, 8 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHL, 1).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 8).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 13).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 19).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 24).intoArray(arrShorts[end++], 8 * i);\n+\n+            vbb128.lanewise(VectorOperators.ASHR, 1).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 8).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 13).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 19).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 24).intoArray(arrShorts[end++], 8 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHR, 1).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 8).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 13).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 19).intoArray(arrShorts[end++], 8 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 24).intoArray(arrShorts[end++], 8 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_shorts128(short arrShorts[][], boolean verify) {\n+        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            end = start;\n+\n+            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, 8 * i);\n+            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, 8 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 1)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 8)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 13)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 19)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 24)).intoArray(arrShorts[end++], 8 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 1)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 8)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 13)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 19)).intoArray(arrShorts[end++], 8 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 24)).intoArray(arrShorts[end++], 8 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_integers64(int arrInts[][], boolean verify) {\n+        int start = 0, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            end = start;\n+\n+            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA, 2 * i);\n+            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, 2 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHL, 9).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 32).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 47).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 64).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 73).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHL, 96).intoArray(arrInts[end++], 2 * i);\n+\n+            vbb64.lanewise(VectorOperators.ASHR, 9).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 32).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 47).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 64).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 73).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.ASHR, 96).intoArray(arrInts[end++], 2 * i);\n+\n+            vbb64.lanewise(VectorOperators.LSHR, 9).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 32).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 47).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 64).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 73).intoArray(arrInts[end++], 2 * i);\n+            vbb64.lanewise(VectorOperators.LSHR, 96).intoArray(arrInts[end++], 2 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_integers64(int arrInts[][], boolean verify) {\n+        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            end = start;\n+\n+            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA, 2 * i);\n+            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, 2 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 9)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 32)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 47)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 64)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 73)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 96)).intoArray(arrInts[end++], 2 * i);\n+\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 9)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 32)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 47)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 64)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 73)).intoArray(arrInts[end++], 2 * i);\n+            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 96)).intoArray(arrInts[end++], 2 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 64);\n+            }\n+        }\n+    }\n+\n+    static void shift_integers128(int arrInts[][], boolean verify) {\n+        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            end = start;\n+\n+            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA, 4 * i);\n+            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, 4 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHL, 9).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 32).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 47).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 64).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 73).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 96).intoArray(arrInts[end++], 4 * i);\n+\n+            vbb128.lanewise(VectorOperators.ASHR, 9).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 32).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 47).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 64).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 73).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 96).intoArray(arrInts[end++], 4 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHR, 9).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 32).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 47).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 64).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 73).intoArray(arrInts[end++], 4 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 96).intoArray(arrInts[end++], 4 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_integers128(int arrInts[][], boolean verify) {\n+        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            end = start;\n+\n+            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA, 4 * i);\n+            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, 4 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 9)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 32)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 47)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 64)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 73)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 96)).intoArray(arrInts[end++], 4 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 9)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 32)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 47)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 64)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 73)).intoArray(arrInts[end++], 4 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 96)).intoArray(arrInts[end++], 4 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_longs128(long arrLongs[][], boolean verify) {\n+        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            end = start;\n+\n+            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, 2 * i);\n+            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, 2 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHL, 37).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 64).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 99).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 128).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 157).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHL, 192).intoArray(arrLongs[end++], 2 * i);\n+\n+            vbb128.lanewise(VectorOperators.ASHR, 37).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 64).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 99).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 128).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 157).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.ASHR, 192).intoArray(arrLongs[end++], 2 * i);\n+\n+            vbb128.lanewise(VectorOperators.LSHR, 37).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 64).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 99).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 128).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 157).intoArray(arrLongs[end++], 2 * i);\n+            vbb128.lanewise(VectorOperators.LSHR, 192).intoArray(arrLongs[end++], 2 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+    static void shift_and_accumulate_longs128(long arrLongs[][], boolean verify) {\n+        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            end = start;\n+\n+            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, 2 * i);\n+            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, 2 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 37)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 64)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 99)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 128)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 157)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 192)).intoArray(arrLongs[end++], 2 * i);\n+\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 37)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 64)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 99)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 128)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 157)).intoArray(arrLongs[end++], 2 * i);\n+            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 192)).intoArray(arrLongs[end++], 2 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = start; i < end; i++) {\n+                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, 128);\n+            }\n+        }\n+    }\n+\n+\n+    static void test_init() {\n+        int count = LARGE_LEN;\n+\n+        bytesA    = new byte[count];\n+        shortsA   = new short[count];\n+        integersA = new int[count];\n+        longsA    = new long[count];\n+\n+        bytesB    = new byte[count];\n+        shortsB   = new short[count];\n+        integersB = new int[count];\n+        longsB    = new long[count];\n+\n+        tBytes    = new byte[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tShorts   = new short[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tIntegers = new int[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tLongs    = new long[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+\n+        gBytes    = new byte[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gShorts   = new short[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gIntegers = new int[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gLongs    = new long[VLENS * MAX_TESTS_PER_OP * NUM_OPS][count];\n+\n+        for (int i = 0; i < count; i++) {\n+            bytesA[i]    = (byte) r.nextInt();\n+            shortsA[i]   = (short) r.nextInt();\n+            integersA[i] = r.nextInt();\n+            longsA[i]    = r.nextLong();\n+\n+            bytesB[i]    = (byte) r.nextInt();\n+            shortsB[i]   = (short) r.nextInt();\n+            integersB[i] = r.nextInt();\n+            longsB[i]    = r.nextLong();\n+        }\n+\n+        shift_bytes64(gBytes,        false);\n+        shift_bytes128(gBytes,       false);\n+        shift_shorts64(gShorts,      false);\n+        shift_shorts128(gShorts,     false);\n+        shift_integers64(gIntegers,  false);\n+        shift_integers128(gIntegers, false);\n+        shift_longs128(gLongs,       false);\n+\n+        shift_and_accumulate_bytes64(gBytes,        false);\n+        shift_and_accumulate_bytes128(gBytes,       false);\n+        shift_and_accumulate_shorts64(gShorts,      false);\n+        shift_and_accumulate_shorts128(gShorts,     false);\n+        shift_and_accumulate_integers64(gIntegers,  false);\n+        shift_and_accumulate_integers128(gIntegers, false);\n+        shift_and_accumulate_longs128(gLongs,       false);\n+    }\n+\n+    static void assertTrue(String type, boolean okay, int i, int vlen) {\n+        int op = i % (MAX_TESTS_PER_OP * NUM_OPS) \/ MAX_TESTS_PER_OP;\n+        if (!okay) {\n+            allTestsPassed = false;\n+            if (!errMsg.toString().contains(\"type \" + type + \" index \" + i)) {\n+                errMsg.append(\"type \" + type + \" index \" + i + \", operation \" + opNames[op] + \", vector length \"+ vlen + \".\\n\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShiftImm.java","additions":684,"deletions":0,"binary":false,"changes":684,"status":"added"}]}