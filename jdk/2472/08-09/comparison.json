{"files":[{"patch":"@@ -37,2 +37,6 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:CompileThreshold=1000 compiler.vectorapi.TestVectorShiftImm 128\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:CompileThreshold=1000 compiler.vectorapi.TestVectorShiftImm 64\n+ * @run main\/othervm -XX:CompileThreshold=1000 -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift_*\n+ *                   -Dvlen=64 compiler.vectorapi.TestVectorShiftImm\n+ * @run main\/othervm -XX:CompileThreshold=1000 -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift_*\n+ *                   -Dvlen=128 compiler.vectorapi.TestVectorShiftImm\n@@ -43,1 +47,1 @@\n-    private static final int NUM_ITERS = 20000;\n+    private static final int NUM_ITERS = 50000;\n@@ -80,5 +84,1 @@\n-        if (args.length < 1) {\n-            throw new RuntimeException(\"Please pass which vector length to test : 64 \/ 128.\");\n-        }\n-\n-        int vlen = Integer.parseInt(args[0]);\n+        int vlen = Integer.parseInt(System.getProperty(\"vlen\", \"\"));\n@@ -139,2 +139,9 @@\n-    static void shift_bytes64(byte arrBytes[][], boolean verify) {\n-        int start = 0, end = 0;\n+    static int shift_op_byte_LSHL(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], ind);\n+        return end;\n+    }\n@@ -142,2 +149,9 @@\n-        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n-            end = start;\n+    static int shift_op_byte_ASHR(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], ind);\n+        return end;\n+    }\n@@ -145,2 +159,19 @@\n-            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, 8 * i);\n-            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, 8 * i);\n+    static int shift_op_byte_LSHR(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], ind);\n+        return end;\n+    }\n+\n+    static int shift_op_byte_ASHR_and_ADD(ByteVector vba, ByteVector vbb, byte arrBytes[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], ind);\n+        return end;\n+    }\n@@ -148,6 +179,9 @@\n-            vbb64.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], 8 * i);\n+    static int shift_op_byte_LSHR_and_ADD(ByteVector vba, ByteVector vbb, byte arrBytes[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], ind);\n+        return end;\n+    }\n@@ -155,6 +189,2 @@\n-            vbb64.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], 8 * i);\n+    static void shift_bytes64(byte arrBytes[][], boolean verify) {\n+        int start = 0, end = 0;\n@@ -162,6 +192,6 @@\n-            vbb64.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], 8 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], 8 * i);\n+        for (int i = 0; i < LARGE_LEN; i += 16) {\n+            end = start;\n+            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, i);\n+            end = shift_op_byte_LSHL(vbb64, arrBytes, end, i);\n+            end = shift_op_byte_ASHR(vbb64, arrBytes, end, i);\n+            end = shift_op_byte_LSHR(vbb64, arrBytes, end, i);\n@@ -180,1 +210,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 16) {\n@@ -182,17 +212,4 @@\n-\n-            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, 8 * i);\n-            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, 8 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], 8 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], 8 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], 8 * i);\n+            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, i);\n+            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, i);\n+            end = shift_op_byte_ASHR_and_ADD(vba64, vbb64, arrBytes, end,  i);\n+            end = shift_op_byte_LSHR_and_ADD(vba64, vbb64, arrBytes, end,  i);\n@@ -211,1 +228,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 16; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 32) {\n@@ -213,0 +230,4 @@\n+            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, i);\n+            end = shift_op_byte_LSHL(vbb128, arrBytes, end, i);\n+            end = shift_op_byte_ASHR(vbb128, arrBytes, end, i);\n+            end = shift_op_byte_LSHR(vbb128, arrBytes, end, i);\n@@ -214,23 +235,0 @@\n-            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, 16 * i);\n-            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, 16 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], 16 * i);\n-\n-            vbb128.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], 16 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], 16 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], 16 * i);\n@@ -249,1 +247,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 16; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 32) {\n@@ -251,17 +249,4 @@\n-\n-            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, 16 * i);\n-            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, 16 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], 16 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], 16 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], 16 * i);\n+            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, i);\n+            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, i);\n+            end = shift_op_byte_ASHR_and_ADD(vba128, vbb128, arrBytes, end,  i);\n+            end = shift_op_byte_LSHR_and_ADD(vba128, vbb128, arrBytes, end,  i);\n@@ -277,2 +262,9 @@\n-    static void shift_shorts64(short arrShorts[][], boolean verify) {\n-        int start = 0, end = 0;\n+    static int shift_op_short_LSHL(ShortVector vbb, short arrShorts[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 43).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrShorts[end++], ind);\n+        return end;\n+    }\n@@ -280,2 +272,19 @@\n-        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n-            end = start;\n+    static int shift_op_short_ASHR(ShortVector vbb, short arrShorts[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 43).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrShorts[end++], ind);\n+        return end;\n+    }\n+\n+    static int shift_op_short_LSHR(ShortVector vbb, short arrShorts[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 43).intoArray(arrShorts[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrShorts[end++], ind);\n+        return end;\n+    }\n@@ -283,2 +292,9 @@\n-            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, 4 * i);\n-            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, 4 * i);\n+    static int shift_op_short_ASHR_and_ADD(ShortVector vba, ShortVector vbb, short arrShorts[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 43)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrShorts[end++], ind);\n+        return end;\n+    }\n@@ -286,6 +302,9 @@\n-            vbb64.lanewise(VectorOperators.LSHL, 1).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 8).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 13).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 19).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 24).intoArray(arrShorts[end++], 4 * i);\n+    static int shift_op_short_LSHR_and_ADD(ShortVector vba, ShortVector vbb, short arrShorts[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 43)).intoArray(arrShorts[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrShorts[end++], ind);\n+        return end;\n+    }\n@@ -293,6 +312,2 @@\n-            vbb64.lanewise(VectorOperators.ASHR, 1).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 8).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 13).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 19).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 24).intoArray(arrShorts[end++], 4 * i);\n+    static void shift_shorts64(short arrShorts[][], boolean verify) {\n+        int start = 0, end = 0;\n@@ -300,6 +315,6 @@\n-            vbb64.lanewise(VectorOperators.LSHR, 1).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 8).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 13).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 19).intoArray(arrShorts[end++], 4 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 24).intoArray(arrShorts[end++], 4 * i);\n+        for (int i = 0; i < LARGE_LEN; i += 8) {\n+            end = start;\n+            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, i);\n+            end = shift_op_short_LSHL(vbb64, arrShorts, end, i);\n+            end = shift_op_short_ASHR(vbb64, arrShorts, end, i);\n+            end = shift_op_short_LSHR(vbb64, arrShorts, end, i);\n@@ -318,1 +333,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 8) {\n@@ -320,17 +335,4 @@\n-\n-            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, 4 * i);\n-            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, 4 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 1)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 8)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 13)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 19)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 24)).intoArray(arrShorts[end++], 4 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 1)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 8)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 13)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 19)).intoArray(arrShorts[end++], 4 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 24)).intoArray(arrShorts[end++], 4 * i);\n+            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, i);\n+            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, i);\n+            end = shift_op_short_ASHR_and_ADD(vba64, vbb64, arrShorts, end,    i);\n+            end = shift_op_short_LSHR_and_ADD(vba64, vbb64, arrShorts, end,    i);\n@@ -349,1 +351,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 16) {\n@@ -351,0 +353,4 @@\n+            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, i);\n+            end = shift_op_short_LSHL(vbb128, arrShorts, end, i);\n+            end = shift_op_short_ASHR(vbb128, arrShorts, end, i);\n+            end = shift_op_short_LSHR(vbb128, arrShorts, end, i);\n@@ -352,23 +358,0 @@\n-            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, 8 * i);\n-            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, 8 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHL, 1).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 8).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 13).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 19).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 24).intoArray(arrShorts[end++], 8 * i);\n-\n-            vbb128.lanewise(VectorOperators.ASHR, 1).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 8).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 13).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 19).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 24).intoArray(arrShorts[end++], 8 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHR, 1).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 8).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 13).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 19).intoArray(arrShorts[end++], 8 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 24).intoArray(arrShorts[end++], 8 * i);\n@@ -387,1 +370,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 16) {\n@@ -389,17 +372,4 @@\n-\n-            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, 8 * i);\n-            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, 8 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 1)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 8)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 13)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 19)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 24)).intoArray(arrShorts[end++], 8 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 1)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 8)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 13)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 19)).intoArray(arrShorts[end++], 8 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 24)).intoArray(arrShorts[end++], 8 * i);\n+            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, i);\n+            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, i);\n+            end = shift_op_short_ASHR_and_ADD(vba128, vbb128, arrShorts, end,    i);\n+            end = shift_op_short_LSHR_and_ADD(vba128, vbb128, arrShorts, end,    i);\n@@ -415,2 +385,9 @@\n-    static void shift_integers64(int arrInts[][], boolean verify) {\n-        int start = 0, end = 0;\n+    static int shift_op_integer_LSHL(IntVector vbb, int arrIntegers[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHL, 17).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 53).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 64).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 76).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 96).intoArray(arrIntegers[end++], ind);\n+        return end;\n+    }\n@@ -418,2 +395,19 @@\n-        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n-            end = start;\n+    static int shift_op_integer_ASHR(IntVector vbb, int arrIntegers[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.ASHR, 17).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 53).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 64).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 76).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 96).intoArray(arrIntegers[end++], ind);\n+        return end;\n+    }\n+\n+    static int shift_op_integer_LSHR(IntVector vbb, int arrIntegers[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHR, 17).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 53).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 64).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 76).intoArray(arrIntegers[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 96).intoArray(arrIntegers[end++], ind);\n+        return end;\n+    }\n@@ -421,2 +415,9 @@\n-            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA, 2 * i);\n-            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, 2 * i);\n+    static int shift_op_integer_ASHR_and_ADD(IntVector vba, IntVector vbb, int arrIntegers[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 17)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 53)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 64)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 76)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 96)).intoArray(arrIntegers[end++], ind);\n+        return end;\n+    }\n@@ -424,6 +425,9 @@\n-            vbb64.lanewise(VectorOperators.LSHL, 9).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 32).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 47).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 64).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 73).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHL, 96).intoArray(arrInts[end++], 2 * i);\n+    static int shift_op_integer_LSHR_and_ADD(IntVector vba, IntVector vbb, int arrIntegers[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 17)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 53)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 64)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 76)).intoArray(arrIntegers[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 96)).intoArray(arrIntegers[end++], ind);\n+        return end;\n+    }\n@@ -431,6 +435,2 @@\n-            vbb64.lanewise(VectorOperators.ASHR, 9).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 32).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 47).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 64).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 73).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.ASHR, 96).intoArray(arrInts[end++], 2 * i);\n+    static void shift_integers64(int arrIntegers[][], boolean verify) {\n+        int start = 0, end = 0;\n@@ -438,6 +438,6 @@\n-            vbb64.lanewise(VectorOperators.LSHR, 9).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 32).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 47).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 64).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 73).intoArray(arrInts[end++], 2 * i);\n-            vbb64.lanewise(VectorOperators.LSHR, 96).intoArray(arrInts[end++], 2 * i);\n+        for (int i = 0; i < LARGE_LEN; i += 4) {\n+            end = start;\n+            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, i);\n+            end = shift_op_integer_LSHL(vbb64, arrIntegers, end, i);\n+            end = shift_op_integer_ASHR(vbb64, arrIntegers, end, i);\n+            end = shift_op_integer_LSHR(vbb64, arrIntegers, end, i);\n@@ -453,1 +453,1 @@\n-    static void shift_and_accumulate_integers64(int arrInts[][], boolean verify) {\n+    static void shift_and_accumulate_integers64(int arrIntegers[][], boolean verify) {\n@@ -456,1 +456,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 4) {\n@@ -458,17 +458,4 @@\n-\n-            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA, 2 * i);\n-            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, 2 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 9)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 32)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 47)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 64)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 73)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.ASHR, 96)).intoArray(arrInts[end++], 2 * i);\n-\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 9)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 32)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 47)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 64)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 73)).intoArray(arrInts[end++], 2 * i);\n-            vba64.add(vbb64.lanewise(VectorOperators.LSHR, 96)).intoArray(arrInts[end++], 2 * i);\n+            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA,  i);\n+            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB,  i);\n+            end = shift_op_integer_ASHR_and_ADD(vba64, vbb64, arrIntegers, end, i);\n+            end = shift_op_integer_LSHR_and_ADD(vba64, vbb64, arrIntegers, end, i);\n@@ -484,1 +471,1 @@\n-    static void shift_integers128(int arrInts[][], boolean verify) {\n+    static void shift_integers128(int arrIntegers[][], boolean verify) {\n@@ -487,1 +474,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 8) {\n@@ -489,0 +476,4 @@\n+            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, i);\n+            end = shift_op_integer_LSHL(vbb128, arrIntegers, end, i);\n+            end = shift_op_integer_ASHR(vbb128, arrIntegers, end, i);\n+            end = shift_op_integer_LSHR(vbb128, arrIntegers, end, i);\n@@ -490,23 +481,0 @@\n-            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA, 4 * i);\n-            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, 4 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHL, 9).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 32).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 47).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 64).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 73).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 96).intoArray(arrInts[end++], 4 * i);\n-\n-            vbb128.lanewise(VectorOperators.ASHR, 9).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 32).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 47).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 64).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 73).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 96).intoArray(arrInts[end++], 4 * i);\n-\n-            vbb128.lanewise(VectorOperators.LSHR, 9).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 32).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 47).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 64).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 73).intoArray(arrInts[end++], 4 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 96).intoArray(arrInts[end++], 4 * i);\n@@ -522,1 +490,1 @@\n-    static void shift_and_accumulate_integers128(int arrInts[][], boolean verify) {\n+    static void shift_and_accumulate_integers128(int arrIntegers[][], boolean verify) {\n@@ -525,1 +493,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 8) {\n@@ -527,17 +495,4 @@\n-\n-            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA, 4 * i);\n-            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, 4 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 9)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 32)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 47)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 64)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 73)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 96)).intoArray(arrInts[end++], 4 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 9)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 32)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 47)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 64)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 73)).intoArray(arrInts[end++], 4 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 96)).intoArray(arrInts[end++], 4 * i);\n+            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA,  i);\n+            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB,  i);\n+            end = shift_op_integer_ASHR_and_ADD(vba128, vbb128, arrIntegers, end, i);\n+            end = shift_op_integer_LSHR_and_ADD(vba128, vbb128, arrIntegers, end, i);\n@@ -553,2 +508,9 @@\n-    static void shift_longs128(long arrLongs[][], boolean verify) {\n-        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+    static int shift_op_long_LSHL(LongVector vbb, long arrLongs[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHL, 37).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 64).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 99).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 128).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 157).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHL, 192).intoArray(arrLongs[end++], ind);\n+        return end;\n+    }\n@@ -556,2 +518,19 @@\n-        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n-            end = start;\n+    static int shift_op_long_ASHR(LongVector vbb, long arrLongs[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.ASHR, 37).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 64).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 99).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 128).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 157).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.ASHR, 192).intoArray(arrLongs[end++], ind);\n+        return end;\n+    }\n+\n+    static int shift_op_long_LSHR(LongVector vbb, long arrLongs[][], int end, int ind) {\n+        vbb.lanewise(VectorOperators.LSHR, 37).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 64).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 99).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 128).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 157).intoArray(arrLongs[end++], ind);\n+        vbb.lanewise(VectorOperators.LSHR, 192).intoArray(arrLongs[end++], ind);\n+        return end;\n+    }\n@@ -559,2 +538,19 @@\n-            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, 2 * i);\n-            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, 2 * i);\n+    static int shift_op_long_ASHR_and_ADD(LongVector vba, LongVector vbb, long arrLongs[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 37)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 64)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 99)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 128)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 157)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.ASHR, 192)).intoArray(arrLongs[end++], ind);\n+        return end;\n+    }\n+\n+    static int shift_op_long_LSHR_and_ADD(LongVector vba, LongVector vbb, long arrLongs[][], int end, int ind) {\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 37)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 64)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 99)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 128)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 157)).intoArray(arrLongs[end++], ind);\n+        vba.add(vbb.lanewise(VectorOperators.LSHR, 192)).intoArray(arrLongs[end++], ind);\n+        return end;\n+    }\n@@ -562,6 +558,2 @@\n-            vbb128.lanewise(VectorOperators.LSHL, 37).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 64).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 99).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 128).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 157).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHL, 192).intoArray(arrLongs[end++], 2 * i);\n+    static void shift_longs128(long arrLongs[][], boolean verify) {\n+        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n@@ -569,6 +561,6 @@\n-            vbb128.lanewise(VectorOperators.ASHR, 37).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 64).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 99).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 128).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 157).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.ASHR, 192).intoArray(arrLongs[end++], 2 * i);\n+        for (int i = 0; i < LARGE_LEN; i += 2) {\n+            end = start;\n+            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, i);\n+            end = shift_op_long_LSHL(vbb128, arrLongs, end, i);\n+            end = shift_op_long_ASHR(vbb128, arrLongs, end, i);\n+            end = shift_op_long_LSHR(vbb128, arrLongs, end, i);\n@@ -576,6 +568,0 @@\n-            vbb128.lanewise(VectorOperators.LSHR, 37).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 64).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 99).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 128).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 157).intoArray(arrLongs[end++], 2 * i);\n-            vbb128.lanewise(VectorOperators.LSHR, 192).intoArray(arrLongs[end++], 2 * i);\n@@ -594,1 +580,1 @@\n-        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+        for (int i = 0; i < LARGE_LEN; i += 2) {\n@@ -596,17 +582,4 @@\n-\n-            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, 2 * i);\n-            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, 2 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 37)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 64)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 99)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 128)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 157)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.ASHR, 192)).intoArray(arrLongs[end++], 2 * i);\n-\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 37)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 64)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 99)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 128)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 157)).intoArray(arrLongs[end++], 2 * i);\n-            vba128.add(vbb128.lanewise(VectorOperators.LSHR, 192)).intoArray(arrLongs[end++], 2 * i);\n+            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, i);\n+            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, i);\n+            end = shift_op_long_ASHR_and_ADD(vba128, vbb128, arrLongs, end,  i);\n+            end = shift_op_long_LSHR_and_ADD(vba128, vbb128, arrLongs, end,  i);\n@@ -622,1 +595,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShiftImm.java","additions":278,"deletions":306,"binary":false,"changes":584,"status":"modified"}]}