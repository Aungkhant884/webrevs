{"files":[{"patch":"@@ -37,6 +37,4 @@\n- * @run main\/othervm -XX:CompileThreshold=1000 -XX:-TieredCompilation\n- *                   -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift_*\n- *                   -Dvlen=64 compiler.vectorapi.TestVectorShiftImm\n- * @run main\/othervm -XX:CompileThreshold=1000 -XX:-TieredCompilation\n- *                   -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift_*\n- *                   -Dvlen=128 compiler.vectorapi.TestVectorShiftImm\n+ * @run main\/othervm -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift*\n+ *                   -XX:-TieredCompilation -Dvlen=64 compiler.vectorapi.TestVectorShiftImm\n+ * @run main\/othervm -XX:CompileCommand=print,compiler\/vectorapi\/TestVectorShiftImm.shift*\n+ *                   -XX:-TieredCompilation -Dvlen=128 compiler.vectorapi.TestVectorShiftImm\n@@ -46,2 +44,2 @@\n-    private static final int LARGE_LEN = 256;\n-    private static final int NUM_ITERS = 50000;\n+    private static final int ARR_LEN = 16;\n+    private static final int NUM_ITERS = 100000;\n@@ -89,2 +87,1 @@\n-            test_shift_and_accumulate_vlen64();\n-            test_shift_immediate_vlen64();\n+            test_vlen64();\n@@ -93,3 +90,2 @@\n-        if (vlen == 128) {\n-            test_shift_and_accumulate_vlen128();\n-            test_shift_immediate_vlen128();\n+        if(vlen == 128) {\n+            test_vlen128();\n@@ -105,1 +101,1 @@\n-    static void test_shift_and_accumulate_vlen64() {\n+    static void test_vlen64() {\n@@ -107,5 +103,3 @@\n-            shift_and_accumulate_bytes64(tBytes,        true);\n-            shift_and_accumulate_shorts64(tShorts,      true);\n-            shift_and_accumulate_integers64(tIntegers,  true);\n-        }\n-    }\n+            shift_and_accumulate(tBytes, true, byte64SPECIES, 64);\n+            shift_and_accumulate(tShorts, true, short64SPECIES, 64);\n+            shift_and_accumulate(tIntegers, true, integer64SPECIES, 64);\n@@ -113,14 +107,3 @@\n-    static void test_shift_and_accumulate_vlen128() {\n-        for (int i = 0; i < NUM_ITERS; i++) {\n-            shift_and_accumulate_bytes128(tBytes,        true);\n-            shift_and_accumulate_shorts128(tShorts,      true);\n-            shift_and_accumulate_integers128(tIntegers,  true);\n-            shift_and_accumulate_longs128(tLongs,        true);\n-        }\n-    }\n-\n-    static void test_shift_immediate_vlen64() {\n-        for (int i = 0; i < NUM_ITERS; i++) {\n-            shift_bytes64(tBytes,        true);\n-            shift_shorts64(tShorts,      true);\n-            shift_integers64(tIntegers,  true);\n+            shift(tBytes, true, byte64SPECIES, 64);\n+            shift(tShorts, true, short64SPECIES, 64);\n+            shift(tIntegers, true, integer64SPECIES, 64);\n@@ -130,1 +113,1 @@\n-    static void test_shift_immediate_vlen128() {\n+    static void test_vlen128() {\n@@ -132,34 +115,24 @@\n-            shift_bytes128(tBytes,        true);\n-            shift_shorts128(tShorts,      true);\n-            shift_integers128(tIntegers,  true);\n-            shift_longs128(tLongs,        true);\n-        }\n-    }\n-\n-    static int shift_op_byte_LSHL(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_byte_ASHR(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_byte_LSHR(ByteVector vbb, byte arrBytes[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[end++], ind);\n+            shift_and_accumulate(tBytes, true, byte128SPECIES, 128);\n+            shift_and_accumulate(tShorts, true, short128SPECIES, 128);\n+            shift_and_accumulate(tIntegers, true, integer128SPECIES, 128);\n+            shift_and_accumulate(tLongs, true, long128SPECIES, 128);\n+\n+            shift(tBytes, true, byte128SPECIES, 128);\n+            shift(tShorts, true, short128SPECIES, 128);\n+            shift(tIntegers, true, integer128SPECIES, 128);\n+            shift(tLongs, true, long128SPECIES, 128);\n+        }\n+    }\n+\n+    \/**\n+     * Tests for type byte.\n+     *\/\n+\n+    static int shift_with_op(VectorOperators.Binary op, ByteVector vbb,\n+                             byte arr[][], int end, int ind) {\n+        vbb.lanewise(op, 1).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 8).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 13).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 16).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 19).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 24).intoArray(arr[end++], ind);\n@@ -169,7 +142,9 @@\n-    static int shift_op_byte_ASHR_and_ADD(ByteVector vba, ByteVector vbb, byte arrBytes[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[end++], ind);\n+    static int shift_with_op_and_add(VectorOperators.Binary op,\n+                                     ByteVector vba, ByteVector vbb,\n+                                     byte arr[][], int end, int ind) {\n+        vba.add(vbb.lanewise(op, 1)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 8)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 13)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 16)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 19)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 24)).intoArray(arr[end++], ind);\n@@ -179,9 +154,3 @@\n-    static int shift_op_byte_LSHR_and_ADD(ByteVector vba, ByteVector vbb, byte arrBytes[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[end++], ind);\n-        return end;\n-    }\n+    static void shift(byte arrBytes[][], boolean verify,\n+                      VectorSpecies<Byte> vSpecies, int vlen) {\n+        int start = vlen \/ 128 * NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n@@ -189,4 +158,1 @@\n-    static void shift_bytes64(byte arrBytes[][], boolean verify) {\n-        int start = 0, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 16) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 8) {\n@@ -194,4 +160,4 @@\n-            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, i);\n-            end = shift_op_byte_LSHL(vbb64, arrBytes, end, i);\n-            end = shift_op_byte_ASHR(vbb64, arrBytes, end, i);\n-            end = shift_op_byte_LSHR(vbb64, arrBytes, end, i);\n+            ByteVector vbb = ByteVector.fromArray(vSpecies, bytesB, i);\n+            end = shift_with_op(VectorOperators.LSHL, vbb, arrBytes, end, i);\n+            end = shift_with_op(VectorOperators.ASHR, vbb, arrBytes, end, i);\n+            end = shift_with_op(VectorOperators.LSHR, vbb, arrBytes, end, i);\n@@ -202,1 +168,1 @@\n-                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 64);\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, vlen);\n@@ -207,2 +173,3 @@\n-    static void shift_and_accumulate_bytes64(byte arrBytes[][], boolean verify) {\n-        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n+    static void shift_and_accumulate(byte arrBytes[][], boolean verify,\n+                                           VectorSpecies<Byte> vSpecies, int vlen) {\n+        int start = (ACCUMULATE_OP_S + vlen \/ 128 * NUM_OPS) * MAX_TESTS_PER_OP, end = 0;\n@@ -210,1 +177,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 16) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 8) {\n@@ -212,4 +179,4 @@\n-            ByteVector vba64 = ByteVector.fromArray(byte64SPECIES, bytesA, i);\n-            ByteVector vbb64 = ByteVector.fromArray(byte64SPECIES, bytesB, i);\n-            end = shift_op_byte_ASHR_and_ADD(vba64, vbb64, arrBytes, end,  i);\n-            end = shift_op_byte_LSHR_and_ADD(vba64, vbb64, arrBytes, end,  i);\n+            ByteVector vba = ByteVector.fromArray(vSpecies, bytesA, i);\n+            ByteVector vbb = ByteVector.fromArray(vSpecies, bytesB, i);\n+            end = shift_with_op_and_add(VectorOperators.ASHR, vba, vbb, arrBytes, end, i);\n+            end = shift_with_op_and_add(VectorOperators.LSHR, vba, vbb, arrBytes, end, i);\n@@ -220,1 +187,1 @@\n-                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 64);\n+                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, vlen);\n@@ -225,11 +192,3 @@\n-    static void shift_bytes128(byte arrBytes[][], boolean verify) {\n-        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 32) {\n-            end = start;\n-            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, i);\n-            end = shift_op_byte_LSHL(vbb128, arrBytes, end, i);\n-            end = shift_op_byte_ASHR(vbb128, arrBytes, end, i);\n-            end = shift_op_byte_LSHR(vbb128, arrBytes, end, i);\n-\n-        }\n+    \/**\n+     * Tests for type short.\n+     *\/\n@@ -237,42 +196,8 @@\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 128);\n-            }\n-        }\n-    }\n-\n-    static void shift_and_accumulate_bytes128(byte arrBytes[][], boolean verify) {\n-        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 32) {\n-            end = start;\n-            ByteVector vba128 = ByteVector.fromArray(byte128SPECIES, bytesA, i);\n-            ByteVector vbb128 = ByteVector.fromArray(byte128SPECIES, bytesB, i);\n-            end = shift_op_byte_ASHR_and_ADD(vba128, vbb128, arrBytes, end,  i);\n-            end = shift_op_byte_LSHR_and_ADD(vba128, vbb128, arrBytes, end,  i);\n-        }\n-\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"BYTE\", Arrays.equals(tBytes[i], gBytes[i]), i, 128);\n-            }\n-        }\n-    }\n-\n-    static int shift_op_short_LSHL(ShortVector vbb, short arrShorts[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 43).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrShorts[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_short_ASHR(ShortVector vbb, short arrShorts[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 43).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrShorts[end++], ind);\n+    static int shift_with_op(VectorOperators.Binary op, ShortVector vbb,\n+                             short arr[][], int end, int ind) {\n+        vbb.lanewise(op, 9).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 16).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 27).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 32).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 43).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 48).intoArray(arr[end++], ind);\n@@ -282,7 +207,9 @@\n-    static int shift_op_short_LSHR(ShortVector vbb, short arrShorts[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 43).intoArray(arrShorts[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrShorts[end++], ind);\n+    static int shift_with_op_and_add(VectorOperators.Binary op,\n+                                     ShortVector vba, ShortVector vbb,\n+                                     short arr[][], int end, int ind) {\n+        vba.add(vbb.lanewise(op, 9)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 16)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 27)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 32)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 43)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 48)).intoArray(arr[end++], ind);\n@@ -292,58 +219,3 @@\n-    static int shift_op_short_ASHR_and_ADD(ShortVector vba, ShortVector vbb, short arrShorts[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 43)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrShorts[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_short_LSHR_and_ADD(ShortVector vba, ShortVector vbb, short arrShorts[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 43)).intoArray(arrShorts[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrShorts[end++], ind);\n-        return end;\n-    }\n-\n-    static void shift_shorts64(short arrShorts[][], boolean verify) {\n-        int start = 0, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 8) {\n-            end = start;\n-            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, i);\n-            end = shift_op_short_LSHL(vbb64, arrShorts, end, i);\n-            end = shift_op_short_ASHR(vbb64, arrShorts, end, i);\n-            end = shift_op_short_LSHR(vbb64, arrShorts, end, i);\n-        }\n-\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 64);\n-            }\n-        }\n-    }\n-\n-    static void shift_and_accumulate_shorts64(short arrShorts[][], boolean verify) {\n-        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 8) {\n-            end = start;\n-            ShortVector vba64 = ShortVector.fromArray(short64SPECIES, shortsA, i);\n-            ShortVector vbb64 = ShortVector.fromArray(short64SPECIES, shortsB, i);\n-            end = shift_op_short_ASHR_and_ADD(vba64, vbb64, arrShorts, end,    i);\n-            end = shift_op_short_LSHR_and_ADD(vba64, vbb64, arrShorts, end,    i);\n-        }\n-\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 64);\n-            }\n-        }\n-    }\n-\n-    static void shift_shorts128(short arrShorts[][], boolean verify) {\n-        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n+    static void shift(short arrShorts[][], boolean verify,\n+                      VectorSpecies<Short> vSpecies, int vlen) {\n+        int start = vlen \/ 128 * NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n@@ -351,1 +223,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 16) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 16) {\n@@ -353,5 +225,4 @@\n-            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, i);\n-            end = shift_op_short_LSHL(vbb128, arrShorts, end, i);\n-            end = shift_op_short_ASHR(vbb128, arrShorts, end, i);\n-            end = shift_op_short_LSHR(vbb128, arrShorts, end, i);\n-\n+            ShortVector vbb = ShortVector.fromArray(vSpecies, shortsB, i);\n+            end = shift_with_op(VectorOperators.LSHL, vbb, arrShorts, end, i);\n+            end = shift_with_op(VectorOperators.ASHR, vbb, arrShorts, end, i);\n+            end = shift_with_op(VectorOperators.LSHR, vbb, arrShorts, end, i);\n@@ -362,1 +233,1 @@\n-                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 128);\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, vlen);\n@@ -367,2 +238,3 @@\n-    static void shift_and_accumulate_shorts128(short arrShorts[][], boolean verify) {\n-        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+    static void shift_and_accumulate(short arrShorts[][], boolean verify,\n+                                     VectorSpecies<Short> vSpecies, int vlen) {\n+        int start = (ACCUMULATE_OP_S + vlen \/ 128 * NUM_OPS) * MAX_TESTS_PER_OP, end = 0;\n@@ -370,1 +242,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 16) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 16) {\n@@ -372,4 +244,4 @@\n-            ShortVector vba128 = ShortVector.fromArray(short128SPECIES, shortsA, i);\n-            ShortVector vbb128 = ShortVector.fromArray(short128SPECIES, shortsB, i);\n-            end = shift_op_short_ASHR_and_ADD(vba128, vbb128, arrShorts, end,    i);\n-            end = shift_op_short_LSHR_and_ADD(vba128, vbb128, arrShorts, end,    i);\n+            ShortVector vba = ShortVector.fromArray(vSpecies, shortsA, i);\n+            ShortVector vbb = ShortVector.fromArray(vSpecies, shortsB, i);\n+            end = shift_with_op_and_add(VectorOperators.ASHR, vba, vbb, arrShorts, end, i);\n+            end = shift_with_op_and_add(VectorOperators.LSHR, vba, vbb, arrShorts, end, i);\n@@ -380,1 +252,1 @@\n-                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, 128);\n+                assertTrue(\"SHORT\", Arrays.equals(tShorts[i], gShorts[i]), i, vlen);\n@@ -385,29 +257,3 @@\n-    static int shift_op_integer_LSHL(IntVector vbb, int arrIntegers[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHL, 17).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 53).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 64).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 76).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 96).intoArray(arrIntegers[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_integer_ASHR(IntVector vbb, int arrIntegers[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.ASHR, 17).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 53).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 64).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 76).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 96).intoArray(arrIntegers[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_integer_LSHR(IntVector vbb, int arrIntegers[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHR, 17).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 53).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 64).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 76).intoArray(arrIntegers[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 96).intoArray(arrIntegers[end++], ind);\n-        return end;\n-    }\n+    \/**\n+     * Tests for type int.\n+     *\/\n@@ -415,7 +261,8 @@\n-    static int shift_op_integer_ASHR_and_ADD(IntVector vba, IntVector vbb, int arrIntegers[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 17)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 53)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 64)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 76)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 96)).intoArray(arrIntegers[end++], ind);\n+    static int shift_with_op(VectorOperators.Binary op, IntVector vbb,\n+                             int arr[][], int end, int ind) {\n+        vbb.lanewise(op, 17).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 32).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 53).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 64).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 76).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 96).intoArray(arr[end++], ind);\n@@ -425,7 +272,9 @@\n-    static int shift_op_integer_LSHR_and_ADD(IntVector vba, IntVector vbb, int arrIntegers[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 17)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 53)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 64)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 76)).intoArray(arrIntegers[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 96)).intoArray(arrIntegers[end++], ind);\n+    static int shift_with_op_and_add(VectorOperators.Binary op,\n+                                     IntVector vba, IntVector vbb,\n+                                     int arr[][], int end, int ind) {\n+        vba.add(vbb.lanewise(op, 17)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 32)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 53)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 64)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 76)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 96)).intoArray(arr[end++], ind);\n@@ -435,2 +284,3 @@\n-    static void shift_integers64(int arrIntegers[][], boolean verify) {\n-        int start = 0, end = 0;\n+    static void shift(int arrIntegers[][], boolean verify,\n+                      VectorSpecies<Integer> vSpecies, int vlen) {\n+        int start = vlen \/ 128 * NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n@@ -438,1 +288,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 4) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 32) {\n@@ -440,4 +290,4 @@\n-            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB, i);\n-            end = shift_op_integer_LSHL(vbb64, arrIntegers, end, i);\n-            end = shift_op_integer_ASHR(vbb64, arrIntegers, end, i);\n-            end = shift_op_integer_LSHR(vbb64, arrIntegers, end, i);\n+            IntVector vbb = IntVector.fromArray(vSpecies, integersB, i);\n+            end = shift_with_op(VectorOperators.LSHL, vbb, arrIntegers, end, i);\n+            end = shift_with_op(VectorOperators.ASHR, vbb, arrIntegers, end, i);\n+            end = shift_with_op(VectorOperators.LSHR, vbb, arrIntegers, end, i);\n@@ -448,1 +298,1 @@\n-                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 64);\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, vlen);\n@@ -453,2 +303,3 @@\n-    static void shift_and_accumulate_integers64(int arrIntegers[][], boolean verify) {\n-        int start = ACCUMULATE_OP_S * MAX_TESTS_PER_OP, end = 0;\n+    static void shift_and_accumulate(int arrIntegers[][], boolean verify,\n+                                     VectorSpecies<Integer> vSpecies, int vlen) {\n+        int start = (ACCUMULATE_OP_S + vlen \/ 128 * NUM_OPS) * MAX_TESTS_PER_OP, end = 0;\n@@ -456,1 +307,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 4) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 32) {\n@@ -458,4 +309,4 @@\n-            IntVector vba64 = IntVector.fromArray(integer64SPECIES, integersA,  i);\n-            IntVector vbb64 = IntVector.fromArray(integer64SPECIES, integersB,  i);\n-            end = shift_op_integer_ASHR_and_ADD(vba64, vbb64, arrIntegers, end, i);\n-            end = shift_op_integer_LSHR_and_ADD(vba64, vbb64, arrIntegers, end, i);\n+            IntVector vba = IntVector.fromArray(vSpecies, integersA, i);\n+            IntVector vbb = IntVector.fromArray(vSpecies, integersB, i);\n+            end = shift_with_op_and_add(VectorOperators.ASHR, vba, vbb, arrIntegers, end, i);\n+            end = shift_with_op_and_add(VectorOperators.LSHR, vba, vbb, arrIntegers, end, i);\n@@ -466,1 +317,1 @@\n-                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 64);\n+                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, vlen);\n@@ -471,9 +322,3 @@\n-    static void shift_integers128(int arrIntegers[][], boolean verify) {\n-        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 8) {\n-            end = start;\n-            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB, i);\n-            end = shift_op_integer_LSHL(vbb128, arrIntegers, end, i);\n-            end = shift_op_integer_ASHR(vbb128, arrIntegers, end, i);\n-            end = shift_op_integer_LSHR(vbb128, arrIntegers, end, i);\n+    \/**\n+     * Tests for type long.\n+     *\/\n@@ -481,34 +326,8 @@\n-        }\n-\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 128);\n-            }\n-        }\n-    }\n-\n-    static void shift_and_accumulate_integers128(int arrIntegers[][], boolean verify) {\n-        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 8) {\n-            end = start;\n-            IntVector vba128 = IntVector.fromArray(integer128SPECIES, integersA,  i);\n-            IntVector vbb128 = IntVector.fromArray(integer128SPECIES, integersB,  i);\n-            end = shift_op_integer_ASHR_and_ADD(vba128, vbb128, arrIntegers, end, i);\n-            end = shift_op_integer_LSHR_and_ADD(vba128, vbb128, arrIntegers, end, i);\n-        }\n-\n-        if (verify) {\n-            for (int i = start; i < end; i++) {\n-                assertTrue(\"INTEGER\", Arrays.equals(tIntegers[i], gIntegers[i]), i, 128);\n-            }\n-        }\n-    }\n-\n-    static int shift_op_long_LSHL(LongVector vbb, long arrLongs[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHL, 37).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 64).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 99).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 128).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 157).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHL, 192).intoArray(arrLongs[end++], ind);\n+    static int shift_with_op(VectorOperators.Binary op, LongVector vbb,\n+                             long arr[][], int end, int ind) {\n+        vbb.lanewise(op, 37).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 64).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 99).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 128).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 157).intoArray(arr[end++], ind);\n+        vbb.lanewise(op, 192).intoArray(arr[end++], ind);\n@@ -518,7 +337,9 @@\n-    static int shift_op_long_ASHR(LongVector vbb, long arrLongs[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.ASHR, 37).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 64).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 99).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 128).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 157).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.ASHR, 192).intoArray(arrLongs[end++], ind);\n+    static int shift_with_op_and_add(VectorOperators.Binary op,\n+                                     LongVector vba, LongVector vbb,\n+                                     long arr[][], int end, int ind) {\n+        vba.add(vbb.lanewise(op, 37)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 64)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 99)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 128)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 157)).intoArray(arr[end++], ind);\n+        vba.add(vbb.lanewise(op, 192)).intoArray(arr[end++], ind);\n@@ -528,9 +349,3 @@\n-    static int shift_op_long_LSHR(LongVector vbb, long arrLongs[][], int end, int ind) {\n-        vbb.lanewise(VectorOperators.LSHR, 37).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 64).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 99).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 128).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 157).intoArray(arrLongs[end++], ind);\n-        vbb.lanewise(VectorOperators.LSHR, 192).intoArray(arrLongs[end++], ind);\n-        return end;\n-    }\n+    static void shift(long arrLongs[][], boolean verify,\n+                      VectorSpecies<Long> vSpecies, int vlen) {\n+        int start = vlen \/ 128 * NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n@@ -538,24 +353,1 @@\n-    static int shift_op_long_ASHR_and_ADD(LongVector vba, LongVector vbb, long arrLongs[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 37)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 64)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 99)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 128)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 157)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.ASHR, 192)).intoArray(arrLongs[end++], ind);\n-        return end;\n-    }\n-\n-    static int shift_op_long_LSHR_and_ADD(LongVector vba, LongVector vbb, long arrLongs[][], int end, int ind) {\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 37)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 64)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 99)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 128)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 157)).intoArray(arrLongs[end++], ind);\n-        vba.add(vbb.lanewise(VectorOperators.LSHR, 192)).intoArray(arrLongs[end++], ind);\n-        return end;\n-    }\n-\n-    static void shift_longs128(long arrLongs[][], boolean verify) {\n-        int start = NUM_OPS * MAX_TESTS_PER_OP, end = 0;\n-\n-        for (int i = 0; i < LARGE_LEN; i += 2) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 64) {\n@@ -563,5 +355,4 @@\n-            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, i);\n-            end = shift_op_long_LSHL(vbb128, arrLongs, end, i);\n-            end = shift_op_long_ASHR(vbb128, arrLongs, end, i);\n-            end = shift_op_long_LSHR(vbb128, arrLongs, end, i);\n-\n+            LongVector vbb = LongVector.fromArray(vSpecies, longsB, i);\n+            end = shift_with_op(VectorOperators.LSHL, vbb, arrLongs, end, i);\n+            end = shift_with_op(VectorOperators.ASHR, vbb, arrLongs, end, i);\n+            end = shift_with_op(VectorOperators.LSHR, vbb, arrLongs, end, i);\n@@ -572,1 +363,1 @@\n-                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, 128);\n+                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, vlen);\n@@ -577,2 +368,3 @@\n-    static void shift_and_accumulate_longs128(long arrLongs[][], boolean verify) {\n-        int start = (NUM_OPS + ACCUMULATE_OP_S) * MAX_TESTS_PER_OP, end = 0;\n+    static void shift_and_accumulate(long arrLongs[][], boolean verify,\n+                                     VectorSpecies<Long> vSpecies, int vlen) {\n+        int start = (ACCUMULATE_OP_S + vlen \/ 128 * NUM_OPS) * MAX_TESTS_PER_OP, end = 0;\n@@ -580,1 +372,1 @@\n-        for (int i = 0; i < LARGE_LEN; i += 2) {\n+        for (int i = 0; i < ARR_LEN; i += vlen \/ 64) {\n@@ -582,4 +374,4 @@\n-            LongVector vba128 = LongVector.fromArray(long128SPECIES, longsA, i);\n-            LongVector vbb128 = LongVector.fromArray(long128SPECIES, longsB, i);\n-            end = shift_op_long_ASHR_and_ADD(vba128, vbb128, arrLongs, end,  i);\n-            end = shift_op_long_LSHR_and_ADD(vba128, vbb128, arrLongs, end,  i);\n+            LongVector vba = LongVector.fromArray(vSpecies, longsA, i);\n+            LongVector vbb = LongVector.fromArray(vSpecies, longsB, i);\n+            end = shift_with_op_and_add(VectorOperators.ASHR, vba, vbb, arrLongs, end, i);\n+            end = shift_with_op_and_add(VectorOperators.LSHR, vba, vbb, arrLongs, end, i);\n@@ -590,1 +382,1 @@\n-                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, 128);\n+                assertTrue(\"LONG\", Arrays.equals(tLongs[i], gLongs[i]), i, vlen);\n@@ -596,1 +388,1 @@\n-        int count = LARGE_LEN;\n+        int count = ARR_LEN;\n@@ -630,15 +422,17 @@\n-        shift_bytes64(gBytes,        false);\n-        shift_bytes128(gBytes,       false);\n-        shift_shorts64(gShorts,      false);\n-        shift_shorts128(gShorts,     false);\n-        shift_integers64(gIntegers,  false);\n-        shift_integers128(gIntegers, false);\n-        shift_longs128(gLongs,       false);\n-\n-        shift_and_accumulate_bytes64(gBytes,        false);\n-        shift_and_accumulate_bytes128(gBytes,       false);\n-        shift_and_accumulate_shorts64(gShorts,      false);\n-        shift_and_accumulate_shorts128(gShorts,     false);\n-        shift_and_accumulate_integers64(gIntegers,  false);\n-        shift_and_accumulate_integers128(gIntegers, false);\n-        shift_and_accumulate_longs128(gLongs,       false);\n+        shift(gBytes, false, byte64SPECIES,  64);\n+        shift(gBytes, false, byte128SPECIES, 128);\n+        shift_and_accumulate(gBytes, false, byte64SPECIES,  64);\n+        shift_and_accumulate(gBytes, false, byte128SPECIES, 128);\n+\n+        shift(gShorts, false, short64SPECIES,  64);\n+        shift(gShorts, false, short128SPECIES, 128);\n+        shift_and_accumulate(gShorts, false, short64SPECIES,  64);\n+        shift_and_accumulate(gShorts, false, short128SPECIES, 128);\n+\n+        shift(gIntegers, false, integer64SPECIES,  64);\n+        shift(gIntegers, false, integer128SPECIES, 128);\n+        shift_and_accumulate(gIntegers, false, integer64SPECIES,  64);\n+        shift_and_accumulate(gIntegers, false, integer128SPECIES, 128);\n+\n+        shift(gLongs, false, long128SPECIES, 128);\n+        shift_and_accumulate(gLongs, false, long128SPECIES, 128);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShiftImm.java","additions":200,"deletions":406,"binary":false,"changes":606,"status":"modified"}]}