{"files":[{"patch":"@@ -5266,3 +5266,8 @@\n-    if (sh >= 8) sh = 7;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 8) sh = 7;\n+      __ sshr(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5280,3 +5285,8 @@\n-    if (sh >= 8) sh = 7;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 8) sh = 7;\n+      __ sshr(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5295,1 +5305,4 @@\n-    if (sh >= 8) {\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh >= 8) {\n@@ -5297,2 +5310,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -5301,1 +5313,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5314,1 +5326,4 @@\n-    if (sh >= 8) {\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh >= 8) {\n@@ -5316,2 +5331,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -5320,1 +5334,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5470,3 +5484,8 @@\n-    if (sh >= 16) sh = 15;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T4H,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 16) sh = 15;\n+      __ sshr(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5484,3 +5503,8 @@\n-    if (sh >= 16) sh = 15;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T8H,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 16) sh = 15;\n+      __ sshr(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5499,1 +5523,4 @@\n-    if (sh >= 16) {\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh >= 16) {\n@@ -5501,2 +5528,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -5505,1 +5531,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5518,1 +5544,4 @@\n-    if (sh >= 16) {\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh >= 16) {\n@@ -5520,2 +5549,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -5524,1 +5552,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5656,3 +5684,8 @@\n-    __ sshr(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ sshr(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5669,3 +5702,8 @@\n-    __ sshr(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ sshr(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5682,3 +5720,8 @@\n-    __ ushr(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5695,3 +5738,8 @@\n-    __ ushr(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5768,3 +5816,8 @@\n-    __ sshr(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ sshr(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5781,3 +5834,8 @@\n-    __ ushr(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5795,3 +5853,8 @@\n-    if (sh >= 8) sh = 7;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 8) sh = 7;\n+      __ ssra(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5809,3 +5872,8 @@\n-    if (sh >= 8) sh = 7;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 8) sh = 7;\n+      __ ssra(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5823,3 +5891,8 @@\n-    if (sh >= 16) sh = 15;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T4H,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 16) sh = 15;\n+      __ ssra(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($src$$reg), sh);\n+    };\n@@ -5837,3 +5910,8 @@\n-    if (sh >= 16) sh = 15;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T8H,\n-           as_FloatRegister($src$$reg), sh);\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      if (sh >= 16) sh = 15;\n+      __ ssra(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($src$$reg), sh);\n+    };\n@@ -5850,3 +5928,8 @@\n-    __ ssra(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ssra(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5863,3 +5946,8 @@\n-    __ ssra(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ssra(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5876,3 +5964,8 @@\n-    __ ssra(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ ssra(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5890,1 +5983,4 @@\n-    if (sh < 8) {\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh < 8) {\n@@ -5892,1 +5988,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5905,1 +6001,4 @@\n-    if (sh < 8) {\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh < 8) {\n@@ -5907,1 +6006,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5920,1 +6019,4 @@\n-    if (sh < 16) {\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh < 16) {\n@@ -5922,1 +6024,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5935,1 +6037,4 @@\n-    if (sh < 16) {\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else if (sh < 16) {\n@@ -5937,1 +6042,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5949,3 +6054,8 @@\n-    __ usra(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ usra(as_FloatRegister($dst$$reg), __ T2S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5962,3 +6072,8 @@\n-    __ usra(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ usra(as_FloatRegister($dst$$reg), __ T4S,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n@@ -5975,3 +6090,8 @@\n-    __ usra(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n+    int sh = (int)$shift$$constant;\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {\n+      __ usra(as_FloatRegister($dst$$reg), __ T2D,\n+              as_FloatRegister($src$$reg), sh);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":204,"deletions":84,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2051,5 +2051,1 @@\n-  ins_encode %{ifelse($4, B,`\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+  ins_encode %{\n@@ -2057,6 +2053,13 @@\n-    if (sh >= 16) sh = 15;\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);')\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+    } else {ifelse($4, B,`\n+      if (sh >= 8) sh = 7;\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);', $4, S,`\n+      if (sh >= 16) sh = 15;\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);', `\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);')\n+    }\n@@ -2076,1 +2079,1 @@\n-  ins_encode %{ifelse($4, B,`\n+  ins_encode %{\n@@ -2078,1 +2081,4 @@\n-    if (sh >= 8) {\n+    if (sh == 0) {\n+      __ orr(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));ifelse($4, B,`\n+    } else if (sh >= 8) {\n@@ -2080,2 +2086,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -2084,1 +2089,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -2086,2 +2091,1 @@\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) {\n+    } else if (sh >= 16) {\n@@ -2089,2 +2093,1 @@\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n+             as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n@@ -2093,1 +2096,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -2095,3 +2098,4 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);')\n+    } else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);\n+    }')\n@@ -2108,1 +2112,1 @@\n-  ins_encode %{ifelse($4, B,`\n+  ins_encode %{\n@@ -2110,1 +2114,4 @@\n-    if (sh < 8) {\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    ifelse($4, B,`} else if (sh < 8) {\n@@ -2112,4 +2119,2 @@\n-             as_FloatRegister($src$$reg), sh);\n-    }', $4, S,`\n-    int sh = (int)$shift$$constant;\n-    if (sh < 16) {\n+              as_FloatRegister($src$$reg), sh);\n+    }', $4, S,`} else if (sh < 16) {\n@@ -2117,5 +2122,5 @@\n-             as_FloatRegister($src$$reg), sh);\n-    }', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);')\n+              as_FloatRegister($src$$reg), sh);\n+    }', `} else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);\n+    }')\n@@ -2132,5 +2137,1 @@\n-  ins_encode %{ifelse($4, B,`\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+  ins_encode %{\n@@ -2138,6 +2139,15 @@\n-    if (sh >= 16) sh = 15;\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);')\n+    if (sh == 0) {\n+      __ addv(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    } else {ifelse($4, B,`\n+      if (sh >= 8) sh = 7;\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);\n+    }', $4, S,`\n+      if (sh >= 16) sh = 15;\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);\n+    };', `\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+              as_FloatRegister($src$$reg), sh);\n+    }')\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":56,"deletions":46,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,494 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import java.util.Random;\n+import java.util.Arrays;\n+\n+import jdk.incubator.vector.*;\n+\n+\/**\n+ * @test\n+ * @bug 8261142\n+ * @summary AArch64: Incorrect instruction encoding when right-shifting vectors with shift amount equals to the element width\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-EnableVectorReboxing compiler.vectorapi.TestVectorShiftImm\n+ *\/\n+\n+public class TestVectorShiftImm {\n+    private static final int LARGE_LEN = 128;\n+    private static final int NUM_ITERS = 200000;\n+\n+    private static final int NUM_OPS          = 5;\n+    private static final int MAX_TESTS_PER_OP = 6;\n+\n+    private static byte[]  bytesA,    bytesB;\n+    private static short[] shortsA,   shortsB;\n+    private static int[]   integersA, integersB;\n+    private static long[]  longsA,    longsB;\n+\n+    private static byte  tBytes[][],    gBytes[][];\n+    private static short tShorts[][],   gShorts[][];\n+    private static int   tIntegers[][], gIntegers[][];\n+    private static long  tLongs[][],    gLongs[][];\n+\n+    private static Random r = new Random(32781);\n+\n+    static final VectorSpecies<Byte> byte64SPECIES  = ByteVector.SPECIES_64;\n+    static final VectorSpecies<Byte> byte128SPECIES = ByteVector.SPECIES_128;\n+\n+    static final VectorSpecies<Short> short64SPECIES  = ShortVector.SPECIES_64;\n+    static final VectorSpecies<Short> short128SPECIES = ShortVector.SPECIES_128;\n+\n+    static final VectorSpecies<Integer> integer64SPECIES  = IntVector.SPECIES_64;\n+    static final VectorSpecies<Integer> integer128SPECIES = IntVector.SPECIES_128;\n+\n+    static final VectorSpecies<Long> long128SPECIES = LongVector.SPECIES_128;\n+\n+    static String[] opNames = {\"LSHL\", \"ASHR\", \"LSHR\", \"ASHRACC\", \"LSHRACC\"};\n+\n+    public static void main(String args[]) {\n+        test_init();\n+\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            test_vector_api_bytes();\n+            test_vector_api_shorts();\n+            test_vector_api_integers();\n+            test_vector_api_longs();\n+        }\n+\n+        System.out.println(\"Test PASSED\");\n+    }\n+\n+    static void test_vector_api_bytes() {\n+         shift_bytes(tBytes, true);\n+    }\n+\n+    static void shift_bytes(byte arrBytes[][], boolean verify) {\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            int op = 0;\n+            ByteVector vba = ByteVector.fromArray(byte64SPECIES, bytesA, 8 * i);\n+            ByteVector vbb = ByteVector.fromArray(byte64SPECIES, bytesB, 8 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[op], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[op  + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[op + 4], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[op + 5], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[op], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[op + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[op], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[op + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[op], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[op + 1], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[op + 3], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[op], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[op + 1], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[op + 3], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[op + 3], 8 * i);\n+        }\n+\n+        for (int i = 0; i < LARGE_LEN \/ 16; i++) {\n+            int op = 0;\n+            ByteVector vba = ByteVector.fromArray(byte128SPECIES, bytesA, 16 * i);\n+            ByteVector vbb = ByteVector.fromArray(byte128SPECIES, bytesB, 16 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 1).intoArray(arrBytes[op], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 8).intoArray(arrBytes[op  + 1], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 13).intoArray(arrBytes[op + 2], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrBytes[op + 3], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 19).intoArray(arrBytes[op + 4], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 24).intoArray(arrBytes[op + 5], 16 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 1).intoArray(arrBytes[op], 16 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 8).intoArray(arrBytes[op + 1], 16 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 13).intoArray(arrBytes[op + 2], 16 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrBytes[op + 2], 16 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 19).intoArray(arrBytes[op + 3], 16 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 24).intoArray(arrBytes[op + 3], 16 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 1).intoArray(arrBytes[op], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 8).intoArray(arrBytes[op + 1], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 13).intoArray(arrBytes[op + 2], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrBytes[op + 2], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 19).intoArray(arrBytes[op + 3], 16 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 24).intoArray(arrBytes[op + 3], 16 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 1)).intoArray(arrBytes[op], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 8)).intoArray(arrBytes[op + 1], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 13)).intoArray(arrBytes[op + 2], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrBytes[op + 2], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 19)).intoArray(arrBytes[op + 3], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 24)).intoArray(arrBytes[op + 3], 16 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 1)).intoArray(arrBytes[op], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 8)).intoArray(arrBytes[op + 1], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 13)).intoArray(arrBytes[op + 2], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrBytes[op + 2], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 19)).intoArray(arrBytes[op + 3], 16 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 24)).intoArray(arrBytes[op + 3], 16 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = 0; i < NUM_OPS * MAX_TESTS_PER_OP; i++) {\n+                assertTrue(Arrays.equals(tBytes[i], gBytes[i]), i);\n+            }\n+        }\n+    }\n+\n+    static void test_vector_api_shorts() {\n+         shift_shorts(tShorts, true);\n+    }\n+\n+    static void shift_shorts(short arrShorts[][], boolean verify) {\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            int op = 0;\n+            ShortVector vba = ShortVector.fromArray(short64SPECIES, shortsA, 4 * i);\n+            ShortVector vbb = ShortVector.fromArray(short64SPECIES, shortsB, 4 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrShorts[op], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[op  + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrShorts[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrShorts[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 35).intoArray(arrShorts[op + 4], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrShorts[op + 5], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrShorts[op], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[op + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrShorts[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrShorts[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 35).intoArray(arrShorts[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrShorts[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrShorts[op], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[op + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrShorts[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrShorts[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 35).intoArray(arrShorts[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrShorts[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrShorts[op], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[op + 1], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrShorts[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrShorts[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 35)).intoArray(arrShorts[op + 3], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrShorts[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrShorts[op], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[op + 1], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrShorts[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrShorts[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 35)).intoArray(arrShorts[op + 3], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrShorts[op + 3], 4 * i);\n+        }\n+\n+        for (int i = 0; i < LARGE_LEN \/ 8; i++) {\n+            int op = 0;\n+            ShortVector vba = ShortVector.fromArray(short128SPECIES, shortsA, 8 * i);\n+            ShortVector vbb = ShortVector.fromArray(short128SPECIES, shortsB, 8 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrShorts[op], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrShorts[op  + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrShorts[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrShorts[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 35).intoArray(arrShorts[op + 4], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrShorts[op + 5], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrShorts[op], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrShorts[op + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrShorts[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrShorts[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 35).intoArray(arrShorts[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrShorts[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrShorts[op], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrShorts[op + 1], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrShorts[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrShorts[op + 2], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 35).intoArray(arrShorts[op + 3], 8 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrShorts[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrShorts[op], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrShorts[op + 1], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrShorts[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrShorts[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 35)).intoArray(arrShorts[op + 3], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrShorts[op + 3], 8 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrShorts[op], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrShorts[op + 1], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrShorts[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrShorts[op + 2], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 35)).intoArray(arrShorts[op + 3], 8 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrShorts[op + 3], 8 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = 0; i < NUM_OPS * MAX_TESTS_PER_OP; i++) {\n+                assertTrue(Arrays.equals(tShorts[i], gShorts[i]), i);\n+            }\n+        }\n+    }\n+\n+    static void test_vector_api_integers() {\n+         shift_integers(tIntegers, true);\n+    }\n+\n+    static void shift_integers(int arrIntegers[][], boolean verify) {\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            int op = 0;\n+            IntVector vba = IntVector.fromArray(integer64SPECIES, integersA, 2 * i);\n+            IntVector vbb = IntVector.fromArray(integer64SPECIES, integersB, 2 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrIntegers[op], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrIntegers[op  + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrIntegers[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrIntegers[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 35).intoArray(arrIntegers[op + 4], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrIntegers[op + 5], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrIntegers[op], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrIntegers[op + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrIntegers[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrIntegers[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 35).intoArray(arrIntegers[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrIntegers[op + 3], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrIntegers[op], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrIntegers[op + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrIntegers[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrIntegers[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 35).intoArray(arrIntegers[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrIntegers[op + 3], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrIntegers[op], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrIntegers[op + 1], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrIntegers[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrIntegers[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 35)).intoArray(arrIntegers[op + 3], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrIntegers[op + 3], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrIntegers[op], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrIntegers[op + 1], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrIntegers[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrIntegers[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 35)).intoArray(arrIntegers[op + 3], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrIntegers[op + 3], 2 * i);\n+        }\n+\n+        for (int i = 0; i < LARGE_LEN \/ 4; i++) {\n+            int op = 0;\n+            IntVector vba = IntVector.fromArray(integer128SPECIES, integersA, 4 * i);\n+            IntVector vbb = IntVector.fromArray(integer128SPECIES, integersB, 4 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 9).intoArray(arrIntegers[op], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 16).intoArray(arrIntegers[op  + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 27).intoArray(arrIntegers[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 32).intoArray(arrIntegers[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 35).intoArray(arrIntegers[op + 4], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 48).intoArray(arrIntegers[op + 5], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 9).intoArray(arrIntegers[op], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 16).intoArray(arrIntegers[op + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 27).intoArray(arrIntegers[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 32).intoArray(arrIntegers[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 35).intoArray(arrIntegers[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 48).intoArray(arrIntegers[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 9).intoArray(arrIntegers[op], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 16).intoArray(arrIntegers[op + 1], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 27).intoArray(arrIntegers[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 32).intoArray(arrIntegers[op + 2], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 35).intoArray(arrIntegers[op + 3], 4 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 48).intoArray(arrIntegers[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 9)).intoArray(arrIntegers[op], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 16)).intoArray(arrIntegers[op + 1], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 27)).intoArray(arrIntegers[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 32)).intoArray(arrIntegers[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 35)).intoArray(arrIntegers[op + 3], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 48)).intoArray(arrIntegers[op + 3], 4 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 9)).intoArray(arrIntegers[op], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 16)).intoArray(arrIntegers[op + 1], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 27)).intoArray(arrIntegers[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 32)).intoArray(arrIntegers[op + 2], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 35)).intoArray(arrIntegers[op + 3], 4 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 48)).intoArray(arrIntegers[op + 3], 4 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = 0; i < NUM_OPS * MAX_TESTS_PER_OP; i++) {\n+                assertTrue(Arrays.equals(tIntegers[i], gIntegers[i]), i);\n+            }\n+        }\n+    }\n+\n+    static void test_vector_api_longs() {\n+         shift_longs(tLongs, true);\n+    }\n+\n+    static void shift_longs(long arrLongs[][], boolean verify) {\n+        for (int i = 0; i < LARGE_LEN \/ 2; i++) {\n+            int op = 0;\n+            LongVector vba = LongVector.fromArray(long128SPECIES, longsA, 2 * i);\n+            LongVector vbb = LongVector.fromArray(long128SPECIES, longsB, 2 * i);\n+\n+            vbb.lanewise(VectorOperators.LSHL, 37).intoArray(arrLongs[op], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 64).intoArray(arrLongs[op  + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 99).intoArray(arrLongs[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 128).intoArray(arrLongs[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 157).intoArray(arrLongs[op + 4], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHL, 192).intoArray(arrLongs[op + 5], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.ASHR, 37).intoArray(arrLongs[op], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 64).intoArray(arrLongs[op  + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 99).intoArray(arrLongs[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 128).intoArray(arrLongs[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 157).intoArray(arrLongs[op + 4], 2 * i);\n+            vbb.lanewise(VectorOperators.ASHR, 192).intoArray(arrLongs[op + 5], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vbb.lanewise(VectorOperators.LSHR, 37).intoArray(arrLongs[op], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 64).intoArray(arrLongs[op  + 1], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 99).intoArray(arrLongs[op + 2], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 128).intoArray(arrLongs[op + 3], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 157).intoArray(arrLongs[op + 4], 2 * i);\n+            vbb.lanewise(VectorOperators.LSHR, 192).intoArray(arrLongs[op + 5], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 37)).intoArray(arrLongs[op], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 64)).intoArray(arrLongs[op + 1], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 99)).intoArray(arrLongs[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 128)).intoArray(arrLongs[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 157)).intoArray(arrLongs[op + 3], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.ASHR, 192)).intoArray(arrLongs[op + 3], 2 * i);\n+            op += MAX_TESTS_PER_OP;\n+\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 37)).intoArray(arrLongs[op], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 64)).intoArray(arrLongs[op + 1], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 99)).intoArray(arrLongs[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 128)).intoArray(arrLongs[op + 2], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 157)).intoArray(arrLongs[op + 3], 2 * i);\n+            vba.add(vbb.lanewise(VectorOperators.LSHR, 192)).intoArray(arrLongs[op + 3], 2 * i);\n+        }\n+\n+        if (verify) {\n+            for (int i = 0; i < NUM_OPS * MAX_TESTS_PER_OP; i++) {\n+                assertTrue(Arrays.equals(tLongs[i], gLongs[i]), i);\n+            }\n+        }\n+    }\n+\n+    static void test_init() {\n+        int count = LARGE_LEN;\n+\n+        bytesA    = new byte[count];\n+        shortsA   = new short[count];\n+        integersA = new int[count];\n+        longsA    = new long[count];\n+\n+        bytesB    = new byte[count];\n+        shortsB   = new short[count];\n+        integersB = new int[count];\n+        longsB    = new long[count];\n+\n+        tBytes    = new byte[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tShorts   = new short[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tIntegers = new int[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        tLongs    = new long[MAX_TESTS_PER_OP * NUM_OPS][count];\n+\n+        gBytes    = new byte[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gShorts   = new short[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gIntegers = new int[MAX_TESTS_PER_OP * NUM_OPS][count];\n+        gLongs    = new long[MAX_TESTS_PER_OP * NUM_OPS][count];\n+\n+        for (int i = 0; i < count; i++) {\n+            bytesA[i]    = (byte) r.nextInt();\n+            shortsA[i]   = (short) r.nextInt();\n+            integersA[i] = r.nextInt();\n+            longsA[i]    = r.nextLong();\n+\n+            bytesB[i]    = (byte) r.nextInt();\n+            shortsB[i]   = (short) r.nextInt();\n+            integersB[i] = r.nextInt();\n+            longsB[i]    = r.nextLong();\n+        }\n+\n+        shift_bytes(gBytes,   false);\n+        shift_shorts(gShorts, false);\n+        shift_integers(gIntegers, false);\n+        shift_longs(gLongs, false);\n+    }\n+\n+    static void assertTrue(boolean okay, int i) {\n+        if (!okay) {\n+            throw new RuntimeException(\"Test Failed, verify index \" + i + \", shift operation \" + opNames[i \/ MAX_TESTS_PER_OP]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShiftImm.java","additions":494,"deletions":0,"binary":false,"changes":494,"status":"added"}]}