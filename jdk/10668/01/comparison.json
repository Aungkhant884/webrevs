{"files":[{"patch":"@@ -2096,1 +2096,4 @@\n-  if (PrintCompilation) {\n+  elapsedTimer time;\n+\n+  DirectiveSet* directive = task->directive();\n+  if (directive->PrintCompilationOption) {\n@@ -2100,1 +2103,0 @@\n-  elapsedTimer time;\n@@ -2117,2 +2119,0 @@\n-\n-  DirectiveSet* directive;\n@@ -2125,1 +2125,0 @@\n-    assert(!method->is_native(), \"no longer compile natives\");\n@@ -2127,3 +2126,1 @@\n-    \/\/ Look up matching directives\n-    directive = DirectivesStack::getMatchingDirective(method, comp);\n-    task->set_directive(directive);\n+    assert(!method->is_native(), \"no longer compile natives\");\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -120,1 +120,2 @@\n-  _directive = NULL;\n+  AbstractCompiler* comp = compiler();\n+  _directive = DirectivesStack::getMatchingDirective(method, comp);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  const DirectiveSet*  _directive;\n+  DirectiveSet*  _directive;\n@@ -130,2 +130,2 @@\n-  void         set_directive(const DirectiveSet* directive) { _directive = directive; }\n-  const DirectiveSet* directive() const          { return _directive; }\n+  void         set_directive(DirectiveSet* directive) { _directive = directive; }\n+  DirectiveSet* directive()                      { return _directive; }\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    cflags(PrintCompilation,        bool, PrintCompilation, PrintCompilation) \\\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+  option(PrintCompilation, \"PrintCompilation\", Bool) \\\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255746\n+ * @summary Checks that -XX:CompileCommand=PrintCompilation,... works\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver compiler.print.CompileCommandPrintCompilation\n+ *\/\n+\n+package compiler.print;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class CompileCommandPrintCompilation {\n+\n+    final static String METHOD1 = \"method1\";\n+    final static String METHOD2 = \"method2\";\n+\n+    public static void main(String[] args) throws Exception {\n+        test(METHOD1, METHOD2);\n+        test(METHOD2, METHOD1);\n+    }\n+\n+    private static void test(String include, String exclude) throws Exception {\n+        List<String> options = new ArrayList<String>();\n+        options.add(\"-Xcomp\");\n+        options.add(\"-XX:-Inline\");\n+        options.add(\"-XX:CompileCommand=compileonly,\" + getTestClass() + \"::*\");\n+        options.add(\"-XX:CompileCommand=PrintCompilation,\" + getTestMethod(include));\n+        options.add(getTestClass());\n+\n+        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(getTestMethod(include))\n+        .shouldNotContain(getTestMethod(exclude));\n+    }\n+\n+    \/\/ Test class that is invoked by the sub process\n+    public static String getTestClass() {\n+        return TestMain.class.getName();\n+    }\n+\n+    public static String getTestMethod(String method) {\n+        return getTestClass() + \"::\" + method;\n+    }\n+\n+    public static class TestMain {\n+        public static void main(String[] args) {\n+            method1();\n+            method2();\n+        }\n+\n+        static void method1() {}\n+        static void method2() {}\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintCompilation.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Checks that -XX:PrintCompilation works\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver compiler.print.PrintCompilation\n+ *\/\n+\n+package compiler.print;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class PrintCompilation {\n+\n+    public static void main(String[] args) throws Exception {\n+        List<String> options = new ArrayList<String>();\n+        options.add(\"-XX:+PrintCompilation\");\n+        options.add(\"-Xcomp\");\n+        options.add(\"-XX:-Inline\");\n+        options.add(\"-XX:CompileCommand=compileonly,\" + getTestClass() + \"::*\");\n+        options.add(getTestClass());\n+\n+        OutputAnalyzer oa = ProcessTools.executeTestJvm(options);\n+\n+        oa.shouldHaveExitValue(0)\n+        .shouldContain(getTestMethod(\"method1\"))\n+        .shouldContain(getTestMethod(\"method2\"))\n+        .shouldContain(getTestMethod(\"method3\"))\n+        .shouldNotContain(getTestMethod(\"notcalled\"));\n+    }\n+\n+    \/\/ Test class that is invoked by the sub process\n+    public static String getTestClass() {\n+        return TestMain.class.getName();\n+    }\n+\n+    public static String getTestMethod(String method) {\n+        return getTestClass() + \"::\" + method;\n+    }\n+\n+    public static class TestMain {\n+        public static void main(String[] args) {\n+            method1();\n+            method2();\n+            method3();\n+        }\n+\n+        static void method1() { System.out.println(\"method1()\"); }\n+        static void method2() {}\n+        static void method3() {}\n+        static void notcalled() {}\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/PrintCompilation.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -46,1 +46,0 @@\n-    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n@@ -51,3 +50,0 @@\n-    private static final String METHOD = TEST_NAME + \"::method\";\n-    private static final String METHOD1 = METHOD + \"1\";\n-    private static final String METHOD2 = METHOD + \"2\";\n@@ -56,13 +52,4 @@\n-        if (args.length == 0) {\n-            VmFlagTest.runTest(FLAG_NAME, TESTS,\n-                VmFlagTest.WHITE_BOX::setBooleanVMFlag,\n-                VmFlagTest.WHITE_BOX::getBooleanVMFlag);\n-            testFunctional(false);\n-            testFunctional(true);\n-            VmFlagTest.runTest(FLAG_DEBUG_NAME, VmFlagTest.WHITE_BOX::getBooleanVMFlag);\n-        } else {\n-            boolean value = Boolean.valueOf(args[0]);\n-            method1();\n-            VmFlagTest.WHITE_BOX.setBooleanVMFlag(FLAG_NAME, value);\n-            method2();\n-        }\n+        VmFlagTest.runTest(FLAG_NAME, TESTS,\n+            VmFlagTest.WHITE_BOX::setBooleanVMFlag,\n+            VmFlagTest.WHITE_BOX::getBooleanVMFlag);\n+        VmFlagTest.runTest(FLAG_DEBUG_NAME, VmFlagTest.WHITE_BOX::getBooleanVMFlag);\n@@ -70,23 +57,0 @@\n-\n-    private static void testFunctional(boolean value) throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xbootclasspath\/a:.\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+WhiteBoxAPI\",\n-            \"-Xcomp\",\n-            \"-XX:CompileCommand=compileonly,\" + METHOD + \"*\",\n-            \"-XX:\" + (value ? \"-\" : \"+\") + FLAG_NAME,\n-            TEST_NAME,\n-            \"\" + value);\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        if (value) {\n-            out.shouldNotContain(METHOD1);\n-            out.shouldContain(METHOD2);\n-        } else {\n-            out.shouldContain(METHOD1);\n-            out.shouldNotContain(METHOD2);\n-        }\n-    }\n-\n-    private static void method1() { }\n-    private static void method2() { }\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/BooleanTest.java","additions":4,"deletions":40,"binary":false,"changes":44,"status":"modified"}]}