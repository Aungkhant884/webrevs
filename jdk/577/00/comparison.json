{"files":[{"patch":"@@ -409,0 +409,4 @@\n+  assert(Thread::current() == _handshakee, \"should call from _handshakee\");\n+  assert(!_handshakee->is_terminated(), \"should not be a terminated thread\");\n+  assert(_handshakee->thread_state() != _thread_blocked, \"should not be in a blocked state\");\n+  assert(_handshakee->thread_state() != _thread_in_native, \"should not be in native\");\n@@ -417,5 +421,0 @@\n-  assert(Thread::current() == _handshakee, \"should call from _handshakee\");\n-  assert(!_handshakee->is_terminated(), \"should not be a terminated thread\");\n-  assert(_handshakee->thread_state() != _thread_blocked, \"should not be in a blocked state\");\n-  assert(_handshakee->thread_state() != _thread_in_native, \"should not be in native\");\n-\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -131,14 +131,0 @@\n-\n-  void transition_back() {\n-    \/\/ This can be invoked from transition states and must return to the original state properly\n-    assert(_thread->thread_state() == _thread_in_vm, \"should only call when leaving VM after handshake\");\n-\n-    _thread->set_thread_state(_original_state);\n-\n-    if (_original_state != _thread_blocked_trans &&  _original_state != _thread_in_vm_trans &&\n-        _thread->has_special_runtime_exit_condition()) {\n-      _thread->handle_special_runtime_exit_condition(\n-          !_thread->is_at_poll_safepoint() && (_original_state != _thread_in_native_trans));\n-    }\n-  }\n-\n@@ -146,1 +132,0 @@\n-\n@@ -161,1 +146,2 @@\n-    transition_back();\n+    assert(_thread->thread_state() == _thread_in_vm, \"should only call when leaving VM after handshake\");\n+    _thread->set_thread_state(_original_state);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    SafepointSynchronize::block(thread);\n+    SafepointSynchronize::block(thread); \/\/ Recursive\n@@ -95,1 +95,1 @@\n-    thread->handshake_state()->process_by_self(); \/\/ Recursive\n+    thread->handshake_state()->process_by_self();\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}