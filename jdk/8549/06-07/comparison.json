{"files":[{"patch":"@@ -661,1 +661,1 @@\n-  guarantee(!is_zombie || result->is_locked_by_vm() || VMError::is_error_reported() || is_in_asgct, \"unsafe access to zombie method\");\n+  guarantee(!is_zombie || result->is_locked_by_vm() || VMError::is_error_reported() || is_in_asgct(), \"unsafe access to zombie method\");\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-  thread->set_in_asgct(true);\n+  ASGCTMark mark;\n@@ -652,1 +652,0 @@\n-  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"memory\/allocation.hpp\"\n+\n@@ -37,0 +39,18 @@\n+\/\/ A small RAII mark class to manage 'in_asgct' thread status\n+class ASGCTMark : public StackObj {\n+ private:\n+  \/\/ NONCOPYABLE(ASGCTMark);\n+  ASGCTMark(JavaThread* thread) {\n+    if (thread != nullptr) {\n+      assert(thread == JavaThread::current(), \"not the current thread\");\n+      thread->set_in_asgct(true);\n+    }\n+  }\n+\n+ public:\n+  ASGCTMark() : ASGCTMark(JavaThread::current()) {}\n+  ~ASGCTMark() {\n+    JavaThread::current()->set_in_asgct(false);\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/prims\/forte.hpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}