{"files":[{"patch":"@@ -654,0 +654,6 @@\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  if (current_thread != NULL && current_thread->is_Java_thread() && JavaThread::cast(current_thread)->in_asgct()) {\n+    \/\/ If called from ASGCT the usual invariants may not apply so if we find\n+    \/\/ a zombie method just return NULL\n+    return (result == NULL || result->is_zombie()) ? NULL : result;\n+  }\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -594,0 +594,1 @@\n+  thread->set_in_asgct(true);\n@@ -651,0 +652,1 @@\n+  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -995,0 +995,1 @@\n+  _in_asgct(fasle),\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -684,0 +684,1 @@\n+  bool           _in_asgct;                      \/\/ Is set when this JavaThread is handling ASGCT call\n@@ -1648,0 +1649,5 @@\n+\n+\n+  \/\/ AsyncGetCallTrace support\n+  inline bool in_asgct(void) {return _in_asgct;}\n+  inline void set_in_asgct(bool value) {_in_asgct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}