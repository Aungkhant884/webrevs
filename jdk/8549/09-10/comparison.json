{"files":[{"patch":"@@ -594,1 +594,3 @@\n-  ASGCTMark mark(thread);\n+  \/\/ !important! make sure all return points will reset the IN_ASGCT flag to 'false'\n+  thread->set_in_asgct(true);\n+\n@@ -652,0 +654,1 @@\n+  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,21 +39,0 @@\n-\/\/ A small RAII mark class to manage 'in_asgct' thread status\n-class ASGCTMark : public StackObj {\n- private:\n-  JavaThread* _thread;\n-  NONCOPYABLE(ASGCTMark);\n-\n- public:\n-  ASGCTMark(JavaThread* thread) : _thread(thread) {\n-    if (_thread != nullptr) {\n-      assert(_thread == Thread::current_or_null_safe(), \"not the current thread\");\n-      _thread->set_in_asgct(true);\n-    }\n-  }\n-  ~ASGCTMark() {\n-    if (_thread != nullptr) {\n-      assert(_thread == Thread::current_or_null_safe(), \"not the current thread\");\n-      _thread->set_in_asgct(false);\n-    }\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/prims\/forte.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"}]}