{"files":[{"patch":"@@ -649,0 +649,5 @@\n+static bool is_in_asgct() {\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  return current_thread != NULL && current_thread->is_Java_thread() && JavaThread::cast(current_thread)->in_asgct();\n+}\n+\n@@ -655,2 +660,6 @@\n-  guarantee(result == NULL || !result->is_zombie() || result->is_locked_by_vm() || VMError::is_error_reported(), \"unsafe access to zombie method\");\n-  return result;\n+  bool is_zombie = result != NULL && result->is_zombie();\n+  bool is_result_safe = !is_zombie || result->is_locked_by_vm() || VMError::is_error_reported();\n+  guarantee(is_result_safe || is_in_asgct(), \"unsafe access to zombie method\");\n+  \/\/ When in ASGCT the previous gurantee will pass for a zombie method but we still don't want that code blob returned in order\n+  \/\/ to minimize the chance of accessing dead memory\n+  return is_result_safe ? result : NULL;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -594,0 +594,1 @@\n+  ASGCTMark mark(thread);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"memory\/allocation.hpp\"\n+\n@@ -37,0 +39,21 @@\n+\/\/ A small RAII mark class to manage 'in_asgct' thread status\n+class ASGCTMark : public StackObj {\n+ private:\n+  JavaThread* _thread;\n+  NONCOPYABLE(ASGCTMark);\n+\n+ public:\n+  ASGCTMark(JavaThread* thread) : _thread(thread) {\n+    if (_thread != nullptr) {\n+      assert(_thread == Thread::current_or_null_safe(), \"not the current thread\");\n+      _thread->set_in_asgct(true);\n+    }\n+  }\n+  ~ASGCTMark() {\n+    if (_thread != nullptr) {\n+      assert(_thread == Thread::current_or_null_safe(), \"not the current thread\");\n+      _thread->set_in_asgct(false);\n+    }\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/prims\/forte.hpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -995,0 +995,1 @@\n+  _in_asgct(false),\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -684,0 +684,1 @@\n+  bool           _in_asgct;                      \/\/ Is set when this JavaThread is handling ASGCT call\n@@ -1648,0 +1649,4 @@\n+\n+  \/\/ AsyncGetCallTrace support\n+  inline bool in_asgct(void) {return _in_asgct;}\n+  inline void set_in_asgct(bool value) {_in_asgct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}