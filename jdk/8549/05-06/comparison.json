{"files":[{"patch":"@@ -649,0 +649,5 @@\n+static bool is_in_asgct() {\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  return current_thread != NULL && current_thread->is_Java_thread() && JavaThread::cast(current_thread)->in_asgct();\n+}\n+\n@@ -654,6 +659,0 @@\n-  Thread* current_thread = Thread::current_or_null_safe();\n-  if (current_thread != NULL && current_thread->is_Java_thread() && JavaThread::cast(current_thread)->in_asgct()) {\n-    \/\/ If called from ASGCT the usual invariants may not apply so if we find\n-    \/\/ a zombie method just return NULL\n-    return (result == NULL || result->is_zombie()) ? NULL : result;\n-  }\n@@ -661,2 +660,5 @@\n-  guarantee(result == NULL || !result->is_zombie() || result->is_locked_by_vm() || VMError::is_error_reported(), \"unsafe access to zombie method\");\n-  return result;\n+  bool is_zombie = result != NULL && result->is_zombie();\n+  guarantee(!is_zombie || result->is_locked_by_vm() || VMError::is_error_reported() || is_in_asgct, \"unsafe access to zombie method\");\n+  \/\/ When in ASGCT the previous gurantee will pass for a zombie method but we still don't want that code blob returned in order\n+  \/\/ to minimize the chance of accessing dead memory\n+  return is_zombie ? NULL : result;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}