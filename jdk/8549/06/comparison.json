{"files":[{"patch":"@@ -649,0 +649,5 @@\n+static bool is_in_asgct() {\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  return current_thread != NULL && current_thread->is_Java_thread() && JavaThread::cast(current_thread)->in_asgct();\n+}\n+\n@@ -655,2 +660,5 @@\n-  guarantee(result == NULL || !result->is_zombie() || result->is_locked_by_vm() || VMError::is_error_reported(), \"unsafe access to zombie method\");\n-  return result;\n+  bool is_zombie = result != NULL && result->is_zombie();\n+  guarantee(!is_zombie || result->is_locked_by_vm() || VMError::is_error_reported() || is_in_asgct, \"unsafe access to zombie method\");\n+  \/\/ When in ASGCT the previous gurantee will pass for a zombie method but we still don't want that code blob returned in order\n+  \/\/ to minimize the chance of accessing dead memory\n+  return is_zombie ? NULL : result;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -594,0 +594,1 @@\n+  thread->set_in_asgct(true);\n@@ -651,0 +652,1 @@\n+  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -995,0 +995,1 @@\n+  _in_asgct(false),\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -684,0 +684,1 @@\n+  bool           _in_asgct;                      \/\/ Is set when this JavaThread is handling ASGCT call\n@@ -1648,0 +1649,5 @@\n+\n+\n+  \/\/ AsyncGetCallTrace support\n+  inline bool in_asgct(void) {return _in_asgct;}\n+  inline void set_in_asgct(bool value) {_in_asgct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}