{"files":[{"patch":"@@ -654,0 +654,6 @@\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  if (current_thread != NULL && current_thread->in_agct()) {\n+    \/\/ If called from AGCT the usual invariants may not apply so if we find\n+    \/\/ a zombie method just return NULL\n+    return (result == NULL || result->is_zombie()) ? NULL : result;\n+  }\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -594,0 +594,1 @@\n+  thread->set_in_asgct(true);\n@@ -651,0 +652,1 @@\n+  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -258,0 +258,2 @@\n+  _in_agct = false; \/\/ initialize in-asgct state\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -646,0 +646,8 @@\n+\n+ \/\/ support AGCT\n+ private:\n+  bool _in_agct;\n+\n+ public:\n+  inline bool in_agct(void) {return _in_agct;}\n+  inline void set_in_asgct(bool value) {_in_agct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}