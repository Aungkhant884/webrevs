{"files":[{"patch":"@@ -655,3 +655,3 @@\n-  if (current_thread != NULL && current_thread->in_asgct()) {\n-    \/\/ when in ASGCT handler things might get rough and not all guarantees are held\n-    \/\/ if the resolved blob is already a zombie return NULL instead of crashing on guarantee\n+  if (current_thread != NULL && current_thread->in_agct()) {\n+    \/\/ If called from AGCT the usual invariants may not apply so if we find\n+    \/\/ a zombie method just return NULL\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-  _in_asgct = false; \/\/ initialize in-asgct state\n+  _in_agct = false; \/\/ initialize in-asgct state\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -647,1 +647,1 @@\n- \/\/ support ASGCT\n+ \/\/ support AGCT\n@@ -649,1 +649,1 @@\n-  bool _in_asgct;\n+  bool _in_agct;\n@@ -652,2 +652,2 @@\n-  inline bool in_asgct(void) {return _in_asgct;}\n-  inline void set_in_asgct(bool value) {_in_asgct = value;}\n+  inline bool in_agct(void) {return _in_agct;}\n+  inline void set_in_asgct(bool value) {_in_agct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}