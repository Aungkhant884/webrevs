{"files":[{"patch":"@@ -637,1 +637,1 @@\n-    A VM may support a mechanism that allows agents to be started in the VM during the live\n+    A VM may support a mechanism to load an agent library and start an agent during the live\n@@ -643,0 +643,4 @@\n+    The VM will print a warning to the standard error stream for each agent that it starts\n+    during the live phase. Warnings can be disabled by means of an implementation-specific\n+    command line option.\n+    <p\/>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * programs running on the JVM. The mechanism for instrumentation is modification\n- * of the byte-codes of methods.\n+ * programs running on the Java Virtual Machine (JVM). The mechanism for\n+ * instrumentation is modification of the byte-codes of methods.\n@@ -35,3 +35,2 @@\n- * <p> An agent is deployed as a JAR file. An attribute in the JAR file manifest\n- * specifies the agent class which will be loaded to start the agent. Agents can\n- * be started in several ways:\n+ * <p> Agent classes are packaged in a JAR file. An agent can be <em>started<\/em>\n+ * in a number of ways:\n@@ -40,2 +39,2 @@\n- *   <li><p> For implementations that support a command-line interface, an agent\n- *   can be started by specifying an option on the command-line. <\/p><\/li>\n+ *   <li><p> At JVM Startup when named in the manifest of the application's executable\n+ *   JAR file.\n@@ -43,4 +42,1 @@\n- *   <li><p> An implementation may support a mechanism to start agents some time\n- *   after the VM has started. For example, an implementation may provide a\n- *   mechanism that allows a tool to <i>attach<\/i> to a running application, and\n- *   initiate the loading of the tool's agent into the running application. <\/p><\/li>\n+ *   <li><p> At JVM Startup with a command-line option.\n@@ -48,2 +44,2 @@\n- *   <li><p> An agent may be packaged with an application in an executable JAR\n- *   file.<\/p><\/li>\n+ *   <li><p> After JVM Startup where an implementation supports a mechanism to start\n+ *   agents some time after the JVM has started.\n@@ -57,1 +53,1 @@\n- * agent including the content and structure of the agent JAR file.\n+ * agent including the content and structure of the agent JAR file..\n@@ -59,1 +55,1 @@\n- * <p> The three ways to start an agent are described below.\n+ * <h2>Starting an Agent<\/h2>\n@@ -61,1 +57,30 @@\n- * <h2>Starting an Agent from the Command-Line Interface<\/h2>\n+ * <h3>Starting an Agent named in the manifest of the application's executable JAR file <\/h3>\n+ *\n+ * <p> The <a href=\"{@docRoot}\/..\/specs\/jar\/jar.html\">JAR FileSpecification<\/a> defines\n+ * manifest attributes for standalone applications that are packaged as <em>executable\n+ * JAR files<\/em>. If an implementation supports a mechanism to start an application as\n+ * an executable JAR then the main manifest may include the {@code Launcher-Agent-Class}\n+ * attribute to specify the class name of an agent to start before the application\n+ * {@code main} method is invoked. The JVM attempts to load the agent class and invoke\n+ * the following method on the class:\n+ *\n+ * <blockquote>{@code\n+ *     public static void agentmain(String agentArgs, Instrumentation inst)\n+ * }<\/blockquote>\n+ *\n+ * <p> If the agent class does not implement this method then the JVM will\n+ * attempt to invoke:\n+ *\n+ * <blockquote>{@code\n+ *     public static void agentmain(String agentArgs)\n+ * }<\/blockquote>\n+ *\n+ * <p> The value of the {@code agentArgs} parameter is always the empty string.\n+ *\n+ * <p> The {@code agentmain} method should do any necessary initialization\n+ * required to start the agent and return. If the agent cannot be started, for\n+ * example the agent class cannot be loaded, the agent class does not define a\n+ * conformant {@code agentmain} method, or the {@code agentmain} method throws\n+ * an uncaught exception or error, the JVM will abort.\n+ *\n+ * <h3>Starting an Agent from the command-line interface<\/h3>\n@@ -64,1 +89,1 @@\n- * command-line interface, an agent is started by adding the following option\n+ * command-line interface, an agent can be started by adding the following option\n@@ -97,1 +122,1 @@\n- * the agent is started after VM startup (see below). When the agent is started\n+ * the agent is started after JVM startup (see below). When the agent is started\n@@ -122,1 +147,1 @@\n- * <h2>Starting an Agent After VM Startup<\/h2>\n+ * <h3>Starting an Agent after JVM startup<\/h3>\n@@ -125,1 +150,1 @@\n- * the VM has started. The details as to how this is initiated are\n+ * the JVM has started. The details as to how this is initiated are\n@@ -128,1 +153,1 @@\n- * implementation supports the starting of agents after the VM has started the\n+ * implementation supports starting an agent after the JVM has started, the\n@@ -140,0 +165,4 @@\n+ *   <li><p> The JVM prints a warning on the standard error stream. The warning is\n+ *   printed for each agent started after JVM startup. The warning can be disabled\n+ *   by means of an implementation-specific command line option. <\/p><\/li>\n+ *\n@@ -158,1 +187,1 @@\n- * VM startup the {@code premain} method is not invoked.\n+ * JVM startup the {@code premain} method is not invoked.\n@@ -172,31 +201,0 @@\n- *\n- * <h2>Including an Agent in an Executable JAR file<\/h2>\n- *\n- * <p> The JAR File Specification defines manifest attributes for standalone\n- * applications that are packaged as <em>executable JAR files<\/em>. If an\n- * implementation supports a mechanism to start an application as an executable\n- * JAR then the main manifest may include the {@code Launcher-Agent-Class}\n- * attribute to specify the class name of an agent to start before the application\n- * {@code main} method is invoked. The Java virtual machine attempts to\n- * invoke the following method on the agent class:\n- *\n- * <blockquote>{@code\n- *     public static void agentmain(String agentArgs, Instrumentation inst)\n- * }<\/blockquote>\n- *\n- * <p> If the agent class does not implement this method then the JVM will\n- * attempt to invoke:\n- *\n- * <blockquote>{@code\n- *     public static void agentmain(String agentArgs)\n- * }<\/blockquote>\n- *\n- * <p> The value of the {@code agentArgs} parameter is always the empty string.\n- *\n- * <p> The {@code agentmain} method should do any necessary initialization\n- * required to start the agent and return. If the agent cannot be started, for\n- * example the agent class cannot be loaded, the agent class does not define a\n- * conformant {@code agentmain} method, or the {@code agentmain} method throws\n- * an uncaught exception or error, the JVM will abort.\n- *\n- *\n@@ -266,1 +264,1 @@\n- * the VM has started then this attribute specifies the agent class. That is,\n+ * the JVM has started then this attribute specifies the agent class. That is,\n@@ -287,1 +285,1 @@\n- * started sometime after the VM has started then paths that do not represent a\n+ * started sometime after the JVM has started then paths that do not represent a\n@@ -315,1 +313,1 @@\n- * after the VM has started, then the {@code Agent-Class} attribute specifies\n+ * after the JVM has started, then the {@code Agent-Class} attribute specifies\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/package-info.java","additions":55,"deletions":57,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    private final static boolean TRACE_USAGE;\n+    private static final boolean TRACE_USAGE;\n","filename":"src\/java.instrument\/share\/classes\/sun\/instrument\/InstrumentationImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}