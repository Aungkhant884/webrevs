{"files":[{"patch":"@@ -649,0 +649,5 @@\n+    <b>Implementation Note:<\/b> For the HotSpot VM, the VM option\n+    <code>-XX:+EnableDynamicAgentLoading<\/code> is used to opt-in to allow dynamic loading\n+    of agents in the live phase. This option suppresses the warning to standard error when\n+    starting an agent in the live phase.\n+    <p\/>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -229,3 +229,3 @@\n-       if (agent->is_static_lib() && agent->is_loaded()) {\n-         return true;\n-       }\n+      if (agent->is_static_lib() && agent->is_loaded()) {\n+        return true;\n+      }\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -162,1 +162,5 @@\n- *   option. <\/p><\/li>\n+ *   option.\n+ *   <p><b>Implementation Note:<\/b> For the HotSpot VM, the JVM option\n+ *   {@code -XX:+EnableDynamicAgentLoading} is used to opt-in to allow dynamic loading of\n+ *   agents into a running JVM. This option suppresses the warning to standard error when\n+ *   starting an agent in a running JVM. <\/p><\/li>\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/package-info.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-import org.junit.jupiter.params.provider.Arguments;\n@@ -101,1 +100,1 @@\n-     * Arguments with pairs of actions to load agents into a running VM.\n+     * Actions to load JvmtiAgent1 into a running VM.\n@@ -103,4 +102,3 @@\n-    private static Stream<Arguments> loadJvmtiAgents() throws Exception {\n-        \/\/ load agents with the attach API\n-        OnAttachAction loadJvmtiAgent1 = (pid, vm) -> vm.loadAgentLibrary(JVMTI_AGENT1_LIB);\n-        OnAttachAction loadJvmtiAgent2 = (pid, vm) -> vm.loadAgentLibrary(JVMTI_AGENT2_LIB);\n+    private static Stream<OnAttachAction> loadJvmtiAgent1() {\n+        \/\/ load agent with the attach API\n+        OnAttachAction loadJvmtiAgent = (pid, vm) -> vm.loadAgentLibrary(JVMTI_AGENT1_LIB);\n@@ -109,2 +107,1 @@\n-        OnAttachAction jcmdAgentLoad1 = jcmdAgentLoad(jvmtiAgentPath1);\n-        OnAttachAction jcmdAgentLoad2 = jcmdAgentLoad(jvmtiAgentPath2);\n+        OnAttachAction jcmdAgentLoad = jcmdAgentLoad(jvmtiAgentPath1);\n@@ -112,4 +109,1 @@\n-        return Stream.of(\n-                Arguments.of(loadJvmtiAgent1, loadJvmtiAgent2),\n-                Arguments.of(jcmdAgentLoad1, jcmdAgentLoad2)\n-        );\n+        return Stream.of(loadJvmtiAgent, jcmdAgentLoad);\n@@ -119,1 +113,1 @@\n-     * Test loading JVM TI agents into a running VM.\n+     * Test loading JvmtiAgent1 into a running VM.\n@@ -122,5 +116,3 @@\n-    @MethodSource(\"loadJvmtiAgents\")\n-    void testLoadJvmtiAgent(OnAttachAction loadJvmtiAgent1,\n-                            OnAttachAction loadJvmtiAgent2) throws Exception {\n-\n-        \/\/ agent dynamically loaded\n+    @MethodSource(\"loadJvmtiAgent1\")\n+    void testLoadOneJvmtiAgent(OnAttachAction loadJvmtiAgent1) throws Exception {\n+        \/\/ dynamically load loadJvmtiAgent1\n@@ -130,0 +122,5 @@\n+        \/\/ dynamically load loadJvmtiAgent1 twice, should be one warning\n+        test().whenRunning(loadJvmtiAgent1)\n+                .whenRunning(loadJvmtiAgent1)\n+                .stderrShouldContain(JVMTI_AGENT_WARNING, 1);\n+\n@@ -135,1 +132,1 @@\n-        \/\/ agent started via command line, same agent dynamically loaded\n+        \/\/ start loadJvmtiAgent1 via the command line, then dynamically load loadJvmtiAgent1\n@@ -139,0 +136,1 @@\n+    }\n@@ -140,4 +138,8 @@\n-        \/\/ agent started via command line, different agent dynamically loaded\n-        test().withOpts(\"-agentpath:\" + jvmtiAgentPath1)\n-                .whenRunning(loadJvmtiAgent2)\n-                .stderrShouldContain(JVMTI_AGENT_WARNING);\n+    \/**\n+     * Test loading JvmtiAgent1 and JvmtiAgent2 into a running VM.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"loadJvmtiAgent1\")\n+    void testLoadTwoJvmtiAgents(OnAttachAction loadJvmtiAgent1) throws Exception {\n+        OnAttachAction loadJvmtiAgent2 = (pid, vm) -> vm.loadAgentLibrary(JVMTI_AGENT2_LIB);\n+        OnAttachAction jcmdAgentLoad2 = jcmdAgentLoad(jvmtiAgentPath2);\n@@ -145,1 +147,1 @@\n-        \/\/ same agent dynamically loaded twice, should be one warning\n+        \/\/ dynamically load loadJvmtiAgent1, then dynamically load loadJvmtiAgent2 with attach API\n@@ -147,2 +149,2 @@\n-                .whenRunning(loadJvmtiAgent1)\n-                .stderrShouldContain(JVMTI_AGENT_WARNING, 1);\n+                .whenRunning(loadJvmtiAgent2)\n+                .stderrShouldContain(JVMTI_AGENT_WARNING, 2);\n@@ -150,1 +152,1 @@\n-        \/\/ two different agents loaded dynamically, should be two warnings\n+        \/\/ dynamically load loadJvmtiAgent1, then dynamically load loadJvmtiAgent2 with jcmd\n@@ -152,1 +154,1 @@\n-                .whenRunning(loadJvmtiAgent2)\n+                .whenRunning(jcmdAgentLoad2)\n@@ -154,0 +156,5 @@\n+\n+        \/\/ start loadJvmtiAgent2 via the command line, then dynamically load loadJvmtiAgent1\n+        test().withOpts(\"-agentpath:\" + jvmtiAgentPath2)\n+                .whenRunning(loadJvmtiAgent1)\n+                .stderrShouldContain(JVMTI_AGENT_WARNING);\n@@ -185,1 +192,1 @@\n-    private static OnAttachAction jcmdAgentLoad(String agentPath) throws Exception {\n+    private static OnAttachAction jcmdAgentLoad(String agentPath) {\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":36,"deletions":29,"binary":false,"changes":65,"status":"modified"}]}