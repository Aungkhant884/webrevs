{"files":[{"patch":"@@ -33,1 +33,1 @@\n- * instrumentation is modification of the byte-codes of methods.\n+ * instrumentation is modification of the bytecodes of methods.\n@@ -35,2 +35,6 @@\n- * <p> Agent classes are packaged in a JAR file. An agent can be <em>started<\/em>\n- * in a number of ways:\n+ * <p> The class files that comprise an agent are packaged into a JAR file, either\n+ * with the application in an executable JAR, or more commonly, as a separate JAR file\n+ * called an <em>agent JAR<\/em>. An attribute in the main manifest of the JAR file\n+ * identifies one of the class files in the JAR file as the <em>agent class<\/em>.\n+ * The agent class defines a special method that the JVM invokes to <em>start<\/em>\n+ * the agent.\n@@ -38,9 +42,4 @@\n- * <ol>\n- *   <li><p> At JVM Startup when named in the manifest of the application's executable\n- *   JAR file.\n- *\n- *   <li><p> At JVM Startup with a command-line option.\n- *\n- *   <li><p> After JVM Startup where an implementation supports a mechanism to start\n- *   agents some time after the JVM has started.\n- * <\/ol>\n+ * <p> Agents that are packaged with an application in an executable JAR are started\n+ * at JVM statup time. Agents that are packaged into an agent JAR file may be started\n+ * at JVM startup time via a command line option, or where an implementation supports\n+ * it, started in a running JVM.\n@@ -53,1 +52,1 @@\n- * agent including the content and structure of the agent JAR file..\n+ * agent including the content and structure of the agent JAR file.\n@@ -55,1 +54,1 @@\n- * <h2>Starting an Agent<\/h2>\n+ * <h2>Starting an agent<\/h2>\n@@ -57,1 +56,1 @@\n- * <h3>Starting an Agent named in the manifest of the application's executable JAR file <\/h3>\n+ * <h3>Starting an agent packaged with an application in an executable JAR file<\/h3>\n@@ -59,1 +58,1 @@\n- * <p> The <a href=\"{@docRoot}\/..\/specs\/jar\/jar.html\">JAR FileSpecification<\/a> defines\n+ * <p> The <a href=\"{@docRoot}\/..\/specs\/jar\/jar.html\">JAR File Specification<\/a> defines\n@@ -62,4 +61,7 @@\n- * an executable JAR then the main manifest may include the {@code Launcher-Agent-Class}\n- * attribute to specify the class name of an agent to start before the application\n- * {@code main} method is invoked. The JVM attempts to load the agent class and invoke\n- * the following method on the class:\n+ * an executable JAR then the main manifest of the JAR file can include the\n+ * {@code Launcher-Agent-Class} attribute to specify the binary name of a Java agent\n+ * class that is packaged with the application. If the attribute is present then the\n+ * JVM starts the agent, by loading the agent class and invoking its {@code agentmain}\n+ * method, before the application {@code main} method is invoked.\n+ * The {@code agentmain} method has one of two possible signatures. The JVM first\n+ * attempts to invoke the following method on the agent class:\n@@ -71,2 +73,2 @@\n- * <p> If the agent class does not implement this method then the JVM will\n- * attempt to invoke:\n+ * <p> If the agent class does not define this method then the JVM will attempt\n+ * to invoke:\n@@ -78,1 +80,3 @@\n- * <p> The value of the {@code agentArgs} parameter is always the empty string.\n+ * <p> The value of the {@code agentArgs} parameter is always the empty string. In\n+ * the first method, the {@code inst} parameter is an {@link Instrumentation} object\n+ * that the agent can use to instrument code.\n@@ -84,1 +88,2 @@\n- * an uncaught exception or error, the JVM will abort.\n+ * an uncaught exception or error, the JVM will abort before the application\n+ * {@code main} method is invoked.\n@@ -86,1 +91,1 @@\n- * <h3>Starting an Agent from the command-line interface<\/h3>\n+ * <h3>Starting an agent from the command-line interface<\/h3>\n@@ -88,3 +93,2 @@\n- * <p> Where an implementation provides a means to start agents from the\n- * command-line interface, an agent can be started by adding the following option\n- * to the command-line:\n+ * <p> Where an implementation provides a means to start agents from the command-line\n+ * interface, an agent JAR is specified via the following command line option:\n@@ -99,11 +103,6 @@\n- * <p> The manifest of the agent JAR file must contain the attribute {@code\n- * Premain-Class} in its main manifest. The value of this attribute is the\n- * name of the <i>agent class<\/i>. The agent class must implement a public\n- * static {@code premain} method similar in principle to the {@code main}\n- * application entry point. After the Java Virtual Machine (JVM) has\n- * initialized, the {@code premain} method will be called, then the real\n- * application {@code main} method. The {@code premain} method must return\n- * in order for the startup to proceed.\n- *\n- * <p> The {@code premain} method has one of two possible signatures. The\n- * JVM first attempts to invoke the following method on the agent class:\n+ * <p> The main manifest of the agent JAR file must contain the attribute {@code\n+ * Premain-Class}. The value of this attribute is the binary name of the agent class\n+ * in the JAR file. The JVM starts the agent, by loading the agent class and invoking\n+ * its {@code premain} method, before the application {@code main} method is invoked.\n+ * The {@code premain} method has one of two possible signatures. The JVM first\n+ * attempts to invoke the following method on the agent class:\n@@ -115,2 +114,1 @@\n- * <p> If the agent class does not implement this method then the JVM will\n- * attempt to invoke:\n+ * <p> If the agent class does not define this method then the JVM will attempt to invoke:\n@@ -120,4 +118,0 @@\n-\n- * <p> The agent class may also have an {@code agentmain} method for use when\n- * the agent is started after JVM startup (see below). When the agent is started\n- * using a command-line option, the {@code agentmain} method is not invoked.\n@@ -125,1 +119,1 @@\n- * <p> Each agent is passed its agent options via the {@code agentArgs} parameter.\n+ * <p> The agent is passed its agent options via the {@code agentArgs} parameter.\n@@ -127,1 +121,3 @@\n- * should be performed by the agent itself.\n+ * should be performed by the agent itself. In the first method, the {@code inst}\n+ * parameter is an {@link Instrumentation} object that the agent can use to instrument\n+ * code.\n@@ -129,4 +125,4 @@\n- * <p> If the agent cannot be started (for example, because the agent class\n- * cannot be loaded, or because the agent class does not have an appropriate\n- * {@code premain} method), the JVM will abort. If a {@code premain} method\n- * throws an uncaught exception, the JVM will abort.\n+ * <p> If the agent cannot be started, for example the agent class cannot be loaded,\n+ * the agent class does not define a conformant {@code premain} method, or the {@code\n+ * premain} method throws an uncaught exception or error, the JVM will abort before\n+ * the application {@code main} method is invoked.\n@@ -142,4 +138,3 @@\n- * <p> There are no modeling restrictions on what the agent {@code premain}\n- * method may do. Anything application {@code main} can do, including creating\n- * threads, is legal from {@code premain}.\n- *\n+ * <p> The agent class may also have an {@code agentmain} method for use when the agent\n+ * is started after in a running JVM (see below). When the agent is started using a\n+ * command-line option, the {@code agentmain} method is not invoked.\n@@ -147,8 +142,1 @@\n- * <h3>Starting an Agent after JVM startup<\/h3>\n- *\n- * <p> An implementation may provide a mechanism to start agents sometime after\n- * the JVM has started. The details as to how this is initiated are\n- * implementation specific but typically the application has already started and\n- * its {@code main} method has already been invoked. In cases where an\n- * implementation supports starting an agent after the JVM has started, the\n- * following applies:\n+ * <h3>Starting an agent in a running JVM<\/h3>\n@@ -156,0 +144,5 @@\n+ * <p> An implementation may provide a mechanism to start agents in a running VM (meaning\n+ * after JVM startup). The details as to how this is initiated are implementation specific\n+ * but typically the application has already started and its {@code main} method has\n+ * already been invoked. Where an implementation supports starting an agent in a running\n+ * JVM, the following applies:\n@@ -158,3 +151,3 @@\n- *   <li><p> The manifest of the agent JAR must contain the attribute {@code\n- *   Agent-Class} in its main manfiest. The value of this attribute is the name\n- *   of the <i>agent class<\/i>. <\/p><\/li>\n+ *   <li><p> The agent class must be packaged into an agent JAR file. The main manifest\n+ *   of the agent JAR file must contain the attribute {@code Agent-Class}. The value of\n+ *   this attribute is the binary name of the agent class in the JAR file. <\/p><\/li>\n@@ -162,2 +155,1 @@\n- *   <li><p> The agent class must implement a public static {@code agentmain}\n- *   method. <\/p><\/li>\n+ *   <li><p> The agent class must define a public static {@code agentmain} method. <\/p><\/li>\n@@ -166,2 +158,2 @@\n- *   the JVM attempts to start after the JVM has started. Warnings can be disabled by\n- *   means of an implementation-specific command line option. <\/p><\/li>\n+ *   it attempts to start in a running JVM. Warnings can be disabled by means of an\n+ *   implementation-specific command line option. <\/p><\/li>\n@@ -171,2 +163,3 @@\n- * <p> The {@code agentmain} method has one of two possible signatures. The JVM\n- * first attempts to invoke the following method on the agent class:\n+ * <p> The JVM starts the agent by loading the agent class and invoking its {@code\n+ * agentmain} method. The {@code agentmain} method has one of two possible signatures.\n+ * The JVM first attempts to invoke the following method on the agent class:\n@@ -178,1 +171,1 @@\n- * <p> If the agent class does not implement this method then the JVM will\n+ * <p> If the agent class does not define this method then the JVM will\n@@ -185,7 +178,5 @@\n- * <p> The agent class may also have a {@code premain} method for use when the\n- * agent is started using a command-line option. When the agent is started after\n- * JVM startup the {@code premain} method is not invoked.\n- *\n- * <p> The agent is passed its agent options via the {@code agentArgs}\n- * parameter. The agent options are passed as a single string, any additional\n- * parsing should be performed by the agent itself.\n+ * <p> The agent is passed its agent options via the {@code agentArgs} parameter.\n+ * The agent options are passed as a single string, any additional parsing\n+ * should be performed by the agent itself. In the first method, the {@code inst}\n+ * parameter is an {@link Instrumentation} object that the agent can use to instrument\n+ * code.\n@@ -201,0 +192,4 @@\n+ * <p> The agent class may also have a {@code premain} method for use when the agent\n+ * is started using a command-line option. When the agent is started in a running JVM\n+ * the {@code premain} method is not invoked.\n+ *\n@@ -249,1 +244,1 @@\n- * <h2>Manifest Attributes<\/h2>\n+ * <h2>JAR File Manifest Attributes<\/h2>\n@@ -251,1 +246,2 @@\n- * <p> The following manifest attributes are defined for an agent JAR file:\n+ * <p> The following attributes in the main section of the application or agent\n+ * JAR file manifest are defined for Java agents:\n@@ -255,0 +251,7 @@\n+ * <dt>{@code Launcher-Agent-Class}<\/dt>\n+ * <dd> If an implementation supports a mechanism to start an application in an\n+ * executable JAR file then this attribute, if present, specifies the binary name\n+ * of the agent class that is packaged with the application.\n+ * The agent is started, by invoking the agent class {@code agentmain} method,\n+ * before the application {@code main} method is invoked. <\/dd>\n+ *\n@@ -256,5 +259,5 @@\n- * <dd> When an agent is specified at JVM launch time this attribute specifies\n- * the agent class. That is, the class containing the {@code premain} method.\n- * When an agent is specified at JVM launch time this attribute is required. If\n- * the attribute is not present the JVM will abort. Note: this is a class name,\n- * not a file name or path. <\/dd>\n+ * <dd> If an agent JAR is specified at JVM launch time, this attribute specifies\n+ * the binary name of the agent class in the JAR file.\n+ * The agent is started, by invoking the agent class {@code premain} method,\n+ * before the application {@code main} method is invoked.\n+ * If the attribute is not present the JVM will abort. <\/dd>\n@@ -263,11 +266,5 @@\n- * <dd> If an implementation supports a mechanism to start agents sometime after\n- * the JVM has started then this attribute specifies the agent class. That is,\n- * the class containing the {@code agentmain} method. This attribute is required\n- * if it is not present the agent will not be started. Note: this is a class name,\n- * not a file name or path. <\/dd>\n- *\n- * <dt>{@code Launcher-Agent-Class}<\/dt>\n- * <dd> If an implementation supports a mechanism to start an application as an\n- * executable JAR then the main manifest may include this attribute to specify\n- * the class name of an agent to start before the application {@code main}\n- * method is invoked. <\/dd>\n+ * <dd> If an implementation supports a mechanism to start an agent sometime after\n+ * the JVM has started then this attribute specifies the binary name of the Java\n+ * agent class in the agent JAR file.\n+ * The agent is started by invoking the agent class {@code agentmain} method.\n+ * This attribute is required; if not present the agent will not be started. <\/dd>\n@@ -311,1 +308,1 @@\n- * Premain-Class} attribute specifies the name of the agent class and the {@code\n+ * Premain-Class} attribute specifies the binary name of the agent class and the {@code\n@@ -314,1 +311,1 @@\n- * the name of the agent class (the value of {@code Premain-Class} attribute is\n+ * the binary name of the agent class (the value of {@code Premain-Class} attribute is\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/package-info.java","additions":97,"deletions":100,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-     * Test loading JVM TI agent into a running VM with jcmd VMTI.agent_load command.\n+     * Test loading JVM TI agent into a running VM with jcmd JVMTI.agent_load command.\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}