{"files":[{"patch":"@@ -144,1 +144,1 @@\n-    \/\/ Note: all modules in the exported list participate in preview APIs\n+    \/\/ Note: all modules in the exported list participate in preview  features\n@@ -151,0 +151,1 @@\n+        java.management, \/\/ participates in preview features\n@@ -152,2 +153,2 @@\n-        jdk.incubator.concurrent, \/\/ participates in preview APIs\n-        jdk.incubator.vector, \/\/ participates in preview APIs\n+        jdk.incubator.concurrent, \/\/ participates in preview features\n+        jdk.incubator.vector, \/\/ participates in preview features\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import sun.management.Util;\n-import static java.lang.Thread.State.*;\n@@ -229,1 +227,1 @@\n-        this.virtual = Util.isVirtual(t);\n+        this.virtual = t.isVirtual();\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ThreadInfo.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -38,0 +40,1 @@\n+@ParticipatesInPreview\n","filename":"src\/java.management\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import sun.management.Util;\n@@ -225,1 +224,1 @@\n-        if (Util.isVirtual(Thread.currentThread())) {\n+        if (Thread.currentThread().isVirtual()) {\n@@ -287,1 +286,1 @@\n-                    if (Util.isVirtual(thread)) {\n+                    if (thread.isVirtual()) {\n@@ -330,1 +329,1 @@\n-                    if (Util.isVirtual(thread)) {\n+                    if (thread.isVirtual()) {\n@@ -364,1 +363,1 @@\n-        if (isThreadAllocatedMemoryEnabled() && !Util.isVirtual(Thread.currentThread())) {\n+        if (isThreadAllocatedMemoryEnabled() && !Thread.currentThread().isVirtual()) {\n@@ -380,1 +379,1 @@\n-                if (Util.isVirtual(thread)) {\n+                if (thread.isVirtual()) {\n@@ -580,1 +579,1 @@\n-                .filter(t -> !Util.isVirtual(t))\n+                .filter(t -> !t.isVirtual())\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ThreadImpl.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.Method;\n@@ -91,14 +90,0 @@\n-    \/**\n-     * Returns true if the given Thread is a virtual thread.\n-     *\n-     * @implNote This method uses reflection because Thread::isVirtual is a preview API\n-     * and the java.management module cannot be compiled with --enable-preview.\n-     *\/\n-    public static boolean isVirtual(Thread thread) {\n-        try {\n-            return (boolean) THREAD_IS_VIRTUAL.invoke(thread);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-\n@@ -116,10 +101,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Method threadIsVirtual() {\n-        PrivilegedExceptionAction<Method> pa = () -> Thread.class.getMethod(\"isVirtual\");\n-        try {\n-            return AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-\n@@ -140,1 +115,0 @@\n-    private static final Method THREAD_IS_VIRTUAL = threadIsVirtual();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/Util.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}