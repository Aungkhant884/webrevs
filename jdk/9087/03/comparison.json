{"files":[{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.javac;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * Indicates, when declared on a module declaration, that the module participates\n+ * in preview features and therefore does not need to be compiled with \"--enable-preview\".\n+ *\/\n+@Target(ElementType.MODULE)\n+@Retention(RetentionPolicy.CLASS)\n+public @interface ParticipatesInPreview {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/ParticipatesInPreview.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -144,0 +144,5 @@\n+    \/\/ Note: all modules in the exported list participate in preview  features\n+    \/\/ and therefore if they use preview features they do not need to be\n+    \/\/ compiled with \"--enable-preview\".\n+    \/\/ It is recommended for any modules that do participate that their\n+    \/\/ module declaration be annotated with jdk.internal.javac.ParticipatesInPreview\n@@ -146,0 +151,1 @@\n+        java.management, \/\/ participates in preview features\n@@ -147,0 +153,2 @@\n+        jdk.incubator.concurrent, \/\/ participates in preview features\n+        jdk.incubator.vector, \/\/ participates in preview features\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import sun.management.Util;\n-import static java.lang.Thread.State.*;\n@@ -229,1 +227,1 @@\n-        this.virtual = Util.isVirtual(t);\n+        this.virtual = t.isVirtual();\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ThreadInfo.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -38,0 +40,1 @@\n+@ParticipatesInPreview\n","filename":"src\/java.management\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import sun.management.Util;\n@@ -225,1 +224,1 @@\n-        if (Util.isVirtual(Thread.currentThread())) {\n+        if (Thread.currentThread().isVirtual()) {\n@@ -287,1 +286,1 @@\n-                    if (Util.isVirtual(thread)) {\n+                    if (thread.isVirtual()) {\n@@ -330,1 +329,1 @@\n-                    if (Util.isVirtual(thread)) {\n+                    if (thread.isVirtual()) {\n@@ -364,1 +363,1 @@\n-        if (isThreadAllocatedMemoryEnabled() && !Util.isVirtual(Thread.currentThread())) {\n+        if (isThreadAllocatedMemoryEnabled() && !Thread.currentThread().isVirtual()) {\n@@ -380,1 +379,1 @@\n-                if (Util.isVirtual(thread)) {\n+                if (thread.isVirtual()) {\n@@ -580,1 +579,1 @@\n-                .filter(t -> !Util.isVirtual(t))\n+                .filter(t -> !t.isVirtual())\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ThreadImpl.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.Method;\n@@ -91,14 +90,0 @@\n-    \/**\n-     * Returns true if the given Thread is a virtual thread.\n-     *\n-     * @implNote This method uses reflection because Thread::isVirtual is a preview API\n-     * and the java.management module cannot be compiled with --enable-preview.\n-     *\/\n-    public static boolean isVirtual(Thread thread) {\n-        try {\n-            return (boolean) THREAD_IS_VIRTUAL.invoke(thread);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-\n@@ -116,10 +101,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Method threadIsVirtual() {\n-        PrivilegedExceptionAction<Method> pa = () -> Thread.class.getMethod(\"isVirtual\");\n-        try {\n-            return AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-\n@@ -140,1 +115,0 @@\n-    private static final Method THREAD_IS_VIRTUAL = threadIsVirtual();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/Util.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+     * @parem syms the symbol table\n@@ -131,5 +132,11 @@\n-    public boolean participatesInPreview(Symbol s, Symbol previewSymbol) {\n-        \/\/ Hardcode the incubating vector API module for now\n-        \/\/ Will generalize with an annotation, @PreviewParticipating say, later\n-        return previewSymbol.packge().modle == s.packge().modle ||\n-                s.packge().modle.name == names.jdk_incubator_vector;\n+    public boolean participatesInPreview(Symtab syms, Symbol s, Symbol previewSymbol) {\n+        \/\/ All symbols in the same module as the preview symbol participate in the preview API\n+        if (previewSymbol.packge().modle == s.packge().modle) {\n+            return true;\n+        }\n+\n+        \/\/ If java.base's jdk.internal.javac package is exported to s's module then\n+        \/\/ s participates in the preview API\n+        return syms.java_base.exports.stream()\n+                .filter(ed -> ed.packge.fullname == names.jdk_internal_javac)\n+                .anyMatch(ed -> ed.modules.contains(s.packge().modle));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3603,1 +3603,1 @@\n-        if ((s.flags() & PREVIEW_API) != 0 && !preview.participatesInPreview(other, s)) {\n+        if ((s.flags() & PREVIEW_API) != 0 && !preview.participatesInPreview(syms, other, s)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+    public final Name jdk_internal_javac;\n@@ -127,1 +128,0 @@\n-    public final Name jdk_incubator_vector;\n@@ -305,0 +305,1 @@\n+        jdk_internal_javac = fromString(\"jdk.internal.javac\");\n@@ -309,1 +310,0 @@\n-        jdk_incubator_vector = fromString(\"jdk.incubator.vector\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.reflect.Method;\n@@ -303,1 +302,1 @@\n-        this.factory = FactoryHolder.VIRTUAL_THREAD_FACTORY;\n+        this.factory = Thread.ofVirtual().factory();\n@@ -842,1 +841,1 @@\n-            super(null, FactoryHolder.VIRTUAL_THREAD_FACTORY);\n+            super(null, Thread.ofVirtual().factory());\n@@ -1018,1 +1017,1 @@\n-            super(null, FactoryHolder.VIRTUAL_THREAD_FACTORY);\n+            super(null, Thread.ofVirtual().factory());\n@@ -1164,25 +1163,0 @@\n-\n-    \/**\n-     * Holder class for the virtual thread factory. It uses reflection to allow\n-     * this class be compiled in an incubator module without also enabling preview\n-     * features.\n-     *\/\n-    private static class FactoryHolder {\n-        static final ThreadFactory VIRTUAL_THREAD_FACTORY = virtualThreadFactory();\n-\n-        @SuppressWarnings(\"removal\")\n-        private static ThreadFactory virtualThreadFactory() {\n-            PrivilegedAction<ThreadFactory> pa = () -> {\n-                try {\n-                    Method ofVirtualMethod = Thread.class.getDeclaredMethod(\"ofVirtual\");\n-                    Object virtualThreadBuilder = ofVirtualMethod.invoke(null);\n-                    Class<?> ofVirtualClass = Class.forName(\"java.lang.Thread$Builder$OfVirtual\");\n-                    Method factoryMethod = ofVirtualClass.getMethod(\"factory\");\n-                    return (ThreadFactory) factoryMethod.invoke(virtualThreadBuilder);\n-                } catch (Exception e) {\n-                    throw new InternalError(e);\n-                }\n-            };\n-            return AccessController.doPrivileged(pa);\n-        }\n-    }\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/StructuredTaskScope.java","additions":3,"deletions":29,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -32,0 +34,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -34,0 +36,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.incubator.vector\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}