{"files":[{"patch":"@@ -232,1 +232,1 @@\n-  bool equals(DictionaryEntry** value, bool* is_dead) {\n+  bool equals(DictionaryEntry** value) {\n@@ -234,1 +234,0 @@\n-    *is_dead = false;\n@@ -237,0 +236,3 @@\n+  bool is_dead(DictionaryEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -182,2 +182,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -194,0 +192,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n@@ -211,1 +213,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -214,2 +216,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -226,0 +226,5 @@\n+\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -377,1 +377,5 @@\n-  bool equals(Symbol* value, bool* is_dead) {\n+  \/\/ Note: When equals() returns \"true\", the symbol's refcount is incremented. This is\n+  \/\/ needed to ensure that the symbol is kept alive before equals() returns to the caller,\n+  \/\/ so that another thread cannot clean the symbol up concurrently. The caller is\n+  \/\/ responsible for decrementing the refcount, when the symbol is no longer needed.\n+  bool equals(Symbol* value) {\n@@ -386,1 +390,0 @@\n-        *is_dead = true;\n@@ -390,1 +393,0 @@\n-      *is_dead = (sym->refcount() == 0);\n@@ -394,0 +396,3 @@\n+  bool is_dead(Symbol* value) {\n+    return value->refcount() == 0;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -261,2 +261,1 @@\n-    bool equals(G1CardSetHashTableValue* value, bool* is_dead) {\n-      *is_dead = false;\n+    bool equals(G1CardSetHashTableValue* value) {\n@@ -265,0 +264,4 @@\n+\n+    bool is_dead(G1CardSetHashTableValue*) {\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -132,2 +132,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -144,0 +142,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == nullptr;\n+  }\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  bool equals(FinalizerEntry** value, bool* is_dead) {\n+  bool equals(FinalizerEntry** value) {\n@@ -145,0 +145,3 @@\n+  bool is_dead(FinalizerEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  bool equals(ThreadIdTableEntry** value, bool* is_dead) {\n+  bool equals(ThreadIdTableEntry** value) {\n@@ -197,0 +197,3 @@\n+  bool is_dead(ThreadIdTableEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -458,1 +458,0 @@\n-  bool have_dead = false;\n@@ -460,1 +459,1 @@\n-    if (lookup_f.equals(rem_n->value(), &have_dead)) {\n+    if (lookup_f.equals(rem_n->value())) {\n@@ -549,3 +548,1 @@\n-    bool is_dead = false;\n-    lookup_f.equals(rem_n->value(), &is_dead);\n-    if (is_dead) {\n+    if (lookup_f.is_dead(rem_n->value())) {\n@@ -629,1 +626,0 @@\n-    bool is_dead = false;\n@@ -631,1 +627,1 @@\n-    if (lookup_f.equals(node->value(), &is_dead)) {\n+    if (lookup_f.equals(node->value())) {\n@@ -634,1 +630,1 @@\n-    if (is_dead && !(*have_dead)) {\n+    if (!(*have_dead) && lookup_f.is_dead(node->value())) {\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -128,0 +128,14 @@\n+\n+TEST_VM(SymbolTable, test_cleanup_leak) {\n+  \/\/ Check that dead entry cleanup doesn't increment refcount of live entry in same bucket.\n+\n+  \/\/ Create symbol and release ref, marking it available for cleanup.\n+  Symbol* entry1 = SymbolTable::new_symbol(\"hash_collision_123\");\n+  entry1->decrement_refcount();\n+\n+  \/\/ Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.\n+  \/\/ Note: relies on SymbolTable's use of String::hashCode which collides for these two values.\n+  Symbol* entry2 = SymbolTable::new_symbol(\"hash_collision_397476851\");\n+\n+  ASSERT_EQ(entry2->refcount(), 1) << \"Symbol refcount just created is 1\";\n+}\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -113,0 +113,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n@@ -564,1 +567,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -567,0 +570,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}