{"files":[{"patch":"@@ -232,1 +232,1 @@\n-  bool equals(DictionaryEntry** value, bool* is_dead) {\n+  bool equals(DictionaryEntry** value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value, bool* is_dead, bool is_used_after) {\n@@ -211,1 +211,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  bool equals(Symbol* value, bool* is_dead) {\n+  bool equals(Symbol* value, bool* is_dead, bool is_used_after) {\n@@ -381,1 +381,1 @@\n-      if (sym->try_increment_refcount()) {\n+      if (is_used_after && sym->try_increment_refcount()) {\n@@ -384,0 +384,2 @@\n+      } else if (!is_used_after && sym->refcount() > 0) {\n+        return true;\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-    bool equals(G1CardSetHashTableValue* value, bool* is_dead) {\n+    bool equals(G1CardSetHashTableValue* value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  bool equals(FinalizerEntry** value, bool* is_dead) {\n+  bool equals(FinalizerEntry** value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  bool equals(ThreadIdTableEntry** value, bool* is_dead) {\n+  bool equals(ThreadIdTableEntry** value, bool* is_dead, bool is_used_after) {\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-    if (lookup_f.equals(rem_n->value(), &have_dead)) {\n+    if (lookup_f.equals(rem_n->value(), &have_dead, false)) {\n@@ -550,1 +550,1 @@\n-    lookup_f.equals(rem_n->value(), &is_dead);\n+    lookup_f.equals(rem_n->value(), &is_dead, false);\n@@ -631,1 +631,1 @@\n-    if (lookup_f.equals(node->value(), &is_dead)) {\n+    if (lookup_f.equals(node->value(), &is_dead, true)) {\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -128,0 +128,14 @@\n+\n+TEST_VM(SymbolTable, test_cleanup_leak) {\n+  \/\/ Check that dead entry cleanup doesn't increment refcount of live entry in same bucket.\n+\n+  \/\/ Create symbol and release ref, marking it available for cleanup.\n+  Symbol* entry1 = SymbolTable::new_symbol(\"hash_collision_123\");\n+  entry1->decrement_refcount();\n+\n+  \/\/ Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.\n+  \/\/ Note: relies on SymbolTable's use of String::hashCode which collides for these two values.\n+  Symbol* entry2 = SymbolTable::new_symbol(\"hash_collision_397476851\");\n+\n+  ASSERT_EQ(entry2->refcount(), 1) << \"Symbol refcount just created is 1\";\n+}\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value, bool* is_dead, bool is_used_after) {\n@@ -564,1 +564,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value, bool* is_dead, bool is_used_after) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}