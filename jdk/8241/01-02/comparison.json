{"files":[{"patch":"@@ -1353,10 +1353,12 @@\n-  \/\/ Virtual methods cannot be resolved before its klass has been linked, for otherwise the Method*'s\n-  \/\/ has not been rewritten, and the vtable initialized. Make sure to do this after the nullcheck, since\n-  \/\/ a missing receiver might result in a bogus lookup.\n-  if (!resolved_method->method_holder()->is_linked()) {\n-    ResourceMark rm(THREAD);\n-    stringStream ss;\n-    ss.print(\"Resolved method holder class %s\", resolved_method->method_holder()->external_name());\n-    ss.print(\" must be linked\");\n-    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(), ss.as_string());\n-  }\n+  \/\/ Perform additional type checks before virtual call\n+  if (CheckJNICalls) {\n+    \/\/ Virtual methods cannot be resolved before its klass has been linked, for otherwise the Method*'s\n+    \/\/ has not been rewritten, and the vtable initialized. Make sure to do this after the nullcheck, since\n+    \/\/ a missing receiver might result in a bogus lookup.\n+    if (!resolved_method->method_holder()->is_linked()) {\n+      ResourceMark rm(THREAD);\n+      stringStream ss;\n+      ss.print(\"Resolved method holder class %s\", resolved_method->method_holder()->external_name());\n+      ss.print(\" must be linked.\");\n+      THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(), ss.as_string());\n+    }\n@@ -1364,8 +1366,9 @@\n-  \/\/ Receriver should be compatible with resolved klass, i.e. it must be a type of resolved klass\n-  \/\/ or a subtype of resolved klass(receiver instanceof resolved_klass)\n-  if (!recv.is_null() && !recv_klass->is_subtype_of(resolved_klass)) {\n-    ResourceMark rm(THREAD);\n-    stringStream ss;\n-    ss.print(\"The type of receiver %s\", recv_klass->external_name());\n-    ss.print(\" should be or subtype of %s\", resolved_klass->external_name());\n-    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(), ss.as_string());\n+    \/\/ Receiver should be compatible with resolved klass, i.e. it must be a type of resolved klass\n+    \/\/ or a subtype of resolved klass(receiver instanceof resolved_klass).\n+    if (!recv.is_null() && !recv_klass->is_subtype_of(resolved_klass)) {\n+      ResourceMark rm(THREAD);\n+      stringStream ss;\n+      ss.print(\"The type of receiver %s\", recv_klass->external_name());\n+      ss.print(\" should be or subtype of %s.\", resolved_klass->external_name());\n+      THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(), ss.as_string());\n+    }\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Alibaba Group Holding Limited. All Rights Reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm TestErrorReceiverType\n+ * @run main\/othervm -Xcheck:jni TestErrorReceiverType\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/TestErrorReceiverType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}