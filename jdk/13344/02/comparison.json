{"files":[{"patch":"@@ -0,0 +1,1 @@\n+dist\/\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -51,0 +51,2 @@\n+WB_CLASS_FILES := $(subst $(TESTLIBRARY_DIR)\/,,$(WB_SRC_FILES))\n+WB_CLASS_FILES := $(patsubst %.java,%.class,$(WB_CLASS_FILES))\n@@ -61,1 +63,2 @@\n-MAIN_CLASS = sun.hotspot.tools.ctw.CompileTheWorld\n+CTW_MAIN_CLASS = sun.hotspot.tools.ctw.CompileTheWorld\n+CTWRUNNER_MAIN_CLASS = sun.hotspot.tools.ctw.CtwRunner\n@@ -81,0 +84,4 @@\n+$(DST_DIR)\/ctwrunner.sh: $(DST_DIR)\n+\techo '$${JAVA_HOME}\/bin\/java $${JAVA_OPTIONS} -Dtest.jdk=$${JAVA_HOME} -cp ctw.jar $$@' > $(CTWRUNNER_MAIN_CLASS) $@\n+\tchmod a+x $@\n+\n@@ -84,1 +91,1 @@\n-\t$(JAR) --create --file=$@ --main-class $(MAIN_CLASS) -C $(OUTPUT_DIR) .\n+\t$(JAR) --create --file=$@ --main-class $(CTW_MAIN_CLASS) -C $(OUTPUT_DIR) .\n@@ -90,1 +97,1 @@\n-\t\t-d $(OUTPUT_DIR) \\\n+\t\t-d $(DST_DIR) \\\n@@ -93,1 +100,1 @@\n-\t$(JAR) --create --file=$@ -C $(OUTPUT_DIR) .\n+\tcd $(DST_DIR); $(JAR) --create --file=wb.jar $(WB_CLASS_FILES)\n@@ -96,1 +103,1 @@\n-$(DST_DIR)\/ctw.zip: $(DST_DIR)\/ctw.sh $(DST_DIR)\/wb.jar $(DST_DIR)\/ctw.jar\n+$(DST_DIR)\/ctw.zip: $(DST_DIR)\/ctw.sh $(DST_DIR)\/ctwrunner.sh $(DST_DIR)\/wb.jar $(DST_DIR)\/ctw.jar $(DST_DIR)\/ctwrunner.sh\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/Makefile","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.Arrays;\n@@ -55,0 +56,8 @@\n+    \/**\n+     * Value of {@code -Dsun.hotspot.tools.ctwrunner.ctw_extra_args}. Extra\n+     * comma-separated arguments to pass to CTW subprocesses.\n+     *\/\n+    private static final String CTW_EXTRA_ARGS\n+            = System.getProperty(\"sun.hotspot.tools.ctwrunner.ctw_extra_args\", \"\");\n+\n+\n@@ -261,0 +270,43 @@\n+\n+        ArrayList<String> Args = new ArrayList<String>(Arrays.asList(\n+                \"-Xbatch\",\n+                \"-XX:-UseCounterDecay\",\n+                \"-XX:-ShowMessageBoxOnError\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \/\/ redirect VM output to cerr so it won't collide w\/ ctw output\n+                \"-XX:+DisplayVMOutputToStderr\",\n+                \/\/ define phase start\n+                \"-DCompileTheWorldStartAt=\" + classStart,\n+                \"-DCompileTheWorldStopAt=\" + classStop,\n+                \/\/ CTW library uses WhiteBox API\n+                \"-XX:+WhiteBoxAPI\", \"-Xbootclasspath\/a:.\",\n+                \/\/ export jdk.internal packages used by CTW library\n+                \"--add-exports\", \"java.base\/jdk.internal.jimage=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.reflect=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.access=ALL-UNNAMED\",\n+                \/\/ enable diagnostic logging\n+                \"-XX:+LogCompilation\",\n+                \/\/ use phase specific log, hs_err and ciReplay files\n+                String.format(\"-XX:LogFile=hotspot_%s_%%p.log\", phase),\n+                String.format(\"-XX:ErrorFile=hs_err_%s_%%p.log\", phase),\n+                String.format(\"-XX:ReplayDataFile=replay_%s_%%p.log\", phase),\n+                \/\/ MethodHandle MUST NOT be compiled\n+                \"-XX:CompileCommand=exclude,java\/lang\/invoke\/MethodHandle.*\",\n+                \/\/ Stress* are c2-specific stress flags, so IgnoreUnrecognizedVMOptions is needed\n+                \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                \"-XX:+StressLCM\",\n+                \"-XX:+StressGCM\",\n+                \"-XX:+StressIGVN\",\n+                \"-XX:+StressCCP\",\n+                \/\/ StressSeed is uint\n+                \"-XX:StressSeed=\" + Math.abs(rng.nextInt())));\n+\n+        for (String arg : CTW_EXTRA_ARGS.split(\",\")) {\n+            Args.add(arg);\n+        }\n+\n+        \/\/ CTW entry point\n+        Args.add(CompileTheWorld.class.getName());\n+        Args.add(target);\n+\n@@ -262,36 +314,1 @@\n-            Files.write(file, List.of(\n-                    \"-Xbatch\",\n-                    \"-XX:-UseCounterDecay\",\n-                    \"-XX:-ShowMessageBoxOnError\",\n-                    \"-XX:+UnlockDiagnosticVMOptions\",\n-                    \/\/ redirect VM output to cerr so it won't collide w\/ ctw output\n-                    \"-XX:+DisplayVMOutputToStderr\",\n-                    \/\/ define phase start\n-                    \"-DCompileTheWorldStartAt=\" + classStart,\n-                    \"-DCompileTheWorldStopAt=\" + classStop,\n-                    \/\/ CTW library uses WhiteBox API\n-                    \"-XX:+WhiteBoxAPI\", \"-Xbootclasspath\/a:.\",\n-                    \/\/ export jdk.internal packages used by CTW library\n-                    \"--add-exports\", \"java.base\/jdk.internal.jimage=ALL-UNNAMED\",\n-                    \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                    \"--add-exports\", \"java.base\/jdk.internal.reflect=ALL-UNNAMED\",\n-                    \"--add-exports\", \"java.base\/jdk.internal.access=ALL-UNNAMED\",\n-                    \/\/ enable diagnostic logging\n-                    \"-XX:+LogCompilation\",\n-                    \/\/ use phase specific log, hs_err and ciReplay files\n-                    String.format(\"-XX:LogFile=hotspot_%s_%%p.log\", phase),\n-                    String.format(\"-XX:ErrorFile=hs_err_%s_%%p.log\", phase),\n-                    String.format(\"-XX:ReplayDataFile=replay_%s_%%p.log\", phase),\n-                    \/\/ MethodHandle MUST NOT be compiled\n-                    \"-XX:CompileCommand=exclude,java\/lang\/invoke\/MethodHandle.*\",\n-                    \/\/ Stress* are c2-specific stress flags, so IgnoreUnrecognizedVMOptions is needed\n-                    \"-XX:+IgnoreUnrecognizedVMOptions\",\n-                    \"-XX:+StressLCM\",\n-                    \"-XX:+StressGCM\",\n-                    \"-XX:+StressIGVN\",\n-                    \"-XX:+StressCCP\",\n-                    \/\/ StressSeed is uint\n-                    \"-XX:StressSeed=\" + Math.abs(rng.nextInt()),\n-                    \/\/ CTW entry point\n-                    CompileTheWorld.class.getName(),\n-                    target));\n+            Files.write(file, Args);\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":54,"deletions":37,"binary":false,"changes":91,"status":"modified"}]}