{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,12 +76,6 @@\n-\/\/ Declare the named class to be noncopyable.  This macro must be used in\n-\/\/ a private part of the class's definition, followed by a semi-colon.\n-\/\/ Doing so provides private declarations for the class's copy constructor\n-\/\/ and assignment operator.  Because these operations are private, most\n-\/\/ potential callers will fail to compile because they are inaccessible.\n-\/\/ The operations intentionally lack a definition, to provoke link-time\n-\/\/ failures for calls from contexts where they are accessible, e.g. from\n-\/\/ within the class or from a friend of the class.\n-\/\/ Note: The lack of definitions is still not completely bullet-proof, as\n-\/\/ an apparent call might be optimized away by copy elision.\n-\/\/ For C++11 the declarations should be changed to deleted definitions.\n-#define NONCOPYABLE(C) C(C const&); C& operator=(C const&) \/* next token must be ; *\/\n+\/\/ Declare the named class to be noncopyable.  This macro must be followed by\n+\/\/ a semi-colon.  The macro provides deleted declarations for the class's copy\n+\/\/ constructor and assignment operator.  Because these operations are deleted,\n+\/\/ they cannot be defined and potential callers will fail to compile.\n+#define NONCOPYABLE(C) C(C const&) = delete; C& operator=(C const&) = delete \/* next token must be ; *\/\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}