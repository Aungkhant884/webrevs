{"files":[{"patch":"@@ -184,3 +184,3 @@\n-<blockquote><pre>{@code\n-    linker.downcallHandle(function).bindTo(symbol);\n-}<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * linker.downcallHandle(function).bindTo(symbol);\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,4 +49,4 @@\n- * <blockquote><pre>{@code\n-MemoryAddress address = ...\n-int value = address.get(ValueLayout.JAVA_INT, 0);\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemoryAddress address = ...\n+ * int value = address.get(ValueLayout.JAVA_INT, 0);\n+ * }\n@@ -56,4 +56,4 @@\n- * <blockquote><pre>{@code\n-MemoryAddress address = ...\n-int value = address.get(ValueLayout.JAVA_INT.withOrder(BIG_ENDIAN), 0);\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemoryAddress address = ...\n+ * int value = address.get(ValueLayout.JAVA_INT.withOrder(BIG_ENDIAN), 0);\n+ * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,6 +50,6 @@\n- * <blockquote><pre>{@code\n-GroupLayout seq = MemoryLayout.structLayout(\n-        MemoryLayout.paddingLayout(32),\n-        ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"value\")\n-);\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * GroupLayout seq = MemoryLayout.structLayout(\n+ *         MemoryLayout.paddingLayout(32),\n+ *         ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"value\")\n+ * );\n+ * }\n@@ -57,4 +57,4 @@\n- * <blockquote><pre>{@code\n-VarHandle handle = MemoryHandles.varHandle(ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN)); \/\/(MemorySegment, long) -> int\n-handle = MemoryHandles.insertCoordinates(handle, 1, 4); \/\/(MemorySegment) -> int\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * VarHandle handle = MemoryHandles.varHandle(ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN)); \/\/(MemorySegment, long) -> int\n+ * handle = MemoryHandles.insertCoordinates(handle, 1, 4); \/\/(MemorySegment) -> int\n+ * }\n@@ -180,7 +180,7 @@\n-     * <blockquote><pre>{@code\n-    MemorySegment segment = MemorySegment.allocateNative(2, ResourceScope.newImplicitScope());\n-    VarHandle SHORT_VH = ValueLayout.JAVA_SHORT.varHandle();\n-    VarHandle INT_VH = MemoryHandles.asUnsigned(SHORT_VH, int.class);\n-    SHORT_VH.set(segment, (short)-1);\n-    INT_VH.get(segment); \/\/ returns 65535\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemorySegment segment = MemorySegment.allocateNative(2, ResourceScope.newImplicitScope());\n+     * VarHandle SHORT_VH = ValueLayout.JAVA_SHORT.varHandle();\n+     * VarHandle INT_VH = MemoryHandles.asUnsigned(SHORT_VH, int.class);\n+     * SHORT_VH.set(segment, (short)-1);\n+     * INT_VH.get(segment); \/\/ returns 65535\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,6 +61,6 @@\n- * <blockquote><pre>{@code\n- typedef struct {\n-     char kind;\n-     int value;\n- } TaggedValues[5];\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=c :\n+ * typedef struct {\n+ *     char kind;\n+ *     int value;\n+ * } TaggedValues[5];\n+ * }\n@@ -70,9 +70,9 @@\n- * <blockquote><pre>{@code\n-SequenceLayout taggedValues = MemoryLayout.sequenceLayout(5,\n-    MemoryLayout.structLayout(\n-        ValueLayout.JAVA_BYTE.withName(\"kind\"),\n-        MemoryLayout.paddingLayout(24),\n-        ValueLayout.JAVA_INT.withName(\"value\")\n-    )\n-).withName(\"TaggedValues\");\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * SequenceLayout taggedValues = MemoryLayout.sequenceLayout(5,\n+ *     MemoryLayout.structLayout(\n+ *         ValueLayout.JAVA_BYTE.withName(\"kind\"),\n+ *         MemoryLayout.paddingLayout(24),\n+ *         ValueLayout.JAVA_INT.withName(\"value\")\n+ *     )\n+ * ).withName(\"TaggedValues\");\n+ * }\n@@ -132,4 +132,4 @@\n- * <blockquote><pre>{@code\n-long valueOffset = taggedValues.bitOffset(PathElement.sequenceElement(0),\n-                                          PathElement.groupElement(\"value\")); \/\/ yields 32\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * long valueOffset = taggedValues.bitOffset(PathElement.sequenceElement(0),\n+ *                                           PathElement.groupElement(\"value\")); \/\/ yields 32\n+ * }\n@@ -138,4 +138,4 @@\n- * <blockquote><pre>{@code\n-MemoryLayout value = taggedValues.select(PathElement.sequenceElement(),\n-                                         PathElement.groupElement(\"value\"));\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemoryLayout value = taggedValues.select(PathElement.sequenceElement(),\n+ *                                          PathElement.groupElement(\"value\"));\n+ * }\n@@ -144,4 +144,4 @@\n- * <blockquote><pre>{@code\n-MemoryLayout taggedValuesWithHole = taggedValues.map(l -> MemoryLayout.paddingLayout(32),\n-                                            PathElement.sequenceElement(), PathElement.groupElement(\"value\"));\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemoryLayout taggedValuesWithHole = taggedValues.map(l -> MemoryLayout.paddingLayout(32),\n+ *                                             PathElement.sequenceElement(), PathElement.groupElement(\"value\"));\n+ * }\n@@ -150,8 +150,8 @@\n- * <blockquote><pre>{@code\n-MemoryLayout taggedValuesWithHole = MemoryLayout.sequenceLayout(5,\n-    MemoryLayout.structLayout(\n-        ValueLayout.JAVA_BYTE.withName(\"kind\"),\n-        MemoryLayout.paddingLayout(32),\n-        MemoryLayout.paddingLayout(32)\n-));\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemoryLayout taggedValuesWithHole = MemoryLayout.sequenceLayout(5,\n+ *     MemoryLayout.structLayout(\n+ *         ValueLayout.JAVA_BYTE.withName(\"kind\"),\n+ *         MemoryLayout.paddingLayout(32),\n+ *         MemoryLayout.paddingLayout(32)\n+ * ));\n+ * }\n@@ -164,4 +164,4 @@\n- * <blockquote><pre>{@code\n-VarHandle valueHandle = taggedValues.varHandle(PathElement.sequenceElement(),\n-                                               PathElement.groupElement(\"value\"));\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * VarHandle valueHandle = taggedValues.varHandle(PathElement.sequenceElement(),\n+ *                                                PathElement.groupElement(\"value\"));\n+ * }\n@@ -180,6 +180,6 @@\n- * <blockquote><pre>{@code\n-MethodHandle offsetHandle = taggedValues.byteOffsetHandle(PathElement.sequenceElement(),\n-                                                          PathElement.groupElement(\"kind\"));\n-long offset1 = (long) offsetHandle.invokeExact(1L); \/\/ 8\n-long offset2 = (long) offsetHandle.invokeExact(2L); \/\/ 16\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MethodHandle offsetHandle = taggedValues.byteOffsetHandle(PathElement.sequenceElement(),\n+ *                                                           PathElement.groupElement(\"kind\"));\n+ * long offset1 = (long) offsetHandle.invokeExact(1L); \/\/ 8\n+ * long offset2 = (long) offsetHandle.invokeExact(2L); \/\/ 16\n+ * }\n@@ -333,1 +333,1 @@\n-    offset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n+     * offset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n@@ -384,2 +384,2 @@\n-    bitOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n-    offset = bitOffset \/ 8\n+     * bitOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n+     * offset = bitOffset \/ 8\n@@ -416,1 +416,1 @@\n-    address = base + offset\n+     * address = base + offset\n@@ -424,1 +424,1 @@\n-    offset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n+     * offset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n@@ -461,2 +461,2 @@\n-    bitOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n-    offset = bitOffset \/ 8\n+     * bitOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n+     * offset = bitOffset \/ 8\n@@ -471,3 +471,3 @@\n-     * <blockquote><pre>{@code\n-    segment.asSlice(offset, layout.byteSize());\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * segment.asSlice(offset, layout.byteSize());\n+     * }\n@@ -602,1 +602,1 @@\n-E * (S + I * F)\n+         * E * (S + I * F)\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -122,4 +122,4 @@\n- * <blockquote><pre>{@code\n-MemorySegment segment = ...\n-int value = segment.get(ValueLayout.JAVA_INT, 0);\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = ...\n+ * int value = segment.get(ValueLayout.JAVA_INT, 0);\n+ * }\n@@ -129,4 +129,4 @@\n- * <blockquote><pre>{@code\n-MemorySegment segment = ...\n-int value = segment.get(ValueLayout.JAVA_INT.withOrder(BIG_ENDIAN), 0);\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = ...\n+ * int value = segment.get(ValueLayout.JAVA_INT.withOrder(BIG_ENDIAN), 0);\n+ * }\n@@ -148,7 +148,7 @@\n- * <blockquote><pre>{@code\n-MemorySegment segment = null;\n-try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-    segment = MemorySegment.allocateNative(8, scope);\n-}\n-segment.get(ValueLayout.JAVA_LONG, 0); \/\/ already closed!\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = null;\n+ * try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+ *     segment = MemorySegment.allocateNative(8, scope);\n+ * }\n+ * segment.get(ValueLayout.JAVA_LONG, 0); \/\/ already closed!\n+ * }\n@@ -165,4 +165,4 @@\n- * <blockquote><pre>{@code\n-MemorySegment segment = ...\n-MemorySegment roSegment = segment.asReadOnly();\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = ...\n+ * MemorySegment roSegment = segment.asReadOnly();\n+ * }\n@@ -187,9 +187,9 @@\n- * <blockquote><pre>{@code\n-try (ResourceScope scope = ResourceScope.newSharedScope()) {\n-    SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_INT);\n-    MemorySegment segment = MemorySegment.allocateNative(SEQUENCE_LAYOUT, scope);\n-    int sum = segment.elements(ValueLayout.JAVA_INT).parallel()\n-                           .mapToInt(s -> s.get(ValueLayout.JAVA_INT, 0))\n-                           .sum();\n-}\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * try (ResourceScope scope = ResourceScope.newSharedScope()) {\n+ *     SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_INT);\n+ *     MemorySegment segment = MemorySegment.allocateNative(SEQUENCE_LAYOUT, scope);\n+ *     int sum = segment.elements(ValueLayout.JAVA_INT).parallel()\n+ *                      .mapToInt(s -> s.get(ValueLayout.JAVA_INT, 0))\n+ *                      .sum();\n+ * }\n+ * }\n@@ -236,3 +236,3 @@\n-     * <blockquote><pre>{@code\n-    StreamSupport.stream(segment.spliterator(elementLayout), false);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * StreamSupport.stream(segment.spliterator(elementLayout), false);\n+     * }\n@@ -277,3 +277,3 @@\n-     * <pre>{@code\n-    asSlice(offset, byteSize() - offset);\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * asSlice(offset, byteSize() - offset);\n+     * }\n@@ -346,1 +346,1 @@\n-     * <pre>{@code\n+     * {@snippet lang=java :\n@@ -348,1 +348,1 @@\n-     * }<\/pre>\n+     * }\n@@ -365,7 +365,7 @@\n-     * <pre>{@code\n-byteHandle = MemoryLayout.ofSequence(ValueLayout.JAVA_BYTE)\n-         .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());\n-for (long l = 0; l < segment.byteSize(); l++) {\n-     byteHandle.set(segment.address(), l, value);\n-}\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * byteHandle = MemoryLayout.ofSequence(ValueLayout.JAVA_BYTE)\n+     *         .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());\n+     * for (long l = 0; l < segment.byteSize(); l++) {\n+     *     byteHandle.set(segment.address(), l, value);\n+     * }\n+     * }\n@@ -392,3 +392,3 @@\n-     * <blockquote><pre>{@code\n-    MemorySegment.copy(src, 0, this, 0, src.byteSize);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemorySegment.copy(src, 0, this, 0, src.byteSize);\n+     * }\n@@ -804,3 +804,3 @@\n-     * <blockquote><pre>{@code\n-    allocateNative(layout.bytesSize(), layout.bytesAlignment(), scope);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * allocateNative(layout.bytesSize(), layout.bytesAlignment(), scope);\n+     * }\n@@ -829,3 +829,3 @@\n-     * <blockquote><pre>{@code\n-    allocateNative(bytesSize, 1, scope);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * allocateNative(bytesSize, 1, scope);\n+     * }\n@@ -938,3 +938,3 @@\n-     * <blockquote><pre>{@code\n-    MemorySegment.copy(srcSegment, ValueLayout.JAVA_BYTE, srcOffset, dstSegment, ValueLayout.JAVA_BYTE, dstOffset, bytes);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemorySegment.copy(srcSegment, ValueLayout.JAVA_BYTE, srcOffset, dstSegment, ValueLayout.JAVA_BYTE, dstOffset, bytes);\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -106,9 +106,9 @@\n- * <blockquote><pre>{@code\n-try (ResourceScope scope = ResourceScope.newSharedScope()) {\n-    SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_INT);\n-    MemorySegment segment = MemorySegment.allocateNative(SEQUENCE_LAYOUT, scope);\n-    int sum = segment.elements(ValueLayout.JAVA_INT).parallel()\n-                        .mapToInt(s -> s.get(ValueLayout.JAVA_INT, 0))\n-                        .sum();\n-}\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * try (ResourceScope scope = ResourceScope.newSharedScope()) {\n+ *     SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_INT);\n+ *     MemorySegment segment = MemorySegment.allocateNative(SEQUENCE_LAYOUT, scope);\n+ *     int sum = segment.elements(ValueLayout.JAVA_INT).parallel()\n+ *                      .mapToInt(s -> s.get(ValueLayout.JAVA_INT, 0))\n+ *                      .sum();\n+ * }\n+ * }\n@@ -134,7 +134,7 @@\n- * <blockquote><pre>{@code\n-MemorySegment segment = ...\n-try (ResourceScope criticalScope = ResourceScope.newConfinedScope()) {\n-    criticalScope.keepAlive(segment.scope());\n-    <critical operation on segment>\n-}\n- * }<\/pre><\/blockquote>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = ...\n+ * try (ResourceScope criticalScope = ResourceScope.newConfinedScope()) {\n+ *     criticalScope.keepAlive(segment.scope());\n+ *     <critical operation on segment>\n+ * }\n+ * }\n@@ -242,3 +242,3 @@\n-     * <pre>{@code\n-    newSharedScope(Cleaner.create());\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * newSharedScope(Cleaner.create());\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -342,3 +342,3 @@\n-     * <blockquote><pre>{@code\n-    SegmentAllocator.newNativeArena(Long.MAX_VALUE, predefinedBlockSize, scope);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * SegmentAllocator.newNativeArena(Long.MAX_VALUE, predefinedBlockSize, scope);\n+     * }\n@@ -358,3 +358,3 @@\n-     * <blockquote><pre>{@code\n-    SegmentAllocator.newNativeArena(arenaSize, arenaSize, scope);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * SegmentAllocator.newNativeArena(arenaSize, arenaSize, scope);\n+     * }\n@@ -419,4 +419,4 @@\n-     * <blockquote><pre>{@code\n-    MemorySegment segment = ...\n-    SegmentAllocator prefixAllocator = (size, align) -> segment.asSlice(0, size);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemorySegment segment = ...\n+     * SegmentAllocator prefixAllocator = (size, align) -> segment.asSlice(0, size);\n+     * }\n@@ -442,4 +442,4 @@\n-     * <blockquote><pre>{@code\n-    ResourceScope scope = ...\n-    SegmentAllocator nativeAllocator = (size, align) -> MemorySegment.allocateNative(size, align, scope);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * ResourceScope scope = ...\n+     * SegmentAllocator nativeAllocator = (size, align) -> MemorySegment.allocateNative(size, align, scope);\n+     * }\n@@ -458,4 +458,4 @@\n-     * <blockquote><pre>{@code\n-    ResourceScope scope = ...\n-    SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * ResourceScope scope = ...\n+     * SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,3 @@\n- * <pre>{@code\n-MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN));\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN));\n+ * }\n@@ -46,6 +46,6 @@\n- * <pre>{@code\n-MemoryLayout.structLayout(\n-    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN));\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * MemoryLayout.structLayout(\n+ *     ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n+ *     ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n+ *     ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN));\n+ * }\n@@ -122,3 +122,3 @@\n-     * <pre>{@code\n-    var seq = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT));\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * var seq = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT));\n+     * }\n@@ -126,3 +126,3 @@\n-     * <pre>{@code\n-    var reshapeSeq = MemoryLayout.sequenceLayout(2, MemoryLayout.sequenceLayout(6, ValueLayout.JAVA_INT));\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * var reshapeSeq = MemoryLayout.sequenceLayout(2, MemoryLayout.sequenceLayout(6, ValueLayout.JAVA_INT));\n+     * }\n@@ -134,4 +134,4 @@\n-     * <pre>{@code\n-    var reshapeSeqImplicit1 = seq.reshape(-1, 6);\n-    var reshapeSeqImplicit2 = seq.reshape(2, -1);\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * var reshapeSeqImplicit1 = seq.reshape(-1, 6);\n+     * var reshapeSeqImplicit2 = seq.reshape(2, -1);\n+     * }\n@@ -198,3 +198,3 @@\n-     * <pre>{@code\n-    var seq = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT));\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * var seq = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT));\n+     * }\n@@ -202,3 +202,3 @@\n-     * <pre>{@code\n-    var flattenedSeq = MemoryLayout.sequenceLayout(12, ValueLayout.JAVA_INT);\n-     * }<\/pre>\n+     * {@snippet lang=java :\n+     * var flattenedSeq = MemoryLayout.sequenceLayout(12, ValueLayout.JAVA_INT);\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -519,3 +519,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -529,3 +529,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(byte.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(byte.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -539,3 +539,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(boolean.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(boolean.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -549,3 +549,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -559,3 +559,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -569,3 +569,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -579,3 +579,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -590,3 +590,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n@@ -600,3 +600,3 @@\n-     * <blockquote><pre>{@code\n-    MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n-     * }<\/pre><\/blockquote>\n+     * {@snippet lang=java :\n+     * MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -46,6 +46,6 @@\n- * <pre>{@code\n-MemorySegment segment = MemorySegment.allocateNative(10 * 4, ResourceScope.newImplicitScope());\n-for (int i = 0 ; i < 10 ; i++) {\n-   segment.setAtIndex(ValueLayout.JAVA_INT, i, i);\n-}\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * MemorySegment segment = MemorySegment.allocateNative(10 * 4, ResourceScope.newImplicitScope());\n+ * for (int i = 0 ; i < 10 ; i++) {\n+ *     segment.setAtIndex(ValueLayout.JAVA_INT, i, i);\n+ * }\n+ * }\n@@ -72,8 +72,8 @@\n- * <pre>{@code\n-try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-    MemorySegment segment = MemorySegment.allocateNative(10 * 4, scope);\n-    for (int i = 0 ; i < 10 ; i++) {\n-        segment.setAtIndex(ValueLayout.JAVA_INT, i, i);\n-    }\n-}\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+ *     MemorySegment segment = MemorySegment.allocateNative(10 * 4, scope);\n+ *     for (int i = 0 ; i < 10 ; i++) {\n+ *         segment.setAtIndex(ValueLayout.JAVA_INT, i, i);\n+ *     }\n+ * }\n+ * }\n@@ -110,13 +110,13 @@\n- * <pre>{@code\n-      var linker = CLinker.systemCLinker();\n-      MethodHandle strlen = linker.downcallHandle(\n-        linker.lookup(\"strlen\").get(),\n-        FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS)\n-      );\n-\n-      try (var scope = ResourceScope.newConfinedScope()) {\n-         var cString = MemorySegment.allocateNative(5 + 1, scope);\n-         cString.setUtf8String(\"Hello\");\n-         long len = (long)strlen.invoke(cString); \/\/ 5\n-      }\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * var linker = CLinker.systemCLinker();\n+ * MethodHandle strlen = linker.downcallHandle(\n+ *     linker.lookup(\"strlen\").get(),\n+ *     FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS)\n+ * );\n+ *\n+ * try (var scope = ResourceScope.newConfinedScope()) {\n+ *     var cString = MemorySegment.allocateNative(5 + 1, scope);\n+ *     cString.setUtf8String(\"Hello\");\n+ *     long len = (long)strlen.invoke(cString); \/\/ 5\n+ * }\n+ * }\n@@ -151,5 +151,4 @@\n- * <pre>{@code\n-...\n-MemoryAddress addr = ... \/\/obtain address from native code\n-int x = addr.get(ValueLayout.JAVA_INT, 0);\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * MemoryAddress addr = ... \/\/obtain address from native code\n+ * int x = addr.get(ValueLayout.JAVA_INT, 0);\n+ * }\n@@ -163,6 +162,6 @@\n- * <pre>{@code\n-ResourceScope scope = ... \/\/ initialize a resource scope object\n-MemoryAddress addr = ... \/\/obtain address from native code\n-MemorySegment segment = MemorySegment.ofAddress(addr, 4, scope); \/\/ segment is 4 bytes long\n-int x = segment.get(ValueLayout.JAVA_INT, 0);\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * ResourceScope scope = ... \/\/ initialize a resource scope object\n+ * MemoryAddress addr = ... \/\/obtain address from native code\n+ * MemorySegment segment = MemorySegment.ofAddress(addr, 4, scope); \/\/ segment is 4 bytes long\n+ * int x = segment.get(ValueLayout.JAVA_INT, 0);\n+ * }\n@@ -175,7 +174,7 @@\n- * <pre>{@code\n-class IntComparator {\n-    static int intCompare(MemoryAddress addr1, MemoryAddress addr2) {\n-        return addr1.get(ValueLayout.JAVA_INT, 0) - addr2.get(ValueLayout.JAVA_INT, 0);\n-    }\n-}\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * class IntComparator {\n+ *     static int intCompare(MemoryAddress addr1, MemoryAddress addr2) {\n+ *         return addr1.get(ValueLayout.JAVA_INT, 0) - addr2.get(ValueLayout.JAVA_INT, 0);\n+ *     }\n+ * }\n+ * }\n@@ -187,6 +186,6 @@\n- * <pre>{@code\n-FunctionDescriptor intCompareDescriptor = FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS);\n-MethodHandle intCompareHandle = MethodHandles.lookup().findStatic(IntComparator.class,\n-                                                   \"intCompare\",\n-                                                   CLinker.upcallType(comparFunction));\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * FunctionDescriptor intCompareDescriptor = FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS);\n+ * MethodHandle intCompareHandle = MethodHandles.lookup().findStatic(IntComparator.class,\n+ *                                                 \"intCompare\",\n+ *                                                 CLinker.upcallType(comparFunction));\n+ * }\n@@ -202,6 +201,6 @@\n- * <pre>{@code\n-ResourceScope scope = ...\n-Addressable comparFunc = CLinker.systemCLinker().upcallStub(\n-     intCompareHandle, intCompareDescriptor, scope);\n-);\n- * }<\/pre>\n+ * {@snippet lang=java :\n+ * ResourceScope scope = ...\n+ * Addressable comparFunc = CLinker.systemCLinker().upcallStub(\n+ *     intCompareHandle, intCompareDescriptor, scope);\n+ * );\n+ * }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":56,"deletions":57,"binary":false,"changes":113,"status":"modified"}]}