{"files":[{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.cant.ref.before.ctor.called\n-\n-import java.util.function.Supplier;\n-\n-public class MethodReferenceNotAllowedStaticContext {\n-    interface Bar {\n-        default String getString() {\n-            return \"\";\n-        }\n-    }\n-\n-    static class Foo implements Bar {\n-\n-        public Foo() {\n-            this(Bar.super::getString);\n-        }\n-\n-        public Foo(Supplier<String> sString) {\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MethodReferenceNotAllowedStaticContext.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -4,1 +4,1 @@\n- * @summary fail to parse broken interface::method in lambda\n+ * @summary 'super' qualified method references cannot occur in a static context\n@@ -19,1 +19,1 @@\n-        public Foo() {\n+        Foo() {\n@@ -22,0 +22,1 @@\n+        Foo(Supplier<String> sString) {}\n@@ -23,2 +24,2 @@\n-        public Foo(Supplier<String> sString) {\n-        }\n+        Foo(int i) { this(Bar.super.getString()); }\n+        Foo(String s) {}\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/MethodReferenceInConstructorInvocation.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n-1 error\n+MethodReferenceInConstructorInvocation.java:24:30: compiler.err.cant.ref.before.ctor.called: super\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/MethodReferenceInConstructorInvocation.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}