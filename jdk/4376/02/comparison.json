{"files":[{"patch":"@@ -4346,1 +4346,1 @@\n-            if (sym.name == names._this) {\n+            if (sym.name == names._this || sym.name == names._super) {\n@@ -4348,1 +4348,1 @@\n-                \/\/ C.this' does not appear in a call to a super(...)\n+                \/\/ C.this' does not appear in an explicit call to a constructor\n@@ -4350,1 +4350,3 @@\n-                    site.tsym == env.enclClass.sym) {\n+                        ((sym.name == names._this &&\n+                        site.tsym == env.enclClass.sym) ||\n+                        sym.name == names._super)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.cant.ref.before.ctor.called\n+\n+import java.util.function.Supplier;\n+\n+public class MethodReferenceNotAllowedStaticContext {\n+    interface Bar {\n+        default String getString() {\n+            return \"\";\n+        }\n+    }\n+\n+    static class Foo implements Bar {\n+\n+        public Foo() {\n+            this(Bar.super::getString);\n+        }\n+\n+        public Foo(Supplier<String> sString) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MethodReferenceNotAllowedStaticContext.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8261006\n+ * @summary fail to parse broken interface::method in lambda\n+ * @compile\/fail\/ref=MethodReferenceInConstructorInvocation.out -XDrawDiagnostics MethodReferenceInConstructorInvocation.java\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public class MethodReferenceInConstructorInvocation {\n+    interface Bar {\n+        default String getString() {\n+            return \"\";\n+        }\n+    }\n+\n+    static class Foo implements Bar {\n+\n+        public Foo() {\n+            this(Bar.super::getString);\n+        }\n+\n+        public Foo(Supplier<String> sString) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/MethodReferenceInConstructorInvocation.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+MethodReferenceInConstructorInvocation.java:20:21: compiler.err.cant.ref.before.ctor.called: super\n+1 error\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/MethodReferenceInConstructorInvocation.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}