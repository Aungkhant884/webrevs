{"files":[{"patch":"@@ -53,0 +53,18 @@\n+static_assert(sizeof(oop) == sizeof(intptr_t), \"Derived pointer sanity check\");\n+\n+static inline intptr_t derived_pointer_value(derived_pointer p) {\n+  return static_cast<intptr_t>(p);\n+}\n+\n+static inline derived_pointer to_derived_pointer(oop obj) {\n+  return static_cast<derived_pointer>(cast_from_oop<intptr_t>(obj));\n+}\n+\n+static inline intptr_t operator-(derived_pointer p, derived_pointer p1) {\n+  return derived_pointer_value(p) - derived_pointer_value(p1);\n+}\n+\n+static inline derived_pointer operator+(derived_pointer p, intptr_t offset) {\n+  return static_cast<derived_pointer>(derived_pointer_value(p) + offset);\n+}\n+\n@@ -196,1 +214,1 @@\n-static void add_derived_oop(oop* base, oop* derived, OopClosure* oop_fn) {\n+static void add_derived_oop(oop* base, derived_pointer* derived, OopClosure* oop_fn) {\n@@ -202,1 +220,1 @@\n-static void ignore_derived_oop(oop* base, oop* derived, OopClosure* oop_fn) {\n+static void ignore_derived_oop(oop* base, derived_pointer* derived, OopClosure* oop_fn) {\n@@ -205,1 +223,1 @@\n-static void process_derived_oop(oop* base, oop* derived, OopClosure* oop_fn) {\n+static void process_derived_oop(oop* base, derived_pointer* derived, OopClosure* oop_fn) {\n@@ -209,4 +227,5 @@\n-  uintptr_t offset = cast_from_oop<uintptr_t>(*derived) - cast_from_oop<uintptr_t>(*base);\n-  *derived = *base;\n-  oop_fn->do_oop(derived);\n-  *derived = cast_to_oop(cast_from_oop<uintptr_t>(*derived) + offset);\n+  derived_pointer derived_base = to_derived_pointer(*base);\n+  intptr_t offset = *derived - derived_base;\n+  *derived = derived_base;\n+  oop_fn->do_oop((oop*)derived);\n+  *derived = *derived + offset;\n@@ -260,1 +279,1 @@\n-                       OopClosure* oop_fn, void derived_oop_fn(oop*, oop*, OopClosure*),\n+                       OopClosure* oop_fn, void derived_oop_fn(oop*, derived_pointer*, OopClosure*),\n@@ -287,4 +306,3 @@\n-      oop* loc = fr->oopmapreg_to_location(omv.reg(),reg_map);\n-      guarantee(loc != NULL, \"missing saved register\");\n-      oop *derived_loc = loc;\n-      oop *base_loc    = fr->oopmapreg_to_location(omv.content_reg(), reg_map);\n+      derived_pointer* derived_loc = (derived_pointer*)fr->oopmapreg_to_location(omv.reg(),reg_map);\n+      guarantee(derived_loc != NULL, \"missing saved register\");\n+      oop* base_loc = fr->oopmapreg_to_oop_location(omv.content_reg(), reg_map);\n@@ -306,1 +324,1 @@\n-      oop* loc = fr->oopmapreg_to_location(omv.reg(),reg_map);\n+      oop* loc = fr->oopmapreg_to_oop_location(omv.reg(),reg_map);\n@@ -369,1 +387,1 @@\n-      oop* loc = fr->oopmapreg_to_location(omv.reg(), reg_map);\n+      oop* loc = fr->oopmapreg_to_oop_location(omv.reg(), reg_map);\n@@ -660,3 +678,3 @@\n-  oop* _location;   \/\/ Location of derived pointer, also pointing to base\n-  intptr_t _offset; \/\/ Offset from base pointer\n-  Entry* volatile _next;\n+  derived_pointer* _location; \/\/ Location of derived pointer, also pointing to base\n+  intptr_t         _offset;   \/\/ Offset from base pointer\n+  Entry* volatile  _next;\n@@ -667,1 +685,1 @@\n-  Entry(oop* location, intptr_t offset) :\n+  Entry(derived_pointer* location, intptr_t offset) :\n@@ -670,1 +688,1 @@\n-  oop* location() const { return _location; }\n+  derived_pointer* location() const { return _location; }\n@@ -698,6 +716,1 @@\n-\/\/ Returns value of location as an int\n-inline intptr_t value_of_loc(oop *pointer) {\n-  return cast_from_oop<intptr_t>((*pointer));\n-}\n-\n-void DerivedPointerTable::add(oop *derived_loc, oop *base_loc) {\n+void DerivedPointerTable::add(derived_pointer* derived_loc, oop *base_loc) {\n@@ -705,2 +718,4 @@\n-  assert(derived_loc != base_loc, \"Base and derived in same location\");\n-  assert(*derived_loc != (void*)base_loc, \"location already added\");\n+  assert(derived_loc != (void*)base_loc, \"Base and derived in same location\");\n+  derived_pointer base_loc_as_derived_pointer =\n+    static_cast<derived_pointer>(reinterpret_cast<intptr_t>(base_loc));\n+  assert(*derived_loc != base_loc_as_derived_pointer, \"location already added\");\n@@ -709,1 +724,1 @@\n-  intptr_t offset = value_of_loc(derived_loc) - value_of_loc(base_loc);\n+  intptr_t offset = *derived_loc - to_derived_pointer(*base_loc);\n@@ -719,1 +734,1 @@\n-      p2i(derived_loc), p2i(*derived_loc), p2i(*base_loc), p2i(base_loc), offset\n+      p2i(derived_loc), derived_pointer_value(*derived_loc), p2i(*base_loc), p2i(base_loc), offset\n@@ -723,1 +738,1 @@\n-  *derived_loc = cast_to_oop(base_loc);\n+  *derived_loc = base_loc_as_derived_pointer;\n@@ -734,1 +749,1 @@\n-    oop* derived_loc = entry->location();\n+    derived_pointer* derived_loc = entry->location();\n@@ -737,1 +752,1 @@\n-    oop base = **(oop**)derived_loc;\n+    oop base = **reinterpret_cast<oop**>(derived_loc);\n@@ -740,2 +755,3 @@\n-    *derived_loc = cast_to_oop(cast_from_oop<address>(base) + offset);\n-    assert(value_of_loc(derived_loc) - value_of_loc(&base) == offset, \"sanity check\");\n+    derived_pointer derived_base = to_derived_pointer(base);\n+    *derived_loc = derived_base + offset;\n+    assert(*derived_loc - derived_base == offset, \"sanity check\");\n@@ -746,1 +762,1 @@\n-          p2i(derived_loc), p2i(*derived_loc), p2i(base), offset);\n+                    p2i(derived_loc), derived_pointer_value(*derived_loc), p2i(base), offset);\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":51,"deletions":35,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+enum class derived_pointer : intptr_t {};\n+\n@@ -232,1 +234,1 @@\n-                     void derived_oop_fn(oop* base, oop* derived, OopClosure* oop_fn),\n+                     void derived_oop_fn(oop* base, derived_pointer* derived, OopClosure* oop_fn),\n@@ -416,1 +418,1 @@\n-  static bool _active;                      \/\/ do not record pointers for verify pass etc.\n+  static bool _active;                                  \/\/ do not record pointers for verify pass etc.\n@@ -419,3 +421,3 @@\n-  static void clear();                       \/\/ Called before scavenge\/GC\n-  static void add(oop *derived, oop *base);  \/\/ Called during scavenge\/GC\n-  static void update_pointers();             \/\/ Called after  scavenge\/GC\n+  static void clear();                                  \/\/ Called before scavenge\/GC\n+  static void add(derived_pointer* derived, oop *base); \/\/ Called during scavenge\/GC\n+  static void update_pointers();                        \/\/ Called after  scavenge\/GC\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -945,1 +945,1 @@\n-    oop *loc = _fr.oopmapreg_to_location(reg, _reg_map);\n+    oop *loc = _fr.oopmapreg_to_oop_location(reg, _reg_map);\n@@ -1000,1 +1000,1 @@\n-  oop* oop_adr = caller.oopmapreg_to_location(reg, reg_map);\n+  oop* oop_adr = caller.oopmapreg_to_oop_location(reg, reg_map);\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -367,1 +367,2 @@\n-  oop* oopmapreg_to_location(VMReg reg, const RegisterMap* reg_map) const;\n+  address oopmapreg_to_location(VMReg reg, const RegisterMap* reg_map) const;\n+  oop* oopmapreg_to_oop_location(VMReg reg, const RegisterMap* reg_map) const;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-inline oop* frame::oopmapreg_to_location(VMReg reg, const RegisterMap* reg_map) const {\n+inline address frame::oopmapreg_to_location(VMReg reg, const RegisterMap* reg_map) const {\n@@ -57,1 +57,1 @@\n-    return (oop *)reg_map->location(reg);\n+    return reg_map->location(reg);\n@@ -60,1 +60,1 @@\n-    return (oop*)(((address)unextended_sp()) + sp_offset_in_bytes);\n+    return ((address)unextended_sp()) + sp_offset_in_bytes;\n@@ -64,0 +64,4 @@\n+inline oop* frame::oopmapreg_to_oop_location(VMReg reg, const RegisterMap* reg_map) const {\n+  return (oop*)oopmapreg_to_location(reg, reg_map);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}