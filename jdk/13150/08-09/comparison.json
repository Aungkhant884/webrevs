{"files":[{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package io;\n-\n-import org.openjdk.jmh.annotations.*;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayInputStream;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@Fork(value = 4, warmups = 0)\n-@Measurement(iterations = 5, time = 1)\n-@Warmup(iterations = 5, time = 2)\n-@State(Scope.Benchmark)\n-public class BufferedInputStreamBenchmark {\n-\n-    \/\/read less or more than internal buffer size of 8192 bytes\n-    @Param({\"1024\", \"16384\"})\n-    private int size;\n-\n-    private ByteArrayInputStream bais;\n-\n-    @Setup(Level.Iteration)\n-    public void setup() {\n-        byte[] bytes = new byte[size];\n-        ThreadLocalRandom.current().nextBytes(bytes);\n-        bais = new ByteArrayInputStream(bytes);\n-    }\n-\n-    \/**\n-     * Read all bytes from an instance of {@link BufferedInputStream}\n-     * <p>\n-     * This benchmark demonstrates lazy instantiation of inner {@code byte[]},\n-     * which is not created when we call {@code InputStream.readAllBytes()}\n-     * <p>\n-     * @see <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8304745\">JDK-8304745<\/a>\n-     * @see <a href=\"https:\/\/github.com\/openjdk\/jdk\/pull\/13150\">Pull request for JDK-8304745<\/a>\n-     *\/\n-    @Benchmark\n-    public byte[] readAllBytes() throws Exception {\n-        bais.reset();\n-        try (var bufferedInputStream = new BufferedInputStream(bais)) {\n-            return bufferedInputStream.readAllBytes();\n-        }\n-    }\n-\n-    \/**\n-     * Read all bytes from an instance of {@link BufferedInputStream}\n-     * wrapping another instance of {@link BufferedInputStream}.\n-     * <p>\n-     * This benchmark demonstrates lazy instantiation of inner {@code byte[]},\n-     * which is not created when we call {@code InputStream.readAllBytes()}\n-     * <p>\n-     * @see <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8304745\">JDK-8304745<\/a>\n-     * @see <a href=\"https:\/\/github.com\/openjdk\/jdk\/pull\/13150\">Pull request for JDK-8304745<\/a>\n-     *\/\n-    @Benchmark\n-    public byte[] readAllBytesCascade() throws Exception {\n-        bais.reset();\n-        try (var bufferedInputStream = new BufferedInputStream(new BufferedInputStream(bais))) {\n-            return bufferedInputStream.readAllBytes();\n-        }\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/BufferedInputStreamBenchmark.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"}]}