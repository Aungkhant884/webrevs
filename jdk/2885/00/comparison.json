{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n@@ -41,2 +44,1 @@\n-    private static final int DAEMON_THREADS_1 = 8;\n-    private static final int EXPECTED_PEAK_DELTA_1 = 8;\n+    private static final int DAEMON_THREADS_1 = 80;\n@@ -45,1 +47,1 @@\n-    private static final int TERMINATE_1 = 4;\n+    private static final int TERMINATE_1 = 40;\n@@ -48,2 +50,1 @@\n-    private static final int DAEMON_THREADS_2 = 2;\n-    private static final int EXPECTED_PEAK_DELTA_2 = 0;\n+    private static final int DAEMON_THREADS_2 = 20;\n@@ -52,2 +53,1 @@\n-    private static final int DAEMON_THREADS_3 = 4;\n-    private static final int EXPECTED_PEAK_DELTA_3 = 4;\n+    private static final int DAEMON_THREADS_3 = 20;\n@@ -55,6 +55,0 @@\n-    private static final int TERMINATE_2 = 8;\n-\n-    private static final int TERMINATE_3 = 2;\n-\n-    private static final int ALL_THREADS = DAEMON_THREADS_1 +\n-        DAEMON_THREADS_2 + DAEMON_THREADS_3;\n@@ -64,2 +58,0 @@\n-    private static final Thread allThreads[] = new Thread[ALL_THREADS];\n-    private static final boolean live[] = new boolean[ALL_THREADS];\n@@ -69,7 +61,2 @@\n-    public static void main(String[] argv) throws Exception {\n-        \/\/ This test does not expect any threads to be created\n-        \/\/ by the test harness after main() is invoked.\n-        \/\/ The checkThreadCount() method is to produce more\n-        \/\/ diagnostic information in case any unexpected test failure occur.\n-        long previous = mbean.getThreadCount();\n-        long current = previous;\n+    private static final List<MyThread> threads = new LinkedList<>();\n+    private static final Object liveSync = new Object();\n@@ -77,2 +64,4 @@\n-        \/\/ reset the peak to start from a scratch\n-        resetPeak(current);\n+    public static void main(String[] argv) throws Exception {\n+        \/\/ System threads can be started\/terminated during the test execution,\n+        \/\/ and they affect resetPeakThreadCount result.\n+        resetPeak();\n@@ -80,2 +69,1 @@\n-        \/\/ start DAEMON_THREADS_1 number of threads\n-        current = startThreads(0, DAEMON_THREADS_1, EXPECTED_PEAK_DELTA_1);\n+        startThreads(DAEMON_THREADS_1);\n@@ -83,2 +71,1 @@\n-        checkThreadCount(previous, current, DAEMON_THREADS_1);\n-        previous = current;\n+        int beforeTerminate = checkPeakThreadCount(threads.size() + 1, -1); \/\/ + 1 for the current thread\n@@ -86,2 +73,1 @@\n-        \/\/ terminate TERMINATE_1 number of threads and reset peak\n-        current = terminateThreads(0, TERMINATE_1);\n+        terminateThreads(TERMINATE_1);\n@@ -89,1 +75,2 @@\n-        checkThreadCount(previous, current, TERMINATE_1 * -1);\n+        \/\/ the value should not decrease\n+        int afterTerminate = checkPeakThreadCount(beforeTerminate, -1);\n@@ -91,1 +78,1 @@\n-        previous = current;\n+        startThreads(DAEMON_THREADS_2);\n@@ -93,1 +80,0 @@\n-        \/\/ start DAEMON_THREADS_2 number of threads\n@@ -95,21 +81,1 @@\n-        current = startThreads(DAEMON_THREADS_1, DAEMON_THREADS_2,\n-                               EXPECTED_PEAK_DELTA_2);\n-\n-        checkThreadCount(previous, current, DAEMON_THREADS_2);\n-        previous = current;\n-\n-        \/\/ Reset the peak\n-        resetPeak(current);\n-\n-        \/\/ start DAEMON_THREADS_3 number of threads\n-        current = startThreads(DAEMON_THREADS_1 + DAEMON_THREADS_2,\n-                               DAEMON_THREADS_3, EXPECTED_PEAK_DELTA_3);\n-\n-        checkThreadCount(previous, current, DAEMON_THREADS_3);\n-        previous = current;\n-\n-        \/\/ terminate TERMINATE_2 number of threads and reset peak\n-        current = terminateThreads(TERMINATE_1, TERMINATE_2);\n-\n-        checkThreadCount(previous, current, TERMINATE_2 * -1);\n-        previous = current;\n+        checkPeakThreadCount(-1, afterTerminate);\n@@ -117,1 +83,3 @@\n-        resetPeak(current);\n+        \/\/ reset peak and ensure new threads increase the value\n+        int beforeThreads3 = resetPeak();\n+        startThreads(DAEMON_THREADS_3);\n@@ -119,2 +87,2 @@\n-        \/\/ terminate TERMINATE_3 number of threads and reset peak\n-        current = terminateThreads(TERMINATE_1 + TERMINATE_2, TERMINATE_3);\n+        checkPeakThreadCount(threads.size() + 1, -1); \/\/ + 1 for the current thread\n+        checkPeakThreadCount(beforeThreads3, -1);\n@@ -122,4 +90,1 @@\n-        checkThreadCount(previous, current, TERMINATE_3 * -1);\n-        resetPeak(current);\n-\n-        if (testFailed)\n+        if (testFailed) {\n@@ -127,0 +92,1 @@\n+        }\n@@ -131,1 +97,1 @@\n-    private static long startThreads(int from, int count, int delta) throws InterruptedException {\n+    private static void startThreads(int count) throws InterruptedException {\n@@ -133,2 +99,1 @@\n-        long peak1 = mbean.getPeakThreadCount();\n-        long current = mbean.getThreadCount();\n+        int peak1 = mbean.getPeakThreadCount();\n@@ -139,6 +104,5 @@\n-        synchronized(live) {\n-            for (int i = from; i < (from + count); i++) {\n-                live[i] = true;\n-                allThreads[i] = new MyThread(i);\n-                allThreads[i].setDaemon(true);\n-                allThreads[i].start();\n+        synchronized (liveSync) {\n+            for (int i = 0; i < count; i++) {\n+                MyThread newThread = new MyThread();\n+                threads.add(newThread);\n+                newThread.start();\n@@ -151,1 +115,1 @@\n-        long peak2 = mbean.getPeakThreadCount();\n+        int peak2 = mbean.getPeakThreadCount();\n@@ -156,6 +120,1 @@\n-        if (peak2 != (peak1 + delta)) {\n-            throw new RuntimeException(\"Current Peak = \" + peak2 +\n-                \" Expected to be == previous peak = \" + peak1 + \" + \" +\n-                delta);\n-        }\n-        current = mbean.getThreadCount();\n+        int current = mbean.getThreadCount();\n@@ -163,1 +122,0 @@\n-        return current;\n@@ -166,1 +124,1 @@\n-    private static long terminateThreads(int from, int count) throws InterruptedException {\n+    private static void terminateThreads(int count) throws InterruptedException {\n@@ -168,1 +126,1 @@\n-        long peak1 = mbean.getPeakThreadCount();\n+        int peak1 = mbean.getPeakThreadCount();\n@@ -173,3 +131,5 @@\n-        synchronized(live) {\n-            for (int i = from; i < (from+count); i++) {\n-                live[i] = false;\n+        synchronized(liveSync) {\n+            Iterator<MyThread> iter = threads.iterator();\n+            for (int i = 0; i < count; i++) {\n+                MyThread thread = iter.next();\n+                thread.live = false;\n@@ -177,1 +137,1 @@\n-            live.notifyAll();\n+            liveSync.notifyAll();\n@@ -183,1 +143,1 @@\n-        long peak2 = mbean.getPeakThreadCount();\n+        int peak2 = mbean.getPeakThreadCount();\n@@ -190,2 +150,3 @@\n-        for (int i = from; i < (from+count); i++) {\n-            allThreads[i].join();\n+        for (int i = 0; i < count; i++) {\n+            MyThread thread = threads.remove(0);\n+            thread.join();\n@@ -194,1 +155,1 @@\n-        long current = mbean.getThreadCount();\n+        int current = mbean.getThreadCount();\n@@ -196,1 +157,0 @@\n-        return current;\n@@ -199,8 +159,4 @@\n-    private static void resetPeak(long expectedCount) {\n-        long peak3 = mbean.getPeakThreadCount();\n-        long current = mbean.getThreadCount();\n-\n-        \/\/ Nightly testing showed some intermittent failure.\n-        \/\/ Check here to get diagnostic information if some strange\n-        \/\/ behavior occurs.\n-        checkThreadCount(expectedCount, current, 0);\n+    \/\/ Returns peak thread value after reset.\n+    private static int resetPeak() {\n+        int peak3 = mbean.getPeakThreadCount();\n+        int current = mbean.getThreadCount();\n@@ -211,2 +167,2 @@\n-        long afterResetPeak = mbean.getPeakThreadCount();\n-        long afterResetCurrent = mbean.getThreadCount();\n+        int afterResetPeak = mbean.getPeakThreadCount();\n+        int afterResetCurrent = mbean.getThreadCount();\n@@ -217,0 +173,2 @@\n+        return afterResetPeak;\n+    }\n@@ -218,5 +176,3 @@\n-        if (afterResetPeak != current) {\n-            throw new RuntimeException(\"Current Peak after reset = \" +\n-                afterResetPeak +\n-                \" Expected to be = current count = \" + current);\n-        }\n+    private static void fail(String msg) {\n+        ThreadDump.threadDump();\n+        throw new RuntimeException(msg);\n@@ -225,7 +181,4 @@\n-    private static void checkThreadCount(long previous, long current, int expectedDelta) {\n-        if (current != previous + expectedDelta) {\n-            ThreadDump.threadDump();\n-            throw new RuntimeException(\"***** Unexpected thread count:\" +\n-                               \" previous = \" + previous +\n-                               \" current = \" + current +\n-                               \" delta = \" + expectedDelta + \"*****\");\n+    private static int checkPeakThreadCount(int min, int max) {\n+        int value = mbean.getPeakThreadCount();\n+        if (min > 0 && value < min) {\n+            fail(\"***** Unexpected thread count: \" + value + \", minimum expected \" + min + \" *****\");\n@@ -233,0 +186,4 @@\n+        if (max > 0 && value > max) {\n+            fail(\"***** Unexpected thread count: \" + value + \", maximum expected \" + max + \" *****\");\n+        }\n+        return value;\n@@ -235,1 +192,2 @@\n-    \/\/ The MyThread thread lives as long as correspondent live[i] value is true\n+\n+    \/\/ The MyThread thread lives as long as correspondent its live value is true\n@@ -237,1 +195,1 @@\n-        int id;\n+        volatile boolean live;\n@@ -239,2 +197,3 @@\n-        MyThread(int id) {\n-            this.id = id;\n+        MyThread() {\n+            live = true;\n+            setDaemon(true);\n@@ -246,2 +205,2 @@\n-            synchronized(live) {\n-                while (live[id]) {\n+            synchronized(liveSync) {\n+                while (live) {\n@@ -249,1 +208,1 @@\n-                        live.wait(100);\n+                        liveSync.wait(100);\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/ResetPeakThreadCount.java","additions":78,"deletions":119,"binary":false,"changes":197,"status":"modified"}]}