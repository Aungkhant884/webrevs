{"files":[{"patch":"@@ -67,0 +67,10 @@\n+    \/*\n+     * Constants for bit-wise manipulation of IEEE 754 double\n+     * values. These constants are for the high-order 32-bits of a\n+     * 64-bit double value: 1 sign bit as the most significant bit,\n+     * followed by 11 exponent bits, and then the remaining bits as\n+     * the significand.\n+     *\/\n+    private static final int SIGN_BIT        = 0x8000_0000;\n+    private static final int EXP_BITS        = 0x7ff0_0000;\n+    private static final int EXP_SIGNIF_BITS = 0x7fff_ffff;\n@@ -159,1 +169,1 @@\n-            ix &= 0x7fff_ffff;\n+            ix &= EXP_SIGNIF_BITS;\n@@ -162,1 +172,1 @@\n-            } else if (ix>=0x7ff0_0000) {  \/\/ sin(Inf or NaN) is NaN\n+            } else if (ix >= EXP_BITS) {  \/\/ sin(Inf or NaN) is NaN\n@@ -214,1 +224,1 @@\n-            ix = __HI(x) & 0x7fff_ffff;        \/\/ high word of x\n+            ix = __HI(x) & EXP_SIGNIF_BITS;    \/\/ high word of x\n@@ -272,1 +282,1 @@\n-            ix &= 0x7fff_ffff;\n+            ix &= EXP_SIGNIF_BITS;\n@@ -275,2 +285,2 @@\n-            } else if (ix >= 0x7ff0_0000) { \/\/ cos(Inf or NaN) is NaN\n-                return x-x;\n+            } else if (ix >= EXP_BITS) { \/\/ cos(Inf or NaN) is NaN\n+                return x - x;\n@@ -334,1 +344,1 @@\n-            ix = __HI(x) & 0x7fff_ffff;       \/\/ ix = |x|'s high word\n+            ix = __HI(x) & EXP_SIGNIF_BITS;       \/\/ ix = |x|'s high word\n@@ -398,1 +408,1 @@\n-            ix &= 0x7fff_ffff;\n+            ix &= EXP_SIGNIF_BITS;\n@@ -401,2 +411,2 @@\n-            } else if (ix >= 0x7ff0_0000) { \/\/ tan(Inf or NaN) is NaN\n-                return x-x;            \/\/ NaN\n+            } else if (ix >= EXP_BITS) { \/\/ tan(Inf or NaN) is NaN\n+                return x - x;            \/\/ NaN\n@@ -465,1 +475,1 @@\n-            ix = hx&0x7fff_ffff;     \/\/ high word of |x|\n+            ix = hx & EXP_SIGNIF_BITS;     \/\/ high word of |x|\n@@ -587,1 +597,1 @@\n-            ix = hx & 0x7fff_ffff;\n+            ix = hx & EXP_SIGNIF_BITS;\n@@ -658,1 +668,1 @@\n-            if (ix >= 0x7ff0_0000) {            \/\/ x is inf or NaN\n+            if (ix >= EXP_BITS) {            \/\/ x is inf or NaN\n@@ -662,1 +672,1 @@\n-            \/\/ set z = scalbn(|x|,ilogb(x)-23)\n+            \/\/ set z = scalbn(|x|, ilogb(x)-23)\n@@ -664,1 +674,1 @@\n-            e0 = (ix >> 20) - 1046;        \/* e0 = ilogb(z)-23; *\/\n+            e0 = (ix >> 20) - 1046;        \/\/ e0 = ilogb(z) - 23;\n@@ -862,1 +872,1 @@\n-                z -= 8.0*Math.floor(z*0.125);           \/\/ trim off integer >= 8\n+                z -= 8.0*Math.floor(z*0.125);        \/\/ trim off integer >= 8\n@@ -1074,1 +1084,1 @@\n-            ix = hx & 0x7fff_ffff;\n+            ix = hx & EXP_SIGNIF_BITS;\n@@ -1160,1 +1170,1 @@\n-            ix = hx & 0x7fff_ffff;\n+            ix = hx & EXP_SIGNIF_BITS;\n@@ -1169,1 +1179,1 @@\n-                return (x-x)\/(x-x);         \/\/ acos(|x| > 1) is NaN\n+                return (x - x)\/(x - x);         \/\/ acos(|x| > 1) is NaN\n@@ -1258,1 +1268,1 @@\n-            ix = hx & 0x7fff_ffff;\n+            ix = hx & EXP_SIGNIF_BITS;\n@@ -1260,2 +1270,2 @@\n-                if (ix > 0x7ff0_0000 ||\n-                    (ix == 0x7ff0_0000 && (__LO(x) != 0))) {\n+                if (ix > EXP_BITS ||\n+                    (ix == EXP_BITS && (__LO(x) != 0))) {\n@@ -1355,1 +1365,1 @@\n-            ix = hx & 0x7fff_ffff;\n+            ix = hx & EXP_SIGNIF_BITS;\n@@ -1358,1 +1368,1 @@\n-            iy = hy&0x7fff_ffff;\n+            iy = hy & EXP_SIGNIF_BITS;\n@@ -1381,2 +1391,2 @@\n-            if (ix == 0x7ff0_0000) {\n-                if (iy == 0x7ff0_0000) {\n+            if (ix == EXP_BITS) {\n+                if (iy == EXP_BITS) {\n@@ -1399,1 +1409,1 @@\n-            if (iy == 0x7ff0_0000) {\n+            if (iy == EXP_BITS) {\n@@ -1497,1 +1507,1 @@\n-            int sign = 0x8000_0000;\n+            int sign = SIGN_BIT;\n@@ -1505,1 +1515,1 @@\n-            if ((ix0 & 0x7ff0_0000) == 0x7ff0_0000) {\n+            if ((ix0 & EXP_BITS) == EXP_BITS) {\n@@ -1513,1 +1523,1 @@\n-                    return (x-x)\/(x-x); \/\/ sqrt(-ve) = sNaN\n+                    return (x - x)\/(x - x); \/\/ sqrt(-ve) = sNaN\n@@ -2139,1 +2149,1 @@\n-            int ix = hx & 0x7fffffff;\n+            int ix = hx & EXP_SIGNIF_BITS;\n@@ -2179,1 +2189,1 @@\n-                return (x-x)\/(x-x);\n+                return (x - x)\/(x - x);\n@@ -2302,1 +2312,1 @@\n-            } else if ((j & 0x7fffffff) >= 0x4090cc00 ) {        \/\/ z <= -1075\n+            } else if ((j & EXP_SIGNIF_BITS) >= 0x4090cc00 ) {        \/\/ z <= -1075\n@@ -2322,1 +2332,1 @@\n-            i = j & 0x7fffffff;\n+            i = j & EXP_SIGNIF_BITS;\n@@ -2327,1 +2337,1 @@\n-                k = ((n & 0x7fffffff) >> 20) - 0x3ff;     \/\/ new k for n\n+                k = ((n & EXP_SIGNIF_BITS) >> 20) - 0x3ff;     \/\/ new k for n\n@@ -2452,1 +2462,1 @@\n-            hx &= 0x7fffffff;               \/* high word of |x| *\/\n+            hx &= EXP_SIGNIF_BITS;              \/* high word of |x| *\/\n@@ -2571,2 +2581,0 @@\n-        private static final double zero = 0.0;\n-\n@@ -2583,2 +2591,2 @@\n-                if (((hx & 0x7fff_ffff) | lx) == 0) { \/\/ log(+-0) = -inf\n-                    return -TWO54\/zero;\n+                if (((hx & EXP_SIGNIF_BITS) | lx) == 0) { \/\/ log(+-0) = -inf\n+                    return -TWO54\/0.0;\n@@ -2587,1 +2595,1 @@\n-                    return (x - x)\/zero;\n+                    return (x - x)\/0.0;\n@@ -2593,1 +2601,1 @@\n-            if (hx >= 0x7ff0_0000) {\n+            if (hx >= EXP_BITS) {\n@@ -2603,1 +2611,1 @@\n-                if (f == zero) {\n+                if (f == 0.0) {\n@@ -2605,1 +2613,1 @@\n-                        return zero;\n+                        return 0.0;\n@@ -2697,1 +2705,1 @@\n-                if (((hx & 0x7fff_ffff) | lx) == 0) {\n+                if (((hx & EXP_SIGNIF_BITS) | lx) == 0) {\n@@ -2708,1 +2716,1 @@\n-            if (hx >= 0x7ff0_0000) {\n+            if (hx >= EXP_BITS) {\n@@ -2713,1 +2721,1 @@\n-            i  = (k  & 0x8000_0000) >>> 31; \/\/ unsigned shift\n+            i  = (k  & SIGN_BIT) >>> 31; \/\/ unsigned shift\n@@ -2803,1 +2811,1 @@\n-            ax = hx & 0x7fff_ffff;\n+            ax = hx & EXP_SIGNIF_BITS;\n@@ -2829,1 +2837,1 @@\n-            if (hx >= 0x7ff0_0000) {\n+            if (hx >= EXP_BITS) {\n@@ -2980,1 +2988,0 @@\n-        private static final double one         =  1.0;\n@@ -3000,1 +3007,1 @@\n-            xsb = hx & 0x8000_0000;          \/\/ sign bit of x\n+            xsb = hx & SIGN_BIT;                 \/\/ sign bit of x\n@@ -3002,1 +3009,1 @@\n-            hx &= 0x7fff_ffff;               \/\/ high word of |x|\n+            hx &= EXP_SIGNIF_BITS;               \/\/ high word of |x|\n@@ -3020,1 +3027,1 @@\n-                        return tiny - one;        \/\/ return -1\n+                        return tiny - 1.0;        \/\/ return -1\n@@ -3055,1 +3062,1 @@\n-            r1 = one + hxs*(Q1 + hxs*(Q2 + hxs*(Q3 + hxs*(Q4 + hxs*Q5))));\n+            r1 = 1.0 + hxs*(Q1 + hxs*(Q2 + hxs*(Q3 + hxs*(Q4 + hxs*Q5))));\n@@ -3070,1 +3077,1 @@\n-                        return one + 2.0*(x - e);\n+                        return 1.0 + 2.0*(x - e);\n@@ -3074,1 +3081,1 @@\n-                    y = one - (e - x);\n+                    y = 1.0 - (e - x);\n@@ -3076,1 +3083,1 @@\n-                    return y - one;\n+                    return y - 1.0;\n@@ -3078,1 +3085,1 @@\n-                t = one;\n+                t = 1.0;\n@@ -3086,1 +3093,1 @@\n-                    y += one;\n+                    y += 1.0;\n@@ -3123,1 +3130,1 @@\n-            ix = jx & 0x7fff_ffff;\n+            ix = jx & EXP_SIGNIF_BITS;\n@@ -3126,1 +3133,1 @@\n-            if (ix >= 0x7ff0_0000) {\n+            if (ix >= EXP_BITS) {\n@@ -3199,1 +3206,1 @@\n-            ix &= 0x7fff_ffff;\n+            ix &= EXP_SIGNIF_BITS;\n@@ -3202,1 +3209,1 @@\n-            if (ix >= 0x7ff0_0000) {\n+            if (ix >= EXP_BITS) {\n@@ -3276,1 +3283,1 @@\n-            ix = jx & 0x7fff_ffff;\n+            ix = jx & EXP_SIGNIF_BITS;\n@@ -3279,1 +3286,1 @@\n-            if (ix >= 0x7ff0_0000) {\n+            if (ix >= EXP_BITS) {\n@@ -3317,3 +3324,3 @@\n-            sx = hx & 0x8000_0000;\n-            hp &= 0x7fff_ffff;\n-            hx &= 0x7fff_ffff;\n+            sx = hx & SIGN_BIT;\n+            hp &= EXP_SIGNIF_BITS;\n+            hx &= EXP_SIGNIF_BITS;\n@@ -3325,3 +3332,3 @@\n-            if ((hx >= 0x7ff0_0000) ||                   \/\/ not finite\n-                ((hp >= 0x7ff0_0000) &&                   \/\/ p is NaN\n-                 (((hp - 0x7ff0_0000) | lp) != 0)))\n+            if ((hx >= EXP_BITS) ||                   \/\/ not finite\n+                ((hp >= EXP_BITS) &&                   \/\/ p is NaN\n+                 (((hp - EXP_BITS) | lp) != 0)))\n@@ -3365,1 +3372,1 @@\n-            sx = hx & 0x8000_0000;  \/\/ sign of x\n+            sx = hx & SIGN_BIT;     \/\/ sign of x\n@@ -3367,1 +3374,1 @@\n-            hy &= 0x7fff_ffff;      \/\/ |y|\n+            hy &= EXP_SIGNIF_BITS;  \/\/ |y|\n@@ -3370,2 +3377,2 @@\n-            if ((hy | ly) == 0 || (hx >= 0x7ff0_0000)||       \/\/ y = 0, or x not finite\n-               ((hy | ((ly | -ly) >>> 31)) > 0x7ff0_0000))    \/\/ or y is NaN, unsigned shift\n+            if ((hy | ly) == 0 || (hx >= EXP_BITS)||       \/\/ y = 0, or x not finite\n+               ((hy | ((ly | -ly) >>> 31)) > EXP_BITS))    \/\/ or y is NaN, unsigned shift\n","filename":"src\/java.base\/share\/classes\/java\/lang\/FdLibm.java","additions":82,"deletions":75,"binary":false,"changes":157,"status":"modified"}]}