{"files":[{"patch":"@@ -82,4 +82,4 @@\n- * manager at startup. In the JDK implementation, this is done by setting\n- * the system property {@systemProperty java.security.manager} on the command\n- * line to the class name of the security manager. It can also be set to the\n- * empty String (\"\") or the special token \"{@code default}\" to use the\n+ * manager at startup. In the JDK implementation, this is done by setting the\n+ * system property {@systemProperty java.security.manager} on the command line\n+ * to the class name of the security manager. It can also be set to the empty\n+ * String (\"\") or the special token \"{@code default}\" to use the\n@@ -90,1 +90,3 @@\n- * if it is not {@code java.lang.SecurityManager}.\n+ * if it is not {@code java.lang.SecurityManager}. If the\n+ * {@code java.security.manager} system property is not set, the default value\n+ * is {@code null}, which means a security manager will not be set at startup.\n@@ -95,6 +97,4 @@\n- * In the JDK implementation, the default value of the\n- * {@code java.security.manager} system property, if not set, is\n- * the special token \"{@code disallow}\". If the Java virtual machine is\n- * started with the {@code java.security.manager} system property\n- * not set or set to \"{@code disallow}\" then a security manager will not be\n- * set at startup and cannot be set dynamically (the\n+ * In the JDK implementation, if the Java virtual machine is started with\n+ * the {@code java.security.manager} system property set to the special token\n+ * \"{@code disallow}\" then a security manager will not be set at startup and\n+ * cannot be set dynamically (the\n@@ -103,1 +103,1 @@\n- * {@code java.security.manager} system property is set to the\n+ * {@code java.security.manager} system property is not set or is set to the\n@@ -106,8 +106,7 @@\n- * {@code java.security.manager} system property is set to the\n- * class name of the security manager, or to the empty String (\"\") or the\n- * special token \"{@code default}\", then a security manager is set at startup\n- * (as described previously) and can also be subsequently replaced (or\n- * disabled) dynamically (subject to the policy of the currently installed\n- * security manager). The following table illustrates the behavior of the JDK\n- * implementation for the different settings of the\n- * {@code java.security.manager} system property:\n+ * {@code java.security.manager} system property is set to the class name of\n+ * the security manager, or to the empty String (\"\") or the special token\n+ * \"{@code default}\", then a security manager is set at startup (as described\n+ * previously) and can also be subsequently replaced (or disabled) dynamically\n+ * (subject to the policy of the currently installed security manager). The\n+ * following table illustrates the behavior of the JDK implementation for the\n+ * different settings of the {@code java.security.manager} system property:\n@@ -171,0 +170,2 @@\n+ * <p> A future release of the JDK may change the default value of the\n+ * {@code java.security.manager} system property to \"{@code disallow}\".\n","filename":"src\/java.base\/share\/classes\/java\/lang\/SecurityManager.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -343,10 +343,4 @@\n-     * @implNote In the JDK implementation, the default value of the\n-     * {@code java.security.manager} system property, if not set, is\n-     * the special token \"{@code disallow}\". If the Java virtual machine is\n-     * started with the {@code java.security.manager} system property\n-     * set to the special token \"{@code allow}\", then a security manager can\n-     * be set dynamically. If the Java virtual machine is started with the\n-     * system property {@code java.security.manager} not set or set\n-     * to \"{@code disallow}\" then a security manager cannot be set\n-     * dynamically (the {@code setSecurityManager} method will throw an\n-     * {@code UnsupportedOperationException}).\n+     * @implNote In the JDK implementation, if the Java virtual machine is\n+     * started with the system property {@code java.security.manager} set to\n+     * the special token \"{@code disallow}\" then the {@code setSecurityManager}\n+     * method cannot be used to set a security manager.\n@@ -374,17 +368,3 @@\n-            if (security == null) {\n-                \/\/ ensure image reader is initialized\n-                Object.class.getResource(\"java\/lang\/ANY\");\n-                \/\/ ensure the default file system is initialized\n-                DefaultFileSystemProvider.theFileSystem();\n-            }\n-            if (sm != null) {\n-                try {\n-                    \/\/ pre-populates the SecurityManager.packageAccess cache\n-                    \/\/ to avoid recursive permission checking issues with custom\n-                    \/\/ SecurityManager implementations\n-                    sm.checkPackageAccess(\"java.lang\");\n-                } catch (Exception e) {\n-                    \/\/ no-op\n-                }\n-            }\n-            setSecurityManager0(sm);\n+            System.err.println(\"WARNING: java.lang.System::setSecurityManager\" +\n+                    \" is deprecated and will be removed in a future release.\");\n+            setSecurityManagerDirect(sm);\n@@ -400,0 +380,21 @@\n+    private static void setSecurityManagerDirect(\n+            @SuppressWarnings(\"removal\") SecurityManager sm) {\n+        if (security == null) {\n+            \/\/ ensure image reader is initialized\n+            Object.class.getResource(\"java\/lang\/ANY\");\n+            \/\/ ensure the default file system is initialized\n+            DefaultFileSystemProvider.theFileSystem();\n+        }\n+        if (sm != null) {\n+            try {\n+                \/\/ pre-populates the SecurityManager.packageAccess cache\n+                \/\/ to avoid recursive permission checking issues with custom\n+                \/\/ SecurityManager implementations\n+                sm.checkPackageAccess(\"java.lang\");\n+            } catch (Exception e) {\n+                \/\/ no-op\n+            }\n+        }\n+        setSecurityManager0(sm);\n+    }\n+\n@@ -2152,0 +2153,1 @@\n+        boolean needWarning = false;\n@@ -2162,1 +2164,1 @@\n-                    setSecurityManager(new SecurityManager());\n+                    setSecurityManagerDirect(new SecurityManager());\n@@ -2164,0 +2166,1 @@\n+                    needWarning = true;\n@@ -2181,1 +2184,2 @@\n-                        setSecurityManager(sm);\n+                        setSecurityManagerDirect(sm);\n+                        needWarning = true;\n@@ -2188,1 +2192,1 @@\n-            allowSecurityManager = NEVER;\n+            allowSecurityManager = MAYBE;\n@@ -2191,1 +2195,1 @@\n-        if (allowSecurityManager != NEVER) {\n+        if (needWarning) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        boolean disallow = !\"allow\".equals(prop);\n+        boolean disallow = \"disallow\".equals(prop);\n","filename":"test\/jdk\/java\/lang\/System\/AllowSecurityManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,1 +237,8 @@\n-                    if (!ErrorStream.errorStream.peek().isEmpty()) {\n+                    String warning = ErrorStream.errorStream.peek();\n+                    String smDeprecationWarning\n+                            = \"WARNING: java.lang.System::setSecurityManager is deprecated and will be removed in a future release.\"\n+                            + System.getProperty(\"line.separator\");\n+                    if (warning.startsWith(smDeprecationWarning)) {\n+                        warning = warning.substring(smDeprecationWarning.length());\n+                    }\n+                    if (!warning.isEmpty()) {\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/LoggerFinderLoaderTest\/LoggerFinderLoaderTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266459\n+ * @summary check various warnings\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.security.Permission;\n+\n+public class SecurityManagerWarnings {\n+    public static void main(String args[]) throws Exception {\n+        if (args.length == 0) {\n+            run(null)\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: false\")\n+                    .shouldNotContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"setSecurityManager is deprecated\");\n+            run(\"allow\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: false\")\n+                    .shouldNotContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"setSecurityManager is deprecated\");\n+            run(\"disallow\")\n+                    .shouldNotHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: false\")\n+                    .shouldNotContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"UnsupportedOperationException\");\n+            run(\"SecurityManagerWarnings$MySM\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: true\")\n+                    .shouldContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"setSecurityManager is deprecated\");\n+            run(\"\")\n+                    .shouldNotHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: true\")\n+                    .shouldContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"AccessControlException\");\n+            run(\"default\")\n+                    .shouldNotHaveExitValue(0)\n+                    .shouldContain(\"SM is enabled: true\")\n+                    .shouldContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"AccessControlException\");\n+        } else {\n+            System.out.println(\"SM is enabled: \" + (System.getSecurityManager() != null));\n+            System.setSecurityManager(new SecurityManager());\n+        }\n+    }\n+\n+    static OutputAnalyzer run(String prop) throws Exception {\n+        if (prop == null) {\n+            return ProcessTools.executeTestJvm(\n+                    \"SecurityManagerWarnings\", \"run\");\n+        } else {\n+            return ProcessTools.executeTestJvm(\n+                    \"-Djava.security.manager=\" + prop,\n+                    \"SecurityManagerWarnings\", \"run\");\n+        }\n+    }\n+\n+    \/\/ This SecurityManager allows everything!\n+    public static class MySM extends SecurityManager {\n+        @Override\n+        public void checkPermission(Permission perm) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/System\/SecurityManagerWarnings.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -150,1 +150,1 @@\n-                                  .filter(s -> !s.contains(\"Security Manager is deprecated\"))\n+                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -167,1 +167,1 @@\n-                                  .filter(s -> !s.contains(\"Security Manager is deprecated\"))\n+                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -227,1 +227,1 @@\n-                                      .filter(s -> !s.contains(\"Security Manager is deprecated\"))\n+                                      .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LogGeneratedClassesTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}