{"files":[{"patch":"@@ -1174,2 +1174,5 @@\n-  \/\/ Only check exception edge, if bytecode can trap\n-  if (!Bytecodes::can_trap(itr->code())) return;\n+  \/\/ Check exception edge even if bytecode can not trap since some bytecodes\n+  \/\/ in try-block will never throw an exception, thus exception handler basic\n+  \/\/ blocks becomes unreachable. For such cases, these unreachable basic blocks\n+  \/\/ confuse later OopMap generation.\n+\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -787,0 +787,5 @@\n+            if(UseNewCode) {\n+              if(cur_code == Bytecodes::_goto && next_code ==Bytecodes::_astore_2){\n+                tty->print_cr(\"==\");\n+              }\n+            }\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1521,0 +1521,5 @@\n+            if (startpc == code.curCP()) {\n+                \/\/ Put a \"nop\" into try block even if it is empty because we want\n+                \/\/ to generate exception table within code attribute.\n+                code.emitop0(nop);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test VerifyStackWithUnreachableBlock\n+ * @bug 8271055\n+ * @compile VerifyStackWithUnreachableBlock.java\n+ * @summary Using VerifyStack for method that contains unreachable basic blocks\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack compiler.interpreter.VerifyStackWithUnreachableBlock\n+ *\/\n+\n+package compiler.interpreter;\n+\n+public class VerifyStackWithUnreachableBlock {\n+    public static void main(String[] strArr) {\n+        VerifyStackWithUnreachableBlock _instance = new VerifyStackWithUnreachableBlock();\n+        for (int i = 0; i < 10000; i++) {\n+            _instance.test();\n+        }\n+    }\n+\n+    void test() {\n+        int i8 = 1;\n+        try {\n+            ;\n+        } finally {\n+            for (; i8 < 100; i8++) {\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/VerifyStackWithUnreachableBlock.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}