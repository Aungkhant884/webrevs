{"files":[{"patch":"@@ -41,0 +41,3 @@\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n@@ -64,0 +67,7 @@\n+    private static void removeFile(String fileName) throws Exception {\n+        File file = new File(fileName);\n+        if (file.exists()) {\n+            file.delete();\n+        }\n+    }\n+\n@@ -78,0 +88,2 @@\n+        removeFile(localFileName);\n+\n@@ -85,0 +97,2 @@\n+        checkFileExistence(localFileName, true\/*exist*\/);\n+        FileTime ft1 = Files.getLastModifiedTime(Paths.get(localFileName));\n@@ -87,0 +101,5 @@\n+        FileTime ft2 = Files.getLastModifiedTime(Paths.get(localFileName));\n+        if (!ft2.equals(ft1)) {\n+            throw new RuntimeException(\"Archive file \" + localFileName + \" should not be updated\");\n+        }\n+        removeFile(localFileName);\n@@ -88,1 +107,0 @@\n-        checkFileExistence(localFileName, true\/*exist*\/);\n@@ -106,4 +124,2 @@\n-        app.stopApp();\n-        \/\/ cannot dynamically dump twice, restart\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n+        checkFileExistence(localFileName, true\/*exist*\/);\n+        ft1 = Files.getLastModifiedTime(Paths.get(localFileName));\n@@ -112,1 +128,4 @@\n-        outputDirFile.setWritable(true);\n+        ft2 = Files.getLastModifiedTime(Paths.get(localFileName));\n+        if (!ft2.equals(ft1)) {\n+            throw new RuntimeException(\"Archive file \" + localFileName + \" should not be updated\");\n+        }\n@@ -114,4 +133,2 @@\n-        \/\/ MyDynamicDump.jsa should exist\n-        checkFileExistence(localFileName, true);\n-        File rmFile = new File(localFileName);\n-        rmFile.delete();\n+        removeFile(localFileName);\n+        outputDirFile.setWritable(true);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"}]}