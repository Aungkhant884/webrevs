{"files":[{"patch":"@@ -39,1 +39,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/DataInputStreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ArrayClone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringCompareToDifferentLength.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringCompareToIgnoreCase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringComparisons.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringEquals.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringReplace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringSubstring.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringTemplateFMT.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/constant\/MethodTypeDescFactories.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/constant\/ReferenceClassDescResolve.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesIdentity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesThrowException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeAppendParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeChangeParam.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeChangeReturn.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeDropParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeGenerify.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeInsertParams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/CipherSuiteBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/GetYearBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/InstantBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/format\/DateTimeFormatterWithPaddingBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ListArgs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/LocaleDefaults.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/TestAdler32.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/TestCRC32.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/TestCRC32C.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/regex\/Exponential.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/regex\/Primality.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/regex\/Trim.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/AESReinit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Rotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/BasicRules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n@@ -37,4 +37,4 @@\n-    static final int[] INT_ARRAY = new int[LENGTH];\n-    static final long[] LONG_ARRAY = new long[LENGTH];\n-    static final float[] FLOAT_ARRAY = new float[LENGTH];\n-    static final double[] DOUBLE_ARRAY = new double[LENGTH];\n+    int[] intArray = new int[LENGTH];\n+    long[] longArray = new long[LENGTH];\n+    float[] floatArray = new float[LENGTH];\n+    double[] doubleArray = new double[LENGTH];\n@@ -67,1 +67,1 @@\n-            INT_ARRAY[i] = (int)FLOAT_ARRAY[i];\n+            intArray[i] = (int)floatArray[i];\n@@ -74,1 +74,1 @@\n-            LONG_ARRAY[i] = (long)FLOAT_ARRAY[i];\n+            longArray[i] = (long)floatArray[i];\n@@ -81,1 +81,1 @@\n-            INT_ARRAY[i] = (int)DOUBLE_ARRAY[i];\n+            intArray[i] = (int)doubleArray[i];\n@@ -88,1 +88,1 @@\n-            LONG_ARRAY[i] = (long)DOUBLE_ARRAY[i];\n+            longArray[i] = (long)doubleArray[i];\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/ConvertF2I.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}