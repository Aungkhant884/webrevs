{"files":[{"patch":"@@ -850,1 +850,1 @@\n-                type = variable.type = variable.sym.type = chk.checkLocalVarType(variable, itype.baseType(), variable.name);\n+                type = variable.type = variable.sym.type = chk.checkLocalVarType(variable, itype, variable.name);\n@@ -1308,1 +1308,1 @@\n-                        v.type = chk.checkLocalVarType(tree, tree.init.type.baseType(), tree.name);\n+                        v.type = chk.checkLocalVarType(tree, tree.init.type, tree.name);\n@@ -2594,1 +2594,1 @@\n-                        List.of(new WildcardType(types.erasure(qualifierType),\n+                        List.of(new WildcardType(types.erasure(qualifierType.baseType()),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-        return types.upward(t, types.captures(t));\n+        return types.upward(t, types.captures(t)).baseType();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293578\n+ * @summary Ensure constant types are removed correctly for <string>.getClass().\n+ * @compile ConstantTypes.java\n+ * @run main ConstantTypes\n+ *\/\n+\n+import java.util.Objects;\n+\n+public class ConstantTypes {\n+    public static void main(String... args) throws Throwable {\n+        new ConstantTypes().testStringCreation1();\n+        new ConstantTypes().testStringCreation2();\n+        new ConstantTypes().testStringCreation3();\n+        new ConstantTypes().testStringCreation4();\n+        new ConstantTypes().testStringFolding();\n+    }\n+\n+    private void testStringCreation1() throws Throwable {\n+        var testC = \"incorrect\".getClass();\n+        var testV = testC.getConstructor(String.class)\n+                         .newInstance(\"correct\");\n+        String actual = testV;\n+        String expected = \"correct\";\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"Unexpected result: \" + actual);\n+        }\n+    }\n+\n+    private void testStringCreation2() throws Throwable {\n+        var test = \"incorrect\".getClass()\n+                              .getConstructor(String.class)\n+                              .newInstance(\"correct\");\n+        String actual = test;\n+        String expected = \"correct\";\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"Unexpected result: \" + actual);\n+        }\n+    }\n+\n+    private void testStringCreation3() throws Throwable {\n+        final var testC = \"incorrect\";\n+        var testV = testC.getClass()\n+                         .getConstructor(String.class)\n+                         .newInstance(\"correct\");\n+        String actual = testV;\n+        String expected = \"correct\";\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"Unexpected result: \" + actual);\n+        }\n+    }\n+\n+    private void testStringCreation4() throws Throwable {\n+        var testC = \"incorrect\";\n+        var testV = testC.getClass()\n+                         .getConstructor(String.class)\n+                         .newInstance(\"correct\");\n+        String actual = testV;\n+        String expected = \"correct\";\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"Unexpected result: \" + actual);\n+        }\n+    }\n+\n+    private void testStringFolding() {\n+        final var v1 = \"1\";\n+        final var v2 = \"2\";\n+        String actual = v1 + v2;\n+        String expected = \"12\";\n+        if (actual != expected) { \/\/intentional reference comparison\n+            throw new AssertionError(\"Value not interned!\");\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/lvti\/ConstantTypes.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}