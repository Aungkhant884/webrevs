{"files":[{"patch":"@@ -1503,3 +1503,5 @@\n-  \/\/ return compiled code entry point after potential safepoints\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  \/\/ Return compiled code entry point after potential safepoints.\n+  \/\/ In case we are in interpreted only mode return c2i entry instead.\n+  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n@@ -1557,3 +1559,5 @@\n-  \/\/ return compiled code entry point after potential safepoints\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  \/\/ Return compiled code entry point after potential safepoints.\n+  \/\/ In case we are in interpreted only mode return c2i entry instead.\n+  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n@@ -1600,1 +1604,0 @@\n-  bool enter_special = false;\n@@ -1604,12 +1607,0 @@\n-\n-    if (current->is_interp_only_mode()) {\n-      RegisterMap reg_map(current,\n-                          RegisterMap::UpdateMap::skip,\n-                          RegisterMap::ProcessFrames::include,\n-                          RegisterMap::WalkContinuation::skip);\n-      frame stub_frame = current->last_frame();\n-      assert(stub_frame.is_runtime_frame(), \"must be a runtimeStub\");\n-      frame caller = stub_frame.sender(&reg_map);\n-      enter_special = caller.cb() != nullptr && caller.cb()->is_compiled()\n-        && caller.cb()->as_compiled_method()->method()->is_continuation_enter_intrinsic();\n-    }\n@@ -1617,15 +1608,5 @@\n-\n-  if (current->is_interp_only_mode() && enter_special) {\n-    \/\/ enterSpecial is compiled and calls this method to resolve the call to Continuation::enter\n-    \/\/ but in interp_only_mode we need to go to the interpreted entry\n-    \/\/ The c2i won't patch in this mode -- see fixup_callers_callsite\n-    \/\/\n-    \/\/ This should probably be done in all cases, not just enterSpecial (see JDK-8218403),\n-    \/\/ but that's part of a larger fix, and the situation is worse for enterSpecial, as it has no\n-    \/\/ interpreted version.\n-    return callee_method->get_c2i_entry();\n-  }\n-\n-  \/\/ return compiled code entry point after potential safepoints\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  \/\/ Return compiled code entry point after potential safepoints.\n+  \/\/ In case we are in interpreted only mode return c2i entry instead.\n+  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n@@ -1642,3 +1623,5 @@\n-  \/\/ return compiled code entry point after potential safepoints\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  \/\/ Return compiled code entry point after potential safepoints.\n+  \/\/ In case we are in interpreted only mode return c2i entry instead.\n+  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n@@ -1656,3 +1639,5 @@\n-  \/\/ return compiled code entry point after potential safepoints\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  \/\/ Return compiled code entry point after potential safepoints.\n+  \/\/ In case we are in interpreted only mode return c2i entry instead.\n+  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":25,"deletions":40,"binary":false,"changes":65,"status":"modified"}]}