{"files":[{"patch":"@@ -146,1 +146,1 @@\n-address Method::get_i2c_entry() {\n+address Method::get_i2c_entry() const {\n@@ -151,1 +151,1 @@\n-address Method::get_c2i_entry() {\n+address Method::get_c2i_entry() const {\n@@ -156,1 +156,1 @@\n-address Method::get_c2i_unverified_entry() {\n+address Method::get_c2i_unverified_entry() const {\n@@ -161,1 +161,1 @@\n-address Method::get_c2i_no_clinit_check_entry() {\n+address Method::get_c2i_no_clinit_check_entry() const {\n@@ -1282,8 +1282,9 @@\n-\/\/ The verified_code_entry() must be called when a invoke is resolved\n-\/\/ on this method.\n-\n-\/\/ It returns the compiled code entry point, after asserting not null.\n-\/\/ This function is called after potential safepoints so that nmethod\n-\/\/ or adapter that it points to is still live and valid.\n-\/\/ This function must not hit a safepoint!\n-address Method::verified_code_entry() {\n+\/\/ This must be called when an invoke is resolved on this method.\n+\/\/ It returns the compiled code entry point, or the c2i entry point if\n+\/\/ in interpreted only mode. This function is called after potential\n+\/\/ safepoints so that the nmethod or adapter that it points to is still\n+\/\/ live and valid, and no switch to interpreted only mode happens after\n+\/\/ we already returned the compiled entry point.\n+\/\/ TODO: _linkToNative doesn't have an interpreted version so we always\n+\/\/ return the compiled code entry point.\n+address Method::from_compiled_entry(bool is_interp_only_mode) const {\n@@ -1291,2 +1292,8 @@\n-  assert(_from_compiled_entry != nullptr, \"must be set\");\n-  return _from_compiled_entry;\n+  address target = nullptr;\n+  if (!is_interp_only_mode || (intrinsic_id() == vmIntrinsics::_linkToNative)) {\n+    target = _from_compiled_entry;\n+  } else {\n+    target = get_c2i_entry();\n+  }\n+  assert(target != nullptr, \"Jump to zero!\");\n+  return target;\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-  address verified_code_entry();\n+  address from_compiled_entry(bool is_interp_only_mode) const;\n@@ -439,4 +439,4 @@\n-  address get_i2c_entry();\n-  address get_c2i_entry();\n-  address get_c2i_unverified_entry();\n-  address get_c2i_no_clinit_check_entry();\n+  address get_i2c_entry() const;\n+  address get_c2i_entry() const;\n+  address get_c2i_unverified_entry() const;\n+  address get_c2i_no_clinit_check_entry() const;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1503,5 +1503,1 @@\n-  \/\/ Return compiled code entry point after potential safepoints.\n-  \/\/ In case we are in interpreted only mode return c2i entry instead.\n-  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n-  assert(target != nullptr, \"Jump to zero!\");\n-  return target;\n+  return callee_method->from_compiled_entry(current->is_interp_only_mode());\n@@ -1559,5 +1555,1 @@\n-  \/\/ Return compiled code entry point after potential safepoints.\n-  \/\/ In case we are in interpreted only mode return c2i entry instead.\n-  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n-  assert(target != nullptr, \"Jump to zero!\");\n-  return target;\n+  return callee_method->from_compiled_entry(current->is_interp_only_mode());\n@@ -1608,5 +1600,1 @@\n-  \/\/ Return compiled code entry point after potential safepoints.\n-  \/\/ In case we are in interpreted only mode return c2i entry instead.\n-  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n-  assert(target != nullptr, \"Jump to zero!\");\n-  return target;\n+  return callee_method->from_compiled_entry(current->is_interp_only_mode());\n@@ -1623,5 +1611,1 @@\n-  \/\/ Return compiled code entry point after potential safepoints.\n-  \/\/ In case we are in interpreted only mode return c2i entry instead.\n-  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n-  assert(target != nullptr, \"Jump to zero!\");\n-  return target;\n+  return callee_method->from_compiled_entry(current->is_interp_only_mode());\n@@ -1639,5 +1623,1 @@\n-  \/\/ Return compiled code entry point after potential safepoints.\n-  \/\/ In case we are in interpreted only mode return c2i entry instead.\n-  address target = current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry();\n-  assert(target != nullptr, \"Jump to zero!\");\n-  return target;\n+  return callee_method->from_compiled_entry(current->is_interp_only_mode());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"}]}