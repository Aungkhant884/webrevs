[{"commit":{"message":"Remove asserts \/ fix build\n\nCustomizedGitHooks: yes\nChange-Id: I6b634b90e81cf8f6e4cd1cdc63f6926eaa7025f6"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"}],"sha":"406eeed551f7591bc0cd603b3752c29c7c69294c"},{"commit":{"message":"Add sender_pc_raw()\n\nChange-Id: I865170d4462c2ff3a67cbee992eadad4810efebf\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"}],"sha":"70d13e7a51bf20c9ee6475c7df4a99e6732208f5"},{"commit":{"message":"Move pauth_ptr_is_raw check to frame constructor\n\nChange-Id: I52022fa64bf837de5f8b0050ebad2ad75edc9f59\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"}],"sha":"0ec89d85a9f8c00225e5058447bdc39ac9a1c8eb"},{"commit":{"message":"Ensure pointer is stripped on macos\n\nChange-Id: Idcf5f08e87c1e1f5af1dc8f421f8c7efc3d9c4c2\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp"}],"sha":"e7b220cbe3d306f16977eeb95f9799907b3a9ebd"},{"commit":{"message":"Add pauth assert to bsd signal handler\n\nI could also add the same to windows, but the pauth functions are\ncurrently blank for windows.\n\nChange-Id: I1093c576ea2e9a94d0d76176d69d28fc2e5e29c1"},"files":[],"sha":"386ee4e997e5c646f23844bf3b46d81a27119021"},{"commit":{"message":"Split pauth_aarch64.hpp into os_cpu variants\n\nChange-Id: Ib39f42e0ed09156b2fc861117f304ef565c25f93"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp"},{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/windows_aarch64\/pauth_windows_aarch64.inline.hpp"}],"sha":"ecf3eb0fe2fdfdc37875ebb691cbda8f3017d384"},{"commit":{"message":"8266749: AArch64: Fix backtracing on PAC enabled systems\n\nOn PAC systems, native code may sign return addresses before saving\nthem to the stack. We must ensure we strip the any signed bits in\norder to walk the stack.\nAdd extra asserts in places where we do not expect saved return\naddresses to be signed.\n\nOn non-PAC systems, all PAC instructions are treated as NOPs.\n\nOn Apple, use the provided ptrauth interface instead of asm\nas the compiler may optimise further.\n\nFedora 33 compiles all distro packages using PAC. Running the distro\nprovided OpenJDK-latest in GDB on a PAC system:\n\nThread 2 \"java\" hit Breakpoint 1, 0x0000fffff68d7fe4 in init_globals() ()\n   from \/usr\/lib\/jvm\/java-16-openjdk-16.0.1.0.9-1.rolling.fc33.aarch64-fastdebug\/lib\/server\/libjvm.so\n(gdb) call (int)pns($sp, $fp, $pc)\n\n\"Executing pns\"\nNative frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0xe26fe4]  init_globals()+0x10\nC  0x006ffffff74750c4\nC  0x0042fffff6a7f84c\nC  0x0037fffff7fa0954\nC  0x0030fffff7fa4540\nC  0x0078fffff7d980c8\n\nOpenJDK with this patch at the same breakpoint:\n\n(gdb) call (int)pns($sp, $fp, $pc)\n\"Executing pns\"\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0x189c47c]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x27c\nV  [libjvm.so+0xf527a0]  JNI_CreateJavaVM+0xc0\nC  [libjli.so+0x3860]  JavaMain+0x7c\nC  [libjli.so+0x732c]  ThreadJavaMain+0xc\nC  [libpthread.so.0+0x80c8]  start_thread+0xd8\n\nOpenJDK with this patch breakpointed at pd_hotspot_signal_handler:\n\n\"Executing pns\"\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0x148a730]  PosixSignals::pd_hotspot_signal_handler(int, siginfo_t*, ucontext_t*, JavaThread*)+0x0\nC  [linux-vdso.so.1+0x80c]  __kernel_rt_sigreturn+0x0\nJ 53 c1 jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8(Ljava\/lang\/String;)I java.base (98 bytes) @ 0x0000ffffe159cc3c [0x0000ffffe159cb40+0x00000000000000fc]\nj  jdk.internal.org.objectweb.asm.SymbolTable.setMajorVersionAndClassName(ILjava\/lang\/String;)I+12 java.base\nj  jdk.internal.org.objectweb.asm.ClassWriter.visit(IILjava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;[Ljava\/lang\/String;)V+20 java.base\nj  java.lang.invoke.InvokerBytecodeGenerator.classFilePrologue()Ljdk\/internal\/org\/objectweb\/asm\/ClassWriter;+30 java.base\nj  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes()[B+1 java.base\nj  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(Ljava\/lang\/invoke\/LambdaForm;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MemberName;+27 java.base\nj  java.lang.invoke.LambdaForm.compileToBytecode()V+69 java.base\nj  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava\/lang\/invoke\/MethodType;I)Ljava\/lang\/invoke\/LambdaForm;+792 java.base\nj  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava\/lang\/invoke\/MethodType;I)Ljava\/lang\/invoke\/LambdaForm;+17 java.base\nj  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava\/lang\/invoke\/MemberName;Z)Ljava\/lang\/invoke\/LambdaForm;+163 java.base\nj  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava\/lang\/invoke\/MemberName;)Ljava\/lang\/invoke\/LambdaForm;+2 java.base\nj  java.lang.invoke.DirectMethodHandle.make(BLjava\/lang\/Class;Ljava\/lang\/invoke\/MemberName;Ljava\/lang\/Class;)Ljava\/lang\/invoke\/DirectMethodHandle;+159 java.base\nj  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava\/lang\/Class;Ljava\/lang\/invoke\/MemberName;ZZLjava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/invoke\/MethodHandle;+210 java.base\nj  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava\/lang\/Class;Ljava\/lang\/invoke\/MemberName;Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/invoke\/MethodHandle;+14 java.base\nj  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava\/lang\/Class;Ljava\/lang\/invoke\/MemberName;)Ljava\/lang\/invoke\/MethodHandle;+31 java.base\nj  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava\/lang\/Class;Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/invoke\/MethodHandle;+153 java.base\nj  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava\/lang\/Class;ILjava\/lang\/Class;Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/invoke\/MethodHandle;+38 java.base\nv  ~StubRoutines::call_stub\nV  [libjvm.so+0xe20118]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x5c8\nV  [libjvm.so+0xe20f64]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x284\nV  [libjvm.so+0x184b778]  SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*)+0x398\nV  [libjvm.so+0xa1f104]  ConstantPool::resolve_constant_at_impl(constantPoolHandle const&, int, int, bool*, Thread*)+0xca0\nV  [libjvm.so+0xa1fb6c]  ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&, int, int, int, objArrayHandle, int, bool, Handle, Thread*)+0x3fc\nV  [libjvm.so+0x6bef6c]  BootstrapInfo::resolve_args(Thread*)+0xcbc\nV  [libjvm.so+0x6c1538]  BootstrapInfo::resolve_bsm(Thread*)+0x1194\nV  [libjvm.so+0x184d300]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, Thread*)+0x30\nV  [libjvm.so+0x120450c]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, Thread*)+0x2c\nV  [libjvm.so+0x1204b1c]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, Thread*)+0x1bc\nV  [libjvm.so+0xe0ecc4]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x190\nV  [libjvm.so+0xe123a0]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x160\nj  jdk.internal.module.ModulePath.explodedPackages(Ljava\/nio\/file\/Path;)Ljava\/util\/Set;+5 java.base\nj  jdk.internal.module.ModulePath.lambda$readExplodedModule$9(Ljava\/nio\/file\/Path;)Ljava\/util\/Set;+2 java.base\nj  jdk.internal.module.ModulePath$$Lambda$2+0x000000010003bbe0.get()Ljava\/lang\/Object;+8 java.base\nj  jdk.internal.module.ModuleInfo.doRead(Ljava\/io\/DataInput;)Ljdk\/internal\/module\/ModuleInfo$Attributes;+762 java.base\nj  jdk.internal.module.ModuleInfo.read(Ljava\/io\/InputStream;Ljava\/util\/function\/Supplier;)Ljdk\/internal\/module\/ModuleInfo$Attributes;+16 java.base\nj  jdk.internal.module.ModulePath.readExplodedModule(Ljava\/nio\/file\/Path;)Ljava\/lang\/module\/ModuleReference;+35 java.base\nj  jdk.internal.module.ModulePath.readModule(Ljava\/nio\/file\/Path;Ljava\/nio\/file\/attribute\/BasicFileAttributes;)Ljava\/lang\/module\/ModuleReference;+11 java.base\nj  jdk.internal.module.ModulePath.scanDirectory(Ljava\/nio\/file\/Path;)Ljava\/util\/Map;+69 java.base\nj  jdk.internal.module.ModulePath.scan(Ljava\/nio\/file\/Path;)Ljava\/util\/Map;+60 java.base\nj  jdk.internal.module.ModulePath.scanNextEntry()V+23 java.base\nj  jdk.internal.module.ModulePath.find(Ljava\/lang\/String;)Ljava\/util\/Optional;+36 java.base\nj  jdk.internal.module.SystemModuleFinders$1.lambda$find$0(Ljava\/lang\/module\/ModuleFinder;Ljava\/lang\/String;)Ljava\/util\/Optional;+2 java.base\nj  jdk.internal.module.SystemModuleFinders$1$$Lambda$1+0x0000000100033b00.run()Ljava\/lang\/Object;+8 java.base\nj  java.security.AccessController.executePrivileged(Ljava\/security\/PrivilegedAction;Ljava\/security\/AccessControlContext;Ljava\/lang\/Class;)Ljava\/lang\/Object;+29 java.base\nj  java.security.AccessController.doPrivileged(Ljava\/security\/PrivilegedAction;)Ljava\/lang\/Object;+5 java.base\nj  jdk.internal.module.SystemModuleFinders$1.find(Ljava\/lang\/String;)Ljava\/util\/Optional;+12 java.base\nj  jdk.internal.module.ModuleBootstrap.boot2()Ljava\/lang\/ModuleLayer;+304 java.base\nj  jdk.internal.module.ModuleBootstrap.boot()Ljava\/lang\/ModuleLayer;+64 java.base\nj  java.lang.System.initPhase2(ZZ)I+0 java.base\nv  ~StubRoutines::call_stub\nV  [libjvm.so+0xe20118]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x5c8\nV  [libjvm.so+0xe20f64]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x284\nV  [libjvm.so+0x189c7bc]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x5bc\nV  [libjvm.so+0xf527a0]  JNI_CreateJavaVM+0xc0\nC  [libjli.so+0x3860]  JavaMain+0x7c\nC  [libjli.so+0x732c]  ThreadJavaMain+0xc\nC  [libpthread.so.0+0x80c8]  start_thread+0xd8"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp"},{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/pauth_bsd_aarch64.inline.hpp"},{"filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp"}],"sha":"8ec16f500ecc7dd5b1257dcd3172086164e53b93"}]