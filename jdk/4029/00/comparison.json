{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"pauth_aarch64.hpp\"\n@@ -275,0 +276,3 @@\n+\n+  \/\/ Only generated code frames should be patched, therefore the return address will not be signed.\n+  assert(pauth_ptr_is_raw(*pc_addr), \"cannot be signed\");\n@@ -439,1 +443,5 @@\n-  return frame(sender_sp, unextended_sp, link(), sender_pc());\n+  address sender_pc = this->sender_pc();\n+  \/\/ Interpreter should never sign the return address.\n+  assert(pauth_ptr_is_raw(sender_pc), \"cannot be signed\");\n+\n+  return frame(sender_sp, unextended_sp, link(), sender_pc);\n@@ -456,0 +464,2 @@\n+  \/\/ C1\/C2 compiled code should never sign the return address.\n+  assert(pauth_ptr_is_raw(sender_pc), \"cannot be signed\");\n@@ -502,1 +512,7 @@\n-  return frame(sender_sp(), link(), sender_pc());\n+\n+  \/\/ Native code may or may not have signed the return address when saving it\n+  \/\/ to the stack. In addition, we do not know which key was used to sign it.\n+  \/\/ Therefore, all we can do is strip it.\n+  address sender_pc = pauth_strip_pointer(this->sender_pc());\n+\n+  return frame(sender_sp(), link(), sender_pc);\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n+#define CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n+\n+#ifdef __APPLE__\n+#include <ptrauth.h>\n+#endif\n+\n+\/\/ Only the PAC instructions in the NOP space can be used. This ensures the\n+\/\/ binaries work on systems without PAC. Write these instructions using their\n+\/\/ alternate \"hint\" instructions to ensure older compilers can still be used.\n+\n+#define XPACLRI \"hint #0x7;\"\n+\n+inline address pauth_strip_pointer(address ptr) {\n+#ifdef __APPLE__\n+  ptrauth_strip(ptr, ptrauth_key_asib);\n+#else\n+  asm volatile (\"mov x30, %0;\"\n+                XPACLRI\n+                \"mov %0, x30;\" : \"+r\"(ptr) : : \"x30\");\n+#endif\n+  return ptr;\n+}\n+\n+inline bool pauth_ptr_is_raw(address ptr) {\n+  \/\/ Confirm none of the high bits are set in the pointer.\n+  return ptr == pauth_strip_pointer(ptr);\n+}\n+\n+#undef XPACLRI\n+\n+#endif \/\/ CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"pauth_aarch64.hpp\"\n@@ -143,0 +144,2 @@\n+  \/\/ Compiled code should not have signed the return address.\n+  assert(pauth_ptr_is_raw(pc), \"cannot be signed\");\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}