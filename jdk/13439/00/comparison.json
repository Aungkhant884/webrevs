{"files":[{"patch":"@@ -395,1 +395,1 @@\n-  virtual void do_derived_oop(oop* base, derived_pointer* derived) {\n+  virtual void do_derived_oop(derived_base* base, derived_pointer* derived) {\n@@ -413,1 +413,1 @@\n-  virtual void do_derived_oop(oop* base, derived_pointer* derived) {\n+  virtual void do_derived_oop(derived_base* base, derived_pointer* derived) {\n@@ -433,1 +433,1 @@\n-  virtual void do_derived_oop(oop* base, derived_pointer* derived) {}\n+  virtual void do_derived_oop(derived_base* base, derived_pointer* derived) {}\n@@ -918,2 +918,2 @@\n-void DerivedPointerTable::add(derived_pointer* derived_loc, oop *base_loc) {\n-  assert(Universe::heap()->is_in_or_null(*base_loc), \"not an oop\");\n+void DerivedPointerTable::add(derived_pointer* derived_loc, derived_base* base_loc) {\n+  assert(Universe::heap()->is_in_or_null((void*)*base_loc), \"not an oop\");\n@@ -936,1 +936,1 @@\n-      p2i(derived_loc), derived_pointer_value(*derived_loc), p2i(*base_loc), p2i(base_loc), offset\n+      p2i(derived_loc), derived_pointer_value(*derived_loc), intptr_t(*base_loc), p2i(base_loc), offset\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+enum class derived_base : intptr_t {};\n@@ -484,1 +485,1 @@\n-  static bool _active;                                  \/\/ do not record pointers for verify pass etc.\n+  static bool _active;                                           \/\/ do not record pointers for verify pass etc.\n@@ -487,3 +488,3 @@\n-  static void clear();                                  \/\/ Called before scavenge\/GC\n-  static void add(derived_pointer* derived, oop *base); \/\/ Called during scavenge\/GC\n-  static void update_pointers();                        \/\/ Called after  scavenge\/GC\n+  static void clear();                                           \/\/ Called before scavenge\/GC\n+  static void add(derived_pointer* derived, derived_base* base); \/\/ Called during scavenge\/GC\n+  static void update_pointers();                                 \/\/ Called after  scavenge\/GC\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-      void** base_loc = (void**) fr->oopmapreg_to_location(omv.content_reg(), reg_map);\n+      derived_base* base_loc = (derived_base*) fr->oopmapreg_to_location(omv.content_reg(), reg_map);\n@@ -94,2 +94,2 @@\n-      if (base_loc != nullptr && !SkipNullValue::should_skip(*base_loc)) {\n-        _derived_oop_fn->do_derived_oop((oop*)base_loc, derived_loc);\n+      if (base_loc != nullptr && !SkipNullValue::should_skip((void*)*base_loc)) {\n+        _derived_oop_fn->do_derived_oop(base_loc, derived_loc);\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+enum class derived_base : intptr_t;\n@@ -136,1 +137,1 @@\n-  virtual void do_derived_oop(oop* base, derived_pointer* derived) = 0;\n+  virtual void do_derived_oop(derived_base* base, derived_pointer* derived) = 0;\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,5 @@\n+\/\/ Note: Some functions in this file work with stale object pointers, e.g.\n+\/\/       DerivedPointerSupport. Be extra careful to not put those pointers into\n+\/\/       variables of the 'oop' type. There's extra GC verification around oops\n+\/\/       that may fail when stale oops are being used.\n+\n@@ -156,3 +161,5 @@\n-  static void relativize(oop* base_loc, derived_pointer* derived_loc) {\n-    oop base = *base_loc;\n-    if (base == nullptr) {\n+  static void relativize(derived_base* base_loc, derived_pointer* derived_loc) {\n+    \/\/ The base oop could be stale from the GC's point-of-view. Treat it as an\n+    \/\/ uintptr_t to stay clear of the oop verification code in oopsHierarcy.hpp.\n+    uintptr_t base = *(uintptr_t*)base_loc;\n+    if (base == 0) {\n@@ -161,1 +168,1 @@\n-    assert(!UseCompressedOops || !CompressedOops::is_base(base), \"\");\n+    assert(!UseCompressedOops || !CompressedOops::is_base((void*)base), \"\");\n@@ -167,1 +174,1 @@\n-    uintptr_t offset = derived_int_val - cast_from_oop<uintptr_t>(base);\n+    uintptr_t offset = derived_int_val - base;\n@@ -171,3 +178,3 @@\n-  static void derelativize(oop* base_loc, derived_pointer* derived_loc) {\n-    oop base = *base_loc;\n-    if (base == nullptr) {\n+  static void derelativize(derived_base* base_loc, derived_pointer* derived_loc) {\n+    uintptr_t base = *(uintptr_t*)base_loc;\n+    if (base == 0) {\n@@ -176,1 +183,1 @@\n-    assert(!UseCompressedOops || !CompressedOops::is_base(base), \"\");\n+    assert(!UseCompressedOops || !CompressedOops::is_base((void*)base), \"\");\n@@ -182,1 +189,1 @@\n-    *(uintptr_t*)derived_loc = cast_from_oop<uintptr_t>(base) + offset;\n+    *(uintptr_t*)derived_loc = base + offset;\n@@ -186,1 +193,1 @@\n-    virtual void do_derived_oop(oop* base_loc, derived_pointer* derived_loc) override {\n+    virtual void do_derived_oop(derived_base* base_loc, derived_pointer* derived_loc) override {\n@@ -192,1 +199,1 @@\n-    virtual void do_derived_oop(oop* base_loc, derived_pointer* derived_loc) override {\n+    virtual void do_derived_oop(derived_base* base_loc, derived_pointer* derived_loc) override {\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -95,4 +95,2 @@\n-      if (_cont._tail != nullptr) {\n-        _cont._tail = jdk_internal_vm_Continuation::tail(_cont._continuation);\n-       }\n-       _cont.disallow_safepoint();\n+      _cont._tail = jdk_internal_vm_Continuation::tail(_cont._continuation);\n+      _cont.disallow_safepoint();\n","filename":"src\/hotspot\/share\/runtime\/continuationWrapper.inline.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1244,1 +1244,1 @@\n-  GrowableArray<oop*>* _base;\n+  GrowableArray<derived_base*>* _base;\n@@ -1252,1 +1252,1 @@\n-    _base = new (mtThread) GrowableArray<oop*>(100, mtThread);\n+    _base = new (mtThread) GrowableArray<derived_base*>(100, mtThread);\n@@ -1264,1 +1264,1 @@\n-  virtual void do_derived_oop(oop* base_loc, derived_pointer* derived_loc) override {\n+  virtual void do_derived_oop(derived_base* base_loc, derived_pointer* derived_loc) override {\n@@ -1284,1 +1284,1 @@\n-      oop* base = _base->at(i);\n+      derived_base* base = _base->at(i);\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -413,1 +413,1 @@\n-    Devirtualizer::do_derived_oop(closure, (oop*)base_loc, (derived_pointer*)derived_loc);\n+    Devirtualizer::do_derived_oop(closure, (derived_base*)base_loc, (derived_pointer*)derived_loc);\n","filename":"src\/hotspot\/share\/runtime\/stackChunkFrameStream.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  template <typename DerivedOopClosureType>      static void do_derived_oop(DerivedOopClosureType* closure, oop* base, derived_pointer* derived);\n+  template <typename DerivedOopClosureType>      static void do_derived_oop(DerivedOopClosureType* closure, derived_base* base, derived_pointer* derived);\n","filename":"src\/hotspot\/share\/utilities\/devirtualizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-call_do_derived_oop(void (Receiver::*)(oop*, derived_pointer*), void (Base::*)(oop*, derived_pointer*), DerivedOopClosureType* closure, oop* base, derived_pointer* derived) {\n+call_do_derived_oop(void (Receiver::*)(derived_base*, derived_pointer*), void (Base::*)(derived_base*, derived_pointer*), DerivedOopClosureType* closure, derived_base* base, derived_pointer* derived) {\n@@ -163,1 +163,1 @@\n-call_do_derived_oop(void (Receiver::*)(oop*, derived_pointer*), void (Base::*)(oop*, derived_pointer*), DerivedOopClosureType* closure, oop* base, derived_pointer* derived) {\n+call_do_derived_oop(void (Receiver::*)(derived_base*, derived_pointer*), void (Base::*)(derived_base*, derived_pointer*), DerivedOopClosureType* closure, derived_base* base, derived_pointer* derived) {\n@@ -168,1 +168,1 @@\n-inline void Devirtualizer::do_derived_oop(DerivedOopClosureType* closure, oop* base, derived_pointer* derived) {\n+inline void Devirtualizer::do_derived_oop(DerivedOopClosureType* closure, derived_base* base, derived_pointer* derived) {\n","filename":"src\/hotspot\/share\/utilities\/devirtualizer.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}