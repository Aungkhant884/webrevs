{"files":[{"patch":"@@ -2964,1 +2964,1 @@\n-      JavaThread::send_async_exception(java_thread, java_throwable);\n+      JavaThread::send_async_exception(receiver, java_throwable);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1075,1 +1075,1 @@\n-  JavaThread::send_async_exception(java_thread->threadObj(), e);\n+  JavaThread::send_async_exception(java_thread, e);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,0 @@\n-      case _thread_in_native_trans:\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1004,1 +1004,0 @@\n-  _async_exception_condition(_no_async_condition),\n@@ -1006,0 +1005,3 @@\n+#ifdef ASSERT\n+  _is_unsafe_access_error(false),\n+#endif\n@@ -1575,3 +1577,0 @@\n-\/\/ Note: this function shouldn't block if it's called in\n-\/\/ _thread_in_native_trans state (such as from\n-\/\/ check_special_condition_for_native_trans()).\n@@ -1603,9 +1602,1 @@\n-  AsyncExceptionCondition condition = clear_async_exception_condition();\n-  if (condition == _no_async_condition) {\n-    \/\/ Conditions have changed since has_special_runtime_exit_condition()\n-    \/\/ was called:\n-    \/\/ - if we were here only because of an external suspend request,\n-    \/\/   then that was taken care of above (or cancelled) so we are done\n-    \/\/ - if we were here because of another async request, then it has\n-    \/\/   been cleared between the has_special_runtime_exit_condition()\n-    \/\/   and now so again we are done\n+  if (!clear_async_exception_condition()) {\n@@ -1615,1 +1606,0 @@\n-  \/\/ Check for pending async. exception\n@@ -1617,1 +1607,1 @@\n-    \/\/ Only overwrite an already pending exception, if it is not a threadDeath.\n+    \/\/ Only overwrite an already pending exception if it is not a threadDeath.\n@@ -1634,3 +1624,0 @@\n-      _pending_async_exception = NULL;\n-      \/\/ Clear condition from _suspend_flags since we have finished processing it.\n-      clear_suspend_flag(_has_async_exception);\n@@ -1638,1 +1625,6 @@\n-  }\n+    \/\/ Always null out the _pending_async_exception oop here since the async condition was\n+    \/\/ already cleared above and thus considered handled.\n+    _pending_async_exception = NULL;\n+  } else {\n+    assert(_is_unsafe_access_error, \"must be\");\n+    DEBUG_ONLY(_is_unsafe_access_error = false);\n@@ -1640,1 +1632,0 @@\n-  if (condition == _async_unsafe_access_error && !has_pending_exception()) {\n@@ -1647,7 +1638,4 @@\n-      return;\n-    }\n-    case _thread_in_native: {\n-      ThreadInVMfromNative tiv(this);\n-      JavaThread* THREAD = this;\n-      Exceptions::throw_unsafe_access_internal_error(THREAD, __FILE__, __LINE__, \"a fault occurred in an unsafe memory access operation\");\n-      return;\n+      \/\/ We might have blocked in a ThreadBlockInVM wrapper in the call above so make sure we process pending\n+      \/\/ suspend requests and object reallocation operations if any since we might be going to Java after this.\n+      SafepointMechanism::process_if_requested_with_exit_check(this, true \/* check asyncs *\/);\n+      break;\n@@ -1659,1 +1647,1 @@\n-      return;\n+      break;\n@@ -1665,1 +1653,0 @@\n-\n@@ -1699,1 +1686,1 @@\n-void JavaThread::send_async_exception(oop java_thread, oop java_throwable) {\n+void JavaThread::send_async_exception(JavaThread* target, oop java_throwable) {\n@@ -1701,1 +1688,0 @@\n-  JavaThread* target = java_lang_Thread::thread(java_thread);\n@@ -1735,1 +1721,2 @@\n-      set_pending_async_exception(java_throwable);\n+      _pending_async_exception = java_throwable;\n+      set_suspend_flag(_has_async_exception);\n@@ -1850,0 +1837,2 @@\n+  thread->set_thread_state(_thread_in_vm);\n+\n@@ -1853,1 +1842,1 @@\n-  SafepointMechanism::process_if_requested_with_exit_check(thread, false \/* check asyncs *\/);\n+  SafepointMechanism::process_if_requested_with_exit_check(thread, true \/* check asyncs *\/);\n@@ -1859,6 +1848,0 @@\n-\n-  if (thread->has_async_exception_condition(false \/* check unsafe access error *\/)) {\n-    \/\/ We are in _thread_in_native_trans state, don't handle unsafe\n-    \/\/ access error since that may block.\n-    thread->check_and_handle_async_exceptions();\n-  }\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":22,"deletions":39,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -805,14 +805,4 @@\n-  enum AsyncExceptionCondition {\n-    _no_async_condition = 0,\n-    _async_exception,\n-    _async_unsafe_access_error\n-  };\n-  AsyncExceptionCondition _async_exception_condition;\n-  oop                     _pending_async_exception;\n-\n-  void set_async_exception_condition(AsyncExceptionCondition aec) { _async_exception_condition = aec; }\n-  AsyncExceptionCondition clear_async_exception_condition() {\n-    AsyncExceptionCondition x = _async_exception_condition;\n-    _async_exception_condition = _no_async_condition;\n-    return x;\n-  }\n+  oop     _pending_async_exception;\n+#ifdef ASSERT\n+  bool    _is_unsafe_access_error;\n+#endif\n@@ -820,0 +810,1 @@\n+  inline bool clear_async_exception_condition();\n@@ -821,3 +812,2 @@\n-  bool has_async_exception_condition(bool check_unsafe_access_error = true) {\n-    return check_unsafe_access_error ? _async_exception_condition != _no_async_condition\n-                                     : _async_exception_condition == _async_exception;\n+  bool has_async_exception_condition() {\n+    return (_suspend_flags & _has_async_exception) != 0;\n@@ -825,10 +815,2 @@\n-  inline void set_pending_async_exception(oop e);\n-  void set_pending_unsafe_access_error()  {\n-    \/\/ Don't overwrite an asynchronous exception sent by another thread\n-    if (_async_exception_condition == _no_async_condition) {\n-      set_async_exception_condition(_async_unsafe_access_error);\n-    }\n-  }\n-  void check_and_handle_async_exceptions();\n-  \/\/ Installs a pending exception to be inserted later\n-  static void send_async_exception(oop thread_oop, oop java_throwable);\n+  inline void set_pending_unsafe_access_error();\n+  static void send_async_exception(JavaThread* jt, oop java_throwable);\n@@ -836,0 +818,1 @@\n+  void check_and_handle_async_exceptions();\n@@ -1180,2 +1163,1 @@\n-    return (_async_exception_condition != _no_async_condition) ||\n-           (_suspend_flags & (_obj_deopt JFR_ONLY(| _trace_flag))) != 0;\n+    return (_suspend_flags & (_has_async_exception | _obj_deopt JFR_ONLY(| _trace_flag))) != 0;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":11,"deletions":29,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -125,6 +125,7 @@\n-inline void JavaThread::set_pending_async_exception(oop e) {\n-  _pending_async_exception = e;\n-  set_async_exception_condition(_async_exception);\n-  \/\/ Set _suspend_flags too so we save a comparison in the transition from native to Java\n-  \/\/ in the native wrappers. It will be cleared in check_and_handle_async_exceptions()\n-  \/\/ when we actually install the exception.\n+inline bool JavaThread::clear_async_exception_condition() {\n+  bool ret = has_async_exception_condition();\n+  clear_suspend_flag(_has_async_exception);\n+  return ret;\n+}\n+\n+inline void JavaThread::set_pending_unsafe_access_error() {\n@@ -132,0 +133,1 @@\n+  DEBUG_ONLY(_is_unsafe_access_error = true);\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -720,1 +720,0 @@\n-  nonstatic_field(JavaThread,                  _async_exception_condition,                    JavaThread::AsyncExceptionCondition)   \\\n@@ -1954,1 +1953,0 @@\n-  declare_integer_type(JavaThread::AsyncExceptionCondition)               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}