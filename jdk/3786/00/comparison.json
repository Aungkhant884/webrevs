{"files":[{"patch":"@@ -334,3 +334,4 @@\n-  size_t reserved  = MetaspaceUtils::reserved_bytes();\n-  size_t committed = MetaspaceUtils::committed_bytes();\n-  size_t used      = MetaspaceUtils::used_bytes();\n+  MetaspaceCombinedStats stats = MetaspaceUtils::get_combined_statistics();\n+  size_t reserved  = stats.reserved();\n+  size_t committed = stats.committed();\n+  size_t used      = stats.used();\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n-    CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  _meta_sizes(MetaspaceUtils::get_combined_statistics()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -40,1 +40,1 @@\n-    const metaspace::MetaspaceSizesSnapshot _meta_sizes;\n+    const MetaspaceCombinedStats _meta_sizes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -306,1 +306,0 @@\n-    CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -187,1 +187,0 @@\n-  CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,13 +130,0 @@\n-  const MetaspaceSizes meta_space(\n-      MetaspaceUtils::committed_bytes(),\n-      MetaspaceUtils::used_bytes(),\n-      MetaspaceUtils::reserved_bytes());\n-  const MetaspaceSizes data_space(\n-      MetaspaceUtils::committed_bytes(Metaspace::NonClassType),\n-      MetaspaceUtils::used_bytes(Metaspace::NonClassType),\n-      MetaspaceUtils::reserved_bytes(Metaspace::NonClassType));\n-  const MetaspaceSizes class_space(\n-      MetaspaceUtils::committed_bytes(Metaspace::ClassType),\n-      MetaspaceUtils::used_bytes(Metaspace::ClassType),\n-      MetaspaceUtils::reserved_bytes(Metaspace::ClassType));\n-\n@@ -147,2 +134,2 @@\n-\n-  return MetaspaceSummary(MetaspaceGC::capacity_until_GC(), meta_space, data_space, class_space,\n+  return MetaspaceSummary(MetaspaceGC::capacity_until_GC(),\n+                          MetaspaceUtils::get_combined_statistics(),\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -64,15 +65,0 @@\n-class MetaspaceSizes : public StackObj {\n-  size_t _committed;\n-  size_t _used;\n-  size_t _reserved;\n-\n- public:\n-  MetaspaceSizes() : _committed(0), _used(0), _reserved(0) {}\n-  MetaspaceSizes(size_t committed, size_t used, size_t reserved) :\n-    _committed(committed), _used(used), _reserved(reserved) {}\n-\n-  size_t committed() const { return _committed; }\n-  size_t used() const { return _used; }\n-  size_t reserved() const { return _reserved; }\n-};\n-\n@@ -150,3 +136,1 @@\n-  MetaspaceSizes _meta_space;\n-  MetaspaceSizes _data_space;\n-  MetaspaceSizes _class_space;\n+  MetaspaceCombinedStats _stats;\n@@ -159,3 +143,1 @@\n-    _meta_space(),\n-    _data_space(),\n-    _class_space(),\n+    _stats(),\n@@ -166,3 +148,1 @@\n-                   const MetaspaceSizes& meta_space,\n-                   const MetaspaceSizes& data_space,\n-                   const MetaspaceSizes& class_space,\n+                   const MetaspaceCombinedStats& stats,\n@@ -172,3 +152,1 @@\n-    _meta_space(meta_space),\n-    _data_space(data_space),\n-    _class_space(class_space),\n+    _stats(stats),\n@@ -180,3 +158,1 @@\n-  const MetaspaceSizes& meta_space() const { return _meta_space; }\n-  const MetaspaceSizes& data_space() const { return _data_space; }\n-  const MetaspaceSizes& class_space() const { return _class_space; }\n+  const MetaspaceCombinedStats& stats() const { return _stats; }\n","filename":"src\/hotspot\/share\/gc\/shared\/gcHeapSummary.hpp","additions":6,"deletions":30,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-static JfrStructMetaspaceSizes to_struct(const MetaspaceSizes& sizes) {\n+static JfrStructMetaspaceSizes to_struct(const MetaspaceStats& sizes) {\n@@ -270,1 +270,0 @@\n-\n@@ -274,1 +273,0 @@\n-\n@@ -284,3 +282,3 @@\n-    e.set_metaspace(to_struct(meta_space_summary.meta_space()));\n-    e.set_dataSpace(to_struct(meta_space_summary.data_space()));\n-    e.set_classSpace(to_struct(meta_space_summary.class_space()));\n+    e.set_metaspace(to_struct(meta_space_summary.stats())); \/\/ total stats (class + nonclass)\n+    e.set_dataSpace(to_struct(meta_space_summary.stats().non_class_space_stats())); \/\/ \"dataspace\" aka non-class space\n+    e.set_classSpace(to_struct(meta_space_summary.stats().class_space_stats()));\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceSend.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n@@ -1231,1 +1230,0 @@\n-  CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n+#include \"memory\/metaspaceStats.hpp\"\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -50,1 +51,2 @@\n-        _old_gen_capacity(old_gen_capacity) { }\n+        _old_gen_capacity(old_gen_capacity),\n+        _meta_sizes(MetaspaceUtils::get_combined_statistics()){ }\n@@ -60,1 +62,1 @@\n-  const metaspace::MetaspaceSizesSnapshot& metaspace_sizes() const { return _meta_sizes; }\n+  const MetaspaceCombinedStats& metaspace_sizes() const { return _meta_sizes; }\n@@ -71,1 +73,1 @@\n-  const metaspace::MetaspaceSizesSnapshot _meta_sizes;\n+  const MetaspaceCombinedStats _meta_sizes;\n","filename":"src\/hotspot\/share\/gc\/shared\/preGCValues.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -190,2 +191,1 @@\n-      \/\/ Use default constructor to snapshot the Metaspace state before GC.\n-      metaspace::MetaspaceSizesSnapshot meta_sizes;\n+      MetaspaceCombinedStats meta_sizes = MetaspaceUtils::get_combined_statistics();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-    CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-    CompressedClassSpaceCounters::update_performance_counters();\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1214,0 +1214,1 @@\n+  MetaspaceCombinedStats stats = MetaspaceUtils::get_combined_statistics();\n@@ -1217,3 +1218,3 @@\n-                          MetaspaceUtils::used_bytes() \/ M,\n-                          MetaspaceUtils::committed_bytes() \/ M,\n-                          MetaspaceUtils::reserved_bytes() \/ M);\n+                          stats.used() \/ M,\n+                          stats.committed() \/ M,\n+                          stats.reserved() \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2017, 2021 SAP SE. All rights reserved.\n@@ -36,0 +37,1 @@\n+#include \"memory\/metaspace\/internalStats.hpp\"\n@@ -40,1 +42,0 @@\n-#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n@@ -44,0 +45,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -90,2 +92,59 @@\n-void MetaspaceUtils::print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values) {\n-  const metaspace::MetaspaceSizesSnapshot meta_values;\n+\/\/ Helper for get_statistics()\n+static void get_values_for(Metaspace::MetadataType mdtype, size_t* reserved, size_t* committed, size_t* used) {\n+#define w2b(x) (x * sizeof(MetaWord))\n+  if (mdtype == Metaspace::ClassType) {\n+    *reserved = w2b(RunningCounters::reserved_words_class());\n+    *committed = w2b(RunningCounters::committed_words_class());\n+    *used = w2b(RunningCounters::used_words_class());\n+  } else {\n+    *reserved = w2b(RunningCounters::reserved_words_nonclass());\n+    *committed = w2b(RunningCounters::committed_words_nonclass());\n+    *used = w2b(RunningCounters::used_words_nonclass());\n+  }\n+#undef w2b\n+}\n+\n+\/\/ Retrieve all statistics in one go; make sure the values are consistent.\n+MetaspaceStats MetaspaceUtils::get_statistics(Metaspace::MetadataType mdtype) {\n+\n+  \/\/ Consistency:\n+  \/\/ This function reads three values (reserved, committed, used) from different counters. These counters\n+  \/\/ may (very rarely) be out of sync. This has been a source for intermittent test errors in the past\n+  \/\/  (see e.g. JDK-8237872, JDK-8151460).\n+  \/\/ - reserved and committed counter are updated under protection of Metaspace_lock; an inconsistency\n+  \/\/   between them can be the result of a dirty read.\n+  \/\/ - used is an atomic counter updated outside any lock range; there is no way to guarantee\n+  \/\/   a clean read wrt the other two values.\n+  \/\/ Reading these values under lock protection would would only help for the first case. Therefore\n+  \/\/   we don't bother and just re-read several times, then give up and correct the values.\n+\n+  size_t r = 0, c = 0, u = 0; \/\/ Note: byte values.\n+  get_values_for(mdtype, &r, &c, &u);\n+  int retries = 10;\n+  \/\/ If the first retrieval resulted in inconsistent values, retry a bit...\n+  while ((r < c || c < u) && --retries >= 0) {\n+    get_values_for(mdtype, &r, &c, &u);\n+  }\n+  if (c < u || r < c) { \/\/ still inconsistent.\n+    \/\/ ... but not endlessly. If we don't get consistent values, correct them on the fly.\n+    \/\/ The logic here is that we trust the used counter - its an atomic counter and whatever we see\n+    \/\/ must have been the truth once - and from that we reconstruct a likely set of committed\/reserved\n+    \/\/ values.\n+    metaspace::InternalStats::inc_num_inconsistent_stats();\n+    if (c < u) {\n+      c = align_up(u, Metaspace::commit_alignment());\n+    }\n+    if (r < c) {\n+      r = align_up(c, Metaspace::reserve_alignment());\n+    }\n+  }\n+  return MetaspaceStats(r, c, u);\n+}\n+\n+MetaspaceCombinedStats MetaspaceUtils::get_combined_statistics() {\n+  return MetaspaceCombinedStats(get_statistics(Metaspace::ClassType), get_statistics(Metaspace::NonClassType));\n+}\n+\n+void MetaspaceUtils::print_metaspace_change(const MetaspaceCombinedStats& pre_meta_values) {\n+  \/\/ Get values now:\n+  const MetaspaceCombinedStats meta_values = get_combined_statistics();\n@@ -153,1 +212,1 @@\n-\n+  MetaspaceCombinedStats stats = get_combined_statistics();\n@@ -158,3 +217,3 @@\n-                used_bytes()\/K,\n-                committed_bytes()\/K,\n-                reserved_bytes()\/K);\n+                stats.used()\/K,\n+                stats.committed()\/K,\n+                stats.reserved()\/K);\n@@ -163,1 +222,0 @@\n-    const Metaspace::MetadataType ct = Metaspace::ClassType;\n@@ -168,3 +226,3 @@\n-                  used_bytes(ct)\/K,\n-                  committed_bytes(ct)\/K,\n-                  reserved_bytes(ct)\/K);\n+                  stats.class_space_stats().used()\/K,\n+                  stats.class_space_stats().committed()\/K,\n+                  stats.class_space_stats().reserved()\/K);\n@@ -875,1 +933,0 @@\n-  \/\/ TODO: this exception text may be wrong and misleading. This needs more thinking. See JDK-8252189.\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":69,"deletions":12,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2017, 2021 SAP SE. All rights reserved.\n@@ -39,4 +40,0 @@\n-namespace metaspace {\n-  class MetaspaceSizesSnapshot;\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -97,0 +97,3 @@\n+                                                    \\\n+  \/* Number of times we read inconsistent stats. *\/ \\\n+  x(num_inconsistent_stats)                         \\\n","filename":"src\/hotspot\/share\/memory\/metaspace\/internalStats.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, Twitter, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/metaspace.hpp\"\n-#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n-#include \"memory\/metaspaceUtils.hpp\"\n-\n-namespace metaspace {\n-\n-MetaspaceSizesSnapshot::MetaspaceSizesSnapshot() :\n-  _used(MetaspaceUtils::used_bytes()),\n-  _committed(MetaspaceUtils::committed_bytes()),\n-  _non_class_used(MetaspaceUtils::used_bytes(Metaspace::NonClassType)),\n-  _non_class_committed(MetaspaceUtils::committed_bytes(Metaspace::NonClassType)),\n-  _class_used(MetaspaceUtils::used_bytes(Metaspace::ClassType)),\n-  _class_committed(MetaspaceUtils::committed_bytes(Metaspace::ClassType))\n-{}\n-\n-} \/\/ namespace metaspace\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSizesSnapshot.cpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, Twitter, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n-#define SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n-\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-namespace metaspace {\n-\n-\/\/ Todo: clean up after jep387, see JDK-8251392\n-class MetaspaceSizesSnapshot {\n-public:\n-  MetaspaceSizesSnapshot();\n-\n-  size_t used() const { return _used; }\n-  size_t committed() const { return _committed; }\n-  size_t non_class_used() const { return _non_class_used; }\n-  size_t non_class_committed() const { return _non_class_committed; }\n-  size_t class_used() const { return _class_used; }\n-  size_t class_committed() const { return _class_committed; }\n-\n-private:\n-  const size_t _used;\n-  const size_t _committed;\n-  const size_t _non_class_used;\n-  const size_t _non_class_committed;\n-  const size_t _class_used;\n-  const size_t _class_committed;\n-};\n-\n-} \/\/ namespace metaspace\n-\n-#endif \/\/ SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSizesSnapshot.hpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -34,1 +35,1 @@\n-class MetaspacePerfCounters: public CHeapObj<mtMetaspace> {\n+class MetaspacePerfCounters {\n@@ -51,1 +52,4 @@\n-  MetaspacePerfCounters(const char* ns, size_t min_capacity, size_t curr_capacity, size_t max_capacity, size_t used) {\n+  MetaspacePerfCounters() : _capacity(NULL), _used(NULL), _max_capacity(NULL) {}\n+\n+  void initialize(const char* ns) {\n+    assert(_capacity == NULL, \"Only initialize once\");\n@@ -55,4 +59,4 @@\n-    create_constant(ns, \"minCapacity\", min_capacity, THREAD);\n-    _capacity = create_variable(ns, \"capacity\", curr_capacity, THREAD);\n-    _max_capacity = create_variable(ns, \"maxCapacity\", max_capacity, THREAD);\n-    _used = create_variable(ns, \"used\", used, THREAD);\n+    create_constant(ns, \"minCapacity\", 0, THREAD); \/\/ min_capacity makes little sense in the context of metaspace\n+    _capacity = create_variable(ns, \"capacity\", 0, THREAD);\n+    _max_capacity = create_variable(ns, \"maxCapacity\", 0, THREAD);\n+    _used = create_variable(ns, \"used\", 0, THREAD);\n@@ -61,4 +65,4 @@\n-  void update(size_t capacity, size_t max_capacity, size_t used) {\n-    _capacity->set_value(capacity);\n-    _max_capacity->set_value(max_capacity);\n-    _used->set_value(used);\n+  void update(const MetaspaceStats& stats) {\n+    _capacity->set_value(stats.committed());\n+    _max_capacity->set_value(stats.reserved());\n+    _used->set_value(stats.used());\n@@ -68,13 +72,2 @@\n-MetaspacePerfCounters* MetaspaceCounters::_perf_counters = NULL;\n-\n-size_t MetaspaceCounters::used() {\n-  return MetaspaceUtils::used_bytes();\n-}\n-\n-size_t MetaspaceCounters::capacity() {\n-  return MetaspaceUtils::committed_bytes();\n-}\n-\n-size_t MetaspaceCounters::max_capacity() {\n-  return MetaspaceUtils::reserved_bytes();\n-}\n+static MetaspacePerfCounters g_meta_space_perf_counters; \/\/ class + nonclass\n+static MetaspacePerfCounters g_class_space_perf_counters;\n@@ -84,5 +77,3 @@\n-    assert(_perf_counters == NULL, \"Should only be initialized once\");\n-\n-    size_t min_capacity = 0;\n-    _perf_counters = new MetaspacePerfCounters(\"metaspace\", min_capacity,\n-                                               capacity(), max_capacity(), used());\n+    g_meta_space_perf_counters.initialize(\"metaspace\");\n+    g_class_space_perf_counters.initialize(\"compressedclassspace\");\n+    update_performance_counters();\n@@ -94,40 +85,2 @@\n-    assert(_perf_counters != NULL, \"Should be initialized\");\n-\n-    _perf_counters->update(capacity(), max_capacity(), used());\n-  }\n-}\n-\n-MetaspacePerfCounters* CompressedClassSpaceCounters::_perf_counters = NULL;\n-\n-size_t CompressedClassSpaceCounters::used() {\n-  return MetaspaceUtils::used_bytes(Metaspace::ClassType);\n-}\n-\n-size_t CompressedClassSpaceCounters::capacity() {\n-  return MetaspaceUtils::committed_bytes(Metaspace::ClassType);\n-}\n-\n-size_t CompressedClassSpaceCounters::max_capacity() {\n-  return MetaspaceUtils::reserved_bytes(Metaspace::ClassType);\n-}\n-\n-void CompressedClassSpaceCounters::update_performance_counters() {\n-  if (UsePerfData && UseCompressedClassPointers) {\n-    assert(_perf_counters != NULL, \"Should be initialized\");\n-\n-    _perf_counters->update(capacity(), max_capacity(), used());\n-  }\n-}\n-\n-void CompressedClassSpaceCounters::initialize_performance_counters() {\n-  if (UsePerfData) {\n-    assert(_perf_counters == NULL, \"Should only be initialized once\");\n-    const char* ns = \"compressedclassspace\";\n-\n-    if (UseCompressedClassPointers) {\n-      size_t min_capacity = 0;\n-      _perf_counters = new MetaspacePerfCounters(ns, min_capacity, capacity(),\n-                                                 max_capacity(), used());\n-    } else {\n-      _perf_counters = new MetaspacePerfCounters(ns, 0, 0, 0, 0);\n-    }\n+    g_meta_space_perf_counters.update(MetaspaceUtils::get_combined_statistics());\n+    g_class_space_perf_counters.update(MetaspaceUtils::get_statistics(Metaspace::ClassType));\n","filename":"src\/hotspot\/share\/memory\/metaspaceCounters.cpp","additions":21,"deletions":68,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n@@ -30,1 +31,1 @@\n-class MetaspacePerfCounters;\n+\/\/ Perf Counters for Metaspace\n@@ -32,1 +33,0 @@\n-\/\/ Todo: clean up after jep387, see JDK-8251392\n@@ -34,16 +34,0 @@\n-  static MetaspacePerfCounters* _perf_counters;\n-  static size_t used();\n-  static size_t capacity();\n-  static size_t max_capacity();\n-\n- public:\n-  static void initialize_performance_counters();\n-  static void update_performance_counters();\n-};\n-\n-class CompressedClassSpaceCounters: public AllStatic {\n-  static MetaspacePerfCounters* _perf_counters;\n-  static size_t used();\n-  static size_t capacity();\n-  static size_t max_capacity();\n-\n","filename":"src\/hotspot\/share\/memory\/metaspaceCounters.hpp","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_MEMORY_METASPACESTATS_HPP\n+#define SHARE_MEMORY_METASPACESTATS_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/\/ Data holder classes for metaspace statistics.\n+\/\/\n+\/\/ - MetaspaceStats: keeps reserved, committed and used byte counters;\n+\/\/                   retrieve with MetaspaceUtils::get_statistics(MetadataType) for either class space\n+\/\/                   or non-class space\n+\/\/\n+\/\/ - MetaspaceCombinedStats: keeps reserved, committed and used byte counters, seperately for both class- and non-class-space;\n+\/\/                      retrieve with MetaspaceUtils::get_combined_statistics()\n+\n+\/\/ (Note: just for NMT these objects need to be mutable)\n+\n+class MetaspaceStats {\n+  size_t _reserved;\n+  size_t _committed;\n+  size_t _used;\n+public:\n+  MetaspaceStats() : _reserved(0), _committed(0), _used(0) {}\n+  MetaspaceStats(size_t r, size_t c, size_t u) : _reserved(r), _committed(c), _used(u) {}\n+  size_t used() const       { return _used; }\n+  size_t committed() const  { return _committed; }\n+  size_t reserved() const   { return _reserved; }\n+};\n+\n+\/\/ Class holds combined statistics for both non-class and class space.\n+class MetaspaceCombinedStats : public MetaspaceStats {\n+  MetaspaceStats _cstats;  \/\/ class space stats\n+  MetaspaceStats _ncstats; \/\/ non-class space stats\n+public:\n+  MetaspaceCombinedStats() {}\n+  MetaspaceCombinedStats(const MetaspaceStats& cstats, const MetaspaceStats& ncstats) :\n+    MetaspaceStats(cstats.reserved() + ncstats.reserved(),\n+                   cstats.committed() + ncstats.committed(),\n+                   cstats.used() + ncstats.used()),\n+    _cstats(cstats), _ncstats(ncstats)\n+  {}\n+\n+  const MetaspaceStats& class_space_stats() const { return _cstats; }\n+  const MetaspaceStats& non_class_space_stats() const { return _ncstats; }\n+  size_t class_used() const       { return _cstats.used(); }\n+  size_t class_committed() const  { return _cstats.committed(); }\n+  size_t class_reserved() const   { return _cstats.reserved(); }\n+  size_t non_class_used() const       { return _ncstats.used(); }\n+  size_t non_class_committed() const  { return _ncstats.committed(); }\n+  size_t non_class_reserved() const   { return _ncstats.reserved(); }\n+};\n+\n+#endif \/\/ SHARE_MEMORY_METASPACESTATS_HPP\n","filename":"src\/hotspot\/share\/memory\/metaspaceStats.hpp","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n@@ -29,0 +30,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -118,0 +120,4 @@\n+  \/\/ Retrieve all statistics in one go; make sure the values are consistent.\n+  static MetaspaceStats get_statistics(Metaspace::MetadataType mdtype);\n+  static MetaspaceCombinedStats get_combined_statistics();\n+\n@@ -124,1 +130,1 @@\n-  static void print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values);\n+  static void print_metaspace_change(const MetaspaceCombinedStats& pre_meta_values);\n","filename":"src\/hotspot\/share\/memory\/metaspaceUtils.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -754,1 +754,0 @@\n-  CompressedClassSpaceCounters::initialize_performance_counters();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -150,1 +151,1 @@\n-  MetaspaceSnapshot::snapshot(_metaspace_snapshot);\n+  _metaspace_stats = MetaspaceUtils::get_combined_statistics();\n","filename":"src\/hotspot\/share\/services\/memBaseline.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -64,1 +65,1 @@\n-  MetaspaceSnapshot      _metaspace_snapshot;\n+  MetaspaceCombinedStats _metaspace_stats;\n@@ -104,2 +105,2 @@\n-  MetaspaceSnapshot* metaspace_snapshot() {\n-    return &_metaspace_snapshot;\n+  const MetaspaceCombinedStats& metaspace_stats() const {\n+    return _metaspace_stats;\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -226,2 +226,1 @@\n-  size_t committed   = MetaspaceUtils::committed_bytes(type);\n-  size_t used = MetaspaceUtils::used_bytes(type);\n+  const MetaspaceStats stats = MetaspaceUtils::get_statistics(type);\n@@ -229,6 +228,2 @@\n-  \/\/ The answer to \"what is free\" in metaspace is complex and cannot be answered with a single number.\n-  \/\/ Free as in available to all loaders? Free, pinned to one loader? For now, keep it simple.\n-  size_t free = committed - used;\n-\n-  assert(committed >= used + free, \"Sanity\");\n-  size_t waste = committed - (used + free);\n+  size_t waste = stats.committed() - stats.used();\n+  float waste_percentage = stats.committed() > 0 ? (((float)waste * 100)\/stats.committed()) : 0.0f;\n@@ -238,1 +233,1 @@\n-  print_total(MetaspaceUtils::reserved_bytes(type), committed);\n+  print_total(stats.reserved(), stats.committed());\n@@ -240,2 +235,1 @@\n-  out->print_cr(\"%27s (    used=\" SIZE_FORMAT \"%s)\", \" \", amount_in_current_scale(used), scale);\n-  out->print_cr(\"%27s (    free=\" SIZE_FORMAT \"%s)\", \" \", amount_in_current_scale(free), scale);\n+  out->print_cr(\"%27s (    used=\" SIZE_FORMAT \"%s)\", \" \", amount_in_current_scale(stats.used()), scale);\n@@ -243,1 +237,1 @@\n-    scale, ((float)waste * 100)\/committed);\n+    scale, waste_percentage);\n@@ -411,1 +405,1 @@\n-      _early_baseline.metaspace_snapshot(),\n+      _early_baseline.metaspace_stats(),\n@@ -414,1 +408,1 @@\n-      _current_baseline.metaspace_snapshot());\n+      _current_baseline.metaspace_stats());\n@@ -477,1 +471,1 @@\n-  const MetaspaceSnapshot* early_ms,\n+  const MetaspaceCombinedStats& early_ms,\n@@ -479,1 +473,1 @@\n-  const MetaspaceSnapshot* current_ms) const {\n+  const MetaspaceCombinedStats& current_ms) const {\n@@ -618,1 +612,0 @@\n-      assert(current_ms != NULL && early_ms != NULL, \"Sanity\");\n@@ -625,3 +618,3 @@\n-void MemSummaryDiffReporter::print_metaspace_diff(const MetaspaceSnapshot* current_ms,\n-                                                  const MetaspaceSnapshot* early_ms) const {\n-  print_metaspace_diff(Metaspace::NonClassType, current_ms, early_ms);\n+void MemSummaryDiffReporter::print_metaspace_diff(const MetaspaceCombinedStats& current_ms,\n+                                                  const MetaspaceCombinedStats& early_ms) const {\n+  print_metaspace_diff(\"Metadata\", current_ms.non_class_space_stats(), early_ms.non_class_space_stats());\n@@ -629,1 +622,1 @@\n-    print_metaspace_diff(Metaspace::ClassType, current_ms, early_ms);\n+    print_metaspace_diff(\"Class space\", current_ms.class_space_stats(), early_ms.class_space_stats());\n@@ -633,6 +626,3 @@\n-void MemSummaryDiffReporter::print_metaspace_diff(Metaspace::MetadataType type,\n-                                                  const MetaspaceSnapshot* current_ms,\n-                                                  const MetaspaceSnapshot* early_ms) const {\n-  const char* name = (type == Metaspace::NonClassType) ?\n-    \"Metadata:   \" : \"Class space:\";\n-\n+void MemSummaryDiffReporter::print_metaspace_diff(const char* header,\n+                                                  const MetaspaceStats& current_stats,\n+                                                  const MetaspaceStats& early_stats) const {\n@@ -642,1 +632,1 @@\n-  out->print_cr(\"%27s (  %s)\", \" \", name);\n+  out->print_cr(\"%27s: (  %s)\", \" \", header);\n@@ -644,4 +634,4 @@\n-  print_virtual_memory_diff(current_ms->reserved_in_bytes(type),\n-                            current_ms->committed_in_bytes(type),\n-                            early_ms->reserved_in_bytes(type),\n-                            early_ms->committed_in_bytes(type));\n+  print_virtual_memory_diff(current_stats.reserved(),\n+                            current_stats.committed(),\n+                            early_stats.reserved(),\n+                            early_stats.committed());\n@@ -650,4 +640,2 @@\n-  long diff_used = diff_in_current_scale(current_ms->used_in_bytes(type),\n-                                         early_ms->used_in_bytes(type));\n-  long diff_free = diff_in_current_scale(current_ms->free_in_bytes(type),\n-                                         early_ms->free_in_bytes(type));\n+  long diff_used = diff_in_current_scale(current_stats.used(),\n+                                         early_stats.used());\n@@ -655,4 +643,2 @@\n-  size_t current_waste = current_ms->committed_in_bytes(type)\n-    - (current_ms->used_in_bytes(type) + current_ms->free_in_bytes(type));\n-  size_t early_waste = early_ms->committed_in_bytes(type)\n-    - (early_ms->used_in_bytes(type) + early_ms->free_in_bytes(type));\n+  size_t current_waste = current_stats.committed() - current_stats.used();\n+  size_t early_waste = early_stats.committed() - early_stats.used();\n@@ -663,1 +649,1 @@\n-    amount_in_current_scale(current_ms->used_in_bytes(type)), scale);\n+    amount_in_current_scale(current_stats.used()), scale);\n@@ -669,9 +655,0 @@\n-  \/\/ Diff free\n-  out->print(\"%27s (    free=\" SIZE_FORMAT \"%s\", \" \",\n-    amount_in_current_scale(current_ms->free_in_bytes(type)), scale);\n-  if (diff_free != 0) {\n-    out->print(\" %+ld%s\", diff_free, scale);\n-  }\n-  out->print_cr(\")\");\n-\n-\n@@ -679,0 +656,2 @@\n+  const float waste_percentage = current_stats.committed() == 0 ? 0.0f :\n+                                 (current_waste * 100.0f) \/ current_stats.committed();\n@@ -680,2 +659,1 @@\n-    amount_in_current_scale(current_waste), scale,\n-    ((float)current_waste * 100) \/ current_ms->committed_in_bytes(type));\n+    amount_in_current_scale(current_waste), scale, waste_percentage);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":30,"deletions":52,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-    const MetaspaceSnapshot* early_ms,\n+    const MetaspaceCombinedStats& early_ms,\n@@ -185,1 +185,1 @@\n-    const MetaspaceSnapshot* current_ms) const;\n+    const MetaspaceCombinedStats& current_ms) const;\n@@ -195,4 +195,5 @@\n-  void print_metaspace_diff(const MetaspaceSnapshot* current_ms,\n-                            const MetaspaceSnapshot* early_ms) const;\n-  void print_metaspace_diff(Metaspace::MetadataType type,\n-    const MetaspaceSnapshot* current_ms, const MetaspaceSnapshot* early_ms) const;\n+  void print_metaspace_diff(const MetaspaceCombinedStats& current_ms,\n+                            const MetaspaceCombinedStats& early_ms) const;\n+  void print_metaspace_diff(const char* header,\n+                            const MetaspaceStats& current_ms,\n+                            const MetaspaceStats& early_ms) const;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-  size_t committed = MetaspaceUtils::committed_bytes();\n-  return MemoryUsage(initial_size(), used_in_bytes(), committed, max_size());\n+  MetaspaceCombinedStats stats = MetaspaceUtils::get_combined_statistics();\n+  return MemoryUsage(initial_size(), stats.used(), stats.committed(), max_size());\n@@ -212,2 +212,2 @@\n-  size_t committed = MetaspaceUtils::committed_bytes(Metaspace::ClassType);\n-  return MemoryUsage(initial_size(), used_in_bytes(), committed, max_size());\n+  MetaspaceStats stats = MetaspaceUtils::get_statistics(Metaspace::ClassType);\n+  return MemoryUsage(initial_size(), stats.used(), stats.committed(), max_size());\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"memory\/metaspace.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -696,31 +696,0 @@\n-\n-\/\/ Metaspace Support\n-MetaspaceSnapshot::MetaspaceSnapshot() {\n-  for (int index = (int)Metaspace::ClassType; index < (int)Metaspace::MetadataTypeCount; index ++) {\n-    Metaspace::MetadataType type = (Metaspace::MetadataType)index;\n-    assert_valid_metadata_type(type);\n-    _reserved_in_bytes[type]  = 0;\n-    _committed_in_bytes[type] = 0;\n-    _used_in_bytes[type]      = 0;\n-    _free_in_bytes[type]      = 0;\n-  }\n-}\n-\n-void MetaspaceSnapshot::snapshot(Metaspace::MetadataType type, MetaspaceSnapshot& mss) {\n-  assert_valid_metadata_type(type);\n-\n-  mss._reserved_in_bytes[type]   = MetaspaceUtils::reserved_bytes(type);\n-  mss._committed_in_bytes[type]  = MetaspaceUtils::committed_bytes(type);\n-  mss._used_in_bytes[type]       = MetaspaceUtils::used_bytes(type);\n-\n-  \/\/ The answer to \"what is free\" in metaspace is complex and cannot be answered with a single number.\n-  \/\/ Free as in available to all loaders? Free, pinned to one loader? For now, keep it simple.\n-  mss._free_in_bytes[type] = mss._committed_in_bytes[type] - mss._used_in_bytes[type];\n-}\n-\n-void MetaspaceSnapshot::snapshot(MetaspaceSnapshot& mss) {\n-  snapshot(Metaspace::NonClassType, mss);\n-  if (Metaspace::using_class_space()) {\n-    snapshot(Metaspace::ClassType, mss);\n-  }\n-}\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspace.hpp\" \/\/ For MetadataType\n+#include \"memory\/metaspaceStats.hpp\"\n@@ -401,26 +402,0 @@\n-\/\/ Todo: clean up after jep387, see JDK-8251392\n-class MetaspaceSnapshot : public ResourceObj {\n-private:\n-  size_t  _reserved_in_bytes[Metaspace::MetadataTypeCount];\n-  size_t  _committed_in_bytes[Metaspace::MetadataTypeCount];\n-  size_t  _used_in_bytes[Metaspace::MetadataTypeCount];\n-  size_t  _free_in_bytes[Metaspace::MetadataTypeCount];\n-\n-public:\n-  MetaspaceSnapshot();\n-  size_t reserved_in_bytes(Metaspace::MetadataType type)   const { assert_valid_metadata_type(type); return _reserved_in_bytes[type]; }\n-  size_t committed_in_bytes(Metaspace::MetadataType type)  const { assert_valid_metadata_type(type); return _committed_in_bytes[type]; }\n-  size_t used_in_bytes(Metaspace::MetadataType type)       const { assert_valid_metadata_type(type); return _used_in_bytes[type]; }\n-  size_t free_in_bytes(Metaspace::MetadataType type)       const { assert_valid_metadata_type(type); return _free_in_bytes[type]; }\n-\n-  static void snapshot(MetaspaceSnapshot& s);\n-\n-private:\n-  static void snapshot(Metaspace::MetadataType type, MetaspaceSnapshot& s);\n-\n-  static void assert_valid_metadata_type(Metaspace::MetadataType type) {\n-    assert(type == Metaspace::ClassType || type == Metaspace::NonClassType,\n-      \"Invalid metadata type\");\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -91,0 +91,28 @@\n+static void check_metaspace_stats_are_consistent(const MetaspaceStats& stats) {\n+  EXPECT_LT(stats.committed(), stats.reserved());\n+  EXPECT_LT(stats.used(), stats.committed());\n+}\n+\n+static void check_metaspace_stats_are_not_null(const MetaspaceStats& stats) {\n+  EXPECT_GT(stats.reserved(), 0UL);\n+  EXPECT_GT(stats.committed(), 0UL);\n+  EXPECT_GT(stats.used(), 0UL);\n+}\n+\n+TEST_VM(MetaspaceUtils, get_statistics) {\n+  MetaspaceCombinedStats combined_stats = MetaspaceUtils::get_combined_statistics();\n+  check_metaspace_stats_are_not_null(combined_stats);\n+  check_metaspace_stats_are_consistent(combined_stats);\n+  check_metaspace_stats_are_not_null(combined_stats.non_class_space_stats());\n+  check_metaspace_stats_are_consistent(combined_stats.non_class_space_stats());\n+\n+  if (UseCompressedClassPointers) {\n+    check_metaspace_stats_are_not_null(combined_stats.class_space_stats());\n+    check_metaspace_stats_are_consistent(combined_stats.class_space_stats());\n+  } else {\n+    \/\/ if we don't have a class space, combined stats should equal non-class stats\n+    EXPECT_EQ(combined_stats.non_class_space_stats().reserved(), combined_stats.reserved());\n+    EXPECT_EQ(combined_stats.non_class_space_stats().committed(), combined_stats.committed());\n+    EXPECT_EQ(combined_stats.non_class_space_stats().used(), combined_stats.used());\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspaceUtils.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}