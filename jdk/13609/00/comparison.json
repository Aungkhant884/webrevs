{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-PRINTING, or JAVASE.\\n\\\n+PRINTING, TOOLING, or JAVASE.\\n\\\n@@ -334,1 +334,1 @@\n-file names: DEFAULT, PRINTING, or JAVASE.\\n\\\n+file names: DEFAULT, PRINTING, TOOLING, or JAVASE.\\n\\\n@@ -1139,1 +1139,1 @@\n-startup file names: DEFAULT, PRINTING, or JAVASE.\\n\\\n+startup file names: DEFAULT, PRINTING, TOOLING, or JAVASE.\\n\\\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n.properties","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+void jar(String... args) { run(\"jar\", args); }\n+void javac(String... args) { run(\"javac\", args); }\n+void javadoc(String... args) { run(\"javadoc\", args); }\n+void javap(String... args) { run(\"javap\", args); }\n+void jdeps(String... args) { run(\"jdeps\", args); }\n+void jlink(String... args) { run(\"jlink\", args); }\n+void jmod(String... args) { run(\"jmod\", args); }\n+void jpackage(String... args) { run(\"jpackage\", args); }\n+\n+void javap(Class<?> type) throws Exception {\n+    try {\n+        var name = type.getCanonicalName();\n+        if (name == null) throw new IllegalArgumentException(\"Type not supported: \" + type);\n+        if (type == Class.forName(name, false, ClassLoader.getSystemClassLoader())) {\n+            run(\"javap\", \"-c\", \"-v\", \"-s\", name);\n+            return;\n+        }\n+    } catch (ClassNotFoundException ignored) {\n+        \/\/ fall-through\n+    }\n+    var temp = java.nio.file.Files.createTempFile(\"TOOLING-\", \".class\");\n+    try {\n+        var name = type.getName().replace('.', '\/') + \".class\";\n+        try (var in = type.getClassLoader().getResourceAsStream(name);\n+             var out = java.nio.file.Files.newOutputStream(temp)) {\n+            if (in == null) throw new AssertionError(\"Resource not found: \" + name);\n+            in.transferTo(out);\n+        }\n+        run(\"javap\", \"-c\", \"-v\", \"-s\", temp.toString());\n+    } finally {\n+        java.nio.file.Files.delete(temp);\n+    }\n+}\n+\n+void run(String name, String... args) {\n+    var tool = java.util.spi.ToolProvider.findFirst(name);\n+    if (tool.isEmpty()) throw new RuntimeException(\"No such tool found: \" + name);\n+    var code = tool.get().run(System.out, System.err, args);\n+    if (code == 0) return;\n+    System.err.println(name + \" returned non-zero exit code: \" + code);\n+}\n+\n+void tools() {\n+  java.util.ServiceLoader.load(java.util.spi.ToolProvider.class).stream()\n+      .map(java.util.ServiceLoader.Provider::get)\n+      .map(java.util.spi.ToolProvider::name)\n+      .sorted()\n+      .forEach(System.out::println);\n+}\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/tool\/resources\/TOOLING.jsh","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -513,0 +513,20 @@\n+    public void assertCommandUserOutputContains(boolean after, String cmd, String... hasThese) {\n+        assertCommandCheckUserOutput(after, cmd, (s)\n+                -> assertTrue(Arrays.stream(hasThese)\n+                        .allMatch(has -> s.contains(has)),\n+                \"User output: \\'\" + s + \"' does not contain: \"\n+                        + Arrays.stream(hasThese)\n+                        .filter(has -> !s.contains(has))\n+                        .collect(Collectors.joining(\", \"))));\n+    }\n+\n+    public void assertCommandCheckUserOutput(boolean after, String cmd, Consumer<String> check) {\n+        if (!after) {\n+            assertCommand(false, cmd, null);\n+        } else {\n+            String got = getUserOutput();\n+            check.accept(got);\n+            assertCommand(true, cmd, null);\n+        }\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        test(new String[]{\"--startup\", \"DEFAULT\", \"--startup\", \"PRINTING\"},\n+        test(new String[]{\"--startup\", \"DEFAULT\", \"--startup\", \"PRINTING\", \"--startup\", \"TOOLING\"},\n@@ -76,1 +76,1 @@\n-                        \"System.out.println\", \"import java.util.concurrent\")\n+                        \"System.out.println\", \"import java.util.concurrent\", \"tools()\")\n","filename":"test\/langtools\/jdk\/jshell\/ToolLocalSimpleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- *      8239536 8247456 8246774 8238173 8292625\n+ *      8239536 8247456 8246774 8238173 8292625 8306560\n@@ -752,1 +752,1 @@\n-                          \"--startup\", \"DEFAULT\", \"--startup\", \"PRINTING\"},\n+                          \"--startup\", \"DEFAULT\", \"--startup\", \"PRINTING\", \"--startup\", \"TOOLING\"},\n@@ -754,1 +754,3 @@\n-                        \"\", \"\", null, \"3.14\", \"\")\n+                        \"\", \"\", null, \"3.14\", \"\"),\n+                (a) -> assertCommand(a, \"jar(\\\"--version\\\")\",\n+                        \"\", \"\", null, \"jar \" + System.getProperty(\"java.version\") + \"\\n\", \"\")\n","filename":"test\/langtools\/jdk\/jshell\/ToolSimpleTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8306560\n+ * @summary Tests for snippets and methods defined in TOOLING.jsh\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ *          jdk.jshell\/jdk.internal.jshell.tool\n+ * @build KullaTesting TestingInputStream\n+ * @run testng ToolingTest\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class ToolingTest extends ReplToolTesting {\n+    @Test\n+    public void testListToolingSnippets() {\n+        test(\n+                a -> assertCommand(a, \"\/open TOOLING\",\n+                        \"\"),\n+                a -> assertCommandOutputContains(a, \"\/list\",\n+                        \/\/ Tool methods\n+                        \"void jar(String... args)\",\n+                        \/\/ ...\n+                        \"void jpackage(String... args)\",\n+                        \/\/ Utility methods\n+                        \"void javap(Class<?> type) throws Exception\",\n+                        \"void run(String name, String... args)\",\n+                        \"void tools()\")\n+        );\n+    }\n+\n+    @Test\n+    public void testDisassembleJavaLangObjectClass() {\n+        test(\n+                a -> assertCommand(a, \"\/open TOOLING\",\n+                        \"\"),\n+                a -> assertCommandUserOutputContains(a, \"javap(Object.class)\",\n+                        \"Classfile jrt:\/java.base\/java\/lang\/Object.class\",\n+                        \"SourceFile: \\\"Object.java\\\"\")\n+        );\n+    }\n+\n+    @Test\n+    public void testDisassembleNewRecordClass() {\n+        test(\n+                a -> assertCommand(a, \"record Point(int x, int y) {}\",\n+                        \"|  created record Point\"),\n+                a -> assertCommand(a, \"\/open TOOLING\",\n+                        \"\"),\n+                a -> assertCommandUserOutputContains(a, \"javap(Point.class)\",\n+                        \"Classfile \", \/\/ Classfile \/...\/TOOLING-13366652659767559204.class\n+                        \"Point extends java.lang.Record\", \/\/ public final class REPL.$JShell$11$Point extends java.lang.Record\n+                        \"SourceFile: \\\"$JShell$\" \/\/ SourceFile: \"$JShell$11.java\"\n+                )\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/ToolingTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}