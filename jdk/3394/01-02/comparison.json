{"files":[{"patch":"@@ -168,2 +168,1 @@\n-static bool caller_is_deopted() {\n-  JavaThread* current = JavaThread::current();\n+static bool caller_is_deopted(JavaThread* current) {\n@@ -178,3 +177,2 @@\n-static void deopt_caller() {\n-  if ( !caller_is_deopted()) {\n-    JavaThread* current = JavaThread::current();\n+static void deopt_caller(JavaThread* current) {\n+  if ( !caller_is_deopted(current)) {\n@@ -185,1 +183,1 @@\n-    assert(caller_is_deopted(), \"Must be deoptimized\");\n+    assert(caller_is_deopted(current), \"Must be deoptimized\");\n@@ -384,1 +382,1 @@\n-    deopt_caller();\n+    deopt_caller(current);\n@@ -404,1 +402,1 @@\n-    deopt_caller();\n+    deopt_caller(current);\n@@ -572,1 +570,1 @@\n-    assert(caller_is_deopted(), \"Must be deoptimized\");\n+    assert(caller_is_deopted(current), \"Must be deoptimized\");\n@@ -653,1 +651,1 @@\n-  if (nm != NULL && caller_is_deopted()) {\n+  if (nm != NULL && caller_is_deopted(current)) {\n@@ -695,1 +693,1 @@\n-char* message = SharedRuntime::generate_class_cast_message(current, object->klass());\n+  char* message = SharedRuntime::generate_class_cast_message(current, object->klass());\n@@ -1045,1 +1043,1 @@\n-    if (!caller_is_deopted()) {\n+    if (!caller_is_deopted(current)) {\n@@ -1289,1 +1287,1 @@\n-  postcond(caller_is_deopted());\n+  postcond(caller_is_deopted(current));\n@@ -1316,1 +1314,1 @@\n-  return caller_is_deopted();\n+  return caller_is_deopted(current);\n@@ -1333,1 +1331,1 @@\n-  return caller_is_deopted();\n+  return caller_is_deopted(current);\n@@ -1350,1 +1348,1 @@\n-  return caller_is_deopted();\n+  return caller_is_deopted(current);\n@@ -1377,1 +1375,1 @@\n-  return caller_is_deopted();\n+  return caller_is_deopted(current);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-void InterpreterRuntime::set_bcp_and_mdp(address bcp, JavaThread *current) {\n+void InterpreterRuntime::set_bcp_and_mdp(address bcp, JavaThread* current) {\n@@ -303,1 +303,1 @@\n-  \/\/ current quicken the bytecode before we get here.\n+  \/\/ thread quicken the bytecode before we get here.\n@@ -1157,1 +1157,1 @@\n-JRT_ENTRY(void, InterpreterRuntime::post_field_access(JavaThread *current, oopDesc* obj,\n+JRT_ENTRY(void, InterpreterRuntime::post_field_access(JavaThread* current, oopDesc* obj,\n@@ -1237,1 +1237,1 @@\n-JRT_ENTRY(void, InterpreterRuntime::post_method_entry(JavaThread *current))\n+JRT_ENTRY(void, InterpreterRuntime::post_method_entry(JavaThread* current))\n@@ -1246,1 +1246,1 @@\n-JRT_BLOCK_ENTRY(void, InterpreterRuntime::post_method_exit(JavaThread *current))\n+JRT_BLOCK_ENTRY(void, InterpreterRuntime::post_method_exit(JavaThread* current))\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-JRT_BLOCK_ENTRY(void, CompilerRuntime::resolve_string_by_symbol(JavaThread *thread, void* string_result, const char* name))\n+JRT_BLOCK_ENTRY(void, CompilerRuntime::resolve_string_by_symbol(JavaThread* current, void* string_result, const char* name))\n@@ -57,1 +57,1 @@\n-    thread->set_vm_result(str);\n+    current->set_vm_result(str);\n@@ -63,2 +63,3 @@\n-Klass* CompilerRuntime::resolve_klass_helper(JavaThread *thread, const char* name, int len, TRAPS) {\n-  ResourceMark rm(THREAD);\n+Klass* CompilerRuntime::resolve_klass_helper(const char* name, int len, TRAPS) {\n+  JavaThread* current = THREAD->as_Java_thread();\n+  ResourceMark rm(current);\n@@ -66,1 +67,1 @@\n-  RegisterMap cbl_map(thread, false);\n+  RegisterMap cbl_map(current, false);\n@@ -68,1 +69,1 @@\n-  frame caller_frame = thread->last_frame().sender(&cbl_map);\n+  frame caller_frame = current->last_frame().sender(&cbl_map);\n@@ -72,1 +73,1 @@\n-  methodHandle caller(THREAD, caller_nm->method());\n+  methodHandle caller(current, caller_nm->method());\n@@ -75,2 +76,2 @@\n-  Handle loader(THREAD, caller->method_holder()->class_loader());\n-  Handle protection_domain(THREAD, caller->method_holder()->protection_domain());\n+  Handle loader(current, caller->method_holder()->class_loader());\n+  Handle protection_domain(current, caller->method_holder()->protection_domain());\n@@ -92,1 +93,1 @@\n-JRT_BLOCK_ENTRY(Klass*, CompilerRuntime::resolve_klass_by_symbol(JavaThread *thread, Klass** klass_result, const char* name))\n+JRT_BLOCK_ENTRY(Klass*, CompilerRuntime::resolve_klass_by_symbol(JavaThread* current, Klass** klass_result, const char* name))\n@@ -100,1 +101,1 @@\n-      k = CompilerRuntime::resolve_klass_helper(thread, name, len, CHECK_NULL);\n+      k = CompilerRuntime::resolve_klass_helper(name, len, CHECK_NULL);\n@@ -110,1 +111,1 @@\n-                                                               const char* signature_name, int signature_name_len) {\n+                                               const char* signature_name, int signature_name_len) {\n@@ -131,1 +132,1 @@\n-JRT_BLOCK_ENTRY(void, CompilerRuntime::resolve_dynamic_invoke(JavaThread *thread, oop* appendix_result))\n+JRT_BLOCK_ENTRY(void, CompilerRuntime::resolve_dynamic_invoke(JavaThread* current, oop* appendix_result))\n@@ -134,2 +135,2 @@\n-    ResourceMark rm(THREAD);\n-    vframeStream vfst(thread, true);  \/\/ Do not skip and javaCalls\n+    ResourceMark rm(current);\n+    vframeStream vfst(current, true);  \/\/ Do not skip and javaCalls\n@@ -137,1 +138,1 @@\n-    methodHandle caller(THREAD, vfst.method());\n+    methodHandle caller(current, vfst.method());\n@@ -145,1 +146,1 @@\n-    constantPoolHandle cp(THREAD, holder->constants());\n+    constantPoolHandle cp(current, holder->constants());\n@@ -158,1 +159,1 @@\n-    Handle appendix(THREAD, cp_cache_entry->appendix_if_resolved(cp));\n+    Handle appendix(current, cp_cache_entry->appendix_if_resolved(cp));\n@@ -161,1 +162,1 @@\n-    methodHandle adapter_method(THREAD, cp_cache_entry->f1_as_method());\n+    methodHandle adapter_method(current, cp_cache_entry->f1_as_method());\n@@ -182,1 +183,1 @@\n-    thread->set_vm_result(appendix());\n+    current->set_vm_result(appendix());\n@@ -187,1 +188,1 @@\n-JRT_BLOCK_ENTRY(MethodCounters*, CompilerRuntime::resolve_method_by_symbol_and_load_counters(JavaThread *thread, MethodCounters** counters_result, Klass* klass, const char* data))\n+JRT_BLOCK_ENTRY(MethodCounters*, CompilerRuntime::resolve_method_by_symbol_and_load_counters(JavaThread* current, MethodCounters** counters_result, Klass* klass, const char* data))\n@@ -207,1 +208,1 @@\n-       c = m->get_method_counters(thread);\n+       c = m->get_method_counters(current);\n@@ -219,1 +220,1 @@\n-JRT_BLOCK_ENTRY(Klass*, CompilerRuntime::initialize_klass_by_symbol(JavaThread *thread, Klass** klass_result, const char* name))\n+JRT_BLOCK_ENTRY(Klass*, CompilerRuntime::initialize_klass_by_symbol(JavaThread* current, Klass** klass_result, const char* name))\n@@ -229,1 +230,1 @@\n-        k = CompilerRuntime::resolve_klass_helper(thread,  cname, len, CHECK_NULL);\n+        k = CompilerRuntime::resolve_klass_helper(cname, len, CHECK_NULL);\n@@ -250,1 +251,1 @@\n-JRT_BLOCK_ENTRY(void, CompilerRuntime::invocation_event(JavaThread *thread, MethodCounters* counters))\n+JRT_BLOCK_ENTRY(void, CompilerRuntime::invocation_event(JavaThread* current, MethodCounters* counters))\n@@ -252,2 +253,2 @@\n-    methodHandle mh(THREAD, counters->method());\n-    RegisterMap map(thread, false);\n+    methodHandle mh(current, counters->method());\n+    RegisterMap map(current, false);\n@@ -255,1 +256,1 @@\n-    frame fr = thread->last_frame().sender(&map);\n+    frame fr = current->last_frame().sender(&map);\n@@ -258,2 +259,2 @@\n-    methodHandle emh(THREAD, cm->method());\n-    CompilationPolicy::event(emh, mh, InvocationEntryBci, InvocationEntryBci, CompLevel_aot, cm, THREAD);\n+    methodHandle emh(current, cm->method());\n+    CompilationPolicy::event(emh, mh, InvocationEntryBci, InvocationEntryBci, CompLevel_aot, cm, CHECK);\n@@ -263,1 +264,1 @@\n-JRT_BLOCK_ENTRY(void, CompilerRuntime::backedge_event(JavaThread *thread, MethodCounters* counters, int branch_bci, int target_bci))\n+JRT_BLOCK_ENTRY(void, CompilerRuntime::backedge_event(JavaThread* current, MethodCounters* counters, int branch_bci, int target_bci))\n@@ -267,2 +268,2 @@\n-    methodHandle mh(THREAD, counters->method());\n-    RegisterMap map(thread, false);\n+    methodHandle mh(current, counters->method());\n+    RegisterMap map(current, false);\n@@ -271,1 +272,1 @@\n-    frame fr = thread->last_frame().sender(&map);\n+    frame fr = current->last_frame().sender(&map);\n@@ -274,2 +275,2 @@\n-    methodHandle emh(THREAD, cm->method());\n-    nmethod* osr_nm = CompilationPolicy::event(emh, mh, branch_bci, target_bci, CompLevel_aot, cm, THREAD);\n+    methodHandle emh(current, cm->method());\n+    nmethod* osr_nm = CompilationPolicy::event(emh, mh, branch_bci, target_bci, CompLevel_aot, cm, CHECK);\n@@ -277,1 +278,1 @@\n-      Deoptimization::deoptimize_frame(thread, fr.id());\n+      Deoptimization::deoptimize_frame(current, fr.id());\n","filename":"src\/hotspot\/share\/jvmci\/compilerRuntime.cpp","additions":38,"deletions":37,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  static Klass* resolve_klass_helper(JavaThread *thread, const char* name, int len, TRAPS);\n+  static Klass* resolve_klass_helper(const char* name, int len, TRAPS);\n@@ -41,2 +41,2 @@\n-  static void resolve_string_by_symbol(JavaThread *thread, void* string_result, const char* name);\n-  static void resolve_dynamic_invoke(JavaThread *thread, oop* appendix_result);\n+  static void resolve_string_by_symbol(JavaThread* current, void* string_result, const char* name);\n+  static void resolve_dynamic_invoke(JavaThread* current, oop* appendix_result);\n@@ -44,5 +44,5 @@\n-  static Klass* resolve_klass_by_symbol(JavaThread *thread, Klass** klass_result, const char* name);\n-  static Klass* initialize_klass_by_symbol(JavaThread *thread, Klass** klass_result, const char* name);\n-  static MethodCounters* resolve_method_by_symbol_and_load_counters(JavaThread *thread, MethodCounters** counters_result, Klass* klass_hint, const char* data);\n-  static void invocation_event(JavaThread *thread, MethodCounters* counters);\n-  static void backedge_event(JavaThread *thread, MethodCounters* counters, int branch_bci, int target_bci);\n+  static Klass* resolve_klass_by_symbol(JavaThread* current, Klass** klass_result, const char* name);\n+  static Klass* initialize_klass_by_symbol(JavaThread* current, Klass** klass_result, const char* name);\n+  static MethodCounters* resolve_method_by_symbol_and_load_counters(JavaThread* current, MethodCounters** counters_result, Klass* klass_hint, const char* data);\n+  static void invocation_event(JavaThread* current, MethodCounters* counters);\n+  static void backedge_event(JavaThread* current, MethodCounters* counters, int branch_bci, int target_bci);\n","filename":"src\/hotspot\/share\/jvmci\/compilerRuntime.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-JRT_LEAF(jboolean, JVMCIRuntime::object_notify(JavaThread *current, oopDesc* obj))\n+JRT_LEAF(jboolean, JVMCIRuntime::object_notify(JavaThread* current, oopDesc* obj))\n@@ -421,1 +421,1 @@\n-JRT_LEAF(jboolean, JVMCIRuntime::object_notifyAll(JavaThread *current, oopDesc* obj))\n+JRT_LEAF(jboolean, JVMCIRuntime::object_notifyAll(JavaThread* current, oopDesc* obj))\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}