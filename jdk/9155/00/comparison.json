{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,1 +290,0 @@\n-                    connections.add(clientConnection);\n@@ -293,1 +292,0 @@\n-                    Socket targetConnection = null;\n@@ -297,1 +295,1 @@\n-                            clientConnection.getOutputStream(), \"UTF-8\");\n+                            clientConnection.getOutputStream(), UTF_8);\n@@ -304,3 +302,1 @@\n-                    String method = tokenizer.nextToken();\n-                    assert method.equalsIgnoreCase(\"POST\")\n-                            || method.equalsIgnoreCase(\"GET\");\n+                    tokenizer.nextToken(); \/\/ Skip method token as not used\n@@ -308,1 +304,3 @@\n-                    URI uri;\n+\n+                    URI uri = null;\n+                    boolean validURI = true;\n@@ -311,1 +309,1 @@\n-                        uri = new URI((secure ? \"https\" : \"http\") +\":\/\/\" + hostport + path);\n+                        uri = new URI((secure ? \"https\" : \"http\") + \":\/\/\" + hostport + path);\n@@ -315,11 +313,1 @@\n-                        clientConnection.close();\n-                        continue;\n-                    }\n-\n-                    \/\/ Read all headers until we find the empty line that\n-                    \/\/ signals the end of all headers.\n-                    String line = requestLine;\n-                    while (!line.equals(\"\")) {\n-                        System.out.println(now() + getName() + \": Reading header: \"\n-                                + (line = readLine(ccis)));\n-                        headers.append(line).append(\"\\r\\n\");\n+                        validURI = false;\n@@ -328,15 +316,50 @@\n-                    StringBuilder response = new StringBuilder();\n-\n-                    int index = headers.toString()\n-                            .toLowerCase(Locale.US)\n-                            .indexOf(\"content-length: \");\n-                    byte[] b = uri.toString().getBytes(UTF_8);\n-                    if (index >= 0) {\n-                        index = index + \"content-length: \".length();\n-                        String cl = headers.toString().substring(index);\n-                        StringTokenizer tk = new StringTokenizer(cl);\n-                        int len = Integer.parseInt(tk.nextToken());\n-                        assert len < b.length * 2;\n-                        System.out.println(now() + getName()\n-                                + \": received body: \"\n-                                + new String(ccis.readNBytes(len), UTF_8));\n+                    \/\/ Proceed if URI is well-formed and the request path is as expected\n+                    if (validURI && path.contains(\"\/dummy\/x\")) {\n+                        connections.add(clientConnection);\n+\n+                        \/\/ Read all headers until we find the empty line that\n+                        \/\/ signals the end of all headers.\n+                        String line = requestLine;\n+                        while (!line.equals(\"\")) {\n+                            System.out.println(now() + getName() + \": Reading header: \"\n+                                    + (line = readLine(ccis)));\n+                            headers.append(line).append(\"\\r\\n\");\n+                        }\n+\n+                        StringBuilder response = new StringBuilder();\n+\n+                        int index = headers.toString()\n+                                .toLowerCase(Locale.US)\n+                                .indexOf(\"content-length: \");\n+                        byte[] b = uri.toString().getBytes(UTF_8);\n+                        if (index >= 0) {\n+                            index = index + \"content-length: \".length();\n+                            String cl = headers.toString().substring(index);\n+                            StringTokenizer tk = new StringTokenizer(cl);\n+                            int len = Integer.parseInt(tk.nextToken());\n+                            assert len < b.length * 2;\n+                            System.out.println(now() + getName()\n+                                    + \": received body: \"\n+                                    + new String(ccis.readNBytes(len), UTF_8));\n+                        }\n+                        System.out.println(now()\n+                                + getName() + \": sending back \" + uri);\n+\n+                        response.append(\"HTTP\/1.1 200 OK\\r\\nContent-Length: \")\n+                                .append(b.length)\n+                                .append(\"\\r\\n\\r\\n\");\n+\n+                        \/\/ Then send the 200 OK response to the client\n+                        System.out.println(now() + getName() + \": Sending \"\n+                                + response);\n+                        pw.print(response);\n+                        pw.flush();\n+                        ccos.write(b);\n+                        ccos.flush();\n+                        ccos.close();\n+                        connections.remove(clientConnection);\n+                        clientConnection.close();\n+                    } else {\n+                        System.err.println(now() + getName() + \": Invalid request, closing client connection and \" +\n+                                \"waiting for new request. Request: \" + requestLine);\n+                        clientConnection.close();\n@@ -344,17 +367,0 @@\n-                    System.out.println(now()\n-                            + getName() + \": sending back \" + uri);\n-\n-                    response.append(\"HTTP\/1.1 200 OK\\r\\nContent-Length: \")\n-                            .append(b.length)\n-                            .append(\"\\r\\n\\r\\n\");\n-\n-                    \/\/ Then send the 200 OK response to the client\n-                    System.out.println(now() + getName() + \": Sending \"\n-                            + response);\n-                    pw.print(response);\n-                    pw.flush();\n-                    ccos.write(b);\n-                    ccos.flush();\n-                    ccos.close();\n-                    connections.remove(clientConnection);\n-                    clientConnection.close();\n","filename":"test\/jdk\/java\/net\/httpclient\/ServerCloseTest.java","additions":58,"deletions":52,"binary":false,"changes":110,"status":"modified"}]}