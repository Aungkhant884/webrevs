{"files":[{"patch":"@@ -302,1 +302,7 @@\n-                    tokenizer.nextToken(); \/\/ Skip method token as not used\n+                    String method = tokenizer.nextToken();\n+                    if (!method.equals(\"GET\") && !method.equals(\"POST\")) {\n+                        System.err.println(now() + getName() + \": Unexpected request method. Method: \" + method);\n+                        clientConnection.close();\n+                        continue;\n+                    }\n+\n@@ -304,0 +310,5 @@\n+                    if (!path.contains(\"\/dummy\/x\")) {\n+                        System.err.println(now() + getName() + \": Unexpected request path. Path: \" + path);\n+                        clientConnection.close();\n+                        continue;\n+                    }\n@@ -305,2 +316,1 @@\n-                    URI uri = null;\n-                    boolean validURI = true;\n+                    URI uri;\n@@ -311,1 +321,1 @@\n-                        System.err.printf(\"Bad target address: \\\"%s\\\" in \\\"%s\\\"%n\",\n+                        System.err.printf(now() + getName() + \": Bad target address: \\\"%s\\\" in \\\"%s\\\"%n\",\n@@ -313,1 +323,2 @@\n-                        validURI = false;\n+                        clientConnection.close();\n+                        continue;\n@@ -316,50 +327,26 @@\n-                    \/\/ Proceed if URI is well-formed and the request path is as expected\n-                    if (validURI && path.contains(\"\/dummy\/x\")) {\n-                        connections.add(clientConnection);\n-\n-                        \/\/ Read all headers until we find the empty line that\n-                        \/\/ signals the end of all headers.\n-                        String line = requestLine;\n-                        while (!line.equals(\"\")) {\n-                            System.out.println(now() + getName() + \": Reading header: \"\n-                                    + (line = readLine(ccis)));\n-                            headers.append(line).append(\"\\r\\n\");\n-                        }\n-\n-                        StringBuilder response = new StringBuilder();\n-\n-                        int index = headers.toString()\n-                                .toLowerCase(Locale.US)\n-                                .indexOf(\"content-length: \");\n-                        byte[] b = uri.toString().getBytes(UTF_8);\n-                        if (index >= 0) {\n-                            index = index + \"content-length: \".length();\n-                            String cl = headers.toString().substring(index);\n-                            StringTokenizer tk = new StringTokenizer(cl);\n-                            int len = Integer.parseInt(tk.nextToken());\n-                            assert len < b.length * 2;\n-                            System.out.println(now() + getName()\n-                                    + \": received body: \"\n-                                    + new String(ccis.readNBytes(len), UTF_8));\n-                        }\n-                        System.out.println(now()\n-                                + getName() + \": sending back \" + uri);\n-\n-                        response.append(\"HTTP\/1.1 200 OK\\r\\nContent-Length: \")\n-                                .append(b.length)\n-                                .append(\"\\r\\n\\r\\n\");\n-\n-                        \/\/ Then send the 200 OK response to the client\n-                        System.out.println(now() + getName() + \": Sending \"\n-                                + response);\n-                        pw.print(response);\n-                        pw.flush();\n-                        ccos.write(b);\n-                        ccos.flush();\n-                        ccos.close();\n-                        connections.remove(clientConnection);\n-                        clientConnection.close();\n-                    } else {\n-                        System.err.println(now() + getName() + \": Invalid request, closing client connection and \" +\n-                                \"waiting for new request. Request: \" + requestLine);\n-                        clientConnection.close();\n+                    \/\/ Method, path and URI are valid. Add to connections list\n+                    connections.add(clientConnection);\n+                    \/\/ Read all headers until we find the empty line that\n+                    \/\/ signals the end of all headers.\n+                    String line = requestLine;\n+                    while (!line.equals(\"\")) {\n+                        System.out.println(now() + getName() + \": Reading header: \"\n+                                + (line = readLine(ccis)));\n+                        headers.append(line).append(\"\\r\\n\");\n+                    }\n+\n+                    StringBuilder response = new StringBuilder();\n+\n+                    int index = headers.toString()\n+                            .toLowerCase(Locale.US)\n+                            .indexOf(\"content-length: \");\n+                    byte[] b = uri.toString().getBytes(UTF_8);\n+                    if (index >= 0) {\n+                        index = index + \"content-length: \".length();\n+                        String cl = headers.toString().substring(index);\n+                        StringTokenizer tk = new StringTokenizer(cl);\n+                        int len = Integer.parseInt(tk.nextToken());\n+                        assert len < b.length * 2;\n+                        System.out.println(now() + getName()\n+                                + \": received body: \"\n+                                + new String(ccis.readNBytes(len), UTF_8));\n@@ -367,0 +354,17 @@\n+                    System.out.println(now()\n+                            + getName() + \": sending back \" + uri);\n+\n+                    response.append(\"HTTP\/1.1 200 OK\\r\\nContent-Length: \")\n+                            .append(b.length)\n+                            .append(\"\\r\\n\\r\\n\");\n+\n+                    \/\/ Then send the 200 OK response to the client\n+                    System.out.println(now() + getName() + \": Sending \"\n+                            + response);\n+                    pw.print(response);\n+                    pw.flush();\n+                    ccos.write(b);\n+                    ccos.flush();\n+                    ccos.close();\n+                    connections.remove(clientConnection);\n+                    clientConnection.close();\n","filename":"test\/jdk\/java\/net\/httpclient\/ServerCloseTest.java","additions":59,"deletions":55,"binary":false,"changes":114,"status":"modified"}]}