{"files":[{"patch":"@@ -1846,0 +1846,1 @@\n+\/\/ Analogous to PhaseIdealLoop::is_in_irreducible_loop\n@@ -1865,3 +1866,11 @@\n-  \/\/ Head of infinite loop, no parent was attached because no exit found\n-  \/\/ Since this infinite loop does not exit into another loop, it is not\n-  \/\/ nested in any loop, hence also not in an irreducible loop.\n+  \/\/ We have \"lp->parent() == nullptr\", which happens only for infinite loops,\n+  \/\/ where no parent is attached to the loop. We did not find any irreducible\n+  \/\/ loop from this block out to lp. Thus lp only has one entry, and no exit\n+  \/\/ (it is infinite and reducible). We can always rewrite an infinite loop\n+  \/\/ that is nested inside other loops:\n+  \/\/ while(condition) { infinite_loop; }\n+  \/\/ with an equivalent program where the infinite loop is an outermost loop\n+  \/\/ that is not nested in any loop:\n+  \/\/ while(condition) { break; } infinite_loop;\n+  \/\/ Thus, we can understand lp as an outermost loop, and can terminate and\n+  \/\/ conclude: this block is in no irreducible loop.\n@@ -2693,1 +2702,0 @@\n-    Block* outermost_irreducible_head = nullptr;\n@@ -2697,1 +2705,0 @@\n-      outermost_irreducible_head = lp->head();\n@@ -2710,3 +2717,0 @@\n-    if (outermost_irreducible_head != nullptr) {\n-      outermost_irreducible_head->set_irreducible_loop_head();\n-    }\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -764,0 +764,1 @@\n+      head()->set_irreducible_loop_head();\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -444,0 +444,7 @@\n+#ifdef ASSERT\n+void RegionNode::verify_can_be_irreducible_entry() const {\n+  assert(loop_status() == RegionNode::LoopStatus::MaybeIrreducibleEntry, \"must be marked irreducible\");\n+  assert(!is_Loop(), \"LoopNode cannot be irreducible loop entry\");\n+}\n+#endif \/\/ASSERT\n+\n@@ -1965,1 +1972,1 @@\n-\/\/ that the Region (and this Phi) are not unreachable from Root.\n+\/\/ that the Region (and this Phi) are not reachable from Root.\n@@ -1970,2 +1977,0 @@\n-  assert(in(0) != nullptr && in(0)->is_Region(),\n-         \"Phi must have Region as control\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -118,0 +118,3 @@\n+#ifdef ASSERT\n+  void verify_can_be_irreducible_entry() const;\n+#endif \/\/ASSERT\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5160,4 +5160,1 @@\n-      assert(secondary_entry != nullptr, \"irreducible loop secondary_entry is Region\");\n-      assert(secondary_entry->loop_status() == RegionNode::LoopStatus::MaybeIrreducibleEntry,\n-             \"secondary_entry has wrong loop_status\");\n-      assert(!secondary_entry->is_Loop(), \"LoopNode cannot be secondary entry to irreducible loop\");\n+      DEBUG_ONLY(secondary_entry->verify_can_be_irreducible_entry();)\n@@ -5170,4 +5167,1 @@\n-        assert(head != nullptr, \"irreducible loop head is Region\");\n-        assert(head->loop_status() == RegionNode::LoopStatus::MaybeIrreducibleEntry,\n-               \"head has wrong loop_status\");\n-        assert(!head->is_Loop(), \"LoopNode cannot be irreducible loop head\");\n+        DEBUG_ONLY(head->verify_can_be_irreducible_entry();)\n@@ -5256,1 +5250,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n@@ -5280,1 +5274,0 @@\n-#ifdef ASSERT\n@@ -5283,1 +5276,0 @@\n-#endif\n@@ -5297,0 +5289,1 @@\n+\/\/ Analogous to ciTypeFlow::Block::is_in_irreducible_loop\n@@ -5311,3 +5304,0 @@\n-  \/\/ Infinite loops are not always properly attached to the loop-tree. Infinite\n-  \/\/ loops do not exit out into other loops, hence they are not nested in any\n-  \/\/ loops, including any irreducible loops.\n@@ -5315,0 +5305,11 @@\n+  \/\/ We have \"l->_parent == nullptr\", which happens only for infinite loops,\n+  \/\/ where no parent is attached to the loop. We did not find any irreducible\n+  \/\/ loop from this block out to lp. Thus lp only has one entry, and no exit\n+  \/\/ (it is infinite and reducible). We can always rewrite an infinite loop\n+  \/\/ that is nested inside other loops:\n+  \/\/ while(condition) { infinite_loop; }\n+  \/\/ with an equivalent program where the infinite loop is an outermost loop\n+  \/\/ that is not nested in any loop:\n+  \/\/ while(condition) { break; } infinite_loop;\n+  \/\/ Thus, we can understand lp as an outermost loop, and can terminate and\n+  \/\/ conclude: this block is in no irreducible loop.\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1067,1 +1067,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}