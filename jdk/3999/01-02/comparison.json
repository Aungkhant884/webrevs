{"files":[{"patch":"@@ -5225,0 +5225,1 @@\n+  const Type* vec_type = Type::get_const_basic_type(vec_basictype);\n@@ -5232,1 +5233,3 @@\n-  if (is_subword_type(vec_basictype) && Type::cmp(TypeInt::ZERO, cmp_res->bottom_type()) &&\n+  bool enable_pi = (UsePartialInlineSize > 32) ? (NULL != vec_type->isa_int())\n+                                               : is_subword_type(vec_basictype);\n+  if (enable_pi && Type::cmp(TypeInt::ZERO, cmp_res->bottom_type()) &&\n@@ -5249,1 +5252,0 @@\n-    const Type* vec_type = Type::get_const_basic_type(vec_basictype);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+public class ArraysMismatchPartialInlining {\n+\n+    @Param({\"3\", \"4\", \"5\", \"6\", \"7\", \"15\", \"31\", \"63\", \"95\", \"800\"})\n+    private static int size;\n+\n+    byte [] barray1;\n+    char [] carray1;\n+    short [] sarray1;\n+    int [] iarray1;\n+    long [] larray1;\n+    float [] farray1;\n+    double [] darray1;\n+\n+    byte [] barray2;\n+    char [] carray2;\n+    short [] sarray2;\n+    int [] iarray2;\n+    long [] larray2;\n+    float [] farray2;\n+    double [] darray2;\n+\n+    @Setup\n+    public void setup() {\n+      barray1 = new byte[size];\n+      carray1 = new char[size];\n+      sarray1 = new short[size];\n+      iarray1 = new int[size];\n+      larray1 = new long[size];\n+      farray1 = new float[size];\n+      darray1 = new double[size];\n+\n+      barray2 = new byte[size];\n+      carray2 = new char[size];\n+      sarray2 = new short[size];\n+      iarray2 = new int[size];\n+      larray2 = new long[size];\n+      farray2 = new float[size];\n+      darray2 = new double[size];\n+\n+      Arrays.fill(barray1 , (byte)0xF);\n+      Arrays.fill(carray1 , (char)0xFF);\n+      Arrays.fill(sarray1 , (short)0xFF);\n+      Arrays.fill(iarray1 , -1);\n+      Arrays.fill(larray1 , -1L);\n+      Arrays.fill(farray1 , -1.0f);\n+      Arrays.fill(darray1, -1.0);\n+\n+      Arrays.fill(barray2 , (byte)0xF);\n+      Arrays.fill(carray2 , (char)0xFF);\n+      Arrays.fill(sarray2 , (short)0xFF);\n+      Arrays.fill(iarray2 , -1);\n+      Arrays.fill(larray2 , -1L);\n+      Arrays.fill(farray2 , -1.0F);\n+      Arrays.fill(darray2, -1.0);\n+\n+      barray2[size-1] = (byte)1;\n+      carray2[size-1] = (char)1;\n+      sarray2[size-1] = (short)1;\n+      iarray2[size-1] = 1;\n+      larray2[size-1] = 1L;\n+      farray2[size-1] = 1.0f;\n+      darray2[size-1] = 1.0;\n+    }\n+\n+    @Benchmark\n+    public int testByteMatch() {\n+      return Arrays.mismatch(barray1, barray2);\n+    }\n+\n+    @Benchmark\n+    public int testCharMatch() {\n+      return Arrays.mismatch(carray1, carray2);\n+    }\n+\n+    @Benchmark\n+    public int testShortMatch() {\n+      return Arrays.mismatch(sarray1, sarray2);\n+    }\n+\n+    @Benchmark\n+    public int testIntMatch() {\n+      return Arrays.mismatch(iarray1, iarray2);\n+    }\n+\n+    @Benchmark\n+    public int testLongMatch() {\n+      return Arrays.mismatch(larray1, larray2);\n+    }\n+\n+    @Benchmark\n+    public int testFloatMatch() {\n+      return Arrays.mismatch(farray1, farray2);\n+    }\n+\n+    @Benchmark\n+    public int testDoubleMatch() {\n+      return Arrays.mismatch(darray1, darray2);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysMismatchPartialInlining.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}