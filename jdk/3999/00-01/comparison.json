{"files":[{"patch":"@@ -38,7 +38,5 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a.get(aOff) != b.get(bOff)) {\n-            return 0;\n-        }\n-        return SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n+        int i = 0;\n+        if (length > 7) {\n+            if (a.get(aOff) != b.get(bOff))\n+                return 0;\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n@@ -49,0 +47,8 @@\n+            if (i >= 0) return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a.get(aOff + i) != b.get(bOff + i))\n+                return i;\n+        }\n+        return -1;\n@@ -53,3 +59,0 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n@@ -59,1 +62,1 @@\n-        if (a.charRegionOrder() == b.charRegionOrder()\n+        if (length > 3 && a.charRegionOrder() == b.charRegionOrder()\n@@ -63,1 +66,1 @@\n-            return SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n@@ -68,0 +71,2 @@\n+            if (i >= 0) return i;\n+            i = length - ~i;\n@@ -78,4 +83,1 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a.order() == b.order()) {\n+        if (length > 3 && a.order() == b.order()) {\n@@ -84,5 +86,7 @@\n-            return SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n-                       a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE),\n-                       b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE),\n-                       length,\n-                       ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n+                    a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE),\n+                    b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE),\n+                    length,\n+                    ArraysSupport.LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            if (i >= 0) return i;\n+            i = length - ~i;\n@@ -102,5 +106,7 @@\n-            return SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n-                       a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE),\n-                       b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE),\n-                       length,\n-                       ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE);\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n+                    a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE),\n+                    b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE),\n+                    length,\n+                    ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE);\n+            if (i >= 0) return i;\n+            i = length - ~i;\n@@ -158,5 +164,6 @@\n-            return SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n-                       a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE),\n-                       b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE),\n-                       length,\n-                       ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE);\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(a.scope(), b.scope(),\n+                    a.base(), a.address + (aOff << ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE),\n+                    b.base(), b.address + (bOff << ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE),\n+                    length,\n+                    ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE);\n+            return i >= 0 ? i : -1;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/BufferMismatch.java","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-        \/\/ Main loop performs unsafe comparison at granularity of 8 bytes (long).\n@@ -141,10 +140,15 @@\n-        \/\/ Remaining chunk between 0-7 bytes.\n-        long tailByteOffset = (((long) wi) << LOG2_ARRAY_LONG_INDEX_SCALE);\n-        int tailBytes = tail << log2ArrayIndexScale;\n-        for (int i = 0 ; i < tailBytes; i++) {\n-            long aTailByteOffset = aOffset + tailByteOffset + i;\n-            long bTailByteOffset = bOffset + tailByteOffset + i;\n-            byte av = U.getByte(a, aTailByteOffset);\n-            byte bv = U.getByte(b, bTailByteOffset);\n-            if(av != bv) {\n-                return (int)((aTailByteOffset - aOffset) >> log2ArrayIndexScale);\n+        if (log2ArrayIndexScale < LOG2_ARRAY_INT_INDEX_SCALE) {\n+            int wordTail = 1 << (LOG2_ARRAY_INT_INDEX_SCALE - log2ArrayIndexScale);\n+            \/\/ Handle 4 bytes or 2 chars in the tail using int width\n+            if (tail >= wordTail) {\n+                long bi = ((long) wi) << LOG2_ARRAY_LONG_INDEX_SCALE;\n+                int av = U.getIntUnaligned(a, aOffset + bi);\n+                int bv = U.getIntUnaligned(b, bOffset + bi);\n+                if (av != bv) {\n+                    int x = av ^ bv;\n+                    int o = BIG_ENDIAN\n+                            ? Integer.numberOfLeadingZeros(x) >> (LOG2_BYTE_BIT_SIZE + log2ArrayIndexScale)\n+                            : Integer.numberOfTrailingZeros(x) >> (LOG2_BYTE_BIT_SIZE + log2ArrayIndexScale);\n+                    return (wi << log2ValuesPerWidth) + o;\n+                }\n+                tail -= wordTail;\n@@ -152,0 +156,4 @@\n+            return ~tail;\n+        }\n+        else {\n+            return ~tail;\n@@ -153,1 +161,0 @@\n-        return -1;\n@@ -162,7 +169,5 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[0] != b[0]) {\n-            return 0;\n-        }\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 7) {\n+            if (a[0] != b[0])\n+                return 0;\n+            i = vectorizedMismatch(\n@@ -172,0 +177,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[i] != b[i])\n+                return i;\n+        }\n+        return -1;\n@@ -177,9 +191,7 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[aFromIndex] != b[bFromIndex]) {\n-            return 0;\n-        }\n-        int aOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + aFromIndex;\n-        int bOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + bFromIndex;\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 7) {\n+            if (a[aFromIndex] != b[bFromIndex])\n+                return 0;\n+            int aOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + aFromIndex;\n+            int bOffset = Unsafe.ARRAY_BOOLEAN_BASE_OFFSET + bFromIndex;\n+            i = vectorizedMismatch(\n@@ -189,0 +201,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[aFromIndex + i] != b[bFromIndex + i])\n+                return i;\n+        }\n+        return -1;\n@@ -213,2 +234,14 @@\n-        if (length == 0) {\n-            return -1;\n+\n+        int i = 0;\n+        if (length > 7) {\n+            if (a[0] != b[0])\n+                return 0;\n+            i = vectorizedMismatch(\n+                    a, Unsafe.ARRAY_BYTE_BASE_OFFSET,\n+                    b, Unsafe.ARRAY_BYTE_BASE_OFFSET,\n+                    length, LOG2_ARRAY_BYTE_INDEX_SCALE);\n+            if (i >= 0)\n+                return i;\n+            \/\/ Align to tail\n+            i = length - ~i;\n+\/\/            assert i >= 0 && i <= 7;\n@@ -216,2 +249,4 @@\n-        if (a[0] != b[0]) {\n-            return 0;\n+        \/\/ Tail < 8 bytes\n+        for (; i < length; i++) {\n+            if (a[i] != b[i])\n+                return i;\n@@ -219,4 +254,1 @@\n-        return vectorizedMismatch(\n-                   a, Unsafe.ARRAY_BYTE_BASE_OFFSET,\n-                   b, Unsafe.ARRAY_BYTE_BASE_OFFSET,\n-                   length, LOG2_ARRAY_BYTE_INDEX_SCALE);\n+        return -1;\n@@ -251,9 +283,8 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[aFromIndex] != b[bFromIndex]) {\n-            return 0;\n-        }\n-        int aOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + aFromIndex;\n-        int bOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + bFromIndex;\n-        return vectorizedMismatch(\n+\n+        int i = 0;\n+        if (length > 7) {\n+            if (a[aFromIndex] != b[bFromIndex])\n+                return 0;\n+            int aOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + aFromIndex;\n+            int bOffset = Unsafe.ARRAY_BYTE_BASE_OFFSET + bFromIndex;\n+            i = vectorizedMismatch(\n@@ -263,0 +294,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[aFromIndex + i] != b[bFromIndex + i])\n+                return i;\n+        }\n+        return -1;\n@@ -271,7 +311,5 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[0] != b[0]) {\n-            return 0;\n-        }\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 3) {\n+            if (a[0] != b[0])\n+                return 0;\n+            i = vectorizedMismatch(\n@@ -281,0 +319,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[i] != b[i])\n+                return i;\n+        }\n+        return -1;\n@@ -286,9 +333,7 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[aFromIndex] != b[bFromIndex]) {\n-            return 0;\n-        }\n-        int aOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n-        int bOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 3) {\n+            if (a[aFromIndex] != b[bFromIndex])\n+                return 0;\n+            int aOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n+            int bOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_CHAR_INDEX_SCALE);\n+            i = vectorizedMismatch(\n@@ -298,0 +343,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[aFromIndex + i] != b[bFromIndex + i])\n+                return i;\n+        }\n+        return -1;\n@@ -306,7 +360,5 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[0] != b[0]) {\n-            return 0;\n-        }\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 3) {\n+            if (a[0] != b[0])\n+                return 0;\n+            i = vectorizedMismatch(\n@@ -316,0 +368,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[i] != b[i])\n+                return i;\n+        }\n+        return -1;\n@@ -321,9 +382,7 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[aFromIndex] != b[bFromIndex]) {\n-            return 0;\n-        }\n-        int aOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n-        int bOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 3) {\n+            if (a[aFromIndex] != b[bFromIndex])\n+                return 0;\n+            int aOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            int bOffset = Unsafe.ARRAY_SHORT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_SHORT_INDEX_SCALE);\n+            i = vectorizedMismatch(\n@@ -333,0 +392,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[aFromIndex + i] != b[bFromIndex + i])\n+                return i;\n+        }\n+        return -1;\n@@ -336,0 +404,2 @@\n+    \/\/ Ints\n+\n@@ -339,7 +409,5 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[0] != b[0]) {\n-            return 0;\n-        }\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 1) {\n+            if (a[0] != b[0])\n+                return 0;\n+            i = vectorizedMismatch(\n@@ -349,0 +417,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[i] != b[i])\n+                return i;\n+        }\n+        return -1;\n@@ -354,9 +431,7 @@\n-        if (length == 0) {\n-            return -1;\n-        }\n-        if (a[aFromIndex] != b[bFromIndex]) {\n-            return 0;\n-        }\n-        int aOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n-        int bOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n-        return vectorizedMismatch(\n+        int i = 0;\n+        if (length > 1) {\n+            if (a[aFromIndex] != b[bFromIndex])\n+                return 0;\n+            int aOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (aFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n+            int bOffset = Unsafe.ARRAY_INT_BASE_OFFSET + (bFromIndex << LOG2_ARRAY_INT_INDEX_SCALE);\n+            i = vectorizedMismatch(\n@@ -366,0 +441,9 @@\n+            if (i >= 0)\n+                return i;\n+            i = length - ~i;\n+        }\n+        for (; i < length; i++) {\n+            if (a[aFromIndex + i] != b[bFromIndex + i])\n+                return i;\n+        }\n+        return -1;\n@@ -424,1 +508,1 @@\n-        if (a[0] != b[0]) {\n+        if (a[0] != b[0])\n@@ -426,5 +510,5 @@\n-        }\n-        return vectorizedMismatch(\n-                   a, Unsafe.ARRAY_LONG_BASE_OFFSET,\n-                   b, Unsafe.ARRAY_LONG_BASE_OFFSET,\n-                   length, LOG2_ARRAY_LONG_INDEX_SCALE);\n+        int i = vectorizedMismatch(\n+                a, Unsafe.ARRAY_LONG_BASE_OFFSET,\n+                b, Unsafe.ARRAY_LONG_BASE_OFFSET,\n+                length, LOG2_ARRAY_LONG_INDEX_SCALE);\n+        return i >= 0 ? i : -1;\n@@ -439,1 +523,1 @@\n-        if (a[aFromIndex] != b[bFromIndex]) {\n+        if (a[aFromIndex] != b[bFromIndex])\n@@ -441,1 +525,0 @@\n-        }\n@@ -444,4 +527,5 @@\n-        return vectorizedMismatch(\n-                   a, aOffset,\n-                   b, bOffset,\n-                   length, LOG2_ARRAY_LONG_INDEX_SCALE);\n+        int i = vectorizedMismatch(\n+                a, aOffset,\n+                b, bOffset,\n+                length, LOG2_ARRAY_LONG_INDEX_SCALE);\n+        return i >= 0 ? i : -1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":189,"deletions":105,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=0 -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=0 -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOptions\n@@ -36,1 +36,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=0 -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=0 -XX:MaxVectorSize=64\n@@ -39,1 +39,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption\n@@ -42,1 +42,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=64\n@@ -45,1 +45,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=64 -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=64 -XX:MaxVectorSize=64\n@@ -48,1 +48,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption -XX:ArrayCopyLoadStoreMaxElem=16\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption -XX:ArrayCopyLoadStoreMaxElem=16\n@@ -51,1 +51,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=64 -XX:MaxVectorSize=64 -XX:ArrayCopyLoadStoreMaxElem=16\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=64 -XX:MaxVectorSize=64 -XX:ArrayCopyLoadStoreMaxElem=16\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyConjoint.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=0 -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=0 -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOptions\n@@ -36,1 +36,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=0 -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=0 -XX:MaxVectorSize=64\n@@ -39,1 +39,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption\n@@ -42,1 +42,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=64\n@@ -45,1 +45,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=64 -XX:MaxVectorSize=64\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=64 -XX:MaxVectorSize=64\n@@ -48,1 +48,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption -XX:ArrayCopyLoadStoreMaxElem=16\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=32 -XX:+UnlockDiagnosticVMOptions -XX:MaxVectorSize=32 -XX:+UnlockDiagnosticVMOption -XX:ArrayCopyLoadStoreMaxElem=16\n@@ -51,1 +51,1 @@\n- *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:ArrayCopyPartialInlineSize=64 -XX:MaxVectorSize=64 -XX:ArrayCopyLoadStoreMaxElem=16\n+ *      -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:UsePartialInlineSize=64 -XX:MaxVectorSize=64 -XX:ArrayCopyLoadStoreMaxElem=16\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyDisjoint.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}