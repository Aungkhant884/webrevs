{"files":[{"patch":"@@ -111,0 +111,5 @@\n+  CastLLNode(Node* ctrl, Node* n, const Type* t, bool carry_dependency = false)\n+    : ConstraintCastNode(n, t, carry_dependency) {\n+    init_class_id(Class_CastLL);\n+    init_req(0, ctrl);\n+  }\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5273,0 +5273,2 @@\n+        Node* casted_length = _gvn.transform(new CastIINode(control(), length, TypeInt::make(0, inline_limit, Type::WidenMin)));\n+\n@@ -5278,1 +5280,1 @@\n-        Node* vmask      = _gvn.transform(new VectorMaskGenNode(ConvI2X(length), TypeVect::VECTMASK, elem_bt));\n+        Node* vmask      = _gvn.transform(new VectorMaskGenNode(ConvI2X(casted_length), TypeVect::VECTMASK, elem_bt));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"opto\/castnode.hpp\"\n@@ -226,0 +227,3 @@\n+  int inline_limit = ArrayOperationPartialInlineSize \/ type2aelembytes(type);\n+  Node* casted_length = new CastLLNode(*ctrl, length, TypeLong::make(0, inline_limit, Type::WidenMin));\n+  transform_later(casted_length);\n@@ -236,1 +240,1 @@\n-  Node* mask_gen =  new VectorMaskGenNode(length, TypeVect::VECTMASK, type);\n+  Node* mask_gen =  new VectorMaskGenNode(casted_length, TypeVect::VECTMASK, type);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}