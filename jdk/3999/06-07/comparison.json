{"files":[{"patch":"@@ -5187,1 +5187,1 @@\n-  assert(UseVectorizedMismatchIntrinsic, \"not implementated on this platform\");\n+  assert(UseVectorizedMismatchIntrinsic, \"not implemented on this platform\");\n@@ -5209,1 +5209,2 @@\n-      top_b == NULL || top_b->klass() == NULL) {\n+      top_b == NULL || top_b->klass() == NULL ||\n+      scale == top()) {\n@@ -5224,2 +5225,4 @@\n-  if (scale->bottom_type()->is_int()->is_con()) {\n-    int scale_val = scale->bottom_type()->is_int()->get_con();\n+  int scale_val = scale->bottom_type()->is_int()->is_con() ?\n+                  scale->bottom_type()->is_int()->get_con() :\n+                  -1;\n+  if (scale_val >= 0 && scale_val < 4) {\n@@ -5232,1 +5235,1 @@\n-    \/\/ If ArrayOperationPartailInlineSize > 32 inlining is enabled\n+    \/\/ If ArrayOperationPartailInlineSize > 32 in-lining is enabled\n@@ -5234,1 +5237,1 @@\n-    \/\/ value inlining is enabled for subword types (byte\/short\/char).\n+    \/\/ value in-lining is enabled for sub-word types (byte\/short\/char).\n@@ -5237,1 +5240,1 @@\n-    } else if (ArrayOperationPartailInlineSize) {\n+    } else if (ArrayOperationPartailInlineSize > 0) {\n@@ -5251,0 +5254,5 @@\n+      \/\/ When the cmp_res is evaluated to false then fast_path will be NULL\n+      \/\/ and only slow path exist (i.e. implicit control), so all the nodes control\n+      \/\/ dependent on fast path will be sweeped out during GVN. When cmp_res is\n+      \/\/ evaluated to true fast_path is chosen and slow_path (control()) is NULL and\n+      \/\/ thus before exit control is explicitly set to fast_path.\n@@ -5274,5 +5282,7 @@\n-  if (!stopped()) {\n-    Node* call = make_runtime_call(RC_LEAF,\n-                                   OptoRuntime::vectorizedMismatch_Type(),\n-                                   stubAddr, stubName, TypePtr::BOTTOM,\n-                                   obja_adr, objb_adr, length, scale);\n+  if (stopped()) {\n+    \/\/ Slow path is dead.\n+    set_control(fast_path);\n+    set_result(fastcomp_result);\n+    clear_upper_avx();\n+    return true;\n+  }\n@@ -5280,2 +5290,5 @@\n-    Node* call_result = _gvn.transform(new ProjNode(call, TypeFunc::Parms));\n-    Node* call_mem = map()->memory();\n+  \/\/ Proceed with expanding slow path.\n+  Node* call = make_runtime_call(RC_LEAF,\n+                                 OptoRuntime::vectorizedMismatch_Type(),\n+                                 stubAddr, stubName, TypePtr::BOTTOM,\n+                                 obja_adr, objb_adr, length, scale);\n@@ -5283,4 +5296,2 @@\n-    Node* exit_block = new RegionNode(3);\n-    exit_block->init_req(1, fast_path);\n-    exit_block->init_req(2, control());\n-    exit_block = _gvn.transform(exit_block);\n+  Node* call_result = _gvn.transform(new ProjNode(call, TypeFunc::Parms));\n+  Node* call_mem = map()->memory();\n@@ -5288,4 +5299,4 @@\n-    Node* result = new PhiNode(exit_block, TypeInt::INT);\n-    result->init_req(1, fastcomp_result);\n-    result->init_req(2, call_result);\n-    result = _gvn.transform(result);\n+  Node* exit_block = new RegionNode(3);\n+  exit_block->init_req(1, fast_path);\n+  exit_block->init_req(2, control());\n+  exit_block = _gvn.transform(exit_block);\n@@ -5293,3 +5304,4 @@\n-    Node* mem_phi = new PhiNode(exit_block, Type::MEMORY, TypePtr::BOTTOM);\n-    mem_phi->init_req(1, init_mem);\n-    mem_phi->init_req(2, call_mem);\n+  Node* result = new PhiNode(exit_block, TypeInt::INT);\n+  result->init_req(1, fastcomp_result);\n+  result->init_req(2, call_result);\n+  result = _gvn.transform(result);\n@@ -5297,8 +5309,7 @@\n-    set_all_memory(_gvn.transform(mem_phi));\n-    set_control(exit_block);\n-    set_result(result);\n-  } else {\n-    set_control(fast_path);\n-    set_result(fastcomp_result);\n-  }\n-  clear_upper_avx();\n+  Node* mem_phi = new PhiNode(exit_block, Type::MEMORY, TypePtr::BOTTOM);\n+  mem_phi->init_req(1, init_mem);\n+  mem_phi->init_req(2, call_mem);\n+\n+  set_all_memory(_gvn.transform(mem_phi));\n+  set_control(exit_block);\n+  set_result(result);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":44,"deletions":33,"binary":false,"changes":77,"status":"modified"}]}