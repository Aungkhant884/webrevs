{"files":[{"patch":"@@ -49,5 +49,0 @@\n-\/* help jettison the LD_LIBRARY_PATH settings in the future *\/\n-#ifndef SETENV_REQUIRED\n-#define SETENV_REQUIRED\n-#endif\n-\n@@ -164,1 +159,0 @@\n-#ifdef SETENV_REQUIRED\n@@ -183,0 +177,2 @@\n+    char minimalPattern[] = \"lib\/minimal\";\n+\n@@ -188,0 +184,1 @@\n+    jboolean minimalPatternFound;\n@@ -197,1 +194,3 @@\n-    if (clientPatternFound == JNI_FALSE && serverPatternFound == JNI_FALSE) {\n+    minimalPatternFound = JLI_StrStr(env, minimalPattern) != NULL;\n+\n+    if (clientPatternFound == JNI_FALSE && serverPatternFound == JNI_FALSE && minimalPatternFound == JNI_FALSE) {\n@@ -218,0 +217,6 @@\n+        if (minimalPatternFound && JLI_StrStr(path, minimalPattern)  != NULL) {\n+            if (JvmExists(path)) {\n+                JLI_MemFree(envpath);\n+                return JNI_TRUE;\n+            }\n+        }\n@@ -292,1 +297,0 @@\n-#endif \/* SETENV_REQUIRED *\/\n@@ -303,1 +307,0 @@\n-#ifdef SETENV_REQUIRED\n@@ -311,1 +314,0 @@\n-#endif  \/* SETENV_REQUIRED *\/\n@@ -345,1 +347,0 @@\n-#ifdef SETENV_REQUIRED\n@@ -352,3 +353,0 @@\n-#else\n-    return;\n-#endif \/* SETENV_REQUIRED *\/\n@@ -356,12 +354,15 @@\n-#ifdef SETENV_REQUIRED\n-    if (mustsetenv) {\n-        \/*\n-         * We will set the LD_LIBRARY_PATH as follows:\n-         *\n-         *     o          $JVMPATH (directory portion only)\n-         *     o          $JRE\/lib\n-         *     o          $JRE\/..\/lib\n-         *\n-         * followed by the user's previous effective LD_LIBRARY_PATH, if\n-         * any.\n-         *\/\n+    \/**\n+     * Update execution environment and re-exec the launcher\n+     *\n+     *\/\n+\n+    \/*\n+     * We will set the LD_LIBRARY_PATH as follows:\n+     *\n+     *     o          $JVMPATH (directory portion only)\n+     *     o          $JRE\/lib\n+     *     o          $JRE\/..\/lib\n+     *\n+     * followed by the user's previous effective LD_LIBRARY_PATH, if\n+     * any.\n+     *\/\n@@ -369,1 +370,1 @@\n-        runpath = getenv(LD_LIBRARY_PATH);\n+    runpath = getenv(LD_LIBRARY_PATH);\n@@ -371,8 +372,8 @@\n-        \/* runpath contains current effective LD_LIBRARY_PATH setting *\/\n-        { \/* New scope to declare local variable *\/\n-            char *new_jvmpath = JLI_StringDup(jvmpath);\n-            new_runpath_size = ((runpath != NULL) ? JLI_StrLen(runpath) : 0) +\n-                    2 * JLI_StrLen(jrepath) +\n-                    JLI_StrLen(new_jvmpath) + 52;\n-            new_runpath = JLI_MemAlloc(new_runpath_size);\n-            newpath = new_runpath + JLI_StrLen(LD_LIBRARY_PATH \"=\");\n+    \/* runpath contains current effective LD_LIBRARY_PATH setting *\/\n+    { \/* New scope to declare local variable *\/\n+        char *new_jvmpath = JLI_StringDup(jvmpath);\n+        new_runpath_size = ((runpath != NULL) ? JLI_StrLen(runpath) : 0) +\n+                2 * JLI_StrLen(jrepath) +\n+                JLI_StrLen(new_jvmpath) + 52;\n+        new_runpath = JLI_MemAlloc(new_runpath_size);\n+        newpath = new_runpath + JLI_StrLen(LD_LIBRARY_PATH \"=\");\n@@ -381,0 +382,20 @@\n+        \/*\n+         * Create desired LD_LIBRARY_PATH value for target data model.\n+         *\/\n+        {\n+            \/* remove the name of the .so from the JVM path *\/\n+            lastslash = JLI_StrRChr(new_jvmpath, '\/');\n+            if (lastslash)\n+                *lastslash = '\\0';\n+\n+            sprintf(new_runpath, LD_LIBRARY_PATH \"=\"\n+                    \"%s:\"\n+                    \"%s\/lib:\"\n+                    \"%s\/..\/lib\",\n+                    new_jvmpath,\n+                    jrepath,\n+                    jrepath\n+                    );\n+\n+            JLI_MemFree(new_jvmpath);\n+\n@@ -382,1 +403,4 @@\n-             * Create desired LD_LIBRARY_PATH value for target data model.\n+             * Check to make sure that the prefix of the current path is the\n+             * desired environment variable setting, though the RequiresSetenv\n+             * checks if the desired runpath exists, this logic does a more\n+             * comprehensive check.\n@@ -384,30 +408,6 @@\n-            {\n-                \/* remove the name of the .so from the JVM path *\/\n-                lastslash = JLI_StrRChr(new_jvmpath, '\/');\n-                if (lastslash)\n-                    *lastslash = '\\0';\n-\n-                sprintf(new_runpath, LD_LIBRARY_PATH \"=\"\n-                        \"%s:\"\n-                        \"%s\/lib:\"\n-                        \"%s\/..\/lib\",\n-                        new_jvmpath,\n-                        jrepath,\n-                        jrepath\n-                        );\n-\n-                JLI_MemFree(new_jvmpath);\n-\n-                \/*\n-                 * Check to make sure that the prefix of the current path is the\n-                 * desired environment variable setting, though the RequiresSetenv\n-                 * checks if the desired runpath exists, this logic does a more\n-                 * comprehensive check.\n-                 *\/\n-                if (runpath != NULL &&\n-                        JLI_StrNCmp(newpath, runpath, JLI_StrLen(newpath)) == 0 &&\n-                        (runpath[JLI_StrLen(newpath)] == 0 ||\n-                        runpath[JLI_StrLen(newpath)] == ':')) {\n-                    JLI_MemFree(new_runpath);\n-                    return;\n-                }\n+            if (runpath != NULL &&\n+                    JLI_StrNCmp(newpath, runpath, JLI_StrLen(newpath)) == 0 &&\n+                    (runpath[JLI_StrLen(newpath)] == 0 ||\n+                    runpath[JLI_StrLen(newpath)] == ':')) {\n+                JLI_MemFree(new_runpath);\n+                return;\n@@ -445,1 +445,0 @@\n-#endif \/* SETENV_REQUIRED *\/\n@@ -451,9 +450,2 @@\n-#ifdef SETENV_REQUIRED\n-        if (mustsetenv) {\n-            execve(newexec, argv, newenvp);\n-        } else {\n-            execv(newexec, argv);\n-        }\n-#else \/* !SETENV_REQUIRED *\/\n-        execv(newexec, argv);\n-#endif \/* SETENV_REQUIRED *\/\n+\n+        execve(newexec, argv, newenvp);\n@@ -465,1 +457,0 @@\n-\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":68,"deletions":77,"binary":false,"changes":145,"status":"modified"}]}