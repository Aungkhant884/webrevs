{"files":[{"patch":"@@ -3892,1 +3892,3 @@\n-\n+        if (w.bitLength() > PRIME_SEARCH_BIT_LENGTH_LIMIT + 1) {\n+            throw new ArithmeticException(\"Primality test implementation restriction on bitLength\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @bug 8026236 8074460 8078672\n+ * @bug 8026236 8074460 8078672 8294593\n@@ -89,0 +89,4 @@\n+        if (!checkHugeFails()) {\n+            throw new Exception(\"Primality test on huge integer should fail but succeeded\");\n+        }\n+\n@@ -233,0 +237,15 @@\n+\n+    private static boolean checkHugeFails() {\n+        try {\n+            \/\/ huge odd integer\n+            BigInteger a = BigInteger.ONE.shiftLeft(500_000_000 + 1)\n+                    .setBit(0);\n+            a.isProbablePrime(1);\n+            \/\/ not expected to reach here\n+            return false;\n+        } catch (ArithmeticException e) {\n+            \/\/ this is the expected behavior\n+            return true;\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/math\/BigInteger\/PrimeTest.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"}]}