{"files":[{"patch":"@@ -1382,2 +1382,2 @@\n-    \/\/ Transfers from src to dst, or returns IOStatus.UNSUPPORTED (-4)\n-    \/\/ or IOStatus.UNSUPPORTED_CASE (-6) if kernel can't do that\n+    \/\/ Transfers from src to dst, or returns IOStatus.UNSUPPORTED (-4) or\n+    \/\/ IOStatus.UNSUPPORTED_CASE (-6) if the kernel does not support it\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-    private static final int FILE_SIZE = 1000*1024;\n-\n@@ -56,1 +54,4 @@\n-    private static final int CHUNK_SIZE = 1024 * 9;\n+    private static final int CHUNK_SIZE = 9*1024;\n+\n+    \/\/ File size should be a value much larger than CHUNK_SIZE\n+    private static final int FILE_SIZE = 1000*1024;\n@@ -58,1 +59,3 @@\n-    private static final int MIN_DIRECT_TRANSFER_SIZE = 512000;\n+    \/\/ The minimum direct transfer size should be less than the file size\n+    \/\/ but still substantial\n+    private static final int MIN_DIRECT_TRANSFER_SIZE = FILE_SIZE\/2;\n@@ -124,3 +127,2 @@\n-                for (int i=0; i<size; i++)\n-                    if (incoming[i] != expected[i])\n-                        throw new RuntimeException(\"Data corrupted\");\n+                if (!Arrays.equals(incoming, expected))\n+                    throw new RuntimeException(\"Data corrupted\");\n@@ -157,3 +159,0 @@\n-        FileOutputStream fos = new FileOutputStream(outFile);\n-        FileChannel out = fos.getChannel();\n-\n@@ -162,8 +161,14 @@\n-        assert out.position() == 0;\n-        long pos = position;\n-        while (pos < size) {\n-            long bytesTransferred = in.transferTo(pos, Long.MAX_VALUE, out);\n-            if (bytesTransferred >= 0)\n-                pos += bytesTransferred;\n-            else\n-                throw new Exception(\"transfer failed\");\n+        try (FileOutputStream fos = new FileOutputStream(outFile);\n+             FileChannel out = fos.getChannel()) {\n+\n+            assert out.position() == 0;\n+            long pos = position;\n+            while (pos < size) {\n+                long bytesTransferred = in.transferTo(pos, Long.MAX_VALUE, out);\n+                if (bytesTransferred >= 0)\n+                    pos += bytesTransferred;\n+                else {\n+                    throw new Exception(\"transfer failed at \" + pos +\n+                        \" \/ \" + size);\n+                }\n+            }\n@@ -171,1 +176,0 @@\n-        out.close();\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToChannel.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"}]}