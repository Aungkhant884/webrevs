{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    private static final int MAX_DIRECT_TRANSFER_SIZE;\n+    private static final long MAX_DIRECT_TRANSFER_SIZE;\n@@ -492,1 +492,1 @@\n-    private long transferToDirectlyInternal(long position, int icount,\n+    private long transferToDirectlyInternal(long position, long count,\n@@ -508,1 +508,1 @@\n-                n = transferTo0(fd, position, icount, targetFD);\n+                n = transferTo0(fd, position, count, targetFD);\n@@ -529,1 +529,1 @@\n-    private long transferToDirectly(long position, int icount,\n+    private long transferToDirectly(long position, long count,\n@@ -559,1 +559,2 @@\n-        if (thisFDVal == targetFDVal) \/\/ Not supported on some configurations\n+        if (thisFDVal != -1 && targetFDVal != -1 && thisFDVal == targetFDVal)\n+            \/\/ source == target not supported on some configurations\n@@ -566,1 +567,1 @@\n-                    return transferToDirectlyInternal(position, icount,\n+                    return transferToDirectlyInternal(position, count,\n@@ -573,1 +574,1 @@\n-            return transferToDirectlyInternal(position, icount, target, targetFD);\n+            return transferToDirectlyInternal(position, count, target, targetFD);\n@@ -693,1 +694,1 @@\n-        int icount = (int)Math.min(count, MAX_DIRECT_TRANSFER_SIZE);\n+        long dcount = Math.min(count, MAX_DIRECT_TRANSFER_SIZE);\n@@ -695,1 +696,1 @@\n-        if ((n = transferToDirectly(position, icount, target)) >= 0)\n+        if ((n = transferToDirectly(position, dcount, target)) >= 0)\n@@ -1376,1 +1377,1 @@\n-    private static native int maxDirectTransferSize0();\n+    private static native long maxDirectTransferSize0();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    @Native public static final int UNSUPPORTED_SUBCASE = -7; \/\/ This subcase not supported\n@@ -81,1 +82,1 @@\n-        return ((n > EOF) || (n < UNSUPPORTED_CASE));\n+        return ((n > EOF) || (n < UNSUPPORTED_SUBCASE));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOStatus.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#define IOS_UNSUPPORTED_SUBCASE (sun_nio_ch_IOStatus_UNSUPPORTED_SUBCASE)\n","filename":"src\/java.base\/share\/native\/libnio\/ch\/nio.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"java_lang_Long.h\"\n@@ -161,0 +162,45 @@\n+#if defined(__APPLE__)\n+#define RESTARTABLE(_cmd, _result) do { \\\n+  do { \\\n+    _result = _cmd; \\\n+  } while((_result == -1) && (errno == EINTR)); \\\n+} while(0)\n+\n+#define READ_WRITE_TRANSFER_SIZE 32768\n+\n+long transfer_read_write(JNIEnv* env, jint src, jlong position, jlong count,\n+                         jint dst)\n+{\n+    char buf[READ_WRITE_TRANSFER_SIZE];\n+\n+    ssize_t tw = 0;\n+    off_t offset = (off_t)position;\n+    while (tw < count) {\n+        ssize_t remaining = count - tw;\n+        ssize_t nr = remaining < READ_WRITE_TRANSFER_SIZE ?\n+            remaining : READ_WRITE_TRANSFER_SIZE;\n+        RESTARTABLE(pread((int)src, &buf, nr, offset), nr);\n+        if (nr <= 0) {\n+            if (nr < 0) {\n+                JNU_ThrowIOExceptionWithLastError(env, \"Transfer failed\");\n+                return IOS_THROWN;\n+            }\n+            return tw;\n+        }\n+        offset += nr;\n+\n+        ssize_t nw;\n+        RESTARTABLE(write((int)dst, &buf, nr), nw);\n+        if (nw == -1) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Transfer failed\");\n+            return IOS_THROWN;\n+        }\n+        tw += nw;\n+        if (nw != nr)\n+            return tw;\n+    }\n+\n+    return tw;\n+}\n+#endif\n+\n@@ -186,0 +232,9 @@\n+    struct stat stat_dst;\n+    if (fstat(dstFD, &stat_dst) == 0) {\n+        if((stat_dst.st_mode & (S_IFREG | S_IFSOCK)) == S_IFREG)\n+            return transfer_read_write(env, srcFD, position, count, dstFD);\n+    } else {\n+        JNU_ThrowIOExceptionWithLastError(env, \"fstat failed\");\n+        return IOS_THROWN;\n+    }\n+\n@@ -255,1 +310,1 @@\n-JNIEXPORT jint JNICALL\n+JNIEXPORT jlong JNICALL\n@@ -260,0 +315,2 @@\n+#elif defined(__APPLE__)\n+    return java_lang_Long_MAX_VALUE;\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"java_lang_Long.h\"\n@@ -148,0 +149,39 @@\n+#define READ_WRITE_TRANSFER_SIZE  32768\n+#define READ_WRITE_TRANSFER_LIMIT 2097152\n+\n+DWORD transfer_read_write(JNIEnv* env, HANDLE src, DWORD position, DWORD count,\n+                          HANDLE dst)\n+{\n+    LARGE_INTEGER where;\n+    where.QuadPart = (LONGLONG)position;\n+    if (SetFilePointerEx(src, where, &where, FILE_BEGIN) == 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"SetFilePointerEx failed\");\n+        return IOS_THROWN;\n+    }\n+\n+    char buf[READ_WRITE_TRANSFER_SIZE];\n+\n+    DWORD tw = 0;\n+    while (tw < count) {\n+        DWORD remaining = count - tw;\n+        DWORD nr = remaining < READ_WRITE_TRANSFER_SIZE ?\n+            remaining : READ_WRITE_TRANSFER_SIZE;\n+        if (ReadFile(src, (LPVOID)&buf, nr, &nr, NULL) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"ReadFile failed\");\n+            return IOS_THROWN;\n+        }\n+\n+        DWORD nw = 0;\n+        if (WriteFile(dst, &buf, nr, &nw, NULL) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"WriteFile failed\");\n+            return IOS_THROWN;\n+        }\n+        tw += nw;\n+\n+        if (nw != nr)\n+            return tw;\n+    }\n+\n+    return tw;\n+}\n+\n@@ -162,0 +202,1 @@\n+    HANDLE dstHandle = (HANDLE)(handleval(env, dstFD));\n@@ -166,0 +207,7 @@\n+    if (GetFileType(dstHandle) == FILE_TYPE_DISK) {\n+        if (src != dstHandle && count < READ_WRITE_TRANSFER_LIMIT)\n+            return transfer_read_write(env, src, (DWORD)position, (DWORD)count,\n+                                       dstHandle);\n+        return IOS_UNSUPPORTED_SUBCASE;\n+    }\n+\n@@ -197,1 +245,1 @@\n-JNIEXPORT jint JNICALL\n+JNIEXPORT jlong JNICALL\n@@ -200,1 +248,1 @@\n-    return MAX_TRANSMIT_SIZE;\n+    return java_lang_Long_MAX_VALUE;\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileChannelImpl.c","additions":50,"deletions":2,"binary":false,"changes":52,"status":"modified"}]}