{"files":[{"patch":"@@ -577,0 +577,4 @@\n+    \/\/ Size threshold above which to use a mapped buffer;\n+    \/\/ transferToArbitraryChannel() is faster for smaller transfers\n+    private static final long TRUSTED_TRANSFER_THRESHOLD = 16L*1024L;\n+\n@@ -584,0 +588,3 @@\n+        if (count < TRUSTED_TRANSFER_THRESHOLD)\n+            return IOStatus.UNSUPPORTED_CASE;\n+\n@@ -1375,3 +1382,4 @@\n-    \/\/ Transfers from src to dst, or returns -2 if kernel can't do that\n-    private native long transferTo0(FileDescriptor src, long position,\n-                                    long count, FileDescriptor dst);\n+    \/\/ Transfers from src to dst, or returns IOStatus.UNSUPPORTED (-4)\n+    \/\/ or IOStatus.UNSUPPORTED_CASE (-6) if kernel can't do that\n+    private static native long transferTo0(FileDescriptor src, long position,\n+                                           long count, FileDescriptor dst);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,2 +230,2 @@\n-     * return 1 when partial bytes transfered and return -1 when an error has\n-     * Occured.\n+     * return 1 when partial bytes transferred and return -1 when an error has\n+     * occurred.\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4652496\n+ * @bug 4652496 8274112\n@@ -27,0 +27,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n@@ -29,0 +31,1 @@\n+ * @key randomness\n@@ -31,0 +34,7 @@\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n@@ -33,2 +43,2 @@\n-import java.nio.ByteBuffer;\n-import java.io.*;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n@@ -36,0 +46,1 @@\n+import jdk.test.lib.RandomFactory;\n@@ -39,5 +50,13 @@\n-    static File file;\n-    static File outFile;\n-    static FileChannel in;\n-    \/\/ Chunk size should be larger than FileChannelImpl.TRANSFER_SIZE for good test\n-    static int CHUNK_SIZE = 1024 * 9;\n+    private static final Random RAND = RandomFactory.getRandom();\n+\n+    private static final int FILE_SIZE = 1000*1024;\n+\n+    \/\/ Chunk size should be larger than FileChannelImpl.TRANSFER_SIZE (8192)\n+    \/\/ for a good test\n+    private static final int CHUNK_SIZE = 1024 * 9;\n+\n+    private static final int MIN_DIRECT_TRANSFER_SIZE = 512000;\n+\n+    private static File file;\n+    private static File outFile;\n+    private static FileChannel in;\n@@ -55,0 +74,1 @@\n+        test3();\n@@ -60,1 +80,1 @@\n-    static void test1() throws Exception {\n+    private static void test1() throws Exception {\n@@ -64,1 +84,1 @@\n-            System.err.println(\"Transferred file...\");\n+            System.err.println(\"Transferred file to user channel...\");\n@@ -68,1 +88,1 @@\n-    static void test2() throws Exception {\n+    private static void test2() throws Exception {\n@@ -72,1 +92,1 @@\n-            System.err.println(\"Transferred file...\");\n+            System.err.println(\"Transferred file to trusted channel...\");\n@@ -76,1 +96,9 @@\n-    static void transferFileToUserChannel() throws Exception {\n+    private static void test3() throws Exception {\n+        for (int i=0; i<10; i++) {\n+            transferFileDirectly();\n+            System.gc();\n+            System.err.println(\"Transferred file directly...\");\n+        }\n+    }\n+\n+    private static void transferFileToUserChannel() throws Exception {\n@@ -80,21 +108,21 @@\n-                Random rand = new Random(0);\n-                public int write(ByteBuffer src) throws IOException {\n-                    int read = src.remaining();\n-                    byte[] incoming = new byte[read];\n-                    src.get(incoming);\n-                    checkData(incoming, read);\n-                    return read == 0 ? -1 : read;\n-                }\n-                public boolean isOpen() {\n-                    return true;\n-                }\n-                public void close() throws IOException {\n-                }\n-                void checkData(byte[] incoming, int size) {\n-                    byte[] expected = new byte[size];\n-                    rand.nextBytes(expected);\n-                    for (int i=0; i<size; i++)\n-                        if (incoming[i] != expected[i])\n-                            throw new RuntimeException(\"Data corrupted\");\n-                }\n-            };\n+            Random rand = new Random(0);\n+            public int write(ByteBuffer src) throws IOException {\n+                int read = src.remaining();\n+                byte[] incoming = new byte[read];\n+                src.get(incoming);\n+                checkData(incoming, read);\n+                return read == 0 ? -1 : read;\n+            }\n+            public boolean isOpen() {\n+                return true;\n+            }\n+            public void close() throws IOException {\n+            }\n+            void checkData(byte[] incoming, int size) {\n+                byte[] expected = new byte[size];\n+                rand.nextBytes(expected);\n+                for (int i=0; i<size; i++)\n+                    if (incoming[i] != expected[i])\n+                        throw new RuntimeException(\"Data corrupted\");\n+            }\n+        };\n@@ -111,1 +139,1 @@\n-    static void transferFileToTrustedChannel() throws Exception {\n+    private static void transferFileToTrustedChannel() throws Exception {\n@@ -127,1 +155,26 @@\n-    static void generateBigFile(File file) throws Exception {\n+    private static void transferFileDirectly() throws Exception {\n+        outFile.delete();\n+        FileOutputStream fos = new FileOutputStream(outFile);\n+        FileChannel out = fos.getChannel();\n+\n+        final long size = in.size();\n+        final long position = RAND.nextInt((int)size - MIN_DIRECT_TRANSFER_SIZE);\n+        assert out.position() == 0;\n+        long pos = position;\n+        while (pos < size) {\n+            long bytesTransferred = in.transferTo(pos, Long.MAX_VALUE, out);\n+            if (bytesTransferred >= 0)\n+                pos += bytesTransferred;\n+            else\n+                throw new Exception(\"transfer failed\");\n+        }\n+        out.close();\n+\n+        byte[] expected = Files.readAllBytes(file.toPath());\n+        byte[] actual = Files.readAllBytes(outFile.toPath());\n+        if (!Arrays.equals(expected, (int)position, (int)size,\n+                           actual, 0, (int)(size - position)))\n+            throw new Exception(\"Actual bytes do not match expected bytes\");\n+    }\n+\n+    private static void generateBigFile(File file) throws Exception {\n@@ -132,1 +185,3 @@\n-        for (int i = 0; i < 1000; i++) {\n+        int numWritten = 0;\n+        while (numWritten < FILE_SIZE) {\n+            int nwrite = Math.min(randomBytes.length, FILE_SIZE - numWritten);\n@@ -134,1 +189,2 @@\n-            out.write(randomBytes);\n+            out.write(randomBytes, 0, nwrite);\n+            numWritten += nwrite;\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToChannel.java","additions":95,"deletions":39,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -435,4 +435,10 @@\n-        int n = (int)fc.transferTo(off, len, tgt.channel());\n-        if (n != len)\n-            throw new Failure(\"Incorrect transfer length: \" + n\n-                              + \" (expected \" + len + \")\");\n+        long position = off;\n+        long count = len;\n+        while (count > 0) {\n+            long n = (int)fc.transferTo(position, count, tgt.channel());\n+            if (n < 0 || n > count)\n+                throw new Failure(\"Incorrect transfer length n = : \" + n\n+                                  + \" (expected 0 <= n <= \" + len + \")\");\n+            position += n;\n+            count -= n;\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfers.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}