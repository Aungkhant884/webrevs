{"files":[{"patch":"@@ -52,0 +52,8 @@\n+  product(bool, StressIGVN, false, DIAGNOSTIC,                              \\\n+          \"Randomize worklist traversal in IGVN\")                           \\\n+                                                                            \\\n+  product(uint, StressSeed, 0, DIAGNOSTIC,                                  \\\n+          \"Seed for IGVN stress testing (if unset, a random one is \"        \\\n+          \"generated\")                                                      \\\n+          range(0, max_juint)                                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -526,0 +527,1 @@\n+                  _stress_seed(0),\n@@ -730,0 +732,12 @@\n+  \/\/ If IGVN is randomized for stress testing, seed random number\n+  \/\/ generation and log the seed for repeatability.\n+  if (StressIGVN) {\n+    _stress_seed = FLAG_IS_DEFAULT(StressSeed) ?\n+      static_cast<uint>(Ticks::now().nanoseconds()) : StressSeed;\n+    if (_log != NULL) {\n+      _log->elem(\"stress_test seed='%u'\", _stress_seed);\n+    } else if (FLAG_IS_DEFAULT(StressSeed)) {\n+      tty->print_cr(\"Warning:  set +LogCompilation to log the seed.\");\n+    }\n+  }\n+\n@@ -812,0 +826,1 @@\n+    _stress_seed(0),\n@@ -4439,2 +4454,7 @@\n-\/\/ Auxiliary method to support randomized stressing\/fuzzing.\n-\/\/\n+\/\/ Auxiliary methods to support randomized stressing\/fuzzing.\n+\n+int Compile::random() {\n+  _stress_seed = os::next_random(_stress_seed);\n+  return static_cast<int>(_stress_seed);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -304,0 +304,1 @@\n+  uint                  _stress_seed;           \/\/ Seed for stress testing\n@@ -1140,1 +1141,2 @@\n-  \/\/ Auxiliary method for randomized fuzzing\/stressing\n+  \/\/ Auxiliary methods for randomized fuzzing\/stressing\n+  int random();\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1001,0 +1001,8 @@\n+void PhaseIterGVN::shuffle_worklist() {\n+  if (_worklist.size() < 2) return;\n+  for (uint i = _worklist.size() - 1; i >= 1; i--) {\n+    uint j = C->random() % (i + 1);\n+    swap(_worklist.adr()[i], _worklist.adr()[j]);\n+  }\n+}\n+\n@@ -1153,0 +1161,3 @@\n+  if (StressIGVN) {\n+    shuffle_worklist();\n+  }\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+  \/\/ Shuffle worklist, for stress testing\n+  void shuffle_worklist();\n+\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -818,1 +818,1 @@\n-static int random_helper(unsigned int rand_seed) {\n+int os::next_random(unsigned int rand_seed) {\n@@ -856,1 +856,1 @@\n-    unsigned int rand = random_helper(seed);\n+    unsigned int rand = next_random(seed);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -759,0 +759,1 @@\n+  static int next_random(unsigned int rand_seed); \/\/ pure version of random()\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8252219\n+ * @summary Tests that different combinations of the options -XX:+StressIGVN and\n+ *          -XX:StressSeed=N are accepted.\n+ * @run main\/othervm -XX:+StressIGVN\n+ *      compiler.arguments.TestStressIGVNOptions\n+ * @run main\/othervm -XX:+StressIGVN -XX:StressSeed=42\n+ *      compiler.arguments.TestStressIGVNOptions\n+ *\/\n+\n+package compiler.arguments;\n+\n+public class TestStressIGVNOptions {\n+\n+    static public void main(String[] args) {\n+        System.out.println(\"Passed\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestStressIGVNOptions.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import java.nio.file.Paths;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8252219\n+ * @requires vm.compiler2.enabled\n+ * @summary Tests that using -XX:+StressIGVN without -XX:StressSeed=N generates\n+ *          and logs a random seed.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestGenerateStressSeed\n+ *\/\n+\n+public class TestGenerateStressSeed {\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            String className = TestGenerateStressSeed.class.getName();\n+            String log = \"test.log\";\n+            String[] procArgs = {\n+                \"-Xcomp\", \"-XX:-TieredCompilation\",\n+                \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+StressIGVN\",\n+                \"-XX:+LogCompilation\", \"-XX:LogFile=\" + log, className, \"10\"};\n+            ProcessTools.createJavaProcessBuilder(procArgs).start().waitFor();\n+            new OutputAnalyzer(Paths.get(log))\n+                .shouldContain(\"stress_test seed\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestGenerateStressSeed.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8252219\n+ * @requires vm.compiler2.enabled\n+ * @summary Tests that compilations with the same seed yield the same IGVN\n+ *          trace, and compilations with different seeds yield different IGVN\n+ *          traces.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStressIGVN\n+ *\/\n+\n+public class TestStressIGVN {\n+\n+    static String igvnTrace(int stressSeed) throws Exception {\n+        String className = TestStressIGVN.class.getName();\n+        String[] procArgs = {\n+            \"-Xcomp\", \"-XX:-TieredCompilation\",\n+            \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+TraceIterativeGVN\",\n+            \"-XX:+StressIGVN\", \"-XX:StressSeed=\" + stressSeed,\n+            className, \"10\"};\n+        ProcessBuilder pb  = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        return out.getStdout();\n+    }\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            Asserts.assertEQ(igvnTrace(10), igvnTrace(10),\n+                \"got different IGVN traces for the same seed\");\n+            Asserts.assertNE(igvnTrace(10), igvnTrace(20),\n+                \"got the same IGVN trace for different seeds\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressIGVN.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}