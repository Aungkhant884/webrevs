{"files":[{"patch":"@@ -52,0 +52,10 @@\n+  product(bool, StressIGVN, false, DIAGNOSTIC,                              \\\n+          \"Randomize worklist traversal in IGVN\")                           \\\n+                                                                            \\\n+  product(bool, GenerateStressSeed, false, DIAGNOSTIC,                      \\\n+          \"Generate random seed for LCM, GCM, and IGVN stress testing\")     \\\n+                                                                            \\\n+  product(uintx, StressSeed, 0, DIAGNOSTIC,                                 \\\n+          \"Random seed for LCM, GCM, and IGVN stress testing\")              \\\n+          range(0, max_uintx)                                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -730,0 +730,14 @@\n+  \/\/ If any phase is randomized for stress testing, seed random\n+  \/\/ number generation and log the seed for repeatability.\n+  if (StressLCM || StressGCM || StressIGVN) {\n+    unsigned int seed = GenerateStressSeed ?\n+      (unsigned int)(Ticks::now().nanoseconds()) : StressSeed;\n+    os::init_random(seed);\n+    if (_log != NULL) {\n+      _log->elem(\"stress_test seed='%u'\", seed);\n+    } else if (GenerateStressSeed) {\n+      tty->print_cr(\"Warning:  +LogCompilation must be set to record \"\n+                    \"the generated seed.\");\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2428,0 +2428,8 @@\n+void Node_List::shuffle() {\n+  if (_cnt < 2) return;\n+  for (uint i = _cnt - 1; i >= 1; i--) {\n+    uint j = os::random() % (i + 1);\n+    swap(_nodes[i], _nodes[j]);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1517,0 +1517,1 @@\n+  void shuffle();\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1153,0 +1153,1 @@\n+  if (StressIGVN) _worklist.shuffle();\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import java.nio.file.Paths;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8252219\n+ * @requires vm.compiler2.enabled\n+ * @summary Tests that -XX:+GenerateStressSeed is accepted, and that, in\n+ *          combination with one of the -XX:+StressX options, C2 generates and\n+ *          logs a seed.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestGenerateStressSeed\n+ *\/\n+\n+public class TestGenerateStressSeed {\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            String className = TestGenerateStressSeed.class.getName();\n+            String log = \"test.log\";\n+            String[] procArgs = {\n+                \"-Xcomp\", \"-XX:-TieredCompilation\",\n+                \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+StressIGVN\",\n+                \"-XX:+GenerateStressSeed\", \"-XX:+LogCompilation\",\n+                \"-XX:LogFile=\" + log, className, \"10\"};\n+            ProcessTools.createJavaProcessBuilder(procArgs).start().waitFor();\n+            new OutputAnalyzer(Paths.get(log))\n+                .shouldContain(\"stress_test seed\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestGenerateStressSeed.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8252219\n+ * @requires vm.compiler2.enabled\n+ * @summary Tests that:\n+ *          1) the options -XX:+StressIGVN and -XX:+StressSeed=N are accepted,\n+ *          2) compilations with the same seed yield the same IGVN trace, and\n+ *          3) compilations with different seeds yield different IGVN traces.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStressIGVN\n+ *\/\n+\n+public class TestStressIGVN {\n+\n+    static String igvnTrace(int stressSeed) throws Exception {\n+        String className = TestStressIGVN.class.getName();\n+        String[] procArgs = {\n+            \"-Xcomp\", \"-XX:-TieredCompilation\",\n+            \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+TraceIterativeGVN\",\n+            \"-XX:+StressIGVN\", \"-XX:StressSeed=\" + stressSeed,\n+            className, \"10\"};\n+        ProcessBuilder pb  = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        return out.getStdout();\n+    }\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            Asserts.assertEQ(igvnTrace(10), igvnTrace(10),\n+                \"got different IGVN traces for the same seed\");\n+            Asserts.assertNE(igvnTrace(10), igvnTrace(20),\n+                \"got the same IGVN trace for different seeds\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressIGVN.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}