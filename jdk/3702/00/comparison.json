{"files":[{"patch":"@@ -186,4 +186,4 @@\n-  static ByteSize start_offset()                 { return byte_offset_of(ThreadLocalAllocBuffer, _start); }\n-  static ByteSize end_offset()                   { return byte_offset_of(ThreadLocalAllocBuffer, _end); }\n-  static ByteSize top_offset()                   { return byte_offset_of(ThreadLocalAllocBuffer, _top); }\n-  static ByteSize pf_top_offset()                { return byte_offset_of(ThreadLocalAllocBuffer, _pf_top); }\n+  static constexpr ByteSize start_offset()       { return byte_offset_of(ThreadLocalAllocBuffer, _start); }\n+  static constexpr ByteSize end_offset()         { return byte_offset_of(ThreadLocalAllocBuffer, _end); }\n+  static constexpr ByteSize top_offset()         { return byte_offset_of(ThreadLocalAllocBuffer, _top); }\n+  static constexpr ByteSize pf_top_offset()      { return byte_offset_of(ThreadLocalAllocBuffer, _pf_top); }\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,2 +90,2 @@\n-  static ByteSize last_Java_sp_offset()          { return byte_offset_of(JavaFrameAnchor, _last_Java_sp); }\n-  static ByteSize last_Java_pc_offset()          { return byte_offset_of(JavaFrameAnchor, _last_Java_pc); }\n+  static constexpr ByteSize last_Java_sp_offset() { return byte_offset_of(JavaFrameAnchor, _last_Java_sp); }\n+  static constexpr ByteSize last_Java_pc_offset() { return byte_offset_of(JavaFrameAnchor, _last_Java_pc); }\n","filename":"src\/hotspot\/share\/runtime\/javaFrameAnchor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2315,1 +2315,1 @@\n-ByteSize JavaThread::popframe_preserved_args_size() {\n+ByteSize JavaThread::popframe_preserved_args_size() const {\n@@ -2319,1 +2319,1 @@\n-WordSize JavaThread::popframe_preserved_args_size_in_words() {\n+WordSize JavaThread::popframe_preserved_args_size_in_words() const {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  static ByteSize gc_data_offset() {\n+  static constexpr ByteSize gc_data_offset() {\n@@ -201,1 +201,1 @@\n-  uint nested_threads_hazard_ptr_cnt() {\n+  uint nested_threads_hazard_ptr_cnt() const {\n@@ -253,1 +253,1 @@\n-  bool is_suspendible_thread() { return _suspendible_thread; }\n+  bool is_suspendible_thread() const { return _suspendible_thread; }\n@@ -286,1 +286,1 @@\n-  ICRefillVerifier* missed_ic_stub_refill_verifier() {\n+  ICRefillVerifier* missed_ic_stub_refill_verifier() const {\n@@ -358,4 +358,0 @@\n-  enum {\n-    is_definitely_current_thread = true\n-  };\n-\n@@ -487,1 +483,1 @@\n-  bool skip_gcalot()           { return _skip_gcalot; }\n+  bool skip_gcalot() const     { return _skip_gcalot; }\n@@ -515,1 +511,1 @@\n-  ThreadLocalAllocBuffer& tlab()                 { return _tlab; }\n+  ThreadLocalAllocBuffer& tlab() { return _tlab; }\n@@ -518,1 +514,1 @@\n-  jlong allocated_bytes()               { return _allocated_bytes; }\n+  jlong allocated_bytes() const         { return _allocated_bytes; }\n@@ -523,1 +519,1 @@\n-  ThreadHeapSampler& heap_sampler()     { return _heap_sampler; }\n+  ThreadHeapSampler& heap_sampler() { return _heap_sampler; }\n@@ -529,1 +525,1 @@\n-  bool is_trace_suspend()               { return (_suspend_flags & _trace_flag) != 0; }\n+  bool is_trace_suspend() const         { return (_suspend_flags & _trace_flag) != 0; }\n@@ -531,1 +527,1 @@\n-  bool is_obj_deopt_suspend()           { return (_suspend_flags & _obj_deopt) != 0; }\n+  bool is_obj_deopt_suspend() const     { return (_suspend_flags & _obj_deopt) != 0; }\n@@ -534,1 +530,1 @@\n-  ObjectMonitor* current_pending_monitor() {\n+  ObjectMonitor* current_pending_monitor() const {\n@@ -543,1 +539,1 @@\n-  bool current_pending_monitor_is_from_java() {\n+  bool current_pending_monitor_is_from_java() const {\n@@ -548,1 +544,1 @@\n-  ObjectMonitor* current_waiting_monitor() {\n+  ObjectMonitor* current_waiting_monitor() const {\n@@ -556,1 +552,1 @@\n-  JvmtiRawMonitor* current_pending_raw_monitor() {\n+  JvmtiRawMonitor* current_pending_raw_monitor() const {\n@@ -702,1 +698,1 @@\n-  ResourceMark* current_resource_mark()          { return _current_resource_mark; }\n+  ResourceMark* current_resource_mark() const    { return _current_resource_mark; }\n@@ -717,1 +713,1 @@\n-  bool is_inside_jvmti_env_iteration()           { return _jvmti_env_iteration_count > 0; }\n+  bool is_inside_jvmti_env_iteration() const     { return _jvmti_env_iteration_count > 0; }\n@@ -720,3 +716,3 @@\n-  static ByteSize exception_file_offset()        { return byte_offset_of(Thread, _exception_file); }\n-  static ByteSize exception_line_offset()        { return byte_offset_of(Thread, _exception_line); }\n-  static ByteSize active_handles_offset()        { return byte_offset_of(Thread, _active_handles); }\n+  static constexpr ByteSize exception_file_offset()        { return byte_offset_of(Thread, _exception_file); }\n+  static constexpr ByteSize exception_line_offset()        { return byte_offset_of(Thread, _exception_line); }\n+  static constexpr ByteSize active_handles_offset()        { return byte_offset_of(Thread, _active_handles); }\n@@ -724,2 +720,2 @@\n-  static ByteSize stack_base_offset()            { return byte_offset_of(Thread, _stack_base); }\n-  static ByteSize stack_size_offset()            { return byte_offset_of(Thread, _stack_size); }\n+  static constexpr ByteSize stack_base_offset()            { return byte_offset_of(Thread, _stack_base); }\n+  static constexpr ByteSize stack_size_offset()            { return byte_offset_of(Thread, _stack_size); }\n@@ -727,2 +723,2 @@\n-  static ByteSize polling_word_offset()          { return byte_offset_of(Thread, _poll_data) + byte_offset_of(SafepointMechanism::ThreadData, _polling_word);}\n-  static ByteSize polling_page_offset()          { return byte_offset_of(Thread, _poll_data) + byte_offset_of(SafepointMechanism::ThreadData, _polling_page);}\n+  static constexpr ByteSize polling_word_offset()          { return byte_offset_of(Thread, _poll_data) + byte_offset_of(SafepointMechanism::ThreadData, _polling_word);}\n+  static constexpr ByteSize polling_page_offset()          { return byte_offset_of(Thread, _poll_data) + byte_offset_of(SafepointMechanism::ThreadData, _polling_page);}\n@@ -730,4 +726,4 @@\n-  static ByteSize tlab_start_offset()            { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::start_offset(); }\n-  static ByteSize tlab_end_offset()              { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::end_offset(); }\n-  static ByteSize tlab_top_offset()              { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::top_offset(); }\n-  static ByteSize tlab_pf_top_offset()           { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::pf_top_offset(); }\n+  static constexpr ByteSize tlab_start_offset()            { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::start_offset(); }\n+  static constexpr ByteSize tlab_end_offset()              { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::end_offset(); }\n+  static constexpr ByteSize tlab_top_offset()              { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::top_offset(); }\n+  static constexpr ByteSize tlab_pf_top_offset()           { return byte_offset_of(Thread, _tlab) + ThreadLocalAllocBuffer::pf_top_offset(); }\n@@ -735,1 +731,1 @@\n-  static ByteSize allocated_bytes_offset()       { return byte_offset_of(Thread, _allocated_bytes); }\n+  static constexpr ByteSize allocated_bytes_offset()       { return byte_offset_of(Thread, _allocated_bytes); }\n@@ -748,1 +744,1 @@\n-  bool has_terminated()                       { return Atomic::load(&_ParkEvent) == NULL; };\n+  bool has_terminated() const                 { return Atomic::load(&_ParkEvent) == NULL; };\n@@ -815,1 +811,1 @@\n-  int  java_call_counter()                       { return _java_call_counter; }\n+  int  java_call_counter() const                 { return _java_call_counter; }\n@@ -824,8 +820,0 @@\n-#ifndef PRODUCT\n- public:\n-  enum {\n-    jump_ring_buffer_size = 16\n-  };\n- private:  \/\/ restore original namespace restriction\n-#endif\n-\n@@ -1089,1 +1077,1 @@\n-  intptr_t* last_Java_sp() const                 { return _anchor.last_Java_sp(); }\n+  intptr_t* last_Java_sp()   const               { return _anchor.last_Java_sp(); }\n@@ -1121,1 +1109,1 @@\n-  bool doing_unsafe_access()                     { return _doing_unsafe_access; }\n+  bool doing_unsafe_access() const               { return _doing_unsafe_access; }\n@@ -1124,1 +1112,1 @@\n-  bool do_not_unlock_if_synchronized()             { return _do_not_unlock_if_synchronized; }\n+  bool do_not_unlock_if_synchronized() const       { return _do_not_unlock_if_synchronized; }\n@@ -1164,1 +1152,1 @@\n-  bool has_async_condition() { return (_special_runtime_exit_condition != _no_async_condition); }\n+  bool has_async_condition() const { return (_special_runtime_exit_condition != _no_async_condition); }\n@@ -1173,1 +1161,1 @@\n-  bool has_special_runtime_exit_condition() {\n+  bool has_special_runtime_exit_condition() const {\n@@ -1203,1 +1191,1 @@\n-  DeoptResourceMark* deopt_mark(void)            { return _deopt_mark; }\n+  DeoptResourceMark* deopt_mark(void) const      { return _deopt_mark; }\n@@ -1206,1 +1194,1 @@\n-  CompiledMethod* deopt_compiled_method()        { return _deopt_nmethod; }\n+  CompiledMethod* deopt_compiled_method() const  { return _deopt_nmethod; }\n@@ -1209,1 +1197,1 @@\n-  void set_callee_target  (Method* x)          { _callee_target   = x; }\n+  void set_callee_target  (Method* x)            { _callee_target   = x; }\n@@ -1216,1 +1204,1 @@\n-  void set_vm_result_2  (Metadata* x)          { _vm_result_2   = x; }\n+  void set_vm_result_2  (Metadata* x)            { _vm_result_2   = x; }\n@@ -1262,1 +1250,1 @@\n-  bool do_not_unlock(void)                       { return _do_not_unlock_if_synchronized; }\n+  bool do_not_unlock(void) const                 { return _do_not_unlock_if_synchronized; }\n@@ -1265,3 +1253,3 @@\n-  static ByteSize threadObj_offset()             { return byte_offset_of(JavaThread, _threadObj); }\n-  static ByteSize jni_environment_offset()       { return byte_offset_of(JavaThread, _jni_environment); }\n-  static ByteSize pending_jni_exception_check_fn_offset() {\n+  static constexpr ByteSize threadObj_offset()             { return byte_offset_of(JavaThread, _threadObj); }\n+  static constexpr ByteSize jni_environment_offset()       { return byte_offset_of(JavaThread, _jni_environment); }\n+  static constexpr ByteSize pending_jni_exception_check_fn_offset() {\n@@ -1270,1 +1258,1 @@\n-  static ByteSize last_Java_sp_offset() {\n+  static constexpr ByteSize last_Java_sp_offset() {\n@@ -1273,1 +1261,1 @@\n-  static ByteSize last_Java_pc_offset() {\n+  static constexpr ByteSize last_Java_pc_offset() {\n@@ -1276,1 +1264,1 @@\n-  static ByteSize frame_anchor_offset() {\n+  static constexpr ByteSize frame_anchor_offset() {\n@@ -1279,6 +1267,6 @@\n-  static ByteSize callee_target_offset()         { return byte_offset_of(JavaThread, _callee_target); }\n-  static ByteSize vm_result_offset()             { return byte_offset_of(JavaThread, _vm_result); }\n-  static ByteSize vm_result_2_offset()           { return byte_offset_of(JavaThread, _vm_result_2); }\n-  static ByteSize thread_state_offset()          { return byte_offset_of(JavaThread, _thread_state); }\n-  static ByteSize saved_exception_pc_offset()    { return byte_offset_of(JavaThread, _saved_exception_pc); }\n-  static ByteSize osthread_offset()              { return byte_offset_of(JavaThread, _osthread); }\n+  static constexpr ByteSize callee_target_offset()         { return byte_offset_of(JavaThread, _callee_target); }\n+  static constexpr ByteSize vm_result_offset()             { return byte_offset_of(JavaThread, _vm_result); }\n+  static constexpr ByteSize vm_result_2_offset()           { return byte_offset_of(JavaThread, _vm_result_2); }\n+  static constexpr ByteSize thread_state_offset()          { return byte_offset_of(JavaThread, _thread_state); }\n+  static constexpr ByteSize saved_exception_pc_offset()    { return byte_offset_of(JavaThread, _saved_exception_pc); }\n+  static constexpr ByteSize osthread_offset()              { return byte_offset_of(JavaThread, _osthread); }\n@@ -1286,6 +1274,6 @@\n-  static ByteSize pending_deoptimization_offset() { return byte_offset_of(JavaThread, _pending_deoptimization); }\n-  static ByteSize pending_monitorenter_offset()  { return byte_offset_of(JavaThread, _pending_monitorenter); }\n-  static ByteSize pending_failed_speculation_offset() { return byte_offset_of(JavaThread, _pending_failed_speculation); }\n-  static ByteSize jvmci_alternate_call_target_offset() { return byte_offset_of(JavaThread, _jvmci._alternate_call_target); }\n-  static ByteSize jvmci_implicit_exception_pc_offset() { return byte_offset_of(JavaThread, _jvmci._implicit_exception_pc); }\n-  static ByteSize jvmci_counters_offset()        { return byte_offset_of(JavaThread, _jvmci_counters); }\n+  static constexpr ByteSize pending_deoptimization_offset() { return byte_offset_of(JavaThread, _pending_deoptimization); }\n+  static constexpr ByteSize pending_monitorenter_offset()  { return byte_offset_of(JavaThread, _pending_monitorenter); }\n+  static constexpr ByteSize pending_failed_speculation_offset() { return byte_offset_of(JavaThread, _pending_failed_speculation); }\n+  static constexpr ByteSize jvmci_alternate_call_target_offset() { return byte_offset_of(JavaThread, _jvmci._alternate_call_target); }\n+  static constexpr ByteSize jvmci_implicit_exception_pc_offset() { return byte_offset_of(JavaThread, _jvmci._implicit_exception_pc); }\n+  static constexpr ByteSize jvmci_counters_offset()        { return byte_offset_of(JavaThread, _jvmci_counters); }\n@@ -1293,4 +1281,4 @@\n-  static ByteSize exception_oop_offset()         { return byte_offset_of(JavaThread, _exception_oop); }\n-  static ByteSize exception_pc_offset()          { return byte_offset_of(JavaThread, _exception_pc); }\n-  static ByteSize exception_handler_pc_offset()  { return byte_offset_of(JavaThread, _exception_handler_pc); }\n-  static ByteSize is_method_handle_return_offset() { return byte_offset_of(JavaThread, _is_method_handle_return); }\n+  static constexpr ByteSize exception_oop_offset()         { return byte_offset_of(JavaThread, _exception_oop); }\n+  static constexpr ByteSize exception_pc_offset()          { return byte_offset_of(JavaThread, _exception_pc); }\n+  static constexpr ByteSize exception_handler_pc_offset()  { return byte_offset_of(JavaThread, _exception_handler_pc); }\n+  static constexpr ByteSize is_method_handle_return_offset() { return byte_offset_of(JavaThread, _is_method_handle_return); }\n@@ -1299,1 +1287,1 @@\n-  static ByteSize stack_overflow_limit_offset()  {\n+  static constexpr ByteSize stack_overflow_limit_offset()  {\n@@ -1302,1 +1290,1 @@\n-  static ByteSize stack_guard_state_offset()     {\n+  static constexpr ByteSize stack_guard_state_offset()     {\n@@ -1305,1 +1293,1 @@\n-  static ByteSize reserved_stack_activation_offset() {\n+  static constexpr ByteSize reserved_stack_activation_offset() {\n@@ -1309,1 +1297,1 @@\n-  static ByteSize suspend_flags_offset()         { return byte_offset_of(JavaThread, _suspend_flags); }\n+  static constexpr ByteSize suspend_flags_offset()         { return byte_offset_of(JavaThread, _suspend_flags); }\n@@ -1311,2 +1299,2 @@\n-  static ByteSize do_not_unlock_if_synchronized_offset() { return byte_offset_of(JavaThread, _do_not_unlock_if_synchronized); }\n-  static ByteSize should_post_on_exceptions_flag_offset() {\n+  static constexpr ByteSize do_not_unlock_if_synchronized_offset() { return byte_offset_of(JavaThread, _do_not_unlock_if_synchronized); }\n+  static constexpr ByteSize should_post_on_exceptions_flag_offset() {\n@@ -1315,2 +1303,2 @@\n-  static ByteSize doing_unsafe_access_offset() { return byte_offset_of(JavaThread, _doing_unsafe_access); }\n-  NOT_PRODUCT(static ByteSize requires_cross_modify_fence_offset()  { return byte_offset_of(JavaThread, _requires_cross_modify_fence); })\n+  static constexpr ByteSize doing_unsafe_access_offset() { return byte_offset_of(JavaThread, _doing_unsafe_access); }\n+  NOT_PRODUCT(static constexpr ByteSize requires_cross_modify_fence_offset()  { return byte_offset_of(JavaThread, _requires_cross_modify_fence); })\n@@ -1334,2 +1322,2 @@\n-  bool in_critical()    { return _jni_active_critical > 0; }\n-  bool in_last_critical()  { return _jni_active_critical == 1; }\n+  bool in_critical() const   { return _jni_active_critical > 0; }\n+  bool in_last_critical() const  { return _jni_active_critical == 1; }\n@@ -1485,1 +1473,1 @@\n-  PopCondition popframe_condition()                   { return (PopCondition) _popframe_condition; }\n+  PopCondition popframe_condition() const             { return (PopCondition) _popframe_condition; }\n@@ -1489,3 +1477,3 @@\n-  static ByteSize popframe_condition_offset()         { return byte_offset_of(JavaThread, _popframe_condition); }\n-  bool has_pending_popframe()                         { return (popframe_condition() & popframe_pending_bit) != 0; }\n-  bool popframe_forcing_deopt_reexecution()           { return (popframe_condition() & popframe_force_deopt_reexecution_bit) != 0; }\n+  static constexpr ByteSize popframe_condition_offset() { return byte_offset_of(JavaThread, _popframe_condition); }\n+  bool has_pending_popframe() const                   { return (popframe_condition() & popframe_pending_bit) != 0; }\n+  bool popframe_forcing_deopt_reexecution() const     { return (popframe_condition() & popframe_force_deopt_reexecution_bit) != 0; }\n@@ -1494,1 +1482,1 @@\n-  bool pop_frame_in_process(void)                     { return ((_popframe_condition & popframe_processing_bit) != 0); }\n+  bool pop_frame_in_process(void) const               { return ((_popframe_condition & popframe_processing_bit) != 0); }\n@@ -1511,2 +1499,2 @@\n-  ByteSize popframe_preserved_args_size();\n-  WordSize popframe_preserved_args_size_in_words();\n+  ByteSize popframe_preserved_args_size() const;\n+  WordSize popframe_preserved_args_size_in_words() const;\n@@ -1530,3 +1518,3 @@\n-  static ByteSize interp_only_mode_offset() { return byte_offset_of(JavaThread, _interp_only_mode); }\n-  bool is_interp_only_mode()                { return (_interp_only_mode != 0); }\n-  int get_interp_only_mode()                { return _interp_only_mode; }\n+  static constexpr ByteSize interp_only_mode_offset() { return byte_offset_of(JavaThread, _interp_only_mode); }\n+  bool is_interp_only_mode() const          { return (_interp_only_mode != 0); }\n+  int get_interp_only_mode() const          { return _interp_only_mode; }\n@@ -1543,1 +1531,1 @@\n-  int   should_post_on_exceptions_flag()  { return _should_post_on_exceptions_flag; }\n+  int   should_post_on_exceptions_flag() const { return _should_post_on_exceptions_flag; }\n@@ -1579,1 +1567,1 @@\n-  GrowableArray<MonitorInfo*>* cached_monitor_info() { return _cached_monitor_info; }\n+  GrowableArray<MonitorInfo*>* cached_monitor_info() const { return _cached_monitor_info; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":84,"deletions":96,"binary":false,"changes":180,"status":"modified"}]}