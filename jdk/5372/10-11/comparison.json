{"files":[{"patch":"@@ -830,1 +830,1 @@\n-     * is non-blank (as determined by {@link String#isBlank String.isBlank}),\n+     * is non-empty (as determined by {@link String#isEmpty()  String.isEmpty}),\n@@ -834,1 +834,1 @@\n-     * If the system property is not set or is blank, a comment line is written\n+     * If the system property is not set or is empty, a comment line is written\n@@ -854,6 +854,0 @@\n-     * @implNote Although this method doesn't mandate it, conventionally,\n-     * the value of the {@systemProperty java.util.Properties.storeDate}\n-     * system property, if set, represents a formatted date time value that can be\n-     * parsed back into a {@link Date} using an appropriate\n-     * {@link DateTimeFormatter}\n-     *\n@@ -956,5 +950,6 @@\n-        String dateComment = (storeDate != null && !storeDate.isBlank())\n-                ? \"#\" + storeDate\n-                : \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern).format(ZonedDateTime.now());\n-        bw.write(dateComment);\n-        bw.newLine();\n+        if (storeDate != null && !storeDate.isEmpty()) {\n+            writeComments(bw, storeDate);\n+        } else {\n+            bw.write(\"#\" + DateTimeFormatter.ofPattern(dateFormatPattern).format(ZonedDateTime.now()));\n+            bw.newLine();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -71,0 +71,4 @@\n+        \/\/ empty value for java.util.Properties.storeDate system property\n+        testEmptyStoreDateValue();\n+        \/\/ value for java.util.Properties.storeDate system property contains line terminator characters\n+        testMultiLineStoreDateValue();\n@@ -194,1 +198,1 @@\n-     * properties to a file. The launched Java program is passed a blank value\n+     * properties to a file. The launched Java program is passed a {@link String#isBlank() blank} value\n@@ -197,2 +201,2 @@\n-     * will cause the date comment to use the current date time. The launched program is expected to complete\n-     * without any errors.\n+     * will cause a comment line to be written out with only whitespaces.\n+     * The launched program is expected to complete without any errors.\n@@ -208,0 +212,31 @@\n+            executeJavaProcess(processBuilder);\n+            if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n+                throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n+            }\n+            String blankCommentLine = findNthComment(tmpFile, 2);\n+            if (blankCommentLine == null) {\n+                throw new RuntimeException(\"Comment line representing the value of \"\n+                        + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \" system property is missing in file \" + tmpFile);\n+            }\n+            if (!blankCommentLine.isBlank()) {\n+                throw new RuntimeException(\"Expected comment line to be blank but was \" + blankCommentLine);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Launches a Java program which is responsible for using Properties.store() to write out the\n+     * properties to a file. The launched Java program is passed a {@link String#isEmpty() empty} value\n+     * for the {@code java.util.Properties.storeDate} system property.\n+     * It is expected and verified in this test that such a value for the system property\n+     * will cause the current date and time to be written out as a comment.\n+     * The launched program is expected to complete without any errors.\n+     *\/\n+    private static void testEmptyStoreDateValue() throws Exception {\n+        for (int i = 0; i < 2; i++) {\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n+            final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + \"\",\n+                    StoreTest.class.getName(),\n+                    tmpFile.toString(),\n+                    i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n@@ -245,0 +280,38 @@\n+    \/**\n+     * Launches a Java program which is responsible for using Properties.store() to write out the\n+     * properties to a file. The launched Java program is passed the {@code java.util.Properties.storeDate}\n+     * system property with a value that has line terminator characters.\n+     * It is expected and verified in this test that such a value for the system property\n+     * will cause the comment written out to be multiple separate comments. The launched program is expected\n+     * to complete without any errors.\n+     *\/\n+    private static void testMultiLineStoreDateValue() throws Exception {\n+        final String[] storeDates = {\"hello-world\\nc=d\", \"hello-world\\rc=d\", \"hello-world\\r\\nc=d\"};\n+        for (final String storeDate : storeDates) {\n+            for (int i = 0; i < 2; i++) {\n+                final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n+                final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+                        \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n+                        StoreTest.class.getName(),\n+                        tmpFile.toString(),\n+                        i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n+                executeJavaProcess(processBuilder);\n+                if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n+                    throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n+                }\n+                \/\/ verify this results in 2 separate comment lines in the stored file\n+                String commentLine1 = findNthComment(tmpFile, 2);\n+                String commentLine2 = findNthComment(tmpFile, 3);\n+                if (commentLine1 == null || commentLine2 == null) {\n+                    throw new RuntimeException(\"Did not find the expected multi-line comments in \" + tmpFile);\n+                }\n+                if (!commentLine1.equals(\"hello-world\")) {\n+                    throw new RuntimeException(\"Unexpected comment line \" + commentLine1 + \" in \" + tmpFile);\n+                }\n+                if (!commentLine2.equals(\"c=d\")) {\n+                    throw new RuntimeException(\"Unexpected comment line \" + commentLine2 + \" in \" + tmpFile);\n+                }\n+            }\n+        }\n+    }\n+\n@@ -279,2 +352,3 @@\n-     * Verifies that the date comment in the {@code destFile} can be parsed and the time\n-     * represented by it is {@link Date#after(Date) after} the passed {@code date}\n+     * Verifies that the date comment in the {@code destFile} can be parsed using the\n+     * \"EEE MMM dd HH:mm:ss zzz yyyy\" format and the time represented by it is {@link Date#after(Date) after}\n+     * the passed {@code date}\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":79,"deletions":5,"binary":false,"changes":84,"status":"modified"}]}