{"files":[{"patch":"@@ -829,4 +829,10 @@\n-     * Next, a comment line is always written, consisting of an ASCII\n-     * {@code #} character, the current date and time (formatted using the\n-     * {@code EEE MMM dd HH:mm:ss zzz yyyy} {@link DateTimeFormatter date format}),\n-     * and a line separator as generated by the {@code Writer}.\n+     * If the {@systemProperty java.util.Properties.storeDate} is set and\n+     * is non-blank (as determined by {@link String#isBlank String.isBlank}),\n+     * a comment line is written as follows.\n+     * First, a {@code #} character is written, followed by the contents\n+     * of the property, followed by a line separator.\n+     * If the system property is not set or is blank, a comment line is written\n+     * as follows.\n+     * First, a {@code #} character is written, followed by the current date and time\n+     * formatted as if by {@link DateTimeFormatter} with the format\n+     * {@code \"EEE MMM dd HH:mm:ss zzz yyyy\"}, followed by a line separator.\n@@ -848,7 +854,4 @@\n-     * @implNote When writing the date comment, this method checks whether the\n-     * {@systemProperty java.util.Properties.storeDate} system property is set.\n-     * If it is set and its value is not {@link String#isBlank() blank},\n-     * then that value is written as a comment instead of writing the\n-     * current date and time. Although this method doesn't mandate it, conventionally,\n-     * the value of this system property represents a formatted\n-     * date time value that can be parsed back into a {@link Date} using an appropriate\n+     * @implNote Although this method doesn't mandate it, conventionally,\n+     * the value of the {@systemProperty java.util.Properties.storeDate}\n+     * system property, if set, represents a formatted date time value that can be\n+     * parsed back into a {@link Date} using an appropriate\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}