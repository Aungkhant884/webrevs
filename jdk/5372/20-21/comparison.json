{"files":[{"patch":"@@ -764,3 +764,0 @@\n-     * <tr><th scope=\"row\">{@systemProperty java.properties.date}<\/th>\n-     *     <td>Text for the comment that must replace the default date comment\n-     *     written out by {@code Properties.store()} methods <em>(optional)<\/em> <\/td><\/tr>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -924,4 +924,6 @@\n-            \/\/ entrySet() can be overridden by subclasses. Here we check to see if the returned instance type is the one\n-            \/\/ returned by the Properties.entrySet() implementation. If yes, then we sort those entries\n-            \/\/ in the natural order of their key. Else, we consider that the subclassed implementation may potentially\n-            \/\/ have returned a differently ordered entries and so we just use the iteration order of the returned instance.\n+            \/\/ entrySet() can be overridden by subclasses. Here we check to see if\n+            \/\/ the returned instance type is the one returned by the Properties.entrySet()\n+            \/\/ implementation. If yes, then we sort those entries in the natural order\n+            \/\/ of their key. Else, we consider that the subclassed implementation may\n+            \/\/ potentially have returned a differently ordered entries and so we just\n+            \/\/ use the iteration order of the returned instance.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}