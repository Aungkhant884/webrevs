{"files":[{"patch":"@@ -177,4 +177,4 @@\n-        \/\/ formatter used while writing out current date. this formatter matches the format\n-        \/\/ used by java.util.Date.toString()\n-        private static final DateTimeFormatter currentDateFormatter =\n-                DateTimeFormatter.ofPattern(\"EEE MMM dd HH:mm:ss zzz yyyy\");\n+        \/\/ format that matches the one used by java.util.Date.toString()\n+        private static final String dateFormatPattern = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n+        \/\/ formatter used while writing out current date\n+        private static final DateTimeFormatter currentDateFormatter = DateTimeFormatter.ofPattern(dateFormatPattern);\n@@ -192,1 +192,1 @@\n-                    dateComment = \"#\" + DateTimeFormatter.RFC_1123_DATE_TIME\n+                    dateComment = \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern)\n@@ -961,10 +961,6 @@\n-            var entries = map.entrySet().toArray(new Map.Entry<?, ?>[0]);\n-            Arrays.sort(entries, new Comparator<Map.Entry<?, ?>>() {\n-                @Override\n-                public int compare(Map.Entry<?, ?> o1, Map.Entry<?, ?> o2) {\n-                    return ((String) o1.getKey()).compareTo((String) o2.getKey());\n-                }\n-            });\n-            for (Map.Entry<?, ?> e : entries) {\n-                String key = (String)e.getKey();\n-                String val = (String)e.getValue();\n+            @SuppressWarnings(\"unchecked\")\n+            var entries = new ArrayList<>(((Map<String, String>) (Map) map).entrySet());\n+            entries.sort(Map.Entry.comparingByKey());\n+            for (Map.Entry<String, String> e : entries) {\n+                String key = e.getKey();\n+                String val = e.getValue();\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    private static final String dateCommentFormat = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n+\n@@ -185,1 +187,1 @@\n-            new SimpleDateFormat(\"EEE MMM dd hh:mm:ss zzz yyyy\").parse(comment);\n+            new SimpleDateFormat(dateCommentFormat).parse(comment);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.TimeZone;\n@@ -56,0 +57,1 @@\n+    private static final String dateCommentFormat = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n@@ -219,1 +221,2 @@\n-        } catch (Exception e) {\n+        } finally {\n+            \/\/ print out any stdout\/err that was generated in the launched program\n@@ -221,1 +224,0 @@\n-            throw e;\n@@ -244,0 +246,1 @@\n+        System.out.println(\"Found date comment \" + dateComment + \" in file \" + destFile);\n@@ -246,1 +249,1 @@\n-            var d = DateTimeFormatter.RFC_1123_DATE_TIME\n+            var d = DateTimeFormatter.ofPattern(dateCommentFormat)\n@@ -272,0 +275,1 @@\n+        System.out.println(\"Found date comment \" + dateComment + \" in file \" + destFile);\n@@ -274,1 +278,1 @@\n-            parsedDate = new SimpleDateFormat(\"EEE MMM dd hh:mm:ss zzz yyyy\").parse(dateComment);\n+            parsedDate = new SimpleDateFormat(dateCommentFormat).parse(dateComment);\n@@ -279,1 +283,2 @@\n-            throw new RuntimeException(\"Expected \" + parsedDate + \" to be after \" + date);\n+            throw new RuntimeException(\"Expected date comment \" + dateComment + \" to be after \" + date\n+                    + \" but was \" + parsedDate);\n@@ -326,0 +331,1 @@\n+            System.out.println(\"Current default timezone is \" + TimeZone.getDefault());\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}