{"files":[{"patch":"@@ -850,9 +850,6 @@\n-     * If it is set, then its value is expected to represent epoch seconds,\n-     * which is the number of seconds, excluding leap seconds,\n-     * since 01 Jan 1970 00:00:00 UTC. When this system property is set,\n-     * then instead of writing the current date and time, the date and time\n-     * represented by the system property value will be written, using the\n-     * {@code EEE MMM dd HH:mm:ss zzz yyyy} {@link DateTimeFormatter date format} with a\n-     * {@link Locale#ROOT root locale} and {@link ZoneOffset#UTC UTC zone offset}.\n-     * If the value set for this system property cannot be parsed to a {@code long},\n-     * then the current date and time will be written.\n+     * If it is set and its value is not {@link String#isBlank() blank},\n+     * then that value is written as a comment instead of writing the\n+     * current date and time. Although this method doesn't mandate it, conventionally,\n+     * the value of this system property represents a formatted\n+     * date time value that can be parsed back into a {@link Date} using an appropriate\n+     * {@link DateTimeFormatter}\n@@ -956,16 +953,4 @@\n-        String dateComment = null;\n-        if (storeDate != null) {\n-            try {\n-                long epochSeconds = Long.parseLong(storeDate);\n-                dateComment = \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern)\n-                        .withLocale(Locale.ROOT)\n-                        .withZone(ZoneOffset.UTC)\n-                        .format(Instant.ofEpochSecond(epochSeconds));\n-            } catch (NumberFormatException | DateTimeException e) {\n-                \/\/ ignore any value that cannot be parsed for the java.util.Properties.storeDate\n-                \/\/ system property and instead use the current date in the date comment.\n-            }\n-        }\n-        bw.write(dateComment != null\n-                    ? dateComment\n-                    : \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern).format(ZonedDateTime.now()));\n+        String dateComment = (storeDate != null && !storeDate.isBlank())\n+                ? \"#\" + storeDate\n+                : \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern).format(ZonedDateTime.now());\n+        bw.write(dateComment);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.time.Duration;\n@@ -37,1 +36,0 @@\n-import java.time.format.DateTimeParseException;\n@@ -58,0 +56,2 @@\n+    private static final DateTimeFormatter reproducibleDateTimeFormatter = DateTimeFormatter.ofPattern(dateCommentFormat)\n+            .withLocale(Locale.ROOT).withZone(ZoneOffset.UTC);\n@@ -67,2 +67,4 @@\n-        \/\/ invalid\/unparsable value for java.util.Properties.storeDate system property\n-        testInvalidStoreDateValue();\n+        \/\/ free form non-date value for java.util.Properties.storeDate system property\n+        testNonDateStoreDateValue();\n+        \/\/ blank value for java.util.Properties.storeDate system property\n+        testBlankStoreDateValue();\n@@ -84,1 +86,1 @@\n-        final String storeDate = \"243535322\";\n+        final String storeDate = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(243535322));\n@@ -126,1 +128,1 @@\n-        final String storeDate = \"1234342423\";\n+        final String storeDate = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n@@ -170,1 +172,1 @@\n-        final String storeDate = \"1234342423\";\n+        final String storeDate = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n@@ -192,4 +194,4 @@\n-     * properties to a file. The launched Java program is passed an invalid value for\n-     * the {@code java.util.Properties.storeDate} system property.\n-     * It is expected and verified in this test that such an invalid value for the system property\n-     * will cause the date comment to be the \"current date\". The launched program is expected to complete\n+     * properties to a file. The launched Java program is passed a blank value\n+     * for the {@code java.util.Properties.storeDate} system property.\n+     * It is expected and verified in this test that such a value for the system property\n+     * will cause the date comment to use the current date time. The launched program is expected to complete\n@@ -198,1 +200,29 @@\n-    private static void testInvalidStoreDateValue() throws Exception {\n+    private static void testBlankStoreDateValue() throws Exception {\n+        for (int i = 0; i < 2; i++) {\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n+            final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + \"      \\t\",\n+                    StoreTest.class.getName(),\n+                    tmpFile.toString(),\n+                    i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n+            Date launchedAt = new Date();\n+            \/\/ wait for a second before launching so that we can then expect\n+            \/\/ the date written out by the store() APIs to be \"after\" this launch date\n+            Thread.sleep(1000);\n+            executeJavaProcess(processBuilder);\n+            if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n+                throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n+            }\n+            assertCurrentDate(tmpFile, launchedAt);\n+        }\n+    }\n+\n+    \/**\n+     * Launches a Java program which is responsible for using Properties.store() to write out the\n+     * properties to a file. The launched Java program is passed the {@code java.util.Properties.storeDate}\n+     * system property with a value that doesn't represent a formatted date.\n+     * It is expected and verified in this test that such a value for the system property\n+     * will cause the comment to use that value verbatim. The launched program is expected to complete\n+     * without any errors.\n+     *\/\n+    private static void testNonDateStoreDateValue() throws Exception {\n@@ -207,4 +237,0 @@\n-            final Date processLaunchedAt = new Date();\n-            \/\/ launch with a second delay so that we can then verify that the date comment\n-            \/\/ written out by the program is \"after\" this date\n-            Thread.sleep(1000);\n@@ -215,1 +241,1 @@\n-            assertCurrentDate(tmpFile, processLaunchedAt);\n+            assertExpectedStoreDate(tmpFile, storeDate);\n@@ -238,2 +264,1 @@\n-     * Verifies that the date comment in the {@code destFile} is of the expected format\n-     * and the time represented by it corresponds to the passed {@code storeDate}\n+     * Verifies that the date comment in the {@code destFile} is same as {@code storeDate}\n@@ -245,14 +270,1 @@\n-            throw new RuntimeException(\"Date comment not found in stored properties \" + destFile\n-                    + \" when storeDate was set to \" + storeDate);\n-        }\n-        System.out.println(\"Found date comment \" + dateComment + \" in file \" + destFile);\n-        long parsedSecondsSinceEpoch;\n-        try {\n-            var d = DateTimeFormatter.ofPattern(dateCommentFormat)\n-                    .withLocale(Locale.ROOT)\n-                    .withZone(ZoneOffset.UTC).parse(dateComment);\n-            parsedSecondsSinceEpoch = Duration.between(Instant.ofEpochSecond(0), Instant.from(d)).toSeconds();\n-        } catch (DateTimeParseException pe) {\n-            throw new RuntimeException(\"Unexpected date \" + dateComment + \" in stored properties \" + destFile\n-                    + \" when storeDate was set to \" + storeDate, pe);\n-\n+            throw new RuntimeException(\"Comment \\\"\" + storeDate + \"\\\" not found in stored properties \" + destFile);\n@@ -260,4 +272,3 @@\n-        final long expected = Long.parseLong(storeDate);\n-        if (parsedSecondsSinceEpoch != expected) {\n-            throw new RuntimeException(\"Expected \" + expected + \" seconds since epoch but found \"\n-                    + parsedSecondsSinceEpoch);\n+        if (!storeDate.equals(dateComment)) {\n+            throw new RuntimeException(\"Expected comment \\\"\" + storeDate + \"\\\" but found \\\"\" + dateComment + \"\\\" \" +\n+                    \"in stored properties \" + destFile);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":48,"deletions":37,"binary":false,"changes":85,"status":"modified"}]}