{"files":[{"patch":"@@ -845,2 +845,6 @@\n-     * @implNote This method writes out the property list (key and element pairs)\n-     * in the natural sort order of the property keys.\n+     * @implNote This method invokes the {@link #entrySet()} method\n+     * and writes out the returned key and element pairs\n+     * in the natural sort order of those keys. If subclasses override\n+     * the {@code entrySet} method and return a different {@code Set} instance,\n+     * then the property list is written out in the iteration order of\n+     * that returned {@code Set}\n@@ -922,2 +926,9 @@\n-            var entries = new ArrayList<>(((Map<String, String>) (Map) map).entrySet());\n-            entries.sort(Map.Entry.comparingByKey());\n+            Collection<Map.Entry<String, String>> entries = (Set<Map.Entry<String, String>>) (Set) entrySet();\n+            \/\/ entrySet() can be overridden by subclasses. Here we check to see if the returned instance is the one\n+            \/\/ returned by the Properties.entrySet() implementation.If yes, then we sort those entries\n+            \/\/ in the natural order of their key. Else we just use the iteration order of the returned instance.\n+            if (entries instanceof Collections.SynchronizedSet<?> ss\n+                    && ss.c instanceof EntrySet) {\n+                entries = new ArrayList<>(entries);\n+                ((List<Map.Entry<String, String>>) entries).sort(Map.Entry.comparingByKey());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Comparator;\n@@ -40,0 +41,1 @@\n+import java.util.Map;\n@@ -41,0 +43,1 @@\n+import java.util.Set;\n@@ -73,0 +76,9 @@\n+        final Properties overrideCallsSuper = new OverridesEntrySetCallsSuper();\n+        overrideCallsSuper.putAll(simple);\n+\n+        final OverridesEntrySet overridesEntrySet = new OverridesEntrySet();\n+        overridesEntrySet.putAll(simple);\n+\n+        final Properties doesNotOverrideEntrySet = new DoesNotOverrideEntrySet();\n+        doesNotOverrideEntrySet.putAll(simple);\n+\n@@ -74,2 +86,5 @@\n-                {simple},\n-                {specialChars}\n+                {simple, naturalOrder(simple)},\n+                {specialChars, naturalOrder(specialChars)},\n+                {overrideCallsSuper, naturalOrder(overrideCallsSuper)},\n+                {overridesEntrySet, overridesEntrySet.expectedKeyOrder()},\n+                {doesNotOverrideEntrySet, naturalOrder(doesNotOverrideEntrySet)}\n@@ -81,1 +96,1 @@\n-     * in the natural order of the property keys\n+     * in the expected order\n@@ -84,1 +99,1 @@\n-    public void testStoreWriterKeyOrder(final Properties props) throws Exception {\n+    public void testStoreWriterKeyOrder(final Properties props, final String[] expectedOrder) throws Exception {\n@@ -90,1 +105,1 @@\n-        testStoreKeyOrder(props, tmpFile);\n+        testStoreKeyOrder(props, tmpFile, expectedOrder);\n@@ -95,1 +110,1 @@\n-     * in the natural order of the property keys\n+     * in the expected order\n@@ -98,1 +113,1 @@\n-    public void testStoreOutputStreamKeyOrder(final Properties props) throws Exception {\n+    public void testStoreOutputStreamKeyOrder(final Properties props, final String[] expectedOrder) throws Exception {\n@@ -104,1 +119,1 @@\n-        testStoreKeyOrder(props, tmpFile);\n+        testStoreKeyOrder(props, tmpFile, expectedOrder);\n@@ -112,1 +127,1 @@\n-     * is the expected natural order of the property keys.\n+     * is the same as the passed \"expectedOrder\"\n@@ -114,1 +129,2 @@\n-    private void testStoreKeyOrder(final Properties props, final Path storedProps) throws Exception {\n+    private void testStoreKeyOrder(final Properties props, final Path storedProps,\n+                                   final String[] expectedOrder) throws Exception {\n@@ -129,1 +145,0 @@\n-        final String[] expectedOrder = expectedKeyOrder(props);\n@@ -194,1 +209,1 @@\n-    private static String[] expectedKeyOrder(final Properties props) {\n+    private static String[] naturalOrder(final Properties props) {\n@@ -222,0 +237,38 @@\n+    \/\/ Extends java.util.Properties and overrides entrySet() to return a reverse\n+    \/\/ sorted entries set\n+    private static class OverridesEntrySet extends Properties {\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Set<Map.Entry<Object, Object>> entrySet() {\n+            \/\/ return a reverse sorted entries set\n+            var entries = super.entrySet();\n+            Comparator<Map.Entry<String, String>> comparator = Map.Entry.comparingByKey(Comparator.reverseOrder());\n+            TreeSet<Map.Entry<String, String>> reverseSorted = new TreeSet<>(comparator);\n+            reverseSorted.addAll((Set) entries);\n+            return (Set) reverseSorted;\n+        }\n+\n+        String[] expectedKeyOrder() {\n+            \/\/ returns in reverse order of the property keys' natural ordering\n+            var keys = new ArrayList<>(stringPropertyNames());\n+            keys.sort(Comparator.reverseOrder());\n+            return keys.toArray(new String[0]);\n+        }\n+    }\n+\n+    \/\/ Extends java.util.Properties and overrides entrySet() to just return \"super.entrySet()\"\n+    private static class OverridesEntrySetCallsSuper extends Properties {\n+        @Override\n+        public Set<Map.Entry<Object, Object>> entrySet() {\n+            return super.entrySet();\n+        }\n+    }\n+\n+    \/\/ Extends java.util.Properties but doesn't override entrySet() method\n+    private static class DoesNotOverrideEntrySet extends Properties {\n+\n+        @Override\n+        public String toString() {\n+            return \"DoesNotOverrideEntrySet - \" + super.toString();\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":65,"deletions":12,"binary":false,"changes":77,"status":"modified"}]}