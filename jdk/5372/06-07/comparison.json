{"files":[{"patch":"@@ -56,0 +56,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -175,35 +176,3 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final class LazyDateCommentProvider {\n-        \/\/ format that matches the one used by java.util.Date.toString()\n-        private static final String dateFormatPattern = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n-        \/\/ formatter used while writing out current date\n-        private static final DateTimeFormatter currentDateFormatter = DateTimeFormatter.ofPattern(dateFormatPattern);\n-        private static final String cachedDateComment;\n-\n-        static {\n-            String sourceDateEpoch = System.getSecurityManager() == null\n-                                        ? System.getenv(\"SOURCE_DATE_EPOCH\")\n-                                        : AccessController.doPrivileged((PrivilegedAction<String>)\n-                                                () -> System.getenv(\"SOURCE_DATE_EPOCH\"));\n-            String dateComment = null;\n-            if (sourceDateEpoch != null) {\n-                try {\n-                    long epochSeconds = Long.parseLong(sourceDateEpoch);\n-                    dateComment = \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern)\n-                            .withLocale(Locale.ROOT)\n-                            .withZone(ZoneOffset.UTC)\n-                            .format(Instant.ofEpochSecond(epochSeconds));\n-                } catch (NumberFormatException | DateTimeException e) {\n-                    \/\/ ignore any value that cannot be parsed for the SOURCE_DATE_EPOCH.\n-                    \/\/ store APIs will subsequently use current date, in their date comments\n-                }\n-            }\n-            cachedDateComment = dateComment;\n-        }\n-\n-        private static String getDateComment() {\n-            return cachedDateComment != null\n-                            ? cachedDateComment\n-                            : \"#\" + currentDateFormatter.format(ZonedDateTime.now());\n-        }\n-    }\n+    \/\/ used to format the date comment written out by the store() APIs.\n+    \/\/ This format matches the one used by java.util.Date.toString()\n+    private static final String dateFormatPattern = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n@@ -880,3 +849,6 @@\n-     * {@code SOURCE_DATE_EPOCH} environment variable is set. If it is set, then instead\n-     * of writing the current date and time, the date and time represented by the\n-     * value of {@code SOURCE_DATE_EPOCH} will be written, using the\n+     * {@systemProperty java.util.Properties.storeDate} system property is set.\n+     * If it is set, then its value is expected to represent epoch seconds,\n+     * which is the number of seconds, excluding leap seconds,\n+     * since 01 Jan 1970 00:00:00 UTC. When this system property is set,\n+     * then instead of writing the current date and time, the date and time\n+     * represented by the system property value will be written, using the\n@@ -885,1 +857,1 @@\n-     * If the value set for {@code SOURCE_DATE_EPOCH} cannot be parsed to a {@code long},\n+     * If the value set for this system property cannot be parsed to a {@code long},\n@@ -958,2 +930,2 @@\n-        bw.write(LazyDateCommentProvider.getDateComment());\n-        bw.newLine();\n+        writeDateComment(bw);\n+\n@@ -979,0 +951,24 @@\n+    private static void writeDateComment(BufferedWriter bw) throws IOException {\n+        \/\/ value of java.util.Properties.storeDate system property isn't sensitive\n+        \/\/ and so doesn't need any security manager checks to make the value accessible\n+        \/\/ to the callers\n+        String storeDate = StaticProperty.javaUtilPropertiesStoreDate();\n+        String dateComment = null;\n+        if (storeDate != null) {\n+            try {\n+                long epochSeconds = Long.parseLong(storeDate);\n+                dateComment = \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern)\n+                        .withLocale(Locale.ROOT)\n+                        .withZone(ZoneOffset.UTC)\n+                        .format(Instant.ofEpochSecond(epochSeconds));\n+            } catch (NumberFormatException | DateTimeException e) {\n+                \/\/ ignore any value that cannot be parsed for the java.util.Properties.storeDate\n+                \/\/ system property and instead use the current date in the date comment.\n+            }\n+        }\n+        bw.write(dateComment != null\n+                    ? dateComment\n+                    : \"#\" + DateTimeFormatter.ofPattern(dateFormatPattern).format(ZonedDateTime.now()));\n+        bw.newLine();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":37,"deletions":41,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private static final String JAVA_UTIL_PROPERTIES_STOREDATE;\n@@ -70,0 +71,1 @@\n+        JAVA_UTIL_PROPERTIES_STOREDATE = getProperty(props, \"java.util.Properties.storeDate\", null);\n@@ -230,0 +232,12 @@\n+\n+    \/**\n+     * Return the {@code java.util.Properties.storeDate} system property.\n+     *\n+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+     * in this method.<\/strong>\n+     *\n+     * @return the {@code java.util.Properties.storeDate} system property\n+     *\/\n+    public static String javaUtilPropertiesStoreDate() {\n+        return JAVA_UTIL_PROPERTIES_STOREDATE;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-            Assert.fail(\"Unexpected date comment: \" + comment);\n+            Assert.fail(\"Unexpected date comment: \" + comment, pe);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static final String ENV_SOURCE_DATE_EPOCH = \"SOURCE_DATE_EPOCH\";\n@@ -58,0 +57,1 @@\n+    private static final String SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE = \"java.util.Properties.storeDate\";\n@@ -62,1 +62,2 @@\n-        \/\/ security manager enabled and security policy explicitly allows read permissions on getenv.SOURCE_DATE_EPOCH\n+        \/\/ security manager enabled and security policy explicitly allows\n+        \/\/ read permissions on java.util.Properties.storeDate system property\n@@ -64,1 +65,1 @@\n-        \/\/ security manager enabled and no explicit getenv.SOURCE_DATE_EPOCH permission\n+        \/\/ security manager enabled and no explicit permission on java.util.Properties.storeDate system property\n@@ -66,2 +67,2 @@\n-        \/\/ invalid\/unparsable value for SOURCE_DATE_EPOCH\n-        testInvalidSourceDateEpochValue();\n+        \/\/ invalid\/unparsable value for java.util.Properties.storeDate system property\n+        testInvalidStoreDateValue();\n@@ -72,5 +73,5 @@\n-     * properties to a file. The launched Java program is passed an environment variable value for\n-     * {@code SOURCE_DATE_EPOCH} environment variable and the date comment written out to the file\n-     * is expected to use this value.\n-     * The program is launched multiple times with the same value for {@code SOURCE_DATE_EPOCH}\n-     * and the output written out by each run of this program is verified to be exactly the same.\n+     * properties to a file. The launched Java program is passed a value for the\n+     * {@code java.util.Properties.storeDate} system property and the date comment written out\n+     * to the file is expected to use this value.\n+     * The program is launched multiple times with the same value for {@code java.util.Properties.storeDate}\n+     * and the output written by each run of this program is verified to be exactly the same.\n@@ -78,1 +79,1 @@\n-     * corresponds to the passed {@code SOURCE_DATE_EPOCH}.\n+     * corresponds to the passed {@code java.util.Properties.storeDate}.\n@@ -83,1 +84,1 @@\n-        final String sourceDateEpoch = \"243535322\";\n+        final String storeDate = \"243535322\";\n@@ -88,0 +89,1 @@\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n@@ -91,1 +93,0 @@\n-            processBuilder.environment().put(ENV_SOURCE_DATE_EPOCH, sourceDateEpoch);\n@@ -93,1 +94,1 @@\n-            assertExpectedSourceEpochDate(tmpFile, sourceDateEpoch);\n+            assertExpectedStoreDate(tmpFile, storeDate);\n@@ -98,1 +99,1 @@\n-        assertAllFileContentsAreSame(storedFiles, sourceDateEpoch);\n+        assertAllFileContentsAreSame(storedFiles, storeDate);\n@@ -103,2 +104,2 @@\n-     * properties to a file. The launched Java program is passed an environment variable value for\n-     * {@code SOURCE_DATE_EPOCH} environment variable and the date comment written out to the file\n+     * properties to a file. The launched Java program is passed a value for the\n+     * {@code java.util.Properties.storeDate} system property and the date comment written out to the file\n@@ -107,3 +108,3 @@\n-     * a {@code read} permission on {@code getenv.SOURCE_DATE_EPOCH}.\n-     * The program is launched multiple times with the same value for {@code SOURCE_DATE_EPOCH}\n-     * and the output written out by each run of this program is verified to be exactly the same.\n+     * a {@code read} permission on {@code java.util.Properties.storeDate}.\n+     * The program is launched multiple times with the same value for {@code java.util.Properties.storeDate}\n+     * and the output written by each run of this program is verified to be exactly the same.\n@@ -111,1 +112,1 @@\n-     * corresponds to the passed {@code SOURCE_DATE_EPOCH}.\n+     * corresponds to the passed {@code java.util.Properties.storeDate}.\n@@ -119,2 +120,3 @@\n-                    \/\/ explicitly grant read on SOURCE_DATE_EPOCH to verifies store() APIs work fine\n-                    permission java.lang.RuntimePermission \"getenv.SOURCE_DATE_EPOCH\", \"read\";\n+                    \/\/ explicitly grant read permission on java.util.Properties.storeDate system property \n+                    \/\/ to verify store() APIs work fine\n+                    permission java.util.PropertyPermission \"java.util.Properties.storeDate\", \"read\";\n@@ -124,1 +126,1 @@\n-        final String sourceDateEpoch = \"1234342423\";\n+        final String storeDate = \"1234342423\";\n@@ -129,0 +131,1 @@\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n@@ -134,1 +137,0 @@\n-            processBuilder.environment().put(ENV_SOURCE_DATE_EPOCH, sourceDateEpoch);\n@@ -136,1 +138,1 @@\n-            assertExpectedSourceEpochDate(tmpFile, sourceDateEpoch);\n+            assertExpectedStoreDate(tmpFile, storeDate);\n@@ -141,1 +143,1 @@\n-        assertAllFileContentsAreSame(storedFiles, sourceDateEpoch);\n+        assertAllFileContentsAreSame(storedFiles, storeDate);\n@@ -146,2 +148,2 @@\n-     * properties to a file. The launched Java program is passed an environment variable value for\n-     * {@code SOURCE_DATE_EPOCH} environment variable and the date comment written out to the file\n+     * properties to a file. The launched Java program is passed a value for the\n+     * {@code java.util.Properties.storeDate} system property and the date comment written out to the file\n@@ -150,3 +152,3 @@\n-     * any explicit permission for {@code getenv.SOURCE_DATE_EPOCH}.\n-     * The program is launched multiple times with the same value for {@code SOURCE_DATE_EPOCH}\n-     * and the output written out by each run of this program is verified to be exactly the same.\n+     * any explicit permission for {@code java.util.Properties.storeDate} system property.\n+     * The program is launched multiple times with the same value for {@code java.util.Properties.storeDate}\n+     * and the output written by each run of this program is verified to be exactly the same.\n@@ -154,1 +156,1 @@\n-     * corresponds to the passed {@code SOURCE_DATE_EPOCH}.\n+     * corresponds to the passed {@code java.util.Properties.storeDate}.\n@@ -162,2 +164,3 @@\n-                    \/\/ no other grants, not even \"read\" on SOURCE_DATE_EPOCH. test should still\n-                    \/\/ work fine and the date comment should correspond to the value of SOURCE_DATE_EPOCH\n+                    \/\/ no other grants, not even \"read\" java.util.Properties.storeDate system property.\n+                    \/\/ test should still work fine and the date comment should correspond to the value of \n+                    \/\/ java.util.Properties.storeDate system property.\n@@ -167,1 +170,1 @@\n-        final String sourceDateEpoch = \"1234342423\";\n+        final String storeDate = \"1234342423\";\n@@ -172,0 +175,1 @@\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n@@ -177,1 +181,0 @@\n-            processBuilder.environment().put(ENV_SOURCE_DATE_EPOCH, sourceDateEpoch);\n@@ -179,1 +182,1 @@\n-            assertExpectedSourceEpochDate(tmpFile, sourceDateEpoch);\n+            assertExpectedStoreDate(tmpFile, storeDate);\n@@ -184,1 +187,1 @@\n-        assertAllFileContentsAreSame(storedFiles, sourceDateEpoch);\n+        assertAllFileContentsAreSame(storedFiles, storeDate);\n@@ -190,2 +193,2 @@\n-     * the {@code SOURCE_DATE_EPOCH} environment variable.\n-     * It is expected and verified in this test that such an invalid value for the environment variable\n+     * the {@code java.util.Properties.storeDate} system property.\n+     * It is expected and verified in this test that such an invalid value for the system property\n@@ -195,2 +198,2 @@\n-    private static void testInvalidSourceDateEpochValue() throws Exception {\n-        final String sourceDateEpoch = \"foo-bar\";\n+    private static void testInvalidStoreDateValue() throws Exception {\n+        final String storeDate = \"foo-bar\";\n@@ -200,0 +203,1 @@\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n@@ -203,1 +207,0 @@\n-            processBuilder.environment().put(ENV_SOURCE_DATE_EPOCH, sourceDateEpoch);\n@@ -235,2 +238,2 @@\n-     * Verifies that the date comment in the {@code destFile} is of the expected GMT format\n-     * and the time represented by it corresponds to the passed {@code sourceEpochDate}\n+     * Verifies that the date comment in the {@code destFile} is of the expected format\n+     * and the time represented by it corresponds to the passed {@code storeDate}\n@@ -238,2 +241,2 @@\n-    private static void assertExpectedSourceEpochDate(final Path destFile,\n-                                                      final String sourceEpochDate) throws Exception {\n+    private static void assertExpectedStoreDate(final Path destFile,\n+                                                final String storeDate) throws Exception {\n@@ -243,2 +246,1 @@\n-                    + \" when \" + ENV_SOURCE_DATE_EPOCH + \" was set \" +\n-                    \"(to \" + sourceEpochDate + \")\");\n+                    + \" when storeDate was set to \" + storeDate);\n@@ -255,2 +257,1 @@\n-                    + \" when \" + ENV_SOURCE_DATE_EPOCH + \" was set \" +\n-                    \"(to \" + sourceEpochDate + \")\", pe);\n+                    + \" when storeDate was set to \" + storeDate, pe);\n@@ -259,1 +260,1 @@\n-        final long expected = Long.parseLong(sourceEpochDate);\n+        final long expected = Long.parseLong(storeDate);\n@@ -268,1 +269,1 @@\n-     * represented by it is {@link Date#after(Date)} the passed {@code date}\n+     * represented by it is {@link Date#after(Date) after} the passed {@code date}\n@@ -307,1 +308,1 @@\n-                                                     final String sourceDateEpoch) throws Exception {\n+                                                     final String storeDate) throws Exception {\n@@ -312,2 +313,2 @@\n-                throw new RuntimeException(\"Properties.store() did not generate reproducible content when \"\n-                        + ENV_SOURCE_DATE_EPOCH + \" was set (to \" + sourceDateEpoch + \")\");\n+                throw new RuntimeException(\"Properties.store() did not generate reproducible content when \" +\n+                        \"storeDate was set to \" + storeDate);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":58,"deletions":57,"binary":false,"changes":115,"status":"modified"}]}