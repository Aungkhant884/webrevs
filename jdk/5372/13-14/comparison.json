{"files":[{"patch":"@@ -75,0 +75,2 @@\n+        \/\/ value for java.util.Properties.storeDate system property contains backslash character\n+        testBackSlashInStoreDateValue();\n@@ -205,0 +207,2 @@\n+        final List<Path> storedFiles = new ArrayList<>();\n+        final String storeDate = \"      \\t\";\n@@ -207,0 +211,1 @@\n+            storedFiles.add(tmpFile);\n@@ -208,1 +213,1 @@\n-                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + \"      \\t\",\n+                    \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n@@ -225,0 +230,1 @@\n+        assertAllFileContentsAreSame(storedFiles, storeDate);\n@@ -265,0 +271,1 @@\n+        final List<Path> storedFiles = new ArrayList<>();\n@@ -267,0 +274,1 @@\n+            storedFiles.add(tmpFile);\n@@ -278,0 +286,1 @@\n+        assertAllFileContentsAreSame(storedFiles, storeDate);\n@@ -291,0 +300,1 @@\n+            final List<Path> storedFiles = new ArrayList<>();\n@@ -293,0 +303,1 @@\n+                storedFiles.add(tmpFile);\n@@ -315,0 +326,53 @@\n+            assertAllFileContentsAreSame(storedFiles, storeDate);\n+        }\n+    }\n+\n+    \/**\n+     * Launches a Java program which is responsible for using Properties.store() to write out the\n+     * properties to a file. The launched Java program is passed the {@code java.util.Properties.storeDate}\n+     * system property with a value that has backslash character.\n+     * It is expected and verified in this test that such a value for the system property\n+     * will not cause any malformed comments or introduce any new properties in the stored content.\n+     * The launched program is expected to complete without any errors.\n+     *\/\n+    private static void testBackSlashInStoreDateValue() throws Exception {\n+        final String[] storeDates = {\"\\\\hello-world\", \"hello-world\\\\\", \"hello-world\\\\c=d\",\n+                \"newline-plus-backslash\\\\\\nc=d\"};\n+        for (final String storeDate : storeDates) {\n+            final List<Path> storedFiles = new ArrayList<>();\n+            for (int i = 0; i < 2; i++) {\n+                final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n+                storedFiles.add(tmpFile);\n+                final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+                        \"-D\" + SYS_PROP_JAVA_UTIL_PROPERTIES_STOREDATE + \"=\" + storeDate,\n+                        StoreTest.class.getName(),\n+                        tmpFile.toString(),\n+                        i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n+                executeJavaProcess(processBuilder);\n+                if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n+                    throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n+                }\n+                String commentLine1 = findNthComment(tmpFile, 2);\n+                if (commentLine1 == null) {\n+                    throw new RuntimeException(\"Did not find the expected comment line in \" + tmpFile);\n+                }\n+                if (storeDate.contains(\"newline-plus-backslash\")) {\n+                    if (!commentLine1.equals(\"newline-plus-backslash\\\\\")) {\n+                        throw new RuntimeException(\"Unexpected comment line \" + commentLine1 + \" in \" + tmpFile);\n+                    }\n+                    \/\/ we expect this specific system property value to be written out into 2 separate comment lines\n+                    String commentLine2 = findNthComment(tmpFile, 3);\n+                    if (commentLine2 == null) {\n+                        throw new RuntimeException(storeDate + \" was expected to be split into 2 comment line, \" +\n+                                \"but wasn't, in \" + tmpFile);\n+                    }\n+                    if (!commentLine2.equals(\"c=d\")) {\n+                        throw new RuntimeException(\"Unexpected comment line \" + commentLine2 + \" in \" + tmpFile);\n+                    }\n+                } else {\n+                    if (!commentLine1.equals(storeDate)) {\n+                        throw new RuntimeException(\"Unexpected comment line \" + commentLine1 + \" in \" + tmpFile);\n+                    }\n+                }\n+            }\n+            assertAllFileContentsAreSame(storedFiles, storeDate);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":65,"deletions":1,"binary":false,"changes":66,"status":"modified"}]}