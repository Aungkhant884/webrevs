{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -5751,0 +5751,4 @@\n+        if (pos < 0 || (rtype == void.class && pos > targetType.parameterCount()) ||\n+                       (rtype != void.class && pos >= targetType.parameterCount())) {\n+            throw newIllegalArgumentException(\"position is out of range for target\", target, pos);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8259922\n+ * @run testng\/othervm MethodHandlesCollectArgsTest\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import static org.testng.Assert.*;\n+\n+public class MethodHandlesCollectArgsTest {\n+\n+    private static final MethodHandle TARGET_II_I = MethodHandles.empty(methodType(int.class, int.class, int.class));\n+    private static final MethodHandle TARGET__V = MethodHandles.empty(methodType(void.class));\n+    private static final MethodHandle FILTER_INT = MethodHandles.empty(methodType(int.class, String.class));\n+    private static final MethodHandle FILTER_VOID = MethodHandles.empty(methodType(void.class, String.class));\n+\n+    @DataProvider(name = \"illegalPos\")\n+    public static Object[][] illegalPos() {\n+        return new Object[][] {\n+            {TARGET_II_I, 2, FILTER_INT},\n+            {TARGET_II_I, 3, FILTER_VOID},\n+            {TARGET_II_I, -1, FILTER_INT},\n+            {TARGET_II_I, -1, FILTER_VOID},\n+            {TARGET__V, 0, FILTER_INT},\n+            {TARGET__V, 1, FILTER_VOID},\n+            {TARGET__V, -1, FILTER_VOID},\n+            {TARGET__V, -1, FILTER_VOID}\n+        };\n+    }\n+\n+    @DataProvider(name = \"validPos\")\n+    public static Object[][] validPos() {\n+        return new Object[][] {\n+            {TARGET_II_I, 0, FILTER_INT, methodType(int.class, String.class, int.class)},\n+            {TARGET_II_I, 1, FILTER_INT, methodType(int.class, int.class, String.class)},\n+            {TARGET_II_I, 0, FILTER_VOID, methodType(int.class, String.class, int.class, int.class)},\n+            {TARGET_II_I, 1, FILTER_VOID, methodType(int.class, int.class, String.class, int.class)},\n+            {TARGET_II_I, 2, FILTER_VOID, methodType(int.class, int.class, int.class, String.class)},\n+            {TARGET__V, 0, FILTER_VOID, methodType(void.class, String.class)}\n+        };\n+    }\n+\n+    @Test(dataProvider=\"illegalPos\", expectedExceptions = {IllegalArgumentException.class})\n+    public void illegalPosition(MethodHandle target, int position, MethodHandle filter) {\n+        MethodHandles.collectArguments(target, position, filter);\n+    }\n+\n+    @Test(dataProvider=\"validPos\")\n+    public void legalPosition(MethodHandle target, int position, MethodHandle filter, MethodType expectedType) {\n+        MethodHandle result = MethodHandles.collectArguments(target, position, filter);\n+        assertEquals(result.type(), expectedType);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandlesCollectArgsTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}