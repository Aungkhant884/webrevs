{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -428,4 +428,7 @@\n-     * of size {@link Long#MAX_VALUE}. If a lock that overlaps the requested\n-     * region is already held by this Java virtual machine, or this method has\n-     * been invoked to lock an overlapping region and that operation has not\n-     * completed, then this method throws {@link OverlappingFileLockException}.\n+     * of size {@link Long#MAX_VALUE}.  If the {@code position} is non-negative\n+     * and the {@code size} is zero, then a lock of size\n+     * {@code Long.MAX_VALUE - position} is returned.  If a lock that\n+     * overlaps the requested region is already held by this Java virtual\n+     * machine, or this method has been invoked to lock an overlapping region\n+     * and that operation has not completed, then this method throws\n+     * {@link OverlappingFileLockException}.\n@@ -457,1 +460,4 @@\n-     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *          A value of zero means to lock all bytes from the specified\n+     *          starting position to the end of the file, regardless of whether\n+     *          the file is subsequently extended or truncated\n@@ -535,1 +541,4 @@\n-     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *          A value of zero means to lock all bytes from the specified\n+     *          starting position to the end of the file, regardless of whether\n+     *          the file is subsequently extended or truncated\n@@ -589,1 +598,3 @@\n-     * a lock for any other reason then an appropriate exception is thrown.\n+     * a lock for any other reason then an appropriate exception is thrown.  If\n+     * the {@code position} is non-negative and the {@code size} is zero, then a\n+     * lock of size {@code Long.MAX_VALUE - position} is returned.\n@@ -597,1 +608,4 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero means to lock all bytes from the specified\n+     *         starting position to the end of the file, regardless of whether\n+     *         the file is subsequently extended or truncated\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/AsynchronousFileChannel.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -984,1 +984,3 @@\n-     * Long#MAX_VALUE}.\n+     * Long#MAX_VALUE}.  If the {@code position} is non-negative and the\n+     * {@code size} is zero, then a lock of size\n+     * {@code Long.MAX_VALUE - position} is returned.\n@@ -1002,1 +1004,4 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero means to lock all bytes from the specified\n+     *         starting position to the end of the file, regardless of whether\n+     *         the file is subsequently extended or truncated\n@@ -1111,1 +1116,3 @@\n-     * Long#MAX_VALUE}.\n+     * Long#MAX_VALUE}.  If the {@code position} is non-negative and the\n+     * {@code size} is zero, then a lock of size\n+     * {@code Long.MAX_VALUE - position} is returned.\n@@ -1129,1 +1136,4 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero means to lock all bytes from the specified\n+     *         starting position to the end of the file, regardless of whether\n+     *         the file is subsequently extended or truncated\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,2 +272,3 @@\n-     * @return  {@code true} if, and only if, this lock and the given lock\n-     *          range overlap by at least one byte\n+     * @return  {@code true} if this lock and the given lock range overlap\n+     *          by at least one byte; {@code false} if {@code size} is\n+     *          negative or the lock range does not overlap this lock\n@@ -276,4 +277,23 @@\n-        if (position + size <= this.position)\n-            return false;               \/\/ That is below this\n-        if (this.position + this.size <= position)\n-            return false;               \/\/ This is below that\n+        if (size < 0)\n+            return false;\n+\n+        try {\n+            if (Math.addExact(this.position, this.size) <= position)\n+                return false;               \/\/ This is below that\n+        } catch (ArithmeticException ignored) {\n+            \/\/ the sum of this.position and this.size overflows the range of\n+            \/\/ long hence their mathematical sum is greater than position\n+        }\n+\n+        \/\/ if size == 0 then the specified lock range is unbounded and\n+        \/\/ cannot be below the range of this lock\n+        if (size > 0) {\n+            try {\n+                if (Math.addExact(position, size) <= this.position)\n+                    return false;               \/\/ That is below this\n+            } catch (ArithmeticException ignored) {\n+                \/\/ the sum of position and size overflows the range of long\n+                \/\/ hence their mathematical sum is greater than this.position\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileLock.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1274,0 +1274,2 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n@@ -1319,0 +1321,2 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,0 +184,2 @@\n+        long len = size != 0 ? size : Long.MAX_VALUE - Math.max(0, position);\n+\n@@ -185,1 +187,1 @@\n-        final FileLockImpl fli = addToFileLockTable(position, size, shared);\n+        final FileLockImpl fli = addToFileLockTable(position, len, shared);\n@@ -206,1 +208,1 @@\n-                            n = nd.lock(fdObj, true, position, size, shared);\n+                            n = nd.lock(fdObj, true, position, len, shared);\n@@ -251,0 +253,3 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -302,0 +302,2 @@\n+        long len = size != 0 ? size : Long.MAX_VALUE - Math.max(0, position);\n+\n@@ -303,1 +305,1 @@\n-        FileLockImpl fli = addToFileLockTable(position, size, shared);\n+        FileLockImpl fli = addToFileLockTable(position, len, shared);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4607272 6822643 6830721 6842687\n+ * @bug 4607272 5041655 6822643 6830721 6842687\n@@ -30,3 +30,0 @@\n-import java.nio.file.*;\n-import java.nio.channels.*;\n-import java.nio.ByteBuffer;\n@@ -35,2 +32,24 @@\n-import java.util.*;\n-import java.util.concurrent.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousCloseException;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.CompletionHandler;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.NonWritableChannelException;\n+import java.nio.channels.OverlappingFileLockException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeoutException;;\n+import java.util.concurrent.TimeUnit;\n@@ -179,1 +198,6 @@\n-                fl = ch.lock().get();\n+                long pos = rand.nextInt(Integer.MAX_VALUE);\n+                fl = ch.lock(pos, 0, false).get();\n+                long expectedSize = Long.MAX_VALUE - pos;\n+                if(fl.size() != expectedSize)\n+                    throw new RuntimeException(\"Lock size not \" +\n+                        expectedSize + \" for position \" + pos);\n@@ -195,1 +219,6 @@\n-            fl = ch.tryLock();\n+            long pos = rand.nextInt(Integer.MAX_VALUE);\n+            fl = ch.tryLock(pos, 0, false);\n+            long expectedSize = Long.MAX_VALUE - pos;\n+            if(fl.size() != expectedSize)\n+                throw new RuntimeException(\"Lock size not \" + expectedSize +\n+                    \" for position \" + pos);\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4429043 4493595 6332756 6709457 7146506\n+ * @bug 4429043 4493595 5041655 6332756 6709457 7146506\n@@ -29,2 +29,9 @@\n-import java.io.*;\n-import java.nio.channels.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStreamReader;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.OverlappingFileLockException;\n+import java.util.Random;\n@@ -129,6 +136,16 @@\n-            FileLock lock;\n-            if (b)\n-                lock = channel.lock();\n-            else\n-                lock = channel.tryLock();\n-            lock.release();\n+            try (FileLock lock = b ? channel.lock() : channel.tryLock()) {\n+            }\n+\n+            Random rnd = new Random(System.currentTimeMillis());\n+            long position = rnd.nextInt(Integer.MAX_VALUE);\n+            long expectedSize = Long.MAX_VALUE - position;\n+\n+            for (boolean shared : new boolean[] {false, true}) {\n+                try (FileLock lock = b ? channel.lock(position, 0, false) :\n+                    channel.tryLock(position, 0, false)) {\n+                    if(lock.size() != expectedSize)\n+                        throw new RuntimeException(\"Size not \" + expectedSize +\n+                            \" for position \" + position + \" of \" +\n+                            (shared ? \"exclusive\" : \"shared\") + \" lock\");\n+                }\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Lock.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5041655\n+ * @summary Verify FileLock.overlaps\n+ * @run testng Overlaps\n+ *\/\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.lang.Boolean.*;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class Overlaps {\n+    private static final long POS = 27;\n+    private static final long SIZE = 42;\n+\n+    private static FileChannel fc;\n+\n+    @BeforeClass\n+    public void before() throws IOException {\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \".bar\");\n+        fc = FileChannel.open(path, CREATE, WRITE, DELETE_ON_CLOSE);\n+        fc.position(POS);\n+        fc.write(ByteBuffer.wrap(new byte[(int)SIZE]));\n+    }\n+\n+    @AfterClass\n+    public void after() throws IOException {\n+        fc.close();\n+    }\n+\n+    @DataProvider\n+    public Object[][] ranges() {\n+        return new Object[][] {\n+            {POS, SIZE, -1,-1, FALSE},\n+            {POS, SIZE, 0, -1, FALSE},\n+            {POS, SIZE, POS - 1, -1, FALSE},\n+            {POS, SIZE, POS + SIZE\/2, -1, FALSE},\n+            {POS, SIZE, POS + SIZE, -1, FALSE},\n+            {POS, SIZE, -1, POS, FALSE},\n+            {POS, SIZE, -1, POS + SIZE\/2, TRUE},\n+            {POS, SIZE, POS - 2, 1, FALSE},\n+            {POS, SIZE, POS + 1, 1, TRUE},\n+            {POS, SIZE, POS + SIZE\/2, 0, TRUE},\n+            {POS, SIZE, Long.MAX_VALUE, 2, FALSE},\n+            {POS, SIZE, POS + SIZE \/ 2, Long.MAX_VALUE, TRUE},\n+            {POS, SIZE, 0, 0, TRUE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, 0, SIZE, FALSE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, Long.MAX_VALUE - SIZE\/4, SIZE, TRUE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, Long.MAX_VALUE - SIZE, 0, TRUE},\n+            {Long.MAX_VALUE - SIZE, 0, Long.MAX_VALUE - SIZE\/2, 0, TRUE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"ranges\")\n+    public void overlaps(long lockPos, long lockSize, long pos, long size,\n+        boolean overlaps) throws IOException {\n+        try (FileLock lock = fc.lock(lockPos, lockSize, false)) {\n+            assertEquals(lock.overlaps(pos, size), overlaps);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileLock\/Overlaps.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}