{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,1 +457,2 @@\n-     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *          A value of zero indicates the remainder of the file.\n@@ -535,1 +536,2 @@\n-     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *          {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *          A value of zero indicates the remainder of the file.\n@@ -597,1 +599,2 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero indicates the remainder of the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/AsynchronousFileChannel.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,3 +130,0 @@\n-     * <p> If {@code size} is zero, the entire file from {@code position}\n-     * onward is locked.\n-     *\n@@ -142,1 +139,2 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero indicates the remainder of the file.\n@@ -163,1 +161,1 @@\n-        this.size = size == 0 ? Long.MAX_VALUE - position : size;\n+        this.size = size;\n@@ -170,3 +168,0 @@\n-     * <p> If {@code size} is zero, the entire file from {@code position}\n-     * onward is locked.\n-     *\n@@ -182,1 +177,2 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero indicates the remainder of the file.\n@@ -205,1 +201,1 @@\n-        this.size = size == 0 ? Long.MAX_VALUE - position : size;\n+        this.size = size;\n@@ -274,2 +270,2 @@\n-     * of the value of {@code position}. If {@code size} is zero, it means the\n-     * lock range is unbounded.\n+     * of the value of {@code position}. A {@code size} of zero indicates the\n+     * remainder of the file.\n@@ -282,3 +278,2 @@\n-     * @return  {@code false} if, and only if, {@code size} is negative or this\n-     *          lock and the given lock range do <em>not<\/em> overlap by at\n-     *          least one byte\n+     * @return  {@code true} if, and only if, this lock and the given lock\n+     *          range overlap by at least one byte\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileLock.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1274,0 +1274,2 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n@@ -1319,0 +1321,2 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,0 +184,2 @@\n+        long len = size != 0 ? size : Long.MAX_VALUE - Math.max(0, position);\n+\n@@ -185,1 +187,1 @@\n-        final FileLockImpl fli = addToFileLockTable(position, size, shared);\n+        final FileLockImpl fli = addToFileLockTable(position, len, shared);\n@@ -206,1 +208,1 @@\n-                            n = nd.lock(fdObj, true, position, size, shared);\n+                            n = nd.lock(fdObj, true, position, len, shared);\n@@ -251,0 +253,3 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -302,0 +302,3 @@\n+        if (size == 0)\n+            size = Long.MAX_VALUE - Math.max(0, position);\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}