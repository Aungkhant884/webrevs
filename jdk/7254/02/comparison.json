{"files":[{"patch":"@@ -1002,1 +1002,2 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero indicates the remainder of the file.\n@@ -1129,1 +1130,2 @@\n-     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n+     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative.\n+     *         A value of zero indicates the remainder of the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,0 +130,3 @@\n+     * <p> If {@code size} is zero, the entire file from {@code position}\n+     * onward is locked.\n+     *\n@@ -160,1 +163,1 @@\n-        this.size = size;\n+        this.size = size == 0 ? Long.MAX_VALUE - position : size;\n@@ -167,0 +170,3 @@\n+     * <p> If {@code size} is zero, the entire file from {@code position}\n+     * onward is locked.\n+     *\n@@ -199,1 +205,1 @@\n-        this.size = size;\n+        this.size = size == 0 ? Long.MAX_VALUE - position : size;\n@@ -267,0 +273,4 @@\n+     * <p> If {@code size} is negative, {@code false} is returned regardless\n+     * of the value of {@code position}. If {@code size} is zero, it means the\n+     * lock range is unbounded.\n+     *\n@@ -272,2 +282,3 @@\n-     * @return  {@code true} if, and only if, this lock and the given lock\n-     *          range overlap by at least one byte\n+     * @return  {@code false} if, and only if, {@code size} is negative or this\n+     *          lock and the given lock range do <em>not<\/em> overlap by at\n+     *          least one byte\n@@ -276,4 +287,23 @@\n-        if (position + size <= this.position)\n-            return false;               \/\/ That is below this\n-        if (this.position + this.size <= position)\n-            return false;               \/\/ This is below that\n+        if (size < 0)\n+            return false;\n+\n+        try {\n+            if (Math.addExact(this.position, this.size) <= position)\n+                return false;               \/\/ This is below that\n+        } catch (ArithmeticException ignored) {\n+            \/\/ the sum of this.position and this.size overflows the range of\n+            \/\/ long hence their mathematical sum is greater than position\n+        }\n+\n+        \/\/ if size == 0 then the specified lock range is unbounded and\n+        \/\/ cannot be below the range of this lock\n+        if (size > 0) {\n+            try {\n+                if (Math.addExact(position, size) <= this.position)\n+                    return false;               \/\/ That is below this\n+            } catch (ArithmeticException ignored) {\n+                \/\/ the sum of position and size overflows the range of long\n+                \/\/ hence their mathematical sum is greater than this.position\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileLock.java","additions":39,"deletions":9,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5041655\n+ * @summary Verify FileLock.overlaps\n+ * @run testng Overlaps\n+ *\/\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.lang.Boolean.*;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class Overlaps {\n+    private static final long POS = 27;\n+    private static final long SIZE = 42;\n+\n+    private static FileChannel fc;\n+\n+    @BeforeClass\n+    public void before() throws IOException {\n+        Path path = Files.createTempFile(Path.of(\".\"), \"foo\", \".bar\");\n+        fc = FileChannel.open(path, CREATE, WRITE, DELETE_ON_CLOSE);\n+        fc.position(POS);\n+        fc.write(ByteBuffer.wrap(new byte[(int)SIZE]));\n+    }\n+\n+    @AfterClass\n+    public void after() throws IOException {\n+        fc.close();\n+    }\n+\n+    @DataProvider\n+    public Object[][] ranges() {\n+        return new Object[][] {\n+            {POS, SIZE, -1,-1, FALSE},\n+            {POS, SIZE, 0, -1, FALSE},\n+            {POS, SIZE, POS - 1, -1, FALSE},\n+            {POS, SIZE, POS + SIZE\/2, -1, FALSE},\n+            {POS, SIZE, POS + SIZE, -1, FALSE},\n+            {POS, SIZE, -1, POS, FALSE},\n+            {POS, SIZE, -1, POS + SIZE\/2, TRUE},\n+            {POS, SIZE, POS - 2, 1, FALSE},\n+            {POS, SIZE, POS + 1, 1, TRUE},\n+            {POS, SIZE, POS + SIZE\/2, 0, TRUE},\n+            {POS, SIZE, Long.MAX_VALUE, 2, FALSE},\n+            {POS, SIZE, POS + SIZE \/ 2, Long.MAX_VALUE, TRUE},\n+            {POS, SIZE, 0, 0, TRUE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, 0, SIZE, FALSE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, Long.MAX_VALUE - SIZE\/4, SIZE, TRUE},\n+            {Long.MAX_VALUE - SIZE\/2, 0, Long.MAX_VALUE - SIZE, 0, TRUE},\n+            {Long.MAX_VALUE - SIZE, 0, Long.MAX_VALUE - SIZE\/2, 0, TRUE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"ranges\")\n+    public void overlaps(long lockPos, long lockSize, long pos, long size,\n+        boolean overlaps) throws IOException {\n+        try (FileLock lock = fc.lock(lockPos, lockSize, false)) {\n+            assertEquals(lock.overlaps(pos, size), overlaps);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileLock\/Overlaps.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}