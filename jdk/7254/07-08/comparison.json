{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4607272 6822643 6830721 6842687\n+ * @bug 4607272 5041655 6822643 6830721 6842687\n@@ -30,3 +30,0 @@\n-import java.nio.file.*;\n-import java.nio.channels.*;\n-import java.nio.ByteBuffer;\n@@ -35,2 +32,24 @@\n-import java.util.*;\n-import java.util.concurrent.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousCloseException;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.CompletionHandler;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.NonWritableChannelException;\n+import java.nio.channels.OverlappingFileLockException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeoutException;;\n+import java.util.concurrent.TimeUnit;\n@@ -179,1 +198,6 @@\n-                fl = ch.lock().get();\n+                long pos = rand.nextInt(Integer.MAX_VALUE);\n+                fl = ch.lock(pos, 0, false).get();\n+                long expectedSize = Long.MAX_VALUE - pos;\n+                if(fl.size() != expectedSize)\n+                    throw new RuntimeException(\"Lock size not \" +\n+                        expectedSize + \" for position \" + pos);\n@@ -195,1 +219,6 @@\n-            fl = ch.tryLock();\n+            long pos = rand.nextInt(Integer.MAX_VALUE);\n+            fl = ch.tryLock(pos, 0, false);\n+            long expectedSize = Long.MAX_VALUE - pos;\n+            if(fl.size() != expectedSize)\n+                throw new RuntimeException(\"Lock size not \" + expectedSize +\n+                    \" for position \" + pos);\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4429043 4493595 6332756 6709457 7146506\n+ * @bug 4429043 4493595 5041655 6332756 6709457 7146506\n@@ -29,2 +29,9 @@\n-import java.io.*;\n-import java.nio.channels.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStreamReader;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.OverlappingFileLockException;\n+import java.util.Random;\n@@ -129,6 +136,16 @@\n-            FileLock lock;\n-            if (b)\n-                lock = channel.lock();\n-            else\n-                lock = channel.tryLock();\n-            lock.release();\n+            try (FileLock lock = b ? channel.lock() : channel.tryLock()) {\n+            }\n+\n+            Random rnd = new Random(System.currentTimeMillis());\n+            long position = rnd.nextInt(Integer.MAX_VALUE);\n+            long expectedSize = Long.MAX_VALUE - position;\n+\n+            for (boolean shared : new boolean[] {false, true}) {\n+                try (FileLock lock = b ? channel.lock(position, 0, false) :\n+                    channel.tryLock(position, 0, false)) {\n+                    if(lock.size() != expectedSize)\n+                        throw new RuntimeException(\"Size not \" + expectedSize +\n+                            \" for position \" + position + \" of \" +\n+                            (shared ? \"exclusive\" : \"shared\") + \" lock\");\n+                }\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Lock.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"}]}