[{"commit":{"message":"Merge jdk:master\n\nChange-Id: Ifa60f3b79513c22dbf932f1da623289687bc1070"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"8280f233de3eaaa3dffbfe15dd718a1d6d430cc0"},{"commit":{"message":"8282966: AArch64: Optimize VectorMask.toLong with SVE2\n\nThis patch optimizes the backend implementation of VectorMaskToLong for\nAArch64, given a more efficient approach to mov value bits from\npredicate register to general purpose register as x86 PMOVMSK[1] does,\nby using BEXT[2] which is available in SVE2.\n\nWith this patch, the final code (input mask is byte type with\nSPECIESE_512, generated on an SVE vector reg size of 512-bit QEMU\nemulator) changes as below:\n\nBefore:\n\n        mov     z16.b, p0\/z, #1\n        fmov    x0, d16\n        orr     x0, x0, x0, lsr #7\n        orr     x0, x0, x0, lsr #14\n        orr     x0, x0, x0, lsr #28\n        and     x0, x0, #0xff\n        fmov    x8, v16.d[1]\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #8\n\n        orr     x8, xzr, #0x2\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #16\n\n        orr     x8, xzr, #0x3\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #24\n\n        orr     x8, xzr, #0x4\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #32\n\n        mov     x8, #0x5\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #40\n\n        orr     x8, xzr, #0x6\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #48\n\n        orr     x8, xzr, #0x7\n        whilele p1.d, xzr, x8\n        lastb   x8, p1, z16.d\n        orr     x8, x8, x8, lsr #7\n        orr     x8, x8, x8, lsr #14\n        orr     x8, x8, x8, lsr #28\n        and     x8, x8, #0xff\n        orr     x0, x0, x8, lsl #56\n\nAfter:\n\n        mov     z16.b, p0\/z, #1\n        mov     z17.b, #1\n        bext    z16.d, z16.d, z17.d\n        mov     z17.d, #0\n        uzp1    z16.s, z16.s, z17.s\n        uzp1    z16.h, z16.h, z17.h\n        uzp1    z16.b, z16.b, z17.b\n        mov     x0, v16.d[0]\n\n[1] https:\/\/www.felixcloutier.com\/x86\/pmovmskb\n[2] https:\/\/developer.arm.com\/documentation\/ddi0602\/2020-12\/SVE-Instructions\/BEXT--Gather-lower-bits-from-positions-selected-by-bitmask-\n\nChange-Id: Ia983a20c89f76403e557ac21328f2f2e05dd08e0"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"08786aea2f4095fcc891426084714621bc141b9d"}]