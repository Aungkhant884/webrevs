{"files":[{"patch":"@@ -450,0 +450,3 @@\n+            } catch (SocketException se) {\n+                \/\/ don't change exception in case of SocketException\n+                throw se;\n@@ -1414,0 +1417,3 @@\n+            } catch (SocketException se) {\n+                \/\/ don't change exception in case of SocketException\n+                throw se;\n@@ -1479,0 +1485,3 @@\n+            } catch (SocketException se) {\n+                \/\/ don't change exception in case of SocketException\n+                throw se;\n@@ -1667,2 +1676,3 @@\n-        \/\/ Don't close the Socket in case of timeouts or interrupts.\n-        if (cause instanceof InterruptedIOException) {\n+        \/\/ Don't close the Socket in case of timeouts, interrupts or SocketException.\n+        if (cause instanceof InterruptedIOException ||\n+                cause instanceof SocketException) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.SocketException;\n@@ -143,0 +144,3 @@\n+        } catch (SocketException se) {\n+            \/\/ don't change exception in case of SocketException\n+            throw se;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTransport.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SSLException | SocketException se) {\n@@ -136,1 +136,1 @@\n-                throw ssle;\n+                throw se;\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/TrustTrustedCert.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,324 @@\n+\/*\n+ * Copyright (c) 2017, 2020, Amazon and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8214339\n+ * @summary When a SocketException is thrown by the underlying layer, It\n+ *      should be thrown as is and not be transformed to an SSLException.\n+ * @run main\/othervm SSLSocketShouldThrowSocketException\n+ *\/\n+\n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n+import java.security.*;\n+import javax.net.ssl.*;\n+\n+public class SSLSocketShouldThrowSocketException {\n+\n+    \/*\n+     * =============================================================\n+     * Set the various variables needed for the tests, then\n+     * specify what tests to run on each side.\n+     *\/\n+\n+    \/*\n+     * Should we run the client or server in a separate thread?\n+     * Both sides can throw exceptions, but do you have a preference\n+     * as to which side should be the main thread.\n+     *\/\n+    static boolean separateServerThread = true;\n+\n+    \/*\n+     * Where do we find the keystores?\n+     *\/\n+    static String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n+    static String keyStoreFile = \"keystore\";\n+    static String trustStoreFile = \"truststore\";\n+    static String passwd = \"passphrase\";\n+\n+    \/*\n+     * Is the server ready to serve?\n+     *\/\n+    volatile static boolean serverReady = false;\n+\n+    \/*\n+     * Was the client responsible for closing the socket\n+     *\/\n+    volatile static boolean clientClosed = false;\n+\n+    \/*\n+     * Turn on SSL debugging?\n+     *\/\n+    static boolean debug = false;\n+\n+    \/*\n+     * If the client or server is doing some kind of object creation\n+     * that the other side depends on, and that thread prematurely\n+     * exits, you may experience a hang.  The test harness will\n+     * terminate all hung threads after its timeout has expired,\n+     * currently 3 minutes by default, but you might try to be\n+     * smart about it....\n+     *\/\n+\n+    \/*\n+     * Define the server side of the test.\n+     *\n+     * The server accepts 2 requests, The first request does not send\n+     * back a handshake message. The second request sends back a\n+     * handshake message.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    void doServerSide() throws Exception {\n+        SSLServerSocketFactory sslssf =\n+            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+        SSLServerSocket sslServerSocket =\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+\n+        serverPort = sslServerSocket.getLocalPort();\n+\n+        \/*\n+         * Signal Client, we're ready for his connect.\n+         *\/\n+        serverReady = true;\n+\n+        System.err.println(\"Server accepting: \" + System.nanoTime());\n+        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n+        System.err.println(\"Server accepted: \" + System.nanoTime());\n+\n+        System.err.println(\"Server accepting: \" + System.nanoTime());\n+        sslSocket = (SSLSocket) sslServerSocket.accept();\n+        sslSocket.startHandshake();\n+        System.err.println(\"Server accepted: \" + System.nanoTime());\n+\n+        while (!clientClosed) {\n+            Thread.sleep(500);\n+        }\n+    }\n+\n+    Socket initilizeClientSocket() throws Exception {\n+        \/*\n+         * Wait for server to get started.\n+         *\/\n+        System.out.println(\"waiting on server\");\n+        while (!serverReady) {\n+            Thread.sleep(50);\n+        }\n+        Thread.sleep(500);\n+        System.out.println(\"server ready\");\n+\n+        Socket baseSocket = new Socket(\"localhost\", serverPort);\n+        baseSocket.setSoTimeout(1000);\n+        return baseSocket;\n+    }\n+\n+    SSLSocket initilizeSSLSocket(Socket baseSocket) throws Exception {\n+        SSLSocketFactory sslsf =\n+            (SSLSocketFactory) SSLSocketFactory.getDefault();\n+        SSLSocket sslSocket = (SSLSocket)\n+            sslsf.createSocket(baseSocket, \"localhost\", serverPort, false);\n+        return sslSocket;\n+    }\n+\n+    \/*\n+     * The client should throw a SocketException without wrapping it\n+     * during the handshake process.\n+     *\/\n+    void doClientSideHandshakeClose() throws Exception {\n+\n+        Socket baseSocket = initilizeClientSocket();\n+        SSLSocket sslSocket = initilizeSSLSocket(baseSocket);\n+\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    Thread.sleep(10);\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+\n+    }\n+\n+    volatile static boolean handshakeCompleted = false;\n+\n+    \/*\n+     * The client should throw SocketException without wrapping it\n+     * while waiting to read data from the socket.\n+     *\/\n+    void doClientSideDataClose() throws Exception {\n+\n+        Socket baseSocket = initilizeClientSocket();\n+        SSLSocket sslSocket = initilizeSSLSocket(baseSocket);\n+\n+        handshakeCompleted = false;\n+\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    while (!handshakeCompleted) {\n+                        Thread.sleep(10);\n+                    }\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            handshakeCompleted = true;\n+            System.err.println(\"Reading data from server\");\n+            BufferedReader is = new BufferedReader(\n+                    new InputStreamReader(sslSocket.getInputStream()));\n+            String data = is.readLine();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+\n+    }\n+\n+    \/*\n+     * =============================================================\n+     * The remainder is just support stuff\n+     *\/\n+\n+    \/\/ use any free port by default\n+    volatile int serverPort = 0;\n+\n+    volatile Exception serverException = null;\n+\n+    volatile byte[] serverDigest = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        String keyFilename =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile;\n+        String trustFilename =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + trustStoreFile;\n+\n+        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n+        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n+\n+        if (debug)\n+            System.setProperty(\"javax.net.debug\", \"all\");\n+\n+        \/*\n+         * Start the tests.\n+         *\/\n+        new SSLSocketShouldThrowSocketException();\n+    }\n+\n+    Thread serverThread = null;\n+\n+    \/*\n+     * Primary constructor, used to drive remainder of the test.\n+     *\n+     * Fork off the server side.\n+     *\/\n+    SSLSocketShouldThrowSocketException() throws Exception {\n+        startServer();\n+        startClient();\n+\n+        clientClosed = true;\n+        System.err.println(\"Client closed: \" + System.nanoTime());\n+\n+        \/*\n+         * Wait for other side to close down.\n+         *\/\n+        serverThread.join();\n+\n+        \/*\n+         * When we get here, the test is pretty much over.\n+         *\n+         * If the main thread excepted, that propagates back\n+         * immediately.  If the other thread threw an exception, we\n+         * should report back.\n+         *\/\n+        if (serverException != null) {\n+            System.out.print(\"Server Exception:\");\n+            throw serverException;\n+        }\n+    }\n+\n+    void startServer() throws Exception {\n+        serverThread = new Thread() {\n+            public void run() {\n+                try {\n+                     doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    System.err.println(e);\n+                    serverReady = true;\n+                    serverException = e;\n+                }\n+            }\n+        };\n+        serverThread.start();\n+    }\n+\n+    void startClient() throws Exception {\n+        doClientSideHandshakeClose();\n+        doClientSideDataClose();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketShouldThrowSocketException.java","additions":324,"deletions":0,"binary":false,"changes":324,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm SSLExceptionForIOIssue\n+ * @run main\/othervm SocketExceptionForSocketIssues\n@@ -41,1 +41,1 @@\n-public class SSLExceptionForIOIssue implements SSLContextTemplate {\n+public class SocketExceptionForSocketIssues implements SSLContextTemplate {\n@@ -45,1 +45,1 @@\n-        new SSLExceptionForIOIssue().test();\n+        new SocketExceptionForSocketIssues().test();\n@@ -82,1 +82,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SocketException se) {\n@@ -84,1 +84,1 @@\n-            System.err.println(\"server exception: \" + ssle);\n+            System.err.println(\"server exception: \" + se);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SocketExceptionForSocketIssues.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLExceptionForIOIssue.java","status":"renamed"}]}