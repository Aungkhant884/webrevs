{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @summary  Verifies Disable checkbox and radiobutton color is honored in all L&F\n+ * @summary  Verifies disabled color for JCheckbox and JRadiobutton is honored in all L&F\n@@ -51,3 +51,3 @@\n-    private static Color radioButtonColor = Color.RED;\n-    private static Color checkboxColor = Color.GREEN;\n-    private static int tolerance = 20;\n+    private static final Color radioButtonColor = Color.RED;\n+    private static final Color checkboxColor = Color.GREEN;\n+    private static final int tolerance = 20;\n@@ -55,13 +55,3 @@\n-    private static void blockTillDisplayed(Component comp) {\n-        Point p = null;\n-        while (p == null) {\n-            try {\n-                p = comp.getLocationOnScreen();\n-            } catch (IllegalStateException e) {\n-                try {\n-                    Thread.sleep(500);\n-                } catch (InterruptedException ie) {\n-                }\n-            }\n-        }\n-    }\n+    private static boolean checkComponent(Component comp, Color c) throws Exception {\n+        int correctColoredPixels = 0;\n+        int totalPixels = 0;\n@@ -69,2 +59,0 @@\n-    private static boolean checkComponent(Component comp, Color c) throws Exception{\n-        int correctColoredPixels=0, totalPixels=0;\n@@ -75,1 +63,0 @@\n-        robot.waitForIdle();\n@@ -77,4 +64,3 @@\n-        int y = point.y+rect.height\/2;\n-        for (int x=point.x; x<point.x+rect.width; x++) {\n-            Color color = robot\n-                    .getPixelColor(x, y);\n+        int y = point.y + rect.height \/ 2;\n+        for (int x = point.x; x < point.x + rect.width; x++) {\n+            Color color = robot.getPixelColor(x, y);\n@@ -83,1 +69,1 @@\n-            if (color.equals(c))\n+            if (color.equals(c)) {\n@@ -85,0 +71,1 @@\n+            }\n@@ -88,5 +75,1 @@\n-        if (((double)correctColoredPixels\/totalPixels*100) < tolerance) {\n-            return false;\n-        } else {\n-            return true;\n-        }\n+        return ((double)correctColoredPixels\/totalPixels*100) >= tolerance;\n@@ -106,0 +89,22 @@\n+    private static void createUI() {\n+        UIManager.getDefaults().put(\"CheckBox.disabledText\", checkboxColor);\n+        UIManager.getDefaults().put(\"RadioButton.disabledText\", radioButtonColor);\n+\n+        checkBox = new JCheckBox(\"WWWWW\");\n+        radioButton = new JRadioButton(\"WWWWW\");\n+        checkBox.setFont(checkBox.getFont().deriveFont(50.0f));\n+        radioButton.setFont(radioButton.getFont().deriveFont(50.0f));\n+        checkBox.setEnabled(false);\n+        radioButton.setEnabled(false);\n+\n+        frame = new JFrame(\"bug4314194\");\n+        frame.getContentPane().add(radioButton, BorderLayout.SOUTH);\n+        frame.getContentPane().add(checkBox, BorderLayout.NORTH);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+\n@@ -111,2 +116,1 @@\n-                UIManager.getInstalledLookAndFeels()) {\n-            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+                 UIManager.getInstalledLookAndFeels()) {\n@@ -114,0 +118,1 @@\n+                System.out.println(\"Skipping Motif L&F as it is deprecated\");\n@@ -116,1 +121,2 @@\n-            setLookAndFeel(laf);\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n@@ -118,24 +124,1 @@\n-                SwingUtilities.invokeAndWait(new Runnable() {\n-                    public void run() {\n-                        UIManager.getDefaults().put(\"CheckBox.disabledText\",\n-                                checkboxColor);\n-                        UIManager.getDefaults().put(\"RadioButton.disabledText\",\n-                                radioButtonColor);\n-                        checkBox = new JCheckBox(\"WWWWW\");\n-                        radioButton = new JRadioButton(\"WWWWW\");\n-                        checkBox.setFont(checkBox.getFont().deriveFont(50.0f));\n-                        radioButton.setFont(radioButton.getFont().deriveFont(50.0f));\n-                        checkBox.setEnabled(false);\n-                        radioButton.setEnabled(false);\n-\n-                        frame = new JFrame(\"bug4314194\");\n-                        frame.getContentPane().add(radioButton, BorderLayout.SOUTH);\n-                        frame.getContentPane().add(checkBox, BorderLayout.NORTH);\n-                        frame.pack();\n-                        frame.setAlwaysOnTop(true);\n-                        frame.setLocationRelativeTo(null);\n-                        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-                        frame.setVisible(true);\n-                    }\n-                });\n-\n+                SwingUtilities.invokeAndWait(() -> createUI());\n@@ -143,3 +126,1 @@\n-                robot.delay(500);\n-\n-                blockTillDisplayed(frame);\n+                robot.delay(1000);\n@@ -147,2 +128,1 @@\n-                boolean colorFound = checkComponent(checkBox, checkboxColor);\n-                if (!colorFound) {\n+                if (!checkComponent(checkBox, checkboxColor)) {\n@@ -152,2 +132,1 @@\n-                colorFound = checkComponent(radioButton, radioButtonColor);\n-                if (!colorFound) {\n+                if (!checkComponent(radioButton, radioButtonColor)) {\n@@ -158,1 +137,1 @@\n-                    SwingUtilities.invokeAndWait(frame::dispose);\n+                    SwingUtilities.invokeAndWait(() -> frame.dispose());\n@@ -162,1 +141,0 @@\n-\n@@ -165,0 +143,1 @@\n+\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/4314194\/bug4314194.java","additions":45,"deletions":66,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -1,164 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @key headful\n- * @bug 4314194 8075916\n- * @summary  Verifies Disable checkbox and radiobutton color is honored in Nimbus\n- * @run TestDisabledChkboxRadioBtn\n- *\/\n-\n-import java.awt.BorderLayout;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Robot;\n-import javax.swing.JFrame;\n-import javax.swing.JCheckBox;\n-import javax.swing.JRadioButton;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.UnsupportedLookAndFeelException;\n-\n-public class TestDisabledChkboxRadioBtn {\n-    private static JFrame frame;\n-    private static JRadioButton radioButton;\n-    private static JCheckBox checkBox;\n-    private static Point point;\n-    private static Rectangle rect;\n-    private static Robot robot;\n-    private static Color radioButtonColor = Color.RED;\n-    private static Color checkboxColor = Color.GREEN;\n-    private static int tolerance = 20;\n-\n-    private static void blockTillDisplayed(Component comp) {\n-        Point p = null;\n-        while (p == null) {\n-            try {\n-                p = comp.getLocationOnScreen();\n-            } catch (IllegalStateException e) {\n-                try {\n-                    Thread.sleep(500);\n-                } catch (InterruptedException ie) {\n-                }\n-            }\n-        }\n-    }\n-\n-    private static boolean checkComponent(Component comp, Color c) throws Exception{\n-        int correctColoredPixels=0, totalPixels=0;\n-        SwingUtilities.invokeAndWait(() -> {\n-            point = comp.getLocationOnScreen();\n-            rect = comp.getBounds();\n-        });\n-        robot.waitForIdle();\n-\n-        int y = point.y+rect.height\/2;\n-        for (int x=point.x; x<point.x+rect.width; x++) {\n-            Color color = robot\n-                    .getPixelColor(x, y);\n-            robot.waitForIdle();\n-\n-            if (color.equals(c))\n-                correctColoredPixels++;\n-            totalPixels++;\n-        }\n-\n-        if (((double)correctColoredPixels\/totalPixels*100) < tolerance) {\n-            return false;\n-        } else {\n-            return true;\n-        }\n-    }\n-\n-    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n-        try {\n-            UIManager.setLookAndFeel(laf.getClassName());\n-        } catch (UnsupportedLookAndFeelException ignored) {\n-            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n-        } catch (ClassNotFoundException | InstantiationException\n-                | IllegalAccessException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        robot = new Robot();\n-        robot.setAutoDelay(100);\n-\n-        for (UIManager.LookAndFeelInfo laf :\n-                UIManager.getInstalledLookAndFeels()) {\n-            System.out.println(\"Testing L&F: \" + laf.getClassName());\n-            if (laf.getClassName().contains(\"Motif\")) {\n-                continue;\n-            }\n-            setLookAndFeel(laf);\n-            try {\n-                SwingUtilities.invokeAndWait(new Runnable() {\n-                    public void run() {\n-                        UIManager.getDefaults().put(\"CheckBox.disabledText\",\n-                                checkboxColor);\n-                        UIManager.getDefaults().put(\"RadioButton.disabledText\",\n-                                radioButtonColor);\n-                        checkBox = new JCheckBox(\"WWWWW\");\n-                        radioButton = new JRadioButton(\"WWWWW\");\n-                        checkBox.setFont(checkBox.getFont().deriveFont(50.0f));\n-                        radioButton.setFont(radioButton.getFont().deriveFont(50.0f));\n-                        checkBox.setEnabled(false);\n-                        radioButton.setEnabled(false);\n-\n-                        frame = new JFrame(\"bug4314194\");\n-                        frame.getContentPane().add(radioButton, BorderLayout.SOUTH);\n-                        frame.getContentPane().add(checkBox, BorderLayout.NORTH);\n-                        frame.pack();\n-                        frame.setAlwaysOnTop(true);\n-                        frame.setLocationRelativeTo(null);\n-                        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-                        frame.setVisible(true);\n-                    }\n-                });\n-\n-                robot.waitForIdle();\n-                robot.delay(500);\n-\n-                blockTillDisplayed(frame);\n-\n-                boolean colorFound = checkComponent(checkBox, checkboxColor);\n-                if (!colorFound) {\n-                    throw new RuntimeException(\"Correct color not set for Checkbox\");\n-                }\n-\n-                colorFound = checkComponent(radioButton, radioButtonColor);\n-                if (!colorFound) {\n-                    throw new RuntimeException(\"Correct color not set for RadioButton\");\n-                }\n-            } finally {\n-                if (frame != null) {\n-                    SwingUtilities.invokeAndWait(frame::dispose);\n-                }\n-            }\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/plaf\/nimbus\/TestDisabledChkboxRadioBtn.java","additions":0,"deletions":164,"binary":false,"changes":164,"status":"deleted"}]}