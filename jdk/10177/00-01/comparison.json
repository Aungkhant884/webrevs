{"files":[{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4314194 8075916\n+ * @summary  Verifies Disable checkbox and radiobutton color is honored in Nimbus\n+ * @run TestDisabledChkboxRadioBtn\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.JCheckBox;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class TestDisabledChkboxRadioBtn {\n+    private static JFrame frame;\n+    private static JRadioButton radioButton;\n+    private static JCheckBox checkBox;\n+    private static Point point;\n+    private static Rectangle rect;\n+    private static Robot robot;\n+    private static Color radioButtonColor = Color.RED;\n+    private static Color checkboxColor = Color.GREEN;\n+    private static int tolerance = 20;\n+\n+    private static void blockTillDisplayed(Component comp) {\n+        Point p = null;\n+        while (p == null) {\n+            try {\n+                p = comp.getLocationOnScreen();\n+            } catch (IllegalStateException e) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean checkComponent(Component comp, Color c) throws Exception{\n+        int correctColoredPixels=0, totalPixels=0;\n+        SwingUtilities.invokeAndWait(() -> {\n+            point = comp.getLocationOnScreen();\n+            rect = comp.getBounds();\n+        });\n+        robot.waitForIdle();\n+\n+        int y = point.y+rect.height\/2;\n+        for (int x=point.x; x<point.x+rect.width; x++) {\n+            Color color = robot\n+                    .getPixelColor(x, y);\n+            robot.waitForIdle();\n+\n+            if (color.equals(c))\n+                correctColoredPixels++;\n+            totalPixels++;\n+        }\n+\n+        if (((double)correctColoredPixels\/totalPixels*100) < tolerance) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            if (laf.getClassName().contains(\"Motif\")) {\n+                continue;\n+            }\n+            setLookAndFeel(laf);\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+                    public void run() {\n+                        UIManager.getDefaults().put(\"CheckBox.disabledText\",\n+                                checkboxColor);\n+                        UIManager.getDefaults().put(\"RadioButton.disabledText\",\n+                                radioButtonColor);\n+                        checkBox = new JCheckBox(\"WWWWW\");\n+                        radioButton = new JRadioButton(\"WWWWW\");\n+                        checkBox.setFont(checkBox.getFont().deriveFont(50.0f));\n+                        radioButton.setFont(radioButton.getFont().deriveFont(50.0f));\n+                        checkBox.setEnabled(false);\n+                        radioButton.setEnabled(false);\n+\n+                        frame = new JFrame(\"bug4314194\");\n+                        frame.getContentPane().add(radioButton, BorderLayout.SOUTH);\n+                        frame.getContentPane().add(checkBox, BorderLayout.NORTH);\n+                        frame.pack();\n+                        frame.setAlwaysOnTop(true);\n+                        frame.setLocationRelativeTo(null);\n+                        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                        frame.setVisible(true);\n+                    }\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                blockTillDisplayed(frame);\n+\n+                boolean colorFound = checkComponent(checkBox, checkboxColor);\n+                if (!colorFound) {\n+                    throw new RuntimeException(\"Correct color not set for Checkbox\");\n+                }\n+\n+                colorFound = checkComponent(radioButton, radioButtonColor);\n+                if (!colorFound) {\n+                    throw new RuntimeException(\"Correct color not set for RadioButton\");\n+                }\n+            } finally {\n+                if (frame != null) {\n+                    SwingUtilities.invokeAndWait(frame::dispose);\n+                }\n+            }\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/nimbus\/TestDisabledChkboxRadioBtn.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}