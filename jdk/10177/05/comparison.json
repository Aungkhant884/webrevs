{"files":[{"patch":"@@ -782,0 +782,8 @@\n+            } else if (c instanceof JCheckBox) {\n+                if (UIManager.getColor(\"CheckBox.disabledText\") != null) {\n+                    return UIManager.getColor(\"CheckBox.disabledText\");\n+                }\n+            } else if (c instanceof JRadioButton) {\n+                if (UIManager.getColor(\"RadioButton.disabledText\") != null) {\n+                    return UIManager.getColor(\"RadioButton.disabledText\");\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthStyle.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4314194 8075916\n+ * @summary  Verifies disabled color for JCheckbox and JRadiobutton is honored in all L&F\n+ * @run main bug4314194\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.JCheckBox;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class bug4314194 {\n+    private static JFrame frame;\n+    private static JRadioButton radioButton;\n+    private static JCheckBox checkBox;\n+    private static Point point;\n+    private static Rectangle rect;\n+    private static Robot robot;\n+    private static final Color radioButtonColor = Color.RED;\n+    private static final Color checkboxColor = Color.GREEN;\n+    private static final int tolerance = 20;\n+\n+    private static boolean checkComponent(Component comp, Color c) throws Exception {\n+        int correctColoredPixels = 0;\n+        int totalPixels = 0;\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            point = comp.getLocationOnScreen();\n+            rect = comp.getBounds();\n+        });\n+\n+        int y = point.y + rect.height \/ 2;\n+        for (int x = point.x; x < point.x + rect.width; x++) {\n+            Color color = robot.getPixelColor(x, y);\n+            robot.waitForIdle();\n+\n+            if (color.equals(c)) {\n+                correctColoredPixels++;\n+            }\n+            totalPixels++;\n+        }\n+\n+        return ((double)correctColoredPixels\/totalPixels*100) >= tolerance;\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void createUI() {\n+        UIManager.getDefaults().put(\"CheckBox.disabledText\", checkboxColor);\n+        UIManager.getDefaults().put(\"RadioButton.disabledText\", radioButtonColor);\n+\n+        checkBox = new JCheckBox(\"WWWWW\");\n+        radioButton = new JRadioButton(\"WWWWW\");\n+        checkBox.setFont(checkBox.getFont().deriveFont(50.0f));\n+        radioButton.setFont(radioButton.getFont().deriveFont(50.0f));\n+        checkBox.setEnabled(false);\n+        radioButton.setEnabled(false);\n+\n+        frame = new JFrame(\"bug4314194\");\n+        frame.getContentPane().add(radioButton, BorderLayout.SOUTH);\n+        frame.getContentPane().add(checkBox, BorderLayout.NORTH);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                 UIManager.getInstalledLookAndFeels()) {\n+            if (laf.getClassName().contains(\"Motif\")) {\n+                System.out.println(\"Skipping Motif L&F as it is deprecated\");\n+                continue;\n+            }\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            try {\n+                SwingUtilities.invokeAndWait(() -> createUI());\n+                robot.waitForIdle();\n+                robot.delay(1000);\n+\n+                if (!checkComponent(checkBox, checkboxColor)) {\n+                    throw new RuntimeException(\"Correct color not set for Checkbox\");\n+                }\n+\n+                if (!checkComponent(radioButton, radioButtonColor)) {\n+                    throw new RuntimeException(\"Correct color not set for RadioButton\");\n+                }\n+            } finally {\n+                if (frame != null) {\n+                    SwingUtilities.invokeAndWait(() -> frame.dispose());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/4314194\/bug4314194.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}