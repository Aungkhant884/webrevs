{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -762,1 +762,1 @@\n-            return millis - Math.floorMod(millis, tickNanos \/ 1000_000L);\n+            return tickNanos < 1000_000L ? millis : millis - Math.floorMod(millis, tickNanos \/ 1000_000L);\n","filename":"src\/java.base\/share\/classes\/java\/time\/Clock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,2 @@\n+ *\n+ * @bug 8310232\n@@ -97,0 +99,8 @@\n+    \/\/-----------------------------------------------------------------------\n+    \/\/ Ensure divide-by-zero will not be thrown\n+    \/\/ @bug 8310232\n+    public void test_millis() {\n+        var test = Clock.tick(Clock.systemUTC(), Duration.ofNanos(1000));\n+        test.millis();\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/TestClock_Tick.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}