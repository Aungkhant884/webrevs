{"files":[{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc.z;\n-\n-\/*\n- * @test TestHighUsage\n- * @requires vm.gc.ZGenerational\n- * @summary Test ZGC \"High Usage\" rule\n- * @library \/test\/lib\n- * @ignore 8308843\n- * @run main\/othervm gc.z.TestHighUsage\n- *\/\n-\n-import java.util.LinkedList;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestHighUsage {\n-    static class Test {\n-        private static final int K = 1024;\n-        private static final int M = K * K;\n-        private static final long maxCapacity = Runtime.getRuntime().maxMemory();\n-        private static final long slowAllocationThreshold = 16 * M;\n-        private static final long highUsageThreshold = maxCapacity \/ 20; \/\/ 5%\n-        private static volatile LinkedList<byte[]> keepAlive;\n-        private static volatile Object dummy;\n-\n-        public static void main(String[] args) throws Exception {\n-            System.out.println(\"Max capacity: \" + (maxCapacity \/ M) + \"M\");\n-            System.out.println(\"High usage threshold: \" + (highUsageThreshold \/ M) + \"M\");\n-            System.out.println(\"Allocating live-set\");\n-\n-            \/\/ Allocate live-set\n-            keepAlive = new LinkedList<>();\n-            while (Runtime.getRuntime().freeMemory() > slowAllocationThreshold) {\n-                while (Runtime.getRuntime().freeMemory() > slowAllocationThreshold) {\n-                    keepAlive.add(new byte[128 * K]);\n-                }\n-\n-                \/\/ Compact live-set and let allocation rate settle down\n-                System.gc();\n-                Thread.sleep(2000);\n-            }\n-\n-            System.out.println(\"Allocating garbage slowly\");\n-\n-            \/\/ Allocate garbage slowly, so that the sampled allocation rate on average\n-            \/\/ becomes zero MB\/s for the last 1 second windows. Once we reach the high\n-            \/\/ usage threshold we idle to allow for a \"High Usage\" GC cycle to happen.\n-            \/\/ We need to allocate slowly to avoid an \"Allocation Rate\" GC cycle.\n-            for (int i = 0; i < 300; i++) {\n-                if (Runtime.getRuntime().freeMemory() > highUsageThreshold) {\n-                    \/\/ Allocate\n-                    dummy = new byte[128 * K];\n-                    System.out.println(\"Free: \" + (Runtime.getRuntime().freeMemory() \/ M) + \"M (Allocating)\");\n-                } else {\n-                    \/\/ Idle\n-                    System.out.println(\"Free: \" + (Runtime.getRuntime().freeMemory() \/ M) + \"M (Idling)\");\n-                }\n-\n-                Thread.sleep(250);\n-            }\n-\n-            System.out.println(\"Done\");\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ProcessTools.executeTestJvm(\"-XX:+UseZGC\",\n-                                    \"-XX:+ZGenerational\",\n-                                    \"-XX:-ZProactive\",\n-                                    \"-Xms128M\",\n-                                    \"-Xmx128M\",\n-                                    \"-XX:ParallelGCThreads=1\",\n-                                    \"-XX:ConcGCThreads=1\",\n-                                    \"-Xlog:gc,gc+start\",\n-                                    Test.class.getName())\n-                    .shouldNotContain(\"Allocation Stall\")\n-                    .shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestHighUsage.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"}]}