{"files":[{"patch":"@@ -217,0 +217,5 @@\n+    \/**\n+     * The index file name.\n+     *\/\n+    static final String INDEX_NAME = \"META-INF\/INDEX.LIST\";\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.util.jar.JarIndex;\n@@ -136,1 +135,1 @@\n-            if (first.getName().equalsIgnoreCase(JarIndex.INDEX_NAME))\n+            if (first.getName().equalsIgnoreCase(JarFile.INDEX_NAME))\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.internal.util.jar.JarIndex;\n@@ -148,1 +147,1 @@\n-                        uname.equals(JarIndex.INDEX_NAME)) {\n+                        uname.equals(JarFile.INDEX_NAME)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-import jdk.internal.util.jar.InvalidJarIndexError;\n-import jdk.internal.util.jar.JarIndex;\n@@ -437,3 +435,1 @@\n-            \/\/ Skip this URL if it already has a Loader. (Loader\n-            \/\/ may be null in the case where URL has not been opened\n-            \/\/ but is referenced by a JAR index.)\n+            \/\/ Skip this URL if it already has a Loader.\n@@ -709,1 +705,0 @@\n-        private JarIndex index;\n@@ -768,21 +763,0 @@\n-                                index = JarIndex.getJarIndex(jar);\n-                                if (index != null) {\n-                                    String[] jarfiles = index.getJarFiles();\n-                                \/\/ Add all the dependent URLs to the lmap so that loaders\n-                                \/\/ will not be created for them by URLClassPath.getLoader(int)\n-                                \/\/ if the same URL occurs later on the main class path.  We set\n-                                \/\/ Loader to null here to avoid creating a Loader for each\n-                                \/\/ URL until we actually need to try to load something from them.\n-                                    for (int i = 0; i < jarfiles.length; i++) {\n-                                        try {\n-                                            URL jarURL = new URL(csu, jarfiles[i]);\n-                                            \/\/ If a non-null loader already exists, leave it alone.\n-                                            String urlNoFragString = URLUtil.urlNoFragString(jarURL);\n-                                            if (!lmap.containsKey(urlNoFragString)) {\n-                                                lmap.put(urlNoFragString, null);\n-                                            }\n-                                        } catch (MalformedURLException e) {\n-                                            continue;\n-                                        }\n-                                    }\n-                                }\n@@ -831,12 +805,0 @@\n-        \/*\n-         * Returns the index of this JarLoader if it exists.\n-         *\/\n-        JarIndex getIndex() {\n-            try {\n-                ensureOpen();\n-            } catch (IOException e) {\n-                throw new InternalError(e);\n-            }\n-            return index;\n-        }\n-\n@@ -890,27 +852,0 @@\n-\n-        \/*\n-         * Returns true iff at least one resource in the jar file has the same\n-         * package name as that of the specified resource name.\n-         *\/\n-        boolean validIndex(final String name) {\n-            String packageName = name;\n-            int pos;\n-            if ((pos = name.lastIndexOf('\/')) != -1) {\n-                packageName = name.substring(0, pos);\n-            }\n-\n-            String entryName;\n-            ZipEntry entry;\n-            Enumeration<JarEntry> enum_ = jar.entries();\n-            while (enum_.hasMoreElements()) {\n-                entry = enum_.nextElement();\n-                entryName = entry.getName();\n-                if ((pos = entryName.lastIndexOf('\/')) != -1)\n-                    entryName = entryName.substring(0, pos);\n-                if (entryName.equals(packageName)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-\n@@ -943,120 +878,0 @@\n-            if (index == null)\n-                return null;\n-\n-            HashSet<String> visited = new HashSet<>();\n-            return getResource(name, check, visited);\n-        }\n-\n-        \/*\n-         * Version of getResource() that tracks the jar files that have been\n-         * visited by linking through the index files. This helper method uses\n-         * a HashSet to store the URLs of jar files that have been searched and\n-         * uses it to avoid going into an infinite loop, looking for a\n-         * non-existent resource.\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        Resource getResource(final String name, boolean check,\n-                             Set<String> visited) {\n-            Resource res;\n-            String[] jarFiles;\n-            int count = 0;\n-            List<String> jarFilesList;\n-\n-            \/* If there no jar files in the index that can potential contain\n-             * this resource then return immediately.\n-             *\/\n-            if ((jarFilesList = index.get(name)) == null)\n-                return null;\n-\n-            do {\n-                int size = jarFilesList.size();\n-                jarFiles = jarFilesList.toArray(new String[size]);\n-                \/* loop through the mapped jar file list *\/\n-                while (count < size) {\n-                    String jarName = jarFiles[count++];\n-                    JarLoader newLoader;\n-                    final URL url;\n-\n-                    try{\n-                        url = new URL(csu, jarName);\n-                        String urlNoFragString = URLUtil.urlNoFragString(url);\n-                        if ((newLoader = (JarLoader)lmap.get(urlNoFragString)) == null) {\n-                            \/* no loader has been set up for this jar file\n-                             * before\n-                             *\/\n-                            newLoader = AccessController.doPrivileged(\n-                                new PrivilegedExceptionAction<>() {\n-                                    public JarLoader run() throws IOException {\n-                                        return new JarLoader(url, handler,\n-                                            lmap, acc);\n-                                    }\n-                                }, acc);\n-\n-                            \/* this newly opened jar file has its own index,\n-                             * merge it into the parent's index, taking into\n-                             * account the relative path.\n-                             *\/\n-                            JarIndex newIndex = newLoader.getIndex();\n-                            if (newIndex != null) {\n-                                int pos = jarName.lastIndexOf('\/');\n-                                newIndex.merge(this.index, (pos == -1 ?\n-                                    null : jarName.substring(0, pos + 1)));\n-                            }\n-\n-                            \/* put it in the global hashtable *\/\n-                            lmap.put(urlNoFragString, newLoader);\n-                        }\n-                    } catch (PrivilegedActionException pae) {\n-                        continue;\n-                    } catch (MalformedURLException e) {\n-                        continue;\n-                    }\n-\n-                    \/* Note that the addition of the url to the list of visited\n-                     * jars incorporates a check for presence in the hashmap\n-                     *\/\n-                    boolean visitedURL = !visited.add(URLUtil.urlNoFragString(url));\n-                    if (!visitedURL) {\n-                        try {\n-                            newLoader.ensureOpen();\n-                        } catch (IOException e) {\n-                            throw new InternalError(e);\n-                        }\n-                        final JarEntry entry = newLoader.jar.getJarEntry(name);\n-                        if (entry != null) {\n-                            return newLoader.checkResource(name, check, entry);\n-                        }\n-\n-                        \/* Verify that at least one other resource with the\n-                         * same package name as the lookedup resource is\n-                         * present in the new jar\n-                         *\/\n-                        if (!newLoader.validIndex(name)) {\n-                            \/* the mapping is wrong *\/\n-                            throw new InvalidJarIndexError(\"Invalid index\");\n-                        }\n-                    }\n-\n-                    \/* If newLoader is the current loader or if it is a\n-                     * loader that has already been searched or if the new\n-                     * loader does not have an index then skip it\n-                     * and move on to the next loader.\n-                     *\/\n-                    if (visitedURL || newLoader == this ||\n-                            newLoader.getIndex() == null) {\n-                        continue;\n-                    }\n-\n-                    \/* Process the index of the new loader\n-                     *\/\n-                    if ((res = newLoader.getResource(name, check, visited))\n-                            != null) {\n-                        return res;\n-                    }\n-                }\n-                \/\/ Get the list of jar files again as the list could have grown\n-                \/\/ due to merging of index files.\n-                jarFilesList = index.get(name);\n-\n-            \/\/ If the count is unchanged, we are done.\n-            } while (count < jarFilesList.size());\n@@ -1066,1 +881,0 @@\n-\n@@ -1072,4 +886,0 @@\n-            if (index != null) {\n-                return null;\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":1,"deletions":191,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -301,1 +301,2 @@\n-        jdk.incubator.foreign;\n+        jdk.incubator.foreign,\n+        jdk.jartool;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,1 @@\n-package jdk.internal.util.jar;\n-\n-import sun.nio.cs.UTF_8;\n+package sun.tools.jar;\n@@ -35,0 +33,1 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -70,1 +69,1 @@\n-     *\/\n+    *\/\n@@ -256,1 +255,1 @@\n-            (new OutputStreamWriter(out, UTF_8.INSTANCE));\n+            (new OutputStreamWriter(out, UTF_8));\n@@ -286,1 +285,1 @@\n-            (new InputStreamReader(is, UTF_8.INSTANCE));\n+            (new InputStreamReader(is, UTF_8));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/JarIndex.java","additions":5,"deletions":6,"binary":false,"changes":11,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/JarIndex.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-import jdk.internal.util.jar.JarIndex;\n@@ -74,1 +73,1 @@\n-import static jdk.internal.util.jar.JarIndex.INDEX_NAME;\n+import static sun.tools.jar.JarIndex.INDEX_NAME;\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @summary InvalidJarIndexException due to bug in sun.misc.JarIndex.merge()\n- * @modules java.base\/jdk.internal.util.jar\n+ * @summary InvalidJarIndexException due to bug in sun.tools.jar.JarIndex.merge()\n+ * @modules jdk.jartool\/sun.tools.jar\n@@ -42,1 +42,1 @@\n-import jdk.internal.util.jar.JarIndex;\n+import sun.tools.jar.JarIndex;\n","filename":"test\/jdk\/java\/util\/jar\/JarIndex\/JarIndexMergeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/jdk\/sun\/misc\/JarIndex\/JarIndexMergeTest.java","status":"renamed"},{"patch":"@@ -1,215 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     6901992\n- * @summary InvalidJarIndexException due to bug in sun.misc.JarIndex.merge()\n- *          Test URLClassLoader usage of the merge method when using indexes\n- * @author  Diego Belfer\n- *\/\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarOutputStream;\n-\n-public class JarIndexMergeForClassLoaderTest {\n-    static final String slash = File.separator;\n-    static final String testClassesDir = System.getProperty(\"test.classes\", \".\");\n-    static final String jar;\n-    static final boolean debug = true;\n-    static final File tmpFolder = new File(testClassesDir);\n-\n-    static {\n-        jar = System.getProperty(\"java.home\") + slash + \"bin\" + slash + \"jar\";\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Create the jars file\n-        File jar1 = buildJar1();\n-        File jar2 = buildJar2();\n-        File jar3 = buildJar3();\n-\n-        \/\/ Index jar files in two levels: jar1 -> jar2 -> jar3\n-        createIndex(jar2.getName(), jar3.getName());\n-        createIndex(jar1.getName(), jar2.getName());\n-\n-        \/\/ Get root jar of the URLClassLoader\n-        URL url = jar1.toURI().toURL();\n-\n-        URLClassLoader classLoader = new URLClassLoader(new URL[] { url });\n-\n-        assertResource(classLoader, \"com\/jar1\/resource.file\", \"jar1\");\n-        assertResource(classLoader, \"com\/test\/resource1.file\", \"resource1\");\n-        assertResource(classLoader, \"com\/jar2\/resource.file\", \"jar2\");\n-        assertResource(classLoader, \"com\/test\/resource2.file\", \"resource2\");\n-        assertResource(classLoader, \"com\/test\/resource3.file\", \"resource3\");\n-\n-        \/*\n-         * The following two asserts failed before the fix of the bug 6901992\n-         *\/\n-        \/\/ Check that an existing file is found using the merged index\n-        assertResource(classLoader, \"com\/missing\/jar3\/resource.file\", \"jar3\");\n-        \/\/ Check that a non existent file in directory which does not contain\n-        \/\/ any file is not found and it does not throw InvalidJarIndexException\n-        assertResource(classLoader, \"com\/missing\/nofile\", null);\n-    }\n-\n-    private static File buildJar3() throws FileNotFoundException, IOException {\n-        JarBuilder jar3Builder = new JarBuilder(tmpFolder, \"jar3.jar\");\n-        jar3Builder.addResourceFile(\"com\/test\/resource3.file\", \"resource3\");\n-        jar3Builder.addResourceFile(\"com\/missing\/jar3\/resource.file\", \"jar3\");\n-        return jar3Builder.build();\n-    }\n-\n-    private static File buildJar2() throws FileNotFoundException, IOException {\n-        JarBuilder jar2Builder = new JarBuilder(tmpFolder, \"jar2.jar\");\n-        jar2Builder.addResourceFile(\"com\/jar2\/resource.file\", \"jar2\");\n-        jar2Builder.addResourceFile(\"com\/test\/resource2.file\", \"resource2\");\n-        return jar2Builder.build();\n-    }\n-\n-    private static File buildJar1() throws FileNotFoundException, IOException {\n-        JarBuilder jar1Builder = new JarBuilder(tmpFolder, \"jar1.jar\");\n-        jar1Builder.addResourceFile(\"com\/jar1\/resource.file\", \"jar1\");\n-        jar1Builder.addResourceFile(\"com\/test\/resource1.file\", \"resource1\");\n-        return jar1Builder.build();\n-    }\n-\n-    \/* create the index *\/\n-    static void createIndex(String parentJar, String childJar) {\n-        \/\/ ProcessBuilder is used so that the current directory can be set\n-        \/\/ to the directory that directly contains the jars.\n-        debug(\"Running jar to create the index for: \" + parentJar + \" and \"\n-                + childJar);\n-        ProcessBuilder pb = new ProcessBuilder(jar, \"-i\", parentJar, childJar);\n-\n-        pb.directory(tmpFolder);\n-        \/\/ pd.inheritIO();\n-        try {\n-            Process p = pb.start();\n-            if (p.waitFor() != 0)\n-                throw new RuntimeException(\"jar indexing failed\");\n-\n-            if (debug && p != null) {\n-                debugStream(p.getInputStream());\n-                debugStream(p.getErrorStream());\n-            }\n-        } catch (InterruptedException | IOException x) {\n-            throw new RuntimeException(x);\n-        }\n-    }\n-\n-    private static void debugStream(InputStream is) throws IOException {\n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                debug(line);\n-            }\n-        }\n-    }\n-\n-    private static void assertResource(URLClassLoader classLoader, String file,\n-            String expectedContent) throws IOException {\n-        InputStream fileStream = classLoader.getResourceAsStream(file);\n-\n-        if (fileStream == null && expectedContent == null) {\n-            return;\n-        }\n-        if (fileStream == null && expectedContent != null) {\n-            throw new RuntimeException(\n-                    buildMessage(file, expectedContent, null));\n-        }\n-        try {\n-            String actualContent = readAsString(fileStream);\n-\n-            if (fileStream != null && expectedContent == null) {\n-                throw new RuntimeException(buildMessage(file, null,\n-                        actualContent));\n-            }\n-            if (!expectedContent.equals(actualContent)) {\n-                throw new RuntimeException(buildMessage(file, expectedContent,\n-                        actualContent));\n-            }\n-        } finally {\n-            fileStream.close();\n-        }\n-    }\n-\n-    private static String buildMessage(String file, String expectedContent,\n-            String actualContent) {\n-        return \"Expected: \" + expectedContent + \" for: \" + file + \" was: \"\n-                + actualContent;\n-    }\n-\n-    private static String readAsString(InputStream fileStream)\n-            throws IOException {\n-        byte[] buffer = new byte[1024];\n-        int count, len = 0;\n-        while ((count = fileStream.read(buffer, len, buffer.length-len)) != -1)\n-                len += count;\n-        return new String(buffer, 0, len, \"ASCII\");\n-    }\n-\n-    static void debug(Object message) {\n-        if (debug)\n-            System.out.println(message);\n-    }\n-\n-    \/*\n-     * Helper class for building jar files\n-     *\/\n-    public static class JarBuilder {\n-        private JarOutputStream os;\n-        private File jarFile;\n-\n-        public JarBuilder(File tmpFolder, String jarName)\n-            throws FileNotFoundException, IOException\n-        {\n-            this.jarFile = new File(tmpFolder, jarName);\n-            this.os = new JarOutputStream(new FileOutputStream(jarFile));\n-        }\n-\n-        public void addResourceFile(String pathFromRoot, String content)\n-            throws IOException\n-        {\n-            JarEntry entry = new JarEntry(pathFromRoot);\n-            os.putNextEntry(entry);\n-            os.write(content.getBytes(\"ASCII\"));\n-            os.closeEntry();\n-        }\n-\n-        public File build() throws IOException {\n-            os.close();\n-            return jarFile;\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/JarIndexMergeForClassLoaderTest.java","additions":0,"deletions":215,"binary":false,"changes":215,"status":"deleted"},{"patch":"@@ -1,406 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6887710\n- * @summary Verify the impact of sun.misc.JarIndex.metaInfFilenames on ServiceLoader\n- * @modules jdk.jartool\/sun.tools.jar\n- *          jdk.httpserver\n- *          jdk.compiler\n- *          jdk.zipfs\n- * @run main\/othervm Basic\n- *\/\n-\n-import java.io.IOException;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.OutputStream;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.ServiceLoader;\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-\n-\/**\n- * Verifies the impact of sun.misc.JarIndex.metaInfFilenames on ServiceLoader\n- * and on finding resources via Class.getResource.\n- *\n- * 1) Compile the test sources:\n- *   jarA:\n- *     META-INF\/services\/my.happy.land\n- *     com\/message\/spi\/MessageService.java\n- *     a\/A.java\n- *   jarB:\n- *     META-INF\/JAVA2.DS\n- *     META-INF\/services\/no.name.service\n- *     b\/B.java\n- *   jarC:\n- *     META-INF\/fonts.mf\n- *     META-INF\/fonts\/Company-corporate.ttf\n- *     META-INF\/fonts\/kidpr.ttf\n- *     META-INF\/services\/com.message.spi.MessageService\n- *     my\/impl\/StandardMessageService.java\n- *\n- * 2) Build three jar files a.jar, b.jar, c.jar\n- *\n- * 3) Create an index in a.jar (jar -i a.jar b.jar c.jar)\n- *      with sun.misc.JarIndex.metaInfFilenames=true\n- *\n- * 4) Start a HTTP server serving out the three jars.\n- *\n- * The test then tries to locate services\/resources within the jars using\n- * URLClassLoader. Each request to the HTTP server is recorded to ensure\n- * only the correct amount of requests are being made.\n- *\n- *\/\n-\n-public class Basic {\n-    static final String slash = File.separator;\n-    static final String[] testSources =  {\n-         \"jarA\" + slash + \"a\" + slash + \"A.java\",\n-         \"jarA\" + slash + \"com\" + slash + \"message\" + slash + \"spi\" + slash + \"MessageService.java\",\n-         \"jarB\" + slash + \"b\" + slash + \"B.java\",\n-         \"jarC\" + slash + \"my\" + slash + \"impl\" + slash + \"StandardMessageService.java\"};\n-\n-    static final String testSrc = System.getProperty(\"test.src\");\n-    static final String testSrcDir = testSrc != null ? testSrc : \".\";\n-    static final String testClasses = System.getProperty(\"test.classes\");\n-    static final String testClassesDir = testClasses != null ? testClasses : \".\";\n-\n-    static JarHttpServer httpServer;\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Set global url cache to false so that we can track every jar request.\n-        (new URL(\"http:\/\/localhost\/\")).openConnection().setDefaultUseCaches(false);\n-\n-        buildTest();\n-\n-        try {\n-            httpServer = new JarHttpServer(testClassesDir);\n-            httpServer.start();\n-\n-            doTest(httpServer.getAddress());\n-\n-        } catch (IOException ioe) {\n-            ioe.printStackTrace();\n-        } finally {\n-            if (httpServer != null) { httpServer.stop(2); }\n-        }\n-    }\n-\n-    static void buildTest() {\n-        \/* compile the source that will be used to generate the jars *\/\n-        for (int i=0; i<testSources.length; i++)\n-            testSources[i] = testSrcDir + slash + testSources[i];\n-\n-        compile(\"-d\" , testClassesDir,\n-                \"-sourcepath\", testSrcDir,\n-                testSources[0], testSources[1], testSources[2], testSources[3]);\n-\n-        \/* build the 3 jar files *\/\n-        jar(\"-cf\", testClassesDir + slash + \"a.jar\",\n-            \"-C\", testClassesDir, \"a\",\n-            \"-C\", testClassesDir, \"com\",\n-            \"-C\", testSrcDir + slash + \"jarA\", \"META-INF\");\n-        jar(\"-cf\", testClassesDir + slash + \"b.jar\",\n-            \"-C\", testClassesDir, \"b\",\n-            \"-C\", testSrcDir + slash + \"jarB\", \"META-INF\");\n-        jar(\"-cf\", testClassesDir + slash + \"c.jar\",\n-            \"-C\", testClassesDir, \"my\",\n-            \"-C\", testSrcDir + slash + \"jarC\", \"META-INF\");\n-\n-        \/* Create an index in a.jar for b.jar and c.jar *\/\n-        createIndex(testClassesDir);\n-    }\n-\n-    \/* run jar <args> *\/\n-    static void jar(String... args) {\n-        debug(\"Running: jar \" + Arrays.toString(args));\n-        sun.tools.jar.Main jar = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n-        if (!jar.run(args)) {\n-            throw new RuntimeException(\"jar failed: args=\" + Arrays.toString(args));\n-        }\n-    }\n-\n-    \/* run javac <args> *\/\n-    static void compile(String... args) {\n-        debug(\"Running: javac \" + Arrays.toString(args));\n-        if (com.sun.tools.javac.Main.compile(args) != 0) {\n-             throw new RuntimeException(\"javac failed: args=\" + Arrays.toString(args));\n-        }\n-    }\n-\n-    static String jar;\n-    static {\n-        jar = System.getProperty(\"java.home\") + slash+  \"bin\" + slash + \"jar\";\n-    }\n-\n-    \/* create the index *\/\n-    static void createIndex(String workingDir) {\n-        \/\/ ProcessBuilder is used so that the current directory can be set\n-        \/\/ to the directory that directly contains the jars.\n-        debug(\"Running jar to create the index\");\n-        ProcessBuilder pb = new ProcessBuilder(\n-           jar, \"-J-Dsun.misc.JarIndex.metaInfFilenames=true\", \"-i\", \"a.jar\", \"b.jar\", \"c.jar\");\n-        pb.directory(new File(workingDir));\n-        \/\/pd.inheritIO();\n-        try {\n-            Process p = pb.start();\n-            if(p.waitFor() != 0)\n-                throw new RuntimeException(\"jar indexing failed\");\n-\n-            if(debug && p != null) {\n-                String line = null;\n-                BufferedReader reader =\n-                         new BufferedReader(new InputStreamReader(p.getInputStream()));\n-                while((line = reader.readLine()) != null)\n-                    debug(line);\n-                reader = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n-                while((line = reader.readLine()) != null)\n-                    debug(line);\n-            }\n-        } catch(InterruptedException ie) { throw new RuntimeException(ie);\n-        } catch(IOException e) { throw new RuntimeException(e); }\n-    }\n-\n-    static final boolean debug = true;\n-\n-    static void debug(Object message) { if (debug) System.out.println(message); }\n-\n-    \/* service define in c.jar *\/\n-    static final String messageService = \"com.message.spi.MessageService\";\n-\n-    \/* a service that is not defined in any of the jars *\/\n-    static final String unknownService = \"java.lang.Object\";\n-\n-    static void doTest(InetSocketAddress serverAddress) throws IOException {\n-        URL baseURL = new URL(\"http:\/\/localhost:\" + serverAddress.getPort() + \"\/\");\n-\n-        int failed = 0;\n-\n-        \/\/ Tests using java.util.SerivceLoader\n-        if (!javaUtilServiceLoaderTest(baseURL, messageService, true, false, true)) {\n-            System.out.println(\"Test: ServiceLoader looking for \" + messageService + \", failed\");\n-            failed++;\n-        }\n-        if (!javaUtilServiceLoaderTest(baseURL, unknownService, false, false, false)) {\n-            System.out.println(\"Test: ServiceLoader looking for \" + unknownService + \" failed\");\n-            failed++;\n-        }\n-\n-        \/\/ Tests using java.lang.Class (similar to the FontManager in javafx)\n-        if (!klassLoader(baseURL, \"\/META-INF\/fonts.mf\", true, false, true)) {\n-            System.out.println(\"Test: klassLoader looking for \/META-INF\/fonts.mf failed\");\n-            failed++;\n-        }\n-        if (!klassLoader(baseURL, \"\/META-INF\/unknown.mf\", false, false, false)) {\n-            System.out.println(\"Test: klassLoader looking for \/META-INF\/unknown.mf failed\");\n-            failed++;\n-        }\n-\n-        if (failed > 0)\n-            throw new RuntimeException(\"Failed: \" + failed + \" tests\");\n-    }\n-\n-    static boolean javaUtilServiceLoaderTest(URL baseURL,\n-                                             String serviceClass,\n-                                             boolean expectToFind,\n-                                             boolean expectbDotJar,\n-                                             boolean expectcDotJar) throws IOException {\n-        debug(\"----------------------------------\");\n-        debug(\"Running test with java.util.ServiceLoader looking for \" + serviceClass);\n-        URLClassLoader loader = getLoader(baseURL);\n-        httpServer.reset();\n-\n-        Class<?> messageServiceClass = null;\n-        try {\n-            messageServiceClass = loader.loadClass(serviceClass);\n-        } catch (ClassNotFoundException cnfe) {\n-            System.err.println(cnfe);\n-            throw new RuntimeException(\"Error in test: \" + cnfe);\n-        }\n-\n-        Iterator<?> iterator = (ServiceLoader.load(messageServiceClass, loader)).iterator();\n-        if (expectToFind && !iterator.hasNext()) {\n-            debug(messageServiceClass + \" NOT found.\");\n-            return false;\n-        }\n-\n-        while (iterator.hasNext()) {\n-            debug(\"found \" + iterator.next() + \" \" + messageService);\n-        }\n-\n-        debug(\"HttpServer: \" + httpServer);\n-\n-        if (!expectbDotJar && httpServer.bDotJar > 0) {\n-            debug(\"Unexpeced request sent to the httpserver for b.jar\");\n-            return false;\n-        }\n-        if (!expectcDotJar && httpServer.cDotJar > 0) {\n-            debug(\"Unexpeced request sent to the httpserver for c.jar\");\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    \/* Tries to find a resource in a similar way to the font manager in javafx\n-     * com.sun.javafx.scene.text.FontManager *\/\n-    static boolean klassLoader(URL baseURL,\n-                               String resource,\n-                               boolean expectToFind,\n-                               boolean expectbDotJar,\n-                               boolean expectcDotJar) throws IOException {\n-        debug(\"----------------------------------\");\n-        debug(\"Running test looking for \" + resource);\n-        URLClassLoader loader = getLoader(baseURL);\n-        httpServer.reset();\n-\n-        Class<?> ADotAKlass = null;\n-        try {\n-            ADotAKlass = loader.loadClass(\"a.A\");\n-        } catch (ClassNotFoundException cnfe) {\n-            System.err.println(cnfe);\n-            throw new RuntimeException(\"Error in test: \" + cnfe);\n-        }\n-\n-        URL u = ADotAKlass.getResource(resource);\n-        if (expectToFind && u == null) {\n-            System.out.println(\"Expected to find \" + resource + \" but didn't\");\n-            return false;\n-        }\n-\n-        debug(\"HttpServer: \" + httpServer);\n-\n-        if (!expectbDotJar && httpServer.bDotJar > 0) {\n-            debug(\"Unexpeced request sent to the httpserver for b.jar\");\n-            return false;\n-        }\n-        if (!expectcDotJar && httpServer.cDotJar > 0) {\n-            debug(\"Unexpeced request sent to the httpserver for c.jar\");\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    static URLClassLoader getLoader(URL baseURL) throws IOException {\n-        ClassLoader loader = Basic.class.getClassLoader();\n-\n-        while (loader.getParent() != null)\n-            loader = loader.getParent();\n-\n-        return new URLClassLoader( new URL[]{\n-            new URL(baseURL, \"a.jar\"),\n-            new URL(baseURL, \"b.jar\"),\n-            new URL(baseURL, \"c.jar\")}, loader );\n-    }\n-\n-    \/**\n-     * HTTP Server to server the jar files.\n-     *\/\n-    static class JarHttpServer implements HttpHandler {\n-        final String docsDir;\n-        final HttpServer httpServer;\n-        int aDotJar, bDotJar, cDotJar;\n-\n-        JarHttpServer(String docsDir) throws IOException {\n-            this.docsDir = docsDir;\n-\n-            httpServer = HttpServer.create(new InetSocketAddress(0), 0);\n-            httpServer.createContext(\"\/\", this);\n-        }\n-\n-        void start() throws IOException {\n-            httpServer.start();\n-        }\n-\n-        void stop(int delay) {\n-            httpServer.stop(delay);\n-        }\n-\n-        InetSocketAddress getAddress() {\n-            return httpServer.getAddress();\n-        }\n-\n-        void reset() {\n-            aDotJar = bDotJar = cDotJar = 0;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"aDotJar=\" + aDotJar + \", bDotJar=\" + bDotJar + \", cDotJar=\" + cDotJar;\n-        }\n-\n-        public void handle(HttpExchange t) throws IOException {\n-            InputStream is = t.getRequestBody();\n-            Headers map = t.getRequestHeaders();\n-            Headers rmap = t.getResponseHeaders();\n-            URI uri = t.getRequestURI();\n-\n-            debug(\"Server: received request for \" + uri);\n-            String path = uri.getPath();\n-            if (path.endsWith(\"a.jar\"))\n-                aDotJar++;\n-            else if (path.endsWith(\"b.jar\"))\n-                bDotJar++;\n-            else if (path.endsWith(\"c.jar\"))\n-                cDotJar++;\n-            else\n-                System.out.println(\"Unexpected resource request\" + path);\n-\n-            while (is.read() != -1);\n-            is.close();\n-\n-            File file = new File(docsDir, path);\n-            if (!file.exists())\n-                throw new RuntimeException(\"Error: request for \" + file);\n-            long clen = file.length();\n-            t.sendResponseHeaders (200, clen);\n-            OutputStream os = t.getResponseBody();\n-            FileInputStream fis = new FileInputStream(file);\n-            try {\n-                byte[] buf = new byte [16 * 1024];\n-                int len;\n-                while ((len=fis.read(buf)) != -1) {\n-                    os.write (buf, 0, len);\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n-            fis.close();\n-            os.close();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/Basic.java","additions":0,"deletions":406,"binary":false,"changes":406,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n- \n-# The contents of this file do not matter. It exists\n-# simply to have a service defined in META-INF\/services.\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarA\/META-INF\/services\/my.happy.land","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package a;\n-\n-public class A {\n-    public static void hello() throws Exception {\n-        System.out.println(\"Hello from a.A\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarA\/a\/A.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.message.spi;\n-\n-public interface MessageService {\n-    String message();\n-}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarA\/com\/message\/spi\/MessageService.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-# The contents of this file do not matter. It exists\n-# simply to have a file under META-INF.\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarB\/META-INF\/JAVA2.DS","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-# The contents of this file do not matter. It exists\n-# simply to have a service defined in META-INF\/services.\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarB\/META-INF\/services\/no.name.service","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package b;\n-\n-public class B {\n-    public static void hello() {\n-        System.out.println(\"Hello from b.B\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarB\/b\/B.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-corporate=\/fonts\/Company-corporate.ttf\n-crazy-looking=\/fonts\/kidpr.ttf\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarC\/META-INF\/fonts.mf","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-This is not a real font.\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarC\/META-INF\/fonts\/Company-corporate.ttf","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-This is not a real font.\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarC\/META-INF\/fonts\/kidpr.ttf","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-my.impl.StandardMessageService\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarC\/META-INF\/services\/com.message.spi.MessageService","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package my.impl;\n-\n-public class StandardMessageService implements com.message.spi.MessageService {\n-    @Override\n-    public String message() {\n-        return \"This is a message from the standard message service\";\n-    }\n-}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarC\/my\/impl\/StandardMessageService.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"}]}