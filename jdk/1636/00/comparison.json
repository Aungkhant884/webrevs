{"files":[{"patch":"@@ -3896,1 +3896,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -3899,1 +3899,1 @@\n-      __ tstw(tmp, JVM_ACC_IS_BOX_CLASS);\n+      __ tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -81,1 +81,1 @@\n-    tstw(hdr, JVM_ACC_IS_BOX_CLASS);\n+    tstw(hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -749,1 +749,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -752,1 +752,1 @@\n-      tstw(tmp, JVM_ACC_IS_BOX_CLASS);\n+      tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -210,1 +210,1 @@\n-    tst(tmp1, JVM_ACC_IS_BOX_CLASS);\n+    tst(tmp1, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -96,1 +96,1 @@\n-    tst(Rscratch, JVM_ACC_IS_BOX_CLASS);\n+    tst(Rscratch, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/arm\/c2_MacroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -886,1 +886,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -889,1 +889,1 @@\n-      tst(R0, JVM_ACC_IS_BOX_CLASS);\n+      tst(R0, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -111,1 +111,1 @@\n-    testbitdi(CCR0, R0, Rscratch, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbitdi(CCR0, R0, Rscratch, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -913,1 +913,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -916,1 +916,1 @@\n-      testbitdi(CCR0, R0, tmp, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+      testbitdi(CCR0, R0, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2821,1 +2821,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -2824,1 +2824,1 @@\n-    testbitdi(flag, R0, temp, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbitdi(flag, R0, temp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -96,1 +96,1 @@\n-    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,1 +1002,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -1004,1 +1004,1 @@\n-    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3329,1 +3329,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -3332,2 +3332,2 @@\n-    assert((JVM_ACC_IS_BOX_CLASS & 0xFFFF) == 0, \"or change following instruction\");\n-    z_nilh(Z_R1_scratch, JVM_ACC_IS_BOX_CLASS >> 16);\n+    assert((JVM_ACC_IS_VALUE_BASED_CLASS & 0xFFFF) == 0, \"or change following instruction\");\n+    z_nilh(Z_R1_scratch, JVM_ACC_IS_VALUE_BASED_CLASS >> 16);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -60,1 +60,1 @@\n-    testl(hdr, JVM_ACC_IS_BOX_CLASS);\n+    testl(hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -491,1 +491,1 @@\n-    testl(tmpReg, JVM_ACC_IS_BOX_CLASS);\n+    testl(tmpReg, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1222,1 +1222,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -1225,1 +1225,1 @@\n-      testl(tmp_reg, JVM_ACC_IS_BOX_CLASS);\n+      testl(tmp_reg, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1094,0 +1094,1 @@\n+    _jdk_internal_ValueBased,\n@@ -2150,0 +2151,5 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_ValueBased_signature): {\n+      if (_location != _in_class)   break;  \/\/ only allow for classes\n+      if (!privileged)              break;  \/\/ only allow in priviledged code\n+      return _jdk_internal_ValueBased;\n+    }\n@@ -2193,1 +2199,10 @@\n-  ik->set_is_contended(is_contended());\n+  if (has_annotation(_jdk_internal_vm_annotation_Contended)) {\n+    ik->set_is_contended(is_contended());\n+  }\n+  if (has_annotation(_jdk_internal_ValueBased)) {\n+    ik->set_has_value_based_class_annotation();\n+    if (DiagnoseSyncOnValueBasedClasses) {\n+      ik->set_is_value_based();\n+      ik->set_prototype_header(markWord::prototype());\n+    }\n+  }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2145,8 +2145,0 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n-    for (int i = T_BOOLEAN; i < T_LONG + 1; i++) {\n-      assert(_box_klasses[i] != NULL, \"NULL box class\");\n-      _box_klasses[i]->set_is_box();\n-      _box_klasses[i]->set_prototype_header(markWord::prototype());\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+  template(jdk_internal_ValueBased_signature,                                \"Ljdk\/internal\/ValueBased;\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-  <Event name=\"SyncOnPrimitiveWrapper\" category=\"Java Virtual Machine, Diagnostics\" label=\"Primitive Wrapper Synchronization\" thread=\"true\" stackTrace=\"true\" startTime=\"false\" experimental=\"true\">\n-    <Field type=\"Class\" name=\"boxClass\" label=\"Boxing Class\" \/>\n+  <Event name=\"SyncOnValueBasedClass\" category=\"Java Virtual Machine, Diagnostics\" label=\"Value Based Class Synchronization\" thread=\"true\" stackTrace=\"true\" startTime=\"false\" experimental=\"true\">\n+    <Field type=\"Class\" name=\"valueBasedClass\" label=\"Value Based Class\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,0 @@\n-  LOG_TAG(primitivewrappers) \\\n@@ -189,0 +188,1 @@\n+  LOG_TAG(valuebasedclasses) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2603,0 +2603,6 @@\n+\n+  \/\/ Initialize @ValueBased class annotation\n+  if (DiagnoseSyncOnValueBasedClasses && has_value_based_class_annotation()) {\n+    set_is_value_based();\n+    set_prototype_header(markWord::prototype());\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -179,1 +179,2 @@\n-    _archived_lambda_proxy_is_available = 2\n+    _archived_lambda_proxy_is_available = 2,\n+    _has_value_based_class_annotation = 4\n@@ -324,0 +325,12 @@\n+  void set_has_value_based_class_annotation() {\n+    CDS_ONLY(_shared_class_flags |= _has_value_based_class_annotation;)\n+  }\n+  void clear_has_value_based_class_annotation() {\n+    CDS_ONLY(_shared_class_flags &= ~_has_value_based_class_annotation;)\n+  }\n+  bool has_value_based_class_annotation() const {\n+    CDS_ONLY(return (_shared_class_flags & _has_value_based_class_annotation) != 0;)\n+    NOT_CDS(return false;)\n+  }\n+\n+\n@@ -627,2 +640,2 @@\n-  bool is_box() const                   { return access_flags().is_box_class(); }\n-  void set_is_box()                     { _access_flags.set_is_box_class(); }\n+  bool is_value_based()                 { return _access_flags.is_value_based_class(); }\n+  void set_is_value_based()             { _access_flags.set_is_value_based_class(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4240,3 +4240,3 @@\n-  if (FLAG_IS_CMDLINE(DiagnoseSyncOnPrimitiveWrappers)) {\n-    if (DiagnoseSyncOnPrimitiveWrappers == ObjectSynchronizer::LOG_WARNING && !log_is_enabled(Info, primitivewrappers)) {\n-      LogConfiguration::configure_stdout(LogLevel::Info, true, LOG_TAGS(primitivewrappers));\n+  if (FLAG_IS_CMDLINE(DiagnoseSyncOnValueBasedClasses)) {\n+    if (DiagnoseSyncOnValueBasedClasses == ObjectSynchronizer::LOG_WARNING && !log_is_enabled(Info, valuebasedclasses)) {\n+      LogConfiguration::configure_stdout(LogLevel::Info, true, LOG_TAGS(valuebasedclasses));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -854,1 +854,1 @@\n-  product(intx, DiagnoseSyncOnPrimitiveWrappers, 0, DIAGNOSTIC,             \\\n+  product(intx, DiagnoseSyncOnValueBasedClasses, 0, DIAGNOSTIC,             \\\n@@ -856,1 +856,1 @@\n-             \"primitive wrappers. Modes: \"                                  \\\n+             \"value based classes. Modes: \"                                 \\\n@@ -860,1 +860,1 @@\n-             \"   -Xlog:primitivewrappers. If JFR is running it will \"       \\\n+             \"   -Xlog:valuebasedclasses. If JFR is running it will \"       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -336,1 +336,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n+  if (obj->klass()->is_value_based()) {\n@@ -390,2 +390,2 @@\n-\/\/ Handle notifications when synchronizing on primitive wrappers\n-void ObjectSynchronizer::handle_sync_on_primitive_wrapper(Handle obj, Thread* current) {\n+\/\/ Handle notifications when synchronizing on value based classes\n+void ObjectSynchronizer::handle_sync_on_value_based_class(Handle obj, Thread* current) {\n@@ -395,1 +395,6 @@\n-  if (last_frame.is_interpreted_frame()) {\n+  bool bcp_was_adjusted = false;\n+  \/\/ Don't decrement bcp if it points to the frame's first instruction.  This happens when\n+  \/\/ handle_sync_on_value_based_class() is called because of a synchronized method.  There\n+  \/\/ is no actual monitorenter instruction in the byte code in this case.\n+  if (last_frame.is_interpreted_frame() &&\n+      (last_frame.interpreter_frame_method()->code_base() < last_frame.interpreter_frame_bcp())) {\n@@ -398,0 +403,1 @@\n+    bcp_was_adjusted = true;\n@@ -400,1 +406,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers == FATAL_EXIT) {\n+  if (DiagnoseSyncOnValueBasedClasses == FATAL_EXIT) {\n@@ -411,1 +417,1 @@\n-    assert(DiagnoseSyncOnPrimitiveWrappers == LOG_WARNING, \"invalid value for DiagnoseSyncOnPrimitiveWrappers\");\n+    assert(DiagnoseSyncOnValueBasedClasses == LOG_WARNING, \"invalid value for DiagnoseSyncOnValueBasedClasses\");\n@@ -413,1 +419,1 @@\n-    Log(primitivewrappers) pwlog;\n+    Log(valuebasedclasses) vblog;\n@@ -415,1 +421,1 @@\n-    pwlog.info(\"Synchronizing on object \" INTPTR_FORMAT \" of klass %s\", p2i(obj()), obj->klass()->external_name());\n+    vblog.info(\"Synchronizing on object \" INTPTR_FORMAT \" of klass %s\", p2i(obj()), obj->klass()->external_name());\n@@ -417,1 +423,1 @@\n-      LogStream info_stream(pwlog.info());\n+      LogStream info_stream(vblog.info());\n@@ -420,1 +426,1 @@\n-      pwlog.info(\"Cannot find the last Java frame\");\n+      vblog.info(\"Cannot find the last Java frame\");\n@@ -423,1 +429,1 @@\n-    EventSyncOnPrimitiveWrapper event;\n+    EventSyncOnValueBasedClass event;\n@@ -425,1 +431,1 @@\n-      event.set_boxClass(obj->klass());\n+      event.set_valueBasedClass(obj->klass());\n@@ -430,1 +436,1 @@\n-  if (last_frame.is_interpreted_frame()) {\n+  if (bcp_was_adjusted) {\n@@ -442,2 +448,2 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n-    handle_sync_on_primitive_wrapper(obj, THREAD);\n+  if (obj->klass()->is_value_based()) {\n+    handle_sync_on_value_based_class(obj, THREAD);\n@@ -589,2 +595,2 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n-    handle_sync_on_primitive_wrapper(obj, THREAD);\n+  if (obj->klass()->is_value_based()) {\n+    handle_sync_on_value_based_class(obj, THREAD);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-  static void handle_sync_on_primitive_wrapper(Handle obj, Thread* current);\n+  static void handle_sync_on_value_based_class(Handle obj, Thread* current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  JVM_ACC_IS_BOX_CLASS            = 0x08000000,     \/\/ True if klass is primitive wrapper\n+  JVM_ACC_IS_VALUE_BASED_CLASS    = 0x08000000,     \/\/ True if klass is marked as a ValueBased class\n@@ -155,1 +155,1 @@\n-  bool is_box_class            () const { return (_flags & JVM_ACC_IS_BOX_CLASS           ) != 0; }\n+  bool is_value_based_class    () const { return (_flags & JVM_ACC_IS_VALUE_BASED_CLASS   ) != 0; }\n@@ -229,1 +229,1 @@\n-  void set_is_box_class()              { atomic_set_bits(JVM_ACC_IS_BOX_CLASS);            }\n+  void set_is_value_based_class()      { atomic_set_bits(JVM_ACC_IS_VALUE_BASED_CLASS);    }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n- * <p>\n- * In addition, this class provides many methods for\n+ *\n+ * <p>In addition, this class provides many methods for\n@@ -51,0 +51,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -54,0 +60,1 @@\n+@jdk.internal.ValueBased\n@@ -101,1 +108,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -121,1 +128,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,0 +51,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -56,0 +62,1 @@\n+@jdk.internal.ValueBased\n@@ -340,1 +347,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -363,1 +370,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -125,0 +125,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -132,0 +138,1 @@\n+@jdk.internal.ValueBased\n@@ -8504,1 +8511,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,0 +49,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -54,0 +60,1 @@\n+@jdk.internal.ValueBased\n@@ -608,1 +615,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -629,1 +636,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,0 +48,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -53,0 +59,1 @@\n+@jdk.internal.ValueBased\n@@ -521,1 +528,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -537,1 +544,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -558,1 +565,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -65,0 +71,1 @@\n+@jdk.internal.ValueBased\n@@ -1088,1 +1095,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -1110,1 +1117,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -65,0 +71,1 @@\n+@jdk.internal.ValueBased\n@@ -1319,1 +1326,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -1342,1 +1349,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -84,6 +84,6 @@\n- * immutable and thread-safe.\n- * Use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on these instances of\n- * {@code ProcessHandle} may have unpredictable results and should be avoided.\n- * Use {@link #equals(Object) equals} or\n- * {@link #compareTo(ProcessHandle) compareTo} methods to compare ProcessHandles.\n+ * immutable and thread-safe. Programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur.\n+ * For example, in a future release, synchronization may fail.\n+ * Use the {@code equals} or {@link #compareTo(ProcessHandle) compareTo} methods\n+ * to compare ProcessHandles.\n@@ -94,0 +94,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandle.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -944,5 +944,5 @@\n-     * <p>This is a <a href=\".\/doc-files\/ValueBased.html\">value-based<\/a>\n-     * class; use of identity-sensitive operations (including reference equality\n-     * ({@code ==}), identity hash code, or synchronization) on instances of\n-     * {@code Version} may have unpredictable results and should be avoided.\n-     * <\/p>\n+     * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+     * class; programmers should treat instances that are\n+     * {@linkplain #equals(Object) equal} as interchangeable and should not\n+     * use instances for synchronization, or unpredictable behavior may\n+     * occur. For example, in a future release, synchronization may fail.<\/p>\n@@ -952,0 +952,1 @@\n+    @jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,0 +50,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n+ *\n@@ -55,0 +61,1 @@\n+@jdk.internal.ValueBased\n@@ -345,1 +352,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -368,1 +375,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n- * <p>Implementations of {@linkplain ConstantDesc} must be\n- * <a href=\"..\/doc-files\/ValueBased.html\">value-based<\/a> classes.\n+ * <p>Implementations of {@linkplain ConstantDesc} should be immutable\n+ * and their behavior should not rely on object identity.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n- * <p>Concrete subtypes of {@linkplain DynamicCallSiteDesc} must be\n- * <a href=\"..\/doc-files\/ValueBased.html\">value-based<\/a>.\n+ * <p>Concrete subtypes of {@linkplain DynamicCallSiteDesc} should be immutable\n+ * and their behavior should not rely on object identity.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicCallSiteDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n- * <p>Concrete subtypes of {@linkplain DynamicConstantDesc} must be\n- * <a href=\"..\/doc-files\/ValueBased.html\">value-based<\/a>.\n+ * <p>Concrete subtypes of {@linkplain DynamicConstantDesc} should be immutable\n+ * and their behavior should not rely on object identity.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-Some classes, such as <code>java.util.Optional<\/code> and\n-<code>java.time.LocalDateTime<\/code>, are <em>value-based<\/em>.  Instances of a\n-value-based class:\n+Some classes, such as <code>java.lang.Integer<\/code> and\n+<code>java.time.LocalDate<\/code>, are <em>value-based<\/em>.\n+A value-based class has the following properties:\n@@ -38,19 +38,20 @@\n-    <li>are final and immutable (though may contain references to mutable\n-        objects);<\/li>\n-    <li>have implementations of <code>equals<\/code>,\n-        <code>hashCode<\/code>, and <code>toString<\/code> which are computed\n-        solely from the instance's state and not from its identity or the state\n-        of any other object or variable;<\/li>\n-    <li>make no use of identity-sensitive operations such as reference\n-        equality (<code>==<\/code>) between instances, identity hash code of\n-        instances, or synchronization on an instances's intrinsic lock;<\/li>\n-    <li>are considered equal solely based on <code>equals()<\/code>, not\n-        based on reference equality (<code>==<\/code>);<\/li>\n-    <li>do not have accessible constructors, but are instead instantiated\n-        through factory methods which make no commitment as to the identity\n-        of returned instances;<\/li>\n-    <li>are <em>freely substitutable<\/em> when equal, meaning that interchanging\n-        any two instances <code>x<\/code> and <code>y<\/code> that are equal\n-        according to <code>equals()<\/code> in any computation or method\n-        invocation should produce no visible change in behavior.\n-    <\/li>\n+    <li>the class declares only final instance fields (though these may contain references\n+        to mutable objects);<\/li>\n+    <li>the class's implementations of <code>equals<\/code>, <code>hashCode<\/code>,\n+        and <code>toString<\/code> compute their results solely from the values\n+        of the class's instance fields (and the members of the objects they\n+        reference), not from the instance's identity;<\/li>\n+    <li>the class's methods treat instances as <em>freely substitutable<\/em>\n+        when equal, meaning that interchanging any two instances <code>x<\/code> and\n+        <code>y<\/code> that are equal according to <code>equals()<\/code> produces no\n+        visible change in the behavior of the class's methods;<\/li>\n+    <li>the class performs no synchronization using an instance's monitor;<\/li>\n+    <li>the class does not declare (or has deprecated any) accessible constructors;<\/li>\n+    <li>the class does not provide any instance creation mechanism that promises\n+        a unique identity on each method call&mdash;in particular, any factory\n+        method's contract must allow for the possibility that if two independently-produced\n+        instances are equal according to <code>equals()<\/code>, they may also be\n+        equal according to <code>==<\/code>;<\/li>\n+    <li>the class is final, and extends either <code>Object<\/code> or a hierarchy of\n+        abstract classes that declare no instance fields or instance initializers\n+        and whose constructors are empty.<\/li>\n@@ -59,2 +60,2 @@\n-<p>A program may produce unpredictable results if it attempts to distinguish two\n-    references to equal values of a value-based class, whether directly via reference\n+<p>When two instances of a value-based class are equal (according to `equals`), a program\n+    should not attempt to distinguish between their identities, whether directly via reference\n@@ -62,3 +63,9 @@\n-    serialization, or any other identity-sensitive mechanism.  Use of such\n-    identity-sensitive operations on instances of value-based classes may have\n-    unpredictable effects and should be avoided.<\/p>\n+    serialization, or any other identity-sensitive mechanism.<\/p>\n+\n+<p>Synchronization on instances of value-based classes is strongly discouraged,\n+    because the programmer cannot guarantee exclusive ownership of the\n+    associated monitor.<\/p>\n+\n+<p>Identity-related behavior of value-based classes may change in a future release.\n+    For example, synchronization may fail.<\/p>\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/doc-files\/ValueBased.html","additions":34,"deletions":27,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n- *\n@@ -123,3 +122,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Duration} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -133,0 +133,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -194,1 +194,0 @@\n- *\n@@ -197,3 +196,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Instant} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -207,0 +207,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -126,1 +126,0 @@\n- *\n@@ -129,3 +128,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalDate} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -139,0 +139,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n- *\n@@ -125,3 +124,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalDateTime} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -135,0 +135,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n- *\n@@ -115,3 +114,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalTime} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -125,0 +125,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n- *\n@@ -117,3 +116,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code MonthDay} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -127,0 +127,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/MonthDay.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n- *\n@@ -118,3 +117,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OffsetDateTime} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -128,0 +128,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n- *\n@@ -108,3 +107,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OffsetTime} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -118,0 +118,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n- *\n@@ -123,3 +122,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Period} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -133,0 +133,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n- *\n@@ -125,3 +124,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Year} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -135,0 +135,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Year.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n- *\n@@ -121,3 +120,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code YearMonth} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -131,0 +131,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/YearMonth.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n- *\n@@ -166,3 +165,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZoneId} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -178,0 +178,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneId.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -117,1 +117,0 @@\n- *\n@@ -120,3 +119,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZoneOffset} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -130,0 +130,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -145,1 +145,0 @@\n- *\n@@ -148,3 +147,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZonedDateTime} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -164,0 +164,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n- *\n@@ -109,3 +108,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code HijrahDate} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -119,0 +119,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahDate.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n- *\n@@ -116,3 +115,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code JapaneseDate} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -126,0 +126,1 @@\n+@jdk.internal.ValueBased\n@@ -143,1 +144,1 @@\n-    private transient JapaneseEra era;\n+    private final transient JapaneseEra era;\n@@ -147,1 +148,1 @@\n-    private transient int yearOfEra;\n+    private final transient int yearOfEra;\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n- *\n@@ -96,3 +95,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code MinguoDate} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -106,0 +106,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoDate.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-import java.util.Arrays;\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n- *\n@@ -96,3 +95,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ThaiBuddhistDate} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -106,0 +106,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistDate.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n- * This is immutable and thread-safe enum.\n+ * This is an immutable and thread-safe enum.\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/TextStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @jdk.internal.ValueBased\n@@ -250,0 +251,1 @@\n+    @jdk.internal.ValueBased\n@@ -543,0 +545,1 @@\n+    @jdk.internal.ValueBased\n@@ -649,0 +652,1 @@\n+    @jdk.internal.ValueBased\n@@ -740,0 +744,1 @@\n+    @jdk.internal.ValueBased\n@@ -767,0 +772,1 @@\n+    @jdk.internal.ValueBased\n@@ -892,0 +898,1 @@\n+    @jdk.internal.ValueBased\n@@ -1058,0 +1065,1 @@\n+    @jdk.internal.ValueBased\n@@ -1088,0 +1096,1 @@\n+    @jdk.internal.ValueBased\n@@ -1154,0 +1163,1 @@\n+    @jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,4 +34,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code KeyValueHolder} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -52,0 +53,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/KeyValueHolder.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -110,4 +110,6 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. Callers should make no assumptions about the\n+ * identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -134,4 +134,6 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. Callers should make no assumptions\n+ * about the identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n@@ -1639,4 +1641,6 @@\n-     * Callers should make no assumptions about the identity of the returned instances.\n-     * This method is free to create new instances or reuse existing ones. Therefore,\n-     * identity-sensitive operations on these instances (reference equality ({@code ==}),\n-     * identity hash code, and synchronization) are unreliable and should be avoided.\n+     * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+     * as interchangeable and should not use them for synchronization, or\n+     * unpredictable behavior may occur. For example, in a future release,\n+     * synchronization may fail. Callers should make no assumptions\n+     * about the identity of the returned instances. This method is free to\n+     * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Map.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -45,4 +45,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Optional} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -60,0 +61,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/Optional.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalDouble} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -57,0 +58,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalDouble.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalInt} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -57,0 +58,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalInt.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalLong} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -57,0 +58,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalLong.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -85,4 +85,6 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. Callers should make no assumptions\n+ * about the identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Set.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+\n+\/**\n+ * Indicates the API declaration in question is associated with a Value Based class.\n+ * References to <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based classes<\/a>\n+ * should produce warnings about behavior that is inconsistent with value based semantics.\n+ *\n+ * @since 16\n+ *\/\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(value={TYPE})\n+public @interface ValueBased {\n+}\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ValueBased.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -261,1 +261,4 @@\n-            Object $result = ref.invoke(this, $method_fetchNotifications_7, new java.lang.Object[]{new java.lang.Long($param_long_1), new java.lang.Integer($param_int_2), new java.lang.Long($param_long_3)}, -5037523307973544478L);\n+            Object $result = ref.invoke(this, $method_fetchNotifications_7,\n+                    new java.lang.Object[]{$param_long_1,\n+                            $param_int_2,\n+                            $param_long_3}, -5037523307973544478L);\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl_Stub.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4016,1 +4016,2 @@\n-                reportSchemaError(\"src-redefine.7.1\", new Object []{new Integer(attGroupRefsCount)}, child);\n+                reportSchemaError(\"src-redefine.7.1\",\n+                        new Object []{attGroupRefsCount}, child);\n@@ -4032,1 +4033,1 @@\n-                reportSchemaError(\"src-redefine.6.1.1\", new Object []{new Integer(groupRefsCount)}, child);\n+                reportSchemaError(\"src-redefine.6.1.1\", new Object []{groupRefsCount}, child);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSDHandler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -441,2 +441,2 @@\n-            _byName.put( name, new Integer( value ) );\n-            _byChar.put( new Integer( value ), name );\n+            _byName.put( name, (int) value);\n+            _byChar.put( (int) value , name );\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serialize\/HTMLdtd.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+            values.add(LintCategory.SYNCHRONIZATION);\n@@ -285,0 +286,5 @@\n+        \/**\n+         * Warn about synchronization attempts on instances of @ValueBased classes.\n+         *\/\n+        SYNCHRONIZATION(\"synchronization\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+    public final Type valueBasedType;\n@@ -587,0 +588,1 @@\n+        valueBasedType = enterClass(\"jdk.internal.ValueBased\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1743,0 +1743,3 @@\n+        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) && isValueBased(tree.lock.type)) {\n+            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        }\n@@ -1746,0 +1749,12 @@\n+        \/\/ where\n+        private boolean isValueBased(Type t) {\n+            if (t != null && t.tsym != null) {\n+                for (Attribute.Compound a: t.tsym.getDeclarationAttributes()) {\n+                    if (a.type.tsym == syms.valueBasedType.tsym) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3739,0 +3739,4 @@\n+\n+compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class=\\\n+    attempt to synchronize on an instance of a value-based class\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-    Warn about potentially unsafe vararg methods\n+    Warn about potentially unsafe vararg methods.\n@@ -262,1 +262,4 @@\n-    Warn about use of preview language features\n+    Warn about use of preview language features.\n+\n+javac.opt.Xlint.desc.synchronization=\\\n+    Warn about synchronization attempts on instances of value-based classes.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- *\n@@ -50,3 +49,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code GroupLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryAddress} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,3 +80,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryLayout} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemorySegment} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,3 +41,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code PaddingLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/PaddingLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,3 +58,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code SequenceLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,3 +43,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ValueLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/jdk.internal.vm.compiler.collections.test\/src\/jdk\/internal\/vm\/compiler\/collections\/test\/EconomicMapImplTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/jdk.internal.vm.compiler.collections.test\/src\/jdk\/internal\/vm\/compiler\/collections\/test\/EconomicSetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -92,1 +92,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"synchronization\"})\n@@ -116,1 +116,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"synchronization\"})\n@@ -338,1 +338,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/EscapeAnalysisTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -56,1 +56,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -68,1 +68,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -80,1 +80,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -91,1 +91,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -103,1 +103,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -136,1 +136,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -151,1 +151,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -168,1 +168,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -186,1 +186,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -202,1 +202,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -223,1 +223,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -242,1 +242,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/PEAAssertionsTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/PartialEscapeAnalysisTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -145,1 +145,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/tutorial\/StaticAnalysisTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -376,1 +376,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/GraalHotSpotVMConfigAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.jtt\/src\/org\/graalvm\/compiler\/jtt\/hotpath\/HP_allocate02.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+    @SuppressWarnings(\"synchronization\")\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.replacements.test\/src\/org\/graalvm\/compiler\/replacements\/test\/MonitorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    <event name=\"jdk.SyncOnPrimitiveWrapper\">\n+    <event name=\"jdk.SyncOnValueBasedClass\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    <event name=\"jdk.SyncOnPrimitiveWrapper\">\n+    <event name=\"jdk.SyncOnValueBasedClass\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @summary Exercise DiagnoseSyncOnPrimitiveWrappers diagnostic flag\n+ * @summary Exercise DiagnoseSyncOnValueBasedClasses diagnostic flag\n@@ -34,1 +34,1 @@\n- * @run driver\/timeout=180000 SyncOnPrimitiveWrapperTest\n+ * @run driver\/timeout=180000 SyncOnValueBasedClassTest\n@@ -37,1 +37,1 @@\n-public class SyncOnPrimitiveWrapperTest {\n+public class SyncOnValueBasedClassTest {\n@@ -67,1 +67,1 @@\n-        String[] commonFatalTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\", \"-XX:DiagnoseSyncOnPrimitiveWrappers=1\"};\n+        String[] commonFatalTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CreateCoredumpOnCrash\", \"-XX:DiagnoseSyncOnValueBasedClasses=1\"};\n@@ -72,1 +72,1 @@\n-                fatalTests[index] = Stream.of(commonFatalTestsFlags, specificFlags[i], new String[] {\"SyncOnPrimitiveWrapperTest$FatalTest\", Integer.toString(j)})\n+                fatalTests[index] = Stream.of(commonFatalTestsFlags, specificFlags[i], new String[] {\"SyncOnValueBasedClassTest$FatalTest\", Integer.toString(j)})\n@@ -77,1 +77,1 @@\n-        String[] commonLogTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:DiagnoseSyncOnPrimitiveWrappers=2\"};\n+        String[] commonLogTestsFlags = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:DiagnoseSyncOnValueBasedClasses=2\"};\n@@ -80,1 +80,1 @@\n-            logTests[i] = Stream.of(commonLogTestsFlags, specificFlags[i], new String[] {\"SyncOnPrimitiveWrapperTest$LogTest\"})\n+            logTests[i] = Stream.of(commonLogTestsFlags, specificFlags[i], new String[] {\"SyncOnValueBasedClassTest$LogTest\"})\n@@ -92,1 +92,1 @@\n-            output.shouldNotContain(\"synchronization on primitive wrapper did not fail\");\n+            output.shouldNotContain(\"synchronization on value based class did not fail\");\n@@ -130,1 +130,1 @@\n-                throw new RuntimeException(\"synchronization on primitive wrapper did not fail\");\n+                throw new RuntimeException(\"synchronization on value based class did not fail\");\n@@ -167,1 +167,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/SyncOnValueBasedClassTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/SyncOnPrimitiveWrapperTest.java","status":"renamed"},{"patch":"@@ -85,1 +85,1 @@\n-            \"Flush\", \"SyncOnPrimitiveWrapper\")\n+            \"Flush\", \"SyncOnValueBasedClass\")\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.event.runtime;\n-\n-import java.time.Duration;\n-import java.util.*;\n-\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.RecordedEvent;\n-import jdk.jfr.consumer.RecordedThread;\n-import jdk.test.lib.jfr.EventNames;\n-import jdk.test.lib.jfr.Events;\n-\n-\/**\n- * @test\n- * @bug 8242263\n- * @requires vm.hasJFR\n- * @key jfr\n- * @library \/test\/lib\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DiagnoseSyncOnPrimitiveWrappers=2 jdk.jfr.event.runtime.TestSyncOnPrimitiveWrapperEvent\n- *\/\n-public class TestSyncOnPrimitiveWrapperEvent {\n-    static final String EVENT_NAME = EventNames.SyncOnPrimitiveWrapper;\n-    static String[] classesWanted = {\"java\/lang\/Character\", \"java\/lang\/Boolean\", \"java\/lang\/Byte\", \"java\/lang\/Short\",\n-                                     \"java\/lang\/Integer\", \"java\/lang\/Long\", \"java\/lang\/Float\", \"java\/lang\/Double\"};\n-    static List<Object> testObjects = new ArrayList<Object>();\n-    static Integer counter = 0;\n-\n-    private static void initTestObjects() {\n-        testObjects.add(Character.valueOf('H'));\n-        testObjects.add(Boolean.valueOf(true));\n-        testObjects.add(Byte.valueOf((byte)0x40));\n-        testObjects.add(Short.valueOf((short)0x4000));\n-        testObjects.add(Integer.valueOf(0x40000000));\n-        testObjects.add(Long.valueOf(0x4000000000000000L));\n-        testObjects.add(Float.valueOf(1.20f));\n-        testObjects.add(Double.valueOf(1.2345));\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        initTestObjects();\n-        Recording recording = new Recording();\n-        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n-        recording.start();\n-        for (Object obj : testObjects) {\n-            synchronized (obj) {\n-                counter++;\n-            }\n-        }\n-        recording.stop();\n-\n-        List<String> classesFound = new ArrayList<String>();\n-        List<RecordedEvent> events = Events.fromRecording(recording);\n-        Events.hasEvents(events);\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n-            String className = Events.assertField(event, \"boxClass.name\").notEmpty().getValue();\n-            RecordedThread jt = event.getThread();\n-            if (Thread.currentThread().getName().equals(jt.getJavaName())) {\n-                classesFound.add(className);\n-            }\n-        }\n-        for (String classWanted : classesWanted) {\n-            if (!classesFound.contains(classWanted)) {\n-                throw new AssertionError(\"No matching event SyncOnPrimitiveWrapper with \\\"boxClass=\" + classWanted + \"\\\" and current thread as caller\");\n-            }\n-        }\n-        if (classesFound.size() != classesWanted.length) {\n-            throw new AssertionError(\"Invalid number of SyncOnPrimitiveWrapper events for current thread\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSyncOnPrimitiveWrapperEvent.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import java.time.Duration;\n+import java.util.*;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordedThread;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @bug 8242263\n+ * @requires vm.hasJFR\n+ * @key jfr\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DiagnoseSyncOnValueBasedClasses=2 jdk.jfr.event.runtime.TestSyncOnValueBasedClassEvent\n+ *\/\n+public class TestSyncOnValueBasedClassEvent {\n+    static final String EVENT_NAME = EventNames.SyncOnValueBasedClass;\n+    static String[] classesWanted = {\"java\/lang\/Character\", \"java\/lang\/Boolean\", \"java\/lang\/Byte\", \"java\/lang\/Short\",\n+                                     \"java\/lang\/Integer\", \"java\/lang\/Long\", \"java\/lang\/Float\", \"java\/lang\/Double\"};\n+    static List<Object> testObjects = new ArrayList<Object>();\n+    static Integer counter = 0;\n+\n+    private static void initTestObjects() {\n+        testObjects.add(Character.valueOf('H'));\n+        testObjects.add(Boolean.valueOf(true));\n+        testObjects.add(Byte.valueOf((byte)0x40));\n+        testObjects.add(Short.valueOf((short)0x4000));\n+        testObjects.add(Integer.valueOf(0x40000000));\n+        testObjects.add(Long.valueOf(0x4000000000000000L));\n+        testObjects.add(Float.valueOf(1.20f));\n+        testObjects.add(Double.valueOf(1.2345));\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        initTestObjects();\n+        Recording recording = new Recording();\n+        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n+        recording.start();\n+        for (Object obj : testObjects) {\n+            synchronized (obj) {\n+                counter++;\n+            }\n+        }\n+        recording.stop();\n+\n+        List<String> classesFound = new ArrayList<String>();\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        Events.hasEvents(events);\n+        for (RecordedEvent event : Events.fromRecording(recording)) {\n+            String className = Events.assertField(event, \"valueBasedClass.name\").notEmpty().getValue();\n+            RecordedThread jt = event.getThread();\n+            if (Thread.currentThread().getName().equals(jt.getJavaName())) {\n+                classesFound.add(className);\n+            }\n+        }\n+        for (String classWanted : classesWanted) {\n+            if (!classesFound.contains(classWanted)) {\n+                throw new AssertionError(\"No matching event SyncOnValueBasedClass with \\\"valueBasedClass=\" + classWanted + \"\\\" and current thread as caller\");\n+            }\n+        }\n+        if (classesFound.size() != classesWanted.length) {\n+            throw new AssertionError(\"Invalid number of SyncOnValueBasedClass events for current thread\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSyncOnValueBasedClassEvent.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -71,1 +71,1 @@\n-        assertEval(\"new Double(PI).toString().substring(0, 16).equals(\\\"3.14159265358979\\\");\", \"true\");\n+        assertEval(\"Double.valueOf(PI).toString().substring(0, 16).equals(\\\"3.14159265358979\\\");\", \"true\");\n","filename":"test\/langtools\/jdk\/jshell\/ImportTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+\/\/ options: -Xlint:synchronization\n+\n+class AttemptToSynchronizeOnInstanceOfVbc {\n+    void foo(Integer i) {\n+        synchronized(i) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AttemptToSynchronizeOnInstanceOfVbc.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -16,1 +16,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -26,1 +26,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"test\/langtools\/tools\/javac\/lambda\/8074381\/T8074381a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:all ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:synchronization ExternalAbuseOfVbc.java\n+ * @compile\/ref=LintModeOffAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:-synchronization ExternalAbuseOfVbc.java\n+ *\/\n+\n+public final class ExternalAbuseOfVbc {\n+\n+    final Integer val = Integer.valueOf(42);\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+        synchronized(ref) {      \/\/ OK\n+            synchronized (val) { \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+ExternalAbuseOfVbc.java:18:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=JdkInternalAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint SomeVbc.java JdkInternalAbuseOfVbc.java\n+ *\/\n+\n+package java.lang;\n+\n+public final class JdkInternalAbuseOfVbc {\n+\n+    public JdkInternalAbuseOfVbc() {}\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+SomeVbc.java:38:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+SomeVbc.java:49:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+1 error\n+3 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lint\/LintModeOffAbuseOfVbc.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+@jdk.internal.ValueBased\n+public final class SomeVbc {\n+\n+    public SomeVbc() {}\n+\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+\n+        synchronized(ref) {           \/\/ OK\n+            synchronized (this) {     \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n+final class AuxilliaryAbuseOfVbc {\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/SomeVbc.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -146,3 +146,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances\n- * may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/HexPrinter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    public final static String SyncOnPrimitiveWrapper = PREFIX + \"SyncOnPrimitiveWrapper\";\n+    public final static String SyncOnValueBasedClass = PREFIX + \"SyncOnValueBasedClass\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}