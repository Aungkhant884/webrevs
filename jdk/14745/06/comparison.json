{"files":[{"patch":"@@ -42,3 +42,3 @@\n-     *       0 -> '00' -> ('0' << 8) | '0' -> 12336\n-     *       1 -> '01' -> ('0' << 8) | '1' -> 12337\n-     *       2 -> '02' -> ('0' << 8) | '2' -> 12338\n+     *       0 -> '00' -> ('0' << 8) | '0' -> 0x3030\n+     *       1 -> '01' -> ('0' << 8) | '1' -> 0x3130\n+     *       2 -> '02' -> ('0' << 8) | '2' -> 0x3230\n@@ -48,3 +48,3 @@\n-     *      10 -> '0a' -> ('0' << 8) | 'a' -> 12385\n-     *      11 -> '0b' -> ('0' << 8) | 'b' -> 12386\n-     *      12 -> '0c' -> ('0' << 8) | 'b' -> 12387\n+     *      10 -> '0a' -> ('0' << 8) | 'a' -> 0x3061\n+     *      11 -> '0b' -> ('0' << 8) | 'b' -> 0x3062\n+     *      12 -> '0c' -> ('0' << 8) | 'c' -> 0x3063\n@@ -54,3 +54,3 @@\n-     *      26 -> '1a' -> ('1' << 8) | 'a' -> 12641\n-     *      27 -> '1b' -> ('1' << 8) | 'b' -> 12642\n-     *      28 -> '1c' -> ('1' << 8) | 'c' -> 12643\n+     *      26 -> '1a' -> ('1' << 8) | 'a' -> 0x3161\n+     *      27 -> '1b' -> ('1' << 8) | 'b' -> 0x3162\n+     *      28 -> '1c' -> ('1' << 8) | 'c' -> 0x3163\n@@ -60,3 +60,3 @@\n-     *     253 -> 'fd' -> ('f' << 8) | 'd' -> 26212\n-     *     254 -> 'fe' -> ('f' << 8) | 'e' -> 26213\n-     *     255 -> 'ff' -> ('f' << 8) | 'f' -> 26214\n+     *     253 -> 'fd' -> ('f' << 8) | 'd' -> 0x6664\n+     *     254 -> 'fe' -> ('f' << 8) | 'e' -> 0x6665\n+     *     255 -> 'ff' -> ('f' << 8) | 'f' -> 0x6666\n@@ -106,1 +106,3 @@\n-     * Combine two hex shorts into one int based on big endian\n+     * Return a big-endian packed integer for the 4 ASCII bytes for an input unsigned 2-byte integer.\n+     * {@code b0} is the most significant byte and {@code b1} is the least significant byte.\n+     * The integer is passed byte-wise to allow reordering of execution.\n@@ -108,1 +110,1 @@\n-    static int digit(int b0, int b1) {\n+    static int packDigits(int b0, int b1) {\n@@ -113,1 +115,3 @@\n-     * Combine four hex shorts into one long based on big endian\n+     * Return a big-endian packed long for the 8 ASCII bytes for an input unsigned 4-byte integer.\n+     * {@code b0} is the most significant byte and {@code b3} is the least significant byte.\n+     * The integer is passed byte-wise to allow reordering of execution.\n@@ -115,1 +119,1 @@\n-    static long digit(int b0, int b1, int b2, int b3) {\n+    static long packDigits(int b0, int b1, int b2, int b3) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexDigits.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-import jdk.internal.util.ByteArray;\n+import jdk.internal.misc.Unsafe;\n+\n+import static jdk.internal.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET;\n@@ -79,0 +81,1 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -472,1 +475,1 @@\n-        ByteArray.setLong(\n+        UNSAFE.putLongUnaligned(\n@@ -474,2 +477,3 @@\n-                0,\n-                HexDigits.digit((int) (msb >> 56), (int) (msb >> 48), (int) (msb >> 40), (int) (msb >> 32)));\n+                ARRAY_BYTE_BASE_OFFSET,\n+                HexDigits.packDigits((int) (msb >> 56), (int) (msb >> 48), (int) (msb >> 40), (int) (msb >> 32)),\n+                true);\n@@ -477,1 +481,1 @@\n-        ByteArray.setInt(\n+        UNSAFE.putIntUnaligned(\n@@ -479,2 +483,3 @@\n-                9,\n-                HexDigits.digit(((int) msb) >> 24, ((int) msb) >> 16));\n+                ARRAY_BYTE_BASE_OFFSET + 9,\n+                HexDigits.packDigits(((int) msb) >> 24, ((int) msb) >> 16),\n+                true);\n@@ -482,1 +487,1 @@\n-        ByteArray.setInt(\n+        UNSAFE.putIntUnaligned(\n@@ -484,2 +489,3 @@\n-                14,\n-                HexDigits.digit(((int) msb) >> 8, (int) msb));\n+                ARRAY_BYTE_BASE_OFFSET + 14,\n+                HexDigits.packDigits(((int) msb) >> 8, (int) msb),\n+                true);\n@@ -487,1 +493,1 @@\n-        ByteArray.setInt(\n+        UNSAFE.putIntUnaligned(\n@@ -489,2 +495,3 @@\n-                19,\n-                HexDigits.digit((int) (lsb >> 56), (int) (lsb >> 48)));\n+                ARRAY_BYTE_BASE_OFFSET + 19,\n+                HexDigits.packDigits((int) (lsb >> 56), (int) (lsb >> 48)),\n+                true);\n@@ -492,1 +499,1 @@\n-        ByteArray.setLong(\n+        UNSAFE.putLongUnaligned(\n@@ -494,3 +501,4 @@\n-                24,\n-                HexDigits.digit(((int) (lsb >> 40)), (int) (lsb >> 32), ((int) lsb) >> 24, ((int) lsb) >> 16));\n-        ByteArray.setInt(\n+                ARRAY_BYTE_BASE_OFFSET + 24,\n+                HexDigits.packDigits(((int) (lsb >> 40)), (int) (lsb >> 32), ((int) lsb) >> 24, ((int) lsb) >> 16),\n+                true);\n+        UNSAFE.putIntUnaligned(\n@@ -498,2 +506,3 @@\n-                32,\n-                HexDigits.digit(((int) lsb) >> 8, (int) lsb));\n+                ARRAY_BYTE_BASE_OFFSET + 32,\n+                HexDigits.packDigits(((int) lsb) >> 8, (int) lsb),\n+                true);\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"}]}