{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.io.IOException;\n@@ -33,0 +34,1 @@\n+import java.io.UncheckedIOException;\n@@ -36,0 +38,1 @@\n+import java.util.stream.IntStream;\n@@ -37,0 +40,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -38,0 +42,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -42,14 +47,31 @@\n-    private static final byte[] INPUT = {\n-            (byte) 0xff, (byte) 0xfe, \/\/ BOM (in UTF-16LE)\n-            0, (byte) 0xd8, \/\/ High surrogate (in UTF-16LE)\n-    };\n-\n-    public void testStatefulDecoderNearEOF() {\n-        assertThrows(MalformedInputException.class, () -> {\n-            try (var r = new InputStreamReader(\n-                    new ByteArrayInputStream(INPUT),\n-                    StandardCharsets.UTF_16.newDecoder().onMalformedInput(CodingErrorAction.REPORT))) {\n-                System.out.printf(\"%04x%n\", r.read()); \/\/ \\u00d8 (wrong, uses UTF-16BE)\n-                System.out.printf(\"%04x%n\", r.read()); \/\/ EOF\n-            }\n-        });\n+\n+    @DataProvider\n+    public Object[][] inputs() {\n+        return new Object[][] {\n+            \/\/ BOM, followed by High surrogate (in UTF-16LE).\n+            \/\/ First read() should throw an exception.\n+            {new byte[] {(byte)0xff, (byte)0xfe, 0, (byte)0xd8}, 0},\n+\n+            \/\/ BOM, followed by 'A', 'B', 'C', then by High surrogate (in UTF-16LE).\n+            \/\/ Fourth read() should throw an exception.\n+            {new byte[] {(byte)0xff, (byte)0xfe, (byte)0x41, 0, (byte)0x42, 0, (byte)0x43, 0, 0, (byte)0xd8}, 3},\n+        };\n+    }\n+\n+    @Test (dataProvider = \"inputs\")\n+    public void testStatefulDecoderNearEOF(byte[] ba, int numSucessReads) throws IOException {\n+        try (var r = new InputStreamReader(\n+                new ByteArrayInputStream(ba),\n+                StandardCharsets.UTF_16.newDecoder().onMalformedInput(CodingErrorAction.REPORT))) {\n+            \/\/ Issue read() as many as numSucessReads which should not fail\n+            IntStream.rangeClosed(1, numSucessReads).forEach(i -> {\n+                try {\n+                    assertEquals(r.read(), (int)ba[i * 2]);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+\n+            \/\/ Final dangling high surrogate should throw an exception\n+            assertThrows(MalformedInputException.class, () -> r.read());\n+        }\n","filename":"test\/jdk\/java\/io\/InputStreamReader\/StatefulDecoderNearEOF.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"}]}