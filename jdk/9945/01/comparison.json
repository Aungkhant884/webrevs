{"files":[{"patch":"@@ -381,1 +381,0 @@\n-                    decoder.reset();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/StreamDecoder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8292043\n+ * @run testng StatefulDecoderNearEOF\n+ * @summary Check MalformedInputException is thrown with stateful decoders\n+ *      with malformed input before EOF\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.MalformedInputException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.stream.IntStream;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+@Test\n+public class StatefulDecoderNearEOF {\n+\n+    @DataProvider\n+    public Object[][] inputs() {\n+        return new Object[][] {\n+            \/\/ BOM, followed by High surrogate (in UTF-16LE).\n+            \/\/ First read() should throw an exception.\n+            {new byte[] {(byte)0xff, (byte)0xfe, 0, (byte)0xd8}, 0},\n+\n+            \/\/ BOM, followed by 'A', 'B', 'C', then by High surrogate (in UTF-16LE).\n+            \/\/ Fourth read() should throw an exception.\n+            {new byte[] {(byte)0xff, (byte)0xfe, (byte)0x41, 0, (byte)0x42, 0, (byte)0x43, 0, 0, (byte)0xd8}, 3},\n+        };\n+    }\n+\n+    @Test (dataProvider = \"inputs\")\n+    public void testStatefulDecoderNearEOF(byte[] ba, int numSucessReads) throws IOException {\n+        try (var r = new InputStreamReader(\n+                new ByteArrayInputStream(ba),\n+                StandardCharsets.UTF_16.newDecoder().onMalformedInput(CodingErrorAction.REPORT))) {\n+            \/\/ Issue read() as many as numSucessReads which should not fail\n+            IntStream.rangeClosed(1, numSucessReads).forEach(i -> {\n+                try {\n+                    assertEquals(r.read(), (int)ba[i * 2]);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+\n+            \/\/ Final dangling high surrogate should throw an exception\n+            assertThrows(MalformedInputException.class, () -> r.read());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/InputStreamReader\/StatefulDecoderNearEOF.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}