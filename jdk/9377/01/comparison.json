{"files":[{"patch":"@@ -237,0 +237,1 @@\n+  ConcurrentGCBreakpoints::at(\"AFTER REBUILD STARTED\");\n@@ -248,0 +249,1 @@\n+  ConcurrentGCBreakpoints::at(\"BEFORE REBUILD COMPLETED\");\n@@ -254,0 +256,1 @@\n+  ConcurrentGCBreakpoints::at(\"AFTER CLEANUP STARTED\");\n@@ -321,0 +324,1 @@\n+  ConcurrentGCBreakpoints::at(\"BEFORE CLEANUP COMPLETED\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,7 @@\n+    private static void testG1SpecificBreakpoints() {\n+        WB.concurrentGCRunTo(WB.G1_AFTER_REBUILD_STARTED);\n+        WB.concurrentGCRunTo(WB.G1_BEFORE_REBUILD_COMPLETED);\n+        WB.concurrentGCRunTo(WB.G1_AFTER_CLEANUP_STARTED);\n+        WB.concurrentGCRunTo(WB.G1_BEFORE_CLEANUP_COMPLETED);\n+    }\n+\n@@ -54,0 +61,3 @@\n+            if (GC.G1.isSelected()) {\n+                testG1SpecificBreakpoints();\n+            }\n@@ -58,0 +68,3 @@\n+            if (GC.G1.isSelected()) {\n+                testG1SpecificBreakpoints();\n+            }\n","filename":"test\/hotspot\/jtreg\/gc\/TestConcurrentGCBreakpoints.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test TestVerificationInConcurrentCycle\n+ * @requires vm.gc.G1\n+ * @summary Basic testing of various GC pause verification during the G1 concurrent cycle.\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *   -XX:+VerifyBeforeGC -XX:+VerifyDuringGC -XX:+VerifyAfterGC\n+ *   -XX:+G1VerifyBitmaps -XX:+G1VerifyRSetsDuringFullGC -XX:+G1VerifyHeapRegionCodeRoots\n+ *   -XX:+VerifyRememberedSets -XX:+VerifyObjectStartArray\n+ *   gc.g1.TestVerificationInConcurrentCycle\n+ *\/\n+\n+import sun.hotspot.WhiteBox;\n+import sun.hotspot.gc.GC;\n+\n+public class TestVerificationInConcurrentCycle {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    \/\/ All testN() assume initial state is idle, and restore that state.\n+\n+    private static void testFullGCAt(String at) throws Exception {\n+        System.out.println(\"testSimpleCycle\");\n+        try {\n+            \/\/ Run one cycle.\n+            WB.concurrentGCRunTo(at);\n+            WB.fullGC();\n+        } finally {\n+            WB.concurrentGCRunToIdle();\n+        }\n+    }\n+\n+    private static void testYoungGCAt(String at) throws Exception {\n+        System.out.println(\"testSimpleCycle\");\n+        try {\n+            \/\/ Run one cycle.\n+            WB.concurrentGCRunTo(at);\n+            WB.youngGC();\n+        } finally {\n+            WB.concurrentGCRunToIdle();\n+        }\n+    }\n+\n+    private static void testGCAt(String at) throws Exception {\n+        testYoungGCAt(at);\n+        testFullGCAt(at);\n+    }\n+\n+    private static void test() throws Exception {\n+        try {\n+            System.out.println(\"taking control\");\n+            WB.concurrentGCAcquireControl();\n+            testGCAt(WB.AFTER_MARKING_STARTED);\n+            testGCAt(WB.BEFORE_MARKING_COMPLETED);\n+            testGCAt(WB.G1_AFTER_REBUILD_STARTED);\n+            testGCAt(WB.G1_BEFORE_REBUILD_COMPLETED);\n+            testGCAt(WB.G1_AFTER_CLEANUP_STARTED);\n+            testGCAt(WB.G1_BEFORE_CLEANUP_COMPLETED);\n+        } finally {\n+            System.out.println(\"releasing control\");\n+            WB.concurrentGCReleaseControl();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!WB.supportsConcurrentGCBreakpoints()) {\n+            throw new RuntimeException(\"G1 should support GC breakpoints\");\n+        }\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerificationInConcurrentCycle.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -491,0 +491,6 @@\n+  \/\/ G1 specific GC breakpoints.\n+  public final String G1_AFTER_REBUILD_STARTED = \"AFTER REBUILD STARTED\";\n+  public final String G1_BEFORE_REBUILD_COMPLETED = \"BEFORE REBUILD COMPLETED\";\n+  public final String G1_AFTER_CLEANUP_STARTED = \"AFTER CLEANUP STARTED\";\n+  public final String G1_BEFORE_CLEANUP_COMPLETED = \"BEFORE CLEANUP COMPLETED\";\n+\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}