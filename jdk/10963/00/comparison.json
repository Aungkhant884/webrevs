{"files":[{"patch":"@@ -3928,4 +3928,3 @@\n-            if (token.kind == IDENTIFIER && token.name() == names.record) {\n-                checkSourceLevel(Feature.RECORDS);\n-                JCErroneous erroneousTree = syntaxError(token.pos, List.of(mods), Errors.RecordHeaderExpected);\n-                return toP(F.Exec(erroneousTree));\n+            if (LAX_IDENTIFIER.test(token.kind)) {\n+                errs = List.of(mods, toP(F.at(pos).Ident(ident())));\n+                setErrorEndPos(token.pos);\n@@ -3933,9 +3932,8 @@\n-                if (LAX_IDENTIFIER.test(token.kind)) {\n-                    errs = List.of(mods, toP(F.at(pos).Ident(ident())));\n-                    setErrorEndPos(token.pos);\n-                } else {\n-                    errs = List.of(mods);\n-                }\n-                final JCErroneous erroneousTree;\n-                if (parseModuleInfo) {\n-                    erroneousTree = syntaxError(pos, errs, Errors.ExpectedModuleOrOpen);\n+                errs = List.of(mods);\n+            }\n+            final JCErroneous erroneousTree;\n+            if (parseModuleInfo) {\n+                erroneousTree = syntaxError(pos, errs, Errors.ExpectedModuleOrOpen);\n+            } else {\n+                if (allowRecords) {\n+                    erroneousTree = syntaxError(pos, errs, Errors.Expected4(CLASS, INTERFACE, ENUM, \"record\"));\n@@ -3943,5 +3941,1 @@\n-                    if (allowRecords) {\n-                        erroneousTree = syntaxError(pos, errs, Errors.Expected4(CLASS, INTERFACE, ENUM, \"record\"));\n-                    } else {\n-                        erroneousTree = syntaxError(pos, errs, Errors.Expected3(CLASS, INTERFACE, ENUM));\n-                    }\n+                    erroneousTree = syntaxError(pos, errs, Errors.Expected3(CLASS, INTERFACE, ENUM));\n@@ -3949,1 +3943,0 @@\n-                return toP(F.Exec(erroneousTree));\n@@ -3951,0 +3944,1 @@\n+            return toP(F.Exec(erroneousTree));\n@@ -4429,4 +4423,1 @@\n-        if (token.kind == IDENTIFIER && token.name() == names.record &&\n-            (peekToken(TokenKind.IDENTIFIER, TokenKind.LPAREN) ||\n-             peekToken(TokenKind.IDENTIFIER, TokenKind.EOF) ||\n-             peekToken(TokenKind.IDENTIFIER, TokenKind.LT))) {\n+        if (token.kind == IDENTIFIER && token.name() == names.record && peekToken(TokenKind.IDENTIFIER)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":14,"deletions":23,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3777,3 +3777,0 @@\n-compiler.err.record.header.expected=\\\n-    record header expected\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-\/\/ key: compiler.err.record.header.expected\n+\/\/ key: compiler.err.expected\n+\/\/ key: compiler.err.illegal.start.of.type\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IncorrectRecordDeclaration.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8250629 8252307 8247352 8241151 8246774 8259025 8288130 8282714 8289647\n+ * @bug 8250629 8252307 8247352 8241151 8246774 8259025 8288130 8282714 8289647 8294020\n@@ -152,1 +152,1 @@\n-        assertFail(\"compiler.err.record.header.expected\", \"record R { }\");\n+        assertFail(\"compiler.err.expected\", \"record R { }\");\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8294020\n+ * @summary improve error position for records without header\n+ * @compile\/fail\/ref=RecordDeclarationSyntaxTest.out -XDrawDiagnostics RecordDeclarationSyntaxTest.java\n+ *\/\n+\n+class RecordDeclarationSyntaxTest {\n+    record R {} \/\/ no header\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/RecordDeclarationSyntaxTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+RecordDeclarationSyntaxTest.java:9:13: compiler.err.expected: '('\n+RecordDeclarationSyntaxTest.java:9:14: compiler.err.illegal.start.of.type\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/records\/RecordDeclarationSyntaxTest.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}