{"files":[{"patch":"@@ -493,0 +493,2 @@\n+    posix_spawnattr_t spawnattr;\n+    sigset_t unblock_signals;\n@@ -502,0 +504,8 @@\n+    \/* Unmask all signals in the child. *\/\n+    sigemptyset(&unblock_signals);\n+    if (posix_spawnattr_init(&spawnattr) != 0 ||\n+        posix_spawnattr_setflags(&spawnattr, POSIX_SPAWN_SETSIGMASK) != 0 ||\n+        posix_spawnattr_setsigmask(&spawnattr, &unblock_signals) != 0) {\n+        return -1;      \/\/ errno is set\n+    }\n+\n@@ -535,1 +545,3 @@\n-    rval = posix_spawn(&resultPid, helperpath, 0, 0, (char * const *) hlpargs, environ);\n+    rval = posix_spawn(&resultPid, helperpath, 0, &spawnattr, (char * const *) hlpargs, environ);\n+\n+    posix_spawnattr_destroy(&spawnattr);\n@@ -776,1 +788,0 @@\n-\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.lang.Process;\n+import java.lang.ProcessBuilder;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @summary Verify Signal mask is cleared by ProcessBuilder start\n+ * @bug 8234262\n+ * @run main UnblockSignals\n+ *\/\n+public class UnblockSignals {\n+    public static void main(String[] args)  throws IOException, InterruptedException {\n+        \/\/ Check that SIGQUIT is not masked, in previous releases it was masked\n+        final ProcessBuilder pb = new ProcessBuilder(\"sleep\", \"30\").inheritIO();\n+        Process p = pb.start();\n+        System.out.printf(\"Child %d, %s%n\", p.pid(), pb.command());\n+        ProcessBuilder killpb = new ProcessBuilder(\"kill\", \"-s\", \"QUIT\", Long.toString(p.pid()));\n+        Process killp = killpb.start();\n+        System.out.printf(\"Child %d, %s%n\", killp.pid(), killpb.command());\n+        int killst = killp.waitFor();\n+        if (killst != 0) {\n+            throw new RuntimeException(\"Kill process failed, exit status: \" + killst);\n+        }\n+        int sleepStatus = p.waitFor();\n+        if (sleepStatus == 0) {\n+            throw new RuntimeException(\"Child not killed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/UnblockSignals.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}