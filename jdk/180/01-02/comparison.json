{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/preTouchTask.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/shared\/preTouch.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/workgroup.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/preTouchTask.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/shared\/preTouch.hpp\"\n@@ -118,2 +118,2 @@\n-      PretouchTask::pretouch(\"ParallelGC PreTouch\", (char*)head.start(),\n-                             (char*)head.end(), page_size, pretouch_gang);\n+      PretouchTask::pretouch(\"ParallelGC PreTouch head\", (char*)head.start(), (char*)head.end(),\n+                             page_size, pretouch_gang);\n@@ -121,2 +121,2 @@\n-      PretouchTask::pretouch(\"ParallelGC PreTouch\", (char*)tail.start(),\n-                             (char*)tail.end(), page_size, pretouch_gang);\n+      PretouchTask::pretouch(\"ParallelGC PreTouch tail\", (char*)tail.start(), (char*)tail.end(),\n+                             page_size, pretouch_gang);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+class WorkGang;\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_PRETOUCH_HPP\n-#define SHARE_GC_SHARED_PRETOUCH_HPP\n-\n-class PretouchTask : public AbstractGangTask {\n-\n-private:\n-  char* volatile _cur_addr;\n-  char* const _start_addr;\n-  char* const _end_addr;\n-  size_t _page_size;\n-\n-public:\n-  PretouchTask(const char* task_name, char* start_address, char* end_address, size_t page_size) :\n-    AbstractGangTask(task_name),\n-    _cur_addr(start_address),\n-    _start_addr(start_address),\n-    _end_addr(end_address),\n-    _page_size(0) {\n-#ifdef LINUX\n-    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n-#else\n-    _page_size = page_size;\n-#endif\n-  }\n-\n-  virtual void work(uint worker_id) {\n-    size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n-    while (true) {\n-      char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n-      if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n-        break;\n-      }\n-      char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n-      os::pretouch_memory(touch_addr, end_addr, _page_size);\n-    }\n-  }\n-\n-  static size_t chunk_size() { return PreTouchParallelChunkSize; }\n-\n-  static void pretouch(const char* task_name, char* start_address, char* end_address, size_t page_size,\n-                       WorkGang* pretouch_gang) {\n-\n-    PretouchTask task(task_name, start_address, end_address, page_size);\n-    size_t total_bytes = (end_address - start_address);\n-\n-    if (pretouch_gang != NULL) {\n-      size_t num_chunks = MAX2((size_t)1, total_bytes \/ MAX2(PretouchTask::chunk_size(), page_size));\n-\n-      uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n-      log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n-                          task.name(), num_workers, num_chunks, total_bytes);\n-\n-      pretouch_gang->run_task(&task, num_workers);\n-    } else {\n-      log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n-                          task.name(), total_bytes);\n-      task.work(0);\n-    }\n-  }\n-\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_PRETOUCH_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/preTouch.hpp","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shared\/preTouchTask.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+\n+void PretouchTask::work(uint worker_id) {\n+\n+  size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n+\n+  while (true) {\n+    char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n+    if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n+      break;\n+    }\n+\n+    char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n+\n+    os::pretouch_memory(touch_addr, end_addr, _page_size);\n+  }\n+}\n+\n+\n+void PretouchTask::pretouch(const char* task_name, char* start_address, char* end_address,\n+                            size_t page_size, WorkGang* pretouch_gang) {\n+\n+  PretouchTask task(task_name, start_address, end_address, page_size);\n+  size_t total_bytes = (end_address - start_address);\n+\n+  if (pretouch_gang != NULL) {\n+    size_t num_chunks = MAX2((size_t)1, total_bytes \/ MAX2(PretouchTask::chunk_size(), page_size));\n+\n+    uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n+    log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n+                        task.name(), num_workers, num_chunks, total_bytes);\n+\n+    pretouch_gang->run_task(&task, num_workers);\n+  } else {\n+    log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n+                        task.name(), total_bytes);\n+    task.work(0);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/preTouchTask.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_PRETOUCH_HPP\n+#define SHARE_GC_SHARED_PRETOUCH_HPP\n+\n+#include \"gc\/shared\/workgroup.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+class PretouchTask : public AbstractGangTask {\n+\n+private:\n+  char* volatile _cur_addr;\n+  char* const _start_addr;\n+  char* const _end_addr;\n+  size_t _page_size;\n+\n+public:\n+  PretouchTask(const char* task_name, char* start_address, char* end_address, size_t page_size) :\n+    AbstractGangTask(task_name),\n+    _cur_addr(start_address),\n+    _start_addr(start_address),\n+    _end_addr(end_address),\n+    _page_size(0) {\n+#ifdef LINUX\n+    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n+#else\n+    _page_size = page_size;\n+#endif\n+  }\n+\n+  virtual void work(uint worker_id);\n+\n+  static size_t chunk_size()              { return PreTouchParallelChunkSize; }\n+\n+  static void pretouch(const char* task_name, char* start_address, char* end_address, size_t page_size,\n+                       WorkGang* pretouch_gang);\n+\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_PRETOUCH_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/preTouchTask.hpp","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}