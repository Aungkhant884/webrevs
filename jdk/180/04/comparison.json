{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/pretouchTask.hpp\"\n@@ -237,35 +238,0 @@\n-class G1PretouchTask : public AbstractGangTask {\n-private:\n-  char* volatile _cur_addr;\n-  char* const _start_addr;\n-  char* const _end_addr;\n-  size_t _page_size;\n-public:\n-  G1PretouchTask(char* start_address, char* end_address, size_t page_size) :\n-    AbstractGangTask(\"G1 PreTouch\"),\n-    _cur_addr(start_address),\n-    _start_addr(start_address),\n-    _end_addr(end_address),\n-    _page_size(0) {\n-#ifdef LINUX\n-    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n-#else\n-    _page_size = page_size;\n-#endif\n-  }\n-\n-  virtual void work(uint worker_id) {\n-    size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n-    while (true) {\n-      char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n-      if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n-        break;\n-      }\n-      char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n-      os::pretouch_memory(touch_addr, end_addr, _page_size);\n-    }\n-  }\n-\n-  static size_t chunk_size() { return PreTouchParallelChunkSize; }\n-};\n-\n@@ -273,4 +239,0 @@\n-  G1PretouchTask cl(page_start(start_page), bounded_end_addr(start_page + size_in_pages), _page_size);\n-\n-  if (pretouch_gang != NULL) {\n-    size_t num_chunks = MAX2((size_t)1, size_in_pages * _page_size \/ MAX2(G1PretouchTask::chunk_size(), _page_size));\n@@ -278,9 +240,2 @@\n-    uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n-    log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n-                        cl.name(), num_workers, num_chunks, size_in_pages * _page_size);\n-    pretouch_gang->run_task(&cl, num_workers);\n-  } else {\n-    log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n-                        cl.name(), size_in_pages * _page_size);\n-    cl.work(0);\n-  }\n+  PretouchTask::pretouch(\"G1 PreTouch\", page_start(start_page), bounded_end_addr(start_page + size_in_pages),\n+                         _page_size, pretouch_gang);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":4,"deletions":49,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/workgroup.hpp\"\n@@ -575,1 +576,2 @@\n-                                  bool setup_pages) {\n+                                  bool setup_pages,\n+                                  WorkGang* pretouch_gang) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,5 @@\n-  virtual void initialize(MemRegion mr, bool clear_space, bool mangle_space, bool setup_pages = SetupPages);\n+  virtual void initialize(MemRegion mr,\n+                          bool clear_space,\n+                          bool mangle_space,\n+                          bool setup_pages = SetupPages,\n+                          WorkGang* pretouch_gang = NULL);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/pretouchTask.hpp\"\n@@ -63,4 +64,0 @@\n-void MutableSpace::pretouch_pages(MemRegion mr) {\n-  os::pretouch_memory(mr.start(), mr.end());\n-}\n-\n@@ -70,1 +67,2 @@\n-                              bool setup_pages) {\n+                              bool setup_pages,\n+                              WorkGang* pretouch_gang) {\n@@ -117,2 +115,7 @@\n-      pretouch_pages(head);\n-      pretouch_pages(tail);\n+      size_t page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n+\n+      PretouchTask::pretouch(\"ParallelGC PreTouch head\", (char*)head.start(), (char*)head.end(),\n+                             page_size, pretouch_gang);\n+\n+      PretouchTask::pretouch(\"ParallelGC PreTouch tail\", (char*)tail.start(), (char*)tail.end(),\n+                             page_size, pretouch_gang);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+class WorkGang;\n+\n@@ -59,1 +61,0 @@\n-  void pretouch_pages(MemRegion mr);\n@@ -90,1 +91,2 @@\n-                          bool setup_pages = SetupPages);\n+                          bool setup_pages = SetupPages,\n+                          WorkGang* pretouch_gang = NULL);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -91,0 +91,3 @@\n+  \/\/ Set up WorkGang\n+  _workers.initialize_workers();\n+\n@@ -135,3 +138,0 @@\n-  \/\/ Set up WorkGang\n-  _workers.initialize_workers();\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -134,1 +134,3 @@\n-                             SpaceDecorator::Mangle);\n+                             SpaceDecorator::Mangle,\n+                             MutableSpace::SetupPages,\n+                             &ParallelScavengeHeap::heap()->workers());\n@@ -354,0 +356,3 @@\n+  WorkGang* workers = Thread::current()->is_VM_thread() ?\n+                      &ParallelScavengeHeap::heap()->workers() : NULL;\n+\n@@ -357,1 +362,3 @@\n-                             SpaceDecorator::DontMangle);\n+                             SpaceDecorator::DontMangle,\n+                             MutableSpace::SetupPages,\n+                             workers);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -192,3 +192,4 @@\n-  eden_space()->initialize(eden_mr, true, ZapUnusedHeapArea);\n-    to_space()->initialize(to_mr  , true, ZapUnusedHeapArea);\n-  from_space()->initialize(from_mr, true, ZapUnusedHeapArea);\n+  WorkGang& pretouch_workers = ParallelScavengeHeap::heap()->workers();\n+  eden_space()->initialize(eden_mr, true, ZapUnusedHeapArea, MutableSpace::SetupPages, &pretouch_workers);\n+    to_space()->initialize(to_mr  , true, ZapUnusedHeapArea, MutableSpace::SetupPages, &pretouch_workers);\n+  from_space()->initialize(from_mr, true, ZapUnusedHeapArea, MutableSpace::SetupPages, &pretouch_workers);\n@@ -639,0 +640,3 @@\n+\n+  WorkGang* workers = &ParallelScavengeHeap::heap()->workers();\n+\n@@ -643,1 +647,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -646,1 +652,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -649,1 +657,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -786,0 +796,1 @@\n+\n@@ -788,1 +799,3 @@\n-                                SpaceDecorator::Mangle);\n+                                SpaceDecorator::Mangle,\n+                                MutableSpace::SetupPages,\n+                                &ParallelScavengeHeap::heap()->workers());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/pretouchTask.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+PretouchTask::PretouchTask(const char* task_name, char* start_address, char* end_address, size_t page_size) :\n+    AbstractGangTask(task_name),\n+    _cur_addr(start_address),\n+    _start_addr(start_address),\n+    _end_addr(end_address),\n+    _page_size(0) {\n+#ifdef LINUX\n+  _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n+#else\n+  _page_size = page_size;\n+#endif\n+}\n+\n+size_t PretouchTask::chunk_size() {\n+  return PreTouchParallelChunkSize;\n+}\n+\n+void PretouchTask::work(uint worker_id) {\n+  size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n+\n+  while (true) {\n+    char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n+    if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n+      break;\n+    }\n+\n+    char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n+\n+    os::pretouch_memory(touch_addr, end_addr, _page_size);\n+  }\n+}\n+\n+void PretouchTask::pretouch(const char* task_name, char* start_address, char* end_address,\n+                            size_t page_size, WorkGang* pretouch_gang) {\n+  PretouchTask task(task_name, start_address, end_address, page_size);\n+  size_t total_bytes = pointer_delta(end_address, start_address, sizeof(char));\n+\n+  if (pretouch_gang != NULL) {\n+    size_t num_chunks = MAX2((size_t)1, total_bytes \/ MAX2(PretouchTask::chunk_size(), page_size));\n+\n+    uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n+    log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n+                        task.name(), num_workers, num_chunks, total_bytes);\n+\n+    pretouch_gang->run_task(&task, num_workers);\n+  } else {\n+    log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n+                        task.name(), total_bytes);\n+    task.work(0);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/pretouchTask.cpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_PRETOUCH_HPP\n+#define SHARE_GC_SHARED_PRETOUCH_HPP\n+\n+#include \"gc\/shared\/workgroup.hpp\"\n+\n+class PretouchTask : public AbstractGangTask {\n+  char* volatile _cur_addr;\n+  char* const _start_addr;\n+  char* const _end_addr;\n+  size_t _page_size;\n+\n+public:\n+  PretouchTask(const char* task_name, char* start_address, char* end_address, size_t page_size);\n+\n+  virtual void work(uint worker_id);\n+\n+  static size_t chunk_size();\n+\n+  static void pretouch(const char* task_name, char* start_address, char* end_address,\n+                       size_t page_size, WorkGang* pretouch_gang);\n+\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_PRETOUCH_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/pretouchTask.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}