{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/preTouch.hpp\"\n@@ -237,35 +238,0 @@\n-class G1PretouchTask : public AbstractGangTask {\n-private:\n-  char* volatile _cur_addr;\n-  char* const _start_addr;\n-  char* const _end_addr;\n-  size_t _page_size;\n-public:\n-  G1PretouchTask(char* start_address, char* end_address, size_t page_size) :\n-    AbstractGangTask(\"G1 PreTouch\"),\n-    _cur_addr(start_address),\n-    _start_addr(start_address),\n-    _end_addr(end_address),\n-    _page_size(0) {\n-#ifdef LINUX\n-    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n-#else\n-    _page_size = page_size;\n-#endif\n-  }\n-\n-  virtual void work(uint worker_id) {\n-    size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n-    while (true) {\n-      char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n-      if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n-        break;\n-      }\n-      char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n-      os::pretouch_memory(touch_addr, end_addr, _page_size);\n-    }\n-  }\n-\n-  static size_t chunk_size() { return PreTouchParallelChunkSize; }\n-};\n-\n@@ -273,4 +239,0 @@\n-  G1PretouchTask cl(page_start(start_page), bounded_end_addr(start_page + size_in_pages), _page_size);\n-\n-  if (pretouch_gang != NULL) {\n-    size_t num_chunks = MAX2((size_t)1, size_in_pages * _page_size \/ MAX2(G1PretouchTask::chunk_size(), _page_size));\n@@ -278,9 +240,2 @@\n-    uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n-    log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n-                        cl.name(), num_workers, num_chunks, size_in_pages * _page_size);\n-    pretouch_gang->run_task(&cl, num_workers);\n-  } else {\n-    log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n-                        cl.name(), size_in_pages * _page_size);\n-    cl.work(0);\n-  }\n+  PretouchTask::pretouch(\"G1 PreTouch\", page_start(start_page), bounded_end_addr(start_page + size_in_pages),\n+                         _page_size, pretouch_gang);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":3,"deletions":48,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/preTouch.hpp\"\n@@ -63,48 +64,0 @@\n-class PGCPretouchTask: public AbstractGangTask {\n-  char* volatile _cur_addr;\n-  char* const _start_addr;\n-  char* const _end_addr;\n-  size_t _page_size;\n-  uint _total_workers;\n-\n-public:\n-  PGCPretouchTask(MemRegion mr, size_t page_size) :\n-    AbstractGangTask(\"ParallelGC PreTouch\"),\n-    _cur_addr((char*)mr.start()),\n-    _start_addr((char*)mr.start()),\n-    _end_addr((char*)mr.end()),\n-    _page_size(0) {\n-#ifdef LINUX\n-    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size() : page_size;\n-#else\n-    _page_size = page_size;\n-#endif\n-  }\n-\n-  virtual void work(uint worker_id) {\n-\n-    \/\/ Get chunk size\n-    size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n-\n-    char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n-\n-    if (touch_addr > _end_addr) {\n-      return ;\n-    }\n-\n-    char* end_addr   = touch_addr + actual_chunk_size;\n-    if (end_addr > _end_addr)\n-       end_addr = _end_addr;\n-\n-    os::pretouch_memory(touch_addr, end_addr, _page_size);\n-  }\n-\n-  void set_total_workers(uint total_workers) { _total_workers = total_workers; }\n-\n-  size_t chunk_size() { return align_down((_end_addr-_start_addr)\/_total_workers, _page_size); }\n-\n-  static void pretouch_pages(MemRegion mr) {\n-    os::pretouch_memory(mr.start(), mr.end());\n-  }\n-};\n-\n@@ -164,5 +117,0 @@\n-      PGCPretouchTask pretouch_task(head, page_size);\n-\n-      if (pretouch_gang) {\n-        uint num_workers = pretouch_gang->total_workers();\n-        pretouch_task.set_total_workers(num_workers);\n@@ -170,2 +118,2 @@\n-        log_debug(gc, heap)(\"Running %s with %u workers for pre-touching \" SIZE_FORMAT \"B.\",\n-                            pretouch_task.name(), num_workers, head.byte_size());\n+      PretouchTask::pretouch(\"ParallelGC PreTouch\", (char*)head.start(),\n+                             (char*)head.end(), page_size, pretouch_gang);\n@@ -173,16 +121,2 @@\n-        pretouch_gang->run_task(&pretouch_task, num_workers);\n-\n-      } else {\n-\n-        if (head.byte_size() != 0) {\n-          log_debug(gc, heap)(\"Running %s with 1 thread for pre-touching \" SIZE_FORMAT \"B.\",\n-                              pretouch_task.name(), head.byte_size());\n-          PGCPretouchTask::pretouch_pages(head);\n-        }\n-      }\n-\n-      if (tail.byte_size() != 0) {\n-        log_debug(gc, heap)(\"Running %s with 1 thread for pre-touching \" SIZE_FORMAT \"B.\",\n-                            pretouch_task.name(), tail.byte_size());\n-        PGCPretouchTask::pretouch_pages(tail);\n-      }\n+      PretouchTask::pretouch(\"ParallelGC PreTouch\", (char*)tail.start(),\n+                             (char*)tail.end(), page_size, pretouch_gang);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":5,"deletions":71,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -356,0 +356,3 @@\n+  WorkGang* workers = Thread::current()->is_VM_thread() ?\n+                      &ParallelScavengeHeap::heap()->workers() : NULL;\n+\n@@ -359,1 +362,3 @@\n-                             SpaceDecorator::DontMangle);\n+                             SpaceDecorator::DontMangle,\n+                             MutableSpace::SetupPages,\n+                             workers);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -640,0 +640,3 @@\n+\n+  WorkGang* workers = Thread::current()->is_VM_thread() ?\n+                      &ParallelScavengeHeap::heap()->workers() : NULL;\n@@ -644,1 +647,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -647,1 +652,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -650,1 +657,3 @@\n-                           SpaceDecorator::DontMangle);\n+                           SpaceDecorator::DontMangle,\n+                           MutableSpace::SetupPages,\n+                           workers);\n@@ -787,0 +796,4 @@\n+\n+    WorkGang* workers = Thread::current()->is_VM_thread() ?\n+                        &ParallelScavengeHeap::heap()->workers() : NULL;\n+\n@@ -789,1 +802,3 @@\n-                                SpaceDecorator::Mangle);\n+                                SpaceDecorator::Mangle,\n+                                MutableSpace::SetupPages,\n+                                workers);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_PRETOUCH_HPP\n+#define SHARE_GC_SHARED_PRETOUCH_HPP\n+\n+class PretouchTask : public AbstractGangTask {\n+\n+private:\n+  char* volatile _cur_addr;\n+  char* const _start_addr;\n+  char* const _end_addr;\n+  size_t _page_size;\n+\n+public:\n+  PretouchTask(const char* task_name, char* start_address, char* end_address, size_t page_size) :\n+    AbstractGangTask(task_name),\n+    _cur_addr(start_address),\n+    _start_addr(start_address),\n+    _end_addr(end_address),\n+    _page_size(0) {\n+#ifdef LINUX\n+    _page_size = UseTransparentHugePages ? (size_t)os::vm_page_size(): page_size;\n+#else\n+    _page_size = page_size;\n+#endif\n+  }\n+\n+  virtual void work(uint worker_id) {\n+    size_t const actual_chunk_size = MAX2(chunk_size(), _page_size);\n+    while (true) {\n+      char* touch_addr = Atomic::fetch_and_add(&_cur_addr, actual_chunk_size);\n+      if (touch_addr < _start_addr || touch_addr >= _end_addr) {\n+        break;\n+      }\n+      char* end_addr = touch_addr + MIN2(actual_chunk_size, pointer_delta(_end_addr, touch_addr, sizeof(char)));\n+      os::pretouch_memory(touch_addr, end_addr, _page_size);\n+    }\n+  }\n+\n+  static size_t chunk_size() { return PreTouchParallelChunkSize; }\n+\n+  static void pretouch(const char* task_name, char* start_address, char* end_address, size_t page_size,\n+                       WorkGang* pretouch_gang) {\n+\n+    PretouchTask task(task_name, start_address, end_address, page_size);\n+    size_t total_bytes = (end_address - start_address);\n+\n+    if (pretouch_gang != NULL) {\n+      size_t num_chunks = MAX2((size_t)1, total_bytes \/ MAX2(PretouchTask::chunk_size(), page_size));\n+\n+      uint num_workers = MIN2((uint)num_chunks, pretouch_gang->total_workers());\n+      log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n+                          task.name(), num_workers, num_chunks, total_bytes);\n+\n+      pretouch_gang->run_task(&task, num_workers);\n+    } else {\n+      log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n+                          task.name(), total_bytes);\n+      task.work(0);\n+    }\n+  }\n+\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_PRETOUCH_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/preTouch.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}