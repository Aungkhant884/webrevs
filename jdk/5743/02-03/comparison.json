{"files":[{"patch":"@@ -897,16 +897,0 @@\n-    \/**\n-     * Searches for the string in the given file and return true\n-     * if the string was found.\n-     *\n-     * @param fileString    the contents of the file to search through\n-     * @param stringToFind  the string to search for\n-     * @return              true if the string was found\n-     *\/\n-    private boolean findString(String fileString, String stringToFind) {\n-        \/\/ javadoc (should) always use the platform newline sequence,\n-        \/\/ but in the strings to find it is more convenient to use the Java\n-        \/\/ newline character. So we translate \\n to NL before we search.\n-        stringToFind = stringToFind.replace(\"\\n\", NL);\n-        return fileString.contains(stringToFind);\n-    }\n-\n@@ -1055,1 +1039,1 @@\n-                out.println(\"Skipping checks for:\\n\"\n+                out.println(\"Skipping checks for:\" + NL\n@@ -1058,1 +1042,1 @@\n-                        .collect(Collectors.joining(\"\\n\")));\n+                        .collect(Collectors.joining(NL)));\n@@ -1077,1 +1061,1 @@\n-                out.println(\"Skipping checks for:\\n\"\n+                out.println(\"Skipping checks for:\" + NL\n@@ -1080,1 +1064,1 @@\n-                        .collect(Collectors.joining(\"\\n\")));\n+                        .collect(Collectors.joining(NL)));\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -410,1 +410,1 @@\n-        checkMessages(fix(\"Passed: p\/C.html: id=\\\"m1()\\\" is unique\",\n+        checkMessages(\"Passed: p\/C.html: id=\\\"m1()\\\" is unique\",\n@@ -415,1 +415,1 @@\n-                \"FAILED: p\/C.html: m3() is not unique\"));\n+                \"FAILED: p\/C.html: m3() is not unique\");\n","filename":"test\/langtools\/jdk\/javadoc\/testJavadocTester\/TestJavadocTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}