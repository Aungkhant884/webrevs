{"files":[{"patch":"@@ -549,1 +549,1 @@\n-bool os::has_allocatable_memory_limit(julong* limit) {\n+bool os::has_allocatable_memory_limit(size_t* limit) {\n@@ -558,1 +558,1 @@\n-    *limit = (julong)rlim.rlim_cur;\n+    *limit = (size_t)rlim.rlim_cur;\n@@ -567,1 +567,1 @@\n-  const julong max_virtual_limit = (julong)3800*M;\n+  const size_t max_virtual_limit = 3800*M;\n@@ -584,1 +584,1 @@\n-  const julong min_allocation_size = M;\n+  const size_t min_allocation_size = M;\n@@ -586,1 +586,1 @@\n-  julong upper_limit = *limit;\n+  size_t upper_limit = *limit;\n@@ -597,1 +597,1 @@\n-    julong lower_limit = min_allocation_size;\n+    size_t lower_limit = min_allocation_size;\n@@ -599,1 +599,1 @@\n-      julong temp_limit = ((upper_limit - lower_limit) \/ 2) + lower_limit;\n+      size_t temp_limit = ((upper_limit - lower_limit) \/ 2) + lower_limit;\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -855,1 +855,1 @@\n-bool os::has_allocatable_memory_limit(julong* limit) {\n+bool os::has_allocatable_memory_limit(size_t* limit) {\n@@ -860,1 +860,1 @@\n-  *limit = (julong)ms.ullAvailVirtual;\n+  *limit = (size_t)ms.ullAvailVirtual;\n@@ -864,1 +864,1 @@\n-  *limit = MIN2((julong)1400*M, (julong)ms.ullAvailVirtual);\n+  *limit = MIN2((size_t)1400*M, (size_t)ms.ullAvailVirtual);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  julong limit = 0;\n+  size_t limit = 0;\n@@ -35,1 +35,1 @@\n-    return (size_t)limit;\n+    return limit;\n","filename":"src\/hotspot\/share\/gc\/z\/zAddressSpaceLimit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1658,3 +1658,3 @@\n-julong Arguments::limit_heap_by_allocatable_memory(julong limit) {\n-  julong max_allocatable;\n-  julong result = limit;\n+size_t Arguments::limit_heap_by_allocatable_memory(size_t limit) {\n+  size_t max_allocatable;\n+  size_t result = limit;\n@@ -1667,2 +1667,2 @@\n-    julong heap_virtual_to_physical_ratio = (AggressiveHeap ? 1 : GCConfig::arguments()->heap_virtual_to_physical_ratio());\n-    julong fraction = MaxVirtMemFraction * heap_virtual_to_physical_ratio;\n+    size_t heap_virtual_to_physical_ratio = (AggressiveHeap ? 1 : GCConfig::arguments()->heap_virtual_to_physical_ratio());\n+    size_t fraction = MaxVirtMemFraction * heap_virtual_to_physical_ratio;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  static julong limit_heap_by_allocatable_memory(julong size);\n+  static size_t limit_heap_by_allocatable_memory(size_t size);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-  static bool has_allocatable_memory_limit(julong* limit);\n+  static bool has_allocatable_memory_limit(size_t* limit);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}