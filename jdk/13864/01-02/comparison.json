{"files":[{"patch":"@@ -43,6 +43,7 @@\n- * The general idea of Loop Predication is to insert a predicate on the entry\n- * path to a loop, and raise a uncommon trap if the check of the condition fails.\n- * The condition checks are promoted (hoisted) from inside the loop body, and thus\n- * the checks inside the loop could be eliminated. Currently, loop predication\n- * optimization has been applied to remove array range check and loop invariant\n- * checks (such as null checks).\n+ * The general idea of Loop Predication is to hoist a check inside a loop body by inserting a Hoisted Predicate with an\n+ * uncommon trap on the entry path to the loop. The old check inside the loop can be eliminated. If the condition of the\n+ * Hoisted Predicate fails at runtime, we'll execute the uncommon trap to avoid entering the loop which misses the check.\n+ * Loop Predication can currently remove array range check and loop invariant checks (such as null checks).\n+ *\n+ * On top of these predicates added by Loop Predication, there are other kinds of predicates. The following list provides\n+ * a complete description of all predicates used in the C2 compiler:\n@@ -50,3 +51,0 @@\n- * On top of these predicates added by Loop Predication, there are other kinds\n- * of predicates. The following list provides a complete description of all\n- * predicates used in the C2 compiler:\n@@ -56,0 +54,2 @@\n+ * - Regular Predicate: This term is used to refer to a Parse Predicate or a Runtime Predicate and can be used to\n+ *                      distinguish from any Assertion Predicate.\n@@ -63,1 +63,8 @@\n- * - Loop Predicate:             A predicate that can either hoist a loop-invariant check out of a loop or a range check\n+ * - Runtime Predicate: This term is used to refer to a Hoisted Predicate (either a Loop Predicate or a Profiled Loop\n+ *                      Predicate) or a Loop Limit Check Predicate. These predicates will be checked at runtime while the\n+ *                      Parse and Assertion Predicates are always removed before code generation (except for Initialized\n+ *                      Assertion Predicates which are kept in debug builds while being removed in product builds).\n+ *     - Hoisted Predicate: Either a Loop Predicate or a Profiled Loop Predicate that was created during Loop Predication\n+ *                          to hoist a check out of a loop. Each Hoisted Predicate is accompanied by additional\n+ *                          Assertion Predicates.\n+ *         - Loop Predicate:     A predicate that can either hoist a loop-invariant check out of a loop or a range check\n@@ -68,2 +75,2 @@\n- * - Profiled Loop Predicate:    This predicate is very similar to a Loop Predicate but the hoisted check does not need\n- *                               to be executed in each loop iteration. By using profiling information, only checks with\n+ *         - Profiled Loop:      This predicate is very similar to a Loop Predicate but the hoisted check does not need\n+ *           Predicate           to be executed in each loop iteration. By using profiling information, only checks with\n@@ -73,11 +80,8 @@\n- * - Loop Limit Check Predicate: This predicate is created when transforming a loop to a counted loop. It does not replace\n- *                               an actual check inside the loop. This predicate can only be added once above the Loop\n- *                               Limit Check Parse Predicate for a loop.\n- * - Hoisted Predicate: Any predicate that was created during Loop Predication to hoist a check out of a loop.\n- *                      Each Hoisted Predicate is accompanied by additional Assertion Predicates (see below).\n- * - Runtime Predicate: This term is used to refer to a Hoisted Predicate (either a Loop Predicate or a Profiled Loop\n- *                      Predicate) or a Loop Limit Check Predicate. These predicates will be checked at runtime while the\n- *                      Parse and Assertion Predicates are always removed before code generation (except for Initialized\n- *                      Assertion Predicates which are kept in debug builds while being removed in product builds).\n- * - Regular Predicate: This term is used to refer to a Runtime Predicate or a Parse Predicate and can be used to\n- *                      distinguish from any Assertion Predicate.\n+ *     - Loop Limit Check:   This predicate is created when transforming a loop to a counted loop to protect against\n+ *       Predicate           the case when adding the stride to the induction variable would cause an overflow which\n+ *                           will not satisfy the loop limit exit condition. This overflow is unexpected for further\n+ *                           counted loop optimizations and could lead to wrong results. Therefore, when this predicate\n+ *                           fails at runtime, we must trap and recompile the method without turning the loop into a\n+ *                           a counted loop to avoid these overflow problems.\n+ *                           The predicate does not replace an actual check inside the loop. This predicate can only\n+ *                           be added once above the Loop Limit Check Parse Predicate for a loop.\n@@ -101,1 +105,1 @@\n- *                                                           Predicate from for a (sub) loop.\n+ *                                                           Predicate for a (sub) loop.\n@@ -111,2 +115,2 @@\n- *                                                   the loop. We add two additional Template Assertion Predicates which\n- *                                                   are later used to create Initialized Assertion Predicates from. One\n+ *                                                   the loop. We add two additional Template Assertion Predicates from\n+ *                                                   which we can later create Initialized Assertion Predicates. One\n@@ -144,2 +148,7 @@\n- *                                                   The Initialized Assertion Predicates are always true because their\n- *                                                   range is covered by the main-loop entry guard.\n+ *                                                   The Initialized Assertion Predicates are always true because we will\n+ *                                                   never enter the main loop because of the changed pre- and main-loop\n+ *                                                   exit conditions.\n+ *                                                   Note that Range Check Elimination could remove additional range\n+ *                                                   checks which we were not possible to remove with Loop Predication\n+ *                                                   before (for example, because no Parse Predicates were available\n+ *                                                   before the loop to create Hoisted Predicates with).\n@@ -149,7 +158,5 @@\n- * - Runtime Predicate Block: A block containing all Runtime Predicates belonging to a single Parse Predicate. This block\n- *                            could be empty if there were no Runtime Predicates created at this Parse Predicate.\n- *                            For the time being: We also count Assertion Predicates to this block but that will be\n- *                            changed with the redesign of Assertion Predicates where we remove them from this block\n- *                            (JDK-8288981).\n- * - Regular Predicate Block: A Regular Predicate Block consists of a Parse Predicate a Runtime Predicate Block (all its\n- *                            Runtime Predicates, if any). There are three such blocks:\n+ * - Regular Predicate Block: A Regular Predicate Block groups all Runtime Predicates in a Runtime Predicate Block\n+ *                            together with their dedicated Parse Predicate from which they were created (all predicates\n+ *                            share the same uncommon trap). The Runtime Predicate Block could be empty (i.e. no\n+ *                            Runtime Predicates created) and the Parse Predicate could be missing (after removing Parse\n+ *                            Predicates). There are three such Regular Predicate Blocks:\n@@ -159,0 +166,6 @@\n+ * - Runtime Predicate Block: A block containing all Runtime Predicates that share the same uncommon trap (i.e. belonging\n+ *                            to a single Parse Predicate which is not included in this block). This block could be empty\n+ *                            if there were no Runtime Predicates created with the Parse Predicate below this block.\n+ *                            For the time being: We also count Assertion Predicates to this block but that will be\n+ *                            changed with the redesign of Assertion Predicates where we remove them from this block\n+ *                            (JDK-8288981).\n@@ -167,1 +180,1 @@\n- * Loop Parse Predicate                                                                          \/\n+ * Loop Parse Predicate                                                                           \/\n@@ -182,1 +195,1 @@\n- * Main Loop entry guard\n+ * Main Loop entry (zero-trip) guard\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":50,"deletions":37,"binary":false,"changes":87,"status":"modified"}]}