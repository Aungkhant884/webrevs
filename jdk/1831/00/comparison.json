{"files":[{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -3,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +32,4 @@\n+\n+import org.netbeans.jemmy.drivers.DriverManager;\n+import org.netbeans.jemmy.drivers.scrolling.KeyboardJSliderScrollDriver;\n+import org.testng.annotations.BeforeClass;\n@@ -71,0 +74,5 @@\n+    @BeforeClass\n+    public void useKeyboardSliderDriver() {\n+        DriverManager.setScrollDriver(new KeyboardJSliderScrollDriver());\n+    }\n+\n@@ -142,1 +150,2 @@\n-        waitSliderValue(jso, jSlider -> jSlider.getValue() == maxValue);\n+        waitSliderValue(jso, jSlider -> jSlider.getValue() == maxValue,\n+                \"value == \" + maxValue);\n@@ -147,1 +156,2 @@\n-        waitSliderValue(jso, jSlider -> jSlider.getValue() == minValue);\n+        waitSliderValue(jso, jSlider -> jSlider.getValue() == minValue,\n+                \"value == \" + minValue);\n@@ -153,1 +163,2 @@\n-                jSlider -> jSlider.getValue() == jso.getMinimum());\n+                jSlider -> jSlider.getValue() == jso.getMinimum(),\n+                \"value == \" + jso.getMinimum());\n@@ -158,1 +169,2 @@\n-                    jSlider -> jSlider.getValue() >= expectedValue);\n+                    jSlider -> jSlider.getValue() >= expectedValue,\n+                    \"value >= \" + expectedValue);\n@@ -163,1 +175,2 @@\n-                    jSlider -> jSlider.getValue() >= expectedValue);\n+                    jSlider -> jSlider.getValue() >= expectedValue,\n+                    \"value >= \" + expectedValue);\n@@ -168,1 +181,2 @@\n-                    jSlider -> jSlider.getValue() >= expectedValue);\n+                    jSlider -> jSlider.getValue() >= expectedValue,\n+                    \"value >= \" + expectedValue);\n@@ -172,1 +186,2 @@\n-                jSlider -> jSlider.getValue() == jso.getMaximum());\n+                jSlider -> jSlider.getValue() == jso.getMaximum(),\n+                \"value == \" + jso.getMaximum());\n@@ -177,1 +192,2 @@\n-                    jSlider -> jSlider.getValue() <= expectedValue);\n+                    jSlider -> jSlider.getValue() <= expectedValue,\n+                    \"value <= \" + expectedValue);\n@@ -182,1 +198,2 @@\n-                    jSlider -> jSlider.getValue() <= expectedValue);\n+                    jSlider -> jSlider.getValue() <= expectedValue,\n+                    \"value <= \" + expectedValue);\n@@ -187,1 +204,2 @@\n-                    jSlider -> jSlider.getValue() <= expectedValue);\n+                    jSlider -> jSlider.getValue() <= expectedValue,\n+                    \"value <= \" + expectedValue);\n@@ -192,1 +210,2 @@\n-            Predicate<JSliderOperator> predicate) {\n+            Predicate<JSliderOperator> predicate,\n+                               String description) {\n@@ -194,1 +213,1 @@\n-        waitSliderValue(jso, predicate);\n+        waitSliderValue(jso, predicate, description);\n@@ -198,1 +217,1 @@\n-            Predicate<JSliderOperator> predicate) {\n+            Predicate<JSliderOperator> predicate, String description) {\n@@ -205,1 +224,1 @@\n-                return \"Wait till Slider attains the specified state.\";\n+                return description;\n@@ -214,1 +233,2 @@\n-        waitSliderValue(jso, jSlider -> jSlider.getValue() == finalValue);\n+        waitSliderValue(jso, jSlider -> jSlider.getValue() == finalValue,\n+                \"value == \" + finalValue);\n@@ -221,1 +241,2 @@\n-                || jSlider.getValue() == expectedHigher);\n+                || jSlider.getValue() == expectedHigher,\n+                \"value is either\" + expectedLower + \" or \" + expectedHigher);\n@@ -233,1 +254,2 @@\n-        waitSliderValue(jso, jSlider -> jSlider.getValue() == jSlider.getMaximum());\n+        waitSliderValue(jso, jSlider -> jSlider.getValue() == jSlider.getMaximum(),\n+                \"value == \" + jso.getMaximum());\n@@ -240,1 +262,2 @@\n-        waitSliderValue(jso, jSlider -> jSlider.getValue() != jSlider.getMaximum());\n+        waitSliderValue(jso, jSlider -> jSlider.getValue() != jSlider.getMaximum(),\n+                \"value != \" + jso.getMaximum());\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/SliderDemoTest.java","additions":43,"deletions":20,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import javax.swing.UIManager;\n-\n@@ -44,1 +42,1 @@\n-import org.netbeans.jemmy.drivers.scrolling.KeyboardJSliderScrollDriver;\n+import org.netbeans.jemmy.drivers.scrolling.JSliderDriver;\n@@ -113,1 +111,1 @@\n-                    new KeyboardJSliderScrollDriver(),\n+                    new JSliderDriver(),\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/DefaultDriverInstaller.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,2 @@\n+import javax.accessibility.AccessibleContext;\n+\n@@ -125,0 +127,14 @@\n+    \/**\n+     * Identifier for a name property.\n+     *\n+     * @see #getDump\n+     *\/\n+    public static final String ACCESSIBLE_NAME_DPROP = \"Accessible name:\";\n+\n+    \/**\n+     * Identifier for a name property.\n+     *\n+     * @see #getDump\n+     *\/\n+    public static final String ACCESSIBLE_DESCRIPTION_DPROP = \"Accessible description:\";\n+\n@@ -1225,1 +1241,1 @@\n-     * @param exactLocation exact expected screen location.\n+     * @param exactlocation exact expected screen location.\n@@ -1273,0 +1289,9 @@\n+        AccessibleContext context = source.getAccessibleContext();\n+        if(context != null) {\n+            if(context.getAccessibleName() != null) {\n+                result.put(ACCESSIBLE_NAME_DPROP, context.getAccessibleName());\n+            }\n+            if(context.getAccessibleDescription() != null) {\n+                result.put(ACCESSIBLE_DESCRIPTION_DPROP, context.getAccessibleDescription());\n+            }\n+        }\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ComponentOperator.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import javax.swing.UIManager;\n@@ -344,3 +345,1 @@\n-        int index = 0;\n-        \/\/ In GTK and Motif L&F, there are two JLists, one is to list folders\n-        \/\/ and second one one is to list files\n+        final String fileListName;\n@@ -348,1 +347,3 @@\n-            index =1;\n+            fileListName = UIManager.getString(\"FileChooser.filesLabelText\", getLocale());\n+        } else {\n+            fileListName = UIManager.getString(\"FileChooser.filesListAccessibleName\", getLocale());\n@@ -354,2 +355,2 @@\n-                        return (comp != null\n-                                && (comp instanceof JList || comp instanceof JTable));\n+                        return ((comp instanceof JList && fileListName.equals(comp.getAccessibleContext().getAccessibleName()))\n+                                || comp instanceof JTable);\n@@ -367,1 +368,1 @@\n-                }, index);\n+                });\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JFileChooserOperator.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -831,4 +831,2 @@\n-        if (((JTextComponent) getSource()).getSelectedText() != null\n-                && !((JTextComponent) getSource()).getSelectedText().equals(\"\")) {\n-            result.put(SELECTED_TEXT_DPROP, ((JTextComponent) getSource()).getSelectedText());\n-        }\n+        String selected = ((JTextComponent) getSource()).getSelectedText();\n+        result.put(SELECTED_TEXT_DPROP, (selected != null) ? selected : \"\");\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTextComponentOperator.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -323,3 +323,2 @@\n-           Thread.currentThread().interrupt();\n-           throw (new JemmyException(\"Waiting of \" + waitable.getDescription()\n-               + \" state has been interrupted!\"));\n+           throw new JemmyException(\"Waiting of \" + waitable.getDescription()\n+               + \" state has been interrupted!\");\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JToolTipOperator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -723,2 +723,1 @@\n-            Thread.currentThread().interrupt();\n-            throw (new JemmyException(\n+            throw new JemmyException(\n@@ -726,1 +725,1 @@\n-                            + \"\\\" state has been interrupted!\"));\n+                            + \"\\\" state has been interrupted!\");\n@@ -738,8 +737,16 @@\n-        waitState((comp) -> {\n-            return (boolean) (queueTool.invokeSmoothly(\n-                    new QueueTool.QueueAction<Object>(\"checkComponent\") {\n-                @Override\n-                public final Object launch() throws Exception {\n-                    return state.checkComponent(comp);\n-                }\n-            }));\n+        waitState(new ComponentChooser() {\n+            @Override\n+            public boolean checkComponent(Component comp) {\n+                return (boolean) (queueTool.invokeSmoothly(\n+                        new QueueTool.QueueAction<Object>(\"checkComponent\") {\n+                            @Override\n+                            public final Object launch() throws Exception {\n+                                return state.checkComponent(comp);\n+                            }\n+                        }));\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return state.getDescription();\n+            }\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/Operator.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,7 @@\n+    \/**\n+     * Identifier for a \"selected text\" property.\n+     *\n+     * @see #getDump\n+     *\/\n+    public static final String SELECTED_TEXT_DPROP = \"Selected text\";\n+\n@@ -508,0 +515,2 @@\n+        String selected = ((TextComponent) getSource()).getSelectedText();\n+        result.put(SELECTED_TEXT_DPROP, (selected != null) ? selected : \"\");\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/TextComponentOperator.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-Jemmy-MinorVersion: 8.0\n+Jemmy-MinorVersion: 11.0\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/version_info","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}