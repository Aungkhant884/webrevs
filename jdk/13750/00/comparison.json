{"files":[{"patch":"@@ -774,1 +774,1 @@\n-ssize_t os::write(int fd, const void *buf, unsigned int nBytes) {\n+ssize_t os::pd_write(int fd, const void *buf, unsigned int nBytes) {\n@@ -776,1 +776,1 @@\n-  RESTARTABLE(::write(fd, buf, (size_t) nBytes), res);\n+  RESTARTABLE(::write(fd, buf, (size_t)nBytes), res);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,9 +107,5 @@\n-    for (size_t remaining = size; remaining > 0;) {\n-\n-      result = os::write(fd, addr, remaining);\n-      if (result == OS_ERR) {\n-        if (PrintMiscellaneous && Verbose) {\n-          warning(\"Could not write Perfdata save file: %s: %s\\n\",\n-                  destfile, os::strerror(errno));\n-        }\n-        break;\n+    result = os::write(fd, addr, size);\n+    if (result == OS_ERR) {\n+      if (PrintMiscellaneous && Verbose) {\n+        warning(\"Could not write Perfdata save file: %s: %s\\n\",\n+                destfile, os::strerror(errno));\n@@ -117,3 +113,0 @@\n-\n-      remaining -= (size_t)result;\n-      addr += result;\n@@ -122,0 +115,1 @@\n+\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4774,2 +4774,2 @@\n-ssize_t os::write(int fd, const void *buf, unsigned int nBytes) {\n-  return ::write(fd, buf, nBytes);\n+ssize_t os::pd_write(int fd, const void *buf, unsigned int nBytes) {\n+  return ::write(fd, buf, (size_t)nBytes);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -364,1 +364,0 @@\n-  assert(ent != NULL, \"sanity\");\n@@ -1689,1 +1688,1 @@\n-  if (n < 0 || (size_t)n != nbytes) {\n+  if (n < 0) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -375,1 +375,1 @@\n-      const int64_t size = file_size(current_fd);\n+      const size_t size = (size_t)file_size(current_fd);\n@@ -377,2 +377,2 @@\n-      int64_t bytes_read = 0;\n-      int64_t bytes_written = 0;\n+      unsigned int bytes_read = 0;\n+      unsigned int bytes_written = 0;\n@@ -383,1 +383,1 @@\n-              \"Unable to recover JFR data\");\n+              \"Unable to recover JFR data, read failed.\");\n@@ -386,3 +386,9 @@\n-        bytes_read += (int64_t)read_result;\n-        assert(bytes_read - bytes_written <= (int64_t)block_size, \"invariant\");\n-        bytes_written += (int64_t)os::write(emergency_fd, copy_block, bytes_read - bytes_written);\n+        bytes_read += read_result;\n+        assert(bytes_read - bytes_written <= block_size, \"invariant\");\n+        const ssize_t write_result = os::write(emergency_fd, copy_block, bytes_read - bytes_written);\n+        if (-1 == write_result) {\n+          log_info(jfr)( \/\/ For user, should not be \"jfr, system\"\n+              \"Unable to recover JFR data, write failed.\");\n+          break;\n+        }\n+        bytes_written += write_result;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,10 +77,4 @@\n-  while (len > 0) {\n-    const unsigned int nBytes = len > INT_MAX ? INT_MAX : (unsigned int)len;\n-    const ssize_t num_written = os::write(_fd, buf, nBytes);\n-    if (errno == ENOSPC) {\n-      JfrJavaSupport::abort(\"Failed to write to jfr stream because no space left on device\", false);\n-    }\n-    guarantee(num_written > 0, \"Nothing got written, or os::write() failed\");\n-    _stream_pos += num_written;\n-    len -= num_written;\n-    buf += num_written;\n+  const unsigned int nBytes = len > INT_MAX ? INT_MAX : (unsigned int)len;\n+  const ssize_t num_written = os::write(_fd, buf, nBytes);\n+  if (errno == ENOSPC) {\n+    JfrJavaSupport::abort(\"Failed to write to jfr stream because no space left on device\", false);\n@@ -88,0 +82,2 @@\n+  guarantee(num_written > 0, \"Nothing got written, or os::write() failed\");\n+  _stream_pos += num_written;\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrStreamWriterHost.inline.hpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1381,0 +1381,16 @@\n+ssize_t os::write(int fd, const void *buf, unsigned int nBytes) {\n+  ssize_t res;\n+  size_t len = nBytes;\n+  while (len > 0) {\n+    res = pd_write(fd, buf, (unsigned int)len);\n+    if (res < 0) {\n+      return res;\n+    }\n+    buf = (void *)((char *)buf + len);\n+    len -= res;\n+  }\n+\n+  return res;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -232,0 +232,1 @@\n+  static ssize_t pd_write(int fd, const void *buf, unsigned int nBytes);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,8 +58,3 @@\n-  while (size > 0) {\n-    ssize_t n = os::write(_fd, buf, (uint) size);\n-    if (n <= 0) {\n-      return os::strerror(errno);\n-    }\n-\n-    buf += n;\n-    size -= n;\n+  ssize_t n = os::write(_fd, buf, (uint)size);\n+  if (n <= 0) {\n+    return os::strerror(errno);\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}