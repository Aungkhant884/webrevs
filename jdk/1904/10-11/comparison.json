{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import jdk.jfr.FlightRecorder;\n@@ -206,1 +207,1 @@\n-            List<Type> types = getAllTypes(file);\n+            List<Type> types = findTypes(file);\n@@ -209,5 +210,7 @@\n-                \/\/ if it's an event type, apply filter on it\n-                if (Type.SUPER_TYPE_EVENT.equals(type.getSuperType())) {\n-                    EventType et = PrivateAccess.getInstance().newEventType((PlatformEventType) type);\n-                    if (filter != null && !filter.test(et)) {\n-                        continue;\n+                if (filter != null) {\n+                    \/\/ If --events or --categories, only operate on events\n+                    if (Type.SUPER_TYPE_EVENT.equals(type.getSuperType())) {\n+                        EventType et = PrivateAccess.getInstance().newEventType((PlatformEventType) type);\n+                        if (filter.test(et)) {\n+                            prettyWriter.printType(type);\n+                        }\n@@ -215,0 +218,2 @@\n+                } else {\n+                    prettyWriter.printType(type);\n@@ -216,2 +221,0 @@\n-\n-                prettyWriter.printType(type);\n@@ -224,1 +227,1 @@\n-    private List<Type> getAllTypes(Path file) throws UserDataException {\n+    private List<Type> findTypes(Path file) throws UserDataException {\n@@ -228,0 +231,2 @@\n+            \/\/ Force initialization\n+            FlightRecorder.getFlightRecorder().getEventTypes();\n@@ -230,1 +235,0 @@\n-        List<Type> types = null;\n@@ -232,1 +236,1 @@\n-            types = PRIVATE_ACCESS.readTypes(rf);\n+            return PRIVATE_ACCESS.readTypes(rf);\n@@ -236,1 +240,1 @@\n-        return types;\n+        return null; \/\/ Can't reach\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"}]}