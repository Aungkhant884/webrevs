{"files":[{"patch":"@@ -239,1 +239,1 @@\n-    private void ensureAccess(Path path) throws UserDataException {\n+    final protected void ensureAccess(Path path) throws UserDataException {\n@@ -306,0 +306,6 @@\n+\n+    public static void checkCommonError(Deque<String> options, String typo, String correct) throws UserSyntaxException {\n+        if (typo.equals(options.peek())) {\n+            throw new UserSyntaxException(\"unknown option \" + typo + \", did you mean \" + correct + \"?\");\n+        }\n+     }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+            System.out.println(\" jfr metadata --categories GC,Detailed\");\n+            System.out.println();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Main.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n@@ -34,0 +37,1 @@\n+import java.util.HashSet;\n@@ -36,0 +40,4 @@\n+import jdk.jfr.AnnotationElement;\n+import jdk.jfr.Category;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.PlatformEventType;\n@@ -38,0 +46,1 @@\n+import jdk.jfr.internal.TypeLibrary;\n@@ -42,2 +51,0 @@\n-    private final static JdkJfrConsumer PRIVATE_ACCESS = JdkJfrConsumer.instance();\n-\n@@ -102,1 +109,5 @@\n-        return Collections.singletonList(\"<file>\");\n+        List<String> list = new ArrayList<>();\n+        list.add(\"[--categories <filter>]\");\n+        list.add(\"[--events <filter>]\");\n+        list.add(\"[<file>]\");\n+        return list;\n@@ -112,1 +123,1 @@\n-        Path file = getJFRInputFile(options);\n+        Path file = getOptionalJFRInputFile(options);\n@@ -115,0 +126,4 @@\n+        boolean foundEventFilter = false;\n+        boolean foundCategoryFilter = false;\n+        HashSet<String> acceptedEvents = null;\n+        HashSet<String> acceptedCategories = null;\n@@ -120,0 +135,18 @@\n+            if (acceptFilterOption(options, \"--events\")) {\n+                if (foundEventFilter) {\n+                    throw new UserSyntaxException(\"use --events event1,event2,event3 to include multiple events\");\n+                }\n+                foundEventFilter = true;\n+                String filter = options.remove();\n+                warnForWildcardExpansion(\"--events\", filter);\n+                acceptedEvents = new HashSet<>(Arrays.asList(filter.split(\",\")));\n+            }\n+            if (acceptFilterOption(options, \"--categories\")) {\n+                if (foundCategoryFilter) {\n+                    throw new UserSyntaxException(\"use --categories category1,category2 to include multiple categories\");\n+                }\n+                foundCategoryFilter = true;\n+                String filter = options.remove();\n+                warnForWildcardExpansion(\"--categories\", filter);\n+                acceptedCategories  = new HashSet<>(Arrays.asList(filter.split(\",\")));\n+            }\n@@ -122,0 +155,2 @@\n+                checkCommonError(options, \"--event\", \"--events\");\n+                checkCommonError(options, \"--category\", \"--categories\");\n@@ -130,5 +165,7 @@\n-            try (RecordingFile rf = new RecordingFile(file)) {\n-                List<Type> types = PRIVATE_ACCESS.readTypes(rf);\n-                Collections.sort(types, new TypeComparator());\n-                for (Type type : types) {\n-                    prettyWriter.printType(type);\n+\n+            List<Type> types = null;\n+            if (file != null) {\n+                \/\/ has recording.jfr, read metadata from file\n+                try (RecordingFile rf = new RecordingFile(file)) {\n+                    types = JdkJfrConsumer.instance().readTypes(rf);\n+                    Collections.sort(types, new TypeComparator());\n@@ -136,0 +173,25 @@\n+            } else {\n+                \/\/ don't have recoring.jfr, read metadata from metadata.bin\n+                types = TypeLibrary.getInstance().getTypes();\n+            }\n+\n+            for (Type type : types) {\n+                if (!(type instanceof PlatformEventType)) {\n+                    continue;\n+                }\n+                if (foundEventFilter) {\n+                    if (acceptedEvents.contains(type.getName())) {\n+                        prettyWriter.printType(type);\n+                        prettyWriter.flush(true);\n+                    }\n+                    continue;\n+                }\n+                if (foundCategoryFilter) {\n+                    if (acceptCategory(acceptedCategories, type)) {\n+                        prettyWriter.printType(type);\n+                        prettyWriter.flush(true);\n+                    }\n+                    continue;\n+                }\n+                \/\/ no filter, just printing\n+                prettyWriter.printType(type);\n@@ -137,2 +199,34 @@\n-            } catch (IOException ioe) {\n-                couldNotReadError(file, ioe);\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static boolean acceptCategory(HashSet<String> categoryNames, Type type) {\n+        Category categoryAnno = type.getAnnotation(Category.class);\n+        int matchCount = 0;\n+        if (categoryAnno != null) {\n+            String[] categories = categoryAnno.value();\n+            for (String category : categories) {\n+                if (categoryNames.contains(category)) {\n+                    matchCount++;\n+                }\n+            }\n+        }\n+\n+        return matchCount == categoryNames.size();\n+    }\n+\n+    private Path getOptionalJFRInputFile(Deque<String> options) {\n+        if (!options.isEmpty()) {\n+            String file = options.getLast();\n+            if (!file.startsWith(\"--\")) {\n+                try {\n+                    Path tmp = Paths.get(file).toAbsolutePath();\n+                    ensureAccess(tmp);\n+                    ensureJFRFile(tmp);\n+                    options.removeLast();\n+                    return tmp;\n+                } catch (Exception e) {\n+                    \/\/ ignored since recording file for jfr metadata is optional\n+                }\n@@ -141,0 +235,1 @@\n+        return null;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":106,"deletions":11,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -174,6 +174,0 @@\n-    private void checkCommonError(Deque<String> options, String typo, String correct) throws UserSyntaxException {\n-       if (typo.equals(options.peek())) {\n-           throw new UserSyntaxException(\"unknown option \" + typo + \", did you mean \" + correct + \"?\");\n-       }\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Print.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -30,0 +31,1 @@\n+import java.util.List;\n@@ -34,0 +36,4 @@\n+import jdk.jfr.internal.PlatformEventType;\n+import jdk.jfr.internal.Type;\n+import jdk.jfr.internal.TypeLibrary;\n+import jdk.test.lib.Asserts;\n@@ -39,0 +45,1 @@\n+ * @modules jdk.jfr\/jdk.jfr.internal\n@@ -51,1 +58,2 @@\n-        output.shouldContain(\"missing file\");\n+        output.shouldContain(\"@Name\");\n+        output.shouldContain(\"jdk.jfr.Event\");\n@@ -77,0 +85,18 @@\n+\n+        output = ExecuteHelper.jfr(\"metadata\");\n+        List<String> eventNames = new ArrayList<>();\n+        List<String> lines = output.asLines();\n+        for (String line : lines) {\n+            if (line.startsWith(\"@Name(\\\"\")) {\n+                eventNames.add(line.substring(7, line.indexOf(\"\\\"\", 7)));\n+            }\n+        }\n+        List<Type> eventTypes = TypeLibrary.getInstance().getTypes();\n+        List<String> expectedNames = new ArrayList<>();\n+        for (Type eventType : eventTypes) {\n+            if (eventType instanceof PlatformEventType) {\n+                expectedNames.add(eventType.getName());\n+            }\n+        }\n+        \/\/ expectedNames may have instrumented event\n+        Asserts.assertLT(eventNames.size(), expectedNames.size());\n@@ -78,1 +104,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestMetadata.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}