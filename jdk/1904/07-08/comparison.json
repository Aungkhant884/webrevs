{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Arrays;\n@@ -48,1 +49,2 @@\n-import jdk.jfr.EventType;\n+import jdk.jfr.Category;\n+import jdk.jfr.internal.Type;\n@@ -377,1 +379,1 @@\n-    final protected static Predicate<EventType> addCategoryFilter(String filterText, Predicate<EventType> eventFilter) throws UserSyntaxException {\n+    final protected static Predicate<Type> addCategoryFilter(String filterText, Predicate<Type> eventFilter) throws UserSyntaxException {\n@@ -379,2 +381,9 @@\n-        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {\n-            for (String category : eventType.getCategoryNames()) {\n+        Predicate<Type> newFilter = recurseIfPossible(type -> {\n+            List<String> categories = null;\n+            Category c = type.getAnnotation(Category.class);\n+            if (c != null) {\n+                categories = Collections.unmodifiableList(Arrays.asList(c.value()));\n+            } else {\n+                categories = new ArrayList<>();\n+            }\n+            for (String category : categories) {\n@@ -395,1 +404,1 @@\n-    final protected static Predicate<EventType> addEventFilter(String filterText, final Predicate<EventType> eventFilter) throws UserSyntaxException {\n+    final protected static Predicate<Type> addEventFilter(String filterText, final Predicate<Type> eventFilter) throws UserSyntaxException {\n@@ -397,1 +406,1 @@\n-        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {\n+        Predicate<Type> newFilter = recurseIfPossible(type -> {\n@@ -399,1 +408,1 @@\n-                String fullEventName = eventType.getName();\n+                String fullEventName = type.getName();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.jfr.EventType;\n@@ -46,0 +45,2 @@\n+import jdk.jfr.internal.PrivateAccess;\n+import jdk.jfr.internal.Type;\n@@ -58,1 +59,1 @@\n-    private Predicate<EventType> eventFilter = x -> true;\n+    private Predicate<Type> eventFilter = x -> true;\n@@ -96,1 +97,1 @@\n-    public final void setEventFilter(Predicate<EventType> eventFilter) {\n+    public final void setEventFilter(Predicate<Type> eventFilter) {\n@@ -101,1 +102,1 @@\n-        return eventFilter.test(event.getEventType());\n+        return eventFilter.test(PrivateAccess.getInstance().getType(event.getEventType()));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/EventPrintWriter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Arrays;\n@@ -39,1 +38,0 @@\n-import java.util.HashSet;\n@@ -43,3 +41,0 @@\n-import jdk.jfr.EventType;\n-import jdk.jfr.FlightRecorder;\n-import jdk.jfr.Name;\n@@ -47,1 +42,0 @@\n-import jdk.jfr.internal.PrivateAccess;\n@@ -49,0 +43,1 @@\n+import jdk.jfr.internal.TypeLibrary;\n@@ -53,1 +48,3 @@\n-    private static class TypeComparator implements Comparator<EventType> {\n+    private final static JdkJfrConsumer PRIVATE_ACCESS = JdkJfrConsumer.instance();\n+\n+    private static class TypeComparator implements Comparator<Type> {\n@@ -56,3 +53,1 @@\n-        public int compare(EventType et1, EventType et2) {\n-            Type t1 = PrivateAccess.getInstance().getType(et1);\n-            Type t2 = PrivateAccess.getInstance().getType(et2);\n+        public int compare(Type t1, Type t2) {\n@@ -167,1 +162,1 @@\n-        Predicate<EventType> filter = null;\n+        Predicate<Type> filter = null;\n@@ -205,1 +200,1 @@\n-                filter = addCache(filter, eventType -> eventType.getId());\n+                filter = addCache(filter, type -> type.getId());\n@@ -208,1 +203,1 @@\n-            List<EventType> types = getAllTypes(file);\n+            List<Type> types = getAllTypes(file);\n@@ -210,1 +205,1 @@\n-            for (EventType type : types) {\n+            for (Type type : types) {\n@@ -215,1 +210,1 @@\n-                prettyWriter.printType(PrivateAccess.getInstance().getType(type));\n+                prettyWriter.printType(type);\n@@ -222,2 +217,2 @@\n-    private List<EventType> getAllTypes(Path file) throws UserDataException {\n-        \/\/ determine whether reading from recording file or reading from the JDK where\n+    private List<Type> getAllTypes(Path file) throws UserDataException {\n+        \/\/ Determine whether reading from recording file or reading from the JDK where\n@@ -226,3 +221,1 @@\n-            \/\/ FlightRecorder.getEventTypes returns unmodifiable list thus disallowing\n-            \/\/ sorting so copy its elements to a new list and sort it\n-            return new ArrayList<>(FlightRecorder.getFlightRecorder().getEventTypes());\n+            return TypeLibrary.getInstance().getTypes();\n@@ -230,1 +223,1 @@\n-        List<EventType> types = null;\n+        List<Type> types = null;\n@@ -232,1 +225,1 @@\n-            types = rf.readEventTypes();\n+            types = PRIVATE_ACCESS.readTypes(rf);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.jfr.EventType;\n+import jdk.jfr.internal.Type;\n@@ -105,1 +105,1 @@\n-        Predicate<EventType> eventFilter = null;\n+        Predicate<Type> eventFilter = null;\n@@ -160,1 +160,1 @@\n-            eventFilter = addCache(eventFilter, eventType -> eventType.getId());\n+            eventFilter = addCache(eventFilter, type -> type.getId());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Print.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,3 @@\n-        Asserts.assertEQ(eventNames.size(), expectedNames.size());\n+        \/\/ expectedNames not only includes event types but also contains other types\n+        \/\/ while FlightRecorder.getEventTypes only returns event types\n+        Asserts.assertGTE(eventNames.size(), expectedNames.size());\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestMetadata.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}