{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.util.Arrays;\n@@ -49,2 +48,1 @@\n-import jdk.jfr.Category;\n-import jdk.jfr.internal.Type;\n+import jdk.jfr.EventType;\n@@ -379,1 +377,1 @@\n-    final protected static Predicate<Type> addCategoryFilter(String filterText, Predicate<Type> eventFilter) throws UserSyntaxException {\n+    final protected static Predicate<EventType> addCategoryFilter(String filterText, Predicate<EventType> eventFilter) throws UserSyntaxException {\n@@ -381,9 +379,2 @@\n-        Predicate<Type> newFilter = recurseIfPossible(type -> {\n-            List<String> categories = null;\n-            Category c = type.getAnnotation(Category.class);\n-            if (c != null) {\n-                categories = Collections.unmodifiableList(Arrays.asList(c.value()));\n-            } else {\n-                categories = new ArrayList<>();\n-            }\n-            for (String category : categories) {\n+        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {\n+            for (String category : eventType.getCategoryNames()) {\n@@ -404,1 +395,1 @@\n-    final protected static Predicate<Type> addEventFilter(String filterText, final Predicate<Type> eventFilter) throws UserSyntaxException {\n+    final protected static Predicate<EventType> addEventFilter(String filterText, final Predicate<EventType> eventFilter) throws UserSyntaxException {\n@@ -406,1 +397,1 @@\n-        Predicate<Type> newFilter = recurseIfPossible(type -> {\n+        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {\n@@ -408,1 +399,1 @@\n-                String fullEventName = type.getName();\n+                String fullEventName = eventType.getName();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.jfr.EventType;\n@@ -45,2 +46,0 @@\n-import jdk.jfr.internal.PrivateAccess;\n-import jdk.jfr.internal.Type;\n@@ -59,1 +58,1 @@\n-    private Predicate<Type> eventFilter = x -> true;\n+    private Predicate<EventType> eventFilter = x -> true;\n@@ -97,1 +96,1 @@\n-    public final void setEventFilter(Predicate<Type> eventFilter) {\n+    public final void setEventFilter(Predicate<EventType> eventFilter) {\n@@ -102,1 +101,1 @@\n-        return eventFilter.test(PrivateAccess.getInstance().getType(event.getEventType()));\n+        return eventFilter.test(event.getEventType());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/EventPrintWriter.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.EventType;\n@@ -42,0 +43,2 @@\n+import jdk.jfr.internal.PlatformEventType;\n+import jdk.jfr.internal.PrivateAccess;\n@@ -100,1 +103,0 @@\n-\n@@ -163,1 +165,1 @@\n-        Predicate<Type> filter = null;\n+        Predicate<EventType> filter = null;\n@@ -207,2 +209,6 @@\n-                if (filter != null && !filter.test(type)) {\n-                    continue;\n+                \/\/ if it's an event type, apply filter on it\n+                if (Type.SUPER_TYPE_EVENT.equals(type.getSuperType())) {\n+                    EventType et = PrivateAccess.getInstance().newEventType((PlatformEventType) type);\n+                    if (filter != null && !filter.test(et)) {\n+                        continue;\n+                    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.jfr.internal.Type;\n+import jdk.jfr.EventType;\n@@ -105,1 +105,1 @@\n-        Predicate<Type> eventFilter = null;\n+        Predicate<EventType> eventFilter = null;\n@@ -160,1 +160,1 @@\n-            eventFilter = addCache(eventFilter, type -> type.getId());\n+            eventFilter = addCache(eventFilter, eventType -> eventType.getId());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Print.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,2 +106,0 @@\n-        \/\/ expectedNames not only includes event types but also contains other types\n-        \/\/ while FlightRecorder.getEventTypes only returns event types\n@@ -121,1 +119,1 @@\n-        Asserts.assertEQ(eventNames.size(), 2);\n+        Asserts.assertGTE(eventNames.size(), 2);\n@@ -133,0 +131,1 @@\n+        boolean foundThreadEvent = false;\n@@ -134,1 +133,1 @@\n-            Asserts.assertTrue(eventName.contains(\"Thread\"));\n+            foundThreadEvent= eventName.contains(\"Thread\");\n@@ -136,0 +135,1 @@\n+        Asserts.assertTrue(foundThreadEvent);\n@@ -145,0 +145,1 @@\n+        boolean foundJEvent = false;\n@@ -146,1 +147,1 @@\n-            Asserts.assertTrue(eventName.startsWith(\"J\"));\n+            foundJEvent = eventName.startsWith(\"J\");\n@@ -148,0 +149,1 @@\n+        Asserts.assertTrue(foundJEvent);\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestMetadata.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}