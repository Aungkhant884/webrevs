{"files":[{"patch":"@@ -208,17 +208,2 @@\n-            \/\/ determine whether reading from recording file or reading from the JDK where\n-            \/\/ the jfr tool is located will be used\n-            List<EventType> types = null;\n-            if (file != null) {\n-                try (RecordingFile rf = new RecordingFile(file)) {\n-                    types = rf.readEventTypes();\n-                } catch (IOException ioe) {\n-                     couldNotReadError(file, ioe);\n-                }\n-            } else {\n-                \/\/ FlightRecorder.getEventTypes returns unmodifiable list thus disallowing sorting\n-                \/\/ so copy its elements to a new list and sort it\n-                types = new ArrayList<>(FlightRecorder.getFlightRecorder().getEventTypes());\n-            }\n-            if (types != null) {\n-                Collections.sort(types, new TypeComparator());\n-            }\n+            List<EventType> types = getAllTypes(file);\n+            Collections.sort(types, new TypeComparator());\n@@ -237,0 +222,17 @@\n+    private List<EventType> getAllTypes(Path file) throws UserDataException {\n+        \/\/ determine whether reading from recording file or reading from the JDK where\n+        \/\/ the jfr tool is located will be used\n+        if (file == null) {\n+            \/\/ FlightRecorder.getEventTypes returns unmodifiable list thus disallowing\n+            \/\/ sorting so copy its elements to a new list and sort it\n+            return new ArrayList<>(FlightRecorder.getFlightRecorder().getEventTypes());\n+        }\n+        List<EventType> types = null;\n+        try (RecordingFile rf = new RecordingFile(file)) {\n+            types = rf.readEventTypes();\n+        } catch (IOException ioe) {\n+            couldNotReadError(file, ioe);\n+        }\n+        return types;\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"}]}