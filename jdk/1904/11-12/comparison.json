{"files":[{"patch":"@@ -34,0 +34,2 @@\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n@@ -36,0 +38,2 @@\n+import jdk.jfr.Name;\n+import jdk.jfr.Registered;\n@@ -51,4 +55,10 @@\n-        testBasic();\n-        testEventTypeNum();\n-        testDeterministic();\n-        testWildcardAndAcronym();\n+        testUnfiltered();\n+        testIllegalOption();\n+        testNumberOfEventTypes();\n+\n+        FlightRecorder.register(MyEvent1.class);\n+        FlightRecorder.register(MyEvent2.class);\n+        FlightRecorder.register(MyEvent3.class);\n+        String file = ExecuteHelper.createProfilingRecording().toAbsolutePath().toAbsolutePath().toString();\n+        testEventFilter(file);\n+        testWildcardAndAcronym(file);\n@@ -57,1 +67,1 @@\n-    static void testBasic() throws Throwable {\n+    static void testUnfiltered() throws Throwable {\n@@ -60,1 +70,0 @@\n-\n@@ -62,5 +71,1 @@\n-        output.shouldContain(\"@Name\");\n-        output.shouldContain(\"jdk.jfr.Event\");\n-\n-        output = ExecuteHelper.jfr(\"metadata\", \"--wrongOption\", file);\n-        output.shouldContain(\"unknown option --wrongOption\");\n+        output.shouldContain(\"extends jdk.jfr.Event\");\n@@ -91,4 +96,9 @@\n-    static void testEventTypeNum() throws Throwable {\n-        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\");\n-        List<String> eventNames = new ArrayList<>();\n-        List<String> lines = output.asLines();\n+    static void testIllegalOption() throws Throwable {\n+        Path f = ExecuteHelper.createProfilingRecording().toAbsolutePath();\n+        String file = f.toAbsolutePath().toString();\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\", \"--wrongOption\", file);\n+        output.shouldContain(\"unknown option --wrongOption\");\n+\n+        output = ExecuteHelper.jfr(\"metadata\", \"--wrongOption2\");\n+        output.shouldContain(\"unknown option --wrongOption2\");\n+    }\n@@ -96,3 +106,6 @@\n-        for (String line : lines) {\n-            if (line.startsWith(\"@Name(\\\"\")) {\n-                eventNames.add(line.substring(7, line.indexOf(\"\\\"\", 7)));\n+    static void testNumberOfEventTypes() throws Throwable {\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\");\n+        int count  = 0;\n+        for (String line : output.asLines()) {\n+            if (line.contains(\"extends jdk.jfr.Event\")) {\n+                count++;\n@@ -101,6 +114,1 @@\n-        List<EventType> eventTypes = FlightRecorder.getFlightRecorder().getEventTypes();\n-        List<String> expectedNames = new ArrayList<>();\n-        for (EventType eventType : eventTypes) {\n-            expectedNames.add(eventType.getName());\n-        }\n-        Asserts.assertGTE(eventNames.size(), expectedNames.size());\n+        Asserts.assertEquals(count, FlightRecorder.getFlightRecorder().getEventTypes().size());\n@@ -109,4 +117,10 @@\n-    static void testDeterministic() throws Throwable {\n-        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\", \"--events\", \"CPULoad,GarbageCollection\");\n-        List<String> eventNames = new ArrayList<>();\n-        List<String> lines = output.asLines();\n+    static void testEventFilter(String file) throws Throwable {\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\", \"--events\", \"MyEvent1,MyEvent2\", file);\n+        int count = 0;\n+        for (String line : output.asLines()) {\n+            if (line.contains(\"extends jdk.jfr.Event\")) {\n+                Asserts.assertTrue(line.contains(\"MyEvent1\") || line.contains(\"MyEvent2\"));\n+                count++;\n+            }\n+        }\n+        Asserts.assertEQ(count, 2);\n@@ -114,3 +128,6 @@\n-        for (String line : lines) {\n-            if (line.startsWith(\"@Name(\\\"\")) {\n-                eventNames.add(line.substring(7, line.indexOf(\"\\\"\", 7)));\n+        output = ExecuteHelper.jfr(\"metadata\", \"--categories\", \"Customized\", file);\n+        count = 0;\n+        for (String line : output.asLines()) {\n+            if (line.contains(\"extends jdk.jfr.Event\")) {\n+                Asserts.assertTrue(line.contains(\"MyEvent1\") || line.contains(\"MyEvent2\") || line.contains(\"MyEvent3\"));\n+                count++;\n@@ -119,1 +136,1 @@\n-        Asserts.assertGTE(eventNames.size(), 2);\n+        Asserts.assertEQ(count, 3);\n@@ -122,7 +139,7 @@\n-    static void testWildcardAndAcronym() throws Throwable {\n-        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\", \"--events\", \"Thread*\");\n-        List<String> eventNames = new ArrayList<>();\n-        List<String> lines = output.asLines();\n-        for (String line : lines) {\n-            if (line.startsWith(\"@Name(\\\"\")) {\n-                eventNames.add(line.substring(7, line.indexOf(\"\\\"\", 7)));\n+    static void testWildcardAndAcronym(String file) throws Throwable {\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"metadata\", \"--events\", \"MyEv*\", file);\n+        int count = 0;\n+        for (String line : output.asLines()) {\n+            if (line.contains(\"extends jdk.jfr.Event\")) {\n+                count++;\n+                Asserts.assertTrue(line.contains(\"MyEvent\"));\n@@ -131,12 +148,11 @@\n-        boolean foundThreadEvent = false;\n-        for (String eventName : eventNames) {\n-            foundThreadEvent= eventName.contains(\"Thread\");\n-        }\n-        Asserts.assertTrue(foundThreadEvent);\n-\n-        output = ExecuteHelper.jfr(\"metadata\", \"--categories\", \"J*\");\n-        lines = output.asLines();\n-        eventNames.clear();\n-        for (String line : lines) {\n-            if (line.startsWith(\"@Category(\\\"\")) {\n-                eventNames.add(line.substring(11, line.indexOf(\"\\\"\", 11)));\n+        Asserts.assertEQ(count, 3);\n+\n+        output = ExecuteHelper.jfr(\"metadata\", \"--categories\", \"Custo*\", file);\n+        count = 0;\n+        for (String line : output.asLines()) {\n+            if (line.startsWith(\"@Category\")) {\n+                Asserts.assertTrue(line.contains(\"Customized\"));\n+            }\n+            if (line.contains(\"extends jdk.jfr.Event\")) {\n+                count++;\n+                Asserts.assertTrue(line.contains(\"MyEvent\"));\n@@ -145,5 +161,17 @@\n-        boolean foundJEvent = false;\n-        for (String eventName : eventNames) {\n-            foundJEvent = eventName.startsWith(\"J\");\n-        }\n-        Asserts.assertTrue(foundJEvent);\n+        Asserts.assertEQ(count, 3);\n+    }\n+\n+    @Registered(false)\n+    @Category(\"Customized\")\n+    @Name(\"MyEvent1\")\n+    private static class MyEvent1 extends Event {\n+    }\n+    @Registered(false)\n+    @Category(\"Customized\")\n+    @Name(\"MyEvent2\")\n+    private static class MyEvent2 extends Event {\n+    }\n+    @Registered(false)\n+    @Category(\"Customized\")\n+    @Name(\"MyEvent3\")\n+    private static class MyEvent3 extends Event {\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestMetadata.java","additions":84,"deletions":56,"binary":false,"changes":140,"status":"modified"}]}