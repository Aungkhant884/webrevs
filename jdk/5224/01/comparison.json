{"files":[{"patch":"@@ -880,1 +880,3 @@\n-            return kind == UNBOUND;\n+            \/\/ is it `?` or `? extends Object`?\n+            return kind == UNBOUND ||\n+                    (kind == EXTENDS && type.tsym.flatName() == type.tsym.name.table.names.java_lang_Object);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-T8176534.java:12:43: compiler.warn.prob.found.req: (compiler.misc.unchecked.assign), java.util.Iterator, java.util.Iterator<? extends E>\n@@ -8,1 +7,1 @@\n-5 warnings\n+4 warnings\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/8176534\/T8176534.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268148\n+ * @summary unchecked warnings handle ? and ? extends Object differently\n+ * @compile -Xlint:all -Werror UnboundAndBoundByObjectTest.java\n+ *\/\n+\n+import java.util.List;\n+\n+class UnboundAndBoundByObjectTest {\n+    void f(List<? extends Object> x) {}\n+    void g(List<?> x) {}\n+\n+    void h(List<String> x) {\n+        f((List) x);\n+        g((List) x);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/UnboundAndBoundByObjectTest.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"}]}