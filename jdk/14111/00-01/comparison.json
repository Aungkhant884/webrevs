{"files":[{"patch":"@@ -1145,11 +1145,9 @@\n-        if (TieredCompilation) {\n-          \/\/ If there is an old version we're done with it\n-          CompiledMethod* old = method->code();\n-          if (TraceMethodReplacement && old != nullptr) {\n-            ResourceMark rm;\n-            char *method_name = method->name_and_sig_as_C_string();\n-            tty->print_cr(\"Replacing method %s\", method_name);\n-          }\n-          if (old != nullptr) {\n-            old->make_not_used();\n-          }\n+        \/\/ If there is an old version we're done with it\n+        CompiledMethod* old = method->code();\n+        if (TraceMethodReplacement && old != nullptr) {\n+          ResourceMark rm;\n+          char *method_name = method->name_and_sig_as_C_string();\n+          tty->print_cr(\"Replacing method %s\", method_name);\n+        }\n+        if (old != nullptr) {\n+          old->make_not_used();\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1360,2 +1360,1 @@\n-\/\/ Mark methods for deopt (if safe or possible).\n-void CodeCache::mark_all_nmethods_for_deoptimization(DeoptimizationScope* deopt_scope) {\n+void CodeCache::mark_directives_matches() {\n@@ -1363,0 +1362,3 @@\n+  Thread *thread = Thread::current();\n+  HandleMark hm(thread);\n+\n@@ -1366,2 +1368,5 @@\n-    if (!nm->is_native_method()) {\n-      deopt_scope->mark(nm);\n+    methodHandle mh(thread, nm->method());\n+    if (DirectivesStack::hasMatchingDirectives(mh)) {\n+      ResourceMark rm;\n+      log_trace(codecache)(\"Mark because of matching directives %s\", mh->external_name());\n+      mh->set_has_matching_directives();\n@@ -1372,2 +1377,1 @@\n-void CodeCache::mark_for_deoptimization_directives_matches(DeoptimizationScope *deopt_scope) {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+void CodeCache::recompile_marked_directives_matches() {\n@@ -1375,0 +1379,1 @@\n+  HandleMark hm(thread);\n@@ -1376,1 +1381,1 @@\n-  CompiledMethodIterator iter(CompiledMethodIterator::only_not_unloading);\n+  RelaxedCompiledMethodIterator iter(RelaxedCompiledMethodIterator::only_not_unloading);\n@@ -1379,1 +1384,0 @@\n-    HandleMark hm(thread);\n@@ -1381,1 +1385,1 @@\n-    if (DirectivesStack::hasMatchingDirectives(mh)) {\n+    if (mh->has_matching_directives()) {\n@@ -1383,1 +1387,16 @@\n-      log_trace(codecache)(\"Mark for deopt because of matching directives %s\", mh->external_name());\n+      log_trace(codecache)(\"Recompile because of matching directives %s\", mh->external_name());\n+      mh->clear_method_flags();\n+      CompileBroker::compile_method(mh, InvocationEntryBci, CompLevel::CompLevel_full_optimization,\n+                                      methodHandle(), 0, CompileTask::Reason_DirectivesChanged, (JavaThread *)thread);\n+      gc_on_allocation(); \/\/ Flush unused methods from CodeCache if required\n+    }\n+  }\n+}\n+\n+\/\/ Mark methods for deopt (if safe or possible).\n+void CodeCache::mark_all_nmethods_for_deoptimization(DeoptimizationScope* deopt_scope) {\n+  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+  CompiledMethodIterator iter(CompiledMethodIterator::only_not_unloading);\n+  while(iter.next()) {\n+    CompiledMethod* nm = iter.method();\n+    if (!nm->is_native_method()) {\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -311,1 +311,3 @@\n-  static void mark_for_deoptimization_directives_matches(DeoptimizationScope *deopt_scope);\n+\n+  static void mark_directives_matches();\n+  static void recompile_marked_directives_matches();\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1160,5 +1160,7 @@\n-  \/\/ A request has been made for compilation.  Before we do any\n-  \/\/ real work, check to see if the method has been compiled\n-  \/\/ in the meantime with a definitive result.\n-  if (compilation_is_complete(method, osr_bci, comp_level)) {\n-    return;\n+  if (compile_reason != CompileTask::Reason_DirectivesChanged) {\n+    \/\/ A request has been made for compilation.  Before we do any\n+    \/\/ real work, check to see if the method has been compiled\n+    \/\/ in the meantime with a definitive result.\n+    if (compilation_is_complete(method, osr_bci, comp_level)) {\n+      return;\n+    }\n@@ -1209,5 +1211,7 @@\n-    \/\/ We need to check again to see if the compilation has\n-    \/\/ completed.  A previous compilation may have registered\n-    \/\/ some result.\n-    if (compilation_is_complete(method, osr_bci, comp_level)) {\n-      return;\n+    if (compile_reason != CompileTask::Reason_DirectivesChanged) {\n+      \/\/ We need to check again to see if the compilation has\n+      \/\/ completed.  A previous compilation may have registered\n+      \/\/ some result.\n+      if (compilation_is_complete(method, osr_bci, comp_level)) {\n+        return;\n+      }\n@@ -1360,1 +1364,2 @@\n-    if (method_code != nullptr && method_code->is_nmethod()) {\n+    if (method_code != nullptr && method_code->is_nmethod()\n+                      && (compile_reason != CompileTask::Reason_DirectivesChanged)) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+      Reason_DirectivesChanged, \/\/ Changed CompilerDirectivesStack\n@@ -71,1 +72,2 @@\n-      \"bootstrap\"\n+      \"bootstrap\",\n+      \"directives_changed\"\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -872,0 +872,6 @@\n+  \/\/ Clear the flags related to compiler directives that were set by the compilerBroker, \n+  \/\/ because the directives can be updated.\n+  void clear_method_flags() {\n+    set_has_matching_directives(false);\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+   status(has_matching_directives     , 1 << 16) \/* The method has matching directives *\/ \\\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -899,3 +899,2 @@\n-    DeoptimizationScope deopt_scope;\n-    CodeCache::mark_for_deoptimization_directives_matches(&deopt_scope);\n-    deopt_scope.deoptimize_marked();\n+    CodeCache::mark_directives_matches();\n+    CodeCache::recompile_marked_directives_matches();\n@@ -917,1 +916,0 @@\n-  \/\/ Have to duplicate code to shut an assert in DTR of DeoptimizationScope\n@@ -919,2 +917,1 @@\n-    DeoptimizationScope deopt_scope;\n-    CodeCache::mark_for_deoptimization_directives_matches(&deopt_scope);\n+    CodeCache::mark_directives_matches();\n@@ -925,2 +922,2 @@\n-    CodeCache::mark_for_deoptimization_directives_matches(&deopt_scope);\n-    deopt_scope.deoptimize_marked();\n+    CodeCache::mark_directives_matches();\n+    CodeCache::recompile_marked_directives_matches();\n@@ -944,2 +941,1 @@\n-    DeoptimizationScope deopt_scope;\n-    CodeCache::mark_for_deoptimization_directives_matches(&deopt_scope);\n+    CodeCache::mark_directives_matches();\n@@ -947,1 +943,1 @@\n-    deopt_scope.deoptimize_marked();\n+    CodeCache::recompile_marked_directives_matches();\n@@ -964,2 +960,1 @@\n-    DeoptimizationScope deopt_scope;\n-    CodeCache::mark_for_deoptimization_directives_matches(&deopt_scope);\n+    CodeCache::mark_directives_matches();\n@@ -967,1 +962,1 @@\n-    deopt_scope.deoptimize_marked();\n+    CodeCache::recompile_marked_directives_matches();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-    return \"Clear derectives stack amd load new compiler directives from file.\";\n+    return \"Clear directives stack, and load new compiler directives from file.\";\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}