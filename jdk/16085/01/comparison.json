{"files":[{"patch":"@@ -88,0 +88,7 @@\n+    public static final BundlerParamInfo<String> APP_IMAGE_SIGN_IDENTITY =\n+            new StandardBundlerParam<>(\n+            Arguments.CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY.getId(),\n+            String.class,\n+            params -> \"\",\n+            null);\n+\n@@ -130,6 +137,10 @@\n-            String signingIdentity =\n-                    DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n-            if (signingIdentity == null) {\n-                throw new ConfigException(\n-                        I18N.getString(\"error.explicit-sign-no-cert\"),\n-                        I18N.getString(\"error.explicit-sign-no-cert.advice\"));\n+            \/\/ Validate DEVELOPER_ID_APP_SIGNING_KEY only if user provided\n+            \/\/ SIGNING_KEY_USER.\n+            if (!SIGNING_KEY_USER.getIsDefaultValue(params)) { \/\/ --mac-signing-key-user-name\n+                String signingIdentity =\n+                        DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n+                if (signingIdentity == null) {\n+                    throw new ConfigException(\n+                            I18N.getString(\"error.explicit-sign-no-cert\"),\n+                            I18N.getString(\"error.explicit-sign-no-cert.advice\"));\n+                }\n@@ -138,0 +149,3 @@\n+            \/\/ No need to validate --mac-app-image-sign-identity, since it is\n+            \/\/ pass through option.\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -30,0 +31,1 @@\n+import java.io.PrintStream;\n@@ -56,0 +58,1 @@\n+import static jdk.jpackage.internal.MacAppBundler.APP_IMAGE_SIGN_IDENTITY;\n@@ -57,0 +60,1 @@\n+import static jdk.jpackage.internal.MacBaseInstallerBundler.SIGNING_KEY_USER;\n@@ -398,2 +402,9 @@\n-            String signingIdentity =\n-                    DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n+            String signingIdentity = null;\n+            \/\/ --mac-signing-key-user-name\n+            if (!SIGNING_KEY_USER.getIsDefaultValue(params)) {\n+                signingIdentity = DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n+            }\n+            \/\/ --mac-app-image-sign-identity\n+            if (!APP_IMAGE_SIGN_IDENTITY.getIsDefaultValue(params)) {\n+                signingIdentity = APP_IMAGE_SIGN_IDENTITY.fetchFrom(params);\n+            }\n@@ -404,0 +415,3 @@\n+            } else {\n+                \/\/ Case when user requested to sign installer only\n+                signAppBundle(params, root, \"-\", null, null);\n@@ -718,0 +732,19 @@\n+    private static void runCodesign(ProcessBuilder pb, boolean quiet)\n+                                                            throws IOException {\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+             PrintStream ps = new PrintStream(baos)) {\n+            try {\n+            IOUtils.exec(pb, false, ps, false,\n+                         Executor.INFINITE_TIMEOUT, quiet);\n+            } catch (IOException ioe) {\n+                \/\/ Log output of \"codesign\" in case of\n+                \/\/ error. It should help user to diagnose\n+                \/\/ issue when using --mac-app-image-sign-identity\n+                Log.info(MessageFormat.format(I18N.getString(\n+                         \"error.tool.failed.with.output\"), \"codesign\"));\n+                Log.info(baos.toString().strip());\n+                throw ioe;\n+            }\n+        }\n+    }\n+\n@@ -784,2 +817,1 @@\n-                            IOUtils.exec(pb, false, null, false,\n-                                    Executor.INFINITE_TIMEOUT, true);\n+                            runCodesign(pb, true);\n@@ -813,2 +845,1 @@\n-\n-                IOUtils.exec(pb);\n+                runCodesign(pb, false);\n@@ -845,2 +876,1 @@\n-\n-        IOUtils.exec(pb);\n+        runCodesign(pb, false);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -82,0 +82,7 @@\n+    public static final BundlerParamInfo<String> INSTALLER_SIGN_IDENTITY =\n+            new StandardBundlerParam<>(\n+            Arguments.CLIOptions.MAC_INSTALLER_SIGN_IDENTITY.getId(),\n+            String.class,\n+            params -> \"\",\n+            null);\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -32,0 +33,1 @@\n+import java.io.PrintStream;\n@@ -57,0 +59,1 @@\n+import static jdk.jpackage.internal.MacBaseInstallerBundler.INSTALLER_SIGN_IDENTITY;\n@@ -608,2 +611,9 @@\n-                String signingIdentity =\n-                        DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n+                String signingIdentity = null;\n+                \/\/ --mac-signing-key-user-name\n+                if (!SIGNING_KEY_USER.getIsDefaultValue(params)) {\n+                    signingIdentity = DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n+                }\n+                \/\/ --mac-installer-sign-identity\n+                if (!INSTALLER_SIGN_IDENTITY.getIsDefaultValue(params)) {\n+                    signingIdentity = INSTALLER_SIGN_IDENTITY.fetchFrom(params);\n+                }\n@@ -641,1 +651,15 @@\n-            IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+\n+            try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                 PrintStream ps = new PrintStream(baos)) {\n+                try {\n+                    IOUtils.exec(pb, false, ps, true, Executor.INFINITE_TIMEOUT);\n+                } catch (IOException ioe) {\n+                    \/\/ Log output of \"productbuild\" in case of\n+                    \/\/ error. It should help user to diagnose\n+                    \/\/ issue when using --mac-installer-sign-identity\n+                    Log.info(MessageFormat.format(I18N.getString(\n+                             \"error.tool.failed.with.output\"), \"productbuild\"));\n+                    Log.info(baos.toString().strip());\n+                    throw ioe;\n+                }\n+            }\n@@ -705,7 +729,9 @@\n-                String signingIdentity =\n-                        DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n-                if (signingIdentity == null) {\n-                    throw new ConfigException(\n-                            I18N.getString(\"error.explicit-sign-no-cert\"),\n-                            I18N.getString(\n-                            \"error.explicit-sign-no-cert.advice\"));\n+                if (!SIGNING_KEY_USER.getIsDefaultValue(params)) {\n+                    String signingIdentity =\n+                            DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n+                    if (signingIdentity == null) {\n+                        throw new ConfigException(\n+                                I18N.getString(\"error.explicit-sign-no-cert\"),\n+                                I18N.getString(\n+                                \"error.explicit-sign-no-cert.advice\"));\n+                    }\n@@ -713,0 +739,3 @@\n+\n+                \/\/ No need to validate --mac-installer-sign-identity, since it is\n+                \/\/ pass through option.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_de.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_ja.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_zh_CN.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -341,0 +341,6 @@\n+        MAC_APP_IMAGE_SIGN_IDENTITY (\"mac-app-image-sign-identity\",\n+                    OptionCategories.PLATFORM_MAC),\n+\n+        MAC_INSTALLER_SIGN_IDENTITY (\"mac-installer-sign-identity\",\n+                    OptionCategories.PLATFORM_MAC),\n+\n@@ -593,0 +599,2 @@\n+            \/\/ Throws PackagerException on error\n+            ValidOptions.checkIfRequired(option, allOptions);\n@@ -634,0 +642,18 @@\n+        if (allOptions.contains(CLIOptions.MAC_SIGNING_KEY_NAME) &&\n+            allOptions.contains(CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY)) {\n+                throw new PackagerException(\"ERR_MutuallyExclusiveOptions\",\n+                        CLIOptions.MAC_SIGNING_KEY_NAME.getIdWithPrefix(),\n+                        CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY.getIdWithPrefix());\n+        }\n+        if (allOptions.contains(CLIOptions.MAC_SIGNING_KEY_NAME) &&\n+            allOptions.contains(CLIOptions.MAC_INSTALLER_SIGN_IDENTITY)) {\n+                throw new PackagerException(\"ERR_MutuallyExclusiveOptions\",\n+                        CLIOptions.MAC_SIGNING_KEY_NAME.getIdWithPrefix(),\n+                        CLIOptions.MAC_INSTALLER_SIGN_IDENTITY.getIdWithPrefix());\n+        }\n+        if (isMac && (imageOnly || \"dmg\".equals(type)) &&\n+            allOptions.contains(CLIOptions.MAC_INSTALLER_SIGN_IDENTITY)) {\n+                throw new PackagerException(\"ERR_InvalidTypeOption\",\n+                        CLIOptions.MAC_INSTALLER_SIGN_IDENTITY.getIdWithPrefix(),\n+                        type);\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,5 +49,0 @@\n-    \/**\n-     * Indicates if value was set using default value function\n-     *\/\n-    boolean isDefaultValue;\n-\n@@ -73,2 +68,18 @@\n-    boolean getIsDefaultValue() {\n-        return isDefaultValue;\n+    \/**\n+     * Returns true if value was not provided on command line for this\n+     * parameter.\n+     *\n+     * @param params - params from which value will be fetch\n+     * @return true if value was not provided on command line, false otherwise\n+     *\/\n+    boolean getIsDefaultValue(Map<String, ? super Object> params) {\n+        Object o = params.get(getID());\n+        if (o != null) {\n+            return false; \/\/ We have user provided value\n+        }\n+\n+        if (params.containsKey(getID())) {\n+            return false; \/\/ explicit nulls are allowed for provided value\n+        }\n+\n+        return true;\n@@ -117,1 +128,0 @@\n-                isDefaultValue = true;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/BundlerParamInfo.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -30,0 +31,3 @@\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n@@ -64,0 +68,2 @@\n+    \/\/ HashMap of required options\n+    private static final HashMap<CLIOptions, List<CLIOptions>> required = new HashMap<>();\n@@ -133,0 +139,4 @@\n+            put(CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY.getId(),\n+                    EnumSet.of(USE.ALL, USE.SIGN));\n+            put(CLIOptions.MAC_INSTALLER_SIGN_IDENTITY.getId(),\n+                    EnumSet.of(USE.INSTALL, USE.SIGN));\n@@ -140,0 +150,13 @@\n+\n+            \/\/ Add requirements\n+            \/\/ --mac-sign requires --mac-signing-key-user-name or\n+            \/\/ --mac-app-image-sign-identity or --mac-installer-sign-identity.\n+            putRequired(CLIOptions.MAC_SIGN, List.of(\n+                CLIOptions.MAC_SIGNING_KEY_NAME,\n+                CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY,\n+                CLIOptions.MAC_INSTALLER_SIGN_IDENTITY));\n+            \/\/ --mac-signing-key-user-name or --mac-app-image-sign-identity or\n+            \/\/ --mac-installer-sign-identity requires --mac-sign.\n+            putRequired(CLIOptions.MAC_SIGNING_KEY_NAME, CLIOptions.MAC_SIGN);\n+            putRequired(CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY, CLIOptions.MAC_SIGN);\n+            putRequired(CLIOptions.MAC_INSTALLER_SIGN_IDENTITY, CLIOptions.MAC_SIGN);\n@@ -159,0 +182,14 @@\n+    static void checkIfRequired(CLIOptions arg, List<CLIOptions> allOptions)\n+                                                      throws PackagerException {\n+        List<CLIOptions> values = required.get(arg);\n+        if (values != null && !values.isEmpty()) {\n+            \/\/ disjoint() returns true if no elements in common\n+            if (Collections.disjoint(allOptions, values)) {\n+                List<String> stringValues = values.stream()\n+                    .map(p -> p.getIdWithPrefix()).collect(Collectors.toList());\n+                throw new PackagerException(\"ERR_MissingRequiredArgument\",\n+                            arg.getIdWithPrefix(), String.join(\",\", stringValues));\n+            }\n+        }\n+    }\n+\n@@ -183,0 +220,10 @@\n+\n+    private static List<CLIOptions> putRequired(CLIOptions key,\n+                                                CLIOptions value) {\n+        return required.put(key, List.of(value));\n+    }\n+\n+    private static List<CLIOptions> putRequired(CLIOptions key,\n+                                                List<CLIOptions> value) {\n+        return required.put(key, value);\n+    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,13 @@\n-\\          Team or user name portion of Apple signing identities.\\n\\\n+\\          Team or user name portion of Apple signing identities. For direct\\n\\\n+\\          control of the signing identity used to sign application images or\\n\\\n+\\          installers use --mac-app-image-sign-identity and\/or\\n\\\n+\\          --mac-installer-sign-identity. This option cannot be combined with\\n\\\n+\\          --mac-app-image-sign-identity or --mac-installer-sign-identity.\\n\\\n+\\  --mac-app-image-sign-identity <identity>\\n\\\n+\\          Identity used to sign application image. This value will be passed\\n\\\n+\\          directly to --sign option of \"codesign\" tool. This option cannot\\n\\\n+\\          be combined with --mac-signing-key-user-name.\\n\\\n+\\  --mac-installer-sign-identity <identity>\\n\\\n+\\          Identity used to sign \"pkg\" installer. This value will be passed\\n\\\n+\\          directly to --sign option of \"productbuild\" tool. This option\\n\\\n+\\          cannot be combined with --mac-signing-key-user-name.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources.properties","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-ERR_MutuallyExclusiveOptions=\"Error: Mutually exclusive options [{0}] and [{1}]\n+ERR_MutuallyExclusiveOptions=Error: Mutually exclusive options [{0}] and [{1}]\n@@ -99,0 +99,1 @@\n+ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_de.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n@@ -64,3 +64,9 @@\n-    @Parameter({\"true\", \"0\"}) \/\/ ({\"sign or not\", \"certificate index\"})\n-    @Parameter({\"true\", \"1\"})\n-    @Parameter({\"false\", \"-1\"})\n+    \/\/ ({\"sign or not\", \"signing-key or sign-identity\", \"certificate index\"})\n+    \/\/ Sign, signing-key and ASCII certificate\n+    @Parameter({\"true\", \"true\", SigningBase.ASCII_INDEX})\n+    \/\/ Sign, signing-key and UNICODE certificate\n+    @Parameter({\"true\", \"true\", SigningBase.UNICODE_INDEX})\n+    \/\/ Sign, signing-indentity and UNICODE certificate\n+    @Parameter({\"true\", \"false\", SigningBase.UNICODE_INDEX})\n+    \/\/ Unsigned\n+    @Parameter({\"false\", \"true\", \"-1\"})\n@@ -69,1 +75,2 @@\n-        int certIndex = Integer.parseInt(testArgs[1]);\n+        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n+        int certIndex = Integer.parseInt(testArgs[2]);\n@@ -76,2 +83,0 @@\n-                    \"--mac-signing-key-user-name\",\n-                    SigningBase.getDevName(certIndex),\n@@ -80,0 +85,7 @@\n+            if (signingKey) {\n+                cmd.addArguments(\"--mac-signing-key-user-name\",\n+                        SigningBase.getDevName(certIndex));\n+            } else {\n+                cmd.addArguments(\"--mac-app-image-sign-identity\",\n+                        SigningBase.getAppCert(certIndex));\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n@@ -65,3 +65,11 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public void test(boolean signAppImage) throws Exception {\n+    \/\/ ({\"sign or not\", \"signing-key or sign-identity\"})\n+    \/\/ Sign and signing-key\n+    @Parameter({\"true\", \"true\"})\n+    \/\/ Sign and sign-identity\n+    @Parameter({\"true\", \"false\"})\n+    \/\/ Unsigned\n+    @Parameter({\"false\", \"true\"})\n+    public void test(String... testArgs) throws Exception {\n+        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n+        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n+\n@@ -79,2 +87,0 @@\n-                    \"--mac-signing-key-user-name\",\n-                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n@@ -83,0 +89,7 @@\n+            if (signingKey) {\n+                appImageCmd.addArguments(\"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+            } else {\n+                appImageCmd.addArguments(\"--mac-app-image-sign-identity\",\n+                    SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+            }\n@@ -100,2 +113,0 @@\n-            .addArguments(\"--mac-signing-key-user-name\",\n-                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n@@ -103,0 +114,7 @@\n+        if (signingKey) {\n+            cmd.addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+        } else {\n+            cmd.addArguments(\"--mac-app-image-sign-identity\",\n+                SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTwoStepsTest.java","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Collection;\n+import java.util.List;\n+import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.TKit;\n+\n+\/*\n+ * @test\n+ * @summary Test jpackage signing options errors\n+ * @library ..\/helpers\n+ * @build SigningOptionsTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningOptionsTest\n+ *  --jpt-before-run=jdk.jpackage.test.JPackageCommand.useExecutableByDefault\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test jpackage signing options errors\n+ * @library ..\/helpers\n+ * @build SigningOptionsTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningOptionsTest\n+ *  --jpt-before-run=jdk.jpackage.test.JPackageCommand.useToolProviderByDefault\n+ *\/\n+\n+public final class SigningOptionsTest {\n+\n+    private final String expectedError;\n+    private final JPackageCommand cmd;\n+\n+    @Parameters\n+    public static Collection input() {\n+        return List.of(new Object[][]{\n+            \/\/ --mac-sign requires\n+            {\"Hello\",\n+                    new String[]{\"--mac-sign\"},\n+                    null,\n+                    \"--mac-sign argument requires at least one of\"},\n+            \/\/ --mac-signing-key-user-name requires\n+            {\"Hello\",\n+                    new String[]{\"--mac-signing-key-user-name\"},\n+                    null,\n+                    \"--mac-signing-key-user-name argument requires at least one of\"},\n+            \/\/ --mac-app-image-sign-identity requires\n+            {\"Hello\",\n+                    new String[]{\"--mac-app-image-sign-identity\"},\n+                    null,\n+                    \"--mac-app-image-sign-identity argument requires at least one of\"},\n+            \/\/ --mac-installer-sign-identity requires\n+            {\"Hello\",\n+                    new String[]{\"--mac-installer-sign-identity\"},\n+                    null,\n+                    \"--mac-installer-sign-identity argument requires at least one of\"},\n+            \/\/ --mac-signing-key-user-name and --mac-app-image-sign-identity\n+            {\"Hello\",\n+                    new String[]{\"--mac-sign\",\n+                                 \"--mac-signing-key-user-name\", \"test-key\",\n+                                 \"--mac-app-image-sign-identity\", \"test-identity\"},\n+                    null,\n+                    \"Mutually exclusive options\"},\n+            \/\/ --mac-signing-key-user-name and --mac-installer-sign-identity\n+            {\"Hello\",\n+                    new String[]{\"--mac-sign\",\n+                                 \"--mac-signing-key-user-name\", \"test-key\",\n+                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n+                    null,\n+                    \"Mutually exclusive options\"},\n+            \/\/ --mac-installer-sign-identity and --type app-image\n+            {\"Hello\",\n+                    new String[]{\"--mac-sign\",\n+                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n+                    null,\n+                    \"Option [--mac-installer-sign-identity] is not valid with type\"},\n+            \/\/ --mac-installer-sign-identity and --type dmg\n+            {\"Hello\",\n+                    new String[]{\"--type\", \"dmg\",\n+                                 \"--mac-sign\",\n+                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n+                    new String[]{\"--type\"},\n+                    \"Option [--mac-installer-sign-identity] is not valid with type\"},\n+        });\n+    }\n+\n+    public SigningOptionsTest(String javaAppDesc, String[] jpackageArgs,\n+                              String[] removeArgs, String expectedError) {\n+        this.expectedError = expectedError;\n+\n+        cmd = JPackageCommand.helloAppImage(javaAppDesc)\n+                .saveConsoleOutput(true).dumpOutput(true);\n+        if (jpackageArgs != null) {\n+            cmd.addArguments(jpackageArgs);\n+        } if (removeArgs != null) {\n+            for (String arg : removeArgs) {\n+                cmd.removeArgumentWithValue(arg);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<String> output = cmd.execute(1).getOutput();\n+        TKit.assertNotNull(output, \"output is null\");\n+        TKit.assertTextStream(expectedError).apply(output.stream());\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningOptionsTest.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -100,3 +100,11 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public static void test(boolean signAppImage) throws Exception {\n+    \/\/ ({\"sign or not\", \"signing-key or sign-identity\"})\n+    \/\/ Sign and signing-key\n+    @Parameter({\"true\", \"true\"})\n+    \/\/ Sign and sign-identity\n+    @Parameter({\"true\", \"false\"})\n+    \/\/ Unsigned\n+    @Parameter({\"false\", \"true\"})\n+    public void test(String... testArgs) throws Exception {\n+        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n+        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n+\n@@ -113,2 +121,1 @@\n-            appImageCmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n+            appImageCmd.addArguments(\"--mac-sign\",\n@@ -116,0 +123,7 @@\n+            if (signingKey) {\n+                appImageCmd.addArguments(\"--mac-signing-key-user-name\",\n+                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+            } else {\n+                appImageCmd.addArguments(\"--mac-app-image-sign-identity\",\n+                    SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+            }\n@@ -129,2 +143,0 @@\n-            .addArguments(\"--mac-signing-key-user-name\",\n-                SigningBase.getDevName(SigningBase.DEFAULT_INDEX))\n@@ -132,0 +144,7 @@\n+        if (signingKey) {\n+            appImageSignedCmd.addArguments(\"--mac-signing-key-user-name\",\n+                SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+        } else {\n+            appImageSignedCmd.addArguments(\"--mac-app-image-sign-identity\",\n+                SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+        }\n@@ -144,2 +163,0 @@\n-                                \"--mac-signing-key-user-name\",\n-                                SigningBase.getDevName(SigningBase.DEFAULT_INDEX),\n@@ -148,0 +165,7 @@\n+                        if (signingKey) {\n+                           cmd.addArguments(\"--mac-signing-key-user-name\",\n+                               SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+                        } else {\n+                            cmd.addArguments(\"--mac-installer-sign-identity\",\n+                                SigningBase.getInstallerCert(SigningBase.DEFAULT_INDEX));\n+                        }\n@@ -154,0 +178,9 @@\n+                .addInitializer(cmd -> {\n+                    if (signAppImage && !signingKey) {\n+                        \/\/ jpackage throws expected error with\n+                        \/\/ --mac-installer-sign-identity and DMG type\n+                        cmd.removeArgument(\"--mac-sign\");\n+                        cmd.removeArgumentWithValue(\"--mac-signing-keychain\");\n+                        cmd.removeArgumentWithValue(\"--mac-installer-sign-identity\");\n+                    }\n+                })\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n@@ -93,2 +93,7 @@\n-        String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n-        return SigningBase.getDevNameIndex(devName);\n+        if (cmd.hasArgument(\"--mac-signing-key-user-name\")) {\n+            String devName = cmd.getArgumentValue(\"--mac-signing-key-user-name\");\n+            return SigningBase.getDevNameIndex(devName);\n+        } else {\n+            \/\/ Signing-indentity\n+            return Integer.valueOf(SigningBase.UNICODE_INDEX);\n+        }\n@@ -98,3 +103,11 @@\n-    @Parameter(\"0\")\n-    @Parameter(\"1\")\n-    public static void test(int certIndex) throws Exception {\n+    \/\/ (\"signing-key or sign-identity\", \"certificate index\"})\n+    \/\/ Signing-key and ASCII certificate\n+    @Parameter({\"true\", SigningBase.ASCII_INDEX})\n+    \/\/ Signing-key and UNICODE certificate\n+    @Parameter({\"true\", SigningBase.UNICODE_INDEX})\n+    \/\/ Signing-indentity and UNICODE certificate\n+    @Parameter({\"false\", SigningBase.UNICODE_INDEX})\n+    public static void test(String... testArgs) throws Exception {\n+        boolean signingKey = Boolean.parseBoolean(testArgs[0]);\n+        int certIndex = Integer.parseInt(testArgs[1]);\n+\n@@ -108,1 +121,0 @@\n-                            \"--mac-signing-key-user-name\", SigningBase.getDevName(certIndex),\n@@ -110,0 +122,9 @@\n+                    if (signingKey) {\n+                        cmd.addArguments(\"--mac-signing-key-user-name\",\n+                                         SigningBase.getDevName(certIndex));\n+                    } else {\n+                        cmd.addArguments(\"--mac-app-image-sign-identity\",\n+                                         SigningBase.getAppCert(certIndex));\n+                        cmd.addArguments(\"--mac-installer-sign-identity\",\n+                                         SigningBase.getInstallerCert(certIndex));\n+                    }\n@@ -114,0 +135,7 @@\n+                .addInitializer(cmd -> {\n+                    if (!signingKey) {\n+                        \/\/ jpackage throws expected error with\n+                        \/\/ --mac-installer-sign-identity and DMG type\n+                        cmd.removeArgumentWithValue(\"--mac-installer-sign-identity\");\n+                    }\n+                })\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -104,4 +104,12 @@\n-    @Parameter(\"true\")\n-    @Parameter(\"false\")\n-    public static void test(boolean signAppImage) throws Exception {\n-        SigningCheck.checkCertificates(0);\n+    \/\/ (Signed, \"signing-key or sign-identity\"})\n+    \/\/ Signed and signing-key\n+    @Parameter({\"true\", \"true\"})\n+    \/\/ Signed and signing-identity\n+    @Parameter({\"true\", \"false\"})\n+    \/\/ Unsigned\n+    @Parameter({\"false\", \"true\"})\n+    public static void test(String... testArgs) throws Exception {\n+        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n+        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n+\n+        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n@@ -115,4 +123,9 @@\n-                    .addArguments(\"--mac-signing-key-user-name\",\n-                            SigningBase.getDevName(0))\n-                    .addArguments(\"--mac-signing-keychain\",\n-                            SigningBase.getKeyChain());\n+                       .addArguments(\"--mac-signing-keychain\",\n+                                     SigningBase.getKeyChain());\n+            if (signingKey) {\n+                appImageCmd.addArguments(\"--mac-signing-key-user-name\",\n+                                SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+            } else {\n+                appImageCmd.addArguments(\"--mac-app-image-sign-identity\",\n+                                SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+            }\n@@ -129,2 +142,0 @@\n-                                \"--mac-signing-key-user-name\",\n-                                SigningBase.getDevName(0),\n@@ -133,0 +144,7 @@\n+                        if (signingKey) {\n+                            cmd.addArguments(\"--mac-signing-key-user-name\",\n+                                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n+                        } else {\n+                            cmd.addArguments(\"--mac-installer-sign-identity\",\n+                                    SigningBase.getInstallerCert(SigningBase.DEFAULT_INDEX));\n+                        }\n@@ -138,0 +156,11 @@\n+                .addInitializer(cmd -> {\n+                    if (signAppImage && !signingKey) {\n+                        \/\/ jpackage throws expected error with\n+                        \/\/ --mac-installer-sign-identity and DMG type\n+                        cmd.removeArgumentWithValue(\"--mac-installer-sign-identity\");\n+                        \/\/ It will do nothing, but it signals test that app\n+                        \/\/ image itself is signed for verification.\n+                        cmd.addArguments(\"--mac-app-image-sign-identity\",\n+                                SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n+                    }\n+                })\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+    public static final String ASCII_INDEX = \"0\";\n+    public static final String UNICODE_INDEX = \"0\";\n@@ -250,1 +252,1 @@\n-            SigningBase.verifySpctl(appImage, \"exec\", 0);\n+            SigningBase.verifySpctl(appImage, \"exec\", SigningBase.DEFAULT_INDEX);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-                    new String[]{\"--mac-sign\", \"--mac-app-store\"},\n+                    new String[]{\"--mac-sign\", \"--mac-app-store\", \"--mac-app-image-sign-identity\", \"test\"},\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/PredefinedAppImageErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}