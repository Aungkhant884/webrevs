{"files":[{"patch":"@@ -61,0 +61,1 @@\n+import static jdk.jpackage.internal.MacBaseInstallerBundler.INSTALLER_SIGN_IDENTITY;\n@@ -403,5 +404,1 @@\n-            \/\/ --mac-signing-key-user-name\n-            if (!SIGNING_KEY_USER.getIsDefaultValue(params)) {\n-                signingIdentity = DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n-            }\n-            \/\/ --mac-app-image-sign-identity\n+            \/\/ Try --mac-app-image-sign-identity first if set\n@@ -410,0 +407,7 @@\n+            } else {\n+                \/\/ Check if INSTALLER_SIGN_IDENTITY is set and if it is set\n+                \/\/ then do not sign app image, otherwise use --mac-signing-key-user-name\n+                if (INSTALLER_SIGN_IDENTITY.getIsDefaultValue(params)) {\n+                    \/\/ --mac-sign and\/or --mac-signing-key-user-name case\n+                    signingIdentity = DEVELOPER_ID_APP_SIGNING_KEY.fetchFrom(params);\n+                }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import static jdk.jpackage.internal.MacAppBundler.APP_IMAGE_SIGN_IDENTITY;\n@@ -612,4 +613,0 @@\n-                \/\/ --mac-signing-key-user-name\n-                if (!SIGNING_KEY_USER.getIsDefaultValue(params)) {\n-                    signingIdentity = DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n-                }\n@@ -619,0 +616,7 @@\n+                } else {\n+                    \/\/ Use --mac-signing-key-user-name if user did not request\n+                    \/\/ to sign just app image using --mac-app-image-sign-identity\n+                    if (APP_IMAGE_SIGN_IDENTITY.getIsDefaultValue(params)) {\n+                        \/\/ --mac-signing-key-user-name\n+                        signingIdentity = DEVELOPER_ID_INSTALLER_SIGNING_KEY.fetchFrom(params);\n+                    }\n@@ -620,0 +624,1 @@\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -599,2 +599,0 @@\n-            \/\/ Throws PackagerException on error\n-            ValidOptions.checkIfRequired(option, allOptions);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Collections;\n@@ -31,2 +30,0 @@\n-import java.util.List;\n-import java.util.stream.Collectors;\n@@ -68,3 +65,0 @@\n-    \/\/ HashMap of required options\n-    private static final HashMap<CLIOptions, List<CLIOptions>> required = new HashMap<>();\n-\n@@ -150,13 +144,0 @@\n-\n-            \/\/ Add requirements\n-            \/\/ --mac-sign requires --mac-signing-key-user-name or\n-            \/\/ --mac-app-image-sign-identity or --mac-installer-sign-identity.\n-            putRequired(CLIOptions.MAC_SIGN, List.of(\n-                CLIOptions.MAC_SIGNING_KEY_NAME,\n-                CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY,\n-                CLIOptions.MAC_INSTALLER_SIGN_IDENTITY));\n-            \/\/ --mac-signing-key-user-name or --mac-app-image-sign-identity or\n-            \/\/ --mac-installer-sign-identity requires --mac-sign.\n-            putRequired(CLIOptions.MAC_SIGNING_KEY_NAME, CLIOptions.MAC_SIGN);\n-            putRequired(CLIOptions.MAC_APP_IMAGE_SIGN_IDENTITY, CLIOptions.MAC_SIGN);\n-            putRequired(CLIOptions.MAC_INSTALLER_SIGN_IDENTITY, CLIOptions.MAC_SIGN);\n@@ -182,14 +163,0 @@\n-    static void checkIfRequired(CLIOptions arg, List<CLIOptions> allOptions)\n-                                                      throws PackagerException {\n-        List<CLIOptions> values = required.get(arg);\n-        if (values != null && !values.isEmpty()) {\n-            \/\/ disjoint() returns true if no elements in common\n-            if (Collections.disjoint(allOptions, values)) {\n-                List<String> stringValues = values.stream()\n-                    .map(p -> p.getIdWithPrefix()).collect(Collectors.toList());\n-                throw new PackagerException(\"ERR_MissingRequiredArgument\",\n-                            arg.getIdWithPrefix(), String.join(\",\", stringValues));\n-            }\n-        }\n-    }\n-\n@@ -220,10 +187,0 @@\n-\n-    private static List<CLIOptions> putRequired(CLIOptions key,\n-                                                CLIOptions value) {\n-        return required.put(key, List.of(value));\n-    }\n-\n-    private static List<CLIOptions> putRequired(CLIOptions key,\n-                                                List<CLIOptions> value) {\n-        return required.put(key, value);\n-    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -63,20 +63,0 @@\n-            \/\/ --mac-sign requires\n-            {\"Hello\",\n-                    new String[]{\"--mac-sign\"},\n-                    null,\n-                    \"--mac-sign argument requires at least one of\"},\n-            \/\/ --mac-signing-key-user-name requires\n-            {\"Hello\",\n-                    new String[]{\"--mac-signing-key-user-name\"},\n-                    null,\n-                    \"--mac-signing-key-user-name argument requires at least one of\"},\n-            \/\/ --mac-app-image-sign-identity requires\n-            {\"Hello\",\n-                    new String[]{\"--mac-app-image-sign-identity\"},\n-                    null,\n-                    \"--mac-app-image-sign-identity argument requires at least one of\"},\n-            \/\/ --mac-installer-sign-identity requires\n-            {\"Hello\",\n-                    new String[]{\"--mac-installer-sign-identity\"},\n-                    null,\n-                    \"--mac-installer-sign-identity argument requires at least one of\"},\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningOptionsTest.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifyPkgutil(outputBundle, true, SigningBase.DEFAULT_INDEX);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,0 +67,10 @@\n+    private static boolean isAppImageSigned(JPackageCommand cmd) {\n+        return cmd.hasArgument(\"--mac-signing-key-user-name\") ||\n+               cmd.hasArgument(\"--mac-app-image-sign-identity\");\n+    }\n+\n+    private static boolean isPKGSigned(JPackageCommand cmd) {\n+        return cmd.hasArgument(\"--mac-signing-key-user-name\") ||\n+               cmd.hasArgument(\"--mac-installer-sign-identity\");\n+    }\n+\n@@ -69,2 +79,4 @@\n-        SigningBase.verifyPkgutil(outputBundle, getCertIndex(cmd));\n-        SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n+        SigningBase.verifyPkgutil(outputBundle, isPKGSigned(cmd), getCertIndex(cmd));\n+        if (isPKGSigned(cmd)) {\n+            SigningBase.verifySpctl(outputBundle, \"install\", getCertIndex(cmd));\n+        }\n@@ -85,3 +97,7 @@\n-                SigningBase.verifyCodesign(launcherPath, true, getCertIndex(cmd));\n-                SigningBase.verifyCodesign(dmgImage, true, getCertIndex(cmd));\n-                SigningBase.verifySpctl(dmgImage, \"exec\", getCertIndex(cmd));\n+                SigningBase.verifyCodesign(launcherPath, isAppImageSigned(cmd),\n+                                           getCertIndex(cmd));\n+                SigningBase.verifyCodesign(dmgImage, isAppImageSigned(cmd),\n+                                           getCertIndex(cmd));\n+                if (isAppImageSigned(cmd)) {\n+                    SigningBase.verifySpctl(dmgImage, \"exec\", getCertIndex(cmd));\n+                }\n@@ -103,1 +119,1 @@\n-    \/\/ (\"signing-key or sign-identity\", \"certificate index\"})\n+    \/\/ (\"signing-key or sign-identity\", \"sign app-image\", \"sign pkg\", \"certificate index\"})\n@@ -105,1 +121,1 @@\n-    @Parameter({\"true\", SigningBase.ASCII_INDEX})\n+    @Parameter({\"true\", \"true\", \"true\", SigningBase.ASCII_INDEX})\n@@ -107,1 +123,1 @@\n-    @Parameter({\"true\", SigningBase.UNICODE_INDEX})\n+    @Parameter({\"true\", \"true\", \"true\", SigningBase.UNICODE_INDEX})\n@@ -109,1 +125,5 @@\n-    @Parameter({\"false\", SigningBase.UNICODE_INDEX})\n+    @Parameter({\"false\", \"true\", \"true\", SigningBase.UNICODE_INDEX})\n+    \/\/ Signing-indentity, but sign app-image only and UNICODE certificate\n+    @Parameter({\"false\", \"true\", \"false\", SigningBase.UNICODE_INDEX})\n+    \/\/ Signing-indentity, but sign pkg only and UNICODE certificate\n+    @Parameter({\"false\", \"false\", \"true\", SigningBase.UNICODE_INDEX})\n@@ -112,1 +132,3 @@\n-        int certIndex = Integer.parseInt(testArgs[1]);\n+        boolean signAppImage = Boolean.parseBoolean(testArgs[1]);\n+        boolean signPKG = Boolean.parseBoolean(testArgs[2]);\n+        int certIndex = Integer.parseInt(testArgs[3]);\n@@ -126,4 +148,8 @@\n-                        cmd.addArguments(\"--mac-app-image-sign-identity\",\n-                                         SigningBase.getAppCert(certIndex));\n-                        cmd.addArguments(\"--mac-installer-sign-identity\",\n-                                         SigningBase.getInstallerCert(certIndex));\n+                        if (signAppImage) {\n+                            cmd.addArguments(\"--mac-app-image-sign-identity\",\n+                                             SigningBase.getAppCert(certIndex));\n+                        }\n+                        if (signPKG) {\n+                            cmd.addArguments(\"--mac-installer-sign-identity\",\n+                                             SigningBase.getInstallerCert(certIndex));\n+                        }\n@@ -140,0 +166,8 @@\n+                        \/\/ In case of not signing app image and DMG we need to\n+                        \/\/ remove signing completely, otherwise we will default\n+                        \/\/ to --mac-signing-key-user-name once\n+                        \/\/ --mac-installer-sign-identity is removed.\n+                        if (!signAppImage) {\n+                            cmd.removeArgumentWithValue(\"--mac-signing-keychain\");\n+                            cmd.removeArgument(\"--mac-sign\");\n+                        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":48,"deletions":14,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        SigningBase.verifyPkgutil(outputBundle, SigningBase.DEFAULT_INDEX);\n+        SigningBase.verifyPkgutil(outputBundle, true, SigningBase.DEFAULT_INDEX);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-    private static List<String> pkgutilResult(Path target) {\n+    private static List<String> pkgutilResult(Path target, boolean signed) {\n@@ -192,1 +192,3 @@\n-                .executeAndGetOutput();\n+                .saveOutput()\n+                .execute(signed ? 0 : 1)\n+                .getOutput();\n@@ -197,1 +199,2 @@\n-    private static void verifyPkgutilResult(List<String> result, int certIndex) {\n+    private static void verifyPkgutilResult(List<String> result, boolean signed,\n+                                            int certIndex) {\n@@ -199,4 +202,9 @@\n-        String lookupString = \"Status: signed by\";\n-        checkString(result, lookupString);\n-        lookupString = \"1. \" + getInstallerCert(certIndex);\n-        checkString(result, lookupString);\n+        if (signed) {\n+            String lookupString = \"Status: signed by\";\n+            checkString(result, lookupString);\n+            lookupString = \"1. \" + getInstallerCert(certIndex);\n+            checkString(result, lookupString);\n+        } else {\n+            String lookupString = \"Status: no signature\";\n+            checkString(result, lookupString);\n+        }\n@@ -233,3 +241,3 @@\n-    public static void verifyPkgutil(Path target, int certIndex) {\n-        List<String> result = pkgutilResult(target);\n-        verifyPkgutilResult(result, certIndex);\n+    public static void verifyPkgutil(Path target, boolean signed, int certIndex) {\n+        List<String> result = pkgutilResult(target, signed);\n+        verifyPkgutilResult(result, signed, certIndex);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"}]}