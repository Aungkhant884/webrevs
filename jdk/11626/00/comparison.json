{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -325,1 +325,2 @@\n-     * Returns the graphics configuration which bounds contain the given point.\n+     * Returns the graphics configuration which bounds contain the given point\n+     * in the user's space.\n@@ -329,2 +330,2 @@\n-     * @param  x the x coordinate of the given point\n-     * @param  y the y coordinate of the given point\n+     * @param  x the x coordinate of the given point in the user's space\n+     * @param  y the y coordinate of the given point in the user's space\n@@ -335,1 +336,1 @@\n-        if (current.getBounds().contains(x, y)) {\n+        if (containsUserSpacePoint(current, x, y)) {\n@@ -341,1 +342,1 @@\n-            if (config.getBounds().contains(x, y)) {\n+            if (containsUserSpacePoint(config, x, y)) {\n@@ -348,0 +349,16 @@\n+    \/**\n+     * Returns the graphics configuration which bounds contain the given point\n+     * in the user's space.\n+     *\n+     * @param  x the x coordinate of the given point in the user's space\n+     * @param  y the y coordinate of the given point in the user's space\n+     * @return the graphics configuration\n+     *\/\n+    public static GraphicsConfiguration getGraphicsConfigurationAtPoint(\n+            double x, double y) {\n+        var gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                    .getDefaultScreenDevice()\n+                                    .getDefaultConfiguration();\n+        return getGraphicsConfigurationAtPoint(gc, x, y);\n+    }\n+\n@@ -381,0 +398,31 @@\n+    \/**\n+     * Converts absolute coordinates from the device space to the user's space\n+     * using passed graphics configuration.\n+     *\n+     * @param  gc the graphics configuration to be used for transformation\n+     * @param  x absolute x coordinate in the device's space\n+     * @param  y absolute y coordinate in the device's space\n+     * @return the corresponding coordinates in user's space\n+     *\/\n+    public static Point toUserSpaceAbs(GraphicsConfiguration gc, int x, int y) {\n+        AffineTransform tx = gc.getDefaultTransform();\n+        Rectangle screen = gc.getBounds();\n+        return new Point(\n+                screen.x + Region.clipRound((x - screen.x) \/ tx.getScaleX()),\n+                screen.y + Region.clipRound((y - screen.y) \/ tx.getScaleY())\n+        );\n+    }\n+\n+    \/**\n+     * Converts absolute coordinates from the device space to the user's space\n+     * using appropriate device transformation.\n+     *\n+     * @param  x absolute x coordinate in the device's space\n+     * @param  y absolute y coordinate in the device's space\n+     * @return the corresponding coordinates in user's space\n+     *\/\n+    public static Point toUserSpaceAbs(int x, int y) {\n+        GraphicsConfiguration gc = getGraphicsConfigurationAtDevicePoint(x, y);\n+        return toUserSpaceAbs(gc, x, y);\n+    }\n+\n@@ -404,3 +452,2 @@\n-        GraphicsConfiguration gc = getLocalGraphicsEnvironment()\n-                .getDefaultScreenDevice().getDefaultConfiguration();\n-        gc = getGraphicsConfigurationAtPoint(gc, rect.x, rect.y);\n+        GraphicsConfiguration gc = getGraphicsConfigurationAtPoint(rect.x,\n+                                                                   rect.y);\n@@ -469,0 +516,59 @@\n+\n+    \/**\n+     * Returns the graphics configuration which bounds contain the given point\n+     * in the device space.\n+     *\n+     * @param  x the x coordinate of the given point in the device space\n+     * @param  y the y coordinate of the given point in the device space\n+     * @return the graphics configuration\n+     *\/\n+    public static GraphicsConfiguration getGraphicsConfigurationAtDevicePoint(\n+            double x, double y)\n+    {\n+        var gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                    .getDefaultScreenDevice()\n+                                    .getDefaultConfiguration();\n+        return getGraphicsConfigurationAtDevicePoint(gc, x, y);\n+    }\n+\n+    \/**\n+     * Returns the graphics configuration which bounds contain the given point\n+     * in the device space.\n+     *\n+     * @param  current the default configuration which is checked in the first\n+     *         place\n+     * @param  x the x coordinate of the given point in the device space\n+     * @param  y the y coordinate of the given point in the device space\n+     * @return the graphics configuration\n+     *\/\n+    public static GraphicsConfiguration getGraphicsConfigurationAtDevicePoint(\n+            GraphicsConfiguration current, double x, double y)\n+    {\n+        if (containsDeviceSpacePoint(current, x, y)) {\n+            return current;\n+        }\n+        GraphicsEnvironment env = getLocalGraphicsEnvironment();\n+        for (GraphicsDevice device : env.getScreenDevices()) {\n+            GraphicsConfiguration config = device.getDefaultConfiguration();\n+            if (containsDeviceSpacePoint(config, x, y)) {\n+                return config;\n+            }\n+        }\n+        return current;\n+    }\n+\n+    private static boolean containsDeviceSpacePoint(\n+            GraphicsConfiguration config, double x, double y)\n+    {\n+        Rectangle bounds = config.getBounds();\n+        bounds = toDeviceSpaceAbs(config, bounds.x, bounds.y, bounds.width,\n+                                  bounds.height);\n+        return bounds.contains(x, y);\n+    }\n+\n+    private static boolean containsUserSpacePoint(\n+            GraphicsConfiguration config, double x, double y)\n+    {\n+        Rectangle bounds = config.getBounds();\n+        return bounds.contains(x, y);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SunGraphicsEnvironment.java","additions":115,"deletions":9,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+exports sun.java2d to jdk.accessibility;\n+\n","filename":"src\/java.desktop\/windows\/classes\/module-info.java.extra","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n-import java.awt.GraphicsConfiguration;\n-import java.awt.GraphicsDevice;\n-import java.awt.GraphicsEnvironment;\n@@ -52,2 +49,0 @@\n-import java.awt.geom.AffineTransform;\n-\n@@ -88,1 +83,0 @@\n-\n@@ -126,0 +120,1 @@\n+import sun.java2d.SunGraphicsEnvironment;\n@@ -556,1 +551,1 @@\n-        Point userSpaceXY = AccessibilityGraphicsEnvironment.toUserSpace(x, y);\n+        Point userSpaceXY = SunGraphicsEnvironment.toUserSpaceAbs(x, y);\n@@ -1675,1 +1670,1 @@\n-                                r = AccessibilityGraphicsEnvironment.toDeviceSpaceAbs(r);\n+                                r = SunGraphicsEnvironment.toDeviceSpaceAbs(r);\n@@ -2340,1 +2335,1 @@\n-                            rect = AccessibilityGraphicsEnvironment.toDeviceSpaceAbs(rect);\n+                            rect = SunGraphicsEnvironment.toDeviceSpaceAbs(rect);\n@@ -7422,178 +7417,0 @@\n-\n-    \/**\n-     * A helper class to handle coordinate conversion between screen and user spaces.\n-     * See {@link sun.java2d.SunGraphicsEnvironment}\n-     *\/\n-    private static abstract class AccessibilityGraphicsEnvironment extends GraphicsEnvironment {\n-        \/**\n-         * Returns the graphics configuration which bounds contain the given point in the user's space.\n-         *\n-         * See {@link sun.java2d.SunGraphicsEnvironment#getGraphicsConfigurationAtPoint(GraphicsConfiguration, double, double)}\n-         *\n-         * @param  x the x coordinate of the given point in the user's space\n-         * @param  y the y coordinate of the given point in the user's space\n-         * @return the graphics configuration\n-         *\/\n-        public static GraphicsConfiguration getGraphicsConfigurationAtPoint(double x, double y) {\n-            GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-                    .getDefaultScreenDevice().getDefaultConfiguration();\n-            return getGraphicsConfigurationAtPoint(gc, x, y);\n-        }\n-\n-        \/**\n-         * Returns the graphics configuration which bounds contain the given point in the user's space.\n-         *\n-         * See {@link sun.java2d.SunGraphicsEnvironment#getGraphicsConfigurationAtPoint(GraphicsConfiguration, double, double)}\n-         *\n-         * @param  current the default configuration which is checked in the first\n-         *         place\n-         * @param  x the x coordinate of the given point in the user's space\n-         * @param  y the y coordinate of the given point in the user's space\n-         * @return the graphics configuration\n-         *\/\n-        public static GraphicsConfiguration getGraphicsConfigurationAtPoint(\n-                GraphicsConfiguration current, double x, double y) {\n-            if (containsUserSpacePoint(current, x, y)) {\n-                return current;\n-            }\n-            GraphicsEnvironment env = getLocalGraphicsEnvironment();\n-            for (GraphicsDevice device : env.getScreenDevices()) {\n-                GraphicsConfiguration config = device.getDefaultConfiguration();\n-                if (containsUserSpacePoint(config, x, y)) {\n-                    return config;\n-                }\n-            }\n-            return current;\n-        }\n-\n-        \/**\n-         * Returns the graphics configuration which bounds contain the given point in the device space.\n-         *\n-         * @param  x the x coordinate of the given point in the device space\n-         * @param  y the y coordinate of the given point in the device space\n-         * @return the graphics configuration\n-         *\/\n-        public static GraphicsConfiguration getGraphicsConfigurationAtDevicePoint(double x, double y) {\n-            GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-                    .getDefaultScreenDevice().getDefaultConfiguration();\n-            return getGraphicsConfigurationAtDevicePoint(gc, x, y);\n-        }\n-\n-        \/**\n-         * Returns the graphics configuration which bounds contain the given point in the device space.\n-         *\n-         * @param  current the default configuration which is checked in the first\n-         *         place\n-         * @param  x the x coordinate of the given point in the device space\n-         * @param  y the y coordinate of the given point in the device space\n-         * @return the graphics configuration\n-         *\/\n-        public static GraphicsConfiguration getGraphicsConfigurationAtDevicePoint(\n-                GraphicsConfiguration current, double x, double y) {\n-            if (containsDeviceSpacePoint(current, x, y)) {\n-                return current;\n-            }\n-            GraphicsEnvironment env = getLocalGraphicsEnvironment();\n-            for (GraphicsDevice device : env.getScreenDevices()) {\n-                GraphicsConfiguration config = device.getDefaultConfiguration();\n-                if (containsDeviceSpacePoint(config, x, y)) {\n-                    return config;\n-                }\n-            }\n-            return current;\n-        }\n-\n-        private static boolean containsDeviceSpacePoint(GraphicsConfiguration config, double x, double y) {\n-            Rectangle bounds = config.getBounds();\n-            bounds = toDeviceSpaceAbs(config, bounds.x, bounds.y, bounds.width, bounds.height);\n-            return bounds.contains(x, y);\n-        }\n-\n-        private static boolean containsUserSpacePoint(GraphicsConfiguration config, double x, double y) {\n-            Rectangle bounds = config.getBounds();\n-            return bounds.contains(x, y);\n-        }\n-\n-        \/**\n-         * Converts absolute coordinates from the device\n-         * space to the user's space space using appropriate device transformation.\n-         *\n-         * @param  x absolute x coordinate in the device's space\n-         * @param  y absolute y coordinate in the device's space\n-         * @return the corresponding coordinates in user's space\n-         *\/\n-        public static Point toUserSpace(int x, int y) {\n-            GraphicsConfiguration gc = getGraphicsConfigurationAtDevicePoint(x, y);\n-            return toUserSpace(gc, x, y);\n-        }\n-\n-        \/**\n-         * Converts absolute coordinates from the device\n-         * space to the user's space using passed graphics configuration.\n-         *\n-         * @param  gc the graphics configuration to be used for transformation\n-         * @param  x absolute x coordinate in the device's space\n-         * @param  y absolute y coordinate in the device's space\n-         * @return the corresponding coordinates in user's space\n-         *\/\n-        public static Point toUserSpace(GraphicsConfiguration gc, int x, int y) {\n-            AffineTransform tx = gc.getDefaultTransform();\n-            Rectangle screen = gc.getBounds();\n-            int userX = screen.x + clipRound((x - screen.x) \/ tx.getScaleX());\n-            int userY = screen.y + clipRound((y - screen.y) \/ tx.getScaleY());\n-            return new Point(userX, userY);\n-        }\n-\n-        \/**\n-         * Converts the rectangle from the user's space to the device space using\n-         * appropriate device transformation.\n-         *\n-         * See {@link sun.java2d.SunGraphicsEnvironment#toDeviceSpaceAbs(Rectangle)}\n-         *\n-         * @param  rect the rectangle in the user's space\n-         * @return the rectangle which uses device space (pixels)\n-         *\/\n-        public static Rectangle toDeviceSpaceAbs(Rectangle rect) {\n-            GraphicsConfiguration gc = getGraphicsConfigurationAtPoint(rect.x, rect.y);\n-            return toDeviceSpaceAbs(gc, rect.x, rect.y, rect.width, rect.height);\n-        }\n-\n-        \/**\n-         * Converts absolute coordinates (x, y) and the size (w, h) from the user's\n-         * space to the device space using passed graphics configuration.\n-         *\n-         * See {@link sun.java2d.SunGraphicsEnvironment#toDeviceSpaceAbs(GraphicsConfiguration, int, int, int, int)}\n-         *\n-         * @param  gc the graphics configuration to be used for transformation\n-         * @param  x absolute coordinate in the user's space\n-         * @param  y absolute coordinate in the user's space\n-         * @param  w the width in the user's space\n-         * @param  h the height in the user's space\n-         * @return the rectangle which uses device space (pixels)\n-         *\/\n-        public static Rectangle toDeviceSpaceAbs(GraphicsConfiguration gc,\n-                                                 int x, int y, int w, int h) {\n-            AffineTransform tx = gc.getDefaultTransform();\n-            Rectangle screen = gc.getBounds();\n-            return new Rectangle(\n-                    screen.x + clipRound((x - screen.x) * tx.getScaleX()),\n-                    screen.y + clipRound((y - screen.y) * tx.getScaleY()),\n-                    clipRound(w * tx.getScaleX()),\n-                    clipRound(h * tx.getScaleY())\n-            );\n-        }\n-\n-        \/**\n-         * See {@link sun.java2d.pipe.Region#clipRound}\n-         *\/\n-        private static int clipRound(final double coordinate) {\n-            final double newv = coordinate - 0.5;\n-            if (newv < Integer.MIN_VALUE) {\n-                return Integer.MIN_VALUE;\n-            }\n-            if (newv > Integer.MAX_VALUE) {\n-                return Integer.MAX_VALUE;\n-            }\n-            return (int) Math.ceil(newv);\n-        }\n-    }\n","filename":"src\/jdk.accessibility\/windows\/classes\/com\/sun\/java\/accessibility\/internal\/AccessBridge.java","additions":4,"deletions":187,"binary":false,"changes":191,"status":"modified"}]}