{"files":[{"patch":"@@ -224,2 +224,1 @@\n-        java.desktop,\n-        java.naming;\n+        java.desktop;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.lang.ref.Cleaner;\n@@ -37,1 +38,1 @@\n-import jdk.internal.ref.CleanerFactory;\n+import java.lang.ref.Reference;\n@@ -46,0 +47,1 @@\n+    private static final Cleaner LDAP_CLEANER = Cleaner.create();\n@@ -56,2 +58,4 @@\n-    \/* This class maintains the pieces of state that need (or are needed for)\n-     * cleanup.\n+    \/* This class maintains the pieces of state that need to be cleaned up (or\n+     * are needed for cleanup). It gets registered with Cleaner to perform cleanup.\n+     * Because the state is mutable, synchronization is used to ensure that all\n+     * updates made by the program thread are seen by the cleanup thread.\n@@ -60,0 +64,1 @@\n+        \/\/ Only update these variables using the set* methods below\n@@ -70,0 +75,4 @@\n+        private synchronized void setRes(LdapResult newRes) { this.res = newRes; }\n+        private synchronized void setHomeCtx(LdapCtx newCtx) { this.homeCtx = newCtx; }\n+        private synchronized void setEnumClnt(LdapClient newClnt) { this.enumClnt = newClnt; }\n+\n@@ -71,1 +80,1 @@\n-        public void run() {\n+        public synchronized void run() {\n@@ -73,2 +82,3 @@\n-                assert homeCtx != null;\n-                enumClnt.clearSearchReply(res, homeCtx.reqCtls);\n+                if (homeCtx != null) {\n+                    enumClnt.clearSearchReply(res, homeCtx.reqCtls);\n+                }\n@@ -88,1 +98,1 @@\n-    \/\/ access to the LdapCtx in the CleaningAction.\n+    \/\/ access to the LdapCtx in the EnumCtx.\n@@ -134,1 +144,1 @@\n-            this.cleanable = CleanerFactory.cleaner().register(this, enumCtx);\n+            this.cleanable = LDAP_CLEANER.register(this, enumCtx);\n@@ -163,0 +173,7 @@\n+        try {\n+            LdapResult newRes = homeCtx().getSearchReply(enumCtx.enumClnt, enumCtx.res);\n+            enumCtx.setRes(newRes);\n+            if (enumCtx.res == null) {\n+                limit = posn = 0;\n+                return;\n+            }\n@@ -164,9 +181,3 @@\n-        enumCtx.res = homeCtx().getSearchReply(enumCtx.enumClnt, enumCtx.res);\n-        if (enumCtx.res == null) {\n-            limit = posn = 0;\n-            return;\n-        }\n-\n-        entries = enumCtx.res.entries;\n-        limit = (entries == null) ? 0 : entries.size(); \/\/ handle empty set\n-        posn = 0; \/\/ reset\n+            entries = enumCtx.res.entries;\n+            limit = (entries == null) ? 0 : entries.size(); \/\/ handle empty set\n+            posn = 0; \/\/ reset\n@@ -174,5 +185,5 @@\n-        \/\/ minimize the number of calls to processReturnCode()\n-        \/\/ (expensive when batchSize is small and there are many results)\n-        if ((enumCtx.res.status != LdapClient.LDAP_SUCCESS) ||\n-            ((enumCtx.res.status == LdapClient.LDAP_SUCCESS) &&\n-                (enumCtx.res.referrals != null))) {\n+            \/\/ minimize the number of calls to processReturnCode()\n+            \/\/ (expensive when batchSize is small and there are many results)\n+            if ((enumCtx.res.status != LdapClient.LDAP_SUCCESS) ||\n+                ((enumCtx.res.status == LdapClient.LDAP_SUCCESS) &&\n+                    (enumCtx.res.referrals != null))) {\n@@ -180,3 +191,3 @@\n-            try {\n-                \/\/ convert referrals into a chain of LdapReferralException\n-                homeCtx().processReturnCode(enumCtx.res, listArg);\n+                try {\n+                    \/\/ convert referrals into a chain of LdapReferralException\n+                    homeCtx().processReturnCode(enumCtx.res, listArg);\n@@ -184,2 +195,2 @@\n-            } catch (LimitExceededException | PartialResultException e) {\n-                setNamingException(e);\n+                } catch (LimitExceededException | PartialResultException e) {\n+                    setNamingException(e);\n@@ -187,0 +198,1 @@\n+                }\n@@ -188,1 +200,0 @@\n-        }\n@@ -190,6 +201,8 @@\n-        \/\/ merge any newly received referrals with any current referrals\n-        if (enumCtx.res.refEx != null) {\n-            if (refEx == null) {\n-                refEx = enumCtx.res.refEx;\n-            } else {\n-                refEx = refEx.appendUnprocessedReferrals(enumCtx.res.refEx);\n+            \/\/ merge any newly received referrals with any current referrals\n+            if (enumCtx.res.refEx != null) {\n+                if (refEx == null) {\n+                    refEx = enumCtx.res.refEx;\n+                } else {\n+                    refEx = refEx.appendUnprocessedReferrals(enumCtx.res.refEx);\n+                }\n+                enumCtx.res.refEx = null; \/\/ reset\n@@ -197,2 +210,0 @@\n-            enumCtx.res.refEx = null; \/\/ reset\n-        }\n@@ -200,2 +211,6 @@\n-        if (enumCtx.res.resControls != null) {\n-            homeCtx().respCtls = enumCtx.res.resControls;\n+            if (enumCtx.res.resControls != null) {\n+                homeCtx().respCtls = enumCtx.res.resControls;\n+            }\n+        } finally {\n+            \/\/ Ensure Cleaner does not run until after this method completes\n+            Reference.reachabilityFence(this);\n@@ -346,0 +361,5 @@\n+        try {\n+            if ((refEx != null) &&\n+                (refEx.hasMoreReferrals() ||\n+                 refEx.hasMoreReferralExceptions()\n+                    && !(errEx instanceof LimitExceededException))) {\n@@ -347,4 +367,3 @@\n-        if ((refEx != null) &&\n-            (refEx.hasMoreReferrals() ||\n-             refEx.hasMoreReferralExceptions()\n-                && !(errEx instanceof LimitExceededException))) {\n+                if (homeCtx().handleReferrals == LdapClient.LDAP_REF_THROW) {\n+                    throw (NamingException)(refEx.fillInStackTrace());\n+                }\n@@ -352,3 +371,2 @@\n-            if (homeCtx().handleReferrals == LdapClient.LDAP_REF_THROW) {\n-                throw (NamingException)(refEx.fillInStackTrace());\n-            }\n+                \/\/ process the referrals sequentially\n+                while (true) {\n@@ -356,2 +374,3 @@\n-            \/\/ process the referrals sequentially\n-            while (true) {\n+                    LdapReferralContext refCtx =\n+                        (LdapReferralContext)refEx.getReferralContext(\n+                        homeCtx().envprops, homeCtx().reqCtls);\n@@ -359,3 +378,1 @@\n-                LdapReferralContext refCtx =\n-                    (LdapReferralContext)refEx.getReferralContext(\n-                    homeCtx().envprops, homeCtx().reqCtls);\n+                    try {\n@@ -363,1 +380,2 @@\n-                try {\n+                        update(getReferredResults(refCtx));\n+                        break;\n@@ -365,2 +383,1 @@\n-                    update(getReferredResults(refCtx));\n-                    break;\n+                    } catch (LdapReferralException re) {\n@@ -368,1 +385,6 @@\n-                } catch (LdapReferralException re) {\n+                        \/\/ record a previous exception\n+                        if (errEx == null) {\n+                            errEx = re.getNamingException();\n+                        }\n+                        refEx = re;\n+                        continue;\n@@ -370,3 +392,3 @@\n-                    \/\/ record a previous exception\n-                    if (errEx == null) {\n-                        errEx = re.getNamingException();\n+                    } finally {\n+                        \/\/ Make sure we close referral context\n+                        refCtx.close();\n@@ -374,6 +396,0 @@\n-                    refEx = re;\n-                    continue;\n-\n-                } finally {\n-                    \/\/ Make sure we close referral context\n-                    refCtx.close();\n@@ -381,2 +397,1 @@\n-            }\n-            return hasMoreImpl();\n+                return hasMoreImpl();\n@@ -384,2 +399,2 @@\n-        } else {\n-            cleanup();\n+            } else {\n+                cleanup();\n@@ -387,2 +402,4 @@\n-            if (errEx != null) {\n-                throw errEx;\n+                if (errEx != null) {\n+                    throw errEx;\n+                }\n+                return (false);\n@@ -390,1 +407,3 @@\n-            return (false);\n+        } finally {\n+            \/\/ Ensure Cleaner does not run until after this method completes\n+            Reference.reachabilityFence(enumCtx);\n@@ -399,20 +418,26 @@\n-        \/\/ Cleanup previous context first\n-        homeCtx().decEnumCount();\n-\n-        \/\/ New enum will have already incremented enum count and recorded clnt\n-        enumCtx.homeCtx = ne.enumCtx.homeCtx;\n-        enumCtx.enumClnt = ne.enumCtx.enumClnt;\n-\n-        \/\/ ne's homeCtx is now referred to by state.homeCtx; we will decrement\n-        \/\/ its enum count later (via cleanup() or Cleaner).\n-        \/\/ Clear ne's reference to homeCtx so ne's Cleaner doesn't *also*\n-        \/\/ decrement the count.\n-        ne.enumCtx.homeCtx = null;\n-\n-        \/\/ Record rest of information from new enum\n-        posn = ne.posn;\n-        limit = ne.limit;\n-        enumCtx.res = ne.enumCtx.res;\n-        entries = ne.entries;\n-        refEx = ne.refEx;\n-        listArg = ne.listArg;\n+        try {\n+            \/\/ Cleanup previous context first\n+            homeCtx().decEnumCount();\n+\n+            \/\/ New enum will have already incremented enum count and recorded clnt\n+            enumCtx.setHomeCtx(ne.enumCtx.homeCtx);\n+            enumCtx.setEnumClnt(ne.enumCtx.enumClnt);\n+\n+            \/\/ 'this' and 'ne' now both refer to ne's homeCtx. 'this' will\n+            \/\/ decrement homeCtx's enum count later (via cleanup() or Cleaner).\n+            \/\/ Clear ne's reference to homeCtx so ne's Cleaner doesn't\n+            \/\/ *also* decrement the count.\n+            ne.enumCtx.setHomeCtx(null);\n+\n+            \/\/ Record rest of information from new enum\n+            posn = ne.posn;\n+            limit = ne.limit;\n+            enumCtx.setRes(ne.enumCtx.res);\n+            entries = ne.entries;\n+            refEx = ne.refEx;\n+            listArg = ne.listArg;\n+        } finally {\n+            \/\/ Ensure Cleaner does not run until after this method completes\n+            Reference.reachabilityFence(ne);\n+            Reference.reachabilityFence(this);\n+        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/AbstractLdapNamingEnumeration.java","additions":115,"deletions":90,"binary":false,"changes":205,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.ref.Reference;\n@@ -57,0 +58,3 @@\n+        try {\n+            Object obj = null;\n+            String atom = getAtom(dn);\n@@ -58,10 +62,12 @@\n-        Object obj = null;\n-        String atom = getAtom(dn);\n-\n-        if (attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME]) != null) {\n-            \/\/ serialized object or object reference\n-            try {\n-                PrivilegedExceptionAction<Object> pa = () -> Obj.decodeObject(attrs);\n-                obj = AccessController.doPrivileged(pa, acc);\n-            } catch (PrivilegedActionException e) {\n-                throw (NamingException)e.getException();\n+            if (attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME]) != null) {\n+                \/\/ serialized object or object reference\n+                try {\n+                    PrivilegedExceptionAction<Object> pa = () -> Obj.decodeObject(attrs);\n+                    obj = AccessController.doPrivileged(pa, acc);\n+                } catch (PrivilegedActionException e) {\n+                    throw (NamingException) e.getException();\n+                }\n+            }\n+            if (obj == null) {\n+                \/\/ DirContext object\n+                obj = new LdapCtx(homeCtx(), dn);\n@@ -69,5 +75,0 @@\n-        }\n-        if (obj == null) {\n-            \/\/ DirContext object\n-            obj = new LdapCtx(homeCtx(), dn);\n-        }\n@@ -75,2 +76,2 @@\n-        CompositeName cn = new CompositeName();\n-        cn.add(atom);\n+            CompositeName cn = new CompositeName();\n+            cn.add(atom);\n@@ -78,3 +79,3 @@\n-        try {\n-            obj = DirectoryManager.getObjectInstance(obj, cn, homeCtx(),\n-                homeCtx().envprops, attrs);\n+            try {\n+                obj = DirectoryManager.getObjectInstance(obj, cn, homeCtx(),\n+                    homeCtx().envprops, attrs);\n@@ -82,2 +83,2 @@\n-        } catch (NamingException e) {\n-            throw e;\n+            } catch (NamingException e) {\n+                throw e;\n@@ -85,7 +86,7 @@\n-        } catch (Exception e) {\n-            NamingException ne =\n-                new NamingException(\n-                        \"problem generating object using object factory\");\n-            ne.setRootCause(e);\n-            throw ne;\n-        }\n+            } catch (Exception e) {\n+                NamingException ne =\n+                    new NamingException(\n+                            \"problem generating object using object factory\");\n+                ne.setRootCause(e);\n+                throw ne;\n+            }\n@@ -93,6 +94,11 @@\n-        Binding binding;\n-        if (respCtls != null) {\n-           binding = new BindingWithControls(cn.toString(), obj,\n-                                homeCtx().convertControls(respCtls));\n-        } else {\n-            binding = new Binding(cn.toString(), obj);\n+            Binding binding;\n+            if (respCtls != null) {\n+                binding = new BindingWithControls(cn.toString(), obj,\n+                                     homeCtx().convertControls(respCtls));\n+            } else {\n+                binding = new Binding(cn.toString(), obj);\n+            }\n+            binding.setNameInNamespace(dn);\n+            return binding;\n+        } finally {\n+            Reference.reachabilityFence(this);\n@@ -100,2 +106,0 @@\n-        binding.setNameInNamespace(dn);\n-        return binding;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapBindingEnumeration.java","additions":41,"deletions":37,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\n+import java.lang.ref.Reference;\n@@ -49,0 +49,3 @@\n+        try {\n+            Attribute attr;\n+            String className = null;\n@@ -50,11 +53,8 @@\n-        Attribute attr;\n-        String className = null;\n-\n-        \/\/ use the Java classname if present\n-        if ((attr = attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME])) != null) {\n-            className = (String)attr.get();\n-        } else {\n-            className = defaultClassName;\n-        }\n-        CompositeName cn = new CompositeName();\n-        cn.add(getAtom(dn));\n+            \/\/ use the Java classname if present\n+            if ((attr = attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME])) != null) {\n+                className = (String) attr.get();\n+            } else {\n+                className = defaultClassName;\n+            }\n+            CompositeName cn = new CompositeName();\n+            cn.add(getAtom(dn));\n@@ -62,3 +62,3 @@\n-        NameClassPair ncp;\n-        if (respCtls != null) {\n-            ncp = new NameClassPairWithControls(\n+            NameClassPair ncp;\n+            if (respCtls != null) {\n+                ncp = new NameClassPairWithControls(\n@@ -67,2 +67,7 @@\n-        } else {\n-            ncp = new NameClassPair(cn.toString(), className);\n+            } else {\n+                ncp = new NameClassPair(cn.toString(), className);\n+            }\n+            ncp.setNameInNamespace(dn);\n+            return ncp;\n+        } finally {\n+            Reference.reachabilityFence(this);\n@@ -70,2 +75,0 @@\n-        ncp.setNameInNamespace(dn);\n-        return ncp;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapNamingEnumeration.java","additions":22,"deletions":19,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.ref.Reference;\n@@ -68,0 +69,2 @@\n+        try {\n+            Object obj = null;\n@@ -69,8 +72,3 @@\n-        Object obj = null;\n-\n-        String relStart;         \/\/ name relative to starting search context\n-        String relHome;          \/\/ name relative to homeCtx.currentDN\n-        boolean relative = true; \/\/ whether relative to currentDN\n-\n-        \/\/ need to strip off all but lowest component of dn\n-        \/\/ so that is relative to current context (currentDN)\n+            String relStart;         \/\/ name relative to starting search context\n+            String relHome;          \/\/ name relative to homeCtx.currentDN\n+            boolean relative = true; \/\/ whether relative to currentDN\n@@ -78,4 +76,2 @@\n-        try {\n-            Name parsed = new LdapName(dn);\n-            \/\/ System.err.println(\"dn string: \" + dn);\n-            \/\/ System.err.println(\"dn name: \" + parsed);\n+            \/\/ need to strip off all but lowest component of dn\n+            \/\/ so that is relative to current context (currentDN)\n@@ -83,4 +79,16 @@\n-            if (startName != null && parsed.startsWith(startName)) {\n-                relStart = parsed.getSuffix(startName.size()).toString();\n-                relHome = parsed.getSuffix(homeCtx().currentParsedDN.size()).toString();\n-            } else {\n+            try {\n+                Name parsed = new LdapName(dn);\n+                \/\/ System.err.println(\"dn string: \" + dn);\n+                \/\/ System.err.println(\"dn name: \" + parsed);\n+\n+                if (startName != null && parsed.startsWith(startName)) {\n+                    relStart = parsed.getSuffix(startName.size()).toString();\n+                    relHome = parsed.getSuffix(homeCtx().currentParsedDN.size()).toString();\n+                } else {\n+                    relative = false;\n+                    relHome = relStart =\n+                        LdapURL.toUrlString(homeCtx().hostname, homeCtx().port_number,\n+                        dn, homeCtx().hasLdapsScheme);\n+                }\n+            } catch (NamingException e) {\n+                \/\/ could not parse name\n@@ -92,21 +100,0 @@\n-        } catch (NamingException e) {\n-            \/\/ could not parse name\n-            relative = false;\n-            relHome = relStart =\n-                LdapURL.toUrlString(homeCtx().hostname, homeCtx().port_number,\n-                dn, homeCtx().hasLdapsScheme);\n-        }\n-\n-        \/\/ Name relative to search context\n-        CompositeName cn = new CompositeName();\n-        if (!relStart.isEmpty()) {\n-            cn.add(relStart);\n-        }\n-\n-        \/\/ Name relative to homeCtx\n-        CompositeName rcn = new CompositeName();\n-        if (!relHome.isEmpty()) {\n-            rcn.add(relHome);\n-        }\n-        \/\/System.err.println(\"relStart: \" + cn);\n-        \/\/System.err.println(\"relHome: \" + rcn);\n@@ -114,2 +101,5 @@\n-        \/\/ Fix attributes to be able to get schema\n-        homeCtx().setParents(attrs, rcn);\n+            \/\/ Name relative to search context\n+            CompositeName cn = new CompositeName();\n+            if (!relStart.isEmpty()) {\n+                cn.add(relStart);\n+            }\n@@ -117,2 +107,27 @@\n-        \/\/ only generate object when requested\n-        if (searchArgs.cons.getReturningObjFlag()) {\n+            \/\/ Name relative to homeCtx\n+            CompositeName rcn = new CompositeName();\n+            if (!relHome.isEmpty()) {\n+                rcn.add(relHome);\n+            }\n+            \/\/System.err.println(\"relStart: \" + cn);\n+            \/\/System.err.println(\"relHome: \" + rcn);\n+\n+            \/\/ Fix attributes to be able to get schema\n+            homeCtx().setParents(attrs, rcn);\n+\n+            \/\/ only generate object when requested\n+            if (searchArgs.cons.getReturningObjFlag()) {\n+\n+                if (attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME]) != null) {\n+                    \/\/ Entry contains Java-object attributes (ser\/ref object)\n+                    \/\/ serialized object or object reference\n+                    try {\n+                        PrivilegedExceptionAction<Object> pea = () -> Obj.decodeObject(attrs);\n+                        obj = AccessController.doPrivileged(pea, acc);\n+                    } catch (PrivilegedActionException e) {\n+                        throw (NamingException)e.getException();\n+                    }\n+                }\n+                if (obj == null) {\n+                    obj = new LdapCtx(homeCtx(), dn);\n+                }\n@@ -120,3 +135,1 @@\n-            if (attrs.get(Obj.JAVA_ATTRIBUTES[Obj.CLASSNAME]) != null) {\n-                \/\/ Entry contains Java-object attributes (ser\/ref object)\n-                \/\/ serialized object or object reference\n+                \/\/ Call getObjectInstance before removing unrequested attributes\n@@ -124,4 +137,12 @@\n-                    PrivilegedExceptionAction<Object> pea = () -> Obj.decodeObject(attrs);\n-                    obj = AccessController.doPrivileged(pea, acc);\n-                } catch (PrivilegedActionException e) {\n-                    throw (NamingException)e.getException();\n+                    \/\/ rcn is either relative to homeCtx or a fully qualified DN\n+                    obj = DirectoryManager.getObjectInstance(\n+                        obj, rcn, (relative ? homeCtx() : null),\n+                        homeCtx().envprops, attrs);\n+                } catch (NamingException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    NamingException ne =\n+                        new NamingException(\n+                                \"problem generating object using object factory\");\n+                    ne.setRootCause(e);\n+                    throw ne;\n@@ -129,20 +150,0 @@\n-            }\n-            if (obj == null) {\n-                obj = new LdapCtx(homeCtx(), dn);\n-            }\n-\n-            \/\/ Call getObjectInstance before removing unrequested attributes\n-            try {\n-                \/\/ rcn is either relative to homeCtx or a fully qualified DN\n-                obj = DirectoryManager.getObjectInstance(\n-                    obj, rcn, (relative ? homeCtx() : null),\n-                    homeCtx().envprops, attrs);\n-            } catch (NamingException e) {\n-                throw e;\n-            } catch (Exception e) {\n-                NamingException ne =\n-                    new NamingException(\n-                            \"problem generating object using object factory\");\n-                ne.setRootCause(e);\n-                throw ne;\n-            }\n@@ -150,3 +151,3 @@\n-            \/\/ remove Java attributes from result, if necessary\n-            \/\/ Even if CLASSNAME attr not there, there might be some\n-            \/\/ residual attributes\n+                \/\/ remove Java attributes from result, if necessary\n+                \/\/ Even if CLASSNAME attr not there, there might be some\n+                \/\/ residual attributes\n@@ -154,11 +155,12 @@\n-            String[] reqAttrs;\n-            if ((reqAttrs = searchArgs.reqAttrs) != null) {\n-                \/\/ create an attribute set for those requested\n-                Attributes rattrs = new BasicAttributes(true); \/\/ ignore case\n-                for (int i = 0; i < reqAttrs.length; i++) {\n-                    rattrs.put(reqAttrs[i], null);\n-                }\n-                for (int i = 0; i < Obj.JAVA_ATTRIBUTES.length; i++) {\n-                    \/\/ Remove Java-object attributes if not requested\n-                    if (rattrs.get(Obj.JAVA_ATTRIBUTES[i]) == null) {\n-                        attrs.remove(Obj.JAVA_ATTRIBUTES[i]);\n+                String[] reqAttrs;\n+                if ((reqAttrs = searchArgs.reqAttrs) != null) {\n+                    \/\/ create an attribute set for those requested\n+                    Attributes rattrs = new BasicAttributes(true); \/\/ ignore case\n+                    for (int i = 0; i < reqAttrs.length; i++) {\n+                        rattrs.put(reqAttrs[i], null);\n+                    }\n+                    for (int i = 0; i < Obj.JAVA_ATTRIBUTES.length; i++) {\n+                        \/\/ Remove Java-object attributes if not requested\n+                        if (rattrs.get(Obj.JAVA_ATTRIBUTES[i]) == null) {\n+                            attrs.remove(Obj.JAVA_ATTRIBUTES[i]);\n+                        }\n@@ -167,1 +169,0 @@\n-            }\n@@ -169,1 +170,1 @@\n-        }\n+            }\n@@ -171,15 +172,20 @@\n-        \/*\n-         * name in search result is either the stringified composite name\n-         * relative to the search context that can be passed directly to\n-         * methods of the search context, or the fully qualified DN\n-         * which can be used with the initial context.\n-         *\/\n-        SearchResult sr;\n-        if (respCtls != null) {\n-            sr = new SearchResultWithControls(\n-                (relative ? cn.toString() : relStart), obj, attrs,\n-                relative, homeCtx().convertControls(respCtls));\n-        } else {\n-            sr = new SearchResult(\n-                (relative ? cn.toString() : relStart),\n-                obj, attrs, relative);\n+            \/*\n+             * name in search result is either the stringified composite name\n+             * relative to the search context that can be passed directly to\n+             * methods of the search context, or the fully qualified DN\n+             * which can be used with the initial context.\n+             *\/\n+            SearchResult sr;\n+            if (respCtls != null) {\n+                sr = new SearchResultWithControls(\n+                    (relative ? cn.toString() : relStart), obj, attrs,\n+                    relative, homeCtx().convertControls(respCtls));\n+            } else {\n+                sr = new SearchResult(\n+                    (relative ? cn.toString() : relStart),\n+                    obj, attrs, relative);\n+            }\n+            sr.setNameInNamespace(dn);\n+            return sr;\n+        } finally {\n+            Reference.reachabilityFence(this);\n@@ -187,2 +193,0 @@\n-        sr.setNameInNamespace(dn);\n-        return sr;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapSearchEnumeration.java","additions":105,"deletions":101,"binary":false,"changes":206,"status":"modified"}]}