{"files":[{"patch":"@@ -101,1 +101,1 @@\n-    \/\/ access to the LdapCtx in the EnumCtx.\n+    \/\/ access to the LdapCtx within the EnumCtx.\n@@ -167,6 +167,3 @@\n-                \/\/ An interesting one.\n-\n-                \/\/ A similar case to nextImpl(), except in this case, next()\n-                \/\/ *is* overridable. Add fences here; otherwise, next() could\n-                \/\/ be incorrectly overridden in the future to access the\n-                \/\/ cleanable state without the proper fences.\n+                \/\/ See comment in nextImpl(). This is similar, but in this case, next()\n+                \/\/ *is* overridable. Fences are included here, in case next() is\n+                \/\/ overridden to access the cleanable state without the proper fences.\n@@ -182,18 +179,0 @@\n-            \/\/ Re: automagically adding fences someday...\n-            \/\/ Methods which do explicit cleanup() like this are...interesting. If\n-            \/\/ fences are added after *every* method call, in this case the\n-            \/\/ fences would \"happen\" after cleanup had already happened.\n-            \/\/\n-            \/\/ Is there a way for such an automatically-added reachabilityFence\n-            \/\/ to cause problems? Could the method require some object to\n-            \/\/ became unreachable? I don't think so: the reachabilityFence keeps\n-            \/\/ 'this' from becoming unreachable, and a method could not reset the\n-            \/\/ value of 'this', e.g. to null, to cause it to become unreachable.\n-            \/\/\n-            \/\/ In the cases like this of an explicit call to cleanup(),\n-            \/\/ the cleanup happens on the main\/program thread, not on the cleaner\n-            \/\/ thread. So there's no visibility issues with the cleaner thread\n-            \/\/ (but perhaps still could be with some other thread?).\n-            \/\/\n-            \/\/ So automatic reachability and full fences in this would be strange,\n-            \/\/ but not harmful AFAICT.\n@@ -210,1 +189,1 @@\n-                \/\/ See nextElement(), above - same situation\n+                \/\/ Same situation as nextElement() - see comment above\n@@ -378,3 +357,2 @@\n-        \/\/ No fences, but another interesting one.\n-        \/\/ nextAux() (source just below) has its own fences. The only other thing\n-        \/\/ this method does is to *call cleanup*.\n+        \/\/ No fences here. nextAux() (source just below) has its own fences. The\n+        \/\/ only other thing this method does is call cleanup().\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/AbstractLdapNamingEnumeration.java","additions":7,"deletions":29,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        \/\/ No fences here?\n+        \/\/ No fences here for now.\n@@ -210,1 +210,1 @@\n-        \/\/ No fences here?\n+        \/\/ No fences here for now.\n@@ -237,1 +237,1 @@\n-        \/\/ No fences here?\n+        \/\/ No fences here for now.\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapSearchEnumeration.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-            if (!gc.await(() -> whm.size() == 0)) {\n+            if (!gc.wait(() -> whm.size() == 0)) {\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/CleanerTests\/LdapEnumeration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}