{"files":[{"patch":"@@ -1332,1 +1332,0 @@\n-      strcmp(key, \"jdk.module.illegalAccess\") == 0 ||\n@@ -2063,2 +2062,1 @@\n-  assert(is_internal_module_property(prop_name) ||\n-         strcmp(prop_name, \"jdk.module.illegalAccess\") == 0, \"unknown module property: '%s'\", prop_name);\n+  assert(is_internal_module_property(prop_name), \"unknown module property: '%s'\", prop_name);\n@@ -2429,4 +2427,3 @@\n-      warning(\"Option --illegal-access is deprecated and will be removed in a future release.\");\n-      if (!create_module_property(\"jdk.module.illegalAccess\", tail, ExternalProperty)) {\n-        return JNI_ENOMEM;\n-      }\n+      char version[256];\n+      JDK_Version::jdk(17).to_string(version, sizeof(version));\n+      warning(\"Ignoring option %s; support was removed in %s\", option->optionString, version);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,0 @@\n-import jdk.internal.misc.VM;\n-import jdk.internal.module.IllegalAccessLogger;\n@@ -906,21 +904,2 @@\n-        if (implIsExportedOrOpen(pn, other, open)) {\n-\n-            \/\/ if the package is exported\/open for illegal access then we need\n-            \/\/ to record that it has also been exported\/opened reflectively so\n-            \/\/ that the IllegalAccessLogger doesn't emit a warning.\n-            boolean needToAdd = false;\n-            if (!other.isNamed()) {\n-                IllegalAccessLogger l = IllegalAccessLogger.illegalAccessLogger();\n-                if (l != null) {\n-                    if (open) {\n-                        needToAdd = l.isOpenForIllegalAccess(this, pn);\n-                    } else {\n-                        needToAdd = l.isExportedForIllegalAccess(this, pn);\n-                    }\n-                }\n-            }\n-            if (!needToAdd) {\n-                \/\/ nothing to do\n-                return;\n-            }\n-        }\n+        if (implIsExportedOrOpen(pn, other, open))\n+            return;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.module.IllegalAccessLogger;\n@@ -265,7 +264,0 @@\n-\n-            if (!callerModule.isNamed() && targetModule.isNamed()) {\n-                IllegalAccessLogger logger = IllegalAccessLogger.illegalAccessLogger();\n-                if (logger != null) {\n-                    logger.logIfOpenedForIllegalAccess(caller, targetClass);\n-                }\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import jdk.internal.module.IllegalAccessLogger;\n@@ -327,1 +326,0 @@\n-                logIfExportedForIllegalAccess(caller, declaringClass);\n@@ -335,1 +333,0 @@\n-                logIfExportedForIllegalAccess(caller, declaringClass);\n@@ -342,1 +339,0 @@\n-            logIfOpenedForIllegalAccess(caller, declaringClass);\n@@ -376,24 +372,0 @@\n-    private void logIfOpenedForIllegalAccess(Class<?> caller, Class<?> declaringClass) {\n-        Module callerModule = caller.getModule();\n-        Module targetModule = declaringClass.getModule();\n-        \/\/ callerModule is null during early startup\n-        if (callerModule != null && !callerModule.isNamed() && targetModule.isNamed()) {\n-            IllegalAccessLogger logger = IllegalAccessLogger.illegalAccessLogger();\n-            if (logger != null) {\n-                logger.logIfOpenedForIllegalAccess(caller, declaringClass, this::toShortString);\n-            }\n-        }\n-    }\n-\n-    private void logIfExportedForIllegalAccess(Class<?> caller, Class<?> declaringClass) {\n-        Module callerModule = caller.getModule();\n-        Module targetModule = declaringClass.getModule();\n-        \/\/ callerModule is null during early startup\n-        if (callerModule != null && !callerModule.isNamed() && targetModule.isNamed()) {\n-            IllegalAccessLogger logger = IllegalAccessLogger.illegalAccessLogger();\n-            if (logger != null) {\n-                logger.logIfExportedForIllegalAccess(caller, declaringClass, this::toShortString);\n-            }\n-        }\n-    }\n-\n@@ -733,3 +705,0 @@\n-        \/\/ access okay\n-        logIfExportedForIllegalAccess(caller, memberClass);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,10 +71,0 @@\n-\n-    @Override\n-    public  Map<String, Set<String>> concealedPackagesToOpen() {\n-        return Map.of();\n-    }\n-\n-    @Override\n-    public  Map<String, Set<String>> exportedPackagesToOpen() {\n-        return Map.of();\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ExplodedSystemModules.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,407 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.module;\n-\n-import java.io.PrintStream;\n-import java.lang.invoke.MethodHandles;\n-import java.net.URL;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.StringJoiner;\n-import java.util.WeakHashMap;\n-import java.util.function.Supplier;\n-import static java.util.Collections.*;\n-\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n-\/**\n- * Supports logging of access to members of exported and concealed packages\n- * that are opened to code in unnamed modules for illegal access.\n- *\/\n-\n-public final class IllegalAccessLogger {\n-\n-    \/**\n-     * Logger modes\n-     *\/\n-    public enum Mode {\n-        \/**\n-         * Prints a warning when an illegal access succeeds and then\n-         * discards the logger so that there is no further output.\n-         *\/\n-        ONESHOT,\n-        \/**\n-         * Print warnings when illegal access succeeds\n-         *\/\n-        WARN,\n-        \/**\n-         * Prints warnings and a stack trace when illegal access succeeds\n-         *\/\n-        DEBUG,\n-    }\n-\n-    \/**\n-     * A builder for IllegalAccessLogger objects.\n-     *\/\n-    public static class Builder {\n-        private final Mode mode;\n-        private final PrintStream warningStream;\n-        private final Map<Module, Set<String>> moduleToConcealedPackages;\n-        private final Map<Module, Set<String>> moduleToExportedPackages;\n-        private boolean complete;\n-\n-        private void ensureNotComplete() {\n-            if (complete) throw new IllegalStateException();\n-        }\n-\n-        \/**\n-         * Creates a builder.\n-         *\/\n-        public Builder(Mode mode, PrintStream warningStream) {\n-            this.mode = mode;\n-            this.warningStream = warningStream;\n-            this.moduleToConcealedPackages = new HashMap<>();\n-            this.moduleToExportedPackages = new HashMap<>();\n-        }\n-\n-        \/**\n-         * Adding logging of reflective-access to any member of a type in\n-         * otherwise concealed packages.\n-         *\/\n-        public Builder logAccessToConcealedPackages(Module m, Set<String> packages) {\n-            ensureNotComplete();\n-            moduleToConcealedPackages.put(m, unmodifiableSet(packages));\n-            return this;\n-        }\n-\n-        \/**\n-         * Adding logging of reflective-access to non-public members\/types in\n-         * otherwise exported (not open) packages.\n-         *\/\n-        public Builder logAccessToExportedPackages(Module m, Set<String> packages) {\n-            ensureNotComplete();\n-            moduleToExportedPackages.put(m, unmodifiableSet(packages));\n-            return this;\n-        }\n-\n-        \/**\n-         * Builds the IllegalAccessLogger and sets it as the system-wide logger.\n-         *\/\n-        public void complete() {\n-            Map<Module, Set<String>> map1 = unmodifiableMap(moduleToConcealedPackages);\n-            Map<Module, Set<String>> map2 = unmodifiableMap(moduleToExportedPackages);\n-            logger = new IllegalAccessLogger(mode, warningStream, map1, map2);\n-            complete = true;\n-        }\n-    }\n-\n-    \/\/ need access to java.lang.Module\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n-\n-    \/\/ system-wide IllegalAccessLogger\n-    private static volatile IllegalAccessLogger logger;\n-\n-    \/\/ logger mode\n-    private final Mode mode;\n-\n-    \/\/ the print stream to send the warnings\n-    private final PrintStream warningStream;\n-\n-    \/\/ module -> packages open for illegal access\n-    private final Map<Module, Set<String>> moduleToConcealedPackages;\n-    private final Map<Module, Set<String>> moduleToExportedPackages;\n-\n-    \/\/ caller -> usages\n-    private final Map<Class<?>, Usages> callerToUsages = new WeakHashMap<>();\n-\n-    private IllegalAccessLogger(Mode mode,\n-                                PrintStream warningStream,\n-                                Map<Module, Set<String>> moduleToConcealedPackages,\n-                                Map<Module, Set<String>> moduleToExportedPackages)\n-    {\n-        this.mode = mode;\n-        this.warningStream = warningStream;\n-        this.moduleToConcealedPackages = moduleToConcealedPackages;\n-        this.moduleToExportedPackages = moduleToExportedPackages;\n-    }\n-\n-    \/**\n-     * Returns the system-wide IllegalAccessLogger or {@code null} if there is\n-     * no logger.\n-     *\/\n-    public static IllegalAccessLogger illegalAccessLogger() {\n-        return logger;\n-    }\n-\n-    \/**\n-     * Returns true if the module exports a concealed package for illegal\n-     * access.\n-     *\/\n-    public boolean isExportedForIllegalAccess(Module module, String pn) {\n-        Set<String> packages = moduleToConcealedPackages.get(module);\n-        if (packages != null && packages.contains(pn))\n-            return true;\n-        return false;\n-    }\n-\n-    \/**\n-     * Returns true if the module opens a concealed or exported package for\n-     * illegal access.\n-     *\/\n-    public boolean isOpenForIllegalAccess(Module module, String pn) {\n-        if (isExportedForIllegalAccess(module, pn))\n-            return true;\n-        Set<String> packages = moduleToExportedPackages.get(module);\n-        if (packages != null && packages.contains(pn))\n-            return true;\n-        return false;\n-    }\n-\n-    \/**\n-     * Logs access to the member of a target class by a caller class if the class\n-     * is in a package that is exported for illegal access.\n-     *\n-     * The {@code whatSupplier} supplies the message that describes the member.\n-     *\/\n-    public void logIfExportedForIllegalAccess(Class<?> caller,\n-                                              Class<?> target,\n-                                              Supplier<String> whatSupplier) {\n-        Module targetModule = target.getModule();\n-        String targetPackage = target.getPackageName();\n-        if (isExportedForIllegalAccess(targetModule, targetPackage)) {\n-            Module callerModule = caller.getModule();\n-            if (!JLA.isReflectivelyExported(targetModule, targetPackage, callerModule)) {\n-                log(caller, whatSupplier.get());\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Logs access to the member of a target class by a caller class if the class\n-     * is in a package that is opened for illegal access.\n-     *\n-     * The {@code what} parameter supplies the message that describes the member.\n-     *\/\n-    public void logIfOpenedForIllegalAccess(Class<?> caller,\n-                                            Class<?> target,\n-                                            Supplier<String> whatSupplier) {\n-        Module targetModule = target.getModule();\n-        String targetPackage = target.getPackageName();\n-        if (isOpenForIllegalAccess(targetModule, targetPackage)) {\n-            Module callerModule = caller.getModule();\n-            if (!JLA.isReflectivelyOpened(targetModule, targetPackage, callerModule)) {\n-                log(caller, whatSupplier.get());\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Logs access by caller lookup if the target class is in a package that is\n-     * opened for illegal access.\n-     *\/\n-    public void logIfOpenedForIllegalAccess(MethodHandles.Lookup caller, Class<?> target) {\n-        Module targetModule = target.getModule();\n-        String targetPackage = target.getPackageName();\n-        if (isOpenForIllegalAccess(targetModule, targetPackage)) {\n-            Class<?> callerClass = caller.lookupClass();\n-            Module callerModule = callerClass.getModule();\n-            if (!JLA.isReflectivelyOpened(targetModule, targetPackage, callerModule)) {\n-                URL url = codeSource(callerClass);\n-                final String source;\n-                if (url == null) {\n-                    source = callerClass.getName();\n-                } else {\n-                    source = callerClass.getName() + \" (\" + url + \")\";\n-                }\n-                log(callerClass, target.getName(), () ->\n-                    \"WARNING: Illegal reflective access using Lookup on \" + source\n-                    + \" to \" + target);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Logs access by a caller class. The {@code what} parameter describes\n-     * the member being accessed.\n-     *\/\n-    private void log(Class<?> caller, String what) {\n-        log(caller, what, () -> {\n-            URL url = codeSource(caller);\n-            String source = caller.getName();\n-            if (url != null)\n-                source += \" (\" + url + \")\";\n-            return \"WARNING: Illegal reflective access by \" + source + \" to \" + what;\n-        });\n-    }\n-\n-    \/**\n-     * Log access by a caller. The {@code what} parameter describes the class or\n-     * member that is being accessed. The {@code msgSupplier} supplies the log\n-     * message.\n-     *\n-     * To reduce output, this method only logs the access if it hasn't been seen\n-     * previously. \"Seen previously\" is implemented as a map of caller class -> Usage,\n-     * where a Usage is the \"what\" and a hash of the stack trace. The map has weak\n-     * keys so it can be expunged when the caller is GC'ed\/unloaded.\n-     *\/\n-    private void log(Class<?> caller, String what, Supplier<String> msgSupplier) {\n-        if (mode == Mode.ONESHOT) {\n-            synchronized (IllegalAccessLogger.class) {\n-                \/\/ discard the system wide logger\n-                if (logger == null)\n-                    return;\n-                logger = null;\n-            }\n-            warningStream.println(loudWarning(caller, msgSupplier));\n-            return;\n-        }\n-\n-        \/\/ stack trace without the top-most frames in java.base\n-        List<StackWalker.StackFrame> stack = StackWalkerHolder.INSTANCE.walk(s ->\n-            s.dropWhile(this::isJavaBase)\n-             .limit(32)\n-             .toList()\n-        );\n-\n-        \/\/ record usage if this is the first (or not recently recorded)\n-        Usage u = new Usage(what, hash(stack));\n-        boolean added;\n-        synchronized (this) {\n-            added = callerToUsages.computeIfAbsent(caller, k -> new Usages()).add(u);\n-        }\n-\n-        \/\/ print warning if this is the first (or not a recent) usage\n-        if (added) {\n-            String msg = msgSupplier.get();\n-            if (mode == Mode.DEBUG) {\n-                StringBuilder sb = new StringBuilder(msg);\n-                stack.forEach(f ->\n-                    sb.append(System.lineSeparator()).append(\"\\tat \" + f)\n-                );\n-                msg = sb.toString();\n-            }\n-            warningStream.println(msg);\n-        }\n-    }\n-\n-    \/**\n-     * Returns the code source for the given class or null if there is no code source\n-     *\/\n-    private URL codeSource(Class<?> clazz) {\n-        PrivilegedAction<ProtectionDomain> pa = clazz::getProtectionDomain;\n-        CodeSource cs = AccessController.doPrivileged(pa).getCodeSource();\n-        return (cs != null) ? cs.getLocation() : null;\n-    }\n-\n-    private String loudWarning(Class<?> caller,  Supplier<String> msgSupplier) {\n-        StringJoiner sj = new StringJoiner(System.lineSeparator());\n-        sj.add(\"WARNING: An illegal reflective access operation has occurred\");\n-        sj.add(msgSupplier.get());\n-        sj.add(\"WARNING: Please consider reporting this to the maintainers of \"\n-                + caller.getName());\n-        sj.add(\"WARNING: Use --illegal-access=warn to enable warnings of further\"\n-                + \" illegal reflective access operations\");\n-        sj.add(\"WARNING: All illegal access operations will be denied in a\"\n-                + \" future release\");\n-        return sj.toString();\n-    }\n-\n-    private static class StackWalkerHolder {\n-        static final StackWalker INSTANCE;\n-        static {\n-            PrivilegedAction<StackWalker> pa = () ->\n-                StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-            INSTANCE = AccessController.doPrivileged(pa);\n-        }\n-    }\n-\n-    \/**\n-     * Returns true if the stack frame is for a class in java.base.\n-     *\/\n-    private boolean isJavaBase(StackWalker.StackFrame frame) {\n-        Module caller = frame.getDeclaringClass().getModule();\n-        return \"java.base\".equals(caller.getName());\n-    }\n-\n-    \/**\n-     * Computes a hash code for the give stack frames. The hash code is based\n-     * on the class, method name, and BCI.\n-     *\/\n-    private int hash(List<StackWalker.StackFrame> stack) {\n-        int hash = 0;\n-        for (StackWalker.StackFrame frame : stack) {\n-            hash = (31 * hash) + Objects.hash(frame.getDeclaringClass(),\n-                                              frame.getMethodName(),\n-                                              frame.getByteCodeIndex());\n-        }\n-        return hash;\n-    }\n-\n-    private static class Usage {\n-        private final String what;\n-        private final int stack;\n-        Usage(String what, int stack) {\n-            this.what = what;\n-            this.stack = stack;\n-        }\n-        @Override\n-        public int hashCode() {\n-            return what.hashCode() ^ stack;\n-        }\n-        @Override\n-        public boolean equals(Object ob) {\n-            if (ob instanceof Usage) {\n-                Usage that = (Usage)ob;\n-                return what.equals(that.what) && stack == (that.stack);\n-            } else {\n-                return false;\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings(\"serial\")\n-    private static class Usages extends LinkedHashMap<Usage, Boolean> {\n-        Usages() { }\n-        boolean add(Usage u) {\n-            return (putIfAbsent(u, Boolean.TRUE) == null);\n-        }\n-        @Override\n-        protected boolean removeEldestEntry(Map.Entry<Usage, Boolean> oldest) {\n-            \/\/ prevent map growing too big, say where a utility class\n-            \/\/ is used by generated code to do illegal access\n-            return size() > 16;\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/IllegalAccessLogger.java","additions":0,"deletions":407,"binary":false,"changes":407,"status":"deleted"},{"patch":"@@ -1,130 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.module;\n-\n-import sun.nio.cs.UTF_8;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.UncheckedIOException;\n-import java.lang.module.ModuleDescriptor;\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-\/**\n- * Generates the maps of concealed and exported packages to open at run-time.\n- *\n- * This is used at run-time for exploded builds, and at link-time to generate\n- * the maps for the system modules in the run-time image.\n- *\/\n-\n-public class IllegalAccessMaps {\n-    private final Map<String, Set<String>> concealedPackagesToOpen;\n-    private final Map<String, Set<String>> exportedPackagesToOpen;\n-\n-    private IllegalAccessMaps(Map<String, Set<String>> map1,\n-                              Map<String, Set<String>> map2) {\n-        this.concealedPackagesToOpen = map1;\n-        this.exportedPackagesToOpen = map2;\n-    }\n-\n-    \/**\n-     * Returns the map of concealed packages to open. The map key is the\n-     * module name, the value is the set of concealed packages to open.\n-     *\/\n-    public Map<String, Set<String>> concealedPackagesToOpen() {\n-        return concealedPackagesToOpen;\n-    }\n-\n-    \/**\n-     * Returns the map of exported packages to open. The map key is the\n-     * module name, the value is the set of exported packages to open.\n-     *\/\n-    public Map<String, Set<String>> exportedPackagesToOpen() {\n-        return exportedPackagesToOpen;\n-    }\n-\n-    \/**\n-     * Generate the maps of module to concealed and exported packages for\n-     * the system modules that are observable with the given module finder.\n-     *\/\n-    public static IllegalAccessMaps generate(ModuleFinder finder) {\n-        Map<String, ModuleDescriptor> map = new HashMap<>();\n-        finder.findAll().stream()\n-            .map(ModuleReference::descriptor)\n-            .forEach(md -> md.packages().forEach(pn -> map.putIfAbsent(pn, md)));\n-\n-        Map<String, Set<String>> concealedPackagesToOpen = new HashMap<>();\n-        Map<String, Set<String>> exportedPackagesToOpen = new HashMap<>();\n-\n-        String rn = \"jdk8_packages.dat\";\n-        InputStream in = IllegalAccessMaps.class.getResourceAsStream(rn);\n-        if (in == null) {\n-            throw new InternalError(rn + \" not found\");\n-        }\n-        try (BufferedReader br = new BufferedReader(\n-                new InputStreamReader(in, UTF_8.INSTANCE)))\n-        {\n-            br.lines()\n-                .filter(line -> !line.isEmpty() && !line.startsWith(\"#\"))\n-                .forEach(pn -> {\n-                    ModuleDescriptor descriptor = map.get(pn);\n-                    if (descriptor != null && !isOpen(descriptor, pn)) {\n-                        String name = descriptor.name();\n-                        if (isExported(descriptor, pn)) {\n-                            exportedPackagesToOpen.computeIfAbsent(name,\n-                                    k -> new HashSet<>()).add(pn);\n-                        } else {\n-                            concealedPackagesToOpen.computeIfAbsent(name,\n-                                    k -> new HashSet<>()).add(pn);\n-                        }\n-                    }\n-                });\n-\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-\n-        return new IllegalAccessMaps(concealedPackagesToOpen, exportedPackagesToOpen);\n-    }\n-\n-    private static boolean isExported(ModuleDescriptor descriptor, String pn) {\n-        return descriptor.exports()\n-                .stream()\n-                .anyMatch(e -> e.source().equals(pn) && !e.isQualified());\n-    }\n-\n-    private static boolean isOpen(ModuleDescriptor descriptor, String pn) {\n-        return descriptor.opens()\n-                .stream()\n-                .anyMatch(e -> e.source().equals(pn) && !e.isQualified());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/IllegalAccessMaps.java","additions":0,"deletions":130,"binary":false,"changes":130,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import java.util.Iterator;\n@@ -150,2 +149,1 @@\n-               getProperty(\"jdk.module.addopens.0\") == null &&    \/\/ --add-opens\n-               getProperty(\"jdk.module.illegalAccess\") == null;   \/\/ --illegal-access\n+               getProperty(\"jdk.module.addopens.0\") == null;      \/\/ --add-opens\n@@ -192,1 +190,0 @@\n-        String illegalAccess = getAndRemoveProperty(\"jdk.module.illegalAccess\");\n@@ -224,2 +221,1 @@\n-                && !isPatched\n-                && illegalAccess == null) {\n+                && !isPatched) {\n@@ -458,1 +454,1 @@\n-        \/\/ --add-reads, --add-exports\/--add-opens, and --illegal-access\n+        \/\/ --add-reads, --add-exports\/--add-opens\n@@ -462,9 +458,0 @@\n-        if (illegalAccess != null) {\n-            assert systemModules != null;\n-            addIllegalAccess(illegalAccess,\n-                             systemModules,\n-                             upgradeModulePath,\n-                             bootLayer,\n-                             extraExportsOrOpens);\n-        }\n-\n@@ -782,90 +769,0 @@\n-    \/**\n-     * Process the --illegal-access option to open packages of system modules\n-     * in the boot layer to code in unnamed modules.\n-     *\/\n-    private static void addIllegalAccess(String illegalAccess,\n-                                         SystemModules systemModules,\n-                                         ModuleFinder upgradeModulePath,\n-                                         ModuleLayer bootLayer,\n-                                         boolean extraExportsOrOpens) {\n-\n-        if (illegalAccess.equals(\"deny\"))\n-            return;  \/\/ nothing to do\n-\n-        IllegalAccessLogger.Mode mode = switch (illegalAccess) {\n-            case \"permit\" -> IllegalAccessLogger.Mode.ONESHOT;\n-            case \"warn\"   -> IllegalAccessLogger.Mode.WARN;\n-            case \"debug\"  -> IllegalAccessLogger.Mode.DEBUG;\n-            default -> {\n-                fail(\"Value specified to --illegal-access not recognized:\"\n-                        + \" '\" + illegalAccess + \"'\");\n-                yield null;\n-            }\n-        };\n-\n-        var builder = new IllegalAccessLogger.Builder(mode, System.err);\n-        Map<String, Set<String>> concealedPackagesToOpen = systemModules.concealedPackagesToOpen();\n-        Map<String, Set<String>> exportedPackagesToOpen = systemModules.exportedPackagesToOpen();\n-        if (concealedPackagesToOpen.isEmpty() && exportedPackagesToOpen.isEmpty()) {\n-            \/\/ need to generate (exploded build)\n-            IllegalAccessMaps maps = IllegalAccessMaps.generate(limitedFinder());\n-            concealedPackagesToOpen = maps.concealedPackagesToOpen();\n-            exportedPackagesToOpen = maps.exportedPackagesToOpen();\n-        }\n-\n-        \/\/ open specific packages in the system modules\n-        Set<String> emptySet = Set.of();\n-        for (Module m : bootLayer.modules()) {\n-            ModuleDescriptor descriptor = m.getDescriptor();\n-            String name = m.getName();\n-\n-            \/\/ skip open modules\n-            if (descriptor.isOpen()) {\n-                continue;\n-            }\n-\n-            \/\/ skip modules loaded from the upgrade module path\n-            if (upgradeModulePath != null\n-                && upgradeModulePath.find(name).isPresent()) {\n-                continue;\n-            }\n-\n-            Set<String> concealedPackages = concealedPackagesToOpen.getOrDefault(name, emptySet);\n-            Set<String> exportedPackages = exportedPackagesToOpen.getOrDefault(name, emptySet);\n-\n-            \/\/ refresh the set of concealed and exported packages if needed\n-            if (extraExportsOrOpens) {\n-                concealedPackages = new HashSet<>(concealedPackages);\n-                exportedPackages = new HashSet<>(exportedPackages);\n-                Iterator<String> iterator = concealedPackages.iterator();\n-                while (iterator.hasNext()) {\n-                    String pn = iterator.next();\n-                    if (m.isExported(pn, BootLoader.getUnnamedModule())) {\n-                        \/\/ concealed package is exported to ALL-UNNAMED\n-                        iterator.remove();\n-                        exportedPackages.add(pn);\n-                    }\n-                }\n-                iterator = exportedPackages.iterator();\n-                while (iterator.hasNext()) {\n-                    String pn = iterator.next();\n-                    if (m.isOpen(pn, BootLoader.getUnnamedModule())) {\n-                        \/\/ exported package is opened to ALL-UNNAMED\n-                        iterator.remove();\n-                    }\n-                }\n-            }\n-\n-            \/\/ log reflective access to all types in concealed packages\n-            builder.logAccessToConcealedPackages(m, concealedPackages);\n-\n-            \/\/ log reflective access to non-public members\/types in exported packages\n-            builder.logAccessToExportedPackages(m, exportedPackages);\n-\n-            \/\/ open the packages to unnamed modules\n-            JLA.addOpensToAllUnnamed(m, concealedPackages, exportedPackages);\n-        }\n-\n-        builder.complete();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":4,"deletions":107,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,12 +86,0 @@\n-\n-    \/**\n-     * Returns the map of module concealed packages to open. The map key is the\n-     * module name, the value is the set of concealed packages to open.\n-     *\/\n-    Map<String, Set<String>> concealedPackagesToOpen();\n-\n-    \/**\n-     * Returns the map of module exported packages to open. The map key is the\n-     * module name, the value is the set of exported packages to open.\n-     *\/\n-    Map<String, Set<String>> exportedPackagesToOpen();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModules.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,1340 +0,0 @@\n-# Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-apple.applescript\n-apple.laf\n-apple.launcher\n-apple.security\n-com.apple.concurrent\n-com.apple.eawt\n-com.apple.eawt.event\n-com.apple.eio\n-com.apple.laf\n-com.apple.laf.resources\n-com.oracle.jrockit.jfr\n-com.oracle.jrockit.jfr.client\n-com.oracle.jrockit.jfr.management\n-com.oracle.security.ucrypto\n-com.oracle.util\n-com.oracle.webservices.internal.api\n-com.oracle.webservices.internal.api.databinding\n-com.oracle.webservices.internal.api.message\n-com.oracle.webservices.internal.impl.encoding\n-com.oracle.webservices.internal.impl.internalspi.encoding\n-com.oracle.xmlns.internal.webservices.jaxws_databinding\n-com.sun.accessibility.internal.resources\n-com.sun.activation.registries\n-com.sun.awt\n-com.sun.beans\n-com.sun.beans.decoder\n-com.sun.beans.editors\n-com.sun.beans.finder\n-com.sun.beans.infos\n-com.sun.beans.util\n-com.sun.codemodel.internal\n-com.sun.codemodel.internal.fmt\n-com.sun.codemodel.internal.util\n-com.sun.codemodel.internal.writer\n-com.sun.corba.se.impl.activation\n-com.sun.corba.se.impl.copyobject\n-com.sun.corba.se.impl.corba\n-com.sun.corba.se.impl.dynamicany\n-com.sun.corba.se.impl.encoding\n-com.sun.corba.se.impl.interceptors\n-com.sun.corba.se.impl.io\n-com.sun.corba.se.impl.ior\n-com.sun.corba.se.impl.ior.iiop\n-com.sun.corba.se.impl.javax.rmi\n-com.sun.corba.se.impl.javax.rmi.CORBA\n-com.sun.corba.se.impl.legacy.connection\n-com.sun.corba.se.impl.logging\n-com.sun.corba.se.impl.monitoring\n-com.sun.corba.se.impl.naming.cosnaming\n-com.sun.corba.se.impl.naming.namingutil\n-com.sun.corba.se.impl.naming.pcosnaming\n-com.sun.corba.se.impl.oa\n-com.sun.corba.se.impl.oa.poa\n-com.sun.corba.se.impl.oa.toa\n-com.sun.corba.se.impl.orb\n-com.sun.corba.se.impl.orbutil\n-com.sun.corba.se.impl.orbutil.closure\n-com.sun.corba.se.impl.orbutil.concurrent\n-com.sun.corba.se.impl.orbutil.fsm\n-com.sun.corba.se.impl.orbutil.graph\n-com.sun.corba.se.impl.orbutil.threadpool\n-com.sun.corba.se.impl.presentation.rmi\n-com.sun.corba.se.impl.protocol\n-com.sun.corba.se.impl.protocol.giopmsgheaders\n-com.sun.corba.se.impl.resolver\n-com.sun.corba.se.impl.transport\n-com.sun.corba.se.impl.util\n-com.sun.corba.se.internal.CosNaming\n-com.sun.corba.se.internal.Interceptors\n-com.sun.corba.se.internal.POA\n-com.sun.corba.se.internal.corba\n-com.sun.corba.se.internal.iiop\n-com.sun.corba.se.org.omg.CORBA\n-com.sun.corba.se.pept.broker\n-com.sun.corba.se.pept.encoding\n-com.sun.corba.se.pept.protocol\n-com.sun.corba.se.pept.transport\n-com.sun.corba.se.spi.activation\n-com.sun.corba.se.spi.activation.InitialNameServicePackage\n-com.sun.corba.se.spi.activation.LocatorPackage\n-com.sun.corba.se.spi.activation.RepositoryPackage\n-com.sun.corba.se.spi.copyobject\n-com.sun.corba.se.spi.encoding\n-com.sun.corba.se.spi.extension\n-com.sun.corba.se.spi.ior\n-com.sun.corba.se.spi.ior.iiop\n-com.sun.corba.se.spi.legacy.connection\n-com.sun.corba.se.spi.legacy.interceptor\n-com.sun.corba.se.spi.logging\n-com.sun.corba.se.spi.monitoring\n-com.sun.corba.se.spi.oa\n-com.sun.corba.se.spi.orb\n-com.sun.corba.se.spi.orbutil.closure\n-com.sun.corba.se.spi.orbutil.fsm\n-com.sun.corba.se.spi.orbutil.proxy\n-com.sun.corba.se.spi.orbutil.threadpool\n-com.sun.corba.se.spi.presentation.rmi\n-com.sun.corba.se.spi.protocol\n-com.sun.corba.se.spi.resolver\n-com.sun.corba.se.spi.servicecontext\n-com.sun.corba.se.spi.transport\n-com.sun.crypto.provider\n-com.sun.demo.jvmti.hprof\n-com.sun.deploy.uitoolkit.impl.fx\n-com.sun.deploy.uitoolkit.impl.fx.ui\n-com.sun.deploy.uitoolkit.impl.fx.ui.resources\n-com.sun.glass.events\n-com.sun.glass.events.mac\n-com.sun.glass.ui\n-com.sun.glass.ui.delegate\n-com.sun.glass.ui.gtk\n-com.sun.glass.ui.mac\n-com.sun.glass.ui.win\n-com.sun.glass.utils\n-com.sun.image.codec.jpeg\n-com.sun.imageio.plugins.bmp\n-com.sun.imageio.plugins.common\n-com.sun.imageio.plugins.gif\n-com.sun.imageio.plugins.jpeg\n-com.sun.imageio.plugins.png\n-com.sun.imageio.plugins.wbmp\n-com.sun.imageio.spi\n-com.sun.imageio.stream\n-com.sun.istack.internal\n-com.sun.istack.internal.localization\n-com.sun.istack.internal.logging\n-com.sun.istack.internal.tools\n-com.sun.jarsigner\n-com.sun.java.accessibility\n-com.sun.java.accessibility.util\n-com.sun.java.accessibility.util.java.awt\n-com.sun.java.browser.dom\n-com.sun.java.browser.net\n-com.sun.java.swing\n-com.sun.java.swing.plaf.gtk\n-com.sun.java.swing.plaf.gtk.resources\n-com.sun.java.swing.plaf.motif\n-com.sun.java.swing.plaf.motif.resources\n-com.sun.java.swing.plaf.nimbus\n-com.sun.java.swing.plaf.windows\n-com.sun.java.swing.plaf.windows.resources\n-com.sun.java.util.jar.pack\n-com.sun.java_cup.internal.runtime\n-com.sun.javadoc\n-com.sun.javafx\n-com.sun.javafx.animation\n-com.sun.javafx.applet\n-com.sun.javafx.application\n-com.sun.javafx.beans\n-com.sun.javafx.beans.event\n-com.sun.javafx.binding\n-com.sun.javafx.charts\n-com.sun.javafx.collections\n-com.sun.javafx.css\n-com.sun.javafx.css.converters\n-com.sun.javafx.css.parser\n-com.sun.javafx.cursor\n-com.sun.javafx.effect\n-com.sun.javafx.embed\n-com.sun.javafx.event\n-com.sun.javafx.font\n-com.sun.javafx.font.coretext\n-com.sun.javafx.font.directwrite\n-com.sun.javafx.font.freetype\n-com.sun.javafx.font.t2k\n-com.sun.javafx.fxml\n-com.sun.javafx.fxml.builder\n-com.sun.javafx.fxml.expression\n-com.sun.javafx.geom\n-com.sun.javafx.geom.transform\n-com.sun.javafx.geometry\n-com.sun.javafx.iio\n-com.sun.javafx.iio.bmp\n-com.sun.javafx.iio.common\n-com.sun.javafx.iio.gif\n-com.sun.javafx.iio.ios\n-com.sun.javafx.iio.jpeg\n-com.sun.javafx.iio.png\n-com.sun.javafx.image\n-com.sun.javafx.image.impl\n-com.sun.javafx.jmx\n-com.sun.javafx.logging\n-com.sun.javafx.media\n-com.sun.javafx.menu\n-com.sun.javafx.perf\n-com.sun.javafx.print\n-com.sun.javafx.property\n-com.sun.javafx.property.adapter\n-com.sun.javafx.robot\n-com.sun.javafx.robot.impl\n-com.sun.javafx.runtime\n-com.sun.javafx.runtime.async\n-com.sun.javafx.runtime.eula\n-com.sun.javafx.scene\n-com.sun.javafx.scene.control\n-com.sun.javafx.scene.control.behavior\n-com.sun.javafx.scene.control.skin\n-com.sun.javafx.scene.control.skin.resources\n-com.sun.javafx.scene.input\n-com.sun.javafx.scene.layout.region\n-com.sun.javafx.scene.paint\n-com.sun.javafx.scene.shape\n-com.sun.javafx.scene.text\n-com.sun.javafx.scene.transform\n-com.sun.javafx.scene.traversal\n-com.sun.javafx.scene.web\n-com.sun.javafx.scene.web.behavior\n-com.sun.javafx.scene.web.skin\n-com.sun.javafx.sg.prism\n-com.sun.javafx.sg.prism.web\n-com.sun.javafx.stage\n-com.sun.javafx.text\n-com.sun.javafx.tk\n-com.sun.javafx.tk.quantum\n-com.sun.javafx.util\n-com.sun.javafx.webkit\n-com.sun.javafx.webkit.drt\n-com.sun.javafx.webkit.prism\n-com.sun.javafx.webkit.prism.theme\n-com.sun.javafx.webkit.theme\n-com.sun.jdi\n-com.sun.jdi.connect\n-com.sun.jdi.connect.spi\n-com.sun.jdi.event\n-com.sun.jdi.request\n-com.sun.jmx.defaults\n-com.sun.jmx.interceptor\n-com.sun.jmx.mbeanserver\n-com.sun.jmx.remote.internal\n-com.sun.jmx.remote.protocol.iiop\n-com.sun.jmx.remote.protocol.rmi\n-com.sun.jmx.remote.security\n-com.sun.jmx.remote.util\n-com.sun.jmx.snmp\n-com.sun.jmx.snmp.IPAcl\n-com.sun.jmx.snmp.agent\n-com.sun.jmx.snmp.daemon\n-com.sun.jmx.snmp.defaults\n-com.sun.jmx.snmp.internal\n-com.sun.jmx.snmp.mpm\n-com.sun.jmx.snmp.tasks\n-com.sun.jndi.cosnaming\n-com.sun.jndi.dns\n-com.sun.jndi.ldap\n-com.sun.jndi.ldap.ext\n-com.sun.jndi.ldap.pool\n-com.sun.jndi.ldap.sasl\n-com.sun.jndi.rmi.registry\n-com.sun.jndi.toolkit.corba\n-com.sun.jndi.toolkit.ctx\n-com.sun.jndi.toolkit.dir\n-com.sun.jndi.toolkit.url\n-com.sun.jndi.url.corbaname\n-com.sun.jndi.url.dns\n-com.sun.jndi.url.iiop\n-com.sun.jndi.url.iiopname\n-com.sun.jndi.url.ldap\n-com.sun.jndi.url.ldaps\n-com.sun.jndi.url.rmi\n-com.sun.management\n-com.sun.management.jmx\n-com.sun.media.jfxmedia\n-com.sun.media.jfxmedia.control\n-com.sun.media.jfxmedia.effects\n-com.sun.media.jfxmedia.events\n-com.sun.media.jfxmedia.locator\n-com.sun.media.jfxmedia.logging\n-com.sun.media.jfxmedia.track\n-com.sun.media.jfxmediaimpl\n-com.sun.media.jfxmediaimpl.platform\n-com.sun.media.jfxmediaimpl.platform.gstreamer\n-com.sun.media.jfxmediaimpl.platform.ios\n-com.sun.media.jfxmediaimpl.platform.java\n-com.sun.media.jfxmediaimpl.platform.osx\n-com.sun.media.sound\n-com.sun.naming.internal\n-com.sun.net.httpserver\n-com.sun.net.httpserver.spi\n-com.sun.net.ssl\n-com.sun.net.ssl.internal.ssl\n-com.sun.net.ssl.internal.www.protocol.https\n-com.sun.nio.file\n-com.sun.nio.sctp\n-com.sun.nio.zipfs\n-com.sun.openpisces\n-com.sun.org.apache.bcel.internal\n-com.sun.org.apache.bcel.internal.classfile\n-com.sun.org.apache.bcel.internal.generic\n-com.sun.org.apache.bcel.internal.util\n-com.sun.org.apache.regexp.internal\n-com.sun.org.apache.xalan.internal\n-com.sun.org.apache.xalan.internal.extensions\n-com.sun.org.apache.xalan.internal.lib\n-com.sun.org.apache.xalan.internal.res\n-com.sun.org.apache.xalan.internal.templates\n-com.sun.org.apache.xalan.internal.utils\n-com.sun.org.apache.xalan.internal.xslt\n-com.sun.org.apache.xalan.internal.xsltc\n-com.sun.org.apache.xalan.internal.xsltc.cmdline\n-com.sun.org.apache.xalan.internal.xsltc.cmdline.getopt\n-com.sun.org.apache.xalan.internal.xsltc.compiler\n-com.sun.org.apache.xalan.internal.xsltc.compiler.util\n-com.sun.org.apache.xalan.internal.xsltc.dom\n-com.sun.org.apache.xalan.internal.xsltc.runtime\n-com.sun.org.apache.xalan.internal.xsltc.runtime.output\n-com.sun.org.apache.xalan.internal.xsltc.trax\n-com.sun.org.apache.xalan.internal.xsltc.util\n-com.sun.org.apache.xerces.internal.dom\n-com.sun.org.apache.xerces.internal.dom.events\n-com.sun.org.apache.xerces.internal.impl\n-com.sun.org.apache.xerces.internal.impl.dtd\n-com.sun.org.apache.xerces.internal.impl.dtd.models\n-com.sun.org.apache.xerces.internal.impl.dv\n-com.sun.org.apache.xerces.internal.impl.dv.dtd\n-com.sun.org.apache.xerces.internal.impl.dv.util\n-com.sun.org.apache.xerces.internal.impl.dv.xs\n-com.sun.org.apache.xerces.internal.impl.io\n-com.sun.org.apache.xerces.internal.impl.msg\n-com.sun.org.apache.xerces.internal.impl.validation\n-com.sun.org.apache.xerces.internal.impl.xpath\n-com.sun.org.apache.xerces.internal.impl.xpath.regex\n-com.sun.org.apache.xerces.internal.impl.xs\n-com.sun.org.apache.xerces.internal.impl.xs.identity\n-com.sun.org.apache.xerces.internal.impl.xs.models\n-com.sun.org.apache.xerces.internal.impl.xs.opti\n-com.sun.org.apache.xerces.internal.impl.xs.traversers\n-com.sun.org.apache.xerces.internal.impl.xs.util\n-com.sun.org.apache.xerces.internal.jaxp\n-com.sun.org.apache.xerces.internal.jaxp.datatype\n-com.sun.org.apache.xerces.internal.jaxp.validation\n-com.sun.org.apache.xerces.internal.parsers\n-com.sun.org.apache.xerces.internal.util\n-com.sun.org.apache.xerces.internal.utils\n-com.sun.org.apache.xerces.internal.xinclude\n-com.sun.org.apache.xerces.internal.xni\n-com.sun.org.apache.xerces.internal.xni.grammars\n-com.sun.org.apache.xerces.internal.xni.parser\n-com.sun.org.apache.xerces.internal.xpointer\n-com.sun.org.apache.xerces.internal.xs\n-com.sun.org.apache.xerces.internal.xs.datatypes\n-com.sun.org.apache.xml.internal.dtm\n-com.sun.org.apache.xml.internal.dtm.ref\n-com.sun.org.apache.xml.internal.dtm.ref.dom2dtm\n-com.sun.org.apache.xml.internal.dtm.ref.sax2dtm\n-com.sun.org.apache.xml.internal.res\n-com.sun.org.apache.xml.internal.resolver\n-com.sun.org.apache.xml.internal.resolver.helpers\n-com.sun.org.apache.xml.internal.resolver.readers\n-com.sun.org.apache.xml.internal.resolver.tools\n-com.sun.org.apache.xml.internal.security\n-com.sun.org.apache.xml.internal.security.algorithms\n-com.sun.org.apache.xml.internal.security.algorithms.implementations\n-com.sun.org.apache.xml.internal.security.c14n\n-com.sun.org.apache.xml.internal.security.c14n.helper\n-com.sun.org.apache.xml.internal.security.c14n.implementations\n-com.sun.org.apache.xml.internal.security.encryption\n-com.sun.org.apache.xml.internal.security.exceptions\n-com.sun.org.apache.xml.internal.security.keys\n-com.sun.org.apache.xml.internal.security.keys.content\n-com.sun.org.apache.xml.internal.security.keys.content.keyvalues\n-com.sun.org.apache.xml.internal.security.keys.content.x509\n-com.sun.org.apache.xml.internal.security.keys.keyresolver\n-com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations\n-com.sun.org.apache.xml.internal.security.keys.storage\n-com.sun.org.apache.xml.internal.security.keys.storage.implementations\n-com.sun.org.apache.xml.internal.security.signature\n-com.sun.org.apache.xml.internal.security.signature.reference\n-com.sun.org.apache.xml.internal.security.transforms\n-com.sun.org.apache.xml.internal.security.transforms.implementations\n-com.sun.org.apache.xml.internal.security.transforms.params\n-com.sun.org.apache.xml.internal.security.utils\n-com.sun.org.apache.xml.internal.security.utils.resolver\n-com.sun.org.apache.xml.internal.security.utils.resolver.implementations\n-com.sun.org.apache.xml.internal.serialize\n-com.sun.org.apache.xml.internal.serializer\n-com.sun.org.apache.xml.internal.serializer.utils\n-com.sun.org.apache.xml.internal.utils\n-com.sun.org.apache.xml.internal.utils.res\n-com.sun.org.apache.xpath.internal\n-com.sun.org.apache.xpath.internal.axes\n-com.sun.org.apache.xpath.internal.compiler\n-com.sun.org.apache.xpath.internal.domapi\n-com.sun.org.apache.xpath.internal.functions\n-com.sun.org.apache.xpath.internal.jaxp\n-com.sun.org.apache.xpath.internal.objects\n-com.sun.org.apache.xpath.internal.operations\n-com.sun.org.apache.xpath.internal.patterns\n-com.sun.org.apache.xpath.internal.res\n-com.sun.org.glassfish.external.amx\n-com.sun.org.glassfish.external.arc\n-com.sun.org.glassfish.external.probe.provider\n-com.sun.org.glassfish.external.probe.provider.annotations\n-com.sun.org.glassfish.external.statistics\n-com.sun.org.glassfish.external.statistics.annotations\n-com.sun.org.glassfish.external.statistics.impl\n-com.sun.org.glassfish.gmbal\n-com.sun.org.glassfish.gmbal.util\n-com.sun.org.omg.CORBA\n-com.sun.org.omg.CORBA.ValueDefPackage\n-com.sun.org.omg.CORBA.portable\n-com.sun.org.omg.SendingContext\n-com.sun.org.omg.SendingContext.CodeBasePackage\n-com.sun.pisces\n-com.sun.prism\n-com.sun.prism.d3d\n-com.sun.prism.es2\n-com.sun.prism.image\n-com.sun.prism.impl\n-com.sun.prism.impl.packrect\n-com.sun.prism.impl.paint\n-com.sun.prism.impl.ps\n-com.sun.prism.impl.shape\n-com.sun.prism.j2d\n-com.sun.prism.j2d.paint\n-com.sun.prism.j2d.print\n-com.sun.prism.paint\n-com.sun.prism.ps\n-com.sun.prism.shader\n-com.sun.prism.shape\n-com.sun.prism.sw\n-com.sun.rmi.rmid\n-com.sun.rowset\n-com.sun.rowset.internal\n-com.sun.rowset.providers\n-com.sun.scenario\n-com.sun.scenario.animation\n-com.sun.scenario.animation.shared\n-com.sun.scenario.effect\n-com.sun.scenario.effect.impl\n-com.sun.scenario.effect.impl.es2\n-com.sun.scenario.effect.impl.hw\n-com.sun.scenario.effect.impl.hw.d3d\n-com.sun.scenario.effect.impl.prism\n-com.sun.scenario.effect.impl.prism.ps\n-com.sun.scenario.effect.impl.prism.sw\n-com.sun.scenario.effect.impl.state\n-com.sun.scenario.effect.impl.sw\n-com.sun.scenario.effect.impl.sw.java\n-com.sun.scenario.effect.impl.sw.sse\n-com.sun.scenario.effect.light\n-com.sun.security.auth\n-com.sun.security.auth.callback\n-com.sun.security.auth.login\n-com.sun.security.auth.module\n-com.sun.security.cert.internal.x509\n-com.sun.security.jgss\n-com.sun.security.ntlm\n-com.sun.security.sasl\n-com.sun.security.sasl.digest\n-com.sun.security.sasl.gsskerb\n-com.sun.security.sasl.ntlm\n-com.sun.security.sasl.util\n-com.sun.source.doctree\n-com.sun.source.tree\n-com.sun.source.util\n-com.sun.swing.internal.plaf.basic.resources\n-com.sun.swing.internal.plaf.metal.resources\n-com.sun.swing.internal.plaf.synth.resources\n-com.sun.tools.attach\n-com.sun.tools.attach.spi\n-com.sun.tools.classfile\n-com.sun.tools.corba.se.idl\n-com.sun.tools.corba.se.idl.constExpr\n-com.sun.tools.corba.se.idl.som.cff\n-com.sun.tools.corba.se.idl.som.idlemit\n-com.sun.tools.corba.se.idl.toJavaPortable\n-com.sun.tools.doclets\n-com.sun.tools.doclets.formats.html\n-com.sun.tools.doclets.formats.html.markup\n-com.sun.tools.doclets.formats.html.resources\n-com.sun.tools.doclets.internal.toolkit\n-com.sun.tools.doclets.internal.toolkit.builders\n-com.sun.tools.doclets.internal.toolkit.resources\n-com.sun.tools.doclets.internal.toolkit.taglets\n-com.sun.tools.doclets.internal.toolkit.util\n-com.sun.tools.doclets.internal.toolkit.util.links\n-com.sun.tools.doclets.standard\n-com.sun.tools.doclint\n-com.sun.tools.doclint.resources\n-com.sun.tools.example.debug.expr\n-com.sun.tools.example.debug.tty\n-com.sun.tools.extcheck\n-com.sun.tools.hat\n-com.sun.tools.hat.internal.model\n-com.sun.tools.hat.internal.oql\n-com.sun.tools.hat.internal.parser\n-com.sun.tools.hat.internal.server\n-com.sun.tools.hat.internal.util\n-com.sun.tools.internal.jxc\n-com.sun.tools.internal.jxc.ap\n-com.sun.tools.internal.jxc.api\n-com.sun.tools.internal.jxc.api.impl.j2s\n-com.sun.tools.internal.jxc.gen.config\n-com.sun.tools.internal.jxc.model.nav\n-com.sun.tools.internal.ws\n-com.sun.tools.internal.ws.api\n-com.sun.tools.internal.ws.api.wsdl\n-com.sun.tools.internal.ws.processor\n-com.sun.tools.internal.ws.processor.generator\n-com.sun.tools.internal.ws.processor.model\n-com.sun.tools.internal.ws.processor.model.exporter\n-com.sun.tools.internal.ws.processor.model.java\n-com.sun.tools.internal.ws.processor.model.jaxb\n-com.sun.tools.internal.ws.processor.modeler\n-com.sun.tools.internal.ws.processor.modeler.annotation\n-com.sun.tools.internal.ws.processor.modeler.wsdl\n-com.sun.tools.internal.ws.processor.util\n-com.sun.tools.internal.ws.resources\n-com.sun.tools.internal.ws.spi\n-com.sun.tools.internal.ws.util\n-com.sun.tools.internal.ws.util.xml\n-com.sun.tools.internal.ws.wscompile\n-com.sun.tools.internal.ws.wscompile.plugin.at_generated\n-com.sun.tools.internal.ws.wsdl.document\n-com.sun.tools.internal.ws.wsdl.document.http\n-com.sun.tools.internal.ws.wsdl.document.jaxws\n-com.sun.tools.internal.ws.wsdl.document.mime\n-com.sun.tools.internal.ws.wsdl.document.schema\n-com.sun.tools.internal.ws.wsdl.document.soap\n-com.sun.tools.internal.ws.wsdl.framework\n-com.sun.tools.internal.ws.wsdl.parser\n-com.sun.tools.internal.xjc\n-com.sun.tools.internal.xjc.addon.accessors\n-com.sun.tools.internal.xjc.addon.at_generated\n-com.sun.tools.internal.xjc.addon.code_injector\n-com.sun.tools.internal.xjc.addon.episode\n-com.sun.tools.internal.xjc.addon.locator\n-com.sun.tools.internal.xjc.addon.sync\n-com.sun.tools.internal.xjc.api\n-com.sun.tools.internal.xjc.api.impl.s2j\n-com.sun.tools.internal.xjc.api.util\n-com.sun.tools.internal.xjc.generator.annotation.spec\n-com.sun.tools.internal.xjc.generator.bean\n-com.sun.tools.internal.xjc.generator.bean.field\n-com.sun.tools.internal.xjc.generator.util\n-com.sun.tools.internal.xjc.model\n-com.sun.tools.internal.xjc.model.nav\n-com.sun.tools.internal.xjc.outline\n-com.sun.tools.internal.xjc.reader\n-com.sun.tools.internal.xjc.reader.dtd\n-com.sun.tools.internal.xjc.reader.dtd.bindinfo\n-com.sun.tools.internal.xjc.reader.gbind\n-com.sun.tools.internal.xjc.reader.internalizer\n-com.sun.tools.internal.xjc.reader.relaxng\n-com.sun.tools.internal.xjc.reader.xmlschema\n-com.sun.tools.internal.xjc.reader.xmlschema.bindinfo\n-com.sun.tools.internal.xjc.reader.xmlschema.ct\n-com.sun.tools.internal.xjc.reader.xmlschema.parser\n-com.sun.tools.internal.xjc.runtime\n-com.sun.tools.internal.xjc.util\n-com.sun.tools.internal.xjc.writer\n-com.sun.tools.javac\n-com.sun.tools.javac.api\n-com.sun.tools.javac.code\n-com.sun.tools.javac.comp\n-com.sun.tools.javac.file\n-com.sun.tools.javac.jvm\n-com.sun.tools.javac.main\n-com.sun.tools.javac.model\n-com.sun.tools.javac.nio\n-com.sun.tools.javac.parser\n-com.sun.tools.javac.processing\n-com.sun.tools.javac.resources\n-com.sun.tools.javac.sym\n-com.sun.tools.javac.tree\n-com.sun.tools.javac.util\n-com.sun.tools.javadoc\n-com.sun.tools.javadoc.api\n-com.sun.tools.javadoc.resources\n-com.sun.tools.javah\n-com.sun.tools.javah.resources\n-com.sun.tools.javap\n-com.sun.tools.javap.resources\n-com.sun.tools.jconsole\n-com.sun.tools.jdeps\n-com.sun.tools.jdeps.resources\n-com.sun.tools.jdi\n-com.sun.tools.jdi.resources\n-com.sun.tools.script.shell\n-com.sun.tracing\n-com.sun.tracing.dtrace\n-com.sun.webkit\n-com.sun.webkit.dom\n-com.sun.webkit.event\n-com.sun.webkit.graphics\n-com.sun.webkit.network\n-com.sun.webkit.network.about\n-com.sun.webkit.network.data\n-com.sun.webkit.perf\n-com.sun.webkit.plugin\n-com.sun.webkit.text\n-com.sun.xml.internal.bind\n-com.sun.xml.internal.bind.annotation\n-com.sun.xml.internal.bind.api\n-com.sun.xml.internal.bind.api.impl\n-com.sun.xml.internal.bind.marshaller\n-com.sun.xml.internal.bind.unmarshaller\n-com.sun.xml.internal.bind.util\n-com.sun.xml.internal.bind.v2\n-com.sun.xml.internal.bind.v2.bytecode\n-com.sun.xml.internal.bind.v2.model.annotation\n-com.sun.xml.internal.bind.v2.model.core\n-com.sun.xml.internal.bind.v2.model.impl\n-com.sun.xml.internal.bind.v2.model.nav\n-com.sun.xml.internal.bind.v2.model.runtime\n-com.sun.xml.internal.bind.v2.model.util\n-com.sun.xml.internal.bind.v2.runtime\n-com.sun.xml.internal.bind.v2.runtime.output\n-com.sun.xml.internal.bind.v2.runtime.property\n-com.sun.xml.internal.bind.v2.runtime.reflect\n-com.sun.xml.internal.bind.v2.runtime.reflect.opt\n-com.sun.xml.internal.bind.v2.runtime.unmarshaller\n-com.sun.xml.internal.bind.v2.schemagen\n-com.sun.xml.internal.bind.v2.schemagen.episode\n-com.sun.xml.internal.bind.v2.schemagen.xmlschema\n-com.sun.xml.internal.bind.v2.util\n-com.sun.xml.internal.dtdparser\n-com.sun.xml.internal.fastinfoset\n-com.sun.xml.internal.fastinfoset.algorithm\n-com.sun.xml.internal.fastinfoset.alphabet\n-com.sun.xml.internal.fastinfoset.dom\n-com.sun.xml.internal.fastinfoset.org.apache.xerces.util\n-com.sun.xml.internal.fastinfoset.sax\n-com.sun.xml.internal.fastinfoset.stax\n-com.sun.xml.internal.fastinfoset.stax.events\n-com.sun.xml.internal.fastinfoset.stax.factory\n-com.sun.xml.internal.fastinfoset.stax.util\n-com.sun.xml.internal.fastinfoset.tools\n-com.sun.xml.internal.fastinfoset.util\n-com.sun.xml.internal.fastinfoset.vocab\n-com.sun.xml.internal.messaging.saaj\n-com.sun.xml.internal.messaging.saaj.client.p2p\n-com.sun.xml.internal.messaging.saaj.packaging.mime\n-com.sun.xml.internal.messaging.saaj.packaging.mime.internet\n-com.sun.xml.internal.messaging.saaj.packaging.mime.util\n-com.sun.xml.internal.messaging.saaj.soap\n-com.sun.xml.internal.messaging.saaj.soap.dynamic\n-com.sun.xml.internal.messaging.saaj.soap.impl\n-com.sun.xml.internal.messaging.saaj.soap.name\n-com.sun.xml.internal.messaging.saaj.soap.ver1_1\n-com.sun.xml.internal.messaging.saaj.soap.ver1_2\n-com.sun.xml.internal.messaging.saaj.util\n-com.sun.xml.internal.messaging.saaj.util.transform\n-com.sun.xml.internal.org.jvnet.fastinfoset\n-com.sun.xml.internal.org.jvnet.fastinfoset.sax\n-com.sun.xml.internal.org.jvnet.fastinfoset.sax.helpers\n-com.sun.xml.internal.org.jvnet.fastinfoset.stax\n-com.sun.xml.internal.org.jvnet.mimepull\n-com.sun.xml.internal.org.jvnet.staxex\n-com.sun.xml.internal.rngom.ast.builder\n-com.sun.xml.internal.rngom.ast.om\n-com.sun.xml.internal.rngom.ast.util\n-com.sun.xml.internal.rngom.binary\n-com.sun.xml.internal.rngom.binary.visitor\n-com.sun.xml.internal.rngom.digested\n-com.sun.xml.internal.rngom.dt\n-com.sun.xml.internal.rngom.dt.builtin\n-com.sun.xml.internal.rngom.nc\n-com.sun.xml.internal.rngom.parse\n-com.sun.xml.internal.rngom.parse.compact\n-com.sun.xml.internal.rngom.parse.host\n-com.sun.xml.internal.rngom.parse.xml\n-com.sun.xml.internal.rngom.util\n-com.sun.xml.internal.rngom.xml.sax\n-com.sun.xml.internal.rngom.xml.util\n-com.sun.xml.internal.stream\n-com.sun.xml.internal.stream.buffer\n-com.sun.xml.internal.stream.buffer.sax\n-com.sun.xml.internal.stream.buffer.stax\n-com.sun.xml.internal.stream.dtd\n-com.sun.xml.internal.stream.dtd.nonvalidating\n-com.sun.xml.internal.stream.events\n-com.sun.xml.internal.stream.util\n-com.sun.xml.internal.stream.writers\n-com.sun.xml.internal.txw2\n-com.sun.xml.internal.txw2.annotation\n-com.sun.xml.internal.txw2.output\n-com.sun.xml.internal.ws\n-com.sun.xml.internal.ws.addressing\n-com.sun.xml.internal.ws.addressing.model\n-com.sun.xml.internal.ws.addressing.policy\n-com.sun.xml.internal.ws.addressing.v200408\n-com.sun.xml.internal.ws.api\n-com.sun.xml.internal.ws.api.addressing\n-com.sun.xml.internal.ws.api.client\n-com.sun.xml.internal.ws.api.config.management\n-com.sun.xml.internal.ws.api.config.management.policy\n-com.sun.xml.internal.ws.api.databinding\n-com.sun.xml.internal.ws.api.fastinfoset\n-com.sun.xml.internal.ws.api.ha\n-com.sun.xml.internal.ws.api.handler\n-com.sun.xml.internal.ws.api.message\n-com.sun.xml.internal.ws.api.message.saaj\n-com.sun.xml.internal.ws.api.message.stream\n-com.sun.xml.internal.ws.api.model\n-com.sun.xml.internal.ws.api.model.soap\n-com.sun.xml.internal.ws.api.model.wsdl\n-com.sun.xml.internal.ws.api.model.wsdl.editable\n-com.sun.xml.internal.ws.api.pipe\n-com.sun.xml.internal.ws.api.pipe.helper\n-com.sun.xml.internal.ws.api.policy\n-com.sun.xml.internal.ws.api.policy.subject\n-com.sun.xml.internal.ws.api.server\n-com.sun.xml.internal.ws.api.streaming\n-com.sun.xml.internal.ws.api.wsdl.parser\n-com.sun.xml.internal.ws.api.wsdl.writer\n-com.sun.xml.internal.ws.assembler\n-com.sun.xml.internal.ws.assembler.dev\n-com.sun.xml.internal.ws.assembler.jaxws\n-com.sun.xml.internal.ws.binding\n-com.sun.xml.internal.ws.client\n-com.sun.xml.internal.ws.client.dispatch\n-com.sun.xml.internal.ws.client.sei\n-com.sun.xml.internal.ws.commons.xmlutil\n-com.sun.xml.internal.ws.config.management.policy\n-com.sun.xml.internal.ws.config.metro.dev\n-com.sun.xml.internal.ws.config.metro.util\n-com.sun.xml.internal.ws.db\n-com.sun.xml.internal.ws.db.glassfish\n-com.sun.xml.internal.ws.developer\n-com.sun.xml.internal.ws.dump\n-com.sun.xml.internal.ws.encoding\n-com.sun.xml.internal.ws.encoding.fastinfoset\n-com.sun.xml.internal.ws.encoding.policy\n-com.sun.xml.internal.ws.encoding.soap\n-com.sun.xml.internal.ws.encoding.soap.streaming\n-com.sun.xml.internal.ws.encoding.xml\n-com.sun.xml.internal.ws.fault\n-com.sun.xml.internal.ws.handler\n-com.sun.xml.internal.ws.message\n-com.sun.xml.internal.ws.message.jaxb\n-com.sun.xml.internal.ws.message.saaj\n-com.sun.xml.internal.ws.message.source\n-com.sun.xml.internal.ws.message.stream\n-com.sun.xml.internal.ws.model\n-com.sun.xml.internal.ws.model.soap\n-com.sun.xml.internal.ws.model.wsdl\n-com.sun.xml.internal.ws.org.objectweb.asm\n-com.sun.xml.internal.ws.policy\n-com.sun.xml.internal.ws.policy.jaxws\n-com.sun.xml.internal.ws.policy.jaxws.spi\n-com.sun.xml.internal.ws.policy.privateutil\n-com.sun.xml.internal.ws.policy.sourcemodel\n-com.sun.xml.internal.ws.policy.sourcemodel.attach\n-com.sun.xml.internal.ws.policy.sourcemodel.wspolicy\n-com.sun.xml.internal.ws.policy.spi\n-com.sun.xml.internal.ws.policy.subject\n-com.sun.xml.internal.ws.protocol.soap\n-com.sun.xml.internal.ws.protocol.xml\n-com.sun.xml.internal.ws.resources\n-com.sun.xml.internal.ws.runtime.config\n-com.sun.xml.internal.ws.server\n-com.sun.xml.internal.ws.server.provider\n-com.sun.xml.internal.ws.server.sei\n-com.sun.xml.internal.ws.spi\n-com.sun.xml.internal.ws.spi.db\n-com.sun.xml.internal.ws.streaming\n-com.sun.xml.internal.ws.transport\n-com.sun.xml.internal.ws.transport.http\n-com.sun.xml.internal.ws.transport.http.client\n-com.sun.xml.internal.ws.transport.http.server\n-com.sun.xml.internal.ws.util\n-com.sun.xml.internal.ws.util.exception\n-com.sun.xml.internal.ws.util.pipe\n-com.sun.xml.internal.ws.util.xml\n-com.sun.xml.internal.ws.wsdl\n-com.sun.xml.internal.ws.wsdl.parser\n-com.sun.xml.internal.ws.wsdl.writer\n-com.sun.xml.internal.ws.wsdl.writer.document\n-com.sun.xml.internal.ws.wsdl.writer.document.http\n-com.sun.xml.internal.ws.wsdl.writer.document.soap\n-com.sun.xml.internal.ws.wsdl.writer.document.soap12\n-com.sun.xml.internal.ws.wsdl.writer.document.xsd\n-com.sun.xml.internal.xsom\n-com.sun.xml.internal.xsom.impl\n-com.sun.xml.internal.xsom.impl.parser\n-com.sun.xml.internal.xsom.impl.parser.state\n-com.sun.xml.internal.xsom.impl.scd\n-com.sun.xml.internal.xsom.impl.util\n-com.sun.xml.internal.xsom.parser\n-com.sun.xml.internal.xsom.util\n-com.sun.xml.internal.xsom.visitor\n-java.applet\n-java.awt\n-java.awt.color\n-java.awt.datatransfer\n-java.awt.dnd\n-java.awt.dnd.peer\n-java.awt.event\n-java.awt.font\n-java.awt.geom\n-java.awt.im\n-java.awt.im.spi\n-java.awt.image\n-java.awt.image.renderable\n-java.awt.peer\n-java.awt.print\n-java.beans\n-java.beans.beancontext\n-java.io\n-java.lang\n-java.lang.annotation\n-java.lang.instrument\n-java.lang.invoke\n-java.lang.management\n-java.lang.ref\n-java.lang.reflect\n-java.math\n-java.net\n-java.nio\n-java.nio.channels\n-java.nio.channels.spi\n-java.nio.charset\n-java.nio.charset.spi\n-java.nio.file\n-java.nio.file.attribute\n-java.nio.file.spi\n-java.rmi\n-java.rmi.activation\n-java.rmi.dgc\n-java.rmi.registry\n-java.rmi.server\n-java.security\n-java.security.acl\n-java.security.cert\n-java.security.interfaces\n-java.security.spec\n-java.sql\n-java.text\n-java.text.spi\n-java.time\n-java.time.chrono\n-java.time.format\n-java.time.temporal\n-java.time.zone\n-java.util\n-java.util.concurrent\n-java.util.concurrent.atomic\n-java.util.concurrent.locks\n-java.util.function\n-java.util.jar\n-java.util.logging\n-java.util.prefs\n-java.util.regex\n-java.util.spi\n-java.util.stream\n-java.util.zip\n-javafx.animation\n-javafx.application\n-javafx.beans\n-javafx.beans.binding\n-javafx.beans.property\n-javafx.beans.property.adapter\n-javafx.beans.value\n-javafx.collections\n-javafx.collections.transformation\n-javafx.concurrent\n-javafx.css\n-javafx.embed.swing\n-javafx.embed.swt\n-javafx.event\n-javafx.fxml\n-javafx.geometry\n-javafx.print\n-javafx.scene\n-javafx.scene.canvas\n-javafx.scene.chart\n-javafx.scene.control\n-javafx.scene.control.cell\n-javafx.scene.effect\n-javafx.scene.image\n-javafx.scene.input\n-javafx.scene.layout\n-javafx.scene.media\n-javafx.scene.paint\n-javafx.scene.shape\n-javafx.scene.text\n-javafx.scene.transform\n-javafx.scene.web\n-javafx.stage\n-javafx.util\n-javafx.util.converter\n-javax.accessibility\n-javax.activation\n-javax.activity\n-javax.annotation\n-javax.annotation.processing\n-javax.crypto\n-javax.crypto.interfaces\n-javax.crypto.spec\n-javax.imageio\n-javax.imageio.event\n-javax.imageio.metadata\n-javax.imageio.plugins.bmp\n-javax.imageio.plugins.jpeg\n-javax.imageio.spi\n-javax.imageio.stream\n-javax.jws\n-javax.jws.soap\n-javax.lang.model\n-javax.lang.model.element\n-javax.lang.model.type\n-javax.lang.model.util\n-javax.management\n-javax.management.loading\n-javax.management.modelmbean\n-javax.management.monitor\n-javax.management.openmbean\n-javax.management.relation\n-javax.management.remote\n-javax.management.remote.rmi\n-javax.management.timer\n-javax.naming\n-javax.naming.directory\n-javax.naming.event\n-javax.naming.ldap\n-javax.naming.spi\n-javax.net\n-javax.net.ssl\n-javax.print\n-javax.print.attribute\n-javax.print.attribute.standard\n-javax.print.event\n-javax.rmi\n-javax.rmi.CORBA\n-javax.rmi.ssl\n-javax.script\n-javax.security.auth\n-javax.security.auth.callback\n-javax.security.auth.kerberos\n-javax.security.auth.login\n-javax.security.auth.spi\n-javax.security.auth.x500\n-javax.security.cert\n-javax.security.sasl\n-javax.smartcardio\n-javax.sound.midi\n-javax.sound.midi.spi\n-javax.sound.sampled\n-javax.sound.sampled.spi\n-javax.sql\n-javax.sql.rowset\n-javax.sql.rowset.serial\n-javax.sql.rowset.spi\n-javax.swing\n-javax.swing.border\n-javax.swing.colorchooser\n-javax.swing.event\n-javax.swing.filechooser\n-javax.swing.plaf\n-javax.swing.plaf.basic\n-javax.swing.plaf.metal\n-javax.swing.plaf.multi\n-javax.swing.plaf.nimbus\n-javax.swing.plaf.synth\n-javax.swing.table\n-javax.swing.text\n-javax.swing.text.html\n-javax.swing.text.html.parser\n-javax.swing.text.rtf\n-javax.swing.tree\n-javax.swing.undo\n-javax.tools\n-javax.transaction\n-javax.transaction.xa\n-javax.xml\n-javax.xml.bind\n-javax.xml.bind.annotation\n-javax.xml.bind.annotation.adapters\n-javax.xml.bind.attachment\n-javax.xml.bind.helpers\n-javax.xml.bind.util\n-javax.xml.crypto\n-javax.xml.crypto.dom\n-javax.xml.crypto.dsig\n-javax.xml.crypto.dsig.dom\n-javax.xml.crypto.dsig.keyinfo\n-javax.xml.crypto.dsig.spec\n-javax.xml.datatype\n-javax.xml.namespace\n-javax.xml.parsers\n-javax.xml.soap\n-javax.xml.stream\n-javax.xml.stream.events\n-javax.xml.stream.util\n-javax.xml.transform\n-javax.xml.transform.dom\n-javax.xml.transform.sax\n-javax.xml.transform.stax\n-javax.xml.transform.stream\n-javax.xml.validation\n-javax.xml.ws\n-javax.xml.ws.handler\n-javax.xml.ws.handler.soap\n-javax.xml.ws.http\n-javax.xml.ws.soap\n-javax.xml.ws.spi\n-javax.xml.ws.spi.http\n-javax.xml.ws.wsaddressing\n-javax.xml.xpath\n-jdk\n-jdk.internal.cmm\n-jdk.internal.dynalink\n-jdk.internal.dynalink.beans\n-jdk.internal.dynalink.linker\n-jdk.internal.dynalink.support\n-jdk.internal.instrumentation\n-jdk.internal.org.objectweb.asm\n-jdk.internal.org.objectweb.asm.commons\n-jdk.internal.org.objectweb.asm.signature\n-jdk.internal.org.objectweb.asm.tree\n-jdk.internal.org.objectweb.asm.tree.analysis\n-jdk.internal.org.objectweb.asm.util\n-jdk.internal.org.xml.sax\n-jdk.internal.org.xml.sax.helpers\n-jdk.internal.util.xml\n-jdk.internal.util.xml.impl\n-jdk.jfr.events\n-jdk.management.cmm\n-jdk.management.resource\n-jdk.management.resource.internal\n-jdk.management.resource.internal.inst\n-jdk.nashorn.api.scripting\n-jdk.nashorn.internal\n-jdk.nashorn.internal.codegen\n-jdk.nashorn.internal.codegen.types\n-jdk.nashorn.internal.ir\n-jdk.nashorn.internal.ir.annotations\n-jdk.nashorn.internal.ir.debug\n-jdk.nashorn.internal.ir.visitor\n-jdk.nashorn.internal.lookup\n-jdk.nashorn.internal.objects\n-jdk.nashorn.internal.objects.annotations\n-jdk.nashorn.internal.parser\n-jdk.nashorn.internal.runtime\n-jdk.nashorn.internal.runtime.arrays\n-jdk.nashorn.internal.runtime.events\n-jdk.nashorn.internal.runtime.linker\n-jdk.nashorn.internal.runtime.logging\n-jdk.nashorn.internal.runtime.options\n-jdk.nashorn.internal.runtime.regexp\n-jdk.nashorn.internal.runtime.regexp.joni\n-jdk.nashorn.internal.runtime.regexp.joni.ast\n-jdk.nashorn.internal.runtime.regexp.joni.constants\n-jdk.nashorn.internal.runtime.regexp.joni.encoding\n-jdk.nashorn.internal.runtime.regexp.joni.exception\n-jdk.nashorn.internal.scripts\n-jdk.nashorn.tools\n-jdk.net\n-netscape.javascript\n-oracle.jrockit.jfr\n-oracle.jrockit.jfr.events\n-oracle.jrockit.jfr.jdkevents\n-oracle.jrockit.jfr.jdkevents.throwabletransform\n-oracle.jrockit.jfr.openmbean\n-oracle.jrockit.jfr.parser\n-oracle.jrockit.jfr.settings\n-oracle.jrockit.jfr.tools\n-org.ietf.jgss\n-org.jcp.xml.dsig.internal\n-org.jcp.xml.dsig.internal.dom\n-org.omg.CORBA\n-org.omg.CORBA.DynAnyPackage\n-org.omg.CORBA.ORBPackage\n-org.omg.CORBA.TypeCodePackage\n-org.omg.CORBA.portable\n-org.omg.CORBA_2_3\n-org.omg.CORBA_2_3.portable\n-org.omg.CosNaming\n-org.omg.CosNaming.NamingContextExtPackage\n-org.omg.CosNaming.NamingContextPackage\n-org.omg.Dynamic\n-org.omg.DynamicAny\n-org.omg.DynamicAny.DynAnyFactoryPackage\n-org.omg.DynamicAny.DynAnyPackage\n-org.omg.IOP\n-org.omg.IOP.CodecFactoryPackage\n-org.omg.IOP.CodecPackage\n-org.omg.Messaging\n-org.omg.PortableInterceptor\n-org.omg.PortableInterceptor.ORBInitInfoPackage\n-org.omg.PortableServer\n-org.omg.PortableServer.CurrentPackage\n-org.omg.PortableServer.POAManagerPackage\n-org.omg.PortableServer.POAPackage\n-org.omg.PortableServer.ServantLocatorPackage\n-org.omg.PortableServer.portable\n-org.omg.SendingContext\n-org.omg.stub.java.rmi\n-org.omg.stub.javax.management.remote.rmi\n-org.relaxng.datatype\n-org.relaxng.datatype.helpers\n-org.w3c.dom\n-org.w3c.dom.bootstrap\n-org.w3c.dom.css\n-org.w3c.dom.events\n-org.w3c.dom.html\n-org.w3c.dom.ls\n-org.w3c.dom.ranges\n-org.w3c.dom.stylesheets\n-org.w3c.dom.traversal\n-org.w3c.dom.views\n-org.w3c.dom.xpath\n-org.xml.sax\n-org.xml.sax.ext\n-org.xml.sax.helpers\n-sun.applet\n-sun.applet.resources\n-sun.audio\n-sun.awt\n-sun.awt.X11\n-sun.awt.datatransfer\n-sun.awt.dnd\n-sun.awt.event\n-sun.awt.geom\n-sun.awt.im\n-sun.awt.image\n-sun.awt.image.codec\n-sun.awt.motif\n-sun.awt.resources\n-sun.awt.shell\n-sun.awt.util\n-sun.awt.windows\n-sun.corba\n-sun.dc\n-sun.dc.path\n-sun.dc.pr\n-sun.font\n-sun.instrument\n-sun.invoke\n-sun.invoke.empty\n-sun.invoke.util\n-sun.io\n-sun.java2d\n-sun.java2d.cmm\n-sun.java2d.cmm.kcms\n-sun.java2d.cmm.lcms\n-sun.java2d.d3d\n-sun.java2d.jules\n-sun.java2d.loops\n-sun.java2d.opengl\n-sun.java2d.pipe\n-sun.java2d.pipe.hw\n-sun.java2d.pisces\n-sun.java2d.windows\n-sun.java2d.x11\n-sun.java2d.xr\n-sun.jvmstat.monitor\n-sun.jvmstat.monitor.event\n-sun.jvmstat.monitor.remote\n-sun.jvmstat.perfdata.monitor\n-sun.jvmstat.perfdata.monitor.protocol.file\n-sun.jvmstat.perfdata.monitor.protocol.local\n-sun.jvmstat.perfdata.monitor.protocol.rmi\n-sun.jvmstat.perfdata.monitor.v1_0\n-sun.jvmstat.perfdata.monitor.v2_0\n-sun.launcher\n-sun.launcher.resources\n-sun.lwawt\n-sun.lwawt.macosx\n-sun.management\n-sun.management.counter\n-sun.management.counter.perf\n-sun.management.jdp\n-sun.management.jmxremote\n-sun.management.resources\n-sun.management.snmp\n-sun.management.snmp.jvminstr\n-sun.management.snmp.jvmmib\n-sun.management.snmp.util\n-sun.misc\n-sun.misc.resources\n-sun.net\n-sun.net.dns\n-sun.net.ftp\n-sun.net.ftp.impl\n-sun.net.httpserver\n-sun.net.idn\n-sun.net.sdp\n-sun.net.smtp\n-sun.net.spi\n-sun.net.spi.nameservice\n-sun.net.spi.nameservice.dns\n-sun.net.util\n-sun.net.www\n-sun.net.www.content.audio\n-sun.net.www.content.image\n-sun.net.www.content.text\n-sun.net.www.http\n-sun.net.www.protocol.file\n-sun.net.www.protocol.ftp\n-sun.net.www.protocol.http\n-sun.net.www.protocol.http.logging\n-sun.net.www.protocol.http.ntlm\n-sun.net.www.protocol.http.spnego\n-sun.net.www.protocol.https\n-sun.net.www.protocol.jar\n-sun.net.www.protocol.mailto\n-sun.net.www.protocol.netdoc\n-sun.nio\n-sun.nio.ch\n-sun.nio.ch.sctp\n-sun.nio.cs\n-sun.nio.cs.ext\n-sun.nio.fs\n-sun.print\n-sun.print.resources\n-sun.reflect\n-sun.reflect.annotation\n-sun.reflect.generics.factory\n-sun.reflect.generics.parser\n-sun.reflect.generics.reflectiveObjects\n-sun.reflect.generics.repository\n-sun.reflect.generics.scope\n-sun.reflect.generics.tree\n-sun.reflect.generics.visitor\n-sun.reflect.misc\n-sun.rmi.log\n-sun.rmi.registry\n-sun.rmi.rmic\n-sun.rmi.rmic.iiop\n-sun.rmi.rmic.newrmic\n-sun.rmi.rmic.newrmic.jrmp\n-sun.rmi.runtime\n-sun.rmi.server\n-sun.rmi.transport\n-sun.rmi.transport.proxy\n-sun.rmi.transport.tcp\n-sun.security.acl\n-sun.security.action\n-sun.security.ec\n-sun.security.internal.interfaces\n-sun.security.internal.spec\n-sun.security.jca\n-sun.security.jgss\n-sun.security.jgss.krb5\n-sun.security.jgss.spi\n-sun.security.jgss.spnego\n-sun.security.jgss.wrapper\n-sun.security.krb5\n-sun.security.krb5.internal\n-sun.security.krb5.internal.ccache\n-sun.security.krb5.internal.crypto\n-sun.security.krb5.internal.crypto.dk\n-sun.security.krb5.internal.ktab\n-sun.security.krb5.internal.rcache\n-sun.security.krb5.internal.tools\n-sun.security.krb5.internal.util\n-sun.security.mscapi\n-sun.security.pkcs\n-sun.security.pkcs10\n-sun.security.pkcs11\n-sun.security.pkcs11.wrapper\n-sun.security.pkcs12\n-sun.security.provider\n-sun.security.provider.certpath\n-sun.security.provider.certpath.ldap\n-sun.security.provider.certpath.ssl\n-sun.security.rsa\n-sun.security.smartcardio\n-sun.security.ssl\n-sun.security.ssl.krb5\n-sun.security.timestamp\n-sun.security.tools\n-sun.security.tools.jarsigner\n-sun.security.tools.keytool\n-sun.security.tools.policytool\n-sun.security.util\n-sun.security.validator\n-sun.security.x509\n-sun.swing\n-sun.swing.icon\n-sun.swing.plaf\n-sun.swing.plaf.synth\n-sun.swing.plaf.windows\n-sun.swing.table\n-sun.swing.text\n-sun.swing.text.html\n-sun.text\n-sun.text.bidi\n-sun.text.normalizer\n-sun.text.resources\n-sun.text.resources.en\n-sun.tools.asm\n-sun.tools.attach\n-sun.tools.jar\n-sun.tools.jar.resources\n-sun.tools.java\n-sun.tools.javac\n-sun.tools.jcmd\n-sun.tools.jconsole\n-sun.tools.jconsole.inspector\n-sun.tools.jinfo\n-sun.tools.jmap\n-sun.tools.jps\n-sun.tools.jstack\n-sun.tools.jstat\n-sun.tools.jstatd\n-sun.tools.native2ascii\n-sun.tools.native2ascii.resources\n-sun.tools.serialver\n-sun.tools.tree\n-sun.tools.util\n-sun.tracing\n-sun.tracing.dtrace\n-sun.usagetracker\n-sun.util\n-sun.util.calendar\n-sun.util.cldr\n-sun.util.locale\n-sun.util.locale.provider\n-sun.util.logging\n-sun.util.logging.resources\n-sun.util.resources\n-sun.util.resources.en\n-sun.util.spi\n-sun.util.xml\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/jdk8_packages.dat","additions":0,"deletions":1340,"binary":false,"changes":1340,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,5 +188,0 @@\n-\\    --illegal-access=<value>\\n\\\n-\\                      permit or deny access to members of types in named modules\\n\\\n-\\                      by code in unnamed modules.\\n\\\n-\\                      <value> is one of \"deny\", \"permit\", \"warn\", or \"debug\"\\n\\\n-\\                      This option will be removed in a future release.\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,0 @@\n-import jdk.internal.module.IllegalAccessMaps;\n@@ -625,3 +624,0 @@\n-            \/\/ generate concealedPackagesToOpen and exportedPackagesToOpen\n-            genXXXPackagesToOpenMethods(cw);\n-\n@@ -858,10 +854,0 @@\n-        \/**\n-         * Generate concealedPackagesToOpen and exportedPackagesToOpen methods.\n-         *\/\n-        private void genXXXPackagesToOpenMethods(ClassWriter cw) {\n-            ModuleFinder finder = finderOf(moduleInfos);\n-            IllegalAccessMaps maps = IllegalAccessMaps.generate(finder);\n-            generate(cw, \"concealedPackagesToOpen\", maps.concealedPackagesToOpen(), false);\n-            generate(cw, \"exportedPackagesToOpen\", maps.exportedPackagesToOpen(), false);\n-        }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run testng\/othervm --illegal-access=deny BasicModuleTest\n+ * @run testng\/othervm BasicModuleTest\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/BasicModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm --illegal-access=deny -javaagent:RedefineModuleAgent.jar RedefineModuleTest\n+ * @run testng\/othervm -javaagent:RedefineModuleAgent.jar RedefineModuleTest\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run testng\/othervm --illegal-access=deny CallerSensitiveAccess\n+ * @run testng\/othervm CallerSensitiveAccess\n","filename":"test\/jdk\/java\/lang\/invoke\/CallerSensitiveAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm --illegal-access=deny CanAccessTest\n+ * @run testng\/othervm CanAccessTest\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessibleObject\/CanAccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm --illegal-access=deny ModuleSetAccessibleTest\n+ * @run testng\/othervm ModuleSetAccessibleTest\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessibleObject\/ModuleSetAccessibleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm --illegal-access=deny TrySetAccessibleTest\n+ * @run testng\/othervm TrySetAccessibleTest\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessibleObject\/TrySetAccessibleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,0 @@\n-                                   \"--illegal-access=deny\",\n@@ -113,1 +112,0 @@\n-                                   \"--illegal-access=deny\",\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/cache\/CacheTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm --add-modules=m1,m2 --illegal-access=deny Basic\n+ * @run testng\/othervm --add-modules=m1,m2 Basic\n","filename":"test\/jdk\/jdk\/modules\/open\/Basic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,2 +91,1 @@\n-        return ProcessTools.executeTestJava(\"--illegal-access=deny\",\n-                                            \"-jar\", jarfile.toString())\n+        return ProcessTools.executeTestJava(\"-jar\", jarfile.toString())\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/manifest\/AddExportsAndOpensInManifest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,8 +27,3 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.base\/sun.security.x509\n- * @library \/test\/lib modules\n- * @build IllegalAccessTest TryAccess\n- *        jdk.test.lib.compiler.CompilerUtils\n- *        jdk.test.lib.util.JarUtils\n- * @build m\/*\n- * @run testng\/othervm\/timeout=180 IllegalAccessTest\n+ * @library \/test\/lib\n+ * @build IllegalAccessTest\n+ * @run testng IllegalAccessTest\n@@ -38,17 +33,2 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.jar.Attributes;\n-import java.util.jar.Manifest;\n-import java.util.stream.Stream;\n-\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.util.JarUtils;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import jdk.test.lib.process.*;\n+import org.testng.annotations.*;\n@@ -63,168 +43,1 @@\n-    static final String TEST_SRC = System.getProperty(\"test.src\");\n-    static final String TEST_CLASSES = System.getProperty(\"test.classes\");\n-    static final String MODULE_PATH = System.getProperty(\"jdk.module.path\");\n-\n-    \/**\n-     * Represents the expected result of a test.\n-     *\/\n-    static final class Result {\n-        private final boolean success;\n-        private final List<String> expectedOutput = new ArrayList<>();\n-        private final List<String> notExpectedOutput = new ArrayList<>();\n-\n-        Result(boolean success) {\n-            this.success = success;\n-        }\n-\n-        Result expect(String msg) {\n-            expectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        Result doNotExpect(String msg) {\n-            notExpectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        boolean shouldSucceed() {\n-            return success;\n-        }\n-\n-        Stream<String> expectedOutput() {\n-            return expectedOutput.stream();\n-        }\n-\n-        Stream<String> notExpectedOutput() {\n-            return notExpectedOutput.stream();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            String s = (success) ? \"success\" : \"failure\";\n-            for (String msg : expectedOutput) {\n-                s += \"\/\" + msg;\n-            }\n-            return s;\n-        }\n-    }\n-\n-    static Result success() {\n-        return new Result(true);\n-    }\n-\n-    static Result successNoWarning() {\n-        return success().doNotExpect(\"WARNING\");\n-    }\n-\n-    static Result successWithWarning() {\n-        return success().expect(\"WARNING\");\n-    }\n-\n-    static Result fail(String expectedOutput) {\n-        return new Result(false).expect(expectedOutput).doNotExpect(\"WARNING\");\n-    }\n-\n-    @DataProvider(name = \"denyCases\")\n-    public Object[][] denyCases() {\n-        return new Object[][] {\n-            { \"accessPublicClassNonExportedPackage\", fail(\"IllegalAccessError\") },\n-            { \"accessPublicClassJdk9NonExportedPackage\", fail(\"IllegalAccessError\") },\n-\n-            { \"reflectPublicMemberExportedPackage\", successNoWarning() },\n-            { \"reflectNonPublicMemberExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectNonPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectPublicMemberJdk9NonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectPublicMemberApplicationModule\", successNoWarning() },\n-\n-            { \"setAccessiblePublicMemberExportedPackage\", successNoWarning() },\n-            { \"setAccessibleNonPublicMemberExportedPackage\", fail(\"InaccessibleObjectException\") },\n-            { \"setAccessiblePublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\") },\n-            { \"setAccessibleNonPublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\") },\n-            { \"setAccessiblePublicMemberJdk9NonExportedPackage\", fail(\"InaccessibleObjectException\") },\n-            { \"setAccessiblePublicMemberApplicationModule\", successNoWarning() },\n-            { \"setAccessibleNotPublicMemberApplicationModule\", fail(\"InaccessibleObjectException\") },\n-\n-            { \"privateLookupPublicClassExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"privateLookupNonPublicClassExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"privateLookupPublicClassNonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"privateLookupNonPublicClassNonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"privateLookupPublicClassJdk9NonExportedPackage\", fail(\"IllegalAccessException\") },\n-        };\n-    }\n-\n-    @DataProvider(name = \"permitCases\")\n-    public Object[][] permitCases() {\n-        return new Object[][] {\n-            { \"accessPublicClassNonExportedPackage\", successNoWarning() },\n-            { \"accessPublicClassJdk9NonExportedPackage\", fail(\"IllegalAccessError\") },\n-\n-            { \"reflectPublicMemberExportedPackage\", successNoWarning() },\n-            { \"reflectNonPublicMemberExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectPublicMemberNonExportedPackage\", successWithWarning() },\n-            { \"reflectNonPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"reflectPublicMemberJdk9NonExportedPackage\", fail(\"IllegalAccessException\") },\n-\n-            { \"setAccessiblePublicMemberExportedPackage\", successNoWarning()},\n-            { \"setAccessibleNonPublicMemberExportedPackage\", successWithWarning() },\n-            { \"setAccessiblePublicMemberNonExportedPackage\", successWithWarning() },\n-            { \"setAccessibleNonPublicMemberNonExportedPackage\", successWithWarning() },\n-            { \"setAccessiblePublicMemberJdk9NonExportedPackage\", fail(\"InaccessibleObjectException\") },\n-            { \"setAccessiblePublicMemberApplicationModule\", successNoWarning() },\n-            { \"setAccessibleNotPublicMemberApplicationModule\", fail(\"InaccessibleObjectException\") },\n-\n-            { \"privateLookupPublicClassExportedPackage\", successWithWarning() },\n-            { \"privateLookupNonPublicClassExportedPackage\", successWithWarning() },\n-            { \"privateLookupPublicClassNonExportedPackage\", successWithWarning() },\n-            { \"privateLookupNonPublicClassNonExportedPackage\",  successWithWarning() },\n-            { \"privateLookupPublicClassJdk9NonExportedPackage\", fail(\"IllegalAccessException\") },\n-            { \"privateLookupPublicClassApplicationModule\", fail(\"IllegalAccessException\") },\n-        };\n-    }\n-\n-    \/**\n-     * Checks an expected result with the output captured by the given\n-     * OutputAnalyzer.\n-     *\/\n-    void checkResult(Result expectedResult, OutputAnalyzer outputAnalyzer) {\n-        expectedResult.expectedOutput().forEach(outputAnalyzer::shouldContain);\n-        expectedResult.notExpectedOutput().forEach(outputAnalyzer::shouldNotContain);\n-        int exitValue = outputAnalyzer.getExitValue();\n-        if (expectedResult.shouldSucceed()) {\n-            assertTrue(exitValue == 0);\n-        } else {\n-            assertTrue(exitValue != 0);\n-        }\n-    }\n-\n-    \/**\n-     * Runs the test to execute the given test action. The VM is run with the\n-     * given VM options and the output checked to see that it matches the\n-     * expected result.\n-     *\/\n-    OutputAnalyzer run(String action, Result expectedResult, String... vmopts)\n-        throws Exception\n-    {\n-        Stream<String> s1 = Stream.of(vmopts);\n-        Stream<String> s2 = Stream.of(\"-p\", MODULE_PATH, \"--add-modules=m\",\n-                \"-cp\", TEST_CLASSES, \"TryAccess\", action);\n-        String[] opts = Stream.concat(s1, s2).toArray(String[]::new);\n-        OutputAnalyzer outputAnalyzer = ProcessTools\n-                .executeTestJava(opts)\n-                .outputTo(System.out)\n-                .errorTo(System.out);\n-        if (expectedResult != null)\n-            checkResult(expectedResult, outputAnalyzer);\n-        return outputAnalyzer;\n-    }\n-\n-    OutputAnalyzer run(String action, String... vmopts) throws Exception {\n-        return run(action, null, vmopts);\n-    }\n-\n-    \/**\n-     * Runs an executable JAR to execute the given test action. The VM is run\n-     * with the given VM options and the output checked to see that it matches\n-     * the expected result.\n-     *\/\n-    void run(Path jarFile, String action, Result expectedResult, String... vmopts)\n+    void run(String text, String... vmopts)\n@@ -233,21 +46,5 @@\n-        Stream<String> s1 = Stream.of(vmopts);\n-        Stream<String> s2 = Stream.of(\"-jar\", jarFile.toString(), action);\n-        String[] opts = Stream.concat(s1, s2).toArray(String[]::new);\n-        checkResult(expectedResult, ProcessTools.executeTestJava(opts)\n-                                                .outputTo(System.out)\n-                                                .errorTo(System.out));\n-    }\n-\n-    @Test(dataProvider = \"denyCases\")\n-    public void testDefault(String action, Result expectedResult) throws Exception {\n-        run(action, expectedResult);\n-    }\n-\n-    @Test(dataProvider = \"denyCases\")\n-    public void testDeny(String action, Result expectedResult) throws Exception {\n-        run(action, expectedResult, \"--illegal-access=deny\");\n-    }\n-\n-    @Test(dataProvider = \"permitCases\")\n-    public void testPermit(String action, Result expectedResult) throws Exception {\n-        run(action, expectedResult, \"--illegal-access=permit\");\n+        var outputAnalyzer = ProcessTools\n+            .executeTestJava(vmopts)\n+            .outputTo(System.out)\n+            .errorTo(System.out);\n+        outputAnalyzer.shouldContain(text);\n@@ -256,3 +53,3 @@\n-    @Test(dataProvider = \"permitCases\")\n-    public void testWarn(String action, Result expectedResult) throws Exception {\n-        run(action, expectedResult, \"--illegal-access=warn\");\n+    public void testObsolete() throws Exception {\n+        run(\"Ignoring option --illegal-access\",\n+            \"--illegal-access=permit\", \"--version\");\n@@ -261,215 +58,0 @@\n-    @Test(dataProvider = \"permitCases\")\n-    public void testDebug(String action, Result expectedResult) throws Exception {\n-        \/\/ expect stack trace with WARNING\n-        if (expectedResult.expectedOutput().anyMatch(\"WARNING\"::equals)) {\n-            expectedResult.expect(\"TryAccess.main\");\n-        }\n-        run(action, expectedResult, \"--illegal-access=debug\");\n-    }\n-\n-    \/**\n-     * Specify --add-exports to export a package\n-     *\/\n-    public void testWithAddExportsOption() throws Exception {\n-        \/\/ not accessible\n-        run(\"reflectPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\"));\n-\n-        \/\/ should succeed with --add-exports\n-        run(\"reflectPublicMemberNonExportedPackage\", successNoWarning(),\n-                \"--add-exports\", \"java.base\/sun.security.x509=ALL-UNNAMED\");\n-\n-        \/\/ not accessible\n-        run(\"setAccessibleNonPublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\"));\n-\n-        \/\/ should fail as --add-exports does not open package\n-        run(\"setAccessibleNonPublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\"),\n-                \"--add-exports\", \"java.base\/sun.nio.ch=ALL-UNNAMED\");\n-    }\n-\n-    \/**\n-     * Specify --add-open to open a package\n-     *\/\n-    public void testWithAddOpensOption() throws Exception {\n-        \/\/ not accessible\n-        run(\"reflectPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\"));\n-\n-        \/\/ should succeed with --add-opens\n-        run(\"reflectPublicMemberNonExportedPackage\", successNoWarning(),\n-                \"--add-opens\", \"java.base\/sun.security.x509=ALL-UNNAMED\");\n-\n-        \/\/ not accessible\n-        run(\"setAccessibleNonPublicMemberExportedPackage\", fail(\"InaccessibleObjectException\"));\n-\n-        \/\/ should succeed with --add-opens\n-        run(\"setAccessibleNonPublicMemberExportedPackage\", successNoWarning(),\n-                \"--add-opens\", \"java.base\/java.lang=ALL-UNNAMED\");\n-    }\n-\n-    \/**\n-     * Test reflective API to export a package\n-     *\/\n-    public void testWithReflectiveExports() throws Exception {\n-        \/\/ compile patch for java.base\n-        Path src = Paths.get(TEST_SRC, \"patchsrc\", \"java.base\");\n-        Path patch = Files.createDirectories(Paths.get(\"patches\", \"java.base\"));\n-        assertTrue(CompilerUtils.compile(src, patch,\n-                                         \"--patch-module\", \"java.base=\" + src));\n-\n-        \/\/ reflectively export, then access\n-        run(\"exportNonExportedPackages,reflectPublicMemberNonExportedPackage\",\n-                successNoWarning(),\n-                \"--patch-module\", \"java.base=\" + patch);\n-\n-        \/\/ access, reflectively export, access again\n-        List<String> output = run(\"reflectPublicMemberNonExportedPackage,\"\n-                        + \"exportNonExportedPackages,\"\n-                        + \"reflectPublicMemberNonExportedPackage\",\n-                \"--patch-module\", \"java.base=\"+patch,\n-                \"--illegal-access=warn\").asLines();\n-        assertTrue(count(output, \"WARNING\") == 1);  \/\/ one warning\n-    }\n-\n-    \/**\n-     * Test reflective API to open a package\n-     *\/\n-    public void testWithReflectiveOpens() throws Exception {\n-        \/\/ compile patch for java.base\n-        Path src = Paths.get(TEST_SRC, \"patchsrc\", \"java.base\");\n-        Path patch = Files.createDirectories(Paths.get(\"patches\", \"java.base\"));\n-        assertTrue(CompilerUtils.compile(src, patch,\n-                                         \"--patch-module\", \"java.base=\" + src));\n-\n-        \/\/ reflectively open exported package, then access\n-        run(\"openExportedPackage,setAccessibleNonPublicMemberExportedPackage\",\n-                successNoWarning(),\n-                \"--patch-module\", \"java.base=\" + patch);\n-\n-        \/\/ access, reflectively open exported package, access again\n-        List<String> output1 = run(\"setAccessibleNonPublicMemberExportedPackage\"\n-                        + \",openExportedPackage\"\n-                        + \",setAccessibleNonPublicMemberExportedPackage\",\n-                \"--patch-module\", \"java.base=\" + patch,\n-                \"--illegal-access=warn\").asLines();\n-        assertTrue(count(output1, \"WARNING\") == 1);  \/\/ one warning\n-\n-        \/\/ reflectively open non-exported packages, then access\n-        run(\"openNonExportedPackages,setAccessibleNonPublicMemberNonExportedPackage\",\n-                successNoWarning(),\n-                \"--patch-module\", \"java.base=\" + patch);\n-\n-        \/\/ access, reflectively open non-exported package, access again\n-        List<String> output2 = run(\"setAccessibleNonPublicMemberNonExportedPackage\"\n-                        + \",openNonExportedPackages\"\n-                        + \",setAccessibleNonPublicMemberNonExportedPackage\",\n-                \"--patch-module\", \"java.base=\" + patch,\n-                \"--illegal-access=warn\").asLines();\n-        assertTrue(count(output2, \"WARNING\") == 1);  \/\/ one warning\n-    }\n-\n-    \/**\n-     * Specify Add-Exports in JAR file manifest\n-     *\/\n-    public void testWithAddExportsInManifest() throws Exception {\n-        Manifest man = new Manifest();\n-        Attributes attrs = man.getMainAttributes();\n-        attrs.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attrs.put(Attributes.Name.MAIN_CLASS, \"TryAccess\");\n-        attrs.put(new Attributes.Name(\"Add-Exports\"),\n-                  \"java.base\/sun.security.x509 java.base\/sun.nio.ch\");\n-        Path jarfile = Paths.get(\"x.jar\");\n-        Path classes = Paths.get(TEST_CLASSES);\n-        JarUtils.createJarFile(jarfile, man, classes, Paths.get(\"TryAccess.class\"));\n-\n-        run(jarfile, \"reflectPublicMemberNonExportedPackage\", successNoWarning());\n-\n-        run(jarfile, \"reflectPublicMemberNonExportedPackage\", successNoWarning(),\n-                \"--illegal-access=permit\");\n-\n-        \/\/ should fail as Add-Exports does not open package\n-        run(jarfile, \"setAccessibleNonPublicMemberNonExportedPackage\",\n-            fail(\"InaccessibleObjectException\"));\n-    }\n-\n-    \/**\n-     * Specify Add-Opens in JAR file manifest\n-     *\/\n-    public void testWithAddOpensInManifest() throws Exception {\n-        Manifest man = new Manifest();\n-        Attributes attrs = man.getMainAttributes();\n-        attrs.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attrs.put(Attributes.Name.MAIN_CLASS, \"TryAccess\");\n-        attrs.put(new Attributes.Name(\"Add-Opens\"), \"java.base\/java.lang\");\n-        Path jarfile = Paths.get(\"x.jar\");\n-        Path classes = Paths.get(TEST_CLASSES);\n-        JarUtils.createJarFile(jarfile, man, classes, Paths.get(\"TryAccess.class\"));\n-\n-        run(jarfile, \"setAccessibleNonPublicMemberExportedPackage\", successNoWarning());\n-\n-        run(jarfile, \"setAccessibleNonPublicMemberExportedPackage\", successNoWarning(),\n-                \"--illegal-access=permit\");\n-    }\n-\n-    \/**\n-     * Test that --illegal-access=permit behavior is to print a warning on the\n-     * first illegal access only.\n-     *\/\n-    public void testWarnOnFirstIllegalAccess() throws Exception {\n-        String action1 = \"reflectPublicMemberNonExportedPackage\";\n-        String action2 = \"setAccessibleNonPublicMemberExportedPackage\";\n-        int warningCount = count(run(action1, \"--illegal-access=permit\").asLines(), \"WARNING\");\n-        assertTrue(warningCount > 0);  \/\/ multi line warning\n-\n-        \/\/ same illegal access\n-        List<String> output1 = run(action1 + \",\" + action1, \"--illegal-access=permit\").asLines();\n-        assertTrue(count(output1, \"WARNING\") == warningCount);\n-\n-        \/\/ different illegal access\n-        List<String> output2 = run(action1 + \",\" + action2, \"--illegal-access=permit\").asLines();\n-        assertTrue(count(output2, \"WARNING\") == warningCount);\n-    }\n-\n-    \/**\n-     * Test that --illegal-access=warn prints a one-line warning per each unique\n-     * illegal access.\n-     *\/\n-    public void testWarnPerIllegalAccess() throws Exception {\n-        String action1 = \"reflectPublicMemberNonExportedPackage\";\n-        String action2 = \"setAccessibleNonPublicMemberExportedPackage\";\n-\n-        \/\/ same illegal access\n-        String repeatedActions = action1 + \",\" + action1;\n-        List<String> output1 = run(repeatedActions, \"--illegal-access=warn\").asLines();\n-        assertTrue(count(output1, \"WARNING\") == 1);\n-\n-        \/\/ different illegal access\n-        String differentActions = action1 + \",\" + action2;\n-        List<String> output2 = run(differentActions, \"--illegal-access=warn\").asLines();\n-        assertTrue(count(output2, \"WARNING\") == 2);\n-    }\n-\n-    \/**\n-     * Specify --illegal-access more than once, last one wins\n-     *\/\n-    public void testRepeatedOption() throws Exception {\n-        run(\"accessPublicClassNonExportedPackage\", successNoWarning(),\n-                \"--illegal-access=deny\", \"--illegal-access=permit\");\n-        run(\"accessPublicClassNonExportedPackage\", fail(\"IllegalAccessError\"),\n-                \"--illegal-access=permit\", \"--illegal-access=deny\");\n-    }\n-\n-    \/**\n-     * Specify bad value to --illegal-access\n-     *\/\n-    public void testBadValue() throws Exception {\n-        run(\"accessPublicClassNonExportedPackage\",\n-                fail(\"Value specified to --illegal-access not recognized\"),\n-                \"--illegal-access=BAD\");\n-    }\n-\n-    private int count(Iterable<String> lines, CharSequence cs) {\n-        int count = 0;\n-        for (String line : lines) {\n-            if (line.contains(cs)) count++;\n-        }\n-        return count;\n-    }\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/IllegalAccessTest.java","additions":15,"deletions":433,"binary":false,"changes":448,"status":"modified"},{"patch":"@@ -1,188 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.nio.channels.SocketChannel;\n-\n-\/**\n- * Launched by IllegalAccessTest to attempt illegal access.\n- *\/\n-\n-public class TryAccess {\n-\n-    public static void main(String[] args) throws Exception {\n-        String[] methodNames = args[0].split(\",\");\n-        for (String methodName : methodNames) {\n-            Method m = TryAccess.class.getDeclaredMethod(methodName);\n-            m.invoke(null);\n-        }\n-    }\n-\n-    \/\/ -- static access --\n-\n-    static void accessPublicClassNonExportedPackage() throws Exception {\n-        Object obj = new sun.security.x509.X500Name(\"CN=name\");\n-    }\n-\n-    static void accessPublicClassJdk9NonExportedPackage() {\n-        Object obj = jdk.internal.misc.Unsafe.getUnsafe();\n-    }\n-\n-    \/\/ -- reflective access --\n-\n-    static void reflectPublicMemberExportedPackage() throws Exception {\n-        Constructor<?> ctor = String.class.getConstructor(String.class);\n-        Object name = ctor.newInstance(\"value\");\n-    }\n-\n-    static void reflectNonPublicMemberExportedPackage() throws Exception {\n-        Field f = String.class.getDeclaredField(\"value\");\n-        Object obj = f.get(\"foo\");\n-    }\n-\n-    static void reflectPublicMemberNonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"sun.security.x509.X500Name\");\n-        Constructor<?> ctor = clazz.getConstructor(String.class);\n-        Object obj = ctor.newInstance(\"CN=user\");\n-    }\n-\n-    static void reflectNonPublicMemberNonExportedPackage() throws Exception {\n-        SocketChannel sc = SocketChannel.open();\n-        Field f = sc.getClass().getDeclaredField(\"fd\");\n-        Object obj = f.get(sc);\n-    }\n-\n-    static void reflectPublicMemberJdk9NonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"jdk.internal.misc.Unsafe\");\n-        Method m = clazz.getMethod(\"getUnsafe\");\n-        Object obj = m.invoke(null);\n-    }\n-\n-    static void reflectPublicMemberApplicationModule() throws Exception {\n-        Class<?> clazz = Class.forName(\"p.Type\");\n-        Constructor<?> ctor = clazz.getConstructor(int.class);\n-        Object obj = ctor.newInstance(1);\n-    }\n-\n-    \/\/ -- setAccessible --\n-\n-    static void setAccessiblePublicMemberExportedPackage() throws Exception {\n-        Constructor<?> ctor = String.class.getConstructor(String.class);\n-        ctor.setAccessible(true);\n-    }\n-\n-    static void setAccessibleNonPublicMemberExportedPackage() throws Exception {\n-        Method method = ClassLoader.class.getDeclaredMethod(\"defineClass\",\n-                byte[].class, int.class, int.class);\n-        method.setAccessible(true);\n-    }\n-\n-    static void setAccessiblePublicMemberNonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"sun.security.x509.X500Name\");\n-        Constructor<?> ctor = clazz.getConstructor(String.class);\n-        ctor.setAccessible(true);\n-    }\n-\n-    static void setAccessibleNonPublicMemberNonExportedPackage() throws Exception {\n-        SocketChannel sc = SocketChannel.open();\n-        Field f = sc.getClass().getDeclaredField(\"fd\");\n-        f.setAccessible(true);\n-    }\n-\n-    static void setAccessiblePublicMemberJdk9NonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"jdk.internal.misc.Unsafe\");\n-        Method m = clazz.getMethod(\"getUnsafe\");\n-        m.setAccessible(true);\n-    }\n-\n-    static void setAccessiblePublicMemberApplicationModule() throws Exception {\n-        Class<?> clazz = Class.forName(\"p.Type\");\n-        Constructor<?> ctor = clazz.getConstructor(int.class);\n-        ctor.setAccessible(true);\n-    }\n-\n-\n-    static void setAccessibleNotPublicMemberApplicationModule() throws Exception {\n-        Class<?> clazz = Class.forName(\"p.Type\");\n-        Constructor<?> ctor = clazz.getDeclaredConstructor(int.class, int.class);\n-        ctor.setAccessible(true);\n-    }\n-\n-\n-    \/\/ -- privateLookupIn --\n-\n-    static void privateLookupPublicClassExportedPackage() throws Exception {\n-        MethodHandles.privateLookupIn(String.class, MethodHandles.lookup());\n-    }\n-\n-    static void privateLookupNonPublicClassExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"java.lang.WeakPairMap\");\n-        MethodHandles.privateLookupIn(clazz, MethodHandles.lookup());\n-    }\n-\n-    static void privateLookupPublicClassNonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"sun.security.x509.X500Name\");\n-        MethodHandles.privateLookupIn(clazz, MethodHandles.lookup());\n-    }\n-\n-    static void privateLookupNonPublicClassNonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"sun.nio.ch.SocketChannelImpl\");\n-        MethodHandles.privateLookupIn(clazz, MethodHandles.lookup());\n-    }\n-\n-    static void privateLookupPublicClassJdk9NonExportedPackage() throws Exception {\n-        Class<?> clazz = Class.forName(\"jdk.internal.misc.Unsafe\");\n-        MethodHandles.privateLookupIn(clazz, MethodHandles.lookup());\n-    }\n-\n-    static void privateLookupPublicClassApplicationModule() throws Exception {\n-        Class<?> clazz = Class.forName(\"p.Type\");\n-        MethodHandles.privateLookupIn(clazz, MethodHandles.lookup());\n-    }\n-\n-\n-    \/\/ -- export\/open packages to this unnamed module --\n-\n-    static void exportNonExportedPackages() throws Exception {\n-        Class<?> helper = Class.forName(\"java.lang.Helper\");\n-        Method m = helper.getMethod(\"export\", String.class, Module.class);\n-        m.invoke(null, \"sun.security.x509\", TryAccess.class.getModule());\n-        m.invoke(null, \"sun.nio.ch\", TryAccess.class.getModule());\n-    }\n-\n-    static void openExportedPackage() throws Exception {\n-        Class<?> helper = Class.forName(\"java.lang.Helper\");\n-        Method m = helper.getMethod(\"open\", String.class, Module.class);\n-        m.invoke(null, \"java.lang\", TryAccess.class.getModule());\n-    }\n-\n-    static void openNonExportedPackages() throws Exception {\n-        Class<?> helper = Class.forName(\"java.lang.Helper\");\n-        Method m = helper.getMethod(\"open\", String.class, Module.class);\n-        m.invoke(null, \"sun.security.x509\", TryAccess.class.getModule());\n-        m.invoke(null, \"sun.nio.ch\", TryAccess.class.getModule());\n-    }\n-}\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/TryAccess.java","additions":0,"deletions":188,"binary":false,"changes":188,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module m {\n-    exports p;\n-}\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/modules\/m\/module-info.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-\n-public class Type {\n-\n-    private Type(int x, int y) { }\n-\n-    public Type(int x) { }\n-}\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/modules\/m\/p\/Type.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-public class Helper {\n-    private Helper() { }\n-\n-    \/**\n-     * Exports a package to a module.\n-     *\/\n-    public static void export(String pn, Module other) {\n-        Helper.class.getModule().addExports(pn, other);\n-    }\n-\n-    \/**\n-     * Opens a package to a module.\n-     *\/\n-    public static void open(String pn, Module other) {\n-        Helper.class.getModule().addOpens(pn, other);\n-    }\n-}\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/patchsrc\/java.base\/java\/lang\/Helper.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"}]}