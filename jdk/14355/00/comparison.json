{"files":[{"patch":"@@ -279,0 +279,7 @@\n+  \/\/ NMT expects a 1-to-1 mapping between virtual and physical memory.\n+  \/\/ ZGC can temporarily have multiple virtual addresses pointing to\n+  \/\/ the same physical memory.\n+  \/\/\n+  \/\/ When this function is called we don't know where in the virtual memory\n+  \/\/ this physical memory will be mapped. So we fake that the virtual memory\n+  \/\/ address is the heap base + the given offset.\n@@ -323,0 +330,5 @@\n+\n+    \/\/ Register with NMT\n+    nmt_commit(segment.start(), committed);\n+\n+    \/\/ Register committed segment\n@@ -344,0 +356,5 @@\n+\n+    \/\/ Unregister with NMT\n+    nmt_uncommit(segment.start(), uncommitted);\n+\n+    \/\/ Deregister uncommitted segment\n@@ -354,1 +371,2 @@\n-void ZPhysicalMemoryManager::pretouch_view(zaddress addr, size_t size) const {\n+void ZPhysicalMemoryManager::pretouch(zoffset offset, size_t size) const {\n+  const uintptr_t addr = untype(ZOffset::address(offset));\n@@ -356,1 +374,1 @@\n-  os::pretouch_memory((void*)untype(addr), (void*)(untype(addr) + size), page_size);\n+  os::pretouch_memory((void*)addr, (void*)(addr + size), page_size);\n@@ -359,1 +377,4 @@\n-void ZPhysicalMemoryManager::map_view(zaddress_unsafe addr, const ZPhysicalMemory& pmem) const {\n+\/\/ Map virtual memory to physcial memory\n+void ZPhysicalMemoryManager::map(zoffset offset, const ZPhysicalMemory& pmem) const {\n+  const zaddress_unsafe addr = ZOffset::address_unsafe(offset);\n+\n@@ -378,18 +399,1 @@\n-void ZPhysicalMemoryManager::unmap_view(zaddress_unsafe addr, size_t size) const {\n-  _backing.unmap(addr, size);\n-}\n-\n-void ZPhysicalMemoryManager::pretouch(zoffset offset, size_t size) const {\n-  \/\/ Pre-touch all views\n-  pretouch_view(ZOffset::address(offset), size);\n-}\n-\n-void ZPhysicalMemoryManager::map(zoffset offset, const ZPhysicalMemory& pmem) const {\n-  const size_t size = pmem.size();\n-\n-  \/\/ Map all views\n-  map_view(ZOffset::address_unsafe(offset), pmem);\n-\n-  nmt_commit(offset, size);\n-}\n-\n+\/\/ Unmap virtual memory from physical memory\n@@ -397,1 +401,1 @@\n-  nmt_uncommit(offset, size);\n+  const zaddress_unsafe addr = ZOffset::address_unsafe(offset);\n@@ -399,2 +403,1 @@\n-  \/\/ Unmap all views\n-  unmap_view(ZOffset::address_unsafe(offset), size);\n+  _backing.unmap(addr, size);\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.cpp","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8306841\n+ * @summary Sanity check Java Heap size values\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run driver NMTJavaHeapTest\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class NMTJavaHeapTest {\n+    public static void main(String args[]) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n+              \"-XX:+UnlockDiagnosticVMOptions\",\n+              \"-XX:+PrintNMTStatistics\",\n+              \"-XX:NativeMemoryTracking=summary\",\n+              \"-version\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        \/\/ Java Heap (reserved=786432KB, committed=49152KB)\n+        String pattern = \".*Java Heap \\\\(reserved=.*, committed=(.*)\\\\).*\";\n+        String committed = output.firstMatch(pattern, 1);\n+        Asserts.assertNotNull(committed, \"Couldn't find pattern '\" + pattern\n+                + \"': in output '\" + output.getOutput() + \"'\");\n+\n+        long committedBytes = committedStringToBytes(committed);\n+\n+        \/\/ Must be more than zero\n+        Asserts.assertGT(committedBytes, 0L);\n+\n+        \/\/ Compare against the max heap size\n+        long maxBytes = Runtime.getRuntime().maxMemory();\n+        Asserts.assertLTE(committedBytes, maxBytes);\n+    }\n+\n+    private static long K = 1024;\n+    private static long M = K * 1024;\n+    private static long G = M * 1024;\n+\n+    private static long committedStringToBytes(String committed) {\n+        long multiplier = 1;\n+        if (committed.endsWith(\"GB\")) {\n+            multiplier = G;\n+            committed = committed.replace(\"GB\", \"\");\n+        } else if (committed.endsWith(\"MB\")) {\n+            multiplier = M;\n+            committed = committed.replace(\"MB\", \"\");\n+        } else if (committed.endsWith(\"KB\")) {\n+            multiplier = K;\n+            committed = committed.replace(\"KB\", \"\");\n+        }\n+\n+        return Long.parseLong(committed) * multiplier;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/NMTJavaHeapTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}