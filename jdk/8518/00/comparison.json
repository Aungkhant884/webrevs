{"files":[{"patch":"@@ -764,1 +764,1 @@\n-            if (stream == null) {\n+            if (stream == null && pushContinuationState == null) {\n@@ -804,1 +804,5 @@\n-                        handlePushContinuation(stream, cf);\n+                        if (streamid == pushContinuationState.pushContFrame.streamid())\n+                            handlePushContinuation(stream, cf);\n+                        else\n+                            protocolError(ErrorFrame.PROTOCOL_ERROR, \"Received a Continuation Frame with an \" +\n+                                    \"unexpected stream id\");\n@@ -867,0 +871,11 @@\n+        int promisedStreamid = pp.getPromisedStream();\n+        if (promisedStreamid != nextPushStream) {\n+            resetStream(promisedStreamid, ResetFrame.PROTOCOL_ERROR);\n+            return;\n+        } else if (!reserveStream(false)) {\n+            resetStream(promisedStreamid, ResetFrame.REFUSED_STREAM);\n+            return;\n+        } else {\n+            nextPushStream += 2;\n+        }\n+\n@@ -869,1 +884,0 @@\n-        int promisedStreamid = pp.getPromisedStream();\n@@ -891,2 +905,0 @@\n-        \/\/ Perhaps the following checks could be moved to handlePushPromise()\n-        \/\/ to reset the PushPromise stream earlier?\n@@ -894,10 +906,0 @@\n-        if (promisedStreamid != nextPushStream) {\n-            resetStream(promisedStreamid, ResetFrame.PROTOCOL_ERROR);\n-            return;\n-        } else if (!reserveStream(false)) {\n-            resetStream(promisedStreamid, ResetFrame.REFUSED_STREAM);\n-            return;\n-        } else {\n-            nextPushStream += 2;\n-        }\n-\n@@ -947,0 +949,1 @@\n+            System.err.println(\"closeStream\");\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -252,0 +252,3 @@\n+            if (!cfs.isEmpty())\n+                cfs.forEach(pp::addContinuation);\n+\n@@ -259,4 +262,0 @@\n-                for (ContinuationFrame cf : cfs) {\n-                    conn.outputQ.put(cf);\n-                    System.err.println(\"Server: Scheduled a Continuation to Send\");\n-                }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PushPromiseContinuation.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.internal.net.http.frame.ContinuationFrame;\n@@ -948,0 +949,6 @@\n+        if (pp.getFlags() != HeadersFrame.END_HEADERS && op.hasContinuations()) {\n+            LinkedList<ContinuationFrame> continuations = new LinkedList<>(op.getContinuations());\n+            while (!continuations.isEmpty()) {\n+                writeFrame(continuations.pop());\n+            }\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServerConnection.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.LinkedList;\n+\n+import jdk.internal.net.http.frame.ContinuationFrame;\n@@ -36,0 +39,1 @@\n+    private LinkedList<ContinuationFrame> continuations;\n@@ -48,0 +52,13 @@\n+    public void addContinuation(ContinuationFrame cf) {\n+        if (continuations == null)\n+            continuations = new LinkedList<>();\n+        continuations.add(cf);\n+    }\n+\n+    public boolean hasContinuations() {\n+        return !continuations.isEmpty();\n+    }\n+\n+    public LinkedList<ContinuationFrame> getContinuations() {\n+        return continuations;\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/OutgoingPushPromise.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}