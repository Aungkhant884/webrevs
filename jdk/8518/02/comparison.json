{"files":[{"patch":"@@ -764,1 +764,1 @@\n-            if (stream == null) {\n+            if (stream == null && pushContinuationState == null) {\n@@ -804,1 +804,5 @@\n-                        handlePushContinuation(stream, cf);\n+                        if (streamid == pushContinuationState.pushContFrame.streamid())\n+                            handlePushContinuation(stream, cf);\n+                        else\n+                            protocolError(ErrorFrame.PROTOCOL_ERROR, \"Received a Continuation Frame with an \" +\n+                                    \"unexpected stream id\");\n@@ -891,2 +895,0 @@\n-        \/\/ Perhaps the following checks could be moved to handlePushPromise()\n-        \/\/ to reset the PushPromise stream earlier?\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import java.util.concurrent.CompletionException;\n@@ -69,1 +70,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.*;\n@@ -100,1 +101,1 @@\n-        server.setExchangeSupplier(Http2LPPTestExchangeImpl::new);\n+        server.setExchangeSupplier(Http2PushPromiseContinuationExchangeImpl::new);\n@@ -169,0 +170,25 @@\n+    @Test\n+    public void testSendHeadersOnPushPromiseStream() throws Exception {\n+        \/\/ This test server sends a push promise that should be followed by a continuation but\n+        \/\/ incorrectly sends on Response Headers while the client awaits the continuation.\n+        Http2TestServer faultyServer = new Http2TestServer(false, 0);\n+        faultyServer.addHandler(new ServerPushHandler(), \"\/\");\n+        faultyServer.setExchangeSupplier(Http2PushPromiseHeadersExchangeImpl::new);\n+        System.err.println(\"PushPromiseContinuation: FaultyServer listening on port \" + faultyServer.getAddress().getPort());\n+        faultyServer.start();\n+\n+        int faultyPort = faultyServer.getAddress().getPort();\n+        URI faultyUri = new URI(\"http:\/\/localhost:\" + faultyPort + \"\/\");\n+\n+        HttpClient client = HttpClient.newHttpClient();\n+        \/\/ Server is making a request to an incorrect URI\n+        HttpRequest hreq = HttpRequest.newBuilder(faultyUri).version(HttpClient.Version.HTTP_2).GET().build();\n+        CompletableFuture<HttpResponse<String>> cf =\n+                client.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8), pph);\n+\n+        CompletionException t = expectThrows(CompletionException.class, () -> cf.join());\n+        assertEquals(t.getCause().getClass(), IOException.class, \"Expected an IOException but got \" + t.getCause());\n+        System.err.println(\"Client received the following expected exception: \" + t.getCause());\n+        faultyServer.stop();\n+    }\n+\n@@ -189,1 +215,32 @@\n-    static class Http2LPPTestExchangeImpl extends Http2TestExchangeImpl {\n+    static class Http2PushPromiseHeadersExchangeImpl extends Http2TestExchangeImpl {\n+\n+        Http2PushPromiseHeadersExchangeImpl(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os, Http2TestServerConnection conn, boolean pushAllowed) {\n+            super(streamid, method, reqheaders, rspheadersBuilder, uri, is, sslSession, os, conn, pushAllowed);\n+        }\n+\n+\n+        @Override\n+        public void serverPush(URI uri, HttpHeaders headers, InputStream content) {\n+            HttpHeadersBuilder headersBuilder = new HttpHeadersBuilder();\n+            headersBuilder.setHeader(\":method\", \"GET\");\n+            headersBuilder.setHeader(\":scheme\", uri.getScheme());\n+            headersBuilder.setHeader(\":authority\", uri.getAuthority());\n+            headersBuilder.setHeader(\":path\", uri.getPath());\n+            for (Map.Entry<String,List<String>> entry : headers.map().entrySet()) {\n+                for (String value : entry.getValue())\n+                    headersBuilder.addHeader(entry.getKey(), value);\n+            }\n+            HttpHeaders combinedHeaders = headersBuilder.build();\n+            OutgoingPushPromise pp = new OutgoingPushPromise(streamid, uri, combinedHeaders, content);\n+            \/\/ Indicates to the client that a continuation should be expected\n+            pp.setFlag(0x0);\n+            try {\n+                conn.outputQ.put(pp);\n+                \/\/ writeLoop will spin up thread to read the InputStream\n+            } catch (IOException ex) {\n+                System.err.println(\"TestServer: pushPromise exception: \" + ex);\n+            }\n+        }\n+    }\n+\n+    static class Http2PushPromiseContinuationExchangeImpl extends Http2TestExchangeImpl {\n@@ -194,4 +251,4 @@\n-        Http2LPPTestExchangeImpl(int streamid, String method, HttpHeaders reqheaders,\n-                                 HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is,\n-                                 SSLSession sslSession, BodyOutputStream os,\n-                                 Http2TestServerConnection conn, boolean pushAllowed) {\n+        Http2PushPromiseContinuationExchangeImpl(int streamid, String method, HttpHeaders reqheaders,\n+                                                 HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is,\n+                                                 SSLSession sslSession, BodyOutputStream os,\n+                                                 Http2TestServerConnection conn, boolean pushAllowed) {\n@@ -251,1 +308,2 @@\n-            OutgoingPushPromise pp = new OutgoingPushPromise(streamid, uri, pushPromiseHeaders, content);\n+            OutgoingPushPromise pp = new OutgoingPushPromise(streamid, uri, pushPromiseHeaders, content, cfs);\n+\n@@ -259,4 +317,0 @@\n-                for (ContinuationFrame cf : cfs) {\n-                    conn.outputQ.put(cf);\n-                    System.err.println(\"Server: Scheduled a Continuation to Send\");\n-                }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PushPromiseContinuation.java","additions":66,"deletions":12,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -948,0 +948,5 @@\n+        \/\/ No need to check for END_HEADERS flag here to allow for tests to simulate bad server side\n+        \/\/ behavior i.e Continuation Frames included with END_HEADERS flag set\n+        for (Http2Frame cf : op.getContinuations())\n+            writeFrame(cf);\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServerConnection.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.List;\n+\n+import jdk.internal.net.http.frame.ContinuationFrame;\n@@ -36,0 +39,1 @@\n+    private final List<Http2Frame> continuations;\n@@ -41,0 +45,8 @@\n+        this(parentStream, uri, headers, is, List.of());\n+    }\n+\n+    public OutgoingPushPromise(int parentStream,\n+                               URI uri,\n+                               HttpHeaders headers,\n+                               InputStream is,\n+                               List<ContinuationFrame> continuations) {\n@@ -46,0 +58,1 @@\n+        this.continuations = List.copyOf(continuations);\n@@ -48,0 +61,3 @@\n+    public List<Http2Frame> getContinuations() {\n+        return continuations;\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/OutgoingPushPromise.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}