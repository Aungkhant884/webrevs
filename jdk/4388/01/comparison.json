{"files":[{"patch":"@@ -2854,0 +2854,10 @@\n+  assert(main_limit == cl->limit() || get_ctrl(main_limit) == pre_ctrl, \"wrong control for added limit\");\n+  const TypeInt* orig_limit_t = _igvn.type(orig_limit)->is_int();\n+  bool upward = cl->stride_con() > 0;\n+  \/\/ The new loop limit is <= (for an upward loop) >= (for a downward loop) than the orig limit.\n+  \/\/ The expression that computes the new limit may be too complicated and the computed type of the new limit\n+  \/\/ may be too pessimistic. A CastII here guarantees it's not lost.\n+  main_limit = new CastIINode(main_limit, TypeInt::make(upward ? min_jint : orig_limit_t->_lo,\n+                                                        upward ? orig_limit_t->_hi : max_jint, Type::WidenMax));\n+  main_limit->init_req(0, pre_ctrl);\n+  register_new_node(main_limit, pre_ctrl);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8267399\n+ * @summary C2: java\/text\/Normalizer\/ConformanceTest.java test failed with assertion\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation TestDeadCountedLoop\n+ *\n+ *\/\n+\n+public class TestDeadCountedLoop {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(true, new int[10], false, 0, 1);\n+            test(false, new int[10], false, 0, 1);\n+        }\n+    }\n+\n+    private static int test(boolean flag, int[] array2, boolean flag2, int start, int stop) {\n+        if (array2 == null) {\n+        }\n+        int[] array;\n+        if (flag) {\n+            array = new int[1];\n+        } else {\n+            array = new int[2];\n+        }\n+        int len = array.length;\n+        int v = 1;\n+        for (int j = start; j < stop; j++) {\n+            for (int i = 0; i < len; i++) {\n+                if (i > 0) {\n+                    if (flag2) {\n+                        break;\n+                    }\n+                    v *= array2[i + j];\n+                }\n+            }\n+        }\n+\n+        return v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDeadCountedLoop.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}