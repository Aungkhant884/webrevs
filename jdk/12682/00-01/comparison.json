{"files":[{"patch":"@@ -1881,0 +1881,2 @@\n+    case Op_AddVB:\n+    case Op_AddVS:\n@@ -1882,1 +1884,17 @@\n-    case Op_LoadVectorMasked:\n+    case Op_AddVL:\n+    case Op_AddVF:\n+    case Op_AddVD:\n+    case Op_SubVB:\n+    case Op_SubVS:\n+    case Op_SubVI:\n+    case Op_SubVL:\n+    case Op_SubVF:\n+    case Op_SubVD:\n+    case Op_MulVB:\n+    case Op_MulVS:\n+    case Op_MulVI:\n+    case Op_MulVL:\n+    case Op_MulVF:\n+    case Op_MulVD:\n+    case Op_DivVF:\n+    case Op_DivVD:\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -450,0 +450,28 @@\n+\/\/ vector float div - predicated\n+\n+instruct vdivF_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (DivVF (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vfdiv.vv  $dst_src1, $src2, $mask\\t#@vdivF_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vfdiv_vv(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vdivD_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (DivVD (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vfdiv.vv  $dst_src1, $src2, $mask\\t#@vdivD_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vfdiv_vv(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -850,0 +878,74 @@\n+\/\/ vector mul - predicated\n+\n+instruct vmulB_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVB (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulB_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmulS_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVS (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulS_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmulI_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVI (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulI_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmulL_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVL (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulL_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmulF_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVF (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulF_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vfmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmulD_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (MulVD (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul.vv $dst_src1, $src2, $mask\\t#@vmulD_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vfmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -1921,0 +2023,74 @@\n+\/\/ vector sub - predicated\n+\n+instruct vsubB_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVB (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsub.vv $dst_src1, $src2, $mask\\t#@vsubB_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsubS_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVS (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsub.vv $dst_src1, $src2, $mask\\t#@vsubS_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsubI_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVI (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsub.vv $dst_src1, $src2, $mask\\t#@vsubI_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsubL_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVL (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsub.vv $dst_src1, $src2, $mask\\t#@vsubL_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsubF_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVF (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vfsub.vv $dst_src1, $src2, $mask\\t#@vsubF_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vfsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsubD_masked(vReg dst_src1, vReg src2, pRegGov mask) %{\n+  match(Set dst_src1 (SubVD (Binary dst_src1 src2) mask));\n+  ins_cost(VEC_COST);\n+  format %{ \"vfsub.vv $dst_src1, $src2, $mask\\t#@vsubD_masked\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vfsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":176,"deletions":0,"binary":false,"changes":176,"status":"modified"}]}