{"files":[{"patch":"@@ -229,0 +229,6 @@\n+  \/\/ Clear vector registers independent of previous vl and vtype.\n+  void rvv_clear_register(VectorRegister v) {\n+    vsetvli(t0, x0, Assembler::e64);\n+    vxor_vv(v, v, v);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1936,0 +1936,17 @@\n+    case Op_LoadVector:\n+        opcode = Op_LoadVectorMasked;\n+    case Op_StoreVector:\n+        opcode = Op_StoreVectorMasked;\n+    case Op_RShiftVB:\n+    case Op_RShiftVS:\n+    case Op_RShiftVI:\n+    case Op_RShiftVL:\n+    case Op_LShiftVB:\n+    case Op_LShiftVS:\n+    case Op_LShiftVI:\n+    case Op_LShiftVL:\n+    case Op_URShiftVB:\n+    case Op_URShiftVS:\n+    case Op_URShiftVI:\n+    case Op_URShiftVL:\n+    case Op_VectorBlend:\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-                        VectorRegister reg, BasicType bt, Register base, int length_in_bytes) {\n+                        VectorRegister reg, BasicType bt, Register base,\n+                        int length_in_bytes, Assembler::VectorMask vm = Assembler::unmasked) {\n@@ -43,1 +44,1 @@\n-      masm.vsex_v(reg, base, sew);\n+      masm.vsex_v(reg, base, sew, vm);\n@@ -45,1 +46,4 @@\n-      masm.vlex_v(reg, base, sew);\n+      if (vm == Assembler::v0_t) {\n+        masm.vxor_vv(reg, reg, reg);\n+      }\n+      masm.vlex_v(reg, base, sew, vm);\n@@ -69,1 +73,0 @@\n-      case Op_VectorBlend:\n@@ -162,1 +165,1 @@\n-  format %{ \"vmaskcmp_rvv $dst, $src1, $src2, $cond\" %}\n+  format %{ \"vmaskcmp $dst, $src1, $src2, $cond\" %}\n@@ -175,1 +178,1 @@\n-  format %{ \"vmaskcmp_rvv_masked $dst, $src1, $src2, $vmask, $tmp, $cond\" %}\n+  format %{ \"vmaskcmp_masked $dst, $src1, $src2, $vmask, $tmp, $cond\" %}\n@@ -1510,1 +1513,1 @@\n-instruct vasrB(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vasrBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1512,21 +1515,0 @@\n-  ins_cost(VEC_COST);\n-  effect(TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift 7\\t#@vasrB\\n\\t\"\n-            \"vsra.vi $dst, $src, 7, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsra.vv $dst, $src, $shift, Assembler::v0_t\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerByte - 1, clear the low BitsPerByte - 1 bits\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n-    __ vsra_vi(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               BitsPerByte - 1, Assembler::v0_t);\n-    \/\/ otherwise, shift\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n-    __ vsra_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               as_VectorRegister($shift$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vasrS(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1535,5 +1517,2 @@\n-  effect(TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift, 15\\t#@vasrS\\n\\t\"\n-            \"vsra.vi $dst, $src, 15, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsra.vv $dst, $src, $shift, Assembler::v0_t\" %}\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vasrBS $dst, $src, $shift $tmp\" %}\n@@ -1541,3 +1520,5 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerShort - 1, clear the low BitsPerShort - 1 bits\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > bitsPerElement - 1, clear the low bitsPerElement - 1 bits\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n@@ -1545,1 +1526,1 @@\n-               BitsPerShort - 1, Assembler::v0_t);\n+               bitsPerElement - 1, Assembler::v0_t);\n@@ -1547,1 +1528,1 @@\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n@@ -1554,1 +1535,1 @@\n-instruct vasrI(vReg dst, vReg src, vReg shift) %{\n+instruct vasrIL(vReg dst, vReg src, vReg shift) %{\n@@ -1556,0 +1537,1 @@\n+  match(Set dst (RShiftVL src shift));\n@@ -1557,1 +1539,1 @@\n-  format %{ \"vsra.vv $dst, $src, $shift\\t#@vasrI\" %}\n+  format %{ \"vasrIL $dst, $src, $shift\" %}\n@@ -1559,1 +1541,2 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -1566,2 +1549,3 @@\n-instruct vasrL(vReg dst, vReg src, vReg shift) %{\n-  match(Set dst (RShiftVL src shift));\n+instruct vasrBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+  match(Set dst_src (RShiftVB (Binary dst_src shift) vmask));\n+  match(Set dst_src (RShiftVS (Binary dst_src shift) vmask));\n@@ -1569,1 +1553,2 @@\n-  format %{ \"vsra.vv $dst, $src, $shift\\t#@vasrL\" %}\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vasrBS_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n@@ -1571,3 +1556,11 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n-    __ vsra_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-         as_VectorRegister($shift$$reg));\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    \/\/ if shift > bitsPerElement - 1, clear the low bitsPerElement - 1 bits\n+    __ vmerge_vim(as_VectorRegister($shift$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsra_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n@@ -1578,2 +1571,3 @@\n-instruct vlslB(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n-  match(Set dst (LShiftVB src shift));\n+instruct vasrIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+  match(Set dst_src (RShiftVI (Binary dst_src shift) vmask));\n+  match(Set dst_src (RShiftVL (Binary dst_src shift) vmask));\n@@ -1581,5 +1575,2 @@\n-  effect( TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift, 7\\t#@vlslB\\n\\t\"\n-            \"vxor.vv $dst, $src, $src, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsll.vv $dst, $src, $shift, Assembler::v0_t\" %}\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vasrIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1587,8 +1578,3 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerByte - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n-    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               as_VectorRegister($src$$reg), Assembler::v0_t);\n-    \/\/ otherwise, shift\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n-    __ vsll_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsra_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n@@ -1600,1 +1586,2 @@\n-instruct vlslS(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vlslBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n+  match(Set dst (LShiftVB src shift));\n@@ -1603,5 +1590,2 @@\n-  effect(TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift, 15\\t#@vlslS\\n\\t\"\n-            \"vxor.vv $dst, $src, $src, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsll.vv $dst, $src, $shift, Assembler::v0_t\" %}\n+  effect( TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vlslBS $dst, $src, $shift $tmp\" %}\n@@ -1609,3 +1593,5 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerShort - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > bitsPerElement - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n@@ -1615,1 +1601,1 @@\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n@@ -1622,1 +1608,1 @@\n-instruct vlslI(vReg dst, vReg src, vReg shift) %{\n+instruct vlslIL(vReg dst, vReg src, vReg shift) %{\n@@ -1624,0 +1610,1 @@\n+  match(Set dst (LShiftVL src shift));\n@@ -1625,1 +1612,1 @@\n-  format %{ \"vsll.vv $dst, $src, $shift\\t#@vlslI\" %}\n+  format %{ \"vlslIL $dst, $src, $shift\" %}\n@@ -1627,1 +1614,2 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -1634,2 +1622,3 @@\n-instruct vlslL(vReg dst, vReg src, vReg shift) %{\n-  match(Set dst (LShiftVL src shift));\n+instruct vlslBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+  match(Set dst_src (LShiftVB (Binary dst_src shift) vmask));\n+  match(Set dst_src (LShiftVS (Binary dst_src shift) vmask));\n@@ -1637,1 +1626,2 @@\n-  format %{ \"vsll.vv $dst, $src, $shift\\t# vector (D)\" %}\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vlslBS_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1639,3 +1629,14 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n-    __ vsll_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               as_VectorRegister($shift$$reg));\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > bitsPerElement - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ vmand_mm(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg),\n+                as_VectorRegister($tmp$$reg));\n+    __ vxor_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsll_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n@@ -1646,2 +1647,3 @@\n-instruct vlsrB(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n-  match(Set dst (URShiftVB src shift));\n+instruct vlslIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+  match(Set dst_src (LShiftVI (Binary dst_src shift) vmask));\n+  match(Set dst_src (LShiftVL (Binary dst_src shift) vmask));\n@@ -1649,5 +1651,1 @@\n-  effect(TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift, 7\\t#@vlsrB\\n\\t\"\n-            \"vxor.vv $dst, $src, $src, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsll.vv $dst, $src, $shift, Assembler::v0_t\" %}\n+  format %{ \"vlslIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1655,8 +1653,3 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerByte - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n-    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               as_VectorRegister($src$$reg), Assembler::v0_t);\n-    \/\/ otherwise, shift\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n-    __ vsrl_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsll_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n@@ -1668,1 +1661,2 @@\n-instruct vlsrS(vReg dst, vReg src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vlsrBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n+  match(Set dst (URShiftVB src shift));\n@@ -1671,5 +1665,2 @@\n-  effect(TEMP_DEF dst);\n-  format %{ \"vmsgtu.vi v0, $shift, 15\\t#@vlsrS\\n\\t\"\n-            \"vxor.vv $dst, $src, $src, Assembler::v0_t\\n\\t\"\n-            \"vmnot.m v0, v0\\n\\t\"\n-            \"vsll.vv $dst, $src, $shift, Assembler::v0_t\" %}\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vlsrBS $dst, $src, $shift $tmp\" %}\n@@ -1677,3 +1668,5 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > BitsPerShort - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > bitsPerElement - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n@@ -1683,1 +1676,1 @@\n-    __ vmnot_m(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg));\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n@@ -1690,2 +1683,1 @@\n-\n-instruct vlsrI(vReg dst, vReg src, vReg shift) %{\n+instruct vlsrIL(vReg dst, vReg src, vReg shift) %{\n@@ -1693,0 +1685,1 @@\n+  match(Set dst (URShiftVL src shift));\n@@ -1694,1 +1687,1 @@\n-  format %{ \"vsrl.vv $dst, $src, $shift\\t#@vlsrI\" %}\n+  format %{ \"vlsrIL $dst, $src, $shift\" %}\n@@ -1696,1 +1689,2 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -1703,0 +1697,24 @@\n+instruct vlsrBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+  match(Set dst_src (URShiftVB (Binary dst_src shift) vmask));\n+  match(Set dst_src (URShiftVS (Binary dst_src shift) vmask));\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vlsrBS_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  ins_encode %{\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int bitsPerElement = type2aelembytes(bt) * 8;\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > bitsPerElement - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ vmand_mm(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg),\n+                as_VectorRegister($tmp$$reg));\n+    __ vxor_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsrl_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -1704,2 +1722,3 @@\n-instruct vlsrL(vReg dst, vReg src, vReg shift) %{\n-  match(Set dst (URShiftVL src shift));\n+instruct vlsrIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+  match(Set dst_src (URShiftVI (Binary dst_src shift) vmask));\n+  match(Set dst_src (URShiftVL (Binary dst_src shift) vmask));\n@@ -1707,1 +1726,2 @@\n-  format %{ \"vsrl.vv $dst, $src, $shift\\t#@vlsrL\" %}\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vlsrIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1709,3 +1729,4 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n-    __ vsrl_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n-               as_VectorRegister($shift$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsrl_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n@@ -2426,3 +2447,2 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n-    __ vsetvli(t0, $src$$Register, sew);\n+    __ rvv_clear_register(as_VectorRegister($dst$$reg));\n+    __ vsetvli(t0, $src$$Register, Assembler::e8);\n@@ -2438,3 +2458,2 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n-    __ vsetvli(t0, $src$$Register, sew);\n+    __ rvv_clear_register(as_VectorRegister($dst$$reg));\n+    __ vsetvli(t0, $src$$Register, Assembler::e8);\n@@ -2450,2 +2469,2 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, (uint)($con$$constant));\n+    __ rvv_clear_register(as_VectorRegister($dst$$reg));\n+    __ rvv_vsetvli(T_BYTE, (uint)($con$$constant));\n@@ -2481,0 +2500,1 @@\n+    __ rvv_clear_register(as_VectorRegister($dst$$reg));\n@@ -2513,0 +2533,1 @@\n+    __ rvv_clear_register(as_VectorRegister($dst$$reg));\n@@ -2561,2 +2582,1 @@\n-instruct vmaskcast_same_esize_rvv(vRegMask dst_src) %{\n-  predicate(Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)));\n+instruct vmaskcast(vRegMask dst_src) %{\n@@ -2565,1 +2585,1 @@\n-  format %{ \"vmaskcast_same_esize_rvv $dst_src\\t# do nothing\" %}\n+  format %{ \"vmaskcast $dst_src\\t# do nothing\" %}\n@@ -2568,0 +2588,40 @@\n+%}\n+\n+\/\/ vector load\/store - predicated\n+\n+instruct loadV_masked(vReg dst, vmemA mem, vRegMask_V0 vmask) %{\n+  match(Set dst (LoadVectorMasked mem vmask));\n+  format %{ \"loadV_masked $dst, $vmask, $mem\" %}\n+  ins_encode %{\n+    VectorRegister dst_reg = as_VectorRegister($dst$$reg);\n+    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+              Matcher::vector_element_basic_type(this), as_Register($mem$$base),\n+              Matcher::vector_length_in_bytes(this), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct storeV_masked(vReg src, vmemA mem, vRegMask_V0 vmask) %{\n+  match(Set mem (StoreVectorMasked mem (Binary src vmask)));\n+  format %{ \"storeV_masked $mem, $vmask, $src\" %}\n+  ins_encode %{\n+    VectorRegister src_reg = as_VectorRegister($src$$reg);\n+    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+              Matcher::vector_element_basic_type(this, $src), as_Register($mem$$base),\n+              Matcher::vector_length_in_bytes(this, $src), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ Vector blend ---------------------------------\n+\n+instruct vblend(vReg dst, vReg src1, vReg src2, vRegMask_V0 vmask) %{\n+  match(Set dst (VectorBlend (Binary src1 src2) vmask));\n+  format %{ \"vmerge_vvm $dst, $src1, $src2\\t# vector blend\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vmerge_vvm(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n+                  as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":187,"deletions":127,"binary":false,"changes":314,"status":"modified"}]}