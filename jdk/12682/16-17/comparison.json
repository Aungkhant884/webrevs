{"files":[{"patch":"@@ -351,1 +351,1 @@\n-instruct vaddB_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vadd_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -353,12 +353,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vadd.vv $dst_src1, $src2, $vmask\\t#@vaddB_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    __ vadd_vv(as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vaddS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -366,12 +354,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vadd.vv $dst_src1, $src2, $vmask\\t#@vaddS_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    __ vadd_vv(as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vaddI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -379,12 +355,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vadd.vv $dst_src1, $src2, $vmask\\t#@vaddI_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n-    __ vadd_vv(as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vaddL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -393,1 +357,1 @@\n-  format %{ \"vadd.vv $dst_src1, $src2, $vmask\\t#@vaddL_masked\" %}\n+  format %{ \"vadd.vv $dst_src1, $src2, $vmask\\t#@vadd_masked\" %}\n@@ -395,1 +359,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -932,1 +897,1 @@\n-instruct vmulB_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vmul_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -934,11 +899,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulB_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -946,11 +900,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulS_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -958,11 +901,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulI_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n-    __ vmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -971,1 +903,1 @@\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulL_masked\" %}\n+  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmul_masked\" %}\n@@ -973,1 +905,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -2095,1 +2028,1 @@\n-instruct vsubB_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vsub_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2097,11 +2030,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst_src1, $src2, $vmask\\t#@vsubB_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubS_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2109,11 +2031,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst_src1, $src2, $vmask\\t#@vsubS_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubI_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2121,11 +2032,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst_src1, $src2, $vmask\\t#@vsubI_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n-    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubL_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2134,1 +2034,1 @@\n-  format %{ \"vsub.vv $dst_src1, $src2, $vmask\\t#@vsubL_masked\" %}\n+  format %{ \"vsub.vv $dst_src1, $src2, $vmask\\t#@vsub_masked\" %}\n@@ -2136,1 +2036,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":12,"deletions":111,"binary":false,"changes":123,"status":"modified"}]}