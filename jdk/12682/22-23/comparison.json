{"files":[{"patch":"@@ -1307,1 +1307,1 @@\n-void C2_MacroAssembler::minmax_FD(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n+void C2_MacroAssembler::minmax_fp(FloatRegister dst, FloatRegister src1, FloatRegister src2,\n@@ -1619,1 +1619,1 @@\n-void C2_MacroAssembler::minmax_FD_v(VectorRegister dst, VectorRegister src1, VectorRegister src2,\n+void C2_MacroAssembler::minmax_fp_v(VectorRegister dst, VectorRegister src1, VectorRegister src2,\n@@ -1635,1 +1635,1 @@\n-void C2_MacroAssembler::reduce_minmax_FD_v(FloatRegister dst,\n+void C2_MacroAssembler::reduce_minmax_fp_v(FloatRegister dst,\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  void minmax_FD(FloatRegister dst,\n+  void minmax_fp(FloatRegister dst,\n@@ -188,1 +188,1 @@\n- void minmax_FD_v(VectorRegister dst,\n+ void minmax_fp_v(VectorRegister dst,\n@@ -192,1 +192,1 @@\n- void reduce_minmax_FD_v(FloatRegister dst,\n+ void reduce_minmax_fp_v(FloatRegister dst,\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7387,1 +7387,1 @@\n-    __ minmax_FD(as_FloatRegister($dst$$reg),\n+    __ minmax_fp(as_FloatRegister($dst$$reg),\n@@ -7403,1 +7403,1 @@\n-    __ minmax_FD(as_FloatRegister($dst$$reg),\n+    __ minmax_fp(as_FloatRegister($dst$$reg),\n@@ -7419,1 +7419,1 @@\n-    __ minmax_FD(as_FloatRegister($dst$$reg),\n+    __ minmax_fp(as_FloatRegister($dst$$reg),\n@@ -7435,1 +7435,1 @@\n-    __ minmax_FD(as_FloatRegister($dst$$reg),\n+    __ minmax_fp(as_FloatRegister($dst$$reg),\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-instruct vmaskcmp_FD(vRegMask dst, vReg src1, vReg src2, immI cond, vReg tmp1, vReg tmp2) %{\n+instruct vmaskcmp_fp(vRegMask dst, vReg src1, vReg src2, immI cond, vReg tmp1, vReg tmp2) %{\n@@ -204,1 +204,1 @@\n-  format %{ \"vmaskcmp_FD $dst, $src1, $src2, $cond\" %}\n+  format %{ \"vmaskcmp_fp $dst, $src1, $src2, $cond\" %}\n@@ -216,1 +216,1 @@\n-instruct vmaskcmp_FD_masked(vRegMask dst, vReg src1, vReg src2, immI cond, vRegMask_V0 vmask, vReg tmp1, vReg tmp2, vReg tmp3) %{\n+instruct vmaskcmp_fp_masked(vRegMask dst, vReg src1, vReg src2, immI cond, vRegMask_V0 vmask, vReg tmp1, vReg tmp2, vReg tmp3) %{\n@@ -221,1 +221,1 @@\n-  format %{ \"vmaskcmp_FD_masked $dst, $src1, $src2, $vmask, $tmp1, $tmp2, $tmp3 $cond\" %}\n+  format %{ \"vmaskcmp_fp_masked $dst, $src1, $src2, $vmask, $tmp1, $tmp2, $tmp3 $cond\" %}\n@@ -413,1 +413,1 @@\n-instruct vaddF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vadd_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -415,12 +415,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfadd.vv $dst_src1, $src2, $vmask\\t#@vaddF_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n-    __ vfadd_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vaddD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -429,1 +417,1 @@\n-  format %{ \"vfadd.vv $dst_src1, $src2, $vmask\\t#@vaddD_masked\" %}\n+  format %{ \"vfadd.vv $dst_src1, $src2, $vmask\\t#@vadd_fp_masked\" %}\n@@ -431,1 +419,2 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -446,1 +435,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -461,1 +451,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -476,1 +467,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -514,1 +506,1 @@\n-instruct vdivF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vdiv_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -516,12 +508,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfdiv.vv  $dst_src1, $src2, $vmask\\t#@vdivF_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n-    __ vfdiv_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vdivD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -530,1 +510,1 @@\n-  format %{ \"vfdiv.vv  $dst_src1, $src2, $vmask\\t#@vdivD_masked\" %}\n+  format %{ \"vfdiv.vv  $dst_src1, $src2, $vmask\\t#@vdiv_fp_masked\" %}\n@@ -532,1 +512,2 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -581,1 +562,1 @@\n-    __ minmax_FD_v(as_VectorRegister($dst$$reg),\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n@@ -595,1 +576,1 @@\n-    __ minmax_FD_v(as_VectorRegister($dst$$reg),\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n@@ -609,1 +590,1 @@\n-    __ minmax_FD_v(as_VectorRegister($dst$$reg),\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n@@ -623,1 +604,1 @@\n-    __ minmax_FD_v(as_VectorRegister($dst$$reg),\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n@@ -958,1 +939,1 @@\n-instruct vmulF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vmul_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -960,11 +941,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulF_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n-    __ vfmul_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -973,1 +943,1 @@\n-  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmulD_masked\" %}\n+  format %{ \"vmul.vv $dst_src1, $src2, $vmask\\t#@vmul_fp_masked\" %}\n@@ -975,1 +945,2 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -977,1 +948,1 @@\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n@@ -1294,1 +1265,1 @@\n-    __ reduce_minmax_FD_v($dst$$FloatRegister,\n+    __ reduce_minmax_fp_v($dst$$FloatRegister,\n@@ -1309,1 +1280,1 @@\n-    __ reduce_minmax_FD_v($dst$$FloatRegister,\n+    __ reduce_minmax_fp_v($dst$$FloatRegister,\n@@ -1326,1 +1297,1 @@\n-    __ reduce_minmax_FD_v($dst$$FloatRegister,\n+    __ reduce_minmax_fp_v($dst$$FloatRegister,\n@@ -1341,1 +1312,1 @@\n-    __ reduce_minmax_FD_v($dst$$FloatRegister,\n+    __ reduce_minmax_fp_v($dst$$FloatRegister,\n@@ -1491,1 +1462,1 @@\n-instruct vasrBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n+instruct vasrB(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1493,0 +1464,18 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vasrB $dst, $src, $shift, $tmp\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerByte - 1, clear the low BitsPerByte - 1 bits\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    __ vsra_vi(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               BitsPerByte - 1, Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsra_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vasrS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1496,1 +1485,1 @@\n-  format %{ \"vasrBS $dst, $src, $shift $tmp\" %}\n+  format %{ \"vasrS $dst, $src, $shift, $tmp\" %}\n@@ -1498,5 +1487,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > bitsPerElement - 1, clear the low bitsPerElement - 1 bits\n-    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerShort - 1, clear the low BitsPerShort - 1 bits\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1504,1 +1491,1 @@\n-               bitsPerElement - 1, Assembler::v0_t);\n+               BitsPerShort - 1, Assembler::v0_t);\n@@ -1513,1 +1500,1 @@\n-instruct vasrIL(vReg dst, vReg src, vReg shift) %{\n+instruct vasrI(vReg dst, vReg src, vReg shift) %{\n@@ -1515,0 +1502,11 @@\n+  ins_cost(VEC_COST);\n+  format %{ \"vasrI $dst, $src, $shift\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsra_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vasrL(vReg dst, vReg src, vReg shift) %{\n@@ -1517,1 +1515,1 @@\n-  format %{ \"vasrIL $dst, $src, $shift\" %}\n+  format %{ \"vasrL $dst, $src, $shift\" %}\n@@ -1519,2 +1517,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -1527,1 +1524,1 @@\n-instruct vasrBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+instruct vasrB_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1529,0 +1526,18 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vasrB_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n+  ins_encode %{\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    \/\/ if shift > BitsPerByte - 1, clear the low BitsPerByte - 1 bits\n+    __ vmerge_vim(as_VectorRegister($shift$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsra_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vasrS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1532,1 +1547,1 @@\n-  format %{ \"vasrBS_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n+  format %{ \"vasrS_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n@@ -1535,6 +1550,4 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n-    \/\/ if shift > bitsPerElement - 1, clear the low bitsPerElement - 1 bits\n-    __ vmerge_vim(as_VectorRegister($shift$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n+    \/\/ if shift > BitsPerShort - 1, clear the low BitsPerShort - 1 bits\n+    __ vmerge_vim(as_VectorRegister($shift$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1549,1 +1562,1 @@\n-instruct vasrIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vasrI_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1551,0 +1564,13 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vasrI_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsra_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vasrL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1554,1 +1580,1 @@\n-  format %{ \"vasrIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  format %{ \"vasrL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1557,1 +1583,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -1564,1 +1590,1 @@\n-instruct vlslBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n+instruct vlslB(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1566,0 +1592,18 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vlslB $dst, $src, $shift, $tmp\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerByte - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsll_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlslS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1568,2 +1612,2 @@\n-  effect( TEMP_DEF dst, TEMP tmp);\n-  format %{ \"vlslBS $dst, $src, $shift $tmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vlslS $dst, $src, $shift, $tmp\" %}\n@@ -1571,5 +1615,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > bitsPerElement - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerShort - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1586,1 +1628,1 @@\n-instruct vlslIL(vReg dst, vReg src, vReg shift) %{\n+instruct vlslI(vReg dst, vReg src, vReg shift) %{\n@@ -1588,0 +1630,11 @@\n+  ins_cost(VEC_COST);\n+  format %{ \"vlslI $dst, $src, $shift\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsll_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlslL(vReg dst, vReg src, vReg shift) %{\n@@ -1590,1 +1643,1 @@\n-  format %{ \"vlslIL $dst, $src, $shift\" %}\n+  format %{ \"vlslL $dst, $src, $shift\" %}\n@@ -1592,2 +1645,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -1600,1 +1652,1 @@\n-instruct vlslBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+instruct vlslB_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1602,0 +1654,21 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vlslB_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n+  ins_encode %{\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerByte - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    __ vmand_mm(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg),\n+                as_VectorRegister($tmp$$reg));\n+    __ vxor_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsll_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlslS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1605,1 +1678,1 @@\n-  format %{ \"vlslBS_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  format %{ \"vlslS_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n@@ -1608,5 +1681,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > bitsPerElement - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerShort - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1625,1 +1696,1 @@\n-instruct vlslIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vlslI_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1627,0 +1698,12 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vlslI_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsll_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlslL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1629,1 +1712,2 @@\n-  format %{ \"vlslIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vlslL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1631,2 +1715,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -1639,1 +1722,1 @@\n-instruct vlsrBS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n+instruct vlsrB(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1641,0 +1724,18 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vlsrB $dst, $src, $shift, $tmp\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerByte - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmnot_m(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsrl_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlsrS(vReg dst, vReg src, vReg shift, vRegMask_V0 tmp) %{\n@@ -1644,1 +1745,1 @@\n-  format %{ \"vlsrBS $dst, $src, $shift $tmp\" %}\n+  format %{ \"vlsrS $dst, $src, $shift, $tmp\" %}\n@@ -1646,5 +1747,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > bitsPerElement - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerShort - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1661,1 +1760,1 @@\n-instruct vlsrIL(vReg dst, vReg src, vReg shift) %{\n+instruct vlsrI(vReg dst, vReg src, vReg shift) %{\n@@ -1663,0 +1762,11 @@\n+  ins_cost(VEC_COST);\n+  format %{ \"vlsrI $dst, $src, $shift\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsrl_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg),\n+               as_VectorRegister($shift$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlsrL(vReg dst, vReg src, vReg shift) %{\n@@ -1665,1 +1775,1 @@\n-  format %{ \"vlsrIL $dst, $src, $shift\" %}\n+  format %{ \"vlsrL $dst, $src, $shift\" %}\n@@ -1667,2 +1777,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -1675,1 +1784,1 @@\n-instruct vlsrBS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n+instruct vlsrB_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1677,0 +1786,21 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src, USE vmask, TEMP tmp);\n+  format %{ \"vlsrB_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n+  ins_encode %{\n+    __ vmv1r_v(as_VectorRegister($tmp$$reg), as_VectorRegister($vmask$$reg));\n+    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerByte - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerByte - 1);\n+    __ vmand_mm(as_VectorRegister($vmask$$reg), as_VectorRegister($vmask$$reg),\n+                as_VectorRegister($tmp$$reg));\n+    __ vxor_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg), Assembler::v0_t);\n+    \/\/ otherwise, shift\n+    __ vmv1r_v(as_VectorRegister($vmask$$reg), as_VectorRegister($tmp$$reg));\n+    __ vsrl_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlsrS_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask, vReg tmp) %{\n@@ -1680,1 +1810,1 @@\n-  format %{ \"vlsrBS_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  format %{ \"vlsrS_masked $dst_src, $dst_src, $shift, $vmask, $tmp\" %}\n@@ -1683,5 +1813,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    int bitsPerElement = type2aelembytes(bt) * 8;\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n-    \/\/ if shift > bitsPerElement - 1, clear the element\n-    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), bitsPerElement - 1);\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    \/\/ if shift > BitsPerShort - 1, clear the element\n+    __ vmsgtu_vi(as_VectorRegister($vmask$$reg), as_VectorRegister($shift$$reg), BitsPerShort - 1);\n@@ -1700,1 +1828,1 @@\n-instruct vlsrIL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n+instruct vlsrI_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1702,0 +1830,12 @@\n+  ins_cost(VEC_COST);\n+  effect(TEMP_DEF dst_src);\n+  format %{ \"vlsrI_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsrl_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($shift$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vlsrL_masked(vReg dst_src, vReg shift, vRegMask_V0 vmask) %{\n@@ -1705,1 +1845,1 @@\n-  format %{ \"vlsrIL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n+  format %{ \"vlsrL_masked $dst_src, $dst_src, $shift, $vmask\" %}\n@@ -1707,2 +1847,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n@@ -2089,1 +2228,1 @@\n-instruct vsubF_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n+instruct vsub_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2091,11 +2230,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsub.vv $dst_src1, $src2, $vmask\\t#@vsubF_masked\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n-    __ vfsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubD_masked(vReg dst_src1, vReg src2, vRegMask_V0 vmask) %{\n@@ -2104,1 +2232,1 @@\n-  format %{ \"vfsub.vv $dst_src1, $src2, $vmask\\t#@vsubD_masked\" %}\n+  format %{ \"vfsub.vv $dst_src1, $src2, $vmask\\t#@vsub_fp_masked\" %}\n@@ -2106,1 +2234,2 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n@@ -2393,2 +2522,3 @@\n-    __ clear_register_v(as_VectorRegister($dst$$reg));\n-    __ vsetvli(t0, $src$$Register, Assembler::e8);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n+    __ vsetvli(t0, $src$$Register, sew);\n@@ -2404,2 +2534,3 @@\n-    __ clear_register_v(as_VectorRegister($dst$$reg));\n-    __ vsetvli(t0, $src$$Register, Assembler::e8);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n+    __ vsetvli(t0, $src$$Register, sew);\n@@ -2415,2 +2546,2 @@\n-    __ clear_register_v(as_VectorRegister($dst$$reg));\n-    __ rvv_vsetvli(T_BYTE, (uint)($con$$constant));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, (uint)($con$$constant));\n@@ -2446,1 +2577,0 @@\n-    __ clear_register_v(as_VectorRegister($dst$$reg));\n@@ -2479,1 +2609,0 @@\n-    __ clear_register_v(as_VectorRegister($dst$$reg));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":279,"deletions":150,"binary":false,"changes":429,"status":"modified"}]}