{"files":[{"patch":"@@ -1565,4 +1565,5 @@\n-        \/\/ prevent needless tests on elements which are neither included nor selected.\n-        \/\/ Non-included members may still be visible via \"transclusion\" from undocumented enclusure\n-        if (!isIncluded(e) && !configuration.docEnv.isSelected(e)) {\n-            return false;\n+        \/\/ Prevent needless tests on elements which are neither included nor selected.\n+        if (!isIncluded(e)) {\n+            \/\/ Non-included members may still be visible via \"transclusion\" from undocumented enclosures,\n+            \/\/ but we don't want to run doclint on them, possibly causing warnings or errors.\n+            return configuration.docEnv.isSelected(e) && hasBlockTagUnchecked(e, HIDDEN);\n@@ -2661,0 +2662,17 @@\n+    \/*\n+     * Tests whether an element's doc comment contains a block tag without caching it or\n+     * running doclint on it. This is done by using getDocCommentInfo(Element) to retrieve\n+     * the doc comment info.\n+     *\/\n+    boolean hasBlockTagUnchecked(Element element, DocTree.Kind kind) {\n+        DocCommentInfo dcInfo = getDocCommentInfo(element);\n+        if (dcInfo != null && dcInfo.dcTree != null) {\n+            for (DocTree dt : getBlockTags(dcInfo.dcTree)) {\n+                if (dt.getKind() == kind) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -2729,3 +2747,1 @@\n-                if (shouldRunDocLint(element)) {\n-                    configuration.runDocLint(path);\n-                }\n+                configuration.runDocLint(path);\n@@ -2796,13 +2812,0 @@\n-    \/\/ Returns true if we should run doclint for an element, which is the case for\n-    \/\/ included elements as well as non-included members of included types.\n-    private boolean shouldRunDocLint(Element e) {\n-        \/\/ isIncluded is not able to handle overview elements\n-        if (isOverviewElement(e) || isIncluded(e)) {\n-            return true;\n-        }\n-        \/\/ Run doclint on non-incuded members of included type elements.\n-        \/\/ One case this is required for is serialization-related tags on private methods.\n-        TypeElement te = getEnclosingTypeElement(e);\n-        return te != null && isIncluded(te);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    Map<ExecutableElement, OverridingMethodInfo> overriddenMethodTable\n+    Map<ExecutableElement, OverriddenMethodInfo> overriddenMethodTable\n@@ -243,1 +243,1 @@\n-        OverridingMethodInfo found = overriddenMethodTable.get(e);\n+        OverriddenMethodInfo found = overriddenMethodTable.get(e);\n@@ -259,1 +259,1 @@\n-        OverridingMethodInfo found = overriddenMethodTable.get(e);\n+        OverriddenMethodInfo found = overriddenMethodTable.get(e);\n@@ -478,1 +478,1 @@\n-                OverridingMethodInfo p = e.getValue();\n+                OverriddenMethodInfo p = e.getValue();\n@@ -501,1 +501,1 @@\n-            OverridingMethodInfo p = overriddenMethodTable.getOrDefault(m, null);\n+            OverriddenMethodInfo p = overriddenMethodTable.getOrDefault(m, null);\n@@ -589,1 +589,1 @@\n-                            l -> new OverridingMethodInfo(inheritedMethod, false));\n+                            l -> new OverriddenMethodInfo(inheritedMethod, false));\n@@ -601,1 +601,1 @@\n-                        l -> new OverridingMethodInfo(inheritedMethod, simpleOverride));\n+                        l -> new OverriddenMethodInfo(inheritedMethod, simpleOverride));\n@@ -1037,1 +1037,1 @@\n-     * A simple container to encapsulate an overriding method\n+     * A simple container to encapsulate an overridden method\n@@ -1040,1 +1040,1 @@\n-    static class OverridingMethodInfo {\n+    static class OverriddenMethodInfo {\n@@ -1044,1 +1044,1 @@\n-        public OverridingMethodInfo(ExecutableElement overridden, boolean simpleOverride) {\n+        public OverriddenMethodInfo(ExecutableElement overridden, boolean simpleOverride) {\n@@ -1051,1 +1051,1 @@\n-            return \"OverridingMethodInfo[\" + overridden + \",simple:\" + simpleOverride + \"]\";\n+            return \"OverriddenMethodInfo[\" + overridden + \",simple:\" + simpleOverride + \"]\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}