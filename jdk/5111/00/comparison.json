{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import com.sun.source.tree.CompilationUnitTree;\n@@ -40,0 +41,1 @@\n+import com.sun.source.tree.MethodInvocationTree;\n@@ -45,0 +47,1 @@\n+import com.sun.source.util.TreePathScanner;\n@@ -832,1 +835,1 @@\n-    private List<Snippet> compileFailResult(BaseTask xt, String userSource, Kind probableKind) {\n+    private List<Snippet> compileFailResult(BaseTask<?> xt, String userSource, Kind probableKind) {\n@@ -1010,0 +1013,47 @@\n+\n+            if (ins.stream().anyMatch(u -> u.snippet().kind() == Kind.METHOD)) {\n+                \/\/if there is any method declaration, check the body of the method for\n+                \/\/invocations of a method of the same name. It may be an invocation of\n+                \/\/an overloaded method, in which case we need to add all the overloads to\n+                \/\/ins, so that they are processed together and can refer to each other:\n+                Set<Unit> overloads = new LinkedHashSet<>();\n+                Map<OuterWrap, Unit> outter2Unit = new LinkedHashMap<>();\n+                ins.forEach(u -> outter2Unit.put(u.snippet().outerWrap(), u));\n+\n+                state.taskFactory.analyze(outter2Unit.keySet(), at -> {\n+                    Set<Unit> suspiciousMethodInvocation = new LinkedHashSet<>();\n+                    for (CompilationUnitTree cut : at.cuTrees()) {\n+                        Unit unit = outter2Unit.get(at.sourceForFile(cut.getSourceFile()));\n+                        String name = unit.snippet().name();\n+\n+                        new TreePathScanner<Void, Void>() {\n+                            @Override\n+                            public Void visitMethodInvocation(MethodInvocationTree node, Void p) {\n+                                if (node.getMethodSelect().getKind() == Tree.Kind.IDENTIFIER &&\n+                                    ((IdentifierTree) node.getMethodSelect()).getName().contentEquals(name)) {\n+                                    suspiciousMethodInvocation.add(unit);\n+                                }\n+                                return super.visitMethodInvocation(node, p);\n+                            }\n+\n+                        }.scan(cut, null);\n+                    }\n+                    for (Unit source : suspiciousMethodInvocation) {\n+                        for (Snippet dep : state.maps.snippetList()) {\n+                            if (dep != source.snippet() && dep.status().isActive() &&\n+                                dep.kind() == Kind.METHOD &&\n+                                source.snippet().kind() == Kind.METHOD &&\n+                                dep.name().equals(source.snippet().name())) {\n+                                overloads.add(new Unit(state, dep, source.snippet(), new DiagList()));\n+                            }\n+                        }\n+                    }\n+                    return null;\n+                });\n+\n+                if (ins.addAll(overloads)) {\n+                    ins.stream().forEach(Unit::initialize);\n+                    ins.stream().forEach(u -> u.setWrap(ins, ins));\n+                }\n+            }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.net.URI;\n@@ -192,1 +193,1 @@\n-    private <S, T extends BaseTask, Z> Z runTask(Stream<S> inputs,\n+    private <S, T extends BaseTask<S>, Z> Z runTask(Stream<S> inputs,\n@@ -233,1 +234,1 @@\n-    interface Worker<T extends BaseTask, Z> {\n+    interface Worker<T extends BaseTask<?>, Z> {\n@@ -261,0 +262,1 @@\n+        T sourceForFileObject(JavaFileObject file);\n@@ -267,0 +269,2 @@\n+        private final Map<URI, String> file2Snippet = new HashMap<>();\n+\n@@ -269,1 +273,9 @@\n-            return fm.createSourceFileObject(src, \"$NeverUsedName$\", src);\n+            JavaFileObject result = fm.createSourceFileObject(src, \"$NeverUsedName$\", src);\n+\n+            file2Snippet.put(result.toUri(), src);\n+            return result;\n+        }\n+\n+        @Override\n+        public String sourceForFileObject(JavaFileObject file) {\n+            return file2Snippet.get(file.toUri());\n@@ -311,0 +323,2 @@\n+        private final Map<URI, OuterWrap> file2Snippet = new HashMap<>();\n+\n@@ -313,1 +327,9 @@\n-            return fm.createSourceFileObject(w, w.classFullName(), w.wrapped());\n+            JavaFileObject result = fm.createSourceFileObject(w, w.classFullName(), w.wrapped());\n+\n+            file2Snippet.put(result.toUri(), w);\n+            return result;\n+        }\n+\n+        @Override\n+        public OuterWrap sourceForFileObject(JavaFileObject file) {\n+            return file2Snippet.get(file.toUri());\n@@ -335,1 +357,1 @@\n-    class ParseTask extends BaseTask {\n+    class ParseTask extends BaseTask<String> {\n@@ -376,1 +398,1 @@\n-    class AnalyzeTask extends BaseTask {\n+    class AnalyzeTask extends BaseTask<OuterWrap> {\n@@ -414,1 +436,1 @@\n-    class CompileTask extends BaseTask {\n+    class CompileTask extends BaseTask<OuterWrap> {\n@@ -472,1 +494,1 @@\n-    abstract class BaseTask {\n+    abstract class BaseTask<S> {\n@@ -477,1 +499,1 @@\n-        private final SourceHandler<?> sourceHandler;\n+        private final SourceHandler<S> sourceHandler;\n@@ -483,1 +505,1 @@\n-        private <T>BaseTask(SourceHandler<T> sh,\n+        private BaseTask(SourceHandler<S> sh,\n@@ -594,0 +616,4 @@\n+\n+        S sourceForFile(JavaFileObject sourceFile) {\n+            return sourceHandler.sourceForFileObject(sourceFile);\n+        }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TaskFactory.java","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    private final TaskFactory.BaseTask bt;\n+    private final TaskFactory.BaseTask<?> bt;\n@@ -66,1 +66,1 @@\n-    private TreeDissector(TaskFactory.BaseTask bt, CompilationUnitTree targetCompilationUnit, ClassTree targetClass) {\n+    private TreeDissector(TaskFactory.BaseTask<?> bt, CompilationUnitTree targetCompilationUnit, ClassTree targetClass) {\n@@ -72,1 +72,1 @@\n-    static TreeDissector createByFirstClass(TaskFactory.BaseTask bt) {\n+    static TreeDissector createByFirstClass(TaskFactory.BaseTask<?> bt) {\n@@ -95,1 +95,1 @@\n-    static TreeDissector createBySnippet(TaskFactory.BaseTask bt, Snippet si) {\n+    static TreeDissector createBySnippet(TaskFactory.BaseTask<?> bt, Snippet si) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8080357 8167643 8187359 8199762 8080353 8246353 8247456 8267221\n+ * @bug 8080357 8167643 8187359 8199762 8080353 8246353 8247456 8267221 8272135\n@@ -387,0 +387,13 @@\n+\n+    public void testOverloadCalls() {\n+        MethodSnippet orig = methodKey(assertEval(\"int m(String s) { return 0; }\"));\n+        MethodSnippet overload = methodKey(assertEval(\"int m(int i) { return 1; }\"));\n+        assertEval(\"m(\\\"\\\")\", \"0\");\n+        assertEval(\"m(0)\", \"1\");\n+        assertEval(\"int m(String s) { return m(0); }\",\n+                   ste(MAIN_SNIPPET, VALID, VALID, true, null),\n+                   ste(overload, VALID, VALID, true, MAIN_SNIPPET),\n+                   ste(orig, VALID, OVERWRITTEN, false, MAIN_SNIPPET));\n+        assertEval(\"m(\\\"\\\")\", \"1\");\n+        assertEval(\"m(0)\", \"1\");\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/MethodsTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}