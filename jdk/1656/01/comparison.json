{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"opto\/subnode.hpp\"\n@@ -2159,0 +2160,55 @@\n+      assert(false,\"Should not reach here.\");\n+      break;\n+  }\n+}\n+\n+void C2_MacroAssembler::vectortest(int bt, int vlen, XMMRegister src1, XMMRegister src2, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  switch(vlen) {\n+    case 4:\n+      assert(vtmp1 != xnoreg, \"required.\");\n+      \/\/ Broadcast lower 32 bits to 128 bits before ptest\n+      pshufd(vtmp1, src1, 0x0);\n+      if (bt == BoolTest::overflow) {\n+        assert(vtmp2 != xnoreg, \"required.\");\n+        pshufd(vtmp2, src2, 0x0);\n+      } else {\n+        assert(vtmp2 == xnoreg, \"required.\");\n+        vtmp2 = src2;\n+      }\n+      ptest(vtmp1, vtmp2);\n+     break;\n+    case 8:\n+      assert(vtmp1 != xnoreg, \"required.\");\n+      \/\/ Broadcast lower 64 bits to 128 bits before ptest\n+      pshufd(vtmp1, src1, 0x4);\n+      if (bt == BoolTest::overflow) {\n+        assert(vtmp2 != xnoreg, \"required.\");\n+        pshufd(vtmp2, src2, 0x4);\n+      } else {\n+        assert(vtmp2 == xnoreg, \"required.\");\n+        vtmp2 = src2;\n+      }\n+      ptest(vtmp1, vtmp2);\n+     break;\n+    case 16:\n+      assert((vtmp1 == xnoreg) && (vtmp2 == xnoreg), \"required.\");\n+      ptest(src1, src2);\n+      break;\n+    case 32:\n+      assert((vtmp1 == xnoreg) && (vtmp2 == xnoreg), \"required.\");\n+      vptest(src1, src2, Assembler::AVX_256bit);\n+      break;\n+    case 64:\n+      {\n+        KRegister ktemp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n+        assert((vtmp1 == xnoreg) && (vtmp2 == xnoreg), \"required.\");\n+        evpcmpeqb(ktemp, src1, src2, Assembler::AVX_512bit);\n+        if (bt == BoolTest::ne) {\n+          ktestql(ktemp, ktemp);\n+        } else {\n+          assert(bt == BoolTest::overflow, \"required\");\n+          kortestql(ktemp, ktemp);\n+        }\n+      }\n+      break;\n+    default:\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -132,0 +132,4 @@\n+  \/\/ vector test\n+  void vectortest(int bt, int vlen, XMMRegister src1, XMMRegister src2,\n+                  XMMRegister vtmp1 = xnoreg, XMMRegister vtmp2 = xnoreg);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1681,1 +1681,1 @@\n-      } else if (size_in_bits < 128) {\n+      } else if (size_in_bits < 32) {\n@@ -7269,0 +7269,16 @@\n+instruct vptest_alltrue_lt16(rRegI dst, legVec src1, legVec src2, legVec vtmp1, legVec vtmp2, rFlagsReg cr) %{\n+  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n+            vector_length_in_bytes(n->in(1)) < 16 &&\n+            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::overflow);\n+  match(Set dst (VectorTest src1 src2 ));\n+  effect(TEMP vtmp1, TEMP vtmp2, KILL cr);\n+  format %{ \"vector_test $dst,$src1, $src2\\t! using $vtmp1, $vtmp2 and $cr as TEMP\" %}\n+  ins_encode %{\n+    int vlen = vector_length_in_bytes(this, $src1);\n+    __ vectortest(BoolTest::overflow, vlen, $src1$$XMMRegister, $src2$$XMMRegister, $vtmp1$$XMMRegister, $vtmp2$$XMMRegister);\n+    __ setb(Assembler::carrySet, $dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -7270,1 +7286,2 @@\n-  predicate(static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::overflow);\n+  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n+            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::overflow);\n@@ -7276,13 +7293,1 @@\n-    int vlen_enc = vector_length_encoding(vlen);\n-    if (vlen <= 32) {\n-      if (UseAVX == 0) {\n-        assert(vlen <= 16, \"required\");\n-        __ ptest($src1$$XMMRegister, $src2$$XMMRegister);\n-      } else {\n-        __ vptest($src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n-      }\n-    } else {\n-      KRegister ktmp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n-      __ evpcmpeqb(ktmp, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n-      __ kortestql(ktmp, ktmp);\n-    }\n+    __ vectortest(BoolTest::overflow, vlen, $src1$$XMMRegister, $src2$$XMMRegister); \n@@ -7295,0 +7300,16 @@\n+instruct vptest_anytrue_lt16(rRegI dst, legVec src1, legVec src2, legVec vtmp, rFlagsReg cr) %{\n+  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n+            vector_length_in_bytes(n->in(1)) < 16 &&\n+            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::ne);\n+  match(Set dst (VectorTest src1 src2 ));\n+  effect(TEMP vtmp, KILL cr);\n+  format %{ \"vector_test_any_true $dst,$src1,$src2\\t! using $vtmp, $cr as TEMP\" %}\n+  ins_encode %{\n+    int vlen = vector_length_in_bytes(this, $src1);\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister, $vtmp$$XMMRegister);\n+    __ setb(Assembler::notZero, $dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -7296,1 +7317,2 @@\n-  predicate(static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::ne);\n+  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n+            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::ne);\n@@ -7302,13 +7324,1 @@\n-    int vlen_enc = vector_length_encoding(vlen);\n-    if (vlen <= 32) {\n-      if (UseAVX == 0) {\n-        assert(vlen <= 16, \"required\");\n-        __ ptest($src1$$XMMRegister, $src2$$XMMRegister);\n-      } else {\n-        __ vptest($src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n-      }\n-    } else {\n-      KRegister ktmp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n-      __ evpcmpeqb(ktmp, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n-      __ ktestql(ktmp, ktmp);\n-    }\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister);\n@@ -7320,0 +7330,26 @@\n+\n+instruct cmpvptest_anytrue_lt16(rFlagsReg cr, legVec src1, legVec src2, immI_0 zero, legVec vtmp) %{\n+  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 4 &&\n+            vector_length_in_bytes(n->in(1)->in(1)) < 16 &&\n+            static_cast<const VectorTestNode*>(n->in(1))->get_predicate() == BoolTest::ne);\n+  match(Set cr (CmpI (VectorTest src1 src2) zero));\n+  effect(TEMP vtmp);\n+  format %{ \"cmp_vector_test_any_true $src1,$src2\\t! using $vtmp as TEMP\" %}\n+  ins_encode %{\n+    int vlen = vector_length_in_bytes(this, $src1);\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister, $vtmp$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct cmpvptest_anytrue(rFlagsReg cr, legVec src1, legVec src2, immI_0 zero) %{\n+  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 16 &&\n+            static_cast<const VectorTestNode*>(n->in(1))->get_predicate() == BoolTest::ne);\n+  match(Set cr (CmpI (VectorTest src1 src2) zero));\n+  format %{ \"cmp_vector_test_any_true $src1,$src2\\t!\" %}\n+  ins_encode %{\n+    int vlen = vector_length_in_bytes(this, $src1);\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":65,"deletions":29,"binary":false,"changes":94,"status":"modified"}]}