{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.util.HashMap;\n+import java.util.Map;\n@@ -47,0 +49,3 @@\n+    \/\/ NetBeans node corresponding to each opened graph. Used to highlight the\n+    \/\/ focused graph in the Outline window.\n+    private static Map<InputGraph, GraphNode> graphNode = new HashMap<>();\n@@ -59,2 +64,5 @@\n-             if (e instanceof InputGraph) {\n-                return new Node[]{new GraphNode((InputGraph) e)};\n+            if (e instanceof InputGraph) {\n+                InputGraph g = (InputGraph) e;\n+                GraphNode n = new GraphNode(g);\n+                graphNode.put(g, n);\n+                return new Node[]{n};\n@@ -62,2 +70,2 @@\n-                 return new Node[]{new FolderNode((Folder) e)};\n-             } else {\n+                return new Node[]{new FolderNode((Folder) e)};\n+            } else {\n@@ -68,0 +76,8 @@\n+        @Override\n+        protected void destroyNodes(Node[] nodes) {\n+            for (Node n : nodes) {\n+                \/\/ Each node is only present once in the graphNode map.\n+                graphNode.values().remove(n);\n+            }\n+        }\n+\n@@ -108,0 +124,1 @@\n+                    children.destroyNodes(children.getNodes());\n@@ -127,0 +144,8 @@\n+\n+    public static void clearGraphNodeMap() {\n+        graphNode.clear();\n+    }\n+\n+    public static GraphNode getGraphNode(InputGraph graph) {\n+        return graphNode.get(graph);\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/FolderNode.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import com.sun.hotspot.igv.data.services.InputGraphProvider;\n+import com.sun.hotspot.igv.util.LookupHistory;\n@@ -45,0 +47,2 @@\n+import org.openide.util.Exceptions;\n+import org.openide.util.Lookup;\n@@ -48,0 +52,1 @@\n+import org.openide.util.Utilities;\n@@ -60,0 +65,1 @@\n+    private Lookup.Result result = null;\n@@ -128,0 +134,1 @@\n+        FolderNode.clearGraphNodeMap();\n@@ -176,0 +183,3 @@\n+        Lookup.Template<InputGraphProvider> tpl = new Lookup.Template<InputGraphProvider>(InputGraphProvider.class);\n+        result = Utilities.actionsGlobalContext().lookup(tpl);\n+        result.addLookupListener(this);\n@@ -181,0 +191,2 @@\n+        result.removeLookupListener(this);\n+        result = null;\n@@ -208,0 +220,13 @@\n+        \/\/ Highlight the focused graph, if available, in the outline.\n+        if (result.allItems().isEmpty()) {\n+            return;\n+        }\n+        final InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n+        if (p == null) {\n+            return;\n+        }\n+        try {\n+            manager.setSelectedNodes(new GraphNode[]{FolderNode.getGraphNode(p.getGraph())});\n+        } catch (Exception e) {\n+            Exceptions.printStackTrace(e);\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}