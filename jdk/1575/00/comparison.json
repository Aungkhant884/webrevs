{"files":[{"patch":"@@ -200,4 +200,4 @@\n-  const TypeInt* opr              = gvn().type(argument(0))->is_int();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(3))->is_int();\n+  const TypeInt*     opr          = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -205,1 +205,2 @@\n-  if (!opr->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (opr == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      !opr->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -232,0 +233,6 @@\n+  if (sopc == 0) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n+    }\n+    return false; \/\/ operation not supported\n+  }\n@@ -308,7 +315,8 @@\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(3))->is_int();\n-  Node* start                     = argument(4);\n-  const TypeInt* start_val        = gvn().type(start)->is_int();\n-  Node* step                      = argument(5);\n-  const TypeInt* step_val         = gvn().type(step)->is_int();\n-  const TypeInt* wrap             = gvn().type(argument(6))->is_int();\n+  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     start_val     = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     step_val      = gvn().type(argument(5))->isa_int();\n+  const TypeInt*     wrap          = gvn().type(argument(6))->isa_int();\n+\n+  Node* start = argument(4);\n+  Node* step  = argument(5);\n@@ -316,0 +324,3 @@\n+  if (shuffle_klass == NULL || vlen == NULL || start_val == NULL || step_val == NULL || wrap == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -399,5 +410,5 @@\n-  const TypeInstPtr* vector_klass  = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass    = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(2))->is_instptr();\n-  Node* shuffle                    = argument(3);\n-  const TypeInt* vlen              = gvn().type(argument(4))->is_int();\n+  const TypeInstPtr* vector_klass  = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* shuffle_klass = gvn().type(argument(2))->isa_instptr();\n+  Node*              shuffle       = argument(3);\n+  const TypeInt*     vlen          = gvn().type(argument(4))->isa_int();\n@@ -405,0 +416,3 @@\n+  if (vector_klass == NULL || elem_klass == NULL || shuffle_klass == NULL || shuffle->is_top() || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -454,3 +468,3 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(2))->is_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n@@ -458,1 +472,2 @@\n-  if (vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -549,3 +564,3 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(2))->is_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n@@ -553,1 +568,2 @@\n-  if (vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -711,4 +727,4 @@\n-  const TypeInstPtr* vector_klass     = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass       = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen                 = gvn().type(argument(2))->is_int();\n-  const TypeInstPtr* vector_idx_klass = gvn().type(argument(3))->is_instptr();\n+  const TypeInstPtr* vector_klass     = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass       = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen             = gvn().type(argument(2))->isa_int();\n+  const TypeInstPtr* vector_idx_klass = gvn().type(argument(3))->isa_instptr();\n@@ -716,1 +732,2 @@\n-  if (vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || vector_idx_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (vector_klass == NULL || elem_klass == NULL || vector_idx_klass == NULL || vlen == NULL ||\n+      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || vector_idx_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -815,4 +832,4 @@\n-  const TypeInt* opr              = gvn().type(argument(0))->is_int();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(3))->is_int();\n+  const TypeInt*     opr          = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -820,1 +837,2 @@\n-  if (!opr->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (opr == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      !opr->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -902,4 +920,4 @@\n-  const TypeInt* cond             = gvn().type(argument(0))->is_int();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(3))->is_int();\n+  const TypeInt*     cond         = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -907,1 +925,2 @@\n-  if (!cond->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (cond == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      !cond->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -965,4 +984,4 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* mask_klass   = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt*     vlen         = gvn().type(argument(3))->is_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* mask_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -970,0 +989,3 @@\n+  if (mask_klass == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1035,5 +1057,5 @@\n-  const TypeInt*     cond         = gvn().type(argument(0))->is_int();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* mask_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(3))->is_instptr();\n-  const TypeInt*     vlen         = gvn().type(argument(4))->is_int();\n+  const TypeInt*     cond         = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* mask_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(3))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n@@ -1041,0 +1063,3 @@\n+  if (cond == NULL || vector_klass == NULL || mask_klass == NULL || elem_klass == NULL || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1110,4 +1135,4 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass = gvn().type(argument(2))->is_instptr();\n-  const TypeInt*     vlen = gvn().type(argument(3))->is_int();\n+  const TypeInstPtr* vector_klass  = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n@@ -1115,0 +1140,3 @@\n+  if (vector_klass == NULL || shuffle_klass == NULL || elem_klass == NULL || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1185,4 +1213,4 @@\n-  const TypeInt* opr              = gvn().type(argument(0))->is_int();\n-  const TypeInstPtr* vector_klass = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(3))->is_int();\n+  const TypeInt*     opr          = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -1190,0 +1218,3 @@\n+  if (opr == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1216,0 +1247,6 @@\n+  if (opc == 0 || !VectorNode::is_shift_opcode(opc)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** operation not supported: op=%d bt=%s\", opr->get_con(), type2name(elem_bt));\n+    }\n+    return false; \/\/ operation not supported\n+  }\n@@ -1217,0 +1254,6 @@\n+  if (sopc == 0) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n+    }\n+    return false; \/\/ operation not supported\n+  }\n@@ -1250,1 +1293,1 @@\n-  const TypeInt*     opr               = gvn().type(argument(0))->is_int();\n+  const TypeInt*     opr               = gvn().type(argument(0))->isa_int();\n@@ -1252,3 +1295,3 @@\n-  const TypeInstPtr* vector_klass_from = gvn().type(argument(1))->is_instptr();\n-  const TypeInstPtr* elem_klass_from   = gvn().type(argument(2))->is_instptr();\n-  const TypeInt*     vlen_from         = gvn().type(argument(3))->is_int();\n+  const TypeInstPtr* vector_klass_from = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass_from   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen_from         = gvn().type(argument(3))->isa_int();\n@@ -1256,3 +1299,3 @@\n-  const TypeInstPtr* vector_klass_to   = gvn().type(argument(4))->is_instptr();\n-  const TypeInstPtr* elem_klass_to     = gvn().type(argument(5))->is_instptr();\n-  const TypeInt*     vlen_to           = gvn().type(argument(6))->is_int();\n+  const TypeInstPtr* vector_klass_to   = gvn().type(argument(4))->isa_instptr();\n+  const TypeInstPtr* elem_klass_to     = gvn().type(argument(5))->isa_instptr();\n+  const TypeInt*     vlen_to           = gvn().type(argument(6))->isa_int();\n@@ -1260,0 +1303,5 @@\n+  if (opr == NULL ||\n+      vector_klass_from == NULL || elem_klass_from == NULL || vlen_from == NULL ||\n+      vector_klass_to   == NULL || elem_klass_to   == NULL || vlen_to   == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1434,4 +1482,4 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(2))->is_int();\n-  const TypeInt* idx              = gvn().type(argument(4))->is_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     idx          = gvn().type(argument(4))->isa_int();\n@@ -1439,0 +1487,3 @@\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL || idx == NULL) {\n+    return false; \/\/ dead code\n+  }\n@@ -1524,4 +1575,4 @@\n-  const TypeInstPtr* vector_klass = gvn().type(argument(0))->is_instptr();\n-  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->is_instptr();\n-  const TypeInt* vlen             = gvn().type(argument(2))->is_int();\n-  const TypeInt* idx              = gvn().type(argument(4))->is_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(0))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(1))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     idx          = gvn().type(argument(4))->isa_int();\n@@ -1529,0 +1580,3 @@\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL || idx == NULL) {\n+    return false; \/\/ dead code\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":126,"deletions":72,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    default:          ShouldNotReachHere(); return 0;\n+    default:          return 0;\n@@ -48,9 +48,4 @@\n-  case Op_AddL:\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_AddVL;\n-  case Op_AddF:\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_AddVF;\n-  case Op_AddD:\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_AddVD;\n+  case Op_AddL: return (bt == T_LONG   ? Op_AddVL : 0);\n+  case Op_AddF: return (bt == T_FLOAT  ? Op_AddVF : 0);\n+  case Op_AddD: return (bt == T_DOUBLE ? Op_AddVD : 0);\n+\n@@ -64,1 +59,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -66,9 +61,4 @@\n-  case Op_SubL:\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_SubVL;\n-  case Op_SubF:\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_SubVF;\n-  case Op_SubD:\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_SubVD;\n+  case Op_SubL: return (bt == T_LONG   ? Op_SubVL : 0);\n+  case Op_SubF: return (bt == T_FLOAT  ? Op_SubVF : 0);\n+  case Op_SubD: return (bt == T_DOUBLE ? Op_SubVD : 0);\n+\n@@ -82,1 +72,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -84,3 +74,1 @@\n-  case Op_MulL:\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_MulVL;\n+  case Op_MulL: return (bt == T_LONG ? Op_MulVL : 0);\n@@ -88,2 +76,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_MulVF;\n+    return (bt == T_FLOAT ? Op_MulVF : 0);\n@@ -91,2 +78,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_MulVD;\n+    return (bt == T_DOUBLE ? Op_MulVD : 0);\n@@ -94,2 +80,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_FmaVD;\n+    return (bt == T_DOUBLE ? Op_FmaVD : 0);\n@@ -97,2 +82,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_FmaVF;\n+    return (bt == T_FLOAT ? Op_FmaVF : 0);\n@@ -100,2 +84,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_CMoveVF;\n+    return (bt == T_FLOAT ? Op_CMoveVF : 0);\n@@ -103,2 +86,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_CMoveVD;\n+    return (bt == T_DOUBLE ? Op_CMoveVD : 0);\n@@ -106,2 +88,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_DivVF;\n+    return (bt == T_FLOAT ? Op_DivVF : 0);\n@@ -109,2 +90,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_DivVD;\n+    return (bt == T_DOUBLE ? Op_DivVD : 0);\n@@ -118,1 +98,1 @@\n-    default: ShouldNotReachHere(); return 0;\n+    default:      return 0;\n@@ -121,2 +101,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_AbsVL;\n+    return (bt == T_LONG ? Op_AbsVL : 0);\n@@ -130,1 +109,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -133,2 +112,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_MinV;\n+    return (bt == T_LONG ? Op_MinV : 0);\n@@ -136,2 +114,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_MinV;\n+    return (bt == T_FLOAT ? Op_MinV : 0);\n@@ -139,2 +116,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_MinV;\n+    return (bt == T_DOUBLE ? Op_MinV : 0);\n@@ -148,1 +124,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -151,2 +127,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_MaxV;\n+    return (bt == T_LONG ? Op_MaxV : 0);\n@@ -154,2 +129,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_MaxV;\n+    return (bt == T_FLOAT ? Op_MaxV : 0);\n@@ -157,2 +131,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_MaxV;\n+    return (bt == T_DOUBLE ? Op_MaxV : 0);\n@@ -160,2 +133,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_AbsVF;\n+    return (bt == T_FLOAT ? Op_AbsVF : 0);\n@@ -163,2 +135,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_AbsVD;\n+    return (bt == T_DOUBLE ? Op_AbsVD : 0);\n@@ -166,2 +137,1 @@\n-    assert(bt == T_INT, \"must be\");\n-    return Op_NegVI;\n+    return (bt == T_INT ? Op_NegVI : 0);\n@@ -169,2 +139,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_NegVF;\n+    return (bt == T_FLOAT ? Op_NegVF : 0);\n@@ -172,2 +141,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_NegVD;\n+    return (bt == T_DOUBLE ? Op_NegVD : 0);\n@@ -175,2 +143,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_RoundDoubleModeV;\n+    return (bt == T_DOUBLE ? Op_RoundDoubleModeV : 0);\n@@ -178,2 +145,1 @@\n-    assert(bt == T_LONG || bt == T_INT, \"must be\");\n-    return Op_RotateLeftV;\n+    return (bt == T_LONG || bt == T_INT ? Op_RotateLeftV : 0);\n@@ -181,2 +147,1 @@\n-    assert(bt == T_LONG || bt == T_INT, \"must be\");\n-    return Op_RotateRightV;\n+    return (bt == T_LONG || bt == T_INT ? Op_RotateRightV : 0);\n@@ -184,2 +149,1 @@\n-    assert(bt == T_FLOAT, \"must be\");\n-    return Op_SqrtVF;\n+    return (bt == T_FLOAT ? Op_SqrtVF : 0);\n@@ -187,2 +151,1 @@\n-    assert(bt == T_DOUBLE, \"must be\");\n-    return Op_SqrtVD;\n+    return (bt == T_DOUBLE ? Op_SqrtVD : 0);\n@@ -190,3 +153,0 @@\n-    if (bt == T_INT) {\n-      return Op_PopCountVI;\n-    }\n@@ -195,1 +155,1 @@\n-    return 0;\n+    return (bt == T_INT ? Op_PopCountVI : 0);\n@@ -203,1 +163,1 @@\n-      default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -206,2 +166,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_LShiftVL;\n+    return (bt == T_LONG ? Op_LShiftVL : 0);\n@@ -215,1 +174,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -218,2 +177,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_RShiftVL;\n+    return (bt == T_LONG ? Op_RShiftVL : 0);\n@@ -221,2 +179,1 @@\n-    assert(bt == T_BYTE, \"must be\");\n-    return Op_URShiftVB;\n+    return (bt == T_BYTE ? Op_URShiftVB : 0);\n@@ -224,2 +181,1 @@\n-    assert(bt == T_SHORT, \"must be\");\n-    return Op_URShiftVS;\n+    return (bt == T_SHORT ? Op_URShiftVS : 0);\n@@ -237,1 +193,1 @@\n-    default:       ShouldNotReachHere(); return 0;\n+    default:       return 0;\n@@ -240,2 +196,1 @@\n-    assert(bt == T_LONG, \"must be\");\n-    return Op_URShiftVL;\n+    return (bt == T_LONG ? Op_URShiftVL : 0);\n@@ -375,2 +330,2 @@\n-bool VectorNode::is_shift(Node* n) {\n-  switch (n->Opcode()) {\n+bool VectorNode::is_shift_opcode(int opc) {\n+  switch (opc) {\n@@ -381,0 +336,2 @@\n+  case Op_URShiftB:\n+  case Op_URShiftS:\n@@ -389,0 +346,4 @@\n+bool VectorNode::is_shift(Node* n) {\n+  return is_shift_opcode(n->Opcode());\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":57,"deletions":96,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+  static bool is_shift_opcode(int opc);\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}