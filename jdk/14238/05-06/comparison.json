{"files":[{"patch":"@@ -3624,1 +3624,0 @@\n-\n@@ -3626,0 +3625,14 @@\n+    \/\/ If create_vm exits because of a pending exception, exit with that\n+    \/\/ exception.  In the future when we figure out how to reclaim memory,\n+    \/\/ we may be able to exit with JNI_ERR and allow the calling application\n+    \/\/ to continue.\n+    if (Universe::is_fully_initialized()) {\n+      \/\/ otherwise no pending exception possible - VM will already have aborted\n+      Thread* current = Thread::current_or_null();\n+      if (current != nullptr) {\n+        JavaThread* THREAD = JavaThread::cast(current); \/\/ For exception macros.\n+        assert(HAS_PENDING_EXCEPTION, \"must be - else no current thread exists\");\n+        HandleMark hm(THREAD);\n+        vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n+      }\n+    }\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -568,5 +568,4 @@\n-    \/\/ failed by throwing an exception. In that case report it and exit.\n-    if (main_thread->has_pending_exception()) {\n-      assert(Universe::is_fully_initialized(), \"must be\");\n-      HandleMark hm(main_thread);\n-      vm_exit_during_initialization(Handle(main_thread, main_thread->pending_exception()));\n+    \/\/ failed by throwing an exception. In that case our caller JNI_CreateJavaVM\n+    \/\/ will want to report it, so we can't delete the main thread.\n+    if (!main_thread->has_pending_exception()) {\n+      main_thread->smr_delete();\n@@ -574,1 +573,0 @@\n-    main_thread->smr_delete();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}