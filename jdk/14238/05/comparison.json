{"files":[{"patch":"@@ -3624,0 +3624,1 @@\n+\n@@ -3625,12 +3626,0 @@\n-    \/\/ If create_vm exits because of a pending exception, exit with that\n-    \/\/ exception.  In the future when we figure out how to reclaim memory,\n-    \/\/ we may be able to exit with JNI_ERR and allow the calling application\n-    \/\/ to continue.\n-    if (Universe::is_fully_initialized()) {\n-      \/\/ otherwise no pending exception possible - VM will already have aborted\n-      JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n-      if (HAS_PENDING_EXCEPTION) {\n-        HandleMark hm(THREAD);\n-        vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n-      }\n-    }\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -567,0 +567,7 @@\n+    \/\/ It is possible that we managed to fully initialize Universe but have then\n+    \/\/ failed by throwing an exception. In that case report it and exit.\n+    if (main_thread->has_pending_exception()) {\n+      assert(Universe::is_fully_initialized(), \"must be\");\n+      HandleMark hm(main_thread);\n+      vm_exit_during_initialization(Handle(main_thread, main_thread->pending_exception()));\n+    }\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}