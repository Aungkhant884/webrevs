{"files":[{"patch":"@@ -1641,1 +1641,2 @@\n-                                                                     Symbol* instantiated_method_type) {\n+                                                                     Symbol* instantiated_method_type,\n+                                                                     bool disable_eager_init) {\n@@ -1645,0 +1646,1 @@\n+  FileMapInfo* map_info;\n@@ -1649,0 +1651,3 @@\n+    map_info = FileMapInfo::dynamic_info();\n+  } else {\n+    map_info = FileMapInfo::current_info();\n@@ -1651,1 +1656,1 @@\n-  if (info != NULL) {\n+  if (info != NULL && disable_eager_init == map_info->disable_eager_init()) {\n@@ -1688,1 +1693,1 @@\n-                                                                         bool initialize, TRAPS) {\n+                                                                         bool disable_eager_init, TRAPS) {\n@@ -1729,1 +1734,1 @@\n-  if (initialize) {\n+  if (!disable_eager_init) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -304,1 +304,2 @@\n-                                                      Symbol* instantiated_method_type) NOT_CDS_RETURN_(NULL);\n+                                                      Symbol* instantiated_method_type,\n+                                                      bool disable_eager_init) NOT_CDS_RETURN_(NULL);\n@@ -308,1 +309,1 @@\n-                                                          bool initialize, TRAPS) NOT_CDS_RETURN_(NULL);\n+                                                          bool disable_eager_init, TRAPS) NOT_CDS_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-                                      jboolean initialize);\n+                                      jboolean disableEagerInitialization);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -246,0 +246,1 @@\n+  _disable_eager_init = MetaspaceShared::disable_eager_init();\n@@ -301,0 +302,1 @@\n+  st->print_cr(\"- disable_eager_init              %d\", _disable_eager_init);\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,0 +242,1 @@\n+  bool   _disable_eager_init;           \/\/ setting of the jdk.internal.lambda.disableEagerInitialization property\n@@ -290,0 +291,1 @@\n+  bool disable_eager_init()                const { return _disable_eager_init; }\n@@ -406,0 +408,1 @@\n+  bool    disable_eager_init() const { return header()->disable_eager_init(); }\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+#include <string.h>\n+\n@@ -91,0 +93,1 @@\n+bool MetaspaceShared::_disable_eager_init = false;\n@@ -1818,0 +1821,8 @@\n+void MetaspaceShared::set_disable_eager_init(const char* value) {\n+#ifdef _WINDOWS\n+  _disable_eager_init = (_stricmp(value, \"true\") == 0) ? true : false;\n+#else\n+  _disable_eager_init = (strcasecmp(value, \"true\") == 0) ? true : false;\n+#endif\n+}\n+\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+  static bool _disable_eager_init; \/\/ setting of the jdk.internal.lambda.disableEagerInitialization property\n@@ -284,0 +285,4 @@\n+  \/\/ _disable_eager_init getter and setter\n+  static bool disable_eager_init() { return _disable_eager_init; }\n+  static void set_disable_eager_init(const char* value);\n+\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3810,1 +3810,1 @@\n-                                                        jboolean initialize))\n+                                                        jboolean disableEagerInitialization))\n@@ -3841,1 +3841,2 @@\n-                                                                                   method_type, m, instantiated_method_type);\n+                                                                                   method_type, m, instantiated_method_type,\n+                                                                                   disableEagerInitialization);\n@@ -3844,1 +3845,2 @@\n-    InstanceKlass* loaded_lambda = SystemDictionaryShared::prepare_shared_lambda_proxy_class(lambda_ik, caller_ik, initialize, THREAD);\n+    InstanceKlass* loaded_lambda =\n+      SystemDictionaryShared::prepare_shared_lambda_proxy_class(lambda_ik, caller_ik, disableEagerInitialization, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1474,0 +1474,3 @@\n+  if (strcmp(key, \"jdk.internal.lambda.disableEagerInitialization\") == 0) {\n+    MetaspaceShared::set_disable_eager_init(value);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-                                                           !disableEagerInitialization);\n+                                                           disableEagerInitialization);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                                                   boolean initialize);\n+                                                   boolean disableEagerInitialization);\n@@ -105,1 +105,1 @@\n-                         boolean initialize) {\n+                         boolean disableEagerInitialization) {\n@@ -109,1 +109,1 @@\n-        if (!loadedByBuiltinLoader(caller) || !initialize ||\n+        if (!loadedByBuiltinLoader(caller) ||\n@@ -114,1 +114,1 @@\n-                               implMethod.internalMemberName(), instantiatedMethodType, initialize);\n+                               implMethod.internalMemberName(), instantiatedMethodType, disableEagerInitialization);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                                            jboolean initialize) {\n+                                                            jboolean disableEagerInitialization) {\n@@ -58,1 +58,1 @@\n-                                                 instantiatedMethodType, initialize);\n+                                                 instantiatedMethodType, disableEagerInitialization);\n","filename":"src\/java.base\/share\/native\/libjava\/LambdaProxyClassArchive.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -336,0 +336,1 @@\n+ -runtime\/cds\/appcds\/LambdaEagerInit.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8256487\n+ * @summary Run the LambdaEagerInitTest.java test in static CDS archive mode.\n+ *          Create a base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property.\n+ *          Run with the archive with and without specifying the property.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/lambda\/LambdaEagerInitTest.java\n+ * @run main\/othervm LambdaEagerInit\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LambdaEagerInit {\n+    public static void main(String[] args) throws Exception {\n+        testImpl();\n+    }\n+\n+    private static final String classDir = System.getProperty(\"test.classes\");\n+    private static final String mainClass = \"LambdaEagerInitTest\";\n+    private static final String testProperty = \"-Djdk.internal.lambda.disableEagerInitialization=true\";\n+\n+    static void testImpl() throws Exception {\n+        String appJar = JarBuilder.build(\"lambda_eager\", new File(classDir), null);\n+        String archiveName = mainClass + \".jsa\";\n+\n+        \/\/ create base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(testProperty,\n+                       \"-Xlog:class+load,cds\")\n+            .setArchiveName(archiveName);\n+        CDSTestUtils.createArchiveAndCheck(opts);\n+\n+        \/\/ run with archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, testProperty,  \"-Xlog:class+load,cds=debug\")\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        OutputAnalyzer output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(\".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+              .shouldHaveExitValue(0);\n+\n+        \/\/ run with archive without the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(\".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*java.*util.*stream.*Collectors\")\n+              .shouldNotMatch(\".cds.*Loaded.*lambda.*proxy\")\n+              .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaEagerInit.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8256487\n+ * @summary Run the LambdaEagerInitTest.java test in dynamic CDS archive mode.\n+ *          Tests various combinations of base and dynamic archives dumping and\n+ *          run with those archives with the -Djdk.internal.lambda.disableEagerInitialization\n+ *          property set to {true, false}.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/..\/..\/..\/..\/..\/jdk\/java\/lang\/invoke\/lambda\/LambdaEagerInitTest.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdaEagerInit\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LambdaEagerInit extends DynamicArchiveTestBase {\n+    public static void main(String[] args) throws Exception {\n+        createBaseArchive();\n+        runTest(LambdaEagerInit::createDynamicArchives);\n+        runTest(LambdaEagerInit::doTests);\n+    }\n+\n+    private static final String classDir = System.getProperty(\"test.classes\");\n+    private static final String mainClass = \"LambdaEagerInitTest\";\n+    private static final String testProperty = \"-Djdk.internal.lambda.disableEagerInitialization\";\n+    private static final String baseDisableEagerInit = getNewArchiveName(\"base-disableEagerInit\");\n+    private static final String topDisableEagerInit = getNewArchiveName(\"top-disableEagerInit\");\n+    private static final String topRegular = getNewArchiveName(\"top-regular\");\n+    private static final String failedChecksum = \"Dynamic archive cannot be used: static archive header checksum verification failed.\";\n+    private static final String lambdaClassLoad = \".class.load. LambdaEagerInitTest[$][$]Lambda[$].*\/0x.*source:\";\n+    private static final String lambdaInArchive = lambdaClassLoad + \".*shared.*objects.*file.*(top)\";\n+    private static final String lambdaNotInArchive = lambdaClassLoad + \".*LambdaEagerInitTest\";\n+    static String appJar = null;\n+\n+    static void createBaseArchive() throws Exception {\n+        \/\/ Note: the default base CDS archive (classes.jsa) was created during\n+        \/\/ JDK build time without setting the -Djdk.internal.lambda.disableEagerInitialization property.\n+\n+        \/\/ create base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(testProperty + \"=true\",\n+                       \"-Xlog:class+load,cds\")\n+            .setArchiveName(baseDisableEagerInit);\n+        CDSTestUtils.createArchiveAndCheck(opts);\n+    }\n+\n+    static void createDynamicArchives() throws Exception {\n+        appJar = JarBuilder.build(\"lambda_eager\", new File(classDir), null);\n+        \/\/ create dynamic archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        \/\/ based on the base archive created with the same property setting.\n+        dump2(baseDisableEagerInit, topDisableEagerInit,\n+             testProperty + \"=true\",\n+             \"-Xlog:class+load,cds,cds+dynamic=debug\",\n+             \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Buffer-space to target-space delta\")\n+                           .shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        \/\/ create dynamic archive without the property setting using the default\n+        \/\/ CDS archive as the base.\n+        dump2(null, topRegular,\n+             \"-Xlog:class+load,cds,cds+dynamic=debug\",\n+             \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Buffer-space to target-space delta\")\n+                           .shouldContain(\"Written dynamic archive 0x\");\n+                });\n+    }\n+\n+    static void doTests() throws Exception {\n+        \/\/ doTest(baseArchiveName, dynamicArchiveName, set disableEagerInit during runtime, string to match)\n+        doTest(null, topRegular, true, lambdaNotInArchive);\n+        doTest(null, topRegular, false, lambdaInArchive);\n+        doTest(null, topDisableEagerInit, true, lambdaInArchive);\n+        doTest(null, topDisableEagerInit, false, lambdaNotInArchive);\n+        doTest(baseDisableEagerInit, topRegular, true, failedChecksum);\n+        doTest(baseDisableEagerInit, topRegular, false, failedChecksum);\n+        doTest(baseDisableEagerInit, topDisableEagerInit, true, lambdaInArchive);\n+        doTest(baseDisableEagerInit, topDisableEagerInit, false, lambdaNotInArchive);\n+    }\n+\n+\n+    private static void doTest(String baseArchiveName,\n+                               String topArchiveName,\n+                               boolean propertySetting,\n+                               String match) throws Exception {\n+\n+        String value = propertySetting ? \"=true\" : \"=false\";\n+\n+        \/\/ run with base and dynamic archives\n+        run2(baseArchiveName, topArchiveName,\n+            testProperty + value,\n+            \"-Xlog:class+load,cds+dynamic=debug,cds=debug\",\n+            \"-cp\", appJar, mainClass)\n+            .ifNormalExit(output -> { output.shouldMatch(match); })\n+            .ifAbnormalExit(output -> { output.shouldMatch(match); });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaEagerInit.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}