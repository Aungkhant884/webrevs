{"files":[{"patch":"@@ -317,1 +317,1 @@\n-          \"Update MethodData*s in Tier1-generated code\")                    \\\n+          \"Update MethodData*s in Tier 3 C1 generated code\")                \\\n","filename":"src\/hotspot\/share\/c1\/c1_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- *  * level 0 - interpreter\n+ *  * level 0 - interpreter (Profiling is tracked by a MethodData object, or MDO in short)\n@@ -40,2 +40,11 @@\n- *  * level 3 - C1 with full profiling (level 2 + MDO)\n- *  * level 4 - C2\n+ *  * level 3 - C1 with full profiling (level 2 + All other MDO profiling information)\n+ *  * level 4 - C2 with full profile guided optimization\n+ *\n+ * The MethodData object is created by both the interpreter or either compiler to store any\n+ * profiling information collected on a method (ciMethod::ensure_method_data() for C1 and C2\n+ * and CompilationPolicy::create_mdo() for the interpreter). Both the interpreter and code\n+ * compiled by C1 at level 3 will constantly update profiling information in the MDO during\n+ * execution. The information in the MDO is then used by C1 and C2 during compilation, via\n+ * the compiler interface (ciMethodXXX).\n+ * See ciMethod.cpp and ciMethodData.cpp for information transfer from an MDO to the compilers\n+ * through the compiler interface.\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,1 +41,3 @@\n-\/\/ during zeroth-tier (interpretive) and first-tier execution.\n+\/\/ during zeroth-tier (interpreter) and third-tier (C1 with full profiling)\n+\/\/ execution.\n+\/\/\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}