{"files":[{"patch":"@@ -155,0 +155,2 @@\n+    \/\/ The maximum size of array to allocate. Some VMs reserve some header words in an array.\n+    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n@@ -791,1 +793,5 @@\n-            int len = (int)ze.getSize();\n+            long uncompressedSize = ze.getSize();\n+            if (uncompressedSize > MAX_ARRAY_SIZE) {\n+                throw new OutOfMemoryError(\"Required array size too large\");\n+            }\n+            int len = (int)uncompressedSize;\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.util.JarUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.jar.JarFile;\n+\n+\/**\n+ * @test\n+ * @bug 8242882\n+ * @summary Verify that opening a jar file with a large manifest throws an OutOfMemoryError\n+ * and not a NegativeArraySizeException\n+ * @library \/test\/lib\n+ * @run testng LargeManifestOOMTest\n+ *\/\n+public class LargeManifestOOMTest {\n+    \/\/ file will be created with size greater than Integer.MAX_VALUE\n+    private static final long MANIFEST_FILE_SIZE = Integer.MAX_VALUE + 1024L;\n+\n+    \/**\n+     * Creates a jar which has a large manifest file and then uses the {@link JarFile} to\n+     * {@link JarFile#getManifest() load the manifest}. The call to the {@link JarFile#getManifest()}\n+     * is then expected to throw a {@link OutOfMemoryError}\n+     *\/\n+    @Test\n+    public void testOutOfMemoryError() throws Exception {\n+        final Path jarSourceRoot = Paths.get(\"jar-source\");\n+        createLargeManifest(jarSourceRoot.resolve(\"META-INF\"));\n+        final Path jarFilePath = Paths.get(\"oom-test.jar\");\n+        JarUtils.createJarFile(jarFilePath.toAbsolutePath(), jarSourceRoot);\n+        final JarFile jar = new JarFile(jarFilePath.toFile());\n+        Assert.assertThrows(OutOfMemoryError.class, () -> jar.getManifest());\n+    }\n+\n+    \/**\n+     * Creates a {@code MANIFEST.MF}, whose content is {@link #MANIFEST_FILE_SIZE} in size,\n+     * in the {@code parentDir}\n+     *\n+     * @param parentDir The directory in which the MANIFEST.MF file will be created\n+     *\/\n+    private static void createLargeManifest(final Path parentDir) throws IOException {\n+        Files.createDirectories(parentDir.toAbsolutePath());\n+        final Path manifestFile = parentDir.resolve(\"MANIFEST.MF\");\n+        try (final RandomAccessFile largeManifest = new RandomAccessFile(manifestFile.toFile(), \"rw\")) {\n+            largeManifest.writeUTF(\"Manifest-Version: 1.0\\n\");\n+            largeManifest.writeUTF(\"OOM-Test: a\\n\");\n+            largeManifest.setLength(MANIFEST_FILE_SIZE);\n+        }\n+        System.out.println(\"Size of file \" + manifestFile + \" is \" + manifestFile.toFile().length());\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/LargeManifestOOMTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}