{"files":[{"patch":"@@ -155,7 +155,2 @@\n-    \/**\n-     * The maximum size of array to allocate.\n-     * Some VMs reserve some header words in an array.\n-     * Attempts to allocate larger arrays may result in\n-     * OutOfMemoryError: Required array size too large\n-     *\/\n-    private static final int MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8;\n+    \/\/ The maximum size of array to allocate. Some VMs reserve some header words in an array.\n+    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n@@ -798,2 +793,2 @@\n-            long len = ze.getSize();\n-            if (len > MAX_BUFFER_SIZE) {\n+            long uncompressedSize = ze.getSize();\n+            if (uncompressedSize > MAX_ARRAY_SIZE) {\n@@ -802,0 +797,1 @@\n+            int len = (int)uncompressedSize;\n@@ -805,3 +801,3 @@\n-            if (len >= 0 && len <= 65535) {\n-                b = new byte[(int) len];\n-                bytesRead = is.readNBytes(b, 0, (int) len);\n+            if (len != -1 && len <= 65535) {\n+                b = new byte[len];\n+                bytesRead = is.readNBytes(b, 0, len);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.BufferedWriter;\n@@ -30,0 +29,1 @@\n+import java.io.RandomAccessFile;\n@@ -44,1 +44,2 @@\n-\n+    \/\/ file will be created with size greater than Integer.MAX_VALUE\n+    private static final long MANIFEST_FILE_SIZE = Integer.MAX_VALUE + 1024L;\n@@ -58,5 +59,1 @@\n-        final OutOfMemoryError oome = Assert.expectThrows(OutOfMemoryError.class, () -> jar.getManifest());\n-        \/\/ additionally verify that the OOM was for the right\/expected reason\n-        if (!\"Required array size too large\".equals(oome.getMessage())) {\n-            Assert.fail(\"Unexpected OutOfMemoryError\", oome);\n-        }\n+        Assert.assertThrows(OutOfMemoryError.class, () -> jar.getManifest());\n@@ -66,1 +63,2 @@\n-     * Creates a {@code MANIFEST.MF}, whose content is 2GB in size, in the {@code parentDir}\n+     * Creates a {@code MANIFEST.MF}, whose content is {@link #MANIFEST_FILE_SIZE} in size,\n+     * in the {@code parentDir}\n@@ -73,8 +71,4 @@\n-        try (final BufferedWriter bw = Files.newBufferedWriter(manifestFile)) {\n-            bw.write(\"Manifest-Version: 1.0\");\n-            bw.newLine();\n-            bw.write(\"OOM-Test: \");\n-            for (long i = 0; i < 2147483648L; i++) {\n-                bw.write(\"a\");\n-            }\n-            bw.newLine();\n+        try (final RandomAccessFile largeManifest = new RandomAccessFile(manifestFile.toFile(), \"rw\")) {\n+            largeManifest.writeUTF(\"Manifest-Version: 1.0\\n\");\n+            largeManifest.writeUTF(\"OOM-Test: a\\n\");\n+            largeManifest.setLength(MANIFEST_FILE_SIZE);\n@@ -82,0 +76,1 @@\n+        System.out.println(\"Size of file \" + manifestFile + \" is \" + manifestFile.toFile().length());\n@@ -83,1 +78,0 @@\n-\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/LargeManifestOOMTest.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}