{"files":[{"patch":"@@ -3941,1 +3941,1 @@\n-  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n+  if ((UseAVX >= 1) && (VM_Version::supports_evex() || VM_Version::supports_fma())) {\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  if (VM_Version::supports_avx512vlbwdq()) {     \/\/ AVX512 version\n+  if (VM_Version::supports_evex()) {     \/\/ AVX512 version\n@@ -276,0 +276,5 @@\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                         AVX2 code\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8308966\n+ * @summary Add intrinsic for float\/double modulo for x86 AVX2 and AVX512\n+ * @run main compiler.floatingpoint.DmodTest\n+ *\/\n+\n+ package compiler.floatingpoint;\n+\n+ import java.lang.Double;\n+\n+ public class DmodTest {\n+   static double [] op1 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static double [] op2 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static double [][] res = {\n+      {\n+        0.0f,\n+        Double.NaN,\n+        Double.NaN,\n+        1.2345f,\n+        1.2345f,\n+        Double.NaN,\n+      },\n+      {\n+        0.0f,\n+        Double.NaN,\n+        Double.NaN,\n+        0.0f,\n+        0.0f,\n+        Double.NaN,\n+      },\n+      {\n+        -0.0f,\n+        Double.NaN,\n+        Double.NaN,\n+        -0.0f,\n+        -0.0f,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+   };\n+   public static void main(String[] args) throws Exception {\n+     double f1, f2, f3;\n+     boolean failure = false;\n+     for (int i = 0; i < 100_000; i++) {\n+       for (int j = 0; j < op1.length; j++) {\n+         for (int k = 0; k < op2.length; k++) {\n+           f1 = op1[j];\n+           f2 = op2[k];\n+           f3 = f1 % f2;\n+           if (f3 != res[j][k] && Double.isNaN(f3) != Double.isNaN(res[j][k])) {\n+            System.out.println( \"Actual   \" + f1 + \" % \" + f2 + \" = \" + f3);\n+            System.out.println( \"Expected \" + f1 + \" % \" + f2 + \" = \" + res[j][k]);\n+          }\n+        }\n+      }\n+    }\n+\n+    if (failure) {\n+      throw new RuntimeException(\"Test Failed\");\n+    } else {\n+      System.out.println(\"Test passed.\");\n+    }\n+ }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/DmodTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8308966\n+ * @summary Add intrinsic for float\/double modulo for x86 AVX2 and AVX512\n+ * @run main compiler.floatingpoint.FmodTest\n+ *\/\n+\n+ package compiler.floatingpoint;\n+\n+ import java.lang.Float;\n+\n+ public class FmodTest {\n+   static float [] op1 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static float [] op2 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static float [][] res = {\n+      {\n+        0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        1.2345f,\n+        1.2345f,\n+        Float.NaN,\n+      },\n+      {\n+        0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        0.0f,\n+        0.0f,\n+        Float.NaN,\n+      },\n+      {\n+        -0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        -0.0f,\n+        -0.0f,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+   };\n+\n+   public static void main(String[] args) throws Exception {\n+     float f1, f2, f3;\n+     boolean failure = false;\n+     for (int i = 0; i < 100_000; i++) {\n+       for (int j = 0; j < op1.length; j++) {\n+         for (int k = 0; k < op2.length; k++) {\n+           f1 = op1[j];\n+           f2 = op2[k];\n+           f3 = f1 % f2;\n+           if (f3 != res[j][k] && Float.isNaN(f3) != Float.isNaN(res[j][k])) {\n+             System.out.println( \"Actual   \" + f1 + \" % \" + f2 + \" = \" + f3);\n+             System.out.println( \"Expected \" + f1 + \" % \" + f2 + \" = \" + res[j][k]);\n+             failure = true;\n+           }\n+         }\n+       }\n+     }\n+\n+     if (failure) {\n+       throw new RuntimeException(\"Test Failed\");\n+     } else {\n+       System.out.println(\"Test passed.\");\n+     }\n+   }\n+ }\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/FmodTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}