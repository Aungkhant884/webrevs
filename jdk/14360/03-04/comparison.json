{"files":[{"patch":"@@ -404,0 +404,4 @@\n+\n+JVM_ENTRY_NO_ENV(void, jfr_emit_data_loss(JNIEnv* env, jobject jvm, jlong bytes))\n+  EventDataLoss::commit(bytes, 0L);\n+JVM_END\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,0 +165,2 @@\n+void JNICALL jfr_emit_data_loss(JNIEnv* env, jobject jvm, jlong bytes);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,2 @@\n-      (char*)\"hostTotalMemory\", (char*)\"()J\", (void*) jfr_host_total_memory\n+      (char*)\"hostTotalMemory\", (char*)\"()J\", (void*) jfr_host_total_memory,\n+      (char*)\"emitDataLoss\", (char*)\"(J)V\", (void*)jfr_emit_data_loss\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -644,0 +644,7 @@\n+\n+    \/**\n+     * Emit a jdk.DataLoss event for the specified amount of bytes.\n+     *\n+     * @param bytes number of bytes that were lost\n+     *\/\n+    public native void emitDataLoss(long bytes);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -452,2 +452,1 @@\n-        try {\n-            chunk.finish(time);\n+        if (chunk.finish(time)) {\n@@ -459,6 +458,7 @@\n-        } catch (MissingChunkFileError e) {\n-            Logger.log(LogTag.JFR, LogLevel.ERROR, e.getMessage());\n-            \/\/ With one chunkfile found missing, its likely more could've been removed too. Iterate through all recordings,\n-            \/\/ and check for missing files. This will emit more error logs that can be seen in subsequent recordings.\n-            for (PlatformRecording r : getRecordings()) {\n-                r.removeNonExistantPaths();\n+        } else {\n+            if (chunk.isMissingFile()) {\n+                \/\/ With one chunkfile found missing, its likely more could've been removed too. Iterate through all recordings,\n+                \/\/ and check for missing files. This will emit more error logs that can be seen in subsequent recordings.\n+                for (PlatformRecording r : getRecordings()) {\n+                    r.removeNonExistantPaths();\n+                }\n@@ -466,2 +466,0 @@\n-        } catch (IOException e) {\n-            Logger.log(LogTag.JFR, LogLevel.ERROR, \"Finishing chunk failed: \" + e.getClass().getName() + \", \" + e.getMessage());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -183,1 +184,1 @@\n-                           \"Unable to complete I\/O operation when dumping recording \\\"\" + getName() + \"\\\" (\" + getId() + \")\");\n+                           \"Unable to complete I\/O operation when dumping recording \\\"\" + getName() + \"\\\" (\" + getId() + \") \" + e.getClass() + \" \" + e.getMessage());\n@@ -721,12 +722,1 @@\n-                userPath.doPrivilegedIO(() -> {\n-                    try {\n-                        transferChunks(userPath);\n-                    } catch (java.nio.file.NoSuchFileException nsfe) {\n-                        Logger.log(LogTag.JFR, LogLevel.ERROR, \"Missing chunkfile when writing recording \\\"\" + name + \"\\\" (\" + id + \") to \" + userPath.getRealPathText() + \".\");\n-                        \/\/ if one chunkfile was missing, its likely more are missing\n-                        removeNonExistantPaths();\n-                        \/\/ and try the transfer again\n-                        transferChunks(userPath);\n-                    }\n-                    return null;\n-                });\n+            transferChunksWithRetry(userPath);\n@@ -736,0 +726,15 @@\n+    private void transferChunksWithRetry(WriteableUserPath userPath) throws IOException {\n+        userPath.doPrivilegedIO(() -> {\n+            try {\n+                transferChunks(userPath);\n+            } catch (NoSuchFileException nsfe) {\n+                Logger.log(LogTag.JFR, LogLevel.ERROR, \"Missing chunkfile when writing recording \\\"\" + name + \"\\\" (\" + id + \") to \" + userPath.getRealPathText() + \".\");\n+                \/\/ if one chunkfile was missing, its likely more are missing\n+                removeNonExistantPaths();\n+                \/\/ and try the transfer again\n+                transferChunks(userPath);\n+            }\n+            return null;\n+        });\n+    }\n+\n@@ -903,1 +908,9 @@\n-                    Logger.log(JFR, ERROR, chunk.missingChunkFileErrorMessage());\n+                    String msg = \"Chunkfile \\\"\" + chunk.getFile() + \"\\\" is missing. \" +\n+                                 \"Data loss might occur from \" + chunk.getStartTime();\n+                    if (chunk.getEndTime() != null) {\n+                        msg += \" to \" + chunk.getEndTime();\n+                    }\n+                    Logger.log(JFR, ERROR, msg);\n+\n+                    JVM.getJVM().emitDataLoss(chunk.getSize());\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    void finish(Instant endTime) throws MissingChunkFileError, IOException {\n+    boolean finish(Instant endTime) {\n@@ -66,1 +66,1 @@\n-            this.size = SecuritySupport.getFileSize(chunkFile);\n+            size = SecuritySupport.getFileSize(chunkFile);\n@@ -71,0 +71,1 @@\n+            return true;\n@@ -72,3 +73,4 @@\n-            Logger.log(LogTag.JFR, LogLevel.ERROR, \"Could not finish chunk. \" + e.getClass() + \" \"+ e.getMessage());\n-            if (this.isMissingFile()) {\n-                throw new MissingChunkFileError(missingChunkFileErrorMessage(endTime));\n+            final String reason;\n+            if (isMissingFile()) {\n+                reason = \"Chunkfile \\\"\"+ getFile() + \"\\\" is missing. \" +\n+                         \"Data loss might occur from \" + getStartTime() + \" to \" + endTime;\n@@ -76,1 +78,1 @@\n-                throw e;\n+                reason = e.getClass() + \" \" + e.getMessage();\n@@ -78,0 +80,2 @@\n+            Logger.log(LogTag.JFR, LogLevel.ERROR, \"Could not finish chunk. \" + reason);\n+            return false;\n@@ -185,3 +189,1 @@\n-            if (!SecuritySupport.exists(chunkFile)) {\n-                return true;\n-            }\n+            return !SecuritySupport.exists(chunkFile);\n@@ -189,1 +191,1 @@\n-            \/\/ ignore\n+            return true;\n@@ -191,10 +193,0 @@\n-        return false;\n-    }\n-\n-    String missingChunkFileErrorMessage() {\n-        return missingChunkFileErrorMessage(this.endTime);\n-    }\n-\n-    private String missingChunkFileErrorMessage(Instant endTime) {\n-        return \"Chunkfile \\\"\"+ chunkFile.toString() + \"\\\" is missing. \" +\n-            \"Data loss might occur from \" + startTime.toString() + (endTime != null ? \" to \" + endTime.toString() : \"\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RepositoryChunk.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"}]}