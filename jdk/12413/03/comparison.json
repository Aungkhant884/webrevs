{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -413,1 +413,1 @@\n-                    if (t.close || idleConnections.size() >= MAX_IDLE_CONNECTIONS) {\n+                    if (t.close) {\n@@ -964,3 +964,18 @@\n-        c.idleStartTime = System.currentTimeMillis();\n-        c.setState(State.IDLE);\n-        idleConnections.add(c);\n+        boolean close = false;\n+\n+        synchronized(idleConnections) {\n+            if (idleConnections.size() >= MAX_IDLE_CONNECTIONS) {\n+                \/\/ closing the connection here could block\n+                \/\/ instead set boolean and close outside the synchronized block\n+                close = true;\n+            } else {\n+                c.idleStartTime = System.currentTimeMillis();\n+                c.setState(State.IDLE);\n+                idleConnections.add(c);\n+            }\n+        }\n+\n+        if (close) {\n+            c.close();\n+            allConnections.remove(c);\n+        }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8300268\n+ * @library \/test\/lib\n+ * @modules jdk.httpserver\/sun.net.httpserver\n+ * @build jdk.httpserver\/sun.net.httpserver.HttpServerAccess MaxIdleConnectionsTest\n+ * @run junit\/othervm -Dsun.net.httpserver.maxIdleConnections=4 MaxIdleConnectionsTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import sun.net.httpserver.HttpServerAccess;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class MaxIdleConnectionsTest {\n+\n+    HttpServer server;\n+    int maxIdleConnections, totalConnections;\n+    CountDownLatch reqFinishedProcessing;\n+\n+    @BeforeAll\n+    void before() throws Exception {\n+        maxIdleConnections = Integer.getInteger(\"sun.net.httpserver.maxIdleConnections\");\n+        totalConnections = maxIdleConnections + 1;\n+        reqFinishedProcessing = new CountDownLatch(totalConnections);\n+        server = startServer(reqFinishedProcessing);\n+    }\n+\n+    @AfterAll\n+    void after() throws Exception {\n+        server.stop(0);\n+    }\n+\n+    \/\/ Issue one too many requests and assert that the idle connection pool doesn't\n+    \/\/ exceed maxIdleConnections\n+    @Test\n+    public void test() throws Exception {\n+        final int port = server.getAddress().getPort();\n+\n+        final List<Future<Void>> responses = new ArrayList<>();\n+        try (final ExecutorService requestIssuer = Executors.newFixedThreadPool(totalConnections)) {\n+            for (int i = 1; i <= totalConnections; i++) {\n+                URL requestURL = URIBuilder.newBuilder()\n+                        .scheme(\"http\")\n+                        .loopback()\n+                        .port(port)\n+                        .path(\"\/MaxIdleConnectionTest\/\" + i)\n+                        .toURL();\n+                final Future<Void> result = requestIssuer.submit(() -> {\n+                    System.out.println(\"Issuing request \" + requestURL);\n+                    final URLConnection conn = requestURL.openConnection();\n+                    try (final InputStream is = conn.getInputStream()) {\n+                        is.readAllBytes();\n+                    }\n+                    return null;\n+                });\n+                responses.add(result);\n+            }\n+            \/\/ wait for all the requests to reach each of the handlers\n+            System.out.println(\"Waiting for all \" + totalConnections + \" requests to reach\" +\n+                    \" the server side request handler\");\n+            reqFinishedProcessing.await();\n+        }\n+\n+        \/\/ verify every request got served before checking idle count\n+        for (int i = 0; i < totalConnections; i++) {\n+            responses.get(i).get();\n+            System.out.println(\"Received successful response for request \" + i);\n+        }\n+\n+        \/\/ assert that the limit set by maxIdleConnections was not exceeded\n+        int idleConnectionCount = HttpServerAccess.getIdleConnectionCount(server);\n+        System.out.println(\"count \" + idleConnectionCount);\n+        assertTrue(maxIdleConnections >= idleConnectionCount,\n+                String.format(\"Too many idle connections: %d, limit: %d\", idleConnectionCount, maxIdleConnections));\n+    }\n+\n+    \/\/ Create HttpServer that will handle requests with multiple threads\n+    private static HttpServer startServer(final CountDownLatch reqFinishedProcessing) throws IOException {\n+        final var bindAddr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        final HttpServer server = HttpServer.create(bindAddr, 0);\n+\n+        final AtomicInteger threadId = new AtomicInteger();\n+        server.setExecutor(Executors.newCachedThreadPool(r -> {\n+            final Thread t = new Thread(r);\n+            t.setName(\"http-request-handler-\" + threadId.incrementAndGet());\n+            t.setDaemon(true);\n+            return t;\n+        }));\n+\n+        server.createContext(\"\/MaxIdleConnectionTest\/\", (exchange) -> {\n+            System.out.println(\"Request \" + exchange.getRequestURI() + \" received\");\n+            System.out.println(\"Sending response for request \" + exchange.getRequestURI() + \" from \" + exchange.getRemoteAddress());\n+            reqFinishedProcessing.countDown();\n+            exchange.sendResponseHeaders(200, 0);\n+            exchange.getResponseBody().close();\n+        });\n+\n+        server.start();\n+        System.out.println(\"Server started at address \" + server.getAddress());\n+        return server;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/8300268\/MaxIdleConnectionsTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.net.httpserver;\n+\n+import com.sun.net.httpserver.HttpServer;\n+import java.lang.reflect.Field;\n+import java.util.Set;\n+\n+public class HttpServerAccess {\n+\n+   \/\/ Given a HttpServer object get the number of idleConnections it currently has\n+    public static int getIdleConnectionCount(HttpServer server) throws Exception{\n+        \/\/ Use reflection to get server object which is HTTPServerImpl\n+        Field serverField = server.getClass().getDeclaredField(\"server\");\n+        serverField.setAccessible(true);\n+\n+        \/\/ Get the actual serverImpl class, then get the IdleConnection Field\n+        Object serverImpl = serverField.get(server);\n+        Field idleConnectionField = serverImpl.getClass().getDeclaredField(\"idleConnections\");\n+        idleConnectionField.setAccessible(true);\n+\n+        \/\/ Finally get the IdleConnection object which is of type Set<HttpConnection>\n+        Object idleConnectionSet = idleConnectionField.get(serverImpl);\n+        Set<HttpConnection> idleConnectionPool = (Set<HttpConnection>) idleConnectionSet;\n+        return idleConnectionPool.size();\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/8300268\/jdk.httpserver\/sun\/net\/httpserver\/HttpServerAccess.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}