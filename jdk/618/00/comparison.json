{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,19 @@\n+void ClassFileParser::classfile_icce_error(const char* msg,\n+                                           const Klass* k,\n+                                           TRAPS) const {\n+  assert(_class_name != NULL, \"invariant\");\n+  ResourceMark rm(THREAD);\n+  Exceptions::fthrow(THREAD_AND_LOCATION, vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                     msg, _class_name->as_klass_external_name(), k->external_name());\n+}\n+\n+void ClassFileParser::classfile_ucve_error(const char* msg,\n+                                           const Symbol* class_name,\n+                                           u2 major,\n+                                           u2 minor,\n+                                           TRAPS) const {\n+  ResourceMark rm(THREAD);\n+  Exceptions::fthrow(THREAD_AND_LOCATION, vmSymbols::java_lang_UnsupportedClassVersionError(),\n+                     msg, class_name->as_C_string(), major, minor);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileError.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -4298,1 +4298,1 @@\n-static void check_super_class_access(const InstanceKlass* this_klass, TRAPS) {\n+void ClassFileParser::check_super_class_access(const InstanceKlass* this_klass, TRAPS) {\n@@ -4317,8 +4317,1 @@\n-      ResourceMark rm(THREAD);\n-      Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_IncompatibleClassChangeError(),\n-        \"class %s cannot inherit from sealed class %s\",\n-        this_klass->external_name(),\n-        super_ik->external_name());\n-      return;\n+      classfile_icce_error(\"class %s cannot inherit from sealed class %s\", super_ik, CHECK);\n@@ -4379,1 +4372,1 @@\n-static void check_super_interface_access(const InstanceKlass* this_klass, TRAPS) {\n+void ClassFileParser::check_super_interface_access(const InstanceKlass* this_klass, TRAPS) {\n@@ -4388,9 +4381,4 @@\n-      ResourceMark rm(THREAD);\n-      Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_IncompatibleClassChangeError(),\n-        \"class %s cannot %s sealed interface %s\",\n-        this_klass->external_name(),\n-        this_klass->is_interface() ? \"extend\" : \"implement\",\n-        k->external_name());\n-      return;\n+     classfile_icce_error(this_klass->is_interface() ?\n+                            \"class %s cannot extend sealed interface %s\" :\n+                            \"class %s cannot implement sealed interface %s\",\n+                          k, CHECK);\n@@ -4572,1 +4560,1 @@\n-static void verify_class_version(u2 major, u2 minor, Symbol* class_name, TRAPS){\n+void ClassFileParser::verify_class_version(u2 major, u2 minor, Symbol* class_name, TRAPS){\n@@ -4576,6 +4564,2 @@\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_UnsupportedClassVersionError(),\n-      \"%s (class file version %u.%u) was compiled with an invalid major version\",\n-      class_name->as_C_string(), major, minor);\n-    return;\n+    classfile_ucve_error(\"%s (class file version %u.%u) was compiled with an invalid major version\",\n+                         class_name, major, minor, CHECK);\n@@ -4610,6 +4594,2 @@\n-      Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_UnsupportedClassVersionError(),\n-        \"Preview features are not enabled for %s (class file version %u.%u). Try running with '--enable-preview'\",\n-        class_name->as_C_string(), major, minor);\n-      return;\n+      classfile_ucve_error(\"Preview features are not enabled for %s (class file version %u.%u). Try running with '--enable-preview'\",\n+                           class_name, major, minor, CHECK);\n@@ -4619,5 +4599,2 @@\n-    Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_UnsupportedClassVersionError(),\n-        \"%s (class file version %u.%u) was compiled with an invalid non-zero minor version\",\n-        class_name->as_C_string(), major, minor);\n+    classfile_ucve_error(\"%s (class file version %u.%u) was compiled with an invalid non-zero minor version\",\n+                         class_name, major, minor, CHECK);\n@@ -6131,9 +6108,1 @@\n-      ResourceMark rm(THREAD);\n-      Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_IncompatibleClassChangeError(),\n-        \"class %s has interface %s as super class\",\n-        _class_name->as_klass_external_name(),\n-        _super_klass->external_name()\n-      );\n-      return;\n+      classfile_icce_error(\"class %s has interface %s as super class\", _super_klass, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":15,"deletions":46,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -377,0 +377,10 @@\n+  void classfile_icce_error(const char* msg,\n+                            const Klass* k,\n+                            TRAPS) const;\n+\n+  void classfile_ucve_error(const char* msg,\n+                            const Symbol* class_name,\n+                            u2 major,\n+                            u2 minor,\n+                            TRAPS) const;\n+\n@@ -463,0 +473,2 @@\n+  void verify_class_version(u2 major, u2 minor, Symbol* class_name, TRAPS);\n+\n@@ -470,0 +482,6 @@\n+  void check_super_class_access(const InstanceKlass* this_klass,\n+                                TRAPS);\n+\n+  void check_super_interface_access(const InstanceKlass* this_klass,\n+                                    TRAPS);\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}