{"files":[{"patch":"@@ -41,2 +41,1 @@\n-     * A:[B:]C:D:E[:F][;key=value]   Between 4 and 6 fields separated by \":\",\n-     *          and an optional semicolon-separated key=value list postfix,\n+     * A:[B:]C:D:E[:F]  Between 4 and 6 fields separated by \":\",\n@@ -51,5 +50,0 @@\n-     * The semi-colon separated key=value list postfix can be used to\n-     * provide additional contextual information, thus allowing\n-     * to separate AuthCacheValue instances obtained from different\n-     * contexts.\n-     *\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCache.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -119,2 +120,1 @@\n-        \/\/ need to initialize Authenticator class. Must be better way\n-        Authenticator auth = new Authenticator(){};\n+        ensureClassInitialized(Authenticator.class);\n@@ -132,0 +132,6 @@\n+\n+    private static void ensureClassInitialized(Class<?> c) {\n+        try {\n+            MethodHandles.lookup().ensureInitialized(c);\n+        } catch (IllegalAccessException e) {}\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheImpl.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.Serializable;\n@@ -38,4 +37,1 @@\n-public abstract class AuthCacheValue implements Serializable {\n-\n-    @java.io.Serial\n-    static final long serialVersionUID = 735249334068211611L;\n+public abstract class AuthCacheValue {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheValue.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,3 +58,0 @@\n-    @java.io.Serial\n-    static final long serialVersionUID = -2588378268010453259L;\n-\n@@ -191,4 +188,0 @@\n-    \/\/public String toString () {\n-        \/\/return (\"{\"+type+\":\"+authScheme+\":\"+protocol+\":\"+host+\":\"+port+\":\"+realm+\":\"+path+\"}\");\n-    \/\/}\n-\n@@ -479,28 +472,0 @@\n-    String s1, s2;  \/* used for serialization of pw *\/\n-\n-    @java.io.Serial\n-    \/\/ should be safe to keep synchronized here\n-    private synchronized void readObject(ObjectInputStream s)\n-        throws IOException, ClassNotFoundException\n-    {\n-        s.defaultReadObject ();\n-        pw = new PasswordAuthentication (s1, s2.toCharArray());\n-        s1 = null; s2= null;\n-\/*\n-        if (authenticatorKey == null) {\n-            authenticatorKey = AuthenticatorKeys.DEFAULT;\n-        }\n-*\/\n-    }\n-\n-    @java.io.Serial\n-    \/\/ should be safe to keep synchronized here\n-    private synchronized void writeObject(java.io.ObjectOutputStream s)\n-        throws IOException\n-    {\n-        \/\/Objects.requireNonNull(authenticatorKey);\n-        s1 = pw.getUserName();\n-        s2 = new String (pw.getPassword());\n-        s.defaultWriteObject ();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthenticationInfo.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"}]}