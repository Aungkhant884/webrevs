{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import sun.net.www.protocol.http.AuthenticatorKeys;\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -75,1 +75,1 @@\n-    private final String key = AuthenticatorKeys.computeKey(this);\n+    private final AuthCacheImpl cache;\n@@ -80,1 +80,3 @@\n-    public Authenticator() {}\n+    public Authenticator() {\n+        this.cache = new AuthCacheImpl();\n+    }\n@@ -580,3 +582,0 @@\n-    static String getKey(Authenticator a) {\n-        return a.key;\n-    }\n@@ -584,1 +583,5 @@\n-        AuthenticatorKeys.setAuthenticatorKeyAccess(Authenticator::getKey);\n+        AuthCacheImpl.setAuthCacheAccess(Authenticator::getCache);\n+    }\n+\n+    static AuthCacheImpl getCache(Authenticator a) {\n+        return a == null ? null : a.cache;\n","filename":"src\/java.base\/share\/classes\/java\/net\/Authenticator.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import sun.net.www.protocol.http.AuthenticatorKeys;\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -119,0 +119,2 @@\n+    protected volatile AuthCacheImpl authcache;\n+\n@@ -170,2 +172,0 @@\n-    protected volatile String authenticatorKey;\n-\n@@ -352,2 +352,1 @@\n-                String ak = httpuc == null ? AuthenticatorKeys.DEFAULT\n-                     : httpuc.getAuthenticatorKey();\n+                AuthCacheImpl ak = httpuc == null ? null : httpuc.getAuthCache();\n@@ -355,1 +354,1 @@\n-                     && Objects.equals(ret.getAuthenticatorKey(), ak);\n+                     && Objects.equals(ret.getAuthCache(), ak);\n@@ -387,1 +386,1 @@\n-                ret.authenticatorKey = httpuc.getAuthenticatorKey();\n+                ret.authcache = httpuc.getAuthCache();\n@@ -425,4 +424,2 @@\n-    public final String getAuthenticatorKey() {\n-        String k = authenticatorKey;\n-        if (k == null) return AuthenticatorKeys.DEFAULT;\n-        return k;\n+    public final AuthCacheImpl getAuthCache() {\n+        return authcache;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.Authenticator;\n@@ -108,0 +109,22 @@\n+\n+    @FunctionalInterface\n+    public interface AuthCacheAccess {\n+        public AuthCacheImpl getCache(Authenticator a);\n+    }\n+\n+    static AuthCacheAccess authenticatorCacheAccess;\n+\n+    static {\n+        \/\/ need to initialize Authenticator class. Must be better way\n+        Authenticator auth = new Authenticator(){};\n+    }\n+\n+    public static void setAuthCacheAccess(AuthCacheAccess access) {\n+        if (authenticatorCacheAccess == null && access != null) {\n+            authenticatorCacheAccess = access;\n+        }\n+    }\n+\n+    public static AuthCacheAccess getAuthCacheAccess() {\n+        return authenticatorCacheAccess;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheImpl.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    protected static AuthCache cache = new AuthCacheImpl();\n+    protected static AuthCacheImpl cache = new AuthCacheImpl();\n@@ -53,1 +53,1 @@\n-    public static void setAuthCache (AuthCache map) {\n+    public static void setAuthCache (AuthCacheImpl map) {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.util.function.Function;\n+import java.util.function.BiFunction;\n@@ -138,2 +138,4 @@\n-    private static AuthenticationInfo requestAuthentication(String key, Function<String, AuthenticationInfo> cache) {\n-        AuthenticationInfo cached = cache.apply(key);\n+    private static AuthenticationInfo requestAuthentication(\n+        String key, AuthCacheImpl acache, BiFunction<String, AuthCacheImpl, AuthenticationInfo> cachefunc)\n+    {\n+        AuthenticationInfo cached = cachefunc.apply(key, acache);\n@@ -150,1 +152,1 @@\n-            cached = cache.apply(key);\n+            cached = cachefunc.apply(key, acache);\n@@ -169,1 +171,1 @@\n-        return cache.apply(key);\n+        return cachefunc.apply(key, acache);\n@@ -221,8 +223,2 @@\n-    \/**\n-     * A key identifying the authenticator from which the credentials\n-     * were obtained.\n-     * {@link AuthenticatorKeys#DEFAULT} identifies the {@linkplain\n-     * java.net.Authenticator#setDefault(java.net.Authenticator) default}\n-     * authenticator.\n-     *\/\n-     String authenticatorKey;\n+    \/** A cache to obtain credentials from if the default cache not to be used *\/\n+    transient AuthCacheImpl authcache; \/\/ may be null\n@@ -232,1 +228,1 @@\n-                              int port, String realm, String authenticatorKey) {\n+                              int port, String realm, AuthCacheImpl acache) {\n@@ -240,1 +236,1 @@\n-        this.authenticatorKey = Objects.requireNonNull(authenticatorKey);\n+        this.authcache = acache == null ? cache : acache;\n@@ -257,1 +253,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl acache) {\n@@ -274,10 +270,1 @@\n-        this.authenticatorKey = Objects.requireNonNull(authenticatorKey);\n-    }\n-\n-    \/**\n-     * The {@linkplain java.net.Authenticator#getKey(java.net.Authenticator) key}\n-     * of the authenticator that was used to obtain the credentials.\n-     * @return The authenticator's key.\n-     *\/\n-    public final String getAuthenticatorKey() {\n-        return authenticatorKey;\n+        this.authcache = acache == null ? cache : acache;\n@@ -308,1 +295,1 @@\n-    static AuthenticationInfo getServerAuth(URL url, String authenticatorKey) {\n+    static AuthenticationInfo getServerAuth(URL url, AuthCacheImpl cache) {\n@@ -314,3 +301,2 @@\n-                + \":\" + url.getHost().toLowerCase() + \":\" + port\n-                + \";auth=\" + authenticatorKey;\n-        return getAuth(key, url);\n+                + \":\" + url.getHost().toLowerCase() + \":\" + port;\n+        return getAuth(key, url, cache);\n@@ -325,2 +311,1 @@\n-    static String getServerAuthKey(URL url, String realm, AuthScheme scheme,\n-                                   String authenticatorKey) {\n+    static String getServerAuthKey(URL url, String realm, AuthScheme scheme) {\n@@ -334,2 +319,1 @@\n-                     + \":\" + port + \":\" + realm\n-                     + \";auth=\" + authenticatorKey;\n+                     + \":\" + port + \":\" + realm;\n@@ -339,2 +323,2 @@\n-    private static AuthenticationInfo getCachedServerAuth(String key) {\n-        return getAuth(key, null);\n+    private static AuthenticationInfo getCachedServerAuth(String key, AuthCacheImpl cache) {\n+        return getAuth(key, null, cache);\n@@ -343,3 +327,3 @@\n-    static AuthenticationInfo getServerAuth(String key) {\n-        if (!serializeAuth) return getCachedServerAuth(key);\n-        return requestAuthentication(key, AuthenticationInfo::getCachedServerAuth);\n+    static AuthenticationInfo getServerAuth(String key, AuthCacheImpl cache) {\n+        if (!serializeAuth) return getCachedServerAuth(key, cache);\n+        return requestAuthentication(key, cache, AuthenticationInfo::getCachedServerAuth);\n@@ -353,1 +337,3 @@\n-    static AuthenticationInfo getAuth(String key, URL url) {\n+    static AuthenticationInfo getAuth(String key, URL url, AuthCacheImpl authcache) {\n+        \/\/ use default cache if none supplied\n+        authcache = authcache == null ? cache : authcache;\n@@ -355,1 +341,1 @@\n-            return (AuthenticationInfo)cache.get (key, null);\n+            return (AuthenticationInfo)authcache.get (key, null);\n@@ -357,1 +343,1 @@\n-            return (AuthenticationInfo)cache.get (key, url.getPath());\n+            return (AuthenticationInfo)authcache.get (key, url.getPath());\n@@ -366,5 +352,5 @@\n-    static AuthenticationInfo getProxyAuth(String host, int port,\n-                                           String authenticatorKey) {\n-        String key = PROXY_AUTHENTICATION + \"::\" + host.toLowerCase() + \":\" + port\n-                     + \";auth=\" + authenticatorKey;\n-        AuthenticationInfo result = (AuthenticationInfo) cache.get(key, null);\n+    static AuthenticationInfo getProxyAuth(String host, int port, AuthCacheImpl authcache) {\n+        String key = PROXY_AUTHENTICATION + \"::\" + host.toLowerCase() + \":\" + port;\n+        \/\/ use default cache if none supplied\n+        authcache = authcache == null ? cache : authcache;\n+        AuthenticationInfo result = (AuthenticationInfo) authcache.get(key, null);\n@@ -379,2 +365,1 @@\n-    static String getProxyAuthKey(String host, int port, String realm,\n-                                  AuthScheme scheme, String authenticatorKey) {\n+    static String getProxyAuthKey(String host, int port, String realm, AuthScheme scheme) {\n@@ -383,2 +368,1 @@\n-                        + \":\" + port + \":\" + realm\n-                        + \";auth=\" + authenticatorKey;\n+                        + \":\" + port + \":\" + realm;\n@@ -388,2 +372,3 @@\n-    private static AuthenticationInfo getCachedProxyAuth(String key) {\n-        return (AuthenticationInfo) cache.get(key, null);\n+    private static AuthenticationInfo getCachedProxyAuth(String key, AuthCacheImpl authcache) {\n+        authcache = authcache == null ? cache : authcache;\n+        return (AuthenticationInfo) authcache.get(key, null);\n@@ -392,3 +377,3 @@\n-    static AuthenticationInfo getProxyAuth(String key) {\n-        if (!serializeAuth) return getCachedProxyAuth(key);\n-        return requestAuthentication(key, AuthenticationInfo::getCachedProxyAuth);\n+    static AuthenticationInfo getProxyAuth(String key, AuthCacheImpl authcache) {\n+        if (!serializeAuth) return getCachedProxyAuth(key, authcache);\n+        return requestAuthentication(key, authcache, AuthenticationInfo::getCachedProxyAuth);\n@@ -404,1 +389,1 @@\n-            cache.put(key, this);\n+            authcache.put(key, this);\n@@ -406,1 +391,1 @@\n-                cache.put(cacheKey(false), this);\n+                authcache.put(cacheKey(false), this);\n@@ -423,1 +408,1 @@\n-        cache.remove(cacheKey(true), this);\n+        authcache.remove(cacheKey(true), this);\n@@ -425,1 +410,1 @@\n-            cache.remove(cacheKey(false), this);\n+            authcache.remove(cacheKey(false), this);\n@@ -486,1 +471,0 @@\n-        String authenticatorKey = getAuthenticatorKey();\n@@ -489,2 +473,1 @@\n-                        + host + \":\" + port + \":\" + realm\n-                     + \";auth=\" + authenticatorKey;\n+                        + host + \":\" + port + \":\" + realm;\n@@ -492,2 +475,1 @@\n-            return type + \":\" + protocol + \":\" + host + \":\" + port\n-                     + \";auth=\" + authenticatorKey;\n+            return type + \":\" + protocol + \":\" + host + \":\" + port;\n@@ -507,0 +489,1 @@\n+\/*\n@@ -510,0 +493,1 @@\n+*\/\n@@ -517,1 +501,1 @@\n-        Objects.requireNonNull(authenticatorKey);\n+        \/\/Objects.requireNonNull(authenticatorKey);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthenticationInfo.java","additions":50,"deletions":66,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.net.www.protocol.http;\n-\n-import java.net.Authenticator;\n-import java.util.concurrent.atomic.AtomicLong;\n-\n-\/**\n- *  A class used to tie a key to an authenticator instance.\n- *\/\n-public final class AuthenticatorKeys {\n-    private AuthenticatorKeys() {\n-        throw new InternalError(\"Trying to instantiate static class\");\n-    }\n-\n-    public static final String DEFAULT = \"default\";\n-    private static final AtomicLong IDS = new AtomicLong();\n-\n-    public static String computeKey(Authenticator a) {\n-        return System.identityHashCode(a) + \"-\" + IDS.incrementAndGet()\n-               + \"@\" + a.getClass().getName();\n-    }\n-\n-    \/**\n-     * Returns a key for the given authenticator.\n-     *\n-     * @param authenticator The authenticator; {@code null} should be\n-     *        passed when the {@linkplain\n-     *        Authenticator#setDefault(java.net.Authenticator) default}\n-     *        authenticator is meant.\n-     * @return A key for the given authenticator, {@link #DEFAULT} for\n-     *         {@code null}.\n-     *\/\n-    public static String getKey(Authenticator authenticator) {\n-        if (authenticator == null) {\n-            return DEFAULT;\n-        }\n-        return authenticatorKeyAccess.getKey(authenticator);\n-    }\n-\n-    @FunctionalInterface\n-    public interface AuthenticatorKeyAccess {\n-        public String getKey(Authenticator a);\n-    }\n-\n-    private static AuthenticatorKeyAccess authenticatorKeyAccess;\n-    public static void setAuthenticatorKeyAccess(AuthenticatorKeyAccess access) {\n-        if (authenticatorKeyAccess == null && access != null) {\n-            authenticatorKeyAccess = access;\n-        }\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthenticatorKeys.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -66,1 +66,1 @@\n-                               boolean isUTF8, String authenticatorKey) {\n+                               boolean isUTF8, AuthCacheImpl authCache) {\n@@ -68,2 +68,1 @@\n-              AuthScheme.BASIC, host, port, realm,\n-              Objects.requireNonNull(authenticatorKey));\n+              AuthScheme.BASIC, host, port, realm, authCache);\n@@ -79,1 +78,1 @@\n-                               String authenticatorKey) {\n+                               AuthCacheImpl authCache) {\n@@ -81,2 +80,1 @@\n-              AuthScheme.BASIC, host, port, realm,\n-              Objects.requireNonNull(authenticatorKey));\n+              AuthScheme.BASIC, host, port, realm, authCache);\n@@ -91,1 +89,1 @@\n-                               String authenticatorKey) {\n+                               AuthCacheImpl authCache) {\n@@ -93,2 +91,1 @@\n-              AuthScheme.BASIC, url, realm,\n-              Objects.requireNonNull(authenticatorKey));\n+              AuthScheme.BASIC, url, realm, authCache);\n@@ -119,1 +116,1 @@\n-                               String auth, String authenticatorKey) {\n+                               String auth, AuthCacheImpl authCache) {\n@@ -121,2 +118,1 @@\n-              AuthScheme.BASIC, url, realm,\n-              Objects.requireNonNull(authenticatorKey));\n+              AuthScheme.BASIC, url, realm, authCache);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/BasicAuthentication.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-                                Parameters params, String authenticatorKey) {\n+                                Parameters params, AuthCacheImpl authcache) {\n@@ -304,1 +304,1 @@\n-              Objects.requireNonNull(authenticatorKey));\n+              authcache);\n@@ -312,1 +312,1 @@\n-                                Parameters params, String authenticatorKey) {\n+                                Parameters params, AuthCacheImpl authcache) {\n@@ -318,1 +318,1 @@\n-              Objects.requireNonNull(authenticatorKey));\n+              authcache);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/DigestAuthentication.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-    protected volatile String authenticatorKey;\n+    protected volatile AuthCacheImpl authCache;\n@@ -542,1 +542,1 @@\n-            authenticatorKey = AuthenticatorKeys.getKey(authenticator);\n+            authCache = AuthCacheImpl.getAuthCacheAccess().getCache(authenticator);\n@@ -548,4 +548,2 @@\n-    public String getAuthenticatorKey() {\n-        String k = authenticatorKey;\n-        if (k == null) return AuthenticatorKeys.getKey(authenticator);\n-        return k;\n+    public AuthCacheImpl getAuthCache() {\n+        return authCache;\n@@ -687,2 +685,1 @@\n-            AuthenticationInfo sauth = AuthenticationInfo.getServerAuth(url,\n-                                             getAuthenticatorKey());\n+            AuthenticationInfo sauth = AuthenticationInfo.getServerAuth(url, authCache);\n@@ -1881,1 +1878,1 @@\n-                                                   digestparams, srv.authenticatorKey);\n+                                                   digestparams, srv.authcache);\n@@ -2336,1 +2333,1 @@\n-                                              getAuthenticatorKey());\n+                                              authCache);\n@@ -2395,3 +2392,2 @@\n-            proxyAuthKey = AuthenticationInfo.getProxyAuthKey(host, port, realm,\n-                                authScheme, getAuthenticatorKey());\n-            ret = AuthenticationInfo.getProxyAuth(proxyAuthKey);\n+            proxyAuthKey = AuthenticationInfo.getProxyAuthKey(host, port, realm, authScheme);\n+            ret = AuthenticationInfo.getProxyAuth(proxyAuthKey, authCache);\n@@ -2421,1 +2417,1 @@\n-                                             isUTF8, getAuthenticatorKey());\n+                                             isUTF8, authCache);\n@@ -2434,1 +2430,1 @@\n-                                             getAuthenticatorKey());\n+                                             authCache);\n@@ -2473,1 +2469,1 @@\n-                                    port, a, getAuthenticatorKey());\n+                                    port, a, authCache);\n@@ -2506,1 +2502,1 @@\n-                                  getAuthenticatorKey());\n+                                  authCache);\n@@ -2566,3 +2562,2 @@\n-            serverAuthKey = AuthenticationInfo.getServerAuthKey(url, realm, authScheme,\n-                                               getAuthenticatorKey());\n-            ret = AuthenticationInfo.getServerAuth(serverAuthKey);\n+            serverAuthKey = AuthenticationInfo.getServerAuthKey(url, realm, authScheme);\n+            ret = AuthenticationInfo.getServerAuth(serverAuthKey, authCache);\n@@ -2598,1 +2593,1 @@\n-                                    isUTF8, getAuthenticatorKey());\n+                                    isUTF8, authCache);\n@@ -2610,1 +2605,1 @@\n-                                    getAuthenticatorKey());\n+                                    authCache);\n@@ -2655,1 +2650,1 @@\n-                                     url1, a, getAuthenticatorKey());\n+                                     url1, a, authCache);\n@@ -2680,1 +2675,1 @@\n-                                    getAuthenticatorKey());\n+                                    authCache);\n@@ -2931,1 +2926,1 @@\n-                            AuthenticationInfo.getServerAuth(url, getAuthenticatorKey());\n+                            AuthenticationInfo.getServerAuth(url, authCache);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":20,"deletions":25,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -63,1 +63,1 @@\n-            return fourArgCtr.newInstance(isProxy, url, pw, authenticatorKey);\n+            return fourArgCtr.newInstance(isProxy, url, pw, authcache);\n@@ -75,1 +75,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -77,1 +77,1 @@\n-            return sixArgCtr.newInstance(isProxy, host, port, pw, authenticatorKey);\n+            return sixArgCtr.newInstance(isProxy, host, port, pw, authcache);\n@@ -127,1 +127,1 @@\n-                                             String.class);\n+                                             AuthCacheImpl.class);\n@@ -132,1 +132,1 @@\n-                                            String.class);\n+                                            AuthCacheImpl.class);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/NTLMAuthenticationProxy.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -85,1 +86,1 @@\n-              AuthenticatorKeys.getKey(hci.authenticator));\n+              AuthCacheImpl.getAuthCacheAccess().getCache(hci.authenticator));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/NegotiateAuthentication.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import sun.net.www.protocol.http.AuthenticatorKeys;\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -338,2 +338,1 @@\n-                String ak = httpuc == null ? AuthenticatorKeys.DEFAULT\n-                     : httpuc.getAuthenticatorKey();\n+                AuthCacheImpl ak = httpuc == null ? null : httpuc.getAuthCache();\n@@ -342,1 +341,1 @@\n-                     && Objects.equals(ret.getAuthenticatorKey(), ak);\n+                     && Objects.equals(ret.getAuthCache(), ak);\n@@ -380,1 +379,1 @@\n-                ret.authenticatorKey = httpuc.getAuthenticatorKey();\n+                ret.authcache = httpuc.getAuthCache();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/https\/HttpsClient.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -135,1 +136,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -140,1 +141,1 @@\n-                Objects.requireNonNull(authenticatorKey));\n+                authcache);\n@@ -178,1 +179,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -184,1 +185,1 @@\n-                Objects.requireNonNull(authenticatorKey));\n+                authcache);\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/www\/protocol\/http\/ntlm\/NTLMAuthentication.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import sun.net.www.protocol.http.AuthCacheImpl;\n@@ -123,1 +124,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -128,1 +129,1 @@\n-              Objects.requireNonNull(authenticatorKey));\n+              authcache);\n@@ -159,1 +160,1 @@\n-                              String authenticatorKey) {\n+                              AuthCacheImpl authcache) {\n@@ -165,1 +166,1 @@\n-              Objects.requireNonNull(authenticatorKey));\n+              authcache);\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/http\/ntlm\/NTLMAuthentication.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n- * @run main\/othervm HTTPSetAuthenticatorTest NONE SERVER PROXY SERVER307 PROXY305\n@@ -67,9 +66,0 @@\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST PROXY305\n- * @run main\/othervm -Dhttp.auth.digest.reEnabledAlgorithms=MD5 HTTPSetAuthenticatorTest DIGEST SERVER307\n- * @run main\/othervm HTTPSetAuthenticatorTest BASIC  SERVER\n- * @run main\/othervm HTTPSetAuthenticatorTest BASIC  PROXY\n- * @run main\/othervm HTTPSetAuthenticatorTest BASIC  PROXY305\n- * @run main\/othervm HTTPSetAuthenticatorTest BASIC  SERVER307\n- * @run main\/othervm HTTPSetAuthenticatorTest BASICSERVER SERVER\n- * @run main\/othervm HTTPSetAuthenticatorTest BASICSERVER SERVER307\n@@ -286,1 +276,1 @@\n-        return sun.net.www.protocol.http.AuthenticatorKeys.getKey(a);\n+        return a == null ? \"null\" : a.toString();\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPSetAuthenticatorTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304818\n+ * @modules java.base\/sun.net.www.protocol.http\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.ForceGC\n+ * @run main\/othervm AuthCache\n+ *\/\n+\n+import com.sun.net.httpserver.BasicAuthenticator;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.lang.ref.PhantomReference;\n+import java.net.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+\n+import sun.net.www.protocol.http.AuthCacheValue;\n+import jdk.test.lib.util.ForceGC;\n+\n+public class AuthCache {\n+    static class ClientAuth extends Authenticator {\n+        private final String realm;\n+        private final String username;\n+        private final String password;\n+        private AtomicBoolean wasCalled = new AtomicBoolean();\n+\n+        private String errorMsg;\n+\n+        ClientAuth(String realm, String username, String password) {\n+            this.realm = realm;\n+            this.username = username;\n+            this.password = password;\n+        }\n+\n+        \/**\n+         * returns true if getPasswordAuthentication() was called\n+         * since the last time this method was called. The wasCalled\n+         * flag is cleared after each call.\n+         * If an error occurred, a RuntimeException is thrown\n+         * @return\n+         *\/\n+        public synchronized boolean wasCalled() {\n+            if (errorMsg != null)\n+                throw new RuntimeException(errorMsg);\n+\n+            return wasCalled.getAndSet(false);\n+        }\n+        protected synchronized PasswordAuthentication getPasswordAuthentication() {\n+            if (!getRequestingPrompt().equals(realm)) {\n+                errorMsg = String.format(\"Error: %s expected as realm, received %s\", realm, getRequestingPrompt());\n+            }\n+            wasCalled.set(true);\n+            return new PasswordAuthentication(username, password.toCharArray());\n+        }\n+    }\n+\n+    static final HttpHandler handler = (HttpExchange exch) -> {\n+        exch.sendResponseHeaders(200, -1);\n+        exch.close();\n+    };\n+\n+    static class ServerAuth extends BasicAuthenticator {\n+        private final String user, pass;\n+\n+        ServerAuth(String realm, String user, String pass) {\n+            super(realm);\n+            this.user = user;\n+            this.pass = pass;\n+        }\n+\n+        @Override\n+        public boolean checkCredentials(String username, String password) {\n+            return username.equals(user) && password.equals(pass);\n+        }\n+    }\n+    \/**\n+     * Creates two Authenticators and two realms (\"r1\" and \"r2\")\n+     * \"r1\" uses context \"\/path1\" credentials = user1\/pass1\n+     * \"r2\" uses context \"\/path2\" credentials = user2\/pass2\n+     *\n+     * 1) Send request to \"r1\" and \"r2\" expect both authenticators to be called\n+     *    cache size should be 4\n+     *\n+     * 2) Send request to \"r1\" and \"r2\". Authenticators should not be called (cache)\n+     *\n+     * 3) Clear reference to \"r1\" and call gc.\n+     *    cache size should be 2\n+     *\n+     * 4) Send request to \"r1\" and \"r2\". \"r1\" auth should be called, but not \"r2\"\n+     *    cache size should be 4\n+     *\/\n+    public static void main(String[] args) throws IOException {\n+        var clauth1 = new ClientAuth(\"r1\", \"user1\", \"pass1\");\n+        PhantomReference<Authenticator> ref = new PhantomReference<>(clauth1, null);\n+        var clauth2 = new ClientAuth(\"r2\", \"user2\", \"pass2\");\n+        var server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        var ctx1 = server.createContext(\"\/path1\", handler);\n+        ctx1.setAuthenticator(new ServerAuth(\"r1\", \"user1\", \"pass1\"));\n+\n+        var ctx2 = server.createContext(\"\/path2\", handler);\n+        ctx2.setAuthenticator(new ServerAuth(\"r2\", \"user2\", \"pass2\"));\n+        var addr = server.getAddress();\n+        var url1 = URI.create(\"http:\/\/\" + addr.getHostName() + \":\" + addr.getPort() + \"\/path1\/\").toURL();\n+        var url2 = URI.create(\"http:\/\/\" + addr.getHostName() + \":\" + addr.getPort() + \"\/path2\/\").toURL();\n+        server.start();\n+\n+        sendRequest(url1, url2, clauth1, clauth2, true, true);\n+        checkCacheSize(4);\n+        sendRequest(url1, url2, clauth1, clauth2, false, false);\n+        checkCacheSize(4);\n+        clauth1 = null;\n+        ForceGC.wait(() -> ref.refersTo(null));\n+        delay(1);\n+        checkCacheSize(2);\n+        clauth1 = new ClientAuth(\"r1\", \"user1\", \"pass1\");\n+        sendRequest(url1, url2, clauth1, clauth2, true, false);\n+        checkCacheSize(4);\n+        System.out.println(\"Passed\");\n+        server.stop(0);\n+    }\n+\n+    static void delay(int seconds) {\n+        try {\n+            Thread.sleep(seconds * 1000);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+\n+    static void checkCacheSize(int expected) {\n+        int found = AuthCacheValue.getAuthCache().mapSize();\n+        if (found != expected) {\n+            var msg = String.format(\"Cache size: expected %d, got %d\\n\", expected, found);\n+            throw new RuntimeException(msg);\n+        }\n+    }\n+\n+    static void sendRequest(URL u1, URL u2, ClientAuth a1, ClientAuth a2, boolean auth1Called, boolean auth2Called) throws IOException {\n+        var urlc1 = (HttpURLConnection)u1.openConnection();\n+        urlc1.setAuthenticator(a1);\n+        var urlc2 = (HttpURLConnection)u2.openConnection();\n+        urlc2.setAuthenticator(a2);\n+\n+        var is1 = urlc1.getInputStream();\n+        is1.readAllBytes();\n+        is1.close();\n+        var is2 = urlc2.getInputStream();\n+        is2.readAllBytes();\n+        is2.close();\n+\n+        boolean a1Called = a1.wasCalled();\n+        boolean a2Called = a2.wasCalled();\n+        if (a1Called && !auth1Called)\n+            throw new RuntimeException(\"a1Called && !auth1Called\");\n+        if (!a1Called && auth1Called)\n+            throw new RuntimeException(\"!a1Called && auth1Called\");\n+        if (a2Called && !auth2Called)\n+            throw new RuntimeException(\"a2Called && !auth2Called\");\n+        if (!a2Called && auth2Called)\n+            throw new RuntimeException(\"!a2Called && auth2Called\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/AuthCache.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}