{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import sun.net.www.protocol.http.AuthCacheImpl;\n-\n@@ -75,1 +73,0 @@\n-    private final AuthCacheImpl cache;\n@@ -80,3 +77,1 @@\n-    public Authenticator() {\n-        this.cache = new AuthCacheImpl();\n-    }\n+    public Authenticator() {}\n@@ -581,8 +576,0 @@\n-\n-    static {\n-        AuthCacheImpl.setAuthCacheAccess(Authenticator::getCache);\n-    }\n-\n-    static AuthCacheImpl getCache(Authenticator a) {\n-        return a == null ? null : a.cache;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/Authenticator.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Collections;\n@@ -33,0 +34,2 @@\n+import java.util.Map;\n+import java.util.WeakHashMap;\n@@ -112,10 +115,2 @@\n-    @FunctionalInterface\n-    public interface AuthCacheAccess {\n-        public AuthCacheImpl getCache(Authenticator a);\n-    }\n-\n-    static AuthCacheAccess authenticatorCacheAccess;\n-\n-    static {\n-        ensureClassInitialized(Authenticator.class);\n-    }\n+    private static Map<Authenticator,AuthCacheImpl> caches =\n+        Collections.synchronizedMap(new WeakHashMap<>());\n@@ -123,3 +118,5 @@\n-    public static void setAuthCacheAccess(AuthCacheAccess access) {\n-        if (authenticatorCacheAccess == null && access != null) {\n-            authenticatorCacheAccess = access;\n+    public static AuthCacheImpl getAuthCacheFor(Authenticator auth) {\n+        var c = caches.get(auth);\n+        if (c == null) {\n+            c = new AuthCacheImpl();\n+            caches.put(auth, c);\n@@ -127,10 +124,1 @@\n-    }\n-\n-    public static AuthCacheAccess getAuthCacheAccess() {\n-        return authenticatorCacheAccess;\n-    }\n-\n-    private static void ensureClassInitialized(Class<?> c) {\n-        try {\n-            MethodHandles.lookup().ensureInitialized(c);\n-        } catch (IllegalAccessException e) {}\n+        return c;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheImpl.java","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-     * Caches authentication info entered by user.  See cacheKey()\n+     * The default authentication cache\n@@ -47,1 +47,1 @@\n-    protected static AuthCacheImpl cache = new AuthCacheImpl();\n+    protected static AuthCacheImpl defCache = new AuthCacheImpl();\n@@ -50,1 +50,1 @@\n-        cache = map;\n+        defCache = map;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthCacheValue.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        this.authcache = acache == null ? cache : acache;\n+        this.authcache = acache == null ? defCache : acache;\n@@ -263,1 +263,1 @@\n-        this.authcache = acache == null ? cache : acache;\n+        this.authcache = acache == null ? defCache : acache;\n@@ -332,1 +332,1 @@\n-        authcache = authcache == null ? cache : authcache;\n+        authcache = authcache == null ? defCache : authcache;\n@@ -348,1 +348,1 @@\n-        authcache = authcache == null ? cache : authcache;\n+        authcache = authcache == null ? defCache : authcache;\n@@ -366,1 +366,1 @@\n-        authcache = authcache == null ? cache : authcache;\n+        authcache = authcache == null ? defCache : authcache;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/AuthenticationInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-            authCache = AuthCacheImpl.getAuthCacheAccess().getCache(authenticator);\n+            authCache = AuthCacheImpl.getAuthCacheFor(authenticator);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-              AuthCacheImpl.getAuthCacheAccess().getCache(hci.authenticator));\n+              AuthCacheImpl.getAuthCacheFor(hci.authenticator));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/NegotiateAuthentication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,337 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Note: this test saves a cache.ser file in the scratch directory,\n-\/\/       which the cache implementation will load its configuration\n-\/\/       from. Therefore adding several @run lines does not work.\n-\n-\/*\n- * @test\n- * @bug 4933582\n- * @key intermittent\n- * @library \/test\/lib\n- * @modules java.base\/sun.net.www\n- *          java.base\/sun.net.www.protocol.http\n- *\n- * @run main\/othervm B4933582\n- *\/\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.PrintWriter;\n-import java.net.Authenticator;\n-import java.net.BindException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.PasswordAuthentication;\n-import java.net.ProxySelector;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.concurrent.Executors;\n-\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import jdk.test.lib.net.URIBuilder;\n-import sun.net.www.protocol.http.AuthCacheImpl;\n-import sun.net.www.protocol.http.AuthCacheValue;\n-\n-public class B4933582 implements HttpHandler {\n-\n-    static int count = 0;\n-    static String authstring;\n-\n-    void errorReply (HttpExchange req, String reply) throws IOException {\n-        req.getResponseHeaders().set(\"Connection\", \"close\");\n-        req.getResponseHeaders().set(\"WWW-Authenticate\", reply);\n-        req.sendResponseHeaders(401, -1);\n-    }\n-\n-    void okReply (HttpExchange req) throws IOException {\n-        req.sendResponseHeaders(200, 0);\n-        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n-            pw.print(\"Hello .\");\n-        }\n-    }\n-\n-    static volatile boolean firstTime = true;\n-\n-    public void handle (HttpExchange req) {\n-        try {\n-            if(req.getRequestHeaders().get(\"Authorization\") != null) {\n-                authstring = req.getRequestHeaders().get(\"Authorization\").get(0);\n-                System.out.println(authstring);\n-            }\n-            if (firstTime) {\n-                switch (count) {\n-                case 0:\n-                    errorReply (req, \"Basic realm=\\\"wallyworld\\\"\");\n-                    break;\n-                case 1:\n-                    \/* client stores a username\/pw for wallyworld\n-                     *\/\n-                    save (authstring);\n-                    okReply (req);\n-                    break;\n-                }\n-            } else {\n-                \/* check the auth string is premptively set from last time *\/\n-                String savedauth = retrieve();\n-                if (savedauth.equals (authstring)) {\n-                    okReply (req);\n-                } else {\n-                    System.out.println (\"savedauth = \" + savedauth);\n-                    System.out.println (\"authstring = \" + authstring);\n-                    errorReply (req, \"Basic realm=\\\"wallyworld\\\"\");\n-                }\n-            }\n-            count ++;\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    void save (String s) {\n-        try {\n-            FileOutputStream f = new FileOutputStream (\"auth.save\");\n-            ObjectOutputStream os = new ObjectOutputStream (f);\n-            os.writeObject (s);\n-        } catch (IOException e) {\n-            assert false;\n-        }\n-    }\n-\n-    String retrieve () {\n-        String s = null;\n-        try {\n-            FileInputStream f = new FileInputStream (\"auth.save\");\n-            ObjectInputStream is = new ObjectInputStream (f);\n-            s = (String) is.readObject();\n-        } catch (Exception e) {\n-            assert false;\n-        }\n-        return s;\n-    }\n-\n-    static void read (InputStream is) throws IOException {\n-        int c;\n-        System.out.println (\"reading\");\n-        while ((c=is.read()) != -1) {\n-            System.out.write (c);\n-        }\n-        System.out.println (\"\");\n-        System.out.println (\"finished reading\");\n-    }\n-\n-    static void client (String u) throws Exception {\n-        URL url = new URL (u);\n-        System.out.println (\"client opening connection to: \" + u);\n-        URLConnection urlc = url.openConnection ();\n-        try(InputStream is = urlc.getInputStream ()) {\n-            read (is);\n-        }\n-    }\n-\n-    static HttpServer server;\n-\n-    public static void main (String[] args) throws Exception {\n-        B4933582 b4933582 = new B4933582();\n-        MyAuthenticator auth = new MyAuthenticator ();\n-        Authenticator.setDefault (auth);\n-        ProxySelector.setDefault(ProxySelector.of(null)); \/\/ no proxy\n-        InetAddress loopback = InetAddress.getLoopbackAddress();\n-        CacheImpl cache;\n-        try {\n-            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n-            server.createContext(\"\/\", b4933582);\n-            server.setExecutor(Executors.newSingleThreadExecutor());\n-            server.start();\n-            cache = new CacheImpl (server.getAddress().getPort());\n-            AuthCacheValue.setAuthCache (cache);\n-            String serverURL = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(server.getAddress().getPort())\n-                .path(\"\/\")\n-                .build()\n-                .toString();\n-            client(serverURL + \"d1\/foo.html\");\n-        } finally {\n-            if (server != null) {\n-                server.stop(1);\n-            }\n-        }\n-\n-        int f = auth.getCount();\n-        if (f != 1) {\n-            except(\"Authenticator was called \" + f + \" times. Should be 1\");\n-        }\n-\n-        firstTime = false;\n-\n-        int retries = 0;\n-        cache = new CacheImpl();\n-        while (true) {\n-            try {\n-                server = HttpServer.create(new InetSocketAddress(loopback, cache.getPort()), 10);\n-                server.createContext(\"\/\", b4933582);\n-                server.setExecutor(Executors.newSingleThreadExecutor());\n-                server.start();\n-                break;\n-            } catch (BindException e) {\n-                if (retries++ < 5) {\n-                    Thread.sleep(200L);\n-                    System.out.println(\"BindException \\\"\" + e.getMessage()\n-                            + \"\\\", retrying...\");\n-                    continue;\n-                } else {\n-                    throw e;\n-                }\n-            }\n-        }\n-\n-        try {\n-            AuthCacheValue.setAuthCache(cache);\n-            String serverURL = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(server.getAddress().getPort())\n-                .path(\"\/\")\n-                .build()\n-                .toString();\n-            client(serverURL + \"d1\/foo.html\");\n-        } finally {\n-            if (server != null) {\n-                server.stop(1);\n-            }\n-        }\n-\n-        f = auth.getCount();\n-        if (f != 1) {\n-            except(\"Authenticator was called \" + f + \" times. Should be 1\");\n-        }\n-    }\n-\n-    public static void except (String s) {\n-        server.stop(1);\n-        throw new RuntimeException (s);\n-    }\n-\n-    static class MyAuthenticator extends Authenticator {\n-        MyAuthenticator () {\n-            super ();\n-        }\n-\n-        volatile int count = 0;\n-\n-        public PasswordAuthentication getPasswordAuthentication () {\n-            PasswordAuthentication pw;\n-            pw = new PasswordAuthentication (\"user\", \"pass1\".toCharArray());\n-            count ++;\n-            return pw;\n-        }\n-\n-        public int getCount () {\n-            return (count);\n-        }\n-    }\n-\n-    static class CacheImpl extends AuthCacheImpl {\n-        HashMap<String,LinkedList<AuthCacheValue>> map;\n-        int port; \/\/ need to store the port number the server is using\n-\n-        CacheImpl () throws IOException {\n-            this (-1);\n-        }\n-\n-        CacheImpl (int port) throws IOException {\n-            super();\n-            this.port = port;\n-            File src = new File (\"cache.ser\");\n-            if (src.exists()) {\n-                try (ObjectInputStream is = new ObjectInputStream(\n-                        new FileInputStream(src))) {\n-                    map = (HashMap<String,LinkedList<AuthCacheValue>>)is\n-                              .readObject();\n-                    this.port = (Integer)is.readObject ();\n-                    System.out.println (\"read port from file \" + port);\n-                } catch (ClassNotFoundException e) {\n-                    assert false;\n-                }\n-                System.out.println (\"setMap from cache.ser\");\n-            } else {\n-                map = new HashMap<>();\n-            }\n-            setMap (map);\n-        }\n-\n-        int getPort () {\n-            return port;\n-        }\n-\n-        private void writeMap () {\n-            File dst = new File(\"cache.ser\");\n-            try {\n-                dst.delete();\n-                if (!dst.createNewFile()) {\n-                    return;\n-                }\n-            } catch (IOException e) {\n-            }\n-\n-            try (ObjectOutputStream os = new ObjectOutputStream(\n-                    new FileOutputStream(dst))) {\n-                os.writeObject(map);\n-                os.writeObject(port);\n-                System.out.println(\"wrote port \" + port);\n-            } catch (IOException e) {\n-            }\n-        }\n-\n-        public void put (String pkey, AuthCacheValue value) {\n-            System.out.println (\"put: \" + pkey + \" \" + value);\n-            super.put (pkey, value);\n-            writeMap();\n-        }\n-\n-        public AuthCacheValue get (String pkey, String skey) {\n-            System.out.println (\"get: \" + pkey + \" \" + skey);\n-            AuthCacheValue i = super.get (pkey, skey);\n-            System.out.println (\"---> \" + i);\n-            return i;\n-        }\n-\n-        public void remove (String pkey, AuthCacheValue value) {\n-            System.out.println (\"remove: \" + pkey + \" \" + value);\n-            super.remove (pkey, value);\n-            writeMap();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4933582.java","additions":0,"deletions":337,"binary":false,"changes":337,"status":"deleted"},{"patch":"@@ -164,0 +164,1 @@\n+        urlc1 = urlc2 = null;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/AuthCache.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}