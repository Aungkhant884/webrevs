{"files":[{"patch":"@@ -40,1 +40,1 @@\n-import com.sun.hotspot.igv.selectioncoordinator.*;\n+import com.sun.hotspot.igv.selectioncoordinator.SelectionCoordinator;\n@@ -94,1 +94,0 @@\n-    private WidgetAction zoomAction;\n@@ -270,10 +269,0 @@\n-    private MouseWheelListener mouseWheelListener = new MouseWheelListener() {\n-\n-        @Override\n-        public void mouseWheelMoved(MouseWheelEvent e) {\n-            if (e.isControlDown()) {\n-                DiagramScene.this.relayoutWithoutLayout(null);\n-            }\n-        }\n-    };\n-\n@@ -409,1 +398,1 @@\n-        panAction = new CustomizablePanAction(~0, MouseEvent.BUTTON1_DOWN_MASK);\n+        panAction = new CustomizablePanAction(MouseEvent.BUTTON1_DOWN_MASK);\n@@ -458,3 +447,0 @@\n-        LayerWidget selectionLayer = new LayerWidget(this);\n-        this.addChild(selectionLayer);\n-\n@@ -462,1 +448,0 @@\n-\n@@ -464,3 +449,1 @@\n-        zoomAction = ActionFactory.createMouseCenteredZoomAction(1.2);\n-        this.getActions().addAction(zoomAction);\n-        this.getView().addMouseWheelListener(mouseWheelListener);\n+        this.getActions().addAction(ActionFactory.createMouseCenteredZoomAction(1.1));\n@@ -468,1 +451,0 @@\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.awt.Cursor;\n@@ -53,0 +54,1 @@\n+import javax.swing.JScrollBar;\n@@ -65,0 +67,1 @@\n+    private boolean active = true;\n@@ -69,2 +72,1 @@\n-\n-    private final int modifiersExMask;\n+    private Rectangle rectangle;\n@@ -73,2 +75,1 @@\n-    public CustomizablePanAction(int modifiersExMask, int modifiersEx) {\n-        this.modifiersExMask = modifiersExMask;\n+    public CustomizablePanAction(int modifiersEx) {\n@@ -92,0 +93,10 @@\n+    public State mouseEntered(Widget widget, WidgetAction.WidgetMouseEvent event) {\n+        active = true;\n+        return State.REJECTED;\n+    }\n+\n+    public State mouseExited(Widget widget, WidgetAction.WidgetMouseEvent event) {\n+        active = false;\n+        return State.REJECTED;\n+    }\n+\n@@ -93,1 +104,1 @@\n-    public State mousePressed (Widget widget, WidgetMouseEvent event) {\n+    public State mousePressed(Widget widget, WidgetMouseEvent event) {\n@@ -98,5 +109,6 @@\n-        if (isLocked ())\n-            return State.createLocked (widget, this);\n-        if (enabled && (event.getModifiersEx() & modifiersExMask) == modifiersEx) {\n-            scene = widget.getScene ();\n-            scrollPane = findScrollPane (scene.getView ());\n+        if (isLocked()) {\n+            return State.createLocked(widget, this);\n+        }\n+        if (enabled && (event.getModifiersEx() == modifiersEx)) {\n+            scene = widget.getScene();\n+            scrollPane = findScrollPane(scene.getView());\n@@ -104,3 +116,5 @@\n-                lastLocation = scene.convertSceneToView (widget.convertLocalToScene (event.getPoint ()));\n-                SwingUtilities.convertPointToScreen (lastLocation, scene.getView ());\n-                return State.createLocked (widget, this);\n+                rectangle = scene.getView().getVisibleRect();\n+                lastLocation = scene.convertSceneToView(event.getPoint());\n+                SwingUtilities.convertPointToScreen(lastLocation, scene.getView());\n+                scene.getView().setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));\n+                return State.createLocked(widget, this);\n@@ -112,1 +126,1 @@\n-    private JScrollPane findScrollPane (JComponent component) {\n+    private JScrollPane findScrollPane(JComponent component) {\n@@ -114,1 +128,1 @@\n-            if (component == null)\n+            if (component == null) {\n@@ -116,1 +130,2 @@\n-            if (component instanceof JScrollPane)\n+            }\n+            if (component instanceof JScrollPane) {\n@@ -118,2 +133,3 @@\n-            Container parent = component.getParent ();\n-            if (! (parent instanceof JComponent))\n+            }\n+            Container parent = component.getParent();\n+            if (!(parent instanceof JComponent)) {\n@@ -121,0 +137,1 @@\n+            }\n@@ -126,3 +143,4 @@\n-    public State mouseReleased (Widget widget, WidgetMouseEvent event) {\n-        boolean state = pan (widget, event.getPoint ());\n-        if (state)\n+    public State mouseReleased(Widget widget, WidgetMouseEvent event) {\n+        scene.getView().setCursor(Cursor.getDefaultCursor());\n+        boolean state = pan(widget, event.getPoint());\n+        if (state) {\n@@ -130,1 +148,2 @@\n-        return state ? State.createLocked (widget, this) : State.REJECTED;\n+        }\n+        return state ? State.REJECTED : State.REJECTED;\n@@ -134,2 +153,2 @@\n-    public State mouseDragged (Widget widget, WidgetMouseEvent event) {\n-        return pan (widget, event.getPoint ()) ? State.createLocked (widget, this) : State.REJECTED;\n+    public State mouseDragged(Widget widget, WidgetMouseEvent event) {\n+        return pan(widget, event.getPoint()) ? State.createLocked(widget, this) : State.REJECTED;\n@@ -138,2 +157,2 @@\n-    private boolean pan (Widget widget, Point newLocation) {\n-        if (scrollPane == null  ||  scene != widget.getScene ())\n+    private boolean pan(Widget widget, Point newLocation) {\n+        if (!active || scrollPane == null || scene != widget.getScene()) {\n@@ -141,7 +160,9 @@\n-        newLocation = scene.convertSceneToView (widget.convertLocalToScene (newLocation));\n-        SwingUtilities.convertPointToScreen (newLocation, scene.getView ());\n-        JComponent view = scene.getView ();\n-        Rectangle rectangle = view.getVisibleRect ();\n-        rectangle.x += lastLocation.x - newLocation.x;\n-        rectangle.y += lastLocation.y - newLocation.y;\n-        view.scrollRectToVisible (rectangle);\n+        }\n+        newLocation = scene.convertSceneToView(newLocation);\n+        SwingUtilities.convertPointToScreen(newLocation, scene.getView());\n+        JComponent view = scene.getView();\n+        int dx = lastLocation.x - newLocation.x;\n+        int dy = lastLocation.y - newLocation.y;\n+        rectangle.x += dx;\n+        rectangle.y += dy;\n+        view.scrollRectToVisible(rectangle);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/CustomizablePanAction.java","additions":54,"deletions":33,"binary":false,"changes":87,"status":"modified"}]}