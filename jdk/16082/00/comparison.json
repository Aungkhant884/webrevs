{"files":[{"patch":"@@ -38,1 +38,0 @@\n-import java.util.BitSet;\n@@ -41,3 +40,0 @@\n-import java.util.function.IntPredicate;\n-\n-import jdk.internal.util.ImmutableBitSetPredicate;\n@@ -88,1 +84,3 @@\n-    private static final IntPredicate DONT_NEED_ENCODING;\n+    static final long DONT_NEED_ENCODING_FLAGS_0_WITHOUT_SPACE;\n+    static final long DONT_NEED_ENCODING_FLAGS_0_WITH_SPACE;\n+    static final long DONT_NEED_ENCODING_FLAGS_1;\n@@ -127,0 +125,15 @@\n+        DONT_NEED_ENCODING_FLAGS_0_WITHOUT_SPACE\n+                = (1L << '*') \/\/ ASCII 42\n+                | (1L << '-') \/\/ ASCII 45\n+                | (1L << '.') \/\/ ASCII 46\n+                | (1L << '0') \/\/ ASCII 48\n+                | (1L << '1')\n+                | (1L << '2')\n+                | (1L << '3')\n+                | (1L << '4')\n+                | (1L << '5')\n+                | (1L << '6')\n+                | (1L << '7')\n+                | (1L << '8')\n+                | (1L << '9') \/\/ ASCII 57\n+                ;\n@@ -128,12 +141,17 @@\n-        var bitSet = new BitSet(128);\n-        bitSet.set('a', 'z' + 1);\n-        bitSet.set('A', 'Z' + 1);\n-        bitSet.set('0', '9' + 1);\n-        bitSet.set(' '); \/* encoding a space to a + is done\n-                                    * in the encode() method *\/\n-        bitSet.set('-');\n-        bitSet.set('_');\n-        bitSet.set('.');\n-        bitSet.set('*');\n-\n-        DONT_NEED_ENCODING = ImmutableBitSetPredicate.of(bitSet);\n+        DONT_NEED_ENCODING_FLAGS_0_WITH_SPACE\n+                = DONT_NEED_ENCODING_FLAGS_0_WITHOUT_SPACE\n+                | (1L << ' '); \/\/ ASCII 32 encoding a space to a + is done in the encode() method\n+        \/*\n+         * long flags1 = 0;\n+         * \/\/ ASCII 65 - 90\n+         * for (int i = 'A'; i <= 'Z'; ++i) {\n+         *     flags1 |= 1L << (i - 64);\n+         * }\n+         * flags1 |= 1L << ('_' - 64); \/\/ ASCII 95\n+         * \/\/ ASCII 97 - 122\n+         * for (int i = 'a'; i <= 'z'; ++i) {\n+         *     flags1 |= 1L << (i - 64);\n+         * }\n+         * DONT_NEED_ENCODING_FLAGS_1 = flags1;\n+         *\/\n+        DONT_NEED_ENCODING_FLAGS_1 = 0x7FFFFFE87FFFFFEL; \/\/ really : 1L << ([A-Z_a-z] - 64)\n@@ -222,1 +240,1 @@\n-            if (!DONT_NEED_ENCODING.test(c) || c == ' ') {\n+            if (!dontNeedEncodingWithoutSpace(c)) {\n@@ -243,1 +261,1 @@\n-            if (DONT_NEED_ENCODING.test(c)) {\n+            if (dontNeedEncodingWithSpace(c)) {\n@@ -276,1 +294,1 @@\n-                } while (i < s.length() && !DONT_NEED_ENCODING.test((c = s.charAt(i))));\n+                } while (i < s.length() && !dontNeedEncodingWithSpace((c = s.charAt(i))));\n@@ -324,0 +342,18 @@\n+\n+    private static boolean dontNeedEncodingWithSpace(char c) {\n+        int prefix = c >> 6;\n+        if (prefix > 1) {\n+            return false;\n+        }\n+        long flags = prefix == 0 ? DONT_NEED_ENCODING_FLAGS_0_WITH_SPACE : DONT_NEED_ENCODING_FLAGS_1;\n+        return (flags & (1L << c)) != 0;\n+    }\n+\n+    private static boolean dontNeedEncodingWithoutSpace(char c) {\n+        int prefix = c >> 6;\n+        if (prefix > 1) {\n+            return false;\n+        }\n+        long flags = prefix == 0 ? DONT_NEED_ENCODING_FLAGS_0_WITHOUT_SPACE : DONT_NEED_ENCODING_FLAGS_1;\n+        return (flags & (1L << c)) != 0;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLEncoder.java","additions":56,"deletions":20,"binary":false,"changes":76,"status":"modified"}]}