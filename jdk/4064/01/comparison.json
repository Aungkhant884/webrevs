{"files":[{"patch":"@@ -85,0 +85,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -96,1 +100,12 @@\n-    private static boolean debug;\n+    private static boolean debug = false;\n+    private static int run = 0;\n+\n+    \/\/ Copy smaps locally\n+    \/\/ (To minimize chances of concurrent modification when parsing, as well as helping with error analysis)\n+    private static Path copySmaps() throws Exception {\n+        Path p1 = Paths.get(\"\/proc\/self\/smaps\");\n+        Path p2 = Paths.get(\"smaps-copy-\" +  ProcessHandle.current().pid() + \"-\" + (run++) + \".txt\");\n+        Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING);\n+        System.out.println(\"Copied \" + p1 + \" to \" + p2 + \"...\");\n+        return p2;\n+    }\n@@ -104,18 +119,66 @@\n-        String smapsPatternString = \"(\\\\w+)-(\\\\w+).*?\" +\n-                                    \"KernelPageSize:\\\\s*(\\\\d*) kB.*?\" +\n-                                    \"VmFlags: ([\\\\w\\\\? ]*)\";\n-        Pattern smapsPattern = Pattern.compile(smapsPatternString, Pattern.DOTALL);\n-        Scanner smapsScanner = new Scanner(new File(\"\/proc\/self\/smaps\"));\n-        \/\/ Find all memory segments in the smaps-file.\n-        smapsScanner.findAll(smapsPattern).forEach(mr -> {\n-            String start = mr.group(1);\n-            String end = mr.group(2);\n-            String ps = mr.group(3);\n-            String vmFlags = mr.group(4);\n-\n-            \/\/ Create a range given the match and add it to the list.\n-            RangeWithPageSize range = new RangeWithPageSize(start, end, ps, vmFlags);\n-            ranges.add(range);\n-            debug(\"Added range: \" + range);\n-        });\n-        smapsScanner.close();\n+        \/\/ We can override the smaps file to parse to pass in a pre-fetched one\n+        String smapsFileToParse = System.getProperty(\"smaps-file\");\n+        if (smapsFileToParse != null) {\n+            parseSmaps(Paths.get(smapsFileToParse));\n+        } else {\n+            Path smapsCopy = copySmaps();\n+            parseSmaps(smapsCopy);\n+        }\n+    }\n+\n+    static class SmapsParser {\n+        String start;\n+        String end;\n+        String ps;\n+        String vmFlags;\n+        static final Pattern SECTION_START_PATT = Pattern.compile(\"^([a-f0-9]+)-([a-f0-9]+) [\\\\-rwpsx]{4}.*\");\n+        static final Pattern KERNEL_PAGESIZE_PATT = Pattern.compile(\"^KernelPageSize:\\\\s*(\\\\d*) kB\");\n+        static final Pattern VMFLAGS_PATT = Pattern.compile(\"^VmFlags: ([\\\\w\\\\? ]*)\");\n+        int lineno = 0;\n+        void reset() {\n+            start = null;\n+            end = null;\n+            ps = null;\n+            vmFlags = null;\n+        }\n+\n+        public void finish() {\n+            if (start != null) {\n+                RangeWithPageSize range = new RangeWithPageSize(start, end, ps, vmFlags);\n+                ranges.add(range);\n+                debug(\"Added range: \" + range);\n+                reset();\n+            }\n+        }\n+\n+        void eatNext(String line) {\n+            debug(\"\" + (lineno++) + \" \" + line);\n+            Matcher matSectionStart = sectionStartPat.matcher(line);\n+            if (matSectionStart.matches()) {\n+                finish();\n+                start = matSectionStart.group(1);\n+                end = matSectionStart.group(2);\n+                ps = null;\n+                vmFlags = null;\n+                return;\n+            } else {\n+                Matcher matKernelPageSize = kernelPageSizePat.matcher(line);\n+                if (matKernelPageSize.matches()) {\n+                    ps = matKernelPageSize.group(1);\n+                    return;\n+                }\n+                Matcher matVmFlags = vmFlagsPat.matcher(line);\n+                if (matVmFlags.matches()) {\n+                    vmFlags = matVmFlags.group(1);\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Parse \/proc\/self\/smaps\n+    private static void parseSmaps(Path smapsFileToParse) throws Exception {\n+        System.out.println(\"Parsing: \" + smapsFileToParse.getFileName() + \"...\");\n+        SmapsParser parser = new SmapsParser();\n+        Files.lines(smapsFileToParse).forEach(parser::eatNext);\n+        parser.finish();\n@@ -160,2 +223,0 @@\n-        } else {\n-            debug = false;\n@@ -249,5 +310,7 @@\n-        for (String flag : vmFlags.split(\" \")) {\n-            if (flag.equals(\"ht\")) {\n-                vmFlagHT = true;\n-            } else if (flag.equals(\"hg\")) {\n-                vmFlagHG = true;\n+        if (vmFlags != null) {\n+            for (String flag : vmFlags.split(\" \")) {\n+                if (flag.equals(\"ht\")) {\n+                    vmFlagHT = true;\n+                } else if (flag.equals(\"hg\")) {\n+                    vmFlagHG = true;\n+                }\n@@ -278,1 +341,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTracePageSizes.java","additions":90,"deletions":27,"binary":false,"changes":117,"status":"modified"}]}