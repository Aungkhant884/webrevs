{"files":[{"patch":"@@ -28,0 +28,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -36,0 +38,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -39,2 +43,2 @@\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseLargePages -XX:LargePageSizeInBytes=2m TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseLargePages -XX:LargePageSizeInBytes=1g TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseLargePages -XX:LargePageSizeInBytes=2m TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseLargePages -XX:LargePageSizeInBytes=1g TestTracePageSizes\n@@ -47,0 +51,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -49,3 +55,3 @@\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseLargePages TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseTransparentHugePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseLargePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseTransparentHugePages TestTracePageSizes\n@@ -57,0 +63,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -59,3 +67,3 @@\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseG1GC TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseG1GC -XX:+UseLargePages TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseG1GC -XX:+UseTransparentHugePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseG1GC TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseG1GC -XX:+UseLargePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseG1GC -XX:+UseTransparentHugePages TestTracePageSizes\n@@ -67,0 +75,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -69,3 +79,3 @@\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC -XX:+UseLargePages TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC -XX:+UseTransparentHugePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC -XX:+UseLargePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseParallelGC -XX:+UseTransparentHugePages TestTracePageSizes\n@@ -77,0 +87,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -79,3 +91,3 @@\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC -XX:+UseLargePages TestTracePageSizes\n- * @run main\/othervm -XX:+AlwaysPreTouch -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC -XX:+UseTransparentHugePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC -XX:+UseLargePages TestTracePageSizes\n+ * @run main\/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC -XX:+UseTransparentHugePages TestTracePageSizes\n@@ -85,0 +97,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -89,0 +105,2 @@\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n@@ -97,0 +115,1 @@\n+    private static int run;\n@@ -98,5 +117,17 @@\n-    \/\/ Parse \/proc\/self\/smaps using a regexp capturing the address\n-    \/\/ ranges, what page size they have and if they might use\n-    \/\/ transparent huge pages. The pattern is not greedy and will\n-    \/\/ match as little as possible so each \"segment\" in the file\n-    \/\/ will generate a match.\n+    private static long getKernelVersion() {\n+        long kernelVersion = Platform.getOsVersionMajor() << 8 | Platform.getOsVersionMinor();\n+        debug(\"kernelVersion \" + Long.toHexString(kernelVersion));\n+        return kernelVersion;\n+    }\n+\n+    \/\/ Copy smaps locally\n+    \/\/ (To minimize chances of concurrent modification when parsing, as well as helping with error analysis)\n+    private static Path copySmaps() throws Exception {\n+        Path p1 = Paths.get(\"\/proc\/self\/smaps\");\n+        Path p2 = Paths.get(\"smaps-copy-\" +  ProcessHandle.current().pid() + \"-\" + (run++) + \".txt\");\n+        Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING);\n+        debug(\"Copied \" + p1 + \" to \" + p2 + \"...\");\n+        return p2;\n+    }\n+\n+    \/\/ Parse \/proc\/self\/smaps.\n@@ -104,18 +135,71 @@\n-        String smapsPatternString = \"(\\\\w+)-(\\\\w+).*?\" +\n-                                    \"KernelPageSize:\\\\s*(\\\\d*) kB.*?\" +\n-                                    \"VmFlags: ([\\\\w\\\\? ]*)\";\n-        Pattern smapsPattern = Pattern.compile(smapsPatternString, Pattern.DOTALL);\n-        Scanner smapsScanner = new Scanner(new File(\"\/proc\/self\/smaps\"));\n-        \/\/ Find all memory segments in the smaps-file.\n-        smapsScanner.findAll(smapsPattern).forEach(mr -> {\n-            String start = mr.group(1);\n-            String end = mr.group(2);\n-            String ps = mr.group(3);\n-            String vmFlags = mr.group(4);\n-\n-            \/\/ Create a range given the match and add it to the list.\n-            RangeWithPageSize range = new RangeWithPageSize(start, end, ps, vmFlags);\n-            ranges.add(range);\n-            debug(\"Added range: \" + range);\n-        });\n-        smapsScanner.close();\n+        \/\/ We can override the smaps file to parse to pass in a pre-fetched one\n+        String smapsFileToParse = System.getProperty(\"smaps-file\");\n+        if (smapsFileToParse != null) {\n+            parseSmaps(Paths.get(smapsFileToParse));\n+        } else {\n+            Path smapsCopy = copySmaps();\n+            parseSmaps(smapsCopy);\n+        }\n+    }\n+\n+    static class SmapsParser {\n+        \/\/ This is a simple smaps parser; it will recognize smaps section start lines\n+        \/\/  (e.g. \"40fa00000-439b80000 rw-p 00000000 00:00 0 \") and look for keywords inside the section.\n+        \/\/ Section will be finished and written into a RangeWithPageSize when either the next section is found\n+        \/\/  or the end of file is encountered.\n+        static final Pattern SECTION_START_PATT = Pattern.compile(\"^([a-f0-9]+)-([a-f0-9]+) [\\\\-rwpsx]{4}.*\");\n+        static final Pattern KERNEL_PAGESIZE_PATT = Pattern.compile(\"^KernelPageSize:\\\\s*(\\\\d*) kB\");\n+        static final Pattern VMFLAGS_PATT = Pattern.compile(\"^VmFlags: ([\\\\w\\\\? ]*)\");\n+        String start;\n+        String end;\n+        String ps;\n+        String vmFlags;\n+        int lineno;\n+\n+        void reset() {\n+            start = null;\n+            end = null;\n+            ps = null;\n+            vmFlags = null;\n+        }\n+\n+        public void finish() {\n+            if (start != null) {\n+                RangeWithPageSize range = new RangeWithPageSize(start, end, ps, vmFlags);\n+                ranges.add(range);\n+                debug(\"Added range: \" + range);\n+                reset();\n+            }\n+        }\n+\n+        void eatNext(String line) {\n+            debug(\"\" + (lineno++) + \" \" + line);\n+            Matcher matSectionStart = SECTION_START_PATT.matcher(line);\n+            if (matSectionStart.matches()) {\n+                finish();\n+                start = matSectionStart.group(1);\n+                end = matSectionStart.group(2);\n+                ps = null;\n+                vmFlags = null;\n+                return;\n+            } else {\n+                Matcher matKernelPageSize = KERNEL_PAGESIZE_PATT.matcher(line);\n+                if (matKernelPageSize.matches()) {\n+                    ps = matKernelPageSize.group(1);\n+                    return;\n+                }\n+                Matcher matVmFlags = VMFLAGS_PATT.matcher(line);\n+                if (matVmFlags.matches()) {\n+                    vmFlags = matVmFlags.group(1);\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Parse \/proc\/self\/smaps\n+    private static void parseSmaps(Path smapsFileToParse) throws Exception {\n+        debug(\"Parsing: \" + smapsFileToParse.getFileName() + \"...\");\n+        SmapsParser parser = new SmapsParser();\n+        Files.lines(smapsFileToParse).forEach(parser::eatNext);\n+        parser.finish();\n@@ -164,0 +248,14 @@\n+        \/\/ To be able to detect large page use (esp. THP) somewhat reliably, we\n+        \/\/  need at least kernel 3.8 to get the \"VmFlags\" tag in smaps.\n+        \/\/ (Note: its still good we started the VM at least since this serves as a nice\n+        \/\/  test for all manners of large page options).\n+        if (getKernelVersion() < 0x308) {\n+            throw new SkippedException(\"Kernel older than 3.8 - skipping this test.\");\n+        }\n+\n+        \/\/ For similar reasons, we skip the test on ppc platforms, since there the smaps\n+        \/\/  format may follow a different logic.\n+        if (Platform.isPPC()) {\n+            throw new SkippedException(\"PPC - skipping this test.\");\n+        }\n+\n@@ -240,0 +338,2 @@\n+        \/\/ Note: since we insist on kernels >= 3.8, all the following information should be present\n+        \/\/  (none of the input strings be null).\n@@ -243,1 +343,0 @@\n-\n@@ -278,1 +377,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTracePageSizes.java","additions":138,"deletions":39,"binary":false,"changes":177,"status":"modified"}]}