{"files":[{"patch":"@@ -46,1 +46,1 @@\n-      SRC := $(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib, \\\n+      SRC := $(STATIC_LIBS_IMAGE_DIR)\/lib, \\\n@@ -49,1 +49,1 @@\n-          $(call FindFiles, $(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib)), \\\n+          $(call FindFiles, $(STATIC_LIBS_IMAGE_DIR)\/lib)), \\\n","filename":"make\/GraalBuilderImage.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -236,1 +236,0 @@\n-HOTSPOT_VARIANT_STATIC_LIBS_TARGETS := $(addsuffix -static-libs, $(HOTSPOT_VARIANT_TARGETS))\n@@ -255,8 +254,0 @@\n-define DeclareHotspotStaticLibsRecipe\n-  hotspot-$1-static-libs:\n-\t+($(CD) $(TOPDIR)\/make\/hotspot && $(MAKE) $(MAKE_ARGS) -f lib\/CompileLibraries.gmk \\\n-\t    JVM_VARIANT=$1 STATIC_LIBS=true)\n-endef\n-\n-$(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotStaticLibsRecipe,$v)))\n-\n@@ -310,1 +301,1 @@\n-    $(HOTSPOT_VARIANT_LIBS_TARGETS) $(HOTSPOT_VARIANT_STATIC_LIBS_TARGETS)\n+    $(HOTSPOT_VARIANT_LIBS_TARGETS)\n@@ -474,6 +465,0 @@\n-    TARGET := static-libs-image, \\\n-))\n-\n-$(eval $(call SetupTarget, static-libs-graal-image, \\\n-    MAKEFILE := StaticLibsImage, \\\n-    TARGET := static-libs-graal-image, \\\n@@ -507,1 +492,1 @@\n-    DEPS := jdk-image static-libs-graal-image, \\\n+    DEPS := jdk-image static-libs-image, \\\n@@ -907,1 +892,0 @@\n-      $(eval hotspot-$v-static-libs: hotspot-$v-gensrc java.base-copy) \\\n@@ -1066,3 +1050,1 @@\n-  static-libs-image: hotspot-static-libs $(STATIC_LIBS_TARGETS)\n-\n-  static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n+  static-libs-image: $(STATIC_LIBS_TARGETS)\n@@ -1118,1 +1100,0 @@\n-  $(eval hotspot-static-libs: hotspot-$v-static-libs) \\\n@@ -1281,2 +1262,1 @@\n-ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-static-libs \\\n-    hotspot-gensrc gensrc gendata \\\n+ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-gensrc gensrc gendata \\\n","filename":"make\/Main.gmk","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,7 +41,0 @@\n-ifneq ($(filter static-libs-image, $(MAKECMDGOALS)), )\n-  IMAGE_DEST_DIR=$(STATIC_LIBS_IMAGE_DIR)\/lib\n-else ifneq ($(filter static-libs-graal-image, $(MAKECMDGOALS)), )\n-  IMAGE_DEST_DIR=$(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib\n-endif\n-\n-# Copy JDK static libs to the image.\n@@ -52,1 +45,1 @@\n-      DEST := $(IMAGE_DEST_DIR), \\\n+      DEST := $(STATIC_LIBS_IMAGE_DIR)\/lib, \\\n@@ -57,1 +50,0 @@\n-  $(eval STATIC_LIBS_TARGETS += $$(COPY_STATIC_LIBS_$m)) \\\n@@ -60,13 +52,0 @@\n-ifneq ($(filter static-libs-image, $(MAKECMDGOALS)), )\n-  # Copy libjvm static library to the image.\n-  $(foreach v, $(JVM_VARIANTS), \\\n-    $(eval $(call SetupCopyFiles, COPY_STATIC_LIBS_$v, \\\n-        SRC := $(HOTSPOT_OUTPUTDIR)\/variant-$v\/libjvm\/objs\/static, \\\n-        DEST := $(IMAGE_DEST_DIR)\/$v, \\\n-        FILES := $(wildcard $(HOTSPOT_OUTPUTDIR)\/variant-$v\/libjvm\/objs\/static\/*$(STATIC_LIBRARY_SUFFIX)), \\\n-    )) \\\n-    $(eval TARGETS += $$(COPY_STATIC_LIBS_$v)) \\\n-    $(eval HOTSPOT_VARIANT_STATIC_LIBS_TARGETS += $$(COPY_STATIC_LIBS_$v)) \\\n-  )\n-endif\n-\n@@ -75,3 +54,0 @@\n-static-libs-image: $(HOTSPOT_VARIANT_STATIC_LIBS_TARGETS) $(STATIC_LIBS_TARGETS)\n-static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n-\n","filename":"make\/StaticLibsImage.gmk","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -931,4 +931,0 @@\n-# Graal static libs image\n-STATIC_LIBS_GRAAL_IMAGE_SUBDIR := static-libs-graal\n-STATIC_LIBS_GRAAL_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_GRAAL_IMAGE_SUBDIR)\n-\n","filename":"make\/autoconf\/spec.gmk.in","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,1 +551,0 @@\n-#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n@@ -730,6 +729,0 @@\n-  ifeq ($(STATIC_LIBS), true)\n-    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n-    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n-      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n-    endif\n-  endif\n@@ -1140,34 +1133,0 @@\n-  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n-\n-  # If there are many object files, use an @-file...\n-  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n-    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n-    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-    else\n-      # ...except for toolchains which don't support them.\n-      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-    endif\n-  endif\n-\n-  # Unfortunately the @-file trick does not work reliably when using clang.\n-  # Clang does not propagate the @-file parameter to the ld sub process, but\n-  # instead puts the full content on the command line. At least the llvm ld\n-  # does not even support an @-file.\n-  #\n-  # When linking a large amount of object files, we risk hitting the limit\n-  # of the command line length even on posix systems if the path length of\n-  # the output dir is very long due to our use of absolute paths. To\n-  # mitigate this, use paths relative to the output dir when linking over\n-  # 500 files with clang and the output dir path is deep.\n-  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n-    ifeq ($$(TOOLCHAIN_TYPE), clang)\n-      # There is no strlen function in make, but checking path depth is a\n-      # reasonable approximation.\n-      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n-        $1_LINK_OBJS_RELATIVE := true\n-        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n-      endif\n-    endif\n-  endif\n-\n@@ -1190,7 +1149,0 @@\n-        ifneq ($$($1_OBJ_FILE_LIST), )\n-          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n-          else\n-\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n-          endif\n-        endif\n@@ -1200,1 +1152,1 @@\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_ALL_OBJS) \\\n@@ -1252,0 +1204,34 @@\n+    $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n+\n+    # If there are many object files, use an @-file...\n+    ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n+      $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n+      ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n+        $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n+      else\n+        # ...except for toolchains which don't support them.\n+        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+      endif\n+    endif\n+\n+    # Unfortunately the @-file trick does not work reliably when using clang.\n+    # Clang does not propagate the @-file parameter to the ld sub process, but\n+    # instead puts the full content on the command line. At least the llvm ld\n+    # does not even support an @-file.\n+    #\n+    # When linking a large amount of object files, we risk hitting the limit\n+    # of the command line length even on posix systems if the path length of\n+    # the output dir is very long due to our use of absolute paths. To\n+    # mitigate this, use paths relative to the output dir when linking over\n+    # 500 files with clang and the output dir path is deep.\n+    ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n+      ifeq ($$(TOOLCHAIN_TYPE), clang)\n+        # There is no strlen function in make, but checking path depth is a\n+        # reasonable approximation.\n+        ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n+          $1_LINK_OBJS_RELATIVE := true\n+          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+        endif\n+      endif\n+    endif\n+\n","filename":"make\/common\/NativeCompilation.gmk","additions":36,"deletions":50,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -142,7 +142,0 @@\n-# The global operator new functions defined in operator_new.cpp are intended\n-# to detect and prevent the VM code from calling them. See more details in\n-# operator_new.cpp. Exclude operator_new.o when statically linking the VM\n-# code with JDK natives, as the JDK natives might need to call the global\n-# operator new.\n-LIBJVM_STATIC_EXCLUDE_OBJS := operator_new.o\n-\n@@ -196,1 +189,0 @@\n-    STATIC_LIB_EXCLUDE_OBJS := $(LIBJVM_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -156,3 +156,0 @@\n-  # Extra files from the zlib.\n-  LIBJLI_EXTRA_FILE_LIST := inflate.c inftrees.c inffast.c zadler32.c zcrc32.c zutil.c\n-\n@@ -161,8 +158,7 @@\n-          $(LIBJLI_EXTRA_FILE_LIST))\n-\n-  # Do not include these libz objects in the static libjli library.\n-  # When statically linking the java launcher with all JDK and VM\n-  # static libraries, we use the --whole-archive linker option.\n-  # The duplicate objects in different static libraries cause linking\n-  # errors due to duplicate symbols.\n-  LIBJLI_STATIC_EXCLUDE_OBJS := $(subst .c,$(OBJ_SUFFIX),$(LIBJLI_EXTRA_FILE_LIST))\n+          inflate.c \\\n+          inftrees.c \\\n+          inffast.c \\\n+          zadler32.c \\\n+          zcrc32.c \\\n+          zutil.c \\\n+      )\n@@ -187,1 +183,0 @@\n-    STATIC_LIB_EXCLUDE_OBJS := $(LIBJLI_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -221,8 +221,0 @@\n-    # These are the object files provided by the awt native\n-    # library. Do not include these external (non-awt_xawt library)\n-    # objects in the static library. When statically linking the java\n-    # launcher with all JDK and VM static libraries, we use the\n-    # --whole-archive linker option. The duplicate objects in different\n-    # static libraries cause linking errors due to duplicate symbols.\n-    LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n-\n@@ -255,1 +247,0 @@\n-        STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n@@ -379,8 +370,0 @@\n-  # These are the object files provided by the awt native\n-  # library. Do not include these external (non-awt_headless library)\n-  # objects in the static library. When statically linking the java\n-  # launcher with all JDK and VM static libraries, we use the\n-  # --whole-archive linker option. The duplicate objects in different\n-  # static libraries cause linking errors due to duplicate symbols.\n-  LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS := systemScale.o\n-\n@@ -402,1 +385,0 @@\n-      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/jdi\/InstTarg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}