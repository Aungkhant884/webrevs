{"files":[{"patch":"@@ -617,1 +617,1 @@\n-  uint cur = _allocated_heapregions_length - 1;\n+  uint cur = _allocated_heapregions_length;\n@@ -649,1 +649,1 @@\n-  guarantee(start_idx < _allocated_heapregions_length, \"checking\");\n+  guarantee(start_idx <= _allocated_heapregions_length, \"checking\");\n@@ -652,1 +652,3 @@\n-  uint num_regions_found = 0;\n+  auto is_available_and_empty = [&] (uint index) {\n+    return is_available(index) && at(index)->is_empty();\n+  };\n@@ -654,3 +656,3 @@\n-  jlong cur = start_idx;\n-  while (cur != -1 && !(is_available(cur) && at(cur)->is_empty())) {\n-    cur--;\n+  uint i = start_idx;\n+  while (i > 0 && !is_available_and_empty(i-1)) {\n+    i--;\n@@ -658,2 +660,3 @@\n-  if (cur == -1) {\n-    return num_regions_found;\n+  if (i == 0) {\n+    \/\/ Found nothing\n+    return 0;\n@@ -661,4 +664,4 @@\n-  jlong old_cur = cur;\n-  \/\/ cur indexes the first empty region\n-  while (cur != -1 && is_available(cur) && at(cur)->is_empty()) {\n-    cur--;\n+  uint end = i;\n+\n+  while (i > 0 && is_available_and_empty(i-1)) {\n+    i--;\n@@ -666,2 +669,4 @@\n-  *res_idx = cur + 1;\n-  num_regions_found = old_cur - cur;\n+  uint start = i;\n+\n+  uint num_regions_found = end - start;\n+  *res_idx = start;\n@@ -670,2 +675,2 @@\n-  for (uint i = *res_idx; i < (*res_idx + num_regions_found); i++) {\n-    assert(at(i)->is_empty(), \"just checking\");\n+  for (uint j = *res_idx; j < (*res_idx + num_regions_found); j++) {\n+    assert(at(j)->is_empty(), \"just checking\");\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.cpp","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  \/\/ Finds the next sequence of empty regions starting from start_idx, going backwards in\n+  \/\/ Finds the next sequence of empty regions starting from start_idx (exclusive), going backwards in\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}