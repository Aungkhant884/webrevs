{"files":[{"patch":"@@ -1332,1 +1332,1 @@\n-  match(Set dst (RShiftVB src shift));\n+  match(Set dst (RShiftVB src (RShiftCntV shift)));\n@@ -1351,1 +1351,1 @@\n-  match(Set dst (RShiftVS src shift));\n+  match(Set dst (RShiftVS src (RShiftCntV shift)));\n@@ -1370,1 +1370,1 @@\n-  match(Set dst (RShiftVI src shift));\n+  match(Set dst (RShiftVI src (RShiftCntV shift)));\n@@ -1388,1 +1388,1 @@\n-  match(Set dst (RShiftVL src shift));\n+  match(Set dst (RShiftVL src (RShiftCntV shift)));\n@@ -1406,1 +1406,1 @@\n-  match(Set dst (URShiftVB src shift));\n+  match(Set dst (URShiftVB src (RShiftCntV shift)));\n@@ -1429,1 +1429,1 @@\n-  match(Set dst (URShiftVS src shift));\n+  match(Set dst (URShiftVS src (RShiftCntV shift)));\n@@ -1439,1 +1439,1 @@\n-    if (con >= 8) {\n+    if (con >= 16) {\n@@ -1452,1 +1452,1 @@\n-  match(Set dst (URShiftVI src shift));\n+  match(Set dst (URShiftVI src (RShiftCntV shift)));\n@@ -1470,1 +1470,1 @@\n-  match(Set dst (URShiftVL src shift));\n+  match(Set dst (URShiftVL src (RShiftCntV shift)));\n@@ -1488,1 +1488,1 @@\n-  match(Set dst (LShiftVB src shift));\n+  match(Set dst (LShiftVB src (LShiftCntV shift)));\n@@ -1506,1 +1506,1 @@\n-  match(Set dst (LShiftVS src shift));\n+  match(Set dst (LShiftVS src (LShiftCntV shift)));\n@@ -1511,1 +1511,1 @@\n-    if (con >= 8) {\n+    if (con >= 16) {\n@@ -1524,1 +1524,1 @@\n-  match(Set dst (LShiftVI src shift));\n+  match(Set dst (LShiftVI src (LShiftCntV shift)));\n@@ -1537,1 +1537,1 @@\n-  match(Set dst (LShiftVL src shift));\n+  match(Set dst (LShiftVL src (LShiftCntV shift)));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -730,2 +730,2 @@\n-dnl VSHIFT_IMM_UNPREDICATE($1,        $2,      $3,   $4,          $5  )\n-dnl VSHIFT_IMM_UNPREDICATE(insn_name, op_name, size, min_vec_len, insn)\n+dnl VSHIFT_IMM_UNPREDICATE($1,        $2,      $3,       $4,   $5,          $6  )\n+dnl VSHIFT_IMM_UNPREDICATE(insn_name, op_name, op_name2, size, min_vec_len, insn)\n@@ -734,2 +734,2 @@\n-  predicate(UseSVE > 0 && n->as_Vector()->length() >= $4);\n-  match(Set dst ($2 src shift));\n+  predicate(UseSVE > 0 && n->as_Vector()->length() >= $5);\n+  match(Set dst ($2 src ($3 shift)));\n@@ -737,1 +737,1 @@\n-  format %{ \"$5 $dst, $src, $shift\\t# vector (sve) ($3)\" %}\n+  format %{ \"$6 $dst, $src, $shift\\t# vector (sve) ($4)\" %}\n@@ -746,2 +746,2 @@\n-ifelse(eval(index(`$1', `vasr') == 0), 1, `ifelse(eval(index(`$3', `B') == 0), 1, `\n-    if (con >= 8) con = 7;')ifelse(eval(index(`$3', `H') == 0), 1, `\n+ifelse(eval(index(`$1', `vasr') == 0), 1, `ifelse(eval(index(`$4', `B') == 0), 1, `\n+    if (con >= 8) con = 7;')ifelse(eval(index(`$4', `H') == 0), 1, `\n@@ -749,1 +749,1 @@\n-ifelse(eval((index(`$1', `vlsl') == 0 || index(`$1', `vlsr') == 0) && (index(`$3', `B') == 0 || index(`$3', `H') == 0)), 1, `\n+ifelse(eval(index(`$1', `vlsl') == 0  || index(`$1', `vlsr') == 0), 1, `ifelse(eval(index(`$4', `B') == 0), 1, `\n@@ -754,2 +754,7 @@\n-    }')\n-    __ $5(as_FloatRegister($dst$$reg), __ $3,\n+    }')ifelse(eval(index(`$4', `H') == 0), 1, `\n+    if (con >= 16) {\n+      __ sve_eor(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+           as_FloatRegister($src$$reg));\n+      return;\n+    }')')\n+    __ $6(as_FloatRegister($dst$$reg), __ $4,\n@@ -789,12 +794,12 @@\n-VSHIFT_IMM_UNPREDICATE(vasrB_imm, RShiftVB,  B, 16, sve_asr)\n-VSHIFT_IMM_UNPREDICATE(vasrS_imm, RShiftVS,  H,  8, sve_asr)\n-VSHIFT_IMM_UNPREDICATE(vasrI_imm, RShiftVI,  S,  4, sve_asr)\n-VSHIFT_IMM_UNPREDICATE(vasrL_imm, RShiftVL,  D,  2, sve_asr)\n-VSHIFT_IMM_UNPREDICATE(vlsrB_imm, URShiftVB, B, 16, sve_lsr)\n-VSHIFT_IMM_UNPREDICATE(vlsrS_imm, URShiftVS, H,  8, sve_lsr)\n-VSHIFT_IMM_UNPREDICATE(vlsrI_imm, URShiftVI, S,  4, sve_lsr)\n-VSHIFT_IMM_UNPREDICATE(vlsrL_imm, URShiftVL, D,  2, sve_lsr)\n-VSHIFT_IMM_UNPREDICATE(vlslB_imm, LShiftVB,  B, 16, sve_lsl)\n-VSHIFT_IMM_UNPREDICATE(vlslS_imm, LShiftVS,  H,  8, sve_lsl)\n-VSHIFT_IMM_UNPREDICATE(vlslI_imm, LShiftVI,  S,  4, sve_lsl)\n-VSHIFT_IMM_UNPREDICATE(vlslL_imm, LShiftVL,  D,  2, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vasrB_imm, RShiftVB,  RShiftCntV, B, 16, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrS_imm, RShiftVS,  RShiftCntV, H,  8, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrI_imm, RShiftVI,  RShiftCntV, S,  4, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vasrL_imm, RShiftVL,  RShiftCntV, D,  2, sve_asr)\n+VSHIFT_IMM_UNPREDICATE(vlsrB_imm, URShiftVB, RShiftCntV, B, 16, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrS_imm, URShiftVS, RShiftCntV, H,  8, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrI_imm, URShiftVI, RShiftCntV, S,  4, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlsrL_imm, URShiftVL, RShiftCntV, D,  2, sve_lsr)\n+VSHIFT_IMM_UNPREDICATE(vlslB_imm, LShiftVB,  LShiftCntV, B, 16, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslS_imm, LShiftVS,  LShiftCntV, H,  8, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslI_imm, LShiftVI,  LShiftCntV, S,  4, sve_lsl)\n+VSHIFT_IMM_UNPREDICATE(vlslL_imm, LShiftVL,  LShiftCntV, D,  2, sve_lsl)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -404,1 +404,1 @@\n-      int new_vl = set_and_get_current_sve_vector_lenght(MaxVectorSize);\n+      int new_vl = set_and_get_current_sve_vector_length(MaxVectorSize);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  static int set_and_get_current_sve_vector_lenght(int len);\n+  static int set_and_get_current_sve_vector_length(int len);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-int VM_Version::set_and_get_current_sve_vector_lenght(int length) {\n+int VM_Version::set_and_get_current_sve_vector_length(int length) {\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vm_version_linux_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-int VM_Version::set_and_get_current_sve_vector_lenght(int length) {\n+int VM_Version::set_and_get_current_sve_vector_length(int length) {\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/vm_version_windows_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8255287\n+ * @summary aarch64: fix SVE patterns for vector shift count\n+ *\n+ * @requires os.arch == \"aarch64\" & vm.compiler2.enabled\n+ * @run main\/othervm -XX:UseSVE=2 -Xbatch -XX:-TieredCompilation\n+ *      -XX:CompileCommand=compileonly,compiler.c2.aarch64.TestVectorShiftShorts::test_*\n+ *      compiler.c2.aarch64.TestVectorShiftShorts\n+ *\/\n+\n+package compiler.c2.aarch64;\n+\n+public class TestVectorShiftShorts {\n+\n+    private static final int ARRLEN = 1000;\n+    private static final int ITERS  = 20000;\n+\n+    public static void main(String args[]) {\n+        short[] a0 = new short[ARRLEN];\n+        short[] a1 = new short[ARRLEN];\n+\n+        \/\/ Initialize\n+        test_init(a0, a1);\n+\n+        \/\/ Warmup\n+        for (int i = 0; i < ITERS; i++) {\n+            test_lshift(a0, a1);\n+            test_urshift(a0, a1);\n+        }\n+\n+        \/\/ Test and verify results\n+        test_init(a0, a1);\n+        test_lshift(a0, a1);\n+        verify_lshift(a0, a1);\n+\n+        test_init(a0, a1);\n+        test_urshift(a0, a1);\n+        verify_urshift(a0, a1);\n+\n+        \/\/ Finish\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    static void test_init(short[] a0, short[] a1) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            a0[i] = (short)(i & 3);\n+            a1[i] = (short)i;\n+        }\n+    }\n+\n+    static void test_lshift(short[] a0, short[] a1) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            a0[i] = (short)(a1[i] << 10);\n+        }\n+    }\n+\n+    static void verify_lshift(short[] a0, short[] a1) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            if (a0[i] != (short)(a1[i] << 10)) {\n+                throw new RuntimeException(\"LShift test failed.\");\n+            }\n+        }\n+    }\n+\n+    static void test_urshift(short[] a0, short[] a1) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            a0[i] = (short)(a1[i] >>> 10);\n+        }\n+    }\n+\n+    static void verify_urshift(short[] a0, short[] a1) {\n+        for (int i = 0; i < ARRLEN; i++) {\n+            if (a0[i] != (short)(a1[i] >>> 10)) {\n+                throw new RuntimeException(\"URshift test failed.\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVectorShiftShorts.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}