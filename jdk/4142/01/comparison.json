{"files":[{"patch":"@@ -88,2 +88,0 @@\n-    private static final Set<String> previewModifiers = Collections.emptySet();\n-\n@@ -200,19 +198,1 @@\n-    public void addClassSignature(String modifiers, Content classInfoTree) {\n-        ContentBuilder mods = new ContentBuilder();\n-        String sep = null;\n-        for (String modifiersPart : modifiers.split(\" \")) {\n-            if (sep != null) {\n-                mods.add(sep);\n-            }\n-            if (previewModifiers.contains(modifiersPart)) {\n-                mods.add(modifiersPart);\n-                mods.add(HtmlTree.SUP(links.createLink(htmlIds.forPreviewSection(typeElement),\n-                                                       contents.previewMark)));\n-            } else {\n-                mods.add(modifiersPart);\n-            }\n-            sep = \" \";\n-        }\n-        if (modifiers.endsWith(\" \")) {\n-            mods.add(\" \");\n-        }\n+    public void addClassSignature(Content classInfoTree) {\n@@ -221,1 +201,0 @@\n-                .setModifiers(mods)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -46,0 +47,3 @@\n+import javax.lang.model.util.ElementKindVisitor14;\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -48,0 +52,1 @@\n+import java.util.SortedSet;\n@@ -52,0 +57,1 @@\n+import static javax.lang.model.element.Modifier.FINAL;\n@@ -53,0 +59,2 @@\n+import static javax.lang.model.element.Modifier.PRIVATE;\n+import static javax.lang.model.element.Modifier.PROTECTED;\n@@ -54,0 +62,1 @@\n+import static javax.lang.model.element.Modifier.STATIC;\n@@ -95,1 +104,1 @@\n-        private final ClassWriterImpl classWriter;\n+        private final HtmlDocletWriter writer;\n@@ -100,6 +109,9 @@\n-        TypeSignature(TypeElement typeElement, ClassWriterImpl classWriter) {\n-            this.typeElement = typeElement;\n-            this.classWriter = classWriter;\n-            this.utils = classWriter.utils;\n-            this.configuration = classWriter.configuration;\n-        }\n+        private static final Set<String> previewModifiers = Collections.emptySet();\n+\n+         TypeSignature(TypeElement typeElement, HtmlDocletWriter writer) {\n+             this.typeElement = typeElement;\n+             this.writer = writer;\n+             this.utils = writer.utils;\n+             this.configuration = writer.configuration;\n+             this.modifiers = markPreviewModifiers(getModifiers());\n+         }\n@@ -114,1 +126,1 @@\n-            Content annotationInfo = classWriter.getAnnotationInfo(typeElement, true);\n+            Content annotationInfo = writer.getAnnotationInfo(typeElement, true);\n@@ -122,2 +134,2 @@\n-            if (classWriter.options.linkSource()) {\n-                classWriter.addSrcLink(typeElement, className, nameSpan);\n+            if (configuration.getOptions().linkSource()) {\n+                writer.addSrcLink(typeElement, className, nameSpan);\n@@ -131,1 +143,1 @@\n-            nameSpan.add(classWriter.getTypeParameterLinks(linkInfo));\n+            nameSpan.add(writer.getTypeParameterLinks(linkInfo));\n@@ -145,1 +157,1 @@\n-                        Content link = classWriter.getLink(new HtmlLinkInfo(configuration,\n+                        Content link = writer.getLink(new HtmlLinkInfo(configuration,\n@@ -166,1 +178,1 @@\n-                        Content link = classWriter.getLink(new HtmlLinkInfo(configuration,\n+                        Content link = writer.getLink(new HtmlLinkInfo(configuration,\n@@ -192,1 +204,1 @@\n-                    Content link = classWriter.getLink(new HtmlLinkInfo(configuration,\n+                    Content link = writer.getLink(new HtmlLinkInfo(configuration,\n@@ -198,1 +210,1 @@\n-                    Content c = Text.of(classWriter.resources.getText(\"doclet.not.exhaustive\"));\n+                    Content c = Text.of(configuration.getDocResources().getText(\"doclet.not.exhaustive\"));\n@@ -213,1 +225,1 @@\n-                classWriter.getAnnotations(e.getAnnotationMirrors(), false)\n+                writer.getAnnotations(e.getAnnotationMirrors(), false)\n@@ -215,1 +227,1 @@\n-                Content link = classWriter.getLink(new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.RECORD_COMPONENT,\n+                Content link = writer.getLink(new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.RECORD_COMPONENT,\n@@ -225,0 +237,106 @@\n+\n+        private Content markPreviewModifiers(List<String> modifiers) {\n+             Content content = new ContentBuilder();\n+             String sep = null;\n+             for (String modifier : modifiers) {\n+                 if (sep != null) {\n+                    content.add(sep);\n+                 }\n+                 content.add(modifier);\n+                 if (previewModifiers.contains(modifier)) {\n+                     content.add(HtmlTree.SUP(writer.links.createLink(\n+                             configuration.htmlIds.forPreviewSection(typeElement),\n+                             configuration.contents.previewMark)));\n+                 }\n+                 sep = \" \";\n+             }\n+             content.add(\" \");\n+             return content;\n+        }\n+\n+        private List<String> getModifiers() {\n+            SortedSet<Modifier> modifiers = new TreeSet<>(typeElement.getModifiers());\n+            modifiers.remove(NATIVE);\n+            modifiers.remove(STRICTFP);\n+            modifiers.remove(SYNCHRONIZED);\n+\n+            return new ElementKindVisitor14<List<String>, SortedSet<Modifier>>() {\n+                final List<String> list = new ArrayList<>();\n+\n+                void addVisibilityModifier(Set<Modifier> modifiers) {\n+                    if (modifiers.contains(PUBLIC)) {\n+                        list.add(\"public\");\n+                    } else if (modifiers.contains(PROTECTED)) {\n+                        list.add(\"protected\");\n+                    } else if (modifiers.contains(PRIVATE)) {\n+                        list.add(\"private\");\n+                    }\n+                }\n+\n+                void addStatic(Set<Modifier> modifiers) {\n+                    if (modifiers.contains(STATIC)) {\n+                        list.add(\"static\");\n+                    }\n+                }\n+\n+                void addSealed(TypeElement e) {\n+                    if (e.getModifiers().contains(Modifier.SEALED)) {\n+                        list.add(\"sealed\");\n+                    } else if (e.getModifiers().contains(Modifier.NON_SEALED)) {\n+                        list.add(\"non-sealed\");\n+                    }\n+                }\n+\n+                void addModifiers(Set<Modifier> modifiers) {\n+                    modifiers.stream()\n+                            .map(Modifier::toString)\n+                            .forEachOrdered(list::add);\n+                }\n+\n+                @Override\n+                public List<String> visitTypeAsInterface(TypeElement e, SortedSet<Modifier> mods) {\n+                    addVisibilityModifier(mods);\n+                    addStatic(mods);\n+                    addSealed(e);\n+                    list.add(\"interface\");\n+                    return list;\n+                }\n+\n+                @Override\n+                public List<String> visitTypeAsEnum(TypeElement e, SortedSet<Modifier> mods) {\n+                    addVisibilityModifier(mods);\n+                    addStatic(mods);\n+                    list.add(\"enum\");\n+                    return list;\n+                }\n+\n+                @Override\n+                public List<String> visitTypeAsAnnotationType(TypeElement e, SortedSet<Modifier> mods) {\n+                    addVisibilityModifier(mods);\n+                    addStatic(mods);\n+                    list.add(\"@interface\");\n+                    return list;\n+                }\n+\n+                @Override\n+                public List<String> visitTypeAsRecord(TypeElement e, SortedSet<Modifier> mods) {\n+                    mods.remove(FINAL); \/\/ suppress the implicit `final`\n+                    return visitTypeAsClass(e, mods);\n+                }\n+\n+                @Override\n+                public List<String> visitTypeAsClass(TypeElement e, SortedSet<Modifier> mods) {\n+                    addModifiers(mods);\n+                    String keyword = e.getKind() == ElementKind.RECORD ? \"record\" : \"class\";\n+                    list.add(keyword);\n+                    return list;\n+                }\n+\n+                @Override\n+                protected List<String> defaultAction(Element e, SortedSet<Modifier> mods) {\n+                    addModifiers(mods);\n+                    return list;\n+                }\n+\n+            }.visit(typeElement, modifiers);\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":135,"deletions":17,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -148,1 +148,0 @@\n-     * @param modifiers the modifiers for the signature\n@@ -151,1 +150,1 @@\n-    void addClassSignature(String modifiers, Content classInfoTree);\n+    void addClassSignature(Content classInfoTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/ClassWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-        writer.addClassSignature(utils.modifiersToString(typeElement, true), classInfoTree);\n+        writer.addClassSignature(classInfoTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.Arrays;\n@@ -84,1 +83,0 @@\n-import javax.lang.model.util.ElementKindVisitor14;\n@@ -129,1 +127,0 @@\n-import static javax.lang.model.element.Modifier.*;\n@@ -493,98 +490,0 @@\n-    public String modifiersToString(Element e, boolean trailingSpace) {\n-        SortedSet<Modifier> modifiers = new TreeSet<>(e.getModifiers());\n-        modifiers.remove(NATIVE);\n-        modifiers.remove(STRICTFP);\n-        modifiers.remove(SYNCHRONIZED);\n-\n-        return new ElementKindVisitor14<String, SortedSet<Modifier>>() {\n-            final StringBuilder sb = new StringBuilder();\n-\n-            void addVisibilityModifier(Set<Modifier> modifiers) {\n-                if (modifiers.contains(PUBLIC)) {\n-                    append(\"public\");\n-                } else if (modifiers.contains(PROTECTED)) {\n-                    append(\"protected\");\n-                } else if (modifiers.contains(PRIVATE)) {\n-                    append(\"private\");\n-                }\n-            }\n-\n-            void addStatic(Set<Modifier> modifiers) {\n-                if (modifiers.contains(STATIC)) {\n-                    append(\"static\");\n-                }\n-            }\n-\n-            void addSealed(TypeElement e) {\n-                if (e.getModifiers().contains(Modifier.SEALED)) {\n-                    append(\"sealed\");\n-                } else if (e.getModifiers().contains(Modifier.NON_SEALED)) {\n-                    append(\"non-sealed\");\n-                }\n-            }\n-\n-            void addModifiers(Set<Modifier> modifiers) {\n-                modifiers.stream()\n-                        .map(Modifier::toString)\n-                        .forEachOrdered(this::append);\n-            }\n-\n-            void append(String s) {\n-                if (sb.length() > 0) {\n-                    sb.append(\" \");\n-                }\n-                sb.append(s);\n-            }\n-\n-            String finalString(String s) {\n-                append(s);\n-                if (trailingSpace) {\n-                    sb.append(\" \");\n-                }\n-                return sb.toString();\n-            }\n-\n-            @Override\n-            public String visitTypeAsInterface(TypeElement e, SortedSet<Modifier> mods) {\n-                addVisibilityModifier(mods);\n-                addStatic(mods);\n-                addSealed(e);\n-                return finalString(\"interface\");\n-            }\n-\n-            @Override\n-            public String visitTypeAsEnum(TypeElement e, SortedSet<Modifier> mods) {\n-                addVisibilityModifier(mods);\n-                addStatic(mods);\n-                return finalString(\"enum\");\n-            }\n-\n-            @Override\n-            public String visitTypeAsAnnotationType(TypeElement e, SortedSet<Modifier> mods) {\n-                addVisibilityModifier(mods);\n-                addStatic(mods);\n-                return finalString(\"@interface\");\n-            }\n-\n-            @Override\n-            public String visitTypeAsRecord(TypeElement e, SortedSet<Modifier> mods) {\n-                mods.remove(FINAL); \/\/ suppress the implicit `final`\n-                return visitTypeAsClass(e, mods);\n-            }\n-\n-            @Override\n-            public String visitTypeAsClass(TypeElement e, SortedSet<Modifier> mods) {\n-                addModifiers(mods);\n-                String keyword = e.getKind() == ElementKind.RECORD ? \"record\" : \"class\";\n-                return finalString(keyword);\n-            }\n-\n-            @Override\n-            protected String defaultAction(Element e, SortedSet<Modifier> mods) {\n-                addModifiers(mods);\n-                return sb.toString().trim();\n-            }\n-\n-        }.visit(e, modifiers);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"modified"}]}