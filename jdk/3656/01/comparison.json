{"files":[{"patch":"@@ -44,0 +44,1 @@\n+    private static final int PER_CPU_SHARES = 1024;\n@@ -138,0 +139,4 @@\n+            long share = containerMetrics.getCpuShares();\n+            long periodLength = containerMetrics.getCpuPeriod();\n+            long numPeriods = containerMetrics.getCpuNumPeriods();\n+            long usageNanos = containerMetrics.getCpuUsage();\n@@ -139,3 +144,10 @@\n-                long periodLength = containerMetrics.getCpuPeriod();\n-                long numPeriods = containerMetrics.getCpuNumPeriods();\n-                long usageNanos = containerMetrics.getCpuUsage();\n+                if (numPeriods > 0 && usageNanos > 0) {\n+                    long quotaNanos = TimeUnit.MICROSECONDS.toNanos(quota * numPeriods);\n+                    double systemLoad = (double) usageNanos \/ quotaNanos;\n+                    \/\/ Ensure the return value is in the range 0.0 -> 1.0\n+                    systemLoad = Math.max(0.0, systemLoad);\n+                    systemLoad = Math.min(1.0, systemLoad);\n+                    return systemLoad;\n+                }\n+                return -1;\n+            } else if (share > 0) {\n@@ -143,2 +155,2 @@\n-                    long elapsedNanos = TimeUnit.MICROSECONDS.toNanos(periodLength * numPeriods);\n-                    double systemLoad = (double) usageNanos \/ elapsedNanos;\n+                    long shareNanos = TimeUnit.MICROSECONDS.toNanos(periodLength * numPeriods * share \/ PER_CPU_SHARES);\n+                    double systemLoad = (double) usageNanos \/ shareNanos;\n@@ -152,1 +164,1 @@\n-                \/\/ If CPU quotas are not active then find the average system load for\n+                \/\/ If CPU quotas and shares are not active then find the average system load for\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}