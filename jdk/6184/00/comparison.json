{"files":[{"patch":"@@ -772,1 +772,2 @@\n-    case vmIntrinsics::_dsqrt: {\n+    case vmIntrinsics::_dsqrt:\n+    case vmIntrinsics::_dsqrt_strict: {\n@@ -779,1 +780,2 @@\n-        case vmIntrinsics::_dsqrt: {\n+        case vmIntrinsics::_dsqrt:\n+        case vmIntrinsics::_dsqrt_strict: {\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -791,1 +791,2 @@\n-    case vmIntrinsics::_dsqrt: {\n+    case vmIntrinsics::_dsqrt:\n+    case vmIntrinsics::_dsqrt_strict: {\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -725,1 +725,2 @@\n-    case vmIntrinsics::_dsqrt: {\n+    case vmIntrinsics::_dsqrt:\n+    case vmIntrinsics::_dsqrt_strict: {\n@@ -746,0 +747,1 @@\n+        case vmIntrinsics::_dsqrt_strict:\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -632,1 +632,2 @@\n-    case vmIntrinsics::_dsqrt: {\n+    case vmIntrinsics::_dsqrt:\n+    case vmIntrinsics::_dsqrt_strict: {\n@@ -639,1 +640,2 @@\n-        case vmIntrinsics::_dsqrt: {\n+        case vmIntrinsics::_dsqrt:\n+        case vmIntrinsics::_dsqrt_strict: {\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -816,3 +816,9 @@\n-    case vmIntrinsics::_dabs:   __ abs  (calc_input, calc_result, tmp); break;\n-    case vmIntrinsics::_dsqrt:  __ sqrt (calc_input, calc_result, LIR_OprFact::illegalOpr); break;\n-    default:                    ShouldNotReachHere();\n+    case vmIntrinsics::_dabs:\n+      __ abs  (calc_input, calc_result, tmp);\n+      break;\n+    case vmIntrinsics::_dsqrt:\n+    case vmIntrinsics::_dsqrt_strict:\n+      __ sqrt (calc_input, calc_result, LIR_OprFact::illegalOpr);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -157,0 +157,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3223,0 +3223,1 @@\n+  case vmIntrinsics::_dsqrt_strict  : \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2954,0 +2954,1 @@\n+  case vmIntrinsics::_dsqrt_strict:   \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n@@ -130,0 +131,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n@@ -268,0 +270,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+  do_intrinsic(_dsqrt_strict,             java_lang_StrictMath,   sqrt_name,  double_double_signature,           F_SN)  \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -149,7 +149,2 @@\n-      case vmIntrinsics::_dsqrt:\n-        \/\/ _dsqrt will be selected for both Math::sqrt and StrictMath::sqrt, but the latter\n-        \/\/ is native. Keep treating it like a native method in the interpreter\n-        assert(m->name() == vmSymbols::sqrt_name() &&\n-               (m->klass_name() == vmSymbols::java_lang_Math() ||\n-                m->klass_name() == vmSymbols::java_lang_StrictMath()), \"must be\");\n-        return m->is_native() ? native : java_lang_math_sqrt;\n+      case vmIntrinsics::_dsqrt:             return java_lang_math_sqrt;\n+      case vmIntrinsics::_dsqrt_strict:      return native;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+      case vmIntrinsics::_dsqrt_strict : \/\/ fall thru\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1648,15 +1648,0 @@\n-  case VM_SYMBOL_ENUM_NAME(java_lang_StrictMath):\n-    \/\/ Second chance: check in regular Math.\n-    switch (name_id) {\n-    case VM_SYMBOL_ENUM_NAME(min_name):\n-    case VM_SYMBOL_ENUM_NAME(max_name):\n-    case VM_SYMBOL_ENUM_NAME(sqrt_name):\n-      \/\/ pretend it is the corresponding method in the non-strict class:\n-      klass_id = VM_SYMBOL_ENUM_NAME(java_lang_Math);\n-      id = vmIntrinsics::find_id(klass_id, name_id, sig_id, flags);\n-      break;\n-    default:\n-      break;\n-    }\n-    break;\n-\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -506,0 +506,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -264,0 +264,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n@@ -1601,1 +1602,3 @@\n-  case vmIntrinsics::_dsqrt:  n = new SqrtDNode(C, control(),  arg);  break;\n+  case vmIntrinsics::_dsqrt:\n+  case vmIntrinsics::_dsqrt_strict:\n+                              n = new SqrtDNode(C, control(),  arg);  break;\n@@ -1744,1 +1747,3 @@\n-  case vmIntrinsics::_dsqrt:  return Matcher::match_rule_supported(Op_SqrtD) ? inline_double_math(id) : false;\n+  case vmIntrinsics::_dsqrt:\n+  case vmIntrinsics::_dsqrt_strict:\n+                              return Matcher::match_rule_supported(Op_SqrtD) ? inline_double_math(id) : false;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1631,1 +1631,0 @@\n-    @IntrinsicCandidate\n@@ -1664,1 +1663,0 @@\n-    @IntrinsicCandidate\n@@ -1683,1 +1681,0 @@\n-    @IntrinsicCandidate\n@@ -1698,1 +1695,0 @@\n-    @IntrinsicCandidate\n@@ -1731,1 +1727,0 @@\n-    @IntrinsicCandidate\n@@ -1750,1 +1745,0 @@\n-    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}