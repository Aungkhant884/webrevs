{"files":[{"patch":"@@ -881,1 +881,5 @@\n-        return plus(secondsToAdd, 0);\n+        if (secondsToAdd == 0) {\n+            return this;\n+        }\n+        long epochSec = Math.addExact(seconds, secondsToAdd);\n+        return create(epochSec, nanos);\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Examine Instant.plusSeconds operations\n+ *\/\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class InstantBench {\n+\n+    private Instant[] INSTANTS;\n+    private int[] SECONDS;\n+\n+    private long[] RESULT;\n+\n+    @Setup\n+    public void createInstants() {\n+        \/\/ Various instants during the same day\n+        final Instant loInstant = Instant.EPOCH.plus(Duration.ofDays(365*50)); \/\/ 2020-01-01\n+        final Instant hiInstant = loInstant.plus(Duration.ofDays(1));\n+        final long maxOffsetNanos = Duration.between(loInstant, hiInstant).toNanos();\n+        final Random random = new Random(0);\n+        INSTANTS = IntStream\n+                .range(0, 1_000)\n+                .mapToObj(ignored -> {\n+                    final long offsetNanos = (long) Math.floor(random.nextDouble() * maxOffsetNanos);\n+                    return loInstant.plus(offsetNanos, ChronoUnit.NANOS);\n+                })\n+                .toArray(Instant[]::new);\n+        SECONDS = IntStream\n+                .range(0, INSTANTS.length)\n+                .map(ignored -> random.nextInt(1000))\n+                .toArray();\n+        RESULT = new long[INSTANTS.length];\n+    }\n+\n+    @Benchmark\n+    public long[] plusSecondsDropNanos() {\n+        for (int i = 0; i < INSTANTS.length; i++) {\n+            RESULT[i] = INSTANTS[i].plusSeconds(SECONDS[i]).getEpochSecond();\n+        }\n+        return RESULT;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/InstantBench.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}