{"files":[{"patch":"@@ -85,1 +85,0 @@\n-  _intrinsic_id       = h_m->intrinsic_id();\n@@ -105,0 +104,4 @@\n+  \/\/ Check for blackhole intrinsic and then populate the intrinsic ID.\n+  CompilerOracle::tag_blackhole_if_possible(h_m);\n+  _intrinsic_id       = h_m->intrinsic_id();\n+\n@@ -160,2 +163,0 @@\n-\n-  CompilerOracle::tag_blackhole_if_possible(h_m);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285394\n+ * @requires vm.compiler2.enabled\n+ * @summary Blackholes should work when hot inlined\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.blackhole.BlackholeHotInlineTest\n+ *\/\n+\n+package compiler.c2.irTests.blackhole;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class BlackholeHotInlineTest {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:CompileThreshold=100\",\n+            \"-XX:-TieredCompilation\",\n+            \"-XX:CompileCommand=blackhole,compiler.c2.irTests.blackhole.BlackholeHotInlineTest::blackhole\",\n+            \"-XX:CompileCommand=dontinline,compiler.c2.irTests.blackhole.BlackholeHotInlineTest::dontinline\"\n+        );\n+    }\n+\n+    static long x, y;\n+\n+    \/*\n+     * Baseline test: check that dontinline method does not allow the elimination.\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.MUL_L, \"1\"})\n+    static void testDontline() {\n+        dontinline(x * y);\n+    }\n+\n+    static void dontinline(long x) {}\n+\n+    @Run(test = \"testDontline\")\n+    static void runDontinline() {\n+        testDontline();\n+    }\n+\n+    \/*\n+     * Positive test: check that blackhole method does not allow the elimination either.\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.MUL_L, \"1\"})\n+    static void testBlackholed() {\n+        blackhole(x * y);\n+    }\n+\n+    static void blackhole(long x) {}\n+\n+    @Run(test = \"testBlackholed\")\n+    static void runBlackholed() {\n+        testBlackholed();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/blackhole\/BlackholeHotInlineTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}