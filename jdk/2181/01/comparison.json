{"files":[{"patch":"@@ -234,0 +234,1 @@\n+  assert_free_region_list(length() >= num_regions, \"pre-condition\");\n@@ -238,0 +239,14 @@\n+  \/\/ prev points to the node right before first or null when first == _head\n+  HeapRegion* const prev = first->prev();\n+  if (prev == NULL) {\n+    assert_free_region_list(_head == first, \"invariant\");\n+  } else {\n+    assert_free_region_list(_head != first, \"invariant\");\n+  }\n+  \/\/ next points to the node right after first or null when first == _tail\n+  HeapRegion* next = first->next();\n+  if (next == NULL) {\n+    assert_free_region_list(_tail == first, \"invariant\");\n+  } else {\n+    assert_free_region_list(_tail != first, \"invariant\");\n+  }\n@@ -242,19 +257,5 @@\n-    HeapRegion* next = curr->next();\n-    HeapRegion* prev = curr->prev();\n-\n-    assert(count < num_regions,\n-           \"[%s] should not come across more regions \"\n-           \"pending for removal than num_regions: %u\",\n-           name(), num_regions);\n-\n-    if (prev == NULL) {\n-      assert_free_region_list(_head == curr, \"invariant\");\n-      _head = next;\n-    } else {\n-      assert_free_region_list(_head != curr, \"invariant\");\n-      prev->set_next(next);\n-    }\n-    if (next == NULL) {\n-      assert_free_region_list(_tail == curr, \"invariant\");\n-      _tail = prev;\n-    } else {\n+    next = curr->next();\n+\n+    assert_free_region_list(_head != next, \"invariant\");\n+    if (next != NULL) {\n+      assert_free_region_list(next->prev() != NULL, \"invariant\");\n@@ -262,1 +263,0 @@\n-      next->set_prev(prev);\n@@ -264,0 +264,1 @@\n+\n@@ -279,0 +280,11 @@\n+  if (prev == NULL) {\n+    _head = next;\n+  } else {\n+    prev->set_next(next);\n+  }\n+  if (next == NULL) {\n+    _tail = prev;\n+  } else {\n+    next->set_prev(prev);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionSet.cpp","additions":32,"deletions":20,"binary":false,"changes":52,"status":"modified"}]}