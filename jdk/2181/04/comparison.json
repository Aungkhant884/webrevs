{"files":[{"patch":"@@ -230,0 +230,18 @@\n+#ifdef ASSERT\n+void FreeRegionList::verify_region_to_remove(HeapRegion* curr, HeapRegion* next) {\n+  assert_free_region_list(_head != next, \"invariant\");\n+  if (next != NULL) {\n+    assert_free_region_list(next->prev() == curr, \"invariant\");\n+    assert_free_region_list(_tail != curr, \"invariant\");\n+  } else {\n+    assert_free_region_list(_tail == curr, \"invariant\");\n+  }\n+  HeapRegion* prev = curr->prev();\n+  if (prev == NULL) {\n+    assert_free_region_list(_head == curr, \"invariant\");\n+  } else {\n+    assert_free_region_list(_head != curr, \"invariant\");\n+  }\n+}\n+#endif\n+\n@@ -234,0 +252,1 @@\n+  assert_free_region_list(length() >= num_regions, \"pre-condition\");\n@@ -238,0 +257,7 @@\n+  \/\/ prev points to the node right before first or null when first == _head\n+  HeapRegion* const prev = first->prev();\n+  \/\/ next points to the node right after first or null when first == _tail,\n+  \/\/ and after the while loop below, next should point to the next node right\n+  \/\/ after the removed sublist, or null if the sublist contains _tail.\n+  HeapRegion* next = first->next();\n+\n@@ -242,22 +268,3 @@\n-    HeapRegion* next = curr->next();\n-    HeapRegion* prev = curr->prev();\n-\n-    assert(count < num_regions,\n-           \"[%s] should not come across more regions \"\n-           \"pending for removal than num_regions: %u\",\n-           name(), num_regions);\n-\n-    if (prev == NULL) {\n-      assert_free_region_list(_head == curr, \"invariant\");\n-      _head = next;\n-    } else {\n-      assert_free_region_list(_head != curr, \"invariant\");\n-      prev->set_next(next);\n-    }\n-    if (next == NULL) {\n-      assert_free_region_list(_tail == curr, \"invariant\");\n-      _tail = prev;\n-    } else {\n-      assert_free_region_list(_tail != curr, \"invariant\");\n-      next->set_prev(prev);\n-    }\n+    next = curr->next();\n+    verify_region_to_remove(curr, next);\n+\n@@ -279,0 +286,11 @@\n+  if (prev == NULL) {\n+    _head = next;\n+  } else {\n+    prev->set_next(next);\n+  }\n+  if (next == NULL) {\n+    _tail = prev;\n+  } else {\n+    next->set_prev(prev);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionSet.cpp","additions":40,"deletions":22,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -187,0 +187,1 @@\n+  void verify_region_to_remove(HeapRegion* curr, HeapRegion* next) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}