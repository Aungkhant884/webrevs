{"files":[{"patch":"@@ -2206,1 +2206,3 @@\n-        failure_reason = os::strdup(err_msg(\"Error attaching to libjvmci (err: %d)\", env.init_error()), mtJVMCI);\n+        const char* msg = env.init_error_msg();\n+        failure_reason = os::strdup(err_msg(\"Error attaching to libjvmci (err: %d, %s)\",\n+                                    env.init_error(), msg == nullptr ? \"unknown\" : msg), mtJVMCI);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  _env = _runtime->init_shared_library_javavm(&_init_error);\n+  _env = _runtime->init_shared_library_javavm(&_init_error, &_init_error_msg);\n@@ -156,1 +156,2 @@\n-    JVMCI_event_1(\"[%s:%d] Error creating libjvmci (err: %d)\", _file, _line, _init_error);\n+    JVMCI_event_1(\"[%s:%d] Error creating libjvmci (err: %d, %s)\", _file, _line,\n+                  _init_error, _init_error_msg == nullptr ? \"unknown\" : _init_error_msg);\n@@ -198,1 +199,1 @@\n-    _throw_to_caller(false), _file(file), _line(line), _init_error(JNI_OK), _compile_state(compile_state) {\n+    _throw_to_caller(false), _file(file), _line(line), _init_error(JNI_OK), _init_error_msg(nullptr), _compile_state(compile_state) {\n@@ -203,1 +204,1 @@\n-    _throw_to_caller(false), _file(file), _line(line), _init_error(JNI_OK), _compile_state(nullptr) {\n+    _throw_to_caller(false), _file(file), _line(line), _init_error(JNI_OK), _init_error_msg(nullptr), _compile_state(nullptr) {\n@@ -208,1 +209,1 @@\n-    _throw_to_caller(true), _file(file), _line(line), _init_error(JNI_OK), _compile_state(nullptr) {\n+    _throw_to_caller(true), _file(file), _line(line), _init_error(JNI_OK), _init_error_msg(nullptr), _compile_state(nullptr) {\n@@ -221,0 +222,1 @@\n+  _init_error_msg = nullptr;\n@@ -240,1 +242,2 @@\n-  JVMCI_THROW_MSG(InternalError, err_msg(\"Error creating or attaching to libjvmci (err: %d)\", _init_error));\n+  JVMCI_THROW_MSG(InternalError, err_msg(\"Error creating or attaching to libjvmci (err: %d, description: %s)\",\n+                  _init_error, _init_error_msg == nullptr ? \"unknown\" : _init_error_msg));\n@@ -250,1 +253,2 @@\n-  THROW_MSG(vmSymbols::java_lang_OutOfMemoryError(), err_msg(\"Error creating or attaching to libjvmci (err: %d)\", _init_error));\n+  THROW_MSG(vmSymbols::java_lang_OutOfMemoryError(), err_msg(\"Error creating or attaching to libjvmci (err: %d, description: %s)\",\n+            _init_error, _init_error_msg == nullptr ? \"unknown\" : _init_error_msg));\n@@ -575,0 +579,3 @@\n+  if (_init_error_msg != nullptr) {\n+    os::free((void*) _init_error_msg);\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+  const char*  _init_error_msg;  \/\/ Message for _init_error if available. C heap allocated.\n@@ -220,0 +221,6 @@\n+  \/\/ Gets a message describing a non-zero init_error().\n+  \/\/ Valid as long as this JVMCIEnv is valid.\n+  const char* init_error_msg() {\n+    return _init_error_msg;\n+  }\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1249,1 +1249,1 @@\n-JNIEnv* JVMCIRuntime::init_shared_library_javavm(int* create_JavaVM_err) {\n+JNIEnv* JVMCIRuntime::init_shared_library_javavm(int* create_JavaVM_err, const char** err_msg) {\n@@ -1276,1 +1276,1 @@\n-    JavaVMOption options[5];\n+    JavaVMOption options[6];\n@@ -1293,0 +1293,2 @@\n+    options[5].optionString = (char*) \"_createvm_errorstr\";\n+    options[5].extraInfo = (void*) err_msg;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -283,2 +283,4 @@\n-  \/\/ by JNI_CreateJavaVM is returned in create_JavaVM_err.\n-  JNIEnv* init_shared_library_javavm(int* create_JavaVM_err);\n+  \/\/ by JNI_CreateJavaVM is returned in create_JavaVM_err and, if available, an\n+  \/\/ error message is malloc'ed and assigned to err_msg. The caller is responsible\n+  \/\/ for freeing err_msg.\n+  JNIEnv* init_shared_library_javavm(int* create_JavaVM_err, const char** err_msg);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -384,1 +384,1 @@\n-    return jvmciEnv.runtime()->is_gc_supported(&jvmciEnv, (CollectedHeap::Name)name);\n+    return jvmciEnv.init_error() == JNI_OK && jvmciEnv.runtime()->is_gc_supported(&jvmciEnv, (CollectedHeap::Name)name);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}