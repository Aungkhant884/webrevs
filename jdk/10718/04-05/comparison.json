{"files":[{"patch":"@@ -92,1 +92,1 @@\n-          range(HeapWordSize, max_jint)                                          \\\n+          range(wordSize, max_jint)                                          \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4115,1 +4115,1 @@\n-void MacroAssembler::zero_dcache_blocks(Register base, Register cnt) {\n+void MacroAssembler::zero_dcache_blocks(Register base, Register cnt, Register tmp1, Register tmp2, Register tmp3) {\n@@ -4119,12 +4119,12 @@\n-  neg(t0, base);\n-  andi(t0, t0, CacheLineSize - 1);\n-\n-  \/\/ t0: the number of bytes to be filled to align the base with cache line size.\n-  add(base, base, t0);\n-  srai(t1, t0, 3);\n-  sub(cnt, cnt, t1);\n-  add(t2, zr, zr);\n-  movptr(t2, initial_table_end);\n-  srli(t1, t0, 1);\n-  sub(t1, t2, t1);\n-  j(t1);\n+  neg(tmp1, base);\n+  andi(tmp1, tmp1, CacheLineSize - 1);\n+\n+  \/\/ tmp1: the number of bytes to be filled to align the base with cache line size.\n+  add(base, base, tmp1);\n+  srai(tmp2, tmp1, 3);\n+  sub(cnt, cnt, tmp2);\n+  add(tmp3, zr, zr);\n+  movptr(tmp3, initial_table_end);\n+  srli(tmp2, tmp1, 1);\n+  sub(tmp2, tmp3, tmp2);\n+  j(tmp2);\n@@ -4136,1 +4136,1 @@\n-  li(t0, CacheLineSize >> 3);\n+  li(tmp1, CacheLineSize >> 3);\n@@ -4139,1 +4139,1 @@\n-  sub(cnt, cnt, t0);\n+  sub(cnt, cnt, tmp1);\n@@ -4141,1 +4141,1 @@\n-  bge(cnt, t0, loop_cbo_zero);\n+  bge(cnt, tmp1, loop_cbo_zero);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1104,1 +1104,1 @@\n-  void zero_dcache_blocks(Register base, Register cnt);\n+  void zero_dcache_blocks(Register base, Register cnt, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,0 +668,5 @@\n+\/\/ Class for 64 bit register r7\n+reg_class r7_reg(\n+    R7, R7_H\n+);\n+\n@@ -730,0 +735,4 @@\n+reg_class r31_reg(\n+    R31, R31_H\n+);\n+\n@@ -3270,0 +3279,10 @@\n+operand iRegP_R7()\n+%{\n+  constraint(ALLOC_IN_RC(r7_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -3358,0 +3377,22 @@\n+\/\/ Pointer 64 bit Register R30 only\n+operand iRegP_R30()\n+%{\n+  constraint(ALLOC_IN_RC(r30_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Pointer 64 bit Register R31 only\n+operand iRegP_R31()\n+%{\n+  constraint(ALLOC_IN_RC(r31_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -10287,1 +10328,2 @@\n-instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, Universe dummy)\n+instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, iRegP_R30 tmp1,\n+                            iRegP_R31 tmp2, iRegP_R7 tmp3, Universe dummy)\n@@ -10289,0 +10331,1 @@\n+  \/\/ temp registers must match the one used in StubGenerator::generate_zero_blocks()\n@@ -10291,1 +10334,1 @@\n-  effect(USE_KILL cnt, USE_KILL base);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-    const Register base = x28, cnt = x29;\n+    const Register base = x28, cnt = x29, tmp1 = x30, tmp2 = x31, tmp3 = x7;\n@@ -687,1 +687,1 @@\n-      __ zero_dcache_blocks(base, cnt);\n+      __ zero_dcache_blocks(base, cnt, tmp1, tmp2, tmp3);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}