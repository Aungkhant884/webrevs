{"files":[{"patch":"@@ -2749,1 +2749,1 @@\n-  INSN(prefetch_w, 0b0000000000010);\n+  INSN(prefetch_w, 0b0000000000011);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,0 +90,3 @@\n+  product(intx, CacheLineSize, DEFAULT_CACHE_LINE_SIZE,                          \\\n+          \"Size in bytes of a CPU cache line\")                                   \\\n+          range(wordSize, max_jint)                                              \\\n@@ -96,2 +99,2 @@\n-  product(bool, UseRVA20U64, false, EXPERIMENTAL, \"Use RVA20U64 profile\")           \\\n-  product(bool, UseRVA22U64, false, EXPERIMENTAL, \"Use RVA22U64 profile\")           \\\n+  product(bool, UseRVA20U64, false, EXPERIMENTAL, \"Use RVA20U64 profile\")        \\\n+  product(bool, UseRVA22U64, false, EXPERIMENTAL, \"Use RVA22U64 profile\")        \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4103,1 +4103,1 @@\n-\/\/ you want to use it elsewhere, note that cnt must be >= DEFAULT_CACHE_LINE_SIZE.\n+\/\/ you want to use it elsewhere, note that cnt must be >= CacheLineSize.\n@@ -4109,1 +4109,1 @@\n-  andi(tmp1, tmp1, DEFAULT_CACHE_LINE_SIZE - 1);\n+  andi(tmp1, tmp1, CacheLineSize - 1);\n@@ -4119,1 +4119,1 @@\n-  for (int i = -DEFAULT_CACHE_LINE_SIZE + wordSize; i < 0; i += wordSize) {\n+  for (int i = -CacheLineSize + wordSize; i < 0; i += wordSize) {\n@@ -4124,1 +4124,1 @@\n-  mv(tmp1, DEFAULT_CACHE_LINE_SIZE \/ wordSize);\n+  mv(tmp1, CacheLineSize \/ wordSize);\n@@ -4128,1 +4128,1 @@\n-  add(base, base, DEFAULT_CACHE_LINE_SIZE);\n+  add(base, base, CacheLineSize);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -681,1 +681,1 @@\n-      \/\/ Ensure count >= 2*DEFAULT_CACHE_LINE_SIZE so that it still deserves a cbo.zero\n+      \/\/ Ensure count >= 2*CacheLineSize so that it still deserves a cbo.zero\n@@ -684,1 +684,1 @@\n-      int low_limit = MAX2(2 * DEFAULT_CACHE_LINE_SIZE, (int)BlockZeroingLowLimit) \/ wordSize;\n+      int low_limit = MAX2(2 * CacheLineSize, BlockZeroingLowLimit) \/ wordSize;\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,13 @@\n+  if (UseZic64b) {\n+    if (CacheLineSize != 64) {\n+      assert(!FLAG_IS_DEFAULT(CacheLineSize), \"default cache line size should be 64 bytes\");\n+      warning(\"CacheLineSize is assumed to be 64 bytes because Zic64b is enabled\");\n+      FLAG_SET_DEFAULT(CacheLineSize, 64);\n+    }\n+  } else {\n+    if (!FLAG_IS_DEFAULT(CacheLineSize) && !is_power_of_2(CacheLineSize)) {\n+      warning(\"CacheLineSize must be a power of 2\");\n+      FLAG_SET_DEFAULT(CacheLineSize, DEFAULT_CACHE_LINE_SIZE);\n+    }\n+  }\n+\n@@ -161,1 +174,1 @@\n-  if (UseZicboz && UseZic64b) {\n+  if (UseZicboz) {\n@@ -166,1 +179,1 @@\n-      FLAG_SET_DEFAULT(BlockZeroingLowLimit, 2 * DEFAULT_CACHE_LINE_SIZE);\n+      FLAG_SET_DEFAULT(BlockZeroingLowLimit, 2 * CacheLineSize);\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}