{"files":[{"patch":"@@ -2715,0 +2715,38 @@\n+\/\/ Cache Management Operations\n+#define INSN(NAME, funct)                                                                    \\\n+  void NAME(Register Rs1) {                                                                  \\\n+    unsigned insn = 0;                                                                       \\\n+    patch((address)&insn, 6,  0, 0b0001111);                                                 \\\n+    patch((address)&insn, 14, 12, 0b010);                                                    \\\n+    patch_reg((address)&insn, 15, Rs1);                                                      \\\n+    patch((address)&insn, 31, 20, funct);                                                    \\\n+    emit(insn);                                                                              \\\n+  }\n+\n+  INSN(cbo_inval, 0b0000000000000);\n+  INSN(cbo_clean, 0b0000000000001);\n+  INSN(cbo_flush, 0b0000000000010);\n+  INSN(cbo_zero,  0b0000000001000);\n+\n+#undef INSN\n+\n+#define INSN(NAME, funct)                                                                    \\\n+  void NAME(Register Rs1, int32_t offset) {                                                  \\\n+    guarantee((offset & 0x1f) == 0, \"offset lowest 5 bits must be zero\");                    \\\n+    int32_t upperOffset = offset >> 5;                                                       \\\n+    unsigned insn = 0;                                                                       \\\n+    patch((address)&insn, 6,  0, 0b0010011);                                                 \\\n+    patch((address)&insn, 14, 12, 0b110);                                                    \\\n+    patch_reg((address)&insn, 15, Rs1);                                                      \\\n+    patch((address)&insn, 24, 20, funct);                                                    \\\n+    upperOffset &= 0x7f;                                                                     \\\n+    patch((address)&insn, 31, 25, upperOffset);                                              \\\n+    emit(insn);                                                                              \\\n+  }\n+\n+  INSN(prefetch_i, 0b0000000000000);\n+  INSN(prefetch_r, 0b0000000000001);\n+  INSN(prefetch_w, 0b0000000000010);\n+\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+#define DEFAULT_CACHE_LINE_SIZE 64\n+\n","filename":"src\/hotspot\/cpu\/riscv\/globalDefinitions_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,2 @@\n+  product(bool, UseBlockZeroing, false,                                          \\\n+          \"Use Zicboz for block zeroing\")                                        \\\n@@ -88,0 +90,3 @@\n+  product(intx, CacheLineSize, DEFAULT_CACHE_LINE_SIZE,                          \\\n+          \"Size in bytes of a CPU cache line\")                                   \\\n+          range(wordSize, max_jint)                                          \\\n@@ -94,0 +99,2 @@\n+  product(bool, UseRVA20U64, false, EXPERIMENTAL, \"Use RVA20U64 profile\")           \\\n+  product(bool, UseRVA22U64, false, EXPERIMENTAL, \"Use RVA22U64 profile\")           \\\n@@ -98,0 +105,4 @@\n+  product(bool, UseZic64b, false, EXPERIMENTAL, \"Use Zic64b instructions\")       \\\n+  product(bool, UseZicbom, false, EXPERIMENTAL, \"Use Zicbom instructions\")       \\\n+  product(bool, UseZicbop, false, EXPERIMENTAL, \"Use Zicbop instructions\")       \\\n+  product(bool, UseZicboz, false, EXPERIMENTAL, \"Use Zicboz instructions\")       \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-  la(Rd, target(label));\n+  wrap_label(Rd, label, &MacroAssembler::la);\n@@ -3983,2 +3983,1 @@\n-      sd(zr, Address(ptr, 0));\n-      addi(ptr, ptr, 8);\n+      sd(zr, Address(ptr, j*8));\n@@ -3986,0 +3985,1 @@\n+    addi(ptr, ptr, i*8);\n@@ -4004,1 +4004,1 @@\n-void MacroAssembler::zero_words(Register base, u_int64_t cnt)\n+void MacroAssembler::zero_words(Register base, uint64_t cnt)\n@@ -4095,0 +4095,37 @@\n+\/\/ Zero blocks of memory by using CBO.ZERO.\n+\/\/\n+\/\/ Aligns the base address first sufficiently for CBO.ZERO, then uses\n+\/\/ CBO.ZERO repeatedly for every full block.  cnt is the size to be\n+\/\/ zeroed in HeapWords.  Returns the count of words left to be zeroed\n+\/\/ in cnt.\n+\/\/\n+\/\/ NOTE: This is intended to be used in the zero_blocks() stub.  If\n+\/\/ you want to use it elsewhere, note that cnt must be >= CacheLineSize.\n+void MacroAssembler::zero_dcache_blocks(Register base, Register cnt, Register tmp1, Register tmp2) {\n+  Label initial_table_end, loop;\n+\n+  \/\/ Align base with cache line size.\n+  neg(tmp1, base);\n+  andi(tmp1, tmp1, CacheLineSize - 1);\n+\n+  \/\/ tmp1: the number of bytes to be filled to align the base with cache line size.\n+  add(base, base, tmp1);\n+  srai(tmp2, tmp1, 3);\n+  sub(cnt, cnt, tmp2);\n+  srli(tmp2, tmp1, 1);\n+  la(tmp1, initial_table_end);\n+  sub(tmp2, tmp1, tmp2);\n+  jr(tmp2);\n+  for (int i = -CacheLineSize + wordSize; i < 0; i += wordSize) {\n+    sd(zr, Address(base, i));\n+  }\n+  bind(initial_table_end);\n+\n+  mv(tmp1, CacheLineSize \/ wordSize);\n+  bind(loop);\n+  cbo_zero(base);\n+  sub(cnt, cnt, tmp1);\n+  add(base, base, CacheLineSize);\n+  bge(cnt, tmp1, loop);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1096,1 +1096,1 @@\n-  void zero_words(Register base, u_int64_t cnt);\n+  void zero_words(Register base, uint64_t cnt);\n@@ -1100,0 +1100,1 @@\n+  void zero_dcache_blocks(Register base, Register cnt, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -730,0 +730,4 @@\n+reg_class r31_reg(\n+    R31, R31_H\n+);\n+\n@@ -3350,0 +3354,22 @@\n+\/\/ Pointer 64 bit Register R30 only\n+operand iRegP_R30()\n+%{\n+  constraint(ALLOC_IN_RC(r30_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Pointer 64 bit Register R31 only\n+operand iRegP_R31()\n+%{\n+  constraint(ALLOC_IN_RC(r31_reg));\n+  match(RegP);\n+  match(iRegPNoSp);\n+  op_cost(0);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -10231,1 +10257,2 @@\n-instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, Universe dummy)\n+instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, iRegP_R30 tmp1,\n+                            iRegP_R31 tmp2, Universe dummy)\n@@ -10233,1 +10260,2 @@\n-  predicate(!UseRVV);\n+  \/\/ temp registers must match the one used in StubGenerator::generate_zero_blocks()\n+  predicate(UseBlockZeroing || !UseRVV);\n@@ -10235,1 +10263,1 @@\n-  effect(USE_KILL cnt, USE_KILL base);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp1, TEMP tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2045,1 +2045,1 @@\n-  predicate(UseRVV);\n+  predicate(!UseBlockZeroing && UseRVV);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-    const Register base = x28, cnt = x29;\n+    const Register base = x28, cnt = x29, tmp1 = x30, tmp2 = x31;\n@@ -680,0 +680,11 @@\n+    if (UseBlockZeroing) {\n+      \/\/ Ensure count >= 2*CacheLineSize so that it still deserves a cbo.zero\n+      \/\/ after alignment.\n+      Label small;\n+      int low_limit = MAX2(2*(CacheLineSize), BlockZeroingLowLimit) \/ wordSize;\n+      __ mv(tmp1, low_limit);\n+      __ blt(cnt, tmp1, small);\n+      __ zero_dcache_blocks(base, cnt, tmp1, tmp2);\n+      __ bind(small);\n+    }\n+\n@@ -683,2 +694,1 @@\n-      __ sub(cnt, cnt, MacroAssembler::zero_words_block_size);\n-      __ bltz(cnt, done);\n+      __ mv(tmp1, MacroAssembler::zero_words_block_size);\n@@ -686,0 +696,1 @@\n+      __ blt(cnt, tmp1, done);\n@@ -687,2 +698,1 @@\n-        __ sd(zr, Address(base, 0));\n-        __ add(base, base, 8);\n+        __ sd(zr, Address(base, i << 3));\n@@ -690,0 +700,1 @@\n+      __ add(base, base, MacroAssembler::zero_words_block_size << 3);\n@@ -691,1 +702,1 @@\n-      __ bgez(cnt, loop);\n+      __ j(loop);\n@@ -693,1 +704,0 @@\n-      __ add(cnt, cnt, MacroAssembler::zero_words_block_size);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,0 +39,44 @@\n+  \/\/ https:\/\/github.com\/riscv\/riscv-profiles\/blob\/main\/profiles.adoc#rva20-profiles\n+  if (UseRVA20U64) {\n+    if (FLAG_IS_DEFAULT(UseRVC)) {\n+      FLAG_SET_DEFAULT(UseRVC, true);\n+    }\n+  }\n+  \/\/ https:\/\/github.com\/riscv\/riscv-profiles\/blob\/main\/profiles.adoc#rva22-profiles\n+  if (UseRVA22U64) {\n+    if (FLAG_IS_DEFAULT(UseRVC)) {\n+      FLAG_SET_DEFAULT(UseRVC, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZba)) {\n+      FLAG_SET_DEFAULT(UseZba, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZbb)) {\n+      FLAG_SET_DEFAULT(UseZbb, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZic64b)) {\n+      FLAG_SET_DEFAULT(UseZic64b, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZicbom)) {\n+      FLAG_SET_DEFAULT(UseZicbom, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZicbop)) {\n+      FLAG_SET_DEFAULT(UseZicbop, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseZicboz)) {\n+      FLAG_SET_DEFAULT(UseZicboz, true);\n+    }\n+  }\n+\n+  if (UseZic64b) {\n+    if (CacheLineSize != 64) {\n+      assert(!FLAG_IS_DEFAULT(CacheLineSize), \"default cache line size should be 64 bytes\");\n+      warning(\"CacheLineSize is assumed to be 64 bytes because Zic64b is enabled\");\n+      FLAG_SET_DEFAULT(CacheLineSize, 64);\n+    }\n+  } else {\n+    if (!FLAG_IS_DEFAULT(CacheLineSize) && !is_power_of_2(CacheLineSize)) {\n+      warning(\"CacheLineSize must be a power of 2\");\n+      FLAG_SET_DEFAULT(CacheLineSize, DEFAULT_CACHE_LINE_SIZE);\n+    }\n+  }\n+\n@@ -130,0 +174,12 @@\n+  if (UseZicboz) {\n+    if (FLAG_IS_DEFAULT(UseBlockZeroing)) {\n+      FLAG_SET_DEFAULT(UseBlockZeroing, true);\n+    }\n+    if (FLAG_IS_DEFAULT(BlockZeroingLowLimit)) {\n+      FLAG_SET_DEFAULT(BlockZeroingLowLimit, CacheLineSize);\n+    }\n+  } else if (UseBlockZeroing) {\n+    warning(\"Zicboz is not available on this CPU\");\n+    FLAG_SET_DEFAULT(UseBlockZeroing, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"}]}