{"files":[{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Test to verify GetObjectSize does not overflow on a 600M element int[]\n+ *\n+ * @test\n+ * @bug 8027230\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.instrument\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @requires vm.bits == 64\n+ * @requires vm.jvmti\n+ * @requires os.maxMemory > 6G\n+ * @build GetObjectSizeOverflowAgent\n+ * @run driver ClassFileInstaller GetObjectSizeOverflowAgent\n+ * @run main GetObjectSizeOverflow\n+ *\/\n+\n+import java.io.PrintWriter;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+public class GetObjectSizeOverflow {\n+    public static void main(String[] args) throws Exception  {\n+\n+        PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n+        pw.println(\"Premain-Class: GetObjectSizeOverflowAgent\");\n+        pw.close();\n+\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jar\"), \"cmf\", \"MANIFEST.MF\", \"agent.jar\", \"GetObjectSizeOverflowAgent.class\"});\n+        pb.start().waitFor();\n+\n+        ProcessBuilder pt = ProcessTools.createTestJvm(\"-Xmx4000m\", \"-javaagent:agent.jar\",  \"GetObjectSizeOverflowAgent\");\n+        OutputAnalyzer output = new OutputAnalyzer(pt.start());\n+\n+        output.stdoutShouldContain(\"GetObjectSizeOverflow passed\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/resourcehogs\/serviceability\/jvmti\/GetObjectSizeOverflow.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/resourcehogs\/serviceability\/jvmti\/GetObjectSizeOverflowAgent.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetObjectSizeOverflowAgent.java","status":"renamed"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * Test to verify GetObjectSize does not overflow on a 600M element int[]\n- *\n- * @test\n- * @bug 8027230\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.compiler\n- *          java.instrument\n- *          java.management\n- *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n- * @requires vm.bits == 64\n- * @requires vm.jvmti\n- * @build GetObjectSizeOverflowAgent\n- * @run driver ClassFileInstaller GetObjectSizeOverflowAgent\n- * @run main GetObjectSizeOverflow\n- *\/\n-\n-import java.io.PrintWriter;\n-\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jtreg.SkippedException;\n-\n-public class GetObjectSizeOverflow {\n-    public static void main(String[] args) throws Exception  {\n-\n-        PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n-        pw.println(\"Premain-Class: GetObjectSizeOverflowAgent\");\n-        pw.close();\n-\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jar\"), \"cmf\", \"MANIFEST.MF\", \"agent.jar\", \"GetObjectSizeOverflowAgent.class\"});\n-        pb.start().waitFor();\n-\n-        ProcessBuilder pt = ProcessTools.createTestJvm(\"-Xmx4000m\", \"-javaagent:agent.jar\",  \"GetObjectSizeOverflowAgent\");\n-        OutputAnalyzer output = new OutputAnalyzer(pt.start());\n-\n-        if (output.getStdout().contains(\"Could not reserve enough space\") || output.getStderr().contains(\"java.lang.OutOfMemoryError\")) {\n-            System.out.println(\"stdout: \" + output.getStdout());\n-            System.out.println(\"stderr: \" + output.getStderr());\n-            throw new SkippedException(\"Test could not reserve or allocate enough space\");\n-        }\n-\n-        output.stdoutShouldContain(\"GetObjectSizeOverflow passed\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetObjectSizeOverflow.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}