{"files":[{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8291974\n+ * @summary     PrivateCredentialPermission should not use local variable to enable debugging\n+ *              implementation-dependent class\n+ * @run main\/othervm\/policy=Serial.policy Serial2\n+ *\/\n+\n+import javax.security.auth.*;\n+import java.io.*;\n+import java.util.*;\n+\n+public class Serial2 implements java.io.Serializable {\n+\n+    \/*\n+     * Base64 encoding of Serialized PrivateCredentialPermission object\n+     * before bug fix for JDK-8291974.\n+     *\/\n+    static String before = \"rO0ABXNyAC9qYXZheC5zZWN1cml0eS5hdXRoLlByaXZhdGVDcmVkZW50aWFsUGVybWlzc2lvbklV3Hd7UH9MAgADWgAHdGVzdGluZ0wAD2NyZWRlbnRpYWxDbGFzc3QAEkxqYXZhL2xhbmcvU3RyaW5nO0wACnByaW5jaXBhbHN0AA9MamF2YS91dGlsL1NldDt4cgAYamF2YS5zZWN1cml0eS5QZXJtaXNzaW9uscbhPyhXUX4CAAFMAARuYW1lcQB+AAF4cHQAGWNyZWQxIHBjMSAicG4xIiBwYzIgInBuMiIAdAAFY3JlZDFw\";\n+\n+    public static void main(String[] args) {\n+\n+        try {\n+            \/\/ Decode Base64 string and turn it into an input stream.\n+            byte[] decoded = Base64.getDecoder().decode(before);\n+            InputStream is = new ByteArrayInputStream(decoded);\n+\n+            \/\/ Deserialize input stream and create a new object.\n+            ObjectInputStream ois = new ObjectInputStream(is);\n+            PrivateCredentialPermission pcp2 =\n+                    (PrivateCredentialPermission)ois.readObject();\n+            is.close();\n+\n+            PrivateCredentialPermission pcp = new PrivateCredentialPermission\n+                        (\"cred1 pc1 \\\"pn1\\\" pc2 \\\"pn2\\\"\", \"read\");\n+\n+            \/*\n+             * Compare deserialized object with current object.\n+             * This should always succeed. What is important is\n+             * that we get here without a deserialization exception.\n+             *\/\n+            if (!pcp.equals(pcp2) || !pcp2.equals(pcp)) {\n+                throw new SecurityException(\"Serial2 test failed: \" +\n+                                        \"EQUALS TEST FAILED\");\n+            }\n+\n+            System.out.println(\"Serial2 test succeeded\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw new SecurityException(\"Serial test failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/Serial2.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}