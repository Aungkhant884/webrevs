{"files":[{"patch":"@@ -42,1 +42,1 @@\n-  } else if (inst->is_lui()) {\n+  } else if (NativeInstruction::is_lui_at((address)inst)) {\n@@ -85,1 +85,1 @@\n-  if (inst->is_call()) {\n+  if (inst->is_jal()) {\n@@ -93,10 +93,4 @@\n-  } else if (inst->is_lui()) {\n-    NativeInstruction* nextInst;\n-    unsigned offset = 0;\n-    do {\n-      offset += 1;\n-      nextInst = nativeInstruction_at(pc + NativeInstruction::instruction_size * offset);\n-    } while (!nextInst->is_call());\n-    NativeCall* call = nativeCall_at(pc + NativeInstruction::instruction_size * offset);\n-    call->set_destination((address) foreign_call_destination);\n-    _instructions->relocate(call->instruction_address(), runtime_call_Relocation::spec());\n+  } else if (inst->is_call() || NativeInstruction::is_lui_at((address)inst)) {\n+    \/\/ jalr, lui + jalr;\n+    MacroAssembler::pd_patch_instruction_size((address)inst,\n+                                              (address)foreign_call_destination);\n","filename":"src\/hotspot\/cpu\/riscv\/jvmciCodeInstaller_riscv.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-  bool is_lui()                             const { return is_lui_at(addr_at(0));         }\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}