{"files":[{"patch":"@@ -25,0 +25,3 @@\n+#include \"precompiled.hpp\"\n+#include \"asm\/macroAssembler.hpp\"\n+#include \"jvmci\/jvmci.hpp\"\n@@ -31,0 +34,1 @@\n+#include \"runtime\/jniHandles.hpp\"\n@@ -41,9 +45,1 @@\n-    return pc_offset + NativeMovConstReg::instruction_size;\n-  } else if (NativeInstruction::is_lui_at((address)inst)) {\n-    NativeInstruction* nextInst;\n-    unsigned offset = 0;\n-    do {\n-      offset += 1;\n-      nextInst = nativeInstruction_at(pc + NativeInstruction::instruction_size * offset);\n-    } while (!nextInst->is_call());\n-    return pc_offset + NativeInstruction::instruction_size * (offset + 1);\n+    return pc_offset + NativeMovConstReg::movptr_instruction_size;\n@@ -58,0 +54,1 @@\n+  MacroAssembler::patch_oop(pc, cast_from_oop<address>(obj()));\n@@ -67,0 +64,1 @@\n+    MacroAssembler::pd_patch_instruction_size(pc, (address) (long) narrowOop);\n@@ -93,4 +91,4 @@\n-  } else if (inst->is_call() || NativeInstruction::is_lui_at((address)inst)) {\n-    \/\/ jalr, lui + jalr;\n-    MacroAssembler::pd_patch_instruction_size((address)inst,\n-                                              (address)foreign_call_destination);\n+  } else if (inst->is_movptr()) {\n+    NativeMovConstReg* movptr = nativeMovConstReg_at(pc);\n+    movptr->set_data((intptr_t) foreign_call_destination);\n+    _instructions->relocate(movptr->instruction_address(), runtime_call_Relocation::spec());\n@@ -120,0 +118,4 @@\n+    jint vectorRegisterNumber = floatRegisterNumber - FloatRegisterImpl::number_of_registers;\n+    if (vectorRegisterNumber >= 0 && vectorRegisterNumber - VectorRegisterImpl::number_of_registers) {\n+      return as_VectorRegister(vectorRegisterNumber)->as_VMReg();\n+    }\n@@ -125,1 +127,1 @@\n-  return !hotspotRegister->is_FloatRegister();\n+  return !(hotspotRegister->is_FloatRegister() || hotspotRegister->is_VectorRegister());\n","filename":"src\/hotspot\/cpu\/riscv\/jvmciCodeInstaller_riscv.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+#if INCLUDE_JVMCI\n+#include \"jvmci\/jvmciJavaClasses.hpp\"\n+#endif\n@@ -213,0 +216,3 @@\n+#if !INCLUDE_JVMCI\n+  assert(!_save_vectors, \"vectors are generated only by C2 and JVMCI\");\n+#endif\n@@ -512,0 +518,12 @@\n+#if INCLUDE_JVMCI\n+  if (EnableJVMCI) {\n+    \/\/ check if this call should be routed towards a specific entry point\n+    __ ld(t0, Address(xthread, in_bytes(JavaThread::jvmci_alternate_call_target_offset())));\n+    Label no_alternative_target;\n+    __ beqz(t0, no_alternative_target);\n+    __ mv(t1, t0);\n+    __ sd(zr, Address(xthread, in_bytes(JavaThread::jvmci_alternate_call_target_offset())));\n+    __ bind(no_alternative_target);\n+  }\n+#endif \/\/ INCLUDE_JVMCI\n+\n@@ -1891,0 +1909,5 @@\n+#if INCLUDE_JVMCI\n+  if (EnableJVMCI) {\n+    pad += 512; \/\/ Increase the buffer size when compiling for JVMCI\n+  }\n+#endif\n@@ -1942,0 +1965,6 @@\n+#if INCLUDE_JVMCI && !defined(COMPILER1)\n+  if (EnableJVMCI && UseJVMCICompiler) {\n+    \/\/ JVMCI does not use this kind of deoptimization\n+    __ should_not_reach_here();\n+  }\n+#endif\n@@ -1952,0 +1981,38 @@\n+#if INCLUDE_JVMCI\n+  Label after_fetch_unroll_info_call;\n+  int implicit_exception_uncommon_trap_offset = 0;\n+  int uncommon_trap_offset = 0;\n+\n+  if (EnableJVMCI) {\n+    implicit_exception_uncommon_trap_offset = __ pc() - start;\n+\n+    __ ld(ra, Address(xthread, in_bytes(JavaThread::jvmci_implicit_exception_pc_offset())));\n+    __ sd(zr, Address(xthread, in_bytes(JavaThread::jvmci_implicit_exception_pc_offset())));\n+\n+    uncommon_trap_offset = __ pc() - start;\n+\n+    \/\/ Save everything in sight.\n+    reg_saver.save_live_registers(masm, 0, &frame_size_in_words);\n+    \/\/ fetch_unroll_info needs to call last_java_frame()\n+    Label retaddr;\n+    __ set_last_Java_frame(sp, noreg, retaddr, t0);\n+\n+    __ lwu(c_rarg1, Address(xthread, in_bytes(JavaThread::pending_deoptimization_offset())));\n+    __ mvw(t0, -1);\n+    __ sw(t0, Address(xthread, in_bytes(JavaThread::pending_deoptimization_offset())));\n+\n+    __ mvw(xcpool, (int32_t)Deoptimization::Unpack_reexecute);\n+    __ mv(c_rarg0, xthread);\n+    __ orrw(c_rarg2, zr, xcpool); \/\/ exec mode\n+    int32_t offset = 0;\n+    __ la_patchable(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::uncommon_trap)), offset);\n+    __ jalr(x1, t0, offset);\n+    __ bind(retaddr);\n+    oop_maps->add_gc_map( __ pc()-start, map->deep_copy());\n+\n+    __ reset_last_Java_frame(false);\n+\n+    __ j(after_fetch_unroll_info_call);\n+  } \/\/ EnableJVMCI\n+#endif \/\/ INCLUDE_JVMCI\n+\n@@ -2045,0 +2112,6 @@\n+#if INCLUDE_JVMCI\n+  if (EnableJVMCI) {\n+    __ bind(after_fetch_unroll_info_call);\n+  }\n+#endif\n+\n@@ -2200,0 +2273,6 @@\n+#if INCLUDE_JVMCI\n+  if (EnableJVMCI) {\n+    _deopt_blob->set_uncommon_trap_offset(uncommon_trap_offset);\n+    _deopt_blob->set_implicit_exception_uncommon_trap_offset(implicit_exception_uncommon_trap_offset);\n+  }\n+#endif\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":79,"deletions":0,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-  static int trap_request_index(int trap_request) {\n+  static int RISCV64_ONLY(__attribute__ ((noinline))) trap_request_index(int trap_request) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,2 +102,1 @@\n-        boolean canUsePlatformRegister = config.linuxOs;\n-        return new RISCV64HotSpotRegisterConfig(target, config.useCompressedOops, canUsePlatformRegister);\n+        return new RISCV64HotSpotRegisterConfig(target, config.useCompressedOops, config.linuxOs);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.riscv64\/src\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import static jdk.vm.ci.riscv64.RISCV64.x5;\n+import static jdk.vm.ci.riscv64.RISCV64.x6;\n+import static jdk.vm.ci.riscv64.RISCV64.x7;\n@@ -39,0 +42,1 @@\n+import static jdk.vm.ci.riscv64.RISCV64.x23;\n@@ -55,1 +59,0 @@\n-import jdk.vm.ci.riscv64.RISCV64.CPUFeature;\n@@ -112,1 +115,1 @@\n-    private final RegisterArray javaGeneralParameterRegisters = new RegisterArray(x10, x11, x12, x13, x14, x15, x16, x17);\n+    private final RegisterArray javaGeneralParameterRegisters = new RegisterArray(x11, x12, x13, x14, x15, x16, x17, x10);\n@@ -121,0 +124,3 @@\n+    public static final Register t0 = x5;\n+    public static final Register t1 = x6;\n+    public static final Register t2 = x7;\n@@ -122,0 +128,2 @@\n+    public static final Register threadRegister = x23;\n+    public static final Register heapBaseRegister = x27;\n@@ -123,1 +131,1 @@\n-    private static final RegisterArray reservedRegisters = new RegisterArray(zero, ra, sp, gp, tp, fp);\n+    private static final RegisterArray reservedRegisters = new RegisterArray(zero, ra, sp, gp, tp, t0, t1, t2, fp);\n@@ -136,2 +144,3 @@\n-            assert !(reg.equals(zero) || reg.equals(ra) || reg.equals(sp) || reg.equals(gp) || reg.equals(tp) || reg.equals(fp));\n-            if (reserveForHeapBase && reg.equals(x27)) {\n+            assert !(reg.equals(zero) || reg.equals(ra) || reg.equals(sp) || reg.equals(gp) || reg.equals(tp) ||\n+                     reg.equals(t0) || reg.equals(t1) || reg.equals(t2) || reg.equals(fp));\n+            if (reserveForHeapBase && reg.equals(heapBaseRegister)) {\n@@ -151,0 +160,1 @@\n+        assert callerSaved.size() >= allocatable.size();\n@@ -241,0 +251,3 @@\n+                    } else if (currentGeneral < generalParameterRegisters.size()) {\n+                        Register register = generalParameterRegisters.get(currentGeneral++);\n+                        locations[i] = register.asValue(valueKindFactory.getValueKind(kind));\n@@ -283,1 +296,1 @@\n-        return x8;\n+        return x2;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.riscv64\/src\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotRegisterConfig.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n-public class RISCV64HotSpotVMConfig extends HotSpotVMConfigAccess {\n+\/**\n+ * Used to access native configuration details.\n+ *\n+ * All non-static, public fields in this class are so that they can be compiled as constants.\n+ *\/\n+class RISCV64HotSpotVMConfig extends HotSpotVMConfigAccess {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.riscv64\/src\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotVMConfig.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+\/**\n+ * Represents the RISCV64 architecture.\n+ *\/\n@@ -283,1 +286,1 @@\n-            return RISCV64Kind.V128_QWORD;\n+            return RISCV64Kind.V256_QWORD;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.riscv64\/src\/jdk\/vm\/ci\/riscv64\/RISCV64.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,2 +110,1 @@\n-            if (DEBUG) {\n-                String str = ((HotSpotCodeCacheProvider) codeCache).disassemble(installed);\n+            String str = ((HotSpotCodeCacheProvider) codeCache).disassemble(installed);\n@@ -113,0 +112,4 @@\n+\n+            if (DEBUG) {\n+                String str2 = ((HotSpotCodeCacheProvider) codeCache).disassemble(installed);\n+                System.out.println(str2);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInstallationTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import jdk.vm.ci.riscv64.RISCV64;\n-import jdk.vm.ci.riscv64.RISCV64Kind;\n@@ -45,0 +43,2 @@\n+import jdk.vm.ci.riscv64.RISCV64;\n+import jdk.vm.ci.riscv64.RISCV64Kind;\n@@ -48,2 +48,2 @@\n-    private static final Register scratchRegister = RISCV64.x28;\n-    private static final Register doubleScratch = RISCV64.f28;\n+    private static final Register scratchRegister = RISCV64.x5;\n+    private static final Register doubleScratch = RISCV64.f5;\n@@ -56,2 +56,15 @@\n-              RISCV64.x0, RISCV64.x1, RISCV64.x2, RISCV64.x3,\n-              RISCV64.x4, RISCV64.x5, RISCV64.x6, RISCV64.x7);\n+              RISCV64.x10, RISCV64.x11, RISCV64.x12, RISCV64.x13,\n+              RISCV64.x14, RISCV64.x15, RISCV64.x16, RISCV64.x17);\n+    }\n+\n+    private static int f(int val, int msb, int lsb) {\n+        int nbits = msb - lsb + 1;\n+        assert val >= 0;\n+        assert val < (1 << nbits);\n+        assert msb >= lsb;\n+        return val << lsb;\n+    }\n+\n+    private static int f(Register r, int msb, int lsb) {\n+        assert msb - lsb == 4;\n+        return f(r.encoding, msb, lsb);\n@@ -61,1 +74,1 @@\n-        return (imm << 20) | (rs1 << 15) | (funct << 12) | (rd << 7) | opcode;\n+        return f(imm, 31, 20) | f(rs1, 19, 15) | f(funct, 14, 12) | f(rd, 11, 7) | f(opcode, 6, 0);\n@@ -65,1 +78,1 @@\n-        return (funct7 << 25) | (rs2 << 20) | (rs1 << 15) | (funct3 << 12) | (rd << 7) | opcode;\n+        return f(funct7, 31, 25) | f(rs2, 24, 20) | f(rs1, 19, 15) | f(funct3, 14, 12) | f(rd, 11, 7) | f(opcode, 6, 0);\n@@ -72,1 +85,1 @@\n-    private void emitAdd(Register Rd, Register Rn, Register Rm) {\n+    private void emitAdd(Register Rd, Register Rm, Register Rn) {\n@@ -79,1 +92,1 @@\n-        code.emitInt(instructionImmediate(imm12, Rn.encoding, 0b000, Rd.encoding, 0b0010011));\n+        code.emitInt(instructionImmediate(imm12 & 0xfff, Rn.encoding, 0b000, Rd.encoding, 0b0010011));\n@@ -84,1 +97,1 @@\n-        code.emitInt(instructionImmediate(imm12, Rn.encoding, 0b000, Rd.encoding, 0b0011011));\n+        code.emitInt(instructionImmediate(imm12 & 0xfff, Rn.encoding, 0b000, Rd.encoding, 0b0011011));\n@@ -89,1 +102,1 @@\n-        code.emitInt(instructionImmediate(-imm12, Rn.encoding, 0b000, Rd.encoding, 0b0010011));\n+        emitAdd(Rd, Rn, -imm12);;\n@@ -92,1 +105,1 @@\n-    private void emitSub(Register Rd, Register Rn, Register Rm) {\n+    private void emitSub(Register Rd, Register Rm, Register Rn) {\n@@ -99,1 +112,1 @@\n-        code.emitInt(instructionRegister(0b0000000, Rn.encoding, 0, 0b000, Rd.encoding, 0b0110011));\n+        code.emitInt(instructionRegister(0b0000000, 0, Rn.encoding, 0b000, Rd.encoding, 0b0110011));\n@@ -104,1 +117,6 @@\n-        code.emitInt(instructionImmediate(shift, Rn.encoding, 0b001, Rd.encoding, 0b0010011));\n+        code.emitInt(instructionImmediate(shift & 0x3f, Rn.encoding, 0b001, Rd.encoding, 0b0010011));\n+    }\n+\n+    private void emitShiftRight(Register Rd, Register Rn, int shift) {\n+        \/\/ SRLI\n+        code.emitInt(instructionImmediate(shift & 0x3f, Rn.encoding, 0b101, Rd.encoding, 0b0010011));\n@@ -109,1 +127,1 @@\n-        code.emitInt((imm20 << 12) | (Rd.encoding << 7) | 0b0110111);\n+        code.emitInt(f(imm20, 31, 12) | f(Rd, 11, 7) | f(0b0110111, 6, 0));\n@@ -114,1 +132,1 @@\n-        code.emitInt((imm20 << 12) | (Rd.encoding << 7) | 0b0010111);\n+        code.emitInt(f(imm20, 31, 12) | f(Rd, 11, 7) | f(0b0010111, 6, 0));\n@@ -118,2 +136,6 @@\n-        emitLui(Rd, (imm32 >> 12) & 0xfffff);\n-        emitAddW(Rd, Rd, imm32 & 0xfff);\n+        long upper = imm32, lower = imm32;\n+        lower = (lower << 52) >> 52;\n+        upper -= lower;\n+        upper = (int) upper;\n+        emitLui(Rd, (int) (upper >> 12));\n+        emitAddW(Rd, Rd, (int) lower);\n@@ -122,1 +144,1 @@\n-    private void emitLoadRegister(Register Rt, RISCV64Kind kind, Register Rn, int offset) {\n+    private void emitLoadRegister(Register Rd, RISCV64Kind kind, Register Rn, int offset) {\n@@ -136,1 +158,1 @@\n-        code.emitInt((offset << 20) | (Rt.encoding << 15) | (size << 12) | (Rn.encoding << 7) | opc);\n+        code.emitInt(f(offset, 31, 20) | f(Rn, 19, 15) | f(size, 14, 12) | f(Rd, 11, 7) | f(opc, 6, 0));\n@@ -139,1 +161,1 @@\n-    private void emitStoreRegister(Register Rt, RISCV64Kind kind, Register Rn, int offset) {\n+    private void emitStoreRegister(Register Rd, RISCV64Kind kind, Register Rn, int offset) {\n@@ -153,1 +175,1 @@\n-        code.emitInt(((offset >> 5) << 25) | (Rt.encoding << 20) | (Rn.encoding << 15) | (size << 12) | ((offset & 0x1f) << 7) | opc);\n+        code.emitInt(f((offset >> 5), 31, 25) | f(Rd, 24, 20) | f(Rn, 19, 15) | f(size, 14, 12) | f((offset & 0x1f), 11, 7) | f(opc, 6, 0));\n@@ -157,1 +179,1 @@\n-        code.emitInt(instructionImmediate(imm, Rn.encoding, 0b000, Rd.encoding, 0b1100111));\n+        code.emitInt(instructionImmediate(imm & 0xfff, Rn.encoding, 0b000, Rd.encoding, 0b1100111));\n@@ -173,1 +195,1 @@\n-        if (size > -4096 && size < 0) {\n+        if (size > -2048 && size < 0) {\n@@ -177,1 +199,1 @@\n-        } else if (size < 4096) {\n+        } else if (size < 2048) {\n@@ -191,4 +213,5 @@\n-        emitNop();\n-        emitGrowStack(32);\n-        emitStoreRegister(RISCV64.x8, RISCV64Kind.QWORD, RISCV64.x2, 32);\n-        emitMv(RISCV64.x8, RISCV64.x2);\n+        emitAdd(RISCV64.x2, RISCV64.x2, -32); \/\/ addi sp sp -32\n+        emitStoreRegister(RISCV64.x8, RISCV64Kind.QWORD, RISCV64.x2, 0); \/\/ sd x8 sp(0)\n+        emitStoreRegister(RISCV64.x1, RISCV64Kind.QWORD, RISCV64.x2, 8); \/\/ sd x1 sp(8)\n+        emitMv(RISCV64.x8, RISCV64.x2); \/\/ mv x8, x2\n+\n@@ -201,1 +224,1 @@\n-        recordCall(new HotSpotForeignCallTarget(config.handleDeoptStub), 4*4, true, null);\n+        recordCall(new HotSpotForeignCallTarget(config.handleDeoptStub), 6*4, true, null);\n@@ -223,2 +246,2 @@\n-        emitLoadPointer48(scratchRegister, addr);\n-        emitJalr(scratchRegister, RISCV64.x1, 0);\n+        emitMovPtrHelper(scratchRegister, addr);\n+        emitJalr(RISCV64.x1, scratchRegister, (int) (addr & 0x3f));\n@@ -258,1 +281,10 @@\n-    private void emitLoadPointer48(Register ret, long addr) {\n+    private void emitLoad32(Register ret, int addr) {\n+        long upper = addr, lower = addr;\n+        lower = (lower << 52) >> 52;\n+        upper -= lower;\n+        upper = (int) upper;\n+        emitLui(ret, (int) (upper >> 12));\n+        emitAdd(ret, ret, (int) lower);\n+    }\n+\n+    private void emitMovPtrHelper(Register ret, long addr) {\n@@ -261,5 +293,4 @@\n-        emitLoadImmediate(ret, (int) ((addr >> 16) & 0xffffffff));\n-        emitShiftLeft(ret, ret, 12);\n-        emitAdd(ret, ret, (int) ((addr >> 4) & 0xfff));\n-        emitShiftLeft(ret, ret, 4);\n-        emitAdd(ret, ret, (int) (addr & 0xf));\n+        emitLoad32(ret, (int) (addr >> 17));\n+        emitShiftLeft(ret, ret, 11);\n+        emitAdd(ret, ret, (int) ((addr >> 6) & 0x7ff));\n+        emitShiftLeft(ret, ret, 6);\n@@ -268,3 +299,10 @@\n-    private void emitLoadPointer32(Register ret, long addr) {\n-        emitLui(ret, (int) ((addr >> 12) & 0xfffff));\n-        emitAddW(ret, ret, (int) (addr & 0xfff));\n+    private void emitLoadPointer32(Register ret, int addr) {\n+        emitLoadImmediate(ret, addr);\n+        \/\/ Lui sign-extends the value, which we do not want\n+        emitShiftLeft(ret, ret, 32);\n+        emitShiftRight(ret, ret, 32);\n+    }\n+\n+    private void emitLoadPointer48(Register ret, long addr) {\n+        emitMovPtrHelper(ret, addr);\n+        emitAdd(ret, ret, (int) (addr & 0x3f));\n@@ -289,1 +327,1 @@\n-        emitLoadRegister(ret, RISCV64Kind.QWORD, b, offset);\n+        emitLoadRegister(ret, RISCV64Kind.QWORD, b, offset & 0xfff);\n@@ -298,3 +336,5 @@\n-        emitAuipc(ret, 0xdead >> 12);\n-        emitAdd(ret, ret, 0xdead & 0xfff);\n-        emitLoadRegister(ret, RISCV64Kind.DWORD, ret, 0);\n+        emitAuipc(ret, 0xdead >> 11);\n+        emitLoadRegister(ret, RISCV64Kind.DWORD, ret, 0xdead & 0x7ff);\n+        \/\/ The value is sign-extendsed, which we do not want\n+        emitShiftLeft(ret, ret, 32);\n+        emitShiftRight(ret, ret, 32);\n@@ -309,3 +349,2 @@\n-        emitAuipc(ret, 0xdead >> 12);\n-        emitAdd(ret, ret, 0xdead & 0xfff);\n-        emitLoadRegister(ret, RISCV64Kind.QWORD, ret, 0);\n+        emitAuipc(ret, 0xdead >> 11);\n+        emitLoadRegister(ret, RISCV64Kind.QWORD, ret, 0xdead & 0x7ff);\n@@ -321,4 +360,7 @@\n-        emitAuipc(scratchRegister, 0xdead >> 12);\n-        emitAdd(scratchRegister, scratchRegister, 0xdead & 0xfff);\n-        emitLoadRegister(scratchRegister, RISCV64Kind.QWORD, scratchRegister, 0);\n-        emitFmv(reg, RISCV64Kind.DOUBLE, scratchRegister);\n+        emitAuipc(scratchRegister, 0xdead >> 11);\n+        emitLoadRegister(scratchRegister, RISCV64Kind.QWORD, scratchRegister, 0xdead & 0x7ff);\n+        if (reg.getRegisterCategory().equals(RISCV64.FP)) {\n+            emitFmv(reg, RISCV64Kind.DOUBLE, scratchRegister);\n+        } else {\n+            emitMv(reg, scratchRegister);\n+        }\n@@ -334,4 +376,7 @@\n-        emitAuipc(scratchRegister, 0xdead >> 12);\n-        emitAdd(scratchRegister, scratchRegister, 0xdead & 0xfff);\n-        emitLoadRegister(scratchRegister, RISCV64Kind.DWORD, scratchRegister, 0);\n-        emitFmv(reg, RISCV64Kind.SINGLE, scratchRegister);\n+        emitAuipc(scratchRegister, 0xdead >> 11);\n+        emitLoadRegister(scratchRegister, RISCV64Kind.DWORD, scratchRegister, 0xdead & 0x7ff);\n+        if (reg.getRegisterCategory().equals(RISCV64.FP)) {\n+            emitFmv(reg, RISCV64Kind.SINGLE, scratchRegister);\n+        } else {\n+            emitMv(reg, scratchRegister);\n+        }\n@@ -348,1 +393,3 @@\n-        emitLoadImmediate(reg, (int) ((c >> 32) & 0xffffffff));\n+        long lower = c & 0xffffffff;\n+        lower = lower - ((lower << 44) >> 44);\n+        emitLoad32(reg, (int) ((c >> 32) & 0xffffffff));\n@@ -350,1 +397,1 @@\n-        emitAdd(reg, reg, (int) ((c >> 20) & 0xfff));\n+        emitAdd(reg, reg, (int) ((lower >> 20) & 0xfff));\n@@ -352,1 +399,1 @@\n-        emitAdd(reg, reg, (int) ((c >> 8) & 0xfff));\n+        emitAdd(reg, reg, (int) ((c << 44) >> 52));\n@@ -406,4 +453,5 @@\n-        emitMv(RISCV64.x2, RISCV64.x8);                                           \/\/ mov sp, x29\n-        emitLoadRegister(RISCV64.x2, RISCV64Kind.QWORD, RISCV64.x8, 32);   \/\/ ld x8 32(sp)\n-        emitLoadRegister(RISCV64.x2, RISCV64Kind.QWORD, RISCV64.x1, 48);   \/\/ ld x1 48(sp)\n-        emitJalr(RISCV64.x0, RISCV64.x1, 0);                                       \/\/ ret\n+        emitMv(RISCV64.x2, RISCV64.x8);  \/\/ mv sp, x8\n+        emitLoadRegister(RISCV64.x8, RISCV64Kind.QWORD, RISCV64.x2, 0);  \/\/ ld x8 0(sp)\n+        emitLoadRegister(RISCV64.x1, RISCV64Kind.QWORD, RISCV64.x2, 8);  \/\/ ld x1 8(sp)\n+        emitAdd(RISCV64.x2, RISCV64.x2, 32);  \/\/ addi sp sp 32\n+        emitJalr(RISCV64.x0, RISCV64.x1, 0);  \/\/ ret\n@@ -415,4 +463,5 @@\n-        emitMv(RISCV64.x2, RISCV64.x8);                                          \/\/ mov sp, x29\n-        emitLoadRegister(RISCV64.x2, RISCV64Kind.QWORD, RISCV64.x8, 32);  \/\/ ld x8 32(sp)\n-        emitLoadRegister(RISCV64.x2, RISCV64Kind.QWORD, RISCV64.x1, 48);  \/\/ ld x1 48(sp)\n-        emitJalr(RISCV64.x0, RISCV64.x1, 0);                                      \/\/ ret\n+        emitMv(RISCV64.x2, RISCV64.x8);  \/\/ mv sp, x8\n+        emitLoadRegister(RISCV64.x8, RISCV64Kind.QWORD, RISCV64.x2, 0);  \/\/ ld x8 0(sp)\n+        emitLoadRegister(RISCV64.x1, RISCV64Kind.QWORD, RISCV64.x2, 8);  \/\/ ld x1 8(sp)\n+        emitAdd(RISCV64.x2, RISCV64.x2, 32);  \/\/ addi sp sp 32\n+        emitJalr(RISCV64.x0, RISCV64.x1, 0);  \/\/ ret\n@@ -451,1 +500,1 @@\n-        emitStoreRegister(a, RISCV64Kind.DOUBLE, RISCV64.x2, slot.getOffset(frameSize));\n+        emitStoreRegister(a, RISCV64Kind.DOUBLE, RISCV64.x2, slot.getOffset(frameSize) & 0xfff);\n@@ -462,1 +511,1 @@\n-        emitStoreRegister(a, RISCV64Kind.SINGLE, RISCV64.x2, slot.getOffset(frameSize));\n+        emitStoreRegister(a, RISCV64Kind.SINGLE, RISCV64.x2, slot.getOffset(frameSize) & 0xfff);\n@@ -473,1 +522,1 @@\n-        emitStoreRegister(a, RISCV64Kind.DWORD, RISCV64.x2, slot.getOffset(frameSize));\n+        emitStoreRegister(a, RISCV64Kind.DWORD, RISCV64.x2, slot.getOffset(frameSize) & 0xfff);\n@@ -484,1 +533,1 @@\n-        emitStoreRegister(a, RISCV64Kind.QWORD, RISCV64.x2, slot.getOffset(frameSize));\n+        emitStoreRegister(a, RISCV64Kind.QWORD, RISCV64.x2, slot.getOffset(frameSize) & 0xfff);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/riscv64\/RISCV64TestAssembler.java","additions":121,"deletions":72,"binary":false,"changes":193,"status":"modified"}]}