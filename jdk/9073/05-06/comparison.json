{"files":[{"patch":"@@ -1723,0 +1723,41 @@\n+  initialize_memory_edges(C, igvn);\n+\n+  this->raise_bottom_type(ram_t);\n+  igvn->set_type(this, ram_t);\n+\n+  C->add_macro_node(this);\n+}\n+\n+void ReducedAllocationMergeNode::initialize_memory_edges(Compile* C, PhaseIterGVN* igvn) {\n+  Node* region            = this->in(0);\n+  ciInstanceKlass* iklass = _klass->as_instance_klass();\n+  int nfields             = iklass->nof_nonstatic_fields();\n+\n+  \/\/ Make sure we have an entry for each base+field combination\n+  register_offset_of_all_fields(NULL);\n+\n+  \/\/ Search for a memory edge matching base+field alias_index\n+  for (uint i = 1, matches = 0; i <= _number_of_bases; i++) {\n+    Node* base = this->in(i);\n+    const TypeOopPtr *base_t = igvn->type(base)->isa_oopptr();\n+\n+    if (base_t != NULL) {\n+      int base_offset = base_idx(base, 0);\n+\n+      for (int j = 0; j < nfields; j++) {\n+        ciField* field          = iklass->nonstatic_field_at(j);\n+        int offset              = field->offset();\n+        const TypeOopPtr *tinst = base_t->add_offset(offset)->isa_oopptr();\n+        const int alias_idx     = C->get_alias_index(tinst);\n+        const int fields_offset = field_idx(offset);\n+\n+        for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n+          Node* memory = region->fast_out(i);\n+          if (memory->is_Phi() && C->get_alias_index(memory->adr_type()) == alias_idx) {\n+            set_req(fields_offset + base_offset, memory);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n@@ -1724,3 +1765,2 @@\n-  Node* reg = phi->region();\n-  for (DUIterator_Fast imax, i = reg->fast_outs(imax); i < imax; i++) {\n-    Node* n = reg->fast_out(i);\n+  for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n+    Node* n = region->fast_out(i);\n@@ -1734,5 +1774,0 @@\n-\n-  this->raise_bottom_type(ram_t);\n-  igvn->set_type(this, ram_t);\n-\n-  C->add_macro_node(this);\n@@ -1753,1 +1788,1 @@\n-void ReducedAllocationMergeNode::register_offset(int offset, Node* memory, bool override) {\n+void ReducedAllocationMergeNode::register_offset(int offset, Node* memory) {\n@@ -1760,1 +1795,3 @@\n-      add_req(memory->is_Phi() && memory->in(0) == in(0) ? memory->in(b_idx) : memory);\n+      add_req( (memory != NULL && memory->is_Phi() && memory->in(0) == in(0)) ?\n+                    memory->in(b_idx) :\n+                    memory);\n@@ -1763,1 +1800,1 @@\n-  else if (override) {\n+  else {\n@@ -1767,1 +1804,5 @@\n-      set_req(fidx, memory->is_Phi() && memory->in(0) == in(0) ? memory->in(b_idx) : memory);\n+      if (in(fidx) == NULL) {\n+        set_req(fidx, (memory != NULL && memory->is_Phi() && memory->in(0) == in(0)) ?\n+                        memory->in(b_idx) :\n+                        memory);\n+      }\n@@ -1779,1 +1820,1 @@\n-  register_offset(offset, memory, \/*override*\/true);\n+  register_offset(offset, memory);\n@@ -1872,0 +1913,2 @@\n+  ttyLocker ttyl;\n+\n@@ -1883,0 +1926,1 @@\n+      tty->print(\"Load for value:\" ); input->dump();\n@@ -1903,0 +1947,2 @@\n+  tty->print(\"Value Phi:\" ); phi->dump();\n+\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":59,"deletions":13,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1143,0 +1143,1 @@\n+  void initialize_memory_edges(Compile* C, PhaseIterGVN* igvn);\n@@ -1145,1 +1146,1 @@\n-  void register_offset(int offset, Node* memory, bool override = false);\n+  void register_offset(int offset, Node* memory);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -465,1 +465,0 @@\n-        assert(n->as_Proj()->_con == TypeFunc::Parms, \"Should be proj from a call\");\n@@ -473,0 +472,1 @@\n+      case Op_LoadKlass:\n@@ -541,0 +541,13 @@\n+  \/\/ Found a Memory edge coming from the same Region as the Phi\n+  bool found_memory_edge = false;\n+\n+  \/\/ Is any of the users of the Phi a Call node?\n+  bool has_call_as_user = false;\n+\n+  \/\/ Ignoring any ConP#Null, is there any of the Phi inputs Non Scalar Replaceable?\n+  bool has_nonnull_nonsr_input = false;\n+\n+  \/\/ Ignoring ConP#Null inputs, are all the inputs to the Phi of the same Klass?\n+  bool mixed_klasses = false;\n+\n+\n@@ -554,1 +567,1 @@\n-    \/\/ come_from_allocate returns NULL if it the sources isn't an Allocate\n+    \/\/ come_from_allocate returns NULL if the source isn't an Allocate\n@@ -559,1 +572,3 @@\n-    has_noescape_allocate |= (input_ptn != NULL && input_ptn->scalar_replaceable());\n+    bool is_sr_input = (input_ptn != NULL && input_ptn->scalar_replaceable());\n+    has_nonnull_nonsr_input |= !is_sr_input;\n+    has_noescape_allocate |= is_sr_input;\n@@ -575,2 +590,1 @@\n-      NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Inputs aren't of the same instance klass.\", phi->_idx);)\n-      return false;\n+      mixed_klasses = true;\n@@ -578,0 +592,2 @@\n+\n+    klass = input_t->is_instptr()->instance_klass();\n@@ -587,0 +603,17 @@\n+  \/\/ Try to find a BOT memory Phi coming from same region\n+  Node* reg = phi->in(0);\n+  for (DUIterator_Fast imax, i = reg->fast_outs(imax); i < imax; i++) {\n+    Node* n = reg->fast_out(i);\n+    if (n->is_Phi() && n->bottom_type() == Type::MEMORY) {\n+      if (_compile->get_alias_index(n->adr_type()) == Compile::AliasIdxBot) {\n+        found_memory_edge = true;\n+        break;\n+      }\n+    }\n+  }\n+\n+  if (!found_memory_edge && has_nonnull_nonsr_input) {\n+    NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Did not find memory edge on Region.\", phi->_idx);)\n+    return false;\n+  }\n+\n@@ -602,4 +635,2 @@\n-    if (!use->is_AddP() && !use->is_CallStaticJava() && use->Opcode() != Op_SafePoint && !use->is_DecodeN()) {\n-      NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Has Allocate but cannot scalar replace it. One of the uses is: %d %s\", phi->_idx, use->_idx, use->Name());)\n-      return false;\n-    }\n+    if (use->is_CallStaticJava() || use->Opcode() == Op_SafePoint) {\n+      has_call_as_user = true;\n@@ -607,3 +638,4 @@\n-    if (use->is_CallStaticJava() && !use->as_CallStaticJava()->is_uncommon_trap()) {\n-      NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Has Allocate but cannot scalar replace it. CallStaticJava is not a trap.\", phi->_idx);)\n-      return false;\n+      if (use->is_CallStaticJava() && use->as_CallStaticJava()->is_uncommon_trap() == false) {\n+        NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Has Allocate but cannot scalar replace it. CallStaticJava is not a trap.\", phi->_idx);)\n+        return false;\n+      }\n@@ -611,2 +643,1 @@\n-\n-    if (use->is_AddP()) {\n+    else if (use->is_AddP()) {\n@@ -627,2 +658,1 @@\n-\n-    if (use->is_DecodeN()) {\n+    else if (use->is_DecodeN()) {\n@@ -647,0 +677,9 @@\n+    else {\n+      NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Has Allocate but cannot scalar replace it. One of the uses is: %d %s\", phi->_idx, use->_idx, use->Name());)\n+      return false;\n+    }\n+  }\n+\n+  if (mixed_klasses && has_call_as_user) {\n+    NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Will NOT try to reduce Phi %d. Inputs aren't of the same instance klass.\", phi->_idx);)\n+    return false;\n@@ -2395,0 +2434,5 @@\n+      \/\/ The CmpP\/N here might be using an allocation merge (Phi).\n+      \/\/ These cases will be handled during macro node elimination.\n+      if (n->in(1)->is_ReducedAllocationMerge() || n->in(2)->is_ReducedAllocationMerge()) {\n+        continue;\n+      }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":60,"deletions":16,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-    @IR(counts = { IRNode.ALLOC, \"2\" })\n+    @IR(failOn = { IRNode.ALLOC })\n@@ -327,0 +327,24 @@\n+    @Test\n+    @Arguments({ Argument.RANDOM_EACH, Argument.RANDOM_EACH, Argument.RANDOM_EACH, Argument.RANDOM_EACH, Argument.RANDOM_EACH, Argument.RANDOM_EACH })\n+    @IR(counts = { IRNode.ALLOC, \"2\" })\n+    int testSubclassesTrapping(boolean c1, boolean c2, int x, int y, int w, int z) {\n+        new A();\n+        Root s = new Home(x, y);\n+        new B();\n+\n+        if (c1) {\n+            new C();\n+            s = new Etc(\"Hello\");\n+            new D();\n+        }\n+        else {\n+            new E();\n+            s = new Usr(y, x, z);\n+            new F();\n+        }\n+\n+        dummy();\n+\n+        return s.a;\n+    }\n+\n@@ -757,0 +781,4 @@\n+    @DontCompile\n+    static void dummy() {\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/AllocationMergesTests.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 1)\n+public class AllocationsMerge {\n+    private int SIZE = 10 * 1024;\n+    private Random r = new Random(1024);\n+    private int opaque_value1 = 3342;\n+    private int opaque_value2 = 4342;\n+\n+    private Point[] points = new Point[SIZE];\n+    private boolean[] conds = new boolean[SIZE];\n+    private int[] xs = new int[SIZE];\n+    private int[] ys = new int[SIZE];\n+\n+    @Setup\n+    public void init() {\n+        for (int i=0; i<SIZE; i++) {\n+            points[i] = new Point(r.nextInt(), r.nextInt());\n+            conds[i] = i % 2 == 0;\n+            xs[i] = r.nextInt();\n+            ys[i] = r.nextInt();\n+        }\n+    }\n+\n+    static class Point {\n+        int x, y;\n+        Point(int x, int y) { this.x = x; this.y = y; }\n+    }\n+\n+    static class Picture {\n+        public int id;\n+        public Point position;\n+\n+        public Picture(int id, int x, int y) {\n+            this.id = id;\n+            this.position = new Point(x, y);\n+        }\n+\n+        public Picture(int id, Point p) {\n+            this.id = id;\n+            this.position = p;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void SimpleMerge(Blackhole bh) {\n+        for (int i=0; i<SIZE; i++) {\n+            bh.consume( run_SimpleMerge(conds[i], xs[i], ys[i]) );\n+        }\n+    }\n+\n+    private int run_SimpleMerge(boolean cond, int x, int y) {\n+        Point p = new Point(x, y);\n+\n+        if (cond)\n+            p = new Point(y, x);\n+\n+        return p.x * p.y;\n+    }\n+\n+    @Benchmark\n+    public void NestedObjectsObject(Blackhole bh) {\n+        for (int i=0; i<SIZE; i++) {\n+            bh.consume( run_NestedObjectsObject(conds[i], xs[i], ys[i]) );\n+        }\n+    }\n+\n+    private Point run_NestedObjectsObject(boolean cond, int x, int y) {\n+        Picture p = new Picture(x, x, y);\n+\n+        if (cond)\n+            p = new Picture(y, y, x);\n+\n+        return p.position;\n+    }\n+\n+    @Benchmark\n+    public void MergeAndIterative(Blackhole bh) {\n+        for (int i=0; i<SIZE; i++) {\n+            bh.consume( run_MergeAndIterative(conds[i], xs[i], ys[i]) );\n+        }\n+    }\n+\n+    private int run_MergeAndIterative(boolean cond, int x, int y) {\n+        Point p = new Point(x, y);\n+\n+        if (cond)\n+            p = new Point(y, x);\n+\n+        Picture pic = new Picture(2022, p);\n+\n+        return pic.position.x + pic.position.y;\n+    }\n+\n+    @Benchmark\n+    public void IfElseInLoop(Blackhole bh) {\n+        for (int i=0; i<SIZE; i++) {\n+            bh.consume( run_IfElseInLoop() );\n+        }\n+    }\n+\n+    private int run_IfElseInLoop() {\n+        int res = 0;\n+\n+        for (int i = this.opaque_value1; i < this.opaque_value2; i++) {\n+            Point obj = new Point(i, i);\n+\n+            if (i % 2 == 1)\n+                obj = new Point(i, i+1);\n+            else\n+                obj = new Point(i-1, i);\n+\n+            res += obj.x;\n+        }\n+\n+        return res;\n+    }\n+\n+    @Benchmark\n+    public void TrapAfterMerge(Blackhole bh) {\n+        for (int i=0; i<SIZE; i++) {\n+            bh.consume( run_TrapAfterMerge(conds[i], xs[i], ys[i]) );\n+        }\n+    }\n+\n+    private int run_TrapAfterMerge(boolean cond, int x, int y) {\n+        Point p = new Point(x, x);\n+\n+        if (cond)\n+            p = new Point(y, y);\n+\n+        for (int i=this.opaque_value1; i<this.opaque_value2; i+=x) {\n+            x++;\n+        }\n+\n+        return p.x + x;\n+    }\n+\n+    @Fork(jvmArgsPrepend = {\"-XX:+ReduceAllocationMerges\"})\n+    public static class WithAllocationsMergeEnabled extends AllocationsMerge { }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/AllocationsMerge.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"}]}