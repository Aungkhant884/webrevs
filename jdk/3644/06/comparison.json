{"files":[{"patch":"@@ -1,234 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * @LastModified: Sep 2017\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.org.apache.xalan.internal;\n-\n-import jdk.xml.internal.SecuritySupport;\n-\n-\/**\n- * Commonly used constants.\n- *\n- * @author Huizhe Wang, Oracle\n- *\n- *\/\n-public final class XalanConstants {\n-\n-    \/\/\n-    \/\/ Constants\n-    \/\/\n-    \/\/Xerces security manager\n-    public static final String SECURITY_MANAGER =\n-            \"http:\/\/apache.org\/xml\/properties\/security-manager\";\n-\n-    \/\/\n-    \/\/ Implementation limits: API properties\n-    \/\/\n-    \/** Oracle JAXP property prefix (\"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\"). *\/\n-    public static final String ORACLE_JAXP_PROPERTY_PREFIX =\n-        \"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\";\n-    \/**\n-     * JDK entity expansion limit; Note that the existing system property\n-     * \"entityExpansionLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_ENTITY_EXPANSION_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"entityExpansionLimit\";\n-\n-    \/**\n-     * JDK element attribute limit; Note that the existing system property\n-     * \"elementAttributeLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_ELEMENT_ATTRIBUTE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"elementAttributeLimit\";\n-\n-    \/**\n-     * JDK maxOccur limit; Note that the existing system property\n-     * \"maxOccurLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_MAX_OCCUR_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxOccurLimit\";\n-\n-    \/**\n-     * JDK total entity size limit\n-     *\/\n-    public static final String JDK_TOTAL_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"totalEntitySizeLimit\";\n-\n-    \/**\n-     * JDK maximum general entity size limit\n-     *\/\n-    public static final String JDK_GENERAL_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxGeneralEntitySizeLimit\";\n-\n-    \/**\n-     * JDK node count limit in entities that limits the total number of nodes\n-     * in all of entity references.\n-     *\/\n-    public static final String JDK_ENTITY_REPLACEMENT_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"entityReplacementLimit\";\n-\n-    \/**\n-     * JDK maximum parameter entity size limit\n-     *\/\n-    public static final String JDK_PARAMETER_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxParameterEntitySizeLimit\";\n-    \/**\n-     * JDK maximum XML name limit\n-     *\/\n-    public static final String JDK_XML_NAME_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxXMLNameLimit\";\n-\n-    \/**\n-     * JDK maxElementDepth limit\n-     *\/\n-    public static final String JDK_MAX_ELEMENT_DEPTH =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxElementDepth\";\n-\n-    \/**\n-     * JDK property indicating whether the parser shall print out entity\n-     * count information\n-     * Value: a string \"yes\" means print, \"no\" or any other string means not.\n-     *\/\n-    public static final String JDK_ENTITY_COUNT_INFO =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"getEntityCountInfo\";\n-\n-    \/\/\n-    \/\/ Implementation limits: corresponding System Properties of the above\n-    \/\/ API properties\n-    \/\/\n-    \/**\n-     * JDK entity expansion limit; Note that the existing system property\n-     * \"entityExpansionLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_ENTITY_EXPANSION_LIMIT = \"jdk.xml.entityExpansionLimit\";\n-\n-    \/**\n-     * JDK element attribute limit; Note that the existing system property\n-     * \"elementAttributeLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_ELEMENT_ATTRIBUTE_LIMIT =  \"jdk.xml.elementAttributeLimit\";\n-\n-    \/**\n-     * JDK maxOccur limit; Note that the existing system property\n-     * \"maxOccurLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_MAX_OCCUR_LIMIT = \"jdk.xml.maxOccurLimit\";\n-\n-    \/**\n-     * JDK total entity size limit\n-     *\/\n-    public static final String SP_TOTAL_ENTITY_SIZE_LIMIT = \"jdk.xml.totalEntitySizeLimit\";\n-\n-    \/**\n-     * JDK maximum general entity size limit\n-     *\/\n-    public static final String SP_GENERAL_ENTITY_SIZE_LIMIT = \"jdk.xml.maxGeneralEntitySizeLimit\";\n-\n-    \/**\n-     * JDK node count limit in entities that limits the total number of nodes\n-     * in all of entity references.\n-     *\/\n-    public static final String SP_ENTITY_REPLACEMENT_LIMIT = \"jdk.xml.entityReplacementLimit\";\n-\n-    \/**\n-     * JDK maximum parameter entity size limit\n-     *\/\n-    public static final String SP_PARAMETER_ENTITY_SIZE_LIMIT = \"jdk.xml.maxParameterEntitySizeLimit\";\n-    \/**\n-     * JDK maximum XML name limit\n-     *\/\n-    public static final String SP_XML_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n-\n-    \/**\n-     * JDK maxElementDepth limit\n-     *\/\n-    public static final String SP_MAX_ELEMENT_DEPTH = \"jdk.xml.maxElementDepth\";\n-\n-    \/**\n-     * JDK TransformerFactory and Transformer attribute that specifies a class\n-     * loader that will be used for extension functions class loading\n-     * Value: a \"null\", the default value, means that the default EF class loading\n-     * path will be used.\n-     * Instance of ClassLoader: the specified instance of ClassLoader will be used\n-     * for extension functions loading during translation process\n-     *\/\n-    public static final String JDK_EXTENSION_CLASSLOADER = \"jdk.xml.transform.extensionClassLoader\";\n-\n-    \/\/legacy System Properties\n-    public final static String ENTITY_EXPANSION_LIMIT = \"entityExpansionLimit\";\n-    public static final String ELEMENT_ATTRIBUTE_LIMIT = \"elementAttributeLimit\" ;\n-    public final static String MAX_OCCUR_LIMIT = \"maxOccurLimit\";\n-\n-    \/**\n-     * A string \"yes\" that can be used for properties such as getEntityCountInfo\n-     *\/\n-    public static final String JDK_YES = \"yes\";\n-\n-    \/\/ Oracle Feature:\n-    \/**\n-     * <p>Use Service Mechanism<\/p>\n-     *\n-     * <ul>\n-     *   <li>\n-         * {@code true} instruct an object to use service mechanism to\n-         * find a service implementation. This is the default behavior.\n-         *   <\/li>\n-         *   <li>\n-         * {@code false} instruct an object to skip service mechanism and\n-         * use the default implementation for that service.\n-         *   <\/li>\n-         * <\/ul>\n-         *\/\n-    public static final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n-\n-\n-    \/\/System Properties corresponding to ACCESS_EXTERNAL_* properties\n-    public static final String SP_ACCESS_EXTERNAL_STYLESHEET = \"javax.xml.accessExternalStylesheet\";\n-    public static final String SP_ACCESS_EXTERNAL_DTD = \"javax.xml.accessExternalDTD\";\n-\n-    \/\/all access keyword\n-    public static final String ACCESS_EXTERNAL_ALL = \"all\";\n-\n-    \/**\n-     * Default value when FEATURE_SECURE_PROCESSING (FSP) is set to true\n-     *\/\n-    public static final String EXTERNAL_ACCESS_DEFAULT_FSP = \"\";\n-\n-    \/**\n-     * FEATURE_SECURE_PROCESSING (FSP) is false by default\n-     *\/\n-    public static final String EXTERNAL_ACCESS_DEFAULT = ACCESS_EXTERNAL_ALL;\n-\n-    public static final String XML_SECURITY_PROPERTY_MANAGER =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"xmlSecurityPropertyManager\";\n-\n-\n-    \/**\n-     * Values for a feature\n-     *\/\n-    public static final String FEATURE_TRUE = \"true\";\n-    public static final String FEATURE_FALSE = \"false\";\n-\n-} \/\/ class Constants\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/XalanConstants.java","additions":0,"deletions":234,"binary":false,"changes":234,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n+import jdk.xml.internal.JdkConstants;\n@@ -34,0 +34,1 @@\n+ * @LastModified: May 2021\n@@ -116,1 +117,1 @@\n-                setValue(index, state, XalanConstants.FEATURE_TRUE);\n+                setValue(index, state, JdkConstants.FEATURE_TRUE);\n@@ -118,1 +119,1 @@\n-                setValue(index, state, XalanConstants.FEATURE_FALSE);\n+                setValue(index, state, JdkConstants.FEATURE_FALSE);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/utils\/FeaturePropertyBase.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -30,0 +29,3 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -44,22 +46,0 @@\n-    \/**\n-     * States of the settings of a property, in the order: default value, value\n-     * set by FEATURE_SECURE_PROCESSING, jaxp.properties file, jaxp system\n-     * properties, and jaxp api properties\n-     *\/\n-    public static enum State {\n-        \/\/this order reflects the overriding order\n-\n-        DEFAULT(\"default\"), FSP(\"FEATURE_SECURE_PROCESSING\"),\n-        JAXPDOTPROPERTIES(\"jaxp.properties\"), SYSTEMPROPERTY(\"system property\"),\n-        APIPROPERTY(\"property\");\n-\n-        final String literal;\n-        State(String literal) {\n-            this.literal = literal;\n-        }\n-\n-        String literal() {\n-            return literal;\n-        }\n-    }\n-\n@@ -69,0 +49,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -71,18 +52,18 @@\n-        ENTITY_EXPANSION_LIMIT(\"EntityExpansionLimit\", XalanConstants.JDK_ENTITY_EXPANSION_LIMIT,\n-                XalanConstants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000),\n-        MAX_OCCUR_NODE_LIMIT(\"MaxOccurLimit\", XalanConstants.JDK_MAX_OCCUR_LIMIT,\n-                XalanConstants.SP_MAX_OCCUR_LIMIT, 0, 5000),\n-        ELEMENT_ATTRIBUTE_LIMIT(\"ElementAttributeLimit\", XalanConstants.JDK_ELEMENT_ATTRIBUTE_LIMIT,\n-                XalanConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000),\n-        TOTAL_ENTITY_SIZE_LIMIT(\"TotalEntitySizeLimit\", XalanConstants.JDK_TOTAL_ENTITY_SIZE_LIMIT,\n-                XalanConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000),\n-        GENERAL_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\", XalanConstants.JDK_GENERAL_ENTITY_SIZE_LIMIT,\n-                XalanConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0),\n-        PARAMETER_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\", XalanConstants.JDK_PARAMETER_ENTITY_SIZE_LIMIT,\n-                XalanConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000),\n-        MAX_ELEMENT_DEPTH_LIMIT(\"MaxElementDepthLimit\", XalanConstants.JDK_MAX_ELEMENT_DEPTH,\n-                XalanConstants.SP_MAX_ELEMENT_DEPTH, 0, 0),\n-        MAX_NAME_LIMIT(\"MaxXMLNameLimit\", XalanConstants.JDK_XML_NAME_LIMIT,\n-                XalanConstants.SP_XML_NAME_LIMIT, 1000, 1000),\n-        ENTITY_REPLACEMENT_LIMIT(\"EntityReplacementLimit\", XalanConstants.JDK_ENTITY_REPLACEMENT_LIMIT,\n-                XalanConstants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000);\n+        ENTITY_EXPANSION_LIMIT(\"EntityExpansionLimit\", JdkConstants.JDK_ENTITY_EXPANSION_LIMIT,\n+                JdkConstants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000),\n+        MAX_OCCUR_NODE_LIMIT(\"MaxOccurLimit\", JdkConstants.JDK_MAX_OCCUR_LIMIT,\n+                JdkConstants.SP_MAX_OCCUR_LIMIT, 0, 5000),\n+        ELEMENT_ATTRIBUTE_LIMIT(\"ElementAttributeLimit\", JdkConstants.JDK_ELEMENT_ATTRIBUTE_LIMIT,\n+                JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000),\n+        TOTAL_ENTITY_SIZE_LIMIT(\"TotalEntitySizeLimit\", JdkConstants.JDK_TOTAL_ENTITY_SIZE_LIMIT,\n+                JdkConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000),\n+        GENERAL_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\", JdkConstants.JDK_GENERAL_ENTITY_SIZE_LIMIT,\n+                JdkConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0),\n+        PARAMETER_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\", JdkConstants.JDK_PARAMETER_ENTITY_SIZE_LIMIT,\n+                JdkConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000),\n+        MAX_ELEMENT_DEPTH_LIMIT(\"MaxElementDepthLimit\", JdkConstants.JDK_MAX_ELEMENT_DEPTH,\n+                JdkConstants.SP_MAX_ELEMENT_DEPTH, 0, 0),\n+        MAX_NAME_LIMIT(\"MaxXMLNameLimit\", JdkConstants.JDK_XML_NAME_LIMIT,\n+                JdkConstants.SP_XML_NAME_LIMIT, 1000, 1000),\n+        ENTITY_REPLACEMENT_LIMIT(\"EntityReplacementLimit\", JdkConstants.JDK_ENTITY_REPLACEMENT_LIMIT,\n+                JdkConstants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000);\n@@ -104,2 +85,12 @@\n-        public boolean equalsAPIPropertyName(String propertyName) {\n-            return (propertyName == null) ? false : apiProperty.equals(propertyName);\n+        \/**\n+         * Checks whether the specified name is a limit. Checks both the\n+         * property and System Property which is now the new property name.\n+         *\n+         * @param name the specified name\n+         * @return true if there is a match, false otherwise\n+         *\/\n+        public boolean is(String name) {\n+            \/\/ current spec: new property name == systemProperty\n+            return (systemProperty != null && systemProperty.equals(name)) ||\n+                   \/\/ current spec: apiProperty is legacy\n+                   (apiProperty.equals(name));\n@@ -108,2 +99,16 @@\n-        public boolean equalsSystemPropertyName(String propertyName) {\n-            return (propertyName == null) ? false : systemProperty.equals(propertyName);\n+        \/**\n+         * Returns the state of a property name. By the specification as of JDK 17,\n+         * the \"jdk.xml.\" prefixed System property name is also the current API\n+         * name. The URI-based qName is legacy.\n+         *\n+         * @param name the property name\n+         * @return the state of the property name, null if no match\n+         *\/\n+        public State getState(String name) {\n+            if (systemProperty != null && systemProperty.equals(name)) {\n+                return State.APIPROPERTY;\n+            } else if (apiProperty.equals(name)) {\n+                \/\/the URI-style qName is legacy\n+                return State.LEGACY_APIPROPERTY;\n+            }\n+            return null;\n@@ -120,1 +125,1 @@\n-        String systemProperty() {\n+        public String systemProperty() {\n@@ -138,6 +143,6 @@\n-        ENTITY_EXPANSION_LIMIT(XalanConstants.SP_ENTITY_EXPANSION_LIMIT,\n-                XalanConstants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(XalanConstants.SP_MAX_OCCUR_LIMIT,\n-                XalanConstants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(XalanConstants.SP_ELEMENT_ATTRIBUTE_LIMIT,\n-                XalanConstants.ELEMENT_ATTRIBUTE_LIMIT);\n+        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT,\n+                JdkConstants.ENTITY_EXPANSION_LIMIT),\n+        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT,\n+                JdkConstants.MAX_OCCUR_LIMIT),\n+        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT,\n+                JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n@@ -233,1 +238,5 @@\n-            setLimit(index, state, value);\n+            State pState = state;\n+            if (index != indexEntityCountInfo && state == State.APIPROPERTY) {\n+                pState = (Limit.values()[index]).getState(propertyName);\n+            }\n+            setLimit(index, pState, value);\n@@ -262,2 +271,4 @@\n-            int temp = 0;\n-            try {\n+            int temp;\n+            if (value instanceof Integer) {\n+                temp = (Integer)value;\n+            } else {\n@@ -268,2 +279,3 @@\n-            } catch (NumberFormatException e) {}\n-            setLimit(index, state, temp);        }\n+            }\n+            setLimit(index, state, temp);\n+        }\n@@ -282,1 +294,1 @@\n-            printEntityCountInfo = XalanConstants.JDK_YES;\n+            printEntityCountInfo = JdkConstants.JDK_YES;\n@@ -380,1 +392,2 @@\n-            if (limit.equalsAPIPropertyName(propertyName)) {\n+            \/\/ see JDK-8265248, accept both the URL and jdk.xml as prefix\n+            if (limit.is(propertyName)) {\n@@ -386,1 +399,1 @@\n-        if (propertyName.equals(XalanConstants.JDK_ENTITY_COUNT_INFO)) {\n+        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n@@ -402,1 +415,1 @@\n-        return printEntityCountInfo.equals(XalanConstants.JDK_YES);\n+        return printEntityCountInfo.equals(JdkConstants.JDK_YES);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/utils\/XMLSecurityManager.java","additions":75,"deletions":62,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -31,0 +29,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -43,1 +42,1 @@\n-                XalanConstants.EXTERNAL_ACCESS_DEFAULT),\n+                JdkConstants.EXTERNAL_ACCESS_DEFAULT),\n@@ -45,1 +44,1 @@\n-                XalanConstants.EXTERNAL_ACCESS_DEFAULT);\n+                JdkConstants.EXTERNAL_ACCESS_DEFAULT);\n@@ -97,1 +96,1 @@\n-                XalanConstants.SP_ACCESS_EXTERNAL_DTD);\n+                JdkConstants.SP_ACCESS_EXTERNAL_DTD);\n@@ -99,1 +98,1 @@\n-                XalanConstants.SP_ACCESS_EXTERNAL_STYLESHEET);\n+                JdkConstants.SP_ACCESS_EXTERNAL_STYLESHEET);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/utils\/XMLSecurityPropertyManager.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -35,0 +34,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -44,1 +44,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -88,1 +88,1 @@\n-                        XalanConstants.ACCESS_EXTERNAL_ALL);\n+                        JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/Import.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -35,0 +34,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -44,1 +44,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -88,1 +88,1 @@\n-                        XalanConstants.ACCESS_EXTERNAL_ALL);\n+                        JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/Include.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -46,0 +45,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -65,1 +65,1 @@\n- * @LastModified: July 2019\n+ * @LastModified: May 2021\n@@ -505,1 +505,1 @@\n-                        (XMLSecurityManager)_xsltc.getProperty(XalanConstants.SECURITY_MANAGER);\n+                        (XMLSecurityManager)_xsltc.getProperty(JdkConstants.SECURITY_MANAGER);\n@@ -511,2 +511,2 @@\n-                    lastProperty = XalanConstants.JDK_ENTITY_COUNT_INFO;\n-                    reader.setProperty(XalanConstants.JDK_ENTITY_COUNT_INFO, XalanConstants.JDK_YES);\n+                    lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n+                    reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n@@ -519,2 +519,2 @@\n-            JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                _xsltc.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE), false);\n+            JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkConstants.CDATA_CHUNK_SIZE,\n+                _xsltc.getProperty(JdkConstants.CDATA_CHUNK_SIZE), false);\n@@ -594,1 +594,1 @@\n-                        XalanConstants.ACCESS_EXTERNAL_ALL);\n+                        JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/Parser.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -49,0 +48,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -61,1 +61,1 @@\n- * @LastModified: July 2019\n+ * @LastModified: May 2021\n@@ -143,1 +143,1 @@\n-    private String _accessExternalStylesheet = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalStylesheet = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -147,1 +147,1 @@\n-    private String _accessExternalDTD = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalDTD = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -221,1 +221,1 @@\n-        } else if (name.equals(XalanConstants.SECURITY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.SECURITY_MANAGER)) {\n@@ -223,1 +223,1 @@\n-        } else if (name.equals(XalanConstants.JDK_EXTENSION_CLASSLOADER)) {\n+        } else if (name.equals(JdkConstants.JDK_EXT_CLASSLOADER)) {\n@@ -227,1 +227,1 @@\n-        } else if (JdkXmlUtils.CDATA_CHUNK_SIZE.equals(name)) {\n+        } else if (JdkConstants.CDATA_CHUNK_SIZE.equals(name)) {\n@@ -244,1 +244,1 @@\n-        } else if (name.equals(XalanConstants.SECURITY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.SECURITY_MANAGER)) {\n@@ -246,1 +246,1 @@\n-        } else if (name.equals(XalanConstants.JDK_EXTENSION_CLASSLOADER)) {\n+        } else if (name.equals(JdkConstants.JDK_EXT_CLASSLOADER)) {\n@@ -253,1 +253,1 @@\n-        } else if (JdkXmlUtils.CDATA_CHUNK_SIZE.equals(name)) {\n+        } else if (JdkConstants.CDATA_CHUNK_SIZE.equals(name)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/XSLTC.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -38,0 +37,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -42,1 +42,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -197,1 +197,1 @@\n-            String accessError = SecuritySupport.checkAccess(uri, translet.getAllowedProtocols(), XalanConstants.ACCESS_EXTERNAL_ALL);\n+            String accessError = SecuritySupport.checkAccess(uri, translet.getAllowedProtocols(), JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/dom\/LoadDocument.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -47,0 +46,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -57,1 +57,1 @@\n- * @LastModified: Aug 2019\n+ * @LastModified: May 2021\n@@ -68,1 +68,1 @@\n-    \/\/see OutputPropertiesFactory.ORACLE_IS_STANDALONE\n+    \/\/see JdkConstants.SP_XSLTC_IS_Standalone\n@@ -117,1 +117,1 @@\n-    private String _accessExternalStylesheet = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalStylesheet = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/runtime\/AbstractTranslet.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -39,0 +38,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -50,1 +50,1 @@\n- * @LastModified: July 2019\n+ * @LastModified: May 2021\n@@ -110,2 +110,2 @@\n-        xsltc.setProperty(XalanConstants.SECURITY_MANAGER,\n-                tfactory.getAttribute(XalanConstants.SECURITY_MANAGER));\n+        xsltc.setProperty(JdkConstants.SECURITY_MANAGER,\n+                tfactory.getAttribute(JdkConstants.SECURITY_MANAGER));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TemplatesHandlerImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -63,0 +62,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -71,1 +71,1 @@\n- * @LastModified: May 2020\n+ * @LastModified: May 2021\n@@ -152,1 +152,1 @@\n-    private transient String _accessExternalStylesheet = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private transient String _accessExternalStylesheet = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TemplatesImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n+import jdk.xml.internal.JdkConstants;\n@@ -74,0 +74,1 @@\n+import jdk.xml.internal.JdkProperty;\n@@ -76,0 +77,2 @@\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -88,1 +91,1 @@\n- * @LastModified: Aug 2019\n+ * @LastModified: May 2021\n@@ -233,1 +236,1 @@\n-    private String _accessExternalStylesheet = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalStylesheet = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -237,1 +240,1 @@\n-    private String _accessExternalDTD = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalDTD = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -244,1 +247,1 @@\n-    private ClassLoader _extensionClassLoader = null;\n+    private JdkProperty<ClassLoader> _extensionClassLoader = null;\n@@ -260,1 +263,1 @@\n-    int _cdataChunkSize = JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT;\n+    int _cdataChunkSize = JdkConstants.CDATA_CHUNK_SIZE_DEFAULT;\n@@ -285,0 +288,1 @@\n+        _extensionClassLoader = new JdkProperty<>(ImplPropMap.EXTCLSLOADER, null, State.DEFAULT);\n@@ -358,1 +362,1 @@\n-        } else if (name.equals(XalanConstants.SECURITY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.SECURITY_MANAGER)) {\n@@ -360,2 +364,2 @@\n-        } else if (name.equals(XalanConstants.JDK_EXTENSION_CLASSLOADER)) {\n-           return _extensionClassLoader;\n+        } else if (ImplPropMap.EXTCLSLOADER.is(name)) {\n+           return (_extensionClassLoader == null) ? null : _extensionClassLoader.getValue();\n@@ -372,1 +376,1 @@\n-        } else if (JdkXmlUtils.CDATA_CHUNK_SIZE.equals(name)) {\n+        } else if (ImplPropMap.CDATACHUNKSIZE.is(name)) {\n@@ -489,1 +493,1 @@\n-        else if ( name.equals(XalanConstants.JDK_EXTENSION_CLASSLOADER)) {\n+        else if (ImplPropMap.EXTCLSLOADER.is(name)) {\n@@ -491,1 +495,1 @@\n-                _extensionClassLoader = (ClassLoader) value;\n+                _extensionClassLoader.setValue(name, (ClassLoader)value, State.APIPROPERTY);\n@@ -514,1 +518,1 @@\n-        } else if (JdkXmlUtils.CDATA_CHUNK_SIZE.equals(name)) {\n+        } else if (ImplPropMap.CDATACHUNKSIZE.is(name)) {\n@@ -520,1 +524,1 @@\n-                _xmlSecurityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, value)) {\n+                _xmlSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value)) {\n@@ -561,0 +565,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -581,1 +586,1 @@\n-                        FeaturePropertyBase.State.FSP, XalanConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        FeaturePropertyBase.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -583,1 +588,1 @@\n-                        FeaturePropertyBase.State.FSP, XalanConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        FeaturePropertyBase.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -592,1 +597,1 @@\n-                        JdkXmlFeatures.State.FSP, false);\n+                        JdkProperty.State.FSP, false);\n@@ -596,1 +601,1 @@\n-            if (name.equals(XalanConstants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n+            if (name.equals(JdkConstants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n@@ -603,3 +608,2 @@\n-                    _xmlFeatures.setFeature(name, JdkXmlFeatures.State.APIPROPERTY, value)) {\n-                if (name.equals(JdkXmlUtils.OVERRIDE_PARSER) ||\n-                        name.equals(JdkXmlFeatures.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n+                    _xmlFeatures.setFeature(name, JdkProperty.State.APIPROPERTY, value)) {\n+                if (ImplPropMap.OVERRIDEPARSER.is(name)) {\n@@ -628,0 +632,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -641,1 +646,1 @@\n-            XalanConstants.ORACLE_FEATURE_SERVICE_MECHANISM\n+            JdkConstants.ORACLE_FEATURE_SERVICE_MECHANISM\n@@ -969,2 +974,3 @@\n-        xsltc.setProperty(XalanConstants.SECURITY_MANAGER, _xmlSecurityManager);\n-        xsltc.setProperty(XalanConstants.JDK_EXTENSION_CLASSLOADER, _extensionClassLoader);\n+        xsltc.setProperty(JdkConstants.SECURITY_MANAGER, _xmlSecurityManager);\n+        xsltc.setProperty(JdkConstants.JDK_EXT_CLASSLOADER,\n+                (_extensionClassLoader == null) ? null : _extensionClassLoader.getValue());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -84,0 +83,3 @@\n+import jdk.xml.internal.JdkConstants;\n+import static jdk.xml.internal.JdkConstants.SP_XSLTC_IS_STANDALONE;\n+import jdk.xml.internal.JdkProperty;\n@@ -86,0 +88,2 @@\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -98,1 +102,1 @@\n- * @LastModified: Feb 2021\n+ * @LastModified: May 2021\n@@ -214,1 +218,1 @@\n-    private String _accessExternalDTD = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalDTD = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -231,1 +235,4 @@\n-    int _cdataChunkSize = JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT;\n+    int _cdataChunkSize = JdkConstants.CDATA_CHUNK_SIZE_DEFAULT;\n+\n+    \/\/ OutputProperty\/Impl-specific property: xsltcIsStandalone\n+    JdkProperty<String> _xsltcIsStandalone;\n@@ -282,4 +289,4 @@\n-        String v = SecuritySupport.getJAXPSystemProperty(OutputPropertiesFactory.SP_IS_STANDALONE);\n-        if (v != null) {\n-            _properties.setProperty(OutputPropertiesFactory.JDK_IS_STANDALONE, v);\n-        }\n+        String isStandalone = SecuritySupport.getJAXPSystemProperty(\n+                String.class, SP_XSLTC_IS_STANDALONE, \"no\");\n+        _xsltcIsStandalone = new JdkProperty<>(ImplPropMap.XSLTCISSTANDALONE,\n+                isStandalone, State.DEFAULT);\n@@ -291,1 +298,1 @@\n-        _securityManager = (XMLSecurityManager)_tfactory.getAttribute(XalanConstants.SECURITY_MANAGER);\n+        _securityManager = (XMLSecurityManager)_tfactory.getAttribute(JdkConstants.SECURITY_MANAGER);\n@@ -295,4 +302,4 @@\n-        _readerManager.setProperty(XalanConstants.SECURITY_MANAGER, _securityManager);\n-        _cdataChunkSize = JdkXmlUtils.getValue(_tfactory.getAttribute(JdkXmlUtils.CDATA_CHUNK_SIZE),\n-                JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n-        _readerManager.setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, _cdataChunkSize);\n+        _readerManager.setProperty(JdkConstants.SECURITY_MANAGER, _securityManager);\n+        _cdataChunkSize = JdkXmlUtils.getValue(_tfactory.getAttribute(JdkConstants.CDATA_CHUNK_SIZE),\n+                JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n+        _readerManager.setProperty(JdkConstants.CDATA_CHUNK_SIZE, _cdataChunkSize);\n@@ -908,0 +915,3 @@\n+        if (ImplPropMap.XSLTCISSTANDALONE.is(name)) {\n+            return _xsltcIsStandalone.getValue();\n+        }\n@@ -969,1 +979,6 @@\n-        _properties.setProperty(name, value);\n+\n+        if (ImplPropMap.XSLTCISSTANDALONE.is(name)) {\n+            _xsltcIsStandalone.setValue(name, value, State.APIPROPERTY);\n+        } else {\n+            _properties.setProperty(name, value);\n+        }\n@@ -1040,5 +1055,3 @@\n-            else if (isStandaloneProperty(name)) {\n-                 if (value != null && value.equals(\"yes\")) {\n-                     translet._isStandalone = true;\n-                 }\n-            }\n+        }\n+        if (_xsltcIsStandalone.getValue().equals(\"yes\")) {\n+            translet._isStandalone = true;\n@@ -1104,5 +1117,0 @@\n-            else if (isStandaloneProperty(name)) {\n-                if (value != null && value.equals(\"yes\")) {\n-                    handler.setIsStandalone(true);\n-                }\n-            }\n@@ -1147,0 +1155,4 @@\n+\n+        if (_xsltcIsStandalone.getValue().equals(\"yes\")) {\n+            handler.setIsStandalone(true);\n+        }\n@@ -1222,1 +1234,1 @@\n-                isStandaloneProperty(name) ||\n+                ImplPropMap.XSLTCISSTANDALONE.is(name) ||\n@@ -1226,10 +1238,0 @@\n-    \/**\n-     * Checks whether the property requested is the isStandalone property. Both\n-     * the new and legacy property names are supported.\n-     * @param name the property name\n-     * @return true if the property is \"isStandalone\", false otherwise\n-     *\/\n-    private boolean isStandaloneProperty(String name) {\n-        return (name.equals(OutputPropertiesFactory.JDK_IS_STANDALONE) ||\n-                    name.equals(OutputPropertiesFactory.ORACLE_IS_STANDALONE));\n-    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerImpl.java","additions":37,"deletions":35,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -40,0 +39,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -42,1 +42,0 @@\n-import jdk.xml.internal.SecuritySupport;\n@@ -54,0 +53,2 @@\n+ *\n+ * @LastModified: May 2021\n@@ -106,2 +107,2 @@\n-                    JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                            xsltc.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE), false);\n+                    JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkConstants.CDATA_CHUNK_SIZE,\n+                            xsltc.getProperty(JdkConstants.CDATA_CHUNK_SIZE), false);\n@@ -112,1 +113,1 @@\n-                                (XMLSecurityManager)xsltc.getProperty(XalanConstants.SECURITY_MANAGER);\n+                                (XMLSecurityManager)xsltc.getProperty(JdkConstants.SECURITY_MANAGER);\n@@ -120,2 +121,2 @@\n-                                lastProperty = XalanConstants.JDK_ENTITY_COUNT_INFO;\n-                                reader.setProperty(XalanConstants.JDK_ENTITY_COUNT_INFO, XalanConstants.JDK_YES);\n+                                lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n+                                reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/Util.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -73,1 +74,1 @@\n- * @LastModified: Apr 2019\n+ * @LastModified: May 2021\n@@ -216,1 +217,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -330,1 +331,1 @@\n-            JdkXmlUtils.OVERRIDE_PARSER\n+            JdkConstants.OVERRIDE_PARSER\n@@ -354,1 +355,1 @@\n-        setFeature(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+        setFeature(JdkConstants.OVERRIDE_PARSER, JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -379,1 +380,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -418,1 +419,1 @@\n-        setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER,\n+        setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER,\n@@ -458,1 +459,1 @@\n-        setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        setProperty(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/dom\/DOMConfigurationImpl.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: May 2021\n@@ -144,17 +144,0 @@\n-    \/\/ Oracle Feature:\n-    \/**\n-     * <p>Use Service Mechanism<\/p>\n-     *\n-     * <ul>\n-     *   <li>\n-     * {@code true} instruct an object to use service mechanism to\n-     * find a service implementation. This is the default behavior.\n-     *   <\/li>\n-     *   <li>\n-     * {@code false} instruct an object to skip service mechanism and\n-     * use the default implementation for that service.\n-     *   <\/li>\n-     * <\/ul>\n-     *\/\n-    public static final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n-\n@@ -183,151 +166,0 @@\n-    \/** Oracle JAXP property prefix (\"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\"). *\/\n-    public static final String ORACLE_JAXP_PROPERTY_PREFIX =\n-        \"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\";\n-\n-    public static final String XML_SECURITY_PROPERTY_MANAGER =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"xmlSecurityPropertyManager\";\n-\n-    \/\/System Properties corresponding to ACCESS_EXTERNAL_* properties\n-    public static final String SP_ACCESS_EXTERNAL_DTD = \"javax.xml.accessExternalDTD\";\n-    public static final String SP_ACCESS_EXTERNAL_SCHEMA = \"javax.xml.accessExternalSchema\";\n-    \/\/all access keyword\n-    public static final String ACCESS_EXTERNAL_ALL = \"all\";\n-\n-    \/**\n-     * Default value when FEATURE_SECURE_PROCESSING (FSP) is set to true\n-     *\/\n-    public static final String EXTERNAL_ACCESS_DEFAULT_FSP = \"\";\n-\n-    \/**\n-     * FEATURE_SECURE_PROCESSING (FSP) is true by default\n-     *\/\n-    public static final String EXTERNAL_ACCESS_DEFAULT = ACCESS_EXTERNAL_ALL;\n-\n-    \/\/\n-    \/\/ Implementation limits: corresponding System Properties of the above\n-    \/\/ API properties\n-    \/\/\n-    \/**\n-     * JDK entity expansion limit; Note that the existing system property\n-     * \"entityExpansionLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_ENTITY_EXPANSION_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"entityExpansionLimit\";\n-\n-    \/**\n-     * JDK element attribute limit; Note that the existing system property\n-     * \"elementAttributeLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_ELEMENT_ATTRIBUTE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"elementAttributeLimit\";\n-\n-    \/**\n-     * JDK maxOccur limit; Note that the existing system property\n-     * \"maxOccurLimit\" with no prefix is still observed\n-     *\/\n-    public static final String JDK_MAX_OCCUR_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxOccurLimit\";\n-\n-    \/**\n-     * JDK total entity size limit\n-     *\/\n-    public static final String JDK_TOTAL_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"totalEntitySizeLimit\";\n-\n-    \/**\n-     * JDK maximum general entity size limit\n-     *\/\n-    public static final String JDK_GENERAL_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxGeneralEntitySizeLimit\";\n-\n-    \/**\n-     * JDK node count limit in entities that limits the total number of nodes\n-     * in all of entity references.\n-     *\/\n-    public static final String JDK_ENTITY_REPLACEMENT_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"entityReplacementLimit\";\n-\n-    \/**\n-     * JDK maximum parameter entity size limit\n-     *\/\n-    public static final String JDK_PARAMETER_ENTITY_SIZE_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxParameterEntitySizeLimit\";\n-    \/**\n-     * JDK maximum XML name limit\n-     *\/\n-    public static final String JDK_XML_NAME_LIMIT =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxXMLNameLimit\";\n-\n-    \/**\n-     * JDK maxElementDepth limit\n-     *\/\n-    public static final String JDK_MAX_ELEMENT_DEPTH =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"maxElementDepth\";\n-\n-    \/**\n-     * JDK property to allow printing out information from the limit analyzer\n-     *\/\n-    public static final String JDK_ENTITY_COUNT_INFO =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"getEntityCountInfo\";\n-\n-    \/\/\n-    \/\/ Implementation limits: API properties\n-    \/\/\n-    \/**\n-     * JDK entity expansion limit; Note that the existing system property\n-     * \"entityExpansionLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_ENTITY_EXPANSION_LIMIT = \"jdk.xml.entityExpansionLimit\";\n-\n-    \/**\n-     * JDK element attribute limit; Note that the existing system property\n-     * \"elementAttributeLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_ELEMENT_ATTRIBUTE_LIMIT =  \"jdk.xml.elementAttributeLimit\";\n-\n-    \/**\n-     * JDK maxOccur limit; Note that the existing system property\n-     * \"maxOccurLimit\" with no prefix is still observed\n-     *\/\n-    public static final String SP_MAX_OCCUR_LIMIT = \"jdk.xml.maxOccurLimit\";\n-\n-    \/**\n-     * JDK total entity size limit\n-     *\/\n-    public static final String SP_TOTAL_ENTITY_SIZE_LIMIT = \"jdk.xml.totalEntitySizeLimit\";\n-\n-    \/**\n-     * JDK maximum general entity size limit\n-     *\/\n-    public static final String SP_GENERAL_ENTITY_SIZE_LIMIT = \"jdk.xml.maxGeneralEntitySizeLimit\";\n-\n-    \/**\n-     * JDK node count limit in entities that limits the total number of nodes\n-     * in all of entity references.\n-     *\/\n-    public static final String SP_ENTITY_REPLACEMENT_LIMIT = \"jdk.xml.entityReplacementLimit\";\n-\n-    \/**\n-     * JDK maximum parameter entity size limit\n-     *\/\n-    public static final String SP_PARAMETER_ENTITY_SIZE_LIMIT = \"jdk.xml.maxParameterEntitySizeLimit\";\n-    \/**\n-     * JDK maximum XML name limit\n-     *\/\n-    public static final String SP_XML_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n-\n-    \/**\n-     * JDK maxElementDepth limit\n-     *\/\n-    public static final String SP_MAX_ELEMENT_DEPTH = \"jdk.xml.maxElementDepth\";\n-\n-    \/\/legacy System Properties\n-    public final static String ENTITY_EXPANSION_LIMIT = \"entityExpansionLimit\";\n-    public static final String ELEMENT_ATTRIBUTE_LIMIT = \"elementAttributeLimit\" ;\n-    public final static String MAX_OCCUR_LIMIT = \"maxOccurLimit\";\n-\n-    \/**\n-     * A string \"yes\" that can be used for properties such as getEntityCountInfo\n-     *\/\n-    public static final String JDK_YES = \"yes\";\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/Constants.java","additions":2,"deletions":170,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -62,1 +64,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -147,1 +149,1 @@\n-        supportedProps.put(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        supportedProps.put(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n@@ -169,1 +171,4 @@\n-        return supportedProps.get(property);\n+        \/** Check to see if the property is managed by the security manager **\/\n+        String propertyValue = (fSecurityManager != null) ?\n+                fSecurityManager.getLimitAsString(property) : null;\n+        return propertyValue != null ? propertyValue : supportedProps.get(property);\n@@ -201,1 +206,1 @@\n-        if (property.equals(Constants.XML_SECURITY_PROPERTY_MANAGER)) {\n+        if (property.equals(JdkConstants.XML_SECURITY_PROPERTY_MANAGER)) {\n@@ -207,1 +212,1 @@\n-            supportedProps.put(Constants.XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n+            supportedProps.put(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n@@ -213,1 +218,1 @@\n-                !fSecurityManager.setLimit(property, XMLSecurityManager.State.APIPROPERTY, value)) {\n+                !fSecurityManager.setLimit(property, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -76,1 +77,1 @@\n- * @LastModified: Jan 2019\n+ * @LastModified: May 2021\n@@ -172,1 +173,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -177,1 +178,1 @@\n-    final static String EXTERNAL_ACCESS_DEFAULT = Constants.EXTERNAL_ACCESS_DEFAULT;\n+    final static String EXTERNAL_ACCESS_DEFAULT = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -211,1 +212,1 @@\n-                JdkXmlUtils.CDATA_CHUNK_SIZE\n+                JdkConstants.CDATA_CHUNK_SIZE\n@@ -224,1 +225,1 @@\n-                JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT\n+                JdkConstants.CDATA_CHUNK_SIZE_DEFAULT\n@@ -630,2 +631,2 @@\n-        fChunkSize = JdkXmlUtils.getValue(componentManager.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE),\n-                JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        fChunkSize = JdkXmlUtils.getValue(componentManager.getProperty(JdkConstants.CDATA_CHUNK_SIZE),\n+                JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n@@ -677,2 +678,2 @@\n-        fChunkSize = JdkXmlUtils.getValue(propertyManager.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE),\n-                JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        fChunkSize = JdkXmlUtils.getValue(propertyManager.getProperty(JdkConstants.CDATA_CHUNK_SIZE),\n+                JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n@@ -2015,1 +2016,1 @@\n-        return SecuritySupport.checkAccess(expandedSystemId, allowedProtocols, Constants.ACCESS_EXTERNAL_ALL);\n+        return SecuritySupport.checkAccess(expandedSystemId, allowedProtocols, JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDocumentFragmentScannerImpl.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -93,1 +94,1 @@\n- * @LastModified: Apr 2019\n+ * @LastModified: May 2021\n@@ -181,1 +182,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -184,1 +185,1 @@\n-    static final String EXTERNAL_ACCESS_DEFAULT = Constants.EXTERNAL_ACCESS_DEFAULT;\n+    static final String EXTERNAL_ACCESS_DEFAULT = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -223,1 +224,1 @@\n-                JdkXmlUtils.CDATA_CHUNK_SIZE\n+                JdkConstants.CDATA_CHUNK_SIZE\n@@ -239,1 +240,1 @@\n-                JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT\n+                JdkConstants.CDATA_CHUNK_SIZE_DEFAULT\n@@ -1316,1 +1317,1 @@\n-                    String accessError = SecuritySupport.checkAccess(expandedSystemId, fAccessExternalDTD, Constants.ACCESS_EXTERNAL_ALL);\n+                    String accessError = SecuritySupport.checkAccess(expandedSystemId, fAccessExternalDTD, JdkConstants.ACCESS_EXTERNAL_ALL);\n@@ -1633,1 +1634,1 @@\n-        entityExpansionIndex = fSecurityManager.getIndex(Constants.JDK_ENTITY_EXPANSION_LIMIT);\n+        entityExpansionIndex = fSecurityManager.getIndex(JdkConstants.SP_ENTITY_EXPANSION_LIMIT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -105,1 +106,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -164,1 +165,1 @@\n-    protected static final String OVERRIDE_PARSER = JdkXmlUtils.OVERRIDE_PARSER;\n+    protected static final String OVERRIDE_PARSER = JdkConstants.OVERRIDE_PARSER;\n@@ -229,1 +230,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -256,1 +257,1 @@\n-        JdkXmlUtils.CDATA_CHUNK_SIZE\n+        JdkConstants.CDATA_CHUNK_SIZE\n@@ -286,1 +287,1 @@\n-    private String faccessExternalSchema = Constants.EXTERNAL_ACCESS_DEFAULT;\n+    private String faccessExternalSchema = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -610,1 +611,1 @@\n-            String accessError = SecuritySupport.checkAccess(desc.getExpandedSystemId(), faccessExternalSchema, Constants.ACCESS_EXTERNAL_ALL);\n+            String accessError = SecuritySupport.checkAccess(desc.getExpandedSystemId(), faccessExternalSchema, JdkConstants.ACCESS_EXTERNAL_ALL);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/XMLSchemaLoader.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -114,1 +115,1 @@\n- * @LastModified: Apr 2020\n+ * @LastModified: May 2021\n@@ -266,1 +267,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -268,1 +269,1 @@\n-    protected static final String OVERRIDE_PARSER = JdkXmlUtils.OVERRIDE_PARSER;\n+    protected static final String OVERRIDE_PARSER = JdkConstants.OVERRIDE_PARSER;\n@@ -326,1 +327,1 @@\n-        JdkXmlUtils.OVERRIDE_PARSER_DEFAULT,\n+        JdkConstants.OVERRIDE_PARSER_DEFAULT,\n@@ -349,1 +350,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -355,1 +356,1 @@\n-            null, null, null, null, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT };\n+            null, null, null, null, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT };\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/XMLSchemaValidator.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -54,1 +55,0 @@\n-import jdk.xml.internal.SecuritySupport;\n@@ -61,1 +61,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -308,1 +308,1 @@\n-            JdkXmlUtils.OVERRIDE_PARSER\n+            JdkConstants.OVERRIDE_PARSER\n@@ -323,1 +323,1 @@\n-        fFeatures.put(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+        fFeatures.put(JdkConstants.OVERRIDE_PARSER, JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -342,1 +342,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -374,1 +374,1 @@\n-        fProperties.put(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        fProperties.put(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/opti\/SchemaParsingConfig.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,0 +109,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -133,1 +134,1 @@\n- * @LastModified: Apr 2019\n+ * @LastModified: May 2021\n@@ -228,1 +229,1 @@\n-        Constants.XML_SECURITY_PROPERTY_MANAGER;\n+        JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -2217,1 +2218,1 @@\n-                        String accessError = SecuritySupport.checkAccess(schemaId, fAccessExternalSchema, Constants.ACCESS_EXTERNAL_ALL);\n+                        String accessError = SecuritySupport.checkAccess(schemaId, fAccessExternalSchema, JdkConstants.ACCESS_EXTERNAL_ALL);\n@@ -3668,3 +3669,3 @@\n-        fOverrideDefaultParser = componentManager.getFeature(JdkXmlUtils.OVERRIDE_PARSER);\n-        fSchemaParser.setFeature(JdkXmlUtils.OVERRIDE_PARSER, fOverrideDefaultParser);\n-        fEntityManager.setFeature(JdkXmlUtils.OVERRIDE_PARSER, fOverrideDefaultParser);\n+        fOverrideDefaultParser = componentManager.getFeature(JdkConstants.OVERRIDE_PARSER);\n+        fSchemaParser.setFeature(JdkConstants.OVERRIDE_PARSER, fOverrideDefaultParser);\n+        fEntityManager.setFeature(JdkConstants.OVERRIDE_PARSER, fOverrideDefaultParser);\n@@ -3688,4 +3689,4 @@\n-        fSchemaParser.setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                componentManager.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE));\n-        fEntityManager.setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                componentManager.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE));\n+        fSchemaParser.setProperty(JdkConstants.CDATA_CHUNK_SIZE,\n+                componentManager.getProperty(JdkConstants.CDATA_CHUNK_SIZE));\n+        fEntityManager.setProperty(JdkConstants.CDATA_CHUNK_SIZE,\n+                componentManager.getProperty(JdkConstants.CDATA_CHUNK_SIZE));\n@@ -4016,2 +4017,1 @@\n-                reportSchemaError(\"src-redefine.7.1\",\n-                        new Object []{attGroupRefsCount}, child);\n+                reportSchemaError(\"src-redefine.7.1\", new Object []{attGroupRefsCount}, child);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSDHandler.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager;\n@@ -32,0 +34,1 @@\n+import jdk.xml.internal.JdkProperty;\n@@ -39,0 +42,1 @@\n+ * @LastModified: May 2021\n@@ -52,0 +56,4 @@\n+    \/\/ used to verify attributes\n+    XMLSecurityManager fSecurityManager = new XMLSecurityManager(true);\n+    XMLSecurityPropertyManager fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+\n@@ -107,0 +115,14 @@\n+        \/\/check if the property is managed by security manager\n+        String pName;\n+        if ((pName = fSecurityManager.find(name)) != null) {\n+            \/\/ as the qName is deprecated, let the manager decide whether the\n+            \/\/ value shall be changed\n+            fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value);\n+            attributes.put(pName, fSecurityManager.getLimitAsString(pName));\n+            \/\/ no need to create a DocumentBuilderImpl\n+            return;\n+        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n+            attributes.put(pName, value);\n+            return;\n+        }\n+\n@@ -125,0 +147,9 @@\n+\n+        \/\/check if the property is managed by security manager\n+        String pName;\n+        if ((pName = fSecurityManager.find(name)) != null) {\n+            return attributes.get(pName);\n+        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n+            return attributes.get(pName);\n+        }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -60,0 +62,1 @@\n+ * @LastModified: May 2021\n@@ -102,1 +105,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -189,1 +192,1 @@\n-                            State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                            State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -191,1 +194,1 @@\n-                            State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                            State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -299,1 +302,1 @@\n-                             !fSecurityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, val)) {\n+                             !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, val)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderImpl.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -64,1 +66,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: May 2021\n@@ -96,1 +98,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -170,1 +172,1 @@\n-                            XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                            XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -172,1 +174,1 @@\n-                            XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                            XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -565,1 +567,1 @@\n-                    !fSecurityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, value)) {\n+                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -65,1 +66,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: May 2021\n@@ -385,1 +386,1 @@\n-                        fComponentManager.getFeature(JdkXmlUtils.OVERRIDE_PARSER));\n+                        fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/DOMValidatorHelper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\n@@ -32,1 +31,0 @@\n-\n@@ -38,1 +36,0 @@\n-import javax.xml.transform.TransformerFactory;\n@@ -44,1 +41,1 @@\n-import javax.xml.transform.stax.StAXSource;\n+import jdk.xml.internal.JdkConstants;\n@@ -46,1 +43,0 @@\n-\n@@ -76,1 +72,1 @@\n-                            fComponentManager.getFeature(JdkXmlUtils.OVERRIDE_PARSER));\n+                            fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER));\n@@ -88,1 +84,1 @@\n-                            tf.setAttribute(Constants.JDK_ENTITY_COUNT_INFO, \"yes\");\n+                            tf.setAttribute(JdkConstants.JDK_DEBUG_LIMIT, \"yes\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/StAXValidatorHelper.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -54,0 +55,1 @@\n+ * @LastModified: May 2021\n@@ -142,1 +144,1 @@\n-                            fComponentManager.getFeature(JdkXmlUtils.OVERRIDE_PARSER));\n+                            fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER));\n@@ -210,2 +212,2 @@\n-        config.setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER,\n-                fComponentManager.getProperty(Constants.XML_SECURITY_PROPERTY_MANAGER));\n+        config.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER,\n+                fComponentManager.getProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER));\n@@ -218,2 +220,2 @@\n-        config.setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                fComponentManager.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE));\n+        config.setProperty(JdkConstants.CDATA_CHUNK_SIZE,\n+                fComponentManager.getProperty(JdkConstants.CDATA_CHUNK_SIZE));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/StreamValidatorHelper.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -97,1 +98,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: May 2021\n@@ -140,1 +141,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -678,1 +679,1 @@\n-                    reader = JdkXmlUtils.getXMLReader(fComponentManager.getFeature(JdkXmlUtils.OVERRIDE_PARSER),\n+                    reader = JdkXmlUtils.getXMLReader(fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER),\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/ValidatorHandlerImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,3 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n@@ -69,0 +72,2 @@\n+ *\n+ * @LastModified: May 2021\n@@ -97,1 +102,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -164,1 +169,1 @@\n-        fXMLSchemaLoader.setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        fXMLSchemaLoader.setProperty(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n@@ -168,1 +173,1 @@\n-        fXMLSchemaLoader.setFeature(JdkXmlUtils.OVERRIDE_PARSER, fOverrideDefaultParser);\n+        fXMLSchemaLoader.setFeature(JdkConstants.OVERRIDE_PARSER, fOverrideDefaultParser);\n@@ -403,1 +408,5 @@\n-            return fXMLSchemaLoader.getProperty(name);\n+            \/** Check to see if the property is managed by the security manager **\/\n+            String propertyValue = (fSecurityManager != null) ?\n+                    fSecurityManager.getLimitAsString(name) : null;\n+            return propertyValue != null ? propertyValue :\n+                    fXMLSchemaLoader.getProperty(name);\n@@ -420,0 +429,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -446,1 +456,1 @@\n-                        XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -448,1 +458,1 @@\n-                        XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -458,1 +468,1 @@\n-        else if (name.equals(Constants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n+        else if (name.equals(JdkConstants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n@@ -465,3 +475,2 @@\n-                    fXmlFeatures.setFeature(name, JdkXmlFeatures.State.APIPROPERTY, value)) {\n-            if (name.equals(JdkXmlUtils.OVERRIDE_PARSER)\n-                    || name.equals(Constants.ORACLE_FEATURE_SERVICE_MECHANISM)\n+                    fXmlFeatures.setFeature(name, JdkProperty.State.APIPROPERTY, value)) {\n+            if ((ImplPropMap.OVERRIDEPARSER.is(name))\n@@ -501,1 +510,1 @@\n-        } else if (name.equals(Constants.XML_SECURITY_PROPERTY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.XML_SECURITY_PROPERTY_MANAGER)) {\n@@ -507,1 +516,1 @@\n-            fXMLSchemaLoader.setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n+            fXMLSchemaLoader.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n@@ -518,1 +527,1 @@\n-                    !fSecurityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, object)) {\n+                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, object)) {\n@@ -545,1 +554,1 @@\n-        schema.setFeature(JdkXmlUtils.OVERRIDE_PARSER, fOverrideDefaultParser);\n+        schema.setFeature(JdkConstants.OVERRIDE_PARSER, fOverrideDefaultParser);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -59,0 +61,1 @@\n+ * @LastModified: May 2021\n@@ -141,1 +144,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -268,1 +271,1 @@\n-                JdkXmlUtils.OVERRIDE_PARSER\n+                JdkConstants.OVERRIDE_PARSER\n@@ -276,1 +279,1 @@\n-        fFeatures.put(JdkXmlUtils.OVERRIDE_PARSER, grammarContainer.getFeature(JdkXmlUtils.OVERRIDE_PARSER));\n+        fFeatures.put(JdkConstants.OVERRIDE_PARSER, grammarContainer.getFeature(JdkConstants.OVERRIDE_PARSER));\n@@ -310,1 +313,1 @@\n-                grammarContainer.getProperty(Constants.XML_SECURITY_PROPERTY_MANAGER);\n+                grammarContainer.getProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER);\n@@ -318,2 +321,2 @@\n-        setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE,\n-                grammarContainer.getProperty(JdkXmlUtils.CDATA_CHUNK_SIZE));\n+        setProperty(JdkConstants.CDATA_CHUNK_SIZE,\n+                grammarContainer.getProperty(JdkConstants.CDATA_CHUNK_SIZE));\n@@ -382,1 +385,1 @@\n-                        XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -384,1 +387,1 @@\n-                        XMLSecurityPropertyManager.State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);\n+                        XMLSecurityPropertyManager.State.FSP, JdkConstants.EXTERNAL_ACCESS_DEFAULT_FSP);\n@@ -459,1 +462,1 @@\n-                !fInitSecurityManager.setLimit(propertyId, XMLSecurityManager.State.APIPROPERTY, value)) {\n+                !fInitSecurityManager.setLimit(propertyId, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaValidatorComponentManager.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +43,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -62,1 +63,1 @@\n- *\n+ * @LastModified: May 2021\n@@ -82,1 +83,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -549,1 +550,1 @@\n-        if (propertyId.equals(Constants.XML_SECURITY_PROPERTY_MANAGER)) {\n+        if (propertyId.equals(JdkConstants.XML_SECURITY_PROPERTY_MANAGER)) {\n@@ -555,1 +556,1 @@\n-            setProperty0(Constants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+            setProperty0(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n@@ -566,1 +567,1 @@\n-            setProperty0(Constants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+            setProperty0(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n@@ -579,1 +580,1 @@\n-            if (!securityManager.setLimit(propertyId, XMLSecurityManager.State.APIPROPERTY, value)) {\n+            if (!securityManager.setLimit(propertyId, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/DOMParser.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -91,1 +92,1 @@\n- *\n+ * @LastModified: May 2021\n@@ -191,1 +192,1 @@\n-              Constants.XML_SECURITY_PROPERTY_MANAGER;\n+              JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -314,1 +315,1 @@\n-            JdkXmlUtils.OVERRIDE_PARSER\n+            JdkConstants.OVERRIDE_PARSER\n@@ -328,1 +329,1 @@\n-        fFeatures.put(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+        fFeatures.put(JdkConstants.OVERRIDE_PARSER, JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -351,1 +352,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -436,1 +437,1 @@\n-        setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        setProperty(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/DTDConfiguration.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -65,0 +66,1 @@\n+ * @LastModified: May 2021\n@@ -165,1 +167,1 @@\n-              Constants.XML_SECURITY_PROPERTY_MANAGER;\n+              JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -298,1 +300,1 @@\n-            JdkXmlUtils.OVERRIDE_PARSER\n+            JdkConstants.OVERRIDE_PARSER\n@@ -314,1 +316,1 @@\n-        fFeatures.put(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+        fFeatures.put(JdkConstants.OVERRIDE_PARSER, JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -334,1 +336,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -398,1 +400,1 @@\n-        setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        setProperty(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/NonValidatingConfiguration.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +29,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -41,0 +42,1 @@\n+ * @LastModified: May 2021\n@@ -143,1 +145,1 @@\n-        if (name.equals(Constants.XML_SECURITY_PROPERTY_MANAGER)) {\n+        if (name.equals(JdkConstants.XML_SECURITY_PROPERTY_MANAGER)) {\n@@ -149,1 +151,1 @@\n-            super.setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+            super.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n@@ -160,1 +162,1 @@\n-            super.setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+            super.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n@@ -173,1 +175,1 @@\n-            if (!securityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, value)) {\n+            if (!securityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SAXParser.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -80,1 +81,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: May 2021\n@@ -298,1 +299,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -511,2 +512,2 @@\n-            JdkXmlUtils.RESET_SYMBOL_TABLE,\n-            JdkXmlUtils.OVERRIDE_PARSER\n+            JdkConstants.RESET_SYMBOL_TABLE,\n+            JdkConstants.OVERRIDE_PARSER\n@@ -538,2 +539,2 @@\n-        fFeatures.put(JdkXmlUtils.RESET_SYMBOL_TABLE, JdkXmlUtils.RESET_SYMBOL_TABLE_DEFAULT);\n-        fFeatures.put(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+        fFeatures.put(JdkConstants.RESET_SYMBOL_TABLE, JdkConstants.RESET_SYMBOL_TABLE_DEFAULT);\n+        fFeatures.put(JdkConstants.OVERRIDE_PARSER, JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -576,1 +577,1 @@\n-            JdkXmlUtils.CDATA_CHUNK_SIZE\n+            JdkConstants.CDATA_CHUNK_SIZE\n@@ -647,1 +648,1 @@\n-        setProperty(JdkXmlUtils.CDATA_CHUNK_SIZE, JdkXmlUtils.CDATA_CHUNK_SIZE_DEFAULT);\n+        setProperty(JdkConstants.CDATA_CHUNK_SIZE, JdkConstants.CDATA_CHUNK_SIZE_DEFAULT);\n@@ -1585,1 +1586,1 @@\n-        if (fFeatures.get(JdkXmlUtils.RESET_SYMBOL_TABLE) && !fSymbolTableProvided) {\n+        if (fFeatures.get(JdkConstants.RESET_SYMBOL_TABLE) && !fSymbolTableProvided) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XML11Configuration.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +31,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -52,1 +52,1 @@\n- *\n+ * @LastModified: May 2021\n@@ -137,1 +137,1 @@\n-            fConfiguration.setProperty(Constants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n+            fConfiguration.setProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER, securityPropertyManager);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XMLParser.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -5,1 +4,1 @@\n-\/*\n+ \/*\n@@ -23,1 +22,3 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n+\n+import jdk.xml.internal.JdkConstants;\n+\n@@ -25,14 +26,12 @@\n- * This class is a container for parser settings that relate to\n- * security, or more specifically, it is intended to be used to prevent denial-of-service\n- * attacks from being launched against a system running Xerces.\n- * Any component that is aware of a denial-of-service attack that can arise\n- * from its processing of a certain kind of document may query its Component Manager\n- * for the property (http:\/\/apache.org\/xml\/properties\/security-manager)\n- * whose value will be an instance of this class.\n- * If no value has been set for the property, the component should proceed in the \"usual\" (spec-compliant)\n- * manner.  If a value has been set, then it must be the case that the component in\n- * question needs to know what method of this class to query.  This class\n- * will provide defaults for all known security issues, but will also provide\n- * setters so that those values can be tailored by applications that care.\n- *\n- * @author  Neil Graham, IBM\n+ * This class is a container for parser settings that relate to security, or\n+ * more specifically, it is intended to be used to prevent denial-of-service\n+ * attacks from being launched against a system running Xerces. Any component\n+ * that is aware of a denial-of-service attack that can arise from its\n+ * processing of a certain kind of document may query its Component Manager for\n+ * the property (http:\/\/apache.org\/xml\/properties\/security-manager) whose value\n+ * will be an instance of this class. If no value has been set for the property,\n+ * the component should proceed in the \"usual\" (spec-compliant) manner. If a\n+ * value has been set, then it must be the case that the component in question\n+ * needs to know what method of this class to query. This class will provide\n+ * defaults for all known security issues, but will also provide setters so that\n+ * those values can be tailored by applications that care.\n@@ -40,0 +39,2 @@\n+ * @author Neil Graham, IBM\n+ * @LastModified: May 2021\n@@ -46,1 +47,0 @@\n-\n@@ -50,1 +50,3 @@\n-    \/** Default value of number of nodes created. **\/\n+    \/**\n+     * Default value of number of nodes created. *\n+     *\/\n@@ -56,0 +58,1 @@\n+    private final static int DEFAULT_ELEMENT_ATTRIBUTE_LIMIT = 10000;\n@@ -57,3 +60,3 @@\n-        private final static int DEFAULT_ELEMENT_ATTRIBUTE_LIMIT = 10000;\n-\n-    \/** Entity expansion limit. **\/\n+    \/**\n+     * Entity expansion limit. *\n+     *\/\n@@ -62,1 +65,3 @@\n-    \/** W3C XML Schema maxOccurs limit. **\/\n+    \/**\n+     * W3C XML Schema maxOccurs limit. *\n+     *\/\n@@ -65,1 +70,2 @@\n-        private int fElementAttributeLimit;\n+    private int fElementAttributeLimit;\n+\n@@ -69,2 +75,2 @@\n-     * Default constructor.  Establishes default values\n-     * for known security vulnerabilities.\n+     * Default constructor. Establishes default values for known security\n+     * vulnerabilities.\n@@ -74,5 +80,5 @@\n-        maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT ;\n-                fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n-                \/\/We are reading system properties only once ,\n-                \/\/at the time of creation of this object ,\n-                readSystemProperties();\n+        maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT;\n+        fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n+        \/\/We are reading system properties only once ,\n+        \/\/at the time of creation of this object ,\n+        readSystemProperties();\n@@ -82,2 +88,3 @@\n-     * <p>Sets the number of entity expansions that the\n-     * parser should permit in a document.<\/p>\n+     * <p>\n+     * Sets the number of entity expansions that the parser should permit in a\n+     * document.<\/p>\n@@ -85,2 +92,1 @@\n-     * @param limit the number of entity expansions\n-     * permitted in a document\n+     * @param limit the number of entity expansions permitted in a document\n@@ -93,2 +99,3 @@\n-     * <p>Returns the number of entity expansions\n-     * that the parser permits in a document.<\/p>\n+     * <p>\n+     * Returns the number of entity expansions that the parser permits in a\n+     * document.<\/p>\n@@ -96,2 +103,1 @@\n-     * @return the number of entity expansions\n-     * permitted in a document\n+     * @return the number of entity expansions permitted in a document\n@@ -104,4 +110,4 @@\n-     * <p>Sets the limit of the number of content model nodes\n-     * that may be created when building a grammar for a W3C\n-     * XML Schema that contains maxOccurs attributes with values\n-     * other than \"unbounded\".<\/p>\n+     * <p>\n+     * Sets the limit of the number of content model nodes that may be created\n+     * when building a grammar for a W3C XML Schema that contains maxOccurs\n+     * attributes with values other than \"unbounded\".<\/p>\n@@ -109,2 +115,1 @@\n-     * @param limit the maximum value for maxOccurs other\n-     * than \"unbounded\"\n+     * @param limit the maximum value for maxOccurs other than \"unbounded\"\n@@ -112,1 +117,1 @@\n-    public void setMaxOccurNodeLimit(int limit){\n+    public void setMaxOccurNodeLimit(int limit) {\n@@ -117,4 +122,4 @@\n-     * <p>Returns the limit of the number of content model nodes\n-     * that may be created when building a grammar for a W3C\n-     * XML Schema that contains maxOccurs attributes with values\n-     * other than \"unbounded\".<\/p>\n+     * <p>\n+     * Returns the limit of the number of content model nodes that may be\n+     * created when building a grammar for a W3C XML Schema that contains\n+     * maxOccurs attributes with values other than \"unbounded\".<\/p>\n@@ -122,2 +127,1 @@\n-     * @return the maximum value for maxOccurs other\n-     * than \"unbounded\"\n+     * @return the maximum value for maxOccurs other than \"unbounded\"\n@@ -125,1 +129,1 @@\n-    public int getMaxOccurNodeLimit(){\n+    public int getMaxOccurNodeLimit() {\n@@ -129,2 +133,21 @@\n-    public int getElementAttrLimit(){\n-                return fElementAttributeLimit;\n+    public int getElementAttrLimit() {\n+        return fElementAttributeLimit;\n+    }\n+\n+    public void setElementAttrLimit(int limit) {\n+        fElementAttributeLimit = limit;\n+    }\n+\n+    private void readSystemProperties() {\n+\n+        try {\n+            String value = System.getProperty(JdkConstants.ENTITY_EXPANSION_LIMIT);\n+            if (value != null && !value.equals(\"\")) {\n+                entityExpansionLimit = Integer.parseInt(value);\n+                if (entityExpansionLimit < 0) {\n+                    entityExpansionLimit = DEFAULT_ENTITY_EXPANSION_LIMIT;\n+                }\n+            } else {\n+                entityExpansionLimit = DEFAULT_ENTITY_EXPANSION_LIMIT;\n+            }\n+        } catch (Exception ex) {\n@@ -133,2 +156,11 @@\n-        public void setElementAttrLimit(int limit){\n-                fElementAttributeLimit = limit;\n+        try {\n+            String value = System.getProperty(JdkConstants.MAX_OCCUR_LIMIT);\n+            if (value != null && !value.equals(\"\")) {\n+                maxOccurLimit = Integer.parseInt(value);\n+                if (maxOccurLimit < 0) {\n+                    maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT;\n+                }\n+            } else {\n+                maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT;\n+            }\n+        } catch (Exception ex) {\n@@ -137,35 +169,10 @@\n-        private void readSystemProperties(){\n-\n-                try {\n-                        String value = System.getProperty(Constants.ENTITY_EXPANSION_LIMIT);\n-                        if(value != null && !value.equals(\"\")){\n-                                entityExpansionLimit = Integer.parseInt(value);\n-                                if (entityExpansionLimit < 0)\n-                                        entityExpansionLimit = DEFAULT_ENTITY_EXPANSION_LIMIT;\n-                        }\n-                        else\n-                                entityExpansionLimit = DEFAULT_ENTITY_EXPANSION_LIMIT;\n-                }catch(Exception ex){}\n-\n-                try {\n-                        String value = System.getProperty(Constants.MAX_OCCUR_LIMIT);\n-                        if(value != null && !value.equals(\"\")){\n-                                maxOccurLimit = Integer.parseInt(value);\n-                                if (maxOccurLimit < 0)\n-                                        maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT;\n-                        }\n-                        else\n-                                maxOccurLimit = DEFAULT_MAX_OCCUR_NODE_LIMIT;\n-                }catch(Exception ex){}\n-\n-                try {\n-                        String value = System.getProperty(Constants.ELEMENT_ATTRIBUTE_LIMIT);\n-                        if(value != null && !value.equals(\"\")){\n-                                fElementAttributeLimit = Integer.parseInt(value);\n-                                if ( fElementAttributeLimit < 0)\n-                                        fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n-                        }\n-                        else\n-                                fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n-\n-                }catch(Exception ex){}\n+        try {\n+            String value = System.getProperty(JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n+            if (value != null && !value.equals(\"\")) {\n+                fElementAttributeLimit = Integer.parseInt(value);\n+                if (fElementAttributeLimit < 0) {\n+                    fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n+                }\n+            } else {\n+                fElementAttributeLimit = DEFAULT_ELEMENT_ATTRIBUTE_LIMIT;\n+            }\n@@ -173,0 +180,1 @@\n+        } catch (Exception ex) {\n@@ -175,0 +183,2 @@\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/util\/SecurityManager.java","additions":103,"deletions":93,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n@@ -33,0 +32,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -46,3 +46,3 @@\n-        ENTITY_EXPANSION_LIMIT(Constants.SP_ENTITY_EXPANSION_LIMIT, Constants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(Constants.SP_MAX_OCCUR_LIMIT, Constants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(Constants.SP_ELEMENT_ATTRIBUTE_LIMIT, Constants.ELEMENT_ATTRIBUTE_LIMIT);\n+        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT),\n+        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT),\n+        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLLimitAnalyzer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n@@ -31,0 +30,3 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty.State;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n@@ -40,22 +42,0 @@\n-    \/**\n-     * States of the settings of a property, in the order: default value, value\n-     * set by FEATURE_SECURE_PROCESSING, jaxp.properties file, jaxp system\n-     * properties, and jaxp api properties\n-     *\/\n-    public static enum State {\n-        \/\/this order reflects the overriding order\n-\n-        DEFAULT(\"default\"), FSP(\"FEATURE_SECURE_PROCESSING\"),\n-        JAXPDOTPROPERTIES(\"jaxp.properties\"), SYSTEMPROPERTY(\"system property\"),\n-        APIPROPERTY(\"property\");\n-\n-        final String literal;\n-        State(String literal) {\n-            this.literal = literal;\n-        }\n-\n-        String literal() {\n-            return literal;\n-        }\n-    }\n-\n@@ -65,0 +45,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -68,1 +49,1 @@\n-                Constants.JDK_ENTITY_EXPANSION_LIMIT, Constants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000),\n+                JdkConstants.JDK_ENTITY_EXPANSION_LIMIT, JdkConstants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000),\n@@ -70,1 +51,1 @@\n-                Constants.JDK_MAX_OCCUR_LIMIT, Constants.SP_MAX_OCCUR_LIMIT, 0, 5000),\n+                JdkConstants.JDK_MAX_OCCUR_LIMIT, JdkConstants.SP_MAX_OCCUR_LIMIT, 0, 5000),\n@@ -72,1 +53,1 @@\n-                Constants.JDK_ELEMENT_ATTRIBUTE_LIMIT, Constants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000),\n+                JdkConstants.JDK_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000),\n@@ -74,1 +55,1 @@\n-                Constants.JDK_TOTAL_ENTITY_SIZE_LIMIT, Constants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000),\n+                JdkConstants.JDK_TOTAL_ENTITY_SIZE_LIMIT, JdkConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000),\n@@ -76,1 +57,1 @@\n-                Constants.JDK_GENERAL_ENTITY_SIZE_LIMIT, Constants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0),\n+                JdkConstants.JDK_GENERAL_ENTITY_SIZE_LIMIT, JdkConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0),\n@@ -78,1 +59,1 @@\n-                Constants.JDK_PARAMETER_ENTITY_SIZE_LIMIT, Constants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000),\n+                JdkConstants.JDK_PARAMETER_ENTITY_SIZE_LIMIT, JdkConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000),\n@@ -80,1 +61,1 @@\n-                Constants.JDK_MAX_ELEMENT_DEPTH, Constants.SP_MAX_ELEMENT_DEPTH, 0, 0),\n+                JdkConstants.JDK_MAX_ELEMENT_DEPTH, JdkConstants.SP_MAX_ELEMENT_DEPTH, 0, 0),\n@@ -82,1 +63,1 @@\n-                Constants.JDK_XML_NAME_LIMIT, Constants.SP_XML_NAME_LIMIT, 1000, 1000),\n+                JdkConstants.JDK_XML_NAME_LIMIT, JdkConstants.SP_XML_NAME_LIMIT, 1000, 1000),\n@@ -84,1 +65,1 @@\n-                Constants.JDK_ENTITY_REPLACEMENT_LIMIT, Constants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000);\n+                JdkConstants.JDK_ENTITY_REPLACEMENT_LIMIT, JdkConstants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000);\n@@ -100,2 +81,12 @@\n-        public boolean equalsAPIPropertyName(String propertyName) {\n-            return (propertyName == null) ? false : apiProperty.equals(propertyName);\n+        \/**\n+         * Checks whether the specified name is a limit. Checks both the\n+         * property and System Property which is now the new property name.\n+         *\n+         * @param name the specified name\n+         * @return true if there is a match, false otherwise\n+         *\/\n+        public boolean is(String name) {\n+            \/\/ current spec: new property name == systemProperty\n+            return (systemProperty != null && systemProperty.equals(name)) ||\n+                   \/\/ current spec: apiProperty is legacy\n+                   (apiProperty.equals(name));\n@@ -104,2 +95,16 @@\n-        public boolean equalsSystemPropertyName(String propertyName) {\n-            return (propertyName == null) ? false : systemProperty.equals(propertyName);\n+        \/**\n+         * Returns the state of a property name. By the specification as of JDK 17,\n+         * the \"jdk.xml.\" prefixed System property name is also the current API\n+         * name. The URI-based qName is legacy.\n+         *\n+         * @param name the property name\n+         * @return the state of the property name, null if no match\n+         *\/\n+        public State getState(String name) {\n+            if (systemProperty != null && systemProperty.equals(name)) {\n+                return State.APIPROPERTY;\n+            } else if (apiProperty.equals(name)) {\n+                \/\/the URI-style qName is legacy\n+                return State.LEGACY_APIPROPERTY;\n+            }\n+            return null;\n@@ -116,1 +121,1 @@\n-        String systemProperty() {\n+        public String systemProperty() {\n@@ -134,3 +139,3 @@\n-        ENTITY_EXPANSION_LIMIT(Constants.SP_ENTITY_EXPANSION_LIMIT, Constants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(Constants.SP_MAX_OCCUR_LIMIT, Constants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(Constants.SP_ELEMENT_ATTRIBUTE_LIMIT, Constants.ELEMENT_ATTRIBUTE_LIMIT);\n+        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT),\n+        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT),\n+        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n@@ -231,0 +236,18 @@\n+    \/**\n+     * Finds a limit's new name with the given property name.\n+     * @param propertyName the property name specified\n+     * @return the limit's new name if found, null otherwise\n+     *\/\n+    public String find(String propertyName) {\n+        for (Limit limit : Limit.values()) {\n+            if (limit.is(propertyName)) {\n+                \/\/ current spec: new property name == systemProperty\n+                return limit.systemProperty();\n+            }\n+        }\n+        \/\/ENTITYCOUNT's new name is qName\n+        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n+            return ImplPropMap.ENTITYCOUNT.qName();\n+        }\n+        return null;\n+    }\n@@ -243,1 +266,5 @@\n-            setLimit(index, state, value);\n+            State pState = state;\n+            if (index != indexEntityCountInfo && state == State.APIPROPERTY) {\n+                pState = (Limit.values()[index]).getState(propertyName);\n+            }\n+            setLimit(index, pState, value);\n@@ -272,2 +299,2 @@\n-            if (Integer.class.isAssignableFrom(value.getClass())) {\n-                temp = ((Integer)value).intValue();\n+            if (value instanceof Integer) {\n+                temp = (Integer)value;\n@@ -294,1 +321,1 @@\n-            printEntityCountInfo = Constants.JDK_YES;\n+            printEntityCountInfo = JdkConstants.JDK_YES;\n@@ -382,1 +409,2 @@\n-            if (limit.equalsAPIPropertyName(propertyName)) {\n+            \/\/ see JDK-8265248, accept both the URL and jdk.xml as prefix\n+            if (limit.is(propertyName)) {\n@@ -388,1 +416,1 @@\n-        if (propertyName.equals(Constants.JDK_ENTITY_COUNT_INFO)) {\n+        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n@@ -467,1 +495,1 @@\n-        if (printEntityCountInfo.equals(Constants.JDK_YES)) {\n+        if (printEntityCountInfo.equals(JdkConstants.JDK_YES)) {\n@@ -483,1 +511,1 @@\n-        return printEntityCountInfo.equals(Constants.JDK_YES);\n+        return printEntityCountInfo.equals(JdkConstants.JDK_YES);\n@@ -560,1 +588,1 @@\n-    static public XMLSecurityManager convert(Object value, XMLSecurityManager securityManager) {\n+    public static XMLSecurityManager convert(Object value, XMLSecurityManager securityManager) {\n@@ -567,1 +595,1 @@\n-        if (XMLSecurityManager.class.isAssignableFrom(value.getClass())) {\n+        if (value instanceof XMLSecurityManager) {\n@@ -573,1 +601,1 @@\n-            if (SecurityManager.class.isAssignableFrom(value.getClass())) {\n+            if (value instanceof SecurityManager) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityManager.java","additions":80,"deletions":52,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n@@ -30,0 +29,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -53,1 +53,1 @@\n-                Constants.EXTERNAL_ACCESS_DEFAULT),\n+                JdkConstants.EXTERNAL_ACCESS_DEFAULT),\n@@ -55,1 +55,1 @@\n-                Constants.EXTERNAL_ACCESS_DEFAULT);\n+                JdkConstants.EXTERNAL_ACCESS_DEFAULT);\n@@ -69,0 +69,4 @@\n+        public String propertyName() {\n+            return name;\n+        }\n+\n@@ -95,0 +99,13 @@\n+    \/**\n+     * Finds the property with the given name.\n+     * @param propertyName the property name specified\n+     * @return the property name if found, null otherwise\n+     *\/\n+    public String find(String propertyName) {\n+        for (Property property : Property.values()) {\n+            if (property.equalsName(propertyName)) {\n+                return property.propertyName();\n+            }\n+        }\n+        return null;\n+    }\n@@ -197,1 +214,1 @@\n-                Constants.SP_ACCESS_EXTERNAL_DTD);\n+                JdkConstants.SP_ACCESS_EXTERNAL_DTD);\n@@ -199,1 +216,1 @@\n-                Constants.SP_ACCESS_EXTERNAL_SCHEMA);\n+                JdkConstants.SP_ACCESS_EXTERNAL_SCHEMA);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityPropertyManager.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -130,1 +131,1 @@\n- * @LastModified: Nov 2017\n+ * @LastModified: May 2021\n@@ -249,1 +250,1 @@\n-            Constants.XML_SECURITY_PROPERTY_MANAGER;\n+            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -564,1 +565,1 @@\n-                componentManager.getProperty(Constants.XML_SECURITY_PROPERTY_MANAGER);\n+                componentManager.getProperty(JdkConstants.XML_SECURITY_PROPERTY_MANAGER);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/xinclude\/XIncludeHandler.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n@@ -74,1 +73,1 @@\n- * @LastModified: Feb 2021\n+ * @LastModified: May 2021\n@@ -169,27 +168,0 @@\n-    \/**\n-     * This non-standard, Oracle-impl only property key is used as if\n-     * OutputKeys.STANDALONE is specified but without writing it out in the declaration;\n-     * It can be used to reverse the change by Xalan patch 1495.\n-     * Since Xalan patch 1495 can cause incompatible behavior, this property is\n-     * added for application to neutralize the effect of Xalan patch 1495\n-     *\/\n-    \/**\n-     * <p>Is Standalone<\/p>\n-     *\n-     * <ul>\n-     *   <li>\n-     *     <code>yes<\/code> to indicate the output is intended to be used as standalone\n-     *   <\/li>\n-     *   <li>\n-     *     <code>no<\/code> has no effect.\n-     *   <\/li>\n-     * <\/ul>\n-     *\/\n-    public static final String ORACLE_IS_STANDALONE = \"http:\/\/www.oracle.com\/xml\/is-standalone\";\n-\n-    \/\/ standardized property, refer to the definition in java.xml module-info\n-    public static final String JDK_IS_STANDALONE = Constants.ORACLE_JAXP_PROPERTY_PREFIX +\n-            \"xsltcIsStandalone\";\n-\n-    \/\/ Corresponding System property\n-    public static final String SP_IS_STANDALONE = \"jdk.xml.xsltcIsStandalone\";\n@@ -223,2 +195,1 @@\n-        \"{http:\/\/xml.apache.org\/xalan}entities\",\n-        JDK_IS_STANDALONE\n+        \"{http:\/\/xml.apache.org\/xalan}entities\"\n@@ -237,2 +208,1 @@\n-        \"com\/sun\/org\/apache\/xml\/internal\/serializer\/XMLEntities\",\n-        \"no\"\n+        \"com\/sun\/org\/apache\/xml\/internal\/serializer\/XMLEntities\"\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/OutputPropertiesFactory.java","additions":3,"deletions":33,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +45,1 @@\n+ * @LastModified: May 2021\n@@ -151,2 +151,2 @@\n-     * @param isStandalone true if the http:\/\/www.oracle.com\/xml\/is-standalone is set to yes\n-     * @see OutputPropertiesFactory ORACLE_IS_STANDALONE\n+     * @param b true if the property \"jdk.xml.xsltcIsStandalone\" is set to yes\n+     * @see JdkConstants.SP_XSLTC_IS_Standalone\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/SerializationHandler.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * @LastModified: Aug 2019\n+ * @LastModified: May 2021\n@@ -682,3 +682,3 @@\n-     * Sets the isStandalone property\n-     * @param isStandalone true if the ORACLE_IS_STANDALONE is set to yes\n-     * @see OutputPropertiesFactory ORACLE_IS_STANDALONE\n+     * Sets the implementation specific property \"isStandalone\".\n+     * @param isStandalone the value of the property\n+     * @see JdkConstants.SP_XSLTC_IS_Standalone\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/SerializerBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -55,1 +56,1 @@\n- * @LastModified: Jan 2021\n+ * @LastModified: May 2021\n@@ -497,1 +498,1 @@\n-                } else if ((DOMConstants.NS_IS_STANDALONE)\n+                } else if ((DOMConstants.S_JDK_PROPERTIES_NS + JdkConstants.S_IS_STANDALONE)\n@@ -501,1 +502,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n+import static jdk.xml.internal.JdkConstants.S_IS_STANDALONE;\n@@ -30,1 +30,1 @@\n- * @LastModified: Jan 2021\n+ * @LastModified: May 2021\n@@ -123,13 +123,0 @@\n-    \/**\n-     * Indicates that the serializer should treat the output as a standalone document.\n-     * The JDK specific standalone property controls whether a newline should be\n-     * added after the XML header.\n-     *\n-     * @see similar property ORACLE_IS_STANDALONE in OutputPropertiesFactory.\n-     *\/\n-    public static final String S_IS_STANDALONE = \"isStandalone\";\n-\n-    \/\/ Fully-qualified property name with the JDK Impl prefix\n-    public static final String FQ_IS_STANDALONE =\n-            Constants.ORACLE_JAXP_PROPERTY_PREFIX + S_IS_STANDALONE;\n-\n@@ -139,3 +126,0 @@\n-    \/\/ Corresponding System property\n-    public static final String SP_IS_STANDALONE = \"jdk.xml.isStandalone\";\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/dom3\/DOMConstants.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n@@ -42,1 +41,0 @@\n-import com.sun.org.apache.xml.internal.serializer.SerializerFactory;\n@@ -46,0 +44,4 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -71,1 +73,1 @@\n- * @LastModified: Jan 2021\n+ * @LastModified: May 2021\n@@ -102,0 +104,3 @@\n+    \/\/ The isStandalone property\n+    private JdkProperty<Boolean> fIsStandalone;\n+\n@@ -170,0 +175,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -190,1 +196,2 @@\n-            DOMConstants.FQ_IS_STANDALONE,\n+            JdkConstants.FQ_IS_STANDALONE,\n+            JdkConstants.SP_IS_STANDALONE,\n@@ -361,1 +368,4 @@\n-        String p = SecuritySupport.getJAXPSystemProperty(DOMConstants.SP_IS_STANDALONE);\n+        boolean isStandalone = SecuritySupport.getJAXPSystemProperty(\n+                Boolean.class, JdkConstants.SP_IS_STANDALONE, \"false\");\n+\n+        fIsStandalone = new JdkProperty<>(ImplPropMap.ISSTANDALONE, isStandalone, State.DEFAULT);\n@@ -363,1 +373,1 @@\n-        if (p != null && p.equals(\"true\")) {\n+        if (isStandalone) {\n@@ -385,0 +395,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -399,1 +410,2 @@\n-                    || name.equalsIgnoreCase(DOMConstants.FQ_IS_STANDALONE)){\n+                    || name.equalsIgnoreCase(JdkConstants.FQ_IS_STANDALONE)\n+                    || name.equalsIgnoreCase(JdkConstants.SP_IS_STANDALONE)){\n@@ -457,1 +469,1 @@\n-        } else if (name.equalsIgnoreCase(DOMConstants.FQ_IS_STANDALONE)) {\n+        } else if (ImplPropMap.ISSTANDALONE.is(name)) {\n@@ -520,1 +532,1 @@\n-            boolean state = ((Boolean) value).booleanValue();\n+            boolean bValue = ((Boolean) value);\n@@ -523,1 +535,1 @@\n-                fFeatures = state ? fFeatures | COMMENTS : fFeatures\n+                fFeatures = bValue ? fFeatures | COMMENTS : fFeatures\n@@ -526,1 +538,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -534,1 +546,1 @@\n-                fFeatures =  state ? fFeatures | CDATA : fFeatures\n+                fFeatures =  bValue ? fFeatures | CDATA : fFeatures\n@@ -537,1 +549,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -545,1 +557,1 @@\n-                fFeatures = state ? fFeatures | ENTITIES : fFeatures\n+                fFeatures = bValue ? fFeatures | ENTITIES : fFeatures\n@@ -548,1 +560,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -556,1 +568,1 @@\n-                fFeatures = state ? fFeatures | NAMESPACES : fFeatures\n+                fFeatures = bValue ? fFeatures | NAMESPACES : fFeatures\n@@ -559,1 +571,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -568,1 +580,1 @@\n-                fFeatures = state ? fFeatures | NAMESPACEDECLS\n+                fFeatures = bValue ? fFeatures | NAMESPACEDECLS\n@@ -571,1 +583,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -579,1 +591,1 @@\n-                fFeatures = state ? fFeatures | SPLITCDATA : fFeatures\n+                fFeatures = bValue ? fFeatures | SPLITCDATA : fFeatures\n@@ -582,1 +594,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -590,1 +602,1 @@\n-                fFeatures = state ? fFeatures | WELLFORMED : fFeatures\n+                fFeatures = bValue ? fFeatures | WELLFORMED : fFeatures\n@@ -593,1 +605,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -602,1 +614,1 @@\n-                fFeatures = state ? fFeatures | DISCARDDEFAULT\n+                fFeatures = bValue ? fFeatures | DISCARDDEFAULT\n@@ -605,1 +617,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -613,1 +625,1 @@\n-                fFeatures = state ? fFeatures | PRETTY_PRINT : fFeatures\n+                fFeatures = bValue ? fFeatures | PRETTY_PRINT : fFeatures\n@@ -615,1 +627,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -622,1 +634,1 @@\n-                fFeatures = state ? fFeatures | XMLDECL : fFeatures\n+                fFeatures = bValue ? fFeatures | XMLDECL : fFeatures\n@@ -624,1 +636,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -629,4 +641,5 @@\n-            } else if (name.equalsIgnoreCase(DOMConstants.FQ_IS_STANDALONE)) {\n-                fFeatures = state ? fFeatures | IS_STANDALONE : fFeatures & ~IS_STANDALONE;\n-                fDOMConfigProperties.setProperty(DOMConstants.NS_IS_STANDALONE, state ? \"yes\" : \"no\");\n-\n+            } else if (ImplPropMap.ISSTANDALONE.is(name)) {\n+                fIsStandalone.setValue(name, bValue, State.APIPROPERTY);\n+                fFeatures = fIsStandalone.getValue() ? fFeatures | IS_STANDALONE : fFeatures & ~IS_STANDALONE;\n+                fDOMConfigProperties.setProperty(DOMConstants.NS_IS_STANDALONE,\n+                        fIsStandalone.getValue() ? DOMConstants.DOM3_EXPLICIT_TRUE : DOMConstants.DOM3_EXPLICIT_FALSE);\n@@ -634,1 +647,1 @@\n-                fFeatures = state ? fFeatures | ELEM_CONTENT_WHITESPACE : fFeatures\n+                fFeatures = bValue ? fFeatures | ELEM_CONTENT_WHITESPACE : fFeatures\n@@ -637,1 +650,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -646,1 +659,1 @@\n-                if (!state) {\n+                if (!bValue) {\n@@ -664,1 +677,1 @@\n-                if (state) {\n+                if (bValue) {\n@@ -691,1 +704,1 @@\n-                if (state) {\n+                if (bValue) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/dom3\/LSSerializerImpl.java","additions":51,"deletions":38,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -28,0 +27,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -40,1 +40,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: May 2021\n@@ -64,1 +64,1 @@\n-    private String _accessExternalDTD = XalanConstants.EXTERNAL_ACCESS_DEFAULT;\n+    private String _accessExternalDTD = JdkConstants.EXTERNAL_ACCESS_DEFAULT;\n@@ -139,1 +139,1 @@\n-        JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkXmlUtils.CDATA_CHUNK_SIZE,\n+        JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkConstants.CDATA_CHUNK_SIZE,\n@@ -151,2 +151,2 @@\n-                    lastProperty = XalanConstants.JDK_ENTITY_COUNT_INFO;\n-                    reader.setProperty(XalanConstants.JDK_ENTITY_COUNT_INFO, XalanConstants.JDK_YES);\n+                    lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n+                    reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n@@ -224,1 +224,1 @@\n-        } else if (name.equals(XalanConstants.SECURITY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.SECURITY_MANAGER)) {\n@@ -236,1 +236,1 @@\n-        } else if (name.equals(XalanConstants.SECURITY_MANAGER)) {\n+        } else if (name.equals(JdkConstants.SECURITY_MANAGER)) {\n@@ -240,1 +240,1 @@\n-        } else if (JdkXmlUtils.CDATA_CHUNK_SIZE.equals(name)) {\n+        } else if (JdkConstants.CDATA_CHUNK_SIZE.equals(name)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/utils\/XMLReaderManager.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.xml.internal.JdkXmlUtils;\n+import jdk.xml.internal.JdkConstants;\n@@ -57,0 +57,1 @@\n+ * @LastModified: May 2021\n@@ -76,1 +77,1 @@\n-    xpathSupport = new XPathContext(JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+    xpathSupport = new XPathContext(JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -331,1 +332,1 @@\n-    XPathContext xpathSupport = new XPathContext(JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+    XPathContext xpathSupport = new XPathContext(JdkConstants.OVERRIDE_PARSER_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/CachedXPathAPI.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.xml.internal.JdkXmlUtils;\n+import jdk.xml.internal.JdkConstants;\n@@ -52,0 +52,1 @@\n+ * @LastModified: May 2021\n@@ -224,1 +225,1 @@\n-    XPathContext xpathSupport = new XPathContext(JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+    XPathContext xpathSupport = new XPathContext(JdkConstants.OVERRIDE_PARSER_DEFAULT);\n@@ -279,1 +280,1 @@\n-    XPathContext xpathSupport = new XPathContext(JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);\n+    XPathContext xpathSupport = new XPathContext(JdkConstants.OVERRIDE_PARSER_DEFAULT);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/XPathAPI.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-import com.sun.org.apache.xalan.internal.XalanConstants;\n@@ -31,0 +30,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty;\n@@ -37,0 +38,2 @@\n+ *\n+ * @LastModified: May 2021\n@@ -156,0 +159,1 @@\n+        @SuppressWarnings(\"deprecation\")\n@@ -179,1 +183,1 @@\n-                            JdkXmlFeatures.State.FSP, false);\n+                            JdkProperty.State.FSP, false);\n@@ -185,1 +189,1 @@\n-            if (name.equals(XalanConstants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n+            if (name.equals(JdkConstants.ORACLE_FEATURE_SERVICE_MECHANISM)) {\n@@ -192,1 +196,1 @@\n-                    _featureManager.setFeature(name, JdkXmlFeatures.State.APIPROPERTY, value)) {\n+                    _featureManager.setFeature(name, JdkProperty.State.APIPROPERTY, value)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/XPathFactoryImpl.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,43 +39,3 @@\n- * that uses the following implementation resolution mechanisms to determine an implementation:\n- * <ol>\n- *    <li>\n- *      If the system property specified by {@link #DATATYPEFACTORY_PROPERTY}, \"{@code javax.xml.datatype.DatatypeFactory}\",\n- *      exists, a class with the name of the property value is instantiated.\n- *      Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.\n- *    <\/li>\n- *    <li>\n- *      <p>\n- *      Use the configuration file \"jaxp.properties\". The file is in standard\n- *      {@link java.util.Properties} format and typically located in the\n- *      {@code conf} directory of the Java installation. It contains the fully qualified\n- *      name of the implementation class with the key being the system property\n- *      defined above.\n- *      <p>\n- *      The jaxp.properties file is read only once by the JAXP implementation\n- *      and its values are then cached for future use.  If the file does not exist\n- *      when the first attempt is made to read from it, no further attempts are\n- *      made to check for its existence.  It is not possible to change the value\n- *      of any property in jaxp.properties after it has been read for the first time.\n- *    <\/li>\n- *    <li>\n- *     <p>\n- *     Use the service-provider loading facility, defined by the {@link java.util.ServiceLoader} class, to attempt\n- *     to locate and load an implementation of the service using the {@linkplain\n- *     java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:\n- *     the service-provider loading facility will use the {@linkplain\n- *     java.lang.Thread#getContextClassLoader() current thread's context class loader}\n- *     to attempt to load the service. If the context class\n- *     loader is null, the {@linkplain\n- *     ClassLoader#getSystemClassLoader() system class loader} will be used.\n- *     <p>\n- *     In case of {@link java.util.ServiceConfigurationError service\n- *     configuration error}, a {@link javax.xml.datatype.DatatypeConfigurationException}\n- *     will be thrown.\n- *    <\/li>\n- *    <li>\n- *      <p>\n- *      The final mechanism is to attempt to instantiate the {@code Class} specified by\n- *      {@link #DATATYPEFACTORY_IMPLEMENTATION_CLASS}.\n- *      Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.\n- *    <\/li>\n- * <\/ol>\n+ * that uses the\n+ * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+ * to determine the {@code DatatypeFactory} implementation class to load.\n@@ -155,3 +115,3 @@\n-     *\n-     * <p>The implementation resolution mechanisms are <a href=\"#DatatypeFactory.newInstance\">defined<\/a> in this\n-     * {@code Class}'s documentation.\n+     * This method uses the\n+     * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+     * to determine the {@code DatatypeFactory} implementation class to load.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/datatype\/DatatypeFactory.java","additions":7,"deletions":47,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,377 @@\n+\/*\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.xml.internal;\n+\n+\/**\n+ * This class holds constants shared across XML components. Historically, there\n+ * had been a component boundary within which some constants were duplicated for\n+ * each component, such as Xerces and Xalan.\n+ *\/\n+public final class JdkConstants {\n+\n+    \/\/\n+    \/\/ Constants\n+    \/\/\n+    \/\/Xerces security manager\n+    public static final String SECURITY_MANAGER =\n+            \"http:\/\/apache.org\/xml\/properties\/security-manager\";\n+\n+    \/\/\n+    \/\/ Implementation limits: API properties\n+    \/\/\n+\n+    \/**\n+     * Oracle JAXP property prefix.\n+     *\n+     * @deprecated Use {@code jdk.xml.} instead. Refer to specifications in\n+     * the module summary.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String ORACLE_JAXP_PROPERTY_PREFIX =\n+        \"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\";\n+\n+    \/**\n+     * JDK entity expansion limit. Note that the existing system property\n+     * \"entityExpansionLimit\" with no prefix is still observed.\n+     *\n+     * @deprecated Use {@link #SP_ENTITY_EXPANSION_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_ENTITY_EXPANSION_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"entityExpansionLimit\";\n+\n+    \/**\n+     * JDK element attribute limit. Note that the existing system property\n+     * \"elementAttributeLimit\" with no prefix is still observed.\n+     *\n+     * @deprecated Use {@link #SP_ELEMENT_ATTRIBUTE_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_ELEMENT_ATTRIBUTE_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"elementAttributeLimit\";\n+\n+    \/**\n+     * JDK maxOccur limit. Note that the existing system property\n+     * \"maxOccurLimit\" with no prefix is still observed\n+     *\n+     * @deprecated Use {@link #SP_ENTITY_EXPANSION_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_MAX_OCCUR_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"maxOccurLimit\";\n+\n+    \/**\n+     * JDK total entity size limit.\n+     *\n+     * @deprecated Use {@link #SP_TOTAL_ENTITY_SIZE_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_TOTAL_ENTITY_SIZE_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"totalEntitySizeLimit\";\n+\n+    \/**\n+     * JDK maximum general entity size limit.\n+     *\n+     * @deprecated Use {@link #SP_GENERAL_ENTITY_SIZE_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_GENERAL_ENTITY_SIZE_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"maxGeneralEntitySizeLimit\";\n+\n+    \/**\n+     * JDK node count limit in entities that limits the total number of nodes\n+     * in all of entity references.\n+     *\n+     * @deprecated Use {@link #SP_ENTITY_REPLACEMENT_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_ENTITY_REPLACEMENT_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"entityReplacementLimit\";\n+\n+    \/**\n+     * JDK maximum parameter entity size limit.\n+     *\n+     * @deprecated Use {@link #SP_PARAMETER_ENTITY_SIZE_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_PARAMETER_ENTITY_SIZE_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"maxParameterEntitySizeLimit\";\n+    \/**\n+     * JDK maximum XML name limit.\n+     *\n+     * @deprecated Use {@link #SP_XML_NAME_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_XML_NAME_LIMIT =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"maxXMLNameLimit\";\n+\n+    \/**\n+     * JDK maxElementDepth limit.\n+     *\n+     * @deprecated Use {@link #SP_MAX_ELEMENT_DEPTH} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_MAX_ELEMENT_DEPTH =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"maxElementDepth\";\n+\n+    \/**\n+     * JDK property indicating whether the parser shall print out entity\n+     * count information.\n+     * Value: a string \"yes\" means print, \"no\" or any other string means not.\n+     *\n+     * @deprecated Use {@link #JDK_DEBUG_LIMIT} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_ENTITY_COUNT_INFO =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"getEntityCountInfo\";\n+\n+    public static final String JDK_DEBUG_LIMIT = \"jdk.xml.getEntityCountInfo\";\n+\n+    \/\/\n+    \/\/ Implementation limits: corresponding System Properties of the above\n+    \/\/ API properties.\n+    \/\/\n+    \/\/ Note: as of JDK 17, properties and System properties now share the same\n+    \/\/ name with a prefix \"jdk.xml.\".\n+    \/\/\n+    \/**\n+     * JDK entity expansion limit; Note that the existing system property\n+     * \"entityExpansionLimit\" with no prefix is still observed\n+     *\/\n+    public static final String SP_ENTITY_EXPANSION_LIMIT = \"jdk.xml.entityExpansionLimit\";\n+\n+    \/**\n+     * JDK element attribute limit; Note that the existing system property\n+     * \"elementAttributeLimit\" with no prefix is still observed\n+     *\/\n+    public static final String SP_ELEMENT_ATTRIBUTE_LIMIT =  \"jdk.xml.elementAttributeLimit\";\n+\n+    \/**\n+     * JDK maxOccur limit; Note that the existing system property\n+     * \"maxOccurLimit\" with no prefix is still observed\n+     *\/\n+    public static final String SP_MAX_OCCUR_LIMIT = \"jdk.xml.maxOccurLimit\";\n+\n+    \/**\n+     * JDK total entity size limit\n+     *\/\n+    public static final String SP_TOTAL_ENTITY_SIZE_LIMIT = \"jdk.xml.totalEntitySizeLimit\";\n+\n+    \/**\n+     * JDK maximum general entity size limit\n+     *\/\n+    public static final String SP_GENERAL_ENTITY_SIZE_LIMIT = \"jdk.xml.maxGeneralEntitySizeLimit\";\n+\n+    \/**\n+     * JDK node count limit in entities that limits the total number of nodes\n+     * in all of entity references.\n+     *\/\n+    public static final String SP_ENTITY_REPLACEMENT_LIMIT = \"jdk.xml.entityReplacementLimit\";\n+\n+    \/**\n+     * JDK maximum parameter entity size limit\n+     *\/\n+    public static final String SP_PARAMETER_ENTITY_SIZE_LIMIT = \"jdk.xml.maxParameterEntitySizeLimit\";\n+    \/**\n+     * JDK maximum XML name limit\n+     *\/\n+    public static final String SP_XML_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n+\n+    \/**\n+     * JDK maxElementDepth limit\n+     *\/\n+    public static final String SP_MAX_ELEMENT_DEPTH = \"jdk.xml.maxElementDepth\";\n+\n+    \/**\n+     * JDK TransformerFactory and Transformer attribute that specifies a class\n+     * loader that will be used for extension functions class loading\n+     * Value: a \"null\", the default value, means that the default EF class loading\n+     * path will be used.\n+     * Instance of ClassLoader: the specified instance of ClassLoader will be used\n+     * for extension functions loading during translation process\n+     *\/\n+    public static final String JDK_EXTENSION_CLASSLOADER = \"jdk.xml.transform.extensionClassLoader\";\n+    \/\/ spec-compatible name with a prefix \"jdk.xml\"\n+    public static final String JDK_EXT_CLASSLOADER = \"jdk.xml.extensionClassLoader\";\n+\n+    \/\/legacy System Properties\n+    public final static String ENTITY_EXPANSION_LIMIT = \"entityExpansionLimit\";\n+    public static final String ELEMENT_ATTRIBUTE_LIMIT = \"elementAttributeLimit\" ;\n+    public final static String MAX_OCCUR_LIMIT = \"maxOccurLimit\";\n+\n+    \/**\n+     * A string \"yes\" that can be used for properties such as getEntityCountInfo\n+     *\/\n+    public static final String JDK_YES = \"yes\";\n+\n+    \/\/ Oracle Feature:\n+    \/**\n+     * <p>Use Service Mechanism<\/p>\n+     *\n+     * <ul>\n+     *   <li>\n+     * {@code true} instruct an object to use service mechanism to\n+     * find a service implementation. This is the default behavior.\n+     *   <\/li>\n+     *   <li>\n+     * {@code false} instruct an object to skip service mechanism and\n+     * use the default implementation for that service.\n+     *   <\/li>\n+     * <\/ul>\n+     * @deprecated Use {@link jdk.xml.internal.JdkXmlUtils#OVERRIDE_PARSER} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String ORACLE_FEATURE_SERVICE_MECHANISM =\n+            \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n+\n+    \/\/System Properties corresponding to ACCESS_EXTERNAL_* properties\n+    public static final String SP_ACCESS_EXTERNAL_STYLESHEET = \"javax.xml.accessExternalStylesheet\";\n+    public static final String SP_ACCESS_EXTERNAL_DTD = \"javax.xml.accessExternalDTD\";\n+    public static final String SP_ACCESS_EXTERNAL_SCHEMA = \"javax.xml.accessExternalSchema\";\n+\n+    \/\/all access keyword\n+    public static final String ACCESS_EXTERNAL_ALL = \"all\";\n+\n+    \/**\n+     * Default value when FEATURE_SECURE_PROCESSING (FSP) is set to true\n+     *\/\n+    public static final String EXTERNAL_ACCESS_DEFAULT_FSP = \"\";\n+\n+    \/**\n+     * FEATURE_SECURE_PROCESSING (FSP) is false by default\n+     *\/\n+    public static final String EXTERNAL_ACCESS_DEFAULT = ACCESS_EXTERNAL_ALL;\n+\n+    public static final String XML_SECURITY_PROPERTY_MANAGER =\n+            \"jdk.xml.xmlSecurityPropertyManager\";\n+\n+    \/**\n+     * Values for a feature\n+     *\/\n+    public static final String FEATURE_TRUE = \"true\";\n+    public static final String FEATURE_FALSE = \"false\";\n+\n+    \/**\n+     * For DOM Serializer.\n+     *\n+     * Indicates that the serializer should treat the output as a standalone document.\n+     * The JDK specific standalone property controls whether a newline should be\n+     * added after the XML header.\n+     *\n+     * @see similar property xsltcIsStandalone for XSLTC.\n+     *\/\n+    public static final String S_IS_STANDALONE = \"isStandalone\";\n+\n+    \/**\n+     * Fully-qualified property name with the JDK Impl prefix.\n+     *\n+     * @deprecated Use {@link #SP_IS_STANDALONE} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String FQ_IS_STANDALONE = ORACLE_JAXP_PROPERTY_PREFIX + S_IS_STANDALONE;\n+\n+    \/\/ Corresponding System property\n+    public static final String SP_IS_STANDALONE = \"jdk.xml.isStandalone\";\n+\n+    \/**\n+     * For XSLTC.\n+     *\n+     * Instructs the processor to act as if OutputKeys.STANDALONE is specified\n+     * but without writing it out in the declaration.\n+     * This property may be used to mitigate the effect of Xalan patch 1495 that\n+     * has caused incompatible behaviors.\n+     *\/\n+    \/**\n+     * <p>Is Standalone<\/p>\n+     *\n+     * <ul>\n+     *   <li>\n+     *     <code>yes<\/code> to indicate the output is intended to be used as standalone\n+     *   <\/li>\n+     *   <li>\n+     *     <code>no<\/code> has no effect.\n+     *   <\/li>\n+     * <\/ul>\n+     *\n+     * @deprecated Use {@link #SP_XSLTC_IS_STANDALONE} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String ORACLE_IS_STANDALONE = \"http:\/\/www.oracle.com\/xml\/is-standalone\";\n+\n+    \/**\n+     * This property was added to align with those that used ORACLE_JAXP_PROPERTY_PREFIX\n+     * as prefix.\n+     * @deprecated Use {@link #SP_XSLTC_IS_STANDALONE} instead.\n+     *\/\n+    @Deprecated (since=\"17\")\n+    public static final String JDK_IS_STANDALONE = ORACLE_JAXP_PROPERTY_PREFIX +\n+            \"xsltcIsStandalone\";\n+\n+    \/\/ Corresponding System property\n+    public static final String SP_XSLTC_IS_STANDALONE = \"jdk.xml.xsltcIsStandalone\";\n+\n+    \/**\n+     * Feature enableExtensionFunctions\n+     *\/\n+    public static final String ORACLE_ENABLE_EXTENSION_FUNCTION =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"enableExtensionFunctions\";\n+    public static final String SP_ENABLE_EXTENSION_FUNCTION =\n+            \"javax.xml.enableExtensionFunctions\";\n+    \/\/ This is the correct name by the spec\n+    public static final String SP_ENABLE_EXTENSION_FUNCTION_SPEC =\n+            \"jdk.xml.enableExtensionFunctions\";\n+\n+    \/**\n+     * Reset SymbolTable feature System property name is identical to feature\n+     * name\n+     *\/\n+    public final static String RESET_SYMBOL_TABLE = \"jdk.xml.resetSymbolTable\";\n+    \/**\n+     * Default value of RESET_SYMBOL_TABLE. This will read the System property\n+     *\/\n+    public static final boolean RESET_SYMBOL_TABLE_DEFAULT\n+            = SecuritySupport.getJAXPSystemProperty(Boolean.class, RESET_SYMBOL_TABLE, \"false\");\n+\n+    \/**\n+     * jdk.xml.overrideDefaultParser: enables the use of a 3rd party's parser\n+     * implementation to override the system-default parser.\n+     *\/\n+    public static final String OVERRIDE_PARSER = \"jdk.xml.overrideDefaultParser\";\n+    public static final boolean OVERRIDE_PARSER_DEFAULT = SecuritySupport.getJAXPSystemProperty(\n+                    Boolean.class, OVERRIDE_PARSER, \"false\");\n+\n+    \/**\n+     * instructs the parser to return the data in a CData section in a single chunk\n+     * when the property is zero or unspecified, or in multiple chunks when it is\n+     * greater than zero. The parser shall split the data by linebreaks, and any\n+     * chunks that are larger than the specified size to ones that are equal to\n+     * or smaller than the size.\n+     *\/\n+    public final static String CDATA_CHUNK_SIZE = \"jdk.xml.cdataChunkSize\";\n+    public static final int CDATA_CHUNK_SIZE_DEFAULT\n+            = SecuritySupport.getJAXPSystemProperty(Integer.class, CDATA_CHUNK_SIZE, \"0\");\n+\n+}\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":377,"deletions":0,"binary":false,"changes":377,"status":"added"},{"patch":"@@ -0,0 +1,254 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.xml.internal;\n+\n+import static jdk.xml.internal.JdkConstants.FQ_IS_STANDALONE;\n+import static jdk.xml.internal.JdkConstants.JDK_DEBUG_LIMIT;\n+import static jdk.xml.internal.JdkConstants.JDK_ENTITY_COUNT_INFO;\n+import static jdk.xml.internal.JdkConstants.JDK_EXTENSION_CLASSLOADER;\n+import static jdk.xml.internal.JdkConstants.JDK_EXT_CLASSLOADER;\n+import static jdk.xml.internal.JdkConstants.JDK_IS_STANDALONE;\n+import static jdk.xml.internal.JdkConstants.ORACLE_IS_STANDALONE;\n+import static jdk.xml.internal.JdkConstants.SP_IS_STANDALONE;\n+import static jdk.xml.internal.JdkConstants.SP_XSLTC_IS_STANDALONE;\n+import static jdk.xml.internal.JdkConstants.ORACLE_ENABLE_EXTENSION_FUNCTION;\n+import static jdk.xml.internal.JdkConstants.ORACLE_FEATURE_SERVICE_MECHANISM;\n+import static jdk.xml.internal.JdkConstants.SP_ENABLE_EXTENSION_FUNCTION;\n+import static jdk.xml.internal.JdkConstants.SP_ENABLE_EXTENSION_FUNCTION_SPEC;\n+import static jdk.xml.internal.JdkConstants.CDATA_CHUNK_SIZE;\n+import static jdk.xml.internal.JdkConstants.OVERRIDE_PARSER;\n+import static jdk.xml.internal.JdkConstants.RESET_SYMBOL_TABLE;\n+\n+\/**\n+ * Represents a JDK Implementation Specific Property. This class holds the name\n+ * and value of a property along with a state indicating the means through which\n+ * the property has been set. The value may change only if the setter has a state\n+ * that represents an equal or higher overriding order.\n+ *\n+ * @param <T> the type of the property value.\n+ *\/\n+public final class JdkProperty<T> {\n+\n+    private ImplPropMap pName;\n+    private T pValue;\n+    private State pState = State.DEFAULT;\n+\n+    \/**\n+     * Constructs a JDkProperty.\n+     * @param name the name of the property\n+     * @param value the initial value\n+     * @param state the state of the property\n+     *\/\n+    public JdkProperty(ImplPropMap name, T value, State state) {\n+        this.pName = name;\n+        this.pValue = value;\n+        this.pState = state;\n+    }\n+\n+    \/**\n+     * Returns the property value.\n+     * @return the property value\n+     *\/\n+    public T getValue() {\n+        return pValue;\n+    }\n+\n+    \/**\n+     * Sets the property value. The value is set only if the setter has a higher\n+     * overriding order.\n+     * @param name the property name\n+     * @param value the value\n+     * @param state the state of the specified property\n+     * @return true if the value is set successfully (because the setter has a\n+     * higher order); false otherwise.\n+     *\/\n+    public boolean setValue(String name, T value, State state) {\n+        State pState1;\n+        if ((pState1 = pName.getState(name)) != null) {\n+            if (pState1.compareTo(this.pState) >= 0) {\n+                this.pState = pState1;\n+                pValue = value;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Properties Name Map that includes Implementation-Specific Features and\n+     * Properties except the limits that are defined in XMLSecurityManager.\n+     * The purpose of the map is to provide a map between the new property names\n+     * with a prefix \"jdk.xml\" as defined in the module summary and legacy names\n+     * with URL style prefixes. The new names are the same as those of their\n+     * System Properties.\n+     *\/\n+    @SuppressWarnings(\"deprecation\")\n+    public static enum ImplPropMap {\n+\n+        ISSTANDALONE(\"isStandalone\", FQ_IS_STANDALONE, SP_IS_STANDALONE, true, null, null),\n+        XSLTCISSTANDALONE(\"xsltcIsStandalone\", JDK_IS_STANDALONE, SP_XSLTC_IS_STANDALONE,\n+            true, ORACLE_IS_STANDALONE, null),\n+        CDATACHUNKSIZE(\"cdataChunkSize\", CDATA_CHUNK_SIZE, CDATA_CHUNK_SIZE, false, null, null),\n+        EXTCLSLOADER(\"extensionClassLoader\", JDK_EXT_CLASSLOADER, null,\n+            true, JDK_EXTENSION_CLASSLOADER, null),\n+        ENABLEEXTFUNC(\"enableExtensionFunctions\", ORACLE_ENABLE_EXTENSION_FUNCTION,\n+            SP_ENABLE_EXTENSION_FUNCTION_SPEC, true, null, SP_ENABLE_EXTENSION_FUNCTION),\n+        OVERRIDEPARSER(\"overrideDefaultParser\", OVERRIDE_PARSER, OVERRIDE_PARSER,\n+            false, ORACLE_FEATURE_SERVICE_MECHANISM, ORACLE_FEATURE_SERVICE_MECHANISM),\n+        RESETSYMBOLTABLE(\"resetSymbolTable\", RESET_SYMBOL_TABLE, RESET_SYMBOL_TABLE,\n+            false, null, null),\n+        ENTITYCOUNT(\"getEntityCountInfo\", JDK_DEBUG_LIMIT, null, true, JDK_ENTITY_COUNT_INFO, null)\n+        ;\n+\n+        private final String name;\n+        private final String qName;\n+        private final String spName;\n+        private final boolean differ;\n+        private final String oldQName;\n+        private final String oldSPName;\n+\n+        \/**\n+         * Constructs an instance.\n+         * @param name the property name\n+         * @param qName the qualified property name\n+         * @param spName the corresponding System Property\n+         * @param differ a flag indicating whether qName and spName are the same\n+         * @param oldName the legacy property name, null if N\/A\n+         * @param oldSPName the legacy System Property name, null if N\/A\n+         *\/\n+        ImplPropMap(String name, String qName, String spName, boolean differ,\n+                String oldQName, String oldSPName) {\n+            this.name = name;\n+            this.qName = qName;\n+            this.spName = spName;\n+            this.differ = differ;\n+            this.oldQName = oldQName;\n+            this.oldSPName = oldSPName;\n+        }\n+\n+        \/**\n+         * Checks whether the specified name is the property. Checks both the\n+         * property and System Property if they differ. Checks also the legacy\n+         * name if applicable.\n+         *\n+         * @param name the specified name\n+         * @return true if there is a match, false otherwise\n+         *\/\n+        public boolean is(String name) {\n+            \/\/ current spec calls for using a name same as spName\n+            return (spName != null && spName.equals(name)) ||\n+                   \/\/ check qName only if it differs from spName\n+                   (differ && qName.equals(name)) ||\n+                   \/\/ check the legacy name if applicable\n+                   (oldQName != null && oldQName.equals(name));\n+        }\n+\n+        \/**\n+         * Returns the value indicating whether the qName and spName are different.\n+         * @return the value indicating whether the qName and spName are different\n+         *\/\n+        public boolean isNameDiffer() {\n+            return differ;\n+        }\n+\n+        \/**\n+         * Returns the state of a property name. By the specification as of JDK 17,\n+         * the \"jdk.xml.\" prefixed System property name is also the current API\n+         * name. Both the URI-based qName and old name if any are legacy.\n+         *\n+         * @param name the property name\n+         * @return the state of the property name, null if no match\n+         *\/\n+        public State getState(String name) {\n+            if ((spName != null && spName.equals(name)) ||\n+                    (spName == null && qName.equals(name))) {\n+                return State.APIPROPERTY;\n+            } else if ((differ && qName.equals(name)) ||\n+                   (oldQName != null && oldQName.equals(name))) {\n+                \/\/both the URI-style qName and an old name if any are legacy\n+                return State.LEGACY_APIPROPERTY;\n+            }\n+            return null;\n+        }\n+\n+        \/**\n+         * Returns the qualified name of the property.\n+         *\n+         * @return the qualified name of the property\n+         *\/\n+        public String qName() {\n+            return qName;\n+        }\n+\n+        \/**\n+         * Returns the legacy name of the property.\n+         *\n+         * @return the legacy name of the property\n+         *\/\n+        public String qNameOld() {\n+            return oldQName;\n+        }\n+\n+        \/**\n+         * Returns the name of the corresponding System Property.\n+         *\n+         * @return the name of the System Property\n+         *\/\n+        public String systemProperty() {\n+            return spName;\n+        }\n+\n+        \/**\n+         * Returns the name of the legacy System Property.\n+         *\n+         * @return the name of the legacy System Property\n+         *\/\n+        public String systemPropertyOld() {\n+            return oldSPName;\n+        }\n+    }\n+\n+    \/**\n+     * Represents the state of the settings of a property. The states are in\n+     * descending order: the default value, value set by FEATURE_SECURE_PROCESSING (FSP),\n+     * in jaxp.properties, by legacy or new system property, and on factories\n+     * using legacy or new property names.\n+     *\/\n+    public static enum State {\n+        \/\/this order reflects the overriding order\n+        DEFAULT(\"default\"), FSP(\"FEATURE_SECURE_PROCESSING\"), JAXPDOTPROPERTIES(\"jaxp.properties\"),\n+        LEGACY_SYSTEMPROPERTY(\"legacy system property\"), SYSTEMPROPERTY(\"system property\"),\n+        LEGACY_APIPROPERTY(\"legacy property\"), APIPROPERTY(\"property\");\n+\n+        final String literal;\n+        State(String literal) {\n+            this.literal = literal;\n+        }\n+\n+        public String literal() {\n+            return literal;\n+        }\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkProperty.java","additions":254,"deletions":0,"binary":false,"changes":254,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import static jdk.xml.internal.JdkXmlUtils.OVERRIDE_PARSER;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -31,1 +32,0 @@\n-import static jdk.xml.internal.JdkXmlUtils.RESET_SYMBOL_TABLE;\n@@ -44,13 +44,0 @@\n-    public static final String ORACLE_FEATURE_SERVICE_MECHANISM =\n-            \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n-\n-    \/**\n-     * Feature enableExtensionFunctions\n-     *\/\n-    public static final String ORACLE_ENABLE_EXTENSION_FUNCTION =\n-            ORACLE_JAXP_PROPERTY_PREFIX + \"enableExtensionFunctions\";\n-    public static final String SP_ENABLE_EXTENSION_FUNCTION =\n-            \"javax.xml.enableExtensionFunctions\";\n-    \/\/ This is the correct name by the spec\n-    public static final String SP_ENABLE_EXTENSION_FUNCTION_SPEC =\n-            \"jdk.xml.enableExtensionFunctions\";\n@@ -67,3 +54,2 @@\n-        ENABLE_EXTENSION_FUNCTION(ORACLE_ENABLE_EXTENSION_FUNCTION, SP_ENABLE_EXTENSION_FUNCTION_SPEC,\n-                ORACLE_ENABLE_EXTENSION_FUNCTION, SP_ENABLE_EXTENSION_FUNCTION,\n-                true, false, true, true),\n+        ENABLE_EXTENSION_FUNCTION(ImplPropMap.ENABLEEXTFUNC, null, null, true,\n+                null, null, true, false, true, true),\n@@ -74,3 +60,2 @@\n-        USE_CATALOG(PROPERTY_USE_CATALOG, SP_USE_CATALOG,\n-                null, null,\n-                true, false, true, false),\n+        USE_CATALOG(null, PROPERTY_USE_CATALOG, SP_USE_CATALOG, false,\n+                null, null, true, false, true, false),\n@@ -82,3 +67,2 @@\n-        RESET_SYMBOL_TABLE_FEATURE(RESET_SYMBOL_TABLE, RESET_SYMBOL_TABLE,\n-                null, null,\n-                false, false, true, false),\n+        RESET_SYMBOL_TABLE_FEATURE(ImplPropMap.RESETSYMBOLTABLE, null, null, false,\n+                null, null, false, false, true, false),\n@@ -90,3 +74,2 @@\n-        JDK_OVERRIDE_PARSER(OVERRIDE_PARSER, OVERRIDE_PARSER,\n-                ORACLE_FEATURE_SERVICE_MECHANISM, ORACLE_FEATURE_SERVICE_MECHANISM,\n-                false, false, true, false);\n+        JDK_OVERRIDE_PARSER(ImplPropMap.OVERRIDEPARSER, null, null, false,\n+                null, null, false, false, true, false);\n@@ -94,0 +77,1 @@\n+        private final ImplPropMap implMap;\n@@ -96,0 +80,1 @@\n+        private final boolean differ;\n@@ -105,0 +90,3 @@\n+         * @param implMap the Implementation specific properties map. When the\n+         * map is specified, there is no need to repeat or enter other name\n+         * parameters.\n@@ -115,6 +103,16 @@\n-        XmlFeature(String name, String nameSP, String nameOld, String nameOldSP,\n-                boolean value, boolean valueEnforced, boolean hasSystem, boolean enforced) {\n-            this.name = name;\n-            this.nameSP = nameSP;\n-            this.nameOld = nameOld;\n-            this.nameOldSP = nameOldSP;\n+        XmlFeature(ImplPropMap implMap, String name, String nameSP, boolean differ,\n+                String nameOld, String nameOldSP, boolean value, boolean valueEnforced,\n+                boolean hasSystem, boolean enforced) {\n+            this.implMap = implMap;\n+            if (implMap != null) {\n+                this.name = implMap.qName();\n+                this.nameSP = implMap.systemProperty();\n+                this.nameOld = implMap.qNameOld();\n+                this.nameOldSP = implMap.systemPropertyOld();\n+            } else {\n+                this.name = name;\n+                this.nameSP = nameSP;\n+                this.nameOld = nameOld;\n+                this.nameOldSP = nameOldSP;\n+            }\n+            this.differ = differ;\n@@ -134,0 +132,3 @@\n+            if (implMap != null) {\n+                return implMap.is(propertyName);\n+            }\n@@ -197,17 +198,15 @@\n-    }\n-\n-    \/**\n-     * States of the settings of a property, in the order: default value, value\n-     * set by FEATURE_SECURE_PROCESSING, jaxp.properties file, jaxp system\n-     * properties, and jaxp api properties\n-     *\/\n-    public static enum State {\n-        \/\/this order reflects the overriding order\n-\n-        DEFAULT(\"default\"), FSP(\"FEATURE_SECURE_PROCESSING\"),\n-        JAXPDOTPROPERTIES(\"jaxp.properties\"), SYSTEMPROPERTY(\"system property\"),\n-        APIPROPERTY(\"property\");\n-\n-        final String literal;\n-        State(String literal) {\n-            this.literal = literal;\n+        \/**\n+         * Returns the state of a property name. By the specification as of JDK 17,\n+         * the \"jdk.xml.\" prefixed System property name is also the current API\n+         * name. Both the URI-based qName and old name if any are legacy.\n+         *\n+         * @param name the property name\n+         * @return the state of the property name, null if no match\n+         *\/\n+        public State getState(String name) {\n+            if (implMap != null) {\n+                return implMap.getState(name);\n+            } else if (this.name.equals(name)) {\n+                return State.APIPROPERTY;\n+            }\n+            return null;\n@@ -216,3 +215,0 @@\n-        String literal() {\n-            return literal;\n-        }\n@@ -275,4 +271,12 @@\n-        int index = getIndex(propertyName);\n-        if (index > -1) {\n-            setFeature(index, state, value);\n-            return true;\n+        State pState = state;\n+        XmlFeature f = findByName(propertyName);\n+        \/\/ if the feature is managed by JdkXmlFeatures\n+        if (f != null) {\n+            \/\/ if it's set from an API, get the correct state\n+            if (state == State.APIPROPERTY) {\n+                pState = f.getState(propertyName);\n+            }\n+            if (pState != null) {\n+                setFeature(f.ordinal(), pState, value);\n+                return true;\n+            }\n@@ -345,0 +349,15 @@\n+    \/**\n+     * Finds the feature by string name.\n+     *\n+     * @param propertyName property name\n+     * @return the feature if found; null otherwise\n+     *\/\n+    public XmlFeature findByName(String propertyName) {\n+        for (XmlFeature feature : XmlFeature.values()) {\n+            if (feature.equalsPropertyName(propertyName)) {\n+                return feature;\n+            }\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlFeatures.java","additions":77,"deletions":58,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import static jdk.xml.internal.JdkConstants.OVERRIDE_PARSER;\n@@ -76,13 +77,0 @@\n-    \/**\n-     * Reset SymbolTable feature System property name is identical to feature\n-     * name\n-     *\/\n-    public final static String RESET_SYMBOL_TABLE = \"jdk.xml.resetSymbolTable\";\n-\n-    \/**\n-     * jdk.xml.overrideDefaultParser: enables the use of a 3rd party's parser\n-     * implementation to override the system-default parser.\n-     *\/\n-    public static final String OVERRIDE_PARSER = \"jdk.xml.overrideDefaultParser\";\n-    public static final boolean OVERRIDE_PARSER_DEFAULT = SecuritySupport.getJAXPSystemProperty(\n-                    Boolean.class, OVERRIDE_PARSER, \"false\");\n@@ -90,5 +78,0 @@\n-    \/**\n-     * Values for a feature\n-     *\/\n-    public static final String FEATURE_TRUE = \"true\";\n-    public static final String FEATURE_FALSE = \"false\";\n@@ -102,12 +85,0 @@\n-    \/**\n-     * Default value of RESET_SYMBOL_TABLE. This will read the System property\n-     *\/\n-    public static final boolean RESET_SYMBOL_TABLE_DEFAULT\n-            = SecuritySupport.getJAXPSystemProperty(Boolean.class, RESET_SYMBOL_TABLE, \"false\");\n-\n-    \/**\n-     * JDK features (will be consolidated in the next major feature revamp\n-     *\/\n-    public final static String CDATA_CHUNK_SIZE = \"jdk.xml.cdataChunkSize\";\n-    public static final int CDATA_CHUNK_SIZE_DEFAULT\n-            = SecuritySupport.getJAXPSystemProperty(Integer.class, CDATA_CHUNK_SIZE, \"0\");\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlUtils.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -50,0 +50,9 @@\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"DATA\">\n+ *     {@link javax.xml.datatype.DatatypeFactory DatatypeFactory}\n+ * <\/th>\n+ * <td style=\"text-align:center\">{@link javax.xml.datatype.DatatypeFactory#newInstance() newInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.datatype.DatatypeFactory}<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.datatype.DatatypeFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <\/tr>\n+ * <tr>\n@@ -53,4 +62,4 @@\n- * <td>{@link javax.xml.parsers.DocumentBuilderFactory#newInstance() newInstance()}<\/td>\n- * <td>{@code javax.xml.parsers.DocumentBuilderFactory}<\/td>\n- * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n- * <td>{@link javax.xml.parsers.DocumentBuilderFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.parsers.DocumentBuilderFactory#newInstance() newInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.parsers.DocumentBuilderFactory}<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.parsers.DocumentBuilderFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n@@ -62,4 +71,4 @@\n- * <td>{@link javax.xml.parsers.SAXParserFactory#newInstance() newInstance()}<\/td>\n- * <td>{@code javax.xml.parsers.SAXParserFactory}<\/td>\n- * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n- * <td>{@link javax.xml.parsers.SAXParserFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.parsers.SAXParserFactory#newInstance() newInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.parsers.SAXParserFactory}<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.parsers.SAXParserFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n@@ -71,3 +80,3 @@\n- * <td>{@link javax.xml.stream.XMLEventFactory#newFactory() newFactory()}<\/td>\n- * <td>{@code javax.xml.stream.XMLEventFactory}<\/td>\n- * <td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLEventFactory#newFactory() newFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.stream.XMLEventFactory}<\/td>\n+ * <td style=\"text-align:center\">\n@@ -77,1 +86,1 @@\n- * <td>{@link javax.xml.stream.XMLEventFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLEventFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n@@ -83,3 +92,3 @@\n- * <td>{@link javax.xml.stream.XMLInputFactory#newFactory() newFactory()}<\/td>\n- * <td>{@code javax.xml.stream.XMLInputFactory}<\/td>\n- * <td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLInputFactory#newFactory() newFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.stream.XMLInputFactory}<\/td>\n+ * <td style=\"text-align:center\">\n@@ -89,1 +98,1 @@\n- * <td>{@link javax.xml.stream.XMLInputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLInputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n@@ -95,3 +104,3 @@\n- * <td>{@link javax.xml.stream.XMLOutputFactory#newFactory() newFactory()}<\/td>\n- * <td>{@code javax.xml.stream.XMLOutputFactory}<\/td>\n- * <td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLOutputFactory#newFactory() newFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.stream.XMLOutputFactory}<\/td>\n+ * <td style=\"text-align:center\">\n@@ -101,1 +110,1 @@\n- * <td>{@link javax.xml.stream.XMLOutputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.stream.XMLOutputFactory#newDefaultFactory() newDefaultFactory()}<\/td>\n@@ -107,4 +116,4 @@\n- * <td>{@link javax.xml.transform.TransformerFactory#newInstance() newInstance()}<\/td>\n- * <td>{@code javax.xml.transform.TransformerFactory}<\/td>\n- * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n- * <td>{@link javax.xml.transform.TransformerFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.transform.TransformerFactory#newInstance() newInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.transform.TransformerFactory}<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.transform.TransformerFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n@@ -116,4 +125,4 @@\n- * <td>{@link javax.xml.validation.SchemaFactory#newInstance(java.lang.String) newInstance(schemaLanguage)}<\/td>\n- * <td>{@code javax.xml.validation.SchemaFactory:}<i>schemaLanguage<\/i>[1]<\/td>\n- * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n- * <td>{@link javax.xml.validation.SchemaFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.validation.SchemaFactory#newInstance(java.lang.String) newInstance(schemaLanguage)}<\/td>\n+ * <td style=\"text-align:center\">{@code javax.xml.validation.SchemaFactory:}<i>schemaLanguage<\/i>[1]<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.validation.SchemaFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n@@ -125,4 +134,4 @@\n- * <td>{@link javax.xml.xpath.XPathFactory#newInstance(java.lang.String) newInstance(uri)}<\/td>\n- * <td>{@link javax.xml.xpath.XPathFactory#DEFAULT_PROPERTY_NAME DEFAULT_PROPERTY_NAME} + \":uri\"[2]<\/td>\n- * <td><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n- * <td>{@link javax.xml.xpath.XPathFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.xpath.XPathFactory#newInstance(java.lang.String) newInstance(uri)}<\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.xpath.XPathFactory#DEFAULT_PROPERTY_NAME DEFAULT_PROPERTY_NAME} + \":uri\"[2]<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n+ * <td style=\"text-align:center\">{@link javax.xml.xpath.XPathFactory#newDefaultInstance() newDefaultInstance()}<\/td>\n@@ -234,1 +243,1 @@\n- * <h3>Naming Convention<\/h3>\n+ * <h3 id=\"NamingConvention\">Naming Convention<\/h3>\n@@ -239,11 +248,2 @@\n- * The prefix for JDK properties is defined as:\n- * <pre>\n- *     {@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/}\n- * <\/pre>\n- *\n- * The prefix for features:\n- * <pre>\n- *     {@code http:\/\/www.oracle.com\/xml\/jaxp\/features\/}\n- * <\/pre>\n- *\n- * The prefix for System Properties:\n+ * The prefix for JDK features and properties, as well as their corresponding\n+ * System Properties if any, is defined as:\n@@ -262,1 +262,1 @@\n- *     {@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/isStandalone}\n+ *     {@code jdk.xml.isStandalone}\n@@ -270,3 +270,3 @@\n- * A property may have a corresponding System Property that has the same name\n- * except for the prefix as shown above. A System Property should be set prior\n- * to the creation of a processor and may be cleared afterwards.\n+ * A property may have a corresponding System Property with the same name.\n+ * A System Property should be set prior to the creation of a processor and\n+ * may be cleared afterwards.\n@@ -285,1 +285,2 @@\n- * including DOM, SAX, Schema Validation, XSLT, and XPath. Any properties flagged\n+ * including DOM, SAX, Schema Validation, XSLT, and XPath. When secure processing\n+ * is set to true, security related features and properties, such as those flagged\n@@ -287,5 +288,6 @@\n- * table <a href=\"#Properties\">Implementation Specific Properties<\/a>\n- * are enforced when secure processing is set to true. Such enforcement includes\n- * setting security features to true and limits to the defined values shown in\n- * the table. The property values will not be affected, however, when setting\n- * secure processing to false.\n+ * table <a href=\"#Features\">Implementation Specific Features<\/a> and\n+ * <a href=\"#Properties\">Properties<\/a>,\n+ * are enforced. Such enforcement includes setting security properties and features\n+ * to more restrictive values and limits as shown in {@code \"Value\"}'s\n+ * subcolumn {@code \"Enforced\"} in the tables. When secure processing\n+ * is set to false, however, the property values will not be affected.\n@@ -319,0 +321,1 @@\n+ * <th scope=\"col\">How to set the feature<\/th>\n@@ -325,1 +328,1 @@\n- * <td>DOM Parser<\/td>\n+ * <td style=\"text-align:center\">DOM Parser<\/td>\n@@ -330,0 +333,4 @@\n+ * <td>\n+ * {@code DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();}<br>\n+ * {@code dbf.setFeature(name, value);}\n+ * <\/td>\n@@ -333,1 +340,1 @@\n- * <td>SAX Parser<\/td>\n+ * <td style=\"text-align:center\">SAX Parser<\/td>\n@@ -339,0 +346,4 @@\n+ * <td>\n+ * {@code SAXParserFactory spf = SAXParserFactory.newInstance();}<br>\n+ * {@code spf.setFeature(name, value);}<br>\n+ * <\/td>\n@@ -342,1 +353,5 @@\n- * <td>StAX Parser<\/td>\n+ * <td style=\"text-align:center\">StAX Parser<\/td>\n+ * <td>\n+ * {@code XMLInputFactory xif = XMLInputFactory.newInstance();}<br>\n+ * {@code xif.setProperty(name, value);}\n+ * <\/td>\n@@ -350,1 +365,1 @@\n- * <td>XML Validation API<\/td>\n+ * <td style=\"text-align:center\">XML Validation API<\/td>\n@@ -355,0 +370,4 @@\n+ * <td>\n+ * {@code SchemaFactory schemaFactory = SchemaFactory.newInstance(schemaLanguage);}<br>\n+ * {@code schemaFactory.setFeature(name, value);}\n+ * <\/td>\n@@ -358,1 +377,1 @@\n- * <td>XML Transform API<\/td>\n+ * <td style=\"text-align:center\">XML Transform API<\/td>\n@@ -363,0 +382,4 @@\n+ * <td>\n+ * {@code TransformerFactory factory = TransformerFactory.newInstance();}<br>\n+ * {@code factory.setFeature(name, value);}\n+ * <\/td>\n@@ -366,1 +389,1 @@\n- * <td>XSLTC Serializer<\/td>\n+ * <td style=\"text-align:center\">XSLTC Serializer<\/td>\n@@ -371,0 +394,2 @@\n+ * <td>\n+ * <\/td>\n@@ -374,1 +399,1 @@\n- * <td>DOM Load and Save<\/td>\n+ * <td style=\"text-align:center\">DOM Load and Save<\/td>\n@@ -379,0 +404,12 @@\n+ * <td>\n+ * <\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"row\" style=\"font-weight:normal\" id=\"XPATH\">XPath<\/th>\n+ * <td style=\"text-align:center\">XPath<\/td>\n+ * <td>\n+ * <\/td>\n+ * <td>\n+ * {@code XPathFactory factory = XPathFactory.newInstance();} <br>\n+ * {@code factory.setFeature(name, value);}\n+ * <\/td>\n@@ -395,1 +432,2 @@\n- * <th scope=\"col\" rowspan=\"2\">Name [1]<\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Full Name (<a href=\"#NamingConvention\">prefix + name<\/a>)\n+ * <a href=\"#Note1\">[1]<\/a><\/th>\n@@ -397,6 +435,6 @@\n- * <th scope=\"col\" rowspan=\"2\">System Property [2]<\/th>\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties [2]<\/th>\n- * <th scope=\"col\" colspan=\"3\" style=\"text-align:center\">Value [3]<\/th>\n- * <th scope=\"col\" rowspan=\"2\">Security [4]<\/th>\n- * <th scope=\"col\" rowspan=\"2\">Supported Processor [5]<\/th>\n- * <th scope=\"col\" rowspan=\"2\">Since [6]<\/th>\n+ * <th scope=\"col\" rowspan=\"2\">System Property <a href=\"#Note2\">[2]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note2\">[2]<\/a><\/th>\n+ * <th scope=\"col\" colspan=\"4\" style=\"text-align:center\">Value <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Security <a href=\"#Note4\">[4]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Supported Processor <a href=\"#Note5\">[5]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Since <a href=\"#Note6\">[6]<\/a><\/th>\n@@ -408,0 +446,1 @@\n+ * <th scope=\"col\">Enforced<\/th>\n@@ -414,1 +453,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"EELimit\">entityExpansionLimit<\/th>\n+ * <td id=\"EELimit\">{@systemProperty jdk.xml.entityExpansionLimit}<\/td>\n@@ -417,4 +456,4 @@\n- * <td rowspan=\"9\">yes<\/td>\n- * <td rowspan=\"9\">yes<\/td>\n- * <td rowspan=\"9\">Integer<\/td>\n- * <th scope=\"row\" style=\"font-weight:normal\" rowspan=\"9\">\n+ * <td style=\"text-align:center\" rowspan=\"9\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"9\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"9\">Integer<\/td>\n+ * <td rowspan=\"9\">\n@@ -423,4 +462,5 @@\n- * <\/th>\n- * <th scope=\"row\" style=\"font-weight:normal\">64000<\/th>\n- * <td rowspan=\"9\">Yes<\/td>\n- * <td rowspan=\"9\">\n+ * <\/td>\n+ * <td style=\"text-align:center\">64000<\/td>\n+ * <td style=\"text-align:center\">64000<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"9\">Yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"9\">\n@@ -433,1 +473,1 @@\n- * <td rowspan=\"9\">8<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"9\">8<\/td>\n@@ -436,1 +476,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"EALimit\">elementAttributeLimit<\/th>\n+ * <td id=\"EALimit\">{@systemProperty jdk.xml.elementAttributeLimit}<\/td>\n@@ -439,1 +479,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">10000<\/th>\n+ * <td style=\"text-align:center\">10000<\/td>\n+ * <td style=\"text-align:center\">10000<\/td>\n@@ -442,1 +483,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"OccurLimit\">maxOccurLimit<\/th>\n+ * <td id=\"OccurLimit\">{@systemProperty jdk.xml.maxOccurLimit}<\/td>\n@@ -447,1 +488,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">5000<\/th>\n+ * <td style=\"text-align:center\">5000<\/td>\n+ * <td style=\"text-align:center\">5000<\/td>\n@@ -450,1 +492,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"SizeLimit\">totalEntitySizeLimit<\/th>\n+ * <td id=\"SizeLimit\">{@systemProperty jdk.xml.totalEntitySizeLimit}<\/td>\n@@ -454,1 +496,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">5x10^7<\/th>\n+ * <td style=\"text-align:center\">5x10^7<\/td>\n+ * <td style=\"text-align:center\">5x10^7<\/td>\n@@ -457,1 +500,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"GELimit\">maxGeneralEntitySizeLimit<\/th>\n+ * <td id=\"GELimit\">{@systemProperty jdk.xml.maxGeneralEntitySizeLimit}<\/td>\n@@ -460,1 +503,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">0<\/th>\n+ * <td style=\"text-align:center\">0<\/td>\n+ * <td style=\"text-align:center\">0<\/td>\n@@ -463,1 +507,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"PELimit\">maxParameterEntitySizeLimit<\/th>\n+ * <td id=\"PELimit\">{@systemProperty jdk.xml.maxParameterEntitySizeLimit}<\/td>\n@@ -467,1 +511,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">10^6<\/th>\n+ * <td style=\"text-align:center\">10^6<\/td>\n+ * <td style=\"text-align:center\">10^6<\/td>\n@@ -470,1 +515,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"ERLimit\">entityReplacementLimit<\/th>\n+ * <td id=\"ERLimit\">{@systemProperty jdk.xml.entityReplacementLimit}<\/td>\n@@ -473,1 +518,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">3x10^6<\/th>\n+ * <td style=\"text-align:center\">3x10^6<\/td>\n+ * <td style=\"text-align:center\">3x10^6<\/td>\n@@ -476,1 +522,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"ElementDepth\">maxElementDepth<\/th>\n+ * <td id=\"ElementDepth\">{@systemProperty jdk.xml.maxElementDepth}<\/td>\n@@ -479,1 +525,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">0<\/th>\n+ * <td style=\"text-align:center\">0<\/td>\n+ * <td style=\"text-align:center\">0<\/td>\n@@ -482,1 +529,1 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"NameLimit\">maxXMLNameLimit<\/th>\n+ * <td id=\"NameLimit\">{@systemProperty jdk.xml.maxXMLNameLimit}<\/td>\n@@ -486,1 +533,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\">1000<\/th>\n+ * <td style=\"text-align:center\">1000<\/td>\n+ * <td style=\"text-align:center\">1000<\/td>\n@@ -490,2 +538,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"ISSTANDALONE\">isStandalone<\/th>\n- * <td>indicates that the serializer should treat the output as a\n+ * <td id=\"ISSTANDALONE\">{@systemProperty jdk.xml.isStandalone}<\/td>\n+ * <td>Indicates that the serializer should treat the output as a\n@@ -497,8 +545,9 @@\n- * <td>yes<\/td>\n- * <td>yes<\/td>\n- * <td>boolean<\/td>\n- * <th scope=\"row\" style=\"font-weight:normal\">true\/false<\/th>\n- * <th scope=\"row\" style=\"font-weight:normal\">false<\/th>\n- * <td>No<\/td>\n- * <td><a href=\"#DOMLS\">DOMLS<\/a><\/td>\n- * <td>17<\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">boolean<\/td>\n+ * <td style=\"text-align:center\">true\/false<\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n+ * <td style=\"text-align:center\">N\/A<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#DOMLS\">DOMLS<\/a><\/td>\n+ * <td style=\"text-align:center\">17<\/td>\n@@ -507,2 +556,2 @@\n- * <th scope=\"row\" style=\"font-weight:normal\" id=\"XSLTCISSTANDALONE\">xsltcIsStandalone<\/th>\n- * <td>indicates that the <a href=\"#XSLTCSerializer\">XSLTC serializer<\/a> should\n+ * <td id=\"XSLTCISSTANDALONE\">{@systemProperty jdk.xml.xsltcIsStandalone}<\/td>\n+ * <td>Indicates that the <a href=\"#XSLTCSerializer\">XSLTC serializer<\/a> should\n@@ -519,8 +568,43 @@\n- * <td>yes<\/td>\n- * <td>yes<\/td>\n- * <td>String<\/td>\n- * <th scope=\"row\" style=\"font-weight:normal\">yes\/no<\/th>\n- * <th scope=\"row\" style=\"font-weight:normal\">no<\/th>\n- * <td>No<\/td>\n- * <td><a href=\"#XSLTCSerializer\">XSLTC Serializer<\/a><\/td>\n- * <td>17<\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">String<\/td>\n+ * <td style=\"text-align:center\">yes\/no<\/td>\n+ * <td style=\"text-align:center\">no<\/td>\n+ * <td style=\"text-align:center\">N\/A<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#XSLTCSerializer\">XSLTC Serializer<\/a><\/td>\n+ * <td style=\"text-align:center\">17<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td id=\"cdataChunkSize\">{@systemProperty jdk.xml.cdataChunkSize}<\/td>\n+ * <td>Instructs the parser to return the data in a CData section in a single chunk\n+ * when the property is zero or unspecified, or in multiple chunks when it is greater\n+ * than zero. The parser shall split the data by linebreaks, and any chunks that are\n+ * larger than the specified size to ones that are equal to or smaller than the size.\n+ * <\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">yes<\/td>\n+ * <td style=\"text-align:center\">Integer<\/td>\n+ * <td>A positive integer. A value less than\n+ * or equal to 0 indicates that the property is not specified. If the value is not\n+ * an integer, a NumberFormatException is thrown.<\/td>\n+ * <td style=\"text-align:center\">0<\/td>\n+ * <td style=\"text-align:center\">N\/A<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#SAX\">SAX<\/a><br><a href=\"#StAX\">StAX<\/a><\/td>\n+ * <td style=\"text-align:center\">9<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td id=\"extensionClassLoader\">jdk.xml.extensionClassLoader<\/td>\n+ * <td>Sets a non-null ClassLoader instance to be used for loading XSLTC java\n+ * extension functions.\n+ * <\/td>\n+ * <td style=\"text-align:center\">no<\/td>\n+ * <td style=\"text-align:center\">no<\/td>\n+ * <td style=\"text-align:center\">Object<\/td>\n+ * <td>A reference to a ClassLoader object. Null if the value is not specified.<\/td>\n+ * <td style=\"text-align:center\">null<\/td>\n+ * <td style=\"text-align:center\">N\/A<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\"><a href=\"#Transform\">Transform<\/a><\/td>\n+ * <td style=\"text-align:center\">9<\/td>\n@@ -531,3 +615,88 @@\n- * <b>[1]<\/b> The name of a property. The fully-qualified name, prefix + name,\n- * should be used when setting the property.\n- * <p>\n+ * The table below lists the Implementation Specific Features currently supported\n+ * by the JDK. More features may be added in the future if necessary.\n+ *\n+ * <table class=\"striped\" id=\"Features\">\n+ * <caption>Implementation Specific Features<\/caption>\n+ * <thead>\n+ * <tr>\n+ * <th scope=\"col\" rowspan=\"2\">Full Name (<a href=\"#NamingConvention\">prefix + name<\/a>)\n+ * <a href=\"#Note1\">[1]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Description<\/th>\n+ * <th scope=\"col\" rowspan=\"2\">System Property <a href=\"#Note2\">[2]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note2\">[2]<\/a><\/th>\n+ * <th scope=\"col\" colspan=\"4\" style=\"text-align:center\">Value <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Security <a href=\"#Note4\">[4]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Supported Processor <a href=\"#Note5\">[5]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Since <a href=\"#Note6\">[6]<\/a><\/th>\n+ * <\/tr>\n+ * <tr>\n+ * <th scope=\"col\">Type<\/th>\n+ * <th scope=\"col\">Value<\/th>\n+ * <th scope=\"col\">Default<\/th>\n+ * <th scope=\"col\">Enforced<\/th>\n+ * <\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr>\n+ * <td id=\"ExtFunc\">{@systemProperty jdk.xml.enableExtensionFunctions}<\/td>\n+ * <td>Determines if XSLT and XPath extension functions are to be allowed.\n+ * <\/td>\n+ * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"3\">Boolean<\/td>\n+ * <td>\n+ * true or false. True indicates that extension functions are allowed; False otherwise.\n+ * <\/td>\n+ * <td style=\"text-align:center\">true<\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n+ * <td style=\"text-align:center\">Yes<\/td>\n+ * <td style=\"text-align:center\">\n+ *     <a href=\"#Transform\">Transform<\/a><br>\n+ *     <a href=\"#XPAth\">XPath<\/a>\n+ * <\/td>\n+ * <td style=\"text-align:center\">8<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td id=\"ORParser\">{@systemProperty jdk.xml.overrideDefaultParser}<\/td>\n+ * <td>Enables the use of a 3rd party's parser implementation to override the\n+ * system-default parser for the JDK's Transform, Validation and XPath implementations.\n+ * <\/td>\n+ * <td>\n+ * true or false. True enables the use of 3rd party's parser implementations\n+ * to override the system-default implementation during XML Transform, Validation\n+ * or XPath operation. False disables the use of 3rd party's parser\n+ * implementations.\n+ * <\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n+ * <td style=\"text-align:center\">Yes<\/td>\n+ * <td style=\"text-align:center\">\n+ *     <a href=\"#Transform\">Transform<\/a><br>\n+ *     <a href=\"#Validation\">Validation<\/a><br>\n+ *     <a href=\"#XPAth\">XPath<\/a>\n+ * <\/td>\n+ * <td style=\"text-align:center\">9<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td id=\"symbolTable\">{@systemProperty jdk.xml.resetSymbolTable}<\/td>\n+ * <td>Instructs the parser to reset its internal symbol table during each parse operation.\n+ * <\/td>\n+ * <td>\n+ * true or false. True indicates that the SymbolTable associated with a parser needs to be\n+ * reallocated during each parse operation.<br>\n+ * False indicates that the parser's SymbolTable instance shall be reused\n+ * during subsequent parse operations.\n+ * <\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n+ * <td style=\"text-align:center\">N\/A<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\">\n+ *     <a href=\"#SAX\">SAX<\/a>\n+ * <\/td>\n+ * <td style=\"text-align:center\">9<\/td>\n+ * <\/tr>\n+ * <\/tbody>\n+ * <\/table>\n+ * <p id=\"Note1\">\n+ * <b>[1]<\/b> The full name of a property should be used to set the property.\n+ * <p id=\"Note2\">\n@@ -537,1 +706,1 @@\n- * <p>\n+ * <p id=\"Note3\">\n@@ -547,1 +716,1 @@\n- * <p>\n+ * <p id=\"Note4\">\n@@ -551,1 +720,1 @@\n- * <p>\n+ * <p id=\"Note5\">\n@@ -554,1 +723,1 @@\n- * <p>\n+ * <p id=\"Note6\">\n@@ -557,0 +726,7 @@\n+ * <h3>Legacy Property Names (deprecated)<\/h3>\n+ * JDK releases prior to JDK 17 support the use of URI style prefix for properties.\n+ * These legacy property names are <b>deprecated<\/b> as of JDK 17 and may be removed\n+ * in future releases. If both new and legacy properties are set, the new property\n+ * names take precedence regardless of how and where they are set. The overriding order\n+ * as defined in <a href=\"#ScopeAndOrder\">Scope and Order<\/a> thus becomes, in\n+ * descending order:\n@@ -558,0 +734,75 @@\n+ * <ul>\n+ * <li>The default value;<\/li>\n+ * <li>Value set by FEATURE_SECURE_PROCESSING;<\/li>\n+ * <li>Value set in jaxp.properties;<\/li>\n+ * <li>Value set as System Property;<\/li>\n+ * <li>Value set on factories or processors using <b>legacy property names<\/b>;<\/li>\n+ * <li>Value set on factories or processors using new property names.<\/li>\n+ * <\/ul>\n+ * <p>\n+ * The following table lists the properties and their corresponding legacy names.\n+ *\n+ * <table class=\"striped\" id=\"LegacyProperties\">\n+ * <caption>Legacy Property Names (deprecated since 17)<\/caption>\n+ * <thead>\n+ * <tr>\n+ * <th>Property<\/th>\n+ * <th>Legacy Property Name(s)<\/th>\n+ * <\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.entityExpansionLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/entityExpansionLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.elementAttributeLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/elementAttributeLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.maxOccurLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/maxOccurLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.totalEntitySizeLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/totalEntitySizeLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.maxGeneralEntitySizeLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/maxGeneralEntitySizeLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.maxParameterEntitySizeLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/maxParameterEntitySizeLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.entityReplacementLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/entityReplacementLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.maxElementDepth}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/maxElementDepth}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.maxXMLNameLimit}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/maxXMLNameLimit}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.isStandalone}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/isStandalone}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.xsltcIsStandalone}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/is-standalone}<br>\n+ * {@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/xsltcIsStandalone}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@code jdk.xml.extensionClassLoader}<\/td>\n+ * <td>{@code jdk.xml.transform.extensionClassLoader}<\/td>\n+ * <\/tr>\n+ * <tr>\n+ * <td>{@systemProperty jdk.xml.enableExtensionFunctions}<\/td>\n+ * <td>{@code http:\/\/www.oracle.com\/xml\/jaxp\/properties\/enableExtensionFunctions}<\/td>\n+ * <\/tr>\n+ * <\/tbody>\n+ * <\/table>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":372,"deletions":121,"binary":false,"changes":493,"status":"modified"},{"patch":"@@ -0,0 +1,347 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common;\n+\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n+import java.util.EnumSet;\n+import java.util.Set;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.xpath.XPathFactory;\n+import jdk.xml.internal.JdkProperty.ImplPropMap;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.DOMConfiguration;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSSerializer;\n+import org.xml.sax.XMLReader;\n+\n+\n+\/*\n+ * @test\n+ * @bug 8265248\n+ * @modules java.xml\/com.sun.org.apache.xerces.internal.utils\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng common.ImplPropertyTest\n+ * @summary Verifies Implementation-specific Features and Properties as specified\n+ * in the java.xml module summary.\n+ *\/\n+public class ImplPropertyTest {\n+\n+    private final DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+    private final XMLInputFactory xif = XMLInputFactory.newDefaultFactory();\n+    private final SchemaFactory sf = SchemaFactory.newDefaultInstance();\n+\n+\n+    private final XPathFactory xf = XPathFactory.newDefaultInstance();\n+\n+    \/\/ as in the Processors table in java.xml module summary\n+    private enum Processor {\n+        DOM,\n+        SAX,\n+        XMLREADER,\n+        StAX,\n+        VALIDATION,\n+        TRANSFORM,\n+        XSLTC,\n+        DOMLS,\n+        XPATH\n+    };\n+\n+    \/**\n+     * Verifies both the new and legacy property names. This test runs two cases:\n+     * a. sets legacy property first;\n+     * b. sets new property first. Note the new property name is the same as that\n+     * of the System property as of JDK 17.\n+     * In both test cases, the expected return value shall be equal to the value\n+     * set with the new property name.\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test\n+    public void testLimits() throws Exception {\n+        \/\/ Supported processors for Limits\n+        Set<Processor> pLimit = EnumSet.of(Processor.DOM, Processor.SAX, Processor.XMLREADER,\n+                Processor.StAX, Processor.VALIDATION, Processor.TRANSFORM);\n+\n+        for (Limit limit : Limit.values()) {\n+            for (Processor p : pLimit) {\n+                testProperties(p, limit.apiProperty(), 100, limit.systemProperty(), 200, true);\n+            }\n+        }\n+    }\n+\n+    \/\/ Supported processor for isStandalone: DOMLS\n+    @Test\n+    public void testIsStandalone() throws Exception {\n+        testProperties(Processor.DOMLS, ImplPropMap.ISSTANDALONE.qName(), true,\n+                ImplPropMap.ISSTANDALONE.systemProperty(), false, true);\n+    }\n+\n+    \/\/ Supported processor for xsltcIsStandalone: XSLTC Serializer\n+    @Test\n+    public void testXSLTCIsStandalone() throws Exception {\n+        testProperties(Processor.XSLTC, ImplPropMap.XSLTCISSTANDALONE.qName(), \"no\",\n+                ImplPropMap.XSLTCISSTANDALONE.systemProperty(), \"yes\", true);\n+        testProperties(Processor.XSLTC, ImplPropMap.XSLTCISSTANDALONE.qNameOld(), \"no\",\n+                ImplPropMap.XSLTCISSTANDALONE.systemProperty(), \"yes\", true);\n+    }\n+\n+    \/\/ Supported processor for cdataChunkSize: SAX and StAX\n+    @Test\n+    public void testCData() throws Exception {\n+        \/\/ Supported processors for CDATA\n+        Set<Processor> pCData = EnumSet.of(Processor.SAX, Processor.XMLREADER,\n+                Processor.StAX);\n+        ImplPropMap CDATA = ImplPropMap.CDATACHUNKSIZE;\n+        for (Processor p : pCData) {\n+            testProperties(p, CDATA.qName(), 100, CDATA.systemProperty(), 200, false);\n+        }\n+    }\n+\n+    \/\/ Supported processor for extensionClassLoader: Transform\n+    @Test\n+    public void testExtensionClassLoader() throws Exception {\n+        ImplPropMap ECL = ImplPropMap.EXTCLSLOADER;\n+        TestCL cl1 = new TestCL(\"testClassLoader1\");\n+        TestCL cl2 = new TestCL(\"testClassLoader2\");\n+        testProperties(Processor.TRANSFORM, ECL.qNameOld(), cl1, ECL.qName(), cl2, true);\n+    }\n+\n+    \/\/ Supported processor for feature enableExtensionFunctions: Transform, XPath\n+    @Test\n+    public void testEnableExtensionFunctions() throws Exception {\n+        Set<Processor> pEEF = EnumSet.of(Processor.TRANSFORM, Processor.XPATH);\n+        ImplPropMap EEF = ImplPropMap.ENABLEEXTFUNC;\n+        for (Processor p : pEEF) {\n+            testFeatures(p, EEF.qName(), true, EEF.systemProperty(), false, EEF.isNameDiffer());\n+        }\n+    }\n+\n+    \/\/ Supported processor for feature overrideDefaultParser: Transform, Validation, XPath\n+    @Test\n+    public void testOverrideDefaultParser() throws Exception {\n+        Set<Processor> pEEF = EnumSet.of(Processor.TRANSFORM, Processor.VALIDATION, Processor.XPATH);\n+        ImplPropMap ODP = ImplPropMap.OVERRIDEPARSER;\n+        for (Processor p : pEEF) {\n+            testFeatures(p, ODP.qName(), true, ODP.systemProperty(), false, ODP.isNameDiffer());\n+        }\n+    }\n+\n+    \/\/ Supported processor for feature resetSymbolTable: SAX\n+    @Test\n+    public void testResetSymbolTable() throws Exception {\n+        ImplPropMap RST = ImplPropMap.RESETSYMBOLTABLE;\n+        testFeatures(Processor.SAX, RST.qName(), true, RST.systemProperty(), false, RST.isNameDiffer());\n+    }\n+\n+    \/**\n+     * Tests properties. Two assertions:\n+     * (1) verifies the old property is still supported;\n+     * (2) verifies the new property name takes preference.\n+     *\n+     * @param processor the processor to be tested\n+     * @param name1 the old property name\n+     * @param value1 the value to be set with name1\n+     * @param name2 the new property name\n+     * @param value2 the value to be set with name2\n+     * @param differ a flag indicating whether name1 and name2 differ\n+     * @throws Exception if the test fails\n+     *\/\n+    private void testProperties(Processor processor, String name1, Object value1,\n+            String name2, Object value2, boolean differ)\n+            throws Exception {\n+\n+        Object ret1 = null;\n+        Object ret2 = null;\n+        switch (processor) {\n+            case DOM:\n+                dbf.setAttribute(name1, value1);\n+                ret1 = dbf.getAttribute(name1);\n+                if (differ) {\n+                    dbf.setAttribute(name2, value2);\n+                    dbf.setAttribute(name1, value1);\n+                    ret2 = dbf.getAttribute(name2);\n+                }\n+                break;\n+            case SAX:\n+                SAXParser sp = SAXParserFactory.newDefaultInstance().newSAXParser();\n+                sp.setProperty(name1, value1);\n+                ret1 = sp.getProperty(name1);\n+                if (differ) {\n+                    sp.setProperty(name2, value2);\n+                    sp.setProperty(name1, value1);\n+                    ret2 = sp.getProperty(name2);\n+                }\n+                break;\n+            case XMLREADER:\n+                XMLReader reader = SAXParserFactory.newDefaultInstance().newSAXParser().getXMLReader();\n+                reader.setProperty(name1, value1);\n+                ret1 = reader.getProperty(name1);\n+                if (differ) {\n+                    reader.setProperty(name2, value2);\n+                    reader.setProperty(name1, value1);\n+                    ret2 = reader.getProperty(name2);\n+                }\n+                break;\n+            case StAX:\n+                xif.setProperty(name1, value1);\n+                ret1 = xif.getProperty(name1);\n+                if (differ) {\n+                    xif.setProperty(name2, value2);\n+                    xif.setProperty(name1, value1);\n+                    ret2 = xif.getProperty(name2);\n+                }\n+                break;\n+            case VALIDATION:\n+                sf.setProperty(name1, value1);\n+                ret1 = sf.getProperty(name1);\n+                if (differ) {\n+                    sf.setProperty(name2, value2);\n+                    sf.setProperty(name1, value1);\n+                    ret2 = sf.getProperty(name2);\n+                }\n+                break;\n+            case TRANSFORM:\n+                TransformerFactory tf = TransformerFactory.newDefaultInstance();\n+                tf.setAttribute(name1, value1);\n+                ret1 = tf.getAttribute(name1);\n+                if (differ) {\n+                    tf.setAttribute(name2, value2);\n+                    tf.setAttribute(name1, value1);\n+                    ret2 = tf.getAttribute(name2);\n+                }\n+                break;\n+            case XSLTC:\n+                Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+                transformer.setOutputProperty(name1, (String)value1);\n+                ret1 = transformer.getOutputProperty(name1);\n+                if (differ) {\n+                    transformer.setOutputProperty(name2, (String)value2);\n+                    transformer.setOutputProperty(name1, (String)value1);\n+                    ret2 = transformer.getOutputProperty(name2);\n+                }\n+                break;\n+            case DOMLS:\n+                DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();\n+                DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(\"LS\");\n+                LSSerializer serializer = impl.createLSSerializer();\n+                DOMConfiguration domConfig = serializer.getDomConfig();\n+                domConfig.setParameter(name1, value1);\n+                ret1 = domConfig.getParameter(name1);\n+                if (differ) {\n+                    domConfig.setParameter(name2, value2);\n+                    domConfig.setParameter(name1, value1);\n+                    ret2 = domConfig.getParameter(name2);\n+                }\n+                break;\n+            case XPATH:\n+                break;\n+        }\n+        if ((value1 instanceof Integer) && ret1 instanceof String) {\n+            ret1 = Integer.parseInt((String)ret1);\n+            ret2 = Integer.parseInt((String)ret2);\n+        }\n+\n+        \/\/ name1 is set, expected return value: value1 (set with the old name)\n+        Assert.assertEquals(ret1, value1);\n+        if (differ) {\n+            \/\/ if both are set, expected value: value2 (set with the new name)\n+            Assert.assertEquals(ret2, value2);\n+        }\n+    }\n+\n+    private void testFeatures(Processor processor, String name1, boolean value1,\n+            String name2, boolean value2, boolean differ)\n+            throws Exception {\n+        boolean ret1 = false, ret2 = false;\n+        switch (processor) {\n+            case DOM:\n+                dbf.setFeature(name1, value1);\n+                Assert.assertEquals(dbf.getFeature(name1), value1);\n+                if (differ) {\n+                    dbf.setFeature(name2, value2);\n+                    dbf.setFeature(name1, value1);\n+                    Assert.assertEquals(dbf.getFeature(name2), value2);\n+                }\n+                return;\n+            case SAX:\n+                SAXParserFactory spf = SAXParserFactory.newDefaultInstance();\n+                spf.setFeature(name1, value1);\n+                Assert.assertEquals(spf.getFeature(name1), value1);\n+                if (differ) {\n+                    spf.setFeature(name2, value2);\n+                    spf.setFeature(name1, value1);\n+                    Assert.assertEquals(spf.getFeature(name2), value2);\n+                }\n+                return;\n+            case VALIDATION:\n+                sf.setFeature(name1, value1);\n+                Assert.assertEquals(sf.getFeature(name1), value1);\n+                if (differ) {\n+                    sf.setFeature(name2, value2);\n+                    sf.setFeature(name1, value1);\n+                    Assert.assertEquals(sf.getFeature(name2), value2);\n+                }\n+                return;\n+            case TRANSFORM:\n+                TransformerFactory tf = TransformerFactory.newDefaultInstance();\n+                tf.setFeature(name1, value1);\n+                Assert.assertEquals(tf.getFeature(name1), value1);\n+                if (differ) {\n+                    tf.setFeature(name2, value2);\n+                    tf.setFeature(name1, value1);\n+                    Assert.assertEquals(tf.getFeature(name2), value2);\n+                }\n+                return;\n+            case XPATH:\n+                xf.setFeature(name1, value1);\n+                Assert.assertEquals(xf.getFeature(name1), value1);\n+                if (differ) {\n+                    xf.setFeature(name2, value2);\n+                    xf.setFeature(name1, value1);\n+                    Assert.assertEquals(xf.getFeature(name2), value2);\n+                }\n+                return;\n+        }\n+\n+        Assert.fail(\"Failed setting features for : \" + processor);\n+    }\n+\n+\n+    class TestCL extends ClassLoader {\n+        String name;\n+        public TestCL(String name) {\n+            this.name = name;\n+        }\n+\n+        public Class<?> loadClass(String name) throws ClassNotFoundException {\n+            throw new ClassNotFoundException( name );\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/ImplPropertyTest.java","additions":347,"deletions":0,"binary":false,"changes":347,"status":"added"}]}