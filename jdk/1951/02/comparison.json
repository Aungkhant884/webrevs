{"files":[{"patch":"@@ -285,57 +285,0 @@\n-\n-    \/**\n-     * For backward compatibility, include an anchor using the erasures of the\n-     * parameters.  NOTE:  We won't need this method anymore after we fix\n-     * see tags so that they use the type instead of the erasure.\n-     *\n-     * @param executableElement the ExecutableElement to anchor to.\n-     * @return the 1.4.x style anchor for the executable element.\n-     *\/\n-    protected String getErasureAnchor(ExecutableElement executableElement) {\n-        final StringBuilder buf = new StringBuilder(executableElement.getSimpleName());\n-        buf.append(\"(\");\n-        List<? extends VariableElement> parameters = executableElement.getParameters();\n-        boolean foundTypeVariable = false;\n-        for (int i = 0; i < parameters.size(); i++) {\n-            if (i > 0) {\n-                buf.append(\",\");\n-            }\n-            TypeMirror t = parameters.get(i).asType();\n-            SimpleTypeVisitor9<Boolean, Void> stv = new SimpleTypeVisitor9<>() {\n-                boolean foundTypeVariable = false;\n-\n-                @Override\n-                public Boolean visitArray(ArrayType t, Void p) {\n-                    visit(t.getComponentType());\n-                    buf.append(utils.getDimension(t));\n-                    return foundTypeVariable;\n-                }\n-\n-                @Override\n-                public Boolean visitTypeVariable(TypeVariable t, Void p) {\n-                    buf.append(utils.asTypeElement(t).getQualifiedName());\n-                    foundTypeVariable = true;\n-                    return foundTypeVariable;\n-                }\n-\n-                @Override\n-                public Boolean visitDeclared(DeclaredType t, Void p) {\n-                    buf.append(utils.getQualifiedTypeName(t));\n-                    return foundTypeVariable;\n-                }\n-\n-                @Override\n-                protected Boolean defaultAction(TypeMirror e, Void p) {\n-                    buf.append(e);\n-                    return foundTypeVariable;\n-                }\n-            };\n-\n-            boolean isTypeVariable = stv.visit(t);\n-            if (!foundTypeVariable) {\n-                foundTypeVariable = isTypeVariable;\n-            }\n-        }\n-        buf.append(\")\");\n-        return foundTypeVariable ? writer.links.getName(buf.toString()) : null;\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    protected final HtmlIds htmlIds;\n@@ -83,0 +84,1 @@\n+        this.htmlIds = configuration.htmlIds;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                .setId(\"all-classes-table\")\n+                .setId(HtmlIds.ALL_CLASSES_TABLE)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-                SectionName.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY, summariesList, content);\n+                HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY, summariesList, content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeOptionalMemberWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-                SectionName.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY, summariesList, content);\n+                HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY, summariesList, content);\n@@ -117,1 +117,1 @@\n-                .setId(simpleName + utils.signature((ExecutableElement) member, typeElement));\n+                .setId(htmlIds.forMember(typeElement, (ExecutableElement) member));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -306,1 +306,2 @@\n-            HtmlTree htmlTree = HtmlTree.SECTION(HtmlStyle.detail).setId(getPackageAnchorName(pkg));\n+            HtmlTree htmlTree = HtmlTree.SECTION(HtmlStyle.detail)\n+                    .setId(htmlIds.forPackage(pkg));\n@@ -328,1 +329,1 @@\n-                links.createLink(getPackageAnchorName(pkg), new StringContent(utils.getPackageName(pkg)));\n+                links.createLink(htmlIds.forPackage(pkg), new StringContent(utils.getPackageName(pkg)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.stream.Collectors;\n@@ -39,1 +38,0 @@\n-import javax.lang.model.element.RecordComponentElement;\n@@ -46,1 +44,0 @@\n-import javax.lang.model.element.ElementKind;\n@@ -62,1 +59,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -203,1 +199,1 @@\n-                mods.add(HtmlTree.SUP(links.createLink(getPreviewSectionAnchor(typeElement),\n+                mods.add(HtmlTree.SUP(links.createLink(htmlIds.forPreviewSection(typeElement),\n@@ -501,1 +497,1 @@\n-            section.setId(SectionName.ANNOTATION_TYPE_ELEMENT_DETAIL.getName());\n+            section.setId(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -111,1 +112,1 @@\n-            link = links.createLink(SectionName.UNNAMED_PACKAGE_ANCHOR,\n+            link = links.createLink(HtmlIds.UNNAMED_PACKAGE_ANCHOR,\n@@ -148,1 +149,1 @@\n-        String anchorName;\n+        HtmlId anchorName;\n@@ -153,1 +154,1 @@\n-            anchorName = SectionName.UNNAMED_PACKAGE_ANCHOR.getName();\n+            anchorName = HtmlIds.UNNAMED_PACKAGE_ANCHOR;\n@@ -157,1 +158,1 @@\n-            anchorName = parsedPackageName;\n+            anchorName = htmlIds.forPackage(pkg);\n@@ -165,1 +166,1 @@\n-                .setId(links.getName(anchorName));\n+                .setId(anchorName);\n@@ -219,2 +220,2 @@\n-        String id = currentTypeElement.getQualifiedName() + \".\" + member.getSimpleName();\n-        Content code = new HtmlTree(TagName.CODE).setId(id);\n+        Content code = new HtmlTree(TagName.CODE)\n+                .setId(htmlIds.forMember(currentTypeElement, member));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -104,1 +105,1 @@\n-                SectionName.CONSTRUCTOR_SUMMARY, summariesList, content);\n+                HtmlIds.CONSTRUCTOR_SUMMARY, summariesList, content);\n@@ -119,1 +120,0 @@\n-        String erasureAnchor;\n@@ -123,1 +123,2 @@\n-        if ((erasureAnchor = getErasureAnchor(constructor)) != null) {\n+        HtmlId erasureAnchor = htmlIds.forErasure(constructor);\n+        if (erasureAnchor != null) {\n@@ -128,1 +129,1 @@\n-                .setId(links.getAnchor(constructor));\n+                .setId(htmlIds.forMember(constructor));\n@@ -164,1 +165,1 @@\n-                        .setId(SectionName.CONSTRUCTOR_DETAIL.getName())\n+                        .setId(HtmlIds.CONSTRUCTOR_DETAIL)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriterImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        addSummaryAPI(list.getForRemoval(), \"forRemoval\",\n+        addSummaryAPI(list.getForRemoval(), HtmlIds.FOR_REMOVAL,\n@@ -90,1 +90,1 @@\n-            addIndexLink(\"forRemoval\", \"doclet.For_Removal\", target);\n+            addIndexLink(HtmlIds.FOR_REMOVAL, \"doclet.For_Removal\", target);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DeprecatedListWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-                SectionName.ENUM_CONSTANT_SUMMARY, summariesList, content);\n+                HtmlIds.ENUM_CONSTANT_SUMMARY, summariesList, content);\n@@ -96,1 +96,1 @@\n-                .setId(name(enumConstant));\n+                .setId(htmlIds.forMember(enumConstant));\n@@ -132,1 +132,1 @@\n-                        .setId(SectionName.ENUM_CONSTANT_DETAIL.getName())\n+                        .setId(HtmlIds.ENUM_CONSTANT_DETAIL)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                SectionName.FIELD_SUMMARY, summariesList, content);\n+                HtmlIds.FIELD_SUMMARY, summariesList, content);\n@@ -96,1 +96,2 @@\n-        return HtmlTree.SECTION(HtmlStyle.detail, fieldTree).setId(name(field));\n+        return HtmlTree.SECTION(HtmlStyle.detail, fieldTree)\n+                .setId(htmlIds.forMember(field));\n@@ -133,1 +134,1 @@\n-                        .setId(SectionName.FIELD_DETAIL.getName())\n+                        .setId(HtmlIds.FIELD_DETAIL)\n@@ -178,2 +179,1 @@\n-        labelHeading.setId(SectionName.FIELDS_INHERITANCE.getName()\n-                + links.getName(configuration.getClassName(typeElement)));\n+        labelHeading.setId(htmlIds.forInheritedFields(typeElement));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+    public HtmlIds htmlIds;\n+\n@@ -211,0 +213,1 @@\n+        htmlIds = new HtmlIds(this);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -180,0 +181,2 @@\n+    protected final HtmlIds htmlIds;\n+\n@@ -227,1 +230,1 @@\n-        this.links = new Links(path, configuration.utils);\n+        this.links = new Links(path);\n@@ -230,0 +233,1 @@\n+        this.htmlIds = configuration.htmlIds;\n@@ -609,11 +613,0 @@\n-    \/**\n-     * Given a package, return the name to be used in HTML anchor tag.\n-     * @param packageElement the package.\n-     * @return the name to be used in HTML anchor tag.\n-     *\/\n-    public String getPackageAnchorName(PackageElement packageElement) {\n-        return packageElement == null || packageElement.isUnnamed()\n-                ? SectionName.UNNAMED_PACKAGE_ANCHOR.getName()\n-                : utils.getPackageName(packageElement);\n-    }\n-\n@@ -671,1 +664,1 @@\n-                    HtmlTree.SUP(links.createLink(targetLink.withFragment(getPreviewSectionAnchor(packageElement)),\n+                    HtmlTree.SUP(links.createLink(targetLink.withFragment(htmlIds.forPreviewSection(packageElement).name()),\n@@ -704,1 +697,1 @@\n-                        HtmlTree.SUP(links.createLink(targetLink.withFragment(getPreviewSectionAnchor(mdle)),\n+                        HtmlTree.SUP(links.createLink(targetLink.withFragment(htmlIds.forPreviewSection(mdle).name()),\n@@ -1010,0 +1003,1 @@\n+            HtmlId id = isProperty ? htmlIds.forProperty(ee) : htmlIds.forMember(ee);\n@@ -1012,1 +1006,1 @@\n-                .where(links.getAnchor(ee, isProperty))\n+                .where(id.name())\n@@ -1020,1 +1014,1 @@\n-                .where(links.getName(element.getSimpleName().toString()))\n+                .where(element.getSimpleName().toString())\n@@ -1041,1 +1035,1 @@\n-        if (! (utils.isIncluded(element) || utils.isLinkable(typeElement))) {\n+        if (!(utils.isIncluded(element) || utils.isLinkable(typeElement))) {\n@@ -1046,3 +1040,3 @@\n-                .label(label)\n-                .where(links.getAnchor(emd))\n-                .targetMember(element));\n+                    .label(label)\n+                    .where(htmlIds.forMember(emd).name())\n+                    .targetMember(element));\n@@ -1051,1 +1045,3 @@\n-                .label(label).where(links.getName(element.getSimpleName().toString())).targetMember(element));\n+                    .label(label)\n+                    .where(element.getSimpleName().toString())\n+                    .targetMember(element));\n@@ -1105,2 +1101,2 @@\n-                    return links.createLink(elementCrossLink,\n-                            (label.isEmpty() ? text : label), true);\n+                    return links.createExternalLink(elementCrossLink,\n+                            (label.isEmpty() ? text : label));\n@@ -2190,1 +2186,1 @@\n-            previewDiv.setId(getPreviewSectionAnchor(forWhat));\n+            previewDiv.setId(htmlIds.forPreviewSection(forWhat));\n@@ -2221,1 +2217,1 @@\n-                previewDiv.setId(getPreviewSectionAnchor(forWhat));\n+                previewDiv.setId(htmlIds.forPreviewSection(forWhat));\n@@ -2323,9 +2319,0 @@\n-    public String getPreviewSectionAnchor(Element el) {\n-        return \"preview-\" + switch (el.getKind()) {\n-            case CONSTRUCTOR, METHOD ->\n-                links.getAnchor((ExecutableElement) el);\n-            case PACKAGE -> getPackageAnchorName((PackageElement) el);\n-            default -> utils.getFullyQualifiedName(el, false);\n-        };\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":21,"deletions":34,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,452 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import java.util.List;\n+import java.util.Map;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.PackageElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.type.ArrayType;\n+import javax.lang.model.type.DeclaredType;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.type.TypeVariable;\n+import javax.lang.model.util.SimpleTypeVisitor9;\n+\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n+import jdk.javadoc.internal.doclets.toolkit.util.DeprecatedAPIListBuilder;\n+import jdk.javadoc.internal.doclets.toolkit.util.SummaryAPIListBuilder;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n+\n+\/**\n+ * Centralized constants and factory methods for HTML ids.\n+ *\n+ * <p>To ensure consistency, these constants and methods should be used\n+ * both when declaring ids (for example, {@code HtmlTree.setId})\n+ * and creating references (for example, {@code Links.createLink}).\n+ *\n+ * <p>Most ids are mostly for internal use within the pages of a documentation\n+ * bundle. However, the ids for member declarations may be referred to\n+ * from other documentation using {@code {@link}}, and should not be\n+ * changed without due consideration for the compatibility impact.\n+ *\n+ * <p>The use of punctuating characters is inconsistent and could be improved.\n+ *\n+ * <p>Constants and methods are {@code static} where possible.\n+ * However, some methods require access to {@code utils} and are\n+ * better provided as instance methods.\n+ *\/\n+public class HtmlIds {\n+    private final HtmlConfiguration configuration;\n+    private final Utils utils;\n+\n+    static final HtmlId ALL_CLASSES_TABLE = HtmlId.of(\"all-classes-table\");\n+    static final HtmlId ALL_MODULES_TABLE = HtmlId.of(\"all-modules-table\");\n+    static final HtmlId ALL_PACKAGES_TABLE = HtmlId.of(\"all-packages-table\");\n+    static final HtmlId ANNOTATION_TYPE_ELEMENT_DETAIL = HtmlId.of(\"annotation.interface.element.detail\");\n+    static final HtmlId ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY = HtmlId.of(\"annotation.interface.optional.element.summary\");\n+    static final HtmlId ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY = HtmlId.of(\"annotation.interface.required.element.summary\");\n+    static final HtmlId CONSTRUCTOR_DETAIL = HtmlId.of(\"constructor.detail\");\n+    static final HtmlId CONSTRUCTOR_SUMMARY = HtmlId.of(\"constructor.summary\");\n+    static final HtmlId ENUM_CONSTANT_DETAIL = HtmlId.of(\"enum.constant.detail\");\n+    static final HtmlId ENUM_CONSTANT_SUMMARY = HtmlId.of(\"enum.constant.summary\");\n+    static final HtmlId FIELD_DETAIL = HtmlId.of(\"field.detail\");\n+    static final HtmlId FIELD_SUMMARY = HtmlId.of(\"field.summary\");\n+    static final HtmlId FOR_REMOVAL = HtmlId.of(\"forRemoval\");\n+    static final HtmlId METHOD_DETAIL = HtmlId.of(\"method.detail\");\n+    static final HtmlId METHOD_SUMMARY = HtmlId.of(\"method.summary\");\n+    static final HtmlId METHOD_SUMMARY_TABLE = HtmlId.of(\"method-summary-table\");\n+    static final HtmlId MODULES = HtmlId.of(\"modules.summary\");\n+    static final HtmlId MODULE_DESCRIPTION = HtmlId.of(\"module.description\");\n+    static final HtmlId NAVBAR_TOP = HtmlId.of(\"navbar.top\");\n+    static final HtmlId NAVBAR_TOP_FIRSTROW = HtmlId.of(\"navbar.top.firstrow\");\n+    static final HtmlId NESTED_CLASS_SUMMARY = HtmlId.of(\"nested.class.summary\");\n+    static final HtmlId PACKAGES = HtmlId.of(\"packages.summary\");\n+    static final HtmlId PACKAGE_DESCRIPTION = HtmlId.of(\"package.description\");\n+    static final HtmlId PACKAGE_SUMMARY_TABLE = HtmlId.of(\"package-summary-table\");\n+    static final HtmlId PROPERTY_DETAIL = HtmlId.of(\"property.detail\");\n+    static final HtmlId PROPERTY_SUMMARY = HtmlId.of(\"property.summary\");\n+    static final HtmlId SERVICES = HtmlId.of(\"services.summary\");\n+    static final HtmlId SKIP_NAVBAR_TOP = HtmlId.of(\"skip.navbar.top\");\n+    static final HtmlId UNNAMED_PACKAGE_ANCHOR = HtmlId.of(\"unnamed.package\");\n+\n+    private static final String ENUM_CONSTANTS_INHERITANCE = \"enum.constants.inherited.from.class.\";\n+    private static final String FIELDS_INHERITANCE = \"fields.inherited.from.class.\";\n+    private static final String METHODS_INHERITANCE = \"methods.inherited.from.class.\";\n+    private static final String NESTED_CLASSES_INHERITANCE = \"nested.classes.inherited.from.class.\";\n+    private static final String PROPERTIES_INHERITANCE = \"properties.inherited.from.class.\";\n+\n+    \/**\n+     * Creates a factory for element-specific ids.\n+     *\n+     * @param configuration the configuration\n+     *\/\n+    HtmlIds(HtmlConfiguration configuration) {\n+        this.configuration = configuration;\n+        this.utils = configuration.utils;\n+    }\n+\n+    \/**\n+     * Returns an id for a package.\n+     *\n+     * @param element the package\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forPackage(PackageElement element) {\n+        return element == null || element.isUnnamed()\n+                ? UNNAMED_PACKAGE_ANCHOR\n+                : HtmlId.of(element.getQualifiedName().toString());\n+    }\n+\n+    \/**\n+     * Returns an id for a class or interface.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forClass(TypeElement element) {\n+        return HtmlId.of(utils.getFullyQualifiedName(element));\n+    }\n+\n+    \/**\n+     * Returns an id for an executable element, suitable for use when the\n+     * simple name and argument list will be unique within the page, such as\n+     * in the page for the declaration of the enclosing class or interface.\n+     *\n+     * @param element the element\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forMember(ExecutableElement element) {\n+        String a = element.getSimpleName()\n+                        + utils.makeSignature(element, null, true, true);\n+        \/\/ utils.makeSignature includes spaces\n+        return HtmlId.of(a.replaceAll(\"\\\\s\", \"\"));\n+    }\n+\n+    \/**\n+     * Returns an id for an executable element, including the context\n+     * of its documented enclosing class or interface.\n+     *\n+     * @param typeElement the enclosing class or interface\n+     * @param member      the element\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forMember(TypeElement typeElement, ExecutableElement member) {\n+        return HtmlId.of(utils.getSimpleName(member) + utils.signature(member, typeElement));\n+    }\n+\n+    \/**\n+     * Returns an id for a field, suitable for use when the simple name\n+     * will be unique within the page, such as in the page for the\n+     * declaration of the enclosing class or interface.\n+     *\n+     * <p>Warning: the name may not be unique if a property with the same\n+     * name is also being documented in the same class.\n+     *\n+     * @param element the element\n+     *\n+     * @return the id\n+     *\n+     * @see #forProperty(ExecutableElement)\n+     *\/\n+    HtmlId forMember(VariableElement element) {\n+        return HtmlId.of(element.getSimpleName().toString());\n+    }\n+\n+    \/**\n+     * Returns an id for a field, including the context\n+     * of its documented enclosing class or interface.\n+     *\n+     * @param typeElement the enclosing class or interface\n+     * @param member the element\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forMember(TypeElement typeElement, VariableElement member) {\n+        return HtmlId.of(typeElement.getQualifiedName() + \".\" + member.getSimpleName());\n+    }\n+\n+    \/**\n+     * Returns an id for the erasure of an executable element,\n+     * or {@code null} if there are no type variables in the signature.\n+     *\n+     * For backward compatibility, include an anchor using the erasures of the\n+     * parameters.  NOTE:  We won't need this method anymore after we fix\n+     * {@code @see} tags so that they use the type instead of the erasure.\n+     *\n+     * @param executableElement the element to anchor to\n+     * @return the 1.4.x style anchor for the executable element\n+     *\/\n+    protected HtmlId forErasure(ExecutableElement executableElement) {\n+        final StringBuilder buf = new StringBuilder(executableElement.getSimpleName());\n+        buf.append(\"(\");\n+        List<? extends VariableElement> parameters = executableElement.getParameters();\n+        boolean foundTypeVariable = false;\n+        for (int i = 0; i < parameters.size(); i++) {\n+            if (i > 0) {\n+                buf.append(\",\");\n+            }\n+            TypeMirror t = parameters.get(i).asType();\n+            SimpleTypeVisitor9<Boolean, Void> stv = new SimpleTypeVisitor9<>() {\n+                boolean foundTypeVariable = false;\n+\n+                @Override\n+                public Boolean visitArray(ArrayType t, Void p) {\n+                    visit(t.getComponentType());\n+                    buf.append(utils.getDimension(t));\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                public Boolean visitTypeVariable(TypeVariable t, Void p) {\n+                    buf.append(utils.asTypeElement(t).getQualifiedName());\n+                    foundTypeVariable = true;\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                public Boolean visitDeclared(DeclaredType t, Void p) {\n+                    buf.append(utils.getQualifiedTypeName(t));\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                protected Boolean defaultAction(TypeMirror e, Void p) {\n+                    buf.append(e);\n+                    return foundTypeVariable;\n+                }\n+            };\n+\n+            boolean isTypeVariable = stv.visit(t);\n+            if (!foundTypeVariable) {\n+                foundTypeVariable = isTypeVariable;\n+            }\n+        }\n+        buf.append(\")\");\n+        return foundTypeVariable ? HtmlId.of(buf.toString()) : null;\n+    }\n+\n+    \/**\n+     * Returns an id for a property, suitable for use when the simple name\n+     * will be unique within the page, such as in the page for the\n+     * declaration of the enclosing class or interface.\n+     *\n+     * <p>Warning: the name may not be unique if a field with the same\n+     * name is also being documented in the same class.\n+     *\n+     * @param element the element\n+     *\n+     * @return the id\n+     *\n+     * @see #forMember(VariableElement)\n+     *\/\n+    HtmlId forProperty(ExecutableElement element) {\n+        return HtmlId.of(element.getSimpleName().toString());\n+    }\n+\n+    \/**\n+     * Returns an id for the list of classes and interfaces inherited from\n+     * a class or interface.\n+     *\n+     * <p>Note: the use of {@code utils} may not be strictly necessary.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forInheritedClasses(TypeElement element) {\n+        return HtmlId.of(NESTED_CLASSES_INHERITANCE + utils.getFullyQualifiedName(element));\n+    }\n+\n+    \/**\n+     * Returns an id for the list of fields inherited from a class or interface.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forInheritedFields(TypeElement element) {\n+        return forInherited(FIELDS_INHERITANCE, element);\n+    }\n+\n+    \/**\n+     * Returns an id for the list of enum constants inherited from a class or interface.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forInheritedEnumConstants(TypeElement element) {\n+        return forInherited(ENUM_CONSTANTS_INHERITANCE, element);\n+    }\n+\n+    \/**\n+     * Returns an id for the list of methods inherited from a class or interface.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forInheritedMethods(TypeElement element) {\n+        return forInherited(METHODS_INHERITANCE, element);\n+    }\n+\n+    \/**\n+     * Returns an id for the list of properties inherited from a class or interface.\n+     *\n+     * @param element the class or interface\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forInheritedProperties(TypeElement element) {\n+        return forInherited(PROPERTIES_INHERITANCE, element);\n+    }\n+\n+    \/\/ Note: the use of {@code configuration} may not be strictly necessary as\n+    \/\/ compared to just using the fully qualified name, but would be a change in the value.\n+    private HtmlId forInherited(String prefix, TypeElement element) {\n+        return HtmlId.of(prefix + configuration.getClassName(element));\n+    }\n+\n+    \/**\n+     * Returns an id for a character on the A-Z Index page.\n+     *\n+     * @param character the character\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forIndexChar(char character) {\n+        return HtmlId.of(\"I:\" + character);\n+    }\n+\n+    \/**\n+     * Returns an id for a line in a source-code listing.\n+     *\n+     * @param lineNumber the line number\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forLine(int lineNumber) {\n+        return HtmlId.of(\"line.\" + lineNumber);\n+    }\n+\n+    \/**\n+     * Returns an id for a parameter, such as a component of a record.\n+     *\n+     * <p>Warning: this may not be unique on the page if used when there are\n+     * other like-named parameters.\n+     *\n+     * @param paramName the parameter name\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forParam(String paramName) {\n+        return HtmlId.of(\"param-\" + paramName);\n+    }\n+\n+    \/**\n+     * Returns an id for a fragment of text, such as in an {@code @index} tag,\n+     * using a map of counts to ensure the id is unique.\n+     *\n+     * @param text the text\n+     * @param counts the map of counts\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forText(String text, Map<String, Integer> counts) {\n+        String base = text.replaceAll(\"\\\\s+\", \"\");\n+        int count = counts.compute(base, (k, v) -> v == null ? 0 : v + 1);\n+        return HtmlId.of(count == 0 ? base : base + \"-\" + count);\n+    }\n+\n+    \/**\n+     * Returns an id for one of the kinds of section in the pages for item group summaries.\n+     *\n+     * <p>Note: while the use of simple names (that are not keywords)\n+     * may seem undesirable, they cannot conflict with the unqualified names\n+     * of fields and properties, which should not also appear on the same page.\n+     *\n+     * @param kind the kind of deprecated items in the section\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forSummaryKind(SummaryAPIListBuilder.SummaryElementKind kind) {\n+        return HtmlId.of(switch (kind) {\n+            case MODULE -> \"module\";\n+            case PACKAGE -> \"package\";\n+            case INTERFACE -> \"interface\";\n+            case CLASS -> \"class\";\n+            case ENUM -> \"enum.class\";\n+            case EXCEPTION -> \"exception\";\n+            case ERROR -> \"error\";\n+            case ANNOTATION_TYPE -> \"annotation.interface\";\n+            case FIELD -> \"field\";\n+            case METHOD -> \"method\";\n+            case CONSTRUCTOR -> \"constructor\";\n+            case ENUM_CONSTANT -> \"enum.constant\";\n+            case ANNOTATION_TYPE_MEMBER -> \"annotation.interface.member\";\n+            case RECORD_CLASS -> \"record.class\";\n+        });\n+    }\n+\n+    \/**\n+     * Returns an id for a \"tab\" in a table.\n+     *\n+     * @param tableId the id for the table\n+     * @param tabIndex the index of the tab\n+     *\n+     * @return the id\n+     *\/\n+    public static HtmlId forTab(HtmlId tableId, int tabIndex) {\n+        return HtmlId.of(tableId.name() + \"-tab\" + tabIndex);\n+    }\n+\n+    \/**\n+     * Returns an id for the \"tab panel\" in a table.\n+     *\n+     * @param tableId the id for the table\n+     *\n+     * @return the id\n+     *\/\n+    public static HtmlId forTabPanel(HtmlId tableId) {\n+        return HtmlId.of(tableId.name() + \".tabpanel\");\n+    }\n+\n+\n+    public HtmlId forPreviewSection(Element el) {\n+        return HtmlId.of(\"preview-\" + switch (el.getKind()) {\n+            case CONSTRUCTOR, METHOD -> forMember((ExecutableElement) el).name();\n+            case PACKAGE -> forPackage((PackageElement) el).name();\n+            default -> utils.getFullyQualifiedName(el, false);\n+        });\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":452,"deletions":0,"binary":false,"changes":452,"status":"added"},{"patch":"@@ -65,0 +65,1 @@\n+    private final HtmlIds htmlIds;\n@@ -74,1 +75,1 @@\n-        links = new Links(DocPath.empty, configuration.utils);\n+        links = new Links(DocPath.empty);\n@@ -77,0 +78,1 @@\n+        htmlIds = configuration.htmlIds;\n@@ -145,1 +147,1 @@\n-                    String url = HtmlTree.encodeURL(links.getAnchor((ExecutableElement) element));\n+                    String url = HtmlTree.encodeURL(htmlIds.forMember((ExecutableElement) element).name());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIndexBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-                .setId(getNameForIndex(ch));\n+                .setId(HtmlIds.forIndexChar(ch));\n@@ -358,1 +358,1 @@\n-                    : links.createLink(getNameForIndex(ch), label);\n+                    : links.createLink(HtmlIds.forIndexChar(ch), label);\n@@ -373,11 +373,0 @@\n-\n-    \/**\n-     * Returns the anchor name for a first character of names in the index.\n-     *\n-     * @param firstCharacter the character\n-     * @return               a name\n-     *\/\n-    protected String getNameForIndex(char firstCharacter) {\n-        return \"I:\" + links.getName(Character.toString(firstCharacter));\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                                    filename.fragment(m_writer.getPreviewSectionAnchor(target)),\n+                                    filename.fragment(m_writer.htmlIds.forPreviewSection(target).name()),\n@@ -140,1 +140,1 @@\n-                        m_writer.getPreviewSectionAnchor(target),\n+                        m_writer.htmlIds.forPreviewSection(target).name(),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkFactoryImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -92,1 +93,1 @@\n-                SectionName.METHOD_SUMMARY, summariesList, content);\n+                HtmlIds.METHOD_SUMMARY, summariesList, content);\n@@ -107,1 +108,0 @@\n-        String erasureAnchor;\n@@ -111,1 +111,2 @@\n-        if ((erasureAnchor = getErasureAnchor(method)) != null) {\n+        HtmlId erasureAnchor;\n+        if ((erasureAnchor = htmlIds.forErasure(method)) != null) {\n@@ -116,1 +117,1 @@\n-                .setId(links.getAnchor(method));\n+                .setId(htmlIds.forMember(method));\n@@ -184,1 +185,1 @@\n-                .setId(SectionName.METHOD_DETAIL.getName()));\n+                .setId(HtmlIds.METHOD_DETAIL));\n@@ -205,1 +206,1 @@\n-                .setId(\"method-summary-table\")\n+                .setId(HtmlIds.METHOD_SUMMARY_TABLE)\n@@ -233,2 +234,1 @@\n-        labelHeading.setId(SectionName.METHODS_INHERITANCE.getName()\n-                + links.getName(configuration.getClassName(typeElement)));\n+        labelHeading.setId(htmlIds.forInheritedMethods(typeElement));\n@@ -293,1 +293,1 @@\n-                            .where(writer.links.getAnchor(method))\n+                            .where(writer.htmlIds.forMember(method).name())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-                    .setId(\"all-modules-table\")\n+                    .setId(HtmlIds.ALL_MODULES_TABLE)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleIndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-                    .setId(SectionName.MODULES.getName());\n+                    .setId(HtmlIds.MODULES);\n@@ -522,1 +522,1 @@\n-                    .setId(SectionName.PACKAGES.getName());;\n+                    .setId(HtmlIds.PACKAGES);\n@@ -552,1 +552,1 @@\n-                .setId(\"package-summary-table\")\n+                .setId(HtmlIds.PACKAGE_SUMMARY_TABLE)\n@@ -695,1 +695,1 @@\n-                    .setId(SectionName.SERVICES.getName());\n+                    .setId(HtmlIds.SERVICES);\n@@ -817,2 +817,2 @@\n-            HtmlTree tree = HtmlTree.SECTION(HtmlStyle.moduleDescription);\n-            tree.setId(SectionName.MODULE_DESCRIPTION.getName());\n+            HtmlTree tree = HtmlTree.SECTION(HtmlStyle.moduleDescription)\n+                    .setId(HtmlIds.MODULE_DESCRIPTION);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriterImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+    private final HtmlIds htmlIds;\n@@ -119,0 +120,1 @@\n+        this.htmlIds = configuration.htmlIds;\n@@ -122,1 +124,1 @@\n-        this.links = new Links(path, configuration.utils);\n+        this.links = new Links(path);\n@@ -391,1 +393,1 @@\n-                            links.createLink(SectionName.MODULE_DESCRIPTION, contents.navModuleDescription));\n+                            links.createLink(HtmlIds.MODULE_DESCRIPTION, contents.navModuleDescription));\n@@ -397,1 +399,1 @@\n-                            links.createLink(SectionName.MODULES, contents.navModules));\n+                            links.createLink(HtmlIds.MODULES, contents.navModules));\n@@ -403,1 +405,1 @@\n-                            links.createLink(SectionName.PACKAGES, contents.navPackages));\n+                            links.createLink(HtmlIds.PACKAGES, contents.navPackages));\n@@ -409,1 +411,1 @@\n-                            links.createLink(SectionName.SERVICES, contents.navServices));\n+                            links.createLink(HtmlIds.SERVICES, contents.navServices));\n@@ -463,2 +465,2 @@\n-                    addContentToList(listContents, links.createLink(SectionName.CONSTRUCTOR_SUMMARY,\n-                            contents.navConstructor));\n+                    addContentToList(listContents,\n+                            links.createLink(HtmlIds.CONSTRUCTOR_SUMMARY, contents.navConstructor));\n@@ -472,2 +474,2 @@\n-                        addContentToList(listContents, links.createLink(SectionName.ENUM_CONSTANT_SUMMARY,\n-                                contents.navEnum));\n+                        addContentToList(listContents,\n+                                links.createLink(HtmlIds.ENUM_CONSTANT_SUMMARY, contents.navEnum));\n@@ -475,3 +477,2 @@\n-                        addContentToList(listContents, links.createLink(\n-                                SectionName.ENUM_CONSTANTS_INHERITANCE,\n-                                configuration.getClassName(typeElement), contents.navEnum));\n+                        addContentToList(listContents,\n+                                links.createLink( htmlIds.forInheritedEnumConstants(typeElement), contents.navEnum));\n@@ -487,1 +488,1 @@\n-                                links.createLink(SectionName.FIELD_SUMMARY, contents.navField));\n+                                links.createLink(HtmlIds.FIELD_SUMMARY, contents.navField));\n@@ -489,2 +490,2 @@\n-                        addContentToList(listContents, links.createLink(SectionName.FIELDS_INHERITANCE,\n-                                configuration.getClassName(typeElement), contents.navField));\n+                        addContentToList(listContents,\n+                                links.createLink(htmlIds.forInheritedFields(typeElement), contents.navField));\n@@ -500,1 +501,1 @@\n-                                links.createLink(SectionName.METHOD_SUMMARY, contents.navMethod));\n+                                links.createLink(HtmlIds.METHOD_SUMMARY, contents.navMethod));\n@@ -502,2 +503,2 @@\n-                        addContentToList(listContents, links.createLink(SectionName.METHODS_INHERITANCE,\n-                                configuration.getClassName(typeElement), contents.navMethod));\n+                        addContentToList(listContents,\n+                                links.createLink(htmlIds.forInheritedMethods(typeElement), contents.navMethod));\n@@ -513,1 +514,1 @@\n-                                links.createLink(SectionName.NESTED_CLASS_SUMMARY, contents.navNested));\n+                                links.createLink(HtmlIds.NESTED_CLASS_SUMMARY, contents.navNested));\n@@ -515,2 +516,2 @@\n-                        addContentToList(listContents, links.createLink(SectionName.NESTED_CLASSES_INHERITANCE,\n-                                configuration.utils.getFullyQualifiedName(typeElement), contents.navNested));\n+                        addContentToList(listContents,\n+                                links.createLink(htmlIds.forInheritedClasses(typeElement), contents.navNested));\n@@ -526,1 +527,1 @@\n-                                links.createLink(SectionName.PROPERTY_SUMMARY, contents.navProperty));\n+                                links.createLink(HtmlIds.PROPERTY_SUMMARY, contents.navProperty));\n@@ -528,2 +529,2 @@\n-                        addContentToList(listContents, links.createLink(SectionName.PROPERTIES_INHERITANCE,\n-                                configuration.getClassName(typeElement), contents.navProperty));\n+                        addContentToList(listContents,\n+                                links.createLink(htmlIds.forInheritedProperties(typeElement), contents.navProperty));\n@@ -557,1 +558,1 @@\n-                        addContentToList(listContents, links.createLink(SectionName.FIELD_SUMMARY,\n+                        addContentToList(listContents, links.createLink(HtmlIds.FIELD_SUMMARY,\n@@ -566,1 +567,1 @@\n-                                SectionName.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY,\n+                                HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY,\n@@ -575,1 +576,1 @@\n-                                SectionName.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY,\n+                                HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY,\n@@ -640,1 +641,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.CONSTRUCTOR_DETAIL, contents.navConstructor));\n+                    addContentToList(listContents, links.createLink(HtmlIds.CONSTRUCTOR_DETAIL, contents.navConstructor));\n@@ -647,1 +648,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.ENUM_CONSTANT_DETAIL, contents.navEnum));\n+                    addContentToList(listContents, links.createLink(HtmlIds.ENUM_CONSTANT_DETAIL, contents.navEnum));\n@@ -654,1 +655,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.FIELD_DETAIL, contents.navField));\n+                    addContentToList(listContents, links.createLink(HtmlIds.FIELD_DETAIL, contents.navField));\n@@ -661,1 +662,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.METHOD_DETAIL, contents.navMethod));\n+                    addContentToList(listContents, links.createLink(HtmlIds.METHOD_DETAIL, contents.navMethod));\n@@ -668,1 +669,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.PROPERTY_DETAIL, contents.navProperty));\n+                    addContentToList(listContents, links.createLink(HtmlIds.PROPERTY_DETAIL, contents.navProperty));\n@@ -723,2 +724,2 @@\n-                    addContentToList(listContents, links.createLink(SectionName.FIELD_DETAIL,\n-                            contents.navField));\n+                    addContentToList(listContents,\n+                            links.createLink(HtmlIds.FIELD_DETAIL, contents.navField));\n@@ -732,1 +733,1 @@\n-                    addContentToList(listContents, links.createLink(SectionName.ANNOTATION_TYPE_ELEMENT_DETAIL,\n+                    addContentToList(listContents, links.createLink(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL,\n@@ -917,1 +918,1 @@\n-                .setId(SectionName.NAVBAR_TOP.getName())\n+                .setId(HtmlIds.NAVBAR_TOP)\n@@ -919,1 +920,1 @@\n-                        links.createLink(SectionName.SKIP_NAVBAR_TOP, skipNavLinks,\n+                        links.createLink(HtmlIds.SKIP_NAVBAR_TOP, skipNavLinks,\n@@ -921,1 +922,0 @@\n-        SectionName navListSection = SectionName.NAVBAR_TOP_FIRSTROW;\n@@ -928,1 +928,1 @@\n-                .setId(navListSection.getName())\n+                .setId(HtmlIds.NAVBAR_TOP_FIRSTROW)\n@@ -955,1 +955,1 @@\n-                .setId(SectionName.SKIP_NAVBAR_TOP.getName()));\n+                .setId(HtmlIds.SKIP_NAVBAR_TOP));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                SectionName.NESTED_CLASS_SUMMARY, summariesList, content);\n+                HtmlIds.NESTED_CLASS_SUMMARY, summariesList, content);\n@@ -119,2 +119,1 @@\n-        labelHeading.setId(SectionName.NESTED_CLASSES_INHERITANCE.getName()\n-                + links.getName(utils.getFullyQualifiedName(typeElement)));\n+        labelHeading.setId(htmlIds.forInheritedClasses(typeElement));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                    .setId(\"all-packages-table\")\n+                    .setId(HtmlIds.ALL_PACKAGES_TABLE)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageIndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-            Content packageLink = links.createLink(getPackageAnchorName(pkg),\n+            Content packageLink = links.createLink(htmlIds.forPackage(pkg),\n@@ -191,1 +191,1 @@\n-                    .setId(getPackageAnchorName(usingPackage));\n+                    .setId(htmlIds.forPackage(usingPackage));\n@@ -204,1 +204,1 @@\n-                Content typeContent = links.createLink(dp.fragment(getPackageAnchorName(usingPackage)),\n+                Content typeContent = links.createLink(dp.fragment(htmlIds.forPackage(usingPackage).name()),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageUseWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-            tree.setId(SectionName.PACKAGE_DESCRIPTION.getName());\n+            tree.setId(HtmlIds.PACKAGE_DESCRIPTION);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                SectionName.PROPERTY_SUMMARY, summariesList, content);\n+                HtmlIds.PROPERTY_SUMMARY, summariesList, content);\n@@ -89,1 +89,1 @@\n-                .setId(name(property));\n+                .setId(htmlIds.forProperty(property));\n@@ -144,1 +144,1 @@\n-                        .setId(SectionName.PROPERTY_DETAIL.getName())\n+                        .setId(HtmlIds.PROPERTY_DETAIL)\n@@ -184,6 +184,5 @@\n-        HtmlTree labelHeading = HtmlTree.HEADING(Headings.TypeDeclaration.INHERITED_SUMMARY_HEADING,\n-                label);\n-        labelHeading.setId(SectionName.PROPERTIES_INHERITANCE.getName()\n-                + links.getName(configuration.getClassName(typeElement)));\n-        labelHeading.add(Entity.NO_BREAK_SPACE);\n-        labelHeading.add(classLink);\n+        HtmlTree labelHeading =\n+                HtmlTree.HEADING(Headings.TypeDeclaration.INHERITED_SUMMARY_HEADING, label)\n+                        .setId(htmlIds.forInheritedProperties(typeElement))\n+                        .add(Entity.NO_BREAK_SPACE)\n+                        .add(classLink);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.formats.html;\n-\n-\/**\n- * Enum representing various section names of generated API documentation.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public enum SectionName {\n-\n-    ANNOTATION_TYPE_ELEMENT_DETAIL(\"annotation.interface.element.detail\"),\n-    ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY(\"annotation.interface.optional.element.summary\"),\n-    ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY(\"annotation.interface.required.element.summary\"),\n-    CONSTRUCTOR_DETAIL(\"constructor.detail\"),\n-    CONSTRUCTOR_SUMMARY(\"constructor.summary\"),\n-    ENUM_CONSTANT_DETAIL(\"enum.constant.detail\"),\n-    ENUM_CONSTANTS_INHERITANCE(\"enum.constants.inherited.from.class.\"),\n-    ENUM_CONSTANT_SUMMARY(\"enum.constant.summary\"),\n-    FIELD_DETAIL(\"field.detail\"),\n-    FIELDS_INHERITANCE(\"fields.inherited.from.class.\"),\n-    FIELD_SUMMARY(\"field.summary\"),\n-    METHOD_DETAIL(\"method.detail\"),\n-    METHODS_INHERITANCE(\"methods.inherited.from.class.\"),\n-    METHOD_SUMMARY(\"method.summary\"),\n-    MODULE_DESCRIPTION(\"module.description\"),\n-    MODULES(\"modules.summary\"),\n-    PACKAGES(\"packages.summary\"),\n-    SERVICES(\"services.summary\"),\n-    NAVBAR_BOTTOM(\"navbar.bottom\"),\n-    NAVBAR_BOTTOM_FIRSTROW(\"navbar.bottom.firstrow\"),\n-    NAVBAR_TOP(\"navbar.top\"),\n-    NAVBAR_TOP_FIRSTROW(\"navbar.top.firstrow\"),\n-    NESTED_CLASSES_INHERITANCE(\"nested.classes.inherited.from.class.\"),\n-    NESTED_CLASS_SUMMARY(\"nested.class.summary\"),\n-    OVERVIEW_DESCRIPTION(\"overview.description\"),\n-    PACKAGE_DESCRIPTION(\"package.description\"),\n-    PROPERTY_DETAIL(\"property.detail\"),\n-    PROPERTIES_INHERITANCE(\"properties.inherited.from.class.\"),\n-    PROPERTY_SUMMARY(\"property.summary\"),\n-    SKIP_NAVBAR_BOTTOM(\"skip.navbar.bottom\"),\n-    SKIP_NAVBAR_TOP(\"skip.navbar.top\"),\n-    UNNAMED_PACKAGE_ANCHOR(\"unnamed.package\");\n-\n-    private final String value;\n-\n-    SectionName(String sName) {\n-        this.value = sName;\n-    }\n-\n-    public String getName() {\n-        return this.value;\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SectionName.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n@@ -157,1 +156,1 @@\n-                .setId(utils.getFullyQualifiedName(typeElement));\n+                .setId(htmlIds.forClass(typeElement));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriterImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-                                classWriter.links.createLink(classWriter.getPreviewSectionAnchor(typeElement),\n+                                classWriter.links.createLink(classWriter.htmlIds.forPreviewSection(typeElement),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -315,1 +316,1 @@\n-                    \"line.\" + Integer.toString(currentLineNo),\n+                    HtmlIds.forLine(currentLineNo),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SourceToHTMLConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -286,1 +287,1 @@\n-     * @param sectionName   the section name to use for the section id attribute\n+     * @param htmlId        the id for the section\n@@ -290,1 +291,1 @@\n-    public void addSummary(HtmlStyle style, SectionName sectionName, Content summariesList, Content content) {\n+    public void addSummary(HtmlStyle style, HtmlId htmlId, Content summariesList, Content content) {\n@@ -292,1 +293,1 @@\n-                .setId(sectionName.getName());\n+                .setId(htmlId);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SubWriterHolderWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -49,2 +50,2 @@\n- * Generate File to list all the summary elements with the\n- * appropriate links.\n+ * Base class for generating a summary page that lists elements with a common characteristic,\n+ * such as deprecated elements, preview elements, and so on.\n@@ -56,2 +57,0 @@\n- *\n- * @see java.util.List\n@@ -61,19 +60,0 @@\n-    private String getAnchorName(SummaryElementKind kind) {\n-        return switch (kind) {\n-            case MODULE -> \"module\";\n-            case PACKAGE -> \"package\";\n-            case INTERFACE -> \"interface\";\n-            case CLASS -> \"class\";\n-            case ENUM -> \"enum.class\";\n-            case EXCEPTION -> \"exception\";\n-            case ERROR -> \"error\";\n-            case ANNOTATION_TYPE -> \"annotation.interface\";\n-            case FIELD -> \"field\";\n-            case METHOD -> \"method\";\n-            case CONSTRUCTOR -> \"constructor\";\n-            case ENUM_CONSTANT -> \"enum.constant\";\n-            case ANNOTATION_TYPE_MEMBER -> \"annotation.interface.member\";\n-            case RECORD_CLASS -> \"record.class\";\n-        };\n-    }\n-\n@@ -158,1 +138,1 @@\n-                addSummaryAPI(summaryapi.getSet(kind), getAnchorName(kind),\n+                addSummaryAPI(summaryapi.getSet(kind), HtmlIds.forSummaryKind(kind),\n@@ -171,2 +151,2 @@\n-     * @param builder the summary list builder\n-     * @param kind the kind of list being documented\n+     * @param id the id for the link\n+     * @param headingKey\n@@ -175,3 +155,2 @@\n-    protected void addIndexLink(String anchorName, String headingKey,\n-                                Content contentTree) {\n-        Content li = HtmlTree.LI(links.createLink(anchorName,\n+    protected void addIndexLink(HtmlId id, String headingKey, Content contentTree) {\n+        Content li = HtmlTree.LI(links.createLink(id,\n@@ -185,1 +164,1 @@\n-     * @param apisummary the summary list builder\n+     * @param apiSummary the summary list builder\n@@ -188,1 +167,1 @@\n-    public Content getContentsList(L apisummary) {\n+    public Content getContentsList(L apiSummary) {\n@@ -196,1 +175,1 @@\n-        addExtraIndexLink(apisummary, ul);\n+        addExtraIndexLink(apiSummary, ul);\n@@ -198,2 +177,2 @@\n-            if (apisummary.hasDocumentation(kind)) {\n-                addIndexLink(getAnchorName(kind), getHeadingKey(kind), ul);\n+            if (apiSummary.hasDocumentation(kind)) {\n+                addIndexLink(HtmlIds.forSummaryKind(kind), getHeadingKey(kind), ul);\n@@ -227,1 +206,1 @@\n-    protected void addSummaryAPI(SortedSet<Element> apiList, String id,\n+    protected void addSummaryAPI(SortedSet<Element> apiList, HtmlId id,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":14,"deletions":35,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -88,0 +89,7 @@\n+    \/**\n+     * Creates a taglet writer.\n+     *\n+     * @param htmlWriter      the {@code HtmlDocletWriter} for the page\n+     * @param isFirstSentence {@code true} if this taglet writer is being used for a\n+     *                        \"first sentence\" summary\n+     *\/\n@@ -92,0 +100,9 @@\n+    \/**\n+     * Creates a taglet writer.\n+     *\n+     * @param htmlWriter      the {@code HtmlDocletWriter} for the page\n+     * @param isFirstSentence {@code true} if this taglet writer is being used for a\n+     *                        \"first sentence\" summary, and {@code false} otherwise\n+     * @param inSummary       {@code true} if this taglet writer is being used for the content\n+     *                        of a {@code {@summary ...}} tag, and {@code false} otherwise\n+     *\/\n@@ -205,1 +222,1 @@\n-        body.add(HtmlTree.CODE(defineID ? HtmlTree.SPAN_ID(\"param-\" + paramName, nameTree) : nameTree));\n+        body.add(HtmlTree.CODE(defineID ? HtmlTree.SPAN_ID(HtmlIds.forParam(paramName), nameTree) : nameTree));\n@@ -378,7 +395,2 @@\n-            String anchorName = htmlWriter.links.getName(tagText);\n-            int count = htmlWriter.indexAnchorTable\n-                    .compute(anchorName, (k, v) -> v == null ? 0 : v + 1);\n-            if (count > 0) {\n-                anchorName += \"-\" + count;\n-            }\n-            result = HtmlTree.SPAN(anchorName, HtmlStyle.searchTagResult, new StringContent(tagText));\n+            HtmlId id = HtmlIds.forText(tagText, htmlWriter.indexAnchorTable);\n+            result = HtmlTree.SPAN(id, HtmlStyle.searchTagResult, new StringContent(tagText));\n@@ -438,1 +450,1 @@\n-                        new DocLink(htmlWriter.path, anchorName));\n+                        new DocLink(htmlWriter.path, id.name()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html.markup;\n+\n+\/**\n+ * A type-safe wrapper around a {@code String}, for use as an \"id\"\n+ * in {@code HtmlTree} objects.\n+ *\n+ * @see HtmlTree#setId(HtmlId)\n+ *\/\n+public interface HtmlId {\n+    \/**\n+     * Creates an id with the given name.\n+     *\n+     * @param name the name\n+     * @return the id\n+     *\/\n+    static HtmlId of(String name) {\n+        assert name.indexOf(' ') == -1;\n+        return () -> name;\n+    }\n+\n+    \/**\n+     * {@return the name of the id}\n+     *\/\n+    String name();\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlId.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -122,2 +122,2 @@\n-    public HtmlTree setId(String id) {\n-        return put(HtmlAttr.ID, id);\n+    public HtmlTree setId(HtmlId id) {\n+        return put(HtmlAttr.ID, id.name());\n@@ -765,1 +765,1 @@\n-    public static HtmlTree SPAN_ID(String id, Content body) {\n+    public static HtmlTree SPAN_ID(HtmlId id, Content body) {\n@@ -779,1 +779,1 @@\n-    public static HtmlTree SPAN(String id, HtmlStyle style, Content body) {\n+    public static HtmlTree SPAN(HtmlId id, HtmlStyle style, Content body) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import javax.lang.model.element.ExecutableElement;\n-\n-import jdk.javadoc.internal.doclets.formats.html.SectionName;\n@@ -34,1 +31,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -37,7 +33,1 @@\n- * Factory for HTML A elements, both links (with a {@code href} attribute)\n- * and anchors (with an {@code id} or {@code name} attribute).\n- *\n- * Most methods in this class are static factory methods.\n- * The exceptions are those methods that directly or indirectly depend on the HTML version\n- * being used, when determining valid HTML names (ids),\n- * and those methods that generate anchors.\n+ * Factory for HTML A elements: links (with a {@code href} attribute).\n@@ -53,1 +43,0 @@\n-    private final Utils utils;\n@@ -56,4 +45,2 @@\n-     * Creates a {@code Links} object for a specific file, to be written in a specific HTML version.\n-     * The version is used by the {@link #getName(String) getName} method\n-     * to help determine valid HTML names (ids), and to determine whether\n-     * to use an {@code id} or {@code name} attribute when creating anchors.\n+     * Creates a {@code Links} object for a specific file.\n+     * Links to other files will be made relative to this file where possible.\n@@ -63,1 +50,1 @@\n-    public Links(DocPath file, Utils utils) {\n+    public Links(DocPath file) {\n@@ -65,1 +52,0 @@\n-        this.utils = utils;\n@@ -69,1 +55,1 @@\n-     * Creates a link of the form {@code <a href=\"#where\">label<\/a>}.\n+     * Creates a link of the form {@code <a href=\"#id\">label<\/a>}.\n@@ -71,1 +57,1 @@\n-     * @param where      the position of the link in the file\n+     * @param id      the position of the link in the file\n@@ -75,2 +61,2 @@\n-    public Content createLink(String where, Content label) {\n-        DocLink l = DocLink.fragment(getName(where));\n+    public Content createLink(HtmlId id, Content label) {\n+        DocLink l = DocLink.fragment(id.name());\n@@ -81,1 +67,1 @@\n-     * Creates a link of the form {@code <a href=\"#sectionName\">label<\/a>}.\n+     * Creates a link of the form {@code <a href=\"#id\" title=\"title\" target=\"target\">label<\/a>}.\n@@ -83,11 +69,4 @@\n-     * @param sectionName   the section name to which the link will be created\n-     * @param label         the content for the link\n-     * @return a content tree for the link\n-     *\/\n-    public Content createLink(SectionName sectionName, Content label) {\n-        DocLink l =  DocLink.fragment(sectionName.getName());\n-        return createLink(l, label, \"\", \"\");\n-    }\n-\n-    \/**\n-     * Creates a link of the form {@code <a href=\"#sectionNameWhere\">label<\/a>}.\n+     * @param id     the id to which the link will be created\n+     * @param label  the content for the link\n+     * @param title  the title for the link\n+     * @param target the target for the link, or null\n@@ -95,5 +74,0 @@\n-     * @param sectionName   the section name combined with where to which the link\n-     *                      will be created\n-     * @param where         the fragment combined with sectionName to which the link\n-     *                      will be created\n-     * @param label         the content for the link\n@@ -102,16 +76,2 @@\n-    public Content createLink(SectionName sectionName, String where, Content label) {\n-        DocLink l =  DocLink.fragment(sectionName.getName() + getName(where));\n-        return createLink(l, label, \"\", \"\");\n-    }\n-\n-    \/**\n-     * Creates a link of the form {@code <a href=\"#stylename\" title=\"title\" target=\"target\">label<\/a>}.\n-     *\n-     * @param sectionName   the section name to which the link will be created\n-     * @param label     the content for the link\n-     * @param title     the title for the link\n-     * @param target    the target for the link, or null\n-     * @return a content tree for the link\n-     *\/\n-    public Content createLink(SectionName sectionName, Content label, String title, String target) {\n-        DocLink l = DocLink.fragment(sectionName.getName());\n+    public Content createLink(HtmlId id, Content label, String title, String target) {\n+        DocLink l = DocLink.fragment(id.name());\n@@ -268,3 +228,1 @@\n-     * Returns the HTML id to use for an executable element.\n-     *\n-     * @param executableElement the element\n+     * Creates an external link.\n@@ -272,27 +230,3 @@\n-     * @return the id\n-     *\/\n-    public String getAnchor(ExecutableElement executableElement) {\n-        return getAnchor(executableElement, false);\n-    }\n-\n-    \/**\n-     * Returns the HTML id to use for an executable element.\n-     *\n-     * @param executableElement the element\n-     * @param isProperty whether or not the element represents a property\n-     *\n-     * @return the id\n-     *\/\n-    public String getAnchor(ExecutableElement executableElement, boolean isProperty) {\n-        String a = isProperty\n-                ? executableElement.getSimpleName().toString()\n-                : executableElement.getSimpleName()\n-                    + utils.makeSignature(executableElement, null, true, true);\n-        return getName(a);\n-    }\n-\n-    \/**\n-     * Converts a name to a valid HTML id.\n-     *\n-     * @param name the string that needs to be converted to a valid HTML id\n-     * @return a valid HTML name\n+     * @param link       the details for the link\n+     * @param label      the content for the link\n+     * @return a content tree for the link\n@@ -300,2 +234,3 @@\n-    public String getName(String name) {\n-        return name.replaceAll(\"\\\\s+\", \"\");\n+    public Content createExternalLink(DocLink link, Content label) {\n+        return HtmlTree.A(link.relativizeAgainst(file).toString(), label)\n+            .setStyle(HtmlStyle.externalLink);\n@@ -303,1 +238,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Links.java","additions":22,"deletions":88,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.function.BiFunction;\n@@ -42,0 +41,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.HtmlIds;\n@@ -80,1 +80,0 @@\n-    private BiFunction<String, Integer, String> tabId = (tableId, tabIndex) -> tableId + \"-tab\" + tabIndex;\n@@ -85,1 +84,1 @@\n-    private String id;\n+    private HtmlId id;\n@@ -225,1 +224,1 @@\n-    public Table setId(String id) {\n+    public Table setId(HtmlId id) {\n@@ -278,1 +277,1 @@\n-     * {@code <th>} or {@code <td>} cell.\n+     * {@code <div>} cell.\n@@ -302,1 +301,1 @@\n-        Set<String> tabClasses = new HashSet<>();\n+        Set<String> tabClasses = new HashSet<>(); \/\/ !! would be better as a List\n@@ -304,1 +303,6 @@\n-            tabClasses.add(id);\n+            \/\/ Construct a series of CSS classes to add to the cells of this row,\n+            \/\/ such that there is a default value and a value corresponding to each\n+            \/\/ tab whose predicate matches the element. The classes correspond to\n+            \/\/ the equivalent ids. The classes are used to determine the cells to\n+            \/\/ make visible when a tab is selected.\n+            tabClasses.add(id.name());\n@@ -311,1 +315,1 @@\n-                    tabClasses.add(tabId.apply(id, tabIndex));\n+                    tabClasses.add(HtmlIds.forTab(id, tabIndex).name());\n@@ -385,2 +389,2 @@\n-            tablist.add(createTab(tabId.apply(id, tabIndex), activeTabStyle, true, defaultTab));\n-            table.put(HtmlAttr.ARIA_LABELLEDBY, tabId.apply(id, tabIndex));\n+            tablist.add(createTab(HtmlIds.forTab(id, tabIndex), activeTabStyle, true, defaultTab));\n+            table.put(HtmlAttr.ARIA_LABELLEDBY, HtmlIds.forTab(id, tabIndex).name());\n@@ -390,1 +394,1 @@\n-                    HtmlTree tab = createTab(tabId.apply(id, tabIndex), tabStyle, false, tabName);\n+                    HtmlTree tab = createTab(HtmlIds.forTab(id, tabIndex), tabStyle, false, tabName);\n@@ -398,1 +402,1 @@\n-                    .put(HtmlAttr.ID, id + \".tabpanel\")\n+                    .setId(HtmlIds.forTabPanel(id))\n@@ -408,1 +412,1 @@\n-    private HtmlTree createTab(String tabId, HtmlStyle style, boolean defaultTab, String tabName) {\n+    private HtmlTree createTab(HtmlId tabId, HtmlStyle style, boolean defaultTab, String tabName) {\n@@ -410,1 +414,1 @@\n-                .put(HtmlAttr.ID, tabId)\n+                .setId(tabId)\n@@ -413,1 +417,1 @@\n-                .put(HtmlAttr.ARIA_CONTROLS, id + \".tabpanel\")\n+                .put(HtmlAttr.ARIA_CONTROLS, HtmlIds.forTabPanel(id).name())\n@@ -416,1 +420,1 @@\n-                .put(HtmlAttr.ONCLICK, \"show('\" + id + \"', '\" + (defaultTab ? id : tabId)\n+                .put(HtmlAttr.ONCLICK, \"show('\" + id.name() + \"', '\" + (defaultTab ? id : tabId).name()\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Table.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+\n@@ -71,0 +72,1 @@\n+\n@@ -178,3 +180,2 @@\n-     * @param rset set of elements summary for removal.\n-     * @param sset set of summary elements.\n-     * @param members members to be added in the list.\n+     * @param sset set of summary elements\n+     * @param members members to be added in the list\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}