{"files":[{"patch":"@@ -31,1 +31,1 @@\n-    _shared_trampoline_requests = new SharedTrampolineRequests();\n+    _shared_trampoline_requests = new SharedTrampolineRequests(4, 1024);\n@@ -33,2 +33,5 @@\n-  SharedTrampolineRequest request(dest, caller_offset);\n-  _shared_trampoline_requests->push(request);\n+  _shared_trampoline_requests->maybe_grow();\n+\n+  bool p_created;\n+  LinkedListImpl<int>* offsets = _shared_trampoline_requests->put_if_absent(dest, &p_created);\n+  offsets->add(caller_offset);\n@@ -38,2 +41,2 @@\n-static bool emit_shared_stubs_to_runtime_call(CodeBuffer* cb, CodeBuffer::SharedTrampolineRequests* requests) {\n-  if (requests == NULL) {\n+static bool emit_shared_trampolines(CodeBuffer* cb, CodeBuffer::SharedTrampolineRequests* requests) {\n+  if (requests == nullptr) {\n@@ -43,15 +46,0 @@\n-  const int length = requests->length();\n-  const int table_length = length * 2 + 1;\n-  const int UNUSED = length;\n-  intArray last(table_length, table_length, UNUSED);  \/\/ maps an dest address to the last request of the address\n-  intArray prev(length, length, UNUSED);              \/\/ points to the previous request with the same dest address\n-\n-  for (int i = 0; i < length; i++) {\n-    const address dest = requests->at(i).dest();\n-    int j = intptr_t(dest) % table_length;\n-    for (; last.at(j) != UNUSED && requests->at(last.at(j)).dest() != dest; j = (j + 1) % table_length)\n-      ;\n-    prev.at(i) = last.at(j);\n-    last.at(j) = i;\n-  }\n-\n@@ -59,6 +47,0 @@\n-  for (int i = 0; i < table_length; i++) {\n-    if (last.at(i) == UNUSED) {\n-      continue;\n-    }\n-    int j = last.at(i);\n-    const address dest = requests->at(j).dest();\n@@ -66,0 +48,2 @@\n+  bool p_succeeded = true;\n+  auto emit = [&](address dest, LinkedListImpl<int> &offsets) {\n@@ -68,2 +52,5 @@\n-    for (; prev.at(j) != UNUSED; j = prev.at(j)) {\n-      masm.relocate(trampoline_stub_Relocation::spec(cb->insts()->start() + requests->at(j).caller_offset()));\n+\n+    LinkedListIterator<int> it(offsets.head());\n+    int offset = *it.next();\n+    for (; !it.is_empty(); offset = *it.next()) {\n+      masm.relocate(trampoline_stub_Relocation::spec(cb->insts()->start() + offset));\n@@ -73,1 +60,1 @@\n-    address stub = masm.emit_trampoline_stub(requests->at(j).caller_offset(), dest);\n+    address stub = masm.emit_trampoline_stub(offset, dest);\n@@ -76,1 +63,1 @@\n-      return false;\n+      p_succeeded = false;\n@@ -78,1 +65,0 @@\n-  }\n@@ -80,1 +66,6 @@\n-  return true;\n+    return p_succeeded;\n+  };\n+\n+  requests->iterate(emit);\n+\n+  return p_succeeded;\n@@ -85,1 +76,1 @@\n-      && emit_shared_stubs_to_runtime_call(this, _shared_trampoline_requests);\n+      && emit_shared_trampolines(this, _shared_trampoline_requests);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":24,"deletions":33,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -29,15 +29,0 @@\n-public:\n-  class SharedTrampolineRequest {\n-   private:\n-    address _dest;\n-    int _caller_offset;\n-\n-   public:\n-    SharedTrampolineRequest(address dest = nullptr, int caller_offset = -1):\n-        _dest(dest),\n-        _caller_offset(caller_offset) {}\n-\n-    address dest()      const { return _dest; }\n-    int caller_offset() const { return _caller_offset; }\n-  };\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+#include \"utilities\/linkedlist.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n@@ -400,2 +402,2 @@\n-  class SharedTrampolineRequest;\n-  typedef GrowableArray<SharedTrampolineRequest> SharedTrampolineRequests;\n+\n+  typedef ResizeableResourceHashtable<address, LinkedListImpl<int>> SharedTrampolineRequests;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test SharedStubToRuntimeTest\n+ * @test SharedTrampolineTest\n@@ -33,1 +33,1 @@\n- * @run driver compiler.sharedstubs.SharedStubToRuntimeTest\n+ * @run driver compiler.sharedstubs.SharedTrampolineTest\n@@ -46,1 +46,1 @@\n-public class SharedStubToRuntimeTest {\n+public class SharedTrampolineTest {\n@@ -50,1 +50,1 @@\n-        String testClassName = SharedStubToRuntimeTest.class.getName() + \"$\" + test;\n+        String testClassName = SharedTrampolineTest.class.getName() + \"$\" + test;\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedTrampolineTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStubToRuntimeTest.java","status":"renamed"}]}