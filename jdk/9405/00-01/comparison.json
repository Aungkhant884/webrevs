{"files":[{"patch":"@@ -29,3 +29,3 @@\n-void CodeBuffer::shared_stub_to_runtime_for(address dest, int caller_offset) {\n-  if (_shared_stub_to_runtime_call_requests == nullptr) {\n-    _shared_stub_to_runtime_call_requests = new SharedStubToRuntimeCallRequests();\n+void CodeBuffer::share_trampoline_for(address dest, int caller_offset) {\n+  if (_shared_trampoline_requests == nullptr) {\n+    _shared_trampoline_requests = new SharedTrampolineRequests();\n@@ -33,2 +33,2 @@\n-  SharedStubToRuntimeCallRequest request(dest, caller_offset);\n-  _shared_stub_to_runtime_call_requests->push(request);\n+  SharedTrampolineRequest request(dest, caller_offset);\n+  _shared_trampoline_requests->push(request);\n@@ -38,2 +38,1 @@\n-template <typename MacroAssembler>\n-bool emit_shared_stubs_to_runtime_call(CodeBuffer* cb, CodeBuffer::SharedStubToRuntimeCallRequests* requests) {\n+static bool emit_shared_stubs_to_runtime_call(CodeBuffer* cb, CodeBuffer::SharedTrampolineRequests* requests) {\n@@ -43,1 +42,1 @@\n-  auto by_dest = [](CodeBuffer::SharedStubToRuntimeCallRequest* r1, CodeBuffer::SharedStubToRuntimeCallRequest* r2) {\n+  auto by_dest = [](CodeBuffer::SharedTrampolineRequest* r1, CodeBuffer::SharedTrampolineRequest* r2) {\n@@ -79,1 +78,1 @@\n-      && emit_shared_stubs_to_runtime_call<MacroAssembler>(this, _shared_stub_to_runtime_call_requests);\n+      && emit_shared_stubs_to_runtime_call(this, _shared_trampoline_requests);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-  class SharedStubToRuntimeCallRequest {\n+  class SharedTrampolineRequest {\n@@ -36,1 +36,1 @@\n-    SharedStubToRuntimeCallRequest(address dest = nullptr, int caller_offset = -1):\n+    SharedTrampolineRequest(address dest = nullptr, int caller_offset = -1):\n@@ -52,1 +52,1 @@\n-  void shared_stub_to_runtime_for(address dest, int caller_offset);\n+  void share_trampoline_for(address dest, int caller_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -651,2 +651,3 @@\n-      if (CodeBuffer::supports_shared_stubs() && entry.rspec().type() == relocInfo::runtime_call_type) {\n-        code()->shared_stub_to_runtime_for(entry.target(), offset());\n+      if (entry.rspec().type() == relocInfo::runtime_call_type) {\n+        assert(CodeBuffer::supports_shared_stubs(), \"must support shared stubs\");\n+        code()->share_trampoline_for(entry.target(), offset());\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -400,2 +400,2 @@\n-  class SharedStubToRuntimeCallRequest;\n-  typedef GrowableArray<SharedStubToRuntimeCallRequest> SharedStubToRuntimeCallRequests;\n+  class SharedTrampolineRequest;\n+  typedef GrowableArray<SharedTrampolineRequest> SharedTrampolineRequests;\n@@ -428,2 +428,2 @@\n-  SharedStubToInterpRequests*      _shared_stub_to_interp_requests;       \/\/ used to collect requests for shared iterpreter stubs\n-  SharedStubToRuntimeCallRequests* _shared_stub_to_runtime_call_requests; \/\/ used to collect requests for shared runtime call stubs\n+  SharedStubToInterpRequests* _shared_stub_to_interp_requests; \/\/ used to collect requests for shared iterpreter stubs\n+  SharedTrampolineRequests*   _shared_trampoline_requests;     \/\/ used to collect requests for shared runtime call stubs\n@@ -451,1 +451,1 @@\n-    _shared_stub_to_runtime_call_requests = NULL;\n+    _shared_trampoline_requests = NULL;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}