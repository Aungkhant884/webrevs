{"files":[{"patch":"@@ -29,0 +29,48 @@\n+void CodeBuffer::shared_stub_to_runtime_for(address dest, int caller_offset) {\n+  if (_shared_stub_to_runtime_call_requests == nullptr) {\n+    _shared_stub_to_runtime_call_requests = new SharedStubToRuntimeCallRequests();\n+  }\n+  SharedStubToRuntimeCallRequest request(dest, caller_offset);\n+  _shared_stub_to_runtime_call_requests->push(request);\n+  _finalize_stubs = true;\n+}\n+\n+template <typename MacroAssembler>\n+bool emit_shared_stubs_to_runtime_call(CodeBuffer* cb, CodeBuffer::SharedStubToRuntimeCallRequests* requests) {\n+  if (requests == NULL) {\n+    return true;\n+  }\n+  auto by_dest = [](CodeBuffer::SharedStubToRuntimeCallRequest* r1, CodeBuffer::SharedStubToRuntimeCallRequest* r2) {\n+    if (r1->dest() < r2->dest()) {\n+      return -1;\n+    } else if (r1->dest() == r2->dest()) {\n+      return 0;\n+    } else {\n+      return 1;\n+    }\n+  };\n+  requests->sort(by_dest);\n+\n+  MacroAssembler masm(cb);\n+  const int length = requests->length();\n+  for (int i = 0; i < length; i++) {\n+    const address dest = requests->at(i).dest();\n+\n+    masm.set_code_section(cb->stubs());\n+    masm.align(wordSize);\n+    for (; (i + 1) < length && requests->at(i + 1).dest() == dest; i++) {\n+      masm.relocate(trampoline_stub_Relocation::spec(cb->insts()->start()\n+                                                     + requests->at(i).caller_offset()));\n+    }\n+    masm.set_code_section(cb->insts());\n+\n+    address stub = masm.emit_trampoline_stub(requests->at(i).caller_offset(), dest);\n+    if (stub == nullptr) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n@@ -30,1 +78,2 @@\n-  return emit_shared_stubs_to_interp<MacroAssembler>(this, _shared_stub_to_interp_requests);\n+  return emit_shared_stubs_to_interp<MacroAssembler>(this, _shared_stub_to_interp_requests)\n+      && emit_shared_stubs_to_runtime_call<MacroAssembler>(this, _shared_stub_to_runtime_call_requests);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -29,0 +29,15 @@\n+public:\n+  class SharedStubToRuntimeCallRequest {\n+   private:\n+    address _dest;\n+    int _caller_offset;\n+\n+   public:\n+    SharedStubToRuntimeCallRequest(address dest = nullptr, int caller_offset = -1):\n+        _dest(dest),\n+        _caller_offset(caller_offset) {}\n+\n+    address dest()      const { return _dest; }\n+    int caller_offset() const { return _caller_offset; }\n+  };\n+\n@@ -37,0 +52,2 @@\n+  void shared_stub_to_runtime_for(address dest, int caller_offset);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -651,4 +651,8 @@\n-      address stub = emit_trampoline_stub(offset(), entry.target());\n-      if (stub == NULL) {\n-        postcond(pc() == badAddress);\n-        return NULL; \/\/ CodeCache is full\n+      if (CodeBuffer::supports_shared_stubs() && entry.rspec().type() == relocInfo::runtime_call_type) {\n+        code()->shared_stub_to_runtime_for(entry.target(), offset());\n+      } else {\n+        address stub = emit_trampoline_stub(offset(), entry.target());\n+        if (stub == NULL) {\n+          postcond(pc() == badAddress);\n+          return NULL; \/\/ CodeCache is full\n+        }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -400,0 +400,2 @@\n+  class SharedStubToRuntimeCallRequest;\n+  typedef GrowableArray<SharedStubToRuntimeCallRequest> SharedStubToRuntimeCallRequests;\n@@ -426,1 +428,2 @@\n-  SharedStubToInterpRequests* _shared_stub_to_interp_requests; \/\/ used to collect requests for shared iterpreter stubs\n+  SharedStubToInterpRequests*      _shared_stub_to_interp_requests;       \/\/ used to collect requests for shared iterpreter stubs\n+  SharedStubToRuntimeCallRequests* _shared_stub_to_runtime_call_requests; \/\/ used to collect requests for shared runtime call stubs\n@@ -448,0 +451,1 @@\n+    _shared_stub_to_runtime_call_requests = NULL;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test SharedStubToRuntimeTest\n+ * @summary Checks that stubs to the interpreter can be shared for static or final method.\n+ * @bug 8280152\n+ * @library \/test\/lib\n+ *\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.sharedstubs.SharedStubToRuntimeTest\n+ *\/\n+\n+package compiler.sharedstubs;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SharedStubToRuntimeTest {\n+    private final static int ITERATIONS_TO_HEAT_LOOP = 20_000;\n+\n+    private static void runTest(String compiler, String test) throws Exception {\n+        String testClassName = SharedStubToRuntimeTest.class.getName() + \"$\" + test;\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(compiler);\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintRelocations\");\n+        command.add(\"-XX:CompileCommand=compileonly,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"log\");\n+        command.add(testClassName);\n+        command.add(\"a\");\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        List<String> compilers = java.util.Arrays.asList(\"-XX:-TieredCompilation\" \/* C2 *\/);\n+        List<String> tests = java.util.Arrays.asList(\"StaticMethodTest\");\n+        for (String compiler : compilers) {\n+            for (String test : tests) {\n+                runTest(compiler, test);\n+            }\n+        }\n+    }\n+\n+    private static String skipTo(Iterator<String> iter, String substring) {\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.contains(substring)) {\n+                return nextLine;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void checkOutput(OutputAnalyzer output) {\n+        List<String> addrs = Pattern.compile(\"\\\\(trampoline_stub\\\\) addr=(\\\\w+) .*\\\\[trampoline owner\")\n+            .matcher(output.getStdout())\n+            .results()\n+            .map(m -> m.group(1))\n+            .collect(Collectors.toList());\n+        if (addrs.stream().distinct().count() >= addrs.size()) {\n+            throw new RuntimeException(\"No stubs reused\");\n+        }\n+    }\n+\n+    public static class StaticMethodTest {\n+        private static void log(int i, String msg) {\n+            if (i > ITERATIONS_TO_HEAT_LOOP) {\n+                throw new RuntimeException(msg);\n+            }\n+        }\n+\n+        static void test(int i, String[] args) {\n+            if (i % args.length == 0) {\n+                log(i, \"args[0] = \" + args[0]);\n+            } else {\n+                log(i, \"No args\");\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                test(i, args);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStubToRuntimeTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}