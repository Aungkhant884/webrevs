{"files":[{"patch":"@@ -118,1 +118,1 @@\n-    private static final String formatSpecifier\n+    private static final String FORMAT_SPECIFIER\n@@ -121,1 +121,1 @@\n-    private static final Pattern fsPattern = Pattern.compile(formatSpecifier);\n+    private static final Pattern FORMAT_SPECIFIER_PATTERN = Pattern.compile(FORMAT_SPECIFIER);\n@@ -134,1 +134,1 @@\n-        Matcher matcher = fsPattern.matcher(fragment);\n+        Matcher matcher = FORMAT_SPECIFIER_PATTERN.matcher(fragment);\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-    class TransStringTemplate {\n+    final class TransStringTemplate {\n@@ -540,11 +540,0 @@\n-        boolean isProcessor(Name name) {\n-            if (processor instanceof JCIdent ident && ident.sym instanceof VarSymbol varSym) {\n-                if (varSym.flags() == (PUBLIC | FINAL | STATIC) &&\n-                        varSym.name == name &&\n-                        types.isSameType(varSym.owner.type, syms.stringTemplateType)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransLiterals.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -100,2 +100,1 @@\n-                Token ahead = tokenizer.readToken();\n-                savedTokens.add(ahead);\n+                savedTokens.add(tokenizer.readToken());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Scanner.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- \/\/ key: compiler.err.not.stmt\n+ \/\/ key: compiler.err.expected\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/StringTemplateUnclosedString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}