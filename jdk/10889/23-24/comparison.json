{"files":[{"patch":"@@ -124,1 +124,1 @@\n-     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s class room.\";\n+     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s classroom.\";\n@@ -128,1 +128,1 @@\n-     * {@code List.of(\"The student \", \" is in \", \"'s class room.\")}\n+     * {@code List.of(\"The student \", \" is in \", \"'s classroom.\")}\n@@ -140,1 +140,1 @@\n-     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s class room.\";\n+     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s classroom.\";\n@@ -159,1 +159,1 @@\n-     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s class room.\";\n+     * StringTemplate st = RAW.\"The student \\{student} is in \\{teacher}'s classroom.\";\n@@ -162,1 +162,1 @@\n-     * {@code result} will be equivalent to {@code \"The student Mary is in Johnson's class room.\"}\n+     * {@code result} will be equivalent to {@code \"The student Mary is in Johnson's classroom.\"}\n@@ -176,2 +176,2 @@\n-     * String result1 = STR.\"The student \\{student} is in \\{teacher}'s class room.\";\n-     * String result2 = RAW.\"The student \\{student} is in \\{teacher}'s class room.\".process(STR); \/\/ @highlight substring=\"process\"\n+     * String result1 = STR.\"The student \\{student} is in \\{teacher}'s classroom.\";\n+     * String result2 = RAW.\"The student \\{student} is in \\{teacher}'s classroom.\".process(STR); \/\/ @highlight substring=\"process\"\n@@ -179,1 +179,1 @@\n-     * produces an equivalent result for both {@code result1} and {@code result2}.\n+     * Produces an equivalent result for both {@code result1} and {@code result2}.\n@@ -191,2 +191,1 @@\n-     * @implNote The default implementation invokes the processor's process\n-     * method {@code processor.process(this)}.\n+     * @implNote The default implementation invokes {@code processor.process(this)}.\n@@ -288,1 +287,2 @@\n-     * Combine one or more {@link StringTemplate StringTemplates} into a single {@link StringTemplate}.\n+     * Combine zero or more {@link StringTemplate StringTemplates} into a single\n+     * {@link StringTemplate}.\n@@ -304,2 +304,6 @@\n-     * @throws NullPointerException if sts is null or if any of the elements are null\n-     * @throws RuntimeException if sts has zero elements\n+     * @throws NullPointerException if stringTemplates is null or if any of the elements are null\n+     *\n+     * @implNote If zero {@link StringTemplate} arguments are provided then a\n+     * {@link StringTemplate} with an empty frament and no values is returned, as if invoking\n+     * <code>StringTemplate.of(\"\")<\/code> . If only one {@link StringTemplate} argument is provided\n+     * then it is returned unchanged.\n@@ -313,2 +317,1 @@\n-     * of a supplied {@link StringTemplate}. In order to make use easier, {@link StringTemplate#STR}\n-     * is implicitly statically imported into every Java source. No other declaration is required.\n+     * of a supplied {@link StringTemplate}.\n@@ -324,1 +327,2 @@\n-     * @implNote The result of interpolation is not interned.\n+     * @implNote {@link StringTemplate#STR} is statically imported implicitly into every\n+     * Java compilation unit.<p>The result of interpolation is not interned.\n@@ -335,0 +339,2 @@\n+     * import static java.lang.template.StringTemplate.RAW;\n+     * ...\n@@ -339,0 +345,2 @@\n+     * @implNote Unlike {@link StringTemplate#STR}, {@link StringTemplate#RAW} must be\n+     * statically imported explicitly.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplate.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"}]}