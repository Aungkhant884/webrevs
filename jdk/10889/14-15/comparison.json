{"files":[{"patch":"@@ -36,2 +36,1 @@\n-import java.util.List;\n-import java.util.Objects;\n+import java.util.*;\n@@ -40,1 +39,0 @@\n-import jdk.internal.access.JavaUtilCollectionAccess;\n@@ -65,1 +63,0 @@\n-    private static final JavaUtilCollectionAccess JUCA = SharedSecrets.getJavaUtilCollectionAccess();\n@@ -205,2 +202,2 @@\n-        return processor.process(\n-            StringTemplate.of(fragments, JUCA.listFromTrustedArrayNullsAllowed(values)));\n+        List<Object> asList = Collections.unmodifiableList(new ArrayList<>(Arrays.asList(values)));\n+        return processor.process(StringTemplate.of(fragments, asList));\n@@ -224,16 +221,1 @@\n-    \/**\n-     * A {@link StringTemplate} where number of value slots exceeds\n-     * {@link java.lang.invoke.StringConcatFactory#MAX_INDY_CONCAT_ARG_SLOTS}.\n-     *\n-     * @param fragments  immutable list of string fragments from string template\n-     * @param values     immutable list of expression values\n-     *\/\n-    private record LargeStringTemplate(List<String> fragments, List<Object> values)\n-            implements StringTemplate {\n-        @Override\n-        public java.lang.String toString() {\n-            return StringTemplate.toString(this);\n-        }\n-    }\n-\n-    \/**\n+     \/**\n@@ -249,2 +231,1 @@\n-        return new LargeStringTemplate(List.of(fragments),\n-                                       JUCA.listFromTrustedArrayNullsAllowed(values));\n+        return JTA.newStringTemplate(fragments, values);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateRuntime.java","additions":5,"deletions":24,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-        return new TemplateSupport.SimpleStringTemplate(List.of(string), List.of());\n+        return TemplateSupport.of(List.of(string), List.of());\n@@ -238,1 +238,1 @@\n-    public static StringTemplate of(List<String> fragments, List<Object> values) {\n+    public static StringTemplate of(List<String> fragments, List<?> values) {\n@@ -245,3 +245,1 @@\n-        fragments = List.copyOf(fragments);\n-        values = TemplateSupport.toList(values.toArray().clone());\n-        return new TemplateSupport.SimpleStringTemplate(fragments, values);\n+        return TemplateSupport.of(fragments, values);\n@@ -263,1 +261,1 @@\n-    public static String interpolate(List<String> fragments, List<Object> values) {\n+    public static String interpolate(List<String> fragments, List<?> values) {\n@@ -271,1 +269,1 @@\n-        return TemplateSupport.interpolate(List.copyOf(fragments), TemplateSupport.toList(values.toArray()));\n+        return TemplateSupport.interpolate(fragments, values);\n@@ -301,1 +299,1 @@\n-    public static final StringProcessor STR = TemplateSupport.basicInterpolate();\n+    public static final StringProcessor STR = StringTemplate::interpolate;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplate.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.util.Arrays;\n+import java.util.Collections;\n@@ -67,20 +69,0 @@\n-    \/**\n-     * Access to nullible form of {@code List.of}\n-     *\/\n-    private static final JavaUtilCollectionAccess JUCA = SharedSecrets.getJavaUtilCollectionAccess();\n-\n-    \/**\n-     * Collect nullable elements from an array into a unmodifiable list.\n-     *\n-     * @param elements  elements to place in list\n-     *\n-     * @return unmodifiable list.\n-     *\n-     * @param <E>  type of elements\n-     *\/\n-    @SafeVarargs\n-    @SuppressWarnings({\"unchecked\", \"varargs\"})\n-    private static <E> List<E> toList(E... elements) {\n-        return JUCA.listFromTrustedArrayNullsAllowed(elements);\n-    }\n-\n@@ -112,1 +94,2 @@\n-    public  MethodHandle createStringTemplateImplMH(List<String> fragments, MethodType type) {\n+    @Override\n+    public MethodHandle createStringTemplateImplMH(List<String> fragments, MethodType type) {\n@@ -154,0 +137,68 @@\n+    \/**\n+     * Generic {@link StringTemplate}.\n+     *\n+     * @param fragments  immutable list of string fragments from string template\n+     * @param values     immutable list of expression values\n+     *\/\n+    private record SimpleStringTemplate(List<String> fragments, List<Object> values)\n+            implements StringTemplate {\n+        @Override\n+        public String toString() {\n+            return StringTemplate.toString(this);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a new StringTemplate composed from fragments and values.\n+     *\n+     * @param fragments array of string fragments\n+     * @param values    array of expression values\n+     *\n+     * @return StringTemplate composed from fragments and values\n+     *\/\n+    @Override\n+    public StringTemplate newStringTemplate(String[] fragments, Object[] values) {\n+        return new SimpleStringTemplate(List.of(fragments), toList(values));\n+    }\n+\n+    \/**\n+     * Returns a new StringTemplate composed from fragments and values.\n+     *\n+     * @param fragments list of string fragments\n+     * @param values    array of expression values\n+     *\n+     * @return StringTemplate composed from fragments and values\n+     *\/\n+    @Override\n+    public StringTemplate newStringTemplate(List<String> fragments, Object[] values) {\n+        return new SimpleStringTemplate(List.copyOf(fragments), toList(values));\n+    }\n+\n+    \/**\n+     * Returns a new StringTemplate composed from fragments and values.\n+     *\n+     * @param fragments list of string fragments\n+     * @param values    list of expression values\n+     *\n+     * @return StringTemplate composed from fragments and values\n+     *\/\n+    @Override\n+    public StringTemplate newStringTemplate(List<String> fragments, List<?> values) {\n+        return new SimpleStringTemplate(List.copyOf(fragments), toList(values.stream().toArray()));\n+    }\n+\n+    \/**\n+     * Collect nullable elements from an array into a unmodifiable list.\n+     *\n+     * @param elements  elements to place in list\n+     *\n+     * @return unmodifiable list.\n+     *\n+     * @param <E>  type of elements\n+     *\/\n+    @SafeVarargs\n+    @SuppressWarnings({\"unchecked\", \"varargs\"})\n+    private static <E> List<E> toList(E... elements) {\n+        return Collections.unmodifiableList(Arrays.asList(elements));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplateImplFactory.java","additions":72,"deletions":21,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -64,1 +64,3 @@\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+    static {\n+        SharedSecrets.setJavaTemplateAccess(new StringTemplateImplFactory());\n+    }\n@@ -66,1 +68,2 @@\n-    private static final JavaUtilCollectionAccess JUCA = SharedSecrets.getJavaUtilCollectionAccess();\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+    private static final JavaTemplateAccess JTA = SharedSecrets.getJavaTemplateAccess();\n@@ -69,1 +72,1 @@\n-     * Collect nullable elements from an array into a unmodifiable list.\n+     * Returns a StringTemplate composed from fragments and values.\n@@ -71,1 +74,2 @@\n-     * @param elements  elements to place in list\n+     * @implSpec The {@code fragments} list size must be one more that the\n+     * {@code values} list size.\n@@ -73,1 +77,2 @@\n-     * @return unmodifiable list.\n+     * @param fragments list of string fragments\n+     * @param values    list of expression values\n@@ -75,10 +80,5 @@\n-     * @param <E>  type of elements\n-     *\/\n-    @SafeVarargs\n-    @SuppressWarnings({\"unchecked\", \"varargs\"})\n-    static <E> List<E> toList(E... elements) {\n-        return JUCA.listFromTrustedArrayNullsAllowed(elements);\n-    }\n-\n-    \/**\n-     * Generic {@link StringTemplate}.\n+     * @return StringTemplate composed from fragments and values\n+     *\n+     * @throws IllegalArgumentException if fragments list size is not one more\n+     *         than values list size\n+     * @throws NullPointerException if fragments is null or values is null or if any fragment is null.\n@@ -86,2 +86,1 @@\n-     * @param fragments  immutable list of string fragments from string template\n-     * @param values     immutable list of expression values\n+     * @implNote Contents of both lists are copied to construct immutable lists.\n@@ -89,6 +88,2 @@\n-    record SimpleStringTemplate(List<String> fragments, List<Object> values)\n-            implements StringTemplate {\n-        @Override\n-        public java.lang.String toString() {\n-            return StringTemplate.toString(this);\n-        }\n+    static StringTemplate of(List<String> fragments, List<?> values) {\n+        return JTA.newStringTemplate(fragments, values);\n@@ -106,1 +101,1 @@\n-    static String interpolate(List<String> fragments, List<Object> values) {\n+    static String interpolate(List<String> fragments, List<?> values) {\n@@ -114,5 +109,4 @@\n-        Iterator<String> fragmentsIter = fragments.iterator();\n-        int i = 0;\n-        for (Object value : values) {\n-            strings[i++] = fragmentsIter.next();\n-            strings[i++] = String.valueOf(value);\n+        int i = 0, j = 0;\n+        for (; j < valuesSize; j++) {\n+            strings[i++] = fragments.get(j);\n+            strings[i++] = String.valueOf(values.get(j));\n@@ -120,1 +114,1 @@\n-        strings[i++] = fragmentsIter.next();\n+        strings[i] = fragments.get(j);\n@@ -166,1 +160,1 @@\n-        return new SimpleStringTemplate(TemplateSupport.toList(combinedFragments), TemplateSupport.toList(combinedValues));\n+        return JTA.newStringTemplate(combinedFragments, combinedValues);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/TemplateSupport.java","additions":25,"deletions":31,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.template.StringTemplate;\n@@ -42,0 +43,24 @@\n+\n+    \/\/ Returns a new StringTemplate composed from fragments and values.\n+    \/\/\n+    \/\/ @param fragments array of string fragments\n+    \/\/ @param values    array of expression values\n+    \/\/\n+    \/\/ @return StringTemplate composed from fragments and values\n+    public StringTemplate newStringTemplate(String[] fragments, Object[] values);\n+\n+    \/\/ Returns a new StringTemplate composed from fragments and values.\n+    \/\/\n+    \/\/ @param fragments list of string fragments\n+    \/\/ @param values    array of expression values\n+    \/\/\n+    \/\/ @return StringTemplate composed from fragments and values\n+    public StringTemplate newStringTemplate(List<String> fragments, Object[] values);\n+\n+    \/\/ Returns a new StringTemplate composed from fragments and values.\n+    \/\/\n+    \/\/ @param fragments list of string fragments\n+    \/\/ @param values    list of expression values\n+    \/\/\n+    \/\/ @return StringTemplate composed from fragments and values\n+    public StringTemplate newStringTemplate(List<String> fragments, List<?> values);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaTemplateAccess.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -528,2 +528,4 @@\n-            ensureClassInitialized(StringTemplate.class);\n-            access = javaTemplateAccess;\n+            try {\n+                Class.forName(\"java.lang.template.TemplateSupport\", true, null);\n+                access = javaTemplateAccess;\n+            } catch (ClassNotFoundException e) {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}