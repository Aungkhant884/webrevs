{"files":[{"patch":"@@ -286,2 +286,0 @@\n-            int longCount = carrierShape.longCount();\n-            int intCount = carrierShape.intCount();\n@@ -369,1 +367,1 @@\n-        private static Map<MethodType, CarrierElements>\n+        private static final Map<MethodType, CarrierElements>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/Carriers.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-            return \"java.util.WeakKey#\" + System.identityHashCode(this);\n+            return this.getClass().getCanonicalName() + \"#\" + System.identityHashCode(this);\n@@ -172,1 +172,1 @@\n-            return \"java.util.SoftKey#\" + System.identityHashCode(this);\n+            return this.getClass().getCanonicalName() + \"#\" + System.identityHashCode(this);\n@@ -226,1 +226,1 @@\n-            return \"java.util.StrongKey#\" + System.identityHashCode(this);\n+            return this.getClass().getCanonicalName() + \"#\" + System.identityHashCode(this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ReferenceKey.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -130,2 +130,2 @@\n-    @java.lang.Override\n-    public java.lang.String toString() {\n+    @Override\n+    public String toString() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/StringTemplateImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,0 +60,9 @@\n+\n+    \/*\n+     * Frequently used method types.\n+     *\/\n+    private static final MethodType MT_STRING_STIMPL =\n+            MethodType.methodType(String.class, StringTemplateImpl.class);\n+    private static final MethodType MT_LIST_STIMPL =\n+            MethodType.methodType(List.class, StringTemplateImpl.class);\n+\n@@ -112,2 +121,1 @@\n-        mt = MethodType.methodType(String.class, StringTemplateImpl.class);\n-        interpolateMH = MethodHandles.permuteArguments(interpolateMH, mt, permute);\n+        interpolateMH = MethodHandles.permuteArguments(interpolateMH, MT_STRING_STIMPL, permute);\n@@ -118,2 +126,1 @@\n-        mt = MethodType.methodType(List.class, StringTemplateImpl.class);\n-        valuesMH = MethodHandles.permuteArguments(valuesMH, mt, permute);\n+        valuesMH = MethodHandles.permuteArguments(valuesMH, MT_LIST_STIMPL, permute);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/StringTemplateImplFactory.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -104,2 +104,4 @@\n-     * String template bootstrap method for creating large string templates.\n-     * The non-static arguments are the fragments list and values list.\n+     * String template bootstrap method for creating large string templates,\n+     * i.e., when the number of value slots exceeds\n+     * {@link java.lang.invoke.StringConcatFactory#MAX_INDY_CONCAT_ARG_SLOTS}.\n+     * The non-static arguments are the fragments array and values array.\n@@ -108,1 +110,1 @@\n-     * @param name            method name\n+     * @param name            method name - not used\n@@ -110,0 +112,1 @@\n+     *                        (String[], Object[]) -> StringTemplate\n@@ -132,1 +135,1 @@\n-     * @param name            method name\n+     * @param name            method name - not used\n@@ -134,1 +137,2 @@\n-     * @param fragments       fragments from string template\n+     *                        (ptypes...) -> StringTemplate\n+     * @param fragments       fragment array for string template\n@@ -158,1 +162,1 @@\n-     * The static arguments include the fragments list  and a {@link MethodHandle}\n+     * The static arguments include the fragments array  and a {@link MethodHandle}\n@@ -163,1 +167,1 @@\n-     * @param name            method name\n+     * @param name            method name - not used\n@@ -165,0 +169,1 @@\n+     *                        (ptypes...) -> Object\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateRuntime.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    private static final long charMix(long lengthCoder, char value) {\n+    private static long charMix(long lengthCoder, char value) {\n@@ -81,1 +81,1 @@\n-    private static final long stringMix(long lengthCoder, String value) {\n+    private static long stringMix(long lengthCoder, String value) {\n@@ -85,1 +85,1 @@\n-    private static final long stringPrepend(long lengthCoder, byte[] buffer,\n+    private static long stringPrepend(long lengthCoder, byte[] buffer,\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodType;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaTemplateAccess.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}