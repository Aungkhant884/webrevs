{"files":[{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.invoke.StringConcatFactory.StringConcatItem;\n+import java.util.FormatConcatItem;\n@@ -139,1 +139,1 @@\n-    static long mix(long lengthCoder, StringConcatItem value) {\n+    static long mix(long lengthCoder, FormatConcatItem value) {\n@@ -349,1 +349,1 @@\n-     * Prepends the stringly representation of StringConcatItem value into buffer,\n+     * Prepends the stringly representation of FormatConcatItem value into buffer,\n@@ -361,1 +361,1 @@\n-                                StringConcatItem value) {\n+                                FormatConcatItem value) {\n@@ -365,1 +365,1 @@\n-            throw new AssertionError(\"StringConcatItem prepend error\", ex);\n+            throw new AssertionError(\"FormatConcatItem prepend error\", ex);\n@@ -383,1 +383,1 @@\n-                        StringConcatItem value, String prefix) {\n+                        FormatConcatItem value, String prefix) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -115,0 +115,2 @@\n+     *\n+     * @since 20\n@@ -714,1 +716,1 @@\n-                cl = StringConcatItem.class;\n+                cl = FormatConcatItem.class;\n@@ -736,1 +738,1 @@\n-        if (StringConcatItem.class.isAssignableFrom(cl)) return STRING_CONCAT_ITEM;\n+        if (FormatConcatItem.class.isAssignableFrom(cl)) return STRING_CONCAT_ITEM;\n@@ -1034,27 +1036,0 @@\n-    \/**\n-     * Implementations of this class provide information necessary to\n-     * assist {@link StringConcatFactory} perform optimal addition.\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n-    public interface StringConcatItem {\n-        \/**\n-         * Calculate the length of the insertion.\n-         *\n-         * @param lengthCoder current value of the length + coder\n-         * @return adjusted value of the length + coder\n-         *\/\n-        long mix(long lengthCoder);\n-\n-        \/**\n-         * Insert content into buffer prior to the current length.\n-         *\n-         * @param lengthCoder current value of the length + coder\n-         * @param buffer      buffer to right into\n-         *\n-         * @return adjusted value of the length + coder\n-         *\n-         * @throws Throwable if fails to prepend value (unusual).\n-         *\/\n-        long prepend(long lengthCoder, byte[] buffer) throws Throwable;\n-    }\n-\n@@ -1077,1 +1052,1 @@\n-     * @since 19\n+     * @since 20\n@@ -1110,1 +1085,1 @@\n-            boolean isStringConcatItem = StringConcatItem.class.isAssignableFrom(ptype);\n+            boolean isFormatConcatItem = FormatConcatItem.class.isAssignableFrom(ptype);\n@@ -1112,2 +1087,2 @@\n-                             isStringConcatItem ? StringConcatItem.class : Object.class;\n-            MethodHandle filter = isStringConcatItem ? null : stringifierFor(ttype);\n+                             isFormatConcatItem ? FormatConcatItem.class : Object.class;\n+            MethodHandle filter = isFormatConcatItem ? null : stringifierFor(ttype);\n@@ -1199,1 +1174,1 @@\n-     * @since 19\n+     * @since 20\n@@ -1275,1 +1250,1 @@\n-     * @since 19\n+     * @since 20\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":10,"deletions":35,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.util;\n+\n+import java.util.FormatItem.FormatItemDecimal;\n+import java.util.FormatItem.FormatItemHexadecimal;\n+import java.util.FormatItem.FormatItemOctal;\n+import java.util.FormatItem.FormatItemBoolean;\n+import java.util.FormatItem.FormatItemCharacter;\n+import java.util.FormatItem.FormatItemString;\n+import java.util.FormatItem.FormatItemFormatSpecifier;\n+import java.util.FormatItem.FormatItemModifier;\n+import java.util.FormatItem.FormatItemFillLeft;\n+import java.util.FormatItem.FormatItemFillRight;\n+import java.util.FormatItem.FormatItemUpper;\n+import java.util.FormatItem.FormatItemNull;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Implementations of this class provide information necessary to\n+ * assist {@link java.lang.invoke.StringConcatFactory} perform optimal\n+ * insertion.\n+ *\n+ * @since 20\n+ *\/\n+@PreviewFeature(feature=PreviewFeature.Feature.STRING_TEMPLATES)\n+public sealed interface FormatConcatItem\n+    permits FormatItemDecimal,\n+            FormatItemHexadecimal,\n+            FormatItemOctal,\n+            FormatItemBoolean,\n+            FormatItemCharacter,\n+            FormatItemString,\n+            FormatItemFormatSpecifier,\n+            FormatItemModifier,\n+            FormatItemFillLeft,\n+            FormatItemFillRight,\n+            FormatItemUpper,\n+            FormatItemNull\n+{\n+    \/**\n+     * Calculate the length of the insertion.\n+     *\n+     * @param lengthCoder current value of the length + coder\n+     * @return adjusted value of the length + coder\n+     *\/\n+    long mix(long lengthCoder);\n+\n+    \/**\n+     * Insert content into buffer prior to the current length.\n+     *\n+     * @param lengthCoder current value of the length + coder\n+     * @param buffer      buffer to right into\n+     *\n+     * @return adjusted value of the length + coder\n+     *\n+     * @throws Throwable if fails to prepend value (unusual).\n+     *\/\n+    long prepend(long lengthCoder, byte[] buffer) throws Throwable;\n+}\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatConcatItem.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.invoke.StringConcatFactory.StringConcatItem;\n@@ -124,1 +123,1 @@\n-    static final class FormatItemDecimal implements StringConcatItem {\n+    static final class FormatItemDecimal implements FormatConcatItem {\n@@ -217,1 +216,1 @@\n-    static final class FormatItemHexadecimal implements StringConcatItem {\n+    static final class FormatItemHexadecimal implements FormatConcatItem {\n@@ -265,1 +264,1 @@\n-    static final class FormatItemOctal implements StringConcatItem {\n+    static final class FormatItemOctal implements FormatConcatItem {\n@@ -312,1 +311,1 @@\n-    static final class FormatItemBoolean implements StringConcatItem {\n+    static final class FormatItemBoolean implements FormatConcatItem {\n@@ -348,1 +347,1 @@\n-    static final class FormatItemCharacter implements StringConcatItem {\n+    static final class FormatItemCharacter implements FormatConcatItem {\n@@ -372,1 +371,1 @@\n-    static final class FormatItemString implements StringConcatItem {\n+    static final class FormatItemString implements FormatConcatItem {\n@@ -393,1 +392,1 @@\n-    static final class FormatItemFormatSpecifier implements StringConcatItem {\n+    static final class FormatItemFormatSpecifier implements FormatConcatItem {\n@@ -426,1 +425,5 @@\n-    protected abstract static class FormatItemModifier implements StringConcatItem {\n+    protected static abstract sealed class FormatItemModifier implements FormatConcatItem\n+        permits FormatItemFillLeft,\n+                FormatItemFillRight,\n+                FormatItemUpper\n+    {\n@@ -428,1 +431,1 @@\n-        protected final StringConcatItem item;\n+        protected final FormatConcatItem item;\n@@ -430,1 +433,1 @@\n-        FormatItemModifier(StringConcatItem item) {\n+        FormatItemModifier(FormatConcatItem item) {\n@@ -444,1 +447,1 @@\n-        abstract public long mix(long lengthCoder);\n+        public abstract long mix(long lengthCoder);\n@@ -447,1 +450,1 @@\n-        abstract public long prepend(long lengthCoder, byte[] buffer) throws Throwable;\n+        public abstract long prepend(long lengthCoder, byte[] buffer) throws Throwable;\n@@ -453,1 +456,2 @@\n-    static final class FormatItemFillLeft extends FormatItemModifier {\n+    static final class FormatItemFillLeft extends FormatItemModifier\n+            implements FormatConcatItem {\n@@ -456,1 +460,1 @@\n-        FormatItemFillLeft(int width, StringConcatItem item) {\n+        FormatItemFillLeft(int width, FormatConcatItem item) {\n@@ -482,1 +486,2 @@\n-    static final class FormatItemFillRight extends FormatItemModifier {\n+    static final class FormatItemFillRight extends FormatItemModifier\n+            implements FormatConcatItem {\n@@ -485,1 +490,1 @@\n-        FormatItemFillRight(int width, StringConcatItem item) {\n+        FormatItemFillRight(int width, FormatConcatItem item) {\n@@ -513,2 +518,3 @@\n-    static final class FormatItemUpper extends FormatItemModifier {\n-        FormatItemUpper(StringConcatItem item) {\n+    static final class FormatItemUpper extends FormatItemModifier\n+            implements FormatConcatItem {\n+        FormatItemUpper(FormatConcatItem item) {\n@@ -542,1 +548,1 @@\n-    static final class FormatItemNull implements StringConcatItem {\n+    static final class FormatItemNull implements FormatConcatItem {\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.invoke.StringConcatFactory.StringConcatItem;\n@@ -92,1 +91,1 @@\n-            return mh.asType(mh.type().changeReturnType(StringConcatItem.class));\n+            return mh.asType(mh.type().changeReturnType(FormatConcatItem.class));\n@@ -159,1 +158,1 @@\n-                    int.class, StringConcatItem.class);\n+                    int.class, FormatConcatItem.class);\n@@ -163,1 +162,1 @@\n-                     int.class, StringConcatItem.class);\n+                     int.class, FormatConcatItem.class);\n@@ -167,1 +166,1 @@\n-                    StringConcatItem.class);\n+                    FormatConcatItem.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatterBuilder.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.invoke.*;\n-import java.util.*;\n-\n-\/**\n- * @test\n- * @summary Test StringConcatFactory.StringConcatItem... methods.\n- * @compile --enable-preview -source ${jdk.version} StringConcatItem.java\n- * @run main\/othervm --enable-preview StringConcatItem\n- *\/\n-\n-public class StringConcatItem {\n-\n-\n-\n-\n-\n-    public static void main(String... args) {\n-        interpolate();\n-    }\n-\n-    static class MyConcatItem implements StringConcatFactory.StringConcatItem {\n-        MyConcatItem() {\n-        }\n-\n-        @Override\n-        public long mix(long lengthCoder) {\n-            return lengthCoder + 3;\n-        }\n-\n-        @Override\n-        public long prepend(long lengthCoder, byte[] buffer) throws Throwable {\n-            if (0 <= lengthCoder) {\n-                buffer[(int)--lengthCoder] = '3';\n-                buffer[(int)--lengthCoder] = '2';\n-                buffer[(int)--lengthCoder] = '1';\n-            } else {\n-                throw new RuntimeException(\"Should have been Latin1\");\n-            }\n-            return lengthCoder;\n-        }\n-    }\n-\n-    static void interpolate() {\n-        try {\n-            MethodHandle m = StringConcatFactory.makeConcatWithTemplate(\n-                    List.of(\"abc\", \"xyz\"),\n-                    List.of(MyConcatItem.class));\n-            String s = (String)m.invoke(new MyConcatItem());\n-\n-            if (!\"abc123xyz\".equals(s)) {\n-                throw new RuntimeException(\"incorrect result: \" + s);\n-            }\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/String\/concat\/StringConcatItem.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"}]}