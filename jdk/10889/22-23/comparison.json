{"files":[{"patch":"@@ -1825,1 +1825,9 @@\n-    \/\/ Used by StringConcatHelper via JLA.\n+    \/**\n+     * Used by StringConcatHelper via JLA. Adds the current builder count to the\n+     * accumulation of items being concatenated. If the coder for the builder is\n+     * UTF16 then upgrade the whole concatenation to UTF16.\n+     *\n+     * @param lengthCoder running accumulation of length and coder\n+     *\n+     * @return updated accumulation of length and coder\n+     *\/\n@@ -1830,1 +1838,9 @@\n-    \/\/ Used by StringConcatHelper via JLA.\n+    \/**\n+     * Used by StringConcatHelper via JLA. Adds the characters in the builder value to the\n+     * concatenation buffer and then updates the running accumulation of length.\n+     *\n+     * @param lengthCoder running accumulation of length and coder\n+     * @param buffer      concatenation buffer\n+     *\n+     * @return running accumulation of length and coder minus the number of characters added\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n- * Bootstraps in the form of {@code (Lookup, String, MethodType)(String[], Object[])} are used\n- * to create {@link StringTemplate StringTemplates} that have more than\n+ * The {@link TemplateRuntime#newLargeStringTemplate} bootstrap method is used to create\n+ * {@link StringTemplate StringTemplates} that have more than\n@@ -55,2 +55,2 @@\n- * Bootstraps in the form of {@code (Lookup, String, MethodType, String...)(...)} are used to create\n- * optimized {@link StringTemplate StringTemplates} based on StringTemplateImpl.\n+ * The {@link TemplateRuntime#newStringTemplate} bootstrap method is used to create\n+ * optimized {@link StringTemplate StringTemplates}.\n@@ -58,3 +58,2 @@\n- * Bootstraps in the for of (Lookup, String, MethodType, MethodHandle, String...)\n- * (VerifyingProcessor, ...) are used to implement specialized processors for\n- * {@link ProcessorLinkage} implementing processors.\n+ * The {@link TemplateRuntime#newLargeStringTemplate} bootstrap method is used\n+ * to bind to specialized processors that implement {@link ProcessorLinkage}.\n@@ -115,5 +114,3 @@\n-    public static CallSite newLargeStringTemplate(\n-            MethodHandles.Lookup lookup,\n-            String name,\n-            MethodType type\n-    ) throws Throwable {\n+    public static CallSite newLargeStringTemplate(MethodHandles.Lookup lookup,\n+                                                  String name,\n+                                                  MethodType type) throws Throwable {\n@@ -140,6 +137,4 @@\n-    public static CallSite newStringTemplate(\n-            MethodHandles.Lookup lookup,\n-            String name,\n-            MethodType type,\n-            String... fragments\n-    ) throws Throwable {\n+    public static CallSite newStringTemplate(MethodHandles.Lookup lookup,\n+                                             String name,\n+                                             MethodType type,\n+                                             String... fragments) throws Throwable {\n@@ -171,7 +166,5 @@\n-    public static CallSite processStringTemplate(\n-            MethodHandles.Lookup lookup,\n-            String name,\n-            MethodType type,\n-            MethodHandle processorGetter,\n-            String... fragments\n-    ) throws Throwable {\n+    public static CallSite processStringTemplate(MethodHandles.Lookup lookup,\n+                                                 String name,\n+                                                 MethodType type,\n+                                                 MethodHandle processorGetter,\n+                                                 String... fragments) throws Throwable {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/TemplateRuntime.java","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -31,3 +31,6 @@\n- * This interface simplifies the declaration of\n- * {@linkplain ValidatingProcessor template processors}\n- * that do not throw checked exceptions and have a result type of {@link String}. For example:\n+ * This interface is used to implement template processors that only produce {@link String}\n+ * results. Any implementation must supply a\n+ * {@link StringProcessor#process(StringTemplate)} method that constructs a result\n+ * from the information provided by the supplied {@link StringTemplate} instance.\n+ * <p>\n+ * For example:\n@@ -35,1 +38,1 @@\n- * StringProcessor processor = st -> st.interpolate();\n+ * StringProcessor processor = st -> st.interpolate().toUpperCase();\n@@ -38,0 +41,4 @@\n+ * @see java.lang.template.ValidatingProcessor\n+ * @see java.lang.template.TemplateProcessor\n+ * @see java.lang.template.StringTemplate\n+ *\n@@ -39,0 +46,4 @@\n+ *\n+ * @implNote Implementations using {@link StringProcessor} are equivalent to implementations using\n+ * {@code TemplateProcessor<String>} or {@code ValidatingProcessor<String, RuntimeException>},\n+ * however the dominance of {@link String} producing template processors supercedes the redundancy.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringProcessor.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- * {@link StringTemplate StringTemplates} is the run-time representation of a\n- * string template or text block template in a template expression.\n+ * {@link StringTemplate} is the run-time representation of a string template or\n+ * text block template in a template expression.\n@@ -60,2 +60,3 @@\n- * {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")}\n- * and {@code values} will be the equivalent of {@code List.of(10, 20, 30)}.\n+ * {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")},\n+ * which includes the empty first and last fragments. {@code values} will be the\n+ * equivalent of {@code List.of(10, 20, 30)}.\n@@ -72,2 +73,2 @@\n- * {@link StringTemplate#values()} as shown above. The {@code STR} template processor\n- * uses these lists to yield an interpolated string. {@code s} will be equivalent to\n+ * {@link StringTemplate#values()} as shown above. The {@link StringTemplate#STR} template\n+ * processor uses these lists to yield an interpolated string. {@code s} will be equivalent to\n@@ -84,2 +85,3 @@\n- * The {@link StringTemplate#process(ValidatingProcessor)} method provides an\n- * alternative to using string template expressions.\n+ * The {@link StringTemplate#process(ValidatingProcessor)} method, in conjunction with\n+ * the {@link StringTemplate#RAW} processor, may be used to defer processing of a\n+ * {@link StringTemplate}.\n@@ -88,0 +90,1 @@\n+ * ...other steps...\n@@ -100,3 +103,1 @@\n- * @implNote Libraries may produce {@link StringTemplate} instances as long as they\n- * conform to the requirements of this interface.\n- * Implementations of {@link StringTemplate} must minimally implement the\n+ * @implNote Implementations of {@link StringTemplate} must minimally implement the\n@@ -114,3 +115,6 @@\n-     * Returns this {@link StringTemplate StringTemplate's} immutable list of string\n-     * fragments consisting of the string of characters preceding each of the embedded\n-     * expressions plus the string of characters following the last embedded expression.\n+     * Returns s list of fragment literals for this {@link StringTemplate}.\n+     * The fragment literals are the character sequences preceding each of the embedded\n+     * expressions in source code, plus the character sequence following the last\n+     * embedded expression. Such character sequences may be zero-length if an embedded\n+     * expression appears at the beginning or end of a template, or if two embedded\n+     * expressions are directly adjacent in a template.\n@@ -127,2 +131,0 @@\n-     *\n-     * @implSpec The list returned is immutable.\n@@ -133,2 +135,2 @@\n-     * Returns this {@link StringTemplate StringTemplate's} immutable list of embedded\n-     * expression results. In the example:\n+     * Returns a list of embedded expression results for this {@link StringTemplate}.\n+     * In the example:\n@@ -144,2 +146,0 @@\n-     *\n-     * @implSpec The list returned is immutable.\n@@ -150,3 +150,6 @@\n-     * Returns the interpolation of this {@link StringTemplate StringTemplate's}.\n-     * fragments and values.\n-     *\n+     * Returns the string interpolation of the fragments and values for this\n+     * {@link StringTemplate}.\n+     * <p>\n+     * For better visibility and when practical, it is recommended that users use the\n+     * {@link StringTemplate#STR} processor instead of invoking the\n+     * {@link StringTemplate#interpolate()} method directly.\n@@ -157,1 +160,1 @@\n-     * String string = st.interpolation(); \/\/ @highlight substring=\"interpolation()\"\n+     * String result = st.interpolate(); \/\/ @highlight substring=\"interpolate()\"\n@@ -159,1 +162,1 @@\n-     * {@code string} will be equivalent to {@code \"The student Mary is in Johnson's class room.\"}\n+     * {@code result} will be equivalent to {@code \"The student Mary is in Johnson's class room.\"}\n@@ -199,1 +202,1 @@\n-     * Produces a diagnostic string representing the supplied\n+     * Produces a diagnostic string that describes the fragments and values of the supplied\n@@ -218,2 +221,3 @@\n-     * Returns a StringTemplate as if constructed by invoking\n-     * {@code StringTemplate.of(List.of(string), List.of())}.\n+     * Returns a {@link StringTemplate} as if constructed by invoking\n+     * {@code StringTemplate.of(List.of(string), List.of())}. That is, a {@link StringTemplate}\n+     * with one fragment and no values.\n@@ -292,0 +296,3 @@\n+     * The result is a well-formed {@link StringTemplate} with n+1 fragments and n values, where\n+     * n is the total of number of values across all the supplied\n+     * {@link StringTemplate StringTemplates}.\n@@ -293,1 +300,1 @@\n-     * @param sts  one or more {@link StringTemplate}\n+     * @param stringTemplates  one or more {@link StringTemplate}\n@@ -300,2 +307,2 @@\n-    static StringTemplate combine(StringTemplate... sts) {\n-        return TemplateSupport.combine(sts);\n+    static StringTemplate combine(StringTemplate... stringTemplates) {\n+        return TemplateSupport.combine(stringTemplates);\n@@ -305,1 +312,7 @@\n-     * Interpolation template processor instance.\n+     * The {@link StringProcessor} instance conventionally used for the string interpolation\n+     * of a supplied {@link StringTemplate}. In order to make use easier, {@link StringTemplate#STR}\n+     * is implicitly statically imported into every Java source. No other declaration is required.\n+     * <p>\n+     * For better visibility and when practical, it is recommended that users use the\n+     * {@link StringTemplate#STR} processor instead of invoking the\n+     * {@link StringTemplate#interpolate()} method.\n@@ -316,2 +329,5 @@\n-     * No-op template processor. Used to highlight that non-processing of the StringTemplate\n-     * was intentional.\n+     * The {@link TemplateProcessor} instance conventionally used to indicate that the\n+     * processing of the {@link StringTemplate} is to be deferred to a later time. Deferred\n+     * processing can be resumed by invoking the\n+     * {@link StringTemplate#process(ValidatingProcessor)} or\n+     * {@link ValidatingProcessor#process(StringTemplate)} methods.\n@@ -319,4 +335,3 @@\n-     * \/\/ The string template before interpolation\n-     * System.out.println(RAW.\"\\{x} = \\{y} = \\{x + y}\"); \/\/ @highlight substring=\"RAW\"\n-     * \/\/ The string template after interpolation\n-     * System.out.println(STR.\"\\{x} = \\{y} = \\{x + y}\"); \/\/ @highlight substring=\"STR\"\n+     * StringTemplate st = RAW.\"\\{x} + \\{y} = \\{x + y}\";\n+     * ...other steps...\n+     * String result = STR.process(st);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplate.java","additions":53,"deletions":38,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n- * string template BSM callsites generated by the compiler.\n+ * string template bootstrap method callsites generated by the compiler. Instances of this\n+ * class are produced by {@link StringTemplateImplFactory}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplateImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.util.Arrays;\n-import java.util.Collections;\n@@ -37,0 +35,1 @@\n+import jdk.internal.access.JavaUtilCollectionAccess;\n@@ -41,2 +40,0 @@\n-import static java.lang.invoke.MethodType.methodType;\n-\n@@ -45,1 +42,2 @@\n- * fragments and bootstrap method type.\n+ * fragments and bootstrap method type. Usage is primarily from\n+ * {@link java.lang.runtime.TemplateRuntime} via {@code SharedSecrets.getJavaTemplateAccess()}.\n@@ -52,0 +50,2 @@\n+    private static final JavaUtilCollectionAccess JUCA = SharedSecrets.getJavaUtilCollectionAccess();\n+\n@@ -72,1 +72,1 @@\n-            MethodType mt = methodType(void.class, int.class, int.class, List.class,\n+            MethodType mt = MethodType.methodType(void.class, int.class, int.class, List.class,\n@@ -77,1 +77,1 @@\n-            mt = methodType(List.class, Object[].class);\n+            mt = MethodType.methodType(List.class, Object[].class);\n@@ -116,1 +116,1 @@\n-        mt = methodType(String.class, StringTemplateImpl.class);\n+        mt = MethodType.methodType(String.class, StringTemplateImpl.class);\n@@ -119,1 +119,1 @@\n-        mt = methodType(List.class, ptypes);\n+        mt = MethodType.methodType(List.class, ptypes);\n@@ -122,1 +122,1 @@\n-        mt = methodType(List.class, StringTemplateImpl.class);\n+        mt = MethodType.methodType(List.class, StringTemplateImpl.class);\n@@ -130,1 +130,1 @@\n-        mt = methodType(StringTemplate.class, ptypes);\n+        mt = MethodType.methodType(StringTemplate.class, ptypes);\n@@ -191,0 +191,1 @@\n+     * Elements are guaranteed to be safe.\n@@ -195,2 +196,0 @@\n-     *\n-     * @param <E>  type of elements\n@@ -198,4 +197,2 @@\n-    @SafeVarargs\n-    @SuppressWarnings({\"unchecked\", \"varargs\"})\n-    private static <E> List<E> toList(E... elements) {\n-        return Collections.unmodifiableList(Arrays.asList(elements));\n+    private static List<Object> toList(Object[] elements) {\n+        return JUCA.listFromTrustedArrayNullsAllowed(elements);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplateImplFactory.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,3 +31,6 @@\n- * This interface simplifies the declaration of\n- * {@linkplain ValidatingProcessor template processors}\n- * that do not throw checked exceptions. For example:\n+ * This interface is used to implement template processors that do not throw checked\n+ * exceptions. Any implementation must supply a\n+ * {@link TemplateProcessor#process(StringTemplate)} method that constructs a result\n+ * from the information provided by the supplied {@link StringTemplate} instance.\n+ * <p>\n+ * For example:\n@@ -35,6 +38,3 @@\n- * TemplateProcessor<String> processor = st -> {\n- *     List<String> fragments = st.fragments();\n- *     List<Object> values = st.values();\n- *     \/\/ check or manipulate the fragments and\/or values\n- *     ...\n- *     return StringTemplate.interpolate(fragments, values);\n+ * TemplateProcessor<Integer> processor = st -> {\n+ *     String interpolation = st.interpolate();\n+ *     return Integer.valueOf(interpolation);\n@@ -46,0 +46,4 @@\n+ * @see java.lang.template.ValidatingProcessor\n+ * @see java.lang.template.StringProcessor\n+ * @see java.lang.template.StringTemplate\n+ *\n@@ -47,0 +51,3 @@\n+ *\n+ * @implNote It is recommended that {@link StringProcessor} be used instead of\n+ * {@code TemplateProcessor<String>} when the result type is {@link String}.\n@@ -53,1 +60,1 @@\n-     * supplied {@link StringTemplate stringTemplate} object.\n+     * supplied {@link StringTemplate stringTemplate} instance.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/TemplateProcessor.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -135,1 +135,0 @@\n- * @see java.lang.template.StringTemplate\n@@ -138,0 +137,1 @@\n+ * @see java.lang.template.StringTemplate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/ValidatingProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-     *          illegal conditions.  For specification of all possible\n-     *          formatting errors.\n+     *          illegal conditions.\n@@ -109,2 +108,1 @@\n-     *          illegal conditions.  For specification of all possible\n-     *          formatting errors.\n+     *          illegal conditions.\n@@ -161,1 +159,1 @@\n-     * Convert a {@link StringTemplate} fragments, containing format specifications,\n+     * Convert {@link StringTemplate} fragments, containing format specifications,\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-     * @param buffer      buffer to right into\n+     * @param buffer      buffer to append to\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/FormatConcatItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}