{"files":[{"patch":"@@ -58,1 +58,1 @@\n-     * supplied {@link StringTemplate stringTemplate} object.\n+     * supplied {@link StringTemplate} object.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.Object;\n@@ -61,2 +62,2 @@\n- * {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")},\n- * which includes the empty first and last fragments. {@code values} will be the\n+ * The value of {@code fragments} will be equivalent to {@code List.of(\"\", \" + \", \" = \", \"\")},\n+ * which includes the empty first and last fragments. The {@code values} will be the\n@@ -65,2 +66,2 @@\n- * The following code contains a template expression with the same template but a\n- * different template processor:\n+ * The following code contains a template expression with the same template but with a\n+ * different template processor, {@code STR}:\n@@ -75,2 +76,2 @@\n- * processor uses these lists to yield an interpolated string. {@code s} will be equivalent to\n- * {@code \"10 + 20 = 30\"}.\n+ * processor uses these lists to yield an interpolated string. the value of {@code s} will\n+ * be equivalent to {@code \"10 + 20 = 30\"}.\n@@ -163,1 +164,5 @@\n-     * {@code result} will be equivalent to {@code \"The student Mary is in Johnson's classroom.\"}\n+     * In the above example, the value of  {@code result} will be\n+     * {@code \"The student Mary is in Johnson's classroom.\"}. This is\n+     * produced by the interleaving concatenation of fragments and values from the supplied\n+     * {@link StringTemplate}. To accommodate concatenation, values are converted to strings\n+     * as if invoking {@link String#valueOf(Object)}.\n@@ -265,1 +270,2 @@\n-     * elements of fragments.\n+     * elements of fragments. To accommodate interpolation, values are converted to strings\n+     * as if invoking {@link String#valueOf(Object)}.\n@@ -328,0 +334,4 @@\n+     * In the above example, the value of {@code result} will be {@code \"10 + 20 = 30\"}. This is\n+     * produced by the interleaving concatenation of fragments and values from the supplied\n+     * {@link StringTemplate}. To accommodate concatenation, values are converted to strings\n+     * as if invoking {@link String#valueOf(Object)}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplate.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n- * argument<\/em> separated by a dot (period). A proper processor expression evaluates\n- * to an instance of type {@link java.lang.template.ValidatingProcessor}. A proper\n+ * argument<\/em> separated by a dot (period). A processor expression evaluates\n+ * to an instance of type {@link java.lang.template.ValidatingProcessor}. A\n@@ -55,1 +55,1 @@\n- *{@link java.lang.template.StringTemplate}. The end result of the process template\n+ * {@link java.lang.template.StringTemplate}. The end result of the process template\n@@ -57,1 +57,1 @@\n- *{@link java.lang.template.ValidatingProcessor#process(StringTemplate)}\n+ * {@link java.lang.template.ValidatingProcessor#process(StringTemplate)}\n@@ -61,2 +61,2 @@\n- * In the example, {@code STR.\"The result of adding \\{x} and \\{y} is \\{x + y}.\"},\n- * {@code STR} is the processor that implements string interpolation with its\n+ * In the example above, {@code STR} is the processor that implements string\n+ * interpolation with it\n@@ -75,1 +75,1 @@\n- * well. This is automatically facilitated by the Java compiler converted the\n+ * well. This is automatically facilitated by the Java compiler converting the\n@@ -79,1 +79,1 @@\n- * Users can create their own template processors by implementing either\n+ * Users can create their own template processors by implementing one of\n@@ -83,1 +83,2 @@\n- * See {@link java.lang.template.ValidatingProcessor} for examples and details.\n+ * For more examples and details see {@link java.lang.template.StringTemplate} and\n+ * {@link java.lang.template.ValidatingProcessor}.\n@@ -88,0 +89,1 @@\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/package-info.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * This {@linkplain ValidatingProcessor template processor} constructs a {@link String}\n+ * This {@linkplain StringProcessor template processor} constructs a {@link String}\n@@ -196,1 +196,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}