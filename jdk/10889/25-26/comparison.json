{"files":[{"patch":"@@ -49,1 +49,3 @@\n- * however the dominance of {@link String} producing template processors supercedes the redundancy.\n+ * however, StringProcessor is cleaner and easier to understand.\n+ *\n+ * @jls 15.8.6 Process Template Expressions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringProcessor.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ *\n@@ -96,2 +97,0 @@\n- * @jls 15.8.6\n- *\n@@ -111,0 +110,2 @@\n+ *\n+ * @jls 15.8.6 Process Template Expressions\n@@ -115,1 +116,1 @@\n-     * Returns s list of fragment literals for this {@link StringTemplate}.\n+     * Returns a list of fragment literals for this {@link StringTemplate}.\n@@ -153,1 +154,1 @@\n-     * For better visibility and when practical, it is recommended that users use the\n+     * For better visibility and when practical, it is recommended to use the\n@@ -155,1 +156,1 @@\n-     * {@link StringTemplate#interpolate()} method directly.\n+     * {@link StringTemplate#interpolate()} method.\n@@ -206,1 +207,1 @@\n-     * @return diagnostic string representing the supplied templated string\n+     * @return diagnostic string representing the supplied string template\n@@ -300,1 +301,1 @@\n-     * @param stringTemplates  one or more {@link StringTemplate}\n+     * @param stringTemplates  zero or more {@link StringTemplate}\n@@ -316,1 +317,1 @@\n-     * The {@link StringProcessor} instance conventionally used for the string interpolation\n+     * This {@link StringProcessor} instance is conventionally used for the string interpolation\n@@ -333,1 +334,1 @@\n-     * The {@link TemplateProcessor} instance conventionally used to indicate that the\n+     * This {@link TemplateProcessor} instance is conventionally used to indicate that the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/StringTemplate.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+ *\n+ * @jls 15.8.6 Process Template Expressions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/TemplateProcessor.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-     * @param sts  one or more {@link StringTemplate}\n+     * @param sts  zero or more {@link StringTemplate}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/TemplateSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ *\n@@ -141,0 +142,2 @@\n+ *\n+ * @jls 15.8.6 Process Template Expressions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/ValidatingProcessor.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,62 @@\n- * Provides support for string templates and template processors.\n+ * <em>String templates<\/em> and <em>template processors<\/em> provide a comprehensive\n+ * system for combining literal text with the values from <em>embedded expressions<\/em>\n+ * to produce a result. This result is often a {@link String} but is not limited to just\n+ * {@link String Strings}.\n+ * <p>\n+ * Java string templates look like string literals or text blocks except they contain\n+ * one or more embedded expressions bracketed by <code>\\{<\/code> and <code>}<\/code>.\n+ * An embedded expression is usually positioned in the string where the value of that\n+ * embedded expression might expect to be inserted.\n+ * <p>\n+ * <em>String interpolation<\/em> is the most general use of string templates. The\n+ * standard {@link java.lang.template.StringTemplate#STR} template processor is statically\n+ * imported into every Java compilation unit to facilitate the common use of string\n+ * interpolation.\n+ * {@snippet :\n+ * int x = 10;\n+ * int y = 20;\n+ * String s = STR.\"The result of adding \\{x} and \\{y} is \\{x + y}.\";\n+ * }\n+ * The value {@code s} in the above example will be\n+ * {@code \"The result of adding 10 and 20 is 30.\"}.\n+ * <p>\n+ * The expression {@code STR.\"The result of adding \\{x} and \\{y} is \\{x + y}.\"}\n+ * above is an example of a <em>process template expression<\/em>. A process template\n+ * expression consists of a <em>processor expression<\/em> and a <em>processor\n+ * argument<\/em> separated by a dot (period). A proper processor expression evaluates\n+ * to an instance of type {@link java.lang.template.ValidatingProcessor}. A proper\n+ * processor argument is a string template that is represented by an instance of\n+ *{@link java.lang.template.StringTemplate}. The end result of the process template\n+ * expression is the value that is produced by invoking the processor's\n+ *{@link java.lang.template.ValidatingProcessor#process(StringTemplate)}\n+ * method of with the processor argument. Improper processor expressions or\n+ * improper processor arguments result in compilation errors.\n+ * <p>\n+ * In the example, {@code STR.\"The result of adding \\{x} and \\{y} is \\{x + y}.\"},\n+ * {@code STR} is the processor that implements string interpolation with its\n+ * {@link java.lang.template.ValidatingProcessor#process(StringTemplate)} method.\n+ * <p>\n+ * The string template in the example, represented by a\n+ * {@link java.lang.template.StringTemplate}, contains the string fragments and\n+ * embedded expression values expressed in\n+ * {@code \"The result of adding \\{x} and \\{y} is \\{x + y}.\"}.\n+ * In the example, the fragments are {@code \"The result of adding \"}, {@code \" and \"},\n+ * {@code \" is \"} and {@code \".\"}. The values are {@code 10}, {@code 20} and {@code 30},\n+ * which are the result of evaluating {@code x}, {@code y} and {@code x + y}.\n+ * See {@link java.lang.template.StringTemplate} for examples and details.\n+ * <p>\n+ * String literals and text blocks can be used as proper processor arguments as\n+ * well. This is automatically facilitated by the Java compiler converted the\n+ * strings to {@link java.lang.template.StringTemplate StringTemplate} using the\n+ * {@link java.lang.template.StringTemplate#of(String)} method.\n+ * <p>\n+ * Users can create their own template processors by implementing either\n+ * {@link java.lang.template.ValidatingProcessor},\n+ * {@link java.lang.template.TemplateProcessor} or\n+ * {@link java.lang.template.StringProcessor} interfaces.\n+ * See {@link java.lang.template.ValidatingProcessor} for examples and details.\n+ *\n+ * @see java.lang.template.StringTemplate\n+ * @see java.lang.template.ValidatingProcessor\n+ * @see java.lang.template.TemplateProcessor\n+ * @see java.lang.template.StringTemplate\n@@ -30,0 +91,2 @@\n+ *\n+ * @jls 15.8.6 Process Template Expressions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/template\/package-info.java","additions":64,"deletions":1,"binary":false,"changes":65,"status":"modified"}]}