{"files":[{"patch":"@@ -428,1 +428,2 @@\n-     * @param pos          position of the first character in literal.\n+     * @param pos       position of the first character in literal.\n+     * @param isString  true if is a string literal\n@@ -430,1 +431,1 @@\n-    private void scanLitChar(int pos) {\n+    private void scanLitChar(int pos, boolean isString) {\n@@ -483,3 +484,7 @@\n-                    scanEmbeddedExpression(pos, backslash);\n-                    if (hasStringTemplateErrors) {\n-                        return;\n+                    if (isString) {\n+                        scanEmbeddedExpression(pos, backslash);\n+                        if (hasStringTemplateErrors) {\n+                            return;\n+                        }\n+                    } else {\n+                        lexError(position(), Errors.IllegalEscChar);\n@@ -549,1 +554,1 @@\n-                    scanLitChar(pos);\n+                    scanLitChar(pos, true);\n@@ -573,1 +578,1 @@\n-                    scanLitChar(pos);\n+                    scanLitChar(pos, true);\n@@ -1118,2 +1123,1 @@\n-                        int errorPos = position();\n-                        scanLitChar(pos);\n+                        scanLitChar(pos, false);\n@@ -1121,1 +1125,9 @@\n-                        if (accept('\\'')) {\n+                        if (tk == TokenKind.ERROR) {\n+                            while (isAvailable() && !is('\\'')) {\n+                                if (is('\\\\')) {\n+                                    next();\n+                                }\n+                                next();\n+                            }\n+                            accept('\\'');\n+                        } else if (accept('\\'')) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -105,1 +105,2 @@\n-            new TestTuple(ERROR,         \"\\'\\\\q\\'\", \"\\'\\\\\"),\n+            new TestTuple(ERROR,         \"\\'\\\\q\\'\", \"\\'\\\\q\\'\"),\n+            new TestTuple(ERROR,         \"\\'\\\\{1+2}\\'\", \"\\'\\\\{1+2}\\'\"),\n","filename":"test\/langtools\/tools\/javac\/lexer\/JavaLexerTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,4 +2,2 @@\n-TripleQuote.java:12:21: compiler.err.unclosed.char.lit\n-TripleQuote.java:13:14: compiler.err.empty.char.lit\n-TripleQuote.java:13:16: compiler.err.unclosed.char.lit\n-4 errors\n+TripleQuote.java:13:15: compiler.err.empty.char.lit\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/unicode\/TripleQuote.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}