{"files":[{"patch":"@@ -67,2 +67,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -132,1 +130,3 @@\n-            new Main(System.err).run(VM.getRuntimeArguments(), args);\n+            new Main(System.err)\n+                    .checkSecurityManager()\n+                    .run(VM.getRuntimeArguments(), args);\n@@ -165,0 +165,13 @@\n+    \/**\n+     * Checks if a security manager is present and throws an exception if so.\n+     * @return this object\n+     * @throws Fault if a security manager is present\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    private Main checkSecurityManager() throws Fault {\n+        if (System.getSecurityManager() != null) {\n+            throw new Fault(Errors.SecurityManager);\n+        }\n+        return this;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -87,0 +87,3 @@\n+launcher.err.security.manager=\\\n+    cannot use source-code launcher with a security manager enabled\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -216,18 +216,2 @@\n-    public void testPermissions(Path base) throws IOException {\n-        \/\/ does not work on exploded image, because the default policy file assumes jrt:; skip the test\n-        if (Files.exists(Path.of(System.getProperty(\"java.home\")).resolve(\"modules\"))) {\n-            out.println(\"JDK using exploded modules; test skipped\");\n-            return;\n-        }\n-\n-        Path policyFile = base.resolve(\"test.policy\");\n-        Path sourceFile = base.resolve(\"TestPermissions.java\");\n-\n-        tb.writeFile(policyFile,\n-            \"grant codeBase \\\"jrt:\/jdk.compiler\\\" {\\n\" +\n-            \"    permission java.security.AllPermission;\\n\" +\n-            \"};\\n\" +\n-            \"grant codeBase \\\"\" + sourceFile.toUri().toURL() + \"\\\" {\\n\" +\n-            \"    permission java.util.PropertyPermission \\\"user.dir\\\", \\\"read\\\";\\n\" +\n-            \"};\\n\");\n-\n+    public void testSecurityManager(Path base) throws IOException {\n+        Path sourceFile = base.resolve(\"HelloWorld.java\");\n@@ -235,13 +219,5 @@\n-            \"import java.net.URL;\\n\" +\n-            \"class TestPermissions {\\n\" +\n-            \"    public static void main(String... args) {\\n\" +\n-            \"        System.out.println(\\\"user.dir=\\\" + System.getProperty(\\\"user.dir\\\"));\\n\" +\n-            \"        try {\\n\" +\n-            \"            System.setProperty(\\\"user.dir\\\", \\\"\\\");\\n\" +\n-            \"            System.out.println(\\\"no exception\\\");\\n\" +\n-            \"            System.exit(1);\\n\" +\n-            \"        } catch (SecurityException e) {\\n\" +\n-            \"            System.out.println(\\\"exception: \\\" + e);\\n\" +\n-            \"        }\\n\" +\n-            \"    }\\n\" +\n-            \"}\");\n+                \"class HelloWorld {\\n\" +\n+                        \"    public static void main(String... args) {\\n\" +\n+                        \"        System.out.println(\\\"Hello World!\\\");\\n\" +\n+                        \"    }\\n\" +\n+                        \"}\");\n@@ -250,1 +226,1 @@\n-                .vmOptions(\"-Djava.security.manager\", \"-Djava.security.policy=\" + policyFile)\n+                .vmOptions(\"-Djava.security.manager=default\")\n@@ -252,6 +228,4 @@\n-                .run(Task.Expect.SUCCESS)\n-                .getOutput(Task.OutputKind.STDOUT);\n-        checkEqual(\"stdout\", log.trim(),\n-                \"user.dir=\" + System.getProperty(\"user.dir\") + \"\\n\" +\n-                \"exception: java.security.AccessControlException: \" +\n-                    \"access denied (\\\"java.util.PropertyPermission\\\" \\\"user.dir\\\" \\\"write\\\")\");\n+                .run(Task.Expect.FAIL)\n+                .getOutput(Task.OutputKind.STDERR);\n+        checkContains(\"stderr\", log,\n+                \"error: cannot use source-code launcher with a security manager enabled\");\n@@ -713,0 +687,8 @@\n+    void checkContains(String name, String found, String expect) {\n+        expect = expect.replace(\"\\n\", tb.lineSeparator);\n+        out.println(name + \": \" + found);\n+        if (!found.contains(expect)) {\n+            error(\"Expected output not found: \" + expect);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"}]}