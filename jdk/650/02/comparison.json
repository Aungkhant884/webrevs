{"files":[{"patch":"@@ -231,0 +231,2 @@\n+  case vmIntrinsics::_getObjectSize:\n+    break;\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1326,0 +1326,102 @@\n+void LIRGenerator::do_getObjectSize(Intrinsic* x) {\n+  assert(x->number_of_arguments() == 3, \"wrong type\");\n+  LIR_Opr result_reg = rlock_result(x);\n+\n+  LIRItem value(x->argument_at(2), this);\n+  value.load_item();\n+\n+  LIR_Opr klass = new_register(T_METADATA);\n+  __ move(new LIR_Address(value.result(), oopDesc::klass_offset_in_bytes(), T_ADDRESS), klass, NULL);\n+  LIR_Opr layout = new_register(T_INT);\n+  __ move(new LIR_Address(klass, in_bytes(Klass::layout_helper_offset()), T_INT), layout);\n+\n+  LabelObj* L_done = new LabelObj();\n+  LabelObj* L_array = new LabelObj();\n+\n+  __ cmp(lir_cond_lessEqual, layout, 0);\n+  __ branch(lir_cond_lessEqual, L_array->label());\n+\n+  \/\/ Instance case: the layout helper gives us instance size almost directly,\n+  \/\/ but we need to mask out the _lh_instance_slow_path_bit.\n+  __ convert(Bytecodes::_i2l, layout, result_reg);\n+\n+  assert((int) Klass::_lh_instance_slow_path_bit < BytesPerLong, \"clear bit\");\n+  jlong mask = ~(jlong) right_n_bits(LogBytesPerLong);\n+  __ logical_and(result_reg, LIR_OprFact::longConst(mask), result_reg);\n+\n+  __ branch(lir_cond_always, L_done->label());\n+\n+  \/\/ Array case: size is round(header + element_size*arraylength).\n+  \/\/ Since arraylength is different for every array instance, we have to\n+  \/\/ compute the whole thing at runtime.\n+\n+  __ branch_destination(L_array->label());\n+\n+  int round_mask = MinObjAlignmentInBytes - 1;\n+\n+  \/\/ Figure out header sizes first.\n+  LIR_Opr hss = LIR_OprFact::intConst(Klass::_lh_header_size_shift);\n+  LIR_Opr hsm = LIR_OprFact::intConst(Klass::_lh_header_size_mask);\n+\n+  LIR_Opr header_size = new_register(T_INT);\n+  __ move(layout, header_size);\n+  LIR_Opr tmp = new_register(T_INT);\n+  __ unsigned_shift_right(header_size, hss, header_size, tmp);\n+  __ logical_and(header_size, hsm, header_size);\n+  __ add(header_size, LIR_OprFact::intConst(round_mask), header_size);\n+\n+  \/\/ Figure out the array length in bytes\n+  assert(Klass::_lh_log2_element_size_shift == 0, \"use shift in place\");\n+  LIR_Opr l2esm = LIR_OprFact::intConst(Klass::_lh_log2_element_size_mask);\n+  __ logical_and(layout, l2esm, layout);\n+\n+  LIR_Opr length_int = new_register(T_INT);\n+  __ move(new LIR_Address(value.result(), arrayOopDesc::length_offset_in_bytes(), T_INT), length_int);\n+\n+#ifdef _LP64\n+  LIR_Opr length = new_register(T_LONG);\n+  __ convert(Bytecodes::_i2l, length_int, length);\n+#endif\n+\n+  \/\/ Shift-left awkwardness. Normally it is just:\n+  \/\/   __ shift_left(length, layout, length);\n+  \/\/ But C1 cannot perform shift_left with non-constant count, so we end up\n+  \/\/ doing the per-bit loop dance here. x86_32 also does not know how to shift\n+  \/\/ longs, so we have to act on ints.\n+  LabelObj* L_shift_loop = new LabelObj();\n+  LabelObj* L_shift_exit = new LabelObj();\n+\n+  __ branch_destination(L_shift_loop->label());\n+  __ cmp(lir_cond_equal, layout, 0);\n+  __ branch(lir_cond_equal, L_shift_exit->label());\n+\n+#ifdef _LP64\n+  __ shift_left(length, 1, length);\n+#else\n+  __ shift_left(length_int, 1, length_int);\n+#endif\n+\n+  __ sub(layout, LIR_OprFact::intConst(1), layout);\n+\n+  __ branch(lir_cond_always, L_shift_loop->label());\n+  __ branch_destination(L_shift_exit->label());\n+\n+  \/\/ Mix all up, round, and push to the result.\n+#ifdef _LP64\n+  LIR_Opr header_size_long = new_register(T_LONG);\n+  __ convert(Bytecodes::_i2l, header_size, header_size_long);\n+  __ add(length, header_size_long, length);\n+  if (round_mask != 0) {\n+    __ logical_and(length, LIR_OprFact::longConst(~round_mask), length);\n+  }\n+  __ move(length, result_reg);\n+#else\n+  __ add(length_int, header_size, length_int);\n+  if (round_mask != 0) {\n+    __ logical_and(length_int, LIR_OprFact::intConst(~round_mask), length_int);\n+  }\n+  __ convert(Bytecodes::_i2l, length_int, result_reg);\n+#endif\n+\n+  __ branch_destination(L_done->label());\n+}\n@@ -3047,0 +3149,1 @@\n+  case vmIntrinsics::_getObjectSize:  do_getObjectSize(x); break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":103,"deletions":0,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -256,0 +256,1 @@\n+  void do_getObjectSize(Intrinsic* x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -517,0 +517,4 @@\n+  do_intrinsic(_getObjectSize,   sun_instrument_InstrumentationImpl, getObjectSize_name, getObjectSize_signature, F_RN) \\\n+   do_name(     getObjectSize_name,                               \"getObjectSize0\")                                     \\\n+   do_alias(    getObjectSize_signature,                          long_object_long_signature)                           \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+  template(sun_instrument_InstrumentationImpl,        \"sun\/instrument\/InstrumentationImpl\")       \\\n@@ -522,0 +523,1 @@\n+  template(long_object_long_signature,                \"(JLjava\/lang\/Object;)J\")                   \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -651,0 +651,1 @@\n+  case vmIntrinsics::_getObjectSize:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -667,0 +667,3 @@\n+  case vmIntrinsics::_getObjectSize:\n+    return inline_getObjectSize();\n+\n@@ -6672,0 +6675,116 @@\n+\n+\/\/------------------------------- inline_getObjectSize --------------------------------------\n+\/\/\n+\/\/ Calculate the runtime size of the object\/array.\n+\/\/   native long sun.instrument.InstrumentationImpl.getObjectSize0(long nativeAgent, Object objectToSize);\n+\/\/\n+bool LibraryCallKit::inline_getObjectSize() {\n+  Node* obj = argument(3);\n+  Node* klass_node = load_object_klass(obj);\n+\n+  jint  layout_con = Klass::_lh_neutral_value;\n+  Node* layout_val = get_layout_helper(klass_node, layout_con);\n+  int   layout_is_con = (layout_val == NULL);\n+\n+  if (layout_is_con) {\n+    \/\/ Layout helper is constant, can figure out things at compile time.\n+\n+    if (Klass::layout_helper_is_instance(layout_con)) {\n+      \/\/ Instance case:  layout_con contains the size itself.\n+      Node *size = longcon(Klass::layout_helper_size_in_bytes(layout_con));\n+      set_result(size);\n+    } else {\n+      \/\/ Array case: size is round(header + element_size*arraylength).\n+      \/\/ Since arraylength is different for every array instance, we have to\n+      \/\/ compute the whole thing at runtime.\n+\n+      Node* arr_length = load_array_length(obj);\n+\n+      int round_mask = MinObjAlignmentInBytes - 1;\n+      int hsize  = Klass::layout_helper_header_size(layout_con);\n+      int eshift = Klass::layout_helper_log2_element_size(layout_con);\n+\n+      if ((round_mask & ~right_n_bits(eshift)) == 0) {\n+        round_mask = 0;  \/\/ strength-reduce it if it goes away completely\n+      }\n+      assert((hsize & right_n_bits(eshift)) == 0, \"hsize is pre-rounded\");\n+      Node* header_size = intcon(hsize + round_mask);\n+\n+      Node* lengthx = ConvI2X(arr_length);\n+      Node* headerx = ConvI2X(header_size);\n+\n+      Node* abody = lengthx;\n+      if (eshift != 0) {\n+        abody = _gvn.transform(new LShiftXNode(lengthx, intcon(eshift)));\n+      }\n+      Node* size = _gvn.transform( new AddXNode(headerx, abody) );\n+      if (round_mask != 0) {\n+        size = _gvn.transform( new AndXNode(size, MakeConX(~round_mask)) );\n+      }\n+      size = ConvX2L(size);\n+      set_result(size);\n+    }\n+  } else {\n+    \/\/ Layout helper is not constant, need to test for array-ness at runtime.\n+\n+    enum { _instance_path = 1, _array_path, PATH_LIMIT };\n+    RegionNode* result_reg = new RegionNode(PATH_LIMIT);\n+    PhiNode* result_val = new PhiNode(result_reg, TypeLong::LONG);\n+    record_for_igvn(result_reg);\n+\n+    Node* array_ctl = generate_array_guard(klass_node, NULL);\n+    if (array_ctl != NULL) {\n+      \/\/ Array case: size is round(header + element_size*arraylength).\n+      \/\/ Since arraylength is different for every array instance, we have to\n+      \/\/ compute the whole thing at runtime.\n+\n+      PreserveJVMState pjvms(this);\n+      set_control(array_ctl);\n+      Node* arr_length = load_array_length(obj);\n+\n+      int round_mask = MinObjAlignmentInBytes - 1;\n+      Node* mask = intcon(round_mask);\n+\n+      Node* hss = intcon(Klass::_lh_header_size_shift);\n+      Node* hsm = intcon(Klass::_lh_header_size_mask);\n+      Node* header_size = _gvn.transform(new URShiftINode(layout_val, hss));\n+      header_size = _gvn.transform(new AndINode(header_size, hsm));\n+      header_size = _gvn.transform(new AddINode(header_size, mask));\n+\n+      \/\/ There is no need to mask or shift this value.\n+      \/\/ The semantics of LShiftINode include an implicit mask to 0x1F.\n+      assert(Klass::_lh_log2_element_size_shift == 0, \"use shift in place\");\n+      Node* elem_shift = layout_val;\n+\n+      Node* lengthx = ConvI2X(arr_length);\n+      Node* headerx = ConvI2X(header_size);\n+\n+      Node* abody = _gvn.transform(new LShiftXNode(lengthx, elem_shift));\n+      Node* size = _gvn.transform(new AddXNode(headerx, abody));\n+      if (round_mask != 0) {\n+        size = _gvn.transform(new AndXNode(size, MakeConX(~round_mask)));\n+      }\n+      size = ConvX2L(size);\n+\n+      result_reg->init_req(_array_path, control());\n+      result_val->init_req(_array_path, size);\n+    }\n+\n+    if (!stopped()) {\n+      \/\/ Instance case: the layout helper gives us instance size almost directly,\n+      \/\/ but we need to mask out the _lh_instance_slow_path_bit.\n+      Node* size = ConvI2X(layout_val);\n+      assert((int) Klass::_lh_instance_slow_path_bit < BytesPerLong, \"clear bit\");\n+      Node* mask = MakeConX(~(intptr_t) right_n_bits(LogBytesPerLong));\n+      size = _gvn.transform(new AndXNode(size, mask));\n+      size = ConvX2L(size);\n+\n+      result_reg->init_req(_instance_path, control());\n+      result_val->init_req(_instance_path, size);\n+    }\n+\n+    set_result(result_reg, result_val);\n+  }\n+\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":119,"deletions":0,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -347,0 +347,2 @@\n+\n+  bool inline_getObjectSize();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,0 +232,1 @@\n+        java.instrument,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -395,0 +396,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.instrument\/share\/classes\/sun\/instrument\/InstrumentationImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n@@ -24,1 +24,85 @@\n-\/**\n+\/*\n+ * @test\n+ * @bug 4882798 8253525\n+ * @summary Test for fInst.getObjectSize with 32-bit compressed oops\n+ * @library \/test\/lib\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize with zero-based compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize without compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n@@ -26,3 +110,3 @@\n- * @bug 4882798\n- * @summary round-trip test for getObjectSize (does it return, and is the result non-zero?)\n- * @author Gabriel Adauto, Wily Technology\n+ * @summary Test for fInst.getObjectSize with 32-bit compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.debug\n@@ -30,0 +114,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -32,1 +117,84 @@\n- * @run main\/othervm -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize with zero-based compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ * @requires vm.debug\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize without compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ * @requires vm.debug\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m -XX:-UseCompressedOops\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:FastAllocateSizeLimit=0\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n@@ -34,0 +202,65 @@\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize with 32-bit compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ * @requires vm.debug\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for fInst.getObjectSize with zero-based compressed oops\n+ * @library \/test\/lib\n+ * @requires vm.bits == 64\n+ * @requires vm.debug\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run build GetObjectSizeTest\n+ * @run shell MakeJAR.sh basicAgent\n+ *\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -Xint\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\n+ * @run main\/othervm -Xmx4g\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:ObjectAlignmentInBytes=32\n+ *                   -XX:-TieredCompilation\n+ *                   -javaagent:basicAgent.jar GetObjectSizeTest GetObjectSizeTest\n+ *\/\n+\n@@ -36,11 +269,12 @@\n-public class\n-GetObjectSizeTest\n-    extends ASimpleInstrumentationTestCase\n-{\n-\n-    \/**\n-     * Constructor for GetObjectSizeTest.\n-     * @param name\n-     *\/\n-    public GetObjectSizeTest(String name)\n-    {\n+import jdk.test.lib.Platform;\n+import sun.hotspot.WhiteBox;\n+\n+public class GetObjectSizeTest extends ASimpleInstrumentationTestCase {\n+\n+    static final Boolean compressedOops = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompressedOops\");\n+    static final int R = ((compressedOops == null) || (compressedOops == true)) ?  4 : 8;\n+\n+    static final Long align = WhiteBox.getWhiteBox().getIntxVMFlag(\"ObjectAlignmentInBytes\");\n+    static final int A = (align == null ? 8 : align.intValue());\n+\n+    public GetObjectSizeTest(String name) {\n@@ -50,32 +284,126 @@\n-    public static void\n-    main (String[] args)\n-        throws Throwable {\n-        ATestCaseScaffold   test = new GetObjectSizeTest(args[0]);\n-        test.runTest();\n-    }\n-\n-    protected final void\n-    doRunTest()\n-        throws Throwable {\n-        testGetObjectSize();\n-    }\n-\n-    \/*\n-     *  Lame test just to show we can do the roundtrip\n-     *\/\n-    public void\n-    testGetObjectSize()\n-    {\n-        Object[] objects = new Object[] {\n-            \"Hello World\",\n-            new Integer(8),\n-            this,\n-            new StringBuffer(\"Another test object\"),\n-            new Vector(99),\n-            \/\/ Add more objects here\n-            };\n-        for (int i = 0; i < objects.length; i++)\n-        {\n-            Object o = objects[i];\n-            long size = fInst.getObjectSize(o);\n-            assertTrue(size > 0);\n+    public static void main(String[] args)throws Throwable {\n+        new GetObjectSizeTest(args[0]).runTest();\n+    }\n+\n+    public static final int ITERS = 1_000_000;\n+\n+    public static void assertEquals(long expected, long actual) {\n+        if (expected != actual) {\n+            throw new IllegalStateException(\n+               \"Error: expected: \" + expected + \" (\" + Long.toHexString(expected) +\n+                \"), actual: \" + actual + \" (\" + Long.toHexString(actual) + \")\");\n+        }\n+    }\n+\n+    public static void assertNotEquals(long notExpected, long actual) {\n+        if (notExpected == actual) {\n+            throw new IllegalStateException(\n+               \"Error: not expected: \" + notExpected + \" (\" + Long.toHexString(notExpected) +\n+                \"), actual: \" + actual + \" (\" + Long.toHexString(actual) + \")\");\n+        }\n+    }\n+\n+    public static void assertFail() {\n+        throw new IllegalStateException(\"Should not be here\");\n+    }\n+\n+    protected final void doRunTest() throws Throwable {\n+        testSize_newObject();\n+        testSize_localObject();\n+        testSize_fieldObject();\n+\n+        testSize_newSmallByteArray();\n+        testSize_localSmallByteArray();\n+        testSize_fieldSmallByteArray();\n+\n+        testSize_newSmallObjArray();\n+        testSize_localSmallObjArray();\n+        testSize_fieldSmallObjArray();\n+\n+        testNulls();\n+    }\n+\n+    private static int roundUp(int v, int a) {\n+        return (v + a - 1) \/ a * a;\n+    }\n+\n+    private void testSize_newObject() {\n+        int expected = roundUp(Platform.is64bit() ? 16 : 8, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(new Object()));\n+        }\n+    }\n+\n+    private void testSize_localObject() {\n+        int expected = roundUp(Platform.is64bit() ? 16 : 8, A);\n+        Object o = new Object();\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(o));\n+        }\n+    }\n+\n+    static Object staticO = new Object();\n+\n+    private void testSize_fieldObject() {\n+        int expected = roundUp(Platform.is64bit() ? 16 : 8, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(staticO));\n+        }\n+    }\n+\n+    private void testSize_newSmallByteArray() {\n+        int expected = roundUp(1024 + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(new byte[1024]));\n+        }\n+    }\n+\n+    private void testSize_localSmallByteArray() {\n+        byte[] arr = new byte[1024];\n+        int expected = roundUp(arr.length + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(arr));\n+        }\n+    }\n+\n+    static byte[] smallArr = new byte[1024];\n+\n+    private void testSize_fieldSmallByteArray() {\n+        int expected = roundUp(smallArr.length + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(smallArr));\n+        }\n+    }\n+\n+    private void testSize_newSmallObjArray() {\n+        int expected = roundUp(1024*R + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(new Object[1024]));\n+        }\n+    }\n+\n+    private void testSize_localSmallObjArray() {\n+        Object[] arr = new Object[1024];\n+        int expected = roundUp(arr.length*R + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(arr));\n+        }\n+    }\n+\n+    static Object[] smallObjArr = new Object[1024];\n+\n+    private void testSize_fieldSmallObjArray() {\n+        int expected = roundUp(smallArr.length*R + 16, A);\n+        for (int c = 0; c < ITERS; c++) {\n+            assertEquals(expected, fInst.getObjectSize(smallObjArr));\n+        }\n+    }\n+\n+    private void testNulls() {\n+        for (int c = 0; c < ITERS; c++) {\n+            try {\n+                fInst.getObjectSize(null);\n+                assertFail();\n+            } catch (NullPointerException e) {\n+                \/\/ expected\n+            }\n","filename":"test\/jdk\/java\/lang\/instrument\/GetObjectSizeTest.java","additions":377,"deletions":49,"binary":false,"changes":426,"status":"modified"}]}