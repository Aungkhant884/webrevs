{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,0 +97,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.$i[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -107,0 +110,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -108,3 +124,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/CDSMHTest_generate.sh","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesAsCollectorTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesCastFailureTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesGeneralTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesInvokersTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesPermuteArgumentsTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,3 @@\n+    private static final String loggingOpts = \"-Xlog:cds,cds+dynamic=debug,class+load=trace\";\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n@@ -75,0 +78,13 @@\n+        String jars = appJar + ps + junitJar;\n+        String className = testPackageName + \".\" + testClassName;\n+\n+        dump(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName, loggingOpts, \"-cp\", jars, verifyOpt, mainClass, className)\n+            .assertNormalExit(output -> {\n+                    output.shouldMatch(lambdaLoadedFromArchive)\n+                          .shouldHaveExitValue(0);\n+                });\n@@ -76,3 +92,0 @@\n-        dumpAndRun(topArchiveName, \"-Xlog:cds,cds+dynamic=debug,class+load=trace\",\n-            \"-cp\", appJar + ps + junitJar, verifyOpt,\n-            mainClass, testPackageName + \".\" + testClassName);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesSpreadArgumentsTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}