{"files":[{"patch":"@@ -795,1 +795,1 @@\n-  if (ik->is_loaded() && !ik->is_linked() && ik->can_be_verified_at_dumptime() &&\n+  if (!ik->is_shared() && ik->is_loaded() && !ik->is_linked() && ik->can_be_verified_at_dumptime() &&\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312181\n+ * @summary Archive an old class, which fails verification and is a supertype of another\n+ *          class, in the base archive. Perform a dynamic dump with the base archive\n+ *          containing the old class and its subclass in \"unlinked\" state. VM should\n+ *          not crash in this scenario.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/VerifierTroublev49.jasm\n+ * @compile test-classes\/ChildOldSuper.java\n+ * @compile test-classes\/VerifierTroubleApp.java\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldsuper-fail-verifier.jar ChildOldSuper VerifierTroublev49 VerifierTroubleApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. OldClassVerifierTrouble\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldClassVerifierTrouble extends DynamicArchiveTestBase {\n+    static final String appClass = \"VerifierTroubleApp\";\n+    static final String baseArchiveClass = \"OldSuperVerifierTrouble\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(OldClassVerifierTrouble::testCustomBase);\n+    }\n+\n+    static void testCustomBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTestCustomBase(topArchiveName);\n+    }\n+\n+    private static void doTestCustomBase(String topArchiveName) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"oldsuper-fail-verifier.jar\");\n+\n+        \/\/ create a custom base archive containing an old class\n+        OutputAnalyzer output = TestCommon.dump(appJar,\n+            TestCommon.list(\"VerifierTroubleApp\", \"VerifierTroublev49\", \"ChildOldSuper\"),\n+            \"-Xlog:class+load,cds+class=debug\");\n+        TestCommon.checkDump(output);\n+        \/\/ Check the ChildOldSuper and VerifierTroublev49 are being dumped into the base archive.\n+        output.shouldMatch(\".cds.class.*klass.*0x.*app.*ChildOldSuper.*unlinked\")\n+              .shouldMatch(\".cds.class.*klass.*0x.*app.*VerifierTroublev49.*unlinked\");\n+\n+        String baseArchiveName = TestCommon.getCurrentArchiveName();\n+\n+        \/\/ create a dynamic archive with the custom base archive.\n+        \/\/ The old class is in the base archive and will be\n+        \/\/ accessed from VerifierTroubleApp.\n+        \/\/ Linking VerifierTroublev49 would result in java.lang.VerifyError.\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load,cds+class=debug\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertAbnormalExit(out -> {\n+                    out.shouldContain(\"VerifierTroublev49 source: shared objects file\")\n+                       .shouldContain(\"ChildOldSuper source: shared objects file\")\n+                       .shouldContain(\"java.lang.VerifyError: \" +\n+                                      \"(class: VerifierTroublev49, method: doit signature: ()Ljava\/lang\/String;)\" +\n+                                      \" Wrong return type in function\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldClassVerifierTrouble.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -22,0 +22,1 @@\n+ *\n@@ -23,6 +24,3 @@\n-\n- \/**\n-  * A no-op Java agent.\n-  *\/\n-public class JavaAgent {\n-    public static void agentmain(String args) {\n+public class ChildOldSuper extends VerifierTroublev49 {\n+    public String doit() {\n+        return super.doit();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/ChildOldSuper.java","additions":4,"deletions":6,"binary":false,"changes":10,"previous_filename":"test\/jdk\/sun\/tools\/jcmd\/JavaAgent.java","status":"copied"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class VerifierTroubleApp {\n+    public static void main(String args[]) throws Throwable {\n+        ChildOldSuper c = new ChildOldSuper();\n+        System.out.println(c);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/VerifierTroubleApp.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+\n+\/\/ During CDS static dump time, this class will be stored in \"unlinked\" state.\n+\/\/ This class should not be stored in a dynamic archive because it will fail verification.\n+\n+super public class VerifierTroublev49\n+\tversion 49:0\n+{\n+\n+\n+public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+{\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+}\n+\n+    \/*\n+     * The following method tries to return an Object as a String.\n+     * Verifier should fail.\n+     *\/\n+public Method doit:\"()Ljava\/lang\/String;\"\n+\tstack 2 locals 1\n+{\n+                new\tclass java\/lang\/Object;\n+\t\tdup;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\tastore_0;\n+\t\taload_0;\n+\t\tareturn;   \/\/ tries to return an Object as a String\n+}\n+\n+} \/\/ end Class VerifierTroublev49\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/VerifierTroublev49.jasm","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}