{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -41,0 +42,3 @@\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import jdk.jpackage.test.Functional.ThrowingConsumer;\n@@ -228,1 +232,1 @@\n-            final Path jmodFilePath = outputDir.resolve(jmodFileName);\n+            final Path jmodPath = outputDir.resolve(jmodFileName);\n@@ -236,2 +240,1 @@\n-                        .addArgument(jarPath)\n-                        .addArgument(jmodFilePath);\n+                        .addArgument(jarPath);\n@@ -247,1 +250,12 @@\n-                Files.createDirectories(jmodFilePath.getParent());\n+                final Path jmodFilePath;\n+                if (appDesc.isExplodedModule()) {\n+                    jmodFilePath = jmodWorkDir.resolve(\"tmp.jmod\");\n+                    exec.addArgument(jmodFilePath);\n+                    TKit.deleteDirectoryRecursive(jmodPath);\n+                } else {\n+                    jmodFilePath = jmodPath;\n+                    exec.addArgument(jmodFilePath);\n+                    TKit.deleteIfExists(jmodPath);\n+                }\n+\n+                Files.createDirectories(jmodPath.getParent());\n@@ -249,0 +263,28 @@\n+\n+                if (appDesc.isExplodedModule()) {\n+                    TKit.trace(String.format(\"Explode [%s] module file...\",\n+                            jmodFilePath.toAbsolutePath().normalize()));\n+                    \/\/ Explode contents of the root `classes` directory of\n+                    \/\/ temporary .jmod file\n+                    final Path jmodRootDir = Path.of(\"classes\");\n+                    try (var archive = new ZipFile(jmodFilePath.toFile())) {\n+                        archive.stream()\n+                        .filter(Predicate.not(ZipEntry::isDirectory))\n+                        .sequential().forEachOrdered(ThrowingConsumer.toConsumer(\n+                            entry -> {\n+                                try (var in = archive.getInputStream(entry)) {\n+                                    Path entryName = Path.of(entry.getName());\n+                                    if (entryName.startsWith(jmodRootDir)) {\n+                                        entryName = jmodRootDir.relativize(entryName);\n+                                    }\n+                                    final Path fileName = jmodPath.resolve(entryName);\n+                                    TKit.trace(String.format(\n+                                            \"Save [%s] zip entry in [%s] file...\",\n+                                            entry.getName(),\n+                                            fileName.toAbsolutePath().normalize()));\n+                                    Files.createDirectories(fileName.getParent());\n+                                    Files.copy(in, fileName);\n+                                }\n+                            }));\n+                    }\n+                }\n@@ -251,1 +293,1 @@\n-            return jmodFilePath;\n+            return jmodPath;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":47,"deletions":5,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -87,0 +87,4 @@\n+        if (isExplodedModule()) {\n+            return bundleFileName;\n+        }\n+\n@@ -97,0 +101,4 @@\n+    public boolean isExplodedModule() {\n+        return bundleFileName != null && bundleFileName.endsWith(\".ejmod\");\n+    }\n+\n@@ -130,1 +138,1 @@\n-     * [(jar_file|jmods_file):][module_name\/]qualified_class_name[!][@module_version].\n+     * [(jar_file|jmods_file|exploded_jmods_file):][module_name\/]qualified_class_name[!][@module_version].\n@@ -143,0 +151,6 @@\n+     * E.g.: `bar.ejmod:com.another\/com.another.One` encodes modular\n+     * application. Module name is `com.another`. Main class is\n+     * `com.another.One`. Application will be\n+     * compiled and packed in temporary jmod file that will be exploded in\n+     * `bar.ejmod` directory.\n+     *\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JavaAppDesc.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -229,0 +229,2 @@\n+    \/\/ Modular app in exploded .jmod file\n+    @Parameter(\"hello.ejmod:com.other\/com.other.Hello\")\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/BasicTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}