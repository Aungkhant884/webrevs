{"files":[{"patch":"@@ -1345,1 +1345,1 @@\n-      context_type = InstanceKlass::cast(context_type->implementor());\n+      context_type = context_type->implementor();\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1226,3 +1226,3 @@\n-Klass* InstanceKlass::implementor() const {\n-  Klass* volatile* k = adr_implementor();\n-  if (k == NULL) {\n+InstanceKlass* InstanceKlass::implementor() const {\n+  InstanceKlass* volatile* ik = adr_implementor();\n+  if (ik == NULL) {\n@@ -1232,2 +1232,2 @@\n-    Klass* kls = Atomic::load_acquire(k);\n-    if (kls != NULL && !kls->is_loader_alive()) {\n+    InstanceKlass* ikls = Atomic::load_acquire(ik);\n+    if (ikls != NULL && !ikls->is_loader_alive()) {\n@@ -1236,1 +1236,1 @@\n-      return kls;\n+      return ikls;\n@@ -1242,1 +1242,1 @@\n-void InstanceKlass::set_implementor(Klass* k) {\n+void InstanceKlass::set_implementor(InstanceKlass* ik) {\n@@ -1245,1 +1245,1 @@\n-  Klass* volatile* addr = adr_implementor();\n+  InstanceKlass* volatile* addr = adr_implementor();\n@@ -1248,1 +1248,1 @@\n-    Atomic::release_store(addr, k);\n+    Atomic::release_store(addr, ik);\n@@ -1253,2 +1253,2 @@\n-  Klass* k = implementor();\n-  if (k == NULL) {\n+  InstanceKlass* ik = implementor();\n+  if (ik == NULL) {\n@@ -1256,1 +1256,1 @@\n-  } else if (k != this) {\n+  } else if (ik != this) {\n@@ -1272,1 +1272,1 @@\n-void InstanceKlass::add_implementor(Klass* k) {\n+void InstanceKlass::add_implementor(InstanceKlass* ik) {\n@@ -1279,1 +1279,1 @@\n-  if (InstanceKlass::cast(k)->is_interface()) return;\n+  if (ik->is_interface()) return;\n@@ -1284,2 +1284,2 @@\n-  Klass* sk = k->super();\n-  if (sk != NULL && InstanceKlass::cast(sk)->implements_interface(this))\n+  InstanceKlass* super_ik = ik->java_super();\n+  if (super_ik != NULL && super_ik->implements_interface(this))\n@@ -1291,4 +1291,4 @@\n-  Klass* ik = implementor();\n-  if (ik == NULL) {\n-    set_implementor(k);\n-  } else if (ik != this && ik != k) {\n+  InstanceKlass* iklass = implementor();\n+  if (iklass == NULL) {\n+    set_implementor(ik);\n+  } else if (iklass != this && iklass != ik) {\n@@ -1302,1 +1302,1 @@\n-    InstanceKlass::cast(local_interfaces()->at(index))->add_implementor(k);\n+    local_interfaces()->at(index)->add_implementor(ik);\n@@ -1317,1 +1317,1 @@\n-    InstanceKlass* interf = InstanceKlass::cast(local_interfaces()->at(i));\n+    InstanceKlass* interf = local_interfaces()->at(i);\n@@ -2347,1 +2347,1 @@\n-      Klass* impl = Atomic::load_acquire(adr_implementor());\n+      InstanceKlass* impl = Atomic::load_acquire(adr_implementor());\n@@ -2349,3 +2349,3 @@\n-        \/\/ NULL this field, might be an unloaded klass or NULL\n-        Klass* volatile* klass = adr_implementor();\n-        if (Atomic::cmpxchg(klass, impl, (Klass*)NULL) == impl) {\n+        \/\/ NULL this field, might be an unloaded instance klass or NULL\n+        InstanceKlass* volatile* iklass = adr_implementor();\n+        if (Atomic::cmpxchg(iklass, impl, (InstanceKlass*)NULL) == impl) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-  \/\/   iterface. The possible values of the implementor fall into following\n+  \/\/   interface. The possible values of the implementor fall into following\n@@ -1019,2 +1019,2 @@\n-  Klass* implementor() const;\n-  void set_implementor(Klass* k);\n+  InstanceKlass* implementor() const;\n+  void set_implementor(InstanceKlass* ik);\n@@ -1022,1 +1022,1 @@\n-  void add_implementor(Klass* k);  \/\/ k is a new class that implements this interface\n+  void add_implementor(InstanceKlass* ik);  \/\/ ik is a new class that implements this interface\n@@ -1090,1 +1090,1 @@\n-  inline Klass* volatile* adr_implementor() const;\n+  inline InstanceKlass* volatile* adr_implementor() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-inline Klass* volatile* InstanceKlass::adr_implementor() const {\n+inline InstanceKlass* volatile* InstanceKlass::adr_implementor() const {\n@@ -79,1 +79,1 @@\n-    return (Klass* volatile*)end_of_nonstatic_oop_maps();\n+    return (InstanceKlass* volatile*)end_of_nonstatic_oop_maps();\n@@ -105,1 +105,1 @@\n-    Klass* volatile* adr_impl = adr_implementor();\n+    InstanceKlass* volatile* adr_impl = adr_implementor();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}