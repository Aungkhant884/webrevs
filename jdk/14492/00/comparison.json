{"files":[{"patch":"@@ -362,0 +362,22 @@\n+class CheckInsertionPoint: public ValueVisitor {\n+ private:\n+  Value _insert;\n+  bool _valid = true;\n+\n+  void visit(Value* vp) {\n+    assert(*vp != nullptr, \"value should not be null\");\n+    if (_insert->dominator_depth() < (*vp)->dominator_depth()) {\n+      _valid = false;\n+    }\n+  }\n+\n+ public:\n+  bool is_valid() {return _valid; }\n+  CheckInsertionPoint(Value insert)\n+    : _insert(insert) {\n+#ifdef ASSERT\n+      assert(insert != nullptr, \"insertion point should not be null\");\n+#endif\n+  }\n+};\n+\n@@ -397,1 +419,5 @@\n-    if (cur_invariant) {\n+    \/\/ Check that insertion point has higher dom depth than all inputs to cur\n+    CheckInsertionPoint v(_insertion_point);\n+    cur->input_values_do(&v);\n+\n+    if (cur_invariant && v.is_valid()) {\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8301489\n+ * @summary ShortLoopOptimizer might lift instructions before their inputs\n+ * @requires vm.compiler1.enabled\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1\n+ *                   -XX:CompileOnly=compiler.c1.Test8301489::*\n+ *                   compiler.c1.Test8301489\n+ *\/\n+\n+\n+package compiler.c1;\n+\n+public class Test8301489 {\n+    static int c = 0;\n+    static int[] arr = {};\n+\n+    static void op2Test(int a, int b) {\n+        \/\/ Implicit edges created during dom calculation to exception handler\n+        if (a < 0) {\n+            b = 0;\n+        }\n+        \/\/ Create two branches into next loop header block\n+        try {\n+            int l = arr.length;\n+            for (int i = 0; i < l; i++) {\n+                int d = arr[i] + arr[i];\n+            }\n+        }\n+        \/\/ Exception handler as predecessor of the next loop header block\n+        catch (ArithmeticException e) {}\n+\n+        \/\/ op2(a, b) as candidate for hoisting: operands are loop invariant\n+        while (a + b < b) {}\n+        \/\/ op2(a, b) should not be hoisted above 'if (a < 0) {...}' block\n+    }\n+\n+    static void arrayLengthTest() {\n+        float [] newArr = new float[c];\n+\n+        try {\n+            for (float f : newArr) {}\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {}\n+\n+        while (54321 < newArr.length) {\n+            newArr[c] = 123.45f;\n+        }\n+    }\n+\n+    static void negateTest(int a) {\n+        if (a <= 111) {\n+            a = -111;\n+        }\n+\n+        int f = 0;\n+        try {\n+            int l = arr.length;\n+            f--;\n+        }\n+        catch (NegativeArraySizeException e) {}\n+\n+        while (-a < f) {\n+            f--;\n+        }\n+    }\n+\n+    static void convertTest(int a) {\n+        if (c == 0) {\n+            a = 0;\n+        }\n+\n+        long tgt = 10;\n+\n+        try {\n+            String s = String.valueOf(c);\n+        }\n+        catch (NumberFormatException e) {}\n+\n+        while ((long)a != tgt) {\n+            tgt--;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10; i++) {\n+            op2Test(12, 34);\n+            arrayLengthTest();\n+            negateTest(-778);\n+            convertTest(4812);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/Test8301489.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}