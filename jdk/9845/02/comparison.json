{"files":[{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+import java.util.*;\n+\n+public abstract class AbstractSpinedBufferTest {\n+\n+    \/\/ Create sizes around the boundary of spines\n+    static final List<Integer> SIZES;\n+    static {\n+        try {\n+            SIZES = IntStream.range(0, 15)\n+                             .map(i -> 1 << i)\n+                             .flatMap(i -> Arrays.stream(new int[] { i-2, i-1, i, i+1, i+2 }))\n+                             .filter(i -> i >= 0)\n+                             .boxed()\n+                             .distinct()\n+                             .collect(Collectors.toList());\n+        }\n+        catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    static final int TEST_SIZE = 5000;\n+}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/AbstractSpinedBufferTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import java.util.function.DoubleConsumer;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+\n+@Test\n+public class SpinedBufferDoubleTest extends AbstractSpinedBufferTest {\n+    @DataProvider(name = \"DoubleSpinedBuffer\")\n+    public Object[][] createDoubleSpinedBuffer() {\n+        List<Object[]> params = new ArrayList<>();\n+\n+        for (int size : SIZES) {\n+            \/\/ @@@ replace with double range when implemented\n+            double[] array = LongStream.range(0, size).asDoubleStream().toArray();\n+            SpinedBuffer.OfDouble sb = new SpinedBuffer.OfDouble();\n+            Arrays.stream(array).forEach(sb);\n+\n+            params.add(new Object[]{array, sb});\n+        }\n+\n+        return params.toArray(new Object[0][]);\n+    }\n+\n+    @Test(dataProvider = \"DoubleSpinedBuffer\")\n+    public void testDoubleSpliterator(double[] array, SpinedBuffer.OfDouble sb) {\n+        assertEquals(sb.count(), array.length);\n+        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n+\n+        SpliteratorTestHelper.testDoubleSpliterator(sb::spliterator);\n+    }\n+\n+    @Test(dataProvider = \"DoubleSpinedBuffer\", groups = { \"serialization-hostile\" })\n+    public void testLongLastSplit(double[] array, SpinedBuffer.OfDouble sb) {\n+        Spliterator.OfDouble spliterator = sb.spliterator();\n+        Spliterator.OfDouble split = spliterator.trySplit();\n+        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n+        long lastSplitSize = spliterator.getExactSizeIfKnown();\n+        splitSizes += lastSplitSize;\n+\n+        assertEquals(splitSizes, array.length);\n+\n+        List<Double> contentOfLastSplit = new ArrayList<>();\n+        spliterator.forEachRemaining((DoubleConsumer) contentOfLastSplit::add);\n+\n+        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n+\n+        List<Double> end = Arrays.stream(array)\n+                .boxed()\n+                .skip(array.length - lastSplitSize)\n+                .collect(Collectors.toList());\n+        assertEquals(contentOfLastSplit, end);\n+    }\n+\n+    @Test(groups = { \"serialization-hostile\" })\n+    public void testDoubleSpinedBuffer() {\n+        List<Double> list1 = new ArrayList<>();\n+        List<Double> list2 = new ArrayList<>();\n+        SpinedBuffer.OfDouble sb = new SpinedBuffer.OfDouble();\n+        for (long i = 0; i < TEST_SIZE; i++) {\n+            list1.add((double) i);\n+            sb.accept((double) i);\n+        }\n+        PrimitiveIterator.OfDouble it = sb.iterator();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list2.add(it.nextDouble());\n+        }\n+        assertFalse(it.hasNext());\n+        assertEquals(list1, list2);\n+\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            assertEquals(sb.get(i), (double) i, Double.toString(i));\n+        }\n+\n+        list2.clear();\n+        sb.forEach((double i) -> list2.add(i));\n+        assertEquals(list1, list2);\n+        double[] array = sb.asPrimitiveArray();\n+        list2.clear();\n+        for (double i : array) {\n+            list2.add(i);\n+        }\n+        assertEquals(list1, list2);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/SpinedBufferDoubleTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import java.util.function.IntConsumer;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+\n+@Test\n+public class SpinedBufferIntTest extends AbstractSpinedBufferTest {\n+    @DataProvider(name = \"IntSpinedBuffer\")\n+    public Object[][] createIntSpinedBuffer() {\n+        List<Object[]> params = new ArrayList<>();\n+\n+        for (int size : SIZES) {\n+            int[] array = IntStream.range(0, size).toArray();\n+            SpinedBuffer.OfInt sb = new SpinedBuffer.OfInt();\n+            Arrays.stream(array).forEach(sb);\n+\n+            params.add(new Object[]{array, sb});\n+        }\n+\n+        return params.toArray(new Object[0][]);\n+    }\n+\n+    @Test(dataProvider = \"IntSpinedBuffer\")\n+    public void testIntSpliterator(int[] array, SpinedBuffer.OfInt sb) {\n+        assertEquals(sb.count(), array.length);\n+        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n+\n+        SpliteratorTestHelper.testIntSpliterator(sb::spliterator);\n+    }\n+\n+    @Test(dataProvider = \"IntSpinedBuffer\", groups = { \"serialization-hostile\" })\n+    public void testIntLastSplit(int[] array, SpinedBuffer.OfInt sb) {\n+        Spliterator.OfInt spliterator = sb.spliterator();\n+        Spliterator.OfInt split = spliterator.trySplit();\n+        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n+        long lastSplitSize = spliterator.getExactSizeIfKnown();\n+        splitSizes += lastSplitSize;\n+\n+        assertEquals(splitSizes, array.length);\n+\n+        List<Integer> contentOfLastSplit = new ArrayList<>();\n+        spliterator.forEachRemaining((IntConsumer) contentOfLastSplit::add);\n+\n+        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n+\n+        List<Integer> end = Arrays.stream(array)\n+                .boxed()\n+                .skip(array.length - lastSplitSize)\n+                .collect(Collectors.toList());\n+        assertEquals(contentOfLastSplit, end);\n+    }\n+\n+    @Test(groups = { \"serialization-hostile\" })\n+    public void testIntSpinedBuffer() {\n+        List<Integer> list1 = new ArrayList<>();\n+        List<Integer> list2 = new ArrayList<>();\n+        SpinedBuffer.OfInt sb = new SpinedBuffer.OfInt();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list1.add(i);\n+            sb.accept(i);\n+        }\n+        PrimitiveIterator.OfInt it = sb.iterator();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list2.add(it.nextInt());\n+        }\n+        assertFalse(it.hasNext());\n+        assertEquals(list1, list2);\n+\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            assertEquals(sb.get(i), i, Integer.toString(i));\n+        }\n+\n+        list2.clear();\n+        sb.forEach((int i) -> list2.add(i));\n+        assertEquals(list1, list2);\n+        int[] array = sb.asPrimitiveArray();\n+        list2.clear();\n+        for (int i : array) {\n+            list2.add(i);\n+        }\n+        assertEquals(list1, list2);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/SpinedBufferIntTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+\n+@Test\n+public class SpinedBufferIntegerTest extends AbstractSpinedBufferTest {\n+    @DataProvider(name = \"SpinedBuffer\")\n+    public Object[][] createSpinedBuffer() {\n+        List<Object[]> params = new ArrayList<>();\n+\n+        for (int size : SIZES) {\n+            int[] array = IntStream.range(0, size).toArray();\n+\n+            SpinedBuffer<Integer> sb = new SpinedBuffer<>();\n+            Arrays.stream(array).boxed().forEach(sb);\n+            params.add(new Object[]{array, sb});\n+\n+            sb = new SpinedBuffer<>(size \/ 2);\n+            Arrays.stream(array).boxed().forEach(sb);\n+            params.add(new Object[]{array, sb});\n+\n+            sb = new SpinedBuffer<>(size);\n+            Arrays.stream(array).boxed().forEach(sb);\n+            params.add(new Object[]{array, sb});\n+\n+            sb = new SpinedBuffer<>(size * 2);\n+            Arrays.stream(array).boxed().forEach(sb);\n+            params.add(new Object[]{array, sb});\n+        }\n+\n+        return params.toArray(new Object[0][]);\n+    }\n+\n+    @Test(dataProvider = \"SpinedBuffer\")\n+    public void testSpliterator(int[] array, SpinedBuffer<Integer> sb) {\n+        assertEquals(sb.count(), array.length);\n+        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n+\n+        SpliteratorTestHelper.testSpliterator(sb::spliterator);\n+    }\n+\n+    @Test(dataProvider = \"SpinedBuffer\", groups = { \"serialization-hostile\" })\n+    public void testLastSplit(int[] array, SpinedBuffer<Integer> sb) {\n+        Spliterator<Integer> spliterator = sb.spliterator();\n+        Spliterator<Integer> split = spliterator.trySplit();\n+        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n+        long lastSplitSize = spliterator.getExactSizeIfKnown();\n+        splitSizes += lastSplitSize;\n+\n+        assertEquals(splitSizes, array.length);\n+\n+        List<Integer> contentOfLastSplit = new ArrayList<>();\n+        spliterator.forEachRemaining(contentOfLastSplit::add);\n+\n+        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n+\n+        List<Integer> end = Arrays.stream(array)\n+                .boxed()\n+                .skip(array.length - lastSplitSize)\n+                .collect(Collectors.toList());\n+        assertEquals(contentOfLastSplit, end);\n+    }\n+\n+    @Test(groups = { \"serialization-hostile\" })\n+    public void testSpinedBuffer() {\n+        List<Integer> list1 = new ArrayList<>();\n+        List<Integer> list2 = new ArrayList<>();\n+        SpinedBuffer<Integer> sb = new SpinedBuffer<>();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list1.add(i);\n+            sb.accept(i);\n+        }\n+        Iterator<Integer> it = sb.iterator();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list2.add(it.next());\n+        }\n+        assertFalse(it.hasNext());\n+        assertEquals(list1, list2);\n+\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            assertEquals(sb.get(i), (Integer) i, Integer.toString(i));\n+        }\n+\n+        list2.clear();\n+        sb.forEach(list2::add);\n+        assertEquals(list1, list2);\n+        Integer[] array = sb.asArray(LambdaTestHelpers.integerArrayGenerator);\n+        list2.clear();\n+        for (Integer i : array) {\n+            list2.add(i);\n+        }\n+        assertEquals(list1, list2);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/SpinedBufferIntegerTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import java.util.function.LongConsumer;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+\n+@Test\n+public class SpinedBufferLongTest extends AbstractSpinedBufferTest {\n+    @DataProvider(name = \"LongSpinedBuffer\")\n+    public Object[][] createLongSpinedBuffer() {\n+        List<Object[]> params = new ArrayList<>();\n+\n+        for (int size : SIZES) {\n+            long[] array = LongStream.range(0, size).toArray();\n+            SpinedBuffer.OfLong sb = new SpinedBuffer.OfLong();\n+            Arrays.stream(array).forEach(sb);\n+\n+            params.add(new Object[]{array, sb});\n+        }\n+\n+        return params.toArray(new Object[0][]);\n+    }\n+\n+    @Test(dataProvider = \"LongSpinedBuffer\")\n+    public void testLongSpliterator(long[] array, SpinedBuffer.OfLong sb) {\n+        assertEquals(sb.count(), array.length);\n+        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n+\n+        SpliteratorTestHelper.testLongSpliterator(sb::spliterator);\n+    }\n+\n+    @Test(dataProvider = \"LongSpinedBuffer\", groups = { \"serialization-hostile\" })\n+    public void testLongLastSplit(long[] array, SpinedBuffer.OfLong sb) {\n+        Spliterator.OfLong spliterator = sb.spliterator();\n+        Spliterator.OfLong split = spliterator.trySplit();\n+        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n+        long lastSplitSize = spliterator.getExactSizeIfKnown();\n+        splitSizes += lastSplitSize;\n+\n+        assertEquals(splitSizes, array.length);\n+\n+        List<Long> contentOfLastSplit = new ArrayList<>();\n+        spliterator.forEachRemaining((LongConsumer) contentOfLastSplit::add);\n+\n+        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n+\n+        List<Long> end = Arrays.stream(array)\n+                .boxed()\n+                .skip(array.length - lastSplitSize)\n+                .collect(Collectors.toList());\n+        assertEquals(contentOfLastSplit, end);\n+    }\n+\n+    @Test(groups = { \"serialization-hostile\" })\n+    public void testLongSpinedBuffer() {\n+        List<Long> list1 = new ArrayList<>();\n+        List<Long> list2 = new ArrayList<>();\n+        SpinedBuffer.OfLong sb = new SpinedBuffer.OfLong();\n+        for (long i = 0; i < TEST_SIZE; i++) {\n+            list1.add(i);\n+            sb.accept(i);\n+        }\n+        PrimitiveIterator.OfLong it = sb.iterator();\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            list2.add(it.nextLong());\n+        }\n+        assertFalse(it.hasNext());\n+        assertEquals(list1, list2);\n+\n+        for (int i = 0; i < TEST_SIZE; i++) {\n+            assertEquals(sb.get(i), i, Long.toString(i));\n+        }\n+\n+        list2.clear();\n+        sb.forEach((long i) -> list2.add(i));\n+        assertEquals(list1, list2);\n+        long[] array = sb.asPrimitiveArray();\n+        list2.clear();\n+        for (long i : array) {\n+            list2.add(i);\n+        }\n+        assertEquals(list1, list2);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/SpinedBufferLongTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -1,370 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.util.stream;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.util.*;\n-import java.util.function.DoubleConsumer;\n-import java.util.function.IntConsumer;\n-import java.util.function.LongConsumer;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-\n-@Test\n-public class SpinedBufferTest {\n-\n-    \/\/ Create sizes around the boundary of spines\n-    static List<Integer> sizes;\n-    static {\n-        try {\n-            sizes = IntStream.range(0, 15)\n-                             .map(i -> 1 << i)\n-                             .flatMap(i -> Arrays.stream(new int[] { i-2, i-1, i, i+1, i+2 }))\n-                             .filter(i -> i >= 0)\n-                             .boxed()\n-                             .distinct()\n-                             .collect(Collectors.toList());\n-        }\n-        catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private static final int TEST_SIZE = 5000;\n-\n-    \/\/ SpinedBuffer\n-\n-    @DataProvider(name = \"SpinedBuffer\")\n-    public Object[][] createSpinedBuffer() {\n-        List<Object[]> params = new ArrayList<>();\n-\n-        for (int size : sizes) {\n-            int[] array = IntStream.range(0, size).toArray();\n-\n-            SpinedBuffer<Integer> sb = new SpinedBuffer<>();\n-            Arrays.stream(array).boxed().forEach(sb);\n-            params.add(new Object[]{array, sb});\n-\n-            sb = new SpinedBuffer<>(size \/ 2);\n-            Arrays.stream(array).boxed().forEach(sb);\n-            params.add(new Object[]{array, sb});\n-\n-            sb = new SpinedBuffer<>(size);\n-            Arrays.stream(array).boxed().forEach(sb);\n-            params.add(new Object[]{array, sb});\n-\n-            sb = new SpinedBuffer<>(size * 2);\n-            Arrays.stream(array).boxed().forEach(sb);\n-            params.add(new Object[]{array, sb});\n-        }\n-\n-        return params.toArray(new Object[0][]);\n-    }\n-\n-    @Test(dataProvider = \"SpinedBuffer\")\n-    public void testSpliterator(int[] array, SpinedBuffer<Integer> sb) {\n-        assertEquals(sb.count(), array.length);\n-        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n-\n-        SpliteratorTestHelper.testSpliterator(sb::spliterator);\n-    }\n-\n-    @Test(dataProvider = \"SpinedBuffer\", groups = { \"serialization-hostile\" })\n-    public void testLastSplit(int[] array, SpinedBuffer<Integer> sb) {\n-        Spliterator<Integer> spliterator = sb.spliterator();\n-        Spliterator<Integer> split = spliterator.trySplit();\n-        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n-        long lastSplitSize = spliterator.getExactSizeIfKnown();\n-        splitSizes += lastSplitSize;\n-\n-        assertEquals(splitSizes, array.length);\n-\n-        List<Integer> contentOfLastSplit = new ArrayList<>();\n-        spliterator.forEachRemaining(contentOfLastSplit::add);\n-\n-        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n-\n-        List<Integer> end = Arrays.stream(array)\n-                .boxed()\n-                .skip(array.length - lastSplitSize)\n-                .collect(Collectors.toList());\n-        assertEquals(contentOfLastSplit, end);\n-    }\n-\n-    @Test(groups = { \"serialization-hostile\" })\n-    public void testSpinedBuffer() {\n-        List<Integer> list1 = new ArrayList<>();\n-        List<Integer> list2 = new ArrayList<>();\n-        SpinedBuffer<Integer> sb = new SpinedBuffer<>();\n-        for (int i = 0; i < TEST_SIZE; i++) {\n-            list1.add(i);\n-            sb.accept(i);\n-        }\n-        Iterator<Integer> it = sb.iterator();\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            list2.add(it.next());\n-        assertFalse(it.hasNext());\n-        assertEquals(list1, list2);\n-\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            assertEquals(sb.get(i), (Integer) i, Integer.toString(i));\n-\n-        list2.clear();\n-        sb.forEach(list2::add);\n-        assertEquals(list1, list2);\n-        Integer[] array = sb.asArray(LambdaTestHelpers.integerArrayGenerator);\n-        list2.clear();\n-        for (Integer i : array)\n-            list2.add(i);\n-        assertEquals(list1, list2);\n-    }\n-\n-    \/\/ IntSpinedBuffer\n-\n-    @DataProvider(name = \"IntSpinedBuffer\")\n-    public Object[][] createIntSpinedBuffer() {\n-        List<Object[]> params = new ArrayList<>();\n-\n-        for (int size : sizes) {\n-            int[] array = IntStream.range(0, size).toArray();\n-            SpinedBuffer.OfInt sb = new SpinedBuffer.OfInt();\n-            Arrays.stream(array).forEach(sb);\n-\n-            params.add(new Object[]{array, sb});\n-        }\n-\n-        return params.toArray(new Object[0][]);\n-    }\n-\n-    @Test(dataProvider = \"IntSpinedBuffer\")\n-    public void testIntSpliterator(int[] array, SpinedBuffer.OfInt sb) {\n-        assertEquals(sb.count(), array.length);\n-        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n-\n-        SpliteratorTestHelper.testIntSpliterator(sb::spliterator);\n-    }\n-\n-    @Test(dataProvider = \"IntSpinedBuffer\", groups = { \"serialization-hostile\" })\n-    public void testIntLastSplit(int[] array, SpinedBuffer.OfInt sb) {\n-        Spliterator.OfInt spliterator = sb.spliterator();\n-        Spliterator.OfInt split = spliterator.trySplit();\n-        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n-        long lastSplitSize = spliterator.getExactSizeIfKnown();\n-        splitSizes += lastSplitSize;\n-\n-        assertEquals(splitSizes, array.length);\n-\n-        List<Integer> contentOfLastSplit = new ArrayList<>();\n-        spliterator.forEachRemaining((IntConsumer) contentOfLastSplit::add);\n-\n-        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n-\n-        List<Integer> end = Arrays.stream(array)\n-                .boxed()\n-                .skip(array.length - lastSplitSize)\n-                .collect(Collectors.toList());\n-        assertEquals(contentOfLastSplit, end);\n-    }\n-\n-    @Test(groups = { \"serialization-hostile\" })\n-    public void testIntSpinedBuffer() {\n-        List<Integer> list1 = new ArrayList<>();\n-        List<Integer> list2 = new ArrayList<>();\n-        SpinedBuffer.OfInt sb = new SpinedBuffer.OfInt();\n-        for (int i = 0; i < TEST_SIZE; i++) {\n-            list1.add(i);\n-            sb.accept(i);\n-        }\n-        PrimitiveIterator.OfInt it = sb.iterator();\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            list2.add(it.nextInt());\n-        assertFalse(it.hasNext());\n-        assertEquals(list1, list2);\n-\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            assertEquals(sb.get(i), i, Integer.toString(i));\n-\n-        list2.clear();\n-        sb.forEach((int i) -> list2.add(i));\n-        assertEquals(list1, list2);\n-        int[] array = sb.asPrimitiveArray();\n-        list2.clear();\n-        for (int i : array)\n-            list2.add(i);\n-        assertEquals(list1, list2);\n-    }\n-\n-    \/\/ LongSpinedBuffer\n-\n-    @DataProvider(name = \"LongSpinedBuffer\")\n-    public Object[][] createLongSpinedBuffer() {\n-        List<Object[]> params = new ArrayList<>();\n-\n-        for (int size : sizes) {\n-            long[] array = LongStream.range(0, size).toArray();\n-            SpinedBuffer.OfLong sb = new SpinedBuffer.OfLong();\n-            Arrays.stream(array).forEach(sb);\n-\n-            params.add(new Object[]{array, sb});\n-        }\n-\n-        return params.toArray(new Object[0][]);\n-    }\n-\n-    @Test(dataProvider = \"LongSpinedBuffer\")\n-    public void testLongSpliterator(long[] array, SpinedBuffer.OfLong sb) {\n-        assertEquals(sb.count(), array.length);\n-        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n-\n-        SpliteratorTestHelper.testLongSpliterator(sb::spliterator);\n-    }\n-\n-    @Test(dataProvider = \"LongSpinedBuffer\", groups = { \"serialization-hostile\" })\n-    public void testLongLastSplit(long[] array, SpinedBuffer.OfLong sb) {\n-        Spliterator.OfLong spliterator = sb.spliterator();\n-        Spliterator.OfLong split = spliterator.trySplit();\n-        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n-        long lastSplitSize = spliterator.getExactSizeIfKnown();\n-        splitSizes += lastSplitSize;\n-\n-        assertEquals(splitSizes, array.length);\n-\n-        List<Long> contentOfLastSplit = new ArrayList<>();\n-        spliterator.forEachRemaining((LongConsumer) contentOfLastSplit::add);\n-\n-        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n-\n-        List<Long> end = Arrays.stream(array)\n-                .boxed()\n-                .skip(array.length - lastSplitSize)\n-                .collect(Collectors.toList());\n-        assertEquals(contentOfLastSplit, end);\n-    }\n-\n-    @Test(groups = { \"serialization-hostile\" })\n-    public void testLongSpinedBuffer() {\n-        List<Long> list1 = new ArrayList<>();\n-        List<Long> list2 = new ArrayList<>();\n-        SpinedBuffer.OfLong sb = new SpinedBuffer.OfLong();\n-        for (long i = 0; i < TEST_SIZE; i++) {\n-            list1.add(i);\n-            sb.accept(i);\n-        }\n-        PrimitiveIterator.OfLong it = sb.iterator();\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            list2.add(it.nextLong());\n-        assertFalse(it.hasNext());\n-        assertEquals(list1, list2);\n-\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            assertEquals(sb.get(i), i, Long.toString(i));\n-\n-        list2.clear();\n-        sb.forEach((long i) -> list2.add(i));\n-        assertEquals(list1, list2);\n-        long[] array = sb.asPrimitiveArray();\n-        list2.clear();\n-        for (long i : array)\n-            list2.add(i);\n-        assertEquals(list1, list2);\n-    }\n-\n-    \/\/ DoubleSpinedBuffer\n-\n-    @DataProvider(name = \"DoubleSpinedBuffer\")\n-    public Object[][] createDoubleSpinedBuffer() {\n-        List<Object[]> params = new ArrayList<>();\n-\n-        for (int size : sizes) {\n-            \/\/ @@@ replace with double range when implemented\n-            double[] array = LongStream.range(0, size).asDoubleStream().toArray();\n-            SpinedBuffer.OfDouble sb = new SpinedBuffer.OfDouble();\n-            Arrays.stream(array).forEach(sb);\n-\n-            params.add(new Object[]{array, sb});\n-        }\n-\n-        return params.toArray(new Object[0][]);\n-    }\n-\n-    @Test(dataProvider = \"DoubleSpinedBuffer\")\n-    public void testDoubleSpliterator(double[] array, SpinedBuffer.OfDouble sb) {\n-        assertEquals(sb.count(), array.length);\n-        assertEquals(sb.count(), sb.spliterator().getExactSizeIfKnown());\n-\n-        SpliteratorTestHelper.testDoubleSpliterator(sb::spliterator);\n-    }\n-\n-    @Test(dataProvider = \"DoubleSpinedBuffer\", groups = { \"serialization-hostile\" })\n-    public void testLongLastSplit(double[] array, SpinedBuffer.OfDouble sb) {\n-        Spliterator.OfDouble spliterator = sb.spliterator();\n-        Spliterator.OfDouble split = spliterator.trySplit();\n-        long splitSizes = (split == null) ? 0 : split.getExactSizeIfKnown();\n-        long lastSplitSize = spliterator.getExactSizeIfKnown();\n-        splitSizes += lastSplitSize;\n-\n-        assertEquals(splitSizes, array.length);\n-\n-        List<Double> contentOfLastSplit = new ArrayList<>();\n-        spliterator.forEachRemaining((DoubleConsumer) contentOfLastSplit::add);\n-\n-        assertEquals(contentOfLastSplit.size(), lastSplitSize);\n-\n-        List<Double> end = Arrays.stream(array)\n-                .boxed()\n-                .skip(array.length - lastSplitSize)\n-                .collect(Collectors.toList());\n-        assertEquals(contentOfLastSplit, end);\n-    }\n-\n-    @Test(groups = { \"serialization-hostile\" })\n-    public void testDoubleSpinedBuffer() {\n-        List<Double> list1 = new ArrayList<>();\n-        List<Double> list2 = new ArrayList<>();\n-        SpinedBuffer.OfDouble sb = new SpinedBuffer.OfDouble();\n-        for (long i = 0; i < TEST_SIZE; i++) {\n-            list1.add((double) i);\n-            sb.accept((double) i);\n-        }\n-        PrimitiveIterator.OfDouble it = sb.iterator();\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            list2.add(it.nextDouble());\n-        assertFalse(it.hasNext());\n-        assertEquals(list1, list2);\n-\n-        for (int i = 0; i < TEST_SIZE; i++)\n-            assertEquals(sb.get(i), (double) i, Double.toString(i));\n-\n-        list2.clear();\n-        sb.forEach((double i) -> list2.add(i));\n-        assertEquals(list1, list2);\n-        double[] array = sb.asPrimitiveArray();\n-        list2.clear();\n-        for (double i : array)\n-            list2.add(i);\n-        assertEquals(list1, list2);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/stream\/boottest\/java.base\/java\/util\/stream\/SpinedBufferTest.java","additions":0,"deletions":370,"binary":false,"changes":370,"status":"deleted"}]}