{"files":[{"patch":"@@ -275,1 +275,1 @@\n-        \/** The number of scopes that share this scope's hash table.\n+        \/** true if this scope's hash table is shared with a nested scope.\n@@ -277,1 +277,1 @@\n-        private int shared;\n+        private boolean shared;\n@@ -342,0 +342,2 @@\n+            Assert.check(!shared);\n+\n@@ -343,1 +345,1 @@\n-            shared++;\n+            shared = true;\n@@ -354,1 +356,1 @@\n-            if (shared > 0) {\n+            if (shared) {\n@@ -386,1 +388,1 @@\n-            Assert.check(shared == 0);\n+            Assert.check(!shared);\n@@ -395,2 +397,2 @@\n-            Assert.check(next.shared > 0);\n-            next.shared--;\n+            Assert.check(next.shared);\n+            next.shared = false;\n@@ -406,1 +408,1 @@\n-            Assert.check(shared == 0);\n+            Assert.check(!shared);\n@@ -411,1 +413,1 @@\n-                    Assert.check(s == this || s.shared != 0);\n+                    Assert.check(s == this || s.shared);\n@@ -432,1 +434,1 @@\n-            Assert.check(shared == 0);\n+            Assert.check(!shared);\n@@ -452,1 +454,1 @@\n-            Assert.check(shared == 0);\n+            Assert.check(!shared);\n@@ -490,1 +492,1 @@\n-            Assert.check(shared == 0);\n+            Assert.check(!shared);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Scope.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1764,1 +1764,1 @@\n-                            Env<AttrContext> bodyEnv = bindingEnv(env, matchBindings.bindingsWhenTrue);\n+                            Env<AttrContext> bodyEnv = bindingEnv(switchEnv, matchBindings.bindingsWhenTrue);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8292756\n+ * @summary Verify the Scope can be safely and correctly resized to accommodate pattern binding variables\n+ *          when the Scope for a guard is constructed.\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build combo.ComboTestHelper\n+ * @compile ScopeResizeTest.java\n+ * @run main ScopeResizeTest\n+ *\/\n+\n+import combo.ComboInstance;\n+import combo.ComboParameter;\n+import combo.ComboTask;\n+import combo.ComboTestHelper;\n+import java.util.stream.Stream;\n+import toolbox.ToolBox;\n+\n+public class ScopeResizeTest extends ComboInstance<ScopeResizeTest> {\n+    protected ToolBox tb;\n+\n+    ScopeResizeTest() {\n+        super();\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        int variantsSize = 17;\n+        PredefinedVariables[] variants = Stream.iterate(0, i -> i + 1)\n+                                               .limit(variantsSize)\n+                                               .map(s -> new PredefinedVariables(s))\n+                                               .toArray(s -> new PredefinedVariables[s]);\n+        new ComboTestHelper<ScopeResizeTest>()\n+                .withDimension(\"PREDEFINED_VARIABLES\", (x, predefinedVariables) -> x.predefinedVariables = predefinedVariables, variants)\n+                .run(ScopeResizeTest::new);\n+    }\n+\n+    private PredefinedVariables predefinedVariables;\n+\n+    private static final String MAIN_TEMPLATE =\n+            \"\"\"\n+            public class Test {\n+                public static void test(Object o) {\n+                    #{PREDEFINED_VARIABLES}\n+                    switch (o) {\n+                        case String s when s.isEmpty() -> {}\n+                        default -> {}\n+                    }\n+                }\n+            }\n+            \"\"\";\n+\n+    @Override\n+    protected void doWork() throws Throwable {\n+        ComboTask task = newCompilationTask()\n+                .withSourceFromTemplate(MAIN_TEMPLATE, pname -> switch (pname) {\n+                        case \"PREDEFINED_VARIABLES\" -> predefinedVariables;\n+                        default -> throw new UnsupportedOperationException(pname);\n+                    });\n+\n+        task.analyze(result -> {});\n+    }\n+\n+    public record PredefinedVariables(int size) implements ComboParameter {\n+        @Override\n+        public String expand(String optParameter) {\n+            StringBuilder variables = new StringBuilder();\n+            for (int i = 0; i < size(); i++) {\n+                variables.append(\"int i\" + i + \";\\n\");\n+            }\n+            return variables.toString();\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/ScopeResizeTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}