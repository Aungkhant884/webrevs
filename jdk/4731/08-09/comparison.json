{"files":[{"patch":"@@ -43,3 +43,0 @@\n-#if INCLUDE_MANAGEMENT\n-#include \"services\/finalizerService.hpp\"\n-#endif\n@@ -355,9 +352,0 @@\n-#if INCLUDE_MANAGEMENT\n-static void on_enqueue(const DiscoveredListIterator& iter) {\n-  oop referent = iter.referent();\n-  if (referent != NULL) {\n-    FinalizerService::on_enqueue(referent);\n-  }\n-}\n-#endif\n-\n@@ -376,0 +364,1 @@\n+\n@@ -377,1 +366,0 @@\n-    MANAGEMENT_ONLY(on_enqueue(iter);)\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1084,6 +1084,5 @@\n-  <Event name=\"Finalizer\" category=\"Java Application\" label=\"Finalizer\" thread=\"false\" startTime=\"false\" period=\"endChunk\">\n-    <Field type=\"Class\" name=\"overridingClass\" label=\"Class Overriding Finalize\" \/>\n-    <Field type=\"Symbol\" name=\"codeSource\" label=\"Code Source\" description=\"The URL from where the class was loaded\" \/>\n-    <Field type=\"ulong\" name=\"registered\" label=\"Registered\" description=\"Number of objects registered for finalization\" \/>\n-    <Field type=\"ulong\" name=\"enqueued\" label=\"Enqueued\" description=\"Number of objects enqueued for finalization by the GC\" \/>\n-    <Field type=\"ulong\" name=\"finalized\" label=\"Finalized\" description=\"Number of objects finalized\" \/>\n+  <Event name=\"FinalizerStatistics\" category=\"Java Application, Statistics\" label=\"Finalizer Statistics\" description=\"Per class statistics about finalizers\" thread=\"false\" startTime=\"false\" period=\"endChunk\">\n+    <Field type=\"Class\" name=\"finalizableClass\" label=\"Class Overriding Finalize\" \/>\n+    <Field type=\"Symbol\" name=\"codeSource\" label=\"Code Source\" description=\"URL from where class was loaded\" \/>\n+    <Field type=\"ulong\" name=\"objects\" label=\"Finalizable Objects on Heap\" description=\"Number of objects on heap that can be finalized\" \/>\n+    <Field type=\"ulong\" name=\"totalFinalizersRun\" label=\"Finalizers Run\" description=\"Total number of finalizers run since JVM start\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#if INCLUDE_MANAGEMENT\n-#include \"classfile\/classLoaderDataGraph.hpp\"\n-#include \"classfile\/javaClasses.inline.hpp\"\n-#include \"jfr\/jfrEvents.hpp\"\n-#include \"jfr\/jni\/jfrJavaSupport.hpp\"\n-#include \"jfr\/periodic\/jfrFinalizerEvent.hpp\"\n-#include \"jfr\/support\/jfrSymbolTable.hpp\"\n-#include \"jfr\/utilities\/jfrTime.hpp\"\n-#include \"jfr\/utilities\/jfrTypes.hpp\"\n-#include \"oops\/instanceKlass.inline.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"runtime\/thread.inline.hpp\"\n-#include \"services\/finalizerService.hpp\"\n-\n-static oop get_codesource(oop pd, Thread* thread) {\n-  assert(pd != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  JavaValue result(T_OBJECT);\n-  JfrJavaArguments args(&result);\n-  args.set_klass(pd->klass());\n-  args.set_name(\"codesource\");\n-  args.set_signature(\"Ljava\/security\/CodeSource;\");\n-  args.set_receiver(pd);\n-  JfrJavaSupport::get_field(&args, thread);\n-  return result.get_oop();\n-}\n-\n-\/\/ Caller needs ResourceMark\n-static const char* get_locationNoFragString(oop codesource, Thread* thread) {\n-  assert(codesource != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  JavaValue result(T_OBJECT);\n-  JfrJavaArguments args(&result);\n-  args.set_klass(codesource->klass());\n-  args.set_name(\"locationNoFragString\");\n-  args.set_signature(\"Ljava\/lang\/String;\");\n-  args.set_receiver(codesource);\n-  JfrJavaSupport::get_field(&args, thread);\n-  const oop string_oop = result.get_oop();\n-  return string_oop != NULL ? JfrJavaSupport::c_str(string_oop, thread) : NULL;\n-}\n-\n-\/\/ Caller needs ResourceMark\n-static const char* codesource(const InstanceKlass* ik, Thread* thread) {\n-  assert(ik != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  oop pd = java_lang_Class::protection_domain(ik->java_mirror());\n-  if (pd == NULL) {\n-    return NULL;\n-  }\n-  oop codesource = get_codesource(pd, thread);\n-  return codesource != NULL ? get_locationNoFragString(codesource, thread) : NULL;\n-}\n-\n-static void send_event(const FinalizerEntry* fe, const InstanceKlass* ik, const JfrTicks& timestamp, Thread* thread) {\n-  assert(ik != NULL, \"invariant\");\n-  assert(ik->has_finalizer(), \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  const char* const url = codesource(ik, thread);\n-  const traceid codesource_symbol_id = url != NULL ? JfrSymbolTable::add(url) : 0;\n-  EventFinalizer event(UNTIMED);\n-  event.set_endtime(timestamp);\n-  event.set_overridingClass(ik);\n-  event.set_codeSource(codesource_symbol_id);\n-  if (fe == NULL) {\n-    event.set_registered(0);\n-    event.set_enqueued(0);\n-    event.set_finalized(0);\n-  } else {\n-    assert(fe->klass() == ik, \"invariant\");\n-    event.set_registered(fe->registered());\n-    event.set_enqueued(fe->enqueued());\n-    event.set_finalized(fe->finalized());\n-  }\n-  event.commit();\n-}\n-\n-void JfrFinalizerEvent::send_unload_event(const InstanceKlass* ik) {\n-  assert(ik != NULL, \"invariant\");\n-  assert(ik->has_finalizer(), \"invariant\");\n-  Thread* const thread = Thread::current();\n-  ResourceMark rm(thread);\n-  send_event(FinalizerService::lookup(ik, thread), ik, JfrTicks::now(), thread);\n-}\n-\n-\/\/ Finalizer events generated by the periodic task thread\n-\/\/ during the same pass will all have the same timestamp.\n-\n-class FinalizerEventClosure : public FinalizerEntryClosure {\n- private:\n-  Thread* _thread;\n-  const JfrTicks _timestamp;\n- public:\n-  FinalizerEventClosure(Thread* thread) : _thread(thread), _timestamp(JfrTicks::now()) {}\n-  virtual bool do_entry(const FinalizerEntry* fe) {\n-    assert(fe != NULL, \"invariant\");\n-    send_event(fe, fe->klass(), _timestamp, _thread);\n-    return true;\n-  }\n-};\n-\n-void JfrFinalizerEvent::generate_events() {\n-  Thread* const thread = Thread::current();\n-  ResourceMark rm(thread);\n-  FinalizerEventClosure fec(thread);\n-  MutexLocker lock(ClassLoaderDataGraph_lock);\n-  FinalizerService::do_entries(&fec, thread);\n-}\n-\n-#endif \/\/ INCLUDE_MANAGEMENT\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerEvent.cpp","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n-#define SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-class InstanceKlass;\n-\n-class JfrFinalizerEvent : AllStatic {\n- public:\n-  static void send_unload_event(const InstanceKlass* ik) NOT_MANAGEMENT_RETURN;\n-  static void generate_events() NOT_MANAGEMENT_RETURN;\n-};\n-\n-#endif \/\/ SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerEvent.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#if INCLUDE_MANAGEMENT\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"jfr\/jfrEvents.hpp\"\n+#include \"jfr\/jni\/jfrJavaSupport.hpp\"\n+#include \"jfr\/periodic\/jfrFinalizerStatisticsEvent.hpp\"\n+#include \"jfr\/support\/jfrSymbolTable.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n+#include \"jfr\/utilities\/jfrTypes.hpp\"\n+#include \"oops\/instanceKlass.inline.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n+#include \"services\/finalizerService.hpp\"\n+\n+static oop get_codesource(oop pd, Thread* thread) {\n+  assert(pd != NULL, \"invariant\");\n+  assert(thread != NULL, \"invariant\");\n+  JavaValue result(T_OBJECT);\n+  JfrJavaArguments args(&result);\n+  args.set_klass(pd->klass());\n+  args.set_name(\"codesource\");\n+  args.set_signature(\"Ljava\/security\/CodeSource;\");\n+  args.set_receiver(pd);\n+  JfrJavaSupport::get_field(&args, thread);\n+  return result.get_oop();\n+}\n+\n+\/\/ Caller needs ResourceMark\n+static const char* get_locationNoFragString(oop codesource, Thread* thread) {\n+  assert(codesource != NULL, \"invariant\");\n+  assert(thread != NULL, \"invariant\");\n+  JavaValue result(T_OBJECT);\n+  JfrJavaArguments args(&result);\n+  args.set_klass(codesource->klass());\n+  args.set_name(\"locationNoFragString\");\n+  args.set_signature(\"Ljava\/lang\/String;\");\n+  args.set_receiver(codesource);\n+  JfrJavaSupport::get_field(&args, thread);\n+  const oop string_oop = result.get_oop();\n+  return string_oop != NULL ? JfrJavaSupport::c_str(string_oop, thread) : NULL;\n+}\n+\n+\/\/ Caller needs ResourceMark\n+static const char* codesource(const InstanceKlass* ik, Thread* thread) {\n+  assert(ik != NULL, \"invariant\");\n+  assert(thread != NULL, \"invariant\");\n+  oop pd = java_lang_Class::protection_domain(ik->java_mirror());\n+  if (pd == NULL) {\n+    return NULL;\n+  }\n+  oop codesource = get_codesource(pd, thread);\n+  return codesource != NULL ? get_locationNoFragString(codesource, thread) : NULL;\n+}\n+\n+static void send_event(const FinalizerEntry* fe, const InstanceKlass* ik, const JfrTicks& timestamp, Thread* thread) {\n+  assert(ik != NULL, \"invariant\");\n+  assert(ik->has_finalizer(), \"invariant\");\n+  assert(thread != NULL, \"invariant\");\n+  const char* const url = codesource(ik, thread);\n+  const traceid url_symbol_id = url != NULL ? JfrSymbolTable::add(url) : 0;\n+  EventFinalizerStatistics event(UNTIMED);\n+  event.set_endtime(timestamp);\n+  event.set_finalizableClass(ik);\n+  event.set_codeSource(url_symbol_id);\n+  if (fe == NULL) {\n+    event.set_objects(0);\n+    event.set_totalFinalizersRun(0);\n+  } else {\n+    assert(fe->klass() == ik, \"invariant\");\n+    event.set_objects(fe->objects_on_heap());\n+    event.set_totalFinalizersRun(fe->total_finalizers_run());\n+  }\n+  event.commit();\n+}\n+\n+void JfrFinalizerStatisticsEvent::send_unload_event(const InstanceKlass* ik) {\n+  Thread* const thread = Thread::current();\n+  ResourceMark rm(thread);\n+  send_event(FinalizerService::lookup(ik, thread), ik, JfrTicks::now(), thread);\n+}\n+\n+\/\/ Finalizer events generated by the periodic task will all have the same timestamp.\n+\n+class FinalizerStatisticsEventClosure : public FinalizerEntryClosure {\n+ private:\n+  Thread* _thread;\n+  const JfrTicks _timestamp;\n+ public:\n+  FinalizerStatisticsEventClosure(Thread* thread) : _thread(thread), _timestamp(JfrTicks::now()) {}\n+  virtual bool do_entry(const FinalizerEntry* fe) {\n+    assert(fe != NULL, \"invariant\");\n+    send_event(fe, fe->klass(), _timestamp, _thread);\n+    return true;\n+  }\n+};\n+\n+void JfrFinalizerStatisticsEvent::generate_events() {\n+  Thread* const thread = Thread::current();\n+  ResourceMark rm(thread);\n+  FinalizerStatisticsEventClosure fsec(thread);\n+  MutexLocker lock(ClassLoaderDataGraph_lock); \/\/ To prevent entries from being removed by class unloading.\n+  FinalizerService::do_entries(&fsec, thread);\n+}\n+\n+#endif \/\/ INCLUDE_MANAGEMENT\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerStatisticsEvent.cpp","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_PERIODIC_JFRFINALIZERSTATISTICSEVENT_HPP\n+#define SHARE_JFR_PERIODIC_JFRFINALIZERSTATISTICSEVENT_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class InstanceKlass;\n+\n+class JfrFinalizerStatisticsEvent : AllStatic {\n+ public:\n+  static void send_unload_event(const InstanceKlass* ik) NOT_MANAGEMENT_RETURN;\n+  static void generate_events() NOT_MANAGEMENT_RETURN;\n+};\n+\n+#endif \/\/ SHARE_JFR_PERIODIC_JFRFINALIZERSTATISTICSEVENT_HPP\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerStatisticsEvent.hpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -40,1 +40,1 @@\n-#include \"jfr\/periodic\/jfrFinalizerEvent.hpp\"\n+#include \"jfr\/periodic\/jfrFinalizerStatisticsEvent.hpp\"\n@@ -476,0 +476,1 @@\n+#if INCLUDE_MANAGEMENT\n@@ -480,0 +481,3 @@\n+#else\n+  log_debug(jfr, system)(\"Unable to generate requestable event ClassLoadingStatistics. The required jvm feature 'management' is missing.\");\n+#endif\n@@ -648,1 +652,1 @@\n-TRACE_REQUEST_FUNC(Finalizer) {\n+TRACE_REQUEST_FUNC(FinalizerStatistics) {\n@@ -650,1 +654,1 @@\n-  JfrFinalizerEvent::generate_events();\n+  JfrFinalizerStatisticsEvent::generate_events();\n@@ -652,1 +656,1 @@\n-  log_debug(jfr, system)(\"Unable to generate requestable event Finalizer. The required jvm feature 'management' is missing.\");\n+  log_debug(jfr, system)(\"Unable to generate requestable event FinalizerStatistics. The required jvm feature 'management' is missing.\");\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"jfr\/periodic\/jfrFinalizerEvent.hpp\"\n+#include \"jfr\/periodic\/jfrFinalizerStatisticsEvent.hpp\"\n@@ -119,1 +119,1 @@\n-    JfrFinalizerEvent::send_unload_event(ik);\n+    JfrFinalizerStatisticsEvent::send_unload_event(ik);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrKlassUnloading.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -595,1 +595,1 @@\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_REQUEST_FINALIZER_TABLE_REHASH)) {\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_REQUEST_FINALIZERSERVICE_TABLE_REHASH)) {\n@@ -597,1 +597,1 @@\n-        Tracer t(\"rehashing finalizer table\");\n+        Tracer t(\"rehashing finalizerservice table\");\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    SAFEPOINT_CLEANUP_REQUEST_FINALIZER_TABLE_REHASH,\n+    SAFEPOINT_CLEANUP_REQUEST_FINALIZERSERVICE_TABLE_REHASH,\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#if INCLUDE_MANAGEMENT\n@@ -78,2 +79,0 @@\n-#if INCLUDE_MANAGEMENT\n-\n","filename":"src\/hotspot\/share\/services\/classLoadingService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,13 +43,2 @@\n-    _registered(0),\n-    _enqueued(0),\n-    _finalized(0) {}\n-\n-static inline void atomic_inc(uint64_t* volatile dest) {\n-  assert(VM_Version::supports_cx8(), \"invariant\");\n-  uint64_t compare;\n-  uint64_t exchange;\n-  do {\n-    compare = *dest;\n-    exchange = compare + 1;\n-  } while (Atomic::cmpxchg(dest, compare, exchange) != compare);\n-}\n+    _objects_on_heap(0),\n+    _total_finalizers_run(0) {}\n@@ -61,2 +50,2 @@\n-uint64_t FinalizerEntry::registered() const {\n-  return Atomic::load(&_registered);\n+uint64_t FinalizerEntry::objects_on_heap() const {\n+  return Atomic::load(&_objects_on_heap);\n@@ -65,2 +54,2 @@\n-uint64_t FinalizerEntry::enqueued() const {\n-  return Atomic::load(&_enqueued);\n+uint64_t FinalizerEntry::total_finalizers_run() const {\n+  return Atomic::load(&_total_finalizers_run);\n@@ -69,2 +58,13 @@\n-uint64_t FinalizerEntry::finalized() const {\n-  return Atomic::load(&_finalized);\n+template <uint64_t op(uint64_t)>\n+static inline void set_atomic(volatile uint64_t* volatile dest) {\n+  assert(VM_Version::supports_cx8(), \"invariant\");\n+  uint64_t compare;\n+  uint64_t exchange;\n+  do {\n+    compare = *dest;\n+    exchange = op(compare);\n+  } while (Atomic::cmpxchg(dest, compare, exchange) != compare);\n+}\n+\n+static inline uint64_t inc(uint64_t value) {\n+  return value + 1;\n@@ -74,1 +74,1 @@\n-  atomic_inc(&_registered);\n+  set_atomic<inc>(&_objects_on_heap);\n@@ -77,2 +77,3 @@\n-void FinalizerEntry::on_enqueue() {\n-  atomic_inc(&_enqueued);\n+static inline uint64_t dec(uint64_t value) {\n+  assert(value > 0, \"invariant\");\n+  return value - 1;\n@@ -82,1 +83,2 @@\n-  atomic_inc(&_finalized);\n+  set_atomic<inc>(&_total_finalizers_run);\n+  set_atomic<dec>(&_objects_on_heap);\n@@ -112,1 +114,1 @@\n-  Atomic::inc(&_count);\n+  set_atomic<inc>(&_count);\n@@ -116,1 +118,1 @@\n-  Atomic::dec(&_count);\n+  set_atomic<dec>(&_count);\n@@ -160,1 +162,1 @@\n-typedef ConcurrentHashTable<FinalizerTableConfig, mtClass> FinalizerHashtable;\n+typedef ConcurrentHashTable<FinalizerTableConfig, mtStatistics> FinalizerHashtable;\n@@ -433,16 +435,0 @@\n-\/\/ Can't use FastHashCode for object identification here.\n-static void log_enqueued(oop finalizee, Thread* thread) {\n-  ResourceMark rm(thread);\n-  log_debug(finalizer)(\"Enqueued an object of class %s for finalization\", finalizee->klass()->external_name());\n-}\n-\n-void FinalizerService::on_enqueue(oop finalizee) {\n-  Thread* const thread = Thread::current();\n-  FinalizerEntry* const fe = get_entry(finalizee, thread);\n-  assert(fe != nullptr, \"invariant\");\n-  fe->on_enqueue();\n-  if (log_is_enabled(Debug, finalizer)) {\n-    log_enqueued(finalizee, thread);\n-  }\n-}\n-\n@@ -452,1 +438,1 @@\n-  log_info(finalizer)(\"Finalization complete for object (\" INTPTR_FORMAT \") of class %s\", identity_hash, finalizee->klass()->external_name());\n+  log_info(finalizer)(\"Finalizer was run for object (\" INTPTR_FORMAT \") of class %s\", identity_hash, finalizee->klass()->external_name());\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":29,"deletions":43,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class FinalizerEntry : public CHeapObj<mtClass> {\n+class FinalizerEntry : public CHeapObj<mtStatistics> {\n@@ -38,3 +38,2 @@\n-  uint64_t _registered;\n-  uint64_t _enqueued;\n-  uint64_t _finalized;\n+  uint64_t _objects_on_heap;\n+  uint64_t _total_finalizers_run;\n@@ -44,3 +43,2 @@\n-  uint64_t registered() const NOT_MANAGEMENT_RETURN_(0L);\n-  uint64_t enqueued() const NOT_MANAGEMENT_RETURN_(0L);\n-  uint64_t finalized() const NOT_MANAGEMENT_RETURN_(0L);\n+  uint64_t objects_on_heap() const NOT_MANAGEMENT_RETURN_(0L);\n+  uint64_t total_finalizers_run() const NOT_MANAGEMENT_RETURN_(0L);\n@@ -48,1 +46,0 @@\n-  void on_enqueue() NOT_MANAGEMENT_RETURN;\n@@ -58,0 +55,1 @@\n+  friend class ParallelSPCleanupTask;\n@@ -60,0 +58,2 @@\n+  static void rehash() NOT_MANAGEMENT_RETURN;\n+  static bool needs_rehashing() NOT_MANAGEMENT_RETURN_(false);\n@@ -61,1 +61,1 @@\n-  static void do_concurrent_work(JavaThread* service_thread) NOT_MANAGEMENT_RETURN;;\n+  static void do_concurrent_work(JavaThread* service_thread) NOT_MANAGEMENT_RETURN;\n@@ -64,2 +64,0 @@\n-  static void rehash() NOT_MANAGEMENT_RETURN;\n-  static bool needs_rehashing() NOT_MANAGEMENT_RETURN_(false);\n@@ -68,1 +66,0 @@\n-  static void on_enqueue(oop finalizee) NOT_MANAGEMENT_RETURN;\n","filename":"src\/hotspot\/share\/services\/finalizerService.hpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -810,1 +810,1 @@\n-    <event name=\"jdk.Finalizer\">\n+    <event name=\"jdk.FinalizerStatistics\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -810,1 +810,1 @@\n-    <event name=\"jdk.Finalizer\">\n+    <event name=\"jdk.FinalizerStatistics\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @run main\/othervm -Xlog:class+unload,finalizer -Xmx16m jdk.jfr.event.runtime.TestFinalizerEvent\n+ * @run main\/othervm -Xlog:class+unload,finalizer -Xmx16m jdk.jfr.event.runtime.TestFinalizerStatisticsEvent\n@@ -44,4 +44,4 @@\n-public final class TestFinalizerEvent {\n-    private final static String TEST_CLASS_NAME = \"jdk.jfr.event.runtime.TestFinalizerEvent$TestClassOverridingFinalize\";\n-    private final static String TEST_CLASS_UNLOAD_NAME = \"jdk.jfr.event.runtime.TestFinalizerEvent$TestClassUnloadOverridingFinalize\";\n-    private final static String EVENT_PATH = EventNames.Finalizer;\n+public final class TestFinalizerStatisticsEvent {\n+    private final static String TEST_CLASS_NAME = \"jdk.jfr.event.runtime.TestFinalizerStatisticsEvent$TestClassOverridingFinalize\";\n+    private final static String TEST_CLASS_UNLOAD_NAME = \"jdk.jfr.event.runtime.TestFinalizerStatisticsEvent$TestClassUnloadOverridingFinalize\";\n+    private final static String EVENT_PATH = EventNames.FinalizerStatistics;\n@@ -94,1 +94,1 @@\n-          RecordedClass overridingClass = event.getValue(\"overridingClass\");\n+          RecordedClass overridingClass = event.getValue(\"finalizableClass\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestFinalizerStatisticsEvent.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestFinalizerEvent.java","status":"renamed"},{"patch":"@@ -91,1 +91,1 @@\n-    public static final String Finalizer = PREFIX + \"Finalizer\";\n+    public static final String FinalizerStatistics = PREFIX + \"FinalizerStatistics\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}