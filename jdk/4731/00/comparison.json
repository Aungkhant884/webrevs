{"files":[{"patch":"@@ -1084,0 +1084,4 @@\n+  <Event name=\"Finalizer\" category=\"Java Application\" label=\"Finalizer\" thread=\"false\" startTime=\"false\" period=\"endChunk\">\n+    <Field type=\"Class\" name=\"overridingClass\" label=\"Class Overriding Finalize\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n+#include \"jfr\/jfrEvents.hpp\"\n+#include \"jfr\/periodic\/jfrFinalizerEvent.hpp\"\n+#include \"jfr\/utilities\/jfrTime.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+\n+\/\/ All finalizer events generated during the same pass will have the same timestamp.\n+static JfrTicks invocation_time;\n+\n+static void finalizer_event_callback(Klass* klass) {\n+  assert(klass != NULL, \"invariant\");\n+  if (!klass->is_instance_klass()) {\n+    return;\n+  }\n+  InstanceKlass* const ik = InstanceKlass::cast(klass);\n+  if (ik->has_finalizer()) {\n+    EventFinalizer event(UNTIMED);\n+    event.set_endtime(invocation_time);\n+    event.set_overridingClass(ik);\n+    event.commit();\n+  }\n+}\n+\n+void JfrFinalizerEvent::generate_events() {\n+  invocation_time = JfrTicks::now();\n+  MutexLocker cld_lock(ClassLoaderDataGraph_lock);\n+  ClassLoaderDataGraph::classes_do(&finalizer_event_callback);\n+}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerEvent.cpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n+#define SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class JfrFinalizerEvent : AllStatic {\n+ public:\n+  static void generate_events();\n+};\n+\n+#endif \/\/ SHARE_JFR_PERIODIC_JFRFINALIZEREVENT_HPP\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerEvent.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"jfr\/periodic\/jfrFinalizerEvent.hpp\"\n@@ -638,1 +639,0 @@\n-\n@@ -647,0 +647,4 @@\n+\n+TRACE_REQUEST_FUNC(Finalizer) {\n+  JfrFinalizerEvent::generate_events();\n+}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n@@ -110,0 +111,12 @@\n+static void send_finalizer_event(const Klass* k) {\n+  if (!k->is_instance_klass()) {\n+    return;\n+  }\n+  const InstanceKlass* const ik = InstanceKlass::cast(k);\n+  if (ik->has_finalizer()) {\n+    EventFinalizer event;\n+    event.set_overridingClass(ik);\n+    event.commit();\n+  }\n+}\n+\n@@ -113,0 +126,1 @@\n+  send_finalizer_event(k);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrKlassUnloading.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -810,0 +810,5 @@\n+    <event name=\"jdk.Finalizer\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">endChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -810,0 +810,5 @@\n+    <event name=\"jdk.Finalizer\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">endChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedClass;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.jfr.TestClassLoader;\n+\n+\/**\n+ * @test\n+ * @summary The test verifies that classes overriding finalize(), loaded as well as unloaded, are represented as events.\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -Xlog:class+unload -Xlog:gc -Xmx16m jdk.jfr.event.runtime.TestFinalizerEvent\n+ *\/\n+\n+public final class TestFinalizerEvent {\n+    private final static String TEST_CLASS_NAME = \"jdk.jfr.event.runtime.TestFinalizerEvent$TestClassOverridingFinalize\";\n+    private final static String TEST_CLASS_UNLOAD_NAME = \"jdk.jfr.event.runtime.TestFinalizerEvent$TestClassUnloadOverridingFinalize\";\n+    private final static String EVENT_PATH = EventNames.Finalizer;\n+\n+    \/\/ Declare unloadableClassLoader as \"public static\"\n+    \/\/ to prevent the compiler to optimize away all unread writes\n+    public static TestClassLoader unloadableClassLoader;\n+\n+    public static void main(String[] args) throws Throwable {\n+        Recording recording1 = new Recording();\n+        recording1.enable(EVENT_PATH);\n+        Recording recording2 = new Recording();\n+        recording2.enable(EVENT_PATH);\n+        TestClassLoader cl = new TestClassLoader();\n+        unloadableClassLoader = new TestClassLoader();\n+\n+        recording1.start();\n+        cl.loadClass(TEST_CLASS_NAME);\n+        recording2.start(); \/\/ rotation writes an event for TEST_CLASS_NAME into recording1\n+        unloadableClassLoader.loadClass(TEST_CLASS_UNLOAD_NAME);\n+        unloadableClassLoader = null;\n+        System.gc(); \/\/ the unloading of class TEST_CLASS_UNLOAD_NAME is intercepted and an event is written into both recording1 and recording2\n+\n+        recording2.stop(); \/\/ rotation writes an event for TEST_CLASS_NAME into both recording1 and recording2\n+        recording1.stop(); \/\/ rotation writes an event for TEST_CLASS_NAME into recording1 which now has 4 events reflecting this test case (3 chunks + 1 unload)\n+\n+        try {\n+            verify(recording2);\n+            verify(recording1);\n+        }\n+        finally {\n+            recording2.close();\n+            recording1.close();\n+        }\n+    }\n+\n+    private static void verify(Recording recording) throws Throwable {\n+        boolean foundTestClassName = false;\n+        boolean foundTestClassUnloadName = false;\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        Events.hasEvents(events);\n+        for (RecordedEvent event : events) {\n+          System.out.println(\"Event:\" + event);\n+          RecordedClass overridingClass = event.getValue(\"overridingClass\");\n+          switch (overridingClass.getName()) {\n+              case TEST_CLASS_NAME: {\n+                  foundTestClassName = true;\n+                  break;\n+              }\n+              case TEST_CLASS_UNLOAD_NAME: {\n+                  foundTestClassUnloadName = true;\n+                  break;\n+              }\n+          }\n+          if (foundTestClassName && foundTestClassUnloadName) {\n+              break;\n+          }\n+        }\n+        Asserts.assertTrue(foundTestClassName, \"The class: \" + TEST_CLASS_NAME + \" overriding finalize() is not found\");\n+        Asserts.assertTrue(foundTestClassUnloadName, \"The class: \" + TEST_CLASS_UNLOAD_NAME + \" overriding finalize() is not found\");\n+    }\n+\n+    static class TestClassOverridingFinalize {\n+        public boolean finalized = false;\n+\n+        @Override\n+        protected void finalize() {\n+            finalized = true;\n+        }\n+    }\n+\n+    static class TestClassUnloadOverridingFinalize {\n+        public boolean finalized = false;\n+\n+        @Override\n+        protected void finalize() {\n+            finalized = true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestFinalizerEvent.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -91,0 +91,1 @@\n+    public static final String Finalizer = PREFIX + \"Finalizer\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}