{"files":[{"patch":"@@ -1086,1 +1086,1 @@\n-    <Field type=\"Symbol\" name=\"codeSource\" label=\"Code Source\" description=\"URL from where class was loaded\" \/>\n+    <Field type=\"Symbol\" name=\"codeSource\" label=\"Code Source\" description=\"URL from where the class was loaded\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-typedef const JfrSymbolTable::CStringEntry* CStringEntryPtr;\n+typedef const JfrSymbolTable::StringEntry* StringEntryPtr;\n@@ -923,1 +923,1 @@\n-void set_serialized<JfrSymbolTable::CStringEntry>(CStringEntryPtr ptr) {\n+void set_serialized<JfrSymbolTable::StringEntry>(StringEntryPtr ptr) {\n@@ -951,1 +951,1 @@\n-static int write_cstring(JfrCheckpointWriter* writer, CStringEntryPtr entry, bool leakp) {\n+static int write_string(JfrCheckpointWriter* writer, StringEntryPtr entry, bool leakp) {\n@@ -959,1 +959,1 @@\n-int write__cstring(JfrCheckpointWriter* writer, const void* e) {\n+int write__string(JfrCheckpointWriter* writer, const void* e) {\n@@ -961,1 +961,1 @@\n-  CStringEntryPtr entry = (CStringEntryPtr)e;\n+  StringEntryPtr entry = (StringEntryPtr)e;\n@@ -963,1 +963,1 @@\n-  return write_cstring(writer, entry, false);\n+  return write_string(writer, entry, false);\n@@ -966,1 +966,1 @@\n-int write__cstring__leakp(JfrCheckpointWriter* writer, const void* e) {\n+int write__string__leakp(JfrCheckpointWriter* writer, const void* e) {\n@@ -968,2 +968,2 @@\n-  CStringEntryPtr entry = (CStringEntryPtr)e;\n-  return write_cstring(writer, entry, true);\n+  StringEntryPtr entry = (StringEntryPtr)e;\n+  return write_string(writer, entry, true);\n@@ -975,3 +975,3 @@\n-typedef SymbolPredicate<CStringEntryPtr, false> CStringPredicate;\n-typedef JfrPredicatedTypeWriterImplHost<CStringEntryPtr, CStringPredicate, write__cstring> CStringEntryWriterImpl;\n-typedef JfrTypeWriterHost<CStringEntryWriterImpl, TYPE_SYMBOL> CStringEntryWriter;\n+typedef SymbolPredicate<StringEntryPtr, false> StringPredicate;\n+typedef JfrPredicatedTypeWriterImplHost<StringEntryPtr, StringPredicate, write__string> StringEntryWriterImpl;\n+typedef JfrTypeWriterHost<StringEntryWriterImpl, TYPE_SYMBOL> StringEntryWriter;\n@@ -983,4 +983,4 @@\n-typedef SymbolPredicate<CStringEntryPtr, true> LeakCStringPredicate;\n-typedef JfrPredicatedTypeWriterImplHost<CStringEntryPtr, LeakCStringPredicate, write__cstring__leakp> LeakCStringEntryWriterImpl;\n-typedef JfrTypeWriterHost<LeakCStringEntryWriterImpl, TYPE_SYMBOL> LeakCStringEntryWriter;\n-typedef CompositeFunctor<CStringEntryPtr, LeakCStringEntryWriter, CStringEntryWriter> CompositeCStringWriter;\n+typedef SymbolPredicate<StringEntryPtr, true> LeakStringPredicate;\n+typedef JfrPredicatedTypeWriterImplHost<StringEntryPtr, LeakStringPredicate, write__string__leakp> LeakStringEntryWriterImpl;\n+typedef JfrTypeWriterHost<LeakStringEntryWriterImpl, TYPE_SYMBOL> LeakStringEntryWriter;\n+typedef CompositeFunctor<StringEntryPtr, LeakStringEntryWriter, StringEntryWriter> CompositeStringWriter;\n@@ -994,6 +994,6 @@\n-  CStringEntryWriter ccsw(_writer, _class_unload, true); \/\/ skip header\n-  LeakCStringEntryWriter lccsw(_leakp_writer, _class_unload, true); \/\/ skip header\n-  CompositeCStringWriter cccsw(&lccsw, &ccsw);\n-  _artifacts->iterate_cstrings(cccsw);\n-  sw.add(ccsw.count());\n-  lsw.add(lccsw.count());\n+  StringEntryWriter sew(_writer, _class_unload, true); \/\/ skip header\n+  LeakStringEntryWriter lsew(_leakp_writer, _class_unload, true); \/\/ skip header\n+  CompositeStringWriter csew(&lsew, &sew);\n+  _artifacts->iterate_strings(csew);\n+  sw.add(sew.count());\n+  lsw.add(lsew.count());\n@@ -1011,3 +1011,3 @@\n-  CStringEntryWriter csw(_writer, _class_unload, true); \/\/ skip header\n-  _artifacts->iterate_cstrings(csw);\n-  sw.add(csw.count());\n+  StringEntryWriter sew(_writer, _class_unload, true); \/\/ skip header\n+  _artifacts->iterate_strings(sew);\n+  sw.add(sew.count());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-  const JfrSymbolTable::CStringEntry* map_cstring(uintptr_t hash) const;\n+  const JfrSymbolTable::StringEntry* map_string(uintptr_t hash) const;\n@@ -256,2 +256,2 @@\n-  void iterate_cstrings(T& functor) {\n-    _symbol_table->iterate_cstrings(functor);\n+  void iterate_strings(T& functor) {\n+    _symbol_table->iterate_strings(functor);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-static JfrSymbolTable::CStringEntry* bootstrap = NULL;\n+static JfrSymbolTable::StringEntry* bootstrap = NULL;\n@@ -75,2 +75,2 @@\n-  _symbol_table(new SymbolTable(this)),\n-  _cstring_table(new CStringTable(this)),\n+  _symbols(new Symbols(this)),\n+  _strings(new Strings(this)),\n@@ -78,1 +78,1 @@\n-  _cstring_list(NULL),\n+  _string_list(NULL),\n@@ -80,1 +80,1 @@\n-  _cstring_query(NULL),\n+  _string_query(NULL),\n@@ -83,3 +83,3 @@\n-  assert(_symbol_table != NULL, \"invariant\");\n-  assert(_cstring_table != NULL, \"invariant\");\n-  bootstrap = new CStringEntry(0, (const char*)&BOOTSTRAP_LOADER_NAME);\n+  assert(_symbols != NULL, \"invariant\");\n+  assert(_strings != NULL, \"invariant\");\n+  bootstrap = new StringEntry(0, (const char*)&BOOTSTRAP_LOADER_NAME);\n@@ -88,1 +88,1 @@\n-  _cstring_list = bootstrap;\n+  _string_list = bootstrap;\n@@ -93,2 +93,2 @@\n-  delete _symbol_table;\n-  delete _cstring_table;\n+  delete _symbols;\n+  delete _strings;\n@@ -99,3 +99,3 @@\n-  assert(_symbol_table != NULL, \"invariant\");\n-  if (_symbol_table->has_entries()) {\n-    _symbol_table->clear_entries();\n+  assert(_symbols != NULL, \"invariant\");\n+  if (_symbols->has_entries()) {\n+    _symbols->clear_entries();\n@@ -103,1 +103,1 @@\n-  assert(!_symbol_table->has_entries(), \"invariant\");\n+  assert(!_symbols->has_entries(), \"invariant\");\n@@ -105,3 +105,3 @@\n-  assert(_cstring_table != NULL, \"invariant\");\n-  if (_cstring_table->has_entries()) {\n-    _cstring_table->clear_entries();\n+  assert(_strings != NULL, \"invariant\");\n+  if (_strings->has_entries()) {\n+    _strings->clear_entries();\n@@ -109,1 +109,1 @@\n-  assert(!_cstring_table->has_entries(), \"invariant\");\n+  assert(!_strings->has_entries(), \"invariant\");\n@@ -115,1 +115,1 @@\n-  _cstring_query = NULL;\n+  _string_query = NULL;\n@@ -119,1 +119,1 @@\n-  _cstring_list = bootstrap;\n+  _string_list = bootstrap;\n@@ -158,1 +158,1 @@\n-static const char* resource_to_cstring(const char* resource_str) {\n+static const char* resource_to_c_heap_string(const char* resource_str) {\n@@ -167,1 +167,1 @@\n-void JfrSymbolTable::on_link(const CStringEntry* entry) {\n+void JfrSymbolTable::on_link(const StringEntry* entry) {\n@@ -169,3 +169,3 @@\n-  const_cast<CStringEntry*>(entry)->set_literal(resource_to_cstring(entry->literal()));\n-  entry->set_list_next(_cstring_list);\n-  _cstring_list = entry;\n+  const_cast<StringEntry*>(entry)->set_literal(resource_to_c_heap_string(entry->literal()));\n+  entry->set_list_next(_string_list);\n+  _string_list = entry;\n@@ -181,1 +181,1 @@\n-bool JfrSymbolTable::on_equals(uintptr_t hash, const CStringEntry* entry) {\n+bool JfrSymbolTable::on_equals(uintptr_t hash, const StringEntry* entry) {\n@@ -184,2 +184,2 @@\n-  assert(_cstring_query != NULL, \"invariant\");\n-  return string_compare(_cstring_query, entry->literal());\n+  assert(_string_query != NULL, \"invariant\");\n+  return string_compare(_string_query, entry->literal());\n@@ -188,1 +188,1 @@\n-void JfrSymbolTable::on_unlink(const CStringEntry* entry) {\n+void JfrSymbolTable::on_unlink(const StringEntry* entry) {\n@@ -208,1 +208,1 @@\n-  assert(_symbol_table != NULL, \"invariant\");\n+  assert(_symbols != NULL, \"invariant\");\n@@ -210,1 +210,1 @@\n-  const SymbolEntry& entry = _symbol_table->lookup_put(hash, sym);\n+  const SymbolEntry& entry = _symbols->lookup_put(hash, sym);\n@@ -226,3 +226,3 @@\n-  assert(_cstring_table != NULL, \"invariant\");\n-  _cstring_query = str;\n-  const CStringEntry& entry = _cstring_table->lookup_put(hash, str);\n+  assert(_strings != NULL, \"invariant\");\n+  _string_query = str;\n+  const StringEntry& entry = _strings->lookup_put(hash, str);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-  typedef HashTableHost<const Symbol*, traceid, ListEntry, JfrSymbolTable> SymbolTable;\n-  typedef HashTableHost<const char*, traceid, ListEntry, JfrSymbolTable> CStringTable;\n+  typedef HashTableHost<const Symbol*, traceid, ListEntry, JfrSymbolTable> Symbols;\n+  typedef HashTableHost<const char*, traceid, ListEntry, JfrSymbolTable> Strings;\n@@ -73,2 +73,2 @@\n-  typedef SymbolTable::HashEntry SymbolEntry;\n-  typedef CStringTable::HashEntry CStringEntry;\n+  typedef Symbols::HashEntry SymbolEntry;\n+  typedef Strings::HashEntry StringEntry;\n@@ -80,2 +80,2 @@\n-  SymbolTable* _symbol_table;\n-  CStringTable* _cstring_table;\n+  Symbols* _symbols;\n+  Strings* _strings;\n@@ -83,1 +83,1 @@\n-  const CStringEntry* _cstring_list;\n+  const StringEntry* _string_list;\n@@ -85,1 +85,1 @@\n-  const char* _cstring_query;\n+  const char* _string_query;\n@@ -105,1 +105,1 @@\n-  bool has_entries() const { return has_symbol_entries() || has_cstring_entries(); }\n+  bool has_entries() const { return has_symbol_entries() || has_string_entries(); }\n@@ -107,1 +107,1 @@\n-  bool has_cstring_entries() const { return _cstring_list != NULL; }\n+  bool has_string_entries() const { return _string_list != NULL; }\n@@ -117,3 +117,3 @@\n-  void on_link(const CStringEntry* entry);\n-  bool on_equals(uintptr_t hash, const CStringEntry* entry);\n-  void on_unlink(const CStringEntry* entry);\n+  void on_link(const StringEntry* entry);\n+  bool on_equals(uintptr_t hash, const StringEntry* entry);\n+  void on_unlink(const StringEntry* entry);\n@@ -133,2 +133,2 @@\n-  void iterate_cstrings(Functor& functor) {\n-    iterate(functor, _cstring_list);\n+  void iterate_strings(Functor& functor) {\n+    iterate(functor, _string_list);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    \/\/ Declare as \"public static to prevent the compiler from optimizing away all unread writes\n+    \/\/ Declare as public static to prevent the compiler from optimizing away all unread writes\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestFinalizerStatisticsEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}