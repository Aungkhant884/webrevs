{"files":[{"patch":"@@ -2850,0 +2850,17 @@\n+    private static String oneInManys(String label, int certNo, int certCnt, int signerNo,\n+        int signerCnt) {\n+        if (certCnt == 1 && signerCnt == 1) {\n+            return label;\n+        }\n+        if (certCnt > 1 && signerCnt == 1) {\n+            return String.format(rb.getString(\"one.in.many1\"), label, certNo);\n+        }\n+        if (certCnt == 1 && signerCnt > 1) {\n+            return String.format(rb.getString(\"one.in.many2\"), label, signerNo);\n+        }\n+        if (certCnt > 1 && signerCnt > 1) {\n+            return String.format(rb.getString(\"one.in.many3\"), label, certNo, signerNo);\n+        }\n+        return label;\n+    }\n+\n@@ -2875,38 +2892,0 @@\n-                            out.printf(rb.getString(\"Signer.d.\"), ++pos);\n-                            out.println();\n-                            out.println();\n-                            out.println(rb.getString(\"Signature.\"));\n-                            out.println();\n-\n-                            List<? extends Certificate> certs\n-                                    = signer.getSignerCertPath().getCertificates();\n-                            int cc = 0;\n-                            for (Certificate cert: certs) {\n-                                X509Certificate x = (X509Certificate)cert;\n-                                if (rfc) {\n-                                    out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectX500Principal() + \"\\n\");\n-                                    dumpCert(x, out);\n-                                } else {\n-                                    printX509Cert(x, out);\n-                                }\n-                                out.println();\n-                                checkWeak(oneInMany(rb.getString(\"the.certificate\"), cc++, certs.size()), x);\n-                            }\n-                            Timestamp ts = signer.getTimestamp();\n-                            if (ts != null) {\n-                                out.println(rb.getString(\"Timestamp.\"));\n-                                out.println();\n-                                certs = ts.getSignerCertPath().getCertificates();\n-                                cc = 0;\n-                                for (Certificate cert: certs) {\n-                                    X509Certificate x = (X509Certificate)cert;\n-                                    if (rfc) {\n-                                        out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectX500Principal() + \"\\n\");\n-                                        dumpCert(x, out);\n-                                    } else {\n-                                        printX509Cert(x, out);\n-                                    }\n-                                    out.println();\n-                                    checkWeak(oneInMany(rb.getString(\"the.tsa.certificate\"), cc++, certs.size()), x);\n-                                }\n-                            }\n@@ -2917,0 +2896,49 @@\n+\n+            for (CodeSigner signer: ss) {\n+                out.printf(rb.getString(\"Signer.d.\"), ++pos);\n+                out.println();\n+                out.println();\n+\n+                List<? extends Certificate> certs\n+                        = signer.getSignerCertPath().getCertificates();\n+                int cc = 0;\n+                for (Certificate cert: certs) {\n+                    out.printf(rb.getString(\"Certificate.d.\"), ++cc);\n+                    out.println();\n+                    X509Certificate x = (X509Certificate)cert;\n+                    if (rfc) {\n+                        out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectX500Principal() + \"\\n\");\n+                        dumpCert(x, out);\n+                    } else {\n+                        printX509Cert(x, out);\n+                    }\n+                    out.println();\n+                    checkWeak(oneInManys(rb.getString(\n+                            \"the.certificate\"), cc,\n+                            certs.size(), pos,\n+                            ss.size()), x);\n+                }\n+                Timestamp ts = signer.getTimestamp();\n+                if (ts != null) {\n+                    out.println(rb.getString(\"Timestamp.\"));\n+                    out.println();\n+                    certs = ts.getSignerCertPath().getCertificates();\n+                    cc = 0;\n+                    for (Certificate cert: certs) {\n+                        out.printf(rb.getString(\"Certificate.d.\"), ++cc);\n+                        out.println();\n+                        X509Certificate x = (X509Certificate)cert;\n+                        if (rfc) {\n+                            out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectX500Principal() + \"\\n\");\n+                            dumpCert(x, out);\n+                        } else {\n+                            printX509Cert(x, out);\n+                        }\n+                        out.println();\n+                        checkWeak(oneInManys(rb.getString(\n+                                \"the.tsa.certificate\"), cc,\n+                                certs.size(), pos,\n+                                ss.size()), x);\n+                    }\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":66,"deletions":38,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+        {\"Certificate.d.\", \"Certificate #%d:\"},\n@@ -401,1 +402,0 @@\n-        {\"Signature.\", \"Signature:\"},\n@@ -468,0 +468,3 @@\n+        {\"one.in.many1\", \"%1$s #%2$d\"},\n+        {\"one.in.many2\", \"%1$s of signer #%2$d\"},\n+        {\"one.in.many3\", \"%1$s #%2$d of signer #%3$d\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -725,45 +725,0 @@\n-    static void checkWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldMatch(\"Timestamp signature algorithm: .*key.*(weak)\");\n-        verify(file, \"-J-Djava.security.debug=jar\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotMatch(\"SignatureException:.*disabled\");\n-\n-        \/\/ keytool should print out warnings when reading or\n-        \/\/ generating cert\/cert req using legacy algorithms.\n-        String sout = SecurityTools.keytool(\"-printcert -jarfile \" + file)\n-                .stderrShouldContain(\"The TSA certificate uses a 1024-bit RSA key\" +\n-                        \" which is considered a security risk.\" +\n-                        \" This key size will be disabled in a future update.\")\n-                .getStdout();\n-        if (sout.indexOf(\"weak\", sout.indexOf(\"Timestamp:\")) < 0) {\n-            throw new RuntimeException(\"timestamp not weak: \" + sout);\n-        }\n-    }\n-\n-    static void checkHalfWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(disabled)\")\n-                .shouldNotMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(disabled).*(disabled)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6890872 8168882\n+ * @bug 6890872 8168882 8257722\n@@ -45,0 +45,1 @@\n+import java.nio.file.Path;\n@@ -48,0 +49,11 @@\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    static void gencert(String owner, String cmd) throws Exception {\n+        kt(\"-certreq -alias \" + owner + \" -file tmp.req\", \"ks\");\n+        kt(\"-gencert -infile tmp.req -outfile tmp.cert \" + cmd, \"ks\");\n+        kt(\"-importcert -alias \" + owner + \" -file tmp.cert\", \"ks\");\n+    }\n+\n@@ -50,0 +62,1 @@\n+        testCertOutput();\n@@ -94,0 +107,83 @@\n+\n+    private static void testCertOutput() throws Throwable {\n+        kt(\"-genkeypair -keyalg rsa -alias e0 -dname CN=E0 \" +\n+                \"-keysize 512\", \"ks\");\n+        JarUtils.createJarFile(Path.of(\"a0.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a0.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a0.jar e0\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a0.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldNotContain(\"Certificate #2:\")\n+                .shouldNotContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias ca1 -dname CN=CA1 -ext bc:c \" +\n+                \"-keysize 512\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        gencert(\"e1\", \"-alias ca1 -ext san=dns:e1\");\n+\n+        JarUtils.createJarFile(Path.of(\"a1.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a1.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a1.jar e1\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a1.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldContain(\"Certificate #2:\")\n+                .shouldNotContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate #2 uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias ca2 -dname CN=CA2 -ext bc:c \" +\n+                \"-sigalg SHA1withRSA\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e2 -dname CN=E2\", \"ks\");\n+        gencert(\"e2\", \"-alias ca2 -ext san=dns:e2\");\n+\n+        \/\/ sign a1.jar file again with different signer\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a1.jar e2\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a1.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldContain(\"Certificate #2:\")\n+                .shouldContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e3 -dname CN=E3\",\n+                \"ks\");\n+        JarUtils.createJarFile(Path.of(\"a2.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a2.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a2.jar e3\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e4 -dname CN=E4 \" +\n+                \"-keysize 1024\", \"ks\");\n+        \/\/ sign a2.jar file again with different signer\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a2.jar e4\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a2.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldNotContain(\"Certificate #2:\")\n+                .shouldContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate of signer #.*\" + \"uses a 1024-bit RSA key.*will be disabled\")\n+                .shouldHaveExitValue(0);\n+    }\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ReadJar.java","additions":98,"deletions":2,"binary":false,"changes":100,"status":"modified"}]}