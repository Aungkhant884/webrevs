{"files":[{"patch":"@@ -683,1 +683,1 @@\n-                .stderrShouldContain(\"The TSA certificate uses a 512-bit RSA key\" +\n+                .stderrShouldContain(\"The TSA certificate of signer #1 uses a 512-bit RSA key\" +\n@@ -725,45 +725,0 @@\n-    static void checkWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldMatch(\"Timestamp signature algorithm: .*key.*(weak)\");\n-        verify(file, \"-J-Djava.security.debug=jar\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotMatch(\"SignatureException:.*disabled\");\n-\n-        \/\/ keytool should print out warnings when reading or\n-        \/\/ generating cert\/cert req using legacy algorithms.\n-        String sout = SecurityTools.keytool(\"-printcert -jarfile \" + file)\n-                .stderrShouldContain(\"The TSA certificate uses a 1024-bit RSA key\" +\n-                        \" which is considered a security risk.\" +\n-                        \" This key size will be disabled in a future update.\")\n-                .getStdout();\n-        if (sout.indexOf(\"weak\", sout.indexOf(\"Timestamp:\")) < 0) {\n-            throw new RuntimeException(\"timestamp not weak: \" + sout);\n-        }\n-    }\n-\n-    static void checkHalfWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(disabled)\")\n-                .shouldNotMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(disabled).*(disabled)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":1,"deletions":46,"binary":false,"changes":47,"status":"modified"}]}