{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-  if (pc == NULL) {\n+  if (pc == nullptr) {\n@@ -63,1 +63,1 @@\n-    if (pc == NULL) {\n+    if (pc == nullptr) {\n@@ -70,1 +70,1 @@\n-    if (ret_frame.fp() == NULL) {\n+    if (ret_frame.fp() == nullptr) {\n@@ -73,1 +73,1 @@\n-      \/\/  - when using istate, calculated as (NULL - z_ijava_state_size (= 0x70 (dbg) or 0x68 (rel)) or\n+      \/\/  - when using istate, calculated as (nullptr - z_ijava_state_size (= 0x70 (dbg) or 0x68 (rel)) or\n@@ -95,1 +95,1 @@\n-      \/\/  - ret_frame is constructed with _fp == NULL (for whatever reason)\n+      \/\/  - ret_frame is constructed with _fp == nullptr (for whatever reason)\n@@ -97,1 +97,1 @@\n-      \/\/      istate = fp() - z_ijava_state_size() = NULL - 0x68 DEBUG_ONLY(-8)\n+      \/\/      istate = fp() - z_ijava_state_size() = nullptr - 0x68 DEBUG_ONLY(-8)\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/javaThread_linux_s390.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -127,1 +127,1 @@\n-  if (uc != NULL) {\n+  if (uc != nullptr) {\n@@ -132,3 +132,3 @@\n-    epc = NULL;\n-    if (ret_sp) { *ret_sp = (intptr_t *)NULL; }\n-    if (ret_fp) { *ret_fp = (intptr_t *)NULL; }\n+    epc = nullptr;\n+    if (ret_sp) { *ret_sp = (intptr_t *)nullptr; }\n+    if (ret_fp) { *ret_fp = (intptr_t *)nullptr; }\n@@ -163,1 +163,1 @@\n-  if ((Interpreter::code() != NULL && Interpreter::contains(fr->pc())) ||\n+  if ((Interpreter::code() != nullptr && Interpreter::contains(fr->pc())) ||\n@@ -184,1 +184,1 @@\n-  assert (csp != NULL, \"sp should not be NULL\");\n+  assert (csp != nullptr, \"sp should not be null\");\n@@ -193,1 +193,1 @@\n-    assert(senderFrame.pc() != NULL, \"Sender pc should not be NULL\");\n+    assert(senderFrame.pc() != nullptr, \"Sender pc should not be null\");\n@@ -195,1 +195,1 @@\n-    \/\/ both have pc != NULL.\n+    \/\/ both have pc != nullptr.\n@@ -210,3 +210,3 @@\n-  address stub    = NULL;\n-  address pc      = NULL;  \/\/ Pc as retrieved from PSW. Usually points past failing instruction.\n-  address trap_pc = NULL;  \/\/ Pc of the instruction causing the trap.\n+  address stub    = nullptr;\n+  address pc      = nullptr;  \/\/ Pc as retrieved from PSW. Usually points past failing instruction.\n+  address trap_pc = nullptr;  \/\/ Pc of the instruction causing the trap.\n@@ -215,1 +215,1 @@\n-  if (info != NULL && uc != NULL && thread != NULL) {\n+  if (info != nullptr && uc != nullptr && thread != nullptr) {\n@@ -269,1 +269,1 @@\n-               (trap_pc != NULL) &&\n+               (trap_pc != nullptr) &&\n@@ -289,1 +289,1 @@\n-               (trap_pc != NULL) &&\n+               (trap_pc != nullptr) &&\n@@ -306,2 +306,2 @@\n-        CompiledMethod* nm = (cb != NULL) ? cb->as_compiled_method_or_null() : NULL;\n-        if (nm != NULL && nm->has_unsafe_access()) {\n+        CompiledMethod* nm = (cb != nullptr) ? cb->as_compiled_method_or_null() : nullptr;\n+        if (nm != nullptr && nm->has_unsafe_access()) {\n@@ -352,1 +352,1 @@\n-  if (stub != NULL) {\n+  if (stub != nullptr) {\n@@ -354,1 +354,1 @@\n-    if (thread != NULL) thread->set_saved_exception_pc(pc);\n+    if (thread != nullptr) thread->set_saved_exception_pc(pc);\n@@ -395,1 +395,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n@@ -440,1 +440,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n@@ -457,1 +457,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}