{"files":[{"patch":"@@ -247,0 +247,1 @@\n+  { CC\"Java_jdk_test_whitebox_WhiteBox_registerNatives\",           NULL, FN_PTR(JVM_RegisterWhiteBoxMethods)     },\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  const char* enum_sig = \"Lsun\/hotspot\/parser\/DiagnosticCommand$DiagnosticArgumentType;\";\n+  const char* enum_sig = \"Ljdk\/test\/whitebox\/parser\/DiagnosticCommand$DiagnosticArgumentType;\";\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2200,0 +2200,3 @@\n+  Klass* klass = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(wbclass));\n+  const char* klass_name = klass->external_name();\n+\n@@ -2215,2 +2218,2 @@\n-          tty->print_cr(\"Warning: 'NoSuchMethodError' on register of sun.hotspot.WhiteBox::%s%s\",\n-              method_array[i].name, method_array[i].signature);\n+          tty->print_cr(\"Warning: 'NoSuchMethodError' on register of %s::%s%s\",\n+              klass_name, method_array[i].name, method_array[i].signature);\n@@ -2220,2 +2223,2 @@\n-        tty->print_cr(\"Warning: unexpected error on register of sun.hotspot.WhiteBox::%s%s. All methods will be unregistered\",\n-            method_array[i].name, method_array[i].signature);\n+        tty->print_cr(\"Warning: unexpected error on register of %s::%s%s. All methods will be unregistered\",\n+            klass_name, method_array[i].name, method_array[i].signature);\n@@ -2436,1 +2439,1 @@\n-      CC\"(Ljava\/lang\/String;C[Lsun\/hotspot\/parser\/DiagnosticCommand;)[Ljava\/lang\/Object;\",\n+      CC\"(Ljava\/lang\/String;C[Ljdk\/test\/whitebox\/parser\/DiagnosticCommand;)[Ljava\/lang\/Object;\",\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-requires.extraPropDefns.bootlibs = ..\/..\/lib\/sun\n+requires.extraPropDefns.bootlibs = ..\/..\/lib\/jdk\/test\/whitebox\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- *        sun.hotspot.WhiteBox sun.hotspot.parser.DiagnosticCommand\n+ *        sun.hotspot.WhiteBox jdk.test.whitebox.parser.DiagnosticCommand\n@@ -42,1 +42,1 @@\n- *                                sun.hotspot.parser.DiagnosticCommand\n+ *                                jdk.test.whitebox.parser.DiagnosticCommand\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/AllocateCompileIdTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,2 @@\n-    \/\/ we support only sun\/hotspot\/WhiteBox$WhiteBoxPermission. See JDK-8199290\n+    \/\/ we support only jdk\/test\/whitebox\/WhiteBox$WhiteBoxPermission and\n+    \/\/ sun\/hotspot\/WhiteBox$WhiteBoxPermission. See JDK-8199290\n@@ -136,2 +137,4 @@\n-        boolean seenWB = false;\n-        boolean seenWBInner = false;\n+        boolean seenNewWb = false;\n+        boolean seenNewWbInner = false;\n+        boolean seenOldWb = false;\n+        boolean seenOldWbInner = false;\n@@ -140,2 +143,4 @@\n-        final String wb = \"sun\/hotspot\/WhiteBox\";\n-        final String wbInner = \"sun\/hotspot\/WhiteBox$WhiteBoxPermission\";\n+        final String newWb = \"jdk\/test\/whitebox\/WhiteBox\";\n+        final String newWbInner = newWb + \"$WhiteBoxPermission\";\n+        final String oldWb = \"sun\/hotspot\/WhiteBox\";\n+        final String oldWbInner = oldWb + \"$WhiteBoxPermission\";\n@@ -149,2 +154,4 @@\n-            case wb:      seenWB      = true; break;\n-            case wbInner: seenWBInner = true; break;\n+            case newWb:      seenNewWb      = true; break;\n+            case newWbInner: seenNewWbInner = true; break;\n+            case oldWb:      seenOldWb      = true; break;\n+            case oldWbInner: seenOldWbInner = true; break;\n@@ -153,2 +160,5 @@\n-        if (seenWB && !seenWBInner) {\n-            list.add(wbInner);\n+        if (seenNewWb && !seenNewWbInner) {\n+            list.add(newWbInner);\n+        }\n+        if (seenOldWb && !seenOldWbInner) {\n+            list.add(oldWbInner);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import sun.hotspot.parser.DiagnosticCommand;\n-import sun.hotspot.parser.DiagnosticCommand.DiagnosticArgumentType;\n+import jdk.test.whitebox.parser.DiagnosticCommand;\n+import jdk.test.whitebox.parser.DiagnosticCommand.DiagnosticArgumentType;\n","filename":"test\/hotspot\/jtreg\/serviceability\/ParserTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-WB_SRC_FILES = $(shell find $(TESTLIBRARY_DIR)\/sun\/hotspot -name '*.java')\n+WB_SRC_FILES = $(shell find $(TESTLIBRARY_DIR)\/sun\/hotspot $(TESTLIBRARY_DIR)\/jdk\/test\/whitebox -name '*.java')\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/Makefile","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-requires.extraPropDefns.bootlibs = ..\/lib\/sun\n+requires.extraPropDefns.bootlibs = ..\/lib\/jdk\/test\/whitebox\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,4 +47,4 @@\n-import sun.hotspot.code.Compiler;\n-import sun.hotspot.cpuinfo.CPUInfo;\n-import sun.hotspot.gc.GC;\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.code.Compiler;\n+import jdk.test.whitebox.cpuinfo.CPUInfo;\n+import jdk.test.whitebox.gc.GC;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -37,1 +37,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/BlobSanityTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/BlobSanityTest.java","status":"renamed"},{"patch":"@@ -28,2 +28,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -38,2 +38,2 @@\n-import sun.hotspot.WhiteBox;\n-import sun.hotspot.cpuinfo.CPUInfo;\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.whitebox.cpuinfo.CPUInfo;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/CPUInfoTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/CPUInfoTest.java","status":"renamed"},{"patch":"@@ -32,2 +32,2 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:-CheckIntrinsics sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:-CheckIntrinsics jdk.test.whitebox.WhiteBox\n@@ -36,1 +36,1 @@\n-package sun.hotspot;\n+package jdk.test.whitebox;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/MismatchedWhiteBox\/WhiteBox.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/MismatchedWhiteBox\/WhiteBox.java","status":"renamed"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=without-inner-class\n+ * @summary verify that sun.hotspot.WhiteBox class still can be used\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI OldWhiteBox\n+ *\/\n+\n+\/*\n+ * @test id=with-inner-class\n+ * @summary verify that sun.hotspot.WhiteBox class still can be used\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI OldWhiteBox\n+ *\/\n+\n+import sun.hotspot.WhiteBox;\n+\n+public class OldWhiteBox {\n+    public static void main(String[] args) {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        if (wb.getHeapOopSize() < 0) {\n+            throw new Error(\"wb.getHeapOopSize() < 0\");\n+        }\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/OldWhiteBox.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -29,2 +29,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -34,1 +34,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/WBApi.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/WBApi.java","status":"renamed"},{"patch":"@@ -32,2 +32,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -39,1 +39,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/BooleanTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/BooleanTest.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/DoubleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/DoubleTest.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/IntxTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/IntxTest.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/SizeTTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/SizeTTest.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/StringTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/StringTest.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/Uint64Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/Uint64Test.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/UintxTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/UintxTest.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/VmFlagTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib-test\/sun\/hotspot\/whitebox\/vm_flags\/VmFlagTest.java","status":"renamed"},{"patch":"@@ -105,1 +105,2 @@\n-    \/\/ we support only sun.hotspot.WhiteBox$WhiteBoxPermission. See JDK-8199290\n+    \/\/ we support only jdk.test.whitebox.WhiteBox$WhiteBoxPermission and\n+    \/\/ sun\/hotspot\/WhiteBox$WhiteBoxPermission. See JDK-8199290\n@@ -107,4 +108,8 @@\n-        boolean seenWB = false;\n-        boolean seenWBInner = false;\n-        final String wb = \"sun.hotspot.WhiteBox\";\n-        final String wbInner = \"sun.hotspot.WhiteBox$WhiteBoxPermission\";\n+        boolean seenNewWb = false;\n+        boolean seenNewWbInner = false;\n+        boolean seenOldWb = false;\n+        boolean seenOldWbInner = false;\n+        final String newWb = \"jdk.test.whitebox.WhiteBox\";\n+        final String newWbInner = newWb + \"$WhiteBoxPermission\";\n+        final String oldWb = \"sun.hotspot.WhiteBox\";\n+        final String oldWbInner = oldWb + \"$WhiteBoxPermission\";\n@@ -118,2 +123,4 @@\n-            case wb:      seenWB      = true; break;\n-            case wbInner: seenWBInner = true; break;\n+            case newWb:      seenNewWb      = true; break;\n+            case newWbInner: seenNewWbInner = true; break;\n+            case oldWb:      seenOldWb      = true; break;\n+            case oldWbInner: seenOldWbInner = true; break;\n@@ -122,2 +129,5 @@\n-        if (seenWB && !seenWBInner) {\n-            list.add(wbInner);\n+        if (seenNewWb && !seenNewWbInner) {\n+            list.add(newWbInner);\n+        }\n+        if (seenOldWb && !seenOldWbInner) {\n+            list.add(oldWbInner);\n","filename":"test\/lib\/jdk\/test\/lib\/helpers\/ClassFileInstaller.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package sun.hotspot;\n+package jdk.test.whitebox;\n@@ -35,1 +35,1 @@\n-import sun.hotspot.parser.DiagnosticCommand;\n+import jdk.test.whitebox.parser.DiagnosticCommand;\n@@ -313,1 +313,1 @@\n-    return getMethodCompilationLevel(method, false \/*not osr*\/);\n+    return getMethodCompilationLevel(method, false \/*not ost*\/);\n@@ -418,1 +418,1 @@\n-  \/\/ Use sun.hotspot.gc.GC class instead.\n+  \/\/ Use jdk.test.whitebox.gc.GC class instead.\n@@ -608,1 +608,0 @@\n-  public native boolean handshakeReadMonitors(Thread t);\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","status":"copied"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.whitebox.code;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.util.EnumSet;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+public enum BlobType {\n+    \/\/ Execution level 1 and 4 (non-profiled) nmethods (including native nmethods)\n+    MethodNonProfiled(0, \"CodeHeap 'non-profiled nmethods'\", \"NonProfiledCodeHeapSize\") {\n+        @Override\n+        public boolean allowTypeWhenOverflow(BlobType type) {\n+            return super.allowTypeWhenOverflow(type)\n+                    || type == BlobType.MethodProfiled;\n+        }\n+    },\n+    \/\/ Execution level 2 and 3 (profiled) nmethods\n+    MethodProfiled(1, \"CodeHeap 'profiled nmethods'\", \"ProfiledCodeHeapSize\") {\n+        @Override\n+        public boolean allowTypeWhenOverflow(BlobType type) {\n+            return super.allowTypeWhenOverflow(type)\n+                    || type == BlobType.MethodNonProfiled;\n+        }\n+    },\n+    \/\/ Non-nmethods like Buffers, Adapters and Runtime Stubs\n+    NonNMethod(2, \"CodeHeap 'non-nmethods'\", \"NonNMethodCodeHeapSize\") {\n+        @Override\n+        public boolean allowTypeWhenOverflow(BlobType type) {\n+            return super.allowTypeWhenOverflow(type)\n+                    || type == BlobType.MethodNonProfiled\n+                    || type == BlobType.MethodProfiled;\n+        }\n+    },\n+    \/\/ All types (No code cache segmentation)\n+    All(3, \"CodeCache\", \"ReservedCodeCacheSize\");\n+\n+    public final int id;\n+    public final String sizeOptionName;\n+    public final String beanName;\n+\n+    private BlobType(int id, String beanName, String sizeOptionName) {\n+        this.id = id;\n+        this.beanName = beanName;\n+        this.sizeOptionName = sizeOptionName;\n+    }\n+\n+    public MemoryPoolMXBean getMemoryPool() {\n+        for (MemoryPoolMXBean bean : ManagementFactory.getMemoryPoolMXBeans()) {\n+            String name = bean.getName();\n+            if (beanName.equals(name)) {\n+                return bean;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public boolean allowTypeWhenOverflow(BlobType type) {\n+        return type == this;\n+    }\n+\n+    public static EnumSet<BlobType> getAvailable() {\n+        WhiteBox whiteBox = WhiteBox.getWhiteBox();\n+        if (!whiteBox.getBooleanVMFlag(\"SegmentedCodeCache\")) {\n+            \/\/ only All for non segmented world\n+            return EnumSet.of(All);\n+        }\n+        if (System.getProperty(\"java.vm.info\").startsWith(\"interpreted \")) {\n+            \/\/ only NonNMethod for -Xint\n+            return EnumSet.of(NonNMethod);\n+        }\n+\n+        EnumSet<BlobType> result = EnumSet.complementOf(EnumSet.of(All));\n+        if (!whiteBox.getBooleanVMFlag(\"TieredCompilation\")\n+                || whiteBox.getIntxVMFlag(\"TieredStopAtLevel\") <= 1) {\n+            \/\/ there is no MethodProfiled in non tiered world or pure C1\n+            result.remove(MethodProfiled);\n+        }\n+        return result;\n+    }\n+\n+    public long getSize() {\n+        return WhiteBox.getWhiteBox().getUintxVMFlag(sizeOptionName);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/BlobType.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package sun.hotspot.code;\n+package jdk.test.whitebox.code;\n@@ -26,1 +26,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/CodeBlob.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib\/sun\/hotspot\/code\/CodeBlob.java","status":"copied"},{"patch":"@@ -0,0 +1,171 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.whitebox.code;\n+\n+import java.lang.reflect.Executable;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * API to obtain information about enabled JIT compilers\n+ * retrieved from the VM with the WhiteBox API.\n+ *\/\n+public class Compiler {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    \/**\n+     * Check if C2 or JVMCI were included in the VM build\n+     *\n+     * @return true if either C2 or JVMCI were included in the VM build.\n+     *\/\n+    public static boolean isC2OrJVMCIIncluded() {\n+        return WB.isC2OrJVMCIIncluded();\n+    }\n+\n+    \/**\n+     * Check if JVMCI is enabled.\n+     *\n+     * @return true if JVMCI is enabled\n+     *\/\n+    public static boolean isJVMCIEnabled() {\n+        Boolean enableJvmci = WB.getBooleanVMFlag(\"EnableJVMCI\");\n+        if (enableJvmci == null || !enableJvmci) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    \/**\n+     * Check if Graal is used as JIT compiler.\n+     *\n+     * Graal is enabled if following conditions are true:\n+     * - we are not in Interpreter mode\n+     * - UseJVMCICompiler flag is true\n+     * - jvmci.Compiler variable is equal to 'graal'\n+     * - TieredCompilation is not used or TieredStopAtLevel is greater than 3\n+     * No need to check client mode because it set UseJVMCICompiler to false.\n+     *\n+     * @return true if Graal is used as JIT compiler.\n+     *\/\n+    public static boolean isGraalEnabled() {\n+        Boolean useCompiler = WB.getBooleanVMFlag(\"UseCompiler\");\n+        if (useCompiler == null || !useCompiler) {\n+            return false;\n+        }\n+        Boolean useJvmciComp = WB.getBooleanVMFlag(\"UseJVMCICompiler\");\n+        if (useJvmciComp == null || !useJvmciComp) {\n+            return false;\n+        }\n+\n+        Boolean tieredCompilation = WB.getBooleanVMFlag(\"TieredCompilation\");\n+        Long compLevel = WB.getIntxVMFlag(\"TieredStopAtLevel\");\n+        \/\/ if TieredCompilation is enabled and compilation level is <= 3 then no Graal is used\n+        if (tieredCompilation != null && tieredCompilation &&\n+            compLevel != null && compLevel <= 3) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    \/**\n+     * Check if C2 is used as JIT compiler.\n+     *\n+     * C2 is enabled if following conditions are true:\n+     * - we are not in Interpreter mode\n+     * - we are in Server compilation mode\n+     * - TieredCompilation is not used or TieredStopAtLevel is greater than 3\n+     * - Graal is not used\n+     *\n+     * @return true if C2 is used as JIT compiler.\n+     *\/\n+    public static boolean isC2Enabled() {\n+        Boolean useCompiler = WB.getBooleanVMFlag(\"UseCompiler\");\n+        if (useCompiler == null || !useCompiler) {\n+            return false;\n+        }\n+        Boolean serverMode = WB.getBooleanVMFlag(\"ProfileInterpreter\");\n+        if (serverMode == null || !serverMode) {\n+            return false;\n+        }\n+\n+        Boolean tieredCompilation = WB.getBooleanVMFlag(\"TieredCompilation\");\n+        Long compLevel = WB.getIntxVMFlag(\"TieredStopAtLevel\");\n+        \/\/ if TieredCompilation is enabled and compilation level is <= 3 then no Graal is used\n+        if (tieredCompilation != null && tieredCompilation &&\n+            compLevel != null && compLevel <= 3) {\n+            return false;\n+        }\n+\n+        if (isGraalEnabled()) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    \/*\n+     * Check if C1 is used as JIT compiler.\n+     *\n+     * C1 is enabled if following conditions are true:\n+     * - we are not in Interpreter mode\n+     * - we are not in Server compilation mode\n+     * - TieredCompilation is used in Server mode\n+     *\n+     * @return true if C1 is used as JIT compiler.\n+     *\/\n+    public static boolean isC1Enabled() {\n+        Boolean useCompiler = WB.getBooleanVMFlag(\"UseCompiler\");\n+        if (useCompiler == null || !useCompiler) {\n+            return false;\n+        }\n+        Boolean serverMode = WB.getBooleanVMFlag(\"ProfileInterpreter\");\n+        if (serverMode == null || !serverMode) {\n+            return true; \/\/ Client mode\n+        }\n+\n+        Boolean tieredCompilation = WB.getBooleanVMFlag(\"TieredCompilation\");\n+        \/\/ C1 is not used in server mode if TieredCompilation is off.\n+        if (tieredCompilation != null && !tieredCompilation) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    \/*\n+     * Determine if the compiler corresponding to the compilation level 'compLevel'\n+     * provides an intrinsic for 'class'.'method'.\n+     *\/\n+    public static boolean isIntrinsicAvailable(int compLevel, String klass, String method, Class<?>... parameterTypes) {\n+        Executable intrinsicMethod;\n+        try {\n+            intrinsicMethod = Class.forName(klass).getDeclaredMethod(method, parameterTypes);\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"Test bug, '\" + method + \"' method unavailable. \" + e);\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(\"Test bug, '\" + klass + \"' class unavailable. \" + e);\n+        }\n+        return WB.isIntrinsicAvailable(intrinsicMethod, compLevel);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/Compiler.java","additions":171,"deletions":0,"binary":false,"changes":171,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package sun.hotspot.code;\n+package jdk.test.whitebox.code;\n@@ -27,1 +27,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/NMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib\/sun\/hotspot\/code\/NMethod.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package sun.hotspot.cpuinfo;\n+package jdk.test.whitebox.cpuinfo;\n@@ -32,1 +32,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n","filename":"test\/lib\/jdk\/test\/whitebox\/cpuinfo\/CPUInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/lib\/sun\/hotspot\/cpuinfo\/CPUInfo.java","status":"copied"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.whitebox.gc;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * API to obtain information about selected and supported Garbage Collectors\n+ * retrieved from the VM with the WhiteBox API.\n+ *\/\n+public enum GC {\n+    \/*\n+     * Enum values must match CollectedHeap::Name\n+     *\/\n+    Serial(1),\n+    Parallel(2),\n+    G1(3),\n+    Epsilon(4),\n+    Z(5),\n+    Shenandoah(6);\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private final int name;\n+\n+    private GC(int name) {\n+        this.name = name;\n+    }\n+\n+    \/**\n+     * @return true if this GC is supported by the VM, i.e., it is built into the VM.\n+     *\/\n+    public boolean isSupported() {\n+        return WB.isGCSupported(name);\n+    }\n+\n+    \/**\n+     * @return true if this GC is supported by the JVMCI compiler\n+     *\/\n+    public boolean isSupportedByJVMCICompiler() {\n+        return WB.isGCSupportedByJVMCICompiler(name);\n+    }\n+\n+    \/**\n+     * @return true if this GC is currently selected\/used\n+     *\/\n+    public boolean isSelected() {\n+        return WB.isGCSelected(name);\n+    }\n+\n+    \/**\n+     * @return true if GC was selected ergonomically, as opposed\n+     *         to being explicitly specified on the command line\n+     *\/\n+    public static boolean isSelectedErgonomically() {\n+        return WB.isGCSelectedErgonomically();\n+    }\n+\n+    \/**\n+     * @return the selected GC.\n+     *\/\n+    public static GC selected() {\n+      for (GC gc : values()) {\n+        if (gc.isSelected()) {\n+          return gc;\n+        }\n+      }\n+      throw new IllegalStateException(\"No selected GC found\");\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/whitebox\/gc\/GC.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package sun.hotspot.parser;\n+package jdk.test.whitebox.parser;\n","filename":"test\/lib\/jdk\/test\/whitebox\/parser\/DiagnosticCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/lib\/sun\/hotspot\/parser\/DiagnosticCommand.java","status":"renamed"},{"patch":"@@ -35,1 +35,1 @@\n-import sun.hotspot.parser.DiagnosticCommand;\n+import jdk.test.whitebox.parser.DiagnosticCommand;\n@@ -37,0 +37,1 @@\n+@Deprecated\n@@ -61,1 +62,1 @@\n-      sm.checkPermission(new WhiteBoxPermission(\"getInstance\"));\n+      throw new SecurityException(\"can't use old whitebox with SecurityManager, please switch to jdk.test.whitebox.WhiteBox\");\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+@Deprecated\n","filename":"test\/lib\/sun\/hotspot\/code\/CodeBlob.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+@Deprecated\n","filename":"test\/lib\/sun\/hotspot\/code\/NMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+@Deprecated\n","filename":"test\/lib\/sun\/hotspot\/cpuinfo\/CPUInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}