{"files":[{"patch":"@@ -26,0 +26,3 @@\n+#ifdef AIX\n+#include \"runtime\/os.hpp\" \/\/ malloc\n+#endif\n@@ -405,1 +408,1 @@\n-    uint32_t *new_round_consts = (uint32_t*)malloc(sizeof(sha256_round_table));\n+    uint32_t *new_round_consts = (uint32_t*)os::malloc(sizeof(sha256_round_table));\n@@ -960,1 +963,1 @@\n-    uint64_t *new_round_consts = (uint64_t*)malloc(sizeof(sha512_round_table));\n+    uint64_t *new_round_consts = (uint64_t*)os::malloc(sizeof(sha512_round_table));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc_sha.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -92,1 +93,1 @@\n-  const address consts = (address)malloc(size);\n+  const address consts = (address)os::malloc(size, mtInternal);\n","filename":"src\/hotspot\/cpu\/ppc\/stubRoutines_ppc_64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -49,1 +50,1 @@\n-      ::free(result);\n+      ALLOW_C_FUNCTION(free, ::free(result);)\n","filename":"src\/hotspot\/os\/linux\/decoder_linux.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    _path = strdup(AllocateHeapAt);\n+    _path = os::strdup(AllocateHeapAt, mtGC);\n@@ -49,1 +49,1 @@\n-  free(_path);\n+  os::free(_path);\n@@ -64,1 +64,1 @@\n-    free(line_mountpoint);\n+    os::free(line_mountpoint);\n@@ -68,1 +68,1 @@\n-  free(line_filesystem);\n+  os::free(line_filesystem);\n@@ -91,1 +91,1 @@\n-  free(line);\n+  os::free(line);\n@@ -98,1 +98,1 @@\n-    free(mountpoint);\n+    os::free(mountpoint);\n@@ -112,1 +112,1 @@\n-        return strdup(mountpoint);\n+        return os::strdup(mountpoint, mtGC);\n@@ -138,1 +138,1 @@\n-    path = strdup(mountpoints.at(0));\n+    path = os::strdup(mountpoints.at(0), mtGC);\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zMountPoint_linux.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -788,1 +788,1 @@\n-  return realpath(buffer, _exePath);\n+  ALLOW_C_FUNCTION(::realpath, return realpath(buffer, _exePath);)\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -33,1 +34,3 @@\n-  if (posix_memalign(&res, alignment, size) != 0) {\n+  \/\/ Use raw posix_memalign as long as we have no wrapper for it\n+  ALLOW_C_FUNCTION(::posix_memalign, int rc = posix_memalign(&res, alignment, size);)\n+  if (rc != 0) {\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zUtils_posix.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -51,0 +50,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -908,1 +908,1 @@\n-  char* p = ::realpath(filename, NULL);\n+  ALLOW_C_FUNCTION(::realpath, char* p = ::realpath(filename, NULL);)\n@@ -916,1 +916,1 @@\n-    ::free(p); \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n@@ -925,1 +925,1 @@\n-      p = ::realpath(filename, outbuf);\n+      ALLOW_C_FUNCTION(::realpath, p = ::realpath(filename, outbuf);)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -104,1 +105,1 @@\n-    phase_names->append(use_strdup ? strdup(phase_name) : phase_name);\n+    phase_names->append(use_strdup ? os::strdup(phase_name) : phase_name);\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -70,1 +71,1 @@\n-    DEBUG_ONLY(debug_message = strdup(_temp->base()));\n+    DEBUG_ONLY(debug_message = os::strdup(_temp->base()));\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -94,1 +95,1 @@\n-    _shared_library_path = strdup(path);\n+    _shared_library_path = os::strdup(path);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -708,1 +709,1 @@\n-    name = strdup(name);\n+    name = os::strdup(name); \/\/ Note: this leaks. See JDK-8289632\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -153,1 +154,2 @@\n-    char* newbuf = (char*)::malloc(newbuf_len * sizeof(char));\n+    \/\/ Since logging is a very basic function, conceivably used within NMT itself, avoid os::malloc\/free\n+    ALLOW_C_FUNCTION(::malloc, char* newbuf = (char*)::malloc(newbuf_len * sizeof(char));)\n@@ -163,1 +165,1 @@\n-      ::free(newbuf);\n+      ALLOW_C_FUNCTION(::free, ::free(newbuf);)\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-  void* const outer_ptr = ::malloc(outer_size);\n+  ALLOW_C_FUNCTION(::malloc, void* const outer_ptr = ::malloc(outer_size);)\n@@ -711,1 +711,1 @@\n-  void* const new_outer_ptr = ::realloc(old_outer_ptr, new_outer_size);\n+  ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(old_outer_ptr, new_outer_size);)\n@@ -739,1 +739,1 @@\n-  ::free(old_outer_ptr);\n+  ALLOW_C_FUNCTION(::realloc, ::free(old_outer_ptr);)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-static void* raw_malloc(size_t s)               { return ::malloc(s); }\n-static void* raw_realloc(void* old, size_t s)   { return ::realloc(old, s); }\n-static void  raw_free(void* p)                  { ::free(p); }\n+static void* raw_malloc(size_t s)               { ALLOW_C_FUNCTION(::malloc, return ::malloc(s);) }\n+static void* raw_realloc(void* old, size_t s)   { ALLOW_C_FUNCTION(::realloc, return ::realloc(old, s);) }\n+static void  raw_free(void* p)                  { ALLOW_C_FUNCTION(::free, ::free(p);) }\n","filename":"src\/hotspot\/share\/services\/nmtPreInit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -172,0 +172,16 @@\n+\/\/ All of the following functions return raw C-heap pointers (sometimes as an option, e.g. realpath or getwd)\n+\/\/ or, in case of free(), take raw C-heap pointers. Don't use them unless you are really sure you must.\n+FORBID_C_FUNCTION(void* malloc(size_t size), \"use os::malloc\");\n+FORBID_C_FUNCTION(void* calloc(size_t nmemb, size_t size), \"use os::malloc and zero out manually\");\n+FORBID_C_FUNCTION(void free(void *ptr), \"use os::free\");\n+FORBID_C_FUNCTION(void* realloc(void *ptr, size_t size), \"use os::realloc\");\n+FORBID_C_FUNCTION(char* strdup(const char *s), \"use os::realloc\");\n+FORBID_C_FUNCTION(char* strndup(const char *s, size_t n), \"use os::strdup\");\n+FORBID_C_FUNCTION(int posix_memalign(void **memptr, size_t alignment, size_t size), \"don't use\");\n+FORBID_C_FUNCTION(void* aligned_alloc(size_t alignment, size_t size), \"don't use\");\n+FORBID_C_FUNCTION(char* realpath(const char* path, char* resolved_path), \"don't use\");\n+FORBID_C_FUNCTION(char* get_current_dir_name(void), \"don't use\");\n+FORBID_C_FUNCTION(char* getwd(char *buf), \"don't use\");\n+FORBID_C_FUNCTION(wchar_t* wcsdup(const wchar_t *s), \"don't use\");\n+FORBID_C_FUNCTION(void* reallocf(void *ptr, size_t size), \"don't use\");\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -196,1 +197,1 @@\n-  char** new_argv = (char**) malloc(sizeof(char*) * argc);\n+  ALLOW_C_FUNCTION(::malloc, char** new_argv = (char**) malloc(sizeof(char*) * argc);)\n@@ -292,0 +293,2 @@\n+  ALLOW_C_FUNCTION(::free, ::free(argv);)\n+\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -82,1 +83,1 @@\n-    char* name_cpy = strdup(name);\n+    char* name_cpy = os::strdup(name, mtTest);\n@@ -85,1 +86,1 @@\n-    free(name_cpy);\n+    os::free(name_cpy);\n@@ -102,1 +103,1 @@\n-    char* abbr_cpy = strdup(abbr);\n+    char* abbr_cpy = os::strdup(abbr);\n@@ -105,1 +106,1 @@\n-    free(abbr_cpy);\n+    os::free(abbr_cpy);\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorators.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -48,1 +49,1 @@\n-    _memory(static_cast<bm_word_t*>(malloc(_words * sizeof(bm_word_t))))\n+    _memory(static_cast<bm_word_t*>(os::malloc(_words * sizeof(bm_word_t), mtTest)))\n@@ -52,1 +53,1 @@\n-    free(_memory);\n+    os::free(_memory);\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_setops.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"runtime\/os.hpp\" \/\/ malloc\n@@ -45,1 +46,1 @@\n-    return ::malloc(size);\n+    return os::malloc(size, mtTest);\n@@ -48,1 +49,1 @@\n-    ::free(memory);\n+    os::free(memory);\n@@ -63,1 +64,1 @@\n-    elements = (TableElement*)::malloc(nelements * sizeof(TableElement));\n+    elements = (TableElement*)os::malloc(nelements * sizeof(TableElement), mtTest);\n@@ -77,1 +78,1 @@\n-    ::free(elements);\n+    os::free(elements);\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}