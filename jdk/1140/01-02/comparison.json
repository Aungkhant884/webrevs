{"files":[{"patch":"@@ -85,1 +85,1 @@\n-            Object finalizee = this.getRaw();\n+            Object finalizee = this.getInactive();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Finalizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -345,4 +345,11 @@\n-    \/\/ This is only used from Finalizer to bypass the intrinsic,\n-    \/\/ which might return a null referent, even though it is not\n-    \/\/ null, and would subsequently not finalize the referent\/finalizee.\n-    T getRaw() {\n+    \/**\n+     * Load referent with strong semantics. Treating the referent\n+     * as strong referent is ok when the Reference is inactive,\n+     * because then the referent is switched to strong semantics\n+     * anyway.\n+     *\n+     * This is only used from Finalizer to bypass the intrinsic,\n+     * which might return a null referent, even though it is not\n+     * null, and would subsequently not finalize the referent\/finalizee.\n+     *\/\n+    T getInactive() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}