{"files":[{"patch":"@@ -35,0 +35,1 @@\n+\n@@ -76,1 +77,1 @@\n-          \/\/ Find the longest common substring as namespaces are hierarchical.\n+          \/\/ Find the longest common prefix as namespaces are hierarchical.\n@@ -84,8 +85,3 @@\n-          int last_matching_slash_pos = -1;\n-          for (int i = 0; *root_p == *cgroup_p && *root_p != 0; i++) {\n-            if (*root_p == '\/') {\n-              last_matching_slash_pos = i;\n-            }\n-            root_p++; cgroup_p++;\n-          }\n-          ss.print_raw(_root, last_matching_slash_pos);\n+          int last_slash = find_last_slash_pos(root_p, cgroup_p);\n+          assert(last_slash >= 0, \"not an absolute path?\");\n+          ss.print_raw(_root, last_slash);\n@@ -99,0 +95,15 @@\n+\/\/ Return last index of '\/' in s1 and s2 up to which point paths\n+\/\/ are the same in s1 and s2. -1 otherwise. For example\n+\/\/ returns 4 for s1 = \"\/cat\/dog\" and s2 = \"\/cat\/cow\".\n+int CgroupV1Controller::find_last_slash_pos(const char* s1, const char* s2) {\n+  int last_matching_slash_pos = -1;\n+  for (int i = 0; *s1 == *s2 && *s1 != 0; i++) {\n+    if (*s1 == '\/') {\n+      last_matching_slash_pos = i;\n+    }\n+    s1++; s2++;\n+  }\n+  return last_matching_slash_pos;\n+}\n+\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+  private:\n+    int find_last_slash_pos(const char* s1, const char* s2);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,7 @@\n+typedef struct {\n+  const char* mount_path;\n+  const char* root_path;\n+  const char* cgroup_path;\n+  const char* expected_path;\n+} TestCase;\n+\n@@ -32,0 +39,30 @@\n+  TestCase host = {\n+    \"\/sys\/fs\/cgroup\/memory\",                                             \/\/ mount_path\n+    \"\/\",                                                                 \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\",                     \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\" \/\/ expected_path\n+  };\n+  TestCase container_engine = {\n+    \"\/sys\/fs\/cgroup\/mem\",                            \/\/ mount_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/mem\"                             \/\/ expected_path\n+  };\n+  TestCase prefix_matched_cg = {\n+    \"\/sys\/fs\/cgroup\/memory\",                           \/\/ mount_path\n+    \"\/user.slice\/user-1000.slice\/session-50.scope\",    \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/session-3.scope\",     \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\" \/\/ expected_path\n+  };\n+  TestCase substring_match = {\n+    \"\/sys\/fs\/cgroup\/memory\",                           \/\/ mount_path\n+    \"\/user.slice\/user-1000.slice\",                     \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1001.service\",   \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/user@1001.service\"          \/\/ expected_path\n+  };\n+  TestCase root_only_match = {\n+    \"\/sys\/fs\/cgroup\/m\",                           \/\/ mount_path\n+    \"\/machine.slice\/user-2002.slice\",             \/\/ root_path\n+    \"\/user.sl\/user-3000.slice\/user@3001.service\", \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/m\"                            \/\/ expected_path\n+  };\n@@ -33,25 +70,5 @@\n-  const char* mount_paths[] =     { \"\/sys\/fs\/cgroup\/memory\",\n-                                    \"\/sys\/fs\/cgroup\/memory\", \/* non-matched cg path  *\/\n-                                    \"\/sys\/fs\/cgroup\/mem\",    \/* root matched cg path *\/\n-                                    \"\/sys\/fs\/cgroup\/memory\", \/* substring match      *\/\n-                                    \"\/sys\/fs\/cgroup\/m\"       \/* non-matched cg path  *\/\n-                                  };\n-  const char* root_paths[] =      { \"\/\",\n-                                    \"\/user.slice\/user-1000.slice\/session-50.scope\",  \/* non-matched cg path  *\/\n-                                    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/* root matched cg path *\/\n-                                    \"\/user.slice\/user-1000.slice\",                   \/* substring match *\/\n-                                    \"\/machine.slice\/user-2002.slice\"                 \/* root match only *\/\n-                                  };\n-  const char* cgroup_paths[] =    { \"\/user.slice\/user-1000.slice\/user@1000.service\",\n-                                    \"\/user.slice\/user-1000.slice\/session-3.scope\",   \/* non-matched cg path  *\/\n-                                    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/* root matched cg path *\/\n-                                    \"\/user.slice\/user-1000.slice\/user@1001.service\", \/* substring match *\/\n-                                    \"\/user.sl\/user-3000.slice\/user@3001.service\"     \/* root match only *\/\n-                                  };\n-  const char* expected_cg_paths[] { \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\",\n-                                    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\", \/* closest substring match *\/\n-                                    \"\/sys\/fs\/cgroup\/mem\",                               \/* root matched cg path    *\/\n-                                    \"\/sys\/fs\/cgroup\/memory\/user@1001.service\",          \/* substring match *\/\n-                                    \"\/sys\/fs\/cgroup\/m\"                                  \/* root match only *\/\n-                                  };\n-\n+  TestCase* testCases[] = { &host,\n+                            &container_engine,\n+                            &prefix_matched_cg,\n+                            &substring_match,\n+                            &root_only_match };\n@@ -59,3 +76,4 @@\n-    CgroupV1Controller* ctrl = new CgroupV1Controller((char*)root_paths[i], (char*)mount_paths[i]);\n-    ctrl->set_subsystem_path((char*)cgroup_paths[i]);\n-    ASSERT_STREQ(expected_cg_paths[i], ctrl->subsystem_path());\n+    CgroupV1Controller* ctrl = new CgroupV1Controller( (char*)testCases[i]->root_path,\n+                                                       (char*)testCases[i]->mount_path);\n+    ctrl->set_subsystem_path((char*)testCases[i]->cgroup_path);\n+    ASSERT_STREQ(testCases[i]->expected_path, ctrl->subsystem_path());\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux_cgroups.cpp","additions":46,"deletions":28,"binary":false,"changes":74,"status":"modified"}]}