{"files":[{"patch":"@@ -590,11 +590,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ breakpoint support\n-\n-void os::breakpoint() {\n-  BREAKPOINT;\n-}\n-\n-extern \"C\" void breakpoint() {\n-  \/\/ use debugger to set breakpoint here\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -501,11 +501,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ breakpoint support\n-\n-void os::breakpoint() {\n-  BREAKPOINT;\n-}\n-\n-extern \"C\" void breakpoint() {\n-  \/\/ use debugger to set breakpoint here\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -520,11 +520,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ breakpoint support\n-\n-void os::breakpoint() {\n-  BREAKPOINT;\n-}\n-\n-extern \"C\" void breakpoint() {\n-  \/\/ use debugger to set breakpoint here\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -403,9 +403,0 @@\n-void os::breakpoint() {\n-  DebugBreak();\n-}\n-\n-\/\/ Invoked from the BREAKPOINT Macro\n-extern \"C\" void breakpoint() {\n-  os::breakpoint();\n-}\n-\n@@ -5582,1 +5573,1 @@\n-    \/\/ os::breakpoint() calls DebugBreak(), which causes a breakpoint\n+    \/\/ os::breakpoint() calls __debugbreak(), which causes a breakpoint\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"utilities\/breakpoint.hpp\"\n@@ -351,0 +352,4 @@\n+void os::breakpoint() {\n+  BREAKPOINT;\n+}\n+\n@@ -635,1 +640,1 @@\n-    breakpoint();\n+    BREAKPOINT;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Google and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,14 @@\n-\/\/ If no more specific definition provided, default to calling a\n-\/\/ function that is defined per-platform.  See also os::breakpoint().\n+#include <csignal>\n+\n+\/\/ BREAKPOINT\n+\/\/\n+\/\/ Programatically triggers a breakpoint for debuggers.\n+\n+#if defined(TARGET_COMPILER_gcc)\n+\n+#ifdef __has_builtin\n+#if __has_builtin(__builtin_debugtrap)\n+#define BREAKPOINT __builtin_debugtrap()\n+#endif\n+#endif\n+\n@@ -31,2 +43,31 @@\n-extern \"C\" void breakpoint();\n-#define BREAKPOINT ::breakpoint()\n+#define BREAKPOINT __builtin_trap()\n+#endif\n+\n+#elif defined(TARGET_COMPILER_visCPP)\n+\n+#include <intrin.h>\n+\n+#pragma intrinsic(__debugbreak)\n+\n+#define BREAKPOINT __debugbreak()\n+\n+#elif defined(TARGET_COMPILER_xlc)\n+\n+#if defined(SIGTRAP)\n+\n+#define BREAKPOINT ::raise(SIGTRAP)\n+\n+#elif defined(SIGINT)\n+\n+#define BREAKPOINT ::raise(SIGINT)\n+\n+#else\n+\n+#error Neither SIGTRAP or SIGINT is defined.\n+\n+#endif\n+\n+#else\n+\n+#error Unknown toolchain.\n+\n","filename":"src\/hotspot\/share\/utilities\/breakpoint.hpp","additions":46,"deletions":5,"binary":false,"changes":51,"status":"modified"}]}