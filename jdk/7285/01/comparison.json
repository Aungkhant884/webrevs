{"files":[{"patch":"@@ -43,2 +43,2 @@\n-    assert(!_g1h->is_in_cset(o) || hr->rem_set()->strong_code_roots_list_contains(_nm), \"if o still in collection set then evacuation failed and nm must already be in the remset\");\n-    hr->add_strong_code_root(_nm);\n+    assert(!_g1h->is_in_cset(o) || hr->rem_set()->code_roots_list_contains(_nm), \"if o still in collection set then evacuation failed and nm must already be in the remset\");\n+    hr->add_code_root(_nm);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1045,2 +1045,2 @@\n-  \/\/ Rebuild the strong code root lists for each region\n-  rebuild_strong_code_roots();\n+  \/\/ Rebuild the code root lists for each region\n+  rebuild_code_roots();\n@@ -3345,2 +3345,2 @@\n-      \/\/ HeapRegion::add_strong_code_root_locked() avoids adding duplicate entries.\n-      hr->add_strong_code_root_locked(_nm);\n+      \/\/ HeapRegion::add_code_root_locked() avoids adding duplicate entries.\n+      hr->add_code_root_locked(_nm);\n@@ -3371,1 +3371,1 @@\n-      hr->remove_strong_code_root(_nm);\n+      hr->remove_code_root(_nm);\n@@ -3414,1 +3414,1 @@\n-class RebuildStrongCodeRootClosure: public CodeBlobClosure {\n+class RebuildCodeRootClosure: public CodeBlobClosure {\n@@ -3418,1 +3418,1 @@\n-  RebuildStrongCodeRootClosure(G1CollectedHeap* g1h) :\n+  RebuildCodeRootClosure(G1CollectedHeap* g1h) :\n@@ -3431,2 +3431,2 @@\n-void G1CollectedHeap::rebuild_strong_code_roots() {\n-  RebuildStrongCodeRootClosure blob_cl(this);\n+void G1CollectedHeap::rebuild_code_roots() {\n+  RebuildCodeRootClosure blob_cl(this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1290,1 +1290,1 @@\n-  \/\/ Rebuild the strong code root lists for each region\n+  \/\/ Rebuild the code root lists for each region\n@@ -1292,1 +1292,1 @@\n-  void rebuild_strong_code_roots();\n+  void rebuild_code_roots();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2957,1 +2957,1 @@\n-  _total_remset_bytes(0), _total_strong_code_roots_bytes(0)\n+  _total_remset_bytes(0), _total_code_roots_bytes(0)\n@@ -3017,1 +3017,1 @@\n-  size_t strong_code_roots_bytes = r->rem_set()->strong_code_roots_mem_size();\n+  size_t code_roots_bytes = r->rem_set()->code_roots_mem_size();\n@@ -3026,1 +3026,1 @@\n-  _total_strong_code_roots_bytes += strong_code_roots_bytes;\n+  _total_code_roots_bytes += code_roots_bytes;\n@@ -3047,1 +3047,1 @@\n-                        remset_bytes, remset_type, strong_code_roots_bytes);\n+                        remset_bytes, remset_type, code_roots_bytes);\n@@ -3077,1 +3077,1 @@\n-                         bytes_to_mb(_total_strong_code_roots_bytes));\n+                         bytes_to_mb(_total_code_roots_bytes));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -850,2 +850,2 @@\n-  \/\/ Accumulator for strong code roots memory size\n-  size_t _total_strong_code_roots_bytes;\n+  \/\/ Accumulator for code roots memory size\n+  size_t _total_code_roots_bytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-    hr->rem_set()->clean_strong_code_roots(hr);\n+    hr->rem_set()->clean_code_roots(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-      \/\/ Verify that the strong code root list for this region\n+      \/\/ Verify that the code root list for this region\n@@ -119,1 +119,1 @@\n-      if (!hrrs->strong_code_roots_list_contains(_nm)) {\n+      if (!hrrs->code_roots_list_contains(_nm)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -949,2 +949,2 @@\n-  Tickspan _strong_code_root_scan_time;\n-  Tickspan _strong_code_trim_partially_time;\n+  Tickspan _code_root_scan_time;\n+  Tickspan _code_trim_partially_time;\n@@ -982,2 +982,2 @@\n-    _strong_code_root_scan_time(),\n-    _strong_code_trim_partially_time(),\n+    _code_root_scan_time(),\n+    _code_trim_partially_time(),\n@@ -1000,3 +1000,3 @@\n-      G1EvacPhaseWithTrimTimeTracker timer(_pss, _strong_code_root_scan_time, _strong_code_trim_partially_time);\n-      \/\/ Scan the strong code root list attached to the current region\n-      r->strong_code_roots_do(_pss->closures()->weak_codeblobs());\n+      G1EvacPhaseWithTrimTimeTracker timer(_pss, _code_root_scan_time, _code_trim_partially_time);\n+      \/\/ Scan the code root list attached to the current region\n+      r->code_roots_do(_pss->closures()->weak_codeblobs());\n@@ -1010,2 +1010,2 @@\n-  Tickspan strong_code_root_scan_time() const { return _strong_code_root_scan_time;  }\n-  Tickspan strong_code_root_trim_partially_time() const { return _strong_code_trim_partially_time; }\n+  Tickspan code_root_scan_time() const { return _code_root_scan_time;  }\n+  Tickspan code_root_trim_partially_time() const { return _code_trim_partially_time; }\n@@ -1034,2 +1034,2 @@\n-  p->record_or_add_time_secs(coderoots_phase, worker_id, cl.strong_code_root_scan_time().seconds());\n-  p->add_time_secs(objcopy_phase, worker_id, cl.strong_code_root_trim_partially_time().seconds());\n+  p->record_or_add_time_secs(coderoots_phase, worker_id, cl.code_root_scan_time().seconds());\n+  p->add_time_secs(objcopy_phase, worker_id, cl.code_root_trim_partially_time().seconds());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-    \/\/ size of the strong code roots\n+    \/\/ size of the code roots\n@@ -244,1 +244,1 @@\n-    size_t code_root_mem_sz = hrrs->strong_code_roots_mem_size();\n+    size_t code_root_mem_sz = hrrs->code_roots_mem_size();\n@@ -249,1 +249,1 @@\n-    size_t code_root_elems = hrrs->strong_code_roots_list_length();\n+    size_t code_root_elems = hrrs->code_roots_list_length();\n@@ -303,1 +303,1 @@\n-    \/\/ Strong code root statistics\n+    \/\/ Code root statistics\n@@ -309,2 +309,2 @@\n-                  byte_size_in_proper_unit(max_code_root_rem_set->strong_code_roots_mem_size()),\n-                  proper_unit_for_byte_size(max_code_root_rem_set->strong_code_roots_mem_size()));\n+                  byte_size_in_proper_unit(max_code_root_rem_set->code_roots_mem_size()),\n+                  proper_unit_for_byte_size(max_code_root_rem_set->code_roots_mem_size()));\n@@ -324,3 +324,3 @@\n-                  byte_size_in_proper_unit(max_code_root_rem_set->strong_code_roots_mem_size()),\n-                  proper_unit_for_byte_size(max_code_root_rem_set->strong_code_roots_mem_size()),\n-                  max_code_root_rem_set->strong_code_roots_list_length());\n+                  byte_size_in_proper_unit(max_code_root_rem_set->code_roots_mem_size()),\n+                  proper_unit_for_byte_size(max_code_root_rem_set->code_roots_mem_size()),\n+                  max_code_root_rem_set->code_roots_list_length());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  \/\/ nmethods in the region's strong code roots set. So set G1BarrierNoOptRoots in\n+  \/\/ nmethods in the region's code roots set. So set G1BarrierNoOptRoots in\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SharedClosures.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-                               hr->rem_set()->strong_code_roots_list_length(),\n+                               hr->rem_set()->code_roots_list_length(),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-void HeapRegion::add_strong_code_root(nmethod* nm) {\n+void HeapRegion::add_code_root(nmethod* nm) {\n@@ -309,1 +309,1 @@\n-  hrrs->add_strong_code_root(nm);\n+  hrrs->add_code_root(nm);\n@@ -312,1 +312,1 @@\n-void HeapRegion::add_strong_code_root_locked(nmethod* nm) {\n+void HeapRegion::add_code_root_locked(nmethod* nm) {\n@@ -315,1 +315,1 @@\n-  hrrs->add_strong_code_root_locked(nm);\n+  hrrs->add_code_root_locked(nm);\n@@ -318,1 +318,1 @@\n-void HeapRegion::remove_strong_code_root(nmethod* nm) {\n+void HeapRegion::remove_code_root(nmethod* nm) {\n@@ -320,1 +320,1 @@\n-  hrrs->remove_strong_code_root(nm);\n+  hrrs->remove_code_root(nm);\n@@ -323,1 +323,1 @@\n-void HeapRegion::strong_code_roots_do(CodeBlobClosure* blk) const {\n+void HeapRegion::code_roots_do(CodeBlobClosure* blk) const {\n@@ -325,1 +325,1 @@\n-  hrrs->strong_code_roots_do(blk);\n+  hrrs->code_roots_do(blk);\n@@ -328,1 +328,1 @@\n-class VerifyStrongCodeRootOopClosure: public OopClosure {\n+class VerifyCodeRootOopClosure: public OopClosure {\n@@ -356,1 +356,1 @@\n-  VerifyStrongCodeRootOopClosure(const HeapRegion* hr):\n+  VerifyCodeRootOopClosure(const HeapRegion* hr):\n@@ -366,1 +366,1 @@\n-class VerifyStrongCodeRootCodeBlobClosure: public CodeBlobClosure {\n+class VerifyCodeRootCodeBlobClosure: public CodeBlobClosure {\n@@ -370,1 +370,1 @@\n-  VerifyStrongCodeRootCodeBlobClosure(const HeapRegion* hr) :\n+  VerifyCodeRootCodeBlobClosure(const HeapRegion* hr) :\n@@ -378,1 +378,1 @@\n-        log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has dead nmethod \" PTR_FORMAT \" in its strong code roots\",\n+        log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has dead nmethod \" PTR_FORMAT \" in its code roots\",\n@@ -382,1 +382,1 @@\n-        VerifyStrongCodeRootOopClosure oop_cl(_hr);\n+        VerifyCodeRootOopClosure oop_cl(_hr);\n@@ -385,1 +385,1 @@\n-          log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has nmethod \" PTR_FORMAT \" in its strong code roots with no pointers into region\",\n+          log_error(gc, verify)(\"region [\" PTR_FORMAT \",\" PTR_FORMAT \"] has nmethod \" PTR_FORMAT \" in its code roots with no pointers into region\",\n@@ -400,1 +400,1 @@\n-void HeapRegion::verify_strong_code_roots(VerifyOption vo, bool* failures) const {\n+void HeapRegion::verify_code_roots(VerifyOption vo, bool* failures) const {\n@@ -407,1 +407,1 @@\n-    \/\/ unloading, code cache unloading, etc so the strong code roots\n+    \/\/ unloading, code cache unloading, etc so the code roots\n@@ -409,2 +409,2 @@\n-    \/\/ be consistent until the strong code roots are rebuilt after the\n-    \/\/ actual GC. Skip verifying the strong code roots in this particular\n+    \/\/ be consistent until the code roots are rebuilt after the\n+    \/\/ actual GC. Skip verifying the code roots in this particular\n@@ -417,1 +417,1 @@\n-  size_t strong_code_roots_length = hrrs->strong_code_roots_list_length();\n+  size_t code_roots_length = hrrs->code_roots_list_length();\n@@ -420,1 +420,1 @@\n-  \/\/ on its strong code root list\n+  \/\/ on its code root list\n@@ -422,1 +422,1 @@\n-    if (strong_code_roots_length > 0) {\n+    if (code_roots_length > 0) {\n@@ -424,1 +424,1 @@\n-                            HR_FORMAT_PARAMS(this), strong_code_roots_length);\n+                            HR_FORMAT_PARAMS(this), code_roots_length);\n@@ -431,1 +431,1 @@\n-    if (strong_code_roots_length > 0) {\n+    if (code_roots_length > 0) {\n@@ -433,1 +433,1 @@\n-                            HR_FORMAT_PARAMS(this), strong_code_roots_length);\n+                            HR_FORMAT_PARAMS(this), code_roots_length);\n@@ -439,2 +439,2 @@\n-  VerifyStrongCodeRootCodeBlobClosure cb_cl(this);\n-  strong_code_roots_do(&cb_cl);\n+  VerifyCodeRootCodeBlobClosure cb_cl(this);\n+  code_roots_do(&cb_cl);\n@@ -733,1 +733,1 @@\n-  verify_strong_code_roots(vo, failures);\n+  verify_code_roots(vo, failures);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -575,3 +575,3 @@\n-  void add_strong_code_root(nmethod* nm);\n-  void add_strong_code_root_locked(nmethod* nm);\n-  void remove_strong_code_root(nmethod* nm);\n+  void add_code_root(nmethod* nm);\n+  void add_code_root_locked(nmethod* nm);\n+  void remove_code_root(nmethod* nm);\n@@ -580,2 +580,2 @@\n-  \/\/ the strong code roots list for this region\n-  void strong_code_roots_do(CodeBlobClosure* blk) const;\n+  \/\/ the code roots list for this region\n+  void code_roots_do(CodeBlobClosure* blk) const;\n@@ -586,1 +586,1 @@\n-  \/\/ Verify that the entries on the strong code root list for this\n+  \/\/ Verify that the entries on the code root list for this\n@@ -588,1 +588,1 @@\n-  void verify_strong_code_roots(VerifyOption vo, bool* failures) const;\n+  void verify_code_roots(VerifyOption vo, bool* failures) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-void HeapRegionRemSet::add_strong_code_root(nmethod* nm) {\n+void HeapRegionRemSet::add_code_root(nmethod* nm) {\n@@ -128,1 +128,1 @@\n-          \"should call add_strong_code_root_locked instead. CodeCache_lock->owned_by_self(): %s, is_at_safepoint(): %s\",\n+          \"should call add_code_root_locked instead. CodeCache_lock->owned_by_self(): %s, is_at_safepoint(): %s\",\n@@ -133,1 +133,1 @@\n-    add_strong_code_root_locked(nm);\n+    add_code_root_locked(nm);\n@@ -137,1 +137,1 @@\n-void HeapRegionRemSet::add_strong_code_root_locked(nmethod* nm) {\n+void HeapRegionRemSet::add_code_root_locked(nmethod* nm) {\n@@ -148,1 +148,1 @@\n-void HeapRegionRemSet::remove_strong_code_root(nmethod* nm) {\n+void HeapRegionRemSet::remove_code_root(nmethod* nm) {\n@@ -159,1 +159,1 @@\n-void HeapRegionRemSet::strong_code_roots_do(CodeBlobClosure* blk) const {\n+void HeapRegionRemSet::code_roots_do(CodeBlobClosure* blk) const {\n@@ -163,1 +163,1 @@\n-void HeapRegionRemSet::clean_strong_code_roots(HeapRegion* hr) {\n+void HeapRegionRemSet::clean_code_roots(HeapRegion* hr) {\n@@ -167,1 +167,1 @@\n-size_t HeapRegionRemSet::strong_code_roots_mem_size() {\n+size_t HeapRegionRemSet::code_roots_mem_size() {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    return (strong_code_roots_list_length() == 0) && cardset_is_empty();\n+    return (code_roots_list_length() == 0) && cardset_is_empty();\n@@ -80,1 +80,1 @@\n-    return (strong_code_roots_list_length() == 0) && _card_set.occupancy_less_or_equal_to(occ);\n+    return (code_roots_list_length() == 0) && _card_set.occupancy_less_or_equal_to(occ);\n@@ -131,1 +131,1 @@\n-  \/\/ The actual # of bytes this hr_remset takes up. Also includes the strong code\n+  \/\/ The actual # of bytes this hr_remset takes up. Also includes the code\n@@ -135,2 +135,2 @@\n-      + (sizeof(HeapRegionRemSet) - sizeof(G1CardSet)) \/\/ Avoid double-counting G1CardSet.\n-      + strong_code_roots_mem_size();\n+           + (sizeof(HeapRegionRemSet) - sizeof(G1CardSet)) \/\/ Avoid double-counting G1CardSet.\n+           + code_roots_mem_size();\n@@ -157,3 +157,3 @@\n-  void add_strong_code_root(nmethod* nm);\n-  void add_strong_code_root_locked(nmethod* nm);\n-  void remove_strong_code_root(nmethod* nm);\n+  void add_code_root(nmethod* nm);\n+  void add_code_root_locked(nmethod* nm);\n+  void remove_code_root(nmethod* nm);\n@@ -161,3 +161,2 @@\n-  \/\/ Applies blk->do_code_blob() to each of the entries in\n-  \/\/ the strong code roots list\n-  void strong_code_roots_do(CodeBlobClosure* blk) const;\n+  \/\/ Applies blk->do_code_blob() to each of the entries in _code_roots\n+  void code_roots_do(CodeBlobClosure* blk) const;\n@@ -165,1 +164,1 @@\n-  void clean_strong_code_roots(HeapRegion* hr);\n+  void clean_code_roots(HeapRegion* hr);\n@@ -167,2 +166,2 @@\n-  \/\/ Returns the number of elements in the strong code roots list\n-  size_t strong_code_roots_list_length() const {\n+  \/\/ Returns the number of elements in _code_roots\n+  size_t code_roots_list_length() const {\n@@ -172,1 +171,1 @@\n-  \/\/ Returns true if the strong code roots contains the given\n+  \/\/ Returns true if the code roots contains the given\n@@ -174,1 +173,1 @@\n-  bool strong_code_roots_list_contains(nmethod* nm) {\n+  bool code_roots_list_contains(nmethod* nm) {\n@@ -179,2 +178,2 @@\n-  \/\/ consumed by the strong code roots.\n-  size_t strong_code_roots_mem_size();\n+  \/\/ consumed by the code roots.\n+  size_t code_roots_mem_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"}]}