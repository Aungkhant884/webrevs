{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-  _state = Disabled;\n+  _enabled = false;\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zNUMA_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"gc\/z\/zNUMA.inline.hpp\"\n@@ -30,1 +29,0 @@\n-#include \"runtime\/globals_extension.hpp\"\n@@ -34,16 +32,0 @@\n-static bool numa_memory_id(void* addr, uint32_t* id) {\n-  return ZSyscall::get_mempolicy((int*)id, NULL, 0, addr, MPOL_F_NODE | MPOL_F_ADDR) != -1;\n-}\n-\n-static bool is_numa_supported() {\n-  \/\/ Test if syscall is available\n-  uint32_t dummy = 0;\n-  const bool available = numa_memory_id(&dummy, &dummy);\n-\n-  if (!available && !FLAG_IS_DEFAULT(UseNUMA)) {\n-    warning(\"NUMA support disabled, system call get_mempolicy not available\");\n-  }\n-\n-  return available;\n-}\n-\n@@ -51,5 +33,1 @@\n-  if (!UseNUMA) {\n-    _state = Disabled;\n-  } else {\n-    _state = is_numa_supported() ? Enabled : Unsupported;\n-  }\n+  _enabled = UseNUMA;\n@@ -59,1 +37,1 @@\n-  if (!is_enabled()) {\n+  if (!_enabled) {\n@@ -68,1 +46,1 @@\n-  if (!is_enabled()) {\n+  if (!_enabled) {\n@@ -77,1 +55,1 @@\n-  if (!is_enabled()) {\n+  if (!_enabled) {\n@@ -84,1 +62,1 @@\n-  if (!numa_memory_id((void*)addr, &id)) {\n+  if (ZSyscall::get_mempolicy((int*)&id, NULL, 0, (void*)addr, MPOL_F_NODE | MPOL_F_ADDR) == -1) {\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zNUMA_linux.cpp","additions":6,"deletions":28,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-  _state = Disabled;\n+  _enabled = false;\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zNUMA_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"gc\/z\/zNUMA.inline.hpp\"\n@@ -29,1 +28,1 @@\n-ZNUMA::State ZNUMA::_state;\n+bool ZNUMA::_enabled;\n@@ -35,1 +34,1 @@\n-  if (is_enabled()) {\n+  if (_enabled) {\n@@ -41,10 +40,1 @@\n-  switch (_state) {\n-  case Enabled:\n-    return \"Enabled\";\n-\n-  case Unsupported:\n-    return \"Unsupported\";\n-\n-  default:\n-    return \"Disabled\";\n-  }\n+  return _enabled ? \"Enabled\" : \"Disabled\";\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,7 +31,1 @@\n-  enum State {\n-    Disabled,\n-    Enabled,\n-    Unsupported\n-  };\n-\n-  static State _state;\n+  static bool _enabled;\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  return _state == Enabled;\n+  return _enabled;\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}