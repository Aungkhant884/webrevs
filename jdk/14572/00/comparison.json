{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Comparator;\n@@ -38,0 +39,1 @@\n+import jdk.jfr.StackTrace;\n@@ -58,1 +60,1 @@\n- * @run main\/othervm -javaagent:JavaAgent.jar=foo=bar\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -javaagent:JavaAgent.jar=foo=bar\n@@ -62,1 +64,1 @@\n- * @run main\/othervm -Djdk.attach.allowAttachSelf=true\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -Djdk.attach.allowAttachSelf=true\n@@ -66,1 +68,1 @@\n- * @run main\/othervm -agentlib:jdwp=transport=dt_socket,server=y,address=any,onjcmd=y\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -agentlib:jdwp=transport=dt_socket,server=y,address=any,onjcmd=y\n@@ -71,0 +73,3 @@\n+    @StackTrace(false)\n+    static class RecordingInterval extends Event {\n+    }\n@@ -84,1 +89,1 @@\n-            r.enable(EventNames.JavaAgent);\n+            r.enable(EventNames.JavaAgent).with(\"period\", \"endChunk\");\n@@ -86,0 +91,2 @@\n+            RecordingInterval intervalEvent = new RecordingInterval();\n+            intervalEvent.commit();\n@@ -88,1 +95,4 @@\n-            RecordedEvent e = events.get(0);\n+            events.sort(Comparator.comparing(RecordedEvent::getEndTime));\n+            RecordedEvent interval = events.getFirst();\n+            System.out.println(interval);\n+            RecordedEvent e = events.get(1);\n@@ -94,1 +104,1 @@\n-            if (initializationTime.isAfter(r.getStartTime())) {\n+            if (initializationTime.isAfter(interval.getStartTime())) {\n@@ -103,1 +113,1 @@\n-            r.enable(EventNames.NativeAgent);\n+            r.enable(EventNames.NativeAgent).with(\"period\", \"endChunk\");\n@@ -105,0 +115,2 @@\n+            RecordingInterval intervalEvent = new RecordingInterval();\n+            intervalEvent.commit();\n@@ -107,1 +119,4 @@\n-            RecordedEvent e = events.get(0);\n+            events.sort(Comparator.comparing(RecordedEvent::getEndTime));\n+            RecordedEvent interval = events.getFirst();\n+            System.out.println(interval);\n+            RecordedEvent e = events.get(1);\n@@ -113,1 +128,1 @@\n-            if (initializationTime.isAfter(r.getStartTime())) {\n+            if (initializationTime.isAfter(interval.getStartTime())) {\n@@ -122,1 +137,1 @@\n-            r.enable(EventNames.JavaAgent);\n+            r.enable(EventNames.JavaAgent).with(\"period\", \"endChunk\");\n@@ -124,0 +139,2 @@\n+            RecordingInterval intervalEvent = new RecordingInterval();\n+            intervalEvent.begin();\n@@ -135,0 +152,1 @@\n+            intervalEvent.commit();\n@@ -137,1 +155,4 @@\n-            for (RecordedEvent e : events) {\n+            events.sort(Comparator.comparing(RecordedEvent::getEndTime));\n+            RecordedEvent interval = events.getFirst();\n+            System.out.println(interval);\n+            for (RecordedEvent e : events.subList(1, events.size())) {\n@@ -140,1 +161,1 @@\n-                if (initializationTime.isBefore(r.getStartTime())) {\n+                if (initializationTime.isBefore(interval.getStartTime())) {\n@@ -143,1 +164,1 @@\n-                if (initializationTime.isAfter(r.getStopTime())) {\n+                if (initializationTime.isAfter(interval.getEndTime())) {\n@@ -155,4 +176,4 @@\n-            Events.assertField(events.get(0), \"options\").equal(\"bar=baz\");\n-            Events.assertField(events.get(1), \"options\").equal(null);\n-            Events.assertField(events.get(2), \"options\").equal(\"\");\n-            Events.assertField(events.get(3), \"options\").equal(\"=\");\n+            Events.assertField(events.get(1), \"options\").equal(\"bar=baz\");\n+            Events.assertField(events.get(2), \"options\").equal(null);\n+            Events.assertField(events.get(3), \"options\").equal(\"\");\n+            Events.assertField(events.get(4), \"options\").equal(\"=\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestAgentEvent.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"}]}