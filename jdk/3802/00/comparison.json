{"files":[{"patch":"@@ -344,1 +344,1 @@\n-  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), false);\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1223,1 +1223,1 @@\n-                                     false \/* bool large *\/, (char*)base_address);\n+                                     os::vm_page_size(), (char*)base_address);\n@@ -1272,1 +1272,1 @@\n-                                       false \/* large *\/, (char*)base_address);\n+                                       os::vm_page_size(), (char*)base_address);\n@@ -1274,1 +1274,1 @@\n-                                       false \/* large *\/, (char*)ccs_base);\n+                                       os::vm_page_size(), (char*)ccs_base);\n@@ -1283,1 +1283,1 @@\n-                                     false \/* bool large *\/, (char*) base_address);\n+                                     os::vm_page_size(), (char*) base_address);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-  ReservedCodeSpace rs(rs_size, rs_align, rs_ps > (size_t) os::vm_page_size());\n+  ReservedCodeSpace rs(rs_size, rs_align, rs_ps);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1500,1 +1500,1 @@\n-  size_t page_size = ReservedSpace::actual_reserved_page_size(rs);\n+  size_t page_size = rs.page_size();\n@@ -1592,1 +1592,1 @@\n-  size_t page_size = ReservedSpace::actual_reserved_page_size(heap_rs);\n+  size_t page_size = heap_rs.page_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, rs_align > 0);\n-  const size_t used_page_sz = ReservedSpace::actual_reserved_page_size(rs);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  const size_t used_page_sz = rs.page_size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-    const size_t page_size = ReservedSpace::actual_reserved_page_size(rs);\n+    const size_t page_size = rs.page_size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, rs_align > 0);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  ReservedSpace heap_rs(_byte_map_size, rs_align, false);\n+  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  size_t used_page_size = ReservedSpace::actual_reserved_page_size(heap_rs);\n+  size_t used_page_size = heap_rs.page_size();\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-      ReservedSpace cset_rs(cset_size, cset_align, false, req_addr);\n+      ReservedSpace cset_rs(cset_size, cset_align, os::vm_page_size(), req_addr);\n@@ -310,1 +310,1 @@\n-      ReservedSpace cset_rs(cset_size, cset_align, false);\n+      ReservedSpace cset_rs(cset_size, cset_align, os::vm_page_size());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                      UseLargePages && os::can_commit_large_page_memory());\n+                      os::vm_page_size());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-  const size_t page_size = ReservedSpace::actual_reserved_page_size(rs);\n+  const size_t page_size = rs.page_size();\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -566,1 +566,1 @@\n-                       false \/*large_pages*\/, (char*)a);\n+                       os::vm_page_size(), (char*)a);\n@@ -582,1 +582,1 @@\n-  return ReservedSpace(size, Metaspace::reserve_alignment(), false, (char*)NULL);\n+  return ReservedSpace(size, Metaspace::reserve_alignment(), os::vm_page_size(), (char*)NULL);\n@@ -720,1 +720,1 @@\n-                           false \/* large *\/, (char*)base);\n+                           os::vm_page_size(), (char*)base);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), false);\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,2 +247,1 @@\n-                   false \/\/ large\n-                   );\n+                   os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -829,4 +829,8 @@\n-  bool use_large_pages = UseLargePages && is_aligned(alignment, os::large_page_size());\n-  assert(!UseLargePages\n-      || UseParallelGC\n-      || use_large_pages, \"Wrong alignment to use large pages\");\n+  size_t page_size = os::vm_page_size();\n+  if (UseLargePages && is_aligned(alignment, os::large_page_size())) {\n+    page_size = os::large_page_size();\n+  } else {\n+    \/\/ Parallel is the only collector that might opt out of using large pages\n+    \/\/ for the heap.\n+    assert(!UseLargePages || UseParallelGC , \"Wrong alignment to use large pages\");\n+  }\n@@ -835,1 +839,1 @@\n-  ReservedHeapSpace total_rs(total_reserved, alignment, use_large_pages, AllocateHeapAt);\n+  ReservedHeapSpace total_rs(total_reserved, alignment, page_size, AllocateHeapAt);\n@@ -861,1 +865,1 @@\n-  return ReservedHeapSpace(0, 0, false);\n+  return ReservedHeapSpace(0, 0, os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,2 +53,1 @@\n-  bool large_pages = page_size != (size_t)os::vm_page_size();\n-  initialize(size, alignment, large_pages, NULL, false);\n+  initialize(size, alignment, page_size, NULL, false);\n@@ -62,2 +61,1 @@\n-  bool large_pages = preferred_page_size != (size_t)os::vm_page_size();\n-  if (large_pages) {\n+  if (preferred_page_size != (size_t)os::vm_page_size()) {\n@@ -67,1 +65,1 @@\n-  initialize(size, alignment, large_pages, NULL, false);\n+  initialize(size, alignment, preferred_page_size, NULL, false);\n@@ -70,2 +68,3 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t alignment,\n-                             bool large,\n+ReservedSpace::ReservedSpace(size_t size,\n+                             size_t alignment,\n+                             size_t page_size,\n@@ -73,1 +72,1 @@\n-  initialize(size, alignment, large, requested_address, false);\n+  initialize(size, alignment, page_size, requested_address, false);\n@@ -76,1 +75,1 @@\n-ReservedSpace::ReservedSpace(char* base, size_t size, size_t alignment,\n+ReservedSpace::ReservedSpace(char* base, size_t size, size_t alignment, size_t page_size,\n@@ -80,1 +79,1 @@\n-  initialize_members(base, size, alignment, special, executable);\n+  initialize_members(base, size, alignment, page_size, special, executable);\n@@ -133,2 +132,3 @@\n-static bool use_explicit_large_pages(bool large) {\n-  return !os::can_commit_large_page_memory() && large;\n+static bool use_explicit_large_pages(size_t page_size) {\n+  return !os::can_commit_large_page_memory() &&\n+         page_size != (size_t) os::vm_page_size();\n@@ -195,1 +195,1 @@\n-  initialize_members(NULL, 0, 0, false, false);\n+  initialize_members(NULL, 0, 0, 0, false, false);\n@@ -199,1 +199,1 @@\n-                                       bool special, bool executable) {\n+                                       size_t page_size, bool special, bool executable) {\n@@ -203,0 +203,1 @@\n+  _page_size = page_size;\n@@ -208,1 +209,3 @@\n-void ReservedSpace::reserve(size_t size, size_t alignment, bool large,\n+void ReservedSpace::reserve(size_t size,\n+                            size_t alignment,\n+                            size_t page_size,\n@@ -226,1 +229,1 @@\n-      initialize_members(base, size, alignment, true, executable);\n+      initialize_members(base, size, alignment, os::vm_page_size(), true, executable);\n@@ -230,1 +233,1 @@\n-  } else if (use_explicit_large_pages(large)) {\n+  } else if (use_explicit_large_pages(page_size)) {\n@@ -239,1 +242,1 @@\n-      initialize_members(base, size, alignment, true, executable);\n+      initialize_members(base, size, alignment, page_size, true, executable);\n@@ -243,0 +246,1 @@\n+    page_size = os::vm_page_size();\n@@ -249,1 +253,1 @@\n-    initialize_members(base, size, alignment, false, executable);\n+    initialize_members(base, size, alignment, page_size, false, executable);\n@@ -253,1 +257,3 @@\n-void ReservedSpace::initialize(size_t size, size_t alignment, bool large,\n+void ReservedSpace::initialize(size_t size,\n+                               size_t alignment,\n+                               size_t page_size,\n@@ -263,0 +269,2 @@\n+  assert(page_size >= (size_t) os::vm_page_size(), \"Invalid page size\");\n+  assert(is_power_of_2(page_size), \"Invalid page size\");\n@@ -274,1 +282,1 @@\n-  reserve(size, alignment, large, requested_address, executable);\n+  reserve(size, alignment, page_size, requested_address, executable);\n@@ -286,1 +294,1 @@\n-  ReservedSpace result(base(), partition_size, alignment, special(), executable());\n+  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable());\n@@ -295,1 +303,1 @@\n-                       alignment, special(), executable());\n+                       alignment, page_size(), special(), executable());\n@@ -314,19 +322,0 @@\n-size_t ReservedSpace::actual_reserved_page_size(const ReservedSpace& rs) {\n-  size_t page_size = os::vm_page_size();\n-  if (UseLargePages) {\n-    \/\/ There are two ways to manage large page memory.\n-    \/\/ 1. OS supports committing large page memory.\n-    \/\/ 2. OS doesn't support committing large page memory so ReservedSpace manages it.\n-    \/\/    And ReservedSpace calls it 'special'. If we failed to set 'special',\n-    \/\/    we reserved memory without large page.\n-    if (os::can_commit_large_page_memory() || rs.special()) {\n-      \/\/ An alignment at ReservedSpace comes from preferred page size or\n-      \/\/ heap alignment, and if the alignment came from heap alignment, it could be\n-      \/\/ larger than large pages size. So need to cap with the large page size.\n-      page_size = MIN2(rs.alignment(), os::large_page_size());\n-    }\n-  }\n-\n-  return page_size;\n-}\n-\n@@ -389,1 +378,1 @@\n-                                         bool large,\n+                                         size_t page_size,\n@@ -402,1 +391,1 @@\n-  reserve(size, alignment, large, requested_address, false);\n+  reserve(size, alignment, page_size, requested_address, false);\n@@ -418,1 +407,1 @@\n-                                          bool large) {\n+                                          size_t page_size) {\n@@ -434,1 +423,1 @@\n-    try_reserve_heap(size, alignment, large, attach_point);\n+    try_reserve_heap(size, alignment, page_size, attach_point);\n@@ -485,1 +474,1 @@\n-void ReservedHeapSpace::initialize_compressed_heap(const size_t size, size_t alignment, bool large) {\n+void ReservedHeapSpace::initialize_compressed_heap(const size_t size, size_t alignment, size_t page_size) {\n@@ -511,1 +500,1 @@\n-    try_reserve_heap(size + noaccess_prefix, alignment, large, aligned_heap_base_min_address);\n+    try_reserve_heap(size + noaccess_prefix, alignment, page_size, aligned_heap_base_min_address);\n@@ -537,1 +526,1 @@\n-                        aligned_heap_base_min_address, (char *)UnscaledOopHeapMax, size, alignment, large);\n+                        aligned_heap_base_min_address, (char *)UnscaledOopHeapMax, size, alignment, page_size);\n@@ -569,1 +558,1 @@\n-                        aligned_heap_base_min_address, zerobased_max, size, alignment, large);\n+                        aligned_heap_base_min_address, zerobased_max, size, alignment, page_size);\n@@ -585,1 +574,1 @@\n-      try_reserve_heap(size + noaccess_prefix, alignment, large, attach_point);\n+      try_reserve_heap(size + noaccess_prefix, alignment, page_size, attach_point);\n@@ -592,1 +581,1 @@\n-      initialize(size + noaccess_prefix, alignment, large, NULL, false);\n+      initialize(size + noaccess_prefix, alignment, page_size, NULL, false);\n@@ -597,1 +586,1 @@\n-ReservedHeapSpace::ReservedHeapSpace(size_t size, size_t alignment, bool large, const char* heap_allocation_directory) : ReservedSpace() {\n+ReservedHeapSpace::ReservedHeapSpace(size_t size, size_t alignment, size_t page_size, const char* heap_allocation_directory) : ReservedSpace() {\n@@ -612,1 +601,1 @@\n-    if (use_explicit_large_pages(large) && large_pages_requested()) {\n+    if (use_explicit_large_pages(page_size) && large_pages_requested()) {\n@@ -621,1 +610,1 @@\n-    initialize_compressed_heap(size, alignment, large);\n+    initialize_compressed_heap(size, alignment, page_size);\n@@ -629,1 +618,1 @@\n-    initialize(size, alignment, large, NULL, false);\n+    initialize(size, alignment, page_size, NULL, false);\n@@ -654,2 +643,2 @@\n-                                     bool large) : ReservedSpace() {\n-  initialize(r_size, rs_align, large, \/*requested address*\/ NULL, \/*executable*\/ true);\n+                                     size_t rs_page_size) : ReservedSpace() {\n+  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ NULL, \/*executable*\/ true);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":47,"deletions":58,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  size_t _page_size;\n@@ -48,2 +49,2 @@\n-  ReservedSpace(char* base, size_t size, size_t alignment, bool special,\n-                bool executable);\n+  ReservedSpace(char* base, size_t size, size_t alignment,\n+                size_t page_size, bool special, bool executable);\n@@ -60,1 +61,1 @@\n-                          bool special, bool executable);\n+                          size_t page_size, bool special, bool executable);\n@@ -62,3 +63,2 @@\n-  void initialize(size_t size, size_t alignment, bool large,\n-                  char* requested_address,\n-                  bool executable);\n+  void initialize(size_t size, size_t alignment, size_t page_size,\n+                  char* requested_address, bool executable);\n@@ -66,3 +66,2 @@\n-  void reserve(size_t size, size_t alignment, bool large,\n-               char* requested_address,\n-               bool executable);\n+  void reserve(size_t size, size_t alignment, size_t page_size,\n+               char* requested_address, bool executable);\n@@ -80,1 +79,1 @@\n-  ReservedSpace(size_t size, size_t alignment, bool large,\n+  ReservedSpace(size_t size, size_t alignment, size_t page_size,\n@@ -88,0 +87,1 @@\n+  size_t page_size()       const { return _page_size; }\n@@ -110,2 +110,0 @@\n-\n-  static size_t actual_reserved_page_size(const ReservedSpace& rs);\n@@ -128,1 +126,1 @@\n-  void try_reserve_heap(size_t size, size_t alignment, bool large,\n+  void try_reserve_heap(size_t size, size_t alignment, size_t page_size,\n@@ -132,2 +130,2 @@\n-                         char *upper_bound, size_t size, size_t alignment, bool large);\n-  void initialize_compressed_heap(const size_t size, size_t alignment, bool large);\n+                         char *upper_bound, size_t size, size_t alignment, size_t page_size);\n+  void initialize_compressed_heap(const size_t size, size_t alignment, size_t page_size);\n@@ -140,1 +138,1 @@\n-  ReservedHeapSpace(size_t size, size_t forced_base_alignment, bool large, const char* heap_allocation_directory = NULL);\n+  ReservedHeapSpace(size_t size, size_t forced_base_alignment, size_t page_size, const char* heap_allocation_directory = NULL);\n@@ -151,1 +149,1 @@\n-  ReservedCodeSpace(size_t r_size, size_t rs_align, bool large);\n+  ReservedCodeSpace(size_t r_size, size_t rs_align, size_t page_size);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-  ReservedHeapSpace rhs(100 * granularity, granularity, false);\n+  ReservedHeapSpace rhs(100 * granularity, granularity, os::vm_page_size());\n@@ -281,1 +281,1 @@\n-  ReservedHeapSpace rhs(reserved_space_size * granularity, granularity, false);\n+  ReservedHeapSpace rhs(reserved_space_size * granularity, granularity, os::vm_page_size());\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-\n-    ReservedSpace rs(size, alignment, UseLargePages, (char *) NULL);\n+    size_t page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n+    ReservedSpace rs(size, alignment, page_size, (char *) NULL);\n@@ -107,0 +107,1 @@\n+    size_t page_size = large ? os::large_page_size() : os::vm_page_size();\n@@ -108,1 +109,1 @@\n-    ReservedSpace rs(size, alignment, large);\n+    ReservedSpace rs(size, alignment, page_size);\n@@ -222,1 +223,1 @@\n-                             \/* large *\/ false);\n+                             os::vm_page_size());\n@@ -301,1 +302,1 @@\n-  ReservedSpace reserved(large_page_size, large_page_size, true);\n+  ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n@@ -367,1 +368,1 @@\n-\n+    size_t page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n@@ -370,1 +371,1 @@\n-                     UseLargePages, \/\/ large\n+                     page_size, \/\/ page size\n@@ -412,0 +413,1 @@\n+    size_t page_size = large ? os::large_page_size() : os::vm_page_size();\n@@ -413,1 +415,1 @@\n-    ReservedSpace rs(size, alignment, large);\n+    ReservedSpace rs(size, alignment, page_size);\n@@ -522,1 +524,1 @@\n-                           \/* large *\/ false);\n+                           os::vm_page_size());\n@@ -577,1 +579,1 @@\n-    ReservedSpace reserved(large_page_size, large_page_size, true);\n+    ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"}]}