{"files":[{"patch":"@@ -158,0 +158,1 @@\n+  NativeCall* call = NULL;\n@@ -160,1 +161,1 @@\n-      break;\n+      return;\n@@ -165,1 +166,1 @@\n-      NativeCall* call = nativeCall_at(_instructions->start() + pc_offset);\n+      call = nativeCall_at(_instructions->start() + pc_offset);\n@@ -175,1 +176,1 @@\n-      NativeCall* call = nativeCall_at(_instructions->start() + pc_offset);\n+      call = nativeCall_at(_instructions->start() + pc_offset);\n@@ -183,1 +184,1 @@\n-      NativeCall* call = nativeCall_at(_instructions->start() + pc_offset);\n+      call = nativeCall_at(_instructions->start() + pc_offset);\n@@ -191,1 +192,4 @@\n-      break;\n+      return;\n+  }\n+  if (os::is_MP() && !call->is_displacement_aligned()) {\n+    JVMCI_ERROR(\"unaligned call displacement for call at offset %d\", pc_offset);\n","filename":"src\/hotspot\/cpu\/x86\/jvmciCodeInstaller_x86.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -263,0 +263,4 @@\n+bool NativeCall::is_displacement_aligned() {\n+  return ((uintptr_t)displacement_address() + 0) \/ cache_line_size ==\n+         ((uintptr_t)displacement_address() + 3) \/ cache_line_size;\n+}\n@@ -285,2 +289,1 @@\n-  bool is_aligned = ((uintptr_t)displacement_address() + 0) \/ cache_line_size ==\n-                    ((uintptr_t)displacement_address() + 3) \/ cache_line_size;\n+  bool is_aligned = is_displacement_aligned();\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+  bool  is_displacement_aligned();\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}