{"files":[{"patch":"@@ -37,1 +37,1 @@\n-    private static final boolean hasDynamicLoaderCache = OperatingSystem.version()\n+    private static final boolean hasDynamicLoaderCache = Version.current()\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Locale;\n@@ -83,1 +84,2 @@\n-    private static final OperatingSystem CURRENT_OS = initOS(PlatformProps.CURRENT_OS_STRING);\n+    \/\/ The current OperatingSystem\n+    private static final OperatingSystem CURRENT_OS = initOS();\n@@ -129,30 +131,2 @@\n-    private static OperatingSystem initOS(String osName) {\n-        \/\/ Too early to use Locale conversions, manually do uppercase\n-        StringBuilder sb = new StringBuilder(osName);\n-        for (int i = 0; i < sb.length(); i++) {\n-            char ch = sb.charAt(i);\n-            if (ch >= 'a' && ch <= 'z') {\n-                sb.setCharAt(i, (char)(ch - ('a' - 'A')));  \/\/ Map lower case down to uppercase\n-            }\n-        }\n-        osName = sb.toString();\n-        return OperatingSystem.valueOf(osName);\n-    }\n-\n-    \/**\n-     * {@return the operating system version with major, minor, micro}\n-     *\/\n-    public static Version version() {\n-        return CURRENT_VERSION;\n-    }\n-\n-    \/\/ Parse and save the current version\n-    private static final Version CURRENT_VERSION = initVersion();\n-\n-    private static Version initVersion() {\n-        final String osVer = StaticProperty.osVersion();\n-        try {\n-            return Version.parse(osVer);\n-        } catch (IllegalArgumentException iae) {\n-            throw new InternalError(\"os.version malformed: \" + osVer, iae);\n-        }\n+    private static OperatingSystem initOS() {\n+        return OperatingSystem.valueOf(PlatformProps.CURRENT_OS_STRING.toUpperCase(Locale.ROOT));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+    \/\/ Parse and save the current OS version\n+    private static final Version CURRENT_VERSION = initVersion();\n+\n@@ -43,0 +46,19 @@\n+    \/*\n+     * Initialize the current Version from the os.version system property\n+     *\/\n+    private static Version initVersion() {\n+        final String osVer = StaticProperty.osVersion();\n+        try {\n+            return Version.parse(osVer);\n+        } catch (IllegalArgumentException iae) {\n+            throw new InternalError(\"os.version malformed: \" + osVer, iae);\n+        }\n+    }\n+\n+    \/**\n+     * {@return the current operating system version}\n+     *\/\n+    public static Version current() {\n+        return CURRENT_VERSION;\n+    }\n+\n@@ -104,1 +126,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Version.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        Version ver = OperatingSystem.version();\n+        Version ver = Version.current();\n","filename":"test\/jdk\/jdk\/internal\/util\/OSTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}