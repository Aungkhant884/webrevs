{"files":[{"patch":"@@ -2215,1 +2215,1 @@\n-void Node::verify(Node* n, int verify_depth) {\n+void Node::verify(int verify_depth, VectorSet& visited, Node_List& worklist) {\n@@ -2217,5 +2217,0 @@\n-  ResourceMark rm;\n-  VectorSet old_space;\n-  VectorSet new_space;\n-  Node_List worklist;\n-  worklist.push(n);\n@@ -2223,1 +2218,1 @@\n-  uint last_index_on_current_depth = 0;\n+  uint last_index_on_current_depth = worklist.size() - 1;\n@@ -2228,1 +2223,0 @@\n-\n@@ -2230,1 +2224,1 @@\n-    n = worklist[list_index];\n+    Node* n = worklist[list_index];\n@@ -2239,2 +2233,3 @@\n-    for (uint i = 0; i < n->len(); i++) {\n-      Node* x = n->in(i);\n+    uint in_len = n->len();\n+    for (uint i = 0; i < in_len; i++) {\n+      Node* x = n->_in[i];\n@@ -2247,3 +2242,13 @@\n-      int cnt = 0;\n-      for (uint j = 0; j < n->len(); j++) {\n-        if (n->in(j) == x) {\n+      int cnt = 1;\n+      for (uint j = 0; j < i; j++) {\n+        if (n->_in[j] == x) {\n+          cnt++;\n+          break;\n+        }\n+      }\n+      if (cnt == 2) {\n+        \/\/ x is already checked as n's previous input, skip its duplicated def-use count checking\n+        continue;\n+      }\n+      for (uint j = i + 1; j < in_len; j++) {\n+        if (n->_in[j] == x) {\n@@ -2263,5 +2268,1 @@\n-      \/\/ Contained in new_space or old_space?\n-      VectorSet* v = C->node_arena()->contains(x) ? &new_space : &old_space;\n-      \/\/ Check for visited in the proper space. Numberings are not unique\n-      \/\/ across spaces so we need a separate VectorSet for each space.\n-      if (add_to_worklist && !v->test_set(x->_idx)) {\n+      if (add_to_worklist && !visited.test_set(x->_idx)) {\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1205,1 +1205,1 @@\n-  static void verify(Node* n, int verify_depth);\n+  static void verify(int verify_depth, VectorSet& visited, Node_List& worklist);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1024,0 +1024,4 @@\n+    ResourceMark rm;\n+    VectorSet visited;\n+    Node_List worklist;\n+\n@@ -1028,1 +1032,3 @@\n-      Node::verify(C->root(), -1);\n+      worklist.push(C->root());\n+      Node::verify(-1, visited, worklist);\n+      return;\n@@ -1041,1 +1047,3 @@\n-      Node::verify(n, 4);\n+      if (!visited.test_set(n->_idx)) {\n+        worklist.push(n);\n+      }\n@@ -1043,0 +1051,1 @@\n+    Node::verify(4, visited, worklist);\n@@ -1241,1 +1250,1 @@\n-   assert(!_table.find_index(n->_idx), \"found duplicate entry in table\");\n+    assert(!_table.find_index(n->_idx), \"found duplicate entry in table\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n@@ -26,1 +27,1 @@\n- *\n+ * @requires vm.debug == true & vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TraceIterativeGVN.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}