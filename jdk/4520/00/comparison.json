{"files":[{"patch":"@@ -1780,0 +1780,6 @@\n+            \/\/ Try to clear the kernel buffer to avoid TCP connection resets.\n+            if (conContext.inputRecord instanceof SSLSocketInputRecord &&\n+                isConnected) {\n+                ((SSLSocketInputRecord)(conContext.inputRecord)).deplete(false);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Azul, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/\n+\/\/ Please run in othervm mode.  SunJSSE does not support dynamic system\n+\/\/ properties, no way to re-use system properties in samevm\/agentvm mode.\n+\/\/\n+\n+\/*\n+ * @test\n+ * @bug 8268965\n+ * @summary Socket reset issue for TLS socket close\n+ * @run main\/othervm -Djdk.net.usePlainSocketImpl=true SSLSocketReset\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.*;\n+import java.net.*;\n+\n+public class SSLSocketReset {\n+\n+    public static void main(String[] args){\n+        ServerThread serverThread = null;\n+        Exception clientException = null;\n+        try {\n+            SSLServerSocketFactory sslserversocketfactory =\n+                    SSLContext.getDefault().getServerSocketFactory();\n+            SSLServerSocket sslServerSocket =\n+                    (SSLServerSocket) sslserversocketfactory.createServerSocket(0);\n+            serverThread = new ServerThread(sslServerSocket);\n+            serverThread.start();\n+            try {\n+                Socket socket = new Socket(sslServerSocket.getInetAddress(), sslServerSocket.getLocalPort());\n+                DataInputStream in = new DataInputStream(socket.getInputStream());\n+                DataOutputStream out = new DataOutputStream(socket.getOutputStream());\n+\n+                String msg = \"Hello\";\n+                out.writeUTF(msg);\n+                out.flush();\n+                msg = in.readUTF();\n+            } catch(Exception e) {\n+                clientException = e;\n+                e.printStackTrace();\n+            }\n+            serverThread.join();\n+        } catch(Exception e) {\n+            throw new RuntimeException(\"Fails to start SSL server\");\n+        }\n+        if (serverThread.exception instanceof SSLException &&\n+                serverThread.exception.getMessage().equals(\"Unsupported or unrecognized SSL message\") &&\n+                !(clientException instanceof SocketException &&\n+                clientException.getMessage().equals(\"Connection reset\"))) {\n+                System.out.println(\"Test PASSED\");\n+        } else {\n+            throw new RuntimeException(\"TCP connection reset\");\n+        }\n+    }\n+\n+    \/\/ Thread handling the server socket\n+    private static class ServerThread extends Thread {\n+        private SSLServerSocket sslServerSocket = null;\n+        private SSLSocket sslSocket = null;\n+        Exception exception;\n+\n+        ServerThread(SSLServerSocket sslServerSocket){\n+            this.sslServerSocket = sslServerSocket;\n+        }\n+\n+        public void run(){\n+            try {\n+                SSLSocket sslsocket = null;\n+                while (true) {\n+                    sslsocket = (SSLSocket) sslServerSocket.accept();\n+                    DataInputStream in = new DataInputStream(sslsocket.getInputStream());\n+                    DataOutputStream out = new DataOutputStream(sslsocket.getOutputStream());\n+                    String string;\n+                    while ((string = in.readUTF()) != null) {\n+                        out.writeUTF(string);\n+                        out.flush();\n+                    }\n+                }\n+            } catch(Exception e) {\n+                exception = e;\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketReset.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}