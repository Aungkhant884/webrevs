{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,2 +217,0 @@\n-  const int nbytes_save = (5 + 8) * BytesPerWord;\n-\n@@ -241,2 +239,1 @@\n-  __ push_frame_abi160(nbytes_save); \/\/ Will use Z_R0 as tmp.\n-  __ save_volatile_regs(Z_SP, frame::z_abi_160_size, true, false);\n+  __ push_frame_abi160(0); \/\/ Will use Z_R0 as tmp.\n@@ -247,1 +244,0 @@\n-  __ restore_volatile_regs(Z_SP, frame::z_abi_160_size, true, false);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/classLoaderData.hpp\"\n@@ -35,1 +34,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -152,44 +150,0 @@\n-\n-void BarrierSetAssembler::c2i_entry_barrier(MacroAssembler* masm) {\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n-  Label bad_call, skip_barrier;\n-\n-  Register Rtmp1, Rtmp2, Rtmp3;\n-  Rtmp1 = Z_R1_scratch;\n-  Rtmp2 = Z_R7;\n-  Rtmp3 = Z_R8;\n-\n-  __ block_comment(\"c2i_entry_barrier (c2i_entry_barrier) {\");\n-\n-  \/\/ Fast path: If no method is given, the call is definitely bad.\n-  __ z_cfi(Z_method, 0);\n-  __ z_bre(bad_call);\n-\n-  \/\/ Load class loader data to determine whether the method's holder is concurrently unloading.\n-  __ load_method_holder(Rtmp1, Z_method);\n-  __ z_lg(Rtmp1, in_bytes(InstanceKlass::class_loader_data_offset()), Rtmp1);\n-\n-  \/\/ Fast path: If class loader is strong, the holder cannot be unloaded.\n-  __ z_llgf(Rtmp2, in_bytes(ClassLoaderData::keep_alive_offset()), Rtmp1);\n-  __ z_cfi(Rtmp2, 0);\n-  __ z_brne(skip_barrier);\n-\n-  \/\/ Class loader is weak. Determine whether the holder is still alive.\n-  __ z_lg(Rtmp2, in_bytes(ClassLoaderData::holder_offset()), Rtmp1);\n-  __ resolve_weak_handle(Address(Rtmp2), Rtmp2, Rtmp1, Rtmp3);\n-  __ z_cfi(Rtmp2, 0);\n-  __ z_brne(skip_barrier);\n-\n-  __ bind(bad_call);\n-\n-  __ load_const_optimized(Rtmp1, SharedRuntime::get_handle_wrong_method_stub());\n-  __ z_br(Rtmp1); \/\/ Does not return\n-\n-  __ bind(skip_barrier);\n-\n-  __ block_comment(\"} c2i_entry_barrier (c2i_entry_barrier)\");\n-}\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-  virtual void c2i_entry_barrier(MacroAssembler* masm);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4191,11 +4191,0 @@\n-void MacroAssembler::resolve_weak_handle(const Address& addr, Register result, Register tmp1, Register tmp2) {\n-  Label resolved;\n-\n-  \/\/ A null weak handle resolves to null.\n-  z_cfi(result, 0);\n-  z_bre(resolved);\n-\n-  access_load_at(T_OBJECT, IN_NATIVE | ON_PHANTOM_OOP_REF, addr, result, tmp1, tmp2);\n-  bind(resolved);\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -814,2 +814,0 @@\n-  void resolve_weak_handle(const Address& addr, Register result, Register tmp1, Register tmp2);\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2382,3 +2382,0 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->c2i_entry_barrier(masm);\n-\n@@ -2387,2 +2384,1 @@\n-  return AdapterHandlerLibrary::new_entry(fingerprint, i2c_entry, c2i_entry,\n-                                          c2i_unverified_entry, c2i_no_clinit_check_entry);\n+  return AdapterHandlerLibrary::new_entry(fingerprint, i2c_entry, c2i_entry, c2i_unverified_entry, c2i_no_clinit_check_entry);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}