{"files":[{"patch":"@@ -33,1 +33,2 @@\n-<P>There are a few standard system properties used to\n+<p>\n+There are a few standard system properties used to\n@@ -41,1 +42,2 @@\n-<P>If there is no special note, a property value is checked every time it is used.<\/P>\n+<p>\n+If there is no special note, a property value is checked every time it is used.<\/P>\n@@ -243,0 +245,52 @@\n+<a id=\"Unixdomain\"><\/a>\n+<H2>Unix domain sockets<\/H2>\n+<p>\n+Calling {@link java.nio.channels.ServerSocketChannel#bind(SocketAddress,int) ServerSocketChannel.bind}\n+with a {@code null} address parameter will bind to an <i>automatically assigned<\/i> socket address.\n+For Unix domain sockets, this means a unique path in some predefined system temporary directory.\n+<P>There are a number of system (and networking) properties that affect this behavior.\n+<p>\n+Bearing in mind that Unix domain socket addresses are limited in length to approximately 100 \n+bytes (depending on the platform), it is important to ensure that the temporary directory's name\n+together with the filename used for the socket (currently a name similar to\n+{@code socket_1679697142}) does not exceed this limit. The following properties\n+can be used to control the selection of this directory:\n+<p>\n+<ul>\n+\t<li><p><b>{@systemProperty jdk.net.unixdomain.tmpdir}<\/b> This can be set as \n+\ta networking property in {@code conf\/net.properties} If set, this specifies the \n+\tdirectory to use for automatically bound server socket addresses. On some platforms,\n+\t(eg some Unix systems) this will have a predefined default value. On others,\n+\t(eg Windows) there is no default value. Either way, it is always possible\n+\tto override the networking property with a system property of the same name\n+\tset on the command line. If neither of the networking nor system property\n+\tare set, then some systems (eg Windows)  may check a commonly used environment \n+\tvariable as temporary directory.\n+\t<li><p><b>{@systemProperty java.io.tmpdir}<\/b> If the previous step fails to locate\n+\ta directory to use, then the directory identified by the system property\n+\t{@code java.io.tmpdir} is used.\n+<\/ul>\n+More information about the platform specific behavior can be seen in the \n+{@code conf\/net.properties} configuration file.\n+<p>\n+<i>Implicit<\/i> binding of {@link java.nio.channels.SocketChannel SocketChannel}s\n+<p>\n+If a client socket is connected to a remote destination without calling {@code bind} first,\n+then the socket is <i>implicitly<\/i> bound. In this case, <i>Unix domain<\/i> sockets \n+are <i>unnamed<\/i> (ie. their path is empty). This behavior is not affected by any\n+system or networking properties.\n+<p>\n+<a id=\"EnhancedExceptions\"><\/a>\n+<H2>Enhanced exception messages<\/H2>\n+By default, for security reasons, exception messages do not include potentially sensitive\n+security information such as hostnames or Unix domain socket address paths.\n+The following property can be used to relax this restriction, for debugging and other\n+purposes.\n+<ul>\n+\t<li><p><b>{@systemProperty jdk.includeInExceptions}<\/b> This is typically set to\n+\ta comma separated list of keywords that refer to exception types whose messages\n+\tmay be enhanced with more detailed information. If the value includes the string\n+\t{@code hostInfo} then socket addresses will be included in exception message\n+\ttexts (eg hostnames, Unix domain socket address paths).\n+<\/ul>\n+\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -255,1 +255,5 @@\n-     * not less than 100 bytes.\n+     * not less than 100 bytes. This limitation also applies to <i>automatically<\/i>\n+     * bound server socket channels. See the <i>Unix domain<\/i>\n+     * <a href=\"..\/..\/net\/doc-files\/net-properties.html#Unixdomain\">networking\n+     * properties<\/a> that can be used to select the temporary directory where\n+     * these sockets are created.\n@@ -351,3 +355,6 @@\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the remote endpoint\n-     *          of the new connection\n+     *          If a security manager has been installed and this\n+     *          channel is bound to an {@link InetSocketAddress}\n+     *          and the security manager denies access to the remote endpoint\n+     *          of the new connection, or if this channel is bound to a\n+     *          {@link UnixDomainSocketAddress} and the security manager\n+     *          denies {@link NetPermission}{@code (\"accessUnixDomainSocket\")}\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/ServerSocketChannel.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -154,0 +154,3 @@\n+                try (final SocketChannel peer = server.accept()) {\n+                    \/\/ Should succeed\n+                }\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}