{"files":[{"patch":"@@ -387,3 +387,0 @@\n-  product(bool, InsertMemBarAfterArraycopy, true,                           \\\n-          \"Insert memory barrier after arraycopy call\")                     \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -714,1 +714,1 @@\n-  } else if (InsertMemBarAfterArraycopy) {\n+  } else {\n@@ -1104,3 +1104,0 @@\n-    RegionNode* slow_region = new RegionNode(1);\n-    transform_later(slow_region);\n-\n@@ -1179,9 +1176,0 @@\n-\n-    \/\/ Do not let reads from the destination float above the arraycopy.\n-    \/\/ Since we cannot type the arrays, we don't know which slices\n-    \/\/ might be affected.  We could restrict this barrier only to those\n-    \/\/ memory slices which pertain to array elements--but don't bother.\n-    if (!InsertMemBarAfterArraycopy) {\n-      \/\/ (If InsertMemBarAfterArraycopy, there is already one in place.)\n-      insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);\n-    }\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -556,0 +556,1 @@\n+  { \"InsertMemBarAfterArraycopy\",    JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}