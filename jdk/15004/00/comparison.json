{"files":[{"patch":"@@ -5216,0 +5216,12 @@\n+\n+                    case ENUM_CONSTANT -> {\n+                        var field = (VarSymbol)enclosed;\n+                        if (field.isEnum()) {\n+                            JCVariableDecl decl = (JCVariableDecl) TreeInfo.declarationFor(field, p);\n+                            if (decl.init instanceof JCNewClass nc && nc.def != null) {\n+                                ClassSymbol enumConstantType = nc.def.sym;\n+                                visitTypeAsEnum(enumConstantType, p);\n+                            }\n+                        }\n+                    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,18 @@\n+EnumExternClassBody.java:25:25: compiler.warn.ineffectual.extern.method.enum: readExternal\n+EnumExternClassBody.java:30:25: compiler.warn.ineffectual.extern.method.enum: writeExternal\n+EnumExternClassBody.java:35:38: compiler.warn.ineffectual.serial.field.enum: serialVersionUID\n+EnumExternClassBody.java:36:53: compiler.warn.ineffectual.serial.field.enum: serialPersistentFields\n+EnumExternClassBody.java:38:25: compiler.warn.ineffectual.serial.method.enum: writeObject\n+EnumExternClassBody.java:42:27: compiler.warn.ineffectual.serial.method.enum: writeReplace\n+EnumExternClassBody.java:46:25: compiler.warn.ineffectual.serial.method.enum: readObject\n+EnumExternClassBody.java:51:25: compiler.warn.ineffectual.serial.method.enum: readObjectNoData\n+EnumExternClassBody.java:55:27: compiler.warn.ineffectual.serial.method.enum: readResolve\n+EnumExternClassBody.java:66:21: compiler.warn.ineffectual.extern.method.enum: readExternal\n+EnumExternClassBody.java:71:21: compiler.warn.ineffectual.extern.method.enum: writeExternal\n+EnumExternClassBody.java:83:25: compiler.warn.ineffectual.extern.method.enum: readExternal\n+EnumExternClassBody.java:88:25: compiler.warn.ineffectual.extern.method.enum: writeExternal\n+EnumExternClassBody.java:101:25: compiler.warn.ineffectual.extern.method.enum: readExternal\n+EnumExternClassBody.java:106:25: compiler.warn.ineffectual.extern.method.enum: writeExternal\n+EnumExternClassBody.java:112:30: compiler.warn.ineffectual.extern.method.enum: readExternal\n+EnumExternClassBody.java:113:30: compiler.warn.ineffectual.extern.method.enum: writeExternal\n+17 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/ClassBody.out","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8312415\n+ * @compile\/ref=ClassBody.out -XDrawDiagnostics -Xlint:serial EnumExternClassBody.java\n+ * @compile\/ref=empty.out     -XDrawDiagnostics               EnumExternClassBody.java\n+ *\/\n+\n+import java.io.*;\n+\n+\/*\n+ * Verify warnings are generated as appropriate for enum constants\n+ * with specialized class bodies.\n+ *\/\n+class EnumExternClassBody {\n+\n+    \/*\n+     * Define externalization methods both in the enum class and a\n+     * specialized enum constant.\n+     *\/\n+    private static enum ColorExtern1 implements Externalizable {\n+        RED(  0xFF_00_00),\n+        GREEN(0x00_FF_00),\n+        BLUE( 0x00_00_FF) {\n+           @Override\n+            public void readExternal(ObjectInput in) {\n+                throw new RuntimeException();\n+            }\n+\n+           @Override\n+            public void writeExternal(ObjectOutput out) throws IOException {\n+                throw new RuntimeException();\n+            }\n+\n+           \/\/ Look for serialization members too\n+           private static final long serialVersionUID = 42;\n+           private static final ObjectStreamField[] serialPersistentFields = {};\n+\n+           private void writeObject(ObjectOutputStream stream) throws IOException {\n+                throw new RuntimeException();\n+           }\n+\n+           private Object writeReplace() throws ObjectStreamException {\n+               return null;\n+           }\n+\n+           private void readObject(ObjectInputStream stream)\n+               throws IOException, ClassNotFoundException {\n+                throw new RuntimeException();\n+           }\n+\n+           private void readObjectNoData() throws ObjectStreamException {\n+               return;\n+           }\n+\n+           private Object readResolve() throws ObjectStreamException {\n+               return null;\n+           }\n+        };\n+\n+        int rgb;\n+        private ColorExtern1(int rgb) {\n+            this.rgb = rgb;\n+        }\n+\n+        @Override\n+        public void readExternal(ObjectInput in) {\n+            throw new RuntimeException();\n+        }\n+\n+        @Override\n+        public void writeExternal(ObjectOutput out) throws IOException {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    \/*\n+     * Define externalization methods only on specialized enum\n+     * constants.\n+     *\/\n+    private static enum ColorExtern2 implements Externalizable {\n+        CYAN {\n+           @Override\n+            public void readExternal(ObjectInput in) {\n+                throw new RuntimeException();\n+            }\n+\n+           @Override\n+            public void writeExternal(ObjectOutput out) throws IOException {\n+                throw new RuntimeException();\n+            }\n+        };\n+    }\n+\n+    \/*\n+     * Define externalization methods only on specialized enum\n+     * constants.\n+     *\/\n+    private static enum ColorExtern3 implements Externalizable {\n+        MAGENTA {\n+           @Override\n+            public void readExternal(ObjectInput in) {\n+                throw new RuntimeException();\n+            }\n+\n+           @Override\n+            public void writeExternal(ObjectOutput out) throws IOException {\n+                throw new RuntimeException();\n+            }\n+        };\n+\n+        \/\/ Acceptable to have ineffectual warnings for these abstract methods\n+        public abstract void readExternal(ObjectInput in);\n+        public abstract void writeExternal(ObjectOutput out) throws IOException ;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/EnumExternClassBody.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}