{"files":[{"patch":"@@ -571,1 +571,1 @@\n-            dx = 1.0d;\n+            return;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Stroker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Pass if app exits without error code\n+ * @bug 8264999\n+ *\/\n+\n+import java.awt.*;\n+import java.io.*;\n+import java.awt.geom.*;\n+import javax.imageio.*;\n+import java.awt.image.*;\n+\n+\/**\n+ * This tests redundant line segments. That is: if you draw a line from A to B, and then a line from\n+ * B to B, then the expected behavior is for the last redundant segment to NOT affect the miter stroke.\n+ *\/\n+public class JoinMiterRedundantLineSegmentsTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        boolean failed = false;\n+\n+        \/\/ we'll run several scenarios just to be safe:\n+\n+        boolean[] booleans = new boolean[] {false, true};\n+        for (boolean strokeHint_pure : booleans) {\n+            for (boolean createStrokedShape : booleans) {\n+                for (boolean closePath : booleans) {\n+\n+                    BufferedImage expected = null;\n+                    BufferedImage actual = null;\n+                    try {\n+                        expected = createImage(false, strokeHint_pure, createStrokedShape, closePath);\n+                        actual = createImage(true, strokeHint_pure, createStrokedShape, closePath);\n+                        assertEquals(expected, actual);\n+                    } catch (RuntimeException e) {\n+                        String id = strokeHint_pure+\"-\"+createStrokedShape+\"-\"+closePath;\n+                        if (expected != null) {\n+                            File file = new File(\"JoinMiterTest2-\" + id + \"-expected.png\");\n+                            System.err.println(\"Failure: \"+file.getAbsolutePath());\n+                            ImageIO.write(expected, \"png\", file);\n+                        }\n+                        if (actual != null) {\n+                            File file = new File(\"JoinMiterTest2-\" + id + \"-actual.png\");\n+                            System.err.println(\"Failure: \"+file.getAbsolutePath());\n+                            ImageIO.write(actual, \"png\", file);\n+                        }\n+                        e.printStackTrace();\n+                        failed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (failed)\n+            System.exit(1);\n+    }\n+\n+    \/**\n+     * @param addRedundantPoints add PathIterator segments that result in redundant SEG_LINETO instructions. When true\n+     *                           this may also include quadratic and cubic segments that should degenerate into lines.\n+     * @param useHintPure if true we render the stroke using RenderingHints.VALUE_STROKE_PURE\n+     * @param createStrokedShape if true we use graphics.fill(BasicStroke#createStrokedShape(path)). If false\n+     *                           we use graphics.draw(path)\n+     * @param closePath if true we close subpaths (once we make sure they return to their starting location)\n+     * @return an image we compare against to determine if this test passes or fails.\n+     * @throws Exception\n+     *\/\n+    private static BufferedImage createImage(boolean addRedundantPoints, boolean useHintPure, boolean createStrokedShape, boolean closePath) throws Exception {\n+        BufferedImage bi = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = (Graphics2D) bi.getGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+        g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, useHintPure ? RenderingHints.VALUE_STROKE_PURE : RenderingHints.VALUE_STROKE_NORMALIZE);\n+\n+        g.setBackground(Color.white);\n+        g.clearRect(0, 0, bi.getWidth(), bi.getHeight());\n+\n+        AffineTransform at = g.getTransform();\n+\n+        g.transform(AffineTransform.getTranslateInstance(0, -1400));\n+        g.transform(AffineTransform.getScaleInstance(10, 10));\n+\n+        GeneralPath path1 = new GeneralPath();\n+        path1.moveTo(24.954517, 159);\n+\n+        path1.lineTo(21.097446, 157.5);\n+        if (addRedundantPoints)\n+            path1.lineTo(21.097446, 157.5);\n+\n+        path1.lineTo(17.61364, 162);\n+        if (addRedundantPoints) {\n+            path1.lineTo(17.61364, 162);\n+            path1.lineTo(17.61364, 162);\n+        }\n+\n+        path1.lineTo(13.756569, 163.5);\n+        if (addRedundantPoints) {\n+            path1.lineTo(13.756569, 163.5);\n+            path1.lineTo(13.756569, 163.5);\n+            path1.lineTo(13.756569, 163.5);\n+        }\n+\n+        path1.lineTo(11.890244, 160.5);\n+        if (addRedundantPoints)\n+            path1.lineTo(11.890244, 160.5);\n+\n+        if (closePath) {\n+            path1.lineTo(24.954517, 159);\n+            path1.closePath();\n+        }\n+\n+        draw(g, Color.red, path1, createStrokedShape);\n+\n+        \/\/ normal cubics don't suffer the same problem; I just wanted visual confirmation so I threw this in:\n+\n+        Path2D path2 = new Path2D.Double();\n+        path2.moveTo(17, 150);\n+        path2.curveTo(17-10, 150-20, 17+10, 150-20, 17, 150);\n+\n+        if (closePath)\n+            path2.closePath();\n+\n+        draw(g, Color.green, path2, createStrokedShape);\n+\n+        path2.transform(AffineTransform.getRotateInstance(1, 20, 140));\n+\n+        draw(g, Color.cyan, path2, createStrokedShape);\n+\n+        \/\/ test degenerate cubics\n+\n+        Path2D path3 = new Path2D.Double();\n+        path3.moveTo(19, 180);\n+        if (addRedundantPoints)\n+            path3.curveTo(19, 180, 19, 180, 19, 180);\n+\n+        if (closePath)\n+            path3.closePath();\n+\n+        draw(g, Color.pink, path3, createStrokedShape);\n+\n+        \/\/ add a cubic that ends by pointing northeast, then see if any redundant\n+        \/\/ segments (lines or higher degenerating segments) change the miter:\n+        Path2D path4 = new Path2D.Double();\n+        path4.moveTo(22, 175);\n+        path4.curveTo(15,175,25,155,30,150);\n+        if (addRedundantPoints) {\n+            path4.lineTo(30, 150);\n+            path4.quadTo(30, 150,30, 150);\n+            path4.curveTo(30, 150,30, 150,30, 150);\n+        }\n+\n+        if (closePath)\n+            path4.closePath();\n+\n+        draw(g, Color.blue, path4, createStrokedShape);\n+\n+        \/\/ and test degenerate quadratics\n+\n+        Path2D path5 = new Path2D.Double();\n+        path5.moveTo(22, 170);\n+        if (addRedundantPoints)\n+            path5.quadTo(22, 170, 22, 170);\n+\n+        if (closePath)\n+            path5.closePath();\n+\n+        draw(g, Color.green, path5, createStrokedShape);\n+\n+        return bi;\n+    }\n+\n+    private static void draw(Graphics2D g, Color color, Shape shape, boolean createStrokedShape) {\n+        g.setColor(color);\n+        if (createStrokedShape) {\n+            g.fill(g.getStroke().createStrokedShape(shape));\n+        } else {\n+            g.draw(shape);\n+        }\n+    }\n+\n+    private static void assertEquals(BufferedImage bi1, BufferedImage bi2) {\n+        int w = bi1.getWidth();\n+        int h = bi1.getHeight();\n+        int[] row1 = new int[w];\n+        int[] row2 = new int[w];\n+        for (int y = 0; y < h; y++) {\n+            bi1.getRaster().getDataElements(0,y,w,1,row1);\n+            bi2.getRaster().getDataElements(0,y,w,1,row2);\n+            for (int x = 0; x < w; x++) {\n+                if (row1[x] != row2[x])\n+                    throw new RuntimeException(\"failure at (\"+x+\", \"+y+\"): 0x\"+Integer.toHexString(row1[x])+\" != 0x\"+Integer.toHexString(row2[x]));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/JoinMiterRedundantLineSegmentsTest.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}