{"files":[{"patch":"@@ -570,2 +570,6 @@\n-        if (dx == 0.0d && dy == 0.0d && prev == DRAWING_OP_TO) {\n-            return;\n+        if (dx == 0.0d && dy == 0.0d) {\n+            if (prev == DRAWING_OP_TO) {\n+                \/\/ skip repeated end-point\n+                return;\n+            }\n+            dx = 1.0d;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Stroker.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -98,0 +98,4 @@\n+        tests.add(new Test(\"Redundant diagonal line endpoint\",\n+                \"m 0 0 l 10 10 [l 10 10]\",\n+                \"This creates a diagonal line with a redundant endpoint; this is the core problem demonstrated in JDK-8264999.\"));\n+\n@@ -110,4 +114,0 @@\n-\/\/        tests.add(new Test(\"empty line\",\n-\/\/                \"m 19 180 [l 19 180]\",\n-\/\/                \"This creates an empty shape with a lineTo the starting point.\"));\n-\n@@ -122,0 +122,24 @@\n+        \/\/ The following 3 tests are not essential for the resolution of JDK-8264999, but IMO they raise some\n+        \/\/ interesting questions about what the expected behavior is. (My apologies if the expected behavior\n+        \/\/ is specified somewhere: I'm not sure where that is?)\n+\n+\/\/        tests.add(new Test(\"lineTo after close\",\n+\/\/                \"m 19 180 z [l 19 180]\",\n+\/\/                \"This tests a lineTo after a close (but without a second moveTo)\"));\n+\/\/\n+\/\/        tests.add(new Test(\"Diagonal line, optional lineTo back\",\n+\/\/                \"m 0 0 l 20 20 [l 0 0]\",\n+\/\/                \"This creates a diagonal line and optionally returns to the starting point.\"));\n+\/\/\n+\/\/        tests.add(new Test(\"Diagonal line, optional close\",\n+\/\/                \"m 0 0 l 20 20 l 0 0 [z]\",\n+\/\/                \"This creates a diagonal line, returns to the starting point, and optionally closes the path.\"));\n+\n+\n+        \/\/ We've decided the following commented-out tests are invalid. The current interpretation is:\n+        \/\/ \"a moveTo statement without any additional information should NOT result in rendering anything\"\n+\n+\/\/        tests.add(new Test(\"empty line\",\n+\/\/                \"m 19 180 [l 19 180]\",\n+\/\/                \"This creates an empty shape with a lineTo the starting point.\"));\n+\n@@ -134,4 +158,0 @@\n-        tests.add(new Test(\"lineTo after close\",\n-                \"m 19 180 z [l 19 180]\",\n-                \"This tests a lineTo after a close (without a moveTo)\"));\n-\n","filename":"test\/jdk\/sun\/java2d\/marlin\/JoinMiterRedundantLineSegmentsTest.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"}]}