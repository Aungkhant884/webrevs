{"files":[{"patch":"@@ -616,1 +616,1 @@\n-    effective_indices_in_range = effective_max_index > effective_min_index && effective_min_index >= -128 && effective_max_index <= 127;\n+    effective_indices_in_range = effective_max_index >= effective_min_index && effective_min_index >= -128 && effective_max_index <= 127;\n@@ -681,1 +681,1 @@\n-    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::gt));\n+    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ugt));\n@@ -685,1 +685,1 @@\n-    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::gt, bcast_lane_cnt, res, pred_node, vmask_type));\n+    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ugt, bcast_lane_cnt, res, pred_node, vmask_type));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm compiler.vectorapi.TestVectorShuffleIota\n+ * @run main\/othervm -XX:CompileThresholdScaling=0.3 -XX:-TieredCompilation compiler.vectorapi.TestVectorShuffleIota\n@@ -49,2 +49,13 @@\n-    interface compute_kernel {\n-        long apply(int start, int step, boolean wrap);\n+    static long expected_value(VectorSpecies<?> SPECIES, int start, int step, boolean wrap) {\n+        long res = 0;\n+        int lanesM1 = SPECIES.length() - 1;\n+        if (wrap) {\n+            res = (lanesM1 & (start + step * lanesM1));\n+        } else {\n+            int effective_index = start + step * lanesM1;\n+            int wrapped_effective_index = effective_index & lanesM1;\n+            res = (effective_index == wrapped_effective_index ?\n+                   wrapped_effective_index :\n+                   -SPECIES.length() + wrapped_effective_index);\n+        }\n+        return res;\n@@ -53,3 +64,2 @@\n-    static void validateTests(compute_kernel agen, compute_kernel egen, int start, int step, boolean wrap) {\n-        long actual   = agen.apply(start, step, wrap);\n-        long expected = egen.apply(start, step, wrap);\n+    static void validateTests(long actual, VectorSpecies<?> SPECIES, int start, int step, boolean wrap) {\n+        long expected = expected_value(SPECIES, start, step, wrap);\n@@ -61,37 +71,52 @@\n-    static void testShuffleIota (VectorSpecies<?> SPECIES, int start, int step, boolean wrap) {\n-        compute_kernel sobj = new compute_kernel()  {\n-            public long apply(int start, int step, boolean wrap) {\n-                long res = 0;\n-                int lanesM1 = SPECIES.length() - 1;\n-                if (wrap) {\n-                    for (int i = 0; i < 1024; i++) {\n-                        start += i;\n-                        res += (lanesM1 & (start + step * lanesM1)) * i;\n-                    }\n-                } else {\n-                    for (int i = 0; i < 1024; i++) {\n-                        start += i;\n-                        int effective_index = start + step * lanesM1;\n-                        int wrapped_effective_index = effective_index & lanesM1;\n-                        res += (effective_index == wrapped_effective_index ?\n-                                 wrapped_effective_index :\n-                                 -SPECIES.length() + wrapped_effective_index) * i;\n-                    }\n-                }\n-                return res;\n-            }\n-        };\n-\n-        compute_kernel vobj = new compute_kernel()  {\n-            public long apply(int start, int step, boolean wrap) {\n-                long res = 0;\n-                for (int i = 0; i < 1024; i++) {\n-                    start += i;\n-                    res += SPECIES.iotaShuffle(start, step, wrap)\n-                                  .laneSource(SPECIES.length()-1) * i;\n-                }\n-                return res;\n-            }\n-        };\n-\n-        validateTests(vobj, sobj, start, step, wrap);\n+    static void testShuffleIotaB128(int start, int step, boolean wrap) {\n+        long res = SPECIESb.iotaShuffle(start, step, wrap)\n+                           .laneSource(SPECIESb.length()-1);\n+        validateTests(res, SPECIESb, start, step, wrap);\n+    }\n+\n+    static void testShuffleIotaS128(int start, int step, boolean wrap) {\n+        long res = SPECIESs.iotaShuffle(start, step, wrap)\n+                           .laneSource(SPECIESs.length()-1);\n+        validateTests(res, SPECIESs, start, step, wrap);\n+    }\n+\n+    static void testShuffleIotaI128(int start, int step, boolean wrap) {\n+        long res = SPECIESi.iotaShuffle(start, step, wrap)\n+                           .laneSource(SPECIESi.length()-1);\n+        validateTests(res, SPECIESi, start, step, wrap);\n+    }\n+\n+    static void testShuffleIotaConst0B128() {\n+        long res = SPECIESb.iotaShuffle(-32, 1, false)\n+                           .laneSource(SPECIESb.length()-1);\n+        validateTests(res, SPECIESb, -32, 1, false);\n+    }\n+\n+    static void testShuffleIotaConst0S128() {\n+        long res = SPECIESs.iotaShuffle(-32, 1, false)\n+                           .laneSource(SPECIESs.length()-1);\n+        validateTests(res, SPECIESs, -32, 1, false);\n+    }\n+\n+    static void testShuffleIotaConst0I128() {\n+        long res = SPECIESi.iotaShuffle(-32, 1, false)\n+                           .laneSource(SPECIESi.length()-1);\n+        validateTests(res, SPECIESi, -32, 1, false);\n+    }\n+\n+    static void testShuffleIotaConst1B128() {\n+        long res = SPECIESb.iotaShuffle(-32, 1, true)\n+                           .laneSource(SPECIESb.length()-1);\n+        validateTests(res, SPECIESb, -32, 1, true);\n+    }\n+\n+    static void testShuffleIotaConst1S128() {\n+        long res = SPECIESs.iotaShuffle(-32, 1, true)\n+                           .laneSource(SPECIESs.length()-1);\n+        validateTests(res, SPECIESs, -32, 1, true);\n+    }\n+\n+    static void testShuffleIotaConst1I128() {\n+        long res = SPECIESi.iotaShuffle(-32, 1, true)\n+                           .laneSource(SPECIESi.length()-1);\n+        validateTests(res, SPECIESi, -32, 1, true);\n@@ -108,21 +133,0 @@\n-\n-            testShuffleIota(SPECIESi, 128, 1, true);\n-            testShuffleIota(SPECIESi, 128, 1, false);\n-            testShuffleIota(SPECIESi, -128, 1, true);\n-            testShuffleIota(SPECIESi, -128, 1, false);\n-            testShuffleIota(SPECIESi, 1, 1, true);\n-            testShuffleIota(SPECIESi, 1, 1, false);\n-\n-            testShuffleIota(SPECIESs, 128, 1, true);\n-            testShuffleIota(SPECIESs, 128, 1, false);\n-            testShuffleIota(SPECIESs, -128, 1, true);\n-            testShuffleIota(SPECIESs, -128, 1, false);\n-            testShuffleIota(SPECIESs, 1, 1, true);\n-            testShuffleIota(SPECIESs, 1, 1, false);\n-\n-            testShuffleIota(SPECIESb, 128, 1, true);\n-            testShuffleIota(SPECIESb, 128, 1, false);\n-            testShuffleIota(SPECIESb, -128, 1, true);\n-            testShuffleIota(SPECIESb, -128, 1, false);\n-            testShuffleIota(SPECIESb, 1, 1, true);\n-            testShuffleIota(SPECIESb, 1, 1, false);\n@@ -133,0 +137,28 @@\n+        for (int i = 0; i < INVOC_COUNT; i++) {\n+            testShuffleIotaI128(128, 1, true);\n+            testShuffleIotaI128(128, 1, false);\n+            testShuffleIotaI128(-128, 1, true);\n+            testShuffleIotaI128(-128, 1, false);\n+            testShuffleIotaI128(1, 1, true);\n+            testShuffleIotaI128(1, 1, false);\n+\n+            testShuffleIotaS128(128, 1, true);\n+            testShuffleIotaS128(128, 1, false);\n+            testShuffleIotaS128(-128, 1, true);\n+            testShuffleIotaS128(-128, 1, false);\n+            testShuffleIotaS128(1, 1, true);\n+            testShuffleIotaS128(1, 1, false);\n+\n+            testShuffleIotaB128(128, 1, true);\n+            testShuffleIotaB128(128, 1, false);\n+            testShuffleIotaB128(-128, 1, true);\n+            testShuffleIotaB128(-128, 1, false);\n+            testShuffleIotaB128(1, 1, true);\n+            testShuffleIotaB128(1, 1, false);\n+            testShuffleIotaConst0B128();\n+            testShuffleIotaConst0S128();\n+            testShuffleIotaConst0I128();\n+            testShuffleIotaConst1B128();\n+            testShuffleIotaConst1S128();\n+            testShuffleIotaConst1I128();\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIota.java","additions":96,"deletions":64,"binary":false,"changes":160,"status":"modified"}]}