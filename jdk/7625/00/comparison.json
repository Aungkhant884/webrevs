{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,3 +172,3 @@\n- * This abstract class has two implementations, both of which are immutable and thread-safe.\n- * One implementation models region-based IDs, the other is {@code ZoneOffset} modelling\n- * offset-based IDs. This difference is visible in serialization.\n+ * This abstract sealed class permits two implementations, both of which are immutable and\n+ * thread-safe. One implementation models region-based IDs, the other is {@code ZoneOffset}\n+ * modelling offset-based IDs. This difference is visible in serialization.\n@@ -179,1 +179,1 @@\n-public abstract class ZoneId implements Serializable {\n+public abstract sealed class ZoneId implements Serializable permits ZoneOffset, ZoneRegion {\n@@ -474,5 +474,1 @@\n-    ZoneId() {\n-        if (getClass() != ZoneOffset.class && getClass() != ZoneRegion.class) {\n-            throw new AssertionError(\"Invalid subclass\");\n-        }\n-    }\n+    ZoneId() {}\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneId.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"}]}