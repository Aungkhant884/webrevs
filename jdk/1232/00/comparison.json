{"files":[{"patch":"@@ -2553,1 +2553,1 @@\n-            endPosTable.storeEnd(clazzid1, tree.getEndPosition(endPosTable));\n+            endPosTable.storeEnd(clazzid1, clazzid.getEndPosition(endPosTable));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411\n@@ -87,0 +87,1 @@\n+import java.util.Objects;\n@@ -1614,0 +1615,34 @@\n+    @Test \/\/JDK-8256411\n+    void testBasedAnonymous() throws IOException {\n+        String code = \"\"\"\n+                      package t;\n+                      class Test {\n+                          class I {}\n+                          static Object I = new Test().new I() {};\n+                      }\n+                      \"\"\";\n+        StringWriter out = new StringWriter();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(out, fm, null, null,\n+                null, Arrays.asList(new MyFileObject(code)));\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+        Trees trees = Trees.instance(ct);\n+        SourcePositions sp = trees.getSourcePositions();\n+        ct.analyze();\n+        List<String> span = new ArrayList<>();\n+        new TreeScanner<Void, Void>() {\n+            public Void visitClass(ClassTree ct, Void v) {\n+                if (ct.getExtendsClause() != null) {\n+                    int start = (int) sp.getStartPosition(cut,\n+                                                           ct.getExtendsClause());\n+                    int end   = (int) sp.getEndPosition(cut,\n+                                                        ct.getExtendsClause());\n+                    span.add(code.substring(start, end));\n+                }\n+                return super.visitClass(ct, v);\n+            }\n+        }.scan(cut, null);\n+        if (!Objects.equals(span, Arrays.asList(\"I\"))) {\n+            throw new AssertionError(\"Unexpected span: \" + span);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -130,2 +130,2 @@\n-        compile(JavaSource.createJavaSource(\"Object o = new A().new B(); class A { }\",\n-                \"B()\"));\n+        compile(JavaSource.createJavaSource(\"Object o = new A().new BT(); class A { }\",\n+                \"BT\"));\n","filename":"test\/langtools\/tools\/javac\/positions\/TreeEndPosTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}