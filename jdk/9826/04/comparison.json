{"files":[{"patch":"@@ -1912,1 +1912,1 @@\n-  int slots_of_int_registers = RegisterImpl::max_slots_per_register * RegisterImpl::number_of_registers;\n+  int slots_of_int_registers = Register::number_of_registers * Register::max_slots_per_register;\n@@ -1919,1 +1919,1 @@\n-  int slots_of_float_registers = FloatRegisterImpl::max_slots_per_register * FloatRegisterImpl::number_of_registers;\n+  int slots_of_float_registers = FloatRegister::number_of_registers * FloatRegister::max_slots_per_register;\n@@ -1924,1 +1924,1 @@\n-  int slots_of_predicate_registers = PRegisterImpl::max_slots_per_register * PRegisterImpl::number_of_registers;\n+  int slots_of_predicate_registers = PRegister::number_of_registers * PRegister::max_slots_per_register;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,17 +65,17 @@\n-REGISTER_DECLARATION(Register, c_rarg0, r0);\n-REGISTER_DECLARATION(Register, c_rarg1, r1);\n-REGISTER_DECLARATION(Register, c_rarg2, r2);\n-REGISTER_DECLARATION(Register, c_rarg3, r3);\n-REGISTER_DECLARATION(Register, c_rarg4, r4);\n-REGISTER_DECLARATION(Register, c_rarg5, r5);\n-REGISTER_DECLARATION(Register, c_rarg6, r6);\n-REGISTER_DECLARATION(Register, c_rarg7, r7);\n-\n-REGISTER_DECLARATION(FloatRegister, c_farg0, v0);\n-REGISTER_DECLARATION(FloatRegister, c_farg1, v1);\n-REGISTER_DECLARATION(FloatRegister, c_farg2, v2);\n-REGISTER_DECLARATION(FloatRegister, c_farg3, v3);\n-REGISTER_DECLARATION(FloatRegister, c_farg4, v4);\n-REGISTER_DECLARATION(FloatRegister, c_farg5, v5);\n-REGISTER_DECLARATION(FloatRegister, c_farg6, v6);\n-REGISTER_DECLARATION(FloatRegister, c_farg7, v7);\n+constexpr Register c_rarg0 = r0;\n+constexpr Register c_rarg1 = r1;\n+constexpr Register c_rarg2 = r2;\n+constexpr Register c_rarg3 = r3;\n+constexpr Register c_rarg4 = r4;\n+constexpr Register c_rarg5 = r5;\n+constexpr Register c_rarg6 = r6;\n+constexpr Register c_rarg7 = r7;\n+\n+constexpr FloatRegister c_farg0 = v0;\n+constexpr FloatRegister c_farg1 = v1;\n+constexpr FloatRegister c_farg2 = v2;\n+constexpr FloatRegister c_farg3 = v3;\n+constexpr FloatRegister c_farg4 = v4;\n+constexpr FloatRegister c_farg5 = v5;\n+constexpr FloatRegister c_farg6 = v6;\n+constexpr FloatRegister c_farg7 = v7;\n@@ -99,8 +99,8 @@\n-REGISTER_DECLARATION(Register, j_rarg0, c_rarg1);\n-REGISTER_DECLARATION(Register, j_rarg1, c_rarg2);\n-REGISTER_DECLARATION(Register, j_rarg2, c_rarg3);\n-REGISTER_DECLARATION(Register, j_rarg3, c_rarg4);\n-REGISTER_DECLARATION(Register, j_rarg4, c_rarg5);\n-REGISTER_DECLARATION(Register, j_rarg5, c_rarg6);\n-REGISTER_DECLARATION(Register, j_rarg6, c_rarg7);\n-REGISTER_DECLARATION(Register, j_rarg7, c_rarg0);\n+constexpr Register j_rarg0 = c_rarg1;\n+constexpr Register j_rarg1 = c_rarg2;\n+constexpr Register j_rarg2 = c_rarg3;\n+constexpr Register j_rarg3 = c_rarg4;\n+constexpr Register j_rarg4 = c_rarg5;\n+constexpr Register j_rarg5 = c_rarg6;\n+constexpr Register j_rarg6 = c_rarg7;\n+constexpr Register j_rarg7 = c_rarg0;\n@@ -110,8 +110,8 @@\n-REGISTER_DECLARATION(FloatRegister, j_farg0, v0);\n-REGISTER_DECLARATION(FloatRegister, j_farg1, v1);\n-REGISTER_DECLARATION(FloatRegister, j_farg2, v2);\n-REGISTER_DECLARATION(FloatRegister, j_farg3, v3);\n-REGISTER_DECLARATION(FloatRegister, j_farg4, v4);\n-REGISTER_DECLARATION(FloatRegister, j_farg5, v5);\n-REGISTER_DECLARATION(FloatRegister, j_farg6, v6);\n-REGISTER_DECLARATION(FloatRegister, j_farg7, v7);\n+constexpr FloatRegister j_farg0 = v0;\n+constexpr FloatRegister j_farg1 = v1;\n+constexpr FloatRegister j_farg2 = v2;\n+constexpr FloatRegister j_farg3 = v3;\n+constexpr FloatRegister j_farg4 = v4;\n+constexpr FloatRegister j_farg5 = v5;\n+constexpr FloatRegister j_farg6 = v6;\n+constexpr FloatRegister j_farg7 = v7;\n@@ -126,2 +126,2 @@\n-REGISTER_DECLARATION(Register, rscratch1, r8);\n-REGISTER_DECLARATION(Register, rscratch2, r9);\n+constexpr Register rscratch1 = r8;\n+constexpr Register rscratch2 = r9;\n@@ -130,1 +130,1 @@\n-REGISTER_DECLARATION(Register, rmethod,   r12);\n+constexpr Register rmethod = r12;\n@@ -135,22 +135,10 @@\n-\/\/ link register\n-REGISTER_DECLARATION(Register, lr,        r30);\n-\/\/ frame pointer\n-REGISTER_DECLARATION(Register, rfp,       r29);\n-\/\/ current thread\n-REGISTER_DECLARATION(Register, rthread,   r28);\n-\/\/ base of heap\n-REGISTER_DECLARATION(Register, rheapbase, r27);\n-\/\/ constant pool cache\n-REGISTER_DECLARATION(Register, rcpool,    r26);\n-\/\/ r25 is a callee-saved temp\n-\/\/ REGISTER_DECLARATION(Register, unused, r25);\n-\/\/ locals on stack\n-REGISTER_DECLARATION(Register, rlocals,   r24);\n-\/\/ bytecode pointer\n-REGISTER_DECLARATION(Register, rbcp,      r22);\n-\/\/ Dispatch table base\n-REGISTER_DECLARATION(Register, rdispatch, r21);\n-\/\/ Java expression stack pointer\n-REGISTER_DECLARATION(Register, esp,      r20);\n-\/\/ Sender's SP while in interpreter\n-REGISTER_DECLARATION(Register, r19_sender_sp, r19);\n+constexpr Register lr            = r30; \/\/ link register\n+constexpr Register rfp           = r29; \/\/ frame pointer\n+constexpr Register rthread       = r28; \/\/ current thread\n+constexpr Register rheapbase     = r27; \/\/ base of heap\n+constexpr Register rcpool        = r26; \/\/ constant pool cache\n+constexpr Register rlocals       = r24; \/\/ locals on stack\n+constexpr Register rbcp          = r22; \/\/ bytecode pointer\n+constexpr Register rdispatch     = r21; \/\/ dispatch table base\n+constexpr Register esp           = r20; \/\/ Java expression stack pointer\n+constexpr Register r19_sender_sp = r19; \/\/ sender's SP while in interpreter\n@@ -159,1 +147,1 @@\n-REGISTER_DECLARATION(PRegister, ptrue, p7);\n+constexpr PRegister ptrue = p7;\n@@ -280,1 +268,1 @@\n-    f(r->encoding_nocheck(), lsb + 4, lsb);\n+    f(r->raw_encoding(), lsb + 4, lsb);\n@@ -285,1 +273,1 @@\n-    f(r->encoding_nocheck() - (r == zr), lsb + 4, lsb);\n+    f(r->raw_encoding() - (r == zr), lsb + 4, lsb);\n@@ -290,1 +278,1 @@\n-    f(r == sp ? 31 : r->encoding_nocheck(), lsb + 4, lsb);\n+    f(r == sp ? 31 : r->raw_encoding(), lsb + 4, lsb);\n@@ -294,1 +282,1 @@\n-    f(r->encoding_nocheck(), lsb + 4, lsb);\n+    f(r->raw_encoding(), lsb + 4, lsb);\n@@ -298,1 +286,1 @@\n-    f(r->encoding_nocheck(), lsb + 3, lsb);\n+    f(r->raw_encoding(), lsb + 3, lsb);\n@@ -302,1 +290,1 @@\n-    f(r->encoding_nocheck(), lsb + 2, lsb);\n+    f(r->raw_encoding(), lsb + 2, lsb);\n@@ -332,1 +320,1 @@\n-  Post(Register reg, int o) : PrePost(reg, o) { _idx = NULL; _is_postreg = false; }\n+  Post(Register reg, int o) : PrePost(reg, o) { _idx = noreg; _is_postreg = false; }\n@@ -630,2 +618,1 @@\n-const int FPUStateSizeInWords = FloatRegisterImpl::number_of_registers *\n-                                FloatRegisterImpl::save_slots_per_register;\n+const int FPUStateSizeInWords = FloatRegister::number_of_registers * FloatRegister::save_slots_per_register;\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":55,"deletions":68,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-  pd_nof_cpu_regs_frame_map = RegisterImpl::number_of_registers,       \/\/ number of registers used during code emission\n-  pd_nof_fpu_regs_frame_map = FloatRegisterImpl::number_of_registers,  \/\/ number of registers used during code emission\n+  pd_nof_cpu_regs_frame_map = Register::number_of_registers,       \/\/ number of GP registers used during code emission\n+  pd_nof_fpu_regs_frame_map = FloatRegister::number_of_registers,  \/\/ number of FP registers used during code emission\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Defs_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  if (jvmci_reg < RegisterImpl::number_of_registers) {\n+  if (jvmci_reg < Register::number_of_registers) {\n@@ -181,2 +181,2 @@\n-    jint floatRegisterNumber = jvmci_reg - RegisterImpl::number_of_declared_registers;\n-    if (floatRegisterNumber >= 0 && floatRegisterNumber < FloatRegisterImpl::number_of_registers) {\n+    jint floatRegisterNumber = jvmci_reg - Register::number_of_declared_registers;\n+    if (floatRegisterNumber >= 0 && floatRegisterNumber < FloatRegister::number_of_registers) {\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2201,1 +2201,1 @@\n-  regs[count++] = zr->encoding_nocheck();\n+  regs[count++] = zr->raw_encoding();\n@@ -2231,1 +2231,1 @@\n-  regs[count++] = zr->encoding_nocheck();\n+  regs[count++] = zr->raw_encoding();\n@@ -2386,1 +2386,1 @@\n-  unsigned char regs[PRegisterImpl::number_of_saved_registers];\n+  unsigned char regs[PRegister::number_of_saved_registers];\n@@ -2388,1 +2388,1 @@\n-  for (int reg = 0; reg < PRegisterImpl::number_of_saved_registers; reg++) {\n+  for (int reg = 0; reg < PRegister::number_of_saved_registers; reg++) {\n@@ -2423,1 +2423,1 @@\n-  unsigned char regs[PRegisterImpl::number_of_saved_registers];\n+  unsigned char regs[PRegister::number_of_saved_registers];\n@@ -2425,1 +2425,1 @@\n-  for (int reg = 0; reg < PRegisterImpl::number_of_saved_registers; reg++) {\n+  for (int reg = 0; reg < PRegister::number_of_saved_registers; reg++) {\n@@ -2913,2 +2913,2 @@\n-    sub(sp, sp, sve_vector_size_in_bytes * FloatRegisterImpl::number_of_registers);\n-    for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++) {\n+    sub(sp, sp, sve_vector_size_in_bytes * FloatRegister::number_of_registers);\n+    for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n@@ -2929,1 +2929,1 @@\n-    for (int i = 0; i < PRegisterImpl::number_of_saved_registers; i++) {\n+    for (int i = 0; i < PRegister::number_of_saved_registers; i++) {\n@@ -2938,1 +2938,1 @@\n-    for (int i = PRegisterImpl::number_of_saved_registers - 1; i >= 0; i--) {\n+    for (int i = PRegister::number_of_saved_registers - 1; i >= 0; i--) {\n@@ -2944,1 +2944,1 @@\n-    for (int i = FloatRegisterImpl::number_of_registers - 1; i >= 0; i--) {\n+    for (int i = FloatRegister::number_of_registers - 1; i >= 0; i--) {\n@@ -2947,1 +2947,1 @@\n-    add(sp, sp, sve_vector_size_in_bytes * FloatRegisterImpl::number_of_registers);\n+    add(sp, sp, sve_vector_size_in_bytes * FloatRegister::number_of_registers);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    case  2:  aes_round(_data, _subkeys +  0);  break;\n-    case  3:  aes_round(_data, _subkeys +  1);  break;\n+    case  2:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 0));  break;\n+    case  3:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 1));  break;\n@@ -239,2 +239,2 @@\n-    case  5:  aes_round(_data, _subkeys +  2);  break;\n-    case  6:  aes_round(_data, _subkeys +  3);  break;\n+    case  5:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 2));  break;\n+    case  6:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 3));  break;\n@@ -244,11 +244,11 @@\n-    case  8:  aes_round(_data, _subkeys +  4);  break;\n-    case  9:  aes_round(_data, _subkeys +  5);  break;\n-    case 10:  aes_round(_data, _subkeys +  6);  break;\n-    case 11:  aes_round(_data, _subkeys +  7);  break;\n-    case 12:  aes_round(_data, _subkeys +  8);  break;\n-    case 13:  aes_round(_data, _subkeys +  9);  break;\n-    case 14:  aes_round(_data, _subkeys + 10);  break;\n-    case 15:  aes_round(_data, _subkeys + 11);  break;\n-    case 16:  aes_round(_data, _subkeys + 12);  break;\n-    case 17:  aese(_data, _subkeys + 13);  break;\n-    case 18:  eor(_data, T16B, _data, _subkeys + 14);  break;\n+    case  8:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  4));  break;\n+    case  9:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  5));  break;\n+    case 10:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  6));  break;\n+    case 11:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  7));  break;\n+    case 12:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  8));  break;\n+    case 13:  aes_round(_data, as_FloatRegister(_subkeys->encoding() +  9));  break;\n+    case 14:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 10));  break;\n+    case 15:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 11));  break;\n+    case 16:  aes_round(_data, as_FloatRegister(_subkeys->encoding() + 12));  break;\n+    case 17:  aese(_data, as_FloatRegister(_subkeys->encoding() + 13));  break;\n+    case 18:  eor(_data, T16B, _data, as_FloatRegister(_subkeys->encoding() + 14));  break;\n@@ -267,1 +267,1 @@\n-                                  _data + 1, _subkeys, \/*once*\/false);\n+                                  _data->successor(), _subkeys, \/*once*\/false);\n@@ -412,8 +412,8 @@\n-  virtual KernelGenerator *next() {\n-    GHASHMultiplyGenerator *result = new GHASHMultiplyGenerator(*this);\n-    result->_result_lo += register_stride;\n-    result->_result_hi += register_stride;\n-    result->_b += register_stride;\n-    result->_tmp1 += register_stride;\n-    result->_tmp2 += register_stride;\n-    result->_tmp3 += register_stride;\n+  virtual KernelGenerator* next() {\n+    GHASHMultiplyGenerator* result = new GHASHMultiplyGenerator(*this);\n+    result->_result_lo = as_FloatRegister(result->_result_lo->encoding() + register_stride);\n+    result->_result_hi = as_FloatRegister(result->_result_hi->encoding() + register_stride);\n+    result->_b         = as_FloatRegister(result->_b        ->encoding() + register_stride);\n+    result->_tmp1      = as_FloatRegister(result->_tmp1     ->encoding() + register_stride);\n+    result->_tmp2      = as_FloatRegister(result->_tmp2     ->encoding() + register_stride);\n+    result->_tmp3      = as_FloatRegister(result->_tmp3     ->encoding() + register_stride);\n@@ -480,1 +480,1 @@\n-        ld1((_data + index*register_stride), T16B, post(r2, 0x10));\n+        ld1(as_FloatRegister(_data->encoding() + index*register_stride), T16B, post(r2, 0x10));\n@@ -487,4 +487,4 @@\n-    result->_result += register_stride;\n-    result->_hi += register_stride;\n-    result->_lo += register_stride;\n-    result->_t1 += register_stride;\n+    result->_result = as_FloatRegister(result->_result->encoding() + register_stride);\n+    result->_hi     = as_FloatRegister(result->_hi    ->encoding() + register_stride);\n+    result->_lo     = as_FloatRegister(result->_lo    ->encoding() + register_stride);\n+    result->_t1     = as_FloatRegister(result->_t1    ->encoding() + register_stride);\n@@ -585,1 +585,2 @@\n-    eor(ofs+v0, T16B, ofs+v0, ofs+v0); \/\/ zero each state register\n+    FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + ofs);\n+    eor(v0_ofs, T16B, v0_ofs, v0_ofs); \/\/ zero each state register\n@@ -593,1 +594,2 @@\n-    ld1(v2+ofs, T16B, post(data, 0x10));\n+    FloatRegister v2_ofs = as_FloatRegister(v2->encoding() + ofs);\n+    ld1(v2_ofs, T16B, post(data, 0x10));\n@@ -626,2 +628,4 @@\n-      rbit((v2+ofs), T16B, (v2+ofs));\n-      eor((v2+ofs), T16B, v0+ofs, (v2+ofs));   \/\/ bit-swapped data ^ bit-swapped state\n+      FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + ofs);\n+      FloatRegister v2_ofs = as_FloatRegister(v2->encoding() + ofs);\n+      rbit(v2_ofs, T16B, v2_ofs);\n+      eor(v2_ofs, T16B, v0_ofs, v2_ofs);   \/\/ bit-swapped data ^ bit-swapped state\n@@ -654,0 +658,7 @@\n+    FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + ofs);\n+    FloatRegister v1_ofs = as_FloatRegister(v1->encoding() + ofs);\n+    FloatRegister v2_ofs = as_FloatRegister(v2->encoding() + ofs);\n+    FloatRegister v3_ofs = as_FloatRegister(v3->encoding() + ofs);\n+    FloatRegister v4_ofs = as_FloatRegister(v4->encoding() + ofs);\n+    FloatRegister v5_ofs = as_FloatRegister(v5->encoding() + ofs);\n+\n@@ -656,2 +667,2 @@\n-    rbit(v2+ofs, T16B, v2+ofs);\n-    eor(v2+ofs, T16B, ofs+v0, v2+ofs);   \/\/ bit-swapped data ^ bit-swapped state\n+    rbit(v2_ofs, T16B, v2_ofs);\n+    eor(v2_ofs, T16B, v0_ofs, v2_ofs);   \/\/ bit-swapped data ^ bit-swapped state\n@@ -663,1 +674,1 @@\n-    ghash_modmul(\/*result*\/v0+ofs, \/*result_lo*\/v5+ofs, \/*result_hi*\/v4+ofs, \/*b*\/v2+ofs,\n+    ghash_modmul(\/*result*\/v0_ofs, \/*result_lo*\/v5_ofs, \/*result_hi*\/v4_ofs, \/*b*\/v2_ofs,\n@@ -665,1 +676,1 @@\n-                 \/*temps*\/v1+ofs, v3+ofs, \/* reuse b*\/v2+ofs);\n+                 \/*temps*\/v1_ofs, v3_ofs, \/* reuse b*\/v2_ofs);\n@@ -669,3 +680,3 @@\n-  for (int i = 0; i < unrolls - 1; i++) {\n-    int ofs = register_stride * i;\n-    eor(v0, T16B, v0, v0 + register_stride + ofs);\n+  for (int i = 1; i < unrolls; i++) {\n+    FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + register_stride * i);\n+    eor(v0, T16B, v0, v0_ofs);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_aes.cpp","additions":51,"deletions":40,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                       FloatRegisterImpl::max_slots_per_register;\n+                       FloatRegister::max_slots_per_register;\n","filename":"src\/hotspot\/cpu\/aarch64\/registerMap_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-REGISTER_IMPL_DEFINITION(Register, RegisterImpl, RegisterImpl::number_of_declared_registers);\n-REGISTER_IMPL_DEFINITION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n-REGISTER_IMPL_DEFINITION(PRegister, PRegisterImpl, PRegisterImpl::number_of_registers);\n+Register::RegisterImpl           all_RegisterImpls     [Register::number_of_declared_registers + 1];\n+FloatRegister::FloatRegisterImpl all_FloatRegisterImpls[FloatRegister::number_of_registers     + 1];\n+PRegister::PRegisterImpl         all_PRegisterImpls    [PRegister::number_of_registers         + 1];\n@@ -33,13 +33,3 @@\n-const int ConcreteRegisterImpl::max_gpr = RegisterImpl::number_of_registers *\n-                                          RegisterImpl::max_slots_per_register;\n-\n-const int ConcreteRegisterImpl::max_fpr\n-  = ConcreteRegisterImpl::max_gpr +\n-    FloatRegisterImpl::number_of_registers * FloatRegisterImpl::max_slots_per_register;\n-\n-const int ConcreteRegisterImpl::max_pr\n-  = ConcreteRegisterImpl::max_fpr +\n-    PRegisterImpl::number_of_registers * PRegisterImpl::max_slots_per_register;\n-\n-const char* RegisterImpl::name() const {\n-  static const char *const names[number_of_registers] = {\n+const char* Register::RegisterImpl::name() const {\n+  static const char *const names[number_of_declared_registers + 1] = {\n+    \"noreg\",\n@@ -49,1 +39,2 @@\n-    \"rlocals\", \"r25\", \"rcpool\", \"rheapbase\", \"rthread\", \"rfp\", \"lr\", \"sp\"\n+    \"rlocals\", \"r25\", \"rcpool\", \"rheapbase\", \"rthread\", \"rfp\", \"lr\", \"r31_sp\",\n+    \"zp\", \"sp\"\n@@ -51,1 +42,1 @@\n-  return is_valid() ? names[encoding()] : \"noreg\";\n+  return names[raw_encoding() + 1];\n@@ -54,1 +45,1 @@\n-const char* FloatRegisterImpl::name() const {\n+const char* FloatRegister::FloatRegisterImpl::name() const {\n@@ -61,1 +52,1 @@\n-  return is_valid() ? names[encoding()] : \"noreg\";\n+  return is_valid() ? names[encoding()] : \"fnoreg\";\n@@ -64,1 +55,1 @@\n-const char* PRegisterImpl::name() const {\n+const char* PRegister::PRegisterImpl::name() const {\n@@ -69,1 +60,1 @@\n-  return is_valid() ? names[encoding()] : \"noreg\";\n+  return is_valid() ? names[encoding()] : \"pnoreg\";\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-\/\/ Use Register as shortcut\n-class RegisterImpl;\n-typedef const RegisterImpl* Register;\n+class Register {\n+ private:\n+  int _encoding;\n@@ -39,1 +39,1 @@\n-inline constexpr Register as_Register(int encoding);\n+  constexpr explicit Register(int encoding) : _encoding(encoding) {}\n@@ -41,4 +41,1 @@\n-class RegisterImpl: public AbstractRegisterImpl {\n-  static constexpr Register first();\n-\n-public:\n+ public:\n@@ -46,3 +43,3 @@\n-    number_of_registers         =   32,\n-    number_of_declared_registers  = 34,  \/\/ Including SP and ZR.\n-    max_slots_per_register = 2\n+    number_of_registers          = 32,\n+    number_of_declared_registers = 34,  \/\/ Including SP and ZR.\n+    max_slots_per_register       =  2\n@@ -51,2 +48,18 @@\n-  \/\/ derived registers, offsets, and addresses\n-  const Register successor() const { return this + 1; }\n+  class RegisterImpl: public AbstractRegisterImpl {\n+    friend class Register;\n+\n+    static constexpr const RegisterImpl* first();\n+\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const { return this - first(); }\n+    int encoding() const     { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const    { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n+\n+    \/\/ derived registers, offsets, and addresses\n+    inline Register successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n@@ -54,1 +67,0 @@\n-  \/\/ construction\n@@ -57,1 +69,4 @@\n-  VMReg as_VMReg() const;\n+  constexpr Register() : _encoding(-1) {} \/\/ noreg\n+\n+  int operator==(const Register r) const { return _encoding == r._encoding; }\n+  int operator!=(const Register r) const { return _encoding != r._encoding; }\n@@ -59,5 +74,1 @@\n-  \/\/ accessors\n-  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  const char* name() const;\n-  int encoding_nocheck() const     { return this - first(); }\n+  const RegisterImpl* operator->() const { return RegisterImpl::first() + _encoding; }\n@@ -66,0 +77,1 @@\n+extern Register::RegisterImpl all_RegisterImpls[Register::number_of_declared_registers + 1] INTERNAL_VISIBILITY;\n@@ -67,1 +79,3 @@\n-REGISTER_IMPL_DECLARATION(Register, RegisterImpl, RegisterImpl::number_of_declared_registers);\n+inline constexpr const Register::RegisterImpl* Register::RegisterImpl::first() {\n+  return all_RegisterImpls + 1;\n+}\n@@ -69,1 +83,1 @@\n-\/\/ The integer registers of the aarch64 architecture\n+constexpr Register noreg = Register();\n@@ -71,1 +85,11 @@\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n+inline constexpr Register as_Register(int encoding) {\n+  if (0 <= encoding && encoding < Register::number_of_declared_registers) {\n+    return Register(encoding);\n+  }\n+  return noreg;\n+}\n+\n+inline Register Register::RegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_Register(encoding() + 1);\n+}\n@@ -73,18 +97,19 @@\n-CONSTANT_REGISTER_DECLARATION(Register, r0,    (0));\n-CONSTANT_REGISTER_DECLARATION(Register, r1,    (1));\n-CONSTANT_REGISTER_DECLARATION(Register, r2,    (2));\n-CONSTANT_REGISTER_DECLARATION(Register, r3,    (3));\n-CONSTANT_REGISTER_DECLARATION(Register, r4,    (4));\n-CONSTANT_REGISTER_DECLARATION(Register, r5,    (5));\n-CONSTANT_REGISTER_DECLARATION(Register, r6,    (6));\n-CONSTANT_REGISTER_DECLARATION(Register, r7,    (7));\n-CONSTANT_REGISTER_DECLARATION(Register, r8,    (8));\n-CONSTANT_REGISTER_DECLARATION(Register, r9,    (9));\n-CONSTANT_REGISTER_DECLARATION(Register, r10,  (10));\n-CONSTANT_REGISTER_DECLARATION(Register, r11,  (11));\n-CONSTANT_REGISTER_DECLARATION(Register, r12,  (12));\n-CONSTANT_REGISTER_DECLARATION(Register, r13,  (13));\n-CONSTANT_REGISTER_DECLARATION(Register, r14,  (14));\n-CONSTANT_REGISTER_DECLARATION(Register, r15,  (15));\n-CONSTANT_REGISTER_DECLARATION(Register, r16,  (16));\n-CONSTANT_REGISTER_DECLARATION(Register, r17,  (17));\n+\/\/ The integer registers of the AArch64 architecture\n+constexpr Register r0  = as_Register( 0);\n+constexpr Register r1  = as_Register( 1);\n+constexpr Register r2  = as_Register( 2);\n+constexpr Register r3  = as_Register( 3);\n+constexpr Register r4  = as_Register( 4);\n+constexpr Register r5  = as_Register( 5);\n+constexpr Register r6  = as_Register( 6);\n+constexpr Register r7  = as_Register( 7);\n+constexpr Register r8  = as_Register( 8);\n+constexpr Register r9  = as_Register( 9);\n+constexpr Register r10 = as_Register(10);\n+constexpr Register r11 = as_Register(11);\n+constexpr Register r12 = as_Register(12);\n+constexpr Register r13 = as_Register(13);\n+constexpr Register r14 = as_Register(14);\n+constexpr Register r15 = as_Register(15);\n+constexpr Register r16 = as_Register(16);\n+constexpr Register r17 = as_Register(17);\n@@ -102,13 +127,13 @@\n-CONSTANT_REGISTER_DECLARATION(Register, r18_tls,  (18));\n-CONSTANT_REGISTER_DECLARATION(Register, r19,  (19));\n-CONSTANT_REGISTER_DECLARATION(Register, r20,  (20));\n-CONSTANT_REGISTER_DECLARATION(Register, r21,  (21));\n-CONSTANT_REGISTER_DECLARATION(Register, r22,  (22));\n-CONSTANT_REGISTER_DECLARATION(Register, r23,  (23));\n-CONSTANT_REGISTER_DECLARATION(Register, r24,  (24));\n-CONSTANT_REGISTER_DECLARATION(Register, r25,  (25));\n-CONSTANT_REGISTER_DECLARATION(Register, r26,  (26));\n-CONSTANT_REGISTER_DECLARATION(Register, r27,  (27));\n-CONSTANT_REGISTER_DECLARATION(Register, r28,  (28));\n-CONSTANT_REGISTER_DECLARATION(Register, r29,  (29));\n-CONSTANT_REGISTER_DECLARATION(Register, r30,  (30));\n+constexpr Register r18_tls = as_Register(18);\n+constexpr Register r19     = as_Register(19);\n+constexpr Register r20     = as_Register(20);\n+constexpr Register r21     = as_Register(21);\n+constexpr Register r22     = as_Register(22);\n+constexpr Register r23     = as_Register(23);\n+constexpr Register r24     = as_Register(24);\n+constexpr Register r25     = as_Register(25);\n+constexpr Register r26     = as_Register(26);\n+constexpr Register r27     = as_Register(27);\n+constexpr Register r28     = as_Register(28);\n+constexpr Register r29     = as_Register(29);\n+constexpr Register r30     = as_Register(30);\n@@ -120,3 +145,3 @@\n-CONSTANT_REGISTER_DECLARATION(Register, r31_sp, (31));\n-CONSTANT_REGISTER_DECLARATION(Register, zr,  (32));\n-CONSTANT_REGISTER_DECLARATION(Register, sp,  (33));\n+constexpr Register r31_sp = as_Register(31);\n+constexpr Register zr     = as_Register(32);\n+constexpr Register sp     = as_Register(33);\n@@ -125,1 +150,1 @@\n-const Register dummy_reg = r31_sp;\n+constexpr Register dummy_reg = r31_sp;\n@@ -127,5 +152,0 @@\n-\/\/ Use FloatRegister as shortcut\n-class FloatRegisterImpl;\n-typedef const FloatRegisterImpl* FloatRegister;\n-\n-inline constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -134,2 +154,8 @@\n-class FloatRegisterImpl: public AbstractRegisterImpl {\n-  static constexpr FloatRegister first();\n+class FloatRegister {\n+ private:\n+  int _encoding;\n+\n+  constexpr explicit FloatRegister(int encoding) : _encoding(encoding) {}\n+\n+ public:\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -137,1 +163,0 @@\n-public:\n@@ -139,4 +164,4 @@\n-    number_of_registers = 32,\n-    max_slots_per_register = 4,\n-    save_slots_per_register = 2,\n-    slots_per_neon_register = 4,\n+    number_of_registers     = 32,\n+    max_slots_per_register  =  4,\n+    save_slots_per_register =  2,\n+    slots_per_neon_register =  4,\n@@ -146,2 +171,2 @@\n-  \/\/ construction\n-  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n+  class FloatRegisterImpl: public AbstractRegisterImpl {\n+    friend class FloatRegister;\n@@ -149,1 +174,1 @@\n-  VMReg as_VMReg() const;\n+    static constexpr const FloatRegisterImpl* first();\n@@ -151,4 +176,5 @@\n-  \/\/ derived registers, offsets, and addresses\n-  FloatRegister successor() const {\n-    return as_FloatRegister((encoding() + 1) % (unsigned)number_of_registers);\n-  }\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const { return this - first(); }\n+    int encoding() const     { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const    { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -156,5 +182,14 @@\n-  \/\/ accessors\n-  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  const char* name() const;\n-  int encoding_nocheck() const     { return this - first(); }\n+    \/\/ derived registers, offsets, and addresses\n+    inline FloatRegister successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n+\n+  constexpr FloatRegister() : _encoding(-1) {} \/\/ fnoreg\n+\n+  int operator==(const FloatRegister r) const { return _encoding == r._encoding; }\n+  int operator!=(const FloatRegister r) const { return _encoding != r._encoding; }\n+\n+  const FloatRegisterImpl* operator->() const { return FloatRegisterImpl::first() + _encoding; }\n@@ -163,39 +198,53 @@\n-REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n-\n-\n-\/\/ The float registers of the AARCH64 architecture\n-\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v0     , ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v1     , ( 1));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v2     , ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v3     , ( 3));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v4     , ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v5     , ( 5));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v6     , ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v7     , ( 7));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v8     , ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v9     , ( 9));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v10    , (10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v11    , (11));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v12    , (12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v13    , (13));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v14    , (14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v15    , (15));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v16    , (16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v17    , (17));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v18    , (18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v19    , (19));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v20    , (20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v21    , (21));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v22    , (22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v23    , (23));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v24    , (24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v25    , (25));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v26    , (26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v27    , (27));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v28    , (28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v29    , (29));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v30    , (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, v31    , (31));\n+extern FloatRegister::FloatRegisterImpl all_FloatRegisterImpls[FloatRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n+\n+inline constexpr const FloatRegister::FloatRegisterImpl* FloatRegister::FloatRegisterImpl::first() {\n+  return all_FloatRegisterImpls + 1;\n+}\n+\n+constexpr FloatRegister fnoreg = FloatRegister();\n+\n+inline constexpr FloatRegister as_FloatRegister(int encoding) {\n+  if (0 <= encoding && encoding < FloatRegister::number_of_registers) {\n+    return FloatRegister(encoding);\n+  }\n+  return fnoreg;\n+}\n+\n+inline FloatRegister FloatRegister::FloatRegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_FloatRegister((encoding() + 1) % number_of_registers);\n+}\n+\n+\/\/ The float registers of the AArch64 architecture\n+constexpr FloatRegister v0  = as_FloatRegister( 0);\n+constexpr FloatRegister v1  = as_FloatRegister( 1);\n+constexpr FloatRegister v2  = as_FloatRegister( 2);\n+constexpr FloatRegister v3  = as_FloatRegister( 3);\n+constexpr FloatRegister v4  = as_FloatRegister( 4);\n+constexpr FloatRegister v5  = as_FloatRegister( 5);\n+constexpr FloatRegister v6  = as_FloatRegister( 6);\n+constexpr FloatRegister v7  = as_FloatRegister( 7);\n+constexpr FloatRegister v8  = as_FloatRegister( 8);\n+constexpr FloatRegister v9  = as_FloatRegister( 9);\n+constexpr FloatRegister v10 = as_FloatRegister(10);\n+constexpr FloatRegister v11 = as_FloatRegister(11);\n+constexpr FloatRegister v12 = as_FloatRegister(12);\n+constexpr FloatRegister v13 = as_FloatRegister(13);\n+constexpr FloatRegister v14 = as_FloatRegister(14);\n+constexpr FloatRegister v15 = as_FloatRegister(15);\n+constexpr FloatRegister v16 = as_FloatRegister(16);\n+constexpr FloatRegister v17 = as_FloatRegister(17);\n+constexpr FloatRegister v18 = as_FloatRegister(18);\n+constexpr FloatRegister v19 = as_FloatRegister(19);\n+constexpr FloatRegister v20 = as_FloatRegister(20);\n+constexpr FloatRegister v21 = as_FloatRegister(21);\n+constexpr FloatRegister v22 = as_FloatRegister(22);\n+constexpr FloatRegister v23 = as_FloatRegister(23);\n+constexpr FloatRegister v24 = as_FloatRegister(24);\n+constexpr FloatRegister v25 = as_FloatRegister(25);\n+constexpr FloatRegister v26 = as_FloatRegister(26);\n+constexpr FloatRegister v27 = as_FloatRegister(27);\n+constexpr FloatRegister v28 = as_FloatRegister(28);\n+constexpr FloatRegister v29 = as_FloatRegister(29);\n+constexpr FloatRegister v30 = as_FloatRegister(30);\n+constexpr FloatRegister v31 = as_FloatRegister(31);\n@@ -204,37 +253,33 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z0     , ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z1     , ( 1));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z2     , ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z3     , ( 3));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z4     , ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z5     , ( 5));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z6     , ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z7     , ( 7));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z8     , ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z9     , ( 9));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z10    , (10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z11    , (11));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z12    , (12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z13    , (13));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z14    , (14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z15    , (15));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z16    , (16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z17    , (17));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z18    , (18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z19    , (19));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z20    , (20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z21    , (21));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z22    , (22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z23    , (23));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z24    , (24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z25    , (25));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z26    , (26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z27    , (27));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z28    , (28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z29    , (29));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z30    , (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, z31    , (31));\n-\n-\n-class PRegisterImpl;\n-typedef const PRegisterImpl* PRegister;\n-inline constexpr PRegister as_PRegister(int encoding);\n+constexpr FloatRegister z0  = v0;\n+constexpr FloatRegister z1  = v1;\n+constexpr FloatRegister z2  = v2;\n+constexpr FloatRegister z3  = v3;\n+constexpr FloatRegister z4  = v4;\n+constexpr FloatRegister z5  = v5;\n+constexpr FloatRegister z6  = v6;\n+constexpr FloatRegister z7  = v7;\n+constexpr FloatRegister z8  = v8;\n+constexpr FloatRegister z9  = v9;\n+constexpr FloatRegister z10 = v10;\n+constexpr FloatRegister z11 = v11;\n+constexpr FloatRegister z12 = v12;\n+constexpr FloatRegister z13 = v13;\n+constexpr FloatRegister z14 = v14;\n+constexpr FloatRegister z15 = v15;\n+constexpr FloatRegister z16 = v16;\n+constexpr FloatRegister z17 = v17;\n+constexpr FloatRegister z18 = v18;\n+constexpr FloatRegister z19 = v19;\n+constexpr FloatRegister z20 = v20;\n+constexpr FloatRegister z21 = v21;\n+constexpr FloatRegister z22 = v22;\n+constexpr FloatRegister z23 = v23;\n+constexpr FloatRegister z24 = v24;\n+constexpr FloatRegister z25 = v25;\n+constexpr FloatRegister z26 = v26;\n+constexpr FloatRegister z27 = v27;\n+constexpr FloatRegister z28 = v28;\n+constexpr FloatRegister z29 = v29;\n+constexpr FloatRegister z30 = v30;\n+constexpr FloatRegister z31 = v31;\n+\n@@ -243,2 +288,7 @@\n-class PRegisterImpl: public AbstractRegisterImpl {\n-  static constexpr PRegister first();\n+class PRegister {\n+  int _encoding;\n+\n+  constexpr explicit PRegister(int encoding) : _encoding(encoding) {}\n+\n+public:\n+  inline friend constexpr PRegister as_PRegister(int encoding);\n@@ -246,1 +296,0 @@\n- public:\n@@ -258,2 +307,1 @@\n-  \/\/ construction\n-  inline friend constexpr PRegister as_PRegister(int encoding);\n+  constexpr PRegister() : _encoding(-1) {} \/\/ pnoreg\n@@ -261,1 +309,2 @@\n-  VMReg as_VMReg() const;\n+  class PRegisterImpl: public AbstractRegisterImpl {\n+    friend class PRegister;\n@@ -263,2 +312,1 @@\n-  \/\/ derived registers, offsets, and addresses\n-  PRegister successor() const     { return this + 1; }\n+    static constexpr const PRegisterImpl* first();\n@@ -266,6 +314,19 @@\n-  \/\/ accessors\n-  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const    { return this - first(); }\n-  bool is_valid() const           { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  bool is_governing() const       { return first() <= this && this - first() < number_of_governing_registers; }\n-  const char* name() const;\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const  { return this - first(); }\n+    int encoding() const      { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const     { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n+    bool is_governing() const { return 0 <= raw_encoding() && raw_encoding() < number_of_governing_registers; }\n+\n+    \/\/ derived registers, offsets, and addresses\n+    inline PRegister successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n+\n+  int operator==(const PRegister r) const { return _encoding == r._encoding; }\n+  int operator!=(const PRegister r) const { return _encoding != r._encoding; }\n+\n+  const PRegisterImpl* operator->() const { return PRegisterImpl::first() + _encoding; }\n@@ -274,0 +335,5 @@\n+extern PRegister::PRegisterImpl all_PRegisterImpls[PRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n+\n+inline constexpr const PRegister::PRegisterImpl* PRegister::PRegisterImpl::first() {\n+  return all_PRegisterImpls + 1;\n+}\n@@ -275,1 +341,13 @@\n-REGISTER_IMPL_DECLARATION(PRegister, PRegisterImpl, PRegisterImpl::number_of_registers);\n+constexpr PRegister pnoreg = PRegister();\n+\n+inline constexpr PRegister as_PRegister(int encoding) {\n+  if (0 <= encoding && encoding < PRegister::number_of_registers) {\n+    return PRegister(encoding);\n+  }\n+  return pnoreg;\n+}\n+\n+inline PRegister PRegister::PRegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_PRegister(encoding() + 1);\n+}\n@@ -278,19 +356,16 @@\n-\/\/\n-CONSTANT_REGISTER_DECLARATION(PRegister, pnoreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(PRegister, p0,  ( 0));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p1,  ( 1));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p2,  ( 2));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p3,  ( 3));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p4,  ( 4));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p5,  ( 5));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p6,  ( 6));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p7,  ( 7));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p8,  ( 8));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p9,  ( 9));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p10, (10));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p11, (11));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p12, (12));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p13, (13));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p14, (14));\n-CONSTANT_REGISTER_DECLARATION(PRegister, p15, (15));\n+constexpr PRegister p0  = as_PRegister( 0);\n+constexpr PRegister p1  = as_PRegister( 1);\n+constexpr PRegister p2  = as_PRegister( 2);\n+constexpr PRegister p3  = as_PRegister( 3);\n+constexpr PRegister p4  = as_PRegister( 4);\n+constexpr PRegister p5  = as_PRegister( 5);\n+constexpr PRegister p6  = as_PRegister( 6);\n+constexpr PRegister p7  = as_PRegister( 7);\n+constexpr PRegister p8  = as_PRegister( 8);\n+constexpr PRegister p9  = as_PRegister( 9);\n+constexpr PRegister p10 = as_PRegister(10);\n+constexpr PRegister p11 = as_PRegister(11);\n+constexpr PRegister p12 = as_PRegister(12);\n+constexpr PRegister p13 = as_PRegister(13);\n+constexpr PRegister p14 = as_PRegister(14);\n+constexpr PRegister p15 = as_PRegister(15);\n@@ -303,9 +378,9 @@\n-  \/\/ A big enough number for C2: all the registers plus flags\n-  \/\/ This number must be large enough to cover REG_COUNT (defined by c2) registers.\n-  \/\/ There is no requirement that any ordering here matches any ordering c2 gives\n-  \/\/ it's optoregs.\n-\n-    number_of_registers = (RegisterImpl::max_slots_per_register * RegisterImpl::number_of_registers +\n-                           FloatRegisterImpl::max_slots_per_register * FloatRegisterImpl::number_of_registers +\n-                           PRegisterImpl::max_slots_per_register * PRegisterImpl::number_of_registers +\n-                           1) \/\/ flags\n+    max_gpr = Register::number_of_registers * Register::max_slots_per_register,\n+    max_fpr = max_gpr + FloatRegister::number_of_registers * FloatRegister::max_slots_per_register,\n+    max_pr  = max_fpr + PRegister::number_of_registers * PRegister::max_slots_per_register,\n+\n+    \/\/ A big enough number for C2: all the registers plus flags\n+    \/\/ This number must be large enough to cover REG_COUNT (defined by c2) registers.\n+    \/\/ There is no requirement that any ordering here matches any ordering c2 gives\n+    \/\/ it's optoregs.\n+    number_of_registers = max_pr + 1 \/\/ gpr\/fpr\/pr + flags\n@@ -313,5 +388,0 @@\n-\n-  \/\/ added to make it compile\n-  static const int max_gpr;\n-  static const int max_fpr;\n-  static const int max_pr;\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":276,"deletions":206,"binary":false,"changes":482,"status":"modified"},{"patch":"@@ -123,3 +123,3 @@\n-                rfp_off = r0_off + (RegisterImpl::number_of_registers - 2) * RegisterImpl::max_slots_per_register,\n-                return_off = rfp_off + RegisterImpl::max_slots_per_register,      \/\/ slot for return address\n-                reg_save_size = return_off + RegisterImpl::max_slots_per_register};\n+                rfp_off = r0_off + (Register::number_of_registers - 2) * Register::max_slots_per_register,\n+                return_off = rfp_off + Register::max_slots_per_register,      \/\/ slot for return address\n+                reg_save_size = return_off + Register::max_slots_per_register};\n@@ -135,1 +135,1 @@\n-  int slots_per_vect = FloatRegisterImpl::save_slots_per_register;\n+  int slots_per_vect = FloatRegister::save_slots_per_register;\n@@ -139,1 +139,1 @@\n-    slots_per_vect = FloatRegisterImpl::slots_per_neon_register;\n+    slots_per_vect = FloatRegister::slots_per_neon_register;\n@@ -149,1 +149,1 @@\n-  int r0_offset = v0_offset_in_bytes() + (slots_per_vect * FloatRegisterImpl::number_of_registers) * BytesPerInt;\n+  int r0_offset = v0_offset_in_bytes() + (slots_per_vect * FloatRegister::number_of_registers) * BytesPerInt;\n@@ -167,1 +167,1 @@\n-                    PRegisterImpl::number_of_saved_registers, 16);\n+                    PRegister::number_of_saved_registers, 16);\n@@ -195,1 +195,1 @@\n-      extra_save_slots_per_register = sve_vector_size_in_slots - FloatRegisterImpl::save_slots_per_register;\n+      extra_save_slots_per_register = sve_vector_size_in_slots - FloatRegister::save_slots_per_register;\n@@ -197,1 +197,1 @@\n-      extra_save_slots_per_register = FloatRegisterImpl::extra_save_slots_per_neon_register;\n+      extra_save_slots_per_register = FloatRegister::extra_save_slots_per_neon_register;\n@@ -201,1 +201,1 @@\n-                             FloatRegisterImpl::number_of_registers;\n+                             FloatRegister::number_of_registers;\n@@ -230,1 +230,1 @@\n-  for (int i = 0; i < RegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n@@ -232,1 +232,1 @@\n-    if (r <= rfp && r != rscratch1 && r != rscratch2) {\n+    if (i <= rfp->encoding() && r != rscratch1 && r != rscratch2) {\n@@ -235,2 +235,2 @@\n-      int sp_offset = RegisterImpl::max_slots_per_register * i +\n-                      FloatRegisterImpl::save_slots_per_register * FloatRegisterImpl::number_of_registers;\n+      int sp_offset = Register::max_slots_per_register * i +\n+                      FloatRegister::save_slots_per_register * FloatRegister::number_of_registers;\n@@ -241,1 +241,1 @@\n-  for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n@@ -246,1 +246,1 @@\n-                            (FloatRegisterImpl::slots_per_neon_register * i);\n+                            (FloatRegister::slots_per_neon_register * i);\n@@ -248,1 +248,1 @@\n-      sp_offset = FloatRegisterImpl::save_slots_per_register * i;\n+      sp_offset = FloatRegister::save_slots_per_register * i;\n@@ -254,1 +254,1 @@\n-    for (int i = 0; i < PRegisterImpl::number_of_saved_registers; i++) {\n+    for (int i = 0; i < PRegister::number_of_saved_registers; i++) {\n@@ -293,2 +293,2 @@\n-\/\/ and VMRegImpl::stack0+1 refers to the memory word 4-byes higher.  Register\n-\/\/ up to RegisterImpl::number_of_registers) are the 64-bit\n+\/\/ and VMRegImpl::stack0+1 refers to the memory word 4-byes higher.\n+\/\/ Register up to Register::number_of_registers are the 64-bit\n@@ -1472,3 +1472,3 @@\n-  bool reg_destroyed[RegisterImpl::number_of_registers];\n-  bool freg_destroyed[FloatRegisterImpl::number_of_registers];\n-  for ( int r = 0 ; r < RegisterImpl::number_of_registers ; r++ ) {\n+  bool reg_destroyed[Register::number_of_registers];\n+  bool freg_destroyed[FloatRegister::number_of_registers];\n+  for ( int r = 0 ; r < Register::number_of_registers ; r++ ) {\n@@ -1477,1 +1477,1 @@\n-  for ( int f = 0 ; f < FloatRegisterImpl::number_of_registers ; f++ ) {\n+  for ( int f = 0 ; f < FloatRegister::number_of_registers ; f++ ) {\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -3048,2 +3048,3 @@\n-      for (FloatRegister f = v0; f < v0 + bulk_width; f++) {\n-        __ rev32(f, __ T16B, v16);\n+      for (int i = 0; i < bulk_width; i++) {\n+        FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + i);\n+        __ rev32(v0_ofs, __ T16B, v16);\n@@ -3064,1 +3065,3 @@\n-        __ eor(v0 + i, __ T16B, v0 + i, v8 + i);\n+        FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + i);\n+        FloatRegister v8_ofs = as_FloatRegister(v8->encoding() + i);\n+        __ eor(v0_ofs, __ T16B, v0_ofs, v8_ofs);\n@@ -3165,1 +3168,4 @@\n-      for (FloatRegister f = v0; f < v8; f++) {\n+\n+      assert(v0->encoding() < v8->encoding(), \"\");\n+      for (int i = v0->encoding(); i < v8->encoding(); i++) {\n+        FloatRegister f = as_FloatRegister(i);\n@@ -3179,1 +3185,3 @@\n-        __ eor(v0 + i, __ T16B, v0 + i, v8 + i);\n+        FloatRegister v0_ofs = as_FloatRegister(v0->encoding() + i);\n+        FloatRegister v8_ofs = as_FloatRegister(v8->encoding() + i);\n+        __ eor(v0_ofs, __ T16B, v0_ofs, v8_ofs);\n@@ -7249,1 +7257,2 @@\n-      assert(tmp1 < r19 && tmp2 < r19, \"register corruption\");\n+      assert(tmp1->encoding() < r19->encoding(), \"register corruption\");\n+      assert(tmp2->encoding() < r19->encoding(), \"register corruption\");\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  for (int i = 0; i < RegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n@@ -50,1 +50,1 @@\n-  for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n@@ -69,1 +69,1 @@\n-  for (int i = 0; i < RegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n@@ -78,1 +78,1 @@\n-  for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n@@ -97,1 +97,1 @@\n-  for (int i = 0; i < RegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < Register::number_of_registers; i++) {\n@@ -106,1 +106,1 @@\n-  for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++) {\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++) {\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    for (int j = 0 ; j < RegisterImpl::max_slots_per_register ; j++) {\n+    for (int j = 0 ; j < Register::max_slots_per_register ; j++) {\n@@ -44,1 +44,1 @@\n-    for (int j = 0 ; j < FloatRegisterImpl::max_slots_per_register ; j++) {\n+    for (int j = 0 ; j < FloatRegister::max_slots_per_register ; j++) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  return ::as_Register(value() \/ RegisterImpl::max_slots_per_register);\n+  return ::as_Register(value() \/ Register::max_slots_per_register);\n@@ -51,1 +51,1 @@\n-                            FloatRegisterImpl::max_slots_per_register);\n+                            FloatRegister::max_slots_per_register);\n@@ -57,1 +57,1 @@\n-                        PRegisterImpl::max_slots_per_register);\n+                        PRegister::max_slots_per_register);\n@@ -64,1 +64,1 @@\n-    return base % FloatRegisterImpl::max_slots_per_register == 0;\n+    return (base % FloatRegister::max_slots_per_register) == 0;\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,3 +29,2 @@\n-inline VMReg RegisterImpl::as_VMReg() const {\n-  if( this==noreg ) return VMRegImpl::Bad();\n-  return VMRegImpl::as_VMReg(encoding() * RegisterImpl::max_slots_per_register);\n+inline VMReg Register::RegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg(encoding() * Register::max_slots_per_register);\n@@ -34,2 +33,2 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() const {\n-  return VMRegImpl::as_VMReg((encoding() * FloatRegisterImpl::max_slots_per_register) +\n+inline VMReg FloatRegister::FloatRegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg((encoding() * FloatRegister::max_slots_per_register) +\n@@ -39,2 +38,3 @@\n-inline VMReg PRegisterImpl::as_VMReg() const {\n-  return VMRegImpl::as_VMReg(encoding() + ConcreteRegisterImpl::max_fpr);\n+inline VMReg PRegister::PRegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg((encoding() * PRegister::max_slots_per_register) +\n+                             ConcreteRegisterImpl::max_fpr);\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}