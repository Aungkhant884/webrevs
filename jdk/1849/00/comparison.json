{"files":[{"patch":"@@ -1659,1 +1659,2 @@\n-        if (result && (t.tsym.isSealed() || s.tsym.isSealed())) {\n+        if (result && t.tsym instanceof ClassSymbol && s.tsym instanceof ClassSymbol\n+                && (t.tsym.isSealed() || s.tsym.isSealed())) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8258662\n+ * @summary Types.isCastable crashes when involving sealed interface and type variable.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8258662\n+ *\/\n+\n+import java.util.List;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+\n+public class T8258662 extends TestRunner {\n+    private ToolBox tb;\n+\n+    public T8258662() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        T8258662 t = new T8258662();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testSealedClassIsCastable() throws Exception {\n+        String code = \"\"\"\n+                class Test8258662 {\n+                    sealed interface I<T> {\n+                        final class C implements I<Object> { }\n+                    }\n+                    static <T extends I<Object>> void f(T x) {\n+                        if (x instanceof I<Object>) { }\n+                    }\n+                }\"\"\";\n+        new JavacTask(tb)\n+                .sources(code)\n+                .classpath(\".\")\n+                .options(\"--enable-preview\", \"-source\",  Integer.toString(Runtime.version().feature()))\n+                .run()\n+                .writeAll();\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/sealed\/T8258662\/T8258662.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}