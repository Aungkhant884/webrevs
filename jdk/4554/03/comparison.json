{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,37 +48,0 @@\n-\n-\/\/\n-\/\/ Macros for use in defining Register instances.  We'd like to be\n-\/\/ able to simply define const instances of the RegisterImpl* for each\n-\/\/ of the registers needed on a system in a header file.  However many\n-\/\/ compilers don't handle this very well and end up producing a\n-\/\/ private definition in every file which includes the header file.\n-\/\/ Along with the static constructors necessary for initialization it\n-\/\/ can consume a significant amount of space in the result library.\n-\/\/\n-\/\/ The following macros allow us to declare the instance in a .hpp and\n-\/\/ produce an enumeration value which has the same number.  Then in a\n-\/\/ .cpp the the register instance can be defined using the enumeration\n-\/\/ value.  This avoids the use of static constructors and multiple\n-\/\/ definitions per .cpp.  In addition #defines for the register can be\n-\/\/ produced so that the constant registers can be inlined.  These\n-\/\/ macros should not be used inside other macros, because you may get\n-\/\/ multiple evaluations of the macros which can give bad results.\n-\/\/\n-\/\/ Here are some example uses and expansions.  Note that the macro\n-\/\/ invocation is terminated with a ;.\n-\/\/\n-\/\/ CONSTANT_REGISTER_DECLARATION(Register, G0, 0);\n-\/\/\n-\/\/ extern const Register G0 ;\n-\/\/ enum { G0_RegisterEnumValue = 0 } ;\n-\/\/\n-\/\/ REGISTER_DECLARATION(Register, Gmethod, G5);\n-\/\/\n-\/\/ extern const Register Gmethod ;\n-\/\/ enum { Gmethod_RegisterEnumValue = G5_RegisterEnumValue } ;\n-\/\/\n-\/\/ REGISTER_DEFINITION(Register, G0);\n-\/\/\n-\/\/ const Register G0 = ( ( Register ) G0_RegisterEnumValue ) ;\n-\/\/\n-\n@@ -87,2 +50,2 @@\n-#define CONSTANT_REGISTER_DECLARATION(type, name, value) \\\n-extern const type name;                                  \\\n+#define CONSTANT_REGISTER_DECLARATION(type, name, value)        \\\n+const type name = ((type)value);                                \\\n@@ -91,3 +54,2 @@\n-#define REGISTER_DECLARATION(type, name, value) \\\n-extern const type name;                         \\\n-enum { name##_##type##EnumValue = value##_##type##EnumValue }\n+#define REGISTER_DECLARATION(type, name, value)                 \\\n+const type name = ((type)value)\n@@ -95,2 +57,1 @@\n-#define REGISTER_DEFINITION(type, name) \\\n-const type name = ((type)name##_##type##EnumValue)\n+#define REGISTER_DEFINITION(type, name)\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":6,"deletions":45,"binary":false,"changes":51,"status":"modified"}]}