{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,1 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Queue;\n+import java.util.ServiceLoader;\n@@ -36,13 +30,0 @@\n-import javax.lang.model.element.Name;\n-import javax.tools.StandardLocation;\n-\n-import com.sun.source.doctree.DocCommentTree;\n-import com.sun.source.tree.BlockTree;\n-import com.sun.source.tree.ClassTree;\n-import com.sun.source.tree.CompilationUnitTree;\n-import com.sun.source.tree.LambdaExpressionTree;\n-import com.sun.source.tree.ModuleTree;\n-import com.sun.source.tree.PackageTree;\n-import com.sun.source.tree.MethodTree;\n-import com.sun.source.tree.Tree;\n-import com.sun.source.tree.VariableTree;\n@@ -51,28 +32,0 @@\n-import com.sun.source.util.TaskEvent;\n-import com.sun.source.util.TaskListener;\n-import com.sun.source.util.TreePath;\n-import com.sun.source.util.TreePathScanner;\n-import com.sun.tools.javac.api.JavacTaskImpl;\n-import com.sun.tools.javac.api.JavacTool;\n-import com.sun.tools.javac.file.JavacFileManager;\n-import com.sun.tools.javac.main.JavaCompiler;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.DefinedBy;\n-import com.sun.tools.javac.util.DefinedBy.Api;\n-\n-\/**\n- * Multi-function entry point for the doc check utility.\n- *\n- * This class can be invoked in the following ways:\n- * <ul>\n- * <li>From the command line\n- * <li>From javac, as a plugin\n- * <li>Directly, via a simple API\n- * <\/ul>\n- *\n- * <p><b>This is NOT part of any supported API.\n- * If you write code that depends on this, you do so at your own\n- * risk.  This code and its internal interfaces are subject to change\n- * or deletion without notice.<\/b><\/p>\n- *\/\n-public class DocLint implements Plugin {\n@@ -80,0 +33,1 @@\n+public abstract class DocLint implements Plugin {\n@@ -82,2 +36,0 @@\n-    private static final String STATS = \"-stats\";\n-    public static final String XCUSTOM_TAGS_PREFIX = \"-XcustomTags:\";\n@@ -86,179 +38,0 @@\n-    public static final String SEPARATOR = \",\";\n-\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"Command-line entry point\">\n-    public static void main(String... args) {\n-        DocLint dl = new DocLint();\n-        try {\n-            dl.run(args);\n-        } catch (BadArgs e) {\n-            System.err.println(e.getMessage());\n-            System.exit(1);\n-        } catch (IOException e) {\n-            System.err.println(dl.localize(\"dc.main.ioerror\", e.getLocalizedMessage()));\n-            System.exit(2);\n-        }\n-    }\n-\n-    \/\/ <\/editor-fold>\n-\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"Simple API\">\n-\n-    public class BadArgs extends Exception {\n-        private static final long serialVersionUID = 0;\n-        BadArgs(String code, Object... args) {\n-            super(localize(code, args));\n-            this.code = code;\n-            this.args = args;\n-        }\n-\n-        final String code;\n-        final transient Object[] args;\n-    }\n-\n-    \/**\n-     * Simple API entry point.\n-     * @param args Options and operands for doclint\n-     * @throws BadArgs if an error is detected in any args\n-     * @throws IOException if there are problems with any of the file arguments\n-     *\/\n-    public void run(String... args) throws BadArgs, IOException {\n-        PrintWriter out = new PrintWriter(System.out);\n-        try {\n-            run(out, args);\n-        } finally {\n-            out.flush();\n-        }\n-    }\n-\n-    public void run(PrintWriter out, String... args) throws BadArgs, IOException {\n-        env = new Env();\n-        processArgs(args);\n-\n-        boolean noFiles = javacFiles.isEmpty();\n-        if (needHelp) {\n-            showHelp(out);\n-            if (noFiles)\n-                return;\n-        } else if (noFiles) {\n-            out.println(localize(\"dc.main.no.files.given\"));\n-            return;\n-        }\n-\n-        JavacTool tool = JavacTool.create();\n-\n-        JavacFileManager fm = new JavacFileManager(new Context(), false, null);\n-        fm.setSymbolFileEnabled(false);\n-        if (javacBootClassPath != null) {\n-            fm.setLocation(StandardLocation.PLATFORM_CLASS_PATH, javacBootClassPath);\n-        }\n-        if (javacClassPath != null) {\n-            fm.setLocation(StandardLocation.CLASS_PATH, javacClassPath);\n-        }\n-        if (javacSourcePath != null) {\n-            fm.setLocation(StandardLocation.SOURCE_PATH, javacSourcePath);\n-        }\n-\n-        JavacTask task = tool.getTask(out, fm, null, javacOpts, null,\n-                fm.getJavaFileObjectsFromFiles(javacFiles));\n-        Iterable<? extends CompilationUnitTree> units = task.parse();\n-        ((JavacTaskImpl) task).enter();\n-\n-        env.init(task);\n-        checker = new Checker(env);\n-\n-        DeclScanner ds = new DeclScanner(env) {\n-            @Override\n-            void visitDecl(Tree tree, Name name) {\n-                TreePath p = getCurrentPath();\n-                DocCommentTree dc = env.trees.getDocCommentTree(p);\n-\n-                checker.scan(dc, p);\n-            }\n-        };\n-\n-        ds.scan(units, null);\n-\n-        reportStats(out);\n-\n-        Context ctx = ((JavacTaskImpl) task).getContext();\n-        JavaCompiler c = JavaCompiler.instance(ctx);\n-        c.printCount(\"error\", c.errorCount());\n-        c.printCount(\"warn\", c.warningCount());\n-    }\n-\n-    void processArgs(String... args) throws BadArgs {\n-        javacOpts = new ArrayList<>();\n-        javacFiles = new ArrayList<>();\n-\n-        if (args.length == 0)\n-            needHelp = true;\n-\n-        for (int i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.matches(\"-Xmax(errs|warns)\") && i + 1 < args.length) {\n-                if (args[++i].matches(\"[0-9]+\")) {\n-                    javacOpts.add(arg);\n-                    javacOpts.add(args[i]);\n-                } else {\n-                    throw new BadArgs(\"dc.bad.value.for.option\", arg, args[i]);\n-                }\n-            } else if ((arg.equals(\"-target\") || arg.equals(\"-source\")) && i + 1 < args.length) {\n-                javacOpts.add(arg);\n-                javacOpts.add(args[++i]);\n-            } else if (arg.equals(STATS)) {\n-                env.messages.setStatsEnabled(true);\n-            } else if (arg.equals(\"-bootclasspath\") && i + 1 < args.length) {\n-                javacBootClassPath = splitPath(args[++i]);\n-            } else if (arg.equals(\"-classpath\") && i + 1 < args.length) {\n-                javacClassPath = splitPath(args[++i]);\n-            } else if (arg.equals(\"-cp\") && i + 1 < args.length) {\n-                javacClassPath = splitPath(args[++i]);\n-            } else if (arg.equals(\"-sourcepath\") && i + 1 < args.length) {\n-                javacSourcePath = splitPath(args[++i]);\n-            } else if (arg.equals(XMSGS_OPTION)) {\n-                env.messages.setOptions(null);\n-            } else if (arg.startsWith(XMSGS_CUSTOM_PREFIX)) {\n-                env.messages.setOptions(arg.substring(arg.indexOf(\":\") + 1));\n-            } else if (arg.startsWith(XCUSTOM_TAGS_PREFIX)) {\n-                env.setCustomTags(arg.substring(arg.indexOf(\":\") + 1));\n-            } else if (arg.startsWith(XHTML_VERSION_PREFIX)) {\n-                String argsVersion = arg.substring(arg.indexOf(\":\") + 1);\n-                HtmlVersion htmlVersion = HtmlVersion.getHtmlVersion(argsVersion);\n-                if (htmlVersion != null) {\n-                    env.setHtmlVersion(htmlVersion);\n-                } else {\n-                    throw new BadArgs(\"dc.bad.value.for.option\", arg, argsVersion);\n-                }\n-            } else if (arg.equals(\"-h\") || arg.equals(\"-help\") || arg.equals(\"--help\")\n-                    || arg.equals(\"-?\") || arg.equals(\"-usage\")) {\n-                needHelp = true;\n-            } else if (arg.startsWith(\"-\")) {\n-                throw new BadArgs(\"dc.bad.option\", arg);\n-            } else {\n-                while (i < args.length)\n-                    javacFiles.add(new File(args[i++]));\n-            }\n-        }\n-    }\n-\n-    void showHelp(PrintWriter out) {\n-        String msg = localize(\"dc.main.usage\");\n-        for (String line: msg.split(\"\\n\"))\n-            out.println(line);\n-    }\n-\n-    List<File> splitPath(String path) {\n-        List<File> files = new ArrayList<>();\n-        for (String f: path.split(File.pathSeparator)) {\n-            if (f.length() > 0)\n-                files.add(new File(f));\n-        }\n-        return files;\n-    }\n-\n-    List<File> javacBootClassPath;\n-    List<File> javacClassPath;\n-    List<File> javacSourcePath;\n-    List<String> javacOpts;\n-    List<File> javacFiles;\n-    boolean needHelp = false;\n@@ -266,1 +39,1 @@\n-    \/\/ <\/editor-fold>\n+    private static ServiceLoader.Provider<DocLint> docLintProvider;\n@@ -268,1 +41,1 @@\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"javac Plugin\">\n+    public abstract boolean isValidOption(String opt);\n@@ -270,91 +43,10 @@\n-    @Override @DefinedBy(Api.COMPILER_TREE)\n-    public String getName() {\n-        return \"doclint\";\n-    }\n-\n-    @Override @DefinedBy(Api.COMPILER_TREE)\n-    public void init(JavacTask task, String... args) {\n-        init(task, args, true);\n-    }\n-\n-    \/\/ <\/editor-fold>\n-\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"Embedding API\">\n-\n-    public void init(JavacTask task, String[] args, boolean addTaskListener) {\n-        env = new Env();\n-        for (String arg : args) {\n-            if (arg.equals(XMSGS_OPTION)) {\n-                env.messages.setOptions(null);\n-            } else if (arg.startsWith(XMSGS_CUSTOM_PREFIX)) {\n-                env.messages.setOptions(arg.substring(arg.indexOf(\":\") + 1));\n-            } else if (arg.startsWith(XCUSTOM_TAGS_PREFIX)) {\n-                env.setCustomTags(arg.substring(arg.indexOf(\":\") + 1));\n-            } else if (arg.startsWith(XHTML_VERSION_PREFIX)) {\n-                String argsVersion = arg.substring(arg.indexOf(\":\") + 1);\n-                HtmlVersion htmlVersion = HtmlVersion.getHtmlVersion(argsVersion);\n-                if (htmlVersion != null) {\n-                    env.setHtmlVersion(htmlVersion);\n-                } else {\n-                    throw new IllegalArgumentException(argsVersion);\n-                }\n-            } else if (arg.startsWith(XCHECK_PACKAGE)) {\n-                env.setCheckPackages(arg.substring(arg.indexOf(\":\") + 1));\n-            } else\n-                throw new IllegalArgumentException(arg);\n-        }\n-        env.init(task);\n-\n-        checker = new Checker(env);\n-\n-        if (addTaskListener) {\n-            final DeclScanner ds = new DeclScanner(env) {\n-                @Override\n-                void visitDecl(Tree tree, Name name) {\n-                    TreePath p = getCurrentPath();\n-                    DocCommentTree dc = env.trees.getDocCommentTree(p);\n-\n-                    checker.scan(dc, p);\n-                }\n-            };\n-\n-            TaskListener tl = new TaskListener() {\n-                @Override @DefinedBy(Api.COMPILER_TREE)\n-                public void started(TaskEvent e) {\n-                    switch (e.getKind()) {\n-                        case ANALYZE:\n-                            CompilationUnitTree tree;\n-                            while ((tree = todo.poll()) != null)\n-                                ds.scan(tree, null);\n-                            break;\n-                    }\n-                }\n-\n-                @Override @DefinedBy(Api.COMPILER_TREE)\n-                public void finished(TaskEvent e) {\n-                    switch (e.getKind()) {\n-                        case PARSE:\n-                            todo.add(e.getCompilationUnit());\n-                            break;\n-                    }\n-                }\n-\n-                Queue<CompilationUnitTree> todo = new LinkedList<>();\n-            };\n-\n-            task.addTaskListener(tl);\n-        }\n-    }\n-\n-    public void scan(TreePath p) {\n-        DocCommentTree dc = env.trees.getDocCommentTree(p);\n-        checker.scan(dc, p);\n-    }\n-\n-    public boolean shouldCheck(CompilationUnitTree unit) {\n-        return env.shouldCheck(unit);\n-    }\n-\n-    public void reportStats(PrintWriter out) {\n-        env.messages.reportStats(out);\n-    }\n+    public static synchronized DocLint newDocLint() {\n+        if (docLintProvider == null) {\n+            docLintProvider = ServiceLoader.load(DocLint.class).stream()\n+                    .filter(p_ -> p_.get().getName().equals(\"doclint\"))\n+                    .findFirst()\n+                    .orElse(new ServiceLoader.Provider<>() {\n+                        @Override\n+                        public Class<? extends DocLint> type() {\n+                            return NoDocLint.class;\n+                        }\n@@ -362,12 +54,5 @@\n-    \/\/ <\/editor-fold>\n-\n-    Env env;\n-    Checker checker;\n-\n-    public static boolean isValidOption(String opt) {\n-        if (opt.equals(XMSGS_OPTION))\n-           return true;\n-        if (opt.startsWith(XMSGS_CUSTOM_PREFIX))\n-           return Messages.Options.isValidOptions(opt.substring(XMSGS_CUSTOM_PREFIX.length()));\n-        if (opt.startsWith(XCHECK_PACKAGE)) {\n-            return Env.validatePackages(opt.substring(opt.indexOf(\":\") + 1));\n+                        @Override\n+                        public DocLint get() {\n+                            return new NoDocLint();\n+                        }\n+                    });\n@@ -375,6 +60,1 @@\n-        return false;\n-    }\n-\n-    private String localize(String code, Object... args) {\n-        Messages m = (env != null) ? env.messages : new Messages(null);\n-        return m.localize(code, args);\n+        return docLintProvider.get();\n@@ -383,21 +63,4 @@\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"DeclScanner\">\n-\n-    static abstract class DeclScanner extends TreePathScanner<Void, Void> {\n-        final Env env;\n-\n-        public DeclScanner(Env env) {\n-            this.env = env;\n-        }\n-\n-        abstract void visitDecl(Tree tree, Name name);\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitPackage(PackageTree tree, Void ignore) {\n-            visitDecl(tree, null);\n-            return super.visitPackage(tree, ignore);\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitClass(ClassTree tree, Void ignore) {\n-            visitDecl(tree, tree.getSimpleName());\n-            return super.visitClass(tree, ignore);\n+    private static class NoDocLint extends DocLint {\n+        @Override\n+        public String getName() {\n+            return \"doclint-not-available\";\n@@ -406,4 +69,3 @@\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitMethod(MethodTree tree, Void ignore) {\n-            visitDecl(tree, tree.getName());\n-            return null;\n+        @Override\n+        public void init(JavacTask task, String... args) {\n+            \/\/ ignore\n@@ -412,4 +74,3 @@\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitModule(ModuleTree tree, Void ignore) {\n-            visitDecl(tree, null);\n-            return super.visitModule(tree, ignore);\n+        @Override\n+        public boolean isValidOption(String s) {\n+            return false;\n@@ -417,25 +78,0 @@\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitVariable(VariableTree tree, Void ignore) {\n-            visitDecl(tree, tree.getName());\n-            return super.visitVariable(tree, ignore);\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitCompilationUnit(CompilationUnitTree node, Void p) {\n-            if (!env.shouldCheck(node)) {\n-                return null;\n-            }\n-            return super.visitCompilationUnit(node, p);\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitBlock(BlockTree tree, Void ignore) {\n-            return null;\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Void visitLambdaExpression(LambdaExpressionTree tree, Void ignore) {\n-            return null;\n-        }\n-\n@@ -443,3 +79,0 @@\n-\n-    \/\/ <\/editor-fold>\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/DocLint.java","additions":31,"deletions":398,"binary":false,"changes":429,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        new DocLint().init(this, docLintOpts.toArray(new String[docLintOpts.size()]));\n+        DocLint.newDocLint().init(this, docLintOpts.toArray(new String[docLintOpts.size()]));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/BasicJavacTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-            return DocLint.isValidOption(\n+            return DocLint.newDocLint().isValidOption(\n@@ -150,1 +150,1 @@\n-            return DocLint.isValidOption(\n+            return DocLint.newDocLint().isValidOption(\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Set;\n@@ -49,1 +50,0 @@\n-import com.sun.tools.doclint.HtmlTag;\n@@ -98,0 +98,1 @@\n+import com.sun.tools.javac.util.StringUtils;\n@@ -99,1 +100,0 @@\n-import static com.sun.tools.doclint.HtmlTag.*;\n@@ -115,1 +115,1 @@\n-    final EnumSet<HtmlTag> sentenceBreakTags;\n+    final Set<String> sentenceBreakTags;\n@@ -145,1 +145,1 @@\n-        sentenceBreakTags = EnumSet.of(H1, H2, H3, H4, H5, H6, PRE, P);\n+        sentenceBreakTags = Set.of(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"PRE\", \"P\");\n@@ -693,1 +693,1 @@\n-        return sentenceBreakTags.contains(get(tagName));\n+        return sentenceBreakTags.contains(StringUtils.toUpperCase(tagName.toString()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.HashMap;\n@@ -61,1 +62,0 @@\n-import com.sun.tools.doclint.HtmlTag;\n@@ -127,0 +127,21 @@\n+    enum HtmlTag {\n+        HTML,\n+        H1, H2, H3, H4, H5, H6,\n+        BLOCKQUOTE, P, PRE,\n+        IMG,\n+        OL, UL, LI,\n+        DL, DT, DD,\n+        TABLE, TR, TD, TH;\n+\n+        private static final Map<String, HtmlTag> index = new HashMap<>();\n+        static {\n+            for (HtmlTag t: values()) {\n+                index.put(StringUtils.toLowerCase(t.name()), t);\n+            }\n+        }\n+\n+        public static HtmlTag get(Name tagName) {\n+            return index.get(StringUtils.toLowerCase(tagName.toString()));\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/jdk\/internal\/shellsupport\/doc\/JavadocFormatter.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+    uses com.sun.tools.doclint.DocLint;\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import com.sun.tools.doclint.HtmlTag;\n@@ -45,0 +44,1 @@\n+import jdk.javadoc.internal.doclint.HtmlTag;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandlerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+\n+import jdk.javadoc.internal.doclint.HtmlTag;\n@@ -1265,1 +1267,1 @@\n-            com.sun.tools.doclint.HtmlTag htmlTag = com.sun.tools.doclint.HtmlTag.get(name);\n+            HtmlTag htmlTag = HtmlTag.get(name);\n@@ -1267,1 +1269,1 @@\n-                    htmlTag.blockType != com.sun.tools.doclint.HtmlTag.BlockType.INLINE) {\n+                    htmlTag.blockType != jdk.javadoc.internal.doclint.HtmlTag.BlockType.INLINE) {\n@@ -1367,3 +1369,3 @@\n-                            com.sun.tools.doclint.HtmlTag htag =\n-                                    com.sun.tools.doclint.HtmlTag.get(name);\n-                            return htag != null && htag.equals(com.sun.tools.doclint.HtmlTag.A);\n+                            jdk.javadoc.internal.doclint.HtmlTag htag =\n+                                    jdk.javadoc.internal.doclint.HtmlTag.get(name);\n+                            return htag != null && htag.equals(jdk.javadoc.internal.doclint.HtmlTag.A);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -414,1 +414,1 @@\n-                        if (!DocLint.isValidOption(dopt)) {\n+                        if (!DocLint.newDocLint().isValidOption(dopt)) {\n@@ -427,1 +427,1 @@\n-                        if (!DocLint.isValidOption(dopt)) {\n+                        if (!DocLint.newDocLint().isValidOption(dopt)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-import com.sun.tools.doclint.DocLint;\n@@ -73,0 +72,1 @@\n+import jdk.javadoc.internal.doclint.DocLint;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n@@ -88,1 +88,0 @@\n-import com.sun.tools.doclint.HtmlTag.AttrKind;\n@@ -93,1 +92,0 @@\n-import com.sun.tools.javac.util.StringUtils;\n@@ -95,1 +93,2 @@\n-import static com.sun.tools.doclint.Messages.Group.*;\n+import jdk.javadoc.internal.doclint.HtmlTag.AttrKind;\n+import static jdk.javadoc.internal.doclint.Messages.Group.*;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/Checker.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n@@ -78,1 +78,1 @@\n-public class DocLint implements Plugin {\n+public class DocLint extends com.sun.tools.doclint.DocLint {\n@@ -367,1 +367,1 @@\n-    public static boolean isValidOption(String opt) {\n+    public boolean isValidOption(String opt) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/DocLint.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/DocLint.java","status":"copied"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Env.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/Env.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n@@ -38,1 +38,1 @@\n-import static com.sun.tools.doclint.HtmlTag.Attr.*;\n+import static jdk.javadoc.internal.doclint.HtmlTag.Attr.*;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/HtmlTag.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/HtmlTag.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/HtmlVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/HtmlVersion.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tools.doclint;\n+package jdk.javadoc.internal.doclint;\n@@ -44,1 +44,0 @@\n-import com.sun.tools.doclint.Env.AccessKind;\n@@ -46,0 +45,1 @@\n+import jdk.javadoc.internal.doclint.Env.AccessKind;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Messages.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/Messages.java","status":"renamed"},{"patch":"","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/resources\/doclint.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint_ja.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/resources\/doclint_ja.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint_zh_CN.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/resources\/doclint_zh_CN.properties","status":"renamed"},{"patch":"@@ -73,0 +73,3 @@\n+\n+    provides com.sun.tools.doclint.DocLint with\n+            jdk.javadoc.internal.doclint.DocLint;\n","filename":"src\/jdk.javadoc\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -43,2 +43,2 @@\n-import com.sun.tools.doclint.Messages.Group;\n-import static com.sun.tools.doclint.Messages.Group.*;\n+import jdk.javadoc.internal.doclint.Messages.Group;\n+import static jdk.javadoc.internal.doclint.Messages.Group.*;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDocLintOption\/TestDocLintOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/AccessTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/AccessibilityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/AccessibilityTest5.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/AnchorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/AnchorTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/BadPackageCommentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -31,3 +31,0 @@\n-import com.sun.tools.doclint.Checker;\n-import com.sun.tools.doclint.HtmlTag;\n-import com.sun.tools.doclint.Messages;\n@@ -36,0 +33,4 @@\n+import jdk.javadoc.internal.doclint.Checker;\n+import jdk.javadoc.internal.doclint.HtmlTag;\n+import jdk.javadoc.internal.doclint.Messages;\n+\n","filename":"test\/langtools\/tools\/doclint\/CoverageExtras.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/CustomTagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import com.sun.tools.doclint.DocLint;\n-import com.sun.tools.doclint.DocLint.BadArgs;\n+import jdk.javadoc.internal.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint.BadArgs;\n","filename":"test\/langtools\/tools\/doclint\/DocLintTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/DuplicateParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/DuplicateReturnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyAuthorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -44,1 +44,1 @@\n-import com.sun.tools.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint;\n","filename":"test\/langtools\/tools\/doclint\/EmptyHtmlTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyPreTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyReturnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptySerialDataTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptySerialFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptySinceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EmptyVersionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EndTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/EndWithIdentifierTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/HtmlAttrsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/HtmlTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/HtmlVersionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/LambdaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/LiteralTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/MissingCommentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/MissingParamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/MissingReturnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/MissingThrowsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -31,1 +31,1 @@\n-import com.sun.tools.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint;\n@@ -83,0 +83,1 @@\n+        DocLint docLint = new DocLint();\n@@ -85,1 +86,1 @@\n-            boolean found = DocLint.isValidOption(test);\n+            boolean found = docLint.isValidOption(test);\n","filename":"test\/langtools\/tools\/doclint\/OptionTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/OverridesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/ParaTagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/ProvidesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/ReferenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -38,1 +38,1 @@\n-import com.sun.tools.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint;\n","filename":"test\/langtools\/tools\/doclint\/ResourceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -41,2 +41,2 @@\n-import com.sun.tools.doclint.DocLint;\n-import com.sun.tools.doclint.DocLint.BadArgs;\n+import jdk.javadoc.internal.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint.BadArgs;\n","filename":"test\/langtools\/tools\/doclint\/RunTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/SummaryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/SyntaxTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/SyntheticTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/UnfinishedInlineTagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/UsesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/ValidTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/ValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/anchorTests\/p\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/anchorTests\/p\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/BlockTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/EntitiesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/HtmlVersionTagsAttrsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/InlineTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/ListTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/OtherTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/TableTagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/TagNotAllowed.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/html\/TextNotAllowed.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/moduleTests\/bad\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/moduleTests\/good\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/packageTests\/bad\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/packageTests\/bad\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/packageTests\/good\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/packageTests\/good\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/AnchorAlreadyDefined.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/BadEnd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/InsertImplicit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/InvalidEntity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/InvalidName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/InvalidTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/InvalidURI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/MissingGT.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/MissingTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/NestedTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/ParaInPre.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/RepeatedAttr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/TextNotAllowed.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/TrimmingEmptyTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tidy\/UnescapedOrUnknownEntity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tool\/HelpTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tool\/MaxDiagsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n@@ -32,0 +31,1 @@\n+ *          jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -46,2 +46,2 @@\n-import com.sun.tools.doclint.DocLint;\n-import com.sun.tools.doclint.DocLint.BadArgs;\n+import jdk.javadoc.internal.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint.BadArgs;\n","filename":"test\/langtools\/tools\/doclint\/tool\/PathsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n@@ -32,4 +32,0 @@\n-import com.sun.source.util.JavacTask;\n-import com.sun.tools.doclint.DocLint;\n-import com.sun.tools.doclint.DocLint.BadArgs;\n-import com.sun.tools.javac.api.JavacTool;\n@@ -49,0 +45,6 @@\n+import com.sun.source.util.JavacTask;\n+import com.sun.tools.javac.api.JavacTool;\n+\n+import jdk.javadoc.internal.doclint.DocLint;\n+import jdk.javadoc.internal.doclint.DocLint.BadArgs;\n+\n","filename":"test\/langtools\/tools\/doclint\/tool\/RunTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @modules jdk.compiler\/com.sun.tools.doclint\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n","filename":"test\/langtools\/tools\/doclint\/tool\/StatsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}