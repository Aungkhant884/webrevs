{"files":[{"patch":"@@ -313,5 +313,10 @@\n-stringStream::stringStream(size_t initial_size) : outputStream() {\n-  buffer_length = initial_size;\n-  buffer        = NEW_C_HEAP_ARRAY(char, buffer_length, mtInternal);\n-  buffer_pos    = 0;\n-  buffer_fixed  = false;\n+stringStream::stringStream(size_t initial_capacity) :\n+  outputStream(),\n+  _buffer(_small_buffer),\n+  _written(0),\n+  _capacity(sizeof(_small_buffer)),\n+  _is_fixed(false)\n+{\n+  if (initial_capacity > _capacity) {\n+    grow(initial_capacity);\n+  }\n@@ -322,5 +327,7 @@\n-stringStream::stringStream(char* fixed_buffer, size_t fixed_buffer_size) : outputStream() {\n-  buffer_length = fixed_buffer_size;\n-  buffer        = fixed_buffer;\n-  buffer_pos    = 0;\n-  buffer_fixed  = true;\n+stringStream::stringStream(char* fixed_buffer, size_t fixed_buffer_size) :\n+  outputStream(),\n+  _buffer(fixed_buffer),\n+  _written(0),\n+  _capacity(fixed_buffer_size),\n+  _is_fixed(true)\n+{\n@@ -330,0 +337,18 @@\n+\/\/ Grow backing buffer to desired capacity. Don't call for fixed buffers\n+void stringStream::grow(size_t new_capacity) {\n+  assert(new_capacity > _capacity, \"Sanity\");\n+  assert(new_capacity > sizeof(_small_buffer), \"Sanity\");\n+  assert(!_is_fixed, \"Don't call for caller provided buffers\");\n+  if (_buffer == _small_buffer) {\n+    _buffer = NEW_C_HEAP_ARRAY(char, new_capacity, mtInternal);\n+    _capacity = new_capacity;\n+    if (_written > 0) {\n+      ::memcpy(_buffer, _small_buffer, _written);\n+    }\n+    zero_terminate();\n+  } else {\n+    _buffer = REALLOC_C_HEAP_ARRAY(char, _buffer, new_capacity, mtInternal);\n+    _capacity = new_capacity;\n+  }\n+}\n+\n@@ -332,3 +357,3 @@\n-  size_t end = buffer_pos + len + 1;    \/\/ position after write and final '\\0'\n-  if (end > buffer_length) {\n-    if (buffer_fixed) {\n+  size_t end = _written + len + 1;    \/\/ position after write and final '\\0'\n+  if (end > _capacity) {\n+    if (_is_fixed) {\n@@ -336,2 +361,1 @@\n-      end = buffer_length;\n-      write_len = end - buffer_pos - 1; \/\/ leave room for the final '\\0'\n+      write_len = _capacity - _written - 1; \/\/ leave room for the final '\\0'\n@@ -341,5 +365,1 @@\n-      if (end < buffer_length * 2) {\n-        end = buffer_length * 2;\n-      }\n-      buffer = REALLOC_C_HEAP_ARRAY(char, buffer, end, mtInternal);\n-      buffer_length = end;\n+      grow(MAX2(end, _capacity * 2));\n@@ -349,1 +369,1 @@\n-  guarantee(buffer_pos + write_len + 1 <= buffer_length, \"stringStream oob\");\n+  guarantee(_written + write_len + 1 <= _capacity, \"stringStream oob\");\n@@ -351,2 +371,2 @@\n-    memcpy(buffer + buffer_pos, s, write_len);\n-    buffer_pos += write_len;\n+    memcpy(_buffer + _written, s, write_len);\n+    _written += write_len;\n@@ -363,3 +383,3 @@\n-  assert(buffer != NULL &&\n-         buffer_pos < buffer_length, \"sanity\");\n-  buffer[buffer_pos] = '\\0';\n+  assert(_buffer != NULL &&\n+         _written < _capacity, \"sanity\");\n+  _buffer[_written] = '\\0';\n@@ -369,1 +389,1 @@\n-  buffer_pos = 0; _precount = 0; _position = 0;\n+  _written = 0; _precount = 0; _position = 0;\n@@ -375,3 +395,3 @@\n-    NEW_C_HEAP_ARRAY(char, buffer_pos + 1, mtInternal) : NEW_RESOURCE_ARRAY(char, buffer_pos + 1);\n-  strncpy(copy, buffer, buffer_pos);\n-  copy[buffer_pos] = 0;  \/\/ terminating null\n+    NEW_C_HEAP_ARRAY(char, _written + 1, mtInternal) : NEW_RESOURCE_ARRAY(char, _written + 1);\n+  strncpy(copy, _buffer, _written);\n+  copy[_written] = 0;  \/\/ terminating null\n@@ -387,2 +407,2 @@\n-  if (buffer_fixed == false && buffer != NULL) {\n-    FREE_C_HEAP_ARRAY(char, buffer);\n+  if (_is_fixed == false && _buffer != NULL && _buffer != _small_buffer) {\n+    FREE_C_HEAP_ARRAY(char, _buffer);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":52,"deletions":32,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -196,4 +196,8 @@\n-  char*  buffer;\n-  size_t buffer_pos;\n-  size_t buffer_length;\n-  bool   buffer_fixed;\n+  char*  _buffer;\n+  size_t _written;\n+  size_t _capacity;\n+  const bool _is_fixed;\n+  char   _small_buffer[32];\n+\n+  \/\/ Grow backing buffer to desired capacity.\n+  void grow(size_t new_capacity);\n@@ -207,1 +211,1 @@\n-  stringStream(size_t initial_bufsize = 256);\n+  stringStream(size_t initial_capacity = 0);\n@@ -215,2 +219,2 @@\n-  size_t      size() const { return buffer_pos; }\n-  const char* base() const { return buffer; }\n+  size_t      size() const { return _written; }\n+  const char* base() const { return _buffer; }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-static size_t print_lorem(outputStream* st, bool short_len) {\n+static size_t print_lorem(outputStream* st) {\n@@ -42,6 +42,3 @@\n-  size_t len;\n-  if (short_len) {\n-    len = os::random() % 10;\n-  } else {\n-    len = MAX2(1, (int)(os::random() % len_lorem));\n-  }\n+  \/\/ Randomly alternate between short and long writes at a ratio of 9:1.\n+  const bool short_write = (os::random() % 10) > 0;\n+  const size_t len = os::random() % (short_write ? 10 : len_lorem);\n@@ -56,2 +53,1 @@\n-\n-static void do_test_stringStream(stringStream* ss, bool short_len, size_t expected_cap) {\n+static void do_test_stringStream(stringStream* ss, size_t expected_cap) {\n@@ -61,1 +57,1 @@\n-    written += print_lorem(ss, short_len);\n+    written += print_lorem(ss);\n@@ -76,3 +72,5 @@\n-TEST_VM(ostream, stringStream_dynamic_realloc_1) {\n-  stringStream ss(2); \/\/ dynamic buffer with very small starting size\n-  do_test_stringStream(&ss, false, 0);\n+TEST_VM(ostream, stringStream_dynamic_start_with_internal_buffer) {\n+  stringStream ss;\n+  do_test_stringStream(&ss, 0);\n+  ss.reset();\n+  do_test_stringStream(&ss, 0);\n@@ -81,3 +79,5 @@\n-TEST_VM(ostream, stringStream_dynamic_realloc_2) {\n-  stringStream ss(2); \/\/ dynamic buffer with very small starting size\n-  do_test_stringStream(&ss, true, 0);\n+TEST_VM(ostream, stringStream_dynamic_start_with_malloced_buffer) {\n+  stringStream ss(128);\n+  do_test_stringStream(&ss, 0);\n+  ss.reset();\n+  do_test_stringStream(&ss, 0);\n@@ -92,1 +92,1 @@\n-  do_test_stringStream(&ss, false, stream_buf_size);\n+  do_test_stringStream(&ss, stream_buf_size);\n@@ -104,1 +104,1 @@\n-    written += print_lorem(&bs, true);\n+    written += print_lorem(&bs);\n@@ -119,1 +119,1 @@\n-    written += print_lorem(&bs, true);\n+    written += print_lorem(&bs);\n@@ -133,1 +133,1 @@\n-    written += print_lorem(&bs, false);\n+    written += print_lorem(&bs);\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}