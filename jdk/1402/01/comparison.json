{"files":[{"patch":"@@ -103,1 +103,1 @@\n-  assert(_owner != self, \"invariant\");\n+  assert(owner() != self, \"invariant\");\n@@ -128,1 +128,1 @@\n-  assert(_owner != self, \"invariant\");\n+  assert(owner() != self, \"invariant\");\n@@ -148,1 +148,1 @@\n-  if (_owner == self) {\n+  if (owner() == self) {\n@@ -311,1 +311,1 @@\n-  return _owner == Thread::current();\n+  return owner() == Thread::current();\n@@ -317,1 +317,1 @@\n-  st->print(\" - owner thread: \" PTR_FORMAT, p2i(_owner));\n+  st->print(\" - owner thread: \" PTR_FORMAT, p2i(owner()));\n@@ -335,1 +335,1 @@\n-            p2i(this), _name, p2i(_owner));\n+            p2i(this), _name, p2i(owner()));\n@@ -353,1 +353,1 @@\n-  assert(_owner == expected,\n+  assert(owner() == expected,\n@@ -355,1 +355,1 @@\n-         msg, p2i(_owner), p2i(expected));\n+         msg, p2i(owner()), p2i(expected));\n@@ -472,2 +472,2 @@\n-    assert(_owner == NULL, \"setting the owner thread of an already owned mutex\");\n-    _owner = new_owner; \/\/ set the owner\n+    assert(owner() == NULL, \"setting the owner thread of an already owned mutex\");\n+    raw_set_owner(new_owner); \/\/ set the owner\n@@ -485,1 +485,1 @@\n-    Thread* old_owner = _owner;\n+    Thread* old_owner = owner();\n@@ -492,1 +492,1 @@\n-    _owner = NULL; \/\/ set the owner\n+    raw_set_owner(NULL); \/\/ set the owner\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -84,0 +85,7 @@\n+ private:\n+  \/\/ The _owner field is only set by the current thread, either to itself after it has acquired\n+  \/\/ the low-level _lock, or to NULL before it has released the _lock. Accesses by any thread other\n+  \/\/ than the lock owner are inherently racy.\n+  Thread* _owner;\n+  void raw_set_owner(Thread* new_owner) { Atomic::store(&_owner, new_owner); }\n+\n@@ -85,1 +93,0 @@\n-  Thread * volatile _owner;              \/\/ The owner of the lock\n@@ -114,1 +121,1 @@\n-  void set_owner_implementation(Thread* owner)                        NOT_DEBUG({ _owner = owner;});\n+  void set_owner_implementation(Thread* owner)                        NOT_DEBUG({ raw_set_owner(owner);});\n@@ -183,1 +190,1 @@\n-  bool is_locked() const                     { return _owner != NULL; }\n+  bool is_locked() const                     { return owner() != NULL; }\n@@ -200,1 +207,1 @@\n-  \/\/ Current owner - not not MT-safe. Can only be used to guarantee that\n+  \/\/ Current owner - note not MT-safe. Can only be used to guarantee that\n@@ -202,1 +209,1 @@\n-  Thread* owner() const         { return _owner; }\n+  Thread* owner() const         { return Atomic::load(&_owner); }\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}