{"files":[{"patch":"@@ -521,2 +521,2 @@\n-     * going to be verified.\n-     * @param params the parameters used for verifying this signature.\n+     * going to be verified\n+     * @param params the parameters used for verifying this signature object\n@@ -524,2 +524,2 @@\n-     * @throws    InvalidKeyException if the key is invalid.\n-     * @throws    InvalidAlgorithmParameterException if the params is invalid.\n+     * @throws    InvalidKeyException if the key is invalid\n+     * @throws    InvalidAlgorithmParameterException if the params is invalid\n@@ -601,2 +601,2 @@\n-     * going to be verified.\n-     * @param params the parameters used for verifying this signature.\n+     * going to be verified\n+     * @param params the parameters used for verifying this signature object\n@@ -606,2 +606,2 @@\n-     * information or cannot be used for digital signature purposes.\n-     * @throws    InvalidAlgorithmParameterException if the params is invalid.\n+     * information or cannot be used for digital signature purposes\n+     * @throws    InvalidAlgorithmParameterException if the params is invalid\n@@ -650,1 +650,1 @@\n-     * is going to be generated.\n+     * is going to be generated\n@@ -652,1 +652,1 @@\n-     * @param random the source of randomness for this signature.\n+     * @param random the source of randomness for this signature object\n@@ -673,3 +673,3 @@\n-     * is going to be generated.\n-     * @param params the parameters used for generating signature.\n-     * @param random the source of randomness for this signature.\n+     * is going to be generated\n+     * @param params the parameters used for generating signature\n+     * @param random the source of randomness for this signature object\n@@ -677,1 +677,1 @@\n-     * @throws    InvalidKeyException if the key is invalid.\n+     * @throws    InvalidKeyException if the key is invalid\n@@ -970,2 +970,2 @@\n-     * @param param the string identifier of the parameter.\n-     * @param value the parameter value.\n+     * @param param the string identifier of the parameter\n+     * @param value the parameter value\n@@ -974,1 +974,1 @@\n-     * invalid parameter for this signature algorithm engine,\n+     * invalid parameter for this signature object,\n@@ -991,1 +991,1 @@\n-     * Initializes this signature engine with the specified parameter set.\n+     * Initializes this signature object with the specified parameter values.\n@@ -993,1 +993,1 @@\n-     * @param params the parameters\n+     * @param params the parameter values\n@@ -995,2 +995,2 @@\n-     * @throws    InvalidAlgorithmParameterException if the given parameters\n-     * are inappropriate for this signature engine\n+     * @throws InvalidAlgorithmParameterException if the given parameter values\n+     * are inappropriate for this signature object\n@@ -1008,11 +1008,14 @@\n-     * <p> If this signature has been initialized with parameters\n-     * (by calling {@link #setParameter(AlgorithmParameterSpec)} or\n-     * {@link #setParameter(String, Object)}) and the underlying signature\n-     * implementation supports returning the parameters as\n-     * {@code AlgorithmParameters}, this method returns the same parameters.\n-     * If the parameters were not set, this method may return a combination\n-     * of default and randomly generated parameter values if the\n-     * underlying signature implementation supports it and can successfully\n-     * generate them. Otherwise, {@code null} is returned.\n-     *\n-     * @return the parameters used with this signature, or {@code null}\n+     * <p>The returned parameters may be the same that were used to initialize\n+     * this signature object, or may contain additional default or random\n+     * parameter values used by the underlying signature scheme. If the required\n+     * parameters were not supplied and can be generated by the signature\n+     * object, the generated parameters are returned; otherwise {@code null} is\n+     * returned.\n+     *\n+     * <p>However, if the signature scheme does not support returning\n+     * the parameters as {@code AlgorithmParameters}, {@code null} is always\n+     * returned.\n+     *\n+     * @return the parameters used with this signature object, or {@code null}\n+     * @throws UnsupportedOperationException if this method is not overridden\n+     * by a provider\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-     * @param params the parameters for generating this signature\n+     * @param params the parameters for verifying this signature object\n@@ -148,1 +148,1 @@\n-     * @param params the parameters for generating this signature\n+     * @param params the parameters for generating signature\n@@ -361,1 +361,1 @@\n-     * invalid parameter for this signature algorithm engine,\n+     * invalid parameter for this signature object,\n@@ -374,0 +374,2 @@\n+     * Initializes this signature object with the specified parameter values.\n+     *\n@@ -375,1 +377,1 @@\n-     * this signature engine with the specified parameter set.\n+     * this signature object with the specified parameter set.\n@@ -384,1 +386,1 @@\n-     * are inappropriate for this signature engine\n+     * are inappropriate for this signature object\n@@ -392,0 +394,2 @@\n+     * Returns the parameters used with this signature object.\n+     *\n@@ -393,16 +397,17 @@\n-     * used with this signature engine.\n-     *\n-     * <p> If this signature engine has been initialized with parameters\n-     * (by calling {@link #engineSetParameter(AlgorithmParameterSpec)} or\n-     * {@link #engineSetParameter(String, Object)}) and the underlying signature\n-     * implementation supports returning the parameters as\n-     * {@code AlgorithmParameters}, this method returns the same parameters.\n-     * If the parameters were not set, this method may return a combination\n-     * of default and randomly generated parameter values if the\n-     * underlying signature implementation supports it and can successfully\n-     * generate them. Otherwise, {@code null} is returned.\n-     *\n-     * @return the parameters used with this signature engine, or {@code null}\n-     *\n-     * @throws    UnsupportedOperationException if this method is\n-     * not overridden by a provider\n+     * used with this signature object.\n+     *\n+     * <p>The returned parameters may be the same that were used to initialize\n+     * this signature object, or may contain additional default or random\n+     * parameter values used by the underlying signature scheme. If the required\n+     * parameters were not supplied and can be generated by the signature\n+     * object, the generated parameters are returned; otherwise {@code null} is\n+     * returned.\n+     *\n+     * <p>However, if the signature scheme does not support returning\n+     * the parameters as {@code AlgorithmParameters}, {@code null} is always\n+     * returned.\n+     *\n+     * @return the parameters used with this signature object, or {@code null}\n+     *\n+     * @throws UnsupportedOperationException if this method is not overridden\n+     * by a provider\n","filename":"src\/java.base\/share\/classes\/java\/security\/SignatureSpi.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"}]}