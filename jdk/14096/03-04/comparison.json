{"files":[{"patch":"@@ -45,0 +45,25 @@\n+    private long[] aL;\n+    private long[] bL;\n+    private long[] rL;\n+\n+    private short[] aS;\n+    private short[] bS;\n+    private short[] rS;\n+\n+    private char[] aC;\n+    private char[] bC;\n+    private char[] rC;\n+\n+    private byte[] aB;\n+    private byte[] bB;\n+    private byte[] rB;\n+\n+    private float[] aF;\n+    private float[] bF;\n+    private float[] rF;\n+\n+    private double[] aD;\n+    private double[] bD;\n+    private double[] rD;\n+\n+\n@@ -55,0 +80,25 @@\n+        aL = new long[COUNT];\n+        bL = new long[COUNT];\n+        rL = new long[COUNT];\n+\n+        aS = new short[COUNT];\n+        bS = new short[COUNT];\n+        rS = new short[COUNT];\n+\n+        aC = new char[COUNT];\n+        bC = new char[COUNT];\n+        rC = new char[COUNT];\n+\n+        aB = new byte[COUNT];\n+        bB = new byte[COUNT];\n+        rB = new byte[COUNT];\n+\n+        aF = new float[COUNT];\n+        bF = new float[COUNT];\n+        rF = new float[COUNT];\n+\n+        aD = new double[COUNT];\n+        bD = new double[COUNT];\n+        rD = new double[COUNT];\n+\n+\n@@ -58,0 +108,18 @@\n+\n+            aL[i] = r.nextLong();\n+            bL[i] = r.nextLong();\n+\n+            aS[i] = (short) r.nextInt();\n+            bS[i] = (short) r.nextInt();\n+\n+            aC[i] = (char) r.nextInt();\n+            bC[i] = (char) r.nextInt();\n+\n+            aB[i] = (byte) r.nextInt();\n+            bB[i] = (byte) r.nextInt();\n+\n+            aF[i] = r.nextFloat();\n+            bF[i] = r.nextFloat();\n+\n+            aD[i] = r.nextDouble();\n+            bD[i] = r.nextDouble();\n@@ -63,1 +131,1 @@\n-    public void bench000_control() {\n+    public void bench000I_control() {\n@@ -70,0 +138,42 @@\n+    @Benchmark\n+    public void bench000L_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rL[i] = aL[i] * aL[i] * aL[i] * aL[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench000S_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rS[i] = (short)(aS[i] * aS[i] * aS[i] * aS[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench000C_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rC[i] = (char)(aC[i] * aC[i] * aC[i] * aC[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench000B_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rB[i] = (byte)(aB[i] * aB[i] * aB[i] * aB[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench000F_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rF[i] = aF[i] * aF[i] * aF[i] * aF[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench000D_control() {\n+        for (int i = 0; i < COUNT; i++) {\n+            rD[i] = aD[i] * aD[i] * aD[i] * aD[i];\n+        }\n+    }\n+\n@@ -81,1 +191,1 @@\n-    public void bench100_misaligned_load() {\n+    public void bench100I_misaligned_load() {\n@@ -87,0 +197,43 @@\n+    @Benchmark\n+    public void bench100L_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rL[i] = aL[i+1] * aL[i+1] * aL[i+1] * aL[i+1];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench100S_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rS[i] = (short)(aS[i+1] * aS[i+1] * aS[i+1] * aS[i+1]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench100C_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rC[i] = (char)(aC[i+1] * aC[i+1] * aC[i+1] * aC[i+1]);\n+        }\n+    }\n+\n+\n+    @Benchmark\n+    public void bench100B_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rB[i] = (byte)(aB[i+1] * aB[i+1] * aB[i+1] * aB[i+1]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench100F_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rF[i] = aF[i+1] * aF[i+1] * aF[i+1] * aF[i+1];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench100D_misaligned_load() {\n+        for (int i = 0; i < COUNT-1; i++) {\n+            rD[i] = aD[i+1] * aD[i+1] * aD[i+1] * aD[i+1];\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorAlignment.java","additions":155,"deletions":2,"binary":false,"changes":157,"status":"modified"}]}