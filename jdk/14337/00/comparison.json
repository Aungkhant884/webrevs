{"files":[{"patch":"@@ -3353,1 +3353,2 @@\n-            hard(\"  %s %s = %s\", vk.typeName(), vk.name(), val);\n+            String varName = vk.name();\n+            hard(\"  %s %s = %s\", vk.typeName(),  varName.isEmpty() ? \"_\" : varName, val);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -388,5 +388,4 @@\n-            int nameStart = compileSource.lastIndexOf(name, nameMax);\n-            if (nameStart < 0) {\n-                \/\/ the name has been transformed (e.g. unicode).\n-                \/\/ Use it directly\n-                wname = Wrap.identityWrap(name);\n+            String fieldName;\n+            if (name.isEmpty()) {\n+                fieldName = \"$UNNAMED\";\n+                wname = Wrap.simpleWrap(fieldName);\n@@ -394,3 +393,11 @@\n-                int nameEnd = nameStart + name.length();\n-                Range rname = new Range(nameStart, nameEnd);\n-                wname = new Wrap.RangeWrap(compileSource, rname);\n+                fieldName = name;\n+                int nameStart = compileSource.lastIndexOf(name, nameMax);\n+                if (nameStart < 0) {\n+                    \/\/ the name has been transformed (e.g. unicode).\n+                    \/\/ Use it directly\n+                    wname = Wrap.identityWrap(name);\n+                } else {\n+                    int nameEnd = nameStart + name.length();\n+                    Range rname = new Range(nameStart, nameEnd);\n+                    wname = new Wrap.RangeWrap(compileSource, rname);\n+                }\n@@ -402,1 +409,1 @@\n-                    name, subkind, displayType, hasEnhancedType ? fullTypeName : null, anonymousClasses,\n+                    name, fieldName, subkind, displayType, hasEnhancedType ? fullTypeName : null, anonymousClasses,\n@@ -662,1 +669,1 @@\n-                        name, SubKind.TEMP_VAR_EXPRESSION_SUBKIND, displayTypeName, fullTypeName, anonymousClasses, declareReferences, null);\n+                        name, name, SubKind.TEMP_VAR_EXPRESSION_SUBKIND, displayTypeName, fullTypeName, anonymousClasses, declareReferences, null);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -729,1 +729,1 @@\n-            value = executionControl().varValue(snippet.classFullName(), snippet.name());\n+            value = executionControl().varValue(snippet.classFullName(), snippet.fieldName());\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/JShell.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,4 @@\n+        if (name.isEmpty()) {\n+            return new VarKey(state, name);\n+        }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/KeyMap.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-                        Name name = ident();\n+                        Name name = identOrUnderscore();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/ReplParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            if (si != null && si.status().isDefined() && (except == null || !except.contains(si.key()))) {\n+            if (si != null && si.status().isDefined() && (except == null || !except.contains(si.key())) && !si.name().isEmpty()) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SnippetMaps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+    final String fieldName;\n+\n@@ -62,1 +64,1 @@\n-            String name, SubKind subkind, String typeName, String fullTypeName,\n+            String name, String fieldName, SubKind subkind, String typeName, String fullTypeName,\n@@ -70,0 +72,5 @@\n+        this.fieldName = fieldName;\n+    }\n+\n+    String fieldName() {\n+        return fieldName;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/VarSnippet.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 9999999\n+ * @summary Tests for unnamed variables\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jshell\n+ * @build Compiler KullaTesting TestingInputStream ExpectedDiagnostic\n+ * @run testng UnnamedTest\n+ *\/\n+\n+import java.util.function.Consumer;\n+import jdk.jshell.VarSnippet;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import jdk.jshell.JShell;\n+\n+public class UnnamedTest extends KullaTesting {\n+\n+    @Test\n+    public void unnamed() {\n+        VarSnippet sn1 = varKey(assertEval(\"int _ = 0;\"));\n+        VarSnippet sn2 = varKey(assertEval(\"String _ = \\\"x\\\";\"));\n+        Assert.assertEquals(getState().varValue(sn1), \"0\");\n+        Assert.assertEquals(getState().varValue(sn2), \"\\\"x\\\"\");\n+    }\n+\n+    @Override\n+    public void setUp(Consumer<JShell.Builder> bc) {\n+        super.setUp(bc.andThen(b -> b.compilerOptions(\"--enable-preview\", \"--source\", System.getProperty(\"java.specification.version\"))));\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/UnnamedTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}