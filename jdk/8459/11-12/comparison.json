{"files":[{"patch":"@@ -5323,3 +5323,1 @@\n-    case Op_IsFiniteF:\n-      imm8 = 0x99;\n-      break;\n+  \/\/ allows future usecases (ex: isNaN, isFinite)\n@@ -5329,3 +5327,0 @@\n-    case Op_IsNaNF:\n-       imm8 = 0x81;\n-       break;\n@@ -5337,3 +5332,0 @@\n-  if (opcode == Op_IsFiniteF) {\n-    xorl(dst, 0x1); \/\/ flip last bit\n-  }\n@@ -5345,3 +5337,1 @@\n-    case Op_IsFiniteD:\n-      imm8 = 0x99;\n-      break;\n+    \/\/ allows future usecases (ex: isNaN, isFinite)\n@@ -5351,3 +5341,0 @@\n-    case Op_IsNaND:\n-       imm8 = 0x81;\n-       break;\n@@ -5359,3 +5346,0 @@\n-  if (opcode == Op_IsFiniteD) {\n-    xorl(dst, 0x1); \/\/ flip last bit\n-  }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1465,1 +1465,0 @@\n-    case Op_IsNaNF:\n@@ -1467,2 +1466,0 @@\n-    case Op_IsFiniteF:\n-    case Op_IsNaND:\n@@ -1470,1 +1467,0 @@\n-    case Op_IsFiniteD:\n@@ -10154,2 +10150,0 @@\n-  match(Set dst (IsNaNF src));\n-  match(Set dst (IsFiniteF src));\n@@ -10169,2 +10163,0 @@\n-  match(Set dst (IsNaND src));\n-  match(Set dst (IsFiniteD src));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -208,4 +208,0 @@\n-  do_intrinsic(_floatIsFinite,            java_lang_Float,        isFinite_name,      float_bool_signature,      F_S)   \\\n-   do_name(     isFinite_name,                                    \"isFinite\")                                           \\\n-  do_intrinsic(_floatIsNaN,               java_lang_Float,        isNaN_name,         float_bool_signature,      F_S)   \\\n-   do_name(     isNaN_name,                                       \"isNaN\")                                              \\\n@@ -213,2 +209,0 @@\n-  do_intrinsic(_doubleIsFinite,           java_lang_Double,       isFinite_name,      double_bool_signature,     F_S)   \\\n-  do_intrinsic(_doubleIsNaN,              java_lang_Double,       isNaN_name,         double_bool_signature,     F_S)   \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -524,6 +524,0 @@\n-  case vmIntrinsics::_floatIsFinite:\n-    if (!Matcher::match_rule_supported(Op_IsFiniteF)) return false;\n-    break;\n-  case vmIntrinsics::_floatIsNaN:\n-    if (!Matcher::match_rule_supported(Op_IsNaNF)) return false;\n-    break;\n@@ -533,6 +527,0 @@\n-  case vmIntrinsics::_doubleIsFinite:\n-    if (!Matcher::match_rule_supported(Op_IsFiniteD)) return false;\n-    break;\n-  case vmIntrinsics::_doubleIsNaN:\n-    if (!Matcher::match_rule_supported(Op_IsNaND)) return false;\n-    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -249,2 +249,0 @@\n-macro(IsFiniteF)\n-macro(IsNaNF)\n@@ -252,2 +250,0 @@\n-macro(IsFiniteD)\n-macro(IsNaND)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,1 +265,0 @@\n-\n@@ -275,18 +274,0 @@\n-\/\/---------- IsFiniteFNode -----------------------------------------------------\n-class IsFiniteFNode : public Node {\n-  public:\n-  IsFiniteFNode(Node* in1) : Node(0, in1) {}\n-  virtual int   Opcode() const;\n-  const Type* bottom_type() const { return TypeInt::BOOL; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-\/\/---------- IsNaNFNode -----------------------------------------------------\n-class IsNaNFNode : public Node {\n-  public:\n-  IsNaNFNode(Node* in1) : Node(0, in1) {}\n-  virtual int   Opcode() const;\n-  const Type* bottom_type() const { return TypeInt::BOOL; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n@@ -302,19 +283,0 @@\n-\/\/---------- IsFiniteDNode -----------------------------------------------------\n-class IsFiniteDNode : public Node {\n-  public:\n-  IsFiniteDNode(Node* in1) : Node(0, in1) {}\n-  virtual int   Opcode() const;\n-  const Type* bottom_type() const { return TypeInt::BOOL; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-\/\/---------- IsNaNDNode -----------------------------------------------------\n-class IsNaNDNode : public Node {\n-  public:\n-  IsNaNDNode(Node* in1) : Node(0, in1) {}\n-  virtual int   Opcode() const;\n-  const Type* bottom_type() const { return TypeInt::BOOL; }\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-};\n-\n-\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -519,2 +519,0 @@\n-  case vmIntrinsics::_floatIsNaN:\n-  case vmIntrinsics::_floatIsFinite:\n@@ -522,2 +520,0 @@\n-  case vmIntrinsics::_doubleIsNaN:\n-  case vmIntrinsics::_doubleIsFinite:\n@@ -4660,6 +4656,0 @@\n-  case vmIntrinsics::_floatIsFinite:\n-    result = new IsFiniteFNode(arg);\n-    break;\n-  case vmIntrinsics::_floatIsNaN:\n-    result = new IsNaNFNode(arg);\n-    break;\n@@ -4668,6 +4658,0 @@\n-    break;\n-  case vmIntrinsics::_doubleIsFinite:\n-    result = new IsFiniteDNode(arg);\n-    break;\n-  case vmIntrinsics::_doubleIsNaN:\n-    result = new IsNaNDNode(arg);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1851,2 +1851,0 @@\n-  declare_c2_type(IsFiniteFNode, Node)                                    \\\n-  declare_c2_type(IsNaNFNode, Node)                                       \\\n@@ -1854,2 +1852,0 @@\n-  declare_c2_type(IsFiniteDNode, Node)                                    \\\n-  declare_c2_type(IsNaNDNode, Node)                                       \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -674,1 +674,0 @@\n-    @IntrinsicCandidate\n@@ -702,1 +701,0 @@\n-    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -499,1 +499,0 @@\n-    @IntrinsicCandidate\n@@ -528,1 +527,0 @@\n-    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,10 +62,0 @@\n-    @Test \/\/ needs to be run in (fast) debug mode\n-    @Warmup(10000)\n-    @IR(counts = {\"IsFiniteD\", \">= 1\"}) \/\/ Atleast one IsFiniteD node is generated if intrinsic is used\n-    public void testIsFinite() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            outputs[i] = Double.isFinite(inputs[i]);\n-        }\n-        checkResult(\"isFinite\");\n-    }\n-\n@@ -82,9 +72,0 @@\n-    @Test \/\/ needs to be run in (fast) debug mode\n-    @Warmup(10000)\n-    @IR(counts = {\"IsNaND\", \">= 1\"}) \/\/ Atleast one IsNaND node is generated if intrinsic is used\n-    public void testIsNaN() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            outputs[i] = Double.isNaN(inputs[i]);\n-        }\n-        checkResult(\"isNaN\");\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestDoubleClassCheck.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -62,10 +62,0 @@\n-    @Test \/\/ needs to be run in (fast) debug mode\n-    @Warmup(10000)\n-    @IR(counts = {\"IsFiniteF\", \">= 1\"}) \/\/ Atleast one IsFiniteF node is generated if intrinsic is used\n-    public void testIsFinite() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            outputs[i] = Float.isFinite(inputs[i]);\n-        }\n-        checkResult(\"isFinite\");\n-    }\n-\n@@ -82,10 +72,0 @@\n-    @Test \/\/ needs to be run in (fast) debug mode\n-    @Warmup(10000)\n-    @IR(counts = {\"IsNaNF\", \">= 1\"}) \/\/ Atleast one IsNaNF node is generated if intrinsic is used\n-    public void testIsNaN() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            outputs[i] = Float.isNaN(inputs[i]);\n-        }\n-        checkResult(\"isNaN\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestFloatClassCheck.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -76,8 +76,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteStore() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            storeOutputs[i] = Double.isFinite(inputs[i]);\n-        }\n-    }\n-\n@@ -92,15 +84,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNStore() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            storeOutputs[i] = Double.isNaN(inputs[i]);\n-        }\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteCMov() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Double.isFinite(inputs[i]) ? 9 : 7;\n-        }\n-    }\n@@ -116,15 +93,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNCMov() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Double.isNaN(inputs[i]) ? 9 : 7;\n-        }\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteBranch() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Double.isFinite(inputs[i]) ? call() : 7;\n-        }\n-    }\n@@ -140,9 +102,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNBranch() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Double.isNaN(inputs[i]) ? call() : 7;\n-        }\n-    }\n-\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/DoubleClassCheck.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -77,7 +77,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteStore() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            storeOutputs[i] = Float.isFinite(inputs[i]);\n-        }\n-    }\n@@ -93,15 +86,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNStore() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            storeOutputs[i] = Float.isNaN(inputs[i]);\n-        }\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteCMov() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Float.isFinite(inputs[i]) ? 9 : 7;\n-        }\n-    }\n@@ -117,15 +95,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNCMov() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Float.isNaN(inputs[i]) ? 9 : 7;\n-        }\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsFiniteBranch() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Float.isFinite(inputs[i]) ? call() : 7;\n-        }\n-    }\n@@ -141,8 +104,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(BUFFER_SIZE)\n-    public void testIsNaNBranch() {\n-        for (int i = 0; i < BUFFER_SIZE; i++) {\n-            cmovOutputs[i] = Float.isNaN(inputs[i]) ? call() : 7;\n-        }\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/FloatClassCheck.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"}]}