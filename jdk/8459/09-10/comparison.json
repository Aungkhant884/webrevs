{"files":[{"patch":"@@ -27,1 +27,1 @@\n-* @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+* @requires vm.cpu.features ~= \".*avx512dq.*\"\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestDoubleClassCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-* @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+* @requires vm.cpu.features ~= \".*avx512dq.*\"\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestFloatClassCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jmh.annotations.CompilerControl;\n@@ -48,1 +49,8 @@\n-    boolean[] outputs;\n+    boolean[] storeOutputs;\n+    int[] cmovOutputs;\n+    int[] branchOutputs;\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    static int call() {\n+        return 1;\n+    }\n@@ -52,1 +60,3 @@\n-        outputs = new boolean[BUFFER_SIZE];\n+        storeOutputs = new boolean[BUFFER_SIZE];\n+        cmovOutputs = new int[BUFFER_SIZE];\n+        branchOutputs = new int[BUFFER_SIZE];\n@@ -68,1 +78,25 @@\n-    public void testIsFinite() {\n+    public void testIsFiniteStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Double.isFinite(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsInfiniteStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Double.isInfinite(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsNaNStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Double.isNaN(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsFiniteCMov() {\n@@ -70,1 +104,1 @@\n-            outputs[i] = Double.isFinite(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Double.isFinite(inputs[i]) ? 9 : 7;\n@@ -76,1 +110,1 @@\n-    public void testIsInfinite() {\n+    public void testIsInfiniteCMov() {\n@@ -78,1 +112,1 @@\n-            outputs[i] = Double.isInfinite(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Double.isInfinite(inputs[i]) ? 9 : 7;\n@@ -84,1 +118,1 @@\n-    public void testIsNaN() {\n+    public void testIsNaNCMov() {\n@@ -86,1 +120,1 @@\n-            outputs[i] = Double.isNaN(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Double.isNaN(inputs[i]) ? 9 : 7;\n@@ -89,0 +123,26 @@\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsFiniteBranch() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Double.isFinite(inputs[i]) ? call() : 7;\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsInfiniteBranch() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Double.isInfinite(inputs[i]) ? call() : 7;\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsNaNBranch() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Double.isNaN(inputs[i]) ? call() : 7;\n+        }\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/DoubleClassCheck.java","additions":68,"deletions":8,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jmh.annotations.CompilerControl;\n@@ -48,1 +49,8 @@\n-    boolean[] outputs;\n+    boolean[] storeOutputs;\n+    int[] cmovOutputs;\n+    int[] branchOutputs;\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    static int call() {\n+        return 1;\n+    }\n@@ -52,1 +60,3 @@\n-        outputs = new boolean[BUFFER_SIZE];\n+        storeOutputs = new boolean[BUFFER_SIZE];\n+        cmovOutputs = new int[BUFFER_SIZE];\n+        branchOutputs = new int[BUFFER_SIZE];\n@@ -58,4 +68,5 @@\n-                input = (i%2 == 0) ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY;\n-            }\n-            else if (i % 3 == 0) input = Float.NaN;\n-            else input = rng.nextFloat();\n+                input = (i % 2 == 0) ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY;\n+            } else if (i % 3 == 0)\n+                input = Float.NaN;\n+            else\n+                input = rng.nextFloat();\n@@ -68,1 +79,49 @@\n-    public void testIsFinite() {\n+    public void testIsFiniteStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Float.isFinite(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsInfiniteStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Float.isInfinite(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsNaNStore() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            storeOutputs[i] = Float.isNaN(inputs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsFiniteCMov() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Float.isFinite(inputs[i]) ? 9 : 7;\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsInfiniteCMov() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Float.isInfinite(inputs[i]) ? 9 : 7;\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsNaNCMov() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            cmovOutputs[i] = Float.isNaN(inputs[i]) ? 9 : 7;\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(BUFFER_SIZE)\n+    public void testIsFiniteBranch() {\n@@ -70,1 +129,1 @@\n-            outputs[i] = Float.isFinite(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Float.isFinite(inputs[i]) ? call() : 7;\n@@ -76,1 +135,1 @@\n-    public void testIsInfinite() {\n+    public void testIsInfiniteBranch() {\n@@ -78,1 +137,1 @@\n-            outputs[i] = Float.isInfinite(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Float.isInfinite(inputs[i]) ? call() : 7;\n@@ -84,1 +143,1 @@\n-    public void testIsNaN() {\n+    public void testIsNaNBranch() {\n@@ -86,1 +145,1 @@\n-            outputs[i] = Float.isNaN(inputs[i]) ? false : true;\n+            cmovOutputs[i] = Float.isNaN(inputs[i]) ? call() : 7;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/FloatClassCheck.java","additions":71,"deletions":12,"binary":false,"changes":83,"status":"modified"}]}