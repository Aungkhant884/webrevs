{"files":[{"patch":"@@ -25,1 +25,1 @@\n-#import \"CommonComponentAccessibility.h\"\n+#import \"ComponentWrapperAccessibility.h\"\n@@ -27,1 +27,1 @@\n-@interface CellAccessibility : CommonComponentAccessibility\n+@interface CellAccessibility : ComponentWrapperAccessibility\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CellAccessibility.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,18 +38,0 @@\n-- (NSArray *)accessibilityChildren\n-{\n-    NSArray *children = [super accessibilityChildren];\n-    if (children == NULL) {\n-        NSString *javaRole = [self  javaRole];\n-        CommonComponentAccessibility *newChild = [CommonComponentAccessibility createWithParent:self\n-                                                                       accessible:self->fAccessible\n-                                                                             role:javaRole\n-                                                                            index:self->fIndex\n-                                                                          withEnv:[ThreadUtilities getJNIEnv]\n-                                                                         withView:self->fView\n-                                                                        isWrapped:NO];\n-        return [NSArray arrayWithObject:newChild];\n-    } else {\n-        return children;\n-    }\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CellAccessibility.m","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,55 +52,0 @@\n-- (NSArray *)accessibilityChildren\n-{\n-    NSArray *children = [super accessibilityChildren];\n-    if (children == NULL) {\n-        JNIEnv *env = [ThreadUtilities getJNIEnv];\n-        CommonComponentAccessibility *parent = [self accessibilityParent];\n-        if (parent->fAccessible == NULL) return nil;\n-        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n-        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n-                                                                                      parent->fAccessible, parent->fComponent, sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO);\n-        CHECK_EXCEPTION();\n-        if (jchildrenAndRoles == NULL) return nil;\n-\n-        jsize arrayLen = (*env)->GetArrayLength(env, jchildrenAndRoles);\n-        NSMutableArray *childrenCells = [NSMutableArray arrayWithCapacity:arrayLen\/2];\n-\n-        NSUInteger childIndex = fIndex;\n-\n-        int inc = [(TableAccessibility *)[self accessibilityParent] accessibilityRowCount] * 2;\n-        NSInteger i = childIndex * 2;\n-        for(i; i < arrayLen; i += inc)\n-        {\n-            jobject \/* Accessible *\/ jchild = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i);\n-            jobject \/* String *\/ jchildJavaRole = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+1);\n-\n-            NSString *childJavaRole = nil;\n-            if (jchildJavaRole != NULL) {\n-                DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n-                DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n-                jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n-                CHECK_EXCEPTION();\n-                childJavaRole = JavaStringToNSString(env, jkey);\n-                (*env)->DeleteLocalRef(env, jkey);\n-            }\n-\n-            CellAccessibility *child = [[CellAccessibility alloc] initWithParent:self\n-                                                                         withEnv:env\n-                                                                  withAccessible:jchild\n-                                                                       withIndex:childIndex\n-                                                                        withView:self->fView\n-                                                                    withJavaRole:childJavaRole];\n-            [childrenCells addObject:[[child retain] autorelease]];\n-\n-            (*env)->DeleteLocalRef(env, jchild);\n-            (*env)->DeleteLocalRef(env, jchildJavaRole);\n-\n-            childIndex += (inc \/ 2);\n-        }\n-        (*env)->DeleteLocalRef(env, jchildrenAndRoles);\n-        return childrenCells;\n-    } else {\n-        return children;\n-    }\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ColumnAccessibility.m","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-+ (CommonComponentAccessibility* _Nullable) getComponentAccessibility:(NSString* _Nonnull)role;\n-+ (CommonComponentAccessibility * _Nullable) getComponentAccessibility:(NSString * _Nonnull)role andParent:(CommonComponentAccessibility * _Nonnull)parent;\n++ (Class _Nonnull) getComponentAccessibilityClass:(NSString* _Nonnull)role;\n++ (Class _Nonnull) getComponentAccessibilityClass:(NSString * _Nonnull)role andParent:(CommonComponentAccessibility * _Nonnull)parent;\n@@ -74,0 +74,1 @@\n++ (CommonComponentAccessibility* _Nullable) createWithParent:(CommonComponentAccessibility* _Nullable)parent withClass:(Class _Nonnull)classType accessible:(jobject _Nonnull)jaccessible role:(NSString* _Nonnull)javaRole index:(jint)index withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view;\n@@ -77,5 +78,0 @@\n-\/\/ If the isWraped parameter is true, then the object passed as a parent was created based on the same java component,\n-\/\/ but performs a different NSAccessibilityRole of a table cell, or a list row, or tree row,\n-\/\/ and we need to create an element whose role corresponds to the role in Java.\n-+ (CommonComponentAccessibility* _Nullable) createWithParent:(CommonComponentAccessibility* _Nullable)parent accessible:(jobject _Nonnull)jaccessible role:(NSString* _Nonnull)javaRole index:(jint)index withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view isWrapped:(BOOL)wrapped;\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.h","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n- * return the allocated class otherwise return nil to let old implementation being initialized\n+ * return the component's class otherwise return CommonComponentAccessibility\n@@ -223,1 +223,1 @@\n-+ (CommonComponentAccessibility *) getComponentAccessibility:(NSString *)role\n++ (Class) getComponentAccessibilityClass:(NSString *)role\n@@ -232,1 +232,1 @@\n-        return [NSClassFromString(className) alloc];\n+        return NSClassFromString(className);\n@@ -234,1 +234,1 @@\n-    return [CommonComponentAccessibility alloc];\n+    return [CommonComponentAccessibility class];\n@@ -237,1 +237,1 @@\n-+ (CommonComponentAccessibility *) getComponentAccessibility:(NSString *)role andParent:(CommonComponentAccessibility *)parent\n++ (Class) getComponentAccessibilityClass:(NSString *)role andParent:(CommonComponentAccessibility *)parent\n@@ -245,1 +245,1 @@\n-        return [CommonComponentAccessibility getComponentAccessibility:role];\n+        return [CommonComponentAccessibility getComponentAccessibilityClass:role];\n@@ -247,1 +247,1 @@\n-    return [NSClassFromString(className) alloc];\n+    return NSClassFromString(className);\n@@ -528,1 +528,2 @@\n-    return [CommonComponentAccessibility createWithParent:parent accessible:jaccessible role:javaRole index:index withEnv:env withView:view isWrapped:NO];\n+    Class classType = [self getComponentAccessibilityClass:javaRole andParent:parent];\n+    return [CommonComponentAccessibility createWithParent:parent withClass:classType accessible:jaccessible role:javaRole index:index withEnv:env withView:view];\n@@ -531,1 +532,1 @@\n-+ (CommonComponentAccessibility *) createWithParent:(CommonComponentAccessibility *)parent accessible:(jobject)jaccessible role:(NSString *)javaRole index:(jint)index withEnv:(JNIEnv *)env withView:(NSView *)view isWrapped:(BOOL)wrapped\n++ (CommonComponentAccessibility *) createWithParent:(CommonComponentAccessibility *)parent withClass:(Class)classType accessible:(jobject)jaccessible role:(NSString *)javaRole index:(jint)index withEnv:(JNIEnv *)env withView:(NSView *)view\n@@ -538,6 +539,4 @@\n-    if (!wrapped) { \/\/ If wrapped is true, then you don't need to get an existing instance, you need to create a new one\n-        CommonComponentAccessibility *value = (CommonComponentAccessibility *) jlong_to_ptr((*env)->GetLongField(env, jCAX, jf_ptr));\n-        if (value != nil) {\n-            (*env)->DeleteLocalRef(env, jCAX);\n-            return [[value retain] autorelease];\n-        }\n+    CommonComponentAccessibility *value = (CommonComponentAccessibility *) jlong_to_ptr((*env)->GetLongField(env, jCAX, jf_ptr));\n+    if (value != nil) {\n+        (*env)->DeleteLocalRef(env, jCAX);\n+        return [[value retain] autorelease];\n@@ -546,5 +545,2 @@\n-    \/\/ otherwise, create a new instance\n-    CommonComponentAccessibility *newChild = [CommonComponentAccessibility getComponentAccessibility:javaRole andParent:parent];\n-\n-    \/\/ must init freshly -alloc'd object\n-    [newChild initWithParent:parent withEnv:env withAccessible:jCAX withIndex:index withView:view withJavaRole:javaRole]; \/\/ must init new instance\n+    CommonComponentAccessibility *newChild =\n+        [[classType alloc] initWithParent:parent withEnv:env withAccessible:jCAX withIndex:index withView:view withJavaRole:javaRole];\n@@ -564,4 +560,1 @@\n-    \/\/ the link is removed in the wrapper\n-    if (!wrapped) {\n-        (*env)->DeleteLocalRef(env, jCAX);\n-    }\n+    (*env)->DeleteLocalRef(env, jCAX);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.m","additions":17,"deletions":24,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#import \"CommonComponentAccessibility.h\"\n+\n+\/**\n+ * Some native a11y elements do not have direct peers in Java, like list rows and cells.\n+ * However, these elements are required by Cocoa in order for a11y to work properly.\n+ * The ComponentWrapperAccessibility interface provides a concept of wrapping an element\n+ * originated from java (like a list item, or a table element) with a component\n+ * which has a11y role required Cocoa (like NSAccessibilityRowRole, or NSAccessibilityCellRole)\n+ * but does not have peer in java.\n+ *\n+ * The wrapping component becomes a parent of the wrapped child in the a11y hierarchy.\n+ * The child component is created automatically on demand with the same set of arguments,\n+ * except that it has a11y role of its java peer.\n+ *\n+ * It is important that only the wrapping component is linked with sun.lwawt.macosx.CAccessible\n+ * and thus its lifecycle depends on the java accessible. So when the same java accessible is passed\n+ * to create a native peer, the wrapping component is retrieved in case it has already been\n+ * created (see [CommonComponentAccessibility createWithParent]). When the wrapping component is\n+ * deallocated (as triggered from the java side) it releases the wrapped child.\n+ *\/\n+@interface ComponentWrapperAccessibility : CommonComponentAccessibility\n+\n+@property (nonatomic, retain) CommonComponentAccessibility *wrappedChild;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ComponentWrapperAccessibility.h","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#import \"ComponentWrapperAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+\n+@implementation ComponentWrapperAccessibility\n+\n+@synthesize wrappedChild;\n+\n+- (NSAccessibilityRole)accessibilityRole {\n+    @throw [NSException exceptionWithName:NSInternalInconsistencyException\n+                                   reason:[NSString stringWithFormat:@\"You must override -(NSAccessibilityRole)accessibilityRole in a subclass\"]\n+                                 userInfo:nil];\n+}\n+\n+- (NSArray *)accessibilityChildren {\n+    if (!wrappedChild) {\n+        wrappedChild =\n+                [[CommonComponentAccessibility alloc] initWithParent:self\n+                                                             withEnv:[ThreadUtilities getJNIEnv]\n+                                                      withAccessible:fAccessible\n+                                                           withIndex:0\n+                                                            withView:fView\n+                                                        withJavaRole:fJavaRole];\n+    }\n+    return [NSArray arrayWithObject:wrappedChild];\n+}\n+\n+- (void)dealloc {\n+    if (wrappedChild) {\n+        [wrappedChild release];\n+    }\n+    [super dealloc];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ComponentWrapperAccessibility.m","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-#import \"CommonComponentAccessibility.h\"\n+#import \"ComponentWrapperAccessibility.h\"\n@@ -27,1 +27,1 @@\n-@interface ListRowAccessibility : CommonComponentAccessibility <NSAccessibilityRow>\n+@interface ListRowAccessibility : ComponentWrapperAccessibility <NSAccessibilityRow>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListRowAccessibility.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,19 +41,0 @@\n-- (NSArray *)accessibilityChildren\n-{\n-    NSArray *children = [super accessibilityChildren];\n-    if (children == NULL) {\n-\n-        \/\/ Since the row element has already been created, we should no create it again, but just retrieve it by a pointer, that's why isWrapped is set to YES.\n-        CommonComponentAccessibility *newChild = [CommonComponentAccessibility createWithParent:self\n-                                                                       accessible:self->fAccessible\n-                                                                             role:self->fJavaRole\n-                                                                            index:self->fIndex\n-                                                                          withEnv:[ThreadUtilities getJNIEnv]\n-                                                                         withView:self->fView\n-                                                                        isWrapped:YES];\n-        return [NSArray arrayWithObject:newChild];\n-    } else {\n-        return children;\n-    }\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListRowAccessibility.m","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -75,8 +75,1 @@\n-\n-    return [NSArray arrayWithObject:[CommonComponentAccessibility createWithParent:self\n-                                                                        accessible:self->fAccessible\n-                                                                              role:self->fJavaRole\n-                                                                             index:self->fIndex\n-                                                                           withEnv:env\n-                                                                          withView:self->fView\n-                                                                         isWrapped:YES]];\n+    return [super accessibilityChildren];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineRowAccessibility.m","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -90,7 +90,10 @@\n-            CellAccessibility *child = [[CellAccessibility alloc] initWithParent:self\n-                                                                         withEnv:env\n-                                                                  withAccessible:jchild\n-                                                                       withIndex:childIndex\n-                                                                        withView:self->fView\n-                                                                    withJavaRole:childJavaRole];\n-            [childrenCells addObject:[[child retain] autorelease]];\n+            CellAccessibility *child = (CellAccessibility *)\n+                [CommonComponentAccessibility createWithParent:self\n+                                                     withClass:[CellAccessibility class]\n+                                                    accessible:jchild\n+                                                          role:childJavaRole\n+                                                         index:childIndex\n+                                                       withEnv:env\n+                                                      withView:self->fView];\n+\n+            [childrenCells addObject:child];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableRowAccessibility.m","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}