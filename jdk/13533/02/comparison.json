{"files":[{"patch":"@@ -224,1 +224,0 @@\n-  _blks = NEW_RESOURCE_ARRAY(Block *, _cfg.number_of_blocks());\n@@ -226,0 +225,1 @@\n+  uint nr_blocks = _cfg.number_of_blocks();\n@@ -230,0 +230,4 @@\n+\n+  \/\/ The space which our buckets point into.\n+  Block** start = NEW_RESOURCE_ARRAY(Block *, nr_blocks*NUMBUCKS);\n+\n@@ -231,1 +235,1 @@\n-    buckets[i] = NEW_RESOURCE_ARRAY(Block *, _cfg.number_of_blocks());\n+    buckets[i] = &start[i*nr_blocks];\n@@ -236,3 +240,0 @@\n-    for (uint j = 0; j < _cfg.number_of_blocks(); j++) {\n-      buckets[i][j] = nullptr;\n-    }\n@@ -240,0 +241,1 @@\n+\n@@ -241,1 +243,1 @@\n-  for (uint i = 0; i < _cfg.number_of_blocks(); i++) {\n+  for (uint i = 0; i < nr_blocks; i++) {\n@@ -243,1 +245,4 @@\n-      if ((j == NUMBUCKS - 1) || (_cfg.get_block(i)->_freq > buckval[j])) {\n+      double bval = buckval[j];\n+      Block* blk = _cfg.get_block(i);\n+      if (j == NUMBUCKS - 1 || blk->_freq > bval) {\n+        uint cnt = buckcnt[j];\n@@ -245,1 +250,2 @@\n-        buckets[j][buckcnt[j]++] = _cfg.get_block(i);\n+        buckets[j][cnt] = blk;\n+        buckcnt[j] = cnt+1;\n@@ -250,1 +256,16 @@\n-  \/\/ Dump buckets into final block array\n+\n+  \/\/ Squash the partially filled buckets together into the first one.\n+  static_assert(NUMBUCKS >= 2, \"must\"); \/\/ If this isn't true then it'll mess up the squashing.\n+  Block** offset = &buckets[0][buckcnt[0]];\n+  for (int i = 1; i < NUMBUCKS; i++) {\n+    ::memmove(offset, buckets[i], buckcnt[i]*sizeof(Block*));\n+    offset += buckcnt[i];\n+  }\n+  assert((&buckets[0][0] + nr_blocks) == offset, \"should be\");\n+\n+  \/\/ Free the now unused memory\n+  FREE_RESOURCE_ARRAY(Block*, buckets[1], (NUMBUCKS-1)*nr_blocks);\n+  \/\/ Finally, point the _blks to our memory\n+  _blks = buckets[0];\n+\n+#ifdef ASSERT\n@@ -253,3 +274,1 @@\n-    for (uint j = 0; j < buckcnt[i]; j++) {\n-      _blks[blkcnt++] = buckets[i][j];\n-    }\n+    blkcnt += buckcnt[i];\n@@ -257,2 +276,2 @@\n-\n-  assert(blkcnt == _cfg.number_of_blocks(), \"Block array not totally filled\");\n+  assert(blkcnt == nr_blocks, \"Block array not totally filled\");\n+#endif\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"}]}