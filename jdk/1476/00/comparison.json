{"files":[{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include <stdlib.h>\n-\n-#include \"precompiled.hpp\"\n-#include \"code\/codeBlob.hpp\"\n-#include \"asm\/macroAssembler.hpp\"\n-\n-\/\/ hook routine called during JVM bootstrap to test AArch64 assembler\n-\n-extern \"C\" void entry(CodeBuffer*);\n-\n-#ifdef ASSERT\n-void aarch64TestHook()\n-{\n-  BufferBlob* b = BufferBlob::create(\"aarch64Test\", 500000);\n-  CodeBuffer code(b);\n-  entry(&code);\n-  BufferBlob::free(b);\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64Test.cpp","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -25,3 +25,0 @@\n-#include <stdio.h>\n-#include <sys\/types.h>\n-\n@@ -31,6 +28,1 @@\n-#include \"interpreter\/interpreter.hpp\"\n-\n-#ifndef PRODUCT\n-const uintptr_t Assembler::asm_bp = 0x00007fffee09ac88;\n-#endif\n-\n+#include \"asm\/macroAssembler.hpp\"\n@@ -38,3 +30,0 @@\n-#include \"memory\/resourceArea.hpp\"\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -42,0 +31,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -43,7 +33,2 @@\n-extern \"C\" void entry(CodeBuffer *cb);\n-\n-#define __ _masm.\n-#ifdef PRODUCT\n-#define BLOCK_COMMENT(str) \/* nothing *\/\n-#else\n-#define BLOCK_COMMENT(str) block_comment(str)\n+#ifndef PRODUCT\n+const uintptr_t Assembler::asm_bp = 0x00007fffee09ac88;\n@@ -52,2 +37,0 @@\n-#define BIND(label) bind(label); __ BLOCK_COMMENT(#label \":\")\n-\n@@ -61,1158 +44,0 @@\n-#ifdef ASSERT\n-static void asm_check(const unsigned int *insns, const unsigned int *insns1, size_t len) {\n-    bool ok = true;\n-    for (unsigned int i = 0; i < len; i++) {\n-      if (insns[i] != insns1[i]) {\n-        ok = false;\n-        printf(\"Ours:\\n\");\n-        Disassembler::decode((address)&insns1[i], (address)&insns1[i+1]);\n-        printf(\"Theirs:\\n\");\n-        Disassembler::decode((address)&insns[i], (address)&insns[i+1]);\n-        printf(\"\\n\");\n-      }\n-    }\n-    assert(ok, \"Assembler smoke test failed\");\n-  }\n-\n-void entry(CodeBuffer *cb) {\n-\n-  \/\/ {\n-  \/\/   for (int i = 0; i < 256; i+=16)\n-  \/\/     {\n-  \/\/    printf(\"\\\"%20.20g\\\", \", unpack(i));\n-  \/\/    printf(\"\\\"%20.20g\\\", \", unpack(i+1));\n-  \/\/     }\n-  \/\/   printf(\"\\n\");\n-  \/\/ }\n-\n-  Assembler _masm(cb);\n-  address entry = __ pc();\n-\n-  \/\/ Smoke test for assembler\n-\n-\/\/ BEGIN  Generated code -- do not edit\n-\/\/ Generated by aarch64-asmtest.py\n-    Label back, forth;\n-    __ bind(back);\n-\n-\/\/ ArithOp\n-    __ add(r26, r23, r13, Assembler::LSL, 32);         \/\/       add     x26, x23, x13, LSL #32\n-    __ sub(r12, r24, r9, Assembler::LSR, 37);          \/\/       sub     x12, x24, x9, LSR #37\n-    __ adds(r28, r15, r8, Assembler::ASR, 39);         \/\/       adds    x28, x15, x8, ASR #39\n-    __ subs(r7, r28, r30, Assembler::ASR, 57);         \/\/       subs    x7, x28, x30, ASR #57\n-    __ addw(r9, r22, r27, Assembler::ASR, 15);         \/\/       add     w9, w22, w27, ASR #15\n-    __ subw(r3, r13, r17, Assembler::ASR, 30);         \/\/       sub     w3, w13, w17, ASR #30\n-    __ addsw(r14, r26, r8, Assembler::ASR, 17);        \/\/       adds    w14, w26, w8, ASR #17\n-    __ subsw(r0, r22, r12, Assembler::ASR, 21);        \/\/       subs    w0, w22, w12, ASR #21\n-    __ andr(r0, r15, r26, Assembler::LSL, 20);         \/\/       and     x0, x15, x26, LSL #20\n-    __ orr(r26, r5, r17, Assembler::LSL, 61);          \/\/       orr     x26, x5, x17, LSL #61\n-    __ eor(r24, r13, r2, Assembler::LSL, 32);          \/\/       eor     x24, x13, x2, LSL #32\n-    __ ands(r28, r3, r17, Assembler::ASR, 35);         \/\/       ands    x28, x3, x17, ASR #35\n-    __ andw(r25, r16, r29, Assembler::LSR, 18);        \/\/       and     w25, w16, w29, LSR #18\n-    __ orrw(r13, r17, r11, Assembler::LSR, 9);         \/\/       orr     w13, w17, w11, LSR #9\n-    __ eorw(r5, r5, r17, Assembler::LSR, 15);          \/\/       eor     w5, w5, w17, LSR #15\n-    __ andsw(r2, r23, r27, Assembler::ASR, 26);        \/\/       ands    w2, w23, w27, ASR #26\n-    __ bic(r27, r28, r16, Assembler::LSR, 45);         \/\/       bic     x27, x28, x16, LSR #45\n-    __ orn(r8, r25, r26, Assembler::ASR, 37);          \/\/       orn     x8, x25, x26, ASR #37\n-    __ eon(r29, r17, r13, Assembler::LSR, 63);         \/\/       eon     x29, x17, x13, LSR #63\n-    __ bics(r28, r24, r2, Assembler::LSR, 31);         \/\/       bics    x28, x24, x2, LSR #31\n-    __ bicw(r19, r26, r7, Assembler::ASR, 3);          \/\/       bic     w19, w26, w7, ASR #3\n-    __ ornw(r6, r24, r10, Assembler::ASR, 3);          \/\/       orn     w6, w24, w10, ASR #3\n-    __ eonw(r4, r21, r1, Assembler::LSR, 29);          \/\/       eon     w4, w21, w1, LSR #29\n-    __ bicsw(r16, r21, r0, Assembler::LSR, 19);        \/\/       bics    w16, w21, w0, LSR #19\n-\n-\/\/ AddSubImmOp\n-    __ addw(r17, r12, 379u);                           \/\/       add     w17, w12, #379\n-    __ addsw(r30, r1, 22u);                            \/\/       adds    w30, w1, #22\n-    __ subw(r29, r5, 126u);                            \/\/       sub     w29, w5, #126\n-    __ subsw(r6, r24, 960u);                           \/\/       subs    w6, w24, #960\n-    __ add(r0, r13, 104u);                             \/\/       add     x0, x13, #104\n-    __ adds(r8, r6, 663u);                             \/\/       adds    x8, x6, #663\n-    __ sub(r10, r5, 516u);                             \/\/       sub     x10, x5, #516\n-    __ subs(r1, r3, 1012u);                            \/\/       subs    x1, x3, #1012\n-\n-\/\/ LogicalImmOp\n-    __ andw(r6, r11, 4294049777ull);                   \/\/       and     w6, w11, #0xfff1fff1\n-    __ orrw(r28, r5, 4294966791ull);                   \/\/       orr     w28, w5, #0xfffffe07\n-    __ eorw(r1, r20, 134217216ull);                    \/\/       eor     w1, w20, #0x7fffe00\n-    __ andsw(r7, r17, 1048576ull);                     \/\/       ands    w7, w17, #0x100000\n-    __ andr(r14, r12, 9223372036854775808ull);         \/\/       and     x14, x12, #0x8000000000000000\n-    __ orr(r9, r11, 562675075514368ull);               \/\/       orr     x9, x11, #0x1ffc000000000\n-    __ eor(r17, r0, 18014398509481728ull);             \/\/       eor     x17, x0, #0x3fffffffffff00\n-    __ ands(r1, r8, 18446744073705357315ull);          \/\/       ands    x1, x8, #0xffffffffffc00003\n-\n-\/\/ AbsOp\n-    __ b(__ pc());                                     \/\/       b       .\n-    __ b(back);                                        \/\/       b       back\n-    __ b(forth);                                       \/\/       b       forth\n-    __ bl(__ pc());                                    \/\/       bl      .\n-    __ bl(back);                                       \/\/       bl      back\n-    __ bl(forth);                                      \/\/       bl      forth\n-\n-\/\/ RegAndAbsOp\n-    __ cbzw(r10, __ pc());                             \/\/       cbz     w10, .\n-    __ cbzw(r10, back);                                \/\/       cbz     w10, back\n-    __ cbzw(r10, forth);                               \/\/       cbz     w10, forth\n-    __ cbnzw(r8, __ pc());                             \/\/       cbnz    w8, .\n-    __ cbnzw(r8, back);                                \/\/       cbnz    w8, back\n-    __ cbnzw(r8, forth);                               \/\/       cbnz    w8, forth\n-    __ cbz(r11, __ pc());                              \/\/       cbz     x11, .\n-    __ cbz(r11, back);                                 \/\/       cbz     x11, back\n-    __ cbz(r11, forth);                                \/\/       cbz     x11, forth\n-    __ cbnz(r29, __ pc());                             \/\/       cbnz    x29, .\n-    __ cbnz(r29, back);                                \/\/       cbnz    x29, back\n-    __ cbnz(r29, forth);                               \/\/       cbnz    x29, forth\n-    __ adr(r19, __ pc());                              \/\/       adr     x19, .\n-    __ adr(r19, back);                                 \/\/       adr     x19, back\n-    __ adr(r19, forth);                                \/\/       adr     x19, forth\n-    __ _adrp(r19, __ pc());                            \/\/       adrp    x19, .\n-\n-\/\/ RegImmAbsOp\n-    __ tbz(r22, 6, __ pc());                           \/\/       tbz     x22, #6, .\n-    __ tbz(r22, 6, back);                              \/\/       tbz     x22, #6, back\n-    __ tbz(r22, 6, forth);                             \/\/       tbz     x22, #6, forth\n-    __ tbnz(r12, 11, __ pc());                         \/\/       tbnz    x12, #11, .\n-    __ tbnz(r12, 11, back);                            \/\/       tbnz    x12, #11, back\n-    __ tbnz(r12, 11, forth);                           \/\/       tbnz    x12, #11, forth\n-\n-\/\/ MoveWideImmOp\n-    __ movnw(r0, 6301, 0);                             \/\/       movn    w0, #6301, lsl 0\n-    __ movzw(r7, 20886, 0);                            \/\/       movz    w7, #20886, lsl 0\n-    __ movkw(r27, 18617, 0);                           \/\/       movk    w27, #18617, lsl 0\n-    __ movn(r12, 22998, 16);                           \/\/       movn    x12, #22998, lsl 16\n-    __ movz(r20, 1532, 16);                            \/\/       movz    x20, #1532, lsl 16\n-    __ movk(r8, 5167, 32);                             \/\/       movk    x8, #5167, lsl 32\n-\n-\/\/ BitfieldOp\n-    __ sbfm(r15, r17, 24, 28);                         \/\/       sbfm    x15, x17, #24, #28\n-    __ bfmw(r15, r9, 14, 25);                          \/\/       bfm     w15, w9, #14, #25\n-    __ ubfmw(r27, r25, 6, 31);                         \/\/       ubfm    w27, w25, #6, #31\n-    __ sbfm(r19, r2, 23, 31);                          \/\/       sbfm    x19, x2, #23, #31\n-    __ bfm(r12, r21, 10, 6);                           \/\/       bfm     x12, x21, #10, #6\n-    __ ubfm(r22, r0, 26, 16);                          \/\/       ubfm    x22, x0, #26, #16\n-\n-\/\/ ExtractOp\n-    __ extrw(r3, r3, r20, 27);                         \/\/       extr    w3, w3, w20, #27\n-    __ extr(r8, r30, r3, 54);                          \/\/       extr    x8, x30, x3, #54\n-\n-\/\/ CondBranchOp\n-    __ br(Assembler::EQ, __ pc());                     \/\/       b.EQ    .\n-    __ br(Assembler::EQ, back);                        \/\/       b.EQ    back\n-    __ br(Assembler::EQ, forth);                       \/\/       b.EQ    forth\n-    __ br(Assembler::NE, __ pc());                     \/\/       b.NE    .\n-    __ br(Assembler::NE, back);                        \/\/       b.NE    back\n-    __ br(Assembler::NE, forth);                       \/\/       b.NE    forth\n-    __ br(Assembler::HS, __ pc());                     \/\/       b.HS    .\n-    __ br(Assembler::HS, back);                        \/\/       b.HS    back\n-    __ br(Assembler::HS, forth);                       \/\/       b.HS    forth\n-    __ br(Assembler::CS, __ pc());                     \/\/       b.CS    .\n-    __ br(Assembler::CS, back);                        \/\/       b.CS    back\n-    __ br(Assembler::CS, forth);                       \/\/       b.CS    forth\n-    __ br(Assembler::LO, __ pc());                     \/\/       b.LO    .\n-    __ br(Assembler::LO, back);                        \/\/       b.LO    back\n-    __ br(Assembler::LO, forth);                       \/\/       b.LO    forth\n-    __ br(Assembler::CC, __ pc());                     \/\/       b.CC    .\n-    __ br(Assembler::CC, back);                        \/\/       b.CC    back\n-    __ br(Assembler::CC, forth);                       \/\/       b.CC    forth\n-    __ br(Assembler::MI, __ pc());                     \/\/       b.MI    .\n-    __ br(Assembler::MI, back);                        \/\/       b.MI    back\n-    __ br(Assembler::MI, forth);                       \/\/       b.MI    forth\n-    __ br(Assembler::PL, __ pc());                     \/\/       b.PL    .\n-    __ br(Assembler::PL, back);                        \/\/       b.PL    back\n-    __ br(Assembler::PL, forth);                       \/\/       b.PL    forth\n-    __ br(Assembler::VS, __ pc());                     \/\/       b.VS    .\n-    __ br(Assembler::VS, back);                        \/\/       b.VS    back\n-    __ br(Assembler::VS, forth);                       \/\/       b.VS    forth\n-    __ br(Assembler::VC, __ pc());                     \/\/       b.VC    .\n-    __ br(Assembler::VC, back);                        \/\/       b.VC    back\n-    __ br(Assembler::VC, forth);                       \/\/       b.VC    forth\n-    __ br(Assembler::HI, __ pc());                     \/\/       b.HI    .\n-    __ br(Assembler::HI, back);                        \/\/       b.HI    back\n-    __ br(Assembler::HI, forth);                       \/\/       b.HI    forth\n-    __ br(Assembler::LS, __ pc());                     \/\/       b.LS    .\n-    __ br(Assembler::LS, back);                        \/\/       b.LS    back\n-    __ br(Assembler::LS, forth);                       \/\/       b.LS    forth\n-    __ br(Assembler::GE, __ pc());                     \/\/       b.GE    .\n-    __ br(Assembler::GE, back);                        \/\/       b.GE    back\n-    __ br(Assembler::GE, forth);                       \/\/       b.GE    forth\n-    __ br(Assembler::LT, __ pc());                     \/\/       b.LT    .\n-    __ br(Assembler::LT, back);                        \/\/       b.LT    back\n-    __ br(Assembler::LT, forth);                       \/\/       b.LT    forth\n-    __ br(Assembler::GT, __ pc());                     \/\/       b.GT    .\n-    __ br(Assembler::GT, back);                        \/\/       b.GT    back\n-    __ br(Assembler::GT, forth);                       \/\/       b.GT    forth\n-    __ br(Assembler::LE, __ pc());                     \/\/       b.LE    .\n-    __ br(Assembler::LE, back);                        \/\/       b.LE    back\n-    __ br(Assembler::LE, forth);                       \/\/       b.LE    forth\n-    __ br(Assembler::AL, __ pc());                     \/\/       b.AL    .\n-    __ br(Assembler::AL, back);                        \/\/       b.AL    back\n-    __ br(Assembler::AL, forth);                       \/\/       b.AL    forth\n-    __ br(Assembler::NV, __ pc());                     \/\/       b.NV    .\n-    __ br(Assembler::NV, back);                        \/\/       b.NV    back\n-    __ br(Assembler::NV, forth);                       \/\/       b.NV    forth\n-\n-\/\/ ImmOp\n-    __ svc(12999);                                     \/\/       svc     #12999\n-    __ hvc(2665);                                      \/\/       hvc     #2665\n-    __ smc(9002);                                      \/\/       smc     #9002\n-    __ brk(14843);                                     \/\/       brk     #14843\n-    __ hlt(25964);                                     \/\/       hlt     #25964\n-\n-\/\/ Op\n-    __ nop();                                          \/\/       nop\n-    __ eret();                                         \/\/       eret\n-    __ drps();                                         \/\/       drps\n-    __ isb();                                          \/\/       isb\n-\n-\/\/ SystemOp\n-    __ dsb(Assembler::ST);                             \/\/       dsb     ST\n-    __ dmb(Assembler::OSHST);                          \/\/       dmb     OSHST\n-\n-\/\/ OneRegOp\n-    __ br(r16);                                        \/\/       br      x16\n-    __ blr(r20);                                       \/\/       blr     x20\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ stxr(r10, r27, r8);                             \/\/       stxr    w10, x27, [x8]\n-    __ stlxr(r0, r1, r21);                             \/\/       stlxr   w0, x1, [x21]\n-    __ ldxr(r17, r29);                                 \/\/       ldxr    x17, [x29]\n-    __ ldaxr(r29, r28);                                \/\/       ldaxr   x29, [x28]\n-    __ stlr(r1, r23);                                  \/\/       stlr    x1, [x23]\n-    __ ldar(r21, r20);                                 \/\/       ldar    x21, [x20]\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ stxrw(r22, r27, r19);                           \/\/       stxr    w22, w27, [x19]\n-    __ stlxrw(r11, r16, r6);                           \/\/       stlxr   w11, w16, [x6]\n-    __ ldxrw(r17, r0);                                 \/\/       ldxr    w17, [x0]\n-    __ ldaxrw(r4, r10);                                \/\/       ldaxr   w4, [x10]\n-    __ stlrw(r24, r22);                                \/\/       stlr    w24, [x22]\n-    __ ldarw(r10, r19);                                \/\/       ldar    w10, [x19]\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ stxrh(r1, r5, r30);                             \/\/       stxrh   w1, w5, [x30]\n-    __ stlxrh(r8, r12, r17);                           \/\/       stlxrh  w8, w12, [x17]\n-    __ ldxrh(r9, r14);                                 \/\/       ldxrh   w9, [x14]\n-    __ ldaxrh(r7, r1);                                 \/\/       ldaxrh  w7, [x1]\n-    __ stlrh(r5, r16);                                 \/\/       stlrh   w5, [x16]\n-    __ ldarh(r2, r12);                                 \/\/       ldarh   w2, [x12]\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ stxrb(r10, r12, r3);                            \/\/       stxrb   w10, w12, [x3]\n-    __ stlxrb(r28, r14, r26);                          \/\/       stlxrb  w28, w14, [x26]\n-    __ ldxrb(r30, r10);                                \/\/       ldxrb   w30, [x10]\n-    __ ldaxrb(r14, r21);                               \/\/       ldaxrb  w14, [x21]\n-    __ stlrb(r13, r9);                                 \/\/       stlrb   w13, [x9]\n-    __ ldarb(r22, r27);                                \/\/       ldarb   w22, [x27]\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ ldxp(r28, r19, r11);                            \/\/       ldxp    x28, x19, [x11]\n-    __ ldaxp(r30, r19, r2);                            \/\/       ldaxp   x30, x19, [x2]\n-    __ stxp(r2, r23, r1, r0);                          \/\/       stxp    w2, x23, x1, [x0]\n-    __ stlxp(r12, r16, r13, r15);                      \/\/       stlxp   w12, x16, x13, [x15]\n-\n-\/\/ LoadStoreExclusiveOp\n-    __ ldxpw(r17, r21, r13);                           \/\/       ldxp    w17, w21, [x13]\n-    __ ldaxpw(r11, r30, r8);                           \/\/       ldaxp   w11, w30, [x8]\n-    __ stxpw(r24, r13, r11, r1);                       \/\/       stxp    w24, w13, w11, [x1]\n-    __ stlxpw(r26, r21, r27, r13);                     \/\/       stlxp   w26, w21, w27, [x13]\n-\n-\/\/ base_plus_unscaled_offset\n-\/\/ LoadStoreOp\n-    __ str(r11, Address(r20, -103));                   \/\/       str     x11, [x20, -103]\n-    __ strw(r28, Address(r16, 62));                    \/\/       str     w28, [x16, 62]\n-    __ strb(r27, Address(r9, -9));                     \/\/       strb    w27, [x9, -9]\n-    __ strh(r2, Address(r25, -50));                    \/\/       strh    w2, [x25, -50]\n-    __ ldr(r4, Address(r2, -241));                     \/\/       ldr     x4, [x2, -241]\n-    __ ldrw(r30, Address(r20, -31));                   \/\/       ldr     w30, [x20, -31]\n-    __ ldrb(r17, Address(r23, -23));                   \/\/       ldrb    w17, [x23, -23]\n-    __ ldrh(r29, Address(r26, -1));                    \/\/       ldrh    w29, [x26, -1]\n-    __ ldrsb(r1, Address(r9, 6));                      \/\/       ldrsb   x1, [x9, 6]\n-    __ ldrsh(r11, Address(r12, 19));                   \/\/       ldrsh   x11, [x12, 19]\n-    __ ldrshw(r11, Address(r1, -50));                  \/\/       ldrsh   w11, [x1, -50]\n-    __ ldrsw(r19, Address(r24, 41));                   \/\/       ldrsw   x19, [x24, 41]\n-    __ ldrd(v24, Address(r24, 95));                    \/\/       ldr     d24, [x24, 95]\n-    __ ldrs(v15, Address(r5, -43));                    \/\/       ldr     s15, [x5, -43]\n-    __ strd(v21, Address(r27, 1));                     \/\/       str     d21, [x27, 1]\n-    __ strs(v23, Address(r13, -107));                  \/\/       str     s23, [x13, -107]\n-\n-\/\/ pre\n-\/\/ LoadStoreOp\n-    __ str(r10, Address(__ pre(r0, 8)));               \/\/       str     x10, [x0, 8]!\n-    __ strw(r3, Address(__ pre(r0, 29)));              \/\/       str     w3, [x0, 29]!\n-    __ strb(r10, Address(__ pre(r14, 9)));             \/\/       strb    w10, [x14, 9]!\n-    __ strh(r29, Address(__ pre(r25, -3)));            \/\/       strh    w29, [x25, -3]!\n-    __ ldr(r12, Address(__ pre(r16, -144)));           \/\/       ldr     x12, [x16, -144]!\n-    __ ldrw(r12, Address(__ pre(r22, -6)));            \/\/       ldr     w12, [x22, -6]!\n-    __ ldrb(r13, Address(__ pre(r11, -10)));           \/\/       ldrb    w13, [x11, -10]!\n-    __ ldrh(r0, Address(__ pre(r21, -21)));            \/\/       ldrh    w0, [x21, -21]!\n-    __ ldrsb(r23, Address(__ pre(r6, 4)));             \/\/       ldrsb   x23, [x6, 4]!\n-    __ ldrsh(r3, Address(__ pre(r7, -53)));            \/\/       ldrsh   x3, [x7, -53]!\n-    __ ldrshw(r28, Address(__ pre(r4, -7)));           \/\/       ldrsh   w28, [x4, -7]!\n-    __ ldrsw(r24, Address(__ pre(r8, -18)));           \/\/       ldrsw   x24, [x8, -18]!\n-    __ ldrd(v14, Address(__ pre(r11, 12)));            \/\/       ldr     d14, [x11, 12]!\n-    __ ldrs(v19, Address(__ pre(r12, -67)));           \/\/       ldr     s19, [x12, -67]!\n-    __ strd(v20, Address(__ pre(r0, -253)));           \/\/       str     d20, [x0, -253]!\n-    __ strs(v8, Address(__ pre(r0, 64)));              \/\/       str     s8, [x0, 64]!\n-\n-\/\/ post\n-\/\/ LoadStoreOp\n-    __ str(r3, Address(__ post(r28, -94)));            \/\/       str     x3, [x28], -94\n-    __ strw(r11, Address(__ post(r7, -54)));           \/\/       str     w11, [x7], -54\n-    __ strb(r27, Address(__ post(r10, -24)));          \/\/       strb    w27, [x10], -24\n-    __ strh(r6, Address(__ post(r7, 27)));             \/\/       strh    w6, [x7], 27\n-    __ ldr(r13, Address(__ post(r10, -202)));          \/\/       ldr     x13, [x10], -202\n-    __ ldrw(r15, Address(__ post(r5, -41)));           \/\/       ldr     w15, [x5], -41\n-    __ ldrb(r2, Address(__ post(r13, 9)));             \/\/       ldrb    w2, [x13], 9\n-    __ ldrh(r28, Address(__ post(r13, -20)));          \/\/       ldrh    w28, [x13], -20\n-    __ ldrsb(r9, Address(__ post(r13, -31)));          \/\/       ldrsb   x9, [x13], -31\n-    __ ldrsh(r3, Address(__ post(r24, -36)));          \/\/       ldrsh   x3, [x24], -36\n-    __ ldrshw(r20, Address(__ post(r3, 6)));           \/\/       ldrsh   w20, [x3], 6\n-    __ ldrsw(r7, Address(__ post(r19, -1)));           \/\/       ldrsw   x7, [x19], -1\n-    __ ldrd(v30, Address(__ post(r8, -130)));          \/\/       ldr     d30, [x8], -130\n-    __ ldrs(v25, Address(__ post(r15, 21)));           \/\/       ldr     s25, [x15], 21\n-    __ strd(v14, Address(__ post(r23, 90)));           \/\/       str     d14, [x23], 90\n-    __ strs(v8, Address(__ post(r0, -33)));            \/\/       str     s8, [x0], -33\n-\n-\/\/ base_plus_reg\n-\/\/ LoadStoreOp\n-    __ str(r10, Address(r17, r21, Address::sxtw(3)));  \/\/       str     x10, [x17, w21, sxtw #3]\n-    __ strw(r4, Address(r13, r22, Address::sxtw(2)));  \/\/       str     w4, [x13, w22, sxtw #2]\n-    __ strb(r13, Address(r0, r19, Address::uxtw(0)));  \/\/       strb    w13, [x0, w19, uxtw #0]\n-    __ strh(r12, Address(r27, r6, Address::sxtw(0)));  \/\/       strh    w12, [x27, w6, sxtw #0]\n-    __ ldr(r0, Address(r8, r16, Address::lsl(0)));     \/\/       ldr     x0, [x8, x16, lsl #0]\n-    __ ldrw(r0, Address(r4, r26, Address::sxtx(0)));   \/\/       ldr     w0, [x4, x26, sxtx #0]\n-    __ ldrb(r14, Address(r25, r5, Address::sxtw(0)));  \/\/       ldrb    w14, [x25, w5, sxtw #0]\n-    __ ldrh(r9, Address(r4, r17, Address::uxtw(0)));   \/\/       ldrh    w9, [x4, w17, uxtw #0]\n-    __ ldrsb(r27, Address(r4, r7, Address::lsl(0)));   \/\/       ldrsb   x27, [x4, x7, lsl #0]\n-    __ ldrsh(r15, Address(r17, r30, Address::sxtw(0))); \/\/      ldrsh   x15, [x17, w30, sxtw #0]\n-    __ ldrshw(r16, Address(r0, r22, Address::sxtw(0))); \/\/      ldrsh   w16, [x0, w22, sxtw #0]\n-    __ ldrsw(r22, Address(r10, r30, Address::sxtx(2))); \/\/      ldrsw   x22, [x10, x30, sxtx #2]\n-    __ ldrd(v29, Address(r21, r10, Address::sxtx(3))); \/\/       ldr     d29, [x21, x10, sxtx #3]\n-    __ ldrs(v3, Address(r11, r19, Address::uxtw(0)));  \/\/       ldr     s3, [x11, w19, uxtw #0]\n-    __ strd(v13, Address(r28, r29, Address::uxtw(3))); \/\/       str     d13, [x28, w29, uxtw #3]\n-    __ strs(v23, Address(r29, r5, Address::sxtx(2)));  \/\/       str     s23, [x29, x5, sxtx #2]\n-\n-\/\/ base_plus_scaled_offset\n-\/\/ LoadStoreOp\n-    __ str(r5, Address(r8, 12600));                    \/\/       str     x5, [x8, 12600]\n-    __ strw(r29, Address(r24, 7880));                  \/\/       str     w29, [x24, 7880]\n-    __ strb(r19, Address(r17, 1566));                  \/\/       strb    w19, [x17, 1566]\n-    __ strh(r13, Address(r19, 3984));                  \/\/       strh    w13, [x19, 3984]\n-    __ ldr(r19, Address(r23, 13632));                  \/\/       ldr     x19, [x23, 13632]\n-    __ ldrw(r23, Address(r29, 6264));                  \/\/       ldr     w23, [x29, 6264]\n-    __ ldrb(r22, Address(r11, 2012));                  \/\/       ldrb    w22, [x11, 2012]\n-    __ ldrh(r3, Address(r10, 3784));                   \/\/       ldrh    w3, [x10, 3784]\n-    __ ldrsb(r8, Address(r16, 1951));                  \/\/       ldrsb   x8, [x16, 1951]\n-    __ ldrsh(r23, Address(r20, 3346));                 \/\/       ldrsh   x23, [x20, 3346]\n-    __ ldrshw(r2, Address(r1, 3994));                  \/\/       ldrsh   w2, [x1, 3994]\n-    __ ldrsw(r4, Address(r17, 7204));                  \/\/       ldrsw   x4, [x17, 7204]\n-    __ ldrd(v20, Address(r27, 14400));                 \/\/       ldr     d20, [x27, 14400]\n-    __ ldrs(v25, Address(r14, 8096));                  \/\/       ldr     s25, [x14, 8096]\n-    __ strd(v26, Address(r10, 15024));                 \/\/       str     d26, [x10, 15024]\n-    __ strs(v9, Address(r3, 6936));                    \/\/       str     s9, [x3, 6936]\n-\n-\/\/ pcrel\n-\/\/ LoadStoreOp\n-    __ ldr(r27, forth);                                \/\/       ldr     x27, forth\n-    __ ldrw(r11, __ pc());                             \/\/       ldr     w11, .\n-\n-\/\/ LoadStoreOp\n-    __ prfm(Address(r3, -187));                        \/\/       prfm    PLDL1KEEP, [x3, -187]\n-\n-\/\/ LoadStoreOp\n-    __ prfm(__ pc());                                  \/\/       prfm    PLDL1KEEP, .\n-\n-\/\/ LoadStoreOp\n-    __ prfm(Address(r29, r14, Address::lsl(0)));       \/\/       prfm    PLDL1KEEP, [x29, x14, lsl #0]\n-\n-\/\/ LoadStoreOp\n-    __ prfm(Address(r4, 13312));                       \/\/       prfm    PLDL1KEEP, [x4, 13312]\n-\n-\/\/ AddSubCarryOp\n-    __ adcw(r21, r1, r7);                              \/\/       adc     w21, w1, w7\n-    __ adcsw(r8, r5, r7);                              \/\/       adcs    w8, w5, w7\n-    __ sbcw(r7, r27, r14);                             \/\/       sbc     w7, w27, w14\n-    __ sbcsw(r27, r4, r17);                            \/\/       sbcs    w27, w4, w17\n-    __ adc(r0, r28, r0);                               \/\/       adc     x0, x28, x0\n-    __ adcs(r12, r24, r30);                            \/\/       adcs    x12, x24, x30\n-    __ sbc(r0, r25, r15);                              \/\/       sbc     x0, x25, x15\n-    __ sbcs(r1, r24, r3);                              \/\/       sbcs    x1, x24, x3\n-\n-\/\/ AddSubExtendedOp\n-    __ addw(r17, r24, r20, ext::uxtb, 2);              \/\/       add     w17, w24, w20, uxtb #2\n-    __ addsw(r13, r28, r10, ext::uxth, 1);             \/\/       adds    w13, w28, w10, uxth #1\n-    __ sub(r15, r16, r2, ext::sxth, 2);                \/\/       sub     x15, x16, x2, sxth #2\n-    __ subsw(r29, r13, r13, ext::uxth, 2);             \/\/       subs    w29, w13, w13, uxth #2\n-    __ add(r12, r20, r12, ext::sxtw, 3);               \/\/       add     x12, x20, x12, sxtw #3\n-    __ adds(r30, r27, r11, ext::sxtb, 1);              \/\/       adds    x30, x27, x11, sxtb #1\n-    __ sub(r14, r7, r1, ext::sxtw, 2);                 \/\/       sub     x14, x7, x1, sxtw #2\n-    __ subs(r29, r3, r27, ext::sxth, 1);               \/\/       subs    x29, x3, x27, sxth #1\n-\n-\/\/ ConditionalCompareOp\n-    __ ccmnw(r0, r13, 14u, Assembler::MI);             \/\/       ccmn    w0, w13, #14, MI\n-    __ ccmpw(r22, r17, 6u, Assembler::CC);             \/\/       ccmp    w22, w17, #6, CC\n-    __ ccmn(r17, r30, 14u, Assembler::VS);             \/\/       ccmn    x17, x30, #14, VS\n-    __ ccmp(r10, r19, 12u, Assembler::HI);             \/\/       ccmp    x10, x19, #12, HI\n-\n-\/\/ ConditionalCompareImmedOp\n-    __ ccmnw(r6, 18, 2, Assembler::LE);                \/\/       ccmn    w6, #18, #2, LE\n-    __ ccmpw(r9, 13, 4, Assembler::HI);                \/\/       ccmp    w9, #13, #4, HI\n-    __ ccmn(r21, 11, 11, Assembler::LO);               \/\/       ccmn    x21, #11, #11, LO\n-    __ ccmp(r4, 13, 2, Assembler::VC);                 \/\/       ccmp    x4, #13, #2, VC\n-\n-\/\/ ConditionalSelectOp\n-    __ cselw(r12, r2, r22, Assembler::HI);             \/\/       csel    w12, w2, w22, HI\n-    __ csincw(r24, r16, r17, Assembler::HS);           \/\/       csinc   w24, w16, w17, HS\n-    __ csinvw(r6, r7, r16, Assembler::LT);             \/\/       csinv   w6, w7, w16, LT\n-    __ csnegw(r11, r27, r22, Assembler::LS);           \/\/       csneg   w11, w27, w22, LS\n-    __ csel(r10, r3, r29, Assembler::LT);              \/\/       csel    x10, x3, x29, LT\n-    __ csinc(r12, r26, r27, Assembler::CC);            \/\/       csinc   x12, x26, x27, CC\n-    __ csinv(r15, r10, r21, Assembler::GT);            \/\/       csinv   x15, x10, x21, GT\n-    __ csneg(r30, r23, r9, Assembler::GT);             \/\/       csneg   x30, x23, x9, GT\n-\n-\/\/ TwoRegOp\n-    __ rbitw(r30, r10);                                \/\/       rbit    w30, w10\n-    __ rev16w(r29, r15);                               \/\/       rev16   w29, w15\n-    __ revw(r29, r30);                                 \/\/       rev     w29, w30\n-    __ clzw(r25, r21);                                 \/\/       clz     w25, w21\n-    __ clsw(r4, r0);                                   \/\/       cls     w4, w0\n-    __ rbit(r17, r21);                                 \/\/       rbit    x17, x21\n-    __ rev16(r29, r16);                                \/\/       rev16   x29, x16\n-    __ rev32(r21, r20);                                \/\/       rev32   x21, x20\n-    __ rev(r6, r19);                                   \/\/       rev     x6, x19\n-    __ clz(r30, r3);                                   \/\/       clz     x30, x3\n-    __ cls(r21, r19);                                  \/\/       cls     x21, x19\n-\n-\/\/ ThreeRegOp\n-    __ udivw(r11, r24, r0);                            \/\/       udiv    w11, w24, w0\n-    __ sdivw(r27, r25, r14);                           \/\/       sdiv    w27, w25, w14\n-    __ lslvw(r3, r14, r17);                            \/\/       lslv    w3, w14, w17\n-    __ lsrvw(r7, r15, r24);                            \/\/       lsrv    w7, w15, w24\n-    __ asrvw(r28, r17, r25);                           \/\/       asrv    w28, w17, w25\n-    __ rorvw(r2, r26, r28);                            \/\/       rorv    w2, w26, w28\n-    __ udiv(r5, r25, r26);                             \/\/       udiv    x5, x25, x26\n-    __ sdiv(r27, r16, r17);                            \/\/       sdiv    x27, x16, x17\n-    __ lslv(r6, r21, r12);                             \/\/       lslv    x6, x21, x12\n-    __ lsrv(r0, r4, r12);                              \/\/       lsrv    x0, x4, x12\n-    __ asrv(r27, r17, r28);                            \/\/       asrv    x27, x17, x28\n-    __ rorv(r28, r2, r17);                             \/\/       rorv    x28, x2, x17\n-    __ umulh(r10, r15, r14);                           \/\/       umulh   x10, x15, x14\n-    __ smulh(r14, r3, r25);                            \/\/       smulh   x14, x3, x25\n-\n-\/\/ FourRegMulOp\n-    __ maddw(r15, r19, r14, r5);                       \/\/       madd    w15, w19, w14, w5\n-    __ msubw(r16, r4, r26, r25);                       \/\/       msub    w16, w4, w26, w25\n-    __ madd(r4, r2, r2, r12);                          \/\/       madd    x4, x2, x2, x12\n-    __ msub(r29, r17, r8, r7);                         \/\/       msub    x29, x17, x8, x7\n-    __ smaddl(r3, r4, r25, r4);                        \/\/       smaddl  x3, w4, w25, x4\n-    __ smsubl(r26, r25, r4, r17);                      \/\/       smsubl  x26, w25, w4, x17\n-    __ umaddl(r0, r26, r17, r23);                      \/\/       umaddl  x0, w26, w17, x23\n-    __ umsubl(r15, r21, r28, r17);                     \/\/       umsubl  x15, w21, w28, x17\n-\n-\/\/ ThreeRegFloatOp\n-    __ fabds(v27, v10, v3);                            \/\/       fabd    s27, s10, s3\n-    __ fmuls(v0, v7, v25);                             \/\/       fmul    s0, s7, s25\n-    __ fdivs(v9, v6, v15);                             \/\/       fdiv    s9, s6, s15\n-    __ fadds(v29, v15, v10);                           \/\/       fadd    s29, s15, s10\n-    __ fsubs(v2, v17, v7);                             \/\/       fsub    s2, s17, s7\n-    __ fabdd(v11, v11, v23);                           \/\/       fabd    d11, d11, d23\n-    __ fmuld(v7, v29, v23);                            \/\/       fmul    d7, d29, d23\n-    __ fdivd(v14, v27, v11);                           \/\/       fdiv    d14, d27, d11\n-    __ faddd(v11, v4, v24);                            \/\/       fadd    d11, d4, d24\n-    __ fsubd(v12, v15, v14);                           \/\/       fsub    d12, d15, d14\n-\n-\/\/ FourRegFloatOp\n-    __ fmadds(v20, v11, v28, v13);                     \/\/       fmadd   s20, s11, s28, s13\n-    __ fmsubs(v11, v12, v23, v30);                     \/\/       fmsub   s11, s12, s23, s30\n-    __ fnmadds(v26, v14, v9, v13);                     \/\/       fnmadd  s26, s14, s9, s13\n-    __ fnmadds(v10, v7, v5, v29);                      \/\/       fnmadd  s10, s7, s5, s29\n-    __ fmaddd(v15, v3, v11, v12);                      \/\/       fmadd   d15, d3, d11, d12\n-    __ fmsubd(v15, v30, v30, v17);                     \/\/       fmsub   d15, d30, d30, d17\n-    __ fnmaddd(v19, v20, v15, v15);                    \/\/       fnmadd  d19, d20, d15, d15\n-    __ fnmaddd(v9, v21, v2, v9);                       \/\/       fnmadd  d9, d21, d2, d9\n-\n-\/\/ TwoRegFloatOp\n-    __ fmovs(v27, v7);                                 \/\/       fmov    s27, s7\n-    __ fabss(v29, v30);                                \/\/       fabs    s29, s30\n-    __ fnegs(v17, v1);                                 \/\/       fneg    s17, s1\n-    __ fsqrts(v2, v6);                                 \/\/       fsqrt   s2, s6\n-    __ fcvts(v10, v3);                                 \/\/       fcvt    d10, s3\n-    __ fmovd(v24, v11);                                \/\/       fmov    d24, d11\n-    __ fabsd(v7, v1);                                  \/\/       fabs    d7, d1\n-    __ fnegd(v11, v0);                                 \/\/       fneg    d11, d0\n-    __ fsqrtd(v3, v17);                                \/\/       fsqrt   d3, d17\n-    __ fcvtd(v28, v6);                                 \/\/       fcvt    s28, d6\n-\n-\/\/ FloatConvertOp\n-    __ fcvtzsw(r22, v6);                               \/\/       fcvtzs  w22, s6\n-    __ fcvtzs(r0, v27);                                \/\/       fcvtzs  x0, s27\n-    __ fcvtzdw(r26, v2);                               \/\/       fcvtzs  w26, d2\n-    __ fcvtzd(r5, v7);                                 \/\/       fcvtzs  x5, d7\n-    __ scvtfws(v28, r11);                              \/\/       scvtf   s28, w11\n-    __ scvtfs(v25, r13);                               \/\/       scvtf   s25, x13\n-    __ scvtfwd(v11, r23);                              \/\/       scvtf   d11, w23\n-    __ scvtfd(v19, r8);                                \/\/       scvtf   d19, x8\n-    __ fmovs(r17, v21);                                \/\/       fmov    w17, s21\n-    __ fmovd(r25, v20);                                \/\/       fmov    x25, d20\n-    __ fmovs(v19, r17);                                \/\/       fmov    s19, w17\n-    __ fmovd(v2, r29);                                 \/\/       fmov    d2, x29\n-\n-\/\/ TwoRegFloatOp\n-    __ fcmps(v22, v8);                                 \/\/       fcmp    s22, s8\n-    __ fcmpd(v21, v19);                                \/\/       fcmp    d21, d19\n-    __ fcmps(v20, 0.0);                                \/\/       fcmp    s20, #0.0\n-    __ fcmpd(v11, 0.0);                                \/\/       fcmp    d11, #0.0\n-\n-\/\/ LoadStorePairOp\n-    __ stpw(r20, r6, Address(r15, -32));               \/\/       stp     w20, w6, [x15, #-32]\n-    __ ldpw(r27, r14, Address(r3, -208));              \/\/       ldp     w27, w14, [x3, #-208]\n-    __ ldpsw(r16, r10, Address(r11, -80));             \/\/       ldpsw   x16, x10, [x11, #-80]\n-    __ stp(r7, r7, Address(r14, 64));                  \/\/       stp     x7, x7, [x14, #64]\n-    __ ldp(r12, r23, Address(r0, 112));                \/\/       ldp     x12, x23, [x0, #112]\n-\n-\/\/ LoadStorePairOp\n-    __ stpw(r13, r7, Address(__ pre(r6, -80)));        \/\/       stp     w13, w7, [x6, #-80]!\n-    __ ldpw(r30, r15, Address(__ pre(r2, -144)));      \/\/       ldp     w30, w15, [x2, #-144]!\n-    __ ldpsw(r4, r1, Address(__ pre(r27, -144)));      \/\/       ldpsw   x4, x1, [x27, #-144]!\n-    __ stp(r23, r14, Address(__ pre(r11, 64)));        \/\/       stp     x23, x14, [x11, #64]!\n-    __ ldp(r29, r27, Address(__ pre(r21, -192)));      \/\/       ldp     x29, x27, [x21, #-192]!\n-\n-\/\/ LoadStorePairOp\n-    __ stpw(r22, r5, Address(__ post(r21, -48)));      \/\/       stp     w22, w5, [x21], #-48\n-    __ ldpw(r27, r17, Address(__ post(r6, -32)));      \/\/       ldp     w27, w17, [x6], #-32\n-    __ ldpsw(r16, r5, Address(__ post(r1, -80)));      \/\/       ldpsw   x16, x5, [x1], #-80\n-    __ stp(r13, r20, Address(__ post(r22, -208)));     \/\/       stp     x13, x20, [x22], #-208\n-    __ ldp(r30, r27, Address(__ post(r10, 80)));       \/\/       ldp     x30, x27, [x10], #80\n-\n-\/\/ LoadStorePairOp\n-    __ stnpw(r5, r17, Address(r11, 16));               \/\/       stnp    w5, w17, [x11, #16]\n-    __ ldnpw(r14, r4, Address(r26, -96));              \/\/       ldnp    w14, w4, [x26, #-96]\n-    __ stnp(r23, r29, Address(r12, 32));               \/\/       stnp    x23, x29, [x12, #32]\n-    __ ldnp(r0, r6, Address(r21, -80));                \/\/       ldnp    x0, x6, [x21, #-80]\n-\n-\/\/ LdStNEONOp\n-    __ ld1(v15, __ T8B, Address(r26));                 \/\/       ld1     {v15.8B}, [x26]\n-    __ ld1(v23, v24, __ T16B, Address(__ post(r11, 32))); \/\/    ld1     {v23.16B, v24.16B}, [x11], 32\n-    __ ld1(v8, v9, v10, __ T1D, Address(__ post(r23, r7))); \/\/  ld1     {v8.1D, v9.1D, v10.1D}, [x23], x7\n-    __ ld1(v19, v20, v21, v22, __ T8H, Address(__ post(r25, 64))); \/\/   ld1     {v19.8H, v20.8H, v21.8H, v22.8H}, [x25], 64\n-    __ ld1r(v29, __ T8B, Address(r17));                \/\/       ld1r    {v29.8B}, [x17]\n-    __ ld1r(v24, __ T4S, Address(__ post(r23, 4)));    \/\/       ld1r    {v24.4S}, [x23], 4\n-    __ ld1r(v10, __ T1D, Address(__ post(r5, r25)));   \/\/       ld1r    {v10.1D}, [x5], x25\n-    __ ld2(v17, v18, __ T2D, Address(r10));            \/\/       ld2     {v17.2D, v18.2D}, [x10]\n-    __ ld2(v12, v13, __ T4H, Address(__ post(r15, 16))); \/\/     ld2     {v12.4H, v13.4H}, [x15], 16\n-    __ ld2r(v25, v26, __ T16B, Address(r17));          \/\/       ld2r    {v25.16B, v26.16B}, [x17]\n-    __ ld2r(v1, v2, __ T2S, Address(__ post(r30, 8))); \/\/       ld2r    {v1.2S, v2.2S}, [x30], 8\n-    __ ld2r(v16, v17, __ T2D, Address(__ post(r17, r9))); \/\/    ld2r    {v16.2D, v17.2D}, [x17], x9\n-    __ ld3(v25, v26, v27, __ T4S, Address(__ post(r12, r2))); \/\/        ld3     {v25.4S, v26.4S, v27.4S}, [x12], x2\n-    __ ld3(v26, v27, v28, __ T2S, Address(r19));       \/\/       ld3     {v26.2S, v27.2S, v28.2S}, [x19]\n-    __ ld3r(v15, v16, v17, __ T8H, Address(r21));      \/\/       ld3r    {v15.8H, v16.8H, v17.8H}, [x21]\n-    __ ld3r(v25, v26, v27, __ T4S, Address(__ post(r13, 12))); \/\/       ld3r    {v25.4S, v26.4S, v27.4S}, [x13], 12\n-    __ ld3r(v14, v15, v16, __ T1D, Address(__ post(r28, r29))); \/\/      ld3r    {v14.1D, v15.1D, v16.1D}, [x28], x29\n-    __ ld4(v17, v18, v19, v20, __ T8H, Address(__ post(r29, 64))); \/\/   ld4     {v17.8H, v18.8H, v19.8H, v20.8H}, [x29], 64\n-    __ ld4(v27, v28, v29, v30, __ T8B, Address(__ post(r7, r0))); \/\/    ld4     {v27.8B, v28.8B, v29.8B, v30.8B}, [x7], x0\n-    __ ld4r(v24, v25, v26, v27, __ T8B, Address(r17)); \/\/       ld4r    {v24.8B, v25.8B, v26.8B, v27.8B}, [x17]\n-    __ ld4r(v0, v1, v2, v3, __ T4H, Address(__ post(r26, 8))); \/\/       ld4r    {v0.4H, v1.4H, v2.4H, v3.4H}, [x26], 8\n-    __ ld4r(v12, v13, v14, v15, __ T2S, Address(__ post(r25, r2))); \/\/  ld4r    {v12.2S, v13.2S, v14.2S, v15.2S}, [x25], x2\n-\n-\/\/ NEONReduceInstruction\n-    __ addv(v22, __ T8B, v23);                         \/\/       addv    b22, v23.8B\n-    __ addv(v27, __ T16B, v28);                        \/\/       addv    b27, v28.16B\n-    __ addv(v4, __ T4H, v5);                           \/\/       addv    h4, v5.4H\n-    __ addv(v7, __ T8H, v8);                           \/\/       addv    h7, v8.8H\n-    __ addv(v6, __ T4S, v7);                           \/\/       addv    s6, v7.4S\n-    __ smaxv(v1, __ T8B, v2);                          \/\/       smaxv   b1, v2.8B\n-    __ smaxv(v26, __ T16B, v27);                       \/\/       smaxv   b26, v27.16B\n-    __ smaxv(v15, __ T4H, v16);                        \/\/       smaxv   h15, v16.4H\n-    __ smaxv(v2, __ T8H, v3);                          \/\/       smaxv   h2, v3.8H\n-    __ smaxv(v13, __ T4S, v14);                        \/\/       smaxv   s13, v14.4S\n-    __ fmaxv(v13, __ T4S, v14);                        \/\/       fmaxv   s13, v14.4S\n-    __ sminv(v24, __ T8B, v25);                        \/\/       sminv   b24, v25.8B\n-    __ sminv(v23, __ T16B, v24);                       \/\/       sminv   b23, v24.16B\n-    __ sminv(v4, __ T4H, v5);                          \/\/       sminv   h4, v5.4H\n-    __ sminv(v19, __ T8H, v20);                        \/\/       sminv   h19, v20.8H\n-    __ sminv(v15, __ T4S, v16);                        \/\/       sminv   s15, v16.4S\n-    __ fminv(v0, __ T4S, v1);                          \/\/       fminv   s0, v1.4S\n-\n-\/\/ TwoRegNEONOp\n-    __ absr(v4, __ T8B, v5);                           \/\/       abs     v4.8B, v5.8B\n-    __ absr(v20, __ T16B, v21);                        \/\/       abs     v20.16B, v21.16B\n-    __ absr(v11, __ T4H, v12);                         \/\/       abs     v11.4H, v12.4H\n-    __ absr(v29, __ T8H, v30);                         \/\/       abs     v29.8H, v30.8H\n-    __ absr(v15, __ T2S, v16);                         \/\/       abs     v15.2S, v16.2S\n-    __ absr(v21, __ T4S, v22);                         \/\/       abs     v21.4S, v22.4S\n-    __ absr(v4, __ T2D, v5);                           \/\/       abs     v4.2D, v5.2D\n-    __ fabs(v14, __ T2S, v15);                         \/\/       fabs    v14.2S, v15.2S\n-    __ fabs(v22, __ T4S, v23);                         \/\/       fabs    v22.4S, v23.4S\n-    __ fabs(v25, __ T2D, v26);                         \/\/       fabs    v25.2D, v26.2D\n-    __ fneg(v6, __ T2S, v7);                           \/\/       fneg    v6.2S, v7.2S\n-    __ fneg(v12, __ T4S, v13);                         \/\/       fneg    v12.4S, v13.4S\n-    __ fneg(v14, __ T2D, v15);                         \/\/       fneg    v14.2D, v15.2D\n-    __ fsqrt(v13, __ T2S, v14);                        \/\/       fsqrt   v13.2S, v14.2S\n-    __ fsqrt(v14, __ T4S, v15);                        \/\/       fsqrt   v14.4S, v15.4S\n-    __ fsqrt(v9, __ T2D, v10);                         \/\/       fsqrt   v9.2D, v10.2D\n-    __ notr(v25, __ T8B, v26);                         \/\/       not     v25.8B, v26.8B\n-    __ notr(v28, __ T16B, v29);                        \/\/       not     v28.16B, v29.16B\n-\n-\/\/ ThreeRegNEONOp\n-    __ andr(v10, __ T8B, v11, v12);                    \/\/       and     v10.8B, v11.8B, v12.8B\n-    __ andr(v19, __ T16B, v20, v21);                   \/\/       and     v19.16B, v20.16B, v21.16B\n-    __ orr(v11, __ T8B, v12, v13);                     \/\/       orr     v11.8B, v12.8B, v13.8B\n-    __ orr(v17, __ T16B, v18, v19);                    \/\/       orr     v17.16B, v18.16B, v19.16B\n-    __ eor(v21, __ T8B, v22, v23);                     \/\/       eor     v21.8B, v22.8B, v23.8B\n-    __ eor(v15, __ T16B, v16, v17);                    \/\/       eor     v15.16B, v16.16B, v17.16B\n-    __ addv(v20, __ T8B, v21, v22);                    \/\/       add     v20.8B, v21.8B, v22.8B\n-    __ addv(v23, __ T16B, v24, v25);                   \/\/       add     v23.16B, v24.16B, v25.16B\n-    __ addv(v26, __ T4H, v27, v28);                    \/\/       add     v26.4H, v27.4H, v28.4H\n-    __ addv(v5, __ T8H, v6, v7);                       \/\/       add     v5.8H, v6.8H, v7.8H\n-    __ addv(v6, __ T2S, v7, v8);                       \/\/       add     v6.2S, v7.2S, v8.2S\n-    __ addv(v15, __ T4S, v16, v17);                    \/\/       add     v15.4S, v16.4S, v17.4S\n-    __ addv(v15, __ T2D, v16, v17);                    \/\/       add     v15.2D, v16.2D, v17.2D\n-    __ fadd(v25, __ T2S, v26, v27);                    \/\/       fadd    v25.2S, v26.2S, v27.2S\n-    __ fadd(v16, __ T4S, v17, v18);                    \/\/       fadd    v16.4S, v17.4S, v18.4S\n-    __ fadd(v27, __ T2D, v28, v29);                    \/\/       fadd    v27.2D, v28.2D, v29.2D\n-    __ subv(v24, __ T8B, v25, v26);                    \/\/       sub     v24.8B, v25.8B, v26.8B\n-    __ subv(v15, __ T16B, v16, v17);                   \/\/       sub     v15.16B, v16.16B, v17.16B\n-    __ subv(v25, __ T4H, v26, v27);                    \/\/       sub     v25.4H, v26.4H, v27.4H\n-    __ subv(v14, __ T8H, v15, v16);                    \/\/       sub     v14.8H, v15.8H, v16.8H\n-    __ subv(v10, __ T2S, v11, v12);                    \/\/       sub     v10.2S, v11.2S, v12.2S\n-    __ subv(v13, __ T4S, v14, v15);                    \/\/       sub     v13.4S, v14.4S, v15.4S\n-    __ subv(v14, __ T2D, v15, v16);                    \/\/       sub     v14.2D, v15.2D, v16.2D\n-    __ fsub(v20, __ T2S, v21, v22);                    \/\/       fsub    v20.2S, v21.2S, v22.2S\n-    __ fsub(v1, __ T4S, v2, v3);                       \/\/       fsub    v1.4S, v2.4S, v3.4S\n-    __ fsub(v22, __ T2D, v23, v24);                    \/\/       fsub    v22.2D, v23.2D, v24.2D\n-    __ mulv(v30, __ T8B, v31, v0);                     \/\/       mul     v30.8B, v31.8B, v0.8B\n-    __ mulv(v14, __ T16B, v15, v16);                   \/\/       mul     v14.16B, v15.16B, v16.16B\n-    __ mulv(v2, __ T4H, v3, v4);                       \/\/       mul     v2.4H, v3.4H, v4.4H\n-    __ mulv(v6, __ T8H, v7, v8);                       \/\/       mul     v6.8H, v7.8H, v8.8H\n-    __ mulv(v3, __ T2S, v4, v5);                       \/\/       mul     v3.2S, v4.2S, v5.2S\n-    __ mulv(v7, __ T4S, v8, v9);                       \/\/       mul     v7.4S, v8.4S, v9.4S\n-    __ fabd(v24, __ T2S, v25, v26);                    \/\/       fabd    v24.2S, v25.2S, v26.2S\n-    __ fabd(v0, __ T4S, v1, v2);                       \/\/       fabd    v0.4S, v1.4S, v2.4S\n-    __ fabd(v27, __ T2D, v28, v29);                    \/\/       fabd    v27.2D, v28.2D, v29.2D\n-    __ fmul(v29, __ T2S, v30, v31);                    \/\/       fmul    v29.2S, v30.2S, v31.2S\n-    __ fmul(v5, __ T4S, v6, v7);                       \/\/       fmul    v5.4S, v6.4S, v7.4S\n-    __ fmul(v5, __ T2D, v6, v7);                       \/\/       fmul    v5.2D, v6.2D, v7.2D\n-    __ mlav(v29, __ T4H, v30, v31);                    \/\/       mla     v29.4H, v30.4H, v31.4H\n-    __ mlav(v11, __ T8H, v12, v13);                    \/\/       mla     v11.8H, v12.8H, v13.8H\n-    __ mlav(v25, __ T2S, v26, v27);                    \/\/       mla     v25.2S, v26.2S, v27.2S\n-    __ mlav(v0, __ T4S, v1, v2);                       \/\/       mla     v0.4S, v1.4S, v2.4S\n-    __ fmla(v30, __ T2S, v31, v0);                     \/\/       fmla    v30.2S, v31.2S, v0.2S\n-    __ fmla(v0, __ T4S, v1, v2);                       \/\/       fmla    v0.4S, v1.4S, v2.4S\n-    __ fmla(v17, __ T2D, v18, v19);                    \/\/       fmla    v17.2D, v18.2D, v19.2D\n-    __ mlsv(v28, __ T4H, v29, v30);                    \/\/       mls     v28.4H, v29.4H, v30.4H\n-    __ mlsv(v25, __ T8H, v26, v27);                    \/\/       mls     v25.8H, v26.8H, v27.8H\n-    __ mlsv(v9, __ T2S, v10, v11);                     \/\/       mls     v9.2S, v10.2S, v11.2S\n-    __ mlsv(v25, __ T4S, v26, v27);                    \/\/       mls     v25.4S, v26.4S, v27.4S\n-    __ fmls(v12, __ T2S, v13, v14);                    \/\/       fmls    v12.2S, v13.2S, v14.2S\n-    __ fmls(v15, __ T4S, v16, v17);                    \/\/       fmls    v15.4S, v16.4S, v17.4S\n-    __ fmls(v11, __ T2D, v12, v13);                    \/\/       fmls    v11.2D, v12.2D, v13.2D\n-    __ fdiv(v10, __ T2S, v11, v12);                    \/\/       fdiv    v10.2S, v11.2S, v12.2S\n-    __ fdiv(v17, __ T4S, v18, v19);                    \/\/       fdiv    v17.4S, v18.4S, v19.4S\n-    __ fdiv(v24, __ T2D, v25, v26);                    \/\/       fdiv    v24.2D, v25.2D, v26.2D\n-    __ maxv(v21, __ T8B, v22, v23);                    \/\/       smax    v21.8B, v22.8B, v23.8B\n-    __ maxv(v23, __ T16B, v24, v25);                   \/\/       smax    v23.16B, v24.16B, v25.16B\n-    __ maxv(v0, __ T4H, v1, v2);                       \/\/       smax    v0.4H, v1.4H, v2.4H\n-    __ maxv(v16, __ T8H, v17, v18);                    \/\/       smax    v16.8H, v17.8H, v18.8H\n-    __ maxv(v10, __ T2S, v11, v12);                    \/\/       smax    v10.2S, v11.2S, v12.2S\n-    __ maxv(v6, __ T4S, v7, v8);                       \/\/       smax    v6.4S, v7.4S, v8.4S\n-    __ fmax(v28, __ T2S, v29, v30);                    \/\/       fmax    v28.2S, v29.2S, v30.2S\n-    __ fmax(v6, __ T4S, v7, v8);                       \/\/       fmax    v6.4S, v7.4S, v8.4S\n-    __ fmax(v5, __ T2D, v6, v7);                       \/\/       fmax    v5.2D, v6.2D, v7.2D\n-    __ minv(v5, __ T8B, v6, v7);                       \/\/       smin    v5.8B, v6.8B, v7.8B\n-    __ minv(v20, __ T16B, v21, v22);                   \/\/       smin    v20.16B, v21.16B, v22.16B\n-    __ minv(v17, __ T4H, v18, v19);                    \/\/       smin    v17.4H, v18.4H, v19.4H\n-    __ minv(v15, __ T8H, v16, v17);                    \/\/       smin    v15.8H, v16.8H, v17.8H\n-    __ minv(v17, __ T2S, v18, v19);                    \/\/       smin    v17.2S, v18.2S, v19.2S\n-    __ minv(v29, __ T4S, v30, v31);                    \/\/       smin    v29.4S, v30.4S, v31.4S\n-    __ fmin(v26, __ T2S, v27, v28);                    \/\/       fmin    v26.2S, v27.2S, v28.2S\n-    __ fmin(v28, __ T4S, v29, v30);                    \/\/       fmin    v28.4S, v29.4S, v30.4S\n-    __ fmin(v1, __ T2D, v2, v3);                       \/\/       fmin    v1.2D, v2.2D, v3.2D\n-    __ cmeq(v27, __ T8B, v28, v29);                    \/\/       cmeq    v27.8B, v28.8B, v29.8B\n-    __ cmeq(v0, __ T16B, v1, v2);                      \/\/       cmeq    v0.16B, v1.16B, v2.16B\n-    __ cmeq(v20, __ T4H, v21, v22);                    \/\/       cmeq    v20.4H, v21.4H, v22.4H\n-    __ cmeq(v28, __ T8H, v29, v30);                    \/\/       cmeq    v28.8H, v29.8H, v30.8H\n-    __ cmeq(v15, __ T2S, v16, v17);                    \/\/       cmeq    v15.2S, v16.2S, v17.2S\n-    __ cmeq(v12, __ T4S, v13, v14);                    \/\/       cmeq    v12.4S, v13.4S, v14.4S\n-    __ cmeq(v10, __ T2D, v11, v12);                    \/\/       cmeq    v10.2D, v11.2D, v12.2D\n-    __ fcmeq(v28, __ T2S, v29, v30);                   \/\/       fcmeq   v28.2S, v29.2S, v30.2S\n-    __ fcmeq(v28, __ T4S, v29, v30);                   \/\/       fcmeq   v28.4S, v29.4S, v30.4S\n-    __ fcmeq(v19, __ T2D, v20, v21);                   \/\/       fcmeq   v19.2D, v20.2D, v21.2D\n-    __ cmgt(v22, __ T8B, v23, v24);                    \/\/       cmgt    v22.8B, v23.8B, v24.8B\n-    __ cmgt(v10, __ T16B, v11, v12);                   \/\/       cmgt    v10.16B, v11.16B, v12.16B\n-    __ cmgt(v4, __ T4H, v5, v6);                       \/\/       cmgt    v4.4H, v5.4H, v6.4H\n-    __ cmgt(v30, __ T8H, v31, v0);                     \/\/       cmgt    v30.8H, v31.8H, v0.8H\n-    __ cmgt(v20, __ T2S, v21, v22);                    \/\/       cmgt    v20.2S, v21.2S, v22.2S\n-    __ cmgt(v8, __ T4S, v9, v10);                      \/\/       cmgt    v8.4S, v9.4S, v10.4S\n-    __ cmgt(v30, __ T2D, v31, v0);                     \/\/       cmgt    v30.2D, v31.2D, v0.2D\n-    __ fcmgt(v17, __ T2S, v18, v19);                   \/\/       fcmgt   v17.2S, v18.2S, v19.2S\n-    __ fcmgt(v10, __ T4S, v11, v12);                   \/\/       fcmgt   v10.4S, v11.4S, v12.4S\n-    __ fcmgt(v27, __ T2D, v28, v29);                   \/\/       fcmgt   v27.2D, v28.2D, v29.2D\n-    __ cmge(v2, __ T8B, v3, v4);                       \/\/       cmge    v2.8B, v3.8B, v4.8B\n-    __ cmge(v24, __ T16B, v25, v26);                   \/\/       cmge    v24.16B, v25.16B, v26.16B\n-    __ cmge(v4, __ T4H, v5, v6);                       \/\/       cmge    v4.4H, v5.4H, v6.4H\n-    __ cmge(v3, __ T8H, v4, v5);                       \/\/       cmge    v3.8H, v4.8H, v5.8H\n-    __ cmge(v8, __ T2S, v9, v10);                      \/\/       cmge    v8.2S, v9.2S, v10.2S\n-    __ cmge(v22, __ T4S, v23, v24);                    \/\/       cmge    v22.4S, v23.4S, v24.4S\n-    __ cmge(v17, __ T2D, v18, v19);                    \/\/       cmge    v17.2D, v18.2D, v19.2D\n-    __ fcmge(v13, __ T2S, v14, v15);                   \/\/       fcmge   v13.2S, v14.2S, v15.2S\n-    __ fcmge(v4, __ T4S, v5, v6);                      \/\/       fcmge   v4.4S, v5.4S, v6.4S\n-    __ fcmge(v28, __ T2D, v29, v30);                   \/\/       fcmge   v28.2D, v29.2D, v30.2D\n-\n-\/\/ SpecialCases\n-    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/       ccmn    xzr, xzr, #3, LE\n-    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/       ccmn    wzr, wzr, #5, EQ\n-    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/       ccmp    xzr, 1, #4, NE\n-    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/       ccmp    wzr, 2, #2, GT\n-    __ extr(zr, zr, zr, 0);                            \/\/       extr    xzr, xzr, xzr, 0\n-    __ stlxp(r0, zr, zr, sp);                          \/\/       stlxp   w0, xzr, xzr, [sp]\n-    __ stlxpw(r2, zr, zr, r3);                         \/\/       stlxp   w2, wzr, wzr, [x3]\n-    __ stxp(r4, zr, zr, r5);                           \/\/       stxp    w4, xzr, xzr, [x5]\n-    __ stxpw(r6, zr, zr, sp);                          \/\/       stxp    w6, wzr, wzr, [sp]\n-    __ dup(v0, __ T16B, zr);                           \/\/       dup     v0.16b, wzr\n-    __ mov(v1, __ T1D, 0, zr);                         \/\/       mov     v1.d[0], xzr\n-    __ mov(v1, __ T2S, 1, zr);                         \/\/       mov     v1.s[1], wzr\n-    __ mov(v1, __ T4H, 2, zr);                         \/\/       mov     v1.h[2], wzr\n-    __ mov(v1, __ T8B, 3, zr);                         \/\/       mov     v1.b[3], wzr\n-    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/       ld1     {v31.2d, v0.2d}, [x1], x0\n-    __ sve_cpy(z0, __ S, p0, v1);                      \/\/       mov     z0.s, p0\/m, s1\n-    __ sve_inc(r0, __ S);                              \/\/       incw    x0\n-    __ sve_dec(r1, __ H);                              \/\/       dech    x1\n-    __ sve_lsl(z0, __ B, z1, 7);                       \/\/       lsl     z0.b, z1.b, #7\n-    __ sve_lsl(z21, __ H, z1, 15);                     \/\/       lsl     z21.h, z1.h, #15\n-    __ sve_lsl(z0, __ S, z1, 31);                      \/\/       lsl     z0.s, z1.s, #31\n-    __ sve_lsl(z0, __ D, z1, 63);                      \/\/       lsl     z0.d, z1.d, #63\n-    __ sve_lsr(z0, __ B, z1, 7);                       \/\/       lsr     z0.b, z1.b, #7\n-    __ sve_asr(z0, __ H, z11, 15);                     \/\/       asr     z0.h, z11.h, #15\n-    __ sve_lsr(z30, __ S, z1, 31);                     \/\/       lsr     z30.s, z1.s, #31\n-    __ sve_asr(z0, __ D, z1, 63);                      \/\/       asr     z0.d, z1.d, #63\n-    __ sve_addvl(sp, r0, 31);                          \/\/       addvl   sp, x0, #31\n-    __ sve_addpl(r1, sp, -32);                         \/\/       addpl   x1, sp, -32\n-    __ sve_cntp(r8, __ B, p0, p1);                     \/\/       cntp    x8, p0, p1.b\n-    __ sve_dup(z0, __ B, 127);                         \/\/       dup     z0.b, 127\n-    __ sve_dup(z1, __ H, -128);                        \/\/       dup     z1.h, -128\n-    __ sve_dup(z2, __ S, 32512);                       \/\/       dup     z2.s, 32512\n-    __ sve_dup(z7, __ D, -32768);                      \/\/       dup     z7.d, -32768\n-    __ sve_ld1b(z0, __ B, p0, Address(sp));            \/\/       ld1b    {z0.b}, p0\/z, [sp]\n-    __ sve_ld1h(z10, __ H, p1, Address(sp, -8));       \/\/       ld1h    {z10.h}, p1\/z, [sp, #-8, MUL VL]\n-    __ sve_ld1w(z20, __ S, p2, Address(r0, 7));        \/\/       ld1w    {z20.s}, p2\/z, [x0, #7, MUL VL]\n-    __ sve_ld1b(z30, __ B, p3, Address(sp, r8));       \/\/       ld1b    {z30.b}, p3\/z, [sp, x8]\n-    __ sve_ld1w(z0, __ S, p4, Address(sp, r28));       \/\/       ld1w    {z0.s}, p4\/z, [sp, x28, LSL #2]\n-    __ sve_ld1d(z11, __ D, p5, Address(r0, r1));       \/\/       ld1d    {z11.d}, p5\/z, [x0, x1, LSL #3]\n-    __ sve_st1b(z22, __ B, p6, Address(sp));           \/\/       st1b    {z22.b}, p6, [sp]\n-    __ sve_st1b(z31, __ B, p7, Address(sp, -8));       \/\/       st1b    {z31.b}, p7, [sp, #-8, MUL VL]\n-    __ sve_st1w(z0, __ S, p1, Address(r0, 7));         \/\/       st1w    {z0.s}, p1, [x0, #7, MUL VL]\n-    __ sve_st1b(z0, __ B, p2, Address(sp, r1));        \/\/       st1b    {z0.b}, p2, [sp, x1]\n-    __ sve_st1h(z0, __ H, p3, Address(sp, r8));        \/\/       st1h    {z0.h}, p3, [sp, x8, LSL #1]\n-    __ sve_st1d(z0, __ D, p4, Address(r0, r17));       \/\/       st1d    {z0.d}, p4, [x0, x17, LSL #3]\n-    __ sve_ldr(z0, Address(sp));                       \/\/       ldr     z0, [sp]\n-    __ sve_ldr(z31, Address(sp, -256));                \/\/       ldr     z31, [sp, #-256, MUL VL]\n-    __ sve_str(z8, Address(r8, 255));                  \/\/       str     z8, [x8, #255, MUL VL]\n-\n-\/\/ FloatImmediateOp\n-    __ fmovd(v0, 2.0);                                 \/\/       fmov d0, #2.0\n-    __ fmovd(v0, 2.125);                               \/\/       fmov d0, #2.125\n-    __ fmovd(v0, 4.0);                                 \/\/       fmov d0, #4.0\n-    __ fmovd(v0, 4.25);                                \/\/       fmov d0, #4.25\n-    __ fmovd(v0, 8.0);                                 \/\/       fmov d0, #8.0\n-    __ fmovd(v0, 8.5);                                 \/\/       fmov d0, #8.5\n-    __ fmovd(v0, 16.0);                                \/\/       fmov d0, #16.0\n-    __ fmovd(v0, 17.0);                                \/\/       fmov d0, #17.0\n-    __ fmovd(v0, 0.125);                               \/\/       fmov d0, #0.125\n-    __ fmovd(v0, 0.1328125);                           \/\/       fmov d0, #0.1328125\n-    __ fmovd(v0, 0.25);                                \/\/       fmov d0, #0.25\n-    __ fmovd(v0, 0.265625);                            \/\/       fmov d0, #0.265625\n-    __ fmovd(v0, 0.5);                                 \/\/       fmov d0, #0.5\n-    __ fmovd(v0, 0.53125);                             \/\/       fmov d0, #0.53125\n-    __ fmovd(v0, 1.0);                                 \/\/       fmov d0, #1.0\n-    __ fmovd(v0, 1.0625);                              \/\/       fmov d0, #1.0625\n-    __ fmovd(v0, -2.0);                                \/\/       fmov d0, #-2.0\n-    __ fmovd(v0, -2.125);                              \/\/       fmov d0, #-2.125\n-    __ fmovd(v0, -4.0);                                \/\/       fmov d0, #-4.0\n-    __ fmovd(v0, -4.25);                               \/\/       fmov d0, #-4.25\n-    __ fmovd(v0, -8.0);                                \/\/       fmov d0, #-8.0\n-    __ fmovd(v0, -8.5);                                \/\/       fmov d0, #-8.5\n-    __ fmovd(v0, -16.0);                               \/\/       fmov d0, #-16.0\n-    __ fmovd(v0, -17.0);                               \/\/       fmov d0, #-17.0\n-    __ fmovd(v0, -0.125);                              \/\/       fmov d0, #-0.125\n-    __ fmovd(v0, -0.1328125);                          \/\/       fmov d0, #-0.1328125\n-    __ fmovd(v0, -0.25);                               \/\/       fmov d0, #-0.25\n-    __ fmovd(v0, -0.265625);                           \/\/       fmov d0, #-0.265625\n-    __ fmovd(v0, -0.5);                                \/\/       fmov d0, #-0.5\n-    __ fmovd(v0, -0.53125);                            \/\/       fmov d0, #-0.53125\n-    __ fmovd(v0, -1.0);                                \/\/       fmov d0, #-1.0\n-    __ fmovd(v0, -1.0625);                             \/\/       fmov d0, #-1.0625\n-\n-\/\/ LSEOp\n-    __ swp(Assembler::xword, r24, r21, r26);           \/\/       swp     x24, x21, [x26]\n-    __ ldadd(Assembler::xword, r24, r3, r24);          \/\/       ldadd   x24, x3, [x24]\n-    __ ldbic(Assembler::xword, r26, r23, r15);         \/\/       ldclr   x26, x23, [x15]\n-    __ ldeor(Assembler::xword, r21, r3, r24);          \/\/       ldeor   x21, x3, [x24]\n-    __ ldorr(Assembler::xword, r8, r25, r20);          \/\/       ldset   x8, x25, [x20]\n-    __ ldsmin(Assembler::xword, r16, r17, r2);         \/\/       ldsmin  x16, x17, [x2]\n-    __ ldsmax(Assembler::xword, r1, r0, r24);          \/\/       ldsmax  x1, x0, [x24]\n-    __ ldumin(Assembler::xword, r4, r3, r12);          \/\/       ldumin  x4, x3, [x12]\n-    __ ldumax(Assembler::xword, zr, r28, r10);         \/\/       ldumax  xzr, x28, [x10]\n-\n-\/\/ LSEOp\n-    __ swpa(Assembler::xword, r26, r2, r12);           \/\/       swpa    x26, x2, [x12]\n-    __ ldadda(Assembler::xword, r16, zr, r1);          \/\/       ldadda  x16, xzr, [x1]\n-    __ ldbica(Assembler::xword, r13, r29, r0);         \/\/       ldclra  x13, x29, [x0]\n-    __ ldeora(Assembler::xword, r19, r12, r17);        \/\/       ldeora  x19, x12, [x17]\n-    __ ldorra(Assembler::xword, r22, r13, r28);        \/\/       ldseta  x22, x13, [x28]\n-    __ ldsmina(Assembler::xword, r30, zr, r1);         \/\/       ldsmina x30, xzr, [x1]\n-    __ ldsmaxa(Assembler::xword, r26, r28, r4);        \/\/       ldsmaxa x26, x28, [x4]\n-    __ ldumina(Assembler::xword, r30, r4, r6);         \/\/       ldumina x30, x4, [x6]\n-    __ ldumaxa(Assembler::xword, r30, r26, r15);       \/\/       ldumaxa x30, x26, [x15]\n-\n-\/\/ LSEOp\n-    __ swpal(Assembler::xword, r9, r8, r12);           \/\/       swpal   x9, x8, [x12]\n-    __ ldaddal(Assembler::xword, r0, r20, r1);         \/\/       ldaddal x0, x20, [x1]\n-    __ ldbical(Assembler::xword, r24, r2, r0);         \/\/       ldclral x24, x2, [x0]\n-    __ ldeoral(Assembler::xword, r9, r24, r26);        \/\/       ldeoral x9, x24, [x26]\n-    __ ldorral(Assembler::xword, r16, r30, r3);        \/\/       ldsetal x16, x30, [x3]\n-    __ ldsminal(Assembler::xword, r10, r23, r10);      \/\/       ldsminal        x10, x23, [x10]\n-    __ ldsmaxal(Assembler::xword, r4, r16, r2);        \/\/       ldsmaxal        x4, x16, [x2]\n-    __ lduminal(Assembler::xword, r11, r8, r10);       \/\/       lduminal        x11, x8, [x10]\n-    __ ldumaxal(Assembler::xword, r15, r17, r2);       \/\/       ldumaxal        x15, x17, [x2]\n-\n-\/\/ LSEOp\n-    __ swpl(Assembler::xword, r10, r12, r12);          \/\/       swpl    x10, x12, [x12]\n-    __ ldaddl(Assembler::xword, r15, r13, r2);         \/\/       ldaddl  x15, x13, [x2]\n-    __ ldbicl(Assembler::xword, r7, r20, r26);         \/\/       ldclrl  x7, x20, [x26]\n-    __ ldeorl(Assembler::xword, r16, r4, r2);          \/\/       ldeorl  x16, x4, [x2]\n-    __ ldorrl(Assembler::xword, r4, r12, r15);         \/\/       ldsetl  x4, x12, [x15]\n-    __ ldsminl(Assembler::xword, r21, r16, r15);       \/\/       ldsminl x21, x16, [x15]\n-    __ ldsmaxl(Assembler::xword, r11, r21, r23);       \/\/       ldsmaxl x11, x21, [x23]\n-    __ lduminl(Assembler::xword, r12, r26, r23);       \/\/       lduminl x12, x26, [x23]\n-    __ ldumaxl(Assembler::xword, r28, r14, r11);       \/\/       ldumaxl x28, x14, [x11]\n-\n-\/\/ LSEOp\n-    __ swp(Assembler::word, r24, r1, r12);             \/\/       swp     w24, w1, [x12]\n-    __ ldadd(Assembler::word, zr, r10, r16);           \/\/       ldadd   wzr, w10, [x16]\n-    __ ldbic(Assembler::word, r7, r2, r3);             \/\/       ldclr   w7, w2, [x3]\n-    __ ldeor(Assembler::word, r13, r19, r17);          \/\/       ldeor   w13, w19, [x17]\n-    __ ldorr(Assembler::word, r16, r3, r1);            \/\/       ldset   w16, w3, [x1]\n-    __ ldsmin(Assembler::word, r11, r30, r5);          \/\/       ldsmin  w11, w30, [x5]\n-    __ ldsmax(Assembler::word, r8, r15, r29);          \/\/       ldsmax  w8, w15, [x29]\n-    __ ldumin(Assembler::word, r30, r0, r20);          \/\/       ldumin  w30, w0, [x20]\n-    __ ldumax(Assembler::word, r7, r20, r23);          \/\/       ldumax  w7, w20, [x23]\n-\n-\/\/ LSEOp\n-    __ swpa(Assembler::word, r28, r21, r27);           \/\/       swpa    w28, w21, [x27]\n-    __ ldadda(Assembler::word, r25, r5, r1);           \/\/       ldadda  w25, w5, [x1]\n-    __ ldbica(Assembler::word, r23, r16, sp);          \/\/       ldclra  w23, w16, [sp]\n-    __ ldeora(Assembler::word, r5, r12, r9);           \/\/       ldeora  w5, w12, [x9]\n-    __ ldorra(Assembler::word, r28, r15, r29);         \/\/       ldseta  w28, w15, [x29]\n-    __ ldsmina(Assembler::word, r22, zr, r19);         \/\/       ldsmina w22, wzr, [x19]\n-    __ ldsmaxa(Assembler::word, zr, r5, r14);          \/\/       ldsmaxa wzr, w5, [x14]\n-    __ ldumina(Assembler::word, r16, zr, r15);         \/\/       ldumina w16, wzr, [x15]\n-    __ ldumaxa(Assembler::word, r27, r20, r16);        \/\/       ldumaxa w27, w20, [x16]\n-\n-\/\/ LSEOp\n-    __ swpal(Assembler::word, r12, r11, r9);           \/\/       swpal   w12, w11, [x9]\n-    __ ldaddal(Assembler::word, r6, r30, r17);         \/\/       ldaddal w6, w30, [x17]\n-    __ ldbical(Assembler::word, r27, r28, r30);        \/\/       ldclral w27, w28, [x30]\n-    __ ldeoral(Assembler::word, r7, r10, r20);         \/\/       ldeoral w7, w10, [x20]\n-    __ ldorral(Assembler::word, r10, r4, r24);         \/\/       ldsetal w10, w4, [x24]\n-    __ ldsminal(Assembler::word, r17, r17, r22);       \/\/       ldsminal        w17, w17, [x22]\n-    __ ldsmaxal(Assembler::word, r3, r29, r15);        \/\/       ldsmaxal        w3, w29, [x15]\n-    __ lduminal(Assembler::word, r22, r19, r19);       \/\/       lduminal        w22, w19, [x19]\n-    __ ldumaxal(Assembler::word, r22, r2, r15);        \/\/       ldumaxal        w22, w2, [x15]\n-\n-\/\/ LSEOp\n-    __ swpl(Assembler::word, r6, r12, r16);            \/\/       swpl    w6, w12, [x16]\n-    __ ldaddl(Assembler::word, r11, r13, r23);         \/\/       ldaddl  w11, w13, [x23]\n-    __ ldbicl(Assembler::word, r1, r30, r19);          \/\/       ldclrl  w1, w30, [x19]\n-    __ ldeorl(Assembler::word, r5, r17, r2);           \/\/       ldeorl  w5, w17, [x2]\n-    __ ldorrl(Assembler::word, r16, r22, r13);         \/\/       ldsetl  w16, w22, [x13]\n-    __ ldsminl(Assembler::word, r10, r21, r29);        \/\/       ldsminl w10, w21, [x29]\n-    __ ldsmaxl(Assembler::word, r27, r12, r27);        \/\/       ldsmaxl w27, w12, [x27]\n-    __ lduminl(Assembler::word, r3, r1, sp);           \/\/       lduminl w3, w1, [sp]\n-    __ ldumaxl(Assembler::word, r24, r19, r17);        \/\/       ldumaxl w24, w19, [x17]\n-\n-\/\/ SHA3SIMDOp\n-    __ bcax(v9, __ T16B, v27, v26, v14);               \/\/       bcax            v9.16B, v27.16B, v26.16B, v14.16B\n-    __ eor3(v6, __ T16B, v20, v22, v30);               \/\/       eor3            v6.16B, v20.16B, v22.16B, v30.16B\n-    __ rax1(v24, __ T2D, v2, v30);                     \/\/       rax1            v24.2D, v2.2D, v30.2D\n-    __ xar(v26, __ T2D, v17, v10, 46);                 \/\/       xar             v26.2D, v17.2D, v10.2D, #46\n-\n-\/\/ SHA512SIMDOp\n-    __ sha512h(v17, __ T2D, v2, v17);                  \/\/       sha512h         q17, q2, v17.2D\n-    __ sha512h2(v0, __ T2D, v24, v25);                 \/\/       sha512h2                q0, q24, v25.2D\n-    __ sha512su0(v22, __ T2D, v2);                     \/\/       sha512su0               v22.2D, v2.2D\n-    __ sha512su1(v17, __ T2D, v12, v3);                \/\/       sha512su1               v17.2D, v12.2D, v3.2D\n-\n-\/\/ SVEVectorOp\n-    __ sve_add(z27, __ S, z29, z28);                   \/\/       add     z27.s, z29.s, z28.s\n-    __ sve_sub(z26, __ D, z6, z9);                     \/\/       sub     z26.d, z6.d, z9.d\n-    __ sve_fadd(z17, __ S, z7, z4);                    \/\/       fadd    z17.s, z7.s, z4.s\n-    __ sve_fmul(z15, __ S, z9, z22);                   \/\/       fmul    z15.s, z9.s, z22.s\n-    __ sve_fsub(z2, __ D, z27, z20);                   \/\/       fsub    z2.d, z27.d, z20.d\n-    __ sve_abs(z5, __ S, p6, z0);                      \/\/       abs     z5.s, p6\/m, z0.s\n-    __ sve_add(z14, __ H, p1, z25);                    \/\/       add     z14.h, p1\/m, z14.h, z25.h\n-    __ sve_asr(z27, __ D, p5, z26);                    \/\/       asr     z27.d, p5\/m, z27.d, z26.d\n-    __ sve_cnt(z24, __ B, p5, z0);                     \/\/       cnt     z24.b, p5\/m, z0.b\n-    __ sve_lsl(z6, __ B, p4, z0);                      \/\/       lsl     z6.b, p4\/m, z6.b, z0.b\n-    __ sve_lsr(z15, __ B, p0, z9);                     \/\/       lsr     z15.b, p0\/m, z15.b, z9.b\n-    __ sve_mul(z5, __ B, p2, z27);                     \/\/       mul     z5.b, p2\/m, z5.b, z27.b\n-    __ sve_neg(z20, __ B, p5, z20);                    \/\/       neg     z20.b, p5\/m, z20.b\n-    __ sve_not(z10, __ D, p2, z16);                    \/\/       not     z10.d, p2\/m, z16.d\n-    __ sve_smax(z6, __ H, p4, z2);                     \/\/       smax    z6.h, p4\/m, z6.h, z2.h\n-    __ sve_smin(z29, __ D, p7, z2);                    \/\/       smin    z29.d, p7\/m, z29.d, z2.d\n-    __ sve_sub(z22, __ H, p7, z14);                    \/\/       sub     z22.h, p7\/m, z22.h, z14.h\n-    __ sve_fabs(z27, __ S, p4, z23);                   \/\/       fabs    z27.s, p4\/m, z23.s\n-    __ sve_fadd(z2, __ D, p3, z10);                    \/\/       fadd    z2.d, p3\/m, z2.d, z10.d\n-    __ sve_fdiv(z10, __ S, p6, z22);                   \/\/       fdiv    z10.s, p6\/m, z10.s, z22.s\n-    __ sve_fmax(z3, __ S, p5, z16);                    \/\/       fmax    z3.s, p5\/m, z3.s, z16.s\n-    __ sve_fmin(z1, __ D, p4, z16);                    \/\/       fmin    z1.d, p4\/m, z1.d, z16.d\n-    __ sve_fmul(z12, __ S, p3, z12);                   \/\/       fmul    z12.s, p3\/m, z12.s, z12.s\n-    __ sve_fneg(z16, __ D, p0, z20);                   \/\/       fneg    z16.d, p0\/m, z20.d\n-    __ sve_frintm(z5, __ D, p1, z7);                   \/\/       frintm  z5.d, p1\/m, z7.d\n-    __ sve_frintn(z12, __ D, p7, z16);                 \/\/       frintn  z12.d, p7\/m, z16.d\n-    __ sve_frintp(z6, __ S, p0, z28);                  \/\/       frintp  z6.s, p0\/m, z28.s\n-    __ sve_fsqrt(z4, __ D, p1, z17);                   \/\/       fsqrt   z4.d, p1\/m, z17.d\n-    __ sve_fsub(z13, __ S, p3, z19);                   \/\/       fsub    z13.s, p3\/m, z13.s, z19.s\n-    __ sve_fmla(z24, __ S, p5, z17, z0);               \/\/       fmla    z24.s, p5\/m, z17.s, z0.s\n-    __ sve_fmls(z23, __ S, p1, z19, z30);              \/\/       fmls    z23.s, p1\/m, z19.s, z30.s\n-    __ sve_fnmla(z16, __ S, p1, z0, z7);               \/\/       fnmla   z16.s, p1\/m, z0.s, z7.s\n-    __ sve_fnmls(z17, __ D, p6, z8, z10);              \/\/       fnmls   z17.d, p6\/m, z8.d, z10.d\n-    __ sve_mla(z20, __ B, p5, z27, z2);                \/\/       mla     z20.b, p5\/m, z27.b, z2.b\n-    __ sve_mls(z15, __ B, p4, z20, z7);                \/\/       mls     z15.b, p4\/m, z20.b, z7.b\n-    __ sve_and(z28, z7, z0);                           \/\/       and     z28.d, z7.d, z0.d\n-    __ sve_eor(z16, z19, z22);                         \/\/       eor     z16.d, z19.d, z22.d\n-    __ sve_orr(z15, z9, z22);                          \/\/       orr     z15.d, z9.d, z22.d\n-\n-\/\/ SVEReductionOp\n-    __ sve_andv(v25, __ S, p1, z30);                   \/\/       andv s25, p1, z30.s\n-    __ sve_orv(v13, __ B, p5, z11);                    \/\/       orv b13, p5, z11.b\n-    __ sve_eorv(v13, __ S, p2, z20);                   \/\/       eorv s13, p2, z20.s\n-    __ sve_smaxv(v25, __ B, p3, z4);                   \/\/       smaxv b25, p3, z4.b\n-    __ sve_sminv(v17, __ D, p2, z6);                   \/\/       sminv d17, p2, z6.d\n-    __ sve_fminv(v4, __ D, p7, z16);                   \/\/       fminv d4, p7, z16.d\n-    __ sve_fmaxv(v26, __ S, p2, z14);                  \/\/       fmaxv s26, p2, z14.s\n-    __ sve_fadda(v11, __ S, p7, z3);                   \/\/       fadda s11, p7, s11, z3.s\n-    __ sve_uaddv(v1, __ S, p6, z21);                   \/\/       uaddv d1, p6, z21.s\n-\n-    __ bind(forth);\n-\n-\/*\n-*\/\n-\n-  static const unsigned int insns[] =\n-  {\n-    0x8b0d82fa,     0xcb49970c,     0xab889dfc,     0xeb9ee787,\n-    0x0b9b3ec9,     0x4b9179a3,     0x2b88474e,     0x6b8c56c0,\n-    0x8a1a51e0,     0xaa11f4ba,     0xca0281b8,     0xea918c7c,\n-    0x0a5d4a19,     0x2a4b262d,     0x4a513ca5,     0x6a9b6ae2,\n-    0x8a70b79b,     0xaaba9728,     0xca6dfe3d,     0xea627f1c,\n-    0x0aa70f53,     0x2aaa0f06,     0x4a6176a4,     0x6a604eb0,\n-    0x1105ed91,     0x3100583e,     0x5101f8bd,     0x710f0306,\n-    0x9101a1a0,     0xb10a5cc8,     0xd10810aa,     0xf10fd061,\n-    0x120cb166,     0x321764bc,     0x52174681,     0x720c0227,\n-    0x9241018e,     0xb25a2969,     0xd278b411,     0xf26aad01,\n-    0x14000000,     0x17ffffd7,     0x140002d0,     0x94000000,\n-    0x97ffffd4,     0x940002cd,     0x3400000a,     0x34fffa2a,\n-    0x3400594a,     0x35000008,     0x35fff9c8,     0x350058e8,\n-    0xb400000b,     0xb4fff96b,     0xb400588b,     0xb500001d,\n-    0xb5fff91d,     0xb500583d,     0x10000013,     0x10fff8b3,\n-    0x100057d3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305756,     0x3758000c,     0x375ff7cc,     0x375856ec,\n-    0x128313a0,     0x528a32c7,     0x7289173b,     0x92ab3acc,\n-    0xd2a0bf94,     0xf2c285e8,     0x9358722f,     0x330e652f,\n-    0x53067f3b,     0x93577c53,     0xb34a1aac,     0xd35a4016,\n-    0x13946c63,     0x93c3dbc8,     0x54000000,     0x54fff5a0,\n-    0x540054c0,     0x54000001,     0x54fff541,     0x54005461,\n-    0x54000002,     0x54fff4e2,     0x54005402,     0x54000002,\n-    0x54fff482,     0x540053a2,     0x54000003,     0x54fff423,\n-    0x54005343,     0x54000003,     0x54fff3c3,     0x540052e3,\n-    0x54000004,     0x54fff364,     0x54005284,     0x54000005,\n-    0x54fff305,     0x54005225,     0x54000006,     0x54fff2a6,\n-    0x540051c6,     0x54000007,     0x54fff247,     0x54005167,\n-    0x54000008,     0x54fff1e8,     0x54005108,     0x54000009,\n-    0x54fff189,     0x540050a9,     0x5400000a,     0x54fff12a,\n-    0x5400504a,     0x5400000b,     0x54fff0cb,     0x54004feb,\n-    0x5400000c,     0x54fff06c,     0x54004f8c,     0x5400000d,\n-    0x54fff00d,     0x54004f2d,     0x5400000e,     0x54ffefae,\n-    0x54004ece,     0x5400000f,     0x54ffef4f,     0x54004e6f,\n-    0xd40658e1,     0xd4014d22,     0xd4046543,     0xd4273f60,\n-    0xd44cad80,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,\n-    0xd5033fdf,     0xd5033e9f,     0xd50332bf,     0xd61f0200,\n-    0xd63f0280,     0xc80a7d1b,     0xc800fea1,     0xc85f7fb1,\n-    0xc85fff9d,     0xc89ffee1,     0xc8dffe95,     0x88167e7b,\n-    0x880bfcd0,     0x885f7c11,     0x885ffd44,     0x889ffed8,\n-    0x88dffe6a,     0x48017fc5,     0x4808fe2c,     0x485f7dc9,\n-    0x485ffc27,     0x489ffe05,     0x48dffd82,     0x080a7c6c,\n-    0x081cff4e,     0x085f7d5e,     0x085ffeae,     0x089ffd2d,\n-    0x08dfff76,     0xc87f4d7c,     0xc87fcc5e,     0xc8220417,\n-    0xc82cb5f0,     0x887f55b1,     0x887ff90b,     0x88382c2d,\n-    0x883aedb5,     0xf819928b,     0xb803e21c,     0x381f713b,\n-    0x781ce322,     0xf850f044,     0xb85e129e,     0x385e92f1,\n-    0x785ff35d,     0x39801921,     0x7881318b,     0x78dce02b,\n-    0xb8829313,     0xfc45f318,     0xbc5d50af,     0xfc001375,\n-    0xbc1951b7,     0xf8008c0a,     0xb801dc03,     0x38009dca,\n-    0x781fdf3d,     0xf8570e0c,     0xb85faecc,     0x385f6d6d,\n-    0x785ebea0,     0x38804cd7,     0x789cbce3,     0x78df9c9c,\n-    0xb89eed18,     0xfc40cd6e,     0xbc5bdd93,     0xfc103c14,\n-    0xbc040c08,     0xf81a2783,     0xb81ca4eb,     0x381e855b,\n-    0x7801b4e6,     0xf853654d,     0xb85d74af,     0x384095a2,\n-    0x785ec5bc,     0x389e15a9,     0x789dc703,     0x78c06474,\n-    0xb89ff667,     0xfc57e51e,     0xbc4155f9,     0xfc05a6ee,\n-    0xbc1df408,     0xf835da2a,     0xb836d9a4,     0x3833580d,\n-    0x7826cb6c,     0xf8706900,     0xb87ae880,     0x3865db2e,\n-    0x78714889,     0x38a7789b,     0x78beca2f,     0x78f6c810,\n-    0xb8bef956,     0xfc6afabd,     0xbc734963,     0xfc3d5b8d,\n-    0xbc25fbb7,     0xf9189d05,     0xb91ecb1d,     0x39187a33,\n-    0x791f226d,     0xf95aa2f3,     0xb9587bb7,     0x395f7176,\n-    0x795d9143,     0x399e7e08,     0x799a2697,     0x79df3422,\n-    0xb99c2624,     0xfd5c2374,     0xbd5fa1d9,     0xfd1d595a,\n-    0xbd1b1869,     0x58003ebb,     0x1800000b,     0xf8945060,\n-    0xd8000000,     0xf8ae6ba0,     0xf99a0080,     0x1a070035,\n-    0x3a0700a8,     0x5a0e0367,     0x7a11009b,     0x9a000380,\n-    0xba1e030c,     0xda0f0320,     0xfa030301,     0x0b340b11,\n-    0x2b2a278d,     0xcb22aa0f,     0x6b2d29bd,     0x8b2cce8c,\n-    0xab2b877e,     0xcb21c8ee,     0xeb3ba47d,     0x3a4d400e,\n-    0x7a5132c6,     0xba5e622e,     0xfa53814c,     0x3a52d8c2,\n-    0x7a4d8924,     0xba4b3aab,     0xfa4d7882,     0x1a96804c,\n-    0x1a912618,     0x5a90b0e6,     0x5a96976b,     0x9a9db06a,\n-    0x9a9b374c,     0xda95c14f,     0xda89c6fe,     0x5ac0015e,\n-    0x5ac005fd,     0x5ac00bdd,     0x5ac012b9,     0x5ac01404,\n-    0xdac002b1,     0xdac0061d,     0xdac00a95,     0xdac00e66,\n-    0xdac0107e,     0xdac01675,     0x1ac00b0b,     0x1ace0f3b,\n-    0x1ad121c3,     0x1ad825e7,     0x1ad92a3c,     0x1adc2f42,\n-    0x9ada0b25,     0x9ad10e1b,     0x9acc22a6,     0x9acc2480,\n-    0x9adc2a3b,     0x9ad12c5c,     0x9bce7dea,     0x9b597c6e,\n-    0x1b0e166f,     0x1b1ae490,     0x9b023044,     0x9b089e3d,\n-    0x9b391083,     0x9b24c73a,     0x9bb15f40,     0x9bbcc6af,\n-    0x7ea3d55b,     0x1e3908e0,     0x1e2f18c9,     0x1e2a29fd,\n-    0x1e273a22,     0x7ef7d56b,     0x1e770ba7,     0x1e6b1b6e,\n-    0x1e78288b,     0x1e6e39ec,     0x1f1c3574,     0x1f17f98b,\n-    0x1f2935da,     0x1f2574ea,     0x1f4b306f,     0x1f5ec7cf,\n-    0x1f6f3e93,     0x1f6226a9,     0x1e2040fb,     0x1e20c3dd,\n-    0x1e214031,     0x1e21c0c2,     0x1e22c06a,     0x1e604178,\n-    0x1e60c027,     0x1e61400b,     0x1e61c223,     0x1e6240dc,\n-    0x1e3800d6,     0x9e380360,     0x1e78005a,     0x9e7800e5,\n-    0x1e22017c,     0x9e2201b9,     0x1e6202eb,     0x9e620113,\n-    0x1e2602b1,     0x9e660299,     0x1e270233,     0x9e6703a2,\n-    0x1e2822c0,     0x1e7322a0,     0x1e202288,     0x1e602168,\n-    0x293c19f4,     0x2966387b,     0x69762970,     0xa9041dc7,\n-    0xa9475c0c,     0x29b61ccd,     0x29ee3c5e,     0x69ee0764,\n-    0xa9843977,     0xa9f46ebd,     0x28ba16b6,     0x28fc44db,\n-    0x68f61430,     0xa8b352cd,     0xa8c56d5e,     0x28024565,\n-    0x2874134e,     0xa8027597,     0xa87b1aa0,     0x0c40734f,\n-    0x4cdfa177,     0x0cc76ee8,     0x4cdf2733,     0x0d40c23d,\n-    0x4ddfcaf8,     0x0dd9ccaa,     0x4c408d51,     0x0cdf85ec,\n-    0x4d60c239,     0x0dffcbc1,     0x4de9ce30,     0x4cc24999,\n-    0x0c404a7a,     0x4d40e6af,     0x4ddfe9b9,     0x0dddef8e,\n-    0x4cdf07b1,     0x0cc000fb,     0x0d60e238,     0x0dffe740,\n-    0x0de2eb2c,     0x0e31baf6,     0x4e31bb9b,     0x0e71b8a4,\n-    0x4e71b907,     0x4eb1b8e6,     0x0e30a841,     0x4e30ab7a,\n-    0x0e70aa0f,     0x4e70a862,     0x4eb0a9cd,     0x6e30f9cd,\n-    0x0e31ab38,     0x4e31ab17,     0x0e71a8a4,     0x4e71aa93,\n-    0x4eb1aa0f,     0x6eb0f820,     0x0e20b8a4,     0x4e20bab4,\n-    0x0e60b98b,     0x4e60bbdd,     0x0ea0ba0f,     0x4ea0bad5,\n-    0x4ee0b8a4,     0x0ea0f9ee,     0x4ea0faf6,     0x4ee0fb59,\n-    0x2ea0f8e6,     0x6ea0f9ac,     0x6ee0f9ee,     0x2ea1f9cd,\n-    0x6ea1f9ee,     0x6ee1f949,     0x2e205b59,     0x6e205bbc,\n-    0x0e2c1d6a,     0x4e351e93,     0x0ead1d8b,     0x4eb31e51,\n-    0x2e371ed5,     0x6e311e0f,     0x0e3686b4,     0x4e398717,\n-    0x0e7c877a,     0x4e6784c5,     0x0ea884e6,     0x4eb1860f,\n-    0x4ef1860f,     0x0e3bd759,     0x4e32d630,     0x4e7dd79b,\n-    0x2e3a8738,     0x6e31860f,     0x2e7b8759,     0x6e7085ee,\n-    0x2eac856a,     0x6eaf85cd,     0x6ef085ee,     0x0eb6d6b4,\n-    0x4ea3d441,     0x4ef8d6f6,     0x0e209ffe,     0x4e309dee,\n-    0x0e649c62,     0x4e689ce6,     0x0ea59c83,     0x4ea99d07,\n-    0x2ebad738,     0x6ea2d420,     0x6efdd79b,     0x2e3fdfdd,\n-    0x6e27dcc5,     0x6e67dcc5,     0x0e7f97dd,     0x4e6d958b,\n-    0x0ebb9759,     0x4ea29420,     0x0e20cffe,     0x4e22cc20,\n-    0x4e73ce51,     0x2e7e97bc,     0x6e7b9759,     0x2eab9549,\n-    0x6ebb9759,     0x0eaecdac,     0x4eb1ce0f,     0x4eedcd8b,\n-    0x2e2cfd6a,     0x6e33fe51,     0x6e7aff38,     0x0e3766d5,\n-    0x4e396717,     0x0e626420,     0x4e726630,     0x0eac656a,\n-    0x4ea864e6,     0x0e3ef7bc,     0x4e28f4e6,     0x4e67f4c5,\n-    0x0e276cc5,     0x4e366eb4,     0x0e736e51,     0x4e716e0f,\n-    0x0eb36e51,     0x4ebf6fdd,     0x0ebcf77a,     0x4ebef7bc,\n-    0x4ee3f441,     0x2e3d8f9b,     0x6e228c20,     0x2e768eb4,\n-    0x6e7e8fbc,     0x2eb18e0f,     0x6eae8dac,     0x6eec8d6a,\n-    0x0e3ee7bc,     0x4e3ee7bc,     0x4e75e693,     0x0e3836f6,\n-    0x4e2c356a,     0x0e6634a4,     0x4e6037fe,     0x0eb636b4,\n-    0x4eaa3528,     0x4ee037fe,     0x2eb3e651,     0x6eace56a,\n-    0x6efde79b,     0x0e243c62,     0x4e3a3f38,     0x0e663ca4,\n-    0x4e653c83,     0x0eaa3d28,     0x4eb83ef6,     0x4ef33e51,\n-    0x2e2fe5cd,     0x6e26e4a4,     0x6e7ee7bc,     0xba5fd3e3,\n-    0x3a5f03e5,     0xfa411be4,     0x7a42cbe2,     0x93df03ff,\n-    0xc820ffff,     0x8822fc7f,     0xc8247cbf,     0x88267fff,\n-    0x4e010fe0,     0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,\n-    0x4e071fe1,     0x4cc0ac3f,     0x05a08020,     0x04b0e3e0,\n-    0x0470e7e1,     0x042f9c20,     0x043f9c35,     0x047f9c20,\n-    0x04ff9c20,     0x04299420,     0x04319160,     0x0461943e,\n-    0x04a19020,     0x042053ff,     0x047f5401,     0x25208028,\n-    0x2538cfe0,     0x2578d001,     0x25b8efe2,     0x25f8f007,\n-    0xa400a3e0,     0xa4a8a7ea,     0xa547a814,     0xa4084ffe,\n-    0xa55c53e0,     0xa5e1540b,     0xe400fbf6,     0xe408ffff,\n-    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n-    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8388355,\n-    0xf8380303,     0xf83a11f7,     0xf8352303,     0xf8283299,\n-    0xf8305051,     0xf8214300,     0xf8247183,     0xf83f615c,\n-    0xf8ba8182,     0xf8b0003f,     0xf8ad101d,     0xf8b3222c,\n-    0xf8b6338d,     0xf8be503f,     0xf8ba409c,     0xf8be70c4,\n-    0xf8be61fa,     0xf8e98188,     0xf8e00034,     0xf8f81002,\n-    0xf8e92358,     0xf8f0307e,     0xf8ea5157,     0xf8e44050,\n-    0xf8eb7148,     0xf8ef6051,     0xf86a818c,     0xf86f004d,\n-    0xf8671354,     0xf8702044,     0xf86431ec,     0xf87551f0,\n-    0xf86b42f5,     0xf86c72fa,     0xf87c616e,     0xb8388181,\n-    0xb83f020a,     0xb8271062,     0xb82d2233,     0xb8303023,\n-    0xb82b50be,     0xb82843af,     0xb83e7280,     0xb82762f4,\n-    0xb8bc8375,     0xb8b90025,     0xb8b713f0,     0xb8a5212c,\n-    0xb8bc33af,     0xb8b6527f,     0xb8bf41c5,     0xb8b071ff,\n-    0xb8bb6214,     0xb8ec812b,     0xb8e6023e,     0xb8fb13dc,\n-    0xb8e7228a,     0xb8ea3304,     0xb8f152d1,     0xb8e341fd,\n-    0xb8f67273,     0xb8f661e2,     0xb866820c,     0xb86b02ed,\n-    0xb861127e,     0xb8652051,     0xb87031b6,     0xb86a53b5,\n-    0xb87b436c,     0xb86373e1,     0xb8786233,     0xce3a3b69,\n-    0xce167a86,     0xce7e8c58,     0xce8aba3a,     0xce718051,\n-    0xce798700,     0xcec08056,     0xce638991,     0x04bc03bb,\n-    0x04e904da,     0x658400f1,     0x6596092f,     0x65d40762,\n-    0x0496b805,     0x0440072e,     0x04d0975b,     0x041ab418,\n-    0x04139006,     0x0411812f,     0x04100b65,     0x0417b694,\n-    0x04deaa0a,     0x04481046,     0x04ca1c5d,     0x04411dd6,\n-    0x049cb2fb,     0x65c08d42,     0x658d9aca,     0x65869603,\n-    0x65c79201,     0x65828d8c,     0x04dda290,     0x65c2a4e5,\n-    0x65c0be0c,     0x6581a386,     0x65cda624,     0x65818e6d,\n-    0x65a01638,     0x65be2677,     0x65a74410,     0x65ea7911,\n-    0x04025774,     0x0407728f,     0x042030fc,     0x04b63270,\n-    0x0476312f,     0x049a27d9,     0x0418356d,     0x04992a8d,\n-    0x04082c99,     0x04ca28d1,     0x65c73e04,     0x658629da,\n-    0x65983c6b,     0x04813aa1,\n-  };\n-\/\/ END  Generated code -- do not edit\n-\n-  asm_check((unsigned int *)entry, insns, sizeof insns \/ sizeof insns[0]);\n-\n-  {\n-    address PC = __ pc();\n-    __ ld1(v0, __ T16B, Address(r16));      \/\/ No offset\n-    __ ld1(v0, __ T8H, __ post(r16, 16));   \/\/ Post-index\n-    __ ld2(v0, v1, __ T8H, __ post(r24, 16 * 2));   \/\/ Post-index\n-    __ ld1(v0, __ T16B, __ post(r16, r17)); \/\/ Register post-index\n-    static const unsigned int vector_insns[] = {\n-       0x4c407200, \/\/ ld1   {v0.16b}, [x16]\n-       0x4cdf7600, \/\/ ld1   {v0.8h}, [x16], #16\n-       0x4cdf8700, \/\/ ld2   {v0.8h, v1.8h}, [x24], #32\n-       0x4cd17200, \/\/ ld1   {v0.16b}, [x16], x17\n-      };\n-    asm_check((unsigned int *)PC, vector_insns,\n-              sizeof vector_insns \/ sizeof vector_insns[0]);\n-  }\n-}\n-#endif \/\/ ASSERT\n-\n-#undef __\n-\n@@ -1255,2 +80,0 @@\n-#define gas_assert(ARG1) assert(ARG1, #ARG1)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":4,"deletions":1181,"binary":false,"changes":1185,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-extern void aarch64TestHook();\n-\n@@ -37,5 +35,1 @@\n-void ICache::initialize() {\n-#ifdef ASSERT\n-  aarch64TestHook();\n-#endif\n-}\n+void ICache::initialize() {}\n","filename":"src\/hotspot\/cpu\/aarch64\/icache_aarch64.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","status":"renamed"},{"patch":"@@ -0,0 +1,1195 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef AARCH64\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"compiler\/disassembler.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"unittest.hpp\"\n+\n+#define __ _masm.\n+\n+static void asm_check(const unsigned int *insns, const unsigned int *insns1, size_t len) {\n+  bool ok = true;\n+  for (unsigned int i = 0; i < len; i++) {\n+    if (insns[i] != insns1[i]) {\n+      ResourceMark rm;\n+      stringStream ss;\n+      ss.print_cr(\"Ours:\");\n+      Disassembler::decode((address)&insns1[i], (address)&insns1[i+1], &ss);\n+      ss.print_cr(\"Theirs:\");\n+      Disassembler::decode((address)&insns[i], (address)&insns[i+1], &ss);\n+\n+      EXPECT_EQ(insns[i], insns1[i]) << ss.as_string();\n+    }\n+  }\n+}\n+\n+TEST_VM(AssemblerAArch64, validate) {\n+  BufferBlob* b = BufferBlob::create(\"aarch64Test\", 500000);\n+  CodeBuffer code(b);\n+\n+  \/\/ {\n+  \/\/   for (int i = 0; i < 256; i+=16)\n+  \/\/     {\n+  \/\/    printf(\"\\\"%20.20g\\\", \", unpack(i));\n+  \/\/    printf(\"\\\"%20.20g\\\", \", unpack(i+1));\n+  \/\/     }\n+  \/\/   printf(\"\\n\");\n+  \/\/ }\n+\n+  Assembler _masm(&code);\n+  address entry = __ pc();\n+\n+  \/\/ Smoke test for assembler\n+\n+\/\/ BEGIN  Generated code -- do not edit\n+\/\/ Generated by aarch64-asmtest.py\n+    Label back, forth;\n+    __ bind(back);\n+\n+\/\/ ArithOp\n+    __ add(r26, r23, r13, Assembler::LSL, 32);         \/\/       add     x26, x23, x13, LSL #32\n+    __ sub(r12, r24, r9, Assembler::LSR, 37);          \/\/       sub     x12, x24, x9, LSR #37\n+    __ adds(r28, r15, r8, Assembler::ASR, 39);         \/\/       adds    x28, x15, x8, ASR #39\n+    __ subs(r7, r28, r30, Assembler::ASR, 57);         \/\/       subs    x7, x28, x30, ASR #57\n+    __ addw(r9, r22, r27, Assembler::ASR, 15);         \/\/       add     w9, w22, w27, ASR #15\n+    __ subw(r3, r13, r17, Assembler::ASR, 30);         \/\/       sub     w3, w13, w17, ASR #30\n+    __ addsw(r14, r26, r8, Assembler::ASR, 17);        \/\/       adds    w14, w26, w8, ASR #17\n+    __ subsw(r0, r22, r12, Assembler::ASR, 21);        \/\/       subs    w0, w22, w12, ASR #21\n+    __ andr(r0, r15, r26, Assembler::LSL, 20);         \/\/       and     x0, x15, x26, LSL #20\n+    __ orr(r26, r5, r17, Assembler::LSL, 61);          \/\/       orr     x26, x5, x17, LSL #61\n+    __ eor(r24, r13, r2, Assembler::LSL, 32);          \/\/       eor     x24, x13, x2, LSL #32\n+    __ ands(r28, r3, r17, Assembler::ASR, 35);         \/\/       ands    x28, x3, x17, ASR #35\n+    __ andw(r25, r16, r29, Assembler::LSR, 18);        \/\/       and     w25, w16, w29, LSR #18\n+    __ orrw(r13, r17, r11, Assembler::LSR, 9);         \/\/       orr     w13, w17, w11, LSR #9\n+    __ eorw(r5, r5, r17, Assembler::LSR, 15);          \/\/       eor     w5, w5, w17, LSR #15\n+    __ andsw(r2, r23, r27, Assembler::ASR, 26);        \/\/       ands    w2, w23, w27, ASR #26\n+    __ bic(r27, r28, r16, Assembler::LSR, 45);         \/\/       bic     x27, x28, x16, LSR #45\n+    __ orn(r8, r25, r26, Assembler::ASR, 37);          \/\/       orn     x8, x25, x26, ASR #37\n+    __ eon(r29, r17, r13, Assembler::LSR, 63);         \/\/       eon     x29, x17, x13, LSR #63\n+    __ bics(r28, r24, r2, Assembler::LSR, 31);         \/\/       bics    x28, x24, x2, LSR #31\n+    __ bicw(r19, r26, r7, Assembler::ASR, 3);          \/\/       bic     w19, w26, w7, ASR #3\n+    __ ornw(r6, r24, r10, Assembler::ASR, 3);          \/\/       orn     w6, w24, w10, ASR #3\n+    __ eonw(r4, r21, r1, Assembler::LSR, 29);          \/\/       eon     w4, w21, w1, LSR #29\n+    __ bicsw(r16, r21, r0, Assembler::LSR, 19);        \/\/       bics    w16, w21, w0, LSR #19\n+\n+\/\/ AddSubImmOp\n+    __ addw(r17, r12, 379u);                           \/\/       add     w17, w12, #379\n+    __ addsw(r30, r1, 22u);                            \/\/       adds    w30, w1, #22\n+    __ subw(r29, r5, 126u);                            \/\/       sub     w29, w5, #126\n+    __ subsw(r6, r24, 960u);                           \/\/       subs    w6, w24, #960\n+    __ add(r0, r13, 104u);                             \/\/       add     x0, x13, #104\n+    __ adds(r8, r6, 663u);                             \/\/       adds    x8, x6, #663\n+    __ sub(r10, r5, 516u);                             \/\/       sub     x10, x5, #516\n+    __ subs(r1, r3, 1012u);                            \/\/       subs    x1, x3, #1012\n+\n+\/\/ LogicalImmOp\n+    __ andw(r6, r11, 4294049777ull);                   \/\/       and     w6, w11, #0xfff1fff1\n+    __ orrw(r28, r5, 4294966791ull);                   \/\/       orr     w28, w5, #0xfffffe07\n+    __ eorw(r1, r20, 134217216ull);                    \/\/       eor     w1, w20, #0x7fffe00\n+    __ andsw(r7, r17, 1048576ull);                     \/\/       ands    w7, w17, #0x100000\n+    __ andr(r14, r12, 9223372036854775808ull);         \/\/       and     x14, x12, #0x8000000000000000\n+    __ orr(r9, r11, 562675075514368ull);               \/\/       orr     x9, x11, #0x1ffc000000000\n+    __ eor(r17, r0, 18014398509481728ull);             \/\/       eor     x17, x0, #0x3fffffffffff00\n+    __ ands(r1, r8, 18446744073705357315ull);          \/\/       ands    x1, x8, #0xffffffffffc00003\n+\n+\/\/ AbsOp\n+    __ b(__ pc());                                     \/\/       b       .\n+    __ b(back);                                        \/\/       b       back\n+    __ b(forth);                                       \/\/       b       forth\n+    __ bl(__ pc());                                    \/\/       bl      .\n+    __ bl(back);                                       \/\/       bl      back\n+    __ bl(forth);                                      \/\/       bl      forth\n+\n+\/\/ RegAndAbsOp\n+    __ cbzw(r10, __ pc());                             \/\/       cbz     w10, .\n+    __ cbzw(r10, back);                                \/\/       cbz     w10, back\n+    __ cbzw(r10, forth);                               \/\/       cbz     w10, forth\n+    __ cbnzw(r8, __ pc());                             \/\/       cbnz    w8, .\n+    __ cbnzw(r8, back);                                \/\/       cbnz    w8, back\n+    __ cbnzw(r8, forth);                               \/\/       cbnz    w8, forth\n+    __ cbz(r11, __ pc());                              \/\/       cbz     x11, .\n+    __ cbz(r11, back);                                 \/\/       cbz     x11, back\n+    __ cbz(r11, forth);                                \/\/       cbz     x11, forth\n+    __ cbnz(r29, __ pc());                             \/\/       cbnz    x29, .\n+    __ cbnz(r29, back);                                \/\/       cbnz    x29, back\n+    __ cbnz(r29, forth);                               \/\/       cbnz    x29, forth\n+    __ adr(r19, __ pc());                              \/\/       adr     x19, .\n+    __ adr(r19, back);                                 \/\/       adr     x19, back\n+    __ adr(r19, forth);                                \/\/       adr     x19, forth\n+    __ _adrp(r19, __ pc());                            \/\/       adrp    x19, .\n+\n+\/\/ RegImmAbsOp\n+    __ tbz(r22, 6, __ pc());                           \/\/       tbz     x22, #6, .\n+    __ tbz(r22, 6, back);                              \/\/       tbz     x22, #6, back\n+    __ tbz(r22, 6, forth);                             \/\/       tbz     x22, #6, forth\n+    __ tbnz(r12, 11, __ pc());                         \/\/       tbnz    x12, #11, .\n+    __ tbnz(r12, 11, back);                            \/\/       tbnz    x12, #11, back\n+    __ tbnz(r12, 11, forth);                           \/\/       tbnz    x12, #11, forth\n+\n+\/\/ MoveWideImmOp\n+    __ movnw(r0, 6301, 0);                             \/\/       movn    w0, #6301, lsl 0\n+    __ movzw(r7, 20886, 0);                            \/\/       movz    w7, #20886, lsl 0\n+    __ movkw(r27, 18617, 0);                           \/\/       movk    w27, #18617, lsl 0\n+    __ movn(r12, 22998, 16);                           \/\/       movn    x12, #22998, lsl 16\n+    __ movz(r20, 1532, 16);                            \/\/       movz    x20, #1532, lsl 16\n+    __ movk(r8, 5167, 32);                             \/\/       movk    x8, #5167, lsl 32\n+\n+\/\/ BitfieldOp\n+    __ sbfm(r15, r17, 24, 28);                         \/\/       sbfm    x15, x17, #24, #28\n+    __ bfmw(r15, r9, 14, 25);                          \/\/       bfm     w15, w9, #14, #25\n+    __ ubfmw(r27, r25, 6, 31);                         \/\/       ubfm    w27, w25, #6, #31\n+    __ sbfm(r19, r2, 23, 31);                          \/\/       sbfm    x19, x2, #23, #31\n+    __ bfm(r12, r21, 10, 6);                           \/\/       bfm     x12, x21, #10, #6\n+    __ ubfm(r22, r0, 26, 16);                          \/\/       ubfm    x22, x0, #26, #16\n+\n+\/\/ ExtractOp\n+    __ extrw(r3, r3, r20, 27);                         \/\/       extr    w3, w3, w20, #27\n+    __ extr(r8, r30, r3, 54);                          \/\/       extr    x8, x30, x3, #54\n+\n+\/\/ CondBranchOp\n+    __ br(Assembler::EQ, __ pc());                     \/\/       b.EQ    .\n+    __ br(Assembler::EQ, back);                        \/\/       b.EQ    back\n+    __ br(Assembler::EQ, forth);                       \/\/       b.EQ    forth\n+    __ br(Assembler::NE, __ pc());                     \/\/       b.NE    .\n+    __ br(Assembler::NE, back);                        \/\/       b.NE    back\n+    __ br(Assembler::NE, forth);                       \/\/       b.NE    forth\n+    __ br(Assembler::HS, __ pc());                     \/\/       b.HS    .\n+    __ br(Assembler::HS, back);                        \/\/       b.HS    back\n+    __ br(Assembler::HS, forth);                       \/\/       b.HS    forth\n+    __ br(Assembler::CS, __ pc());                     \/\/       b.CS    .\n+    __ br(Assembler::CS, back);                        \/\/       b.CS    back\n+    __ br(Assembler::CS, forth);                       \/\/       b.CS    forth\n+    __ br(Assembler::LO, __ pc());                     \/\/       b.LO    .\n+    __ br(Assembler::LO, back);                        \/\/       b.LO    back\n+    __ br(Assembler::LO, forth);                       \/\/       b.LO    forth\n+    __ br(Assembler::CC, __ pc());                     \/\/       b.CC    .\n+    __ br(Assembler::CC, back);                        \/\/       b.CC    back\n+    __ br(Assembler::CC, forth);                       \/\/       b.CC    forth\n+    __ br(Assembler::MI, __ pc());                     \/\/       b.MI    .\n+    __ br(Assembler::MI, back);                        \/\/       b.MI    back\n+    __ br(Assembler::MI, forth);                       \/\/       b.MI    forth\n+    __ br(Assembler::PL, __ pc());                     \/\/       b.PL    .\n+    __ br(Assembler::PL, back);                        \/\/       b.PL    back\n+    __ br(Assembler::PL, forth);                       \/\/       b.PL    forth\n+    __ br(Assembler::VS, __ pc());                     \/\/       b.VS    .\n+    __ br(Assembler::VS, back);                        \/\/       b.VS    back\n+    __ br(Assembler::VS, forth);                       \/\/       b.VS    forth\n+    __ br(Assembler::VC, __ pc());                     \/\/       b.VC    .\n+    __ br(Assembler::VC, back);                        \/\/       b.VC    back\n+    __ br(Assembler::VC, forth);                       \/\/       b.VC    forth\n+    __ br(Assembler::HI, __ pc());                     \/\/       b.HI    .\n+    __ br(Assembler::HI, back);                        \/\/       b.HI    back\n+    __ br(Assembler::HI, forth);                       \/\/       b.HI    forth\n+    __ br(Assembler::LS, __ pc());                     \/\/       b.LS    .\n+    __ br(Assembler::LS, back);                        \/\/       b.LS    back\n+    __ br(Assembler::LS, forth);                       \/\/       b.LS    forth\n+    __ br(Assembler::GE, __ pc());                     \/\/       b.GE    .\n+    __ br(Assembler::GE, back);                        \/\/       b.GE    back\n+    __ br(Assembler::GE, forth);                       \/\/       b.GE    forth\n+    __ br(Assembler::LT, __ pc());                     \/\/       b.LT    .\n+    __ br(Assembler::LT, back);                        \/\/       b.LT    back\n+    __ br(Assembler::LT, forth);                       \/\/       b.LT    forth\n+    __ br(Assembler::GT, __ pc());                     \/\/       b.GT    .\n+    __ br(Assembler::GT, back);                        \/\/       b.GT    back\n+    __ br(Assembler::GT, forth);                       \/\/       b.GT    forth\n+    __ br(Assembler::LE, __ pc());                     \/\/       b.LE    .\n+    __ br(Assembler::LE, back);                        \/\/       b.LE    back\n+    __ br(Assembler::LE, forth);                       \/\/       b.LE    forth\n+    __ br(Assembler::AL, __ pc());                     \/\/       b.AL    .\n+    __ br(Assembler::AL, back);                        \/\/       b.AL    back\n+    __ br(Assembler::AL, forth);                       \/\/       b.AL    forth\n+    __ br(Assembler::NV, __ pc());                     \/\/       b.NV    .\n+    __ br(Assembler::NV, back);                        \/\/       b.NV    back\n+    __ br(Assembler::NV, forth);                       \/\/       b.NV    forth\n+\n+\/\/ ImmOp\n+    __ svc(12999);                                     \/\/       svc     #12999\n+    __ hvc(2665);                                      \/\/       hvc     #2665\n+    __ smc(9002);                                      \/\/       smc     #9002\n+    __ brk(14843);                                     \/\/       brk     #14843\n+    __ hlt(25964);                                     \/\/       hlt     #25964\n+\n+\/\/ Op\n+    __ nop();                                          \/\/       nop\n+    __ eret();                                         \/\/       eret\n+    __ drps();                                         \/\/       drps\n+    __ isb();                                          \/\/       isb\n+\n+\/\/ SystemOp\n+    __ dsb(Assembler::ST);                             \/\/       dsb     ST\n+    __ dmb(Assembler::OSHST);                          \/\/       dmb     OSHST\n+\n+\/\/ OneRegOp\n+    __ br(r16);                                        \/\/       br      x16\n+    __ blr(r20);                                       \/\/       blr     x20\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ stxr(r10, r27, r8);                             \/\/       stxr    w10, x27, [x8]\n+    __ stlxr(r0, r1, r21);                             \/\/       stlxr   w0, x1, [x21]\n+    __ ldxr(r17, r29);                                 \/\/       ldxr    x17, [x29]\n+    __ ldaxr(r29, r28);                                \/\/       ldaxr   x29, [x28]\n+    __ stlr(r1, r23);                                  \/\/       stlr    x1, [x23]\n+    __ ldar(r21, r20);                                 \/\/       ldar    x21, [x20]\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ stxrw(r22, r27, r19);                           \/\/       stxr    w22, w27, [x19]\n+    __ stlxrw(r11, r16, r6);                           \/\/       stlxr   w11, w16, [x6]\n+    __ ldxrw(r17, r0);                                 \/\/       ldxr    w17, [x0]\n+    __ ldaxrw(r4, r10);                                \/\/       ldaxr   w4, [x10]\n+    __ stlrw(r24, r22);                                \/\/       stlr    w24, [x22]\n+    __ ldarw(r10, r19);                                \/\/       ldar    w10, [x19]\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ stxrh(r1, r5, r30);                             \/\/       stxrh   w1, w5, [x30]\n+    __ stlxrh(r8, r12, r17);                           \/\/       stlxrh  w8, w12, [x17]\n+    __ ldxrh(r9, r14);                                 \/\/       ldxrh   w9, [x14]\n+    __ ldaxrh(r7, r1);                                 \/\/       ldaxrh  w7, [x1]\n+    __ stlrh(r5, r16);                                 \/\/       stlrh   w5, [x16]\n+    __ ldarh(r2, r12);                                 \/\/       ldarh   w2, [x12]\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ stxrb(r10, r12, r3);                            \/\/       stxrb   w10, w12, [x3]\n+    __ stlxrb(r28, r14, r26);                          \/\/       stlxrb  w28, w14, [x26]\n+    __ ldxrb(r30, r10);                                \/\/       ldxrb   w30, [x10]\n+    __ ldaxrb(r14, r21);                               \/\/       ldaxrb  w14, [x21]\n+    __ stlrb(r13, r9);                                 \/\/       stlrb   w13, [x9]\n+    __ ldarb(r22, r27);                                \/\/       ldarb   w22, [x27]\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ ldxp(r28, r19, r11);                            \/\/       ldxp    x28, x19, [x11]\n+    __ ldaxp(r30, r19, r2);                            \/\/       ldaxp   x30, x19, [x2]\n+    __ stxp(r2, r23, r1, r0);                          \/\/       stxp    w2, x23, x1, [x0]\n+    __ stlxp(r12, r16, r13, r15);                      \/\/       stlxp   w12, x16, x13, [x15]\n+\n+\/\/ LoadStoreExclusiveOp\n+    __ ldxpw(r17, r21, r13);                           \/\/       ldxp    w17, w21, [x13]\n+    __ ldaxpw(r11, r30, r8);                           \/\/       ldaxp   w11, w30, [x8]\n+    __ stxpw(r24, r13, r11, r1);                       \/\/       stxp    w24, w13, w11, [x1]\n+    __ stlxpw(r26, r21, r27, r13);                     \/\/       stlxp   w26, w21, w27, [x13]\n+\n+\/\/ base_plus_unscaled_offset\n+\/\/ LoadStoreOp\n+    __ str(r11, Address(r20, -103));                   \/\/       str     x11, [x20, -103]\n+    __ strw(r28, Address(r16, 62));                    \/\/       str     w28, [x16, 62]\n+    __ strb(r27, Address(r9, -9));                     \/\/       strb    w27, [x9, -9]\n+    __ strh(r2, Address(r25, -50));                    \/\/       strh    w2, [x25, -50]\n+    __ ldr(r4, Address(r2, -241));                     \/\/       ldr     x4, [x2, -241]\n+    __ ldrw(r30, Address(r20, -31));                   \/\/       ldr     w30, [x20, -31]\n+    __ ldrb(r17, Address(r23, -23));                   \/\/       ldrb    w17, [x23, -23]\n+    __ ldrh(r29, Address(r26, -1));                    \/\/       ldrh    w29, [x26, -1]\n+    __ ldrsb(r1, Address(r9, 6));                      \/\/       ldrsb   x1, [x9, 6]\n+    __ ldrsh(r11, Address(r12, 19));                   \/\/       ldrsh   x11, [x12, 19]\n+    __ ldrshw(r11, Address(r1, -50));                  \/\/       ldrsh   w11, [x1, -50]\n+    __ ldrsw(r19, Address(r24, 41));                   \/\/       ldrsw   x19, [x24, 41]\n+    __ ldrd(v24, Address(r24, 95));                    \/\/       ldr     d24, [x24, 95]\n+    __ ldrs(v15, Address(r5, -43));                    \/\/       ldr     s15, [x5, -43]\n+    __ strd(v21, Address(r27, 1));                     \/\/       str     d21, [x27, 1]\n+    __ strs(v23, Address(r13, -107));                  \/\/       str     s23, [x13, -107]\n+\n+\/\/ pre\n+\/\/ LoadStoreOp\n+    __ str(r10, Address(__ pre(r0, 8)));               \/\/       str     x10, [x0, 8]!\n+    __ strw(r3, Address(__ pre(r0, 29)));              \/\/       str     w3, [x0, 29]!\n+    __ strb(r10, Address(__ pre(r14, 9)));             \/\/       strb    w10, [x14, 9]!\n+    __ strh(r29, Address(__ pre(r25, -3)));            \/\/       strh    w29, [x25, -3]!\n+    __ ldr(r12, Address(__ pre(r16, -144)));           \/\/       ldr     x12, [x16, -144]!\n+    __ ldrw(r12, Address(__ pre(r22, -6)));            \/\/       ldr     w12, [x22, -6]!\n+    __ ldrb(r13, Address(__ pre(r11, -10)));           \/\/       ldrb    w13, [x11, -10]!\n+    __ ldrh(r0, Address(__ pre(r21, -21)));            \/\/       ldrh    w0, [x21, -21]!\n+    __ ldrsb(r23, Address(__ pre(r6, 4)));             \/\/       ldrsb   x23, [x6, 4]!\n+    __ ldrsh(r3, Address(__ pre(r7, -53)));            \/\/       ldrsh   x3, [x7, -53]!\n+    __ ldrshw(r28, Address(__ pre(r4, -7)));           \/\/       ldrsh   w28, [x4, -7]!\n+    __ ldrsw(r24, Address(__ pre(r8, -18)));           \/\/       ldrsw   x24, [x8, -18]!\n+    __ ldrd(v14, Address(__ pre(r11, 12)));            \/\/       ldr     d14, [x11, 12]!\n+    __ ldrs(v19, Address(__ pre(r12, -67)));           \/\/       ldr     s19, [x12, -67]!\n+    __ strd(v20, Address(__ pre(r0, -253)));           \/\/       str     d20, [x0, -253]!\n+    __ strs(v8, Address(__ pre(r0, 64)));              \/\/       str     s8, [x0, 64]!\n+\n+\/\/ post\n+\/\/ LoadStoreOp\n+    __ str(r3, Address(__ post(r28, -94)));            \/\/       str     x3, [x28], -94\n+    __ strw(r11, Address(__ post(r7, -54)));           \/\/       str     w11, [x7], -54\n+    __ strb(r27, Address(__ post(r10, -24)));          \/\/       strb    w27, [x10], -24\n+    __ strh(r6, Address(__ post(r7, 27)));             \/\/       strh    w6, [x7], 27\n+    __ ldr(r13, Address(__ post(r10, -202)));          \/\/       ldr     x13, [x10], -202\n+    __ ldrw(r15, Address(__ post(r5, -41)));           \/\/       ldr     w15, [x5], -41\n+    __ ldrb(r2, Address(__ post(r13, 9)));             \/\/       ldrb    w2, [x13], 9\n+    __ ldrh(r28, Address(__ post(r13, -20)));          \/\/       ldrh    w28, [x13], -20\n+    __ ldrsb(r9, Address(__ post(r13, -31)));          \/\/       ldrsb   x9, [x13], -31\n+    __ ldrsh(r3, Address(__ post(r24, -36)));          \/\/       ldrsh   x3, [x24], -36\n+    __ ldrshw(r20, Address(__ post(r3, 6)));           \/\/       ldrsh   w20, [x3], 6\n+    __ ldrsw(r7, Address(__ post(r19, -1)));           \/\/       ldrsw   x7, [x19], -1\n+    __ ldrd(v30, Address(__ post(r8, -130)));          \/\/       ldr     d30, [x8], -130\n+    __ ldrs(v25, Address(__ post(r15, 21)));           \/\/       ldr     s25, [x15], 21\n+    __ strd(v14, Address(__ post(r23, 90)));           \/\/       str     d14, [x23], 90\n+    __ strs(v8, Address(__ post(r0, -33)));            \/\/       str     s8, [x0], -33\n+\n+\/\/ base_plus_reg\n+\/\/ LoadStoreOp\n+    __ str(r10, Address(r17, r21, Address::sxtw(3)));  \/\/       str     x10, [x17, w21, sxtw #3]\n+    __ strw(r4, Address(r13, r22, Address::sxtw(2)));  \/\/       str     w4, [x13, w22, sxtw #2]\n+    __ strb(r13, Address(r0, r19, Address::uxtw(0)));  \/\/       strb    w13, [x0, w19, uxtw #0]\n+    __ strh(r12, Address(r27, r6, Address::sxtw(0)));  \/\/       strh    w12, [x27, w6, sxtw #0]\n+    __ ldr(r0, Address(r8, r16, Address::lsl(0)));     \/\/       ldr     x0, [x8, x16, lsl #0]\n+    __ ldrw(r0, Address(r4, r26, Address::sxtx(0)));   \/\/       ldr     w0, [x4, x26, sxtx #0]\n+    __ ldrb(r14, Address(r25, r5, Address::sxtw(0)));  \/\/       ldrb    w14, [x25, w5, sxtw #0]\n+    __ ldrh(r9, Address(r4, r17, Address::uxtw(0)));   \/\/       ldrh    w9, [x4, w17, uxtw #0]\n+    __ ldrsb(r27, Address(r4, r7, Address::lsl(0)));   \/\/       ldrsb   x27, [x4, x7, lsl #0]\n+    __ ldrsh(r15, Address(r17, r30, Address::sxtw(0))); \/\/      ldrsh   x15, [x17, w30, sxtw #0]\n+    __ ldrshw(r16, Address(r0, r22, Address::sxtw(0))); \/\/      ldrsh   w16, [x0, w22, sxtw #0]\n+    __ ldrsw(r22, Address(r10, r30, Address::sxtx(2))); \/\/      ldrsw   x22, [x10, x30, sxtx #2]\n+    __ ldrd(v29, Address(r21, r10, Address::sxtx(3))); \/\/       ldr     d29, [x21, x10, sxtx #3]\n+    __ ldrs(v3, Address(r11, r19, Address::uxtw(0)));  \/\/       ldr     s3, [x11, w19, uxtw #0]\n+    __ strd(v13, Address(r28, r29, Address::uxtw(3))); \/\/       str     d13, [x28, w29, uxtw #3]\n+    __ strs(v23, Address(r29, r5, Address::sxtx(2)));  \/\/       str     s23, [x29, x5, sxtx #2]\n+\n+\/\/ base_plus_scaled_offset\n+\/\/ LoadStoreOp\n+    __ str(r5, Address(r8, 12600));                    \/\/       str     x5, [x8, 12600]\n+    __ strw(r29, Address(r24, 7880));                  \/\/       str     w29, [x24, 7880]\n+    __ strb(r19, Address(r17, 1566));                  \/\/       strb    w19, [x17, 1566]\n+    __ strh(r13, Address(r19, 3984));                  \/\/       strh    w13, [x19, 3984]\n+    __ ldr(r19, Address(r23, 13632));                  \/\/       ldr     x19, [x23, 13632]\n+    __ ldrw(r23, Address(r29, 6264));                  \/\/       ldr     w23, [x29, 6264]\n+    __ ldrb(r22, Address(r11, 2012));                  \/\/       ldrb    w22, [x11, 2012]\n+    __ ldrh(r3, Address(r10, 3784));                   \/\/       ldrh    w3, [x10, 3784]\n+    __ ldrsb(r8, Address(r16, 1951));                  \/\/       ldrsb   x8, [x16, 1951]\n+    __ ldrsh(r23, Address(r20, 3346));                 \/\/       ldrsh   x23, [x20, 3346]\n+    __ ldrshw(r2, Address(r1, 3994));                  \/\/       ldrsh   w2, [x1, 3994]\n+    __ ldrsw(r4, Address(r17, 7204));                  \/\/       ldrsw   x4, [x17, 7204]\n+    __ ldrd(v20, Address(r27, 14400));                 \/\/       ldr     d20, [x27, 14400]\n+    __ ldrs(v25, Address(r14, 8096));                  \/\/       ldr     s25, [x14, 8096]\n+    __ strd(v26, Address(r10, 15024));                 \/\/       str     d26, [x10, 15024]\n+    __ strs(v9, Address(r3, 6936));                    \/\/       str     s9, [x3, 6936]\n+\n+\/\/ pcrel\n+\/\/ LoadStoreOp\n+    __ ldr(r27, forth);                                \/\/       ldr     x27, forth\n+    __ ldrw(r11, __ pc());                             \/\/       ldr     w11, .\n+\n+\/\/ LoadStoreOp\n+    __ prfm(Address(r3, -187));                        \/\/       prfm    PLDL1KEEP, [x3, -187]\n+\n+\/\/ LoadStoreOp\n+    __ prfm(__ pc());                                  \/\/       prfm    PLDL1KEEP, .\n+\n+\/\/ LoadStoreOp\n+    __ prfm(Address(r29, r14, Address::lsl(0)));       \/\/       prfm    PLDL1KEEP, [x29, x14, lsl #0]\n+\n+\/\/ LoadStoreOp\n+    __ prfm(Address(r4, 13312));                       \/\/       prfm    PLDL1KEEP, [x4, 13312]\n+\n+\/\/ AddSubCarryOp\n+    __ adcw(r21, r1, r7);                              \/\/       adc     w21, w1, w7\n+    __ adcsw(r8, r5, r7);                              \/\/       adcs    w8, w5, w7\n+    __ sbcw(r7, r27, r14);                             \/\/       sbc     w7, w27, w14\n+    __ sbcsw(r27, r4, r17);                            \/\/       sbcs    w27, w4, w17\n+    __ adc(r0, r28, r0);                               \/\/       adc     x0, x28, x0\n+    __ adcs(r12, r24, r30);                            \/\/       adcs    x12, x24, x30\n+    __ sbc(r0, r25, r15);                              \/\/       sbc     x0, x25, x15\n+    __ sbcs(r1, r24, r3);                              \/\/       sbcs    x1, x24, x3\n+\n+\/\/ AddSubExtendedOp\n+    __ addw(r17, r24, r20, ext::uxtb, 2);              \/\/       add     w17, w24, w20, uxtb #2\n+    __ addsw(r13, r28, r10, ext::uxth, 1);             \/\/       adds    w13, w28, w10, uxth #1\n+    __ sub(r15, r16, r2, ext::sxth, 2);                \/\/       sub     x15, x16, x2, sxth #2\n+    __ subsw(r29, r13, r13, ext::uxth, 2);             \/\/       subs    w29, w13, w13, uxth #2\n+    __ add(r12, r20, r12, ext::sxtw, 3);               \/\/       add     x12, x20, x12, sxtw #3\n+    __ adds(r30, r27, r11, ext::sxtb, 1);              \/\/       adds    x30, x27, x11, sxtb #1\n+    __ sub(r14, r7, r1, ext::sxtw, 2);                 \/\/       sub     x14, x7, x1, sxtw #2\n+    __ subs(r29, r3, r27, ext::sxth, 1);               \/\/       subs    x29, x3, x27, sxth #1\n+\n+\/\/ ConditionalCompareOp\n+    __ ccmnw(r0, r13, 14u, Assembler::MI);             \/\/       ccmn    w0, w13, #14, MI\n+    __ ccmpw(r22, r17, 6u, Assembler::CC);             \/\/       ccmp    w22, w17, #6, CC\n+    __ ccmn(r17, r30, 14u, Assembler::VS);             \/\/       ccmn    x17, x30, #14, VS\n+    __ ccmp(r10, r19, 12u, Assembler::HI);             \/\/       ccmp    x10, x19, #12, HI\n+\n+\/\/ ConditionalCompareImmedOp\n+    __ ccmnw(r6, 18, 2, Assembler::LE);                \/\/       ccmn    w6, #18, #2, LE\n+    __ ccmpw(r9, 13, 4, Assembler::HI);                \/\/       ccmp    w9, #13, #4, HI\n+    __ ccmn(r21, 11, 11, Assembler::LO);               \/\/       ccmn    x21, #11, #11, LO\n+    __ ccmp(r4, 13, 2, Assembler::VC);                 \/\/       ccmp    x4, #13, #2, VC\n+\n+\/\/ ConditionalSelectOp\n+    __ cselw(r12, r2, r22, Assembler::HI);             \/\/       csel    w12, w2, w22, HI\n+    __ csincw(r24, r16, r17, Assembler::HS);           \/\/       csinc   w24, w16, w17, HS\n+    __ csinvw(r6, r7, r16, Assembler::LT);             \/\/       csinv   w6, w7, w16, LT\n+    __ csnegw(r11, r27, r22, Assembler::LS);           \/\/       csneg   w11, w27, w22, LS\n+    __ csel(r10, r3, r29, Assembler::LT);              \/\/       csel    x10, x3, x29, LT\n+    __ csinc(r12, r26, r27, Assembler::CC);            \/\/       csinc   x12, x26, x27, CC\n+    __ csinv(r15, r10, r21, Assembler::GT);            \/\/       csinv   x15, x10, x21, GT\n+    __ csneg(r30, r23, r9, Assembler::GT);             \/\/       csneg   x30, x23, x9, GT\n+\n+\/\/ TwoRegOp\n+    __ rbitw(r30, r10);                                \/\/       rbit    w30, w10\n+    __ rev16w(r29, r15);                               \/\/       rev16   w29, w15\n+    __ revw(r29, r30);                                 \/\/       rev     w29, w30\n+    __ clzw(r25, r21);                                 \/\/       clz     w25, w21\n+    __ clsw(r4, r0);                                   \/\/       cls     w4, w0\n+    __ rbit(r17, r21);                                 \/\/       rbit    x17, x21\n+    __ rev16(r29, r16);                                \/\/       rev16   x29, x16\n+    __ rev32(r21, r20);                                \/\/       rev32   x21, x20\n+    __ rev(r6, r19);                                   \/\/       rev     x6, x19\n+    __ clz(r30, r3);                                   \/\/       clz     x30, x3\n+    __ cls(r21, r19);                                  \/\/       cls     x21, x19\n+\n+\/\/ ThreeRegOp\n+    __ udivw(r11, r24, r0);                            \/\/       udiv    w11, w24, w0\n+    __ sdivw(r27, r25, r14);                           \/\/       sdiv    w27, w25, w14\n+    __ lslvw(r3, r14, r17);                            \/\/       lslv    w3, w14, w17\n+    __ lsrvw(r7, r15, r24);                            \/\/       lsrv    w7, w15, w24\n+    __ asrvw(r28, r17, r25);                           \/\/       asrv    w28, w17, w25\n+    __ rorvw(r2, r26, r28);                            \/\/       rorv    w2, w26, w28\n+    __ udiv(r5, r25, r26);                             \/\/       udiv    x5, x25, x26\n+    __ sdiv(r27, r16, r17);                            \/\/       sdiv    x27, x16, x17\n+    __ lslv(r6, r21, r12);                             \/\/       lslv    x6, x21, x12\n+    __ lsrv(r0, r4, r12);                              \/\/       lsrv    x0, x4, x12\n+    __ asrv(r27, r17, r28);                            \/\/       asrv    x27, x17, x28\n+    __ rorv(r28, r2, r17);                             \/\/       rorv    x28, x2, x17\n+    __ umulh(r10, r15, r14);                           \/\/       umulh   x10, x15, x14\n+    __ smulh(r14, r3, r25);                            \/\/       smulh   x14, x3, x25\n+\n+\/\/ FourRegMulOp\n+    __ maddw(r15, r19, r14, r5);                       \/\/       madd    w15, w19, w14, w5\n+    __ msubw(r16, r4, r26, r25);                       \/\/       msub    w16, w4, w26, w25\n+    __ madd(r4, r2, r2, r12);                          \/\/       madd    x4, x2, x2, x12\n+    __ msub(r29, r17, r8, r7);                         \/\/       msub    x29, x17, x8, x7\n+    __ smaddl(r3, r4, r25, r4);                        \/\/       smaddl  x3, w4, w25, x4\n+    __ smsubl(r26, r25, r4, r17);                      \/\/       smsubl  x26, w25, w4, x17\n+    __ umaddl(r0, r26, r17, r23);                      \/\/       umaddl  x0, w26, w17, x23\n+    __ umsubl(r15, r21, r28, r17);                     \/\/       umsubl  x15, w21, w28, x17\n+\n+\/\/ ThreeRegFloatOp\n+    __ fabds(v27, v10, v3);                            \/\/       fabd    s27, s10, s3\n+    __ fmuls(v0, v7, v25);                             \/\/       fmul    s0, s7, s25\n+    __ fdivs(v9, v6, v15);                             \/\/       fdiv    s9, s6, s15\n+    __ fadds(v29, v15, v10);                           \/\/       fadd    s29, s15, s10\n+    __ fsubs(v2, v17, v7);                             \/\/       fsub    s2, s17, s7\n+    __ fabdd(v11, v11, v23);                           \/\/       fabd    d11, d11, d23\n+    __ fmuld(v7, v29, v23);                            \/\/       fmul    d7, d29, d23\n+    __ fdivd(v14, v27, v11);                           \/\/       fdiv    d14, d27, d11\n+    __ faddd(v11, v4, v24);                            \/\/       fadd    d11, d4, d24\n+    __ fsubd(v12, v15, v14);                           \/\/       fsub    d12, d15, d14\n+\n+\/\/ FourRegFloatOp\n+    __ fmadds(v20, v11, v28, v13);                     \/\/       fmadd   s20, s11, s28, s13\n+    __ fmsubs(v11, v12, v23, v30);                     \/\/       fmsub   s11, s12, s23, s30\n+    __ fnmadds(v26, v14, v9, v13);                     \/\/       fnmadd  s26, s14, s9, s13\n+    __ fnmadds(v10, v7, v5, v29);                      \/\/       fnmadd  s10, s7, s5, s29\n+    __ fmaddd(v15, v3, v11, v12);                      \/\/       fmadd   d15, d3, d11, d12\n+    __ fmsubd(v15, v30, v30, v17);                     \/\/       fmsub   d15, d30, d30, d17\n+    __ fnmaddd(v19, v20, v15, v15);                    \/\/       fnmadd  d19, d20, d15, d15\n+    __ fnmaddd(v9, v21, v2, v9);                       \/\/       fnmadd  d9, d21, d2, d9\n+\n+\/\/ TwoRegFloatOp\n+    __ fmovs(v27, v7);                                 \/\/       fmov    s27, s7\n+    __ fabss(v29, v30);                                \/\/       fabs    s29, s30\n+    __ fnegs(v17, v1);                                 \/\/       fneg    s17, s1\n+    __ fsqrts(v2, v6);                                 \/\/       fsqrt   s2, s6\n+    __ fcvts(v10, v3);                                 \/\/       fcvt    d10, s3\n+    __ fmovd(v24, v11);                                \/\/       fmov    d24, d11\n+    __ fabsd(v7, v1);                                  \/\/       fabs    d7, d1\n+    __ fnegd(v11, v0);                                 \/\/       fneg    d11, d0\n+    __ fsqrtd(v3, v17);                                \/\/       fsqrt   d3, d17\n+    __ fcvtd(v28, v6);                                 \/\/       fcvt    s28, d6\n+\n+\/\/ FloatConvertOp\n+    __ fcvtzsw(r22, v6);                               \/\/       fcvtzs  w22, s6\n+    __ fcvtzs(r0, v27);                                \/\/       fcvtzs  x0, s27\n+    __ fcvtzdw(r26, v2);                               \/\/       fcvtzs  w26, d2\n+    __ fcvtzd(r5, v7);                                 \/\/       fcvtzs  x5, d7\n+    __ scvtfws(v28, r11);                              \/\/       scvtf   s28, w11\n+    __ scvtfs(v25, r13);                               \/\/       scvtf   s25, x13\n+    __ scvtfwd(v11, r23);                              \/\/       scvtf   d11, w23\n+    __ scvtfd(v19, r8);                                \/\/       scvtf   d19, x8\n+    __ fmovs(r17, v21);                                \/\/       fmov    w17, s21\n+    __ fmovd(r25, v20);                                \/\/       fmov    x25, d20\n+    __ fmovs(v19, r17);                                \/\/       fmov    s19, w17\n+    __ fmovd(v2, r29);                                 \/\/       fmov    d2, x29\n+\n+\/\/ TwoRegFloatOp\n+    __ fcmps(v22, v8);                                 \/\/       fcmp    s22, s8\n+    __ fcmpd(v21, v19);                                \/\/       fcmp    d21, d19\n+    __ fcmps(v20, 0.0);                                \/\/       fcmp    s20, #0.0\n+    __ fcmpd(v11, 0.0);                                \/\/       fcmp    d11, #0.0\n+\n+\/\/ LoadStorePairOp\n+    __ stpw(r20, r6, Address(r15, -32));               \/\/       stp     w20, w6, [x15, #-32]\n+    __ ldpw(r27, r14, Address(r3, -208));              \/\/       ldp     w27, w14, [x3, #-208]\n+    __ ldpsw(r16, r10, Address(r11, -80));             \/\/       ldpsw   x16, x10, [x11, #-80]\n+    __ stp(r7, r7, Address(r14, 64));                  \/\/       stp     x7, x7, [x14, #64]\n+    __ ldp(r12, r23, Address(r0, 112));                \/\/       ldp     x12, x23, [x0, #112]\n+\n+\/\/ LoadStorePairOp\n+    __ stpw(r13, r7, Address(__ pre(r6, -80)));        \/\/       stp     w13, w7, [x6, #-80]!\n+    __ ldpw(r30, r15, Address(__ pre(r2, -144)));      \/\/       ldp     w30, w15, [x2, #-144]!\n+    __ ldpsw(r4, r1, Address(__ pre(r27, -144)));      \/\/       ldpsw   x4, x1, [x27, #-144]!\n+    __ stp(r23, r14, Address(__ pre(r11, 64)));        \/\/       stp     x23, x14, [x11, #64]!\n+    __ ldp(r29, r27, Address(__ pre(r21, -192)));      \/\/       ldp     x29, x27, [x21, #-192]!\n+\n+\/\/ LoadStorePairOp\n+    __ stpw(r22, r5, Address(__ post(r21, -48)));      \/\/       stp     w22, w5, [x21], #-48\n+    __ ldpw(r27, r17, Address(__ post(r6, -32)));      \/\/       ldp     w27, w17, [x6], #-32\n+    __ ldpsw(r16, r5, Address(__ post(r1, -80)));      \/\/       ldpsw   x16, x5, [x1], #-80\n+    __ stp(r13, r20, Address(__ post(r22, -208)));     \/\/       stp     x13, x20, [x22], #-208\n+    __ ldp(r30, r27, Address(__ post(r10, 80)));       \/\/       ldp     x30, x27, [x10], #80\n+\n+\/\/ LoadStorePairOp\n+    __ stnpw(r5, r17, Address(r11, 16));               \/\/       stnp    w5, w17, [x11, #16]\n+    __ ldnpw(r14, r4, Address(r26, -96));              \/\/       ldnp    w14, w4, [x26, #-96]\n+    __ stnp(r23, r29, Address(r12, 32));               \/\/       stnp    x23, x29, [x12, #32]\n+    __ ldnp(r0, r6, Address(r21, -80));                \/\/       ldnp    x0, x6, [x21, #-80]\n+\n+\/\/ LdStNEONOp\n+    __ ld1(v15, __ T8B, Address(r26));                 \/\/       ld1     {v15.8B}, [x26]\n+    __ ld1(v23, v24, __ T16B, Address(__ post(r11, 32))); \/\/    ld1     {v23.16B, v24.16B}, [x11], 32\n+    __ ld1(v8, v9, v10, __ T1D, Address(__ post(r23, r7))); \/\/  ld1     {v8.1D, v9.1D, v10.1D}, [x23], x7\n+    __ ld1(v19, v20, v21, v22, __ T8H, Address(__ post(r25, 64))); \/\/   ld1     {v19.8H, v20.8H, v21.8H, v22.8H}, [x25], 64\n+    __ ld1r(v29, __ T8B, Address(r17));                \/\/       ld1r    {v29.8B}, [x17]\n+    __ ld1r(v24, __ T4S, Address(__ post(r23, 4)));    \/\/       ld1r    {v24.4S}, [x23], 4\n+    __ ld1r(v10, __ T1D, Address(__ post(r5, r25)));   \/\/       ld1r    {v10.1D}, [x5], x25\n+    __ ld2(v17, v18, __ T2D, Address(r10));            \/\/       ld2     {v17.2D, v18.2D}, [x10]\n+    __ ld2(v12, v13, __ T4H, Address(__ post(r15, 16))); \/\/     ld2     {v12.4H, v13.4H}, [x15], 16\n+    __ ld2r(v25, v26, __ T16B, Address(r17));          \/\/       ld2r    {v25.16B, v26.16B}, [x17]\n+    __ ld2r(v1, v2, __ T2S, Address(__ post(r30, 8))); \/\/       ld2r    {v1.2S, v2.2S}, [x30], 8\n+    __ ld2r(v16, v17, __ T2D, Address(__ post(r17, r9))); \/\/    ld2r    {v16.2D, v17.2D}, [x17], x9\n+    __ ld3(v25, v26, v27, __ T4S, Address(__ post(r12, r2))); \/\/        ld3     {v25.4S, v26.4S, v27.4S}, [x12], x2\n+    __ ld3(v26, v27, v28, __ T2S, Address(r19));       \/\/       ld3     {v26.2S, v27.2S, v28.2S}, [x19]\n+    __ ld3r(v15, v16, v17, __ T8H, Address(r21));      \/\/       ld3r    {v15.8H, v16.8H, v17.8H}, [x21]\n+    __ ld3r(v25, v26, v27, __ T4S, Address(__ post(r13, 12))); \/\/       ld3r    {v25.4S, v26.4S, v27.4S}, [x13], 12\n+    __ ld3r(v14, v15, v16, __ T1D, Address(__ post(r28, r29))); \/\/      ld3r    {v14.1D, v15.1D, v16.1D}, [x28], x29\n+    __ ld4(v17, v18, v19, v20, __ T8H, Address(__ post(r29, 64))); \/\/   ld4     {v17.8H, v18.8H, v19.8H, v20.8H}, [x29], 64\n+    __ ld4(v27, v28, v29, v30, __ T8B, Address(__ post(r7, r0))); \/\/    ld4     {v27.8B, v28.8B, v29.8B, v30.8B}, [x7], x0\n+    __ ld4r(v24, v25, v26, v27, __ T8B, Address(r17)); \/\/       ld4r    {v24.8B, v25.8B, v26.8B, v27.8B}, [x17]\n+    __ ld4r(v0, v1, v2, v3, __ T4H, Address(__ post(r26, 8))); \/\/       ld4r    {v0.4H, v1.4H, v2.4H, v3.4H}, [x26], 8\n+    __ ld4r(v12, v13, v14, v15, __ T2S, Address(__ post(r25, r2))); \/\/  ld4r    {v12.2S, v13.2S, v14.2S, v15.2S}, [x25], x2\n+\n+\/\/ NEONReduceInstruction\n+    __ addv(v22, __ T8B, v23);                         \/\/       addv    b22, v23.8B\n+    __ addv(v27, __ T16B, v28);                        \/\/       addv    b27, v28.16B\n+    __ addv(v4, __ T4H, v5);                           \/\/       addv    h4, v5.4H\n+    __ addv(v7, __ T8H, v8);                           \/\/       addv    h7, v8.8H\n+    __ addv(v6, __ T4S, v7);                           \/\/       addv    s6, v7.4S\n+    __ smaxv(v1, __ T8B, v2);                          \/\/       smaxv   b1, v2.8B\n+    __ smaxv(v26, __ T16B, v27);                       \/\/       smaxv   b26, v27.16B\n+    __ smaxv(v15, __ T4H, v16);                        \/\/       smaxv   h15, v16.4H\n+    __ smaxv(v2, __ T8H, v3);                          \/\/       smaxv   h2, v3.8H\n+    __ smaxv(v13, __ T4S, v14);                        \/\/       smaxv   s13, v14.4S\n+    __ fmaxv(v13, __ T4S, v14);                        \/\/       fmaxv   s13, v14.4S\n+    __ sminv(v24, __ T8B, v25);                        \/\/       sminv   b24, v25.8B\n+    __ sminv(v23, __ T16B, v24);                       \/\/       sminv   b23, v24.16B\n+    __ sminv(v4, __ T4H, v5);                          \/\/       sminv   h4, v5.4H\n+    __ sminv(v19, __ T8H, v20);                        \/\/       sminv   h19, v20.8H\n+    __ sminv(v15, __ T4S, v16);                        \/\/       sminv   s15, v16.4S\n+    __ fminv(v0, __ T4S, v1);                          \/\/       fminv   s0, v1.4S\n+\n+\/\/ TwoRegNEONOp\n+    __ absr(v4, __ T8B, v5);                           \/\/       abs     v4.8B, v5.8B\n+    __ absr(v20, __ T16B, v21);                        \/\/       abs     v20.16B, v21.16B\n+    __ absr(v11, __ T4H, v12);                         \/\/       abs     v11.4H, v12.4H\n+    __ absr(v29, __ T8H, v30);                         \/\/       abs     v29.8H, v30.8H\n+    __ absr(v15, __ T2S, v16);                         \/\/       abs     v15.2S, v16.2S\n+    __ absr(v21, __ T4S, v22);                         \/\/       abs     v21.4S, v22.4S\n+    __ absr(v4, __ T2D, v5);                           \/\/       abs     v4.2D, v5.2D\n+    __ fabs(v14, __ T2S, v15);                         \/\/       fabs    v14.2S, v15.2S\n+    __ fabs(v22, __ T4S, v23);                         \/\/       fabs    v22.4S, v23.4S\n+    __ fabs(v25, __ T2D, v26);                         \/\/       fabs    v25.2D, v26.2D\n+    __ fneg(v6, __ T2S, v7);                           \/\/       fneg    v6.2S, v7.2S\n+    __ fneg(v12, __ T4S, v13);                         \/\/       fneg    v12.4S, v13.4S\n+    __ fneg(v14, __ T2D, v15);                         \/\/       fneg    v14.2D, v15.2D\n+    __ fsqrt(v13, __ T2S, v14);                        \/\/       fsqrt   v13.2S, v14.2S\n+    __ fsqrt(v14, __ T4S, v15);                        \/\/       fsqrt   v14.4S, v15.4S\n+    __ fsqrt(v9, __ T2D, v10);                         \/\/       fsqrt   v9.2D, v10.2D\n+    __ notr(v25, __ T8B, v26);                         \/\/       not     v25.8B, v26.8B\n+    __ notr(v28, __ T16B, v29);                        \/\/       not     v28.16B, v29.16B\n+\n+\/\/ ThreeRegNEONOp\n+    __ andr(v10, __ T8B, v11, v12);                    \/\/       and     v10.8B, v11.8B, v12.8B\n+    __ andr(v19, __ T16B, v20, v21);                   \/\/       and     v19.16B, v20.16B, v21.16B\n+    __ orr(v11, __ T8B, v12, v13);                     \/\/       orr     v11.8B, v12.8B, v13.8B\n+    __ orr(v17, __ T16B, v18, v19);                    \/\/       orr     v17.16B, v18.16B, v19.16B\n+    __ eor(v21, __ T8B, v22, v23);                     \/\/       eor     v21.8B, v22.8B, v23.8B\n+    __ eor(v15, __ T16B, v16, v17);                    \/\/       eor     v15.16B, v16.16B, v17.16B\n+    __ addv(v20, __ T8B, v21, v22);                    \/\/       add     v20.8B, v21.8B, v22.8B\n+    __ addv(v23, __ T16B, v24, v25);                   \/\/       add     v23.16B, v24.16B, v25.16B\n+    __ addv(v26, __ T4H, v27, v28);                    \/\/       add     v26.4H, v27.4H, v28.4H\n+    __ addv(v5, __ T8H, v6, v7);                       \/\/       add     v5.8H, v6.8H, v7.8H\n+    __ addv(v6, __ T2S, v7, v8);                       \/\/       add     v6.2S, v7.2S, v8.2S\n+    __ addv(v15, __ T4S, v16, v17);                    \/\/       add     v15.4S, v16.4S, v17.4S\n+    __ addv(v15, __ T2D, v16, v17);                    \/\/       add     v15.2D, v16.2D, v17.2D\n+    __ fadd(v25, __ T2S, v26, v27);                    \/\/       fadd    v25.2S, v26.2S, v27.2S\n+    __ fadd(v16, __ T4S, v17, v18);                    \/\/       fadd    v16.4S, v17.4S, v18.4S\n+    __ fadd(v27, __ T2D, v28, v29);                    \/\/       fadd    v27.2D, v28.2D, v29.2D\n+    __ subv(v24, __ T8B, v25, v26);                    \/\/       sub     v24.8B, v25.8B, v26.8B\n+    __ subv(v15, __ T16B, v16, v17);                   \/\/       sub     v15.16B, v16.16B, v17.16B\n+    __ subv(v25, __ T4H, v26, v27);                    \/\/       sub     v25.4H, v26.4H, v27.4H\n+    __ subv(v14, __ T8H, v15, v16);                    \/\/       sub     v14.8H, v15.8H, v16.8H\n+    __ subv(v10, __ T2S, v11, v12);                    \/\/       sub     v10.2S, v11.2S, v12.2S\n+    __ subv(v13, __ T4S, v14, v15);                    \/\/       sub     v13.4S, v14.4S, v15.4S\n+    __ subv(v14, __ T2D, v15, v16);                    \/\/       sub     v14.2D, v15.2D, v16.2D\n+    __ fsub(v20, __ T2S, v21, v22);                    \/\/       fsub    v20.2S, v21.2S, v22.2S\n+    __ fsub(v1, __ T4S, v2, v3);                       \/\/       fsub    v1.4S, v2.4S, v3.4S\n+    __ fsub(v22, __ T2D, v23, v24);                    \/\/       fsub    v22.2D, v23.2D, v24.2D\n+    __ mulv(v30, __ T8B, v31, v0);                     \/\/       mul     v30.8B, v31.8B, v0.8B\n+    __ mulv(v14, __ T16B, v15, v16);                   \/\/       mul     v14.16B, v15.16B, v16.16B\n+    __ mulv(v2, __ T4H, v3, v4);                       \/\/       mul     v2.4H, v3.4H, v4.4H\n+    __ mulv(v6, __ T8H, v7, v8);                       \/\/       mul     v6.8H, v7.8H, v8.8H\n+    __ mulv(v3, __ T2S, v4, v5);                       \/\/       mul     v3.2S, v4.2S, v5.2S\n+    __ mulv(v7, __ T4S, v8, v9);                       \/\/       mul     v7.4S, v8.4S, v9.4S\n+    __ fabd(v24, __ T2S, v25, v26);                    \/\/       fabd    v24.2S, v25.2S, v26.2S\n+    __ fabd(v0, __ T4S, v1, v2);                       \/\/       fabd    v0.4S, v1.4S, v2.4S\n+    __ fabd(v27, __ T2D, v28, v29);                    \/\/       fabd    v27.2D, v28.2D, v29.2D\n+    __ fmul(v29, __ T2S, v30, v31);                    \/\/       fmul    v29.2S, v30.2S, v31.2S\n+    __ fmul(v5, __ T4S, v6, v7);                       \/\/       fmul    v5.4S, v6.4S, v7.4S\n+    __ fmul(v5, __ T2D, v6, v7);                       \/\/       fmul    v5.2D, v6.2D, v7.2D\n+    __ mlav(v29, __ T4H, v30, v31);                    \/\/       mla     v29.4H, v30.4H, v31.4H\n+    __ mlav(v11, __ T8H, v12, v13);                    \/\/       mla     v11.8H, v12.8H, v13.8H\n+    __ mlav(v25, __ T2S, v26, v27);                    \/\/       mla     v25.2S, v26.2S, v27.2S\n+    __ mlav(v0, __ T4S, v1, v2);                       \/\/       mla     v0.4S, v1.4S, v2.4S\n+    __ fmla(v30, __ T2S, v31, v0);                     \/\/       fmla    v30.2S, v31.2S, v0.2S\n+    __ fmla(v0, __ T4S, v1, v2);                       \/\/       fmla    v0.4S, v1.4S, v2.4S\n+    __ fmla(v17, __ T2D, v18, v19);                    \/\/       fmla    v17.2D, v18.2D, v19.2D\n+    __ mlsv(v28, __ T4H, v29, v30);                    \/\/       mls     v28.4H, v29.4H, v30.4H\n+    __ mlsv(v25, __ T8H, v26, v27);                    \/\/       mls     v25.8H, v26.8H, v27.8H\n+    __ mlsv(v9, __ T2S, v10, v11);                     \/\/       mls     v9.2S, v10.2S, v11.2S\n+    __ mlsv(v25, __ T4S, v26, v27);                    \/\/       mls     v25.4S, v26.4S, v27.4S\n+    __ fmls(v12, __ T2S, v13, v14);                    \/\/       fmls    v12.2S, v13.2S, v14.2S\n+    __ fmls(v15, __ T4S, v16, v17);                    \/\/       fmls    v15.4S, v16.4S, v17.4S\n+    __ fmls(v11, __ T2D, v12, v13);                    \/\/       fmls    v11.2D, v12.2D, v13.2D\n+    __ fdiv(v10, __ T2S, v11, v12);                    \/\/       fdiv    v10.2S, v11.2S, v12.2S\n+    __ fdiv(v17, __ T4S, v18, v19);                    \/\/       fdiv    v17.4S, v18.4S, v19.4S\n+    __ fdiv(v24, __ T2D, v25, v26);                    \/\/       fdiv    v24.2D, v25.2D, v26.2D\n+    __ maxv(v21, __ T8B, v22, v23);                    \/\/       smax    v21.8B, v22.8B, v23.8B\n+    __ maxv(v23, __ T16B, v24, v25);                   \/\/       smax    v23.16B, v24.16B, v25.16B\n+    __ maxv(v0, __ T4H, v1, v2);                       \/\/       smax    v0.4H, v1.4H, v2.4H\n+    __ maxv(v16, __ T8H, v17, v18);                    \/\/       smax    v16.8H, v17.8H, v18.8H\n+    __ maxv(v10, __ T2S, v11, v12);                    \/\/       smax    v10.2S, v11.2S, v12.2S\n+    __ maxv(v6, __ T4S, v7, v8);                       \/\/       smax    v6.4S, v7.4S, v8.4S\n+    __ fmax(v28, __ T2S, v29, v30);                    \/\/       fmax    v28.2S, v29.2S, v30.2S\n+    __ fmax(v6, __ T4S, v7, v8);                       \/\/       fmax    v6.4S, v7.4S, v8.4S\n+    __ fmax(v5, __ T2D, v6, v7);                       \/\/       fmax    v5.2D, v6.2D, v7.2D\n+    __ minv(v5, __ T8B, v6, v7);                       \/\/       smin    v5.8B, v6.8B, v7.8B\n+    __ minv(v20, __ T16B, v21, v22);                   \/\/       smin    v20.16B, v21.16B, v22.16B\n+    __ minv(v17, __ T4H, v18, v19);                    \/\/       smin    v17.4H, v18.4H, v19.4H\n+    __ minv(v15, __ T8H, v16, v17);                    \/\/       smin    v15.8H, v16.8H, v17.8H\n+    __ minv(v17, __ T2S, v18, v19);                    \/\/       smin    v17.2S, v18.2S, v19.2S\n+    __ minv(v29, __ T4S, v30, v31);                    \/\/       smin    v29.4S, v30.4S, v31.4S\n+    __ fmin(v26, __ T2S, v27, v28);                    \/\/       fmin    v26.2S, v27.2S, v28.2S\n+    __ fmin(v28, __ T4S, v29, v30);                    \/\/       fmin    v28.4S, v29.4S, v30.4S\n+    __ fmin(v1, __ T2D, v2, v3);                       \/\/       fmin    v1.2D, v2.2D, v3.2D\n+    __ cmeq(v27, __ T8B, v28, v29);                    \/\/       cmeq    v27.8B, v28.8B, v29.8B\n+    __ cmeq(v0, __ T16B, v1, v2);                      \/\/       cmeq    v0.16B, v1.16B, v2.16B\n+    __ cmeq(v20, __ T4H, v21, v22);                    \/\/       cmeq    v20.4H, v21.4H, v22.4H\n+    __ cmeq(v28, __ T8H, v29, v30);                    \/\/       cmeq    v28.8H, v29.8H, v30.8H\n+    __ cmeq(v15, __ T2S, v16, v17);                    \/\/       cmeq    v15.2S, v16.2S, v17.2S\n+    __ cmeq(v12, __ T4S, v13, v14);                    \/\/       cmeq    v12.4S, v13.4S, v14.4S\n+    __ cmeq(v10, __ T2D, v11, v12);                    \/\/       cmeq    v10.2D, v11.2D, v12.2D\n+    __ fcmeq(v28, __ T2S, v29, v30);                   \/\/       fcmeq   v28.2S, v29.2S, v30.2S\n+    __ fcmeq(v28, __ T4S, v29, v30);                   \/\/       fcmeq   v28.4S, v29.4S, v30.4S\n+    __ fcmeq(v19, __ T2D, v20, v21);                   \/\/       fcmeq   v19.2D, v20.2D, v21.2D\n+    __ cmgt(v22, __ T8B, v23, v24);                    \/\/       cmgt    v22.8B, v23.8B, v24.8B\n+    __ cmgt(v10, __ T16B, v11, v12);                   \/\/       cmgt    v10.16B, v11.16B, v12.16B\n+    __ cmgt(v4, __ T4H, v5, v6);                       \/\/       cmgt    v4.4H, v5.4H, v6.4H\n+    __ cmgt(v30, __ T8H, v31, v0);                     \/\/       cmgt    v30.8H, v31.8H, v0.8H\n+    __ cmgt(v20, __ T2S, v21, v22);                    \/\/       cmgt    v20.2S, v21.2S, v22.2S\n+    __ cmgt(v8, __ T4S, v9, v10);                      \/\/       cmgt    v8.4S, v9.4S, v10.4S\n+    __ cmgt(v30, __ T2D, v31, v0);                     \/\/       cmgt    v30.2D, v31.2D, v0.2D\n+    __ fcmgt(v17, __ T2S, v18, v19);                   \/\/       fcmgt   v17.2S, v18.2S, v19.2S\n+    __ fcmgt(v10, __ T4S, v11, v12);                   \/\/       fcmgt   v10.4S, v11.4S, v12.4S\n+    __ fcmgt(v27, __ T2D, v28, v29);                   \/\/       fcmgt   v27.2D, v28.2D, v29.2D\n+    __ cmge(v2, __ T8B, v3, v4);                       \/\/       cmge    v2.8B, v3.8B, v4.8B\n+    __ cmge(v24, __ T16B, v25, v26);                   \/\/       cmge    v24.16B, v25.16B, v26.16B\n+    __ cmge(v4, __ T4H, v5, v6);                       \/\/       cmge    v4.4H, v5.4H, v6.4H\n+    __ cmge(v3, __ T8H, v4, v5);                       \/\/       cmge    v3.8H, v4.8H, v5.8H\n+    __ cmge(v8, __ T2S, v9, v10);                      \/\/       cmge    v8.2S, v9.2S, v10.2S\n+    __ cmge(v22, __ T4S, v23, v24);                    \/\/       cmge    v22.4S, v23.4S, v24.4S\n+    __ cmge(v17, __ T2D, v18, v19);                    \/\/       cmge    v17.2D, v18.2D, v19.2D\n+    __ fcmge(v13, __ T2S, v14, v15);                   \/\/       fcmge   v13.2S, v14.2S, v15.2S\n+    __ fcmge(v4, __ T4S, v5, v6);                      \/\/       fcmge   v4.4S, v5.4S, v6.4S\n+    __ fcmge(v28, __ T2D, v29, v30);                   \/\/       fcmge   v28.2D, v29.2D, v30.2D\n+\n+\/\/ SpecialCases\n+    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/       ccmn    xzr, xzr, #3, LE\n+    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/       ccmn    wzr, wzr, #5, EQ\n+    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/       ccmp    xzr, 1, #4, NE\n+    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/       ccmp    wzr, 2, #2, GT\n+    __ extr(zr, zr, zr, 0);                            \/\/       extr    xzr, xzr, xzr, 0\n+    __ stlxp(r0, zr, zr, sp);                          \/\/       stlxp   w0, xzr, xzr, [sp]\n+    __ stlxpw(r2, zr, zr, r3);                         \/\/       stlxp   w2, wzr, wzr, [x3]\n+    __ stxp(r4, zr, zr, r5);                           \/\/       stxp    w4, xzr, xzr, [x5]\n+    __ stxpw(r6, zr, zr, sp);                          \/\/       stxp    w6, wzr, wzr, [sp]\n+    __ dup(v0, __ T16B, zr);                           \/\/       dup     v0.16b, wzr\n+    __ mov(v1, __ T1D, 0, zr);                         \/\/       mov     v1.d[0], xzr\n+    __ mov(v1, __ T2S, 1, zr);                         \/\/       mov     v1.s[1], wzr\n+    __ mov(v1, __ T4H, 2, zr);                         \/\/       mov     v1.h[2], wzr\n+    __ mov(v1, __ T8B, 3, zr);                         \/\/       mov     v1.b[3], wzr\n+    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/       ld1     {v31.2d, v0.2d}, [x1], x0\n+    __ sve_cpy(z0, __ S, p0, v1);                      \/\/       mov     z0.s, p0\/m, s1\n+    __ sve_inc(r0, __ S);                              \/\/       incw    x0\n+    __ sve_dec(r1, __ H);                              \/\/       dech    x1\n+    __ sve_lsl(z0, __ B, z1, 7);                       \/\/       lsl     z0.b, z1.b, #7\n+    __ sve_lsl(z21, __ H, z1, 15);                     \/\/       lsl     z21.h, z1.h, #15\n+    __ sve_lsl(z0, __ S, z1, 31);                      \/\/       lsl     z0.s, z1.s, #31\n+    __ sve_lsl(z0, __ D, z1, 63);                      \/\/       lsl     z0.d, z1.d, #63\n+    __ sve_lsr(z0, __ B, z1, 7);                       \/\/       lsr     z0.b, z1.b, #7\n+    __ sve_asr(z0, __ H, z11, 15);                     \/\/       asr     z0.h, z11.h, #15\n+    __ sve_lsr(z30, __ S, z1, 31);                     \/\/       lsr     z30.s, z1.s, #31\n+    __ sve_asr(z0, __ D, z1, 63);                      \/\/       asr     z0.d, z1.d, #63\n+    __ sve_addvl(sp, r0, 31);                          \/\/       addvl   sp, x0, #31\n+    __ sve_addpl(r1, sp, -32);                         \/\/       addpl   x1, sp, -32\n+    __ sve_cntp(r8, __ B, p0, p1);                     \/\/       cntp    x8, p0, p1.b\n+    __ sve_dup(z0, __ B, 127);                         \/\/       dup     z0.b, 127\n+    __ sve_dup(z1, __ H, -128);                        \/\/       dup     z1.h, -128\n+    __ sve_dup(z2, __ S, 32512);                       \/\/       dup     z2.s, 32512\n+    __ sve_dup(z7, __ D, -32768);                      \/\/       dup     z7.d, -32768\n+    __ sve_ld1b(z0, __ B, p0, Address(sp));            \/\/       ld1b    {z0.b}, p0\/z, [sp]\n+    __ sve_ld1h(z10, __ H, p1, Address(sp, -8));       \/\/       ld1h    {z10.h}, p1\/z, [sp, #-8, MUL VL]\n+    __ sve_ld1w(z20, __ S, p2, Address(r0, 7));        \/\/       ld1w    {z20.s}, p2\/z, [x0, #7, MUL VL]\n+    __ sve_ld1b(z30, __ B, p3, Address(sp, r8));       \/\/       ld1b    {z30.b}, p3\/z, [sp, x8]\n+    __ sve_ld1w(z0, __ S, p4, Address(sp, r28));       \/\/       ld1w    {z0.s}, p4\/z, [sp, x28, LSL #2]\n+    __ sve_ld1d(z11, __ D, p5, Address(r0, r1));       \/\/       ld1d    {z11.d}, p5\/z, [x0, x1, LSL #3]\n+    __ sve_st1b(z22, __ B, p6, Address(sp));           \/\/       st1b    {z22.b}, p6, [sp]\n+    __ sve_st1b(z31, __ B, p7, Address(sp, -8));       \/\/       st1b    {z31.b}, p7, [sp, #-8, MUL VL]\n+    __ sve_st1w(z0, __ S, p1, Address(r0, 7));         \/\/       st1w    {z0.s}, p1, [x0, #7, MUL VL]\n+    __ sve_st1b(z0, __ B, p2, Address(sp, r1));        \/\/       st1b    {z0.b}, p2, [sp, x1]\n+    __ sve_st1h(z0, __ H, p3, Address(sp, r8));        \/\/       st1h    {z0.h}, p3, [sp, x8, LSL #1]\n+    __ sve_st1d(z0, __ D, p4, Address(r0, r17));       \/\/       st1d    {z0.d}, p4, [x0, x17, LSL #3]\n+    __ sve_ldr(z0, Address(sp));                       \/\/       ldr     z0, [sp]\n+    __ sve_ldr(z31, Address(sp, -256));                \/\/       ldr     z31, [sp, #-256, MUL VL]\n+    __ sve_str(z8, Address(r8, 255));                  \/\/       str     z8, [x8, #255, MUL VL]\n+\n+\/\/ FloatImmediateOp\n+    __ fmovd(v0, 2.0);                                 \/\/       fmov d0, #2.0\n+    __ fmovd(v0, 2.125);                               \/\/       fmov d0, #2.125\n+    __ fmovd(v0, 4.0);                                 \/\/       fmov d0, #4.0\n+    __ fmovd(v0, 4.25);                                \/\/       fmov d0, #4.25\n+    __ fmovd(v0, 8.0);                                 \/\/       fmov d0, #8.0\n+    __ fmovd(v0, 8.5);                                 \/\/       fmov d0, #8.5\n+    __ fmovd(v0, 16.0);                                \/\/       fmov d0, #16.0\n+    __ fmovd(v0, 17.0);                                \/\/       fmov d0, #17.0\n+    __ fmovd(v0, 0.125);                               \/\/       fmov d0, #0.125\n+    __ fmovd(v0, 0.1328125);                           \/\/       fmov d0, #0.1328125\n+    __ fmovd(v0, 0.25);                                \/\/       fmov d0, #0.25\n+    __ fmovd(v0, 0.265625);                            \/\/       fmov d0, #0.265625\n+    __ fmovd(v0, 0.5);                                 \/\/       fmov d0, #0.5\n+    __ fmovd(v0, 0.53125);                             \/\/       fmov d0, #0.53125\n+    __ fmovd(v0, 1.0);                                 \/\/       fmov d0, #1.0\n+    __ fmovd(v0, 1.0625);                              \/\/       fmov d0, #1.0625\n+    __ fmovd(v0, -2.0);                                \/\/       fmov d0, #-2.0\n+    __ fmovd(v0, -2.125);                              \/\/       fmov d0, #-2.125\n+    __ fmovd(v0, -4.0);                                \/\/       fmov d0, #-4.0\n+    __ fmovd(v0, -4.25);                               \/\/       fmov d0, #-4.25\n+    __ fmovd(v0, -8.0);                                \/\/       fmov d0, #-8.0\n+    __ fmovd(v0, -8.5);                                \/\/       fmov d0, #-8.5\n+    __ fmovd(v0, -16.0);                               \/\/       fmov d0, #-16.0\n+    __ fmovd(v0, -17.0);                               \/\/       fmov d0, #-17.0\n+    __ fmovd(v0, -0.125);                              \/\/       fmov d0, #-0.125\n+    __ fmovd(v0, -0.1328125);                          \/\/       fmov d0, #-0.1328125\n+    __ fmovd(v0, -0.25);                               \/\/       fmov d0, #-0.25\n+    __ fmovd(v0, -0.265625);                           \/\/       fmov d0, #-0.265625\n+    __ fmovd(v0, -0.5);                                \/\/       fmov d0, #-0.5\n+    __ fmovd(v0, -0.53125);                            \/\/       fmov d0, #-0.53125\n+    __ fmovd(v0, -1.0);                                \/\/       fmov d0, #-1.0\n+    __ fmovd(v0, -1.0625);                             \/\/       fmov d0, #-1.0625\n+\n+\/\/ LSEOp\n+    __ swp(Assembler::xword, r24, r21, r26);           \/\/       swp     x24, x21, [x26]\n+    __ ldadd(Assembler::xword, r24, r3, r24);          \/\/       ldadd   x24, x3, [x24]\n+    __ ldbic(Assembler::xword, r26, r23, r15);         \/\/       ldclr   x26, x23, [x15]\n+    __ ldeor(Assembler::xword, r21, r3, r24);          \/\/       ldeor   x21, x3, [x24]\n+    __ ldorr(Assembler::xword, r8, r25, r20);          \/\/       ldset   x8, x25, [x20]\n+    __ ldsmin(Assembler::xword, r16, r17, r2);         \/\/       ldsmin  x16, x17, [x2]\n+    __ ldsmax(Assembler::xword, r1, r0, r24);          \/\/       ldsmax  x1, x0, [x24]\n+    __ ldumin(Assembler::xword, r4, r3, r12);          \/\/       ldumin  x4, x3, [x12]\n+    __ ldumax(Assembler::xword, zr, r28, r10);         \/\/       ldumax  xzr, x28, [x10]\n+\n+\/\/ LSEOp\n+    __ swpa(Assembler::xword, r26, r2, r12);           \/\/       swpa    x26, x2, [x12]\n+    __ ldadda(Assembler::xword, r16, zr, r1);          \/\/       ldadda  x16, xzr, [x1]\n+    __ ldbica(Assembler::xword, r13, r29, r0);         \/\/       ldclra  x13, x29, [x0]\n+    __ ldeora(Assembler::xword, r19, r12, r17);        \/\/       ldeora  x19, x12, [x17]\n+    __ ldorra(Assembler::xword, r22, r13, r28);        \/\/       ldseta  x22, x13, [x28]\n+    __ ldsmina(Assembler::xword, r30, zr, r1);         \/\/       ldsmina x30, xzr, [x1]\n+    __ ldsmaxa(Assembler::xword, r26, r28, r4);        \/\/       ldsmaxa x26, x28, [x4]\n+    __ ldumina(Assembler::xword, r30, r4, r6);         \/\/       ldumina x30, x4, [x6]\n+    __ ldumaxa(Assembler::xword, r30, r26, r15);       \/\/       ldumaxa x30, x26, [x15]\n+\n+\/\/ LSEOp\n+    __ swpal(Assembler::xword, r9, r8, r12);           \/\/       swpal   x9, x8, [x12]\n+    __ ldaddal(Assembler::xword, r0, r20, r1);         \/\/       ldaddal x0, x20, [x1]\n+    __ ldbical(Assembler::xword, r24, r2, r0);         \/\/       ldclral x24, x2, [x0]\n+    __ ldeoral(Assembler::xword, r9, r24, r26);        \/\/       ldeoral x9, x24, [x26]\n+    __ ldorral(Assembler::xword, r16, r30, r3);        \/\/       ldsetal x16, x30, [x3]\n+    __ ldsminal(Assembler::xword, r10, r23, r10);      \/\/       ldsminal        x10, x23, [x10]\n+    __ ldsmaxal(Assembler::xword, r4, r16, r2);        \/\/       ldsmaxal        x4, x16, [x2]\n+    __ lduminal(Assembler::xword, r11, r8, r10);       \/\/       lduminal        x11, x8, [x10]\n+    __ ldumaxal(Assembler::xword, r15, r17, r2);       \/\/       ldumaxal        x15, x17, [x2]\n+\n+\/\/ LSEOp\n+    __ swpl(Assembler::xword, r10, r12, r12);          \/\/       swpl    x10, x12, [x12]\n+    __ ldaddl(Assembler::xword, r15, r13, r2);         \/\/       ldaddl  x15, x13, [x2]\n+    __ ldbicl(Assembler::xword, r7, r20, r26);         \/\/       ldclrl  x7, x20, [x26]\n+    __ ldeorl(Assembler::xword, r16, r4, r2);          \/\/       ldeorl  x16, x4, [x2]\n+    __ ldorrl(Assembler::xword, r4, r12, r15);         \/\/       ldsetl  x4, x12, [x15]\n+    __ ldsminl(Assembler::xword, r21, r16, r15);       \/\/       ldsminl x21, x16, [x15]\n+    __ ldsmaxl(Assembler::xword, r11, r21, r23);       \/\/       ldsmaxl x11, x21, [x23]\n+    __ lduminl(Assembler::xword, r12, r26, r23);       \/\/       lduminl x12, x26, [x23]\n+    __ ldumaxl(Assembler::xword, r28, r14, r11);       \/\/       ldumaxl x28, x14, [x11]\n+\n+\/\/ LSEOp\n+    __ swp(Assembler::word, r24, r1, r12);             \/\/       swp     w24, w1, [x12]\n+    __ ldadd(Assembler::word, zr, r10, r16);           \/\/       ldadd   wzr, w10, [x16]\n+    __ ldbic(Assembler::word, r7, r2, r3);             \/\/       ldclr   w7, w2, [x3]\n+    __ ldeor(Assembler::word, r13, r19, r17);          \/\/       ldeor   w13, w19, [x17]\n+    __ ldorr(Assembler::word, r16, r3, r1);            \/\/       ldset   w16, w3, [x1]\n+    __ ldsmin(Assembler::word, r11, r30, r5);          \/\/       ldsmin  w11, w30, [x5]\n+    __ ldsmax(Assembler::word, r8, r15, r29);          \/\/       ldsmax  w8, w15, [x29]\n+    __ ldumin(Assembler::word, r30, r0, r20);          \/\/       ldumin  w30, w0, [x20]\n+    __ ldumax(Assembler::word, r7, r20, r23);          \/\/       ldumax  w7, w20, [x23]\n+\n+\/\/ LSEOp\n+    __ swpa(Assembler::word, r28, r21, r27);           \/\/       swpa    w28, w21, [x27]\n+    __ ldadda(Assembler::word, r25, r5, r1);           \/\/       ldadda  w25, w5, [x1]\n+    __ ldbica(Assembler::word, r23, r16, sp);          \/\/       ldclra  w23, w16, [sp]\n+    __ ldeora(Assembler::word, r5, r12, r9);           \/\/       ldeora  w5, w12, [x9]\n+    __ ldorra(Assembler::word, r28, r15, r29);         \/\/       ldseta  w28, w15, [x29]\n+    __ ldsmina(Assembler::word, r22, zr, r19);         \/\/       ldsmina w22, wzr, [x19]\n+    __ ldsmaxa(Assembler::word, zr, r5, r14);          \/\/       ldsmaxa wzr, w5, [x14]\n+    __ ldumina(Assembler::word, r16, zr, r15);         \/\/       ldumina w16, wzr, [x15]\n+    __ ldumaxa(Assembler::word, r27, r20, r16);        \/\/       ldumaxa w27, w20, [x16]\n+\n+\/\/ LSEOp\n+    __ swpal(Assembler::word, r12, r11, r9);           \/\/       swpal   w12, w11, [x9]\n+    __ ldaddal(Assembler::word, r6, r30, r17);         \/\/       ldaddal w6, w30, [x17]\n+    __ ldbical(Assembler::word, r27, r28, r30);        \/\/       ldclral w27, w28, [x30]\n+    __ ldeoral(Assembler::word, r7, r10, r20);         \/\/       ldeoral w7, w10, [x20]\n+    __ ldorral(Assembler::word, r10, r4, r24);         \/\/       ldsetal w10, w4, [x24]\n+    __ ldsminal(Assembler::word, r17, r17, r22);       \/\/       ldsminal        w17, w17, [x22]\n+    __ ldsmaxal(Assembler::word, r3, r29, r15);        \/\/       ldsmaxal        w3, w29, [x15]\n+    __ lduminal(Assembler::word, r22, r19, r19);       \/\/       lduminal        w22, w19, [x19]\n+    __ ldumaxal(Assembler::word, r22, r2, r15);        \/\/       ldumaxal        w22, w2, [x15]\n+\n+\/\/ LSEOp\n+    __ swpl(Assembler::word, r6, r12, r16);            \/\/       swpl    w6, w12, [x16]\n+    __ ldaddl(Assembler::word, r11, r13, r23);         \/\/       ldaddl  w11, w13, [x23]\n+    __ ldbicl(Assembler::word, r1, r30, r19);          \/\/       ldclrl  w1, w30, [x19]\n+    __ ldeorl(Assembler::word, r5, r17, r2);           \/\/       ldeorl  w5, w17, [x2]\n+    __ ldorrl(Assembler::word, r16, r22, r13);         \/\/       ldsetl  w16, w22, [x13]\n+    __ ldsminl(Assembler::word, r10, r21, r29);        \/\/       ldsminl w10, w21, [x29]\n+    __ ldsmaxl(Assembler::word, r27, r12, r27);        \/\/       ldsmaxl w27, w12, [x27]\n+    __ lduminl(Assembler::word, r3, r1, sp);           \/\/       lduminl w3, w1, [sp]\n+    __ ldumaxl(Assembler::word, r24, r19, r17);        \/\/       ldumaxl w24, w19, [x17]\n+\n+\/\/ SHA3SIMDOp\n+    __ bcax(v9, __ T16B, v27, v26, v14);               \/\/       bcax            v9.16B, v27.16B, v26.16B, v14.16B\n+    __ eor3(v6, __ T16B, v20, v22, v30);               \/\/       eor3            v6.16B, v20.16B, v22.16B, v30.16B\n+    __ rax1(v24, __ T2D, v2, v30);                     \/\/       rax1            v24.2D, v2.2D, v30.2D\n+    __ xar(v26, __ T2D, v17, v10, 46);                 \/\/       xar             v26.2D, v17.2D, v10.2D, #46\n+\n+\/\/ SHA512SIMDOp\n+    __ sha512h(v17, __ T2D, v2, v17);                  \/\/       sha512h         q17, q2, v17.2D\n+    __ sha512h2(v0, __ T2D, v24, v25);                 \/\/       sha512h2                q0, q24, v25.2D\n+    __ sha512su0(v22, __ T2D, v2);                     \/\/       sha512su0               v22.2D, v2.2D\n+    __ sha512su1(v17, __ T2D, v12, v3);                \/\/       sha512su1               v17.2D, v12.2D, v3.2D\n+\n+\/\/ SVEVectorOp\n+    __ sve_add(z27, __ S, z29, z28);                   \/\/       add     z27.s, z29.s, z28.s\n+    __ sve_sub(z26, __ D, z6, z9);                     \/\/       sub     z26.d, z6.d, z9.d\n+    __ sve_fadd(z17, __ S, z7, z4);                    \/\/       fadd    z17.s, z7.s, z4.s\n+    __ sve_fmul(z15, __ S, z9, z22);                   \/\/       fmul    z15.s, z9.s, z22.s\n+    __ sve_fsub(z2, __ D, z27, z20);                   \/\/       fsub    z2.d, z27.d, z20.d\n+    __ sve_abs(z5, __ S, p6, z0);                      \/\/       abs     z5.s, p6\/m, z0.s\n+    __ sve_add(z14, __ H, p1, z25);                    \/\/       add     z14.h, p1\/m, z14.h, z25.h\n+    __ sve_asr(z27, __ D, p5, z26);                    \/\/       asr     z27.d, p5\/m, z27.d, z26.d\n+    __ sve_cnt(z24, __ B, p5, z0);                     \/\/       cnt     z24.b, p5\/m, z0.b\n+    __ sve_lsl(z6, __ B, p4, z0);                      \/\/       lsl     z6.b, p4\/m, z6.b, z0.b\n+    __ sve_lsr(z15, __ B, p0, z9);                     \/\/       lsr     z15.b, p0\/m, z15.b, z9.b\n+    __ sve_mul(z5, __ B, p2, z27);                     \/\/       mul     z5.b, p2\/m, z5.b, z27.b\n+    __ sve_neg(z20, __ B, p5, z20);                    \/\/       neg     z20.b, p5\/m, z20.b\n+    __ sve_not(z10, __ D, p2, z16);                    \/\/       not     z10.d, p2\/m, z16.d\n+    __ sve_smax(z6, __ H, p4, z2);                     \/\/       smax    z6.h, p4\/m, z6.h, z2.h\n+    __ sve_smin(z29, __ D, p7, z2);                    \/\/       smin    z29.d, p7\/m, z29.d, z2.d\n+    __ sve_sub(z22, __ H, p7, z14);                    \/\/       sub     z22.h, p7\/m, z22.h, z14.h\n+    __ sve_fabs(z27, __ S, p4, z23);                   \/\/       fabs    z27.s, p4\/m, z23.s\n+    __ sve_fadd(z2, __ D, p3, z10);                    \/\/       fadd    z2.d, p3\/m, z2.d, z10.d\n+    __ sve_fdiv(z10, __ S, p6, z22);                   \/\/       fdiv    z10.s, p6\/m, z10.s, z22.s\n+    __ sve_fmax(z3, __ S, p5, z16);                    \/\/       fmax    z3.s, p5\/m, z3.s, z16.s\n+    __ sve_fmin(z1, __ D, p4, z16);                    \/\/       fmin    z1.d, p4\/m, z1.d, z16.d\n+    __ sve_fmul(z12, __ S, p3, z12);                   \/\/       fmul    z12.s, p3\/m, z12.s, z12.s\n+    __ sve_fneg(z16, __ D, p0, z20);                   \/\/       fneg    z16.d, p0\/m, z20.d\n+    __ sve_frintm(z5, __ D, p1, z7);                   \/\/       frintm  z5.d, p1\/m, z7.d\n+    __ sve_frintn(z12, __ D, p7, z16);                 \/\/       frintn  z12.d, p7\/m, z16.d\n+    __ sve_frintp(z6, __ S, p0, z28);                  \/\/       frintp  z6.s, p0\/m, z28.s\n+    __ sve_fsqrt(z4, __ D, p1, z17);                   \/\/       fsqrt   z4.d, p1\/m, z17.d\n+    __ sve_fsub(z13, __ S, p3, z19);                   \/\/       fsub    z13.s, p3\/m, z13.s, z19.s\n+    __ sve_fmla(z24, __ S, p5, z17, z0);               \/\/       fmla    z24.s, p5\/m, z17.s, z0.s\n+    __ sve_fmls(z23, __ S, p1, z19, z30);              \/\/       fmls    z23.s, p1\/m, z19.s, z30.s\n+    __ sve_fnmla(z16, __ S, p1, z0, z7);               \/\/       fnmla   z16.s, p1\/m, z0.s, z7.s\n+    __ sve_fnmls(z17, __ D, p6, z8, z10);              \/\/       fnmls   z17.d, p6\/m, z8.d, z10.d\n+    __ sve_mla(z20, __ B, p5, z27, z2);                \/\/       mla     z20.b, p5\/m, z27.b, z2.b\n+    __ sve_mls(z15, __ B, p4, z20, z7);                \/\/       mls     z15.b, p4\/m, z20.b, z7.b\n+    __ sve_and(z28, z7, z0);                           \/\/       and     z28.d, z7.d, z0.d\n+    __ sve_eor(z16, z19, z22);                         \/\/       eor     z16.d, z19.d, z22.d\n+    __ sve_orr(z15, z9, z22);                          \/\/       orr     z15.d, z9.d, z22.d\n+\n+\/\/ SVEReductionOp\n+    __ sve_andv(v25, __ S, p1, z30);                   \/\/       andv s25, p1, z30.s\n+    __ sve_orv(v13, __ B, p5, z11);                    \/\/       orv b13, p5, z11.b\n+    __ sve_eorv(v13, __ S, p2, z20);                   \/\/       eorv s13, p2, z20.s\n+    __ sve_smaxv(v25, __ B, p3, z4);                   \/\/       smaxv b25, p3, z4.b\n+    __ sve_sminv(v17, __ D, p2, z6);                   \/\/       sminv d17, p2, z6.d\n+    __ sve_fminv(v4, __ D, p7, z16);                   \/\/       fminv d4, p7, z16.d\n+    __ sve_fmaxv(v26, __ S, p2, z14);                  \/\/       fmaxv s26, p2, z14.s\n+    __ sve_fadda(v11, __ S, p7, z3);                   \/\/       fadda s11, p7, s11, z3.s\n+    __ sve_uaddv(v1, __ S, p6, z21);                   \/\/       uaddv d1, p6, z21.s\n+\n+    __ bind(forth);\n+\n+\/*\n+*\/\n+\n+  static const unsigned int insns[] =\n+  {\n+    0x8b0d82fa,     0xcb49970c,     0xab889dfc,     0xeb9ee787,\n+    0x0b9b3ec9,     0x4b9179a3,     0x2b88474e,     0x6b8c56c0,\n+    0x8a1a51e0,     0xaa11f4ba,     0xca0281b8,     0xea918c7c,\n+    0x0a5d4a19,     0x2a4b262d,     0x4a513ca5,     0x6a9b6ae2,\n+    0x8a70b79b,     0xaaba9728,     0xca6dfe3d,     0xea627f1c,\n+    0x0aa70f53,     0x2aaa0f06,     0x4a6176a4,     0x6a604eb0,\n+    0x1105ed91,     0x3100583e,     0x5101f8bd,     0x710f0306,\n+    0x9101a1a0,     0xb10a5cc8,     0xd10810aa,     0xf10fd061,\n+    0x120cb166,     0x321764bc,     0x52174681,     0x720c0227,\n+    0x9241018e,     0xb25a2969,     0xd278b411,     0xf26aad01,\n+    0x14000000,     0x17ffffd7,     0x140002d0,     0x94000000,\n+    0x97ffffd4,     0x940002cd,     0x3400000a,     0x34fffa2a,\n+    0x3400594a,     0x35000008,     0x35fff9c8,     0x350058e8,\n+    0xb400000b,     0xb4fff96b,     0xb400588b,     0xb500001d,\n+    0xb5fff91d,     0xb500583d,     0x10000013,     0x10fff8b3,\n+    0x100057d3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305756,     0x3758000c,     0x375ff7cc,     0x375856ec,\n+    0x128313a0,     0x528a32c7,     0x7289173b,     0x92ab3acc,\n+    0xd2a0bf94,     0xf2c285e8,     0x9358722f,     0x330e652f,\n+    0x53067f3b,     0x93577c53,     0xb34a1aac,     0xd35a4016,\n+    0x13946c63,     0x93c3dbc8,     0x54000000,     0x54fff5a0,\n+    0x540054c0,     0x54000001,     0x54fff541,     0x54005461,\n+    0x54000002,     0x54fff4e2,     0x54005402,     0x54000002,\n+    0x54fff482,     0x540053a2,     0x54000003,     0x54fff423,\n+    0x54005343,     0x54000003,     0x54fff3c3,     0x540052e3,\n+    0x54000004,     0x54fff364,     0x54005284,     0x54000005,\n+    0x54fff305,     0x54005225,     0x54000006,     0x54fff2a6,\n+    0x540051c6,     0x54000007,     0x54fff247,     0x54005167,\n+    0x54000008,     0x54fff1e8,     0x54005108,     0x54000009,\n+    0x54fff189,     0x540050a9,     0x5400000a,     0x54fff12a,\n+    0x5400504a,     0x5400000b,     0x54fff0cb,     0x54004feb,\n+    0x5400000c,     0x54fff06c,     0x54004f8c,     0x5400000d,\n+    0x54fff00d,     0x54004f2d,     0x5400000e,     0x54ffefae,\n+    0x54004ece,     0x5400000f,     0x54ffef4f,     0x54004e6f,\n+    0xd40658e1,     0xd4014d22,     0xd4046543,     0xd4273f60,\n+    0xd44cad80,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,\n+    0xd5033fdf,     0xd5033e9f,     0xd50332bf,     0xd61f0200,\n+    0xd63f0280,     0xc80a7d1b,     0xc800fea1,     0xc85f7fb1,\n+    0xc85fff9d,     0xc89ffee1,     0xc8dffe95,     0x88167e7b,\n+    0x880bfcd0,     0x885f7c11,     0x885ffd44,     0x889ffed8,\n+    0x88dffe6a,     0x48017fc5,     0x4808fe2c,     0x485f7dc9,\n+    0x485ffc27,     0x489ffe05,     0x48dffd82,     0x080a7c6c,\n+    0x081cff4e,     0x085f7d5e,     0x085ffeae,     0x089ffd2d,\n+    0x08dfff76,     0xc87f4d7c,     0xc87fcc5e,     0xc8220417,\n+    0xc82cb5f0,     0x887f55b1,     0x887ff90b,     0x88382c2d,\n+    0x883aedb5,     0xf819928b,     0xb803e21c,     0x381f713b,\n+    0x781ce322,     0xf850f044,     0xb85e129e,     0x385e92f1,\n+    0x785ff35d,     0x39801921,     0x7881318b,     0x78dce02b,\n+    0xb8829313,     0xfc45f318,     0xbc5d50af,     0xfc001375,\n+    0xbc1951b7,     0xf8008c0a,     0xb801dc03,     0x38009dca,\n+    0x781fdf3d,     0xf8570e0c,     0xb85faecc,     0x385f6d6d,\n+    0x785ebea0,     0x38804cd7,     0x789cbce3,     0x78df9c9c,\n+    0xb89eed18,     0xfc40cd6e,     0xbc5bdd93,     0xfc103c14,\n+    0xbc040c08,     0xf81a2783,     0xb81ca4eb,     0x381e855b,\n+    0x7801b4e6,     0xf853654d,     0xb85d74af,     0x384095a2,\n+    0x785ec5bc,     0x389e15a9,     0x789dc703,     0x78c06474,\n+    0xb89ff667,     0xfc57e51e,     0xbc4155f9,     0xfc05a6ee,\n+    0xbc1df408,     0xf835da2a,     0xb836d9a4,     0x3833580d,\n+    0x7826cb6c,     0xf8706900,     0xb87ae880,     0x3865db2e,\n+    0x78714889,     0x38a7789b,     0x78beca2f,     0x78f6c810,\n+    0xb8bef956,     0xfc6afabd,     0xbc734963,     0xfc3d5b8d,\n+    0xbc25fbb7,     0xf9189d05,     0xb91ecb1d,     0x39187a33,\n+    0x791f226d,     0xf95aa2f3,     0xb9587bb7,     0x395f7176,\n+    0x795d9143,     0x399e7e08,     0x799a2697,     0x79df3422,\n+    0xb99c2624,     0xfd5c2374,     0xbd5fa1d9,     0xfd1d595a,\n+    0xbd1b1869,     0x58003ebb,     0x1800000b,     0xf8945060,\n+    0xd8000000,     0xf8ae6ba0,     0xf99a0080,     0x1a070035,\n+    0x3a0700a8,     0x5a0e0367,     0x7a11009b,     0x9a000380,\n+    0xba1e030c,     0xda0f0320,     0xfa030301,     0x0b340b11,\n+    0x2b2a278d,     0xcb22aa0f,     0x6b2d29bd,     0x8b2cce8c,\n+    0xab2b877e,     0xcb21c8ee,     0xeb3ba47d,     0x3a4d400e,\n+    0x7a5132c6,     0xba5e622e,     0xfa53814c,     0x3a52d8c2,\n+    0x7a4d8924,     0xba4b3aab,     0xfa4d7882,     0x1a96804c,\n+    0x1a912618,     0x5a90b0e6,     0x5a96976b,     0x9a9db06a,\n+    0x9a9b374c,     0xda95c14f,     0xda89c6fe,     0x5ac0015e,\n+    0x5ac005fd,     0x5ac00bdd,     0x5ac012b9,     0x5ac01404,\n+    0xdac002b1,     0xdac0061d,     0xdac00a95,     0xdac00e66,\n+    0xdac0107e,     0xdac01675,     0x1ac00b0b,     0x1ace0f3b,\n+    0x1ad121c3,     0x1ad825e7,     0x1ad92a3c,     0x1adc2f42,\n+    0x9ada0b25,     0x9ad10e1b,     0x9acc22a6,     0x9acc2480,\n+    0x9adc2a3b,     0x9ad12c5c,     0x9bce7dea,     0x9b597c6e,\n+    0x1b0e166f,     0x1b1ae490,     0x9b023044,     0x9b089e3d,\n+    0x9b391083,     0x9b24c73a,     0x9bb15f40,     0x9bbcc6af,\n+    0x7ea3d55b,     0x1e3908e0,     0x1e2f18c9,     0x1e2a29fd,\n+    0x1e273a22,     0x7ef7d56b,     0x1e770ba7,     0x1e6b1b6e,\n+    0x1e78288b,     0x1e6e39ec,     0x1f1c3574,     0x1f17f98b,\n+    0x1f2935da,     0x1f2574ea,     0x1f4b306f,     0x1f5ec7cf,\n+    0x1f6f3e93,     0x1f6226a9,     0x1e2040fb,     0x1e20c3dd,\n+    0x1e214031,     0x1e21c0c2,     0x1e22c06a,     0x1e604178,\n+    0x1e60c027,     0x1e61400b,     0x1e61c223,     0x1e6240dc,\n+    0x1e3800d6,     0x9e380360,     0x1e78005a,     0x9e7800e5,\n+    0x1e22017c,     0x9e2201b9,     0x1e6202eb,     0x9e620113,\n+    0x1e2602b1,     0x9e660299,     0x1e270233,     0x9e6703a2,\n+    0x1e2822c0,     0x1e7322a0,     0x1e202288,     0x1e602168,\n+    0x293c19f4,     0x2966387b,     0x69762970,     0xa9041dc7,\n+    0xa9475c0c,     0x29b61ccd,     0x29ee3c5e,     0x69ee0764,\n+    0xa9843977,     0xa9f46ebd,     0x28ba16b6,     0x28fc44db,\n+    0x68f61430,     0xa8b352cd,     0xa8c56d5e,     0x28024565,\n+    0x2874134e,     0xa8027597,     0xa87b1aa0,     0x0c40734f,\n+    0x4cdfa177,     0x0cc76ee8,     0x4cdf2733,     0x0d40c23d,\n+    0x4ddfcaf8,     0x0dd9ccaa,     0x4c408d51,     0x0cdf85ec,\n+    0x4d60c239,     0x0dffcbc1,     0x4de9ce30,     0x4cc24999,\n+    0x0c404a7a,     0x4d40e6af,     0x4ddfe9b9,     0x0dddef8e,\n+    0x4cdf07b1,     0x0cc000fb,     0x0d60e238,     0x0dffe740,\n+    0x0de2eb2c,     0x0e31baf6,     0x4e31bb9b,     0x0e71b8a4,\n+    0x4e71b907,     0x4eb1b8e6,     0x0e30a841,     0x4e30ab7a,\n+    0x0e70aa0f,     0x4e70a862,     0x4eb0a9cd,     0x6e30f9cd,\n+    0x0e31ab38,     0x4e31ab17,     0x0e71a8a4,     0x4e71aa93,\n+    0x4eb1aa0f,     0x6eb0f820,     0x0e20b8a4,     0x4e20bab4,\n+    0x0e60b98b,     0x4e60bbdd,     0x0ea0ba0f,     0x4ea0bad5,\n+    0x4ee0b8a4,     0x0ea0f9ee,     0x4ea0faf6,     0x4ee0fb59,\n+    0x2ea0f8e6,     0x6ea0f9ac,     0x6ee0f9ee,     0x2ea1f9cd,\n+    0x6ea1f9ee,     0x6ee1f949,     0x2e205b59,     0x6e205bbc,\n+    0x0e2c1d6a,     0x4e351e93,     0x0ead1d8b,     0x4eb31e51,\n+    0x2e371ed5,     0x6e311e0f,     0x0e3686b4,     0x4e398717,\n+    0x0e7c877a,     0x4e6784c5,     0x0ea884e6,     0x4eb1860f,\n+    0x4ef1860f,     0x0e3bd759,     0x4e32d630,     0x4e7dd79b,\n+    0x2e3a8738,     0x6e31860f,     0x2e7b8759,     0x6e7085ee,\n+    0x2eac856a,     0x6eaf85cd,     0x6ef085ee,     0x0eb6d6b4,\n+    0x4ea3d441,     0x4ef8d6f6,     0x0e209ffe,     0x4e309dee,\n+    0x0e649c62,     0x4e689ce6,     0x0ea59c83,     0x4ea99d07,\n+    0x2ebad738,     0x6ea2d420,     0x6efdd79b,     0x2e3fdfdd,\n+    0x6e27dcc5,     0x6e67dcc5,     0x0e7f97dd,     0x4e6d958b,\n+    0x0ebb9759,     0x4ea29420,     0x0e20cffe,     0x4e22cc20,\n+    0x4e73ce51,     0x2e7e97bc,     0x6e7b9759,     0x2eab9549,\n+    0x6ebb9759,     0x0eaecdac,     0x4eb1ce0f,     0x4eedcd8b,\n+    0x2e2cfd6a,     0x6e33fe51,     0x6e7aff38,     0x0e3766d5,\n+    0x4e396717,     0x0e626420,     0x4e726630,     0x0eac656a,\n+    0x4ea864e6,     0x0e3ef7bc,     0x4e28f4e6,     0x4e67f4c5,\n+    0x0e276cc5,     0x4e366eb4,     0x0e736e51,     0x4e716e0f,\n+    0x0eb36e51,     0x4ebf6fdd,     0x0ebcf77a,     0x4ebef7bc,\n+    0x4ee3f441,     0x2e3d8f9b,     0x6e228c20,     0x2e768eb4,\n+    0x6e7e8fbc,     0x2eb18e0f,     0x6eae8dac,     0x6eec8d6a,\n+    0x0e3ee7bc,     0x4e3ee7bc,     0x4e75e693,     0x0e3836f6,\n+    0x4e2c356a,     0x0e6634a4,     0x4e6037fe,     0x0eb636b4,\n+    0x4eaa3528,     0x4ee037fe,     0x2eb3e651,     0x6eace56a,\n+    0x6efde79b,     0x0e243c62,     0x4e3a3f38,     0x0e663ca4,\n+    0x4e653c83,     0x0eaa3d28,     0x4eb83ef6,     0x4ef33e51,\n+    0x2e2fe5cd,     0x6e26e4a4,     0x6e7ee7bc,     0xba5fd3e3,\n+    0x3a5f03e5,     0xfa411be4,     0x7a42cbe2,     0x93df03ff,\n+    0xc820ffff,     0x8822fc7f,     0xc8247cbf,     0x88267fff,\n+    0x4e010fe0,     0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,\n+    0x4e071fe1,     0x4cc0ac3f,     0x05a08020,     0x04b0e3e0,\n+    0x0470e7e1,     0x042f9c20,     0x043f9c35,     0x047f9c20,\n+    0x04ff9c20,     0x04299420,     0x04319160,     0x0461943e,\n+    0x04a19020,     0x042053ff,     0x047f5401,     0x25208028,\n+    0x2538cfe0,     0x2578d001,     0x25b8efe2,     0x25f8f007,\n+    0xa400a3e0,     0xa4a8a7ea,     0xa547a814,     0xa4084ffe,\n+    0xa55c53e0,     0xa5e1540b,     0xe400fbf6,     0xe408ffff,\n+    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n+    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8388355,\n+    0xf8380303,     0xf83a11f7,     0xf8352303,     0xf8283299,\n+    0xf8305051,     0xf8214300,     0xf8247183,     0xf83f615c,\n+    0xf8ba8182,     0xf8b0003f,     0xf8ad101d,     0xf8b3222c,\n+    0xf8b6338d,     0xf8be503f,     0xf8ba409c,     0xf8be70c4,\n+    0xf8be61fa,     0xf8e98188,     0xf8e00034,     0xf8f81002,\n+    0xf8e92358,     0xf8f0307e,     0xf8ea5157,     0xf8e44050,\n+    0xf8eb7148,     0xf8ef6051,     0xf86a818c,     0xf86f004d,\n+    0xf8671354,     0xf8702044,     0xf86431ec,     0xf87551f0,\n+    0xf86b42f5,     0xf86c72fa,     0xf87c616e,     0xb8388181,\n+    0xb83f020a,     0xb8271062,     0xb82d2233,     0xb8303023,\n+    0xb82b50be,     0xb82843af,     0xb83e7280,     0xb82762f4,\n+    0xb8bc8375,     0xb8b90025,     0xb8b713f0,     0xb8a5212c,\n+    0xb8bc33af,     0xb8b6527f,     0xb8bf41c5,     0xb8b071ff,\n+    0xb8bb6214,     0xb8ec812b,     0xb8e6023e,     0xb8fb13dc,\n+    0xb8e7228a,     0xb8ea3304,     0xb8f152d1,     0xb8e341fd,\n+    0xb8f67273,     0xb8f661e2,     0xb866820c,     0xb86b02ed,\n+    0xb861127e,     0xb8652051,     0xb87031b6,     0xb86a53b5,\n+    0xb87b436c,     0xb86373e1,     0xb8786233,     0xce3a3b69,\n+    0xce167a86,     0xce7e8c58,     0xce8aba3a,     0xce718051,\n+    0xce798700,     0xcec08056,     0xce638991,     0x04bc03bb,\n+    0x04e904da,     0x658400f1,     0x6596092f,     0x65d40762,\n+    0x0496b805,     0x0440072e,     0x04d0975b,     0x041ab418,\n+    0x04139006,     0x0411812f,     0x04100b65,     0x0417b694,\n+    0x04deaa0a,     0x04481046,     0x04ca1c5d,     0x04411dd6,\n+    0x049cb2fb,     0x65c08d42,     0x658d9aca,     0x65869603,\n+    0x65c79201,     0x65828d8c,     0x04dda290,     0x65c2a4e5,\n+    0x65c0be0c,     0x6581a386,     0x65cda624,     0x65818e6d,\n+    0x65a01638,     0x65be2677,     0x65a74410,     0x65ea7911,\n+    0x04025774,     0x0407728f,     0x042030fc,     0x04b63270,\n+    0x0476312f,     0x049a27d9,     0x0418356d,     0x04992a8d,\n+    0x04082c99,     0x04ca28d1,     0x65c73e04,     0x658629da,\n+    0x65983c6b,     0x04813aa1,\n+  };\n+\/\/ END  Generated code -- do not edit\n+\n+  asm_check((unsigned int *)entry, insns, sizeof insns \/ sizeof insns[0]);\n+\n+  {\n+    address PC = __ pc();\n+    __ ld1(v0, __ T16B, Address(r16));      \/\/ No offset\n+    __ ld1(v0, __ T8H, __ post(r16, 16));   \/\/ Post-index\n+    __ ld2(v0, v1, __ T8H, __ post(r24, 16 * 2));   \/\/ Post-index\n+    __ ld1(v0, __ T16B, __ post(r16, r17)); \/\/ Register post-index\n+    static const unsigned int vector_insns[] = {\n+       0x4c407200, \/\/ ld1   {v0.16b}, [x16]\n+       0x4cdf7600, \/\/ ld1   {v0.8h}, [x16], #16\n+       0x4cdf8700, \/\/ ld2   {v0.8h, v1.8h}, [x24], #32\n+       0x4cd17200, \/\/ ld1   {v0.16b}, [x16], x17\n+      };\n+    asm_check((unsigned int *)PC, vector_insns,\n+              sizeof vector_insns \/ sizeof vector_insns[0]);\n+  }\n+\n+  BufferBlob::free(b);\n+}\n+\n+#endif  \/\/ AARCH64\n","filename":"test\/hotspot\/gtest\/aarch64\/test_assembler_aarch64.cpp","additions":1195,"deletions":0,"binary":false,"changes":1195,"status":"added"}]}