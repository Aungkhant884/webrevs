{"files":[{"patch":"@@ -75,0 +75,1 @@\n+<li><a href=\"#alignas\" id=\"toc-alignas\">alignas<\/a><\/li>\n@@ -601,1 +602,1 @@\n-<code>std::nullptr_t<\/code>.<\/li>\n+<code>std::nullptr_t<\/code> and <code>std::max_align_t<\/code>.<\/li>\n@@ -673,0 +674,47 @@\n+<h3 id=\"alignas\">alignas<\/h3>\n+<p><em>Alignment-specifiers<\/em> (<code>alignas<\/code> <a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2341.pdf\">n2341<\/a>)\n+are permitted, with restrictions.<\/p>\n+<p><em>Alignment-specifiers<\/em> are permitted when the requested\n+alignment is a <em>fundamental alignment<\/em> (not greater than\n+<code>alignof(std::max_align_t)<\/code> <a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+3.11\/2<\/a>).<\/p>\n+<p><em>Alignment-specifiers<\/em> with an <em>extended alignment<\/em>\n+(greater than <code>alignof(std::max_align_t)<\/code> <a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+3.11\/3<\/a>) may only be used to align variables with static or automatic\n+storage duration (<a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+3.7.1, 3.7.3<\/a>). As a consequence, <em>over-aligned types<\/em> are\n+forbidden; this may change if HotSpot updates to using C++17 or later\n+(<a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0035r4.html\">p0035r4<\/a>).<\/p>\n+<p>Large <em>extended alignments<\/em> should be avoided, particularly\n+for stack allocated objects. What is a large value may depend on the\n+platform and configuration. There may also be hard limits for some\n+platforms.<\/p>\n+<p>An <em>alignment-specifier<\/em> must always be applied to a\n+definition (<a\n+href=\"https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf\">C++14\n+10.6.2\/6<\/a>). (C++ allows an <em>alignment-specifier<\/em> to optionally\n+also be applied to a declaration, so long as the definition has\n+equivalent alignment. There isn't any known benefit from duplicating the\n+alignment in a non-definition declaration, so such duplication should be\n+avoided in HotSpot code.)<\/p>\n+<p>Enumerations are forbidden from having <em>alignment-specifiers<\/em>.\n+Aligned enumerations were originally permitted but insufficiently\n+specified, and were later (C++20) removed (<a\n+href=\"https:\/\/cplusplus.github.io\/CWG\/issues\/2354.html\">CWG 2354<\/a>).\n+Permitting such usage in HotSpot now would just cause problems in the\n+future.<\/p>\n+<p><em>Alignment-specifiers<\/em> are forbidden in <code>typedef<\/code>\n+and <em>alias-declarations<\/em>. This may work or may have worked in\n+some versions of some compilers, but was later (C++14) explicitly\n+disallowed (<a\n+href=\"https:\/\/cplusplus.github.io\/CWG\/issues\/1437.html\">CWG\n+1437<\/a>).<\/p>\n+<p>The HotSpot macro <code>ATTRIBUTE_ALIGNED<\/code> provides similar\n+capabilities for platforms that define it. This macro predates the use\n+by HotSpot of C++ versions providing <code>alignas<\/code>. New code\n+should use <code>alignas<\/code>.<\/p>\n","filename":"doc\/hotspot-style.html","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -576,1 +576,1 @@\n-* `#include <cstddef>` to use `std::nullptr_t`.\n+* `#include <cstddef>` to use `std::nullptr_t` and `std::max_align_t`.\n@@ -654,0 +654,45 @@\n+### alignas\n+\n+_Alignment-specifiers_ (`alignas`\n+[n2341](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2341.pdf))\n+are permitted, with restrictions.\n+\n+_Alignment-specifiers_ are permitted when the requested alignment is a\n+_fundamental alignment_ (not greater than `alignof(std::max_align_t)`\n+[C++14 3.11\/2](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf)).\n+\n+_Alignment-specifiers_ with an _extended alignment_ (greater than\n+`alignof(std::max_align_t)`\n+[C++14 3.11\/3](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf))\n+may only be used to align variables with static or automatic storage duration\n+([C++14 3.7.1, 3.7.3](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf)).\n+As a consequence, _over-aligned types_ are forbidden; this may change if\n+HotSpot updates to using C++17 or later\n+([p0035r4](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0035r4.html)).\n+\n+Large _extended alignments_ should be avoided, particularly for stack\n+allocated objects. What is a large value may depend on the platform and\n+configuration. There may also be hard limits for some platforms.\n+\n+An _alignment-specifier_ must always be applied to a definition\n+([C++14 10.6.2\/6](https:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2014\/n4296.pdf)).\n+(C++ allows an _alignment-specifier_ to optionally also be applied to a\n+declaration, so long as the definition has equivalent alignment. There isn't\n+any known benefit from duplicating the alignment in a non-definition\n+declaration, so such duplication should be avoided in HotSpot code.)\n+\n+Enumerations are forbidden from having _alignment-specifiers_. Aligned\n+enumerations were originally permitted but insufficiently specified, and were\n+later (C++20) removed\n+([CWG 2354](https:\/\/cplusplus.github.io\/CWG\/issues\/2354.html)).\n+Permitting such usage in HotSpot now would just cause problems in the future.\n+\n+_Alignment-specifiers_ are forbidden in `typedef` and _alias-declarations_.\n+This may work or may have worked in some versions of some compilers, but was\n+later (C++14) explicitly disallowed\n+([CWG 1437](https:\/\/cplusplus.github.io\/CWG\/issues\/1437.html)).\n+\n+The HotSpot macro `ATTRIBUTE_ALIGNED` provides similar capabilities for\n+platforms that define it. This macro predates the use by HotSpot of C++\n+versions providing `alignas`. New code should use `alignas`.\n+\n","filename":"doc\/hotspot-style.md","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}