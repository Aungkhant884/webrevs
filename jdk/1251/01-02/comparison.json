{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import static jdk.test.lib.Asserts.assertFalse;\n@@ -28,0 +29,1 @@\n+import java.nio.file.Files;\n@@ -29,0 +31,1 @@\n+import java.util.List;\n@@ -117,0 +120,1 @@\n+        testDumpCompressed();\n@@ -214,1 +218,1 @@\n-        dump(false, false);\n+        dump(false, false, false);\n@@ -218,1 +222,1 @@\n-        dump(true, false);\n+        dump(true, false, false);\n@@ -222,1 +226,1 @@\n-        dump(false, true);\n+        dump(false, true, false);\n@@ -225,1 +229,5 @@\n-    private static void dump(boolean live, boolean explicitAll) throws Exception {\n+    private static void testDumpCompressed() throws Exception {\n+        dump(true, false, true);\n+    }\n+\n+    private static void dump(boolean live, boolean explicitAll, boolean compressed) throws Exception {\n@@ -228,0 +236,1 @@\n+        String compressArg = \"\";\n@@ -240,1 +249,7 @@\n-        File file = new File(\"jmap.dump\" + System.currentTimeMillis() + \".hprof\");\n+        String filePath = \"jmap.dump\" + System.currentTimeMillis() + \".hprof\";\n+        if (compressed) {\n+            compressArg = \"gz=1,\";\n+            filePath = filePath + \".gz\";\n+        }\n+\n+        File file = new File(filePath);\n@@ -247,1 +262,1 @@\n-        allArgs = allArgs + liveArg + \"format=b,\" + fileArg;\n+        allArgs = allArgs + liveArg + compressArg + \"format=b,\" + fileArg;\n@@ -251,1 +266,1 @@\n-        verifyDumpFile(file);\n+        verifyDumpFile(file, compressed);\n@@ -255,1 +270,1 @@\n-    private static void verifyDumpFile(File dump) {\n+    private static void verifyDumpFile(File dump, boolean compressed) {\n@@ -258,1 +273,12 @@\n-            HprofParser.parse(dump);\n+            File out = HprofParser.parse(dump);\n+\n+            assertTrue(out != null && out.exists() && out.isFile(),\n+                       \"Could not find hprof parser output file\");\n+            List<String> lines = Files.readAllLines(out.toPath());\n+            assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n+            for (String line : lines) {\n+                assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve \" +\n+                                                 \"object.*constantPoolOop.*).*\"));\n+            }\n+\n+            out.delete();\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"}]}