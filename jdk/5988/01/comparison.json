{"files":[{"patch":"@@ -639,1 +639,3 @@\n-                            \"Error configuring filter: {0}\", re);\n+                            \"Error configuring filter: {0}\", (Object) re);\n+                    \/\/ Do not continue if configuration not initialized\n+                    throw re;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.File;\n+import java.io.ObjectInputFilter;\n+\n+\/*\n+ * @test\n+ * @bug 8269336\n+ * @summary Test that an invalid pattern value for the jdk.serialFilter system property causes an\n+ * exception to be thrown in the class initialization of java.io.ObjectInputFilter.Config class\n+ * @library \/test\/lib\n+ * @run driver InvalidGlobalFilterTest\n+ *\/\n+public class InvalidGlobalFilterTest {\n+    private static final String serialPropName = \"jdk.serialFilter\";\n+\n+    \/**\n+     * Launches multiple instances of a Java program by passing each instance an invalid value\n+     * for the {@code jdk.serialFilter} system property. The launched program then triggers the\n+     * class initialization of {@code ObjectInputFilter.Config} class to have it parse the (invalid)\n+     * value of the system property. The launched program is expected to propagate the exception\n+     * raised by the {@code ObjectInputFilter.Config} initialization and the test asserts that the\n+     * launched program did indeed fail with this expected exception.\n+     *\/\n+    public static void main(final String[] args) throws Exception {\n+        final String[] invalidPatterns = {\".*\", \".**\", \"!\", \"\/java.util.Hashtable\", \"java.base\/\", \"\/\"};\n+        for (final String invalidPattern : invalidPatterns) {\n+            final ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+                    \"-D\" + serialPropName + \"=\" + invalidPattern,\n+                    \"-Djava.util.logging.config.file=\" + System.getProperty(\"test.src\")\n+                            + File.separator + \"logging.properties\",\n+                    ObjectInputFilterConfigLoader.class.getName());\n+            \/\/ launch a process by passing it an invalid value for -Djdk.serialFilter\n+            final OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(processBuilder);\n+            try {\n+                \/\/ we expect the JVM launch to fail\n+                outputAnalyzer.shouldNotHaveExitValue(0);\n+                \/\/ do an additional check to be sure it failed for the right reason\n+                outputAnalyzer.stderrShouldContain(\"java.lang.ExceptionInInitializerError\");\n+            } finally {\n+                \/\/ fail or pass, we print out the generated output from the launched program\n+                \/\/ for any debugging\n+                System.err.println(\"Diagnostics from process \" + outputAnalyzer.pid() + \":\");\n+                \/\/ print out any stdout\/err that was generated in the launched program\n+                outputAnalyzer.reportDiagnosticSummary();\n+            }\n+        }\n+    }\n+\n+    \/\/ A main() class which just triggers the class initialization of ObjectInputFilter.Config\n+    private static final class ObjectInputFilterConfigLoader {\n+\n+        public static void main(final String[] args) throws Exception {\n+            System.out.println(\"JVM was launched with \" + serialPropName\n+                    + \" system property set to \" + System.getProperty(serialPropName));\n+            \/\/ this call is expected to fail and we aren't interested in the result.\n+            \/\/ we just let the exception propagate out of this call and fail the\n+            \/\/ launched program. The test which launched this main, then asserts\n+            \/\/ that the exception was indeed thrown.\n+            ObjectInputFilter.Config.getSerialFilter();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/InvalidGlobalFilterTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}