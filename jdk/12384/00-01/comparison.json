{"files":[{"patch":"@@ -414,1 +414,1 @@\n-    \/\/ 8297539. This matches with Template #5  of cast<To>(From).\n+    \/\/ This matches with Template #5  of cast<To>(From).\n@@ -499,1 +499,1 @@\n-  \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+  \/\/ This matches with Template #5 of cast<To>(From).\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-    \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+    \/\/ This matches with Template #5 of cast<To>(From).\n@@ -419,1 +419,1 @@\n-  \/\/ 8297539. This matches with Template #6 of cast<To>(From).\n+  \/\/ This matches with Template #6 of cast<To>(From).\n@@ -432,1 +432,1 @@\n-  \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+  \/\/ This matches with Template #5 of cast<To>(From).\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-      \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+      \/\/ This matches with Template #5 of cast<To>(From).\n@@ -298,1 +298,1 @@\n-      \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+      \/\/ This matches with Template #5 of cast<To>(From).\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -680,1 +680,1 @@\n-  \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+  \/\/ This matches with Template #5 of cast<To>(From).\n@@ -690,1 +690,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"utilities\/globalJavaValue.hpp\"\n","filename":"src\/hotspot\/share\/code\/compressedStream.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-    \/\/ 8297539. There is no Template in cast<to>(From) for this case.\n+    \/\/ There is no Template in cast<to>(From) for this case.\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"  \/\/ Just for definition of uint.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPauseType.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-class JavaValue;\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -713,1 +713,1 @@\n-    case 'F': tty->print(\"%f\", PrimitiveConversions::cast<jfloat>(value)); break; \/\/ 8297539. This matches with Template #6 of cast<To>(from).\n+    case 'F': tty->print(\"%f\", PrimitiveConversions::cast<jfloat>(value)); break; \/\/ This matches with Template #6 of cast<To>(from).\n@@ -715,1 +715,1 @@\n-    case 'D': tty->print(\"%lf\", PrimitiveConversions::cast<jdouble>(value)); break;\/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+    case 'D': tty->print(\"%lf\", PrimitiveConversions::cast<jdouble>(value)); break;\/\/ This matches with Template #5 of cast<To>(From).\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/globalDefinitionsForConversions.hpp\"\n@@ -33,12 +34,0 @@\n-\/\/ 8297539. Since the globalDefinitions.hpp is not included anymore, the\n-\/\/ following required types are defined here.\n-typedef float jfloat;\n-typedef double jdouble;\n-\/\/ uint is needed by the following include sequence:\n-\/\/   g1GCPauseType.hpp\n-\/\/     utilities\/enumIterator.hpp\n-\/\/       metaprogramming\/primitiveConversions.hpp (this file)\n-\/\/ Since globalDefinitions.hpp is not any more included here, the uint definition is explicitly written here instead.\n-typedef unsigned int uint;\n-\n-\n@@ -145,1 +134,1 @@\n-  \/\/ 8297539. To be able to use cast for floating-point narrowing and widening cases.\n+  \/\/ To be able to use cast for floating-point narrowing and widening cases.\n@@ -159,1 +148,1 @@\n-  \/\/ 8297539. To be able to use cast for integral narrowing and widening cases.\n+  \/\/ To be able to use cast for integral narrowing and widening cases.\n@@ -170,1 +159,1 @@\n-  \/\/ 8297539. To be able to use cast for \"int* <-> float*\" casts.\n+  \/\/ To be able to use cast for \"int* <-> float*\" casts.\n","filename":"src\/hotspot\/share\/metaprogramming\/primitiveConversions.hpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/globalJavaValue.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  \/\/ 8297539. These casts match with Template #5 of cast<To>(From).\n+  \/\/ These casts match with Template #5 of cast<To>(From).\n@@ -258,1 +258,1 @@\n-  \/\/ 8297539. These casts match with Template #5 of cast<To>(From).\n+  \/\/ These casts match with Template #5 of cast<To>(From).\n@@ -451,1 +451,1 @@\n-  \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+  \/\/ This matches with Template #5 of cast<To>(From).\n@@ -520,1 +520,1 @@\n-      \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+      \/\/ This matches with Template #5 of cast<To>(From).\n@@ -523,1 +523,1 @@\n-      \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+      \/\/ This matches with Template #5 of cast<To>(From).\n@@ -533,1 +533,1 @@\n-  \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+  \/\/ This matches with Template #5 of cast<To>(From).\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -45,1 +45,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -51,1 +51,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -57,1 +57,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -63,1 +63,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -66,1 +66,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntimeMath.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-      \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+      \/\/ This matches with Template #8 of cast<To>(From).\n@@ -166,1 +166,1 @@\n-      \/\/ 8297539. This matches with Template #7 of cast<To>(From).\n+      \/\/ This matches with Template #7 of cast<To>(From).\n@@ -189,1 +189,1 @@\n-      \/\/ 8297539. This matches with Template #7 of cast<To>(From).\n+      \/\/ This matches with Template #7 of cast<To>(From).\n@@ -218,1 +218,1 @@\n-    \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n+    \/\/ This matches with Template #5 of cast<To>(From).\n@@ -224,1 +224,1 @@\n-    \/\/ 8297539. This matches with Template #1 of cast<To>(From).\n+    \/\/ This matches with Template #1 of cast<To>(From).\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n@@ -88,1 +88,1 @@\n-  \/\/ 8297539. In arm32 bit builds, no cast<To>(From) can be found by compiler.\n+  \/\/ In arm32 bit builds, no cast<To>(From) can be found by compiler.\n@@ -121,1 +121,1 @@\n-  \/\/ 8297539. This matches with Template #8 of cast<To>(From).\n+  \/\/ This matches with Template #8 of cast<To>(From).\n","filename":"src\/hotspot\/share\/runtime\/stackValueCollection.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"metaprogramming\/primitiveConversions.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/globalJavaValue.hpp\"\n@@ -662,11 +662,0 @@\n-\/\/----------------------------------------------------------------------------------------------------\n-\/\/ Special casts\n-\/\/ Cast floats into same-size integers and vice-versa w\/o changing bit-pattern\n-\n-inline jint    jint_cast    (jfloat  x)  { return PrimitiveConversions::cast<jint>(x);    } \/\/ 8297539. Template #5 of cast<To>(From).\n-inline jfloat  jfloat_cast  (jint    x)  { return PrimitiveConversions::cast<jfloat>(x);  } \/\/ 8297539. Tempalte #5\n-\n-inline jlong   jlong_cast   (jdouble x)  { return PrimitiveConversions::cast<jlong>(x);   } \/\/ 8297539. Tempalte #5\n-inline julong  julong_cast  (jdouble x)  { return PrimitiveConversions::cast<julong>(x);  } \/\/ 8297539. Tempalte #5\n-inline jdouble jdouble_cast (jlong   x)  { return PrimitiveConversions::cast<jdouble>(x); } \/\/ 8297539. Tempalte #5\n-\n@@ -699,28 +688,0 @@\n-\/\/ NOTE: replicated in SA in vm\/agent\/sun\/jvm\/hotspot\/runtime\/BasicType.java\n-enum BasicType {\n-\/\/ The values T_BOOLEAN..T_LONG (4..11) are derived from the JVMS.\n-  T_BOOLEAN     = JVM_T_BOOLEAN,\n-  T_CHAR        = JVM_T_CHAR,\n-  T_FLOAT       = JVM_T_FLOAT,\n-  T_DOUBLE      = JVM_T_DOUBLE,\n-  T_BYTE        = JVM_T_BYTE,\n-  T_SHORT       = JVM_T_SHORT,\n-  T_INT         = JVM_T_INT,\n-  T_LONG        = JVM_T_LONG,\n-  \/\/ The remaining values are not part of any standard.\n-  \/\/ T_OBJECT and T_VOID denote two more semantic choices\n-  \/\/ for method return values.\n-  \/\/ T_OBJECT and T_ARRAY describe signature syntax.\n-  \/\/ T_ADDRESS, T_METADATA, T_NARROWOOP, T_NARROWKLASS describe\n-  \/\/ internal references within the JVM as if they were Java\n-  \/\/ types in their own right.\n-  T_OBJECT      = 12,\n-  T_ARRAY       = 13,\n-  T_VOID        = 14,\n-  T_ADDRESS     = 15,\n-  T_NARROWOOP   = 16,\n-  T_METADATA    = 17,\n-  T_NARROWKLASS = 18,\n-  T_CONFLICT    = 19, \/\/ for stack value type with conflicting contents\n-  T_ILLEGAL     = 99\n-};\n@@ -876,86 +837,0 @@\n-\/\/ JavaValue serves as a container for arbitrary Java values.\n-\n-class JavaValue {\n-\n- public:\n-  \/\/ 8297539. Define it large enough to hold all possible primitive types.\n-  typedef long long JavaCallValue;\n-\n- private:\n-  BasicType _type;\n-  JavaCallValue _value;\n-\n- public:\n-  JavaValue(BasicType t = T_ILLEGAL) { _type = t; }\n-\n-  JavaValue(jfloat value) {\n-    _type    = T_FLOAT;\n-    \/\/ 8297539. This matches with Template #6 of cast<To>(From).\n-    _value = PrimitiveConversions::cast<JavaCallValue>(value);\n-  }\n-\n-  JavaValue(jdouble value) {\n-    _type    = T_DOUBLE;\n-    \/\/ 8297539. This matches with Template #5 of cast<To>(From).\n-    _value = PrimitiveConversions::cast<JavaCallValue>(value);\n-  }\n-\n- jfloat get_jfloat() const    { return PrimitiveConversions::cast<jfloat>(_value);  } \/\/ 8297539. Tempalte #6.\n- jdouble get_jdouble() const  { return PrimitiveConversions::cast<jdouble>(_value); } \/\/ 8297539. Tempalte #5.\n- jint get_jint() const        { return PrimitiveConversions::cast<jint>(_value);    } \/\/ 8297539. Tempalte #7.\n- jlong get_jlong() const      { return PrimitiveConversions::cast<jlong>(_value);   } \/\/ 8297539. Tempalte #1.\n- jobject get_jobject() const {\n-  #ifdef ARM32\n-    \/\/ 8297539. In arm32 archs, this call compiles to cast<jobject>(const JavaCallValue&) and\n-    \/\/ does not match with any of the cast<To>(From) instances.\n-    return *(jobject*)(&_value);\n-  #else\n-    return PrimitiveConversions::cast<jobject>(_value);\n-  #endif\n- }\n- oopDesc* get_oop() const     {\n-  #ifdef ARM32\n-    \/\/ 8297539. In arm32 archs, this call compiles to cast<oopDesc*>(const JavaCallValue&) and\n-    \/\/ does not match with any of the cast<To>(From) instances.\n-    return (oopDesc*)(&_value);\n-  #else\n-    \/\/ 8297539. This matches with Template #4 of cast<To>(From).\n-    return PrimitiveConversions::cast<oopDesc*>(_value);\n-  #endif\n- }\n-\n- JavaCallValue* get_value_addr() { return &_value; }\n- BasicType get_type() const { return _type; }\n-\n- void set_jfloat(jfloat f)   { _value = PrimitiveConversions::cast<JavaCallValue>(f); } \/\/ 8297539. Tempalte #6.\n- void set_jdouble(jdouble d) { _value = PrimitiveConversions::cast<JavaCallValue>(d); } \/\/ 8297539. Tempalte #5.\n- void set_jint(jint i)       { _value = PrimitiveConversions::cast<JavaCallValue>(i); } \/\/ 8297539. Tempalte #7.\n- void set_jlong(jlong l)     { _value = PrimitiveConversions::cast<JavaCallValue>(l); } \/\/ 8297539. Tempalte #1.\n- void set_jobject(jobject h) {\n-  #ifdef ARM32\n-    \/\/ 8297539. In arm32 archs, this call compiles to cast<JavaCallValue>(_jobject*&) and\n-    \/\/ does not match with any of the cast<To>(From) instances.\n-    _value = *(JavaCallValue*)h;\n-  #else\n-    _value = PrimitiveConversions::cast<JavaCallValue>(h);\n-  #endif\n- }\n- void set_oop(oopDesc* o)    {\n-  #ifdef ARM32\n-    \/\/ 8297539. In arm32 archs, this call compiles to cast<JavaCallValue>(oopDesc*&) and\n-    \/\/ does not match with any of the cast<To>(From) instances.\n-    _value = *(JavaCallValue*)o;\n-  #else\n-    _value = PrimitiveConversions::cast<JavaCallValue>(o);\n-  #endif\n- }\n- void set_type(BasicType t) { _type = t; }\n-\n- jboolean get_jboolean() const { return PrimitiveConversions::cast<jboolean>(PrimitiveConversions::cast<jint>(_value)); } \/\/ 8297539. Tempalte #7.\n- jbyte get_jbyte() const       { return PrimitiveConversions::cast<jbyte>(PrimitiveConversions::cast<jint>(_value));    } \/\/ 8297539. Tempalte #7.\n- jchar get_jchar() const       { return PrimitiveConversions::cast<jchar>(PrimitiveConversions::cast<jint>(_value));    } \/\/ 8297539. Tempalte #7.\n- jshort get_jshort() const     { return PrimitiveConversions::cast<jshort>(PrimitiveConversions::cast<jint>(_value));   } \/\/ 8297539. Tempalte #7.\n-\n-};\n-\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":126,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_GLOBALDEFINITIONSFORCONVERSIONS_HPP\n+#define SHARE_UTILITIES_GLOBALDEFINITIONSFORCONVERSIONS_HPP\n+\n+#include \"utilities\/compilerWarnings.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ Get constants like JVM_T_CHAR and JVM_SIGNATURE_INT, before pulling in <jvm.h>.\n+#include \"classfile_constants.h\"\n+\n+#include COMPILER_HEADER(utilities\/globalDefinitions)\n+\n+\n+#include <cstddef>\n+#include <type_traits>\n+#endif \/\/ SHARE_UTILITIES_GLOBALDEFINITIONSFORCONVERSIONS_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitionsForConversions.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_GLOBALJAVAVALUE_HPP\n+#define SHARE_UTILITIES_GLOBALJAVAVALUE_HPP\n+\n+\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n+#include \"utilities\/compilerWarnings.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ Get constants like JVM_T_CHAR and JVM_SIGNATURE_INT, before pulling in <jvm.h>.\n+#include \"classfile_constants.h\"\n+\n+#include COMPILER_HEADER(utilities\/globalDefinitions)\n+\n+#include <cstddef>\n+#include <type_traits>\n+\n+\/\/ NOTE: replicated in SA in vm\/agent\/sun\/jvm\/hotspot\/runtime\/BasicType.java\n+enum BasicType {\n+\/\/ The values T_BOOLEAN..T_LONG (4..11) are derived from the JVMS.\n+  T_BOOLEAN     = JVM_T_BOOLEAN,\n+  T_CHAR        = JVM_T_CHAR,\n+  T_FLOAT       = JVM_T_FLOAT,\n+  T_DOUBLE      = JVM_T_DOUBLE,\n+  T_BYTE        = JVM_T_BYTE,\n+  T_SHORT       = JVM_T_SHORT,\n+  T_INT         = JVM_T_INT,\n+  T_LONG        = JVM_T_LONG,\n+  \/\/ The remaining values are not part of any standard.\n+  \/\/ T_OBJECT and T_VOID denote two more semantic choices\n+  \/\/ for method return values.\n+  \/\/ T_OBJECT and T_ARRAY describe signature syntax.\n+  \/\/ T_ADDRESS, T_METADATA, T_NARROWOOP, T_NARROWKLASS describe\n+  \/\/ internal references within the JVM as if they were Java\n+  \/\/ types in their own right.\n+  T_OBJECT      = 12,\n+  T_ARRAY       = 13,\n+  T_VOID        = 14,\n+  T_ADDRESS     = 15,\n+  T_NARROWOOP   = 16,\n+  T_METADATA    = 17,\n+  T_NARROWKLASS = 18,\n+  T_CONFLICT    = 19, \/\/ for stack value type with conflicting contents\n+  T_ILLEGAL     = 99\n+};\n+\n+\n+\/\/ JavaValue serves as a container for arbitrary Java values.\n+class JavaValue {\n+\n+ public:\n+  \/\/ Define it large enough to hold all possible primitive types.\n+  typedef long long JavaCallValue;\n+\n+ private:\n+  BasicType _type;\n+  JavaCallValue _value;\n+\n+ public:\n+  JavaValue(BasicType t = T_ILLEGAL) { _type = t; }\n+\n+  JavaValue(jfloat value) {\n+    _type    = T_FLOAT;\n+    \/\/ This matches with Template #6 of cast<To>(From).\n+    _value = PrimitiveConversions::cast<JavaCallValue>(value);\n+  }\n+\n+  JavaValue(jdouble value) {\n+    _type    = T_DOUBLE;\n+    \/\/ This matches with Template #5 of cast<To>(From).\n+    _value = PrimitiveConversions::cast<JavaCallValue>(value);\n+  }\n+\n+ jfloat get_jfloat() const    { return PrimitiveConversions::cast<jfloat>(_value);  } \/\/ Tempalte #6.\n+ jdouble get_jdouble() const  { return PrimitiveConversions::cast<jdouble>(_value); } \/\/ Tempalte #5.\n+ jint get_jint() const        { return PrimitiveConversions::cast<jint>(_value);    } \/\/ Tempalte #7.\n+ jlong get_jlong() const      { return PrimitiveConversions::cast<jlong>(_value);   } \/\/ Tempalte #1.\n+ jobject get_jobject() const {\n+  #ifdef ARM32\n+    \/\/ In arm32 archs, this call compiles to cast<jobject>(const JavaCallValue&) and\n+    \/\/ does not match with any of the cast<To>(From) instances.\n+    return *(jobject*)(&_value);\n+  #else\n+    return PrimitiveConversions::cast<jobject>(_value);\n+  #endif\n+ }\n+ oopDesc* get_oop() const     {\n+  #ifdef ARM32\n+    \/\/ In arm32 archs, this call compiles to cast<oopDesc*>(const JavaCallValue&) and\n+    \/\/ does not match with any of the cast<To>(From) instances.\n+    return (oopDesc*)(&_value);\n+  #else\n+    \/\/ This matches with Template #4 of cast<To>(From).\n+    return PrimitiveConversions::cast<oopDesc*>(_value);\n+  #endif\n+ }\n+\n+ JavaCallValue* get_value_addr() { return &_value; }\n+ BasicType get_type() const { return _type; }\n+\n+ void set_jfloat(jfloat f)   { _value = PrimitiveConversions::cast<JavaCallValue>(f); } \/\/ Tempalte #6.\n+ void set_jdouble(jdouble d) { _value = PrimitiveConversions::cast<JavaCallValue>(d); } \/\/ Tempalte #5.\n+ void set_jint(jint i)       { _value = PrimitiveConversions::cast<JavaCallValue>(i); } \/\/ Tempalte #7.\n+ void set_jlong(jlong l)     { _value = PrimitiveConversions::cast<JavaCallValue>(l); } \/\/ Tempalte #1.\n+ void set_jobject(jobject h) {\n+  #ifdef ARM32\n+    \/\/ In arm32 archs, this call compiles to cast<JavaCallValue>(_jobject*&) and\n+    \/\/ does not match with any of the cast<To>(From) instances.\n+    _value = *(JavaCallValue*)h;\n+  #else\n+    _value = PrimitiveConversions::cast<JavaCallValue>(h);\n+  #endif\n+ }\n+ void set_oop(oopDesc* o)    {\n+  #ifdef ARM32\n+    \/\/ In arm32 archs, this call compiles to cast<JavaCallValue>(oopDesc*&) and\n+    \/\/ does not match with any of the cast<To>(From) instances.\n+    _value = *(JavaCallValue*)o;\n+  #else\n+    _value = PrimitiveConversions::cast<JavaCallValue>(o);\n+  #endif\n+ }\n+ void set_type(BasicType t) { _type = t; }\n+\n+ jboolean get_jboolean() const { return PrimitiveConversions::cast<jboolean>(PrimitiveConversions::cast<jint>(_value)); } \/\/ Tempalte #7.\n+ jbyte get_jbyte() const       { return PrimitiveConversions::cast<jbyte>(PrimitiveConversions::cast<jint>(_value));    } \/\/ Tempalte #7.\n+ jchar get_jchar() const       { return PrimitiveConversions::cast<jchar>(PrimitiveConversions::cast<jint>(_value));    } \/\/ Tempalte #7.\n+ jshort get_jshort() const     { return PrimitiveConversions::cast<jshort>(PrimitiveConversions::cast<jint>(_value));   } \/\/ Tempalte #7.\n+\n+};\n+\n+\/\/----------------------------------------------------------------------------------------------------\n+\/\/ Special casts\n+\/\/ Cast floats into same-size integers and vice-versa w\/o changing bit-pattern\n+\n+inline jint    jint_cast    (jfloat  x)  { return PrimitiveConversions::cast<jint>(x);    } \/\/ Template #5 of cast<To>(From).\n+inline jfloat  jfloat_cast  (jint    x)  { return PrimitiveConversions::cast<jfloat>(x);  } \/\/ Tempalte #5\n+\n+inline jlong   jlong_cast   (jdouble x)  { return PrimitiveConversions::cast<jlong>(x);   } \/\/ Tempalte #5\n+inline julong  julong_cast  (jdouble x)  { return PrimitiveConversions::cast<julong>(x);  } \/\/ Tempalte #5\n+inline jdouble jdouble_cast (jlong   x)  { return PrimitiveConversions::cast<jdouble>(x); } \/\/ Tempalte #5\n+#endif \/\/ SHARE_UTILITIES_GLOBALJAVAVALUE_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/utilities\/globalJavaValue.hpp","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}