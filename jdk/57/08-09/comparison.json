{"files":[{"patch":"@@ -105,1 +105,1 @@\n-                while (demand.tryDecrement() && !cancelled) {\n+                while (demand.tryDecrement() && !cancelled && error == null) {\n@@ -124,0 +124,5 @@\n+                } else if ((t = error) != null && !completed) {\n+                    completed = true;\n+                    pullScheduler.stop();\n+                    subscriber.onError(t);\n+                    return;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PullPublisher.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -563,0 +563,1 @@\n+        volatile Throwable illegalRequest;\n@@ -577,1 +578,5 @@\n-            demand.increase(n);\n+            try {\n+                demand.increase(n);\n+            } catch (IllegalArgumentException x) {\n+                illegalRequest = x;\n+            }\n@@ -587,0 +592,11 @@\n+        private boolean cancelSubscription() {\n+            Flow.Subscription subscription = this.subscription;\n+            if (subscription != null) {\n+                this.subscription = null;\n+                this.publisher = null;\n+                subscription.cancel();\n+            }\n+            scheduler.stop();\n+            return subscription != null;\n+        }\n+\n@@ -595,0 +611,1 @@\n+                    Throwable illegalRequest = this.illegalRequest;\n@@ -596,6 +613,2 @@\n-                        this.publisher = null;\n-                        bodies.removeIf((b) -> true);\n-                        if (subscription != null) {\n-                            subscription.cancel();\n-                        }\n-                        scheduler.stop();\n+                        bodies.clear();\n+                        cancelSubscription();\n@@ -611,0 +624,4 @@\n+                    if (illegalRequest != null) {\n+                        onError(illegalRequest);\n+                        return;\n+                    }\n@@ -632,0 +649,7 @@\n+            \/\/ make sure to cancel the subscription if we receive\n+            \/\/ an item after the subscription was cancelled or\n+            \/\/ an error was reported.\n+            if (cancelled || error.get() != null) {\n+                cancelSubscription();\n+                return;\n+            }\n@@ -639,0 +663,2 @@\n+                publisher = null;\n+                subscription = null;\n@@ -640,0 +666,1 @@\n+                scheduler.stop();\n@@ -655,1 +682,3 @@\n-                subscriber.onComplete();\n+                if (!cancelled) {\n+                    subscriber.onComplete();\n+                }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            throw new IllegalArgumentException(String.valueOf(n));\n+            throw new IllegalArgumentException(\"non-positive subscription request: \" + String.valueOf(n));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Demand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+    static final Class<CompletionException> CE = CompletionException.class;\n@@ -546,0 +547,7 @@\n+    private static final Throwable completionCause(CompletionException x) {\n+        while (x.getCause() instanceof CompletionException) {\n+            x = (CompletionException)x.getCause();\n+        }\n+        return x.getCause();\n+    }\n+\n@@ -554,2 +562,9 @@\n-        IllegalArgumentException iae = expectThrows(IAE, () -> subscription.request(n));\n-        System.out.printf(\"Got expected IAE for %d: %s%n\", n, iae);\n+        subscription.request(n);\n+        CompletionException expected = expectThrows(CE, () -> subscriber.resultCF.join());\n+        Throwable cause = completionCause(expected);\n+        if (cause instanceof IllegalArgumentException) {\n+            System.out.printf(\"Got expected IAE for %d: %s%n\", n, cause);\n+        } else {\n+            throw new AssertionError(\"Unexpected exception: \" + cause,\n+                    (cause == null) ? expected : cause);\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/AggregateRequestBodyTest.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.reactivestreams.tck.TestEnvironment;\n+import org.reactivestreams.tck.flow.FlowPublisherVerification;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Flow.Publisher;\n+\n+\/* See TckDriver.java for more information *\/\n+public class BodyPublishersConcat\n+        extends FlowPublisherVerification<ByteBuffer> {\n+\n+    private static final int ELEMENT_SIZE = 16 * 1024;\n+\n+    public BodyPublishersConcat() {\n+        super(new TestEnvironment(450L));\n+    }\n+\n+    private static BodyPublisher ofByteArrays(int n, byte[] bytes) {\n+        return BodyPublishers.ofByteArrays(Collections.nCopies((int) n, bytes));\n+    }\n+\n+    @Override\n+    public Publisher<ByteBuffer> createFlowPublisher(long nElements) {\n+        System.out.println(\"BodyPublishersConcat: %d elements requested\"\n+                .formatted(nElements));\n+        byte[] bytes = S.arrayOfNRandomBytes(ELEMENT_SIZE);\n+        if (nElements == 0) {\n+            System.out.println(\"BodyPublishersConcat: empty publisher\");\n+            return BodyPublishers.concat();\n+        } else if (nElements == 1) {\n+            System.out.println(\"BodyPublishersConcat: singleton publisher\");\n+            return BodyPublishers.concat(ofByteArrays(1, bytes));\n+        } else if (nElements < 4) {\n+            int left = (int)nElements\/2;\n+            int right = (int)nElements - left;\n+            System.out.println(\"BodyPublishersConcat: dual publisher (%d, %d)\".formatted(left, right));\n+            return BodyPublishers.concat(ofByteArrays(left, bytes),\n+                    ofByteArrays(right, bytes));\n+        } else {\n+            List<BodyPublisher> publishers = new ArrayList<>();\n+            List<Integer> sizes = new ArrayList<>();\n+            long remaining = nElements;\n+            int max = (int) Math.min((long)Integer.MAX_VALUE, nElements\/2L);\n+            while (remaining > 0) {\n+                int length = S.randomIntUpTo(max);\n+                if (length == 0) length = 1;\n+                sizes.add(length);\n+                if (remaining > length) {\n+                    publishers.add(ofByteArrays(length, bytes));\n+                    remaining = remaining - length;\n+                } else {\n+                    publishers.add(ofByteArrays((int)remaining, bytes));\n+                    remaining = 0;\n+                }\n+            }\n+            System.out.println(\"BodyPublishersConcat: multi publisher \" + sizes);\n+            return BodyPublishers.concat(publishers.toArray(BodyPublisher[]::new));\n+        }\n+    }\n+\n+    @Override\n+    public Publisher<ByteBuffer> createFailedFlowPublisher() {\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/reactivestreams-tck-tests\/BodyPublishersConcat.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+ * @compile -encoding UTF-8 BodyPublishersConcat.java\n@@ -68,0 +69,1 @@\n+ * @run testng\/othervm BodyPublishersConcat\n","filename":"test\/jdk\/java\/net\/httpclient\/reactivestreams-tck-tests\/TckDriver.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}