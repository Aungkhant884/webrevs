{"files":[{"patch":"@@ -661,1 +661,1 @@\n-         * Creates a {@code BodyPublisher} that publishes a request\n+         * Returns a {@code BodyPublisher} that publishes a request\n@@ -669,0 +669,2 @@\n+         * A publisher may be subscribed several times in sequence if the\n+         * request needs to be resent.\n@@ -676,0 +678,14 @@\n+         * <p> If the {@code publishers} sequence contains more than one publisher,\n+         * the {@link BodyPublisher#contentLength() contentLength} reported by\n+         * the returned aggregate publisher is computed as follows:\n+         * <ul>\n+         *     <li> If any of the publishers reports a negative content length,\n+         *         the resulting content length is {@code -1}.<\/li>\n+         *     <li> Otherwise, if the sum of the aggregated positive content\n+         *         length would exceed {@link Long#MAX_VALUE}, the resulting\n+         *         content length is also {@code -1}.<\/li>\n+         *     <li> Otherwise, the resulting content length is the sum of the\n+         *         aggregated positive content length, a number between\n+         *         0 and {@link Long#MAX_VALUE}, inclusive.<\/li>\n+         * <\/ul>\n+         *\n@@ -680,2 +696,0 @@\n-         * A publisher may be subscribed several times in sequence if the\n-         * request needs to be resent.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import java.util.stream.LongStream;\n@@ -268,0 +269,50 @@\n+    static List<Long> lengths(long... lengths) {\n+        return LongStream.of(lengths)\n+                .mapToObj(Long::valueOf)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @DataProvider(name = \"contentLengths\")\n+    Object[][] contentLengths() {\n+        return new Object[][] {\n+                {-1, lengths(-1)},\n+                {-42, lengths(-42)},\n+                {42, lengths(42)},\n+                {42, lengths(10, 0, 20, 0, 12)},\n+                {-1, lengths(10, 0, 20, -1, 12)},\n+                {-1, lengths(-1, 0, 20, 10, 12)},\n+                {-1, lengths(10, 0, 20, 12, -1)},\n+                {-1, lengths(10, 0, 20, -10, 12)},\n+                {-1, lengths(-10, 0, 20, 10, 12)},\n+                {-1, lengths(10, 0, 20, 12, -10)},\n+                {-1, lengths(10, 0, Long.MIN_VALUE, -1, 12)},\n+                {-1, lengths(-1, 0, Long.MIN_VALUE, 10, 12)},\n+                {-1, lengths(10, Long.MIN_VALUE, 20, 12, -1)},\n+                {Long.MAX_VALUE, lengths(10, Long.MAX_VALUE - 42L, 20, 0, 12)},\n+                {-1, lengths(10, Long.MAX_VALUE - 40L, 20, 0, 12)},\n+                {-1, lengths(10, Long.MAX_VALUE - 12L, 20, 0, 12)},\n+                {-1, lengths(10, Long.MAX_VALUE\/2L, Long.MAX_VALUE\/2L + 1L, 0, 12)}\n+        };\n+    }\n+\n+    static class ContentLengthPublisher implements BodyPublisher {\n+        final long length;\n+        ContentLengthPublisher(long length) {\n+            this.length = length;\n+        }\n+        @Override\n+        public long contentLength() {\n+            return length;\n+        }\n+\n+        @Override\n+        public void subscribe(Subscriber<? super ByteBuffer> subscriber) {\n+        }\n+\n+        static ContentLengthPublisher[] of(List<Long> lengths) {\n+            return lengths.stream()\n+                    .map(ContentLengthPublisher::new)\n+                    .toArray(ContentLengthPublisher[]::new);\n+        }\n+    }\n+\n@@ -481,0 +532,6 @@\n+    @Test(dataProvider = \"contentLengths\")\n+    public void testContentLength(long expected, List<Long> lengths) {\n+        BodyPublisher[] publishers = ContentLengthPublisher.of(lengths);\n+        BodyPublisher aggregate = BodyPublishers.concat(publishers);\n+        assertEquals(aggregate.contentLength(), expected);\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/AggregateRequestBodyTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}