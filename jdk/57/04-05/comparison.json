{"files":[{"patch":"@@ -662,2 +662,2 @@\n-         * body consisting of the aggregation of the bytes published\n-         * by a sequence of publishers.\n+         * body consisting of the concatenation of the request bodies\n+         * published by a sequence of publishers.\n@@ -666,5 +666,3 @@\n-         * is returned. Otherwise each publisher is lazily subscribed to in turn,\n-         * until all the body bytes are published, an error occurs, or the\n-         * returned publisher's subscription is cancelled.\n-         * A publisher may be subscribed several times in sequence if the\n-         * request needs to be resent.\n+         * is returned. Otherwise, if the sequence contains a single element,\n+         * that publisher is returned. Otherwise a <em>concatenation publisher<\/em>\n+         * is returned.\n@@ -672,1 +670,1 @@\n-         * <p> The request body published by the aggregate body publisher\n+         * <p> The request body published by a <em>concatenation publisher<\/em>\n@@ -674,3 +672,2 @@\n-         * been published by aggregating all the bytes of each publisher\n-         * in sequence. However, an implementation is free to split\n-         * the sequence of bytes in any way it chooses.\n+         * been published by concatenating all the bytes of each publisher\n+         * in sequence.\n@@ -678,3 +675,11 @@\n-         * <p> If the {@code publishers} sequence contains more than one publisher,\n-         * the {@link BodyPublisher#contentLength() contentLength} reported by\n-         * the returned aggregate publisher is computed as follows:\n+         * <p> Each publisher is lazily subscribed to in turn,\n+         * until all the body bytes are published, an error occurs, or the\n+         * concatenation publisher's subscription is cancelled.\n+         * The concatenation publisher may be subscribed to more than once,\n+         * which in turn may result in the publishers in the sequence being\n+         * subscribed to more than once.\n+         *\n+         * <p> The concatenation publisher has a known content\n+         * length only if all publishers in the sequence have a known content\n+         * length. The {@link BodyPublisher#contentLength() contentLength}\n+         * reported by the concatenation publisher is computed as follows:\n@@ -682,5 +687,5 @@\n-         *     <li> If any of the publishers reports a negative content length,\n-         *         the resulting content length is {@code -1}.<\/li>\n-         *     <li> Otherwise, if the sum of the aggregated positive content\n-         *         length would exceed {@link Long#MAX_VALUE}, the resulting\n-         *         content length is also {@code -1}.<\/li>\n+         *     <li> If any of the publishers reports an <em>{@linkplain\n+         *         BodyPublisher#contentLength() unknown}<\/em> content length,\n+         *         or if the sum of the known content lengths would exceed\n+         *         {@link Long#MAX_VALUE}, the resulting\n+         *         content length is <em>unknown<\/em>.<\/li>\n@@ -688,2 +693,2 @@\n-         *         aggregated positive content length, a number between\n-         *         0 and {@link Long#MAX_VALUE}, inclusive.<\/li>\n+         *         known content lengths, a number between\n+         *         {@code 0} and {@link Long#MAX_VALUE}, inclusive.<\/li>\n@@ -692,4 +697,4 @@\n-         * @implNote If the aggregate\n-         * publisher's subscription is {@linkplain Flow.Subscription#cancel()\n-         * cancelled}, or an error occurs while publishing the bytes, not all\n-         * publishers in the sequence may be subscribed to.\n+         * @implNote If the concatenation publisher's subscription is\n+         * {@linkplain Flow.Subscription#cancel() cancelled}, or an error occurs\n+         * while publishing the bytes, not all publishers in the sequence may\n+         * be subscribed to.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":30,"deletions":25,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -294,1 +294,6 @@\n-                {-1, lengths(10, Long.MAX_VALUE\/2L, Long.MAX_VALUE\/2L + 1L, 0, 12)}\n+                {-1, lengths(10, Long.MAX_VALUE\/2L, Long.MAX_VALUE\/2L + 1L, 0, 12)},\n+                {-1, lengths(10, Long.MAX_VALUE\/2L, -1, Long.MAX_VALUE\/2L + 1L, 12)},\n+                {-1, lengths(10, Long.MAX_VALUE, 12, Long.MAX_VALUE, 20)},\n+                {-1, lengths(10, Long.MAX_VALUE, Long.MAX_VALUE, 12, 20)},\n+                {-1, lengths(0, Long.MAX_VALUE, Long.MAX_VALUE, 12, 20)},\n+                {-1, lengths(Long.MAX_VALUE, Long.MAX_VALUE, 12, 0, 20)}\n@@ -536,1 +541,2 @@\n-        assertEquals(aggregate.contentLength(), expected);\n+        assertEquals(aggregate.contentLength(), expected,\n+                \"Unexpected result for %s\".formatted(lengths));\n","filename":"test\/jdk\/java\/net\/httpclient\/AggregateRequestBodyTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}