{"files":[{"patch":"@@ -35,1 +35,1 @@\n-static void send_allocation_sample(Klass* klass, HeapWord* obj, size_t alloc_size, Thread* thread) {\n+static void send_allocation_sample(Klass* klass, HeapWord* obj, size_t weight, Thread* thread) {\n@@ -39,1 +39,1 @@\n-    event.set_allocatedBytes(thread->allocated_bytes() + alloc_size);\n+    event.set_weight(weight);\n@@ -52,1 +52,1 @@\n-  send_allocation_sample(klass, obj, 0, thread); \/\/ 0 as alloc_size, because it is already attributed to thread->allocated_bytes()\n+  send_allocation_sample(klass, obj, alloc_size, thread);\n@@ -64,1 +64,1 @@\n-  send_allocation_sample(klass, obj, alloc_size, thread);\n+  send_allocation_sample(klass, obj, tlab_size, thread);\n","filename":"src\/hotspot\/share\/gc\/shared\/allocTracer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -620,1 +620,1 @@\n-    <Field type=\"long\" contentType=\"bytes\" name=\"allocatedBytes\" label=\"Allocated Bytes\" description=\"Cumulative number of bytes allocated on the Java heap by this thread\"\/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"weight\" label=\"Sample Weight\" description=\"An attribute to facilitate the relative comparison of samples, not necesarily the memory amount allocated by the sampled object\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    private static final int BYTE_ARRAY_OVERHEAD = 16; \/\/ Extra bytes used by a byte array\n@@ -47,1 +46,0 @@\n-    private static final int OBJECT_SIZE_ALT = OBJECT_SIZE + 8; \/\/ Object size in case of disabled CompressedOops\n@@ -66,1 +64,1 @@\n-                tmp = new byte[OBJECT_SIZE - BYTE_ARRAY_OVERHEAD];\n+                tmp = new byte[OBJECT_SIZE];\n@@ -73,2 +71,0 @@\n-        Asserts.assertTrue(event.hasField(\"allocatedSinceLast\"));\n-        Asserts.assertTrue(event.hasField(\"skippedEvents\"));\n@@ -78,3 +74,6 @@\n-        long allocationSize = Events.assertField(event, \"allocationSize\").atLeast(1L).getValue();\n-        String className = Events.assertField(event, \"objectClass.name\").notEmpty().getValue();\n-        return className.equals(BYTE_ARRAY_CLASS_NAME) && (allocationSize == OBJECT_SIZE || allocationSize == OBJECT_SIZE_ALT);\n+        if (Events.assertField(event, \"objectClass.name\").notEmpty().getValue().equals(BYTE_ARRAY_CLASS_NAME)) {\n+            long weight = Events.assertField(event, \"weight\").atLeast(1L).getValue();\n+            Asserts.assertGreaterThanOrEqual(weight, (long)OBJECT_SIZE);\n+            return true;\n+        }\n+        return false;\n","filename":"test\/jdk\/jdk\/jfr\/event\/allocation\/TestObjectAllocationSampleEvent.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -94,2 +94,0 @@\n-        Asserts.assertTrue(event.hasField(\"allocatedSinceLast\"));\n-        Asserts.assertTrue(event.hasField(\"skippedEvents\"));\n@@ -99,4 +97,2 @@\n-        long allocationSize = Events.assertField(event, \"allocationSize\").atLeast(1L).getValue();\n-        String className = Events.assertField(event, \"objectClass.name\").notEmpty().getValue();\n-        if (className.equals(BYTE_ARRAY_CLASS_NAME) && (allocationSize == OBJECT_SIZE || allocationSize == OBJECT_SIZE_ALT)) {\n-            \/\/ Count all matching allocation samples.\n+        if (Events.assertField(event, \"objectClass.name\").notEmpty().getValue().equals(BYTE_ARRAY_CLASS_NAME)) {\n+            Events.assertField(event, \"weight\").atLeast(1L);\n","filename":"test\/jdk\/jdk\/jfr\/event\/allocation\/TestObjectAllocationSampleEventNewTLABPath.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,2 +94,0 @@\n-        Asserts.assertTrue(event.hasField(\"allocatedSinceLast\"));\n-        Asserts.assertTrue(event.hasField(\"skippedEvents\"));\n@@ -99,3 +97,2 @@\n-        long allocationSize = Events.assertField(event, \"allocationSize\").atLeast(1L).getValue();\n-        String className = Events.assertField(event, \"objectClass.name\").notEmpty().getValue();\n-        if (className.equals(BYTE_ARRAY_CLASS_NAME) && (allocationSize == OBJECT_SIZE || allocationSize == OBJECT_SIZE_ALT)) {\n+        if (Events.assertField(event, \"objectClass.name\").notEmpty().getValue().equals(BYTE_ARRAY_CLASS_NAME)) {\n+            Events.assertField(event, \"weight\").atLeast(1L);\n","filename":"test\/jdk\/jdk\/jfr\/event\/allocation\/TestObjectAllocationSampleEventOutsideTLABPath.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -115,3 +115,3 @@\n-        long allocationSize = Events.assertField(event, \"allocationSize\").atLeast(1L).getValue();\n-        String className = Events.assertField(event, \"objectClass.name\").notEmpty().getValue();\n-        if (className.equals(BYTE_ARRAY_CLASS_NAME) && (allocationSize == OBJECT_SIZE || allocationSize == OBJECT_SIZE_ALT)) {\n+        if (Events.assertField(event, \"objectClass.name\").notEmpty().getValue().equals(BYTE_ARRAY_CLASS_NAME)) {\n+            long weight = Events.assertField(event, \"weight\").atLeast(1L).getValue();\n+            Asserts.assertGreaterThanOrEqual(weight, (long)OBJECT_SIZE);\n","filename":"test\/jdk\/jdk\/jfr\/event\/allocation\/TestObjectAllocationSampleEventThrottling.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}