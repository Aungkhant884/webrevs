{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,1 @@\n-        ForceGC gc = new ForceGC();\n-        assertTrue(gc.await(() -> myOwnClassLoaderWeakReference.get() == null));\n+        assertTrue(ForceGC.wait(() -> myOwnClassLoaderWeakReference.get() == null));\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,2 +155,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> wClass.refersTo(null))) {\n+        if (!ForceGC.wait(() -> wClass.refersTo(null))) {\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/LoadLibraryUnload.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-            ForceGC gc = new ForceGC();\n@@ -71,1 +70,1 @@\n-            if (!gc.await(() -> finalCount == unloadedCount)) {\n+            if (!ForceGC.wait(() -> finalCount == unloadedCount)) {\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/nativeLibrary\/NativeLibraryTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,4 +218,1 @@\n-            ForceGC gc = new ForceGC();\n-            assertTrue(gc.await(() -> weakRef.get() == null));\n-\n-            if (weakRef.get() != null) {\n+            if (!ForceGC.wait(() -> weakRef.get() == null)) {\n@@ -227,2 +224,1 @@\n-            ForceGC gc = new ForceGC();\n-            return gc.await(() -> weakRef.get() == null);\n+            return ForceGC.wait(() -> weakRef.get() == null, 1000L);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/UnloadingTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,3 +110,1 @@\n-        new ForceGC().await(() -> weakLoader.get() == null);\n-\n-        if (weakLoader.get() != null) {\n+        if (!ForceGC.wait(() -> weakLoader.get() == null)) {\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/ReflectionCallerCacheTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> weakRef.get() == null)) {\n+        if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/javax\/security\/auth\/callback\/PasswordCallback\/CheckCleanerBound.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> weakRef.get() == null)) {\n+        if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/sun\/security\/jgss\/GssContextCleanup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-            ForceGC gc = new ForceGC();\n-            if (!gc.await(() -> weakRef.get() == null)) {\n+            if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/sun\/security\/jgss\/GssNameCleanup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-            ForceGC gc = new ForceGC();\n@@ -94,2 +93,1 @@\n-            gc.await(() -> weakRef[finalI].get() == null);\n-            if (!weakRef[i].refersTo(null)) {\n+            if (!ForceGC.wait(() -> weakRef[finalI].get() == null)) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,3 +26,3 @@\n-import java.lang.ref.Cleaner;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n@@ -35,24 +35,10 @@\n-    private final static Cleaner cleaner = Cleaner.create();\n-\n-    private final CountDownLatch cleanerInvoked;\n-    private Object o;\n-    private int gcCount = 0;\n-\n-    public ForceGC() {\n-        this.o = new Object();\n-        this.cleanerInvoked = new CountDownLatch(1);\n-        cleaner.register(o, cleanerInvoked::countDown);\n-    }\n-\n-    private void doit(int iter) {\n-        try {\n-            for (int i = 0; i < 10; i++) {\n-                System.gc();\n-                gcCount++;\n-                if (cleanerInvoked.await(100L, TimeUnit.MILLISECONDS)) {\n-                    return;\n-                }\n-            }\n-        } catch (InterruptedException unexpected) {\n-            throw new AssertionError(\"unexpected InterruptedException\");\n-        }\n+    \/**\n+     * Causes the current thread to wait until the {@code booleanSupplier}\n+     * returns true, or a predefined waiting time (10 seconds) elapses.\n+     *\n+     * @param booleanSupplier boolean supplier\n+     * @return true if the {@code booleanSupplier} returns true, or false\n+     *     if did not complete after 10 Seconds\n+     *\/\n+    public static boolean wait(BooleanSupplier booleanSupplier) {\n+        return wait(booleanSupplier, 10000L);\n@@ -62,2 +48,2 @@\n-     * Causes the current thread to wait until the {@code BooleanSupplier} returns true,\n-     * unless the thread is interrupted or a predefined waiting time elapses.\n+     * Causes the current thread to wait until the {@code booleanSupplier}\n+     * returns true, or the specified waiting time {@code timeout} elapses.\n@@ -65,4 +51,5 @@\n-     * @param s boolean supplier\n-     * @return true if the {@code BooleanSupplier} returns true and false if\n-     *         the predefined waiting time elapsed before the count reaches zero.\n-     * @throws InterruptedException if the current thread is interrupted while waiting\n+     * @param booleanSupplier boolean supplier\n+     * @param timeout the timeout milliseconds while waiting for the boolean\n+     *        supplier to be true.\n+     * @return true if the {@code booleanSupplier} returns true, or false\n+     *     if did not complete after {@code timeout} milliseconds.\n@@ -70,6 +57,11 @@\n-    public boolean await(BooleanSupplier s) {\n-        o = null; \/\/ Keep reference to Object until now, to ensure the Cleaner\n-                  \/\/ doesn't count down the latch before await() is called.\n-        for (int i = 0; i < 10; i++) {\n-            if (s.getAsBoolean()) {\n-                System.out.println(\"ForceGC condition met after System.gc() \" + gcCount + \" times\");\n+    public static boolean wait(BooleanSupplier booleanSupplier,\n+            long timeout) {\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        Object obj = new Object();\n+        PhantomReference<Object> ref = new PhantomReference<>(obj, queue);\n+        obj = null;\n+        Reference.reachabilityFence(obj);\n+        Reference.reachabilityFence(ref);\n+\n+        for (int retries = (int)(timeout \/ 100); retries > 0; retries--) {\n+            if (booleanSupplier.getAsBoolean()) {\n@@ -79,1 +71,2 @@\n-            doit(i);\n+            System.gc();\n+\n@@ -81,3 +74,7 @@\n-                Thread.sleep(100);\n-            } catch (InterruptedException e) {\n-                throw new AssertionError(\"unexpected interrupted sleep\", e);\n+                \/\/ The remove() will always block for the specified milliseconds\n+                \/\/ if the reference has already been removed from the queue.\n+                \/\/ But it is fine.  For most cases, the 1st GC is sufficient\n+                \/\/ to trigger and complete the cleanup.\n+                queue.remove(100L);\n+            } catch (InterruptedException ie) {\n+                \/\/ ignore, the loop will try again\n@@ -87,2 +84,1 @@\n-        System.out.println(\"ForceGC condition not met after System.gc() \" + gcCount + \" times\");\n-        return false;\n+        return booleanSupplier.getAsBoolean();\n@@ -91,0 +87,1 @@\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":42,"deletions":45,"binary":false,"changes":87,"status":"modified"}]}