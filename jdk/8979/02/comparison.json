{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,1 @@\n-        ForceGC gc = new ForceGC();\n-        assertTrue(gc.await(() -> myOwnClassLoaderWeakReference.get() == null));\n+        assertTrue(ForceGC.wait(() -> myOwnClassLoaderWeakReference.get() == null));\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,2 +155,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> wClass.refersTo(null))) {\n+        if (!ForceGC.wait(() -> wClass.refersTo(null))) {\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/LoadLibraryUnload.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-            ForceGC gc = new ForceGC();\n@@ -71,1 +70,1 @@\n-            if (!gc.await(() -> finalCount == unloadedCount)) {\n+            if (!ForceGC.wait(() -> finalCount == unloadedCount)) {\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/nativeLibrary\/NativeLibraryTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,4 +218,1 @@\n-            ForceGC gc = new ForceGC();\n-            assertTrue(gc.await(() -> weakRef.get() == null));\n-\n-            if (weakRef.get() != null) {\n+            if (!ForceGC.wait(() -> weakRef.get() == null)) {\n@@ -227,2 +224,1 @@\n-            ForceGC gc = new ForceGC();\n-            return gc.await(() -> weakRef.get() == null);\n+            return ForceGC.wait(() -> weakRef.get() == null);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/UnloadingTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,3 +110,1 @@\n-        new ForceGC().await(() -> weakLoader.get() == null);\n-\n-        if (weakLoader.get() != null) {\n+        if (!ForceGC.wait(() -> weakLoader.get() == null)) {\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/ReflectionCallerCacheTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> weakRef.get() == null)) {\n+        if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/javax\/security\/auth\/callback\/PasswordCallback\/CheckCleanerBound.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-        ForceGC gc = new ForceGC();\n-        if (!gc.await(() -> weakRef.get() == null)) {\n+        if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/sun\/security\/jgss\/GssContextCleanup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-            ForceGC gc = new ForceGC();\n-            if (!gc.await(() -> weakRef.get() == null)) {\n+            if (!ForceGC.wait(() -> weakRef.get() == null)) {\n","filename":"test\/jdk\/sun\/security\/jgss\/GssNameCleanup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-            ForceGC gc = new ForceGC();\n@@ -94,2 +93,1 @@\n-            gc.await(() -> weakRef[finalI].get() == null);\n-            if (!weakRef[i].refersTo(null)) {\n+            if (!ForceGC.wait(() -> weakRef[finalI].get() == null)) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,2 @@\n-    private final static Cleaner cleaner = Cleaner.create();\n-\n-    private final CountDownLatch cleanerInvoked;\n+    private final CountDownLatch cleanerInvoked = new CountDownLatch(1);\n+    private final Cleaner cleaner = Cleaner.create();\n@@ -42,2 +41,1 @@\n-        this.cleanerInvoked = new CountDownLatch(1);\n-        cleaner.register(o, cleanerInvoked::countDown);\n+        cleaner.register(o, () -> cleanerInvoked.countDown());\n@@ -46,1 +44,1 @@\n-    private void doIt(int iter) {\n+    private void doit(int iter) {\n@@ -48,1 +46,1 @@\n-            for (int i = 0; i < 100; i++) {\n+            for (int i = 0; i < 10; i++) {\n@@ -50,2 +48,2 @@\n-                System.out.println(\"doIt() iter: \" + iter + \", gc \" + i);\n-                if (cleanerInvoked.await(100L, TimeUnit.MILLISECONDS)) {\n+                System.out.println(\"doit() iter: \" + iter + \", gc \" + i);\n+                if (cleanerInvoked.await(1L, TimeUnit.SECONDS)) {\n@@ -67,0 +65,1 @@\n+     * @throws InterruptedException if the current thread is interrupted while waiting\n@@ -71,9 +70,4 @@\n-        for (int i = 0; i < 1000; i++) {\n-            if (s.getAsBoolean()) {\n-                return true;\n-            }\n-\n-            doIt(i);\n-            try {\n-                Thread.sleep(10);\n-            } catch (InterruptedException e) {\n+        for (int i = 0; i < 10; i++) {\n+            if (s.getAsBoolean()) return true;\n+            doit(i);\n+            try { Thread.sleep(1000); } catch (InterruptedException e) {\n@@ -83,1 +77,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"}]}