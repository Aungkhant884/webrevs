{"files":[{"patch":"@@ -87,1 +87,1 @@\n-void ArchiveBuilder::SourceObjList::remember_embedded_pointer(SourceObjInfo* src_info, address* field_addr) {\n+void ArchiveBuilder::SourceObjList::remember_embedded_pointer(SourceObjInfo* src_info, MetaspaceClosure::Ref* ref) {\n@@ -94,1 +94,1 @@\n-  \/\/    field_addr == 0x108\n+  \/\/    ref->addr() == 0x108\n@@ -96,0 +96,1 @@\n+  address* field_addr = ref->addr();\n@@ -457,8 +458,0 @@\n-void ArchiveBuilder::remember_embedded_pointer_in_gathered_obj(address src_obj, address* field_addr) {\n-  \/\/ field_addr must be a valid field inside src_obj.\n-  if (*field_addr != nullptr) {\n-    SourceObjInfo* src_info = _src_obj_table.get(src_obj);\n-    remember_embedded_pointer_in_gathered_obj(src_info, field_addr);\n-  }\n-}\n-\n@@ -475,1 +468,5 @@\n-      remember_embedded_pointer_in_gathered_obj(src_info, ref->addr());\n+      if (src_info->read_only()) {\n+        _ro_src_objs.remember_embedded_pointer(src_info, ref);\n+      } else {\n+        _rw_src_objs.remember_embedded_pointer(src_info, ref);\n+      }\n@@ -480,8 +477,0 @@\n-void ArchiveBuilder::remember_embedded_pointer_in_gathered_obj(SourceObjInfo* src_info, address* field_addr) {\n-  if (src_info->read_only()) {\n-    _ro_src_objs.remember_embedded_pointer(src_info, field_addr);\n-  } else {\n-    _rw_src_objs.remember_embedded_pointer(src_info, field_addr);\n-  }\n-}\n-\n@@ -495,1 +484,0 @@\n-  FileMapInfo::remember_embedded_pointers();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":8,"deletions":20,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-    void remember_embedded_pointer(SourceObjInfo* pointing_obj, address* field_addr);\n+    void remember_embedded_pointer(SourceObjInfo* pointing_obj, MetaspaceClosure::Ref* ref);\n@@ -344,1 +344,0 @@\n-  void remember_embedded_pointer_in_gathered_obj(address container, address* pointer_loc);\n@@ -346,1 +345,0 @@\n-  void remember_embedded_pointer_in_gathered_obj(SourceObjInfo* src_info, address* field_addr);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,0 +256,1 @@\n+  case MetaspaceObj::SharedClassPathEntryType:\n@@ -271,1 +272,1 @@\n-            \" a new subtype of Klass or MetaData without updating CPP_VTABLE_TYPES_DO\",\n+            \" a new subtype of Klass or MetaData without updating CPP_VTABLE_TYPES_DO or the cases in this 'switch' statement\",\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -317,3 +317,1 @@\n-  Array<u8>* table = FileMapInfo::shared_path_table().table();\n-  SharedPathTable runtime_table(table, FileMapInfo::shared_path_table().size());\n-  _header->set_shared_path_table(runtime_table);\n+  _header->set_shared_path_table(FileMapInfo::shared_path_table().table());\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -295,1 +295,0 @@\n-  st->print_cr(\"- shared_path_table_size:         %d\", _shared_path_table_size);\n@@ -461,5 +460,0 @@\n-void SharedClassPathEntry::remember_embedded_pointers(Array<u8>* container) {\n-  ArchiveBuilder::current()->remember_embedded_pointer_in_gathered_obj((address)container, (address*)&_name);\n-  ArchiveBuilder::current()->remember_embedded_pointer_in_gathered_obj((address)container, (address*)&_manifest);\n-}\n-\n@@ -467,18 +461,1 @@\n-  it->push(&_table);\n-  for (int i = 0; i < _size; i++) {\n-    \/\/ Hack alert: GatherSortedSourceObjs in archiveBuilder.cpp doesn't know that\n-    \/\/ pointers like path_at(i)->{_name, _manifest} are embedded inside _table, because\n-    \/\/ they are pushed independetly of _table.\n-    \/\/\n-    \/\/ So we need to do the remember_embedded_pointers() trick below.\n-    \/\/\n-    \/\/ If we want to get rid of this ugliness, we need to convert SharedPathTable\n-    \/\/ to a proper MetaspaceObj subtype (but I have very little motivation for that).\n-    path_at(i)->metaspace_pointers_do(it);\n-  }\n-}\n-\n-void SharedPathTable::remember_embedded_pointers() {\n-  for (int i = 0; i < _size; i++) {\n-    path_at(i)->remember_embedded_pointers(_table);\n-  }\n+  it->push(&_entries);\n@@ -488,10 +465,11 @@\n-  size_t entry_size = sizeof(SharedClassPathEntry);\n-  int num_entries = 0;\n-  num_entries += ClassLoader::num_boot_classpath_entries();\n-  num_entries += ClassLoader::num_app_classpath_entries();\n-  num_entries += ClassLoader::num_module_path_entries();\n-  num_entries += FileMapInfo::num_non_existent_class_paths();\n-  size_t bytes = entry_size * num_entries;\n-\n-  _table = MetadataFactory::new_array<u8>(loader_data, (int)bytes, CHECK);\n-  _size = num_entries;\n+  const int num_entries =\n+    ClassLoader::num_boot_classpath_entries() +\n+    ClassLoader::num_app_classpath_entries() +\n+    ClassLoader::num_module_path_entries() +\n+    FileMapInfo::num_non_existent_class_paths();\n+  _entries = MetadataFactory::new_array<SharedClassPathEntry*>(loader_data, num_entries, CHECK);\n+  for (int i = 0; i < num_entries; i++) {\n+    SharedClassPathEntry* ent =\n+      new (loader_data, SharedClassPathEntry::size(), MetaspaceObj::SharedClassPathEntryType, THREAD) SharedClassPathEntry;\n+    _entries->at_put(i, ent);\n+  }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":12,"deletions":34,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -51,1 +52,1 @@\n-class SharedClassPathEntry {\n+class SharedClassPathEntry : public MetaspaceObj {\n@@ -72,0 +73,6 @@\n+  SharedClassPathEntry() : _type(0), _is_module_path(false),\n+                           _from_class_path_attr(false), _timestamp(0),\n+                           _filesize(0), _name(nullptr), _manifest(nullptr) {}\n+  static int size() {\n+    return align_metadata_size(sizeof(SharedClassPathEntry));\n+  }\n@@ -75,0 +82,1 @@\n+  MetaspaceObj::Type type() const { return SharedClassPathEntryType; }\n@@ -106,1 +114,0 @@\n-  void remember_embedded_pointers(Array<u8>* container);\n@@ -110,3 +117,1 @@\n-  Array<u8>* _table;\n-  int _size;\n-  static SharedClassPathEntry* path_at(Array<u8>* table, int size, int index);\n+  Array<SharedClassPathEntry*>* _entries;\n@@ -114,2 +119,2 @@\n-  SharedPathTable() : _table(nullptr), _size(0) {}\n-  SharedPathTable(Array<u8>* table, int size) : _table(table), _size(size) {}\n+  SharedPathTable() : _entries(nullptr) {}\n+  SharedPathTable(Array<SharedClassPathEntry*>* entries) : _entries(entries) {}\n@@ -121,1 +126,1 @@\n-    return _size;\n+    return _entries == nullptr ? 0 : _entries->length();\n@@ -124,7 +129,1 @@\n-    if (index < 0) {\n-      return nullptr;\n-    }\n-    assert(index < _size, \"sanity\");\n-    char* p = (char*)_table->data();\n-    p += sizeof(SharedClassPathEntry) * index;\n-    return (SharedClassPathEntry*)p;\n+    return _entries->at(index);\n@@ -132,3 +131,2 @@\n-  Array<u8>* table() {return _table;}\n-  void set_table(Array<u8>* table) {_table = table;}\n-  void remember_embedded_pointers();\n+  Array<SharedClassPathEntry*>* table() {return _entries;}\n+  void set_table(Array<SharedClassPathEntry*>* table) {_entries = table;}\n@@ -221,1 +219,0 @@\n-  int    _shared_path_table_size;\n@@ -296,1 +293,0 @@\n-    _shared_path_table_size = table.size();\n@@ -305,2 +301,2 @@\n-    return SharedPathTable((Array<u8>*)from_mapped_offset(_shared_path_table_offset),\n-                           _shared_path_table_size);\n+    return SharedPathTable((Array<SharedClassPathEntry*>*)\n+                           from_mapped_offset(_shared_path_table_offset));\n@@ -369,3 +365,0 @@\n-  static void remember_embedded_pointers() {\n-    _shared_path_table.remember_embedded_pointers();\n-  }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -373,0 +373,1 @@\n+  f(SharedClassPathEntry) \\\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}