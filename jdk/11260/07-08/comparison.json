{"files":[{"patch":"@@ -920,2 +920,2 @@\n-                try (var srcGuard = NIO_ACCESS.acquireSession(src);\n-                     var dstGuard = NIO_ACCESS.acquireSession(dst)) {\n+                try (var srcGuard = NIO_ACCESS.acquireScope(src);\n+                     var dstGuard = NIO_ACCESS.acquireScope(dst)) {\n@@ -1522,1 +1522,0 @@\n-        @SuppressWarnings(\"try\")\n@@ -1598,2 +1597,2 @@\n-                    try (var guard = NIO_ACCESS.acquireSession(dst)) {\n-                        Unsafe.getUnsafe().setMemory(((DirectBuffer) dst).address(),\n+                    try (var guard = NIO_ACCESS.acquireScope(dst)) {\n+                        Unsafe.getUnsafe().setMemory(guard.address(),\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -782,7 +782,0 @@\n-                \/\/ We are not using a lambda here because this would create\n-                \/\/ a circular dependency with lambda factories.\n-                static final JavaNioAccess.SessionAcquisition NO_OP_CLOSE = new JavaNioAccess.SessionAcquisition() {\n-                    @Override\n-                    public void close() {}\n-                };\n-\n@@ -847,4 +840,4 @@\n-                public SessionAcquisition acquireSession(Buffer buffer) {\n-                    var session = buffer.session();\n-                    if (session == null) {\n-                        return NO_OP_CLOSE;\n+                public ScopeAcquisition acquireScope(Buffer buffer) {\n+                    var scope = buffer.session();\n+                    if (scope == null) {\n+                        return ScopeAcquisition.create(buffer);\n@@ -852,2 +845,2 @@\n-                    session.acquire0();\n-                    return session::release0;\n+                    scope.acquire0();\n+                    return ScopeAcquisition.create(buffer, scope);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -30,1 +29,1 @@\n-import sun.nio.ch.DirectBuffer;\n+\n@@ -92,1 +91,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -102,4 +100,2 @@\n-            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n-                adler = updateByteBuffer(adler, ((DirectBuffer)buffer).address(), pos, rem);\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                adler = updateByteBuffer(adler, guard.address(), pos, rem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -32,1 +31,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -92,1 +90,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -102,4 +99,2 @@\n-            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n-                crc = updateByteBuffer(crc, ((DirectBuffer)buffer).address(), pos, rem);\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                crc = updateByteBuffer(crc, guard.address(), pos, rem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.ref.Reference;\n@@ -34,1 +33,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -165,1 +163,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -177,2 +174,2 @@\n-            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n-                crc = updateDirectByteBuffer(crc, ((DirectBuffer) buffer).address(),\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                crc = updateDirectByteBuffer(crc, guard.address(),\n@@ -180,2 +177,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.ref.Reference;\n@@ -36,1 +35,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -336,1 +334,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -343,5 +340,2 @@\n-                long address = ((DirectBuffer) dictionary).address();\n-                try (var guard = NIO_ACCESS.acquireSession(dictionary)) {\n-                    setDictionaryBuffer(zsRef.address(), address + position, remaining);\n-                } finally {\n-                    Reference.reachabilityFence(dictionary);\n+                try (var guard = NIO_ACCESS.acquireScope(dictionary)) {\n+                    setDictionaryBuffer(zsRef.address(), guard.address() + position, remaining);\n@@ -559,1 +553,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -594,2 +587,1 @@\n-                    try (var guard = NIO_ACCESS.acquireSession(input)) {\n-                        long inputAddress = ((DirectBuffer) input).address();\n+                    try (var guard = NIO_ACCESS.acquireScope(input)) {\n@@ -597,1 +589,1 @@\n-                            inputAddress + inputPos, inputRem,\n+                            guard.address() + inputPos, inputRem,\n@@ -600,2 +592,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(input);\n@@ -685,1 +675,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -717,2 +706,1 @@\n-                    long outputAddress = ((DirectBuffer) output).address();\n-                    try (var guard = NIO_ACCESS.acquireSession(output)) {\n+                    try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -721,1 +709,1 @@\n-                            outputAddress + outputPos, outputRem,\n+                                guard.address() + outputPos, outputRem,\n@@ -723,2 +711,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(output);\n@@ -738,2 +724,1 @@\n-                    long inputAddress = ((DirectBuffer) input).address();\n-                    try (var inGuard = NIO_ACCESS.acquireSession(output)) {\n+                    try (var inGuard = NIO_ACCESS.acquireScope(input)) {\n@@ -741,2 +726,1 @@\n-                            long outputAddress = outputPos + ((DirectBuffer) output).address();\n-                            try (var outGuard = NIO_ACCESS.acquireSession(output)) {\n+                            try (var outGuard = NIO_ACCESS.acquireScope(output)) {\n@@ -744,2 +728,2 @@\n-                                    inputAddress + inputPos, inputRem,\n-                                    outputAddress, outputRem,\n+                                    inGuard.address() + inputPos, inputRem,\n+                                    outGuard.address(), outputRem,\n@@ -747,2 +731,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(output);\n@@ -754,1 +736,1 @@\n-                                inputAddress + inputPos, inputRem,\n+                                inGuard.address() + inputPos, inputRem,\n@@ -758,2 +740,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(input);\n@@ -765,2 +745,1 @@\n-                        long outputAddress = ((DirectBuffer) output).address();\n-                        try (var guard = NIO_ACCESS.acquireSession(output)) {\n+                        try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -769,1 +748,1 @@\n-                                outputAddress + outputPos, outputRem,\n+                                guard.address()+ outputPos, outputRem,\n@@ -771,2 +750,0 @@\n-                        } finally {\n-                            Reference.reachabilityFence(output);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.ref.Reference;\n@@ -36,1 +35,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -258,1 +256,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -265,5 +262,2 @@\n-                long address = ((DirectBuffer) dictionary).address();\n-                try (var guard = NIO_ACCESS.acquireSession(dictionary)) {\n-                    setDictionaryBuffer(zsRef.address(), address + position, remaining);\n-                } finally {\n-                    Reference.reachabilityFence(dictionary);\n+                try (var guard = NIO_ACCESS.acquireScope(dictionary)) {\n+                    setDictionaryBuffer(zsRef.address(), guard.address() + position, remaining);\n@@ -364,1 +358,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -390,2 +383,1 @@\n-                            try (var guard = NIO_ACCESS.acquireSession(input)) {\n-                                long inputAddress = ((DirectBuffer) input).address();\n+                            try (var guard = NIO_ACCESS.acquireScope(input)) {\n@@ -393,1 +385,1 @@\n-                                    inputAddress + inputPos, inputRem,\n+                                    guard.address() + inputPos, inputRem,\n@@ -395,2 +387,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(input);\n@@ -508,1 +498,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -525,2 +514,1 @@\n-                            long outputAddress = ((DirectBuffer) output).address();\n-                            try (var guard = NIO_ACCESS.acquireSession(output)) {\n+                            try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -529,3 +517,1 @@\n-                                    outputAddress + outputPos, outputRem);\n-                            } finally {\n-                                Reference.reachabilityFence(output);\n+                                    guard.address() + outputPos, outputRem);\n@@ -549,2 +535,1 @@\n-                            long inputAddress = ((DirectBuffer) input).address();\n-                            try (var inGuard = NIO_ACCESS.acquireSession(input)) {\n+                            try (var inGuard = NIO_ACCESS.acquireScope(input)) {\n@@ -552,2 +537,1 @@\n-                                    long outputAddress = ((DirectBuffer) output).address();\n-                                    try (var outGuard = NIO_ACCESS.acquireSession(output)) {\n+                                    try (var outGuard = NIO_ACCESS.acquireScope(output)) {\n@@ -555,4 +539,2 @@\n-                                            inputAddress + inputPos, inputRem,\n-                                            outputAddress + outputPos, outputRem);\n-                                    } finally {\n-                                        Reference.reachabilityFence(output);\n+                                            inGuard.address() + inputPos, inputRem,\n+                                            outGuard.address() + outputPos, outputRem);\n@@ -564,1 +546,1 @@\n-                                        inputAddress + inputPos, inputRem,\n+                                        inGuard.address() + inputPos, inputRem,\n@@ -567,2 +549,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(input);\n@@ -574,2 +554,1 @@\n-                                long outputAddress = ((DirectBuffer) output).address();\n-                                try (var guard = NIO_ACCESS.acquireSession(output)) {\n+                                try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -578,3 +557,1 @@\n-                                        outputAddress + outputPos, outputRem);\n-                                } finally {\n-                                    Reference.reachabilityFence(output);\n+                                        guard.address() + outputPos, outputRem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import sun.nio.ch.DirectBuffer;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemorySession;\n+import java.lang.ref.Reference;\n@@ -103,1 +106,2 @@\n-     * @see #acquireSession(Buffer)\n+     *\n+     * @see #acquireScope(Buffer)\n@@ -113,1 +117,1 @@\n-     * try (var guard = acquireSession(buffer)) {\n+     * try (var guard = acquireScope(buffer)) {\n@@ -120,1 +124,1 @@\n-    SessionAcquisition acquireSession(Buffer buffer);\n+    ScopeAcquisition acquireScope(Buffer buffer);\n@@ -157,2 +161,7 @@\n-    @FunctionalInterface\n-    interface SessionAcquisition extends AutoCloseable {\n+    sealed interface ScopeAcquisition extends AutoCloseable {\n+\n+        \/**\n+         * {@return the address of the underlying Buffer}.\n+         * @throws ClassCastException if the underlying Buffer is not a DirectBuffer\n+         *\/\n+        long address();\n@@ -162,0 +171,56 @@\n+\n+        static ScopeAcquisition create(Buffer buffer, MemorySession session) {\n+            return new ClosingScopeAcquisition(buffer, session);\n+        }\n+\n+        static ScopeAcquisition create(Buffer buffer) {\n+            return new NoOpScopeAcquisition(buffer);\n+        }\n+\n+        final class NoOpScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            NoOpScopeAcquisition(Buffer buffer) {\n+                super(buffer);\n+            }\n+\n+            @Override\n+            public void close() {\n+                Reference.reachabilityFence(buffer);\n+            }\n+        }\n+\n+        final class ClosingScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            private final MemorySession scope;\n+\n+            ClosingScopeAcquisition(Buffer buffer,\n+                                    MemorySession scope) {\n+                super(buffer);\n+                this.scope = scope;\n+            }\n+\n+            @Override\n+            public void close() {\n+                try {\n+                    scope.close();\n+                } finally {\n+                    Reference.reachabilityFence(buffer);\n+                }\n+            }\n+        }\n+\n+        abstract sealed class AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            final Buffer buffer;\n+\n+            AbstractScopeAcquisition(Buffer buffer) {\n+                this.buffer = buffer;\n+            }\n+\n+            @Override\n+            public final long address() {\n+                return ((DirectBuffer) buffer).address();\n+            }\n+\n+        }\n+\n@@ -163,0 +228,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":71,"deletions":5,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -783,1 +783,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -788,1 +787,1 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n@@ -790,1 +789,1 @@\n-                    ((DirectBuffer) bb).address() + pos, rem,\n+                    guard.address() + pos, rem,\n@@ -930,1 +929,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -941,1 +939,1 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n@@ -943,1 +941,1 @@\n-            written = send0(fd, ((DirectBuffer)bb).address() + pos, rem,\n+            written = send0(fd, guard.address() + pos, rem,\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -169,1 +168,1 @@\n-    @SuppressWarnings({\"removal\", \"try\"})\n+    @SuppressWarnings(\"removal\")\n@@ -182,3 +181,3 @@\n-        if (dst instanceof sun.nio.ch.DirectBuffer buf) {\n-            try (var guard = NIO_ACCESS.acquireSession(dst)) {\n-                long address = buf.address() + pos;\n+        if (dst instanceof sun.nio.ch.DirectBuffer) {\n+            try (var guard = NIO_ACCESS.acquireScope(dst)) {\n+                long address = guard.address() + pos;\n@@ -188,2 +187,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buf);\n@@ -233,1 +230,1 @@\n-    @SuppressWarnings({\"removal\", \"try\"})\n+    @SuppressWarnings(\"removal\")\n@@ -244,3 +241,3 @@\n-        if (src instanceof sun.nio.ch.DirectBuffer buf) {\n-            try (var guard = NIO_ACCESS.acquireSession(src)) {\n-                long address = buf.address() + pos;\n+        if (src instanceof sun.nio.ch.DirectBuffer) {\n+            try (var guard = NIO_ACCESS.acquireScope(src)) {\n+                long address = guard.address() + pos;\n@@ -250,2 +247,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buf);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -729,1 +729,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -742,2 +741,2 @@\n-        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n-             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -760,1 +759,1 @@\n-                    inAddr = ((DirectBuffer) inBuffer).address();\n+                    inAddr = inGuard.address();\n@@ -776,1 +775,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -682,1 +682,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -695,2 +694,2 @@\n-        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n-             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -704,1 +703,1 @@\n-                inAddr = ((DirectBuffer) inBuffer).address();\n+                inAddr = inGuard.address();\n@@ -715,1 +714,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n@@ -885,1 +884,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -896,1 +894,1 @@\n-        try (var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n+        try (var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -903,1 +901,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -289,1 +289,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -302,1 +301,0 @@\n-        long addr = ((DirectBuffer)byteBuffer).address();\n@@ -313,2 +311,2 @@\n-            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n-                token.p11.C_DigestUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n+                token.p11.C_DigestUpdate(session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Digest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -549,1 +549,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -563,2 +562,2 @@\n-        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n-             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -583,1 +582,1 @@\n-                    inAddr = ((DirectBuffer) inBuffer).address();\n+                    inAddr = inGuard.address();\n@@ -599,1 +598,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -265,1 +265,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -277,1 +276,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -279,2 +277,2 @@\n-            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n-                token.p11.C_SignUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n+                token.p11.C_SignUpdate(session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -607,1 +607,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -627,1 +626,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -629,1 +627,1 @@\n-            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n@@ -633,1 +631,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n@@ -637,1 +635,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -578,1 +578,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -594,1 +593,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -596,1 +594,1 @@\n-            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n@@ -599,1 +597,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n@@ -602,1 +600,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -839,1 +839,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -848,2 +847,2 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n-            int n = receive0(fd, resultContainer, ((DirectBuffer) bb).address() + pos, rem, peek);\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int n = receive0(fd, resultContainer, guard.address() + pos, rem, peek);\n@@ -1016,1 +1015,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -1040,2 +1038,2 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n-            int written = send0(fd, ((DirectBuffer) bb).address() + pos, rem, addr,\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int written = send0(fd, guard.address() + pos, rem, addr,\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -584,1 +584,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -591,2 +590,2 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n-            int n = receive0(fd, resultContainer, ((DirectBuffer) bb).address() + pos, rem);\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int n = receive0(fd, resultContainer, guard.address() + pos, rem);\n@@ -895,1 +894,0 @@\n-    @SuppressWarnings(\"try\")\n@@ -919,2 +917,2 @@\n-        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n-            int written = send0(fd, ((DirectBuffer) bb).address() + pos, rem, addr,\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int written = send0(fd, guard.address() + pos, rem, addr,\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}