{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -95,0 +97,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -910,0 +914,1 @@\n+        @SuppressWarnings(\"try\")\n@@ -912,0 +917,2 @@\n+                \/\/ The use of DirectBuffer::address below need not be guarded as\n+                \/\/ no access is made to actual memory.\n@@ -946,1 +953,1 @@\n-                    ((DirectBuffer) dst).address() - dstaddr + dst.position()) {\n+                        ((DirectBuffer) dst).address() - dstaddr + dst.position()) {\n@@ -949,1 +956,0 @@\n-\n@@ -1588,2 +1594,4 @@\n-                    Unsafe.getUnsafe().setMemory(((DirectBuffer)dst).address(),\n-                        len + dst.position(), (byte)0);\n+                    try (var guard = NIO_ACCESS.acquireScope(dst)) {\n+                        Unsafe.getUnsafe().setMemory(guard.address(),\n+                                len + dst.position(), (byte) 0);\n+                    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -781,0 +781,1 @@\n+\n@@ -826,1 +827,1 @@\n-                public Runnable acquireSession(Buffer buffer, boolean async) {\n+                public Runnable acquireSessionOrNull(Buffer buffer, boolean async) {\n@@ -838,0 +839,10 @@\n+                @Override\n+                public ScopeAcquisition acquireScope(Buffer buffer) {\n+                    var scope = buffer.session();\n+                    if (scope == null) {\n+                        return ScopeAcquisition.create(buffer);\n+                    }\n+                    scope.acquire0();\n+                    return ScopeAcquisition.create(buffer, scope);\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -30,1 +29,1 @@\n-import sun.nio.ch.DirectBuffer;\n+\n@@ -34,0 +33,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -99,4 +100,2 @@\n-            try {\n-                adler = updateByteBuffer(adler, ((DirectBuffer)buffer).address(), pos, rem);\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                adler = updateByteBuffer(adler, guard.address(), pos, rem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -32,1 +31,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -36,0 +34,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -99,4 +99,2 @@\n-            try {\n-                crc = updateByteBuffer(crc, ((DirectBuffer)buffer).address(), pos, rem);\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                crc = updateByteBuffer(crc, guard.address(), pos, rem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.ref.Reference;\n@@ -34,1 +33,2 @@\n-import sun.nio.ch.DirectBuffer;\n+\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n@@ -174,2 +174,2 @@\n-            try {\n-                crc = updateDirectByteBuffer(crc, ((DirectBuffer) buffer).address(),\n+            try (var guard = NIO_ACCESS.acquireScope(buffer)) {\n+                crc = updateDirectByteBuffer(crc, guard.address(),\n@@ -177,2 +177,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buffer);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.ref.Reference;\n@@ -36,1 +35,2 @@\n-import sun.nio.ch.DirectBuffer;\n+\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n@@ -340,5 +340,2 @@\n-                long address = ((DirectBuffer) dictionary).address();\n-                try {\n-                    setDictionaryBuffer(zsRef.address(), address + position, remaining);\n-                } finally {\n-                    Reference.reachabilityFence(dictionary);\n+                try (var guard = NIO_ACCESS.acquireScope(dictionary)) {\n+                    setDictionaryBuffer(zsRef.address(), guard.address() + position, remaining);\n@@ -590,2 +587,1 @@\n-                    try {\n-                        long inputAddress = ((DirectBuffer) input).address();\n+                    try (var guard = NIO_ACCESS.acquireScope(input)) {\n@@ -593,1 +589,1 @@\n-                            inputAddress + inputPos, inputRem,\n+                            guard.address() + inputPos, inputRem,\n@@ -596,2 +592,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(input);\n@@ -712,2 +706,1 @@\n-                    long outputAddress = ((DirectBuffer) output).address();\n-                    try {\n+                    try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -716,1 +709,1 @@\n-                            outputAddress + outputPos, outputRem,\n+                                guard.address() + outputPos, outputRem,\n@@ -718,2 +711,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(output);\n@@ -733,2 +724,1 @@\n-                    long inputAddress = ((DirectBuffer) input).address();\n-                    try {\n+                    try (var inGuard = NIO_ACCESS.acquireScope(input)) {\n@@ -736,2 +726,1 @@\n-                            long outputAddress = outputPos + ((DirectBuffer) output).address();\n-                            try {\n+                            try (var outGuard = NIO_ACCESS.acquireScope(output)) {\n@@ -739,2 +728,2 @@\n-                                    inputAddress + inputPos, inputRem,\n-                                    outputAddress, outputRem,\n+                                    inGuard.address() + inputPos, inputRem,\n+                                    outGuard.address(), outputRem,\n@@ -742,2 +731,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(output);\n@@ -749,1 +736,1 @@\n-                                inputAddress + inputPos, inputRem,\n+                                inGuard.address() + inputPos, inputRem,\n@@ -753,2 +740,0 @@\n-                    } finally {\n-                        Reference.reachabilityFence(input);\n@@ -760,2 +745,1 @@\n-                        long outputAddress = ((DirectBuffer) output).address();\n-                        try {\n+                        try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -764,1 +748,1 @@\n-                                outputAddress + outputPos, outputRem,\n+                                guard.address()+ outputPos, outputRem,\n@@ -766,2 +750,0 @@\n-                        } finally {\n-                            Reference.reachabilityFence(output);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.ref.Reference;\n@@ -36,1 +35,2 @@\n-import sun.nio.ch.DirectBuffer;\n+\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n@@ -262,5 +262,2 @@\n-                long address = ((DirectBuffer) dictionary).address();\n-                try {\n-                    setDictionaryBuffer(zsRef.address(), address + position, remaining);\n-                } finally {\n-                    Reference.reachabilityFence(dictionary);\n+                try (var guard = NIO_ACCESS.acquireScope(dictionary)) {\n+                    setDictionaryBuffer(zsRef.address(), guard.address() + position, remaining);\n@@ -386,2 +383,1 @@\n-                            try {\n-                                long inputAddress = ((DirectBuffer) input).address();\n+                            try (var guard = NIO_ACCESS.acquireScope(input)) {\n@@ -389,1 +385,1 @@\n-                                    inputAddress + inputPos, inputRem,\n+                                    guard.address() + inputPos, inputRem,\n@@ -391,2 +387,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(input);\n@@ -520,2 +514,1 @@\n-                            long outputAddress = ((DirectBuffer) output).address();\n-                            try {\n+                            try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -524,3 +517,1 @@\n-                                    outputAddress + outputPos, outputRem);\n-                            } finally {\n-                                Reference.reachabilityFence(output);\n+                                    guard.address() + outputPos, outputRem);\n@@ -544,2 +535,1 @@\n-                            long inputAddress = ((DirectBuffer) input).address();\n-                            try {\n+                            try (var inGuard = NIO_ACCESS.acquireScope(input)) {\n@@ -547,2 +537,1 @@\n-                                    long outputAddress = ((DirectBuffer) output).address();\n-                                    try {\n+                                    try (var outGuard = NIO_ACCESS.acquireScope(output)) {\n@@ -550,4 +539,2 @@\n-                                            inputAddress + inputPos, inputRem,\n-                                            outputAddress + outputPos, outputRem);\n-                                    } finally {\n-                                        Reference.reachabilityFence(output);\n+                                            inGuard.address() + inputPos, inputRem,\n+                                            outGuard.address() + outputPos, outputRem);\n@@ -559,1 +546,1 @@\n-                                        inputAddress + inputPos, inputRem,\n+                                        inGuard.address() + inputPos, inputRem,\n@@ -562,2 +549,0 @@\n-                            } finally {\n-                                Reference.reachabilityFence(input);\n@@ -569,2 +554,1 @@\n-                                long outputAddress = ((DirectBuffer) output).address();\n-                                try {\n+                                try (var guard = NIO_ACCESS.acquireScope(output)) {\n@@ -573,3 +557,1 @@\n-                                        outputAddress + outputPos, outputRem);\n-                                } finally {\n-                                    Reference.reachabilityFence(output);\n+                                        guard.address() + outputPos, outputRem);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -43,0 +45,2 @@\n+    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import sun.nio.ch.DirectBuffer;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemorySession;\n+import java.lang.ref.Reference;\n@@ -93,2 +96,29 @@\n-     *\/\n-    Runnable acquireSession(Buffer buffer, boolean async);\n+     * {@snippet lang = java:\n+     * var handler = acquireSessionOrNull(buffer, async);\n+     * try {\n+     *     performOperation(buffer);\n+     * } finally {\n+     *     if (handler != null) {\n+     *         handler.run();\n+     *     }\n+     * }\n+     *}\n+     *\n+     * @see #acquireScope(Buffer)\n+     *\/\n+    Runnable acquireSessionOrNull(Buffer buffer, boolean async);\n+\n+    \/**\n+     * Used by operations to make a buffer's session non-closeable\n+     * (for the duration of the operation) by acquiring the session.\n+     * A valid close handler is always returned (if the buffer has no scope, or acquiring is not\n+     * required to guarantee safety, a noop close handler is returned).\n+     * {@snippet lang = java:\n+     * try (var guard = acquireScope(buffer)) {\n+     *     performOperation(buffer);\n+     * }\n+     *}\n+     *\n+     * @see #acquireSessionOrNull(Buffer, boolean)\n+     *\/\n+    ScopeAcquisition acquireScope(Buffer buffer);\n@@ -130,0 +160,69 @@\n+\n+    sealed interface ScopeAcquisition extends AutoCloseable {\n+\n+        \/**\n+         * {@return the address of the underlying Buffer}.\n+         * @throws ClassCastException if the underlying Buffer is not a DirectBuffer\n+         *\/\n+        long address();\n+\n+        @Override\n+        void close();\n+\n+        static ScopeAcquisition create(Buffer buffer, MemorySession session) {\n+            return new ClosingScopeAcquisition(buffer, session);\n+        }\n+\n+        static ScopeAcquisition create(Buffer buffer) {\n+            return new NoOpScopeAcquisition(buffer);\n+        }\n+\n+        final class NoOpScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            NoOpScopeAcquisition(Buffer buffer) {\n+                super(buffer);\n+            }\n+\n+            @Override\n+            public void close() {\n+                Reference.reachabilityFence(buffer);\n+            }\n+        }\n+\n+        final class ClosingScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            private final MemorySession scope;\n+\n+            ClosingScopeAcquisition(Buffer buffer,\n+                                    MemorySession scope) {\n+                super(buffer);\n+                this.scope = scope;\n+            }\n+\n+            @Override\n+            public void close() {\n+                try {\n+                    scope.close();\n+                } finally {\n+                    Reference.reachabilityFence(buffer);\n+                }\n+            }\n+        }\n+\n+        abstract sealed class AbstractScopeAcquisition implements ScopeAcquisition {\n+\n+            final Buffer buffer;\n+\n+            AbstractScopeAcquisition(Buffer buffer) {\n+                this.buffer = buffer;\n+            }\n+\n+            @Override\n+            public final long address() {\n+                return ((DirectBuffer) buffer).address();\n+            }\n+\n+        }\n+\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":101,"deletions":2,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -169,1 +169,3 @@\n-        jdk.net;\n+        jdk.net,\n+        jdk.sctp,\n+        jdk.crypto.cryptoki;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -90,0 +92,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -783,7 +787,9 @@\n-        int n = receive0(fd,\n-                         ((DirectBuffer)bb).address() + pos, rem,\n-                         sourceSockAddr.address(),\n-                         connected);\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int n = receive0(fd,\n+                    guard.address() + pos, rem,\n+                    sourceSockAddr.address(),\n+                    connected);\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -933,1 +939,1 @@\n-        try {\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n@@ -935,1 +941,1 @@\n-            written = send0(fd, ((DirectBuffer)bb).address() + pos, rem,\n+            written = send0(fd, guard.address() + pos, rem,\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,7 @@\n+    \/\/ Use of the returned address must be guarded if this DirectBuffer\n+    \/\/ is backed by a memory session that is explicitly closeable.\n+    \/\/\n+    \/\/ Failure to do this means the outcome is undefined including\n+    \/\/ silent unrelated memory mutation and JVM crashes.\n+    \/\/\n+    \/\/ Guards are available in the JavaNioAccess class.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DirectBuffer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -478,1 +478,1 @@\n-        return NIO_ACCESS.acquireSession(bb, async);\n+        return NIO_ACCESS.acquireSessionOrNull(bb, async);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.access\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.ref.Reference;\n@@ -33,0 +32,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -46,0 +48,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -177,3 +181,3 @@\n-        if (dst instanceof sun.nio.ch.DirectBuffer buf) {\n-            try {\n-                long address = buf.address() + pos;\n+        if (dst instanceof sun.nio.ch.DirectBuffer) {\n+            try (var guard = NIO_ACCESS.acquireScope(dst)) {\n+                long address = guard.address() + pos;\n@@ -183,2 +187,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buf);\n@@ -239,3 +241,3 @@\n-        if (src instanceof sun.nio.ch.DirectBuffer buf) {\n-            try {\n-                long address = buf.address() + pos;\n+        if (src instanceof sun.nio.ch.DirectBuffer) {\n+            try (var guard = NIO_ACCESS.acquireScope(src)) {\n+                long address = guard.address() + pos;\n@@ -245,2 +247,0 @@\n-            } finally {\n-                Reference.reachabilityFence(buf);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +60,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -737,1 +741,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -754,1 +759,1 @@\n-                    inAddr = ((DirectBuffer) inBuffer).address();\n+                    inAddr = inGuard.address();\n@@ -770,1 +775,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -59,0 +61,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -690,1 +694,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -698,1 +703,1 @@\n-                inAddr = ((DirectBuffer) inBuffer).address();\n+                inAddr = inGuard.address();\n@@ -709,1 +714,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n@@ -889,1 +894,1 @@\n-        try {\n+        try (var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -896,1 +901,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.*;\n@@ -35,0 +34,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +59,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -298,1 +301,0 @@\n-        long addr = ((DirectBuffer)byteBuffer).address();\n@@ -309,1 +311,3 @@\n-            token.p11.C_DigestUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n+                token.p11.C_DigestUpdate(session.id(), guard.address() + ofs, null, 0, len);\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Digest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -46,1 +48,0 @@\n-import static sun.security.pkcs11.P11Cipher.*;\n@@ -61,0 +62,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -559,1 +562,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireScope(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireScope(outBuffer)) {\n@@ -578,1 +582,1 @@\n-                    inAddr = ((DirectBuffer) inBuffer).address();\n+                    inAddr = inGuard.address();\n@@ -594,1 +598,1 @@\n-                outAddr = ((DirectBuffer) outBuffer).address();\n+                outAddr = outGuard.address();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +60,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -272,1 +276,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -274,1 +277,3 @@\n-            token.p11.C_SignUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n+                token.p11.C_SignUpdate(session.id(), guard.address() + ofs, null, 0, len);\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n@@ -31,0 +29,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -34,1 +35,0 @@\n-import java.util.Arrays;\n@@ -71,0 +71,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -624,1 +626,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -626,1 +627,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n@@ -630,1 +631,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n@@ -634,1 +635,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -38,1 +41,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -101,0 +103,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -589,1 +593,0 @@\n-            long addr = ((DirectBuffer)byteBuffer).address();\n@@ -591,1 +594,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireScope(byteBuffer)) {\n@@ -594,1 +597,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n@@ -597,1 +600,1 @@\n-                        (session.id(), addr + ofs, null, 0, len);\n+                        (session.id(), guard.address() + ofs, null, 0, len);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -77,0 +79,3 @@\n+\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -842,1 +847,2 @@\n-        int n = receive0(fd, resultContainer, ((DirectBuffer)bb).address() + pos, rem, peek);\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int n = receive0(fd, resultContainer, guard.address() + pos, rem, peek);\n@@ -844,3 +850,4 @@\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -1031,5 +1038,7 @@\n-        int written = send0(fd, ((DirectBuffer)bb).address() + pos, rem, addr,\n-                            port, -1 \/*121*\/, streamNumber, unordered, ppid);\n-        if (written > 0)\n-            bb.position(pos + written);\n-        return written;\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int written = send0(fd, guard.address() + pos, rem, addr,\n+                    port, -1 \/*121*\/, streamNumber, unordered, ppid);\n+            if (written > 0)\n+                bb.position(pos + written);\n+            return written;\n+        }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -74,0 +76,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -586,4 +590,6 @@\n-        int n = receive0(fd, resultContainer, ((DirectBuffer)bb).address() + pos, rem);\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int n = receive0(fd, resultContainer, guard.address() + pos, rem);\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -911,5 +917,7 @@\n-        int written = send0(fd, ((DirectBuffer)bb).address() + pos, rem, addr,\n-                            port, assocId, streamNumber, unordered, ppid);\n-        if (written > 0)\n-            bb.position(pos + written);\n-        return written;\n+        try (var guard = NIO_ACCESS.acquireScope(bb)) {\n+            int written = send0(fd, guard.address() + pos, rem, addr,\n+                    port, assocId, streamNumber, unordered, ppid);\n+            if (written > 0)\n+                bb.position(pos + written);\n+            return written;\n+        }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}