{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -95,0 +97,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -910,0 +914,1 @@\n+        @SuppressWarnings(\"try\")\n@@ -915,3 +920,2 @@\n-                \/\/ Get the current memory address for the given ByteBuffers\n-                long srcaddr = dsrc.address();\n-                long dstaddr = ddst.address();\n+                try (var srcGuard = NIO_ACCESS.acquireSession(src);\n+                     var dstGuard = NIO_ACCESS.acquireSession(dst)) {\n@@ -919,6 +923,3 @@\n-                \/\/ Find the lowest attachment that is the base memory address\n-                \/\/ of the shared memory for the src object\n-                while (dsrc.attachment() != null) {\n-                    srcaddr = ((DirectBuffer) dsrc.attachment()).address();\n-                    dsrc = (DirectBuffer) dsrc.attachment();\n-                }\n+                    \/\/ Get the current memory address for the given ByteBuffers\n+                    long srcaddr = dsrc.address();\n+                    long dstaddr = ddst.address();\n@@ -926,6 +927,6 @@\n-                \/\/ Find the lowest attachment that is the base memory address\n-                \/\/ of the shared memory for the dst object\n-                while (ddst.attachment() != null) {\n-                    dstaddr = ((DirectBuffer) ddst.attachment()).address();\n-                    ddst = (DirectBuffer) ddst.attachment();\n-                }\n+                    \/\/ Find the lowest attachment that is the base memory address\n+                    \/\/ of the shared memory for the src object\n+                    while (dsrc.attachment() != null) {\n+                        srcaddr = ((DirectBuffer) dsrc.attachment()).address();\n+                        dsrc = (DirectBuffer) dsrc.attachment();\n+                    }\n@@ -933,15 +934,23 @@\n-                \/\/ If the base addresses are not the same, there is no overlap\n-                if (srcaddr != dstaddr) {\n-                    return dst;\n-                }\n-                \/\/ At this point we know these objects share the same memory.\n-                \/\/ This checks the starting position of the src and dst address\n-                \/\/ for overlap.\n-                \/\/ It uses the base address minus the passed object's address to\n-                \/\/ get the offset from the base address, then add the position()\n-                \/\/ from the passed object.  That gives up the true offset from\n-                \/\/ the base address.  As long as the src side is >= the dst\n-                \/\/ side, we are not in overlap.\n-                if (((DirectBuffer) src).address() - srcaddr + src.position() >=\n-                    ((DirectBuffer) dst).address() - dstaddr + dst.position()) {\n-                    return dst;\n+                    \/\/ Find the lowest attachment that is the base memory address\n+                    \/\/ of the shared memory for the dst object\n+                    while (ddst.attachment() != null) {\n+                        dstaddr = ((DirectBuffer) ddst.attachment()).address();\n+                        ddst = (DirectBuffer) ddst.attachment();\n+                    }\n+\n+                    \/\/ If the base addresses are not the same, there is no overlap\n+                    if (srcaddr != dstaddr) {\n+                        return dst;\n+                    }\n+                    \/\/ At this point we know these objects share the same memory.\n+                    \/\/ This checks the starting position of the src and dst address\n+                    \/\/ for overlap.\n+                    \/\/ It uses the base address minus the passed object's address to\n+                    \/\/ get the offset from the base address, then add the position()\n+                    \/\/ from the passed object.  That gives up the true offset from\n+                    \/\/ the base address.  As long as the src side is >= the dst\n+                    \/\/ side, we are not in overlap.\n+                    if (((DirectBuffer) src).address() - srcaddr + src.position() >=\n+                            ((DirectBuffer) dst).address() - dstaddr + dst.position()) {\n+                        return dst;\n+                    }\n@@ -1513,0 +1522,1 @@\n+        @SuppressWarnings(\"try\")\n@@ -1588,2 +1598,4 @@\n-                    Unsafe.getUnsafe().setMemory(((DirectBuffer)dst).address(),\n-                        len + dst.position(), (byte)0);\n+                    try (var guard = NIO_ACCESS.acquireSession(dst)) {\n+                        Unsafe.getUnsafe().setMemory(((DirectBuffer) dst).address(),\n+                                len + dst.position(), (byte) 0);\n+                    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":44,"deletions":32,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -781,0 +781,8 @@\n+\n+                \/\/ We are not using a lambda here because this would create\n+                \/\/ a circular dependency with lambda factories.\n+                static final JavaNioAccess.SessionAcquisition NO_OP_CLOSE = new JavaNioAccess.SessionAcquisition() {\n+                    @Override\n+                    public void close() {}\n+                };\n+\n@@ -826,1 +834,1 @@\n-                public Runnable acquireSession(Buffer buffer, boolean async) {\n+                public Runnable acquireSessionOrNull(Buffer buffer, boolean async) {\n@@ -838,0 +846,10 @@\n+                @Override\n+                public SessionAcquisition acquireSession(Buffer buffer) {\n+                    var session = buffer.session();\n+                    if (session == null) {\n+                        return NO_OP_CLOSE;\n+                    }\n+                    session.acquire0();\n+                    return session::release0;\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -90,0 +92,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -99,1 +102,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -90,0 +92,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -99,1 +102,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -163,0 +165,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -174,1 +177,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(buffer)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -334,0 +336,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -341,1 +344,1 @@\n-                try {\n+                try (var guard = NIO_ACCESS.acquireSession(dictionary)) {\n@@ -556,0 +559,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -590,1 +594,1 @@\n-                    try {\n+                    try (var guard = NIO_ACCESS.acquireSession(input)) {\n@@ -681,0 +685,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -713,1 +718,1 @@\n-                    try {\n+                    try (var guard = NIO_ACCESS.acquireSession(output)) {\n@@ -734,1 +739,1 @@\n-                    try {\n+                    try (var inGuard = NIO_ACCESS.acquireSession(output)) {\n@@ -737,1 +742,1 @@\n-                            try {\n+                            try (var outGuard = NIO_ACCESS.acquireSession(output)) {\n@@ -761,1 +766,1 @@\n-                        try {\n+                        try (var guard = NIO_ACCESS.acquireSession(output)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import static java.util.zip.ZipUtils.NIO_ACCESS;\n+\n@@ -256,0 +258,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -263,1 +266,1 @@\n-                try {\n+                try (var guard = NIO_ACCESS.acquireSession(dictionary)) {\n@@ -361,0 +364,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -386,1 +390,1 @@\n-                            try {\n+                            try (var guard = NIO_ACCESS.acquireSession(input)) {\n@@ -504,0 +508,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -521,1 +526,1 @@\n-                            try {\n+                            try (var guard = NIO_ACCESS.acquireSession(output)) {\n@@ -545,1 +550,1 @@\n-                            try {\n+                            try (var inGuard = NIO_ACCESS.acquireSession(input)) {\n@@ -548,1 +553,1 @@\n-                                    try {\n+                                    try (var outGuard = NIO_ACCESS.acquireSession(output)) {\n@@ -570,1 +575,1 @@\n-                                try {\n+                                try (var guard = NIO_ACCESS.acquireSession(output)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -43,0 +45,2 @@\n+    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,2 +93,28 @@\n-     *\/\n-    Runnable acquireSession(Buffer buffer, boolean async);\n+     * {@snippet lang = java:\n+     * var handler = acquireSessionOrNoOp(buffer);\n+     * try {\n+     *     performOperation(buffer);\n+     * } finally {\n+     *     if (handler != null) {\n+     *         handler.run();\n+     *     }\n+     * }\n+     *}\n+     * @see #acquireSession(Buffer)\n+     *\/\n+    Runnable acquireSessionOrNull(Buffer buffer, boolean async);\n+\n+    \/**\n+     * Used by operations to make a buffer's session non-closeable\n+     * (for the duration of the operation) by acquiring the session.\n+     * A valid close handler is always returned (if the buffer has no scope, or acquiring is not\n+     * required to guarantee safety, a noop close handler is returned).\n+     * {@snippet lang = java:\n+     * try (var guard = acquireSession(buffer)) {\n+     *     performOperation(buffer);\n+     * }\n+     *}\n+     *\n+     * @see #acquireSessionOrNull(Buffer, boolean)\n+     *\/\n+    SessionAcquisition acquireSession(Buffer buffer);\n@@ -130,0 +156,7 @@\n+\n+    @FunctionalInterface\n+    interface SessionAcquisition extends AutoCloseable {\n+\n+        @Override\n+        void close();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -169,1 +169,3 @@\n-        jdk.net;\n+        jdk.net,\n+        jdk.sctp,\n+        jdk.crypto.cryptoki;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -90,0 +92,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -779,0 +783,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -783,7 +788,9 @@\n-        int n = receive0(fd,\n-                         ((DirectBuffer)bb).address() + pos, rem,\n-                         sourceSockAddr.address(),\n-                         connected);\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+            int n = receive0(fd,\n+                    ((DirectBuffer) bb).address() + pos, rem,\n+                    sourceSockAddr.address(),\n+                    connected);\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -923,0 +930,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -933,1 +941,1 @@\n-        try {\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,11 @@\n+    \/\/ Use of the returned address must be guarded if this DirectBuffer\n+    \/\/ is backed by a memory session that is explicitly closeable.\n+    \/\/\n+    \/\/ Failure to do this means the outcome is undefined including\n+    \/\/ silent unrelated memory mutation and JVM crashes.\n+    \/\/\n+    \/\/ An example of a guarded use of a memory address is shown here:\n+    \/\/\n+    \/\/ try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+    \/\/     performOperation(bb.address());\n+    \/\/ }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DirectBuffer.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -478,1 +478,1 @@\n-        return NIO_ACCESS.acquireSession(bb, async);\n+        return NIO_ACCESS.acquireSessionOrNull(bb, async);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,0 +219,2 @@\n+     * <p>\n+     * The returned ByteBuffer is guaranteed not to be asynchronously closeable.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,0 +91,2 @@\n+     * <p>\n+     * The returned NativeBuffer is guaranteed not to be asynchronously closeable.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/NativeBuffers.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.access\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -46,0 +49,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -164,1 +169,1 @@\n-    @SuppressWarnings(\"removal\")\n+    @SuppressWarnings({\"removal\", \"try\"})\n@@ -178,1 +183,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(dst)) {\n@@ -228,1 +233,1 @@\n-    @SuppressWarnings(\"removal\")\n+    @SuppressWarnings({\"removal\", \"try\"})\n@@ -240,1 +245,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(src)) {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +60,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -725,0 +729,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -737,1 +742,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -59,0 +61,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -678,0 +682,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -690,1 +695,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n@@ -879,0 +885,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -889,1 +896,1 @@\n-        try {\n+        try (var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.*;\n@@ -35,0 +34,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +59,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -286,0 +289,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -309,1 +313,3 @@\n-            token.p11.C_DigestUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n+                token.p11.C_DigestUpdate(session.id(), addr + ofs, null, 0, len);\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Digest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -46,1 +48,0 @@\n-import static sun.security.pkcs11.P11Cipher.*;\n@@ -61,0 +62,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -546,0 +549,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -559,1 +563,2 @@\n-        try {\n+        try (var inGuard = NIO_ACCESS.acquireSession(inBuffer);\n+             var outGuard = NIO_ACCESS.acquireSession(outBuffer)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -58,0 +60,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -261,0 +265,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -274,1 +279,3 @@\n-            token.p11.C_SignUpdate(session.id(), addr + ofs, null, 0, len);\n+            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n+                token.p11.C_SignUpdate(session.id(), addr + ofs, null, 0, len);\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n@@ -31,0 +29,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -34,1 +35,0 @@\n-import java.util.Arrays;\n@@ -71,0 +71,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -605,0 +607,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -626,1 +629,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -38,1 +41,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -101,0 +103,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -574,0 +578,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -591,1 +596,1 @@\n-            try {\n+            try (var guard = NIO_ACCESS.acquireSession(byteBuffer)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -77,0 +79,3 @@\n+\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -834,0 +839,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -842,1 +848,2 @@\n-        int n = receive0(fd, resultContainer, ((DirectBuffer)bb).address() + pos, rem, peek);\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+            int n = receive0(fd, resultContainer, ((DirectBuffer) bb).address() + pos, rem, peek);\n@@ -844,3 +851,4 @@\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -1008,0 +1016,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -1031,5 +1040,7 @@\n-        int written = send0(fd, ((DirectBuffer)bb).address() + pos, rem, addr,\n-                            port, -1 \/*121*\/, streamNumber, unordered, ppid);\n-        if (written > 0)\n-            bb.position(pos + written);\n-        return written;\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+            int written = send0(fd, ((DirectBuffer) bb).address() + pos, rem, addr,\n+                    port, -1 \/*121*\/, streamNumber, unordered, ppid);\n+            if (written > 0)\n+                bb.position(pos + written);\n+            return written;\n+        }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -74,0 +76,2 @@\n+    private static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n@@ -580,0 +584,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -586,4 +591,6 @@\n-        int n = receive0(fd, resultContainer, ((DirectBuffer)bb).address() + pos, rem);\n-        if (n > 0)\n-            bb.position(pos + n);\n-        return n;\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+            int n = receive0(fd, resultContainer, ((DirectBuffer) bb).address() + pos, rem);\n+            if (n > 0)\n+                bb.position(pos + n);\n+            return n;\n+        }\n@@ -888,0 +895,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -911,5 +919,7 @@\n-        int written = send0(fd, ((DirectBuffer)bb).address() + pos, rem, addr,\n-                            port, assocId, streamNumber, unordered, ppid);\n-        if (written > 0)\n-            bb.position(pos + written);\n-        return written;\n+        try (var guard = NIO_ACCESS.acquireSession(bb)) {\n+            int written = send0(fd, ((DirectBuffer) bb).address() + pos, rem, addr,\n+                    port, assocId, streamNumber, unordered, ppid);\n+            if (written > 0)\n+                bb.position(pos + written);\n+            return written;\n+        }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"}]}