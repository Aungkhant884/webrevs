{"files":[{"patch":"@@ -1593,1 +1593,1 @@\n-                    var scope = NIO_ACCESS.acquireScopeOrNull(dst);\n+                    var scope = NIO_ACCESS.acquireSession(dst);\n@@ -1598,1 +1598,1 @@\n-                        NIO_ACCESS.releaseScope(dst, scope);\n+                        NIO_ACCESS.releaseSession(dst, scope);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -828,14 +828,1 @@\n-                public Runnable acquireSession(Buffer buffer, boolean async) {\n-                    var session = buffer.session();\n-                    if (session == null) {\n-                        return null;\n-                    }\n-                    if (async && session.ownerThread() != null) {\n-                        throw new IllegalStateException(\"Confined session not supported\");\n-                    }\n-                    session.acquire0();\n-                    return session::release0;\n-                }\n-\n-                @Override\n-                public MemorySessionImpl acquireScopeOrNull(Buffer buffer) {\n+                public MemorySessionImpl acquireSession(Buffer buffer) {\n@@ -851,1 +838,1 @@\n-                public void releaseScope(Buffer buffer, MemorySessionImpl scope) {\n+                public void releaseSession(Buffer buffer, MemorySessionImpl scope) {\n@@ -862,0 +849,6 @@\n+                @Override\n+                public boolean isThreadConfined(Buffer buffer) {\n+                    var scope = buffer.session();\n+                    return scope != null && scope.ownerThread() != null;\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(buffer);\n+            var scope = NIO_ACCESS.acquireSession(buffer);\n@@ -105,1 +105,1 @@\n-                NIO_ACCESS.releaseScope(buffer, scope);\n+                NIO_ACCESS.releaseSession(buffer, scope);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(buffer);\n+            var scope = NIO_ACCESS.acquireSession(buffer);\n@@ -104,1 +104,1 @@\n-                NIO_ACCESS.releaseScope(buffer, scope);\n+                NIO_ACCESS.releaseSession(buffer, scope);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(buffer);\n+            var scope = NIO_ACCESS.acquireSession(buffer);\n@@ -180,1 +180,1 @@\n-                NIO_ACCESS.releaseScope(buffer, scope);\n+                NIO_ACCESS.releaseSession(buffer, scope);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-                var scope = NIO_ACCESS.acquireScopeOrNull(dictionary);\n+                var scope = NIO_ACCESS.acquireSession(dictionary);\n@@ -345,1 +345,1 @@\n-                    NIO_ACCESS.releaseScope(dictionary, scope);\n+                    NIO_ACCESS.releaseSession(dictionary, scope);\n@@ -591,1 +591,1 @@\n-                    var scope = NIO_ACCESS.acquireScopeOrNull(input);\n+                    var scope = NIO_ACCESS.acquireSession(input);\n@@ -598,1 +598,1 @@\n-                        NIO_ACCESS.releaseScope(input, scope);\n+                        NIO_ACCESS.releaseSession(input, scope);\n@@ -713,1 +713,1 @@\n-                    var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                    var outScope = NIO_ACCESS.acquireSession(output);\n@@ -720,1 +720,1 @@\n-                        NIO_ACCESS.releaseScope(output, outScope);\n+                        NIO_ACCESS.releaseSession(output, outScope);\n@@ -734,1 +734,1 @@\n-                    var inScope = NIO_ACCESS.acquireScopeOrNull(input);\n+                    var inScope = NIO_ACCESS.acquireSession(input);\n@@ -737,1 +737,1 @@\n-                            var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                            var outScope = NIO_ACCESS.acquireSession(output);\n@@ -744,1 +744,1 @@\n-                                NIO_ACCESS.releaseScope(output, outScope);\n+                                NIO_ACCESS.releaseSession(output, outScope);\n@@ -755,1 +755,1 @@\n-                        NIO_ACCESS.releaseScope(input, inScope);\n+                        NIO_ACCESS.releaseSession(input, inScope);\n@@ -761,1 +761,1 @@\n-                        var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                        var outScope = NIO_ACCESS.acquireSession(output);\n@@ -768,1 +768,1 @@\n-                            NIO_ACCESS.releaseScope(output, outScope);\n+                            NIO_ACCESS.releaseSession(output, outScope);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-                var scope = NIO_ACCESS.acquireScopeOrNull(dictionary);\n+                var scope = NIO_ACCESS.acquireSession(dictionary);\n@@ -267,1 +267,1 @@\n-                    NIO_ACCESS.releaseScope(dictionary, scope);\n+                    NIO_ACCESS.releaseSession(dictionary, scope);\n@@ -387,1 +387,1 @@\n-                            var inScope = NIO_ACCESS.acquireScopeOrNull(input);\n+                            var inScope = NIO_ACCESS.acquireSession(input);\n@@ -393,1 +393,1 @@\n-                                NIO_ACCESS.releaseScope(input, inScope);\n+                                NIO_ACCESS.releaseSession(input, inScope);\n@@ -521,1 +521,1 @@\n-                            var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                            var outScope = NIO_ACCESS.acquireSession(output);\n@@ -527,1 +527,1 @@\n-                                NIO_ACCESS.releaseScope(output, outScope);\n+                                NIO_ACCESS.releaseSession(output, outScope);\n@@ -545,1 +545,1 @@\n-                            var inScope = NIO_ACCESS.acquireScopeOrNull(input);\n+                            var inScope = NIO_ACCESS.acquireSession(input);\n@@ -548,1 +548,1 @@\n-                                    var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                                    var outScope = NIO_ACCESS.acquireSession(output);\n@@ -554,1 +554,1 @@\n-                                        NIO_ACCESS.releaseScope(output, outScope);\n+                                        NIO_ACCESS.releaseSession(output, outScope);\n@@ -564,1 +564,1 @@\n-                                NIO_ACCESS.releaseScope(input, inScope);\n+                                NIO_ACCESS.releaseSession(input, inScope);\n@@ -570,1 +570,1 @@\n-                                var outScope = NIO_ACCESS.acquireScopeOrNull(output);\n+                                var outScope = NIO_ACCESS.acquireSession(output);\n@@ -576,1 +576,1 @@\n-                                    NIO_ACCESS.releaseScope(output, outScope);\n+                                    NIO_ACCESS.releaseSession(output, outScope);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -35,2 +34,0 @@\n-import java.lang.foreign.MemorySession;\n-import java.lang.ref.Reference;\n@@ -92,18 +89,0 @@\n-    \/**\n-     * Used by I\/O operations to make a buffer's session non-closeable\n-     * (for the duration of the I\/O operation) by acquiring the session.\n-     * Null is returned if the buffer has no scope, or acquiring is not\n-     * required to guarantee safety.\n-     * {@snippet lang = java:\n-     * var handler = acquireSession(buffer, async);\n-     * try {\n-     *     performOperation(buffer);\n-     * } finally {\n-     *     if (handler != null) {\n-     *         handler.run();\n-     *     }\n-     * }\n-     *}\n-     *\/\n-    Runnable acquireSession(Buffer buffer, boolean async);\n-\n@@ -115,1 +94,1 @@\n-     * var guard = acquireScopeOrNull(buffer);\n+     * var guard = acquireSession(buffer);\n@@ -119,1 +98,1 @@\n-     *     releaseScope(buffer, guard);\n+     *     releaseSession(buffer, guard);\n@@ -123,1 +102,1 @@\n-     * @see #releaseScope(Buffer, MemorySessionImpl)\n+     * @see #releaseSession(Buffer, MemorySessionImpl)\n@@ -125,1 +104,3 @@\n-    MemorySessionImpl acquireScopeOrNull(Buffer buffer);\n+    MemorySessionImpl acquireSession(Buffer buffer);\n+\n+    void releaseSession(Buffer buffer, MemorySessionImpl scope);\n@@ -127,1 +108,1 @@\n-    void releaseScope(Buffer buffer, MemorySessionImpl scope);\n+    boolean isThreadConfined(Buffer buffer);\n@@ -163,69 +144,0 @@\n-\n-    sealed interface ScopeAcquisition extends AutoCloseable {\n-\n-        \/**\n-         * {@return the address of the underlying Buffer}.\n-         * @throws ClassCastException if the underlying Buffer is not a DirectBuffer\n-         *\/\n-        long address();\n-\n-        @Override\n-        void close();\n-\n-        static ScopeAcquisition create(Buffer buffer, MemorySession session) {\n-            return new ClosingScopeAcquisition(buffer, session);\n-        }\n-\n-        static ScopeAcquisition create(Buffer buffer) {\n-            return new NoOpScopeAcquisition(buffer);\n-        }\n-\n-        final class NoOpScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n-\n-            NoOpScopeAcquisition(Buffer buffer) {\n-                super(buffer);\n-            }\n-\n-            @Override\n-            public void close() {\n-                Reference.reachabilityFence(buffer);\n-            }\n-        }\n-\n-        final class ClosingScopeAcquisition extends AbstractScopeAcquisition implements ScopeAcquisition {\n-\n-            private final MemorySession scope;\n-\n-            ClosingScopeAcquisition(Buffer buffer,\n-                                    MemorySession scope) {\n-                super(buffer);\n-                this.scope = scope;\n-            }\n-\n-            @Override\n-            public void close() {\n-                try {\n-                    scope.close();\n-                } finally {\n-                    Reference.reachabilityFence(buffer);\n-                }\n-            }\n-        }\n-\n-        abstract sealed class AbstractScopeAcquisition implements ScopeAcquisition {\n-\n-            final Buffer buffer;\n-\n-            AbstractScopeAcquisition(Buffer buffer) {\n-                this.buffer = buffer;\n-            }\n-\n-            @Override\n-            public final long address() {\n-                return ((DirectBuffer) buffer).address();\n-            }\n-\n-        }\n-\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":7,"deletions":95,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -787,1 +787,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -797,1 +797,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n@@ -942,1 +942,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -952,1 +952,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -139,1 +140,1 @@\n-            releaseScope(handle);\n+            releaseScope(bb, handle);\n@@ -186,1 +187,1 @@\n-                    handleReleasers = LinkedRunnable.of(Releaser.of(h), handleReleasers);\n+                    handleReleasers = LinkedRunnable.of(Releaser.of(buf, h), handleReleasers);\n@@ -334,1 +335,1 @@\n-        var handle = acquireScope(bb, async);\n+        var scope = acquireScope(bb, async);\n@@ -342,1 +343,1 @@\n-            releaseScope(handle);\n+            releaseScope(bb, scope);\n@@ -398,1 +399,1 @@\n-                    handleReleasers = LinkedRunnable.of(Releaser.of(h), handleReleasers);\n+                    handleReleasers = LinkedRunnable.of(Releaser.of(buf, h), handleReleasers);\n@@ -477,2 +478,5 @@\n-    static Runnable acquireScope(ByteBuffer bb, boolean async) {\n-        return NIO_ACCESS.acquireSession(bb, async);\n+    static MemorySessionImpl acquireScope(ByteBuffer bb, boolean async) {\n+        if (async && NIO_ACCESS.isThreadConfined(bb)) {\n+            throw new IllegalStateException(\"Confined session not supported\");\n+        }\n+        return NIO_ACCESS.acquireSession(bb);\n@@ -481,3 +485,1 @@\n-    private static void releaseScope(Runnable handle) {\n-        if (handle == null)\n-            return;\n+    private static void releaseScope(ByteBuffer bb, MemorySessionImpl session) {\n@@ -485,1 +487,1 @@\n-            handle.run();\n+            NIO_ACCESS.releaseSession(bb, session);\n@@ -498,1 +500,1 @@\n-            return IOUtil.Releaser.ofNullable(IOUtil.acquireScope(buf, true));\n+            return IOUtil.Releaser.ofNullable(buf, IOUtil.acquireScope(buf, true));\n@@ -505,1 +507,1 @@\n-                    handleReleasers = IOUtil.LinkedRunnable.of(IOUtil.Releaser.of(h), handleReleasers);\n+                    handleReleasers = IOUtil.LinkedRunnable.of(IOUtil.Releaser.of(b, h), handleReleasers);\n@@ -517,1 +519,1 @@\n-    static record LinkedRunnable(Runnable node, Runnable next)\n+    record LinkedRunnable(Runnable node, Runnable next)\n@@ -537,6 +539,6 @@\n-    static record Releaser(Runnable handle) implements Runnable {\n-        Releaser { Objects.requireNonNull(handle) ; }\n-        @Override public void run() { releaseScope(handle); }\n-        static Runnable of(Runnable handle) { return new Releaser(handle); }\n-        static Runnable ofNullable(Runnable handle) {\n-            if (handle == null)\n+    record Releaser(ByteBuffer bb, MemorySessionImpl session) implements Runnable {\n+        Releaser { Objects.requireNonNull(bb) ; Objects.requireNonNull(session); }\n+        @Override public void run() { releaseScope(bb, session); }\n+        static Runnable of(ByteBuffer bb, MemorySessionImpl session) { return new Releaser(bb, session); }\n+        static Runnable ofNullable(ByteBuffer bb, MemorySessionImpl session) {\n+            if (session == null)\n@@ -544,1 +546,1 @@\n-            return new Releaser(handle);\n+            return new Releaser(bb, session);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(dst);\n+            var scope = NIO_ACCESS.acquireSession(dst);\n@@ -189,1 +189,1 @@\n-                NIO_ACCESS.releaseScope(dst, scope);\n+                NIO_ACCESS.releaseSession(dst, scope);\n@@ -245,1 +245,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(src);\n+            var scope = NIO_ACCESS.acquireSession(src);\n@@ -252,1 +252,1 @@\n-                NIO_ACCESS.releaseScope(src, scope);\n+                NIO_ACCESS.releaseSession(src, scope);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -741,1 +741,1 @@\n-        var inScope = NIO_ACCESS.acquireScopeOrNull(inBuffer);\n+        var inScope = NIO_ACCESS.acquireSession(inBuffer);\n@@ -743,1 +743,1 @@\n-            var outScope = NIO_ACCESS.acquireScopeOrNull(outBuffer);\n+            var outScope = NIO_ACCESS.acquireSession(outBuffer);\n@@ -825,1 +825,1 @@\n-                NIO_ACCESS.releaseScope(outBuffer, outScope);\n+                NIO_ACCESS.releaseSession(outBuffer, outScope);\n@@ -828,1 +828,1 @@\n-            NIO_ACCESS.releaseScope(inBuffer, inScope);\n+            NIO_ACCESS.releaseSession(inBuffer, inScope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -694,1 +694,1 @@\n-        var inScope = NIO_ACCESS.acquireScopeOrNull(inBuffer);\n+        var inScope = NIO_ACCESS.acquireSession(inBuffer);\n@@ -696,1 +696,1 @@\n-            var outScope = NIO_ACCESS.acquireScopeOrNull(outBuffer);\n+            var outScope = NIO_ACCESS.acquireSession(outBuffer);\n@@ -807,1 +807,1 @@\n-                NIO_ACCESS.releaseScope(outBuffer, outScope);\n+                NIO_ACCESS.releaseSession(outBuffer, outScope);\n@@ -810,1 +810,1 @@\n-            NIO_ACCESS.releaseScope(inBuffer, inScope);\n+            NIO_ACCESS.releaseSession(inBuffer, inScope);\n@@ -901,1 +901,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(outBuffer);\n+        var scope = NIO_ACCESS.acquireSession(outBuffer);\n@@ -998,1 +998,1 @@\n-            NIO_ACCESS.releaseScope(outBuffer, scope);\n+            NIO_ACCESS.releaseSession(outBuffer, scope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(byteBuffer);\n+            var scope = NIO_ACCESS.acquireSession(byteBuffer);\n@@ -315,1 +315,1 @@\n-                NIO_ACCESS.releaseScope(byteBuffer, scope);\n+                NIO_ACCESS.releaseSession(byteBuffer, scope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Digest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-        var inScope = NIO_ACCESS.acquireScopeOrNull(inBuffer);\n+        var inScope = NIO_ACCESS.acquireSession(inBuffer);\n@@ -564,1 +564,1 @@\n-            var outScope = NIO_ACCESS.acquireScopeOrNull(outBuffer);\n+            var outScope = NIO_ACCESS.acquireSession(outBuffer);\n@@ -640,1 +640,1 @@\n-                NIO_ACCESS.releaseScope(outBuffer, outScope);\n+                NIO_ACCESS.releaseSession(outBuffer, outScope);\n@@ -643,1 +643,1 @@\n-            NIO_ACCESS.releaseScope(inBuffer, inScope);\n+            NIO_ACCESS.releaseSession(inBuffer, inScope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(byteBuffer);\n+            var scope = NIO_ACCESS.acquireSession(byteBuffer);\n@@ -281,1 +281,1 @@\n-                NIO_ACCESS.releaseScope(byteBuffer, scope);\n+                NIO_ACCESS.releaseSession(byteBuffer, scope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -627,1 +627,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(byteBuffer);\n+            var scope = NIO_ACCESS.acquireSession(byteBuffer);\n@@ -644,1 +644,1 @@\n-                NIO_ACCESS.releaseScope(byteBuffer, scope);\n+                NIO_ACCESS.releaseSession(byteBuffer, scope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-            var scope = NIO_ACCESS.acquireScopeOrNull(byteBuffer);\n+            var scope = NIO_ACCESS.acquireSession(byteBuffer);\n@@ -609,1 +609,1 @@\n-                NIO_ACCESS.releaseScope(byteBuffer, scope);\n+                NIO_ACCESS.releaseSession(byteBuffer, scope);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -847,1 +847,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -855,1 +855,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n@@ -1041,1 +1041,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -1049,1 +1049,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -590,1 +590,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -597,1 +597,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n@@ -920,1 +920,1 @@\n-        var scope = NIO_ACCESS.acquireScopeOrNull(bb);\n+        var scope = NIO_ACCESS.acquireSession(bb);\n@@ -928,1 +928,1 @@\n-            NIO_ACCESS.releaseScope(bb, scope);\n+            NIO_ACCESS.releaseSession(bb, scope);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}