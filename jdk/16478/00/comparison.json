{"files":[{"patch":"@@ -104,1 +104,1 @@\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,3 +263,3 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code byteAlignment <= 0}, or if {@code byteAlignment}\n-     * is not a power of 2.\n-     * @throws IllegalStateException if this arena has already been {@linkplain #close() closed}.\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code byteAlignment <= 0},\n+     *         or if {@code byteAlignment} is not a power of 2\n+     * @throws IllegalStateException if this arena has already been {@linkplain #close() closed}\n@@ -267,1 +267,1 @@\n-     * other than the arena's owner thread.\n+     *         other than the arena's owner thread\n@@ -292,1 +292,1 @@\n-     * @throws IllegalStateException if the arena has already been closed.\n+     * @throws IllegalStateException if the arena has already been closed\n@@ -294,1 +294,1 @@\n-     * by a {@linkplain Linker#downcallHandle(FunctionDescriptor, Linker.Option...) downcall method handle}.\n+     *         by a {@linkplain Linker#downcallHandle(FunctionDescriptor, Linker.Option...) downcall method handle}\n@@ -296,2 +296,2 @@\n-     * other than the arena's owner thread.\n-     * @throws UnsupportedOperationException if this arena cannot be closed explicitly.\n+     *         other than the arena's owner thread\n+     * @throws UnsupportedOperationException if this arena cannot be closed explicitly\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout.\n+     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout\n@@ -75,2 +75,2 @@\n-     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout.\n-     * @throws IllegalArgumentException if {@code index < 0 || index > argumentLayouts().size()}.\n+     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout\n+     * @throws IllegalArgumentException if {@code index < 0 || index > argumentLayouts().size()}\n@@ -83,1 +83,1 @@\n-     * @throws IllegalArgumentException if {@code newReturn} is a padding layout.\n+     * @throws IllegalArgumentException if {@code newReturn} is a padding layout\n@@ -113,2 +113,2 @@\n-     * @throws IllegalArgumentException if {@code resLayout} is a padding layout.\n-     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout.\n+     * @throws IllegalArgumentException if {@code resLayout} is a padding layout\n+     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout\n@@ -127,1 +127,1 @@\n-     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout.\n+     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-     * @throws IllegalArgumentException if {@code byteAlignment} is less than {@code M}, where {@code M} is the maximum alignment\n-     * constraint in any of the member layouts associated with this group layout.\n+     * @throws IllegalArgumentException if {@code byteAlignment} is less than {@code M}, where {@code M} is\n+     *         the maximum alignment constraint in any of the member layouts associated with this group layout\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -528,4 +528,4 @@\n-     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker.\n-     * @throws IllegalArgumentException if {@code !address.isNative()}, or if {@code address.equals(MemorySegment.NULL)}.\n-     * @throws IllegalArgumentException if an invalid combination of linker options is given.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker\n+     * @throws IllegalArgumentException if {@code !address.isNative()}, or if {@code address.equals(MemorySegment.NULL)}\n+     * @throws IllegalArgumentException if an invalid combination of linker options is given\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n@@ -578,3 +578,3 @@\n-     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker.\n-     * @throws IllegalArgumentException if an invalid combination of linker options is given.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker\n+     * @throws IllegalArgumentException if an invalid combination of linker options is given\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n@@ -613,1 +613,1 @@\n-     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker.\n+     * @throws IllegalArgumentException if the provided function descriptor is not supported by this linker\n@@ -615,2 +615,2 @@\n-     * type {@linkplain FunctionDescriptor#toMethodType() derived} from {@code function}.\n-     * @throws IllegalArgumentException if it is determined that the target method handle can throw an exception.\n+     *         type {@linkplain FunctionDescriptor#toMethodType() derived} from {@code function}\n+     * @throws IllegalArgumentException if it is determined that the target method handle can throw an exception\n@@ -619,2 +619,2 @@\n-     * thread {@code T}, other than the arena's owner thread.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     *         thread {@code T}, other than the arena's owner thread\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n@@ -729,1 +729,1 @@\n-         *                                  is unsupported on the current platform.\n+         *         is unsupported on the current platform\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-     * @throws IllegalArgumentException if {@code byteAlignment} is not a power of two.\n+     * @throws IllegalArgumentException if {@code byteAlignment} is not a power of two\n@@ -474,3 +474,3 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout path contains one or more <a href=#open-path-elements>open path elements<\/a>.\n-     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#open-path-elements>open path elements<\/a>\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>\n@@ -510,2 +510,2 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>\n@@ -602,2 +602,2 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout selected by the provided path is not a {@linkplain ValueLayout value layout}.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout selected by the provided path is not a {@linkplain ValueLayout value layout}\n@@ -645,2 +645,2 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout selected by the provided path is not a {@linkplain ValueLayout value layout}.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout selected by the provided path is not a {@linkplain ValueLayout value layout}\n@@ -684,2 +684,2 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>\n@@ -694,2 +694,2 @@\n-     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n-     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>\n@@ -697,1 +697,1 @@\n-     * sequence element indices, such as {@link PathElement#sequenceElement(long)} and {@link PathElement#sequenceElement(long, long)}).\n+     *         sequence element indices, such as {@link PathElement#sequenceElement(long)} and {@link PathElement#sequenceElement(long, long)})\n@@ -741,1 +741,1 @@\n-         * @throws IllegalArgumentException if {@code index < 0}.\n+         * @throws IllegalArgumentException if {@code index < 0}\n@@ -756,1 +756,1 @@\n-         * @throws IllegalArgumentException if {@code index < 0}.\n+         * @throws IllegalArgumentException if {@code index < 0}\n@@ -781,1 +781,1 @@\n-         * @throws IllegalArgumentException if {@code start < 0}, or {@code step == 0}.\n+         * @throws IllegalArgumentException if {@code start < 0}, or {@code step == 0}\n@@ -859,1 +859,1 @@\n-     * @throws IllegalArgumentException if {@code byteSize <= 0}.\n+     * @throws IllegalArgumentException if {@code byteSize <= 0}\n@@ -871,3 +871,3 @@\n-     * @throws IllegalArgumentException if {@code elementCount} is negative.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * elementCount} overflows.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}.\n+     * @throws IllegalArgumentException if {@code elementCount} is negative\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * elementCount} overflows\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}\n@@ -888,4 +888,4 @@\n-     * @throws IllegalArgumentException if the sum of the {@linkplain #byteSize() byte sizes} of the member layouts\n-     * overflows.\n-     * @throws IllegalArgumentException if a member layout in {@code elements} occurs at an offset (relative to the start\n-     * of the struct layout) which is not compatible with its alignment constraint.\n+     * @throws IllegalArgumentException if the sum of the {@linkplain #byteSize() byte sizes} of the member\n+     *         layouts overflows\n+     * @throws IllegalArgumentException if a member layout in {@code elements} occurs at an offset\n+     *         (relative to the start of the struct layout) which is not compatible with its alignment constraint\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -474,3 +474,3 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}.\n-     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}\n+     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}\n@@ -478,1 +478,1 @@\n-     * with the alignment constraint<\/a> in the provided layout.\n+     *         with the alignment constraint<\/a> in the provided layout.\n@@ -491,3 +491,3 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}.\n-     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}\n+     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}\n@@ -495,1 +495,1 @@\n-     * with the alignment constraint<\/a> in the provided layout.\n+     *         with the alignment constraint<\/a> in the provided layout.\n@@ -530,1 +530,1 @@\n-     * or {@code newSize > byteSize() - offset}\n+     *         or {@code newSize > byteSize() - offset}\n@@ -543,1 +543,1 @@\n-     * or {@code newSize > byteSize() - offset}\n+     *         or {@code newSize > byteSize() - offset}\n@@ -545,2 +545,2 @@\n-     * the provided alignment constraint.\n-     * @throws IllegalArgumentException if {@code byteAlignment <= 0}, or if {@code byteAlignment} is not a power of 2.\n+     *         the provided alignment constraint\n+     * @throws IllegalArgumentException if {@code byteAlignment <= 0}, or if {@code byteAlignment} is not a power of 2\n@@ -564,1 +564,1 @@\n-     * or {@code layout.byteSize() > byteSize() - offset}\n+     *         or {@code layout.byteSize() > byteSize() - offset}\n@@ -566,1 +566,1 @@\n-     * the alignment constraint specified by {@code layout}.\n+     *         the alignment constraint specified by {@code layout}\n@@ -584,1 +584,1 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0}, or {@code offset > byteSize()}.\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}, or {@code offset > byteSize()}\n@@ -594,3 +594,3 @@\n-     * @throws IllegalArgumentException if {@code newSize < 0}.\n-     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws IllegalArgumentException if {@code newSize < 0}\n+     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalCallerException if the caller is in a module that does not have native access enabled\n@@ -629,3 +629,3 @@\n-     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}.\n-     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}\n+     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalCallerException if the caller is in a module that does not have native access enabled\n@@ -666,4 +666,4 @@\n-     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment.\n-     * @throws IllegalArgumentException if {@code newSize < 0}.\n-     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     * @throws UnsupportedOperationException if this segment is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalArgumentException if {@code newSize < 0}\n+     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}\n+     * @throws IllegalCallerException if the caller is in a module that does not have native access enabled\n@@ -740,1 +740,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -742,2 +742,2 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         such that {@code isAccessibleBy(T) == false}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -757,1 +757,1 @@\n-     * @throws IndexOutOfBoundsException if {@code src.byteSize() > this.byteSize()}.\n+     * @throws IndexOutOfBoundsException if {@code src.byteSize() > this.byteSize()}\n@@ -759,1 +759,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -761,1 +761,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -763,1 +763,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -765,2 +765,2 @@\n-     * such that {@code src.isAccessibleBy(T) == false}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         such that {@code src.isAccessibleBy(T) == false}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -790,1 +790,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -792,1 +792,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -794,1 +794,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -796,1 +796,1 @@\n-     * such that {@code other.isAccessibleBy(T) == false}.\n+     *         such that {@code other.isAccessibleBy(T) == false}\n@@ -819,1 +819,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -821,1 +821,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -823,1 +823,1 @@\n-     * {@code isMapped() == false}.\n+     *         {@code isMapped() == false}.\n@@ -836,1 +836,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -838,1 +838,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -840,1 +840,1 @@\n-     * {@code isMapped() == false}.\n+     *         {@code isMapped() == false}\n@@ -853,1 +853,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -855,1 +855,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -857,1 +857,1 @@\n-     * {@code isMapped() == false}.\n+     *         {@code isMapped() == false}\n@@ -882,1 +882,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -884,1 +884,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -886,2 +886,3 @@\n-     * {@code isMapped() == false}.\n-     * @throws UncheckedIOException if there is an I\/O error writing the contents of this segment to the associated storage device\n+     *         {@code isMapped() == false}\n+     * @throws UncheckedIOException if there is an I\/O error writing the contents of this segment to the\n+     *         associated storage device\n@@ -919,2 +920,2 @@\n-     * e.g. if it is a heap segment backed by an array other than {@code byte[]}), or if its size is greater\n-     * than {@link Integer#MAX_VALUE}.\n+     *         e.g. if it is a heap segment backed by an array other than {@code byte[]}), or if its size is greater\n+     *         than {@link Integer#MAX_VALUE}\n@@ -930,1 +931,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -932,1 +933,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -934,1 +935,1 @@\n-     * e.g. its size is greater than {@link Integer#MAX_VALUE}.\n+     *         e.g. its size is greater than {@link Integer#MAX_VALUE}\n@@ -944,1 +945,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -946,1 +947,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -948,1 +949,1 @@\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}\n+     *         e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}\n@@ -958,1 +959,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -960,1 +961,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -962,1 +963,1 @@\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}.\n+     *         e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}\n@@ -972,1 +973,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -974,1 +975,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -976,1 +977,1 @@\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n+     *         e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}\n@@ -986,1 +987,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -988,1 +989,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -990,1 +991,1 @@\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n+     *         e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n@@ -1000,1 +1001,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1002,1 +1003,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1004,1 +1005,1 @@\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n+     *         e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}\n@@ -1014,1 +1015,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1016,1 +1017,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}.\n@@ -1018,1 +1019,1 @@\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n+     *         e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n@@ -1034,4 +1035,5 @@\n-     * @throws IllegalArgumentException if the size of the string is greater than the largest string supported by the platform.\n-     * @throws IndexOutOfBoundsException     if {@code offset < 0}.\n-     * @throws IndexOutOfBoundsException     if {@code offset > byteSize() - (B + 1)}, where {@code B} is the size,\n-     * in bytes, of the string encoded using UTF-8 charset {@code str.getBytes(StandardCharsets.UTF_8).length}).\n+     * @throws IllegalArgumentException if the size of the string is greater than the largest string\n+     *         supported by the platform.\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + 1)}, where {@code B} is the size,\n+     *         in bytes, of the string encoded using UTF-8 charset {@code str.getBytes(StandardCharsets.UTF_8).length})\n@@ -1039,1 +1041,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1041,1 +1043,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1057,14 +1059,15 @@\n-     * @throws IllegalArgumentException      if the size of the string is greater than the largest string supported by the platform.\n-     * @throws IndexOutOfBoundsException     if {@code offset < 0}.\n-     * @throws IndexOutOfBoundsException     if {@code offset > byteSize() - (B + N)}, where:\n-     * <ul>\n-     *     <li>{@code B} is the size, in bytes, of the string encoded using the provided charset\n-     *     (e.g. {@code str.getBytes(charset).length});<\/li>\n-     *     <li>{@code N} is the size (in bytes) of the terminator char according to the provided charset. For instance,\n-     *     this is 1 for {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n-     * <\/ul>\n-     * @throws IllegalStateException    if the {@linkplain #scope() scope} associated with this segment is not\n-     *                                  {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException     if this method is called from a thread {@code T},\n-     *                                  such that {@code isAccessibleBy(T) == false}.\n-     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IllegalArgumentException  if the size of the string is greater than the largest string\n+     *         supported by the platform\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + N)}, where:\n+     *         <ul>\n+     *             <li>{@code B} is the size, in bytes, of the string encoded using the provided charset\n+     *             (e.g. {@code str.getBytes(charset).length});<\/li>\n+     *             <li>{@code N} is the size (in bytes) of the terminator char according to the provided charset. For instance,\n+     *             this is 1 for {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n+     *         <\/ul>\n+     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with this segment is not\n+     *         {@linkplain Scope#isAlive() alive}\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     *         such that {@code isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}\n@@ -1085,3 +1088,3 @@\n-     * @throws IndexOutOfBoundsException     if {@code offset < 0}.\n-     * @throws IndexOutOfBoundsException     if {@code offset > byteSize() - (B + 1)}, where {@code B} is the size,\n-     * in bytes, of the string encoded using UTF-8 charset {@code str.getBytes(StandardCharsets.UTF_8).length}).\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + 1)}, where {@code B} is the size,\n+     *         in bytes, of the string encoded using UTF-8 charset {@code str.getBytes(StandardCharsets.UTF_8).length})\n@@ -1089,1 +1092,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1091,1 +1094,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}.\n@@ -1113,13 +1116,13 @@\n-     * @throws IndexOutOfBoundsException     if {@code offset < 0}.\n-     * @throws IndexOutOfBoundsException     if {@code offset > byteSize() - (B + N)}, where:\n-     * <ul>\n-     *     <li>{@code B} is the size, in bytes, of the string encoded using the provided charset\n-     *     (e.g. {@code str.getBytes(charset).length});<\/li>\n-     *     <li>{@code N} is the size (in bytes) of the terminator char according to the provided charset. For instance,\n-     *     this is 1 for {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n-     * <\/ul>\n-     * @throws IllegalStateException    if the {@linkplain #scope() scope} associated with this segment is not\n-     *                                  {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException     if this method is called from a thread {@code T},\n-     *                                  such that {@code isAccessibleBy(T) == false}.\n-     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + N)}, where:\n+     *         <ul>\n+     *             <li>{@code B} is the size, in bytes, of the string encoded using the provided charset\n+     *             (e.g. {@code str.getBytes(charset).length});<\/li>\n+     *             <li>{@code N} is the size (in bytes) of the terminator char according to the provided charset. For\n+     *             instance, this is 1 for {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n+     *         <\/ul>\n+     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with this segment is not\n+     *         {@linkplain Scope#isAlive() alive}\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     *         such that {@code isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}\n@@ -1145,4 +1148,3 @@\n-     * @throws IllegalArgumentException if the provided {@code buffer} is a heap buffer but is not backed by an array.\n-     *                                  For example, buffers directly or indirectly obtained via\n-     *                                  ({@link CharBuffer#wrap(CharSequence)} or {@link CharBuffer#wrap(char[], int, int)}\n-     *                                  are not backed by an array.\n+     * @throws IllegalArgumentException if the provided {@code buffer} is a heap buffer but is not backed by an array;\n+     *         For example, buffers directly or indirectly obtained via ({@link CharBuffer#wrap(CharSequence)} or\n+     *         {@link CharBuffer#wrap(char[], int, int)} are not backed by an array\n@@ -1282,1 +1284,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1284,1 +1286,1 @@\n-     * such that {@code srcSegment.isAccessibleBy(T) == false}.\n+     *         such that {@code srcSegment.isAccessibleBy(T) == false}\n@@ -1286,1 +1288,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1288,3 +1290,3 @@\n-     * such that {@code dstSegment.isAccessibleBy(T) == false}.\n-     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - bytes}.\n-     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - bytes}.\n+     *         such that {@code dstSegment.isAccessibleBy(T) == false}\n+     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - bytes}\n+     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - bytes}\n@@ -1292,2 +1294,2 @@\n-     * or {@code bytes} are {@code < 0}.\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n+     *         or {@code bytes} are {@code < 0}\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n@@ -1327,5 +1329,5 @@\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source (resp. destination) segment\/offset are\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the source\n-     * (resp. destination) element layout.\n-     * @throws IllegalArgumentException if {@code srcElementLayout.byteAlignment() > srcElementLayout.byteSize()}.\n-     * @throws IllegalArgumentException if {@code dstElementLayout.byteAlignment() > dstElementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if the element layouts have different sizes, if the source (resp. destination)\n+     *         segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the\n+     *         alignment constraint<\/a> in the source (resp. destination) element layout\n+     * @throws IllegalArgumentException if {@code srcElementLayout.byteAlignment() > srcElementLayout.byteSize()}\n+     * @throws IllegalArgumentException if {@code dstElementLayout.byteAlignment() > dstElementLayout.byteSize()}\n@@ -1333,1 +1335,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}.\n@@ -1335,1 +1337,1 @@\n-     * such that {@code srcSegment.isAccessibleBy(T) == false}.\n+     *         such that {@code srcSegment.isAccessibleBy(T) == false}\n@@ -1337,1 +1339,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1339,7 +1341,7 @@\n-     * such that {@code dstSegment.isAccessibleBy(T) == false}.\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n-     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code elementCount * dtsLayout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - (elementCount * srcLayout.byteSize())}.\n-     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}.\n-     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n+     *         such that {@code dstSegment.isAccessibleBy(T) == false}\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code elementCount * dtsLayout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - (elementCount * srcLayout.byteSize())}\n+     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n@@ -1365,1 +1367,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}.\n@@ -1367,1 +1369,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}.\n@@ -1369,2 +1371,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1381,1 +1383,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1383,1 +1385,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1385,3 +1387,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1398,1 +1400,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1400,1 +1402,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1402,2 +1404,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1418,3 +1420,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1431,1 +1433,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1433,1 +1435,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1435,2 +1437,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1447,1 +1449,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1449,1 +1451,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1451,3 +1453,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1464,1 +1466,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1466,1 +1468,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1468,2 +1470,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1480,1 +1482,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1482,1 +1484,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1484,3 +1486,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1497,1 +1499,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1499,1 +1501,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1501,2 +1503,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1513,1 +1515,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1515,1 +1517,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1517,3 +1519,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1530,1 +1532,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1532,1 +1534,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1534,2 +1536,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1546,1 +1548,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1548,1 +1550,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1550,3 +1552,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1563,1 +1565,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1565,1 +1567,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1567,2 +1569,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1579,1 +1581,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1581,1 +1583,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1583,3 +1585,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1596,1 +1598,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1598,1 +1600,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1600,2 +1602,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1612,1 +1614,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1614,1 +1616,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1616,3 +1618,3 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1632,1 +1634,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1634,1 +1636,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1636,1 +1638,1 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n@@ -1638,3 +1640,3 @@\n-     * {@code T}, and the address of the returned segment\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in {@code T}.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n+     *         {@code T}, and the address of the returned segment\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in {@code T}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n@@ -1651,1 +1653,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1653,1 +1655,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1655,4 +1657,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n-     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment\n@@ -1670,1 +1672,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1672,1 +1674,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1674,4 +1676,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1689,1 +1691,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1691,1 +1693,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1693,4 +1695,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1708,1 +1710,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1710,1 +1712,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1712,4 +1714,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1727,1 +1729,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1729,1 +1731,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1731,5 +1733,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1747,1 +1749,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1749,1 +1751,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1751,4 +1753,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1766,1 +1768,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1768,1 +1770,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1770,5 +1772,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1786,1 +1788,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1788,1 +1790,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1790,5 +1792,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1806,1 +1808,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1808,1 +1810,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1810,5 +1812,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1826,1 +1828,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1828,1 +1830,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1830,4 +1832,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1845,1 +1847,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1847,1 +1849,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1849,5 +1851,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1865,1 +1867,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1867,1 +1869,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1869,4 +1871,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1884,1 +1886,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1886,1 +1888,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1888,5 +1890,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1904,1 +1906,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1906,1 +1908,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1908,4 +1910,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1923,1 +1925,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1925,1 +1927,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1927,5 +1929,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1943,1 +1945,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1945,1 +1947,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1947,4 +1949,4 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -1962,1 +1964,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1964,1 +1966,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1966,5 +1968,5 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -1985,1 +1987,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -1987,1 +1989,1 @@\n-     * such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1989,2 +1991,2 @@\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout.\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n@@ -1992,4 +1994,4 @@\n-     * {@code T}, and the address of the returned segment\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in {@code T}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n+     *         {@code T}, and the address of the returned segment\n+     *         <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in {@code T}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n@@ -2064,1 +2066,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -2066,3 +2068,3 @@\n-     * such that {@code srcSegment.isAccessibleBy(T) == false}.\n-     * @throws  IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported.\n-     * @throws IllegalArgumentException if the destination array component type does not match {@code srcLayout.carrier()}.\n+     *         such that {@code srcSegment.isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported\n+     * @throws IllegalArgumentException if the destination array component type does not match {@code srcLayout.carrier()}\n@@ -2070,6 +2072,6 @@\n-     * with the alignment constraint<\/a> in the source element layout.\n-     * @throws IllegalArgumentException if {@code srcLayout.byteAlignment() > srcLayout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - (elementCount * srcLayout.byteSize())}.\n-     * @throws IndexOutOfBoundsException if {@code dstIndex > dstArray.length - elementCount}.\n-     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}.\n+     *         with the alignment constraint<\/a> in the source element layout\n+     * @throws IllegalArgumentException if {@code srcLayout.byteAlignment() > srcLayout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - (elementCount * srcLayout.byteSize())}\n+     * @throws IndexOutOfBoundsException if {@code dstIndex > dstArray.length - elementCount}\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}\n@@ -2103,1 +2105,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -2105,3 +2107,3 @@\n-     * such that {@code dstSegment.isAccessibleBy(T) == false}.\n-     * @throws  IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported.\n-     * @throws IllegalArgumentException if the source array component type does not match {@code srcLayout.carrier()}.\n+     *         such that {@code dstSegment.isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported\n+     * @throws IllegalArgumentException if the source array component type does not match {@code srcLayout.carrier()}\n@@ -2109,7 +2111,7 @@\n-     * with the alignment constraint<\/a> in the source element layout.\n-     * @throws IllegalArgumentException if {@code dstLayout.byteAlignment() > dstLayout.byteSize()}.\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n-     * @throws IndexOutOfBoundsException if {@code elementCount * dstLayout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}.\n-     * @throws IndexOutOfBoundsException if {@code srcIndex > srcArray.length - elementCount}.\n-     * @throws IndexOutOfBoundsException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n+     *         with the alignment constraint<\/a> in the source element layout\n+     * @throws IllegalArgumentException if {@code dstLayout.byteAlignment() > dstLayout.byteSize()}\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IndexOutOfBoundsException if {@code elementCount * dstLayout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}\n+     * @throws IndexOutOfBoundsException if {@code srcIndex > srcArray.length - elementCount}\n+     * @throws IndexOutOfBoundsException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n@@ -2151,1 +2153,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -2153,1 +2155,1 @@\n-     * such that {@code srcSegment.isAccessibleBy(T) == false}.\n+     *         such that {@code srcSegment.isAccessibleBy(T) == false}\n@@ -2155,1 +2157,1 @@\n-     * {@linkplain Scope#isAlive() alive}.\n+     *         {@linkplain Scope#isAlive() alive}\n@@ -2157,1 +2159,1 @@\n-     * such that {@code dstSegment.isAccessibleBy(T) == false}.\n+     *         such that {@code dstSegment.isAccessibleBy(T) == false}\n@@ -2159,1 +2161,1 @@\n-     * {@code srcToOffset > srcSegment.byteSize()}\n+     *         {@code srcToOffset > srcSegment.byteSize()}\n@@ -2161,1 +2163,1 @@\n-     * {@code dstToOffset > dstSegment.byteSize()}\n+     *         {@code dstToOffset > dstSegment.byteSize()}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":362,"deletions":360,"binary":false,"changes":722,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}\n@@ -332,1 +332,1 @@\n-     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain MemorySegment#isNative() native} segment.\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain MemorySegment#isNative() native} segment\n@@ -360,5 +360,6 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() != sourceElementLayout.byteSize()}.\n-     * @throws IllegalArgumentException if the source segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a>\n-     * in the source element layout.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n-     * @throws IllegalArgumentException if {@code sourceElementLayout.byteAlignment() > sourceElementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() != sourceElementLayout.byteSize()}\n+     * @throws IllegalArgumentException if the source segment\/offset\n+     *         are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a>\n+     *         in the source element layout.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n+     * @throws IllegalArgumentException if {@code sourceElementLayout.byteAlignment() > sourceElementLayout.byteSize()}\n@@ -366,1 +367,1 @@\n-     * {@linkplain MemorySegment.Scope#isAlive() alive}.\n+     *         {@linkplain MemorySegment.Scope#isAlive() alive}\n@@ -368,4 +369,4 @@\n-     * such that {@code source.isAccessibleBy(T) == false}.\n-     * @throws IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code sourceOffset > source.byteSize() - (elementCount * sourceElementLayout.byteSize())}.\n-     * @throws IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}.\n+     *         such that {@code source.isAccessibleBy(T) == false}\n+     * @throws IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code sourceOffset > source.byteSize() - (elementCount * sourceElementLayout.byteSize())}\n+     * @throws IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n@@ -398,1 +399,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -420,1 +421,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -442,1 +443,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -464,1 +465,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -486,1 +487,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -508,1 +509,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -530,1 +531,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n@@ -559,2 +560,2 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * count} overflows.\n-     * @throws IllegalArgumentException if {@code count < 0}.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * count} overflows\n+     * @throws IllegalArgumentException if {@code count < 0}\n@@ -589,1 +590,1 @@\n-     * or if {@code byteAlignment} is not a power of 2.\n+     *         or if {@code byteAlignment} is not a power of 2\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-     * @throws IllegalArgumentException if {@code elementCount} is negative.\n-     * @throws IllegalArgumentException if {@code elementLayout.bitSize() * elementCount} overflows.\n+     * @throws IllegalArgumentException if {@code elementCount} is negative\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() * elementCount} overflows\n@@ -104,3 +104,3 @@\n-     * or more element count is {@code <= 0} (but other than {@code -1}) or, if, after any required inference,\n-     * multiplying the element counts does not yield the same element count as the flattened projection of this\n-     * sequence layout.\n+     *         or more element count is {@code <= 0} (but other than {@code -1}) or, if, after any required inference,\n+     *         multiplying the element counts does not yield the same element count as the flattened projection of this\n+     *         sequence layout\n@@ -152,1 +152,1 @@\n-     * @throws IllegalArgumentException if {@code byteAlignment < elementLayout().byteAlignment()}.\n+     * @throws IllegalArgumentException if {@code byteAlignment < elementLayout().byteAlignment()}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -224,3 +224,3 @@\n-     * thread {@code T}, other than the arena's owner thread.\n-     * @throws IllegalArgumentException if {@code name} does not identify a valid library.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     *         thread {@code T}, other than the arena's owner thread\n+     * @throws IllegalArgumentException if {@code name} does not identify a valid library\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n@@ -252,3 +252,3 @@\n-     * thread {@code T}, other than the arena's owner thread.\n-     * @throws IllegalArgumentException if {@code path} does not point to a valid library.\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n+     *         thread {@code T}, other than the arena's owner thread\n+     * @throws IllegalArgumentException if {@code path} does not point to a valid library\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}