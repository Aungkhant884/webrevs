{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -308,1 +308,1 @@\n-     *     the length of this <code>SerialBlob<\/code> object.\n+     *     the length+1 of this {@code SerialBlob} object.\n@@ -313,2 +313,1 @@\n-     *     <code>BLOB<\/code> value; or if an invalid position is set; if an\n-     *     invalid offset value is set;\n+     *     {@code BLOB} value; or if an invalid position is set;\n@@ -330,1 +329,1 @@\n-     * value; <i>len<\/i> bytes from the given byte array are written.\n+     * value; {@code length} bytes from the given byte array are written.\n@@ -335,1 +334,1 @@\n-     *     the length of this <code>SerialBlob<\/code> object.\n+     *     the length+1 of this {@code SerialBlob} object.\n@@ -338,2 +337,2 @@\n-     * @param offset the offset in the <code>byte<\/code> array at which\n-     *     to start reading the bytes. The first offset position is\n+     * @param offset the offset into the array {@code bytes} at which\n+     *     to start reading the bytes to be set. The first offset position is\n@@ -341,1 +340,1 @@\n-     *     than the length of the <code>byte<\/code> array\n+     *     than the length of the array {@code bytes}\n@@ -343,1 +342,1 @@\n-     *     <code>BLOB<\/code> value from the array of bytes <i>bytes<\/i>.\n+     *     <code>BLOB<\/code> value from the array of bytes {@code bytes}\n@@ -348,3 +347,3 @@\n-     *     invalid offset value is set; if number of bytes to be written\n-     *     is greater than the <code>SerialBlob<\/code> length; or the combined\n-     *     values of the length and offset is greater than the Blob buffer;\n+     *     invalid offset value is set; or the combined values of the\n+     *     {@code length} and {@code offset} is greater than the length of\n+     *     {@code bytes};\n@@ -364,1 +363,1 @@\n-        if (pos < 1 || pos > this.length()) {\n+        if (pos < 1 || pos > len + 1) {\n@@ -368,4 +367,0 @@\n-        if ((long)(length) > origLen) {\n-            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n-        }\n-\n@@ -374,1 +369,6 @@\n-                    \"and length that is greater that the Blob buffer\");\n+                    \"and length that is greater than the length of bytes\");\n+        }\n+\n+        if (pos - 1 + length > Integer.MAX_VALUE) {\n+            throw new SerialException(\"Invalid length. Cannot have combined pos \" +\n+                    \"and length that is greater than Integer.MAX_VALUE\");\n@@ -377,1 +377,0 @@\n-        int i = 0;\n@@ -379,3 +378,5 @@\n-        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {\n-            this.buf[(int)pos + i] = bytes[offset + i ];\n-            i++;\n+        if (pos + length > len) {\n+            len = pos + length;\n+            byte[] newbuf = new byte[(int)len];\n+            System.arraycopy(buf, 0, newbuf, 0, (int)pos);\n+            buf = newbuf;\n@@ -383,1 +384,2 @@\n-        return i;\n+        System.arraycopy(bytes, offset, buf, (int)pos, length);\n+        return length;\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SerialBlob.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -371,1 +371,1 @@\n-     *         greater than the length of this <code>SerialClob<\/code> object\n+     *         greater than the length+1 of this {@code SerialClob} object\n@@ -376,4 +376,1 @@\n-     *     <code>CLOB<\/code> value; if an invalid position is set; if an\n-     *     invalid offset value is set; if number of bytes to be written\n-     *     is greater than the <code>SerialClob<\/code> length; or the combined\n-     *     values of the length and offset is greater than the Clob buffer;\n+     *     {@code CLOB} value; if an invalid position is set;\n@@ -394,1 +391,1 @@\n-     *         greater than the length of this <code>SerialClob<\/code> object\n+     *         greater than the length+1 of this {@code SerialClob} object\n@@ -403,3 +400,3 @@\n-     *     invalid offset value is set; if number of bytes to be written\n-     *     is greater than the <code>SerialClob<\/code> length; or the combined\n-     *     values of the length and offset is greater than the Clob buffer;\n+     *     invalid offset value is set; or the combined values of the\n+     *     {@code length} and {@code offset} is greater than the length of\n+     *     {@code str};\n@@ -411,3 +408,0 @@\n-        String temp = str.substring(offset);\n-        char cPattern[] = temp.toCharArray();\n-\n@@ -415,1 +409,1 @@\n-            throw new SerialException(\"Invalid offset in byte array set\");\n+            throw new SerialException(\"Invalid offset in String object set\");\n@@ -418,1 +412,1 @@\n-        if (pos < 1 || pos > this.length()) {\n+        if (pos < 1 || pos > len + 1) {\n@@ -422,4 +416,0 @@\n-        if ((long)(length) > origLen) {\n-            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n-        }\n-\n@@ -427,1 +417,1 @@\n-            \/\/ need check to ensure length + offset !> bytes.length\n+            \/\/ need check to ensure length + offset !> str.length\n@@ -429,1 +419,6 @@\n-                \" and length that is greater that the Blob buffer\");\n+                \" and length that is greater than the length of str\");\n+        }\n+\n+        if (pos - 1 + length > Integer.MAX_VALUE) {\n+            throw new SerialException(\"Invalid length. Cannot have combined pos \" +\n+                    \"and length that is greater than Integer.MAX_VALUE\");\n@@ -432,1 +427,0 @@\n-        int i = 0;\n@@ -434,3 +428,5 @@\n-        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {\n-            this.buf[(int)pos + i ] = cPattern[offset + i ];\n-            i++;\n+        if (pos + length > len) {\n+            len = pos + length;\n+            char[] newbuf = new char[(int)len];\n+            System.arraycopy(buf, 0, newbuf, 0, (int)pos);\n+            buf = newbuf;\n@@ -438,1 +434,5 @@\n-        return i;\n+\n+        String temp = str.substring(offset, offset + length);\n+        char cPattern[] = temp.toCharArray();\n+        System.arraycopy(cPattern, 0, buf, (int)pos, length);\n+        return length;\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SerialClob.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -399,0 +399,52 @@\n+\n+    \/*\n+     * Validate that setBytes will properly write a set of bytes to the\n+     * specified location in the SerialBlob and the correct count is returned\n+     * for bytes written (writePos - 1 + diff.length > sb.length() &&\n+     * writePos - 1 + bytesToWrite <= sb.length())\n+     *\/\n+    @Test\n+    public void test31() throws Exception {\n+        int writePos = 5;\n+        int bytesToWrite = 1;\n+        byte[] diff = new byte[]{7, 8, 9};\n+        byte[] expected = new byte[]{1, 2, 3, 4, 7};\n+        SerialBlob sb = new SerialBlob(bytes);\n+        int written = sb.setBytes(writePos, diff, 0, bytesToWrite);\n+        assertEquals(written, bytesToWrite);\n+        assertEquals(sb.getBytes(1, (int) sb.length()), expected);\n+    }\n+\n+    \/*\n+     * Validate that setBytes will properly write a set of bytes to the\n+     * specified location in the SerialBlob and the correct count is returned\n+     * for bytes written (writePos - 1 + bytesToWrite > sb.length())\n+     *\/\n+    @Test\n+    public void test32() throws Exception {\n+        int writePos = 5;\n+        int bytesToWrite = 2;\n+        byte[] diff = new byte[]{7, 8, 9, 0};\n+        byte[] expected = new byte[]{1, 2, 3, 4, 8, 9};\n+        SerialBlob sb = new SerialBlob(bytes);\n+        int written = sb.setBytes(writePos, diff, 1, bytesToWrite);\n+        assertEquals(written, bytesToWrite);\n+        assertEquals(sb.getBytes(1, (int) sb.length()), expected);\n+    }\n+\n+    \/*\n+     * Validate that setBytes will properly write a set of bytes to the\n+     * specified location in the SerialBlob and the correct count is returned\n+     * for bytes written (writePos == sb.length() + 1)\n+     *\/\n+    @Test\n+    public void test33() throws Exception {\n+        int writePos = 6;\n+        int bytesToWrite = 3;\n+        byte[] diff = new byte[]{7, 8, 9, 0};\n+        byte[] expected = new byte[]{1, 2, 3, 4, 5, 8, 9, 0};\n+        SerialBlob sb = new SerialBlob(bytes);\n+        int written = sb.setBytes(writePos, diff, 1, bytesToWrite);\n+        assertEquals(written, bytesToWrite);\n+        assertEquals(sb.getBytes(1, (int) sb.length()), expected);\n+    }\n","filename":"test\/jdk\/javax\/sql\/testng\/test\/rowset\/serial\/SerialBlobTests.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -410,1 +410,2 @@\n-     * SerialClob\n+     * SerialClob (writePos - 1 + val1.length() - offset > sc.length() &&\n+     * writePos - 1 + expectedWritten <= sc.length())\n@@ -412,1 +413,1 @@\n-    @Test(enabled = false)\n+    @Test\n@@ -414,0 +415,2 @@\n+        int writePos = 10;\n+        int offset = 7;\n@@ -417,1 +420,1 @@\n-        String expected = \"Hi, I am the Joker!\";\n+        String expected = \"Hi, I am the Joker!!!!!\";\n@@ -419,1 +422,1 @@\n-        int written = sc.setString(10, val1, 8, expectedWritten+1);\n+        int written = sc.setString(writePos, val1, offset, expectedWritten);\n@@ -421,1 +424,1 @@\n-\n+        assertEquals(sc.getSubString(1, (int) sc.length()), expected);\n@@ -499,0 +502,48 @@\n+\n+    \/*\n+     * Check calling setString() with offset > val1.length() throws a\n+     * SerialException\n+     *\/\n+    @Test(expectedExceptions = SerialException.class)\n+    public void test39() throws Exception {\n+        String val1 = \"hello\";\n+        int offset = val1.length() + 1;\n+        SerialClob sc = new SerialClob(chars);\n+        sc.setString(1, val1, offset, 0);\n+    }\n+\n+    \/*\n+     * Check that setString() updates the appropriate characters in the\n+     * SerialClob (writePos - 1 + expectedWritten > sc.length())\n+     *\/\n+    @Test\n+    public void test40() throws Exception {\n+        int writePos = 13;\n+        int offset = 7;\n+        int expectedWritten = 24;\n+        String val = \"Hello, I am Bruce Wayne\";\n+        String val1 = \"Hahaha the Joker, who are you?!\";\n+        String expected = \"Hello, I am the Joker, who are you?!\";\n+        SerialClob sc = new SerialClob(val.toCharArray());\n+        int written = sc.setString(writePos, val1, offset, expectedWritten);\n+        assertEquals(written, expectedWritten);\n+        assertEquals(sc.getSubString(1, (int) sc.length()), expected);\n+    }\n+\n+    \/*\n+     * Check that setString() updates the appropriate characters in the\n+     * SerialClob (writePos == sc.length() + 1)\n+     *\/\n+    @Test\n+    public void test41() throws Exception {\n+        int writePos = 10;\n+        int offset = 7;\n+        int expectedWritten = 10;\n+        String val = \"Hi, I am \";\n+        String val1 = \"Hahaha the Joker!\";\n+        String expected = \"Hi, I am the Joker!\";\n+        SerialClob sc = new SerialClob(val.toCharArray());\n+        int written = sc.setString(writePos, val1, offset, expectedWritten);\n+        assertEquals(written, expectedWritten);\n+        assertEquals(sc.getSubString(1, (int) sc.length()), expected);\n+    }\n","filename":"test\/jdk\/javax\/sql\/testng\/test\/rowset\/serial\/SerialClobTests.java","additions":57,"deletions":6,"binary":false,"changes":63,"status":"modified"}]}