{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,8 @@\n+        \/**\n+         * Used for instances of {@link EscapeTree}\n+         * representing some escaped documentation text.\n+         *\n+         * @since 21\n+         *\/\n+        ESCAPE,\n+\n@@ -253,1 +261,1 @@\n-         * representing some documentation text.\n+         * representing some plain documentation text.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,0 +146,16 @@\n+    \/**\n+     * Visits an {@code EscapeTree} node.\n+     *\n+     * @implSpec Visits the provided {@code EscapeTree} node\n+     * by calling {@code visitOther(node, p)}.\n+     *\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     *\n+     * @since 21\n+     *\/\n+    default R visitEscape(EscapeTree node, P p)  {\n+        return visitOther(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTreeVisitor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.source.doctree;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.util.Elements;\n+\n+\/**\n+ * A tree node for a character represented by an escape sequence.\n+ *\n+ * @apiNote This class does not itself constrain the set of valid escape sequences,\n+ * although the set may be effectively constrained to those defined in the\n+ * <a href=\"{@docRoot}\/..\/specs\/javadoc\/doc-comment-spec.html#escape-sequences\">\n+ * Documentation Comment Specification for the Standard Doclet<\/a>,\n+ * including the following context-sensitive escape sequences:\n+ *\n+ * <ul>\n+ * <li>{@code @@}, representing {@code @}, where it would otherwise be treated as introducing a block or inline tag,\n+ * <li>{@code @\/}, representing {@code \/}, as part of {@code *@\/} to represent <code>&ast;&sol;<\/code>, and\n+ * <li>{@code @*}, representing {@code *}, where it would otherwise be {@linkplain Elements#getDocComment(Element) discarded},\n+ *     after whitespace at the beginning of a line.\n+ * <\/ul>\n+ *\n+ * @since 21\n+ *\/\n+public interface EscapeTree extends TextTree {\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * <p>Note: this method returns the escaped character, not the original escape sequence.\n+     *\n+     *\/\n+    @Override\n+    String getBody();\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/EscapeTree.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import javax.lang.model.element.Element;\n@@ -31,0 +32,1 @@\n+import javax.lang.model.util.Elements;\n@@ -46,0 +48,1 @@\n+import com.sun.source.doctree.EscapeTree;\n@@ -178,0 +181,23 @@\n+    \/**\n+     * Creates a new {@code EscapeTree} object, to represent an escaped character.\n+     *\n+     * @apiNote This method does not itself constrain the set of valid escape sequences,\n+     * although the set may be effectively constrained to those defined in the\n+     * <a href=\"{@docRoot}\/..\/specs\/javadoc\/doc-comment-spec.html#escape-sequences\">\n+     * Documentation Comment Specification for the Standard Doclet<\/a>,\n+     * including the following context-sensitive escape sequences:\n+     *\n+     * <ul>\n+     * <li>{@code @@}, representing {@code @}, where it would otherwise be treated as introducing a block or inline tag,\n+     * <li>{@code @\/}, representing {@code \/}, as part of {@code *@\/} to represent <code>&ast;&sol;<\/code>, and\n+     * <li>{@code @*}, representing {@code *}, where it would otherwise be {@linkplain Elements#getDocComment(Element) discarded},\n+     *     after whitespace at the beginning of a line.\n+     * <\/ul>\n+     *\n+     * @param ch the character\n+     * @return an {@code EscapeTree} object\n+     *\n+     * @since 21\n+     *\/\n+    EscapeTree newEscapeTree(char ch);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,0 +280,16 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation returns {@code null}.\n+     *\n+     * @param node  {@inheritDoc}\n+     * @param p  {@inheritDoc}\n+     * @return the result of scanning\n+     *\n+     * @since 21\n+     *\/\n+    @Override\n+    public R visitEscape(EscapeTree node, P p) {\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,0 +235,16 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation calls {@code defaultAction}.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p {@inheritDoc}\n+     * @return  the result of {@code defaultAction}\n+     *\n+     * @since 21\n+     *\/\n+    @Override\n+    public R visitEscape(EscapeTree node, P p) {\n+        return defaultAction(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleDocTreeVisitor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -155,0 +155,4 @@\n+    char peekChar() {\n+        return buf[bp < buflen ? bp + 1 : buflen];\n+    }\n+\n@@ -227,0 +231,4 @@\n+                    \/\/ check for context-sensitive escape sequences:\n+                    \/\/   newline whitespace @@\n+                    \/\/   newline whitespace @*\n+                    \/\/   *@\/\n@@ -228,2 +236,21 @@\n-                        addPendingText(trees, lastNonWhite);\n-                        break loop;\n+                        char peek = peekChar();\n+                        if (peek == '@' || peek == '*') {\n+                            addPendingText(trees, bp - 1);\n+                            nextChar();\n+                            trees.add(m.at(bp - 1).newEscapeTree(ch));\n+                            newline = false;\n+                            nextChar();\n+                            textStart = bp;\n+                            break;\n+                        } else {\n+                            addPendingText(trees, lastNonWhite);\n+                            break loop;\n+                        }\n+                    } else if (textStart != -1 && buf[bp - 1] == '*' && peekChar() == '\/') {\n+                        addPendingText(trees, bp - 1);\n+                        nextChar();\n+                        trees.add(m.at(bp - 1).newEscapeTree('\/'));\n+                        newline = false;\n+                        nextChar();\n+                        textStart = bp;\n+                        break;\n@@ -297,4 +324,18 @@\n-            addPendingText(list, bp - 2);\n-            list.add(inlineTag());\n-            textStart = bp;\n-            lastNonWhite = -1;\n+            \/\/ check for context-sensitive escape-sequence\n+            \/\/   {@@\n+            if (peekChar() == '@') {\n+                if (textStart == -1) {\n+                    textStart = bp - 1;\n+                }\n+                addPendingText(list, bp - 1);\n+                nextChar();\n+                list.add(m.at(bp - 1).newEscapeTree('@'));\n+                nextChar();\n+                textStart = -1;\n+                lastNonWhite = bp;\n+            } else {\n+                addPendingText(list, bp - 2);\n+                list.add(inlineTag());\n+                textStart = bp;\n+                lastNonWhite = -1;\n+            }\n@@ -627,0 +668,27 @@\n+                case '@':\n+                    \/\/ check for context-sensitive escape sequences:\n+                    \/\/   newline whitespace @@\n+                    \/\/   newline whitespace @*\n+                    \/\/   *@\/\n+                    if (newline) {\n+                        char peek = peekChar();\n+                        if (peek == '@' || peek == '*') {\n+                            addPendingText(trees, bp - 1);\n+                            nextChar();\n+                            trees.add(m.at(bp - 1).newEscapeTree(ch));\n+                            newline = false;\n+                            nextChar();\n+                            textStart = bp;\n+                            break;\n+                        }\n+                    } else if (textStart != -1 && buf[bp - 1] == '*' && peekChar() == '\/') {\n+                        addPendingText(trees, bp - 1);\n+                        nextChar();\n+                        trees.add(m.at(bp - 1).newEscapeTree('\/'));\n+                        newline = false;\n+                        nextChar();\n+                        textStart = bp;\n+                        break;\n+                    }\n+                    \/\/ fallthrough\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":74,"deletions":6,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,0 +171,5 @@\n+            case ESCAPE -> {\n+                DCEscape esc = (DCEscape) this;\n+                return esc.pos + 2;\n+            }\n+\n@@ -644,0 +649,1 @@\n+    }\n@@ -645,0 +651,21 @@\n+    public static class DCEscape extends DCTree implements EscapeTree {\n+        public final char ch;\n+\n+        DCEscape(char ch) {\n+            this.ch = ch;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() {\n+            return Kind.ESCAPE;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n+            return v.visitEscape(this, d);\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public String getBody() {\n+            return String.valueOf(ch);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,0 +248,11 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitEscape(EscapeTree node, Void p) {\n+        try {\n+            out.write(\"@\");\n+            print(node.getBody());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+import com.sun.tools.javac.tree.DCTree.DCEscape;\n@@ -279,0 +280,7 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public DCEscape newEscapeTree(char ch) {\n+        DCEscape tree = new DCEscape(ch);\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import com.sun.source.doctree.EscapeTree;\n@@ -221,0 +222,6 @@\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Object visitEscape(EscapeTree node, Object p) {\n+            result.append(node.getBody());\n+            return null;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/jdk\/internal\/shellsupport\/doc\/JavadocFormatter.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+import com.sun.source.doctree.EscapeTree;\n@@ -1341,0 +1342,6 @@\n+                @Override\n+                public Boolean visitEscape(EscapeTree node, Content content) {\n+                    result.add(node.getBody());\n+                    return false;\n+                }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import com.sun.source.doctree.EscapeTree;\n@@ -389,0 +390,5 @@\n+            @Override\n+            public List<? extends DocTree> visitEscape(EscapeTree node, Void p) {\n+                return asList(node.getBody());\n+            }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+import com.sun.source.doctree.EscapeTree;\n@@ -361,0 +362,8 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitEscape(EscapeTree tree, Void ignore) {\n+        hasNonWhitespaceText = true;\n+        checkAllowsText(tree);\n+        markEnclosingTag(Flag.HAS_TEXT);\n+        return null;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8300914\n+ * @summary Allow `@` as an escape in documentation comments\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build DocCommentTester\n+ * @run main DocCommentTester AtEscapeTest.java\n+ *\/\n+\n+class AtEscapeTest {\n+    \/**\n+     * abc\n+     * @@tag\n+     * def\n+     *\/\n+    void escape_block_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc|_]\n+    Escape[ESCAPE, pos:6, @]\n+    Text[TEXT, pos:8, tag|_def]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@@tag} def\n+     *\/\n+    void escape_inline_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_{]\n+    Escape[ESCAPE, pos:6, @]\n+    Text[TEXT, pos:8, tag}_def]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc \/* def *@\/ ghi\n+     *\/\n+    void escape_end_comment() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_\/*_def_*]\n+    Escape[ESCAPE, pos:13, \/]\n+    Text[TEXT, pos:15, _ghi]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+    \/**\n+     abc\n+     @* def\n+     ghi\n+     *\/\n+    void escape_asterisk() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:5\n+  firstSentence: 3\n+    Text[TEXT, pos:5, abc|_____]\n+    Escape[ESCAPE, pos:14, *]\n+    Text[TEXT, pos:16, _def|_____ghi]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped tag @@tag;\n+     * xyz.\n+     *\/\n+    void not_escaped_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_tag_@@tag;|_xyz.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped asterisk @*;\n+     * xyz.\n+     *\/\n+    void not_escaped_asterisk() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_asterisk_@*;|_xyz.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped solidus @\/.\n+     * xyz.\n+     *\/\n+    void not_escaped_solidus() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_solidus_@\/.|_xyz.]\n+  block tags: empty\n+]\n+*\/\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/doctree\/AtEscapeTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -465,0 +465,5 @@\n+            public Void visitEscape(EscapeTree node, Void p) {\n+                header(node, node.getBody());\n+                return null;\n+            }\n+\n@@ -936,1 +941,1 @@\n-            String s2 = s.trim().replaceFirst(\"\\\\.\\\\s*\\\\n *@\", \".\\n@\");\n+            String s2 = s.trim().replaceFirst(\"\\\\.\\\\s*\\\\n *@(?![@*])\", \".\\n@\");\n@@ -955,1 +960,1 @@\n-            return s.replaceAll(\"\\n[ \\t]+@\", \"\\n@\");\n+            return s.replaceAll(\"\\n[ \\t]+@(?![@*])\", \"\\n@\");\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}