{"files":[{"patch":"@@ -109,0 +109,2 @@\n+         *\n+         * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,6 @@\n- * <p>The following escape sequences are supported:\n+ * @apiNote This class does not constrain the set of valid escape sequences,\n+ * although the set may be effectively constrained to those defined in the\n+ * <a href=\"{@docRoot}\/..\/specs\/javadoc\/doc-comment-spec.html#escape-sequences\">\n+ * Documentation Comment Specification for the Standard Doclet<\/a>,\n+ * including the following context-sensitive escape sequences:\n+ *\n@@ -36,4 +41,4 @@\n- *     <li>{@code @@}, representing {@code @}, where it would otherwise be treated as introducing a block or inline tag,\n- *     <li>{@code @\/}, representing {@code \/}, as part of {@code *@\/} to represent <code>&ast;&sol;<\/code>, and\n- *     <li>{@code @*}, representing {@code *}, where it would otherwise be {@linkplain Elements#getDocComment(Element) discarded},\n- *          after whitespace at the beginning of a line.\n+ * <li>{@code @@}, representing {@code @}, where it would otherwise be treated as introducing a block or inline tag,\n+ * <li>{@code @\/}, representing {@code \/}, as part of {@code *@\/} to represent <code>&ast;&sol;<\/code>, and\n+ * <li>{@code @*}, representing {@code *}, where it would otherwise be {@linkplain Elements#getDocComment(Element) discarded},\n+ *     after whitespace at the beginning of a line.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/EscapeTree.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javax.lang.model.element.Element;\n@@ -31,0 +32,1 @@\n+import javax.lang.model.util.Elements;\n@@ -181,0 +183,14 @@\n+     *\n+     * @apiNote This method does not constrain the set of valid escape sequences,\n+     * although the set may be effectively constrained to those defined in the\n+     * <a href=\"{@docRoot}\/..\/specs\/javadoc\/doc-comment-spec.html#escape-sequences\">\n+     * Documentation Comment Specification for the Standard Doclet<\/a>,\n+     * including the following context-sensitive escape sequences:\n+     *\n+     * <ul>\n+     * <li>{@code @@}, representing {@code @}, where it would otherwise be treated as introducing a block or inline tag,\n+     * <li>{@code @\/}, representing {@code \/}, as part of {@code *@\/} to represent <code>&ast;&sol;<\/code>, and\n+     * <li>{@code @*}, representing {@code *}, where it would otherwise be {@linkplain Elements#getDocComment(Element) discarded},\n+     *     after whitespace at the beginning of a line.\n+     * <\/ul>\n+     *\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -296,1 +296,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -231,0 +231,4 @@\n+                    \/\/ check for context-sensitive escape sequences:\n+                    \/\/   newline whitespace @@\n+                    \/\/   newline whitespace @*\n+                    \/\/   *@\/\n@@ -237,1 +241,0 @@\n-                            nextChar();\n@@ -239,0 +242,1 @@\n+                            nextChar();\n@@ -249,1 +253,0 @@\n-                        nextChar();\n@@ -251,0 +254,1 @@\n+                        nextChar();\n@@ -319,0 +323,2 @@\n+            \/\/ check for context-sensitive escape-sequence\n+            \/\/   {@@\n@@ -662,0 +668,4 @@\n+                    \/\/ check for context-sensitive escape sequences:\n+                    \/\/   newline whitespace @@\n+                    \/\/   newline whitespace @*\n+                    \/\/   *@\/\n@@ -668,1 +678,0 @@\n-                            nextChar();\n@@ -670,0 +679,1 @@\n+                            nextChar();\n@@ -677,1 +687,0 @@\n-                        nextChar();\n@@ -679,0 +688,1 @@\n+                        nextChar();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -98,0 +98,48 @@\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped tag @@tag;\n+     * xyz.\n+     *\/\n+    void not_escaped_tag() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_tag_@@tag;|_xyz.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped asterisk @*;\n+     * xyz.\n+     *\/\n+    void not_escaped_asterisk() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_a...sterisk_@*;|_xyz.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * not an escaped solidus @\/.\n+     * xyz.\n+     *\/\n+    void not_escaped_solidus() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: 1\n+    Text[TEXT, pos:7, not_an_escaped_s...olidus_@\/.|_xyz.]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/AtEscapeTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}