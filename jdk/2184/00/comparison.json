{"files":[{"patch":"@@ -253,1 +253,2 @@\n-  \/\/ Check for a resolved cp entry, else fall back to a name check.\n+  \/\/ Do not check for a resolved cp entry, because that check can fail if\n+  \/\/ the class is being redefined.  Just do a name check.\n@@ -257,13 +258,4 @@\n-    if (_constants->tag_at(cp_index).is_klass()) {\n-      Klass* k2 = _constants->klass_at(cp_index, THREAD);\n-      assert(!HAS_PENDING_EXCEPTION, \"Unexpected exception\");\n-      if (k2 == k) {\n-        log_trace(class, sealed)(\"- class is listed at permitted_subclasses[%d] => cp[%d]\", i, cp_index);\n-        return true;\n-      }\n-    } else {\n-      Symbol* name = _constants->klass_name_at(cp_index);\n-      if (name == k->name()) {\n-        log_trace(class, sealed)(\"- Found it at permitted_subclasses[%d] => cp[%d]\", i, cp_index);\n-        return true;\n-      }\n+    Symbol* name = _constants->klass_name_at(cp_index);\n+    if (name == k->name()) {\n+      log_trace(class, sealed)(\"- Found it at permitted_subclasses[%d] => cp[%d]\", i, cp_index);\n+      return true;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8260009\n+ * @library \/test\/lib\n+ * @summary Test that a permitted subclass, that is resolved by its super\n+            class, can be redefined.\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.instrument\n+ *          jdk.jartool\/sun.tools.jar\n+ * @requires vm.jvmti\n+ * @compile --enable-preview -source ${jdk.version} RedefinePermittedSubclass.java\n+ * @run main\/othervm --enable-preview RedefinePermittedSubclass buildagent\n+ * @run main\/othervm\/timeout=6000 --enable-preview RedefinePermittedSubclass runtest\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.io.PrintWriter;\n+import java.lang.RuntimeException;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+import java.lang.instrument.IllegalClassFormatException;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class RedefinePermittedSubclass {\n+\n+    non-sealed class A extends Tester {\n+       public void printIt() { System.out.println(\"In A\"); }\n+    }\n+\n+    sealed static class Tester permits A {\n+        \/\/ Make sure A is resolved in Tester's constant pool.\n+        public void resolveA(A a) {\n+            a.printIt();\n+        }\n+    }\n+\n+    static class LoggingTransformer implements ClassFileTransformer {\n+\n+        public LoggingTransformer() {}\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+                                Class classBeingRedefined, ProtectionDomain protectionDomain,\n+                                byte[] classfileBuffer) throws IllegalClassFormatException {\n+            return null;\n+        }\n+    }\n+\n+    public static void premain(String agentArgs, Instrumentation inst) throws Exception {\n+        RedefinePermittedSubclass r = new RedefinePermittedSubclass();\n+        r.play(); \/\/ Resolve A before redefining it.\n+        LoggingTransformer t = new LoggingTransformer();\n+        inst.addTransformer(t, true);\n+        {\n+            Class demoClassA = Class.forName(\"RedefinePermittedSubclass$A\");\n+            inst.retransformClasses(demoClassA);\n+        }\n+    }\n+\n+    private static void buildAgent() {\n+        try {\n+            ClassFileInstaller.main(\"RedefinePermittedSubclass\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not write agent classfile\", e);\n+        }\n+\n+        try {\n+            PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n+            pw.println(\"Premain-Class: RedefinePermittedSubclass\");\n+            pw.println(\"Agent-Class: RedefinePermittedSubclass\");\n+            pw.println(\"Can-Redefine-Classes: true\");\n+            pw.println(\"Can-Retransform-Classes: true\");\n+            pw.close();\n+        } catch (FileNotFoundException e) {\n+            throw new RuntimeException(\"Could not write manifest file for the agent\", e);\n+        }\n+\n+        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarTool.run(new String[] { \"-cmf\", \"MANIFEST.MF\", \"redefineagent.jar\", \"RedefinePermittedSubclass.class\" })) {\n+            throw new RuntimeException(\"Could not write the agent jar file\");\n+        }\n+    }\n+\n+    public void play () {\n+        A a = new A();\n+        Tester t = new Tester();\n+        t.resolveA(a);\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        RedefinePermittedSubclass r = new RedefinePermittedSubclass();\n+        r.play();\n+        if (argv.length == 1 && argv[0].equals(\"buildagent\")) {\n+            buildAgent();\n+            return;\n+        }\n+        if (argv.length == 1 && argv[0].equals(\"runtest\")) {\n+            String[] javaArgs1 = { \"-XX:MetaspaceSize=12m\", \"-XX:MaxMetaspaceSize=12m\",\n+                                   \"-javaagent:redefineagent.jar\", \"--enable-preview\",\n+                                   \"RedefinePermittedSubclass\"};\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(javaArgs1);\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldNotContain(\"processing of -javaagent failed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/RedefinePermittedSubclass.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"}]}