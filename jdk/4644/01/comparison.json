{"files":[{"patch":"@@ -1159,0 +1159,1 @@\n+     * @see #unsignedMultiplyHigh\n@@ -1190,0 +1191,23 @@\n+    \/**\n+     * Returns as a {@code long} the most significant 64 bits of the unsigned\n+     * 128-bit product of two unsigned 64-bit factors.\n+     *\n+     * @param x the first value\n+     * @param y the second value\n+     * @return the result\n+     * @see #multiplyHigh\n+     * @since 18\n+     *\/\n+    public static long unsignedMultiplyHigh(long x, long y) {\n+        long x0 = x & 0xffffffffL;\n+        long x1 = x >>> 32;\n+        long y0 = y & 0xffffffffL;\n+        long y1 = y >>> 32;\n+\n+        long t = x1 * y0 + ((x0 * y0) >>> 32);\n+        long z0 = x0 * y1 + (t & 0xffffffffL);\n+        long z1 = t >>> 32;\n+\n+        return x1 * y1 + z1 + (z0 >>> 32);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -985,0 +985,1 @@\n+     * @see #unsignedMultiplyHigh\n@@ -992,0 +993,15 @@\n+    \/**\n+     * Returns as a {@code long} the most significant 64 bits of the unsigned\n+     * 128-bit product of two unsigned 64-bit factors.\n+     *\n+     * @param x the first value\n+     * @param y the second value\n+     * @return the result\n+     * @see #multiplyHigh\n+     * @see Math#unsignedMultiplyHigh(long,long)\n+     * @since 18\n+     *\/\n+    public static long unsignedMultiplyHigh(long x, long y) {\n+        return Math.unsignedMultiplyHigh(x, y);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @bug 5100935\n+ * @bug 5100935 8188044\n@@ -35,0 +35,1 @@\n+import java.util.function.BiFunction;\n@@ -52,4 +53,10 @@\n-    \/\/ Check Math.multiplyHigh(x,y) against multiplyHighBigInt(x,y)\n-    private static boolean check(long x, long y) {\n-        long p1 = multiplyHighBigInt(x, y);\n-        long p2 = Math.multiplyHigh(x, y);\n+    \/\/ Calculate high 64 bits of unsigned 128 product using signed multiply\n+    private static long unsignedMultiplyHigh(long x, long y) {\n+        return Math.multiplyHigh(x, y) + ((x >> 63) & y) + ((y >> 63) & x);\n+    }\n+\n+    \/\/ Compare results of two functions for a pair of values\n+    private static boolean check(BiFunction<Long,Long,Long> reference,\n+        BiFunction<Long,Long,Long> multiply, long x, long y) {\n+        long p1 = reference.apply(x, y);\n+        long p2 = multiply.apply(x, y);\n@@ -64,1 +71,13 @@\n-    private static int testMultiplyHigh() {\n+    \/\/ Check Math.multiplyHigh(x,y) against multiplyHighBigInt(x,y)\n+    private static boolean checkSigned(long x, long y) {\n+        return check((a,b) -> multiplyHighBigInt(a,b),\n+            (a,b) -> Math.multiplyHigh(a, b), x, y);\n+    }\n+\n+    \/\/ Check Math.unsignedMultiplyHigh(x,y) against unsignedMultiplyHigh(x,y)\n+    private static boolean checkUnsigned(long x, long y) {\n+        return check((a,b) -> unsignedMultiplyHigh(a,b),\n+            (a,b) -> Math.unsignedMultiplyHigh(a, b), x, y);\n+    }\n+\n+    private static int test(BiFunction<Long,Long,Boolean> chk) {\n@@ -87,1 +106,1 @@\n-            if(!check(xy[0], xy[1])) {\n+            if(!chk.apply(xy[0], xy[1])) {\n@@ -94,1 +113,1 @@\n-            if (!check(rnd.nextLong(), rnd.nextLong())) {\n+            if (!chk.apply(rnd.nextLong(), rnd.nextLong())) {\n@@ -102,0 +121,8 @@\n+    private static int testMultiplyHigh() {\n+        return test((x,y) -> checkSigned(x,y));\n+    }\n+\n+    private static int testUnsignedMultiplyHigh() {\n+        return test((x,y) -> checkUnsigned(x,y));\n+    }\n+\n@@ -103,1 +130,1 @@\n-        int failures = testMultiplyHigh();\n+        int failures = testMultiplyHigh() + testUnsignedMultiplyHigh();\n","filename":"test\/jdk\/java\/lang\/Math\/MultiplicationTests.java","additions":37,"deletions":10,"binary":false,"changes":47,"status":"modified"}]}