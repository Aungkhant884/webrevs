{"files":[{"patch":"@@ -305,10 +305,0 @@\n-    \/\/ Convert \"(a-b)+(b-c)\" into \"(a-c)\"\n-    if (op2 == Op_Sub(bt) && in1->in(2) == in2->in(1)) {\n-      assert(in1->in(1) != this && in2->in(2) != this,\"dead loop in AddINode::Ideal\/AddLNode::Ideal\");\n-      return SubNode::make(in1->in(1), in2->in(2), bt);\n-    }\n-    \/\/ Convert \"(a-b)+(c-a)\" into \"(c-b)\"\n-    if (op2 == Op_Sub(bt) && in1->in(1) == in2->in(2)) {\n-      assert(in1->in(2) != this && in2->in(1) != this,\"dead loop in AddINode::Ideal\/AddLNode::Ideal\");\n-      return SubNode::make(in2->in(1), in1->in(2), bt);\n-    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -438,0 +438,8 @@\n+  \/\/ Convert \"(A+X) - (X+B)\" into \"A - B\"\n+  if( op1 == Op_AddL && op2 == Op_AddL && in1->in(2) == in2->in(1) )\n+    return new SubLNode( in1->in(1), in2->in(2) );\n+\n+  \/\/ Convert \"(X+A) - (B+X)\" into \"A - B\"\n+  if( op1 == Op_AddL && op2 == Op_AddL && in1->in(1) == in2->in(2) )\n+    return new SubLNode( in1->in(2), in2->in(1) );\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8278471\n+ * @summary Remove unreached rules in AddNode::IdealIL\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal\n+ *\/\n+\/* Test conversion from (a - b) + (b - c) to (a - c) and conversion\n+ * from (a - b) + (c - a) to (c - b) have really happened so we can\n+ * safely remove both. *\/\n+public class TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.ADD_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int test1Int(int a, int b, int c) {\n+        return (a - b) + (b - c); \/\/ transformed to a - c rather than (a + b) - (b + c)\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long test1Long(long a, long b, long c) {\n+        return (a - b) + (b - c); \/\/ transformed to a - c rather than (a + b) - (b + c)\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.ADD_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int test2Int(int b, int a, int c) { \/\/ make sure inputs sorted\n+        return (a - b) + (c - a); \/\/ transformed to c - b rather than (a + c) - (b + a)\n+    }\n+\n+    @Test\n+    @Arguments({Argument.RANDOM_ONCE, Argument.RANDOM_ONCE, Argument.RANDOM_ONCE})\n+    @IR(failOn = {IRNode.ADD_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long test2Long(long b, long a, long c) { \/\/ make sure inputs sorted\n+        return (a - b) + (c - a); \/\/ transformed to return c - b rather than (a + c) - (b + a)\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -142,0 +142,2 @@\n+    public static final String SUB_I = START + \"SubI\" + MID + END;\n+    public static final String SUB_L = START + \"SubL\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}