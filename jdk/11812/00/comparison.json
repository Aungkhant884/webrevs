{"files":[{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8296934\n+ * @summary Verifies whether Undecorated Frame can be iconified or not.\n+ * @run main IconifyTest\n+ *\/\n+public class IconifyTest {\n+\n+    private static Robot robot;\n+    private static Button button;\n+    private static Frame frame;\n+    private static volatile int windowStatusEventType;\n+    private static volatile int windowIconifiedEventType;\n+    private static volatile boolean focusGained = false;\n+\n+    public static void initializeGUI() {\n+        frame = new Frame();\n+        frame.setLayout(new FlowLayout());\n+        frame.setSize(200, 200);\n+        frame.setUndecorated(true);\n+\n+        frame.addWindowFocusListener(new WindowAdapter() {\n+            public void windowGainedFocus(WindowEvent event) {\n+                focusGained = true;\n+            }\n+        });\n+\n+        frame.addWindowListener(new WindowAdapter() {\n+            public void windowActivated(WindowEvent e) {\n+                windowStatusEventType = WindowEvent.WINDOW_ACTIVATED;\n+                System.out.println(\"Event encountered: \" + e);\n+            }\n+\n+            public void windowIconified(WindowEvent e) {\n+                windowIconifiedEventType = WindowEvent.WINDOW_ICONIFIED;\n+                System.out.println(\"Event encountered: \" + e);\n+            }\n+\n+            public void windowDeiconified(WindowEvent e) {\n+                windowIconifiedEventType = WindowEvent.WINDOW_DEICONIFIED;\n+                System.out.println(\"Event encountered: \" + e);\n+            }\n+\n+            public void windowDeactivated(WindowEvent e) {\n+                windowStatusEventType = WindowEvent.WINDOW_DEACTIVATED;\n+                System.out.println(\"Event encountered: \" + e);\n+            }\n+        });\n+\n+        button = new Button(\"Minimize me\");\n+        button.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                frame.setExtendedState(Frame.ICONIFIED);\n+            }\n+        });\n+\n+        frame.setBackground(Color.green);\n+        frame.add(button);\n+        frame.setLocationRelativeTo(null);\n+        frame.toFront();\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws AWTException, InvocationTargetException, InterruptedException {\n+        robot = new Robot();\n+        try {\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            SwingUtilities.invokeAndWait(IconifyTest::initializeGUI);\n+            final AtomicReference<Point> frameloc = new AtomicReference<>();\n+            final AtomicReference<Dimension> framesize = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameloc.set(frame.getLocationOnScreen());\n+                framesize.set(frame.getSize());\n+            });\n+            Point locOnScreen = frameloc.get();\n+            Dimension frameSizeOnScreen = framesize.get();\n+\n+            robot.mouseMove(locOnScreen.x + frameSizeOnScreen.width \/ 2, locOnScreen.y + frameSizeOnScreen.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            if (windowStatusEventType != WindowEvent.WINDOW_ACTIVATED) {\n+                throw new RuntimeException(\"FAIL: WINDOW_ACTIVATED event did not occur when the undecorated frame is activated!\");\n+            }\n+            clearEventTypeValue();\n+            final AtomicReference<Point> buttonloc = new AtomicReference<>();\n+            final AtomicReference<Dimension> buttonsize = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> {\n+                buttonloc.set(button.getLocationOnScreen());\n+                buttonsize.set(button.getSize());\n+            });\n+            Point buttonLocOnScreen = buttonloc.get();\n+            Dimension buttonSizeOnScreen = buttonsize.get();\n+\n+            robot.mouseMove(buttonLocOnScreen.x + buttonSizeOnScreen.width \/ 2, buttonLocOnScreen.y + buttonSizeOnScreen.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (windowIconifiedEventType != WindowEvent.WINDOW_ICONIFIED) {\n+                throw new RuntimeException(\"FAIL: WINDOW_ICONIFIED event did not occur when the undecorated frame is iconified!\");\n+            }\n+            if (windowStatusEventType != WindowEvent.WINDOW_DEACTIVATED) {\n+                throw new RuntimeException(\"FAIL: WINDOW_DEACTIVATED event did not occur when the undecorated frame is iconified!\");\n+            }\n+            final AtomicReference<Boolean> frameHasFocus = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> frameHasFocus.set(frame.hasFocus()));\n+            final boolean hasFocus = frameHasFocus.get();\n+            if (hasFocus) {\n+                throw new RuntimeException(\"FAIL: The undecorated frame has focus even when it is iconified!\");\n+            }\n+\n+            clearEventTypeValue();\n+\n+            SwingUtilities.invokeAndWait(() -> frame.setExtendedState(Frame.NORMAL));\n+            robot.waitForIdle();\n+\n+            if (windowIconifiedEventType != WindowEvent.WINDOW_DEICONIFIED) {\n+                throw new RuntimeException(\"FAIL: WINDOW_DEICONIFIED event did not occur when the state is set to NORMAL!\");\n+            }\n+            if (windowStatusEventType != WindowEvent.WINDOW_ACTIVATED) {\n+                throw new RuntimeException(\"FAIL: WINDOW_ACTIVATED event did not occur when the state is set to NORMAL!\");\n+            }\n+            if (!focusGained) {\n+                throw new RuntimeException(\"FAIL: The undecorated frame does not have focus when it is deiconified!\");\n+            }\n+            System.out.println(\"Test passed\");\n+        }\n+        finally {\n+            SwingUtilities.invokeAndWait(IconifyTest::disposeFrame);\n+        }\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    public static void clearEventTypeValue() {\n+        windowIconifiedEventType = -1;\n+        windowStatusEventType = -1;\n+        focusGained = false;\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Frame\/Iconify\/IconifyTest.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}