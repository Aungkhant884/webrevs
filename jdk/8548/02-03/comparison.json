{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -1124,2 +1125,2 @@\n-     * Returns the value of the {@code long} argument, throwing an exception\n-     * if the value overflows an {@code int}.\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows an {@code int}.\n@@ -1127,3 +1128,3 @@\n-     * @param value the long value\n-     * @return the argument as an int\n-     * @throws ArithmeticException if the {@code argument} overflows an int\n+     * @param value the {@code long} value\n+     * @return the argument as an {@code int}\n+     * @throws ArithmeticException if the argument overflows an {@code int}\n@@ -1137,0 +1138,195 @@\n+    \/**\n+     * Returns the value of the {@code double} argument,\n+     * throwing an exception if the conversion is inexact.\n+     * The method returns if and only if the argument and the result\n+     * are mathematically equal.\n+     *\n+     * <p>Special cases:\n+     * <ul>\n+     * <li>If the argument is {@link Double#NEGATIVE_INFINITY},\n+     * {@link Double#POSITIVE_INFINITY} or {@link Double#NaN},\n+     * the method throws.\n+     * <li>If the argument is {@code -0.0} or {@code 0.0},\n+     * the method returns {@code 0}.\n+     * <\/ul>\n+     *\n+     * @param value the {@code double} value\n+     * @return the argument as a {@code int}\n+     * @throws ArithmeticException if the conversion is inexact\n+     * @see Math#rint(double)\n+     * @see Math#round(double)\n+     * @see Math#toIntExact(double)\n+     * @since 19\n+     *\/\n+    public static int toIntExact(double value) {\n+        return Math.toIntExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows a {@code short}.\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as a {@code short}\n+     * @throws ArithmeticException if the argument overflows a {@code short}\n+     * @see Math#toShortExact(long)\n+     * @since 19\n+     *\/\n+    public static short toShortExact(long value) {\n+        return Math.toShortExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows a {@code byte}.\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as a {@code byte}\n+     * @throws ArithmeticException if the argument overflows a {@code byte}\n+     * @see Math#toByteExact(long)\n+     * @since 19\n+     *\/\n+    public static byte toByteExact(long value) {\n+        return Math.toByteExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the conversion is inexact.\n+     * The method returns if and only if the argument and the result\n+     * are mathematically equal.\n+     *\n+     * <p>Special case:\n+     * <ul>\n+     * <li>If the argument is {@code 0L}, the method returns {@code 0.0f}.\n+     * <\/ul>\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as a {@code float}\n+     * @throws ArithmeticException if the conversion is inexact\n+     * @see Math#toFloatExact(long)\n+     * @since 19\n+     *\/\n+    public static float toFloatExact(long value) {\n+        return Math.toFloatExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code double} argument,\n+     * throwing an exception if the conversion is inexact.\n+     * The method returns if and only if the argument and the result\n+     * are mathematically equal.\n+     *\n+     * <p>Special cases:\n+     * <ul>\n+     * <li>If the argument is {@link Double#NEGATIVE_INFINITY},\n+     * {@link Double#POSITIVE_INFINITY}, {@link Double#NaN},\n+     * {@code -0.0} or {@code 0.0},\n+     * the method returns {@link Float#NEGATIVE_INFINITY},\n+     * {@link Float#POSITIVE_INFINITY}, {@link Float#NaN},\n+     * {@code -0.0f} or {@code 0.0f}, respectively.\n+     * <\/ul>\n+     *\n+     * @param value the {@code double} value\n+     * @return the argument as a {@code float}\n+     * @throws ArithmeticException if the conversion is inexact\n+     * @see Math#toFloatExact(double)\n+     * @since 19\n+     *\/\n+    public static float toFloatExact(double value) {\n+        return Math.toFloatExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the conversion is inexact.\n+     * The method returns if and only if the argument and the result\n+     * are mathematically equal.\n+     *\n+     * <p>Special case:\n+     * <ul>\n+     * <li>If the argument is {@code 0L}, the method returns {@code 0.0}.\n+     * <\/ul>\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as a {@code double}\n+     * @throws ArithmeticException if the conversion is inexact\n+     * @see Math#toDoubleExact(long)\n+     * @since 19\n+     *\/\n+    public static double toDoubleExact(long value) {\n+        return Math.toDoubleExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code double} argument,\n+     * throwing an exception if the conversion is inexact.\n+     * The method returns if and only if the argument and the result\n+     * are mathematically equal.\n+     *\n+     * <p>Special cases:\n+     * <ul>\n+     * <li>If the argument is {@link Double#NEGATIVE_INFINITY},\n+     * {@link Double#POSITIVE_INFINITY} or {@link Double#NaN},\n+     * the method throws.\n+     * <li>If the argument is {@code -0.0} or {@code 0.0},\n+     * the method returns {@code 0L}.\n+     * <\/ul>\n+     *\n+     * @param value the {@code double} value\n+     * @return the argument as a {@code long}\n+     * @throws ArithmeticException if the conversion is inexact\n+     * @see Math#rint(double)\n+     * @see Math#round(double)\n+     * @see Math#toLongExact(double)\n+     * @since 19\n+     *\/\n+    public static long toLongExact(double value) {\n+        return Math.toLongExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows the range\n+     * [0, 2<sup>{@link Integer#SIZE}<\/sup>) an unsigned int.\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as an unsigned int\n+     * @throws ArithmeticException if the argument overflows an unsigned int\n+     * @see Math#toUnsignedIntRangeExact(long)\n+     * @since 19\n+     *\/\n+    public static long toUnsignedIntRangeExact(long value) {\n+        return Math.toUnsignedIntRangeExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows the range\n+     * [0, 2<sup>{@link Short#SIZE}<\/sup>) an unsigned int.\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as an unsigned short\n+     * @throws ArithmeticException if the argument overflows an unsigned short\n+     * @see Math#toUnsignedShortRangeExact(long)\n+     * @since 19\n+     *\/\n+    public static int toUnsignedShortRangeExact(long value) {\n+        return Math.toUnsignedShortRangeExact(value);\n+    }\n+\n+    \/**\n+     * Returns the value of the {@code long} argument,\n+     * throwing an exception if the value overflows the range\n+     * [0, 2<sup>{@link Byte#SIZE}<\/sup>) an unsigned int.\n+     *\n+     * @param value the {@code long} value\n+     * @return the argument as an unsigned byte\n+     * @throws ArithmeticException if the argument overflows an unsigned byte\n+     * @see Math#toUnsignedByteRangeExact(long)\n+     * @since 19\n+     *\/\n+    public static int toUnsignedByteRangeExact(long value) {\n+        return Math.toUnsignedByteRangeExact(value);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":201,"deletions":5,"binary":false,"changes":206,"status":"modified"}]}