{"files":[{"patch":"@@ -1367,1 +1367,1 @@\n-     * The method returns iff the argument and the result\n+     * The method returns if and only if the argument and the result\n@@ -1434,1 +1434,1 @@\n-     * The method returns iff the argument and the result\n+     * The method returns if and only if the argument and the result\n@@ -1465,1 +1465,1 @@\n-     * The method returns iff the argument and the result\n+     * The method returns if and only if the argument and the result\n@@ -1502,1 +1502,1 @@\n-     * The method returns iff the argument and the result\n+     * The method returns if and only if the argument and the result\n@@ -1533,1 +1533,1 @@\n-     * The method returns iff the argument and the result\n+     * The method returns if and only if the argument and the result\n@@ -1578,1 +1578,1 @@\n-    public static long toUnsignedIntExact(long value) {\n+    public static long toUnsignedIntRangeExact(long value) {\n@@ -1597,1 +1597,1 @@\n-    public static int toUnsignedShortExact(long value) {\n+    public static int toUnsignedShortRangeExact(long value) {\n@@ -1616,1 +1616,1 @@\n-    public static int toUnsignedByteExact(long value) {\n+    public static int toUnsignedByteRangeExact(long value) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -65,3 +65,3 @@\n-        testToUnsignedIntExact_long();\n-        testToUnsignedShortExact_long();\n-        testToUnsignedByteExact_long();\n+        testToUnsignedIntRangeExact_long();\n+        testToUnsignedShortRangeExact_long();\n+        testToUnsignedByteRangeExact_long();\n@@ -181,6 +181,6 @@\n-    private static void testToUnsignedIntExact_long() {\n-        testToUnsignedIntExact(-1L, null);\n-        testToUnsignedIntExact(0L, 0L);\n-        testToUnsignedIntExact((long) Integer.MAX_VALUE, (long) Integer.MAX_VALUE);\n-        testToUnsignedIntExact((1L << Integer.SIZE) - 1, (1L << Integer.SIZE) - 1);\n-        testToUnsignedIntExact(1L << Integer.SIZE, null);\n+    private static void testToUnsignedIntRangeExact_long() {\n+        testToUnsignedIntRangeExact(-1L, null);\n+        testToUnsignedIntRangeExact(0L, 0L);\n+        testToUnsignedIntRangeExact((long) Integer.MAX_VALUE, (long) Integer.MAX_VALUE);\n+        testToUnsignedIntRangeExact((1L << Integer.SIZE) - 1, (1L << Integer.SIZE) - 1);\n+        testToUnsignedIntRangeExact(1L << Integer.SIZE, null);\n@@ -189,6 +189,6 @@\n-    private static void testToUnsignedShortExact_long() {\n-        testToUnsignedShortExact(-1L, null);\n-        testToUnsignedShortExact(0L, 0L);\n-        testToUnsignedShortExact((long) Short.MAX_VALUE, (long) Short.MAX_VALUE);\n-        testToUnsignedShortExact((1L << Short.SIZE) - 1, (1L << Short.SIZE) - 1);\n-        testToUnsignedShortExact(1L << Short.SIZE, null);\n+    private static void testToUnsignedShortRangeExact_long() {\n+        testToUnsignedShortRangeExact(-1L, null);\n+        testToUnsignedShortRangeExact(0L, 0L);\n+        testToUnsignedShortRangeExact((long) Short.MAX_VALUE, (long) Short.MAX_VALUE);\n+        testToUnsignedShortRangeExact((1L << Short.SIZE) - 1, (1L << Short.SIZE) - 1);\n+        testToUnsignedShortRangeExact(1L << Short.SIZE, null);\n@@ -197,6 +197,6 @@\n-    private static void testToUnsignedByteExact_long() {\n-        testToUnsignedByteExact(-1L, null);\n-        testToUnsignedByteExact(0L, 0L);\n-        testToUnsignedByteExact((long) Byte.MAX_VALUE, (long) Byte.MAX_VALUE);\n-        testToUnsignedByteExact((1L << Byte.SIZE) - 1, (1L << Byte.SIZE) - 1);\n-        testToUnsignedByteExact(1L << Byte.SIZE, null);\n+    private static void testToUnsignedByteRangeExact_long() {\n+        testToUnsignedByteRangeExact(-1L, null);\n+        testToUnsignedByteRangeExact(0L, 0L);\n+        testToUnsignedByteRangeExact((long) Byte.MAX_VALUE, (long) Byte.MAX_VALUE);\n+        testToUnsignedByteRangeExact((1L << Byte.SIZE) - 1, (1L << Byte.SIZE) - 1);\n+        testToUnsignedByteRangeExact(1L << Byte.SIZE, null);\n@@ -213,2 +213,2 @@\n-    private static void testToUnsignedByteExact(long arg, Long expected) {\n-        testToExact(\"toUnsignedByteExact\", v -> toUnsignedByteExact(v.longValue()), arg, expected);\n+    private static void testToUnsignedByteRangeExact(long arg, Long expected) {\n+        testToExact(\"toUnsignedByteRangeExact\", v -> toUnsignedByteRangeExact(v.longValue()), arg, expected);\n@@ -221,2 +221,2 @@\n-    private static void testToUnsignedShortExact(long arg, Long expected) {\n-        testToExact(\"toUnsignedShortExact\", v -> toUnsignedShortExact(v.longValue()), arg, expected);\n+    private static void testToUnsignedShortRangeExact(long arg, Long expected) {\n+        testToExact(\"toUnsignedShortRangeExact\", v -> toUnsignedShortRangeExact(v.longValue()), arg, expected);\n@@ -229,2 +229,2 @@\n-    private static void testToUnsignedIntExact(long arg, Long expected) {\n-        testToExact(\"toUnsignedIntExact\", v -> toUnsignedIntExact(v.longValue()), arg, expected);\n+    private static void testToUnsignedIntRangeExact(long arg, Long expected) {\n+        testToExact(\"toUnsignedIntRangeExact\", v -> toUnsignedIntRangeExact(v.longValue()), arg, expected);\n","filename":"test\/jdk\/java\/lang\/Math\/ToExact.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"}]}