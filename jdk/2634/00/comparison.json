{"files":[{"patch":"@@ -1603,1 +1603,3 @@\n-  if (info != NULL && !lambda_ik->is_non_strong_hidden() && is_builtin(lambda_ik) && is_builtin(caller_ik)) {\n+  if (info != NULL && !lambda_ik->is_non_strong_hidden() && is_builtin(lambda_ik) && is_builtin(caller_ik)\n+      \/\/ Don't include the lambda proxy if its nest host is not in the \"linked\" state.\n+      && nest_host->is_linked()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261860\n+ * @summary VM should not crash if a lambda proxy class is created during\n+ *          shutdown and its nest host is not linked.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build LambdaProxyDuringShutdownApp sun.hotspot.WhiteBox LambdaVerification\n+ * @run driver ClassFileInstaller -jar lambda_proxy_shutdown.jar LambdaVerification\n+ *             LambdaProxyDuringShutdownApp MyShutdown Outer Outer$Inner\n+ * @run driver ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdaProxyDuringShutdown\n+ *\/\n+\n+public class LambdaProxyDuringShutdown extends DynamicArchiveTestBase {\n+    public static void main(String[] args) throws Exception {\n+        runTest(LambdaProxyDuringShutdown::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.getJarPath(\"lambda_proxy_shutdown.jar\");\n+        String mainClass = \"LambdaProxyDuringShutdownApp\";\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+        String appOutput = \"Hello from Inner\";\n+\n+        dump(topArchiveName,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:class+load=debug,cds=debug,cds+dynamic=info\",\n+            use_whitebox_jar,\n+            \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                \/\/ Nest host should be skipped since it is not in the linked state.\n+                output.shouldContain(\"Skipping Outer: Not linked\")\n+                \/\/ Lambda proxy is loaded normally.\n+                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda[$].*0x.*source:.Outer\")\n+                      .shouldContain(appOutput)\n+                      .shouldHaveExitValue(0);\n+            });\n+\n+        run(topArchiveName,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            use_whitebox_jar,\n+            \"-Xlog:class+load=debug\",\n+            \"-cp\", appJar, mainClass, \"run\")\n+            .assertNormalExit(output -> {\n+                \/\/ Only the Inner class is loaded from the dynamic archive.\n+                \/\/ The nest host (Outer) and its lambda proxy are not loaded\n+                \/\/ from the dynamic archive.\n+                output.shouldMatch(\"class.load.*Outer.source:.*lambda_proxy_shutdown.jar\")\n+                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda[$].*0x.*source:.Outer\")\n+                      .shouldMatch(\"class.load. Outer[$]Inner.source:.*shared.*objects.*file.*(top)\")\n+                      .shouldContain(appOutput)\n+                      .shouldHaveExitValue(0);\n+            });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyDuringShutdown.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+class Outer{\n+    static final class Inner{\n+        static {\n+            doit(() -> {\n+                System.out.println(\"Hello from Inner\");\n+            });\n+        }\n+        static void doit(Runnable t) {\n+            t.run();\n+        }\n+    }\n+}\n+\n+class MyShutdown extends Thread {\n+    public void run() {\n+        Outer.Inner inner = new Outer.Inner();\n+    }\n+}\n+\n+public class LambdaProxyDuringShutdownApp {\n+  public static void main(String[] args) throws Exception {\n+      Runtime r = Runtime.getRuntime();\n+      r.addShutdownHook(new MyShutdown());\n+      System.exit(0);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/LambdaProxyDuringShutdownApp.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}