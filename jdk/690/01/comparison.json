{"files":[{"patch":"@@ -3006,2 +3006,2 @@\n-                boolean isRecordMemberWithNonApplicableDeclAnno =\n-                        isRecordMember && (s.flags_field & Flags.GENERATED_MEMBER) != 0 && notApplicableOrIsTypeUseOnly;\n+                boolean isCompGeneratedRecordElement = isRecordMember && (s.flags_field & Flags.GENERATED_MEMBER) != 0;\n+                boolean isCompRecordElementWithNonApplicableDeclAnno = isCompGeneratedRecordElement && notApplicableOrIsTypeUseOnly;\n@@ -3009,2 +3009,2 @@\n-                if (applicableTargets.isEmpty() || isRecordMemberWithNonApplicableDeclAnno) {\n-                    if (isRecordMemberWithNonApplicableDeclAnno) {\n+                if (applicableTargets.isEmpty() || isCompRecordElementWithNonApplicableDeclAnno) {\n+                    if (isCompRecordElementWithNonApplicableDeclAnno) {\n@@ -3034,0 +3034,7 @@\n+                \/* if we are seeing the @SafeVarargs annotation applied to a compiler generated accessor,\n+                 * then this is an error as we know that no compiler generated accessor will be a varargs\n+                 * method, better to fail asap\n+                 *\/\n+                if (isCompGeneratedRecordElement && !isRecordField && a.type.tsym == syms.trustMeType.tsym && declarationTree.hasTag(METHODDEF)) {\n+                    log.error(a.pos(), Errors.VarargsInvalidTrustmeAnno(syms.trustMeType.tsym, Fragments.VarargsTrustmeOnNonVarargsAccessor(s)));\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1422,0 +1422,4 @@\n+# 0: symbol\n+compiler.misc.varargs.trustme.on.non.varargs.accessor=\\\n+    Accessor {0} is not a varargs method.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.varargs.invalid.trustme.anno\n+\/\/ key: compiler.misc.varargs.trustme.on.non.varargs.accessor\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n+\n+record R(@SafeVarargs String... s) {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SafeVarargsNotApplicableToRecordAccessors.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -1710,0 +1710,17 @@\n+\n+    public void testSaveVarargsAnno() {\n+        \/\/ the compiler would generate an erronous accessor\n+        assertFail(\"compiler.err.varargs.invalid.trustme.anno\",\n+                \"\"\"\n+                record R(@SafeVarargs String... s) {}\n+                \"\"\"\n+        );\n+        \/\/ but this is OK\n+        assertOK(\n+                \"\"\"\n+                record R(@SafeVarargs String... s) {\n+                    public String[] s() { return s; }\n+                }\n+                \"\"\"\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}