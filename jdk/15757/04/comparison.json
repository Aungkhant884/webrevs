{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit TempDirDoesNotExist\n@@ -30,1 +31,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -34,0 +35,1 @@\n+import java.io.IOException;\n@@ -38,0 +40,1 @@\n+import java.util.stream.Stream;\n@@ -39,2 +42,4 @@\n-public class TempDirDoesNotExist {\n-    final static String ioWarningMsg = \"WARNING: java.io.tmpdir directory does not exist\";\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -42,1 +47,2 @@\n-    public static void main(String... args) throws Exception {\n+public class TempDirDoesNotExist {\n+    final static String WARNING = \"WARNING: java.io.tmpdir directory does not exist\";\n@@ -44,3 +50,1 @@\n-        String userDir = System.getProperty(\"user.home\");\n-        String timeStamp = System.currentTimeMillis() + \"\";\n-        String tempDir = Path.of(userDir,\"non-existing-\", timeStamp).toString();\n+    private static final String USER_DIR = System.getProperty(\"user.home\");\n@@ -48,0 +52,4 @@\n+    \/\/\n+    \/\/ This class is spawned to test combinations of parameters.\n+    \/\/\n+    public static void main(String... args) throws IOException {\n@@ -49,5 +57,22 @@\n-            if (arg.equals(\"io\")) {\n-                try {\n-                    File.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n+            switch (arg) {\n+                case \"io\" -> {\n+                    File file = null;\n+                    try {\n+                        file = File.createTempFile(\"prefix\", \".suffix\");\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    } finally {\n+                        if (file != null && file.exists())\n+                            file.delete();\n+                    }\n+                }\n+                case \"nio\" -> {\n+                Path path = null;\n+                    try {\n+                        path = Files.createTempFile(\"prefix\", \".suffix\");\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    } finally {\n+                        if (path != null)\n+                            Files.deleteIfExists(path);\n+                    }\n@@ -55,5 +80,2 @@\n-            } else if (arg.equals(\"nio\")) {\n-                try {\n-                    Files.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n+                default -> {\n+                    throw new RuntimeException(\"unknown case: \" + arg);\n@@ -61,2 +83,0 @@\n-            } else {\n-                throw new Exception(\"unknown case: \" + arg);\n@@ -65,0 +85,1 @@\n+    }\n@@ -66,16 +87,4 @@\n-        if (args.length == 0) {\n-            \/\/ standard test with default setting for java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"nio\");\n-\n-            \/\/ valid custom java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirDoesNotExist\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirDoesNotExist\", \"nio\");\n-\n-            \/\/ invalid custom java.io.tmpdir\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"io\");\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"nio\");\n+    private static String tempDir() {\n+        String timeStamp = String.valueOf(System.currentTimeMillis());\n+        return Path.of(USER_DIR, \"non-existing-\", timeStamp).toString();\n+    }\n@@ -83,4 +92,25 @@\n-            \/\/ test with security manager\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirDoesNotExist\", \"io\");\n+    public static Stream<Arguments> existingProvider() {\n+        return Stream.of(Arguments.of(0, WARNING,\n+                                      new String[] {\n+                                          \"-Djava.io.tmpdir=\" +\n+                                          tempDir(),\n+                                          \"TempDirDoesNotExist\", \"io\"\n+                                      }),\n+                         Arguments.of(0, WARNING,\n+                            new String[] {\n+                                \"-Djava.io.tmpdir=\" + tempDir(),\n+                                \"TempDirDoesNotExist\", \"nio\"\n+                            }),\n+                         Arguments.of(0, WARNING,\n+                            new String[] {\n+                                \"-Djava.io.tmpdir=\" + tempDir()\n+                                + \" -Djava.security.manager\",\n+                                \"TempDirDoesNotExist\", \"io\"\n+                            }),\n+                         Arguments.of(0, WARNING,\n+                            new String[] {\n+                                \"-Djava.io.tmpdir=\" + tempDir()\n+                                + \" -Djava.security.manager\",\n+                                \"TempDirDoesNotExist\", \"nio\"\n+                            }));\n+    }\n@@ -88,3 +118,21 @@\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirDoesNotExist\", \"nio\");\n+    public static Stream<Arguments> nonexistentProvider() {\n+        return Stream.of(Arguments.of(0, WARNING,\n+                                      new String[] {\n+                                          \"TempDirDoesNotExist\",\n+                                          \"io\"\n+                                      }),\n+                         Arguments.of(0, WARNING,\n+                                      new String[] {\n+                                          \"TempDirDoesNotExist\", \"nio\"\n+                                      }),\n+                         Arguments.of(0, WARNING,\n+                                      new String[] {\n+                                          \"-Djava.io.tmpdir=\" + USER_DIR,\n+                                          \"TempDirDoesNotExist\", \"io\"\n+                                      }),\n+                         Arguments.of(0, WARNING,\n+                                      new String[] {\n+                                          \"-Djava.io.tmpdir=\" + USER_DIR,\n+                                          \"TempDirDoesNotExist\", \"nio\"\n+                                      }));\n+    }\n@@ -92,4 +140,7 @@\n-            \/\/ error message printed only once\n-            testMessageCounter(0, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"io\", \"nio\");\n-        }\n+    public static Stream<Arguments> counterProvider() {\n+        \/\/ standard test with default setting for java.io.tmpdir\n+        return Stream.of(Arguments.of(0,\n+                                      new String[] {\n+                                          \"-Djava.io.tmpdir=\" + tempDir(),\n+                                          \"TempDirDoesNotExist\", \"io\", \"nio\"\n+                                      }));\n@@ -98,3 +149,6 @@\n-    private static void testMessageExist(int exitValue, String errorMsg, String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldContain(errorMsg)\n-                .shouldHaveExitValue(exitValue);\n+    @ParameterizedTest\n+    @MethodSource(\"existingProvider\")\n+    public void existingMessage(int exitValue, String errorMsg,\n+                                String... options) throws Exception {\n+       ProcessTools.executeTestJvm(options).shouldContain(errorMsg)\n+           .shouldHaveExitValue(exitValue);\n@@ -103,2 +157,6 @@\n-    private static void testMessageNotExist(int exitValue, String errorMsg,String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg).shouldHaveExitValue(exitValue);\n+    @ParameterizedTest\n+    @MethodSource(\"nonexistentProvider\")\n+    public void nonexistentMessage(int exitValue, String errorMsg,\n+                                   String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg)\n+            .shouldHaveExitValue(exitValue);\n@@ -107,1 +165,4 @@\n-    private static void testMessageCounter(int exitValue,String... options) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"counterProvider\")\n+    public  void messageCounter(int exitValue, String... options)\n+        throws Exception {\n@@ -110,1 +171,1 @@\n-                -> line.equalsIgnoreCase(ioWarningMsg)).collect(Collectors.toList());\n+                -> line.equalsIgnoreCase(WARNING)).collect(Collectors.toList());\n@@ -115,1 +176,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/io\/File\/TempDirDoesNotExist.java","additions":116,"deletions":55,"binary":false,"changes":171,"status":"modified"}]}