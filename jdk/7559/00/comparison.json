{"files":[{"patch":"@@ -565,6 +565,1 @@\n-  JavaThread* thread;\n-\n-  if (trace->env_id == NULL ||\n-    (thread = JavaThread::thread_from_jni_environment(trace->env_id)) == NULL ||\n-    thread->is_exiting()) {\n-\n+    if (trace->env_id == NULL || JavaThread::is_thread_from_jni_environment_terminated(trace->env_id)) {\n@@ -576,0 +571,3 @@\n+  JavaThread* thread = JavaThread::thread_from_jni_environment(trace->env_id);\n+\n+\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1324,0 +1324,2 @@\n+  \/\/ Does not return null, check is_thread_from_jni_environment_termminated()\n+  \/\/ if you are not sure that it is not.\n@@ -1338,0 +1340,14 @@\n+  \/\/ Returns whether current thread as indicated by the given JNIEnv\n+  \/\/ is terminated.\n+  \/\/ We don't assert it is Thread::current here as that is done at the\n+  \/\/ external JNI entry points where the JNIEnv is passed into the VM.\n+  static bool is_thread_from_jni_environment_terminated(JNIEnv* env) {\n+    JavaThread* current = (JavaThread*)((intptr_t)env - in_bytes(jni_environment_offset()));\n+    \/\/ We can't get here in a thread that has completed its execution and so\n+    \/\/ \"is_terminated\", but a thread is also considered terminated if the VM\n+    \/\/ has exited, so we have to check this and block in case this is a daemon\n+    \/\/ thread returning to the VM (the JNI DirectBuffer entry points rely on\n+    \/\/ this).\n+    return current->is_terminated();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}