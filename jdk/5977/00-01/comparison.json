{"files":[{"patch":"@@ -255,1 +255,1 @@\n-  return _queue->renew_enqueue_buffer(thread);\n+  return _queue->renew(thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdKlassQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-  BufferPtr renew_enqueue_buffer(Thread* thread);\n+  BufferPtr renew(Thread* thread);\n@@ -62,2 +62,0 @@\n-  typedef ElementPolicy<Buffer> Policy;\n-  Policy _policy;\n@@ -66,1 +64,0 @@\n-\n@@ -71,1 +68,1 @@\n-    Policy& _policy;\n+    JfrEpochQueue& _queue;\n@@ -74,1 +71,1 @@\n-    ElementDispatch(Callback& callback, Policy& policy);\n+    ElementDispatch(Callback& callback, JfrEpochQueue& queue);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrEpochQueue.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-JfrEpochQueue<ElementPolicy>::JfrEpochQueue() : _policy(), _storage(NULL) {}\n+JfrEpochQueue<ElementPolicy>::JfrEpochQueue() : _storage(NULL) {}\n@@ -50,1 +50,1 @@\n-JfrEpochQueue<ElementPolicy>::renew_enqueue_buffer(Thread* thread) {\n+JfrEpochQueue<ElementPolicy>::renew(Thread* thread) {\n@@ -52,5 +52,3 @@\n-  BufferPtr buffer = _policy.thread_local_storage(thread);\n-  if (buffer == nullptr) {\n-    buffer = _storage->acquire(0, thread);\n-    _policy.set_thread_local_storage(buffer, thread);\n-    return buffer;\n+  BufferPtr buffer = this->thread_local_storage(thread);\n+  if (buffer != nullptr) {\n+    _storage->release(buffer);\n@@ -58,1 +56,0 @@\n-  _storage->release(buffer);\n@@ -60,1 +57,1 @@\n-  _policy.set_thread_local_storage(buffer, thread);\n+  this->set_thread_local_storage(buffer, thread);\n@@ -67,1 +64,1 @@\n-  assert(_policy.element_size(t) == element_size, \"invariant\");\n+  assert(this->element_size(t) == element_size, \"invariant\");\n@@ -69,1 +66,1 @@\n-  BufferPtr buffer = _policy.thread_local_storage(thread);\n+  BufferPtr buffer = this->thread_local_storage(thread);\n@@ -72,1 +69,1 @@\n-    _policy.set_thread_local_storage(buffer, thread);\n+    this->set_thread_local_storage(buffer, thread);\n@@ -76,1 +73,1 @@\n-    _policy.set_thread_local_storage(buffer, thread);\n+    this->set_thread_local_storage(buffer, thread);\n@@ -79,1 +76,1 @@\n-  assert(_policy.thread_local_storage(thread) == buffer, \"invariant\");\n+  assert(this->thread_local_storage(thread) == buffer, \"invariant\");\n@@ -86,1 +83,1 @@\n-  size_t element_size = _policy.element_size(t);\n+  size_t element_size = this->element_size(t);\n@@ -89,1 +86,1 @@\n-  _policy.store_element(t, buffer);\n+  this->store_element(t, buffer);\n@@ -95,2 +92,2 @@\n-JfrEpochQueue<ElementPolicy>::ElementDispatch<Callback>::ElementDispatch(Callback& callback, JfrEpochQueue<ElementPolicy>::Policy& policy) :\n-  _callback(callback),_policy(policy) {}\n+JfrEpochQueue<ElementPolicy>::ElementDispatch<Callback>::ElementDispatch(Callback& callback, JfrEpochQueue<ElementPolicy>& queue) :\n+  _callback(callback), _queue(queue) {}\n@@ -102,1 +99,1 @@\n-  return _policy(element, _callback, previous_epoch);\n+  return _queue(element, _callback, previous_epoch);\n@@ -110,1 +107,1 @@\n-  ElementDispatcher element_dispatcher(callback, _policy);\n+  ElementDispatcher element_dispatcher(callback, *this);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrEpochQueue.inline.hpp","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"}]}