{"files":[{"patch":"@@ -87,1 +87,1 @@\n-    private static void checkStackMapFrames(String mode, byte[] classfileBuffer) {\n+    private static int checkStackMapFrames(String mode, byte[] classfileBuffer) {\n@@ -94,0 +94,9 @@\n+        return frameCount;\n+    }\n+\n+    private static void checkStackMapFrames(String mode, byte[] classfileBuffer, int expectedCount) {\n+        int actualCount = checkStackMapFrames(mode, classfileBuffer);\n+        if (actualCount != expectedCount) {\n+            throw new RuntimeException(mode + \" - unexpected stack frames count: \" + actualCount\n+                                       + \" (expected \" + expectedCount + \")\");\n+        }\n@@ -107,1 +116,1 @@\n-            checkStackMapFrames(cls + \"(retranform)\", retransformBytes);\n+            checkStackMapFrames(cls + \"(retransform)\", retransformBytes);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/MissedStackMapFrames\/MissedStackMapFrames.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,5 +30,5 @@\n-    va_list args;\n-    va_start(args, format);\n-    vprintf(format, args);\n-    va_end(args);\n-    fflush(0);\n+  va_list args;\n+  va_start(args, format);\n+  vprintf(format, args);\n+  va_end(args);\n+  fflush(0);\n@@ -47,15 +47,15 @@\n-    struct Buffer {\n-        unsigned char* bytes;\n-        jint len;\n-\n-        Buffer() : bytes(nullptr), len(0) {}\n-\n-        void save(const unsigned char *bytes, jint len) {\n-            jvmtiError err = jvmti->Allocate(len, &this->bytes);\n-            if (err != JVMTI_ERROR_NONE) {\n-                _log(\"ClassFileLoadHook: failed to allocate %ld bytes for saved class bytes: %d\", len, err);\n-                return;\n-            }\n-            memcpy(this->bytes, bytes, len);\n-            this->len = len;\n-        }\n+  struct Buffer {\n+    unsigned char* bytes;\n+    jint len;\n+\n+    Buffer() : bytes(nullptr), len(0) {}\n+\n+    void save(const unsigned char *bytes, jint len) {\n+      jvmtiError err = jvmti->Allocate(len, &this->bytes);\n+      if (err != JVMTI_ERROR_NONE) {\n+          _log(\"ClassFileLoadHook: failed to allocate %ld bytes for saved class bytes: %d\\n\", len, err);\n+          return;\n+      }\n+      memcpy(this->bytes, bytes, len);\n+      this->len = len;\n+    }\n@@ -63,20 +63,17 @@\n-        jbyteArray get(JNIEnv *env) {\n-            if (bytes == nullptr) {\n-                _log(\"SavedClassBytes: NULL\\n\");\n-                return nullptr;\n-            }\n-\n-            jbyteArray result = env->NewByteArray(len);\n-            if (result == nullptr) {\n-                _log(\"SavedClassBytes: NewByteArray(%ld) failed\\n\", len);\n-            } else {\n-                jbyte* arrayPtr = env->GetByteArrayElements(result, nullptr);\n-                if (arrayPtr == nullptr) {\n-                    _log(\"SavedClassBytes: Failed to get array elements\\n\");\n-                    result = nullptr;\n-                } else {\n-                    memcpy(arrayPtr, bytes, len);\n-                    env->ReleaseByteArrayElements(result, arrayPtr, 0);\n-                }\n-            }\n-            return result;\n+    jbyteArray get(JNIEnv *env) {\n+      if (bytes == nullptr) {\n+        _log(\"SavedClassBytes: NULL\\n\");\n+        return nullptr;\n+      }\n+\n+      jbyteArray result = env->NewByteArray(len);\n+      if (result == nullptr) {\n+        _log(\"SavedClassBytes: NewByteArray(%ld) failed\\n\", len);\n+      } else {\n+        jbyte* arrayPtr = env->GetByteArrayElements(result, nullptr);\n+        if (arrayPtr == nullptr) {\n+          _log(\"SavedClassBytes: Failed to get array elements\\n\");\n+          result = nullptr;\n+        } else {\n+          memcpy(arrayPtr, bytes, len);\n+          env->ReleaseByteArrayElements(result, arrayPtr, 0);\n@@ -84,0 +81,3 @@\n+      }\n+      return result;\n+    }\n@@ -85,1 +85,1 @@\n-    };\n+  };\n@@ -87,1 +87,1 @@\n-    jclass klass;\n+  jclass klass;\n@@ -89,2 +89,2 @@\n-    Buffer load;\n-    Buffer retransform;\n+  Buffer load;\n+  Buffer retransform;\n@@ -92,1 +92,1 @@\n-    SavedClassBytes() : klass(nullptr) {}\n+  SavedClassBytes() : klass(nullptr) {}\n@@ -98,6 +98,5 @@\n-    if (name != nullptr) {\n-        for (int i = 0; i < testClassCount; i++) {\n-            if (strcmp(name, testClassNames[i]) == 0) {\n-                return i;\n-            }\n-        }\n+  if (name != nullptr) {\n+    for (int i = 0; i < testClassCount; i++) {\n+      if (strcmp(name, testClassNames[i]) == 0) {\n+        return i;\n+      }\n@@ -105,1 +104,2 @@\n-    return -1;\n+  }\n+  return -1;\n@@ -122,9 +122,8 @@\n-    int idx = testClassIndex(name);\n-    if (idx >= 0) {\n-        if (class_being_redefined == nullptr) {\n-            \/\/ load\n-            savedBytes[idx].load.save(class_data, class_data_len);\n-        } else {\n-            \/\/ retransform\/redefine\n-            savedBytes[idx].retransform.save(class_data, class_data_len);\n-        }\n+  int idx = testClassIndex(name);\n+  if (idx >= 0) {\n+    if (class_being_redefined == nullptr) {\n+      \/\/ load\n+      savedBytes[idx].load.save(class_data, class_data_len);\n+    } else {\n+      \/\/ retransform\/redefine\n+      savedBytes[idx].retransform.save(class_data, class_data_len);\n@@ -132,0 +131,1 @@\n+  }\n@@ -135,32 +135,32 @@\n-    jint res = jvm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n-    if (res != JNI_OK) {\n-        _log(\"Failed to get JVMTI interface: %ld\\n\", res);\n-        return JNI_ERR;\n-    }\n-\n-    jvmtiCapabilities caps;\n-    memset(&caps, 0, sizeof(caps));\n-\n-    caps.can_retransform_classes = 1;\n-    jvmtiError err = jvmti->AddCapabilities(&caps);\n-    if (err != JVMTI_ERROR_NONE) {\n-        _log(\"Failed to add capabilities: %d\\n\", err);\n-        return JNI_ERR;\n-    }\n-\n-    jvmtiEventCallbacks eventCallbacks;\n-    memset(&eventCallbacks, 0, sizeof(eventCallbacks));\n-    eventCallbacks.ClassFileLoadHook = callbackClassFileLoadHook;\n-    err = jvmti->SetEventCallbacks(&eventCallbacks, sizeof(eventCallbacks));\n-    if (err != JVMTI_ERROR_NONE) {\n-        _log(\"Error setting event callbacks: %d\\n\", err);\n-        return JNI_ERR;\n-    }\n-\n-    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, nullptr);\n-    if (err != JVMTI_ERROR_NONE) {\n-        _log(\"SetEventNotificationMode(JVMTI_ENABLE) error %d\\n\", err);\n-        return JNI_ERR;\n-    }\n-\n-    return JNI_OK;\n+  jint res = jvm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK) {\n+    _log(\"Failed to get JVMTI interface: %ld\\n\", res);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiCapabilities caps;\n+  memset(&caps, 0, sizeof(caps));\n+\n+  caps.can_retransform_classes = 1;\n+  jvmtiError err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    _log(\"Failed to add capabilities: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiEventCallbacks eventCallbacks;\n+  memset(&eventCallbacks, 0, sizeof(eventCallbacks));\n+  eventCallbacks.ClassFileLoadHook = callbackClassFileLoadHook;\n+  err = jvmti->SetEventCallbacks(&eventCallbacks, sizeof(eventCallbacks));\n+  if (err != JVMTI_ERROR_NONE) {\n+    _log(\"Error setting event callbacks: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, nullptr);\n+  if (err != JVMTI_ERROR_NONE) {\n+    _log(\"SetEventNotificationMode(JVMTI_ENABLE) error %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  return JNI_OK;\n@@ -171,1 +171,1 @@\n-    return;\n+  return;\n@@ -178,2 +178,2 @@\n-    jboolean result = JNI_TRUE;\n-    _log(\">>nTest\\n\");\n+  jboolean result = JNI_TRUE;\n+  _log(\">>nTest\\n\");\n@@ -181,2 +181,2 @@\n-    for (int i = 0; i < testClassCount; i++) {\n-        _log(\"Loading %s...\\n\", testClassNames[i]);\n+  for (int i = 0; i < testClassCount; i++) {\n+    _log(\"Loading %s...\\n\", testClassNames[i]);\n@@ -184,7 +184,7 @@\n-        savedBytes[i].klass = env->FindClass(testClassNames[i]);\n-        if (savedBytes[i].klass == nullptr) {\n-            _log(\"Load error\\n\");\n-            result = JNI_FALSE;\n-            continue;\n-        }\n-        savedBytes[i].klass = (jclass)env->NewGlobalRef(savedBytes[i].klass);\n+    savedBytes[i].klass = env->FindClass(testClassNames[i]);\n+    if (savedBytes[i].klass == nullptr) {\n+      _log(\"Load error\\n\");\n+      result = JNI_FALSE;\n+      continue;\n+    }\n+    savedBytes[i].klass = (jclass)env->NewGlobalRef(savedBytes[i].klass);\n@@ -192,6 +192,5 @@\n-        _log(\"Retransforming %s...\\n\", testClassNames[i]);\n-        jvmtiError err = jvmti->RetransformClasses(1, &savedBytes[i].klass);\n-        if (err != JVMTI_ERROR_NONE) {\n-            _log(\"RetransformClasses error %d\\n\", err);\n-            result = JNI_FALSE;\n-        }\n+    _log(\"Retransforming %s...\\n\", testClassNames[i]);\n+    jvmtiError err = jvmti->RetransformClasses(1, &savedBytes[i].klass);\n+    if (err != JVMTI_ERROR_NONE) {\n+      _log(\"RetransformClasses error %d\\n\", err);\n+      result = JNI_FALSE;\n@@ -199,2 +198,3 @@\n-    _log(\"<<nTest\\n\");\n-    return result;\n+  }\n+  _log(\"<<nTest\\n\");\n+  return result;\n@@ -205,1 +205,1 @@\n-    return testClassCount;\n+  return testClassCount;\n@@ -210,1 +210,1 @@\n-    return savedBytes[idx].klass;\n+  return savedBytes[idx].klass;\n@@ -215,1 +215,1 @@\n-    return savedBytes[idx].load.get(env);\n+  return savedBytes[idx].load.get(env);\n@@ -220,1 +220,1 @@\n-    return savedBytes[idx].retransform.get(env);\n+  return savedBytes[idx].retransform.get(env);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/MissedStackMapFrames\/libMissedStackMapFrames.cpp","additions":117,"deletions":117,"binary":false,"changes":234,"status":"modified"}]}