{"files":[{"patch":"@@ -685,0 +685,1 @@\n+            long startNanos = System.nanoTime();\n@@ -690,1 +691,2 @@\n-                    ByteBuffer dst = tryBlockingReceive(connected, bufLength, nanos);\n+                    long remainingNanos = nanos - (System.nanoTime() - startNanos);\n+                    ByteBuffer dst = tryBlockingReceive(connected, bufLength, remainingNanos);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test a timed DatagramSocket.receive with a SecurityManager set\n+ * @run main\/othervm -Djava.security.manager=allow TimeoutWithSM\n+ *\/\n+\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.SocketTimeoutException;\n+import java.security.Permission;\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class TimeoutWithSM {\n+\n+    private static final int TIMEOUT = 10_000;\n+\n+    public static void main(String[] args) throws Exception {\n+        try (var socket = new DatagramSocket(null)) {\n+            InetAddress lb = InetAddress.getLoopbackAddress();\n+            socket.bind(new InetSocketAddress(lb, 0));\n+\n+            \/\/ start sender to send datagrams to us\n+            var done = new AtomicBoolean();\n+            SocketAddress sender = startSender(socket.getLocalSocketAddress(), done);\n+\n+            \/\/ set a SecurityManager that blocks datagrams from sender\n+            System.setSecurityManager(new SecurityManager() {\n+                @Override\n+                public void checkPermission(Permission p) {\n+                }\n+                @Override\n+                public void checkAccept(String host, int port) {\n+                    var isa = new InetSocketAddress(host, port);\n+                    System.out.println(\"checkAccept \" + isa);\n+                    if (isa.equals(sender)) {\n+                        throw new SecurityException();\n+                    }\n+                }\n+            });\n+\n+            \/\/ timed receive, should throw SocketTimeoutException\n+            try {\n+                socket.setSoTimeout(TIMEOUT);\n+                try {\n+                    byte[] bytes = new byte[1024];\n+                    DatagramPacket p = new DatagramPacket(bytes, bytes.length);\n+                    socket.receive(p);\n+                    throw new RuntimeException(\"Packet received, unexpected!!! \"\n+                            + \" sender=\" + p.getSocketAddress() + \", len=\" + p.getLength());\n+                } catch (SocketTimeoutException expected) {\n+                    System.out.println(expected + \", expected!!!\");\n+                }\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Start a thread to send datagrams to the given target address at intervals of\n+     * one second. The sender stops when done is set to true.\n+     * @return the socket address of the sender\n+     *\/\n+    static SocketAddress startSender(SocketAddress target, AtomicBoolean done) throws Exception {\n+        assert target instanceof InetSocketAddress isa && isa.getAddress().isLoopbackAddress();\n+        var sender = new DatagramSocket(null);\n+        boolean started = false;\n+        try {\n+            InetAddress lb = InetAddress.getLoopbackAddress();\n+            sender.bind(new InetSocketAddress(lb, 0));\n+            Thread.ofPlatform().start(() -> {\n+                try {\n+                    try (sender) {\n+                        byte[] bytes = \"hello\".getBytes(\"UTF-8\");\n+                        DatagramPacket p = new DatagramPacket(bytes, bytes.length);\n+                        p.setSocketAddress(target);\n+                        while (!done.get()) {\n+                            System.out.println(\"Send datagram to \" + target + \" ...\");\n+                            sender.send(p);\n+                            Thread.sleep(Duration.ofSeconds(1));\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+            started = true;\n+        } finally {\n+            if (!started) {\n+                sender.close();\n+            }\n+        }\n+        return sender.getLocalSocketAddress();\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/TimeoutWithSM.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}