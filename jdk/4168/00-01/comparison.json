{"files":[{"patch":"@@ -196,11 +196,1 @@\n-  \/\/ Note: I want this to be mtThread, but that causes linkage errors:\n-  \/\/\n-  \/\/   Undefined symbols for architecture x86_64:\n-  \/\/   \"BasicHashtable<(MEMFLAGS)2>::free_buckets()\", referenced from:\n-  \/\/   ThreadsSMRSupport::free_list(ThreadsList*) in threadSMR.o\n-  \/\/   ThreadsSMRSupport::is_a_protected_JavaThread(JavaThread*) in threadSMR.o\n-  \/\/   \"BasicHashtable<(MEMFLAGS)2>::new_entry(unsigned int)\", referenced from:\n-  \/\/   KVHashtable<void*, bool, (MEMFLAGS)2, &(unsigned int primitive_hash<void*>(void* const&)), &(bool primitive_equals<void*>(void* const&, void* const&))>::add_if_absent(void*, bool, bool*) in threadSMR.o\n-  \/\/\n-  \/\/ so I'm using mtInternal instead.\n-  KVHashtable<void *, bool, mtInternal, &ThreadScanHashtable::ptr_hash,\n+  KVHashtable<void *, bool, mtThread, &ThreadScanHashtable::ptr_hash,\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+template class BasicHashtable<mtThread>;\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}