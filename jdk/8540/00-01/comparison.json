{"files":[{"patch":"@@ -323,4 +323,13 @@\n-  if (k->is_hidden() && !is_registered_lambda_proxy_class(k)) {\n-    ResourceMark rm;\n-    log_debug(cds)(\"Skipping %s: Hidden class\", k->name()->as_C_string());\n-    return true;\n+  if (k->is_hidden()) {\n+    if (!is_registered_lambda_proxy_class(k)) {\n+      ResourceMark rm;\n+      log_debug(cds)(\"Skipping %s: Hidden class\", k->name()->as_C_string());\n+      return true;\n+    } else {\n+      DumpTimeClassInfo* info = _dumptime_table->get(k);\n+      assert(info != NULL, \"sanity\");\n+      if (check_for_exclusion(info->nest_host(), NULL)) {\n+        log_debug(cds)(\"Skipping %s: lambda proxy class\", k->name()->as_C_string());\n+        return true;\n+      }\n+    }\n@@ -845,3 +854,2 @@\n-      \/\/ Don't include the lambda proxy if its nest host is not in the \"linked\" state\n-      \/\/ or is an \"old\" class which cannot be verified at dump time.\n-      && nest_host->is_linked() && nest_host->can_be_verified_at_dumptime()) {\n+      \/\/ Don't include the lambda proxy if its nest host is not in the \"linked\" state.\n+      && nest_host->is_linked()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @summary A lambda proxy class should not be archived if its nest host is\n- *          old (with major version < JDK_6 (50) which cannot be verified during dump time).\n+ * @summary A lambda proxy class should not be archived if its nest host implements an\n+ *          old (with major version < JDK_6 (50) interface which cannot be verified during dump time).\n@@ -33,2 +33,2 @@\n- * @compile test-classes\/OldNestHostApp.java\n- * @run driver OldNestHost\n+ * @compile test-classes\/NestHostOldInfApp.java\n+ * @run driver NestHostOldInf\n@@ -40,1 +40,1 @@\n-public class OldNestHost {\n+public class NestHostOldInf {\n@@ -43,1 +43,1 @@\n-        String mainClass = \"OldNestHostApp\";\n+        String mainClass = \"NestHostOldInfApp\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/NestHostOldInf.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldNestHost.java","status":"renamed"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285914\n+ * @summary A lambda proxy class should not be archived if its nest host implements an\n+ *          old (with major version < JDK_6 (50) interface which cannot be verified during dump time).\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/test-classes\/OldInf.jasm ..\/test-classes\/ChildOldInf.java\n+ * @compile ..\/test-classes\/NestHostOldInfApp.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldclassapp.jar NestHostOldInfApp OldInf ChildOldInf ChildOldInf$InnerChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar NestHostOldInf\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class NestHostOldInf extends DynamicArchiveTestBase {\n+    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"oldclass-top.jsa\");\n+    private static String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+    private static String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+    private static String appJar = ClassFileInstaller.getJarPath(\"oldclassapp.jar\");\n+    private static String mainAppClass = \"NestHostOldInfApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(NestHostOldInf::doTest);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        dump(ARCHIVE_NAME,\n+             use_whitebox_jar,\n+             \"-XX:+UnlockDiagnosticVMOptions\",\n+             \"-XX:+WhiteBoxAPI\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n+             .assertNormalExit(output -> {\n+                 output.shouldContain(\"Written dynamic archive 0x\")\n+                       .shouldContain(\"Skipping ChildOldInf: Old class has been linked\")\n+                       .shouldContain(\"Skipping OldInf: Old class has been linked\")\n+                       .shouldHaveExitValue(0);\n+                 });\n+\n+        run(ARCHIVE_NAME,\n+            use_whitebox_jar,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds=debug\",\n+            \"-Xlog:cds+dynamic=info\",\n+            \"-cp\", appJar,\n+            mainAppClass)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldMatch(\".class.load. OldInf source:.*oldclassapp.jar\")\n+                      .shouldMatch(\".class.load. ChildOldInf source:.*oldclassapp.jar\")\n+                      .shouldContain(\"ChildOldInf$InnerChild source: shared objects file (top)\")\n+                      .shouldMatch(\".class.load. ChildOldInf[$]InnerChild[$][$]Lambda[$].*\/0x.*source:.ChildOldInf\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/NestHostOldInf.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8285914\n- * @summary A lambda proxy class should not be archived if its nest host is\n- *          old (with major version < JDK_6 (50) which cannot be verified during dump time).\n- * @requires vm.cds\n- * @requires vm.cds.custom.loaders\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @compile ..\/test-classes\/OldInf.jasm ..\/test-classes\/ChildOldInf.java\n- * @compile ..\/test-classes\/OldNestHostApp.java\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldclassapp.jar OldNestHostApp OldInf ChildOldInf ChildOldInf$InnerChild\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar OldNestHost\n- *\/\n-\n-import java.io.File;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class OldNestHost extends DynamicArchiveTestBase {\n-    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"oldclass-top.jsa\");\n-    private static String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n-    private static String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n-    private static String appJar = ClassFileInstaller.getJarPath(\"oldclassapp.jar\");\n-    private static String mainAppClass = \"OldNestHostApp\";\n-\n-    public static void main(String[] args) throws Exception {\n-        runTest(OldNestHost::doTest);\n-    }\n-\n-    private static void doTest() throws Exception {\n-        dump(ARCHIVE_NAME,\n-             use_whitebox_jar,\n-             \"-XX:+UnlockDiagnosticVMOptions\",\n-             \"-XX:+WhiteBoxAPI\",\n-             \"-Xlog:cds\",\n-             \"-Xlog:cds+dynamic=debug\",\n-             \"-cp\", appJar,\n-             mainAppClass)\n-             .assertNormalExit(output -> {\n-                 output.shouldContain(\"Written dynamic archive 0x\")\n-                       .shouldContain(\"Skipping ChildOldInf: Old class has been linked\")\n-                       .shouldContain(\"Skipping OldInf: Old class has been linked\")\n-                       .shouldHaveExitValue(0);\n-                 });\n-\n-        run(ARCHIVE_NAME,\n-            use_whitebox_jar,\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+WhiteBoxAPI\",\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds=debug\",\n-            \"-Xlog:cds+dynamic=info\",\n-            \"-cp\", appJar,\n-            mainAppClass)\n-            .assertNormalExit(output -> {\n-                output.shouldHaveExitValue(0)\n-                      .shouldMatch(\".class.load. OldInf source:.*oldclassapp.jar\")\n-                      .shouldMatch(\".class.load. ChildOldInf source:.*oldclassapp.jar\")\n-                      .shouldContain(\"ChildOldInf$InnerChild source: shared objects file (top)\")\n-                      .shouldMatch(\".class.load. ChildOldInf[$]InnerChild[$][$]Lambda[$].*\/0x.*source:.ChildOldInf\");\n-                });\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldNestHost.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-public class OldNestHostApp {\n+public class NestHostOldInfApp {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/NestHostOldInfApp.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldNestHostApp.java","status":"renamed"}]}