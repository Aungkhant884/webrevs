{"files":[{"patch":"@@ -323,15 +323,4 @@\n-  if (k->is_hidden()) {\n-    if (!is_registered_lambda_proxy_class(k)) {\n-      ResourceMark rm;\n-      log_debug(cds)(\"Skipping %s: Hidden class\", k->name()->as_C_string());\n-      return true;\n-    } else {\n-      DumpTimeClassInfo* info = _dumptime_table->get(k);\n-      assert(info != NULL, \"sanity\");\n-      InstanceKlass* nest_host = info->nest_host();\n-      if (check_for_exclusion(nest_host, NULL)) {\n-        log_debug(cds)(\"Skipping %s: lambda proxy class because its nest host %s was excluded\",\n-                       k->name()->as_C_string(), nest_host->name()->as_C_string());\n-        return true;\n-      }\n-    }\n+  if (k->is_hidden() && !is_registered_lambda_proxy_class(k)) {\n+    ResourceMark rm;\n+    log_debug(cds)(\"Skipping %s: Hidden class\", k->name()->as_C_string());\n+    return true;\n@@ -1639,8 +1628,7 @@\n-    if (SystemDictionaryShared::check_for_exclusion(caller_ik, NULL)) {\n-      \/\/ If the caller class is excluded, unregister all the associated lambda proxy classes\n-      \/\/ so that they will not be included in the CDS archive.\n-      for (int i = info._proxy_klasses->length() - 1; i >= 0; i--) {\n-        SystemDictionaryShared::reset_registered_lambda_proxy_class(info._proxy_klasses->at(i));\n-        info._proxy_klasses->remove_at(i);\n-      }\n-    }\n+    InstanceKlass* nest_host = caller_ik->nest_host_not_null();\n+\n+    \/\/ If the caller class and\/or nest_host are excluded, the associated lambda proxy\n+    \/\/ must also be excluded.\n+    bool always_exclude = SystemDictionaryShared::check_for_exclusion(caller_ik, NULL) ||\n+                          SystemDictionaryShared::check_for_exclusion(nest_host, NULL);\n+\n@@ -1649,1 +1637,1 @@\n-      if (SystemDictionaryShared::check_for_exclusion(ik, NULL)) {\n+      if (always_exclude || SystemDictionaryShared::check_for_exclusion(ik, NULL)) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -477,0 +477,5 @@\n+  \/\/ Call this only if you know that the nest host has been initialized.\n+  InstanceKlass* nest_host_not_null() {\n+    assert(_nest_host != NULL, \"must be\");\n+    return _nest_host;\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}