{"files":[{"patch":"@@ -845,2 +845,3 @@\n-      \/\/ Don't include the lambda proxy if its nest host is not in the \"linked\" state.\n-      && nest_host->is_linked()) {\n+      \/\/ Don't include the lambda proxy if its nest host is not in the \"linked\" state\n+      \/\/ or is an \"old\" class which cannot be verified at dump time.\n+      && nest_host->is_linked() && nest_host->can_be_verified_at_dumptime()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8285914\n+ * @summary A lambda proxy class should not be archived if its nest host is\n+ *          old (with major version < JDK_6 (50) which cannot be verified during dump time).\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldInf.jasm\n+ * @compile test-classes\/ChildOldInf.java\n+ * @compile test-classes\/OldNestHostApp.java\n+ * @run driver OldNestHost\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldNestHost {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"OldNestHostApp\";\n+        String namePrefix = \"oldsuperinf\";\n+        String appClasses[] = TestCommon.list(\"OldInf\", \"ChildOldInf\", \"ChildOldInf$InnerChild\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   dynamicMode ? true : false,\n+                                   \"Skipping OldInf: Old class has been linked\",\n+                                   \"Skipping ChildOldInf: Old class has been linked\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldInf with old format\")\n+                 .shouldContain(\"Verifying class ChildOldInf with new format\")\n+                 .shouldContain(\"ChildOldInf$InnerChild source: shared objects file\")\n+                 .shouldContain(\"Hello from InnerChild doTest\");\n+              if (!dynamicMode) {\n+                  out.shouldContain(\"OldInf source: shared objects file\")\n+                     .shouldContain(\"ChildOldInf source: shared objects file\");\n+              } else {\n+                  \/\/ Old classes were already linked before dynamic dump happened,\n+                  \/\/ so they couldn't be archived.\n+                  out.shouldMatch(\".class.load.*OldInf source:.*oldsuperinf.jar\")\n+                     .shouldMatch(\".class.load.*ChildOldInf source:.*oldsuperinf.jar\");\n+              }\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldNestHost.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285914\n+ * @summary A lambda proxy class should not be archived if its nest host is\n+ *          old (with major version < JDK_6 (50) which cannot be verified during dump time).\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/test-classes\/OldInf.jasm ..\/test-classes\/ChildOldInf.java\n+ * @compile ..\/test-classes\/OldNestHostApp.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldclassapp.jar OldNestHostApp OldInf ChildOldInf ChildOldInf$InnerChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar OldNestHost\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldNestHost extends DynamicArchiveTestBase {\n+    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"oldclass-top.jsa\");\n+    private static String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+    private static String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+    private static String appJar = ClassFileInstaller.getJarPath(\"oldclassapp.jar\");\n+    private static String mainAppClass = \"OldNestHostApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(OldNestHost::doTest);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        dump(ARCHIVE_NAME,\n+             use_whitebox_jar,\n+             \"-XX:+UnlockDiagnosticVMOptions\",\n+             \"-XX:+WhiteBoxAPI\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n+             .assertNormalExit(output -> {\n+                 output.shouldContain(\"Written dynamic archive 0x\")\n+                       .shouldContain(\"Skipping ChildOldInf: Old class has been linked\")\n+                       .shouldContain(\"Skipping OldInf: Old class has been linked\")\n+                       .shouldHaveExitValue(0);\n+                 });\n+\n+        run(ARCHIVE_NAME,\n+            use_whitebox_jar,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds=debug\",\n+            \"-Xlog:cds+dynamic=info\",\n+            \"-cp\", appJar,\n+            mainAppClass)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldMatch(\".class.load. OldInf source:.*oldclassapp.jar\")\n+                      .shouldMatch(\".class.load. ChildOldInf source:.*oldclassapp.jar\")\n+                      .shouldContain(\"ChildOldInf$InnerChild source: shared objects file (top)\")\n+                      .shouldMatch(\".class.load. ChildOldInf[$]InnerChild[$][$]Lambda[$].*\/0x.*source:.ChildOldInf\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldNestHost.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -28,0 +28,17 @@\n+\n+    public static ChildOldInf.InnerChild innerChild() {\n+        return new InnerChild();\n+    }\n+\n+    public static final class InnerChild {\n+        public InnerChild() {\n+        }\n+        public void doTest() {\n+            doit(() -> {\n+                System.out.println(\"Hello from InnerChild doTest\");\n+            });\n+        }\n+        public void doit(Runnable t) {\n+            t.run();\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ChildOldInf.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class OldNestHostApp {\n+    public static void main(String args[]) {\n+\n+        ChildOldInf.innerChild().doTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldNestHostApp.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"}]}