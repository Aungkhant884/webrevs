{"files":[{"patch":"@@ -3114,1 +3114,2 @@\n-        ReferenceLookupResult boundRes = new ReferenceLookupResult(boundSym, boundSearchResolveContext);\n+        boolean isStaticSelector = TreeInfo.isStaticSelector(referenceTree.expr, names);\n+        ReferenceLookupResult boundRes = new ReferenceLookupResult(boundSym, boundSearchResolveContext, isStaticSelector);\n@@ -3130,1 +3131,1 @@\n-            unboundRes = new ReferenceLookupResult(unboundSym, unboundSearchResolveContext);\n+            unboundRes = new ReferenceLookupResult(unboundSym, unboundSearchResolveContext, isStaticSelector);\n@@ -3241,2 +3242,2 @@\n-        ReferenceLookupResult(Symbol sym, MethodResolutionContext resolutionContext) {\n-            this(sym, staticKind(sym, resolutionContext));\n+        ReferenceLookupResult(Symbol sym, MethodResolutionContext resolutionContext, boolean isStaticSelector) {\n+            this(sym, staticKind(sym, resolutionContext, isStaticSelector));\n@@ -3250,11 +3251,11 @@\n-        private static StaticKind staticKind(Symbol sym, MethodResolutionContext resolutionContext) {\n-            switch (sym.kind) {\n-                case MTH:\n-                case AMBIGUOUS:\n-                    return resolutionContext.candidates.stream()\n-                            .filter(c -> c.isApplicable() && c.step == resolutionContext.step)\n-                            .map(c -> StaticKind.from(c.sym))\n-                            .reduce(StaticKind::reduce)\n-                            .orElse(StaticKind.UNDEFINED);\n-                default:\n-                    return StaticKind.UNDEFINED;\n+        private static StaticKind staticKind(Symbol sym, MethodResolutionContext resolutionContext, boolean isStaticSelector) {\n+            if (sym.kind == MTH && !isStaticSelector) {\n+                return StaticKind.from(sym);\n+            } else if (sym.kind == MTH || sym.kind == AMBIGUOUS) {\n+                return resolutionContext.candidates.stream()\n+                        .filter(c -> c.isApplicable() && c.step == resolutionContext.step)\n+                        .map(c -> StaticKind.from(c.sym))\n+                        .reduce(StaticKind::reduce)\n+                        .orElse(StaticKind.UNDEFINED);\n+            } else {\n+                return StaticKind.UNDEFINED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -135,0 +135,20 @@\n+\n+        assertOK(\n+                getDiagConsumer(0, -1),\n+                \"\"\"\n+                import java.util.function.*;\n+\n+                interface Intf {\n+                    Object apply(String... args);\n+                }\n+\n+                public class Test {\n+                    public static Object foo(Object o) { return \"bar\"; }\n+                    public final Object foo(Object... o) { return \"foo\"; }\n+\n+                    public void test() {\n+                        Intf f = this::foo;\n+                    }\n+                }\n+                \"\"\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/BoundUnboundSearchTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}