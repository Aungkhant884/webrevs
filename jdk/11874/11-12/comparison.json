{"files":[{"patch":"@@ -775,0 +775,3 @@\n+\\f[V]this-escape\\f[R]: Warns about superclass constructors leaking\n+\\f[V]this\\f[R] prior to subclass initialization.\n+.IP \\[bu] 2\n@@ -2212,0 +2215,41 @@\n+\\f[V]this\\-escape\\f[R]\n+Warns about superclass constructors leaking \\f[V]this\\f[R] prior\n+to subclass initialization.\n+For example:\n+.RS\n+.IP\n+.nf\n+\\f[CB]\n+public class MyClass {\n+\n+   public MyClass() {\n+       System.out.println(\"Hash = \" + this.hashCode());\n+   }\n+}\n+\\f[R]\n+.fi\n+.PP\n+The compiler generates the following warning:\n+.IP\n+.nf\n+\\f[CB]\n+MyClass.java:4: warning: [this-escape] possible 'this' escape\n+                         before subclass is fully initialized\n+     System.out.println(\"Hash = \" + this.hashCode());\n+                                                 ^\n+\\f[R]\n+.fi\n+.PP\n+Because calls to \\f[V]super()\\f[R] must precede other initialization,\n+subclass fields are unintialized when the superclass constructor executes.\n+If the superclass constructor uses the instance in a way that could\n+possibly result a subclass method being invoked, that method would be\n+operating on a partially initialized instance. In the above example,\n+a subclass that overrides \\f[V]hashCode()\\f[R] in order to incorporate\n+some of its own fields would generate an incorrect result.\n+.PP\n+Warnings are only generated when a potential subclass could exist\n+outside of the current source file being compiled.\n+For example, final and private classes never generate warnings.\n+.RE\n+.TP\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}