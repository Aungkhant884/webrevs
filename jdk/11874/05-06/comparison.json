{"files":[{"patch":"@@ -2350,1 +2350,1 @@\n-            if (erasure(type).equalsIgnoreMetadata(outerType)) {\n+            if (isSameType(type, outerType)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,3 +85,19 @@\n- * When tracking references, we distinguish between direct references and indirect references,\n- * but do no further refinement. In particular, we do not attempt to track references stored\n- * in fields at all. So we are mainly just trying to track what's on the Java stack.\n+ * As we analyze constructors and the methods they invoke, we track the various things in scope\n+ * that could possibly reference the 'this' instance we are following. Such references are\n+ * represented by {@link Ref} instances, of which there are these varieties:\n+ * <ul>\n+ *  <li>The current 'this' reference; see {@link ThisRef}\n+ *  <li>The current outer 'this' reference; see {@link OuterRef}\n+ *  <li>Local variables and method parameters; see {@link VarRef}\n+ *  <li>The current expression being evaluated, i.e.,what's on top of the Java stack; see {@link ExprRef}\n+ *  <li>The current method's return value; see {@link ReturnRef}\n+ * <\/ul>\n+ *\n+ * <p>\n+ * For each type of reference, we distinguish between <i>direct<\/i> and <i>indirect<\/i> references.\n+ * A direct reference means the reference directly refers to the 'this' instance we are tracking.\n+ * An indirect reference means the reference refers to the 'this' instance we are tracking through\n+ * at least one level of indirection.\n+ *\n+ * <p>\n+ * Currently we do not attempt to explicitly track references stored in fields (for future study).\n@@ -107,8 +123,0 @@\n- *  <li>The possible locations for a 'this' reference that we try to track are:\n- *  <ul>\n- *      <li>Current 'this' instance\n- *      <li>Current outer 'this' instance\n- *      <li>Local parameter\/variable\n- *      <li>Method return value\n- *      <li>Current expression value (i.e. top of stack)\n- *  <\/ul>\n@@ -116,3 +124,1 @@\n- *  <li>We don't try to track assignments to &amp; from fields (for future study).\n- *  <li>We don't try to follow {@code super()} invocations.\n- *  <li>We categorize tracked references as direct or indirect to add a tiny bit of nuance.\n+ *  <li>We don't try to follow {@code super()} invocations; that's for the superclass analysis to handle.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"}]}