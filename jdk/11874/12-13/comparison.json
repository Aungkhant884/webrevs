{"files":[{"patch":"@@ -56,1 +56,1 @@\n-    DISABLED_WARNINGS := options this-escape, \\\n+    DISABLED_WARNINGS := options, \\\n","filename":"make\/CompileToolsJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-#\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/jdk.accessibility\/Java.gmk","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-#\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/jdk.attach\/Java.gmk","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-#\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/jdk.crypto.cryptoki\/Java.gmk","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -26,2 +26,0 @@\n-DISABLED_WARNINGS_java += this-escape\n-\n","filename":"make\/modules\/jdk.dynalink\/Java.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-#\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/jdk.naming.dns\/Java.gmk","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-#\n-# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/jdk.zipfs\/Java.gmk","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Optional;\n@@ -44,0 +45,1 @@\n+import com.sun.tools.javac.code.Directive;\n@@ -81,3 +83,1 @@\n- * If it ever passes to code outside of the current compilation unit, we declare a possible leak.\n- * On the other hand, when constructors and non-overridable methods within the same compilation\n- * unit are invoked, we \"invoke\" them to follow references.\n+ * If it passes to code outside of the current module, we declare a possible leak.\n@@ -94,0 +94,1 @@\n+ *  <li>The current switch expressions's yield value; see {@link YieldRef}\n@@ -113,1 +114,1 @@\n- *      outside of the current compilation unit.\n+ *      outside of the current module.\n@@ -115,1 +116,1 @@\n- *      <li>In other words, we don't try to protect the current compilation unit from itself.\n+ *      <li>In other words, we don't try to protect the current module's code from itself.\n@@ -213,0 +214,10 @@\n+        \/\/ Determine which packages are exported by the containing module, if any.\n+        \/\/ A null set indicates the unnamed module: all packages are implicitly exported.\n+        Set<PackageSymbol> exportedPackages = Optional.ofNullable(env.toplevel.modle)\n+            .filter(mod -> mod != syms.noModule)\n+            .filter(mod -> mod != syms.unnamedModule)\n+            .map(mod -> mod.exports.stream()\n+                            .map(Directive.ExportsDirective::getPackage)\n+                            .collect(Collectors.toSet()))\n+            .orElse(null);\n+\n@@ -230,1 +241,1 @@\n-            private boolean privateOuter;\n+            private boolean nonPublicOuter;\n@@ -235,1 +246,1 @@\n-                boolean privateOuterPrev = privateOuter;\n+                boolean nonPublicOuterPrev = nonPublicOuter;\n@@ -240,2 +251,2 @@\n-                    privateOuter |= tree.sym.isAnonymous();\n-                    privateOuter |= (tree.mods.flags & Flags.PRIVATE) != 0;\n+                    nonPublicOuter |= tree.sym.isAnonymous();\n+                    nonPublicOuter |= (tree.mods.flags & Flags.PUBLIC) == 0;\n@@ -247,1 +258,1 @@\n-                    privateOuter = privateOuterPrev;\n+                    nonPublicOuter = nonPublicOuterPrev;\n@@ -280,1 +291,2 @@\n-                    boolean analyzable = currentClassIsExternallyExtendable() &&\n+                    boolean extendable = currentClassIsExternallyExtendable();\n+                    boolean analyzable = extendable &&\n@@ -282,1 +294,1 @@\n-                        !tree.sym.isPrivate() &&\n+                        (tree.sym.flags() & (Flags.PUBLIC | Flags.PROTECTED)) != 0 &&\n@@ -286,1 +298,1 @@\n-                    boolean invokable = !currentClassIsExternallyExtendable() ||\n+                    boolean invokable = !extendable ||\n@@ -300,1 +312,1 @@\n-            \/\/ Determines if the current class could be extended in some external compilation unit\n+            \/\/ Determines if the current class could be extended in some other package\/module\n@@ -303,4 +315,3 @@\n-                  !(currentClass.sym.isSealed() &&\n-                      currentClass.permitting.stream()\n-                        .map(TreeInfo::symbolFor)\n-                        .allMatch(classSyms::contains)) &&\n+                  currentClass.sym.isPublic() &&\n+                  (exportedPackages == null || exportedPackages.contains(currentClass.sym.packge())) &&\n+                  !currentClass.sym.isSealed() &&\n@@ -308,1 +319,1 @@\n-                  !privateOuter;\n+                  !nonPublicOuter;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -775,1 +775,1 @@\n-\\f[V]this-escape\\f[R]: Warns about superclass constructors leaking\n+\\f[V]this-escape\\f[R]: Warns about constructors leaking\n@@ -2216,3 +2216,3 @@\n-Warns about superclass constructors leaking \\f[V]this\\f[R] prior\n-to subclass initialization.\n-For example:\n+Warns about constructors leaking \\f[V]this\\f[R] prior to subclass\n+initialization.\n+For example, this class:\n@@ -2224,4 +2224,3 @@\n-\n-   public MyClass() {\n-       System.out.println(\"Hash = \" + this.hashCode());\n-   }\n+  public MyClass() {\n+    System.out.println(this.hashCode());\n+  }\n@@ -2232,1 +2231,1 @@\n-The compiler generates the following warning:\n+generates the following warning:\n@@ -2236,1 +2235,1 @@\n-MyClass.java:4: warning: [this-escape] possible 'this' escape\n+MyClass.java:3: warning: [this-escape] possible 'this' escape\n@@ -2238,2 +2237,2 @@\n-     System.out.println(\"Hash = \" + this.hashCode());\n-                                                 ^\n+    System.out.println(this.hashCode());\n+                                    ^\n@@ -2243,11 +2242,13 @@\n-Because calls to \\f[V]super()\\f[R] must precede other initialization,\n-subclass fields are unintialized when the superclass constructor executes.\n-If the superclass constructor uses the instance in a way that could\n-possibly result a subclass method being invoked, that method would be\n-operating on a partially initialized instance. In the above example,\n-a subclass that overrides \\f[V]hashCode()\\f[R] in order to incorporate\n-some of its own fields would generate an incorrect result.\n-.PP\n-Warnings are only generated when a potential subclass could exist\n-outside of the current source file being compiled.\n-For example, final and private classes never generate warnings.\n+A 'this' escape warning is generated when a constructor does something\n+that might result in a subclass method being invoked before the\n+constructor returns.\n+In such cases the subclass method would be operating on an incompletely\n+initialized instance.\n+In the above example, a subclass of \\f[V]MyClass\\f[R] that overrides\n+\\f[V]hashCode()\\f[R] to incorporate its own fields would likely produce\n+an incorrect result when invoked as shown.\n+.PP\n+Warnings are only generated if a subclass could exist that is outside\n+of the current module (or package, if no module) being compiled.\n+So, for example, constructors in final and non-public classes do not\n+generate warnings.\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"}]}