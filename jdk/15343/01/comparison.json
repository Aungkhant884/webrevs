{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,1 @@\n-    int           argi  = 0;             \/* index into old array *\/\n+    int           argi  = 1;             \/* index into old array *\/\n@@ -162,0 +162,5 @@\n+#ifdef __linux__\n+    const char* executable = \"\/proc\/self\/exe\";\n+#else\n+    const char* executable = argv[0];\n+#endif\n@@ -168,1 +173,0 @@\n-\n@@ -170,2 +174,2 @@\n-     * to our current position, which is in argv[0]. *\/\n-    if (getJavaPath(argv[argi++], java, RELATIVE_DEPTH) != 0) {\n+     * to our current position, which is in executable. *\/\n+    if (getJavaPath(executable, java, RELATIVE_DEPTH) != 0) {\n","filename":"src\/java.base\/unix\/native\/launcher\/jexec.c","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8175000\n+ * @bug 8175000 8314491\n@@ -28,0 +28,1 @@\n+ * @requires os.family == \"linux\"\n@@ -32,0 +33,2 @@\n+import java.beans.Transient;\n+import java.io.BufferedReader;\n@@ -34,0 +37,8 @@\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.HashMap;\n@@ -57,6 +68,0 @@\n-        \/\/ linux is the only supported platform, give the others a pass\n-        if (!isLinux) {\n-            System.err.println(\"Warning: unsupported platform test passes vacuously\");\n-            return;\n-        }\n-        \/\/ ok to run the test now\n@@ -67,4 +72,2 @@\n-    @Test\n-    void jexec() throws Exception {\n-        TestResult tr = doExec(jexecCmd.getAbsolutePath(),\n-                testJar.getAbsolutePath(), message);\n+    private void runTest(String... cmds) throws Exception {\n+        TestResult tr = doExec(cmds);\n@@ -80,0 +83,13 @@\n+\n+    @Test\n+    void jexec() throws Exception {\n+        runTest(jexecCmd.getAbsolutePath(),\n+                testJar.getAbsolutePath(), message);\n+    }\n+\n+    @Test\n+    void jexecInPath() throws Exception {\n+        Path jexec = Path.of(jexecCmd.getAbsolutePath());\n+        runTest(\"\/bin\/sh\", \"-c\",\n+                String.format(\"PATH=%s ; jexec %s '%s'\",jexec.getParent(), testJar.getAbsolutePath(), message));\n+    }\n","filename":"test\/jdk\/tools\/launcher\/Jexec.java","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"}]}