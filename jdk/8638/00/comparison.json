{"files":[{"patch":"@@ -33,2 +33,0 @@\n-    private static final long DO_NOT_POOL = -1;\n-    private static final SimpleStringIdPool sp = new SimpleStringIdPool();\n@@ -36,3 +34,17 @@\n-    public static long addString(String s) {\n-        return sp.addString(s);\n-    }\n+    private static final long DO_NOT_POOL = -1;\n+    \/* max size *\/\n+    private static final int MAX_SIZE = 32 * 1024;\n+    \/* max size bytes *\/\n+    private static final long MAX_SIZE_UTF16 = 16 * 1024 * 1024;\n+    \/* string id index *\/\n+    private static final AtomicLong sidIdx = new AtomicLong(1);\n+    \/* looking at a biased data set 4 is a good value *\/\n+    private static final String[] preCache = new String[] { \"\", \"\", \"\", \"\" };\n+    \/* the cache *\/\n+    private static final ConcurrentHashMap<String, Long> cache = new ConcurrentHashMap<>(MAX_SIZE, 0.75f);\n+    \/* loop mask *\/\n+    private static final int preCacheMask = 0x03;\n+    \/* index of oldest *\/\n+    private static int preCacheOld = 0;\n+    \/* max size bytes *\/\n+    private static long currentSizeUTF16;\n@@ -41,1 +53,4 @@\n-        sp.reset();\n+        cache.clear();\n+        synchronized (StringPool.class) {\n+            currentSizeUTF16 = 0;\n+        }\n@@ -44,20 +59,4 @@\n-    private static class SimpleStringIdPool {\n-        \/* string id index *\/\n-        private final AtomicLong sidIdx = new AtomicLong(1);\n-        \/* the cache *\/\n-        private final ConcurrentHashMap<String, Long> cache;\n-        \/* max size *\/\n-        private final int MAX_SIZE = 32*1024;\n-        \/* max size bytes*\/\n-        private final long MAX_SIZE_UTF16 = 16*1024*1024;\n-        \/* max size bytes*\/\n-        private long currentSizeUTF16;\n-        \/* looking at a biased data set 4 is a good value *\/\n-        private final String[] preCache = new String[]{\"\", \"\" , \"\" ,\"\"};\n-        \/* index of oldest *\/\n-        private int preCacheOld = 0;\n-        \/* loop mask *\/\n-        private static final int preCacheMask = 0x03;\n-\n-        SimpleStringIdPool() {\n-            this.cache = new ConcurrentHashMap<>(MAX_SIZE, 0.75f);\n+    public static long addString(String s) {\n+        Long lsid = cache.get(s);\n+        if (lsid != null) {\n+            return lsid.longValue();\n@@ -65,6 +64,3 @@\n-\n-        private void reset() {\n-            this.cache.clear();\n-            synchronized(SimpleStringIdPool.class) {\n-                this.currentSizeUTF16 = 0;\n-            }\n+        if (!preCache(s)) {\n+            \/* we should not pool this string *\/\n+            return DO_NOT_POOL;\n@@ -72,15 +68,3 @@\n-\n-        private long addString(String s) {\n-            Long lsid = this.cache.get(s);\n-            if (lsid != null) {\n-                return lsid.longValue();\n-            }\n-            if (!preCache(s)) {\n-                \/* we should not pool this string *\/\n-                return DO_NOT_POOL;\n-            }\n-            if (cache.size() > MAX_SIZE || currentSizeUTF16 > MAX_SIZE_UTF16) {\n-                \/* pool was full *\/\n-                reset();\n-            }\n-            return storeString(s);\n+        if (cache.size() > MAX_SIZE || currentSizeUTF16 > MAX_SIZE_UTF16) {\n+            \/* pool was full *\/\n+            reset();\n@@ -88,0 +72,2 @@\n+        return storeString(s);\n+    }\n@@ -89,9 +75,7 @@\n-        private long storeString(String s) {\n-            long sid = this.sidIdx.getAndIncrement();\n-            \/* we can race but it is ok *\/\n-            this.cache.put(s, sid);\n-            synchronized(SimpleStringIdPool.class) {\n-                JVM.addStringConstant(sid, s);\n-                currentSizeUTF16 += s.length();\n-            }\n-            return sid;\n+    private static long storeString(String s) {\n+        long sid = sidIdx.getAndIncrement();\n+        \/* we can race but it is ok *\/\n+        cache.put(s, sid);\n+        synchronized (StringPool.class) {\n+            JVM.addStringConstant(sid, s);\n+            currentSizeUTF16 += s.length();\n@@ -99,0 +83,2 @@\n+        return sid;\n+    }\n@@ -100,16 +86,12 @@\n-        private boolean preCache(String s) {\n-            if (preCache[0].equals(s)) {\n-                return true;\n-            }\n-            if (preCache[1].equals(s)) {\n-                return true;\n-            }\n-            if (preCache[2].equals(s)) {\n-                return true;\n-            }\n-            if (preCache[3].equals(s)) {\n-                return true;\n-            }\n-            preCacheOld = (preCacheOld - 1) & preCacheMask;\n-            preCache[preCacheOld] = s;\n-            return false;\n+    private static boolean preCache(String s) {\n+        if (preCache[0].equals(s)) {\n+            return true;\n+        }\n+        if (preCache[1].equals(s)) {\n+            return true;\n+        }\n+        if (preCache[2].equals(s)) {\n+            return true;\n+        }\n+        if (preCache[3].equals(s)) {\n+            return true;\n@@ -117,0 +99,3 @@\n+        preCacheOld = (preCacheOld - 1) & preCacheMask;\n+        preCache[preCacheOld] = s;\n+        return false;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":57,"deletions":72,"binary":false,"changes":129,"status":"modified"}]}