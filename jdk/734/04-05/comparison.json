{"files":[{"patch":"@@ -185,0 +185,3 @@\n+  guarantee(!task->is_registered(), \"Task already registered\");\n+  guarantee(task->next() == NULL, \"Task already in queue\");\n+\n@@ -200,0 +203,3 @@\n+  guarantee(task->is_registered(), \"Must be registered before scheduled\");\n+  guarantee(task->next() == NULL, \"Task already in queue\");\n+\n@@ -254,1 +260,2 @@\n-  double start = os::elapsedVTime();\n+  double start = os::elapsedTime();\n+  double vstart = os::elapsedVTime();\n@@ -260,1 +267,3 @@\n-  log_debug(gc, task)(\"G1 Service Thread (%s) (run) %1.3fms\", task->name(), duration * MILLIUNITS);\n+  double vduration = os::elapsedVTime() - vstart;\n+  log_debug(gc, task)(\"G1 Service Thread (%s) (run) %1.3fms (cpu: %1.3fms)\",\n+                      task->name(), duration * MILLIUNITS, vduration * MILLIUNITS);\n@@ -297,1 +306,2 @@\n-  _next(NULL) { }\n+  _next(NULL),\n+  _service_thread(NULL) { }\n@@ -303,0 +313,4 @@\n+bool G1ServiceTask::is_registered() {\n+  return _service_thread != NULL;\n+}\n+\n@@ -352,1 +366,1 @@\n-  assert(task->time() != DBL_MAX, \"invalid time for task\");\n+  assert(task->time() != max_jlong, \"invalid time for task\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+class G1ServiceTaskQueue;\n@@ -34,0 +35,3 @@\n+  friend class G1ServiceTaskQueue;\n+  friend class G1ServiceThread;\n+\n@@ -40,1 +44,1 @@\n-  \/\/ The service thread this task is associated with.\n+  \/\/ The service thread this task is registered with.\n@@ -43,0 +47,3 @@\n+  void set_service_thread(G1ServiceThread* thread);\n+  bool is_registered();\n+\n@@ -45,2 +52,0 @@\n-  const char* name();\n-  void set_service_thread(G1ServiceThread* thread);\n@@ -48,1 +53,0 @@\n-  void set_time(jlong time);\n@@ -50,2 +54,1 @@\n-\n-  void set_next(G1ServiceTask* next);\n+  const char* name();\n@@ -62,0 +65,5 @@\n+\n+  \/\/ These setters are protected for use by testing and the\n+  \/\/ sentinel task only.\n+  void set_time(jlong time);\n+  void set_next(G1ServiceTask* next);\n@@ -73,2 +81,2 @@\n-  \/\/ to run and the sentinel task has the time set to DBL_MAX. This guarantees\n-  \/\/ that any new task will be added just before the sentinel at the latest.\n+  \/\/ to run. To simplify list management the sentinel task has its time set\n+  \/\/ to max_jlong, guaranteeing it to be the last task in the queue.\n@@ -92,0 +100,1 @@\n+  friend class G1ServiceTask;\n@@ -111,0 +120,3 @@\n+  \/\/ Schedule a registered task to run after the given delay.\n+  void schedule_task(G1ServiceTask* task, jlong delay);\n+\n@@ -114,0 +126,2 @@\n+  \/\/ Register a task with the service thread and schedule it. If\n+  \/\/ no delay is specified the task is scheduled to run directly.\n@@ -115,1 +129,0 @@\n-  void schedule_task(G1ServiceTask* task, jlong delay);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -125,1 +125,3 @@\n-  jlong delay_ms() { return _delay_ms; }\n+  void update_time(jlong now, int multiplier) {\n+    set_time(now + (_delay_ms * multiplier));\n+  }\n@@ -147,1 +149,1 @@\n-      task->set_time(now + (task->delay_ms() * multiplier));\n+      task->update_time(now, multiplier);\n@@ -178,1 +180,1 @@\n-  a.set_time(500);\n+  a.update_time(500, 1);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}