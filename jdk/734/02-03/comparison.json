{"files":[{"patch":"@@ -259,2 +259,2 @@\n-  double delay_ms = task->delay_ms() \/ 1000.0;\n-  task->set_time(os::elapsedTime() + delay_ms);\n+  double delay = task->delay_ms() \/ 1000.0;\n+  task->set_time(os::elapsedTime() + delay);\n@@ -287,14 +287,0 @@\n-void G1ServiceThread::run_tasks() {\n-  \/\/ Execute tasks that are due. Need to check for termination to avoid\n-  \/\/ running forever if task reschedule with very short interval.\n-  while (!should_terminate()) {\n-    G1ServiceTask* task = pop_due_task();\n-    if (task == NULL) {\n-      return;\n-    }\n-\n-    run_task(task);\n-    reschedule_task(task);\n-  }\n-}\n-\n@@ -313,1 +299,5 @@\n-    run_tasks();\n+    G1ServiceTask* task = pop_due_task();\n+    if (task != NULL) {\n+      run_task(task);\n+      reschedule_task(task);\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-  void run_tasks();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-  G1ServiceThread* _st;\n@@ -35,1 +34,2 @@\n-  int64_t _timeout;\n+  bool _reschedule;\n+\n@@ -37,1 +37,1 @@\n-  CheckTask(const char* name, G1ServiceThread* st) :\n+  CheckTask(const char* name) :\n@@ -39,1 +39,0 @@\n-      _st(st),\n@@ -41,1 +40,1 @@\n-      _timeout(100) { }\n+      _reschedule(true) { }\n@@ -43,2 +42,2 @@\n-  virtual uint64_t delay_ms() { return _timeout; }\n-  virtual bool should_reschedule() { return true; }\n+  virtual uint64_t delay_ms() { return 100; }\n+  virtual bool should_reschedule() { return _reschedule; }\n@@ -47,1 +46,1 @@\n-  void set_timeout(int64_t timeout) { _timeout = timeout; }\n+  void set_reschedule(bool reschedule) { _reschedule = reschedule; }\n@@ -61,1 +60,1 @@\n-  CheckTask ct(\"AddAndRun\", st);\n+  CheckTask ct(\"AddAndRun\");\n@@ -82,1 +81,1 @@\n-  CheckTask ct(\"AddWhileWaiting\", st);\n+  CheckTask ct(\"AddWhileWaiting\");\n@@ -98,3 +97,3 @@\n-  \/\/ Negative timeout to avoid rescheduling.\n-  CheckTask ct(\"AddRunOnce\", st);\n-  ct.set_timeout(-1);\n+  \/\/ Set reschedule to false to only run once.\n+  CheckTask ct(\"AddRunOnce\");\n+  ct.set_reschedule(false);\n@@ -113,1 +112,1 @@\n-  int64_t _timeout;\n+  int64_t _delay_ms;\n@@ -115,1 +114,1 @@\n-  TestTask(int64_t timeout) :\n+  TestTask(int64_t delay) :\n@@ -117,2 +116,2 @@\n-      _timeout(timeout) {\n-    set_time(timeout \/ 1000.0);\n+      _delay_ms(delay) {\n+    set_time(delay \/ 1000.0);\n@@ -121,1 +120,1 @@\n-  virtual uint64_t delay_ms() { return _timeout; }\n+  virtual uint64_t delay_ms() { return _delay_ms; }\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"}]}