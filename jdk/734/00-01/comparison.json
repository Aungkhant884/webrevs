{"files":[{"patch":"@@ -39,0 +39,14 @@\n+G1SentinelTask::G1SentinelTask() : G1ServiceTask(\"Sentinel Task\") {\n+  set_time(DBL_MAX);\n+  set_next(this);\n+}\n+\n+void G1SentinelTask::execute() {\n+  guarantee(false, \"Sentinel service task should never be executed.\");\n+}\n+\n+int64_t G1SentinelTask::timeout_ms() {\n+  guarantee(false, \"Sentinel service task should never be scheduled.\");\n+  return 0;\n+}\n+\n@@ -88,1 +102,1 @@\n-  virtual double timeout() {\n+  virtual int64_t timeout_ms() {\n@@ -93,1 +107,1 @@\n-    return G1PeriodicGCInterval == 0 ? 1.0 : (G1PeriodicGCInterval \/ 1000.0);\n+    return G1PeriodicGCInterval == 0 ? 1000 : G1PeriodicGCInterval;\n@@ -164,2 +178,2 @@\n-  virtual double timeout() {\n-    return G1ConcRefinementServiceIntervalMillis\/1000.0;\n+  virtual int64_t timeout_ms() {\n+    return G1ConcRefinementServiceIntervalMillis;\n@@ -226,2 +240,2 @@\n-  double timeout = task->timeout();\n-  if (timeout < 0) {\n+  int64_t timeout_ms = task->timeout_ms();\n+  if (timeout_ms < 0) {\n@@ -234,1 +248,1 @@\n-  task->set_time(os::elapsedTime() + timeout);\n+  task->set_time(os::elapsedTime() + (timeout_ms \/ 1000.0));\n@@ -328,14 +342,1 @@\n-void G1ServiceTask::execute() {\n-  guarantee(false, \"Sentinel service task should never be executed.\");\n-}\n-\n-double G1ServiceTask::timeout() {\n-  guarantee(false, \"Sentinel service task should never be sceduled.\");\n-  return 0.0;\n-}\n-\n-G1ServiceTaskList::G1ServiceTaskList() :\n-    _sentinel(\"Sentinel\") {\n-  _sentinel.set_next(&_sentinel);\n-  _sentinel.set_time(DBL_MAX);\n-}\n+G1ServiceTaskList::G1ServiceTaskList() : _sentinel() { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -50,0 +50,9 @@\n+  virtual void execute() = 0;\n+  \/\/ Timeout to the next invocation. A negative value can be used\n+  \/\/ to stop the task from being rescheduled and run again.\n+  virtual int64_t timeout_ms() = 0;\n+};\n+\n+class G1SentinelTask : public G1ServiceTask {\n+public:\n+  G1SentinelTask();\n@@ -51,3 +60,1 @@\n-  \/\/ The timeout to the next invocation. A negative timeout\n-  \/\/ will cause the task to not be rescheduled after completing.\n-  virtual double timeout();\n+  virtual int64_t timeout_ms();\n@@ -61,1 +68,1 @@\n-  G1ServiceTask _sentinel;\n+  G1SentinelTask _sentinel;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  double _timeout;\n+  int64_t _timeout;\n@@ -41,1 +41,1 @@\n-      _timeout(0.1) { }\n+      _timeout(100) { }\n@@ -43,1 +43,1 @@\n-  virtual double timeout() { return _timeout; }\n+  virtual int64_t timeout_ms() { return _timeout; }\n@@ -45,1 +45,1 @@\n-  void set_timeout(double timeout) { _timeout = timeout; }\n+  void set_timeout(int64_t timeout) { _timeout = timeout; }\n@@ -111,1 +111,1 @@\n-  double _timeout;\n+  int64_t _timeout;\n@@ -113,1 +113,1 @@\n-  TestTask(double timeout) :\n+  TestTask(int64_t timeout) :\n@@ -116,1 +116,1 @@\n-    set_time(timeout);\n+    set_time(timeout \/ 1000.0);\n@@ -119,1 +119,1 @@\n-  virtual double timeout() { return _timeout; }\n+  virtual int64_t timeout_ms() { return _timeout; }\n@@ -128,1 +128,1 @@\n-    TestTask* task = new TestTask(0.1 * i);\n+    TestTask* task = new TestTask(100 * i);\n@@ -140,1 +140,1 @@\n-      task->set_time(now + (task->timeout() * multiplyer));\n+      task->set_time(now + ((task->timeout_ms() * multiplyer) \/ 1000.0));\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}