{"files":[{"patch":"@@ -350,1 +350,1 @@\n-void Assembler::paddi_or_addi(Register d, Register s, long si34) {\n+void Assembler::paddi_or_addi_r0ok(Register d, Register s, long si34) {\n@@ -400,1 +400,1 @@\n-    if (is_simm(x, 32)) { \/\/ opt 2: simm32\n+    if (is_simm(x, 32)) { \/\/ opt 2: simm32 && !simm16\n@@ -402,7 +402,4 @@\n-      bool xc_loaded = (xd & 0x8000) ? (xc != -1) : (xc != 0);\n-      if (xc_loaded) {\n-        if (xd && use_pli) {\n-          pli_or_li(d, x);\n-        } else {\n-          lis(d, x >> 16);\n-        }\n+      if (xd && use_pli) {\n+        pli_or_li(d, x);\n+      } else {\n+        lis(d, x >> 16);\n@@ -411,1 +408,1 @@\n-    } else {\n+    } else { \/\/ High 32 bits needed.\n@@ -417,1 +414,0 @@\n-        bool xA_loaded = (xB & 0x80000000) ? (xA != -1) : (xA != 0);\n@@ -419,9 +415,5 @@\n-          if (xA_loaded) {\n-            pli_or_li(d, xA);\n-            xc = (x >> 16) & 0xffff;\n-            sldi(d, d, 32);\n-            if (xc) { oris(d, d, (unsigned short)xc); }\n-            if (xd) { ori( d, d, (unsigned short)xd); }\n-          } else if (xB) {\n-            pli_or_li(d, xB);\n-          }\n+          pli_or_li(d, xA);\n+          xc = (x >> 16) & 0xffff;\n+          sldi(d, d, 32);\n+          if (xc) { oris(d, d, (unsigned short)xc); }\n+          if (xd) { ori( d, d, (unsigned short)xd); }\n@@ -429,7 +421,3 @@\n-          if (xA_loaded) {\n-            pli_or_li(tmp, xA);\n-            pli_or_li(d, xB);\n-            insrdi(d, tmp, 32, 0);\n-          } else {\n-            pli_or_li(d, xB);\n-          }\n+          pli_or_li(tmp, xA);\n+          pli_or_li(d, xB);\n+          insrdi(d, tmp, 32, 0);\n@@ -482,1 +470,1 @@\n-  if (rem == 0) { \/\/ opt 2: simm32\n+  if (rem == 0) { \/\/ opt 2: simm32 && !simm16\n@@ -498,8 +486,3 @@\n-        bool xA_loaded = (xB & 0x80000000) ? (xA != -1) : (xA != 0);\n-        if (xA_loaded) {\n-          pli_or_li(tmp, xA);\n-          pli_or_li(d, xB);\n-          insrdi(d, tmp, 32, 0);\n-        } else {\n-          pli_or_li(d, xB);\n-        }\n+        pli_or_li(tmp, xA);\n+        pli_or_li(d, xB);\n+        insrdi(d, tmp, 32, 0);\n@@ -531,1 +514,2 @@\n-      int32_t xA, xB; \/\/ Two 32-bit chunks of const.\n+      \/\/ 64-bit value: x = xA xB\n+      int32_t xA; \/\/ Two 32-bit chunks of const, but the lower half is further broken down\n@@ -533,11 +517,5 @@\n-      xB = x & 0xffffffff;    \/\/ Lower 32-bit chunk.\n-      bool xA_loaded = (xB & 0x80000000) ? (xA != -1) : (xA != 0);\n-      if (xA_loaded) {\n-        pli_or_li(d, xA);\n-        xc = (x >> 16) & 0xffff;\n-        sldi(d, d, 32);\n-        if (xc) { oris(d, d, (unsigned short)xc); }\n-        if (xd) { ori( d, d, (unsigned short)xd); }\n-      } else {\n-        pli_or_li(d, xB);\n-      }\n+      pli_or_li(d, xA);\n+      xc = (x >> 16) & 0xffff;\n+      sldi(d, d, 32);\n+      if (xc) { oris(d, d, (unsigned short)xc); }\n+      if (xd) { ori( d, d, (unsigned short)xd); }\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":26,"deletions":48,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2619,3 +2619,7 @@\n-  void paddi_or_addi(Register d, Register s, long si34);\n-  void pli_or_li(    Register d, long si34) {\n-    paddi_or_addi(d, R0, si34);\n+  void paddi_or_addi_r0ok(Register d, Register s, long si34);\n+  void paddi_or_addi(Register d, Register s, long si34) {\n+    assert(s != R0, \"r0 not allowed\");\n+    paddi_or_addi_r0ok(d, s, si34);\n+  }\n+  void pli_or_li(Register d, long si34) {\n+    paddi_or_addi_r0ok(d, R0, si34);\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}