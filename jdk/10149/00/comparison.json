{"files":[{"patch":"@@ -872,6 +872,4 @@\n-  \/\/ 1. the exception type = EXC_SOFTWARE\n-  \/\/ 2. codes[0] (which is the code) = EXC_SOFT_SIGNAL\n-  \/\/ 3. codes[1] (which is the sub-code) = SIGSTOP\n-  if (!(exception_type == EXC_SOFTWARE &&\n-        codes[0] == EXC_SOFT_SIGNAL    &&\n-        codes[num_codes -1] == SIGSTOP)) {\n+  \/\/ 1. the exception type = EXC_SOFTWARE (5)\n+  \/\/ 2. codes[0] (which is the code) = EXC_SOFT_SIGNAL (0x10003 \/ 65539)\n+  \/\/ 3. codes[1] (which is the sub-code) = SIGSTOP (17)\n+  if (exception_type != EXC_SOFTWARE || codes[0] != EXC_SOFT_SIGNAL) {\n@@ -884,1 +882,9 @@\n-  return KERN_SUCCESS;\n+  int sig = codes[num_codes -1];\n+  if (sig == SIGSTOP) {\n+    return KERN_SUCCESS;\n+  } else {\n+    \/\/ Sometimes we get SIGTRAP(4) or SIGILL(5) instead of SIGSTOP (17) on aarch64.\n+    \/\/ We currently can't deal with them. See JDK-8288429.\n+    print_error(\"catch_mach_exception_raise: signal is not SIGSTOP (%d)\\n\", sig);\n+    return GOT_UNKNOWN_EXC;\n+  }\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/MacosxDebuggerLocal.m","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}