{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.ArrayList;\n@@ -40,1 +41,0 @@\n-import java.util.stream.Stream;\n@@ -57,0 +57,2 @@\n+    private static final int MAX_INDY_CONCAT_ARG_SLOTS = 200;\n+\n@@ -261,15 +263,87 @@\n-        Class<?>[] types = Stream.of(getters)\n-                .map(g -> g.type().returnType())\n-                .toList()\n-                .toArray(new Class<?>[getters.length]);\n-        MethodType concatMethodType = MethodType.methodType(String.class, types);\n-        String recipe = \"\\2\" + (getters.length > 0 ?\n-                        \"\\2\\1\\2\".repeat(getters.length - 1) + \"\\2\\1\" :\n-                        \"\") + \"\\2\";\n-        String[] constants = new String[2 + (getters.length > 0 ? 2 * getters.length - 1 : 0)];\n-        constants[0] = receiverClass.getSimpleName() + \"[\";\n-        constants[constants.length - 1] = \"]\";\n-        for (int i = 0; i < names.size(); i++) {\n-            constants[1 + 2 * i] = names.get(i) + \"=\";\n-            if (i != names.size() - 1) {\n-                constants[1 + 2 * i + 1] = \", \";\n+        if (getters.length == 0) {\n+            \/\/ special case\n+            MethodHandle emptyRecordCase = MethodHandles.constant(String.class, receiverClass.getSimpleName() + \"[]\");\n+            emptyRecordCase = MethodHandles.dropArguments(emptyRecordCase, 0, receiverClass); \/\/ (R)S\n+            return emptyRecordCase;\n+        }\n+\n+        boolean firstTime = true;\n+        MethodHandle[] mhs;\n+        List<List<MethodHandle>> splits;\n+        MethodHandle[] toSplit = getters;\n+        int namesIndex = 0;\n+        do {\n+            \/* StringConcatFactory::makeConcatWithConstants can only deal with 200 spots, longs and double occupy two\n+             * the rest 1 spot, we need to chop the current `getters` into chuncks, it could be that for records with\n+             * a lot of components that we need to do a couple of iterations. The main diference between the first\n+             * iteration and the rest would be on the recipe\n+             *\/\n+            splits = split(toSplit);\n+            mhs = new MethodHandle[splits.size()];\n+            for (int splitIndex = 0; splitIndex < splits.size(); splitIndex++) {\n+                String recipe = \"\";\n+                if (firstTime && splitIndex == 0) {\n+                    recipe = receiverClass.getSimpleName() + \"[\";\n+                }\n+                for (int i = 0; i < splits.get(splitIndex).size(); i++) {\n+                    recipe += firstTime ? names.get(namesIndex) + \"=\" + \"\\1\" : \"\\1\";\n+                    if (firstTime && namesIndex != names.size() - 1) {\n+                        recipe += \", \";\n+                    }\n+                    namesIndex++;\n+                }\n+                if (firstTime && splitIndex == splits.size() - 1) {\n+                    recipe += \"]\";\n+                }\n+                Class<?>[] concatTypeArgs = new Class<?>[splits.get(splitIndex).size()];\n+                \/\/ special case: no need to create another getters if there is only one split\n+                MethodHandle[] currentSplitGetters = new MethodHandle[splits.get(splitIndex).size()];\n+                for (int j = 0; j < splits.get(splitIndex).size(); j++) {\n+                    concatTypeArgs[j] = splits.get(splitIndex).get(j).type().returnType();\n+                    currentSplitGetters[j] = splits.get(splitIndex).get(j);\n+                }\n+                MethodType concatMT = MethodType.methodType(String.class, concatTypeArgs);\n+                try {\n+                    mhs[splitIndex] = StringConcatFactory.makeConcatWithConstants(\n+                            lookup, \"\",\n+                            concatMT,\n+                            recipe,\n+                            new Object[0]\n+                    ).getTarget();\n+                    mhs[splitIndex] = MethodHandles.filterArguments(mhs[splitIndex], 0, currentSplitGetters);\n+                    mhs[splitIndex] = MethodHandles.permuteArguments(\n+                            mhs[splitIndex],\n+                            MethodType.methodType(String.class, receiverClass),\n+                            new int[splits.get(splitIndex).size()]\n+                    );\n+                } catch (Throwable t) {\n+                    throw new RuntimeException(t);\n+                }\n+            }\n+            toSplit = mhs;\n+            firstTime = false;\n+        } while (splits.size() > 1);\n+        return mhs[0];\n+    }\n+\n+    \/**\n+     * Chops the getters into smaller chunks according to the maximum number of spots\n+     * StringConcatFactory::makeConcatWithConstants can chew\n+     * @param getters the current getters\n+     * @return chunks that wont surpass the maximum number of spots StringConcatFactory::makeConcatWithConstants can chew\n+     *\/\n+    private static List<List<MethodHandle>> split(MethodHandle[] getters) {\n+        List<List<MethodHandle>> splits = new ArrayList<>();\n+\n+        int slots = 0;\n+\n+        \/\/ Need to peel, so that neither call has more than acceptable number\n+        \/\/ of slots for the arguments.\n+        List<MethodHandle> cArgs = new ArrayList<>();\n+        for (MethodHandle methodHandle : getters) {\n+            Class<?> returnType = methodHandle.type().returnType();\n+            int needSlots = (returnType == long.class || returnType == double.class) ? 2 : 1;\n+            if (slots + needSlots > MAX_INDY_CONCAT_ARG_SLOTS) {\n+                splits.add(cArgs);\n+                cArgs = new ArrayList<>();\n+                slots = 0;\n@@ -277,0 +351,2 @@\n+            cArgs.add(methodHandle);\n+            slots += needSlots;\n@@ -279,10 +355,3 @@\n-        MethodHandle mh;\n-        try {\n-            mh = StringConcatFactory.makeConcatWithConstants(\n-                    lookup, \"\",\n-                    concatMethodType,\n-                    recipe,\n-                    (Object[]) constants\n-            ).getTarget();\n-        } catch (Throwable t) {\n-            throw new RuntimeException(t);\n+        \/\/ Flush the tail slice\n+        if (!cArgs.isEmpty()) {\n+            splits.add(cArgs);\n@@ -290,7 +359,2 @@\n-        mh = MethodHandles.filterArguments(mh, 0, getters);\n-        mh = MethodHandles.permuteArguments(\n-                mh,\n-                MethodType.methodType(String.class, receiverClass),\n-                new int[getters.length]\n-        );\n-        return mh;\n+\n+        return splits;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":97,"deletions":33,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -0,0 +1,855 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8261847\n+ * @summary test the output of the toString method of records with a large number of components\n+ * @run testng BigRecordsToStringTest\n+ *\/\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Parameter;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.testng.annotations.*;\n+import static org.testng.Assert.*;\n+\n+@Test\n+public class BigRecordsToStringTest {\n+    record BigInt(\n+            int i1,\n+            int i2,\n+            int i3,\n+            int i4,\n+            int i5,\n+            int i6,\n+            int i7,\n+            int i8,\n+            int i9,\n+            int i10,\n+            int i11,\n+            int i12,\n+            int i13,\n+            int i14,\n+            int i15,\n+            int i16,\n+            int i17,\n+            int i18,\n+            int i19,\n+            int i20,\n+            int i21,\n+            int i22,\n+            int i23,\n+            int i24,\n+            int i25,\n+            int i26,\n+            int i27,\n+            int i28,\n+            int i29,\n+            int i30,\n+            int i31,\n+            int i32,\n+            int i33,\n+            int i34,\n+            int i35,\n+            int i36,\n+            int i37,\n+            int i38,\n+            int i39,\n+            int i40,\n+            int i41,\n+            int i42,\n+            int i43,\n+            int i44,\n+            int i45,\n+            int i46,\n+            int i47,\n+            int i48,\n+            int i49,\n+            int i50,\n+            int i51,\n+            int i52,\n+            int i53,\n+            int i54,\n+            int i55,\n+            int i56,\n+            int i57,\n+            int i58,\n+            int i59,\n+            int i60,\n+            int i61,\n+            int i62,\n+            int i63,\n+            int i64,\n+            int i65,\n+            int i66,\n+            int i67,\n+            int i68,\n+            int i69,\n+            int i70,\n+            int i71,\n+            int i72,\n+            int i73,\n+            int i74,\n+            int i75,\n+            int i76,\n+            int i77,\n+            int i78,\n+            int i79,\n+            int i80,\n+            int i81,\n+            int i82,\n+            int i83,\n+            int i84,\n+            int i85,\n+            int i86,\n+            int i87,\n+            int i88,\n+            int i89,\n+            int i90,\n+            int i91,\n+            int i92,\n+            int i93,\n+            int i94,\n+            int i95,\n+            int i96,\n+            int i97,\n+            int i98,\n+            int i99,\n+            int i100,\n+            int i101,\n+            int i102,\n+            int i103,\n+            int i104,\n+            int i105,\n+            int i106,\n+            int i107,\n+            int i108,\n+            int i109,\n+            int i110,\n+            int i111,\n+            int i112,\n+            int i113,\n+            int i114,\n+            int i115,\n+            int i116,\n+            int i117,\n+            int i118,\n+            int i119,\n+            int i120,\n+            int i121,\n+            int i122,\n+            int i123,\n+            int i124,\n+            int i125,\n+            int i126,\n+            int i127,\n+            int i128,\n+            int i129,\n+            int i130,\n+            int i131,\n+            int i132,\n+            int i133,\n+            int i134,\n+            int i135,\n+            int i136,\n+            int i137,\n+            int i138,\n+            int i139,\n+            int i140,\n+            int i141,\n+            int i142,\n+            int i143,\n+            int i144,\n+            int i145,\n+            int i146,\n+            int i147,\n+            int i148,\n+            int i149,\n+            int i150,\n+            int i151,\n+            int i152,\n+            int i153,\n+            int i154,\n+            int i155,\n+            int i156,\n+            int i157,\n+            int i158,\n+            int i159,\n+            int i160,\n+            int i161,\n+            int i162,\n+            int i163,\n+            int i164,\n+            int i165,\n+            int i166,\n+            int i167,\n+            int i168,\n+            int i169,\n+            int i170,\n+            int i171,\n+            int i172,\n+            int i173,\n+            int i174,\n+            int i175,\n+            int i176,\n+            int i177,\n+            int i178,\n+            int i179,\n+            int i180,\n+            int i181,\n+            int i182,\n+            int i183,\n+            int i184,\n+            int i185,\n+            int i186,\n+            int i187,\n+            int i188,\n+            int i189,\n+            int i190,\n+            int i191,\n+            int i192,\n+            int i193,\n+            int i194,\n+            int i195,\n+            int i196,\n+            int i197,\n+            int i198,\n+            int i199,\n+            int i200,\n+            int i201,\n+            int i202,\n+            int i203,\n+            int i204,\n+            int i205,\n+            int i206,\n+            int i207,\n+            int i208,\n+            int i209,\n+            int i210,\n+            int i211,\n+            int i212,\n+            int i213,\n+            int i214,\n+            int i215,\n+            int i216,\n+            int i217,\n+            int i218,\n+            int i219,\n+            int i220,\n+            int i221,\n+            int i222,\n+            int i223,\n+            int i224,\n+            int i225,\n+            int i226,\n+            int i227,\n+            int i228,\n+            int i229,\n+            int i230,\n+            int i231,\n+            int i232,\n+            int i233,\n+            int i234,\n+            int i235,\n+            int i236,\n+            int i237,\n+            int i238,\n+            int i239,\n+            int i240,\n+            int i241,\n+            int i242,\n+            int i243,\n+            int i244,\n+            int i245,\n+            int i246,\n+            int i247,\n+            int i248,\n+            int i249,\n+            int i250,\n+            int i251,\n+            int i252,\n+            int i253,\n+            int i254\n+    ) {}\n+\n+    BigInt bigInt= new BigInt(\n+            1,\n+            2,\n+            3,\n+            4,\n+            5,\n+            6,\n+            7,\n+            8,\n+            9,\n+            10,\n+            11,\n+            12,\n+            13,\n+            14,\n+            15,\n+            16,\n+            17,\n+            18,\n+            19,\n+            20,\n+            21,\n+            22,\n+            23,\n+            24,\n+            25,\n+            26,\n+            27,\n+            28,\n+            29,\n+            30,\n+            31,\n+            32,\n+            33,\n+            34,\n+            35,\n+            36,\n+            37,\n+            38,\n+            39,\n+            40,\n+            41,\n+            42,\n+            43,\n+            44,\n+            45,\n+            46,\n+            47,\n+            48,\n+            49,\n+            50,\n+            51,\n+            52,\n+            53,\n+            54,\n+            55,\n+            56,\n+            57,\n+            58,\n+            59,\n+            60,\n+            61,\n+            62,\n+            63,\n+            64,\n+            65,\n+            66,\n+            67,\n+            68,\n+            69,\n+            70,\n+            71,\n+            72,\n+            73,\n+            74,\n+            75,\n+            76,\n+            77,\n+            78,\n+            79,\n+            80,\n+            81,\n+            82,\n+            83,\n+            84,\n+            85,\n+            86,\n+            87,\n+            88,\n+            89,\n+            90,\n+            91,\n+            92,\n+            93,\n+            94,\n+            95,\n+            96,\n+            97,\n+            98,\n+            99,\n+            100,\n+            101,\n+            102,\n+            103,\n+            104,\n+            105,\n+            106,\n+            107,\n+            108,\n+            109,\n+            110,\n+            111,\n+            112,\n+            113,\n+            114,\n+            115,\n+            116,\n+            117,\n+            118,\n+            119,\n+            120,\n+            121,\n+            122,\n+            123,\n+            124,\n+            125,\n+            126,\n+            127,\n+            128,\n+            129,\n+            130,\n+            131,\n+            132,\n+            133,\n+            134,\n+            135,\n+            136,\n+            137,\n+            138,\n+            139,\n+            140,\n+            141,\n+            142,\n+            143,\n+            144,\n+            145,\n+            146,\n+            147,\n+            148,\n+            149,\n+            150,\n+            151,\n+            152,\n+            153,\n+            154,\n+            155,\n+            156,\n+            157,\n+            158,\n+            159,\n+            160,\n+            161,\n+            162,\n+            163,\n+            164,\n+            165,\n+            166,\n+            167,\n+            168,\n+            169,\n+            170,\n+            171,\n+            172,\n+            173,\n+            174,\n+            175,\n+            176,\n+            177,\n+            178,\n+            179,\n+            180,\n+            181,\n+            182,\n+            183,\n+            184,\n+            185,\n+            186,\n+            187,\n+            188,\n+            189,\n+            190,\n+            191,\n+            192,\n+            193,\n+            194,\n+            195,\n+            196,\n+            197,\n+            198,\n+            199,\n+            200,\n+            201,\n+            202,\n+            203,\n+            204,\n+            205,\n+            206,\n+            207,\n+            208,\n+            209,\n+            210,\n+            211,\n+            212,\n+            213,\n+            214,\n+            215,\n+            216,\n+            217,\n+            218,\n+            219,\n+            220,\n+            221,\n+            222,\n+            223,\n+            224,\n+            225,\n+            226,\n+            227,\n+            228,\n+            229,\n+            230,\n+            231,\n+            232,\n+            233,\n+            234,\n+            235,\n+            236,\n+            237,\n+            238,\n+            239,\n+            240,\n+            241,\n+            242,\n+            243,\n+            244,\n+            245,\n+            246,\n+            247,\n+            248,\n+            249,\n+            250,\n+            251,\n+            252,\n+            253,\n+            254\n+    );\n+\n+    record BigLong(\n+            long i1,\n+            long i2,\n+            long i3,\n+            long i4,\n+            long i5,\n+            long i6,\n+            long i7,\n+            long i8,\n+            long i9,\n+            long i10,\n+            long i11,\n+            long i12,\n+            long i13,\n+            long i14,\n+            long i15,\n+            long i16,\n+            long i17,\n+            long i18,\n+            long i19,\n+            long i20,\n+            long i21,\n+            long i22,\n+            long i23,\n+            long i24,\n+            long i25,\n+            long i26,\n+            long i27,\n+            long i28,\n+            long i29,\n+            long i30,\n+            long i31,\n+            long i32,\n+            long i33,\n+            long i34,\n+            long i35,\n+            long i36,\n+            long i37,\n+            long i38,\n+            long i39,\n+            long i40,\n+            long i41,\n+            long i42,\n+            long i43,\n+            long i44,\n+            long i45,\n+            long i46,\n+            long i47,\n+            long i48,\n+            long i49,\n+            long i50,\n+            long i51,\n+            long i52,\n+            long i53,\n+            long i54,\n+            long i55,\n+            long i56,\n+            long i57,\n+            long i58,\n+            long i59,\n+            long i60,\n+            long i61,\n+            long i62,\n+            long i63,\n+            long i64,\n+            long i65,\n+            long i66,\n+            long i67,\n+            long i68,\n+            long i69,\n+            long i70,\n+            long i71,\n+            long i72,\n+            long i73,\n+            long i74,\n+            long i75,\n+            long i76,\n+            long i77,\n+            long i78,\n+            long i79,\n+            long i80,\n+            long i81,\n+            long i82,\n+            long i83,\n+            long i84,\n+            long i85,\n+            long i86,\n+            long i87,\n+            long i88,\n+            long i89,\n+            long i90,\n+            long i91,\n+            long i92,\n+            long i93,\n+            long i94,\n+            long i95,\n+            long i96,\n+            long i97,\n+            long i98,\n+            long i99,\n+            long i100,\n+            long i101,\n+            long i102,\n+            long i103,\n+            long i104,\n+            long i105,\n+            long i106,\n+            long i107,\n+            long i108,\n+            long i109,\n+            long i110,\n+            long i111,\n+            long i112,\n+            long i113,\n+            long i114,\n+            long i115,\n+            long i116,\n+            long i117,\n+            long i118,\n+            long i119,\n+            long i120,\n+            long i121,\n+            long i122,\n+            long i123,\n+            long i124,\n+            long i125,\n+            long i126,\n+            long i127\n+    ) {}\n+\n+    BigLong bigLong = new BigLong(\n+            1,\n+            2,\n+            3,\n+            4,\n+            5,\n+            6,\n+            7,\n+            8,\n+            9,\n+            10,\n+            11,\n+            12,\n+            13,\n+            14,\n+            15,\n+            16,\n+            17,\n+            18,\n+            19,\n+            20,\n+            21,\n+            22,\n+            23,\n+            24,\n+            25,\n+            26,\n+            27,\n+            28,\n+            29,\n+            30,\n+            31,\n+            32,\n+            33,\n+            34,\n+            35,\n+            36,\n+            37,\n+            38,\n+            39,\n+            40,\n+            41,\n+            42,\n+            43,\n+            44,\n+            45,\n+            46,\n+            47,\n+            48,\n+            49,\n+            50,\n+            51,\n+            52,\n+            53,\n+            54,\n+            55,\n+            56,\n+            57,\n+            58,\n+            59,\n+            60,\n+            61,\n+            62,\n+            63,\n+            64,\n+            65,\n+            66,\n+            67,\n+            68,\n+            69,\n+            70,\n+            71,\n+            72,\n+            73,\n+            74,\n+            75,\n+            76,\n+            77,\n+            78,\n+            79,\n+            80,\n+            81,\n+            82,\n+            83,\n+            84,\n+            85,\n+            86,\n+            87,\n+            88,\n+            89,\n+            90,\n+            91,\n+            92,\n+            93,\n+            94,\n+            95,\n+            96,\n+            97,\n+            98,\n+            99,\n+            100,\n+            101,\n+            102,\n+            103,\n+            104,\n+            105,\n+            106,\n+            107,\n+            108,\n+            109,\n+            110,\n+            111,\n+            112,\n+            113,\n+            114,\n+            115,\n+            116,\n+            117,\n+            118,\n+            119,\n+            120,\n+            121,\n+            122,\n+            123,\n+            124,\n+            125,\n+            126,\n+            127\n+    );\n+\n+    private static final String BIG_INT_TO_STRING_OUTPUT =\n+        \"BigInt[i1=1, i2=2, i3=3, i4=4, i5=5, i6=6, i7=7, i8=8, i9=9, i10=10, i11=11, i12=12, i13=13, i14=14, i15=15, i16=16, \" +\n+            \"i17=17, i18=18, i19=19, i20=20, i21=21, i22=22, i23=23, i24=24, i25=25, i26=26, i27=27, i28=28, i29=29, i30=30, \" +\n+            \"i31=31, i32=32, i33=33, i34=34, i35=35, i36=36, i37=37, i38=38, i39=39, i40=40, i41=41, i42=42, i43=43, i44=44, \" +\n+            \"i45=45, i46=46, i47=47, i48=48, i49=49, i50=50, i51=51, i52=52, i53=53, i54=54, i55=55, i56=56, i57=57, i58=58, \" +\n+            \"i59=59, i60=60, i61=61, i62=62, i63=63, i64=64, i65=65, i66=66, i67=67, i68=68, i69=69, i70=70, i71=71, i72=72, \" +\n+            \"i73=73, i74=74, i75=75, i76=76, i77=77, i78=78, i79=79, i80=80, i81=81, i82=82, i83=83, i84=84, i85=85, i86=86, \" +\n+            \"i87=87, i88=88, i89=89, i90=90, i91=91, i92=92, i93=93, i94=94, i95=95, i96=96, i97=97, i98=98, i99=99, i100=100, \" +\n+            \"i101=101, i102=102, i103=103, i104=104, i105=105, i106=106, i107=107, i108=108, i109=109, i110=110, i111=111, i112=112, \" +\n+            \"i113=113, i114=114, i115=115, i116=116, i117=117, i118=118, i119=119, i120=120, i121=121, i122=122, i123=123, i124=124, \" +\n+            \"i125=125, i126=126, i127=127, i128=128, i129=129, i130=130, i131=131, i132=132, i133=133, i134=134, i135=135, i136=136, \" +\n+            \"i137=137, i138=138, i139=139, i140=140, i141=141, i142=142, i143=143, i144=144, i145=145, i146=146, i147=147, i148=148, \" +\n+            \"i149=149, i150=150, i151=151, i152=152, i153=153, i154=154, i155=155, i156=156, i157=157, i158=158, i159=159, i160=160, \" +\n+            \"i161=161, i162=162, i163=163, i164=164, i165=165, i166=166, i167=167, i168=168, i169=169, i170=170, i171=171, i172=172, \" +\n+            \"i173=173, i174=174, i175=175, i176=176, i177=177, i178=178, i179=179, i180=180, i181=181, i182=182, i183=183, i184=184, \" +\n+            \"i185=185, i186=186, i187=187, i188=188, i189=189, i190=190, i191=191, i192=192, i193=193, i194=194, i195=195, i196=196, \" +\n+            \"i197=197, i198=198, i199=199, i200=200, i201=201, i202=202, i203=203, i204=204, i205=205, i206=206, i207=207, i208=208, \" +\n+            \"i209=209, i210=210, i211=211, i212=212, i213=213, i214=214, i215=215, i216=216, i217=217, i218=218, i219=219, i220=220, \" +\n+            \"i221=221, i222=222, i223=223, i224=224, i225=225, i226=226, i227=227, i228=228, i229=229, i230=230, i231=231, i232=232, \" +\n+            \"i233=233, i234=234, i235=235, i236=236, i237=237, i238=238, i239=239, i240=240, i241=241, i242=242, i243=243, i244=244, \" +\n+            \"i245=245, i246=246, i247=247, i248=248, i249=249, i250=250, i251=251, i252=252, i253=253, i254=254]\";\n+\n+    private static final String BIG_LONG_TO_STRING_OUTPUT =\n+        \"BigLong[i1=1, i2=2, i3=3, i4=4, i5=5, i6=6, i7=7, i8=8, i9=9, i10=10, i11=11, i12=12, i13=13, i14=14, i15=15, i16=16, i17=17, \" +\n+            \"i18=18, i19=19, i20=20, i21=21, i22=22, i23=23, i24=24, i25=25, i26=26, i27=27, i28=28, i29=29, i30=30, i31=31, i32=32, i33=33, \" +\n+            \"i34=34, i35=35, i36=36, i37=37, i38=38, i39=39, i40=40, i41=41, i42=42, i43=43, i44=44, i45=45, i46=46, i47=47, i48=48, i49=49, \" +\n+            \"i50=50, i51=51, i52=52, i53=53, i54=54, i55=55, i56=56, i57=57, i58=58, i59=59, i60=60, i61=61, i62=62, i63=63, i64=64, i65=65, \" +\n+            \"i66=66, i67=67, i68=68, i69=69, i70=70, i71=71, i72=72, i73=73, i74=74, i75=75, i76=76, i77=77, i78=78, i79=79, i80=80, i81=81, \" +\n+            \"i82=82, i83=83, i84=84, i85=85, i86=86, i87=87, i88=88, i89=89, i90=90, i91=91, i92=92, i93=93, i94=94, i95=95, i96=96, i97=97, \" +\n+            \"i98=98, i99=99, i100=100, i101=101, i102=102, i103=103, i104=104, i105=105, i106=106, i107=107, i108=108, i109=109, i110=110, \" +\n+            \"i111=111, i112=112, i113=113, i114=114, i115=115, i116=116, i117=117, i118=118, i119=119, i120=120, i121=121, i122=122, i123=123, \" +\n+            \"i124=124, i125=125, i126=126, i127=127]\";\n+\n+    public void testToStringOutput() {\n+        assertTrue(bigInt.toString().equals(BIG_INT_TO_STRING_OUTPUT));\n+        assertTrue(bigLong.toString().equals(BIG_LONG_TO_STRING_OUTPUT));\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/BigRecordsToStringTest.java","additions":855,"deletions":0,"binary":false,"changes":855,"status":"added"}]}