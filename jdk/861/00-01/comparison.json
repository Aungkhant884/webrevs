{"files":[{"patch":"@@ -3985,1 +3985,1 @@\n-    Label ShiftSIMDLoop, ShiftTwoLoop, ShiftOneLoop, Exit;\n+    Label ShiftSIMDLoop, ShiftTwoLoop, ShiftThree, ShiftTwo, ShiftOne, Exit;\n@@ -4015,1 +4015,1 @@\n-    __ br(Assembler::LT, ShiftOneLoop);\n+    __ br(Assembler::LT, ShiftThree);\n@@ -4044,1 +4044,1 @@\n-    __ br(Assembler::EQ, ShiftOneLoop);\n+    __ br(Assembler::EQ, ShiftOne);\n@@ -4061,7 +4061,5 @@\n-    __ BIND(ShiftOneLoop);\n-    __ sub(idx, idx, 1);\n-    __ add(oldArrNext, oldArr, idx, Assembler::LSL, 2);\n-    __ add(newArrCur,  newArr, idx, Assembler::LSL, 2);\n-    __ add(oldArrCur,  oldArrNext, 4);\n-    __ ldrw(r10,  Address(oldArrCur));\n-    __ ldrw(r11,  Address(oldArrNext));\n+    __ BIND(ShiftThree);\n+    __ tbz(idx, 1, ShiftOne);\n+    __ tbz(idx, 0, ShiftTwo);\n+    __ ldrw(r10,  Address(oldArr, 12));\n+    __ ldrw(r11,  Address(oldArr, 8));\n@@ -4071,3 +4069,17 @@\n-    __ strw(r12,  Address(newArrCur));\n-    __ cbz(idx, Exit);\n-    __ b(ShiftOneLoop);\n+    __ strw(r12,  Address(newArr, 8));\n+\n+    __ BIND(ShiftTwo);\n+    __ ldrw(r10,  Address(oldArr, 8));\n+    __ ldrw(r11,  Address(oldArr, 4));\n+    __ lsrvw(r10, r10, shiftCount);\n+    __ lslvw(r11, r11, shiftRevCount);\n+    __ orrw(r12,  r10, r11);\n+    __ strw(r12,  Address(newArr, 4));\n+\n+    __ BIND(ShiftOne);\n+    __ ldrw(r10,  Address(oldArr, 4));\n+    __ ldrw(r11,  Address(oldArr));\n+    __ lsrvw(r10, r10, shiftCount);\n+    __ lslvw(r11, r11, shiftRevCount);\n+    __ orrw(r12,  r10, r11);\n+    __ strw(r12,  Address(newArr));\n@@ -4095,1 +4107,1 @@\n-    Label ShiftSIMDLoop, ShiftTwoLoop, ShiftOneLoop, Exit;\n+    Label ShiftSIMDLoop, ShiftTwoLoop, ShiftThree, ShiftTwo, ShiftOne, Exit;\n@@ -4123,1 +4135,1 @@\n-    __ br(Assembler::LT, ShiftOneLoop);\n+    __ br(Assembler::LT, ShiftThree);\n@@ -4147,1 +4159,1 @@\n-    __ br(Assembler::EQ, ShiftOneLoop);\n+    __ br(Assembler::EQ, ShiftOne);\n@@ -4159,1 +4171,1 @@\n-    __ BIND(ShiftOneLoop);\n+    __ BIND(ShiftThree);\n@@ -4166,3 +4178,18 @@\n-    __ sub(numIter, numIter, 1);\n-    __ cbz(numIter, Exit);\n-    __ b(ShiftOneLoop);\n+    __ tbz(numIter, 1, Exit);\n+    __ tbz(numIter, 0, ShiftOne);\n+\n+    __ BIND(ShiftTwo);\n+    __ ldrw(r10,  __ post(oldArr, 4));\n+    __ ldrw(r11,  __ post(oldArrNext, 4));\n+    __ lslvw(r10, r10, shiftCount);\n+    __ lsrvw(r11, r11, shiftRevCount);\n+    __ orrw(r12,  r10, r11);\n+    __ strw(r12,  __ post(newArr, 4));\n+\n+    __ BIND(ShiftOne);\n+    __ ldrw(r10,  Address(oldArr));\n+    __ ldrw(r11,  Address(oldArrNext));\n+    __ lslvw(r10, r10, shiftCount);\n+    __ lsrvw(r11, r11, shiftRevCount);\n+    __ orrw(r12,  r10, r11);\n+    __ strw(r12,  Address(newArr));\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":47,"deletions":20,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import org.openjdk.jmh.annotations.Param;\n@@ -48,1 +49,1 @@\n-    private BigInteger[] hugeArray, largeArray, smallArray, shiftArray;\n+    private BigInteger[] hugeArray, largeArray, smallArray, shiftArray, smallShiftArray;\n@@ -53,0 +54,3 @@\n+    @Param({\"32\", \"64\", \"96\", \"128\", \"160\", \"192\", \"224\", \"256\"})\n+    private int maxNumbits;\n+\n@@ -75,0 +79,3 @@\n+        smallShiftArray = new BigInteger[TESTSIZE]; \/*\n+        * Small numbers, bits count in range [maxNumbits - 31, maxNumbits]\n+        *\/\n@@ -87,0 +94,1 @@\n+            smallShiftArray[i] = new BigInteger(Math.max(maxNumbits - value % 32, 0), r);\n@@ -180,0 +188,26 @@\n+\n+    \/** Invokes the shiftLeft method of small BigInteger with different values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testSmallLeftShift(Blackhole bh) {\n+        Random rand = new Random();\n+        int shift = rand.nextInt(30) + 1;\n+        BigInteger tmp = null;\n+        for (BigInteger s : smallShiftArray) {\n+            tmp = s.shiftLeft(shift);\n+            bh.consume(tmp);\n+        }\n+    }\n+\n+    \/** Invokes the shiftRight method of small BigInteger with different values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testSmallRightShift(Blackhole bh) {\n+        Random rand = new Random();\n+        int shift = rand.nextInt(30) + 1;\n+        BigInteger tmp = null;\n+        for (BigInteger s : smallShiftArray) {\n+            tmp = s.shiftRight(shift);\n+            bh.consume(tmp);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegers.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"}]}