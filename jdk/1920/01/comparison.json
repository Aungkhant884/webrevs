{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Iterator;\n+import java.util.Properties;\n@@ -31,0 +35,1 @@\n+import sun.jvm.hotspot.debugger.DebuggerException;\n@@ -62,25 +67,48 @@\n-         StringBuilder path = new StringBuilder(System.getProperty(\"java.home\"));\n-         String sep = System.getProperty(\"file.separator\");\n-         String os = System.getProperty(\"os.name\");\n-         String libname = \"hsdis\";\n-         String arch = System.getProperty(\"os.arch\");\n-         if (os.lastIndexOf(\"Windows\", 0) != -1) {\n-            if (arch.equals(\"x86\")) {\n-               libname +=  \"-i386\";\n-            } else if (arch.equals(\"amd64\")) {\n-               libname +=  \"-amd64\";\n-            } else {\n-               libname +=  \"-\" + arch;\n-            }\n-            path.append(sep + \"bin\" + sep);\n-            libname += \".dll\";\n-         } else if (os.lastIndexOf(\"Linux\", 0) != -1) {\n-            if (arch.equals(\"x86\") || arch.equals(\"i386\")) {\n-               path.append(sep + \"lib\" + sep + \"i386\" + sep);\n-               libname += \"-i386.so\";\n-            } else if (arch.equals(\"amd64\") || arch.equals(\"x86_64\")) {\n-               path.append(sep + \"lib\" + sep + \"amd64\" + sep);\n-               libname +=  \"-amd64.so\";\n-            } else {\n-               path.append(sep + \"lib\" + sep + arch + sep);\n-               libname +=  \"-\" + arch + \".so\";\n+         \/\/ Search for hsdis library in the following 4 locations:\n+         \/\/   1. <home>\/lib\/<vm>\/libhsdis-<arch>.so\n+         \/\/   2. <home>\/lib\/<vm>\/hsdis-<arch>.so\n+         \/\/   3. <home>\/lib\/hsdis-<arch>.so\n+         \/\/   4. hsdis-<arch>.so  (using LD_LIBRARY_PATH)\n+         Properties targetSysProps = VM.getVM().getSystemProperties();\n+         String os = targetSysProps.getProperty(\"os.name\");\n+         String ext = \".so\";\n+         if (os.contains(\"Windows\")) {\n+            ext = \".dll\";\n+         } else if (os.contains(\"Mac OS\")) {\n+            ext = \".dylib\";\n+         }\n+\n+         \/\/ Find the full path to libjvm.so (jvm.dll and libjvm.dylib on Windows and OSX).\n+         String jvmPattern = \"^(lib)?jvm\\\\\" + ext + \"$\";\n+         Path jvmPath = VM.getVM()\n+                          .getDebugger()\n+                          .getCDebugger()\n+                          .getLoadObjectList()\n+                          .stream()\n+                          .map(o -> Path.of(o.getName()))\n+                          .filter(p -> p.getFileName().toString().matches(jvmPattern))\n+                          .findAny()\n+                          .get();\n+\n+         String arch = targetSysProps.getProperty(\"os.arch\");\n+         String libname = \"hsdis-\" + arch + ext;\n+\n+         List<String> libs = List.of(\n+            \/\/ 1. <home>\/lib\/<vm>\/libhsdis-<arch>.so\n+            jvmPath.resolveSibling(\"lib\" + libname).toString(),\n+            \/\/ 2. <home>\/lib\/<vm>\/hsdis-<arch>.so\n+            jvmPath.resolveSibling(libname).toString(),\n+            \/\/ 3. <home>\/lib\/hsdis-<arch>.so\n+            jvmPath.getParent().resolveSibling(libname).toString(),\n+            \/\/ 4. hsdis-<arch>.so  (using LD_LIBRARY_PATH)\n+            libname\n+         );\n+\n+         var itr = libs.iterator();\n+         while (itr.hasNext() && (decode_function == 0L)) {\n+            try {\n+               decode_function = load_library(itr.next());\n+            } catch (DebuggerException e) {\n+               if (!itr.hasNext()) {\n+                  throw e;\n+               }\n@@ -88,6 +116,0 @@\n-         } else if (os.lastIndexOf(\"Mac OS X\", 0) != -1) {\n-            path.append(sep + \"lib\" + sep);\n-            libname += \"-amd64\" + \".dylib\";       \/\/ x86_64 => amd64\n-         } else {\n-            path.append(sep + \"lib\" + sep + \"arch\" + sep);\n-            libname +=  \"-\" + arch + \".so\";\n@@ -95,1 +117,0 @@\n-         decode_function = load_library(path.toString(), libname);\n@@ -99,1 +120,1 @@\n-   private static native long load_library(String installed_jrepath, String hsdis_library_name);\n+   private static native long load_library(String hsdis_library_name);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/asm\/Disassembler.java","additions":55,"deletions":34,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n- * Signature: (Ljava\/lang\/String;)L\n+ * Signature: (Ljava\/lang\/String;)J\n@@ -117,1 +117,0 @@\n-                                                                           jstring jrepath_s,\n@@ -121,1 +120,0 @@\n-  const char *jrepath = NULL;\n@@ -123,1 +121,0 @@\n-  char buffer[JVM_MAXPATHLEN];\n@@ -126,0 +123,1 @@\n+  char buffer[JVM_MAXPATHLEN];\n@@ -131,5 +129,0 @@\n-  jrepath = (*env)->GetStringUTFChars(env, jrepath_s, NULL); \/\/ like $JAVA_HOME\/jre\/lib\/sparc\/\n-  if (jrepath == NULL || (*env)->ExceptionOccurred(env)) {\n-    return 0;\n-  }\n-\n@@ -138,1 +131,0 @@\n-    (*env)->ReleaseStringUTFChars(env, jrepath_s, jrepath);\n@@ -145,4 +137,0 @@\n-  if (hsdis_handle == NULL) {\n-    snprintf(buffer, sizeof(buffer), \"%s%s\", jrepath, libname);\n-    hsdis_handle = LoadLibrary(buffer);\n-  }\n@@ -158,4 +146,0 @@\n-  if (hsdis_handle == NULL) {\n-    snprintf(buffer, sizeof(buffer), \"%s%s\", jrepath, libname);\n-    hsdis_handle = dlopen(buffer, RTLD_LAZY | RTLD_GLOBAL);\n-  }\n@@ -171,1 +155,0 @@\n-  (*env)->ReleaseStringUTFChars(env, jrepath_s, jrepath);\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/sadis.c","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"}]}