{"files":[{"patch":"@@ -43,1 +43,1 @@\n-    static Predicate<EventType> createCategoryFilter(String filterText) throws UserSyntaxException {\n+    static Predicate<EventType> createCategoryFilter(String filterText, List<EventType> types) throws UserSyntaxException {\n@@ -58,0 +58,3 @@\n+        if (unknownEventType(f, types)) {\n+            System.out.println(\"Warning, no event type matched category filter: \" + filterText);\n+        }\n@@ -61,1 +64,1 @@\n-    static Predicate<EventType> createEventTypeFilter(String filterText) throws UserSyntaxException {\n+    static Predicate<EventType> createEventTypeFilter(String filterText, List<EventType> types) throws UserSyntaxException {\n@@ -76,0 +79,3 @@\n+        if (unknownEventType(f, types)) {\n+            System.out.println(\"Warning, no event type matched filter: \" + filterText);\n+        }\n@@ -79,0 +85,4 @@\n+    private static boolean unknownEventType(Predicate<EventType> f, List<EventType> types) {\n+        return !types.stream().anyMatch(f);\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Filters.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.jfr.EventType;\n@@ -138,0 +139,12 @@\n+        try (RecordingFile rf = new RecordingFile(input)) {\n+            List<EventType> types = rf.readEventTypes();\n+            Predicate<RecordedEvent> filter = createFilter(options, types);\n+            rf.write(output, filter);\n+        } catch (IOException ioe) {\n+            couldNotReadError(input, ioe);\n+        }\n+        println(\"Scrubbed recording file written to:\");\n+        println(output.toAbsolutePath().toString());\n+    }\n+\n+    private Predicate<RecordedEvent> createFilter(Deque<String> options, List<EventType> types) throws UserSyntaxException, UserDataException {\n@@ -144,1 +157,1 @@\n-                var f = Filters.createEventTypeFilter(filter);\n+                var f = Filters.createEventTypeFilter(filter, types);\n@@ -150,1 +163,1 @@\n-                var f = Filters.createEventTypeFilter(filter);\n+                var f = Filters.createEventTypeFilter(filter, types);\n@@ -156,1 +169,1 @@\n-                var f = Filters.createCategoryFilter(filter);\n+                var f = Filters.createCategoryFilter(filter, types);\n@@ -162,1 +175,1 @@\n-                var f = Filters.createCategoryFilter(filter);\n+                var f = Filters.createCategoryFilter(filter, types);\n@@ -186,8 +199,1 @@\n-\n-        try (RecordingFile rf = new RecordingFile(input)) {\n-            rf.write(output, Filters.matchAny(filters));\n-        } catch (IOException ioe) {\n-            couldNotReadError(input, ioe);\n-        }\n-        println(\"Scrubbed recording file written to:\");\n-        println(output.toAbsolutePath().toString());\n+        return Filters.matchAny(filters);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Scrub.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n@@ -35,1 +32,0 @@\n-import jdk.test.lib.Utils;\n@@ -94,0 +90,2 @@\n+\n+        testMissingEventType(file);\n@@ -253,0 +251,27 @@\n+    private static void testMissingEventType(Path input) throws Throwable {\n+        Path output = Path.of(\"scrubbed.jfr\");\n+        String[] args = {\n+            \"scrub\",\n+            \"--exclude-events\", \"Foo\",\n+            \"--include-events\", \"example.Zebra\",\n+            \"--include-events\", \"jdk.Bar\",\n+            \"--include-events\", \"example.Tigerfish\",\n+            \"--exclude-categories\", \"Mammal\",\n+            \"--exclude-categories\", \"jdk.Baz\",\n+            \"--include-categories\", \"Fish\",\n+            \"--include-categories\", \"jdk.Qux,jdk.Quuz\",\n+            input.toAbsolutePath().toString(),\n+            output.toAbsolutePath().toString()\n+        };\n+        var outp = ExecuteHelper.jfr(args);\n+        outp.shouldContain(\"Warning, no event type matched filter: Foo\");\n+        outp.shouldContain(\"Warning, no event type matched filter: jdk.Bar\");\n+        outp.shouldContain(\"Warning, no event type matched category filter: jdk.Baz\");\n+        outp.shouldContain(\"Warning, no event type matched category filter: jdk.Qux,jdk.Quuz\");\n+        outp.shouldNotContain(\"Warning, no event type matched filter: example.Zebra\");\n+        outp.shouldNotContain(\"Warning, no event type matched filter: example.Tigerfish\");\n+        outp.shouldNotContain(\"Warning, no event type matched category filter: Mammal\");\n+        outp.shouldNotContain(\"Warning, no event type matched category filter: Fish\");\n+        Files.delete(output);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestScrub.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"}]}