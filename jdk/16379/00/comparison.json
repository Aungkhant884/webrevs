{"files":[{"patch":"@@ -454,1 +454,0 @@\n-                codeBuilder.checkcast(TYPE_EVENT_CONFIGURATION);\n@@ -715,0 +714,1 @@\n+            codeBuilder.checkcast(TYPE_EVENT_CONFIGURATION);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jvm;\n+\n+import jdk.jfr.Recording;\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/**\n+ * @test\n+ * @bug 8316271\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xverify:all jdk.jfr.jvm.TestVerifyInstrumentation\n+ *\/\n+public class TestVerifyInstrumentation {\n+    private final static String EVENT_NAME = EventNames.ThreadSleep;\n+\n+    public static void main(String[] args) {\n+        \/\/ This thread sleep wil load the jdk.internal.event.ThreadSleepEvent\n+        \/\/ before JFR has started recording. This will set the type of the static\n+        \/\/ field EventConfiguration to become untyped, i.e. java.lang.Object.\n+        \/\/ Before issuing an invokevirtual instructions for this receiver, we must perform\n+        \/\/ the proper type conversion, i.e. a downcast to type EventConfiguration using\n+        \/\/ a conditional checkcast. -Xverify:all asserts this is ok.\n+        \/\/\n+        \/\/ If not ok, the following exception is thrown as part of retransformation:\n+        \/\/\n+        \/\/ java.lang.RuntimeException: JfrJvmtiAgent::retransformClasses failed: JVMTI_ERROR_FAILS_VERIFICATION.\n+        \/\/\n+        try {\n+            Thread.sleep(1);\n+        } catch (InterruptedException ie) {}\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EVENT_NAME).withoutThreshold().withStackTrace();\n+            recording.start();\n+            recording.stop();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestVerifyInstrumentation.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}