{"files":[{"patch":"@@ -678,6 +678,7 @@\n-    if (is_boxing_late_inline() && callprojs.resproj != nullptr) {\n-        \/\/ replace box node to scalar node only in case it is directly referenced by debug info\n-        assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n-        if (!has_non_debug_usages(callprojs.resproj) && is_box_cache_valid(call)) {\n-          scalarize_debug_usages(call, callprojs.resproj);\n-        }\n+    \/\/ Disabled due to JDK-8276112\n+    if (false && is_boxing_late_inline() && callprojs.resproj != nullptr) {\n+      \/\/ replace box node to scalar node only in case it is directly referenced by debug info\n+      assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n+      if (!has_non_debug_usages(callprojs.resproj) && is_box_cache_valid(call)) {\n+        scalarize_debug_usages(call, callprojs.resproj);\n+      }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -189,1 +189,0 @@\n-  void copy_call_debug_info(CallNode *oldcall, CallNode * newcall);\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Verify that box object identity matches after deoptimization When it is eliminated.\n+ * @summary Verify that box object identity matches after deoptimization when it is eliminated.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbatch compiler.c2.TestIdentityWithEliminateBoxInDebugInfo\n+ * @run main\/othervm -Xbatch compiler.eliminateAutobox.TestIdentityWithEliminateBoxInDebugInfo\n@@ -33,1 +33,2 @@\n-package compiler.c2;\n+\n+package compiler.eliminateAutobox;\n@@ -43,6 +44,6 @@\n-      \/\/ warmup\n-      for(int i = 0; i < 100000; i++) {\n-        f.apply(true);\n-      }\n-      \/\/ deoptimize\n-      f.apply(false);\n+        \/\/ warmup\n+        for (int i = 0; i < 100000; i++) {\n+            f.apply(true);\n+        }\n+        \/\/ deoptimize\n+        f.apply(false);\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8276112\n+ * @summary Verify consistency of safepoint debug info when boxes are scalar\n+ *          replaced during incremental inlining.\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   -XX:CompileCommand=inline,java.lang.Integer.valueOf::valueOf\n+ *                   -XX:CompileCommand=compileonly,compiler.eliminateAutobox.TestSafepointDebugInfo::test*\n+ *                   compiler.eliminateAutobox.TestSafepointDebugInfo\n+ *\/\n+\n+package compiler.eliminateAutobox;\n+\n+import java.util.Random;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+public class TestSafepointDebugInfo {\n+\n+    private static final Random random = Utils.getRandomInstance();\n+\n+    static Integer fBox;\n+\n+    public static Integer helper(int i) {\n+        return Integer.valueOf(i);\n+    }\n+\n+    \/\/ assert(local) failed: use _top instead of null\n+    public static int test1(int i) {\n+        Integer box = helper(i);\n+        fBox = Integer.valueOf(i);\n+        return box.intValue();\n+    }\n+\n+    \/\/ Wrong execution, same types\n+    public static int test2(int i1, int i2) {\n+        Integer box1 = helper(i1);\n+        Integer box2 = Integer.valueOf(i2);\n+        fBox = Integer.valueOf(i1);\n+        return box1.intValue() + box2.intValue();\n+    }\n+\n+    \/\/ Wrong execution, different types\n+    public static long test3(int i1, long i2) {\n+        Integer box1 = helper(i1);\n+        Long box2 = Long.valueOf(i2);\n+        fBox = Integer.valueOf(i1);\n+        return box1.intValue() + box2.longValue();\n+    }\n+\n+    \/\/ assert(i < _max) failed: oob: i=16, _max=16\n+    public static int test4(int i1, int i2) {\n+        Integer box1 = helper(i1);\n+        Integer box2 = helper(i2);\n+        fBox = Integer.valueOf(i1);\n+        return box1.intValue() + box2.intValue();\n+    }\n+\n+    public static Integer test5_helper(int i1, int i2) {\n+        Integer box1 = helper(i1);\n+        Integer box2 = helper(i2);\n+        fBox = Integer.valueOf(i1);\n+        return box1.intValue() + box2.intValue();\n+    }\n+\n+    \/\/ assert(local) failed: use _top instead of null\n+    \/\/ Variant with deeper inlining\n+    public static int test5(int i1, int i2) {\n+        return test5_helper(i1, i2);\n+    }\n+\n+    public static int test6_helper(int i1, int i2) {\n+        Integer box = helper(i1);\n+        fBox = Integer.valueOf(i2);\n+        return box.intValue();\n+    }\n+\n+    \/\/ Wrong execution, variant with more arguments\n+    public static int test6(int i1, int i2, int i3, int i4) {\n+        Integer box1 = helper(i1);\n+        Integer box2 = helper(i2);\n+        int res = test6_helper(i3, i4);\n+        res += box1.intValue() + box2.intValue();\n+        return res;\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Warmup\n+        for (int i = 0; i < 100_000; ++i) {\n+            int val = (i % 10);\n+            Asserts.assertEquals(test1(val), val);\n+            Asserts.assertEquals(fBox, val);\n+            Asserts.assertEquals(test2(val, val), 2*val);\n+            Asserts.assertEquals(fBox, val);\n+            Asserts.assertEquals(test3(val, val), 2L*val);\n+            Asserts.assertEquals(fBox, val);\n+            Asserts.assertEquals(test4(val, val), 2*val);\n+            Asserts.assertEquals(fBox, val);\n+            Asserts.assertEquals(test5(val, val), 2*val);\n+            Asserts.assertEquals(fBox, val);\n+            Asserts.assertEquals(test6(val, val, val, val), 3*val);\n+            Asserts.assertEquals(fBox, val);\n+        }\n+\n+        \/\/ Trigger deoptimization by choosing a value that does not\n+        \/\/ fit in the Integer cache and check the result.\n+        int val = 4000;\n+        Asserts.assertEquals(test1(val), val);\n+        switch (random.nextInt(3)) {\n+            case 0:\n+                Asserts.assertEquals(test2(val, 1), val + 1);\n+                Asserts.assertEquals(fBox, val);\n+                Asserts.assertEquals(test3(val, 1), (long)val + 1);\n+                Asserts.assertEquals(fBox, val);\n+                Asserts.assertEquals(test4(val, 1), val + 1);\n+                Asserts.assertEquals(fBox, val);\n+                Asserts.assertEquals(test5(val, 1), val + 1);\n+                Asserts.assertEquals(fBox, val);\n+                Asserts.assertEquals(test6(val, 1, 2, 3), val + 3);\n+                Asserts.assertEquals(fBox, 3);\n+                break;\n+           case 1:\n+                Asserts.assertEquals(test2(1, val), val + 1);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test3(1, val), (long)val + 1);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test4(1, val), val + 1);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test5(1, val), val + 1);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test6(1, val, 2, 3), val + 3);\n+                Asserts.assertEquals(fBox, 3);\n+                break;\n+           case 2:\n+                Asserts.assertEquals(test2(1, 2), 3);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test3(1, 2), 3L);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test4(1, 2), 3);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test5(1, 2), 3);\n+                Asserts.assertEquals(fBox, 1);\n+                Asserts.assertEquals(test6(1, 2, 3, val), 6);\n+                Asserts.assertEquals(fBox, val);\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestSafepointDebugInfo.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}