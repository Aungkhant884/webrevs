{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-    if (data[0] == 0xF7) {\n+    if (data[0] == 0xF7 && size > 1) {\n","filename":"src\/java.desktop\/share\/native\/libjsound\/MidiOutDevice.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.sound.midi.MidiDevice;\n+import javax.sound.midi.MidiMessage;\n+import javax.sound.midi.MidiSystem;\n+import javax.sound.midi.MidiUnavailableException;\n+import javax.sound.midi.Receiver;\n+import javax.sound.midi.ShortMessage;\n+import javax.sound.midi.SysexMessage;\n+\n+import static javax.sound.midi.SysexMessage.SPECIAL_SYSTEM_EXCLUSIVE;\n+import static javax.sound.midi.SysexMessage.SYSTEM_EXCLUSIVE;\n+\n+\/**\n+ * @test\n+ * @bug 8237495\n+ * @summary fail with a dereferenced memory error when asked to send a raw 0xF7\n+ *\/\n+public final class SendRawSysexMessage {\n+\n+    private static final class RawMidiMessage extends MidiMessage {\n+        @Override\n+        public RawMidiMessage clone() {\n+            return new RawMidiMessage(getMessage());\n+        }\n+        @Override\n+        public int getStatus() {\n+            return SYSTEM_EXCLUSIVE; \/\/ not that this really matters\n+        }\n+\n+        RawMidiMessage(byte[] data) {\n+            super(data.clone());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        MidiDevice.Info[] infos = MidiSystem.getMidiDeviceInfo();\n+        System.err.println(\"List of devices to test:\");\n+        for (int i = 0; i < infos.length; i++) {\n+            System.err.printf(\"\\t%d.\\t%s%n\", i, infos[i]);\n+        }\n+        for (int i = 0; i < infos.length; i++) {\n+            System.err.printf(\"%d.\\t%s%n\", i, infos[i]);\n+            try {\n+                test(infos[i]);\n+            } catch (MidiUnavailableException ignored){\n+                \/\/ try next\n+            }\n+        }\n+    }\n+\n+    private static void test(MidiDevice.Info info) throws Exception {\n+        try (MidiDevice device = MidiSystem.getMidiDevice(info)) {\n+            System.err.println(\"Sending to \" + device + \" (\" + info + \")\");\n+            if (!device.isOpen())\n+                device.open();\n+            try (Receiver r = device.getReceiver()) {\n+                System.err.println(\"note on\");\n+                r.send(new ShortMessage(ShortMessage.NOTE_ON, 5, 5), -1);\n+                System.err.println(\"sysex\");\n+                r.send(new SysexMessage(new byte[]{\n+                        (byte) SYSTEM_EXCLUSIVE, 0x0, 0x03, 0x04,\n+                        (byte) SPECIAL_SYSTEM_EXCLUSIVE}, 5), -1);\n+                System.err.println(\"raw 1\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) 0x02, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"raw 2\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) 0x09, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"raw 3\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) SYSTEM_EXCLUSIVE, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"raw 4\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) 0x02, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"raw 5\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) 0x02, 0x02, 0x03,\n+                        (byte) SPECIAL_SYSTEM_EXCLUSIVE}), -1);\n+                System.err.println(\"raw 6\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) SYSTEM_EXCLUSIVE, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"sleep\");\n+                Thread.sleep(1000);\n+                System.err.println(\"raw 7\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) 0x02, 0x02, 0x03, 0x04}), -1);\n+                System.err.println(\"sleep\");\n+                Thread.sleep(1000);\n+                System.err.println(\"raw 8\");\n+                r.send(new RawMidiMessage(new byte[]{\n+                        (byte) SPECIAL_SYSTEM_EXCLUSIVE}), -1);\n+                System.err.println(\"note off\");\n+                r.send(new ShortMessage(ShortMessage.NOTE_OFF, 5, 5), -1);\n+                System.err.println(\"done, should quit\");\n+                System.err.println();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/midi\/SysexMessage\/SendRawSysexMessage.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}