{"files":[{"patch":"@@ -28,6 +28,0 @@\n-import sun.awt.AppContext;\n-import sun.awt.SunToolkit;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.WeakHashMap;\n@@ -35,0 +29,1 @@\n+import java.awt.BasicStroke;\n@@ -37,0 +32,3 @@\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Stroke;\n@@ -38,0 +36,5 @@\n+import java.awt.geom.AffineTransform;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n@@ -39,0 +42,1 @@\n+import javax.swing.JInternalFrame;\n@@ -41,0 +45,6 @@\n+import sun.awt.AppContext;\n+import sun.awt.SunToolkit;\n+\n+\n+import static sun.java2d.pipe.Region.clipRound;\n+\n@@ -138,0 +148,65 @@\n+\n+    @FunctionalInterface\n+    public interface UnscaledBorderPainter {\n+        void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                 int w, int h, double scaleFactor, int strokeWidth);\n+    }\n+\n+    public static void paintBorder(Component c, Graphics g, int x, int y,\n+                            int w, int h, UnscaledBorderPainter painter) {\n+\n+        \/\/ Step 1: Reset Transform\n+        AffineTransform at = null;\n+        Stroke oldStk = null;\n+        boolean resetTransform = false;\n+        int strokeWidth = 1;\n+        double scaleFactor = 1;\n+\n+        int xtranslation = x;\n+        int ytranslation = y;\n+        int width = w;\n+        int height = h;\n+\n+        if (g instanceof Graphics2D) {\n+            Graphics2D g2d = (Graphics2D) g;\n+            at = g2d.getTransform();\n+            oldStk = g2d.getStroke();\n+            scaleFactor = Math.min(at.getScaleX(), at.getScaleY());\n+\n+            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n+            \/\/ or if scale=1, skip resetting the transform\n+            resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0)) &&\n+                    ((at.getScaleX() > 1) || (at.getScaleY() > 1));\n+\n+            if (resetTransform) {\n+                \/* Deactivate the HiDPI scaling transform,\n+                 * so we can do paint operations in the device\n+                 * pixel coordinate system instead of the logical coordinate system.\n+                 *\/\n+                g2d.setTransform(new AffineTransform());\n+                strokeWidth = (c instanceof JInternalFrame) ?\n+                        clipRound(scaleFactor) : (int) Math.floor(scaleFactor);\n+                g2d.setStroke(new BasicStroke((float) strokeWidth));\n+\n+                double xx = at.getScaleX() * x + at.getTranslateX();\n+                double yy = at.getScaleY() * y + at.getTranslateY();\n+                xtranslation = clipRound(xx);\n+                ytranslation = clipRound(yy);\n+                width = clipRound(at.getScaleX() * w + xx) - xtranslation;\n+                height = clipRound(at.getScaleY() * h + yy) - ytranslation;\n+            }\n+        }\n+\n+        g.translate(xtranslation, ytranslation);\n+\n+        \/\/ Step 2: Call respective paintBorder with transformed values\n+        painter.paintUnscaledBorder(c, g, x, y, width, height, scaleFactor, strokeWidth);\n+\n+        \/\/ Step 3: Restore Transform\n+        g.translate(-xtranslation, -ytranslation);\n+        if (resetTransform) {\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.setTransform(at);\n+            g2d.setStroke(oldStk);\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/SwingUtilities3.java","additions":81,"deletions":6,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import java.awt.BasicStroke;\n+import com.sun.java.swing.SwingUtilities3;\n+\n@@ -29,1 +30,0 @@\n-import java.awt.Graphics2D;\n@@ -33,2 +33,0 @@\n-import java.awt.Stroke;\n-import java.awt.geom.AffineTransform;\n@@ -153,37 +151,5 @@\n-        \/\/ We remove any initial transforms to prevent rounding errors\n-        \/\/ when drawing in non-integer scales\n-        AffineTransform at = null;\n-        Stroke oldStk = null;\n-        int stkWidth = 1;\n-        boolean resetTransform = false;\n-        if (g instanceof Graphics2D) {\n-            Graphics2D g2d = (Graphics2D) g;\n-            at = g2d.getTransform();\n-            oldStk = g2d.getStroke();\n-            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-            \/\/ skip resetting the transform\n-            resetTransform = (at.getShearX() == 0) && (at.getShearY() == 0);\n-            if (resetTransform) {\n-                g2d.setTransform(new AffineTransform());\n-                stkWidth = (int) Math.floor(Math.min(at.getScaleX(), at.getScaleY()));\n-                g2d.setStroke(new BasicStroke((float) stkWidth));\n-            }\n-        }\n-\n-        int w;\n-        int h;\n-        int xtranslation;\n-        int ytranslation;\n-        if (resetTransform) {\n-            w = (int) Math.floor(at.getScaleX() * width - 1);\n-            h = (int) Math.floor(at.getScaleY() * height - 1);\n-            xtranslation = (int) Math.ceil(at.getScaleX()*x+at.getTranslateX());\n-            ytranslation = (int) Math.ceil(at.getScaleY()*y+at.getTranslateY());\n-        } else {\n-            w = width;\n-            h = height;\n-            xtranslation = x;\n-            ytranslation = y;\n-        }\n-\n-        g.translate(xtranslation, ytranslation);\n+        SwingUtilities3.paintBorder(c, g, x, y, width, height, this::paintUnscaledBorder);\n+    }\n+\n+    private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                    int width, int height, double scaleFactor, int stkWidth) {\n@@ -193,1 +159,1 @@\n-                          w, h, stkWidth);\n+                          width, height, stkWidth);\n@@ -196,10 +162,1 @@\n-                             w, h, stkWidth);\n-\n-        g.translate(-xtranslation, -ytranslation);\n-\n-        \/\/ Set the transform we removed earlier\n-        if (resetTransform) {\n-            Graphics2D g2d = (Graphics2D) g;\n-            g2d.setTransform(at);\n-            g2d.setStroke(oldStk);\n-        }\n+                             width, height, stkWidth);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":9,"deletions":52,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import com.sun.java.swing.SwingUtilities3;\n+\n@@ -37,3 +39,0 @@\n-import java.awt.geom.AffineTransform;\n-\n-import static sun.java2d.pipe.Region.clipRound;\n@@ -147,0 +146,5 @@\n+        SwingUtilities3.paintBorder(c, g, x, y, width, height, this::paintUnscaledBorder);\n+    }\n+\n+    private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                     int width, int height, double scaleFactor, int strokeWidth) {\n@@ -149,40 +153,3 @@\n-\n-            AffineTransform at = g2d.getTransform();\n-\n-            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-            \/\/ or if no Scaling enabled,\n-            \/\/ skip resetting the transform\n-            boolean resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0)) &&\n-                    ((at.getScaleX() > 1) || (at.getScaleY() > 1));\n-\n-            int xtranslation;\n-            int ytranslation;\n-            int w;\n-            int h;\n-            int offs;\n-\n-            if (resetTransform) {\n-                \/* Deactivate the HiDPI scaling transform,\n-                 * so we can do paint operations in the device\n-                 * pixel coordinate system instead of the logical coordinate system.\n-                 *\/\n-                g2d.setTransform(new AffineTransform());\n-                double xx = at.getScaleX() * x + at.getTranslateX();\n-                double yy = at.getScaleY() * y + at.getTranslateY();\n-                xtranslation = clipRound(xx);\n-                ytranslation = clipRound(yy);\n-                w = clipRound(at.getScaleX() * width + xx) - xtranslation;\n-                h = clipRound(at.getScaleY() * height + yy) - ytranslation;\n-                offs = this.thickness * (int) at.getScaleX();\n-            } else {\n-                w = width;\n-                h = height;\n-                xtranslation = x;\n-                ytranslation = y;\n-                offs = this.thickness;\n-            }\n-\n-            g2d.translate(xtranslation, ytranslation);\n-\n-            Color oldColor = g2d.getColor();\n-            g2d.setColor(this.lineColor);\n+            int offs = this.thickness * (int) scaleFactor;\n+            Color oldColor = g.getColor();\n+            g.setColor(this.lineColor);\n@@ -192,1 +159,0 @@\n-\n@@ -196,2 +162,2 @@\n-                outer = new RoundRectangle2D.Float(0, 0, w, h, offs, offs);\n-                inner = new RoundRectangle2D.Float(offs, offs, w - size, h - size, arc, arc);\n+                outer = new RoundRectangle2D.Float(0, 0, width, height, offs, offs);\n+                inner = new RoundRectangle2D.Float(offs, offs, width - size, height - size, arc, arc);\n@@ -200,2 +166,2 @@\n-                outer = new Rectangle2D.Float(0, 0, w, h);\n-                inner = new Rectangle2D.Float(offs, offs, w - size, h - size);\n+                outer = new Rectangle2D.Float(0, 0, width, height);\n+                inner = new Rectangle2D.Float(offs, offs, width - size, height - size);\n@@ -203,0 +169,1 @@\n+\n@@ -207,7 +174,1 @@\n-            g2d.setColor(oldColor);\n-\n-            g2d.translate(-xtranslation, -ytranslation);\n-\n-            if (resetTransform) {\n-                g2d.setTransform(at);\n-            }\n+            g.setColor(oldColor);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/LineBorder.java","additions":16,"deletions":55,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.BasicStroke;\n@@ -34,1 +33,0 @@\n-import java.awt.Graphics2D;\n@@ -36,1 +34,0 @@\n-import java.awt.Stroke;\n@@ -38,1 +35,0 @@\n-import java.awt.geom.AffineTransform;\n@@ -65,0 +61,1 @@\n+import com.sun.java.swing.SwingUtilities3;\n@@ -68,1 +65,0 @@\n-import static sun.java2d.pipe.Region.clipRound;\n@@ -253,0 +249,5 @@\n+            SwingUtilities3.paintBorder(c, g, x, y, w, h, this::paintUnscaledBorder);\n+        }\n+\n+        private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                         int width, int height, double scaleFactor, int strokeWidth) {\n@@ -267,42 +268,0 @@\n-            AffineTransform at = null;\n-            Stroke oldStk = null;\n-            boolean resetTransform = false;\n-            int stkWidth = 1;\n-            double scaleFactor = 1;\n-\n-            if (g instanceof Graphics2D g2d) {\n-                at = g2d.getTransform();\n-                scaleFactor = at.getScaleX();\n-                oldStk = g2d.getStroke();\n-\n-                \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-                \/\/ skip resetting the transform\n-                resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n-\n-                if (resetTransform) {\n-                    g2d.setTransform(new AffineTransform());\n-                    stkWidth = clipRound(Math.min(at.getScaleX(), at.getScaleY()));\n-                    g2d.setStroke(new BasicStroke((float) stkWidth));\n-                }\n-            }\n-\n-            int xtranslation;\n-            int ytranslation;\n-            int width;\n-            int height;\n-\n-            if (resetTransform) {\n-                double xx = at.getScaleX() * x + at.getTranslateX();\n-                double yy = at.getScaleY() * y + at.getTranslateY();\n-                xtranslation = clipRound(xx);\n-                ytranslation = clipRound(yy);\n-                width = clipRound(at.getScaleX() * w + xx) - xtranslation;\n-                height = clipRound(at.getScaleY() * h + yy) - ytranslation;\n-            } else {\n-                xtranslation = x;\n-                ytranslation = y;\n-                width = w;\n-                height = h;\n-            }\n-            g.translate(xtranslation, ytranslation);\n-\n@@ -322,3 +281,3 @@\n-                int offset = (((scaleFactor - stkWidth) >= 0) && ((stkWidth % 2) != 0)) ? 1 : 0;\n-                int loc1 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 - stkWidth : midPoint;\n-                int loc2 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 : midPoint + stkWidth;\n+                int offset = (((scaleFactor - strokeWidth) >= 0) && ((strokeWidth % 2) != 0)) ? 1 : 0;\n+                int loc1 = thickness % 2 == 0 ? midPoint + strokeWidth \/ 2 - strokeWidth : midPoint;\n+                int loc2 = thickness % 2 == 0 ? midPoint + strokeWidth \/ 2 : midPoint + strokeWidth;\n@@ -346,8 +305,0 @@\n-\n-            \/\/ restore previous transform\n-            g.translate(-xtranslation, -ytranslation);\n-            if (resetTransform) {\n-                Graphics2D g2d = (Graphics2D) g;\n-                g2d.setTransform(at);\n-                g2d.setStroke(oldStk);\n-            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":9,"deletions":58,"binary":false,"changes":67,"status":"modified"}]}