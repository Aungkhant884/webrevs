{"files":[{"patch":"@@ -31,0 +31,5 @@\n+import java.awt.BasicStroke;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Stroke;\n+import java.awt.geom.AffineTransform;\n@@ -39,0 +44,1 @@\n+import javax.swing.JInternalFrame;\n@@ -41,0 +47,2 @@\n+import static sun.java2d.pipe.Region.clipRound;\n+\n@@ -138,0 +146,68 @@\n+\n+    @FunctionalInterface\n+    public interface PaintInterface {\n+        void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                 int w, int h, double scale, int strokeWidth);\n+    }\n+\n+    public static void paintBorder(Component c, Graphics g, int x, int y,\n+                            int w, int h, PaintInterface paintFunction) {\n+\n+        \/\/STEP 1: RESET TRANSFORM\n+        \/\/save old values\n+        AffineTransform at = null;\n+        Stroke oldStk = null;\n+        boolean resetTransform = false;\n+        int stkWidth = 1;\n+        double scaleFactor = 1;\n+\n+        if (g instanceof Graphics2D g2d) {\n+            at = g2d.getTransform();\n+            oldStk = g2d.getStroke();\n+            scaleFactor = Math.min(at.getScaleX(), at.getScaleY());\n+\n+            \/* Deactivate the HiDPI scaling transform,\n+             * so we can do paint operations in the device\n+             * pixel coordinate system instead of the logical coordinate system.\n+             *\/\n+            resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n+\n+            if (resetTransform) {\n+                g2d.setTransform(new AffineTransform());\n+                stkWidth = c instanceof JInternalFrame ?\n+                        clipRound(scaleFactor) : (int) Math.floor(scaleFactor);\n+                g2d.setStroke(new BasicStroke((float) stkWidth));\n+            }\n+        }\n+\n+        int xtranslation = 0;\n+        int ytranslation = 0;\n+        int width = 0;\n+        int height = 0;\n+\n+        if (resetTransform) {\n+            double xx = at.getScaleX() * x + at.getTranslateX();\n+            double yy = at.getScaleY() * y + at.getTranslateY();\n+            xtranslation = clipRound(xx);\n+            ytranslation = clipRound(yy);\n+            width = clipRound(at.getScaleX() * w + xx) - xtranslation;\n+            height = clipRound(at.getScaleY() * h + yy) - ytranslation;\n+        } else {\n+            xtranslation = x;\n+            ytranslation = y;\n+            width = w;\n+            height = h;\n+        }\n+        g.translate(xtranslation, ytranslation);\n+\n+        \/\/STEP 2: Call respective paintBorder with transformed values\n+        paintFunction.paintUnscaledBorder(c, g, x, y, width, height, scaleFactor, stkWidth);\n+\n+        \/\/STEP 3: RESTORE TRANSFORM\n+        g.translate(-xtranslation, -ytranslation);\n+        if (resetTransform) {\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.setTransform(at);\n+            g2d.setStroke(oldStk);\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/SwingUtilities3.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import java.awt.BasicStroke;\n+import com.sun.java.swing.SwingUtilities3;\n+\n@@ -29,1 +30,0 @@\n-import java.awt.Graphics2D;\n@@ -33,2 +33,0 @@\n-import java.awt.Stroke;\n-import java.awt.geom.AffineTransform;\n@@ -153,37 +151,5 @@\n-        \/\/ We remove any initial transforms to prevent rounding errors\n-        \/\/ when drawing in non-integer scales\n-        AffineTransform at = null;\n-        Stroke oldStk = null;\n-        int stkWidth = 1;\n-        boolean resetTransform = false;\n-        if (g instanceof Graphics2D) {\n-            Graphics2D g2d = (Graphics2D) g;\n-            at = g2d.getTransform();\n-            oldStk = g2d.getStroke();\n-            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-            \/\/ skip resetting the transform\n-            resetTransform = (at.getShearX() == 0) && (at.getShearY() == 0);\n-            if (resetTransform) {\n-                g2d.setTransform(new AffineTransform());\n-                stkWidth = (int) Math.floor(Math.min(at.getScaleX(), at.getScaleY()));\n-                g2d.setStroke(new BasicStroke((float) stkWidth));\n-            }\n-        }\n-\n-        int w;\n-        int h;\n-        int xtranslation;\n-        int ytranslation;\n-        if (resetTransform) {\n-            w = (int) Math.floor(at.getScaleX() * width - 1);\n-            h = (int) Math.floor(at.getScaleY() * height - 1);\n-            xtranslation = (int) Math.ceil(at.getScaleX()*x+at.getTranslateX());\n-            ytranslation = (int) Math.ceil(at.getScaleY()*y+at.getTranslateY());\n-        } else {\n-            w = width;\n-            h = height;\n-            xtranslation = x;\n-            ytranslation = y;\n-        }\n-\n-        g.translate(xtranslation, ytranslation);\n+        SwingUtilities3.paintBorder(c, g, x, y, width, height, this::paintUnscaledBorder);\n+    }\n+\n+    private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                    int w, int h, double scale, int stroke) {\n@@ -193,1 +159,1 @@\n-                          w, h, stkWidth);\n+                          w, h, stroke);\n@@ -196,10 +162,1 @@\n-                             w, h, stkWidth);\n-\n-        g.translate(-xtranslation, -ytranslation);\n-\n-        \/\/ Set the transform we removed earlier\n-        if (resetTransform) {\n-            Graphics2D g2d = (Graphics2D) g;\n-            g2d.setTransform(at);\n-            g2d.setStroke(oldStk);\n-        }\n+                             w, h, stroke);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":9,"deletions":52,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import com.sun.java.swing.SwingUtilities3;\n+\n@@ -37,3 +39,0 @@\n-import java.awt.geom.AffineTransform;\n-\n-import static sun.java2d.pipe.Region.clipRound;\n@@ -147,39 +146,2 @@\n-        if ((this.thickness > 0) && (g instanceof Graphics2D)) {\n-            Graphics2D g2d = (Graphics2D) g;\n-\n-            AffineTransform at = g2d.getTransform();\n-\n-            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-            \/\/ or if no Scaling enabled,\n-            \/\/ skip resetting the transform\n-            boolean resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0)) &&\n-                    ((at.getScaleX() > 1) || (at.getScaleY() > 1));\n-\n-            int xtranslation;\n-            int ytranslation;\n-            int w;\n-            int h;\n-            int offs;\n-\n-            if (resetTransform) {\n-                \/* Deactivate the HiDPI scaling transform,\n-                 * so we can do paint operations in the device\n-                 * pixel coordinate system instead of the logical coordinate system.\n-                 *\/\n-                g2d.setTransform(new AffineTransform());\n-                double xx = at.getScaleX() * x + at.getTranslateX();\n-                double yy = at.getScaleY() * y + at.getTranslateY();\n-                xtranslation = clipRound(xx);\n-                ytranslation = clipRound(yy);\n-                w = clipRound(at.getScaleX() * width + xx) - xtranslation;\n-                h = clipRound(at.getScaleY() * height + yy) - ytranslation;\n-                offs = this.thickness * (int) at.getScaleX();\n-            } else {\n-                w = width;\n-                h = height;\n-                xtranslation = x;\n-                ytranslation = y;\n-                offs = this.thickness;\n-            }\n-\n-            g2d.translate(xtranslation, ytranslation);\n+        SwingUtilities3.paintBorder(c, g, x, y, width, height, this::paintUnscaledBorder);\n+    }\n@@ -187,2 +149,6 @@\n-            Color oldColor = g2d.getColor();\n-            g2d.setColor(this.lineColor);\n+    private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                     int w, int h, double scale, int stroke) {\n+        if (this.thickness > 0) {\n+            int offs = this.thickness * (int) scale;\n+            Color oldColor = g.getColor();\n+            g.setColor(this.lineColor);\n@@ -192,1 +158,0 @@\n-\n@@ -203,7 +168,0 @@\n-            Path2D path = new Path2D.Float(Path2D.WIND_EVEN_ODD);\n-            path.append(outer, false);\n-            path.append(inner, false);\n-            g2d.fill(path);\n-            g2d.setColor(oldColor);\n-\n-            g2d.translate(-xtranslation, -ytranslation);\n@@ -211,2 +169,5 @@\n-            if (resetTransform) {\n-                g2d.setTransform(at);\n+            if (g instanceof Graphics2D g2d) {\n+                Path2D path = new Path2D.Float(Path2D.WIND_EVEN_ODD);\n+                path.append(outer, false);\n+                path.append(inner, false);\n+                g2d.fill(path);\n@@ -214,0 +175,1 @@\n+            g.setColor(oldColor);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/LineBorder.java","additions":16,"deletions":54,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.BasicStroke;\n@@ -34,1 +33,0 @@\n-import java.awt.Graphics2D;\n@@ -36,1 +34,0 @@\n-import java.awt.Stroke;\n@@ -38,1 +35,0 @@\n-import java.awt.geom.AffineTransform;\n@@ -65,0 +61,1 @@\n+import com.sun.java.swing.SwingUtilities3;\n@@ -68,1 +65,0 @@\n-import static sun.java2d.pipe.Region.clipRound;\n@@ -253,0 +249,5 @@\n+            SwingUtilities3.paintBorder(c, g, x, y, w, h, this::paintUnscaledBorder);\n+        }\n+\n+        private void paintUnscaledBorder(Component c, Graphics g, int x, int y,\n+                                         int w, int h, double scale, int stroke) {\n@@ -267,42 +268,0 @@\n-            AffineTransform at = null;\n-            Stroke oldStk = null;\n-            boolean resetTransform = false;\n-            int stkWidth = 1;\n-            double scaleFactor = 1;\n-\n-            if (g instanceof Graphics2D g2d) {\n-                at = g2d.getTransform();\n-                scaleFactor = at.getScaleX();\n-                oldStk = g2d.getStroke();\n-\n-                \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-                \/\/ skip resetting the transform\n-                resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n-\n-                if (resetTransform) {\n-                    g2d.setTransform(new AffineTransform());\n-                    stkWidth = clipRound(Math.min(at.getScaleX(), at.getScaleY()));\n-                    g2d.setStroke(new BasicStroke((float) stkWidth));\n-                }\n-            }\n-\n-            int xtranslation;\n-            int ytranslation;\n-            int width;\n-            int height;\n-\n-            if (resetTransform) {\n-                double xx = at.getScaleX() * x + at.getTranslateX();\n-                double yy = at.getScaleY() * y + at.getTranslateY();\n-                xtranslation = clipRound(xx);\n-                ytranslation = clipRound(yy);\n-                width = clipRound(at.getScaleX() * w + xx) - xtranslation;\n-                height = clipRound(at.getScaleY() * h + yy) - ytranslation;\n-            } else {\n-                xtranslation = x;\n-                ytranslation = y;\n-                width = w;\n-                height = h;\n-            }\n-            g.translate(xtranslation, ytranslation);\n-\n@@ -310,1 +269,1 @@\n-            int thickness = (int) Math.ceil(4 * scaleFactor);\n+            int thickness = (int) Math.ceil(4 * scale);\n@@ -315,1 +274,1 @@\n-                g.drawRect(i, i, width - (i * 2), height - (i * 2));\n+                g.drawRect(i, i, w - (i * 2), h - (i * 2));\n@@ -322,3 +281,3 @@\n-                int offset = (((scaleFactor - stkWidth) >= 0) && ((stkWidth % 2) != 0)) ? 1 : 0;\n-                int loc1 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 - stkWidth : midPoint;\n-                int loc2 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 : midPoint + stkWidth;\n+                int offset = (((scale - stroke) >= 0) && ((stroke % 2) != 0)) ? 1 : 0;\n+                int loc1 = thickness % 2 == 0 ? midPoint + stroke \/ 2 - stroke : midPoint;\n+                int loc2 = thickness % 2 == 0 ? midPoint + stroke \/ 2 : midPoint + stroke;\n@@ -326,1 +285,1 @@\n-                int corner = (int) Math.round(CORNER * scaleFactor);\n+                int corner = (int) Math.round(CORNER * scale);\n@@ -330,6 +289,6 @@\n-                g.drawLine(corner + 1, loc2, width - corner, loc2); \/\/top\n-                g.drawLine(loc2, corner + 1, loc2, height - corner); \/\/left\n-                g.drawLine((width - offset) - loc1, corner + 1,\n-                        (width - offset) - loc1, height - corner); \/\/right\n-                g.drawLine(corner + 1, (height - offset) - loc1,\n-                        width - corner, (height - offset) - loc1); \/\/bottom\n+                g.drawLine(corner + 1, loc2, w - corner, loc2); \/\/top\n+                g.drawLine(loc2, corner + 1, loc2, h - corner); \/\/left\n+                g.drawLine((w - offset) - loc1, corner + 1,\n+                        (w - offset) - loc1, h - corner); \/\/right\n+                g.drawLine(corner + 1, (h - offset) - loc1,\n+                        w - corner, (h - offset) - loc1); \/\/bottom\n@@ -339,14 +298,6 @@\n-                g.drawLine(corner, loc1, width - corner - 1, loc1);\n-                g.drawLine(loc1, corner, loc1, height - corner - 1);\n-                g.drawLine((width - offset) - loc2, corner,\n-                        (width - offset) - loc2, height - corner - 1);\n-                g.drawLine(corner, (height - offset) - loc2,\n-                        width - corner - 1, (height - offset) - loc2);\n-            }\n-\n-            \/\/ restore previous transform\n-            g.translate(-xtranslation, -ytranslation);\n-            if (resetTransform) {\n-                Graphics2D g2d = (Graphics2D) g;\n-                g2d.setTransform(at);\n-                g2d.setStroke(oldStk);\n+                g.drawLine(corner, loc1, w - corner - 1, loc1);\n+                g.drawLine(loc1, corner, loc1, h - corner - 1);\n+                g.drawLine((w - offset) - loc2, corner,\n+                        (w - offset) - loc2, h - corner - 1);\n+                g.drawLine(corner, (h - offset) - loc2,\n+                        w - corner - 1, (h - offset) - loc2);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":24,"deletions":73,"binary":false,"changes":97,"status":"modified"}]}