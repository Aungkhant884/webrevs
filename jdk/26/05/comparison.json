{"files":[{"patch":"@@ -74,1 +74,1 @@\n-            throw new IllegalAccessError(\"Already connected\");\n+            throw new IllegalStateException(\"Already connected\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/URLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 4485208\n- * @summary  file: and ftp: URL handlers need to throw NPE in setRequestProperty\n+ * @bug 4485208 8252767\n+ * @summary Validate various request property methods on java.net.URLConnection\n+ * throw NullPointerException and IllegalStateException when expected\n+ * @run testng RequestProperties\n@@ -30,1 +32,8 @@\n-import java.net.*;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n@@ -35,1 +44,0 @@\n-    static int failed;\n@@ -37,2 +45,6 @@\n-    public static void main (String args[]) throws Exception {\n-        List<String> urls = new ArrayList<>();\n+    private static final Class NPE = NullPointerException.class;\n+    private static final Class ISE = IllegalStateException.class;\n+\n+    @DataProvider(name = \"urls\")\n+    private Object[][] urls() {\n+        final List<String> urls = new ArrayList<>();\n@@ -42,1 +54,1 @@\n-        if (hasFtp())\n+        if (hasFtp()) {\n@@ -44,0 +56,57 @@\n+        }\n+        final Object[][] data = new Object[urls.size()][1];\n+        for (int i = 0; i < urls.size(); i++) {\n+            data[i][0] = urls.get(i);\n+        }\n+        return data;\n+    }\n+\n+\n+    \/**\n+     * Test that {@link java.net.URLConnection#setRequestProperty(String, String)} throws\n+     * a {@link NullPointerException} when passed null key\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testSetRequestPropertyNullPointerException(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n+        Assert.assertThrows(NPE, () -> conn.setRequestProperty(null, \"bar\"));\n+        \/\/ expected to pass\n+        conn.setRequestProperty(\"key\", null);\n+    }\n+\n+    \/**\n+     * Test that {@link java.net.URLConnection#addRequestProperty(String, String)} throws\n+     * a {@link NullPointerException} when passed null key\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testAddRequestPropertyNullPointerException(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n+        Assert.assertThrows(NPE, () -> conn.addRequestProperty(null, \"hello\"));\n+        \/\/ expected to pass\n+        conn.addRequestProperty(\"key\", null);\n+    }\n+\n+    \/**\n+     * Test that {@link java.net.URLConnection#getRequestProperty(String)} returns\n+     * null when the passed key is null\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testGetRequestPropertyReturnsNull(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n+        Assert.assertNull(conn.getRequestProperty(null),\n+                \"getRequestProperty was expected to return null for null key\");\n+    }\n+\n+    \/**\n+     * Test that {@link java.net.URLConnection#setRequestProperty(String, String)} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testSetRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n+        try {\n+            Assert.assertThrows(ISE, () -> conn.setRequestProperty(\"foo\", \"bar\"));\n+        } finally {\n+            safeClose(conn);\n+        }\n+    }\n@@ -45,2 +114,13 @@\n-        for (String urlStr : urls)\n-            test(new URL(urlStr));\n+    \/**\n+     * Test that {@link java.net.URLConnection#addRequestProperty(String, String)} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testAddRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n+        try {\n+            Assert.assertThrows(ISE, () -> conn.addRequestProperty(\"foo\", \"bar\"));\n+        } finally {\n+            safeClose(conn);\n+        }\n+    }\n@@ -48,2 +128,12 @@\n-        if (failed != 0)\n-            throw new RuntimeException(failed + \" errors\") ;\n+    \/**\n+     * Test that {@link java.net.URLConnection#getRequestProperty(String)} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testGetRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n+        try {\n+            Assert.assertThrows(ISE, () -> conn.getRequestProperty(\"hello\"));\n+        } finally {\n+            safeClose(conn);\n+        }\n@@ -52,2 +142,7 @@\n-    static void test(URL url) throws Exception {\n-        URLConnection urlc = url.openConnection();\n+    \/**\n+     * Test that {@link URLConnection#getRequestProperties()} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testGetRequestPropertiesIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n@@ -55,5 +150,14 @@\n-            urlc.setRequestProperty(null, null);\n-            System.out.println(url.getProtocol()\n-                               + \": setRequestProperty(null,) did not throw NPE\");\n-            failed++;\n-        } catch (NullPointerException e) { \/* Expected *\/ }\n+            Assert.assertThrows(ISE, () -> conn.getRequestProperties());\n+        } finally {\n+            safeClose(conn);\n+        }\n+    }\n+\n+    private static URLConnection createAndConnectURLConnection() throws IOException {\n+        final URL url = Path.of(System.getProperty(\"java.io.tmpdir\")).toUri().toURL();\n+        final URLConnection conn = url.openConnection();\n+        conn.connect();\n+        return conn;\n+    }\n+\n+    private static void safeClose(final URLConnection conn) {\n@@ -61,10 +165,3 @@\n-            urlc.addRequestProperty(null, null);\n-            System.out.println(url.getProtocol()\n-                               + \": addRequestProperty(null,) did not throw NPE\");\n-            failed++;\n-        } catch (NullPointerException e)  { \/* Expected *\/ }\n-\n-        if (urlc.getRequestProperty(null) != null) {\n-            System.out.println(url.getProtocol()\n-                               + \": getRequestProperty(null,) did not return null\");\n-            failed++;\n+            conn.getInputStream().close();\n+        } catch (Exception e) {\n+            \/\/ ignore\n@@ -76,1 +173,2 @@\n-            return new java.net.URL(\"ftp:\/\/\") != null;\n+            new java.net.URL(\"ftp:\/\/\");\n+            return true;\n","filename":"test\/jdk\/java\/net\/URLConnection\/RequestProperties.java","additions":128,"deletions":30,"binary":false,"changes":158,"status":"modified"}]}