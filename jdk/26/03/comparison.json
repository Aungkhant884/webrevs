{"files":[{"patch":"@@ -74,1 +74,1 @@\n-            throw new IllegalAccessError(\"Already connected\");\n+            throw new IllegalStateException(\"Already connected\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/URLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 4485208\n- * @summary  file: and ftp: URL handlers need to throw NPE in setRequestProperty\n+ * @bug 4485208 8252767\n+ * @summary  Validate java.net.URLConnection#setRequestProperty throws NPE and IllegalStateException\n@@ -30,1 +30,3 @@\n-import java.net.*;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n@@ -33,0 +35,1 @@\n+import java.util.concurrent.Callable;\n@@ -46,1 +49,1 @@\n-            test(new URL(urlStr));\n+            testSetRequestPropNPE(new URL(urlStr));\n@@ -50,0 +53,2 @@\n+\n+        testRequestPropIllegalStateException();\n@@ -52,1 +57,1 @@\n-    static void test(URL url) throws Exception {\n+    static void testSetRequestPropNPE(URL url) throws Exception {\n@@ -82,0 +87,73 @@\n+\n+    \/**\n+     * Test that various request property handling methods on {@link java.net.URLConnection}  throw\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    private static void testRequestPropIllegalStateException() throws Exception {\n+        final URL url = Path.of(System.getProperty(\"java.io.tmpdir\")).toUri().toURL();\n+        final URLConnection conn = url.openConnection();\n+        conn.connect();\n+        try {\n+            \/\/ test setRequestProperty\n+            expectIllegalStateException(\n+                    () -> {\n+                        conn.setRequestProperty(\"foo\", \"bar\");\n+                        return null;\n+                    }, \"setRequestProperty on \" + conn.getClass().getName()\n+                            + \" for \" + url + \" was expected to throw\"\n+                            + \" IllegalStateException, but didn't\");\n+            \/\/ test addRequestProperty\n+            expectIllegalStateException(\n+                    () -> {\n+                        conn.addRequestProperty(\"foo\", \"bar\");\n+                        return null;\n+                    }, \"addRequestProperty on \" + conn.getClass().getName()\n+                            + \" for \" + url + \" was expected to throw\"\n+                            + \" IllegalStateException, but didn't\");\n+            \/\/ test getRequestProperty\n+            expectIllegalStateException(\n+                    () -> {\n+                        conn.getRequestProperty(\"foo\");\n+                        return null;\n+                    }, \"getRequestProperty on \" + conn.getClass().getName()\n+                            + \" for \" + url + \" was expected to throw\"\n+                            + \" IllegalStateException, but didn't\");\n+            \/\/ test getRequestProperties\n+            expectIllegalStateException(\n+                    () -> {\n+                        conn.getRequestProperties();\n+                        return null;\n+                    }, \"getRequestProperties on \" + conn.getClass().getName()\n+                            + \" for \" + url + \" was expected to throw\"\n+                            + \" IllegalStateException, but didn't\");\n+        } finally {\n+            try {\n+                conn.getInputStream().close();\n+            } catch (Exception e) {\n+                \/\/ ignore\n+            }\n+        }\n+\n+    }\n+\n+    \/**\n+     * Calls the {@code operation} and expects it to throw an {@link IllegalStateException}.\n+     * If no such exception is thrown then this method throws a {@link RuntimeException}\n+     * with the passed {@code unmetExpectationErrorMessage} as the exception's message.\n+     *\n+     * @param operation                    The operation to invoke\n+     * @param unmetExpectationErrorMessage The error message to be set in the\n+     *                                     RuntimeException that will be thrown if the operation\n+     *                                     doesn't result in an IllegalStateException\n+     *\/\n+    private static void expectIllegalStateException(final Callable<Void> operation,\n+                                                    final String unmetExpectationErrorMessage)\n+            throws Exception {\n+        try {\n+            operation.call();\n+            \/\/ the expected IllegalStateException wasn't throw\n+            throw new RuntimeException(unmetExpectationErrorMessage);\n+        } catch (IllegalStateException ise) {\n+            \/\/ expected\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/URLConnection\/RequestProperties.java","additions":84,"deletions":6,"binary":false,"changes":90,"status":"modified"}]}