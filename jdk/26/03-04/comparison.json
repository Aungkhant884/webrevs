{"files":[{"patch":"@@ -27,1 +27,3 @@\n- * @summary  Validate java.net.URLConnection#setRequestProperty throws NPE and IllegalStateException\n+ * @summary Validate various request property methods on java.net.URLConnection\n+ * throw NullPointerException and IllegalStateException when expected\n+ * @run testng RequestProperties\n@@ -30,0 +32,5 @@\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n@@ -35,1 +42,0 @@\n-import java.util.concurrent.Callable;\n@@ -38,1 +44,0 @@\n-    static int failed;\n@@ -40,2 +45,3 @@\n-    public static void main (String args[]) throws Exception {\n-        List<String> urls = new ArrayList<>();\n+    @DataProvider(name = \"urls\")\n+    private Object[][] urls() {\n+        final List<String> urls = new ArrayList<>();\n@@ -45,1 +51,1 @@\n-        if (hasFtp())\n+        if (hasFtp()) {\n@@ -47,0 +53,7 @@\n+        }\n+        final Object[][] data = new Object[urls.size()][1];\n+        for (int i = 0; i < urls.size(); i++) {\n+            data[i][0] = urls.get(i);\n+        }\n+        return data;\n+    }\n@@ -48,5 +61,0 @@\n-        for (String urlStr : urls)\n-            testSetRequestPropNPE(new URL(urlStr));\n-\n-        if (failed != 0)\n-            throw new RuntimeException(failed + \" errors\") ;\n@@ -54,1 +62,17 @@\n-        testRequestPropIllegalStateException();\n+    \/**\n+     * Test that {@link java.net.URLConnection#setRequestProperty(String, String)} throws\n+     * a {@link NullPointerException} when passed null key\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testSetRequestPropertyNullPointerException(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n+        try {\n+            conn.setRequestProperty(null, \"bar\");\n+            Assert.fail(\"setRequestProperty on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" NullPointerException, but didn't\");\n+        } catch (NullPointerException npe) {\n+            \/\/ expected\n+        }\n+        \/\/ expected to pass\n+        conn.setRequestProperty(\"key\", null);\n@@ -57,8 +81,7 @@\n-    static void testSetRequestPropNPE(URL url) throws Exception {\n-        URLConnection urlc = url.openConnection();\n-        try {\n-            urlc.setRequestProperty(null, null);\n-            System.out.println(url.getProtocol()\n-                               + \": setRequestProperty(null,) did not throw NPE\");\n-            failed++;\n-        } catch (NullPointerException e) { \/* Expected *\/ }\n+    \/**\n+     * Test that {@link java.net.URLConnection#addRequestProperty(String, String)} throws\n+     * a {@link NullPointerException} when passed null key\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testAddRequestPropertyNullPointerException(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n@@ -66,10 +89,6 @@\n-            urlc.addRequestProperty(null, null);\n-            System.out.println(url.getProtocol()\n-                               + \": addRequestProperty(null,) did not throw NPE\");\n-            failed++;\n-        } catch (NullPointerException e)  { \/* Expected *\/ }\n-\n-        if (urlc.getRequestProperty(null) != null) {\n-            System.out.println(url.getProtocol()\n-                               + \": getRequestProperty(null,) did not return null\");\n-            failed++;\n+            conn.addRequestProperty(null, \"hello\");\n+            Assert.fail(\"addRequestProperty on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" NullPointerException, but didn't\");\n+        } catch (NullPointerException npe) {\n+            \/\/ expected\n@@ -77,0 +96,2 @@\n+        \/\/ expected to pass\n+        conn.addRequestProperty(\"key\", null);\n@@ -79,1 +100,18 @@\n-    private static boolean hasFtp() {\n+    \/**\n+     * Test that {@link java.net.URLConnection#getRequestProperty(String)} returns\n+     * null when the passed key is null\n+     *\/\n+    @Test(dataProvider = \"urls\")\n+    public void testGetRequestPropertyReturnsNull(final String url) throws Exception {\n+        final URLConnection conn = new URL(url).openConnection();\n+        Assert.assertNull(conn.getRequestProperty(null),\n+                \"getRequestProperty was expected to return null for null key\");\n+    }\n+\n+    \/**\n+     * Test that {@link java.net.URLConnection#setRequestProperty(String, String)} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testSetRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n@@ -81,4 +119,8 @@\n-            return new java.net.URL(\"ftp:\/\/\") != null;\n-        } catch (java.net.MalformedURLException x) {\n-            System.out.println(\"FTP not supported by this runtime.\");\n-            return false;\n+            conn.setRequestProperty(\"foo\", \"bar\");\n+            Assert.fail(\"setRequestProperty on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" IllegalStateException, but didn't\");\n+        } catch (IllegalStateException ise) {\n+            \/\/ expected\n+        } finally {\n+            safeClose(conn);\n@@ -89,1 +131,1 @@\n-     * Test that various request property handling methods on {@link java.net.URLConnection}  throw\n+     * Test that {@link java.net.URLConnection#addRequestProperty(String, String)} throws\n@@ -92,4 +134,3 @@\n-    private static void testRequestPropIllegalStateException() throws Exception {\n-        final URL url = Path.of(System.getProperty(\"java.io.tmpdir\")).toUri().toURL();\n-        final URLConnection conn = url.openConnection();\n-        conn.connect();\n+    @Test\n+    public void testAddRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n@@ -97,32 +138,6 @@\n-            \/\/ test setRequestProperty\n-            expectIllegalStateException(\n-                    () -> {\n-                        conn.setRequestProperty(\"foo\", \"bar\");\n-                        return null;\n-                    }, \"setRequestProperty on \" + conn.getClass().getName()\n-                            + \" for \" + url + \" was expected to throw\"\n-                            + \" IllegalStateException, but didn't\");\n-            \/\/ test addRequestProperty\n-            expectIllegalStateException(\n-                    () -> {\n-                        conn.addRequestProperty(\"foo\", \"bar\");\n-                        return null;\n-                    }, \"addRequestProperty on \" + conn.getClass().getName()\n-                            + \" for \" + url + \" was expected to throw\"\n-                            + \" IllegalStateException, but didn't\");\n-            \/\/ test getRequestProperty\n-            expectIllegalStateException(\n-                    () -> {\n-                        conn.getRequestProperty(\"foo\");\n-                        return null;\n-                    }, \"getRequestProperty on \" + conn.getClass().getName()\n-                            + \" for \" + url + \" was expected to throw\"\n-                            + \" IllegalStateException, but didn't\");\n-            \/\/ test getRequestProperties\n-            expectIllegalStateException(\n-                    () -> {\n-                        conn.getRequestProperties();\n-                        return null;\n-                    }, \"getRequestProperties on \" + conn.getClass().getName()\n-                            + \" for \" + url + \" was expected to throw\"\n-                            + \" IllegalStateException, but didn't\");\n+            conn.addRequestProperty(\"foo\", \"bar\");\n+            Assert.fail(\"addRequestProperty on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" IllegalStateException, but didn't\");\n+        } catch (IllegalStateException ise) {\n+            \/\/ expected\n@@ -130,5 +145,1 @@\n-            try {\n-                conn.getInputStream().close();\n-            } catch (Exception e) {\n-                \/\/ ignore\n-            }\n+            safeClose(conn);\n@@ -136,0 +147,1 @@\n+    }\n@@ -137,0 +149,17 @@\n+    \/**\n+     * Test that {@link java.net.URLConnection#getRequestProperty(String)} throws\n+     * an {@link IllegalStateException} when already connected\n+     *\/\n+    @Test\n+    public void testGetRequestPropertyIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n+        try {\n+            conn.getRequestProperty(\"hello\");\n+            Assert.fail(\"getRequestProperty on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" IllegalStateException, but didn't\");\n+        } catch (IllegalStateException ise) {\n+            \/\/ expected\n+        } finally {\n+            safeClose(conn);\n+        }\n@@ -140,8 +169,2 @@\n-     * Calls the {@code operation} and expects it to throw an {@link IllegalStateException}.\n-     * If no such exception is thrown then this method throws a {@link RuntimeException}\n-     * with the passed {@code unmetExpectationErrorMessage} as the exception's message.\n-     *\n-     * @param operation                    The operation to invoke\n-     * @param unmetExpectationErrorMessage The error message to be set in the\n-     *                                     RuntimeException that will be thrown if the operation\n-     *                                     doesn't result in an IllegalStateException\n+     * Test that {@link URLConnection#getRequestProperties()} throws\n+     * an {@link IllegalStateException} when already connected\n@@ -149,3 +172,3 @@\n-    private static void expectIllegalStateException(final Callable<Void> operation,\n-                                                    final String unmetExpectationErrorMessage)\n-            throws Exception {\n+    @Test\n+    public void testGetRequestPropertiesIllegalStateException() throws Exception {\n+        final URLConnection conn = createAndConnectURLConnection();\n@@ -153,3 +176,4 @@\n-            operation.call();\n-            \/\/ the expected IllegalStateException wasn't throw\n-            throw new RuntimeException(unmetExpectationErrorMessage);\n+            conn.getRequestProperties();\n+            Assert.fail(\"getRequestProperties on \" + conn.getClass().getName()\n+                    + \" for \" + conn.getURL() + \" was expected to throw\"\n+                    + \" IllegalStateException, but didn't\");\n@@ -158,0 +182,27 @@\n+        } finally {\n+            safeClose(conn);\n+        }\n+    }\n+\n+    private static URLConnection createAndConnectURLConnection() throws IOException {\n+        final URL url = Path.of(System.getProperty(\"java.io.tmpdir\")).toUri().toURL();\n+        final URLConnection conn = url.openConnection();\n+        conn.connect();\n+        return conn;\n+    }\n+\n+    private static void safeClose(final URLConnection conn) {\n+        try {\n+            conn.getInputStream().close();\n+        } catch (Exception e) {\n+            \/\/ ignore\n+        }\n+    }\n+\n+    private static boolean hasFtp() {\n+        try {\n+            new java.net.URL(\"ftp:\/\/\");\n+            return true;\n+        } catch (java.net.MalformedURLException x) {\n+            System.out.println(\"FTP not supported by this runtime.\");\n+            return false;\n","filename":"test\/jdk\/java\/net\/URLConnection\/RequestProperties.java","additions":142,"deletions":91,"binary":false,"changes":233,"status":"modified"}]}