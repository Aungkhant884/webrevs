[{"commit":{"message":"Merge branch 'master' as of 10th-Aug into 8285790-merge-rules\n\nResolve the conflict in file c2_MacroAssembler_aarch64.hpp."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"e695cf357697bea5374d02852e72796dd1c1106e"},{"commit":{"message":"Merge with jdk\/master"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java"}],"sha":"960bf3293dfb8084d9bc261a3fe169703db89647"},{"commit":{"message":"Remove unused ad and m4 files"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"}],"sha":"ecf3a00ba8b7718677305dabfa85f26a5803bd8a"},{"commit":{"message":"Fix Jtreg failures on NEON with -XX:MaxVectorSize=8\n\n[Byte|Short|Int|Long|Float|Double]128VectorTests.java failed on NEON\nplatform with -XX:MaxVectorSize=8.\n\nThe root cause lies in that 128-bit vector MulReduction operations would\npass the check in match_rule_supported_vector(), i.e. returning true if\nlengh_in_bytes is 16, which should be invalid since MaxVectorSize=8.\n\nIn this patch, we improve the check logic a bit, i.e. failing fast if\nthe conditions are not satisfied and falling through to check\nvector_size_supported() eventually.\n\nSimilar update is done to the check for Op_MulAddVS2VI."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"8789921431b63f60dbcc832f81273336e3834ec6"},{"commit":{"message":"Improve comments and fix typos\n\n1. Improve the comment for MulReductionV*.\n\n2. Fix typos for REDUCE_BITWISE_OP_XX macros.\n\n3. For the typo in vector mask load\/store rules."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"3e85e2adc1919cfa311b3e7d0e3a8100e05d4e25"},{"commit":{"message":"Merge branch 'master' as of 22nd-Jul into 8285790-merge-rules\n\nMerge branch \"master\"."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"196fdbad12023071c5d663cf5b4aadbdaf3fa489"},{"commit":{"message":"Add m4 file\n\nAdd the corresponding M4 file"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"eb72406b0119320e8eade9a55e3cede47913378a"},{"commit":{"message":"Add VM_Version flag to control NEON instruction generation\n\nAdd VM_Version flag use_neon_for_vector() to control whether to generate\nNEON instructions for 128-bit vector operations.\n\nCurrently only vector length is checked inside and it returns true for\nexisting SVE cores. More specific things might be checked in the near\nfuture, e.g., the basic data type or SVE CPU model.\n\nBesides, new macro assembler helpers neon_vector_extend\/narrow() are\nintroduced to make the code clean.\n\nNote: AddReductionVF\/D rules are updated so that SVE instructions are\ngenerated for 64\/128-bit vector operations, because floating point\nreduction add instructions are supported directly in SVE."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp"}],"sha":"923b477b0285fd224e98f7e24acba1662e2bbe19"},{"commit":{"message":"Merge branch 'master' as of 7th-July into 8285790-merge-rules"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/adlc\/output_c.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java"}],"sha":"5babc308369b3c0cb113fb08b13ec25ec6831a20"},{"commit":{"message":"8285790: AArch64: Merge C2 NEON and SVE matching rules\n\nMOTIVATION\n\nThis is a big refactoring patch of merging rules in aarch64_sve.ad and\naarch64_neon.ad. The motivation can also be found at [1].\n\nCurrently AArch64 has aarch64_sve.ad and aarch64_neon.ad to support SVE\nand NEON codegen respectively. 1) For SVE rules we use vReg operand to\nmatch VecA for an arbitrary length of vector type, when SVE is enabled;\n2) For NEON rules we use vecX\/vecD operands to match VecX\/VecD for\n128-bit\/64-bit vectors, when SVE is not enabled.\n\nThis separation looked clean at the time of introducing SVE support.\nHowever, there are two main drawbacks now.\n\nDrawback-1: NEON (Advanced SIMD) is the mandatory feature on AArch64 and\nSVE vector registers share the lower 128 bits with NEON registers. For\nsome cases, even when SVE is enabled, we still prefer to match NEON\nrules and emit NEON instructions.\n\nDrawback-2: With more and more vector rules added to support VectorAPI,\nthere are lots of rules in both two ad files with different predication\nconditions, e.g., different values of UseSVE or vector type\/size.\n\nExamples can be found in [1]. These two drawbacks make the code less\nmaintainable and increase the libjvm.so code size.\n\nKEY UPDATES\n\nIn this patch, we mainly do two things, using generic vReg to match all\nNEON\/SVE vector registers and merging NEON\/SVE matching rules.\n\nUpdate-1: Use generic vReg to match all NEON\/SVE vector registers\n\nTwo different approaches were considered, and we prefer to use generic\nvector solution but keep VecA operand for all >128-bit vectors. See the\nlast slide in [1]. All the changes lie in the AArch64 backend.\n\n1) Some helpers are updated in aarch64.ad to enable generic vector on\nAArch64. See vector_ideal_reg(), pd_specialize_generic_vector_operand(),\nis_reg2reg_move() and is_generic_vector().\n\n2) Operand vecA is created to match VecA register, and vReg is updated\nto match VecA\/D\/X registers dynamically.\n\nWith the introduction of generic vReg, difference in register types\nbetween NEON rules and SVE rules can be eliminated, which makes it easy\nto merge these rules.\n\nUpdate-2: Try to merge existing rules\n\nAs updated in GensrcAdlc.gmk, new ad file, aarch64_vector.ad, is\nintroduced to hold the grouped and merged matching rules.\n\n1) Similar rules with difference in vector type\/size can be merged into\nnew rules, where different types and vector sizes are handled in the\ncodegen part, e.g., vadd(). This resolves Drawback-2.\n\n2) In most cases, we tend to emit NEON instructions for 128-bit vector\noperations on SVE platforms, e.g., vadd(). This resolves Drawback-1.\n\nIt's important to note that there are some exceptions.\n\nException-1: For some rules, there are no direct NEON instructions, but\nexists simple SVE implementation due to newly added SVE ISA. Such rules\ninclude vloadconB, vmulL_neon, vminL_neon, vmaxL_neon,\nreduce_addF_le128b (4F case), reduce_and\/or\/xor_neon, reduce_minL_neon,\nreduce_maxL_neon, vcvtLtoF_neon, vcvtDtoI_neon, rearrange_HS_neon.\n\nException-2: Vector mask generation and operation rules are different\nbecause vector mask is stored in different types of registers between\nNEON and SVE, e.g., vmaskcmp_neon and vmask_truecount_neon rules.\n\nException-3: Shift right related rules are different because vector\nshift right instructions differ a bit between NEON and SVE.\n\nFor these exceptions, we emit NEON or SVE code simply based on UseSVE\noptions.\n\nMINOR UPDATES and CODE REFACTORING\n\nSince we've touched all lines of code during merging rules, we further\ndo more minor updates and refactoring.\n\n1. Reduce regmask bits\n\nStack slot alignment is handled specially for scalable vector, which\nwill firstly align to SlotsPerVecA, and then align to the real vector\nlength. We should guarantee SlotsPerVecA is no bigger than the real\nvector length. Otherwise, unused stack space would be allocated.\n\nIn AArch64 SVE, the vector length can be 128 to 2048 bits. However,\nSlotsPerVecA is currently set as 8, i.e. 8 * 32 = 256 bits. As a result,\non a 128-bit SVE platform, the stack slot is aligned to 256 bits,\nleaving the half 128 bits unused. In this patch, we reduce SlotsPerVecA\nfrom 8 to 4.\n\nSee the updates in register_aarch64.hpp, regmask.hpp and aarch64.ad\n(chunk1 and vectora_reg).\n\n2. Refactor NEON\/SVE vector op support check.\n\nMerge NEON and SVE vector supported check into one single function. To\nbe consistent, SVE default size supported check now is relaxed from no\nless than 64 bits to the same condition as NEON's min_vector_size(),\ni.e. 4 bytes and 4\/2 booleans are also supported. This should be fine,\nas we assume at least we will emit NEON code for those small vectors,\nwith unified rules.\n\n3. Some notes for new rules\n\n1) Since new rules are unique and it makes no sense to set different\n\"ins_cost\", we turn to use the default cost.\n\n2) By default we use \"pipe_slow\" for matching rules in aarch64_vector.ad\nnow. Hence, many SIMD pipeline classes at aarch64.ad become unused and\ncan be removed.\n\n3) Suffixes '_le128b\/_gt128b' and '_neon\/_sve' are appended in the\nmatching rule names if needed.\na) 'le128b' means the vector length is less than or equal to 128 bits.\nThis rule can be matched on both NEON and 128-bit SVE.\nb) 'gt128b' means the vector length is greater than 128 bits. This rule\ncan only be matched on SVE.\nc) 'neon' means this rule can only be matched on NEON, i.e. the\ngenerated instruction is not better than those in 128-bit SVE.\nd) 'sve' means this rule is only matched on SVE for all possible vector\nlength, i.e. not limited to gt128b.\n\nNote-1: m4 file is not introduced because many duplications are highly\nreduced now.\nNote-2: We guess the code review for this big patch would probably take\nsome time and we may need to merge latest code from master branch from\ntime to time. We prefer to keep aarch64_neon\/sve.ad and the\ncorresponding m4 files for easy comparison and review. Of course, they\nwill be finally removed after some solid reviews before integration.\nNote-3: Several other minor refactorings are done in this patch, but we\ncannot list all of them in the commit message. We have reviewed and\ntested the rules carefully to guarantee the quality.\n\nTESTING\n\n1) Cross compilations on arm32\/s390\/pps\/riscv passed.\n2) tier1~3 jtreg passed on both x64 and aarch64 machines.\n3) vector tests: all the test cases under the following directories can\npass on both NEON and SVE systems with max vector length 16\/32\/64 bytes.\n\n  \"test\/hotspot\/jtreg\/compiler\/vectorapi\/\"\n  \"test\/jdk\/jdk\/incubator\/vector\/\"\n  \"test\/hotspot\/jtreg\/compiler\/vectorization\/\"\n\n4) Performance evaluation: we choose vector micro-benchmarks from\npanama-vector:vectorIntrinsics [2] to evaluate the performance of this\npatch. We've tested *MaxVectorTests.java cases on one 128-bit SVE\nplatform and one NEON platform, and didn't see any visiable regression\nwith NEON and SVE. We will continue to verify more cases on other\nplatforms with NEON and different SVE vector sizes.\n\nBENEFITS\n\nThe number of matching rules is reduced to ~ 42%.\n  before: 373 (aarch64_neon.ad) + 380 (aarch64_sve.ad) = 753\n  after : 313(aarch64_vector.ad)\n\nCode size for libjvm.so (release build) on aarch64 is reduced to ~ 96%.\n  before: 25246528 B (commit 7905788e969)\n  after : 24208776 B (nearly 1 MB reduction)\n\n[1] http:\/\/cr.openjdk.java.net\/~njian\/8285790\/JDK-8285790.pdf\n[2] https:\/\/github.com\/openjdk\/panama-vector\/tree\/vectorIntrinsics\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\n\nCo-Developed-by: Ningsheng Jian <Ningsheng.Jian@arm.com>\nCo-Developed-by: Eric Liu <eric.c.liu@arm.com>"},"files":[{"filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp"},{"filename":"src\/hotspot\/share\/adlc\/output_c.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/regmask.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskedNotTest.java"}],"sha":"230bbda2221cf1682883c60e2c9f4d8337c60df2"}]