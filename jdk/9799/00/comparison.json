{"files":[{"patch":"@@ -1349,10 +1349,12 @@\n-        \/\/ This likely needs some refinement. Exploration of hidden\n-        \/\/ classes, array classes.  Location.CLASS allows SUPER and\n-        \/\/ AccessFlag.MODULE which INNER_CLASS forbids. INNER_CLASS\n-        \/\/ allows PRIVATE, PROTECTED, and STATIC, which are not\n-        \/\/ allowed on Location.CLASS.\n-        return AccessFlag.maskToAccessFlags(getModifiers(),\n-                                            (isMemberClass() || isLocalClass() ||\n-                                             isAnonymousClass() || isArray()) ?\n-                                            AccessFlag.Location.INNER_CLASS :\n-                                            AccessFlag.Location.CLASS);\n+        \/\/ Location.CLASS allows SUPER and AccessFlag.MODULE which\n+        \/\/ INNER_CLASS forbids. INNER_CLASS allows PRIVATE, PROTECTED,\n+        \/\/ and STATIC, which are not allowed on Location.CLASS.\n+        \/\/ Use getClassAccessFlagsRaw to expose SUPER status.\n+        var location = (isMemberClass() || isLocalClass() ||\n+                        isAnonymousClass() || isArray()) ?\n+            AccessFlag.Location.INNER_CLASS :\n+            AccessFlag.Location.CLASS;\n+        return AccessFlag.maskToAccessFlags((location == AccessFlag.Location.CLASS) ?\n+                                            getClassAccessFlagsRaw() :\n+                                            getModifiers(),\n+                                            location);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8266670\n+ * @bug 8266670 8291734\n@@ -49,5 +49,0 @@\n- *\n- * For a class, the VM must treat the class as if the ACC_SUPER bit\n- * were set, but that bit is cleared by HotSpot when it is passed out\n- * to the core reflection libraries. Therefore, this test does not\n- * attempt to check whether or not AccessFlag.SUPER is set.\n@@ -55,1 +50,1 @@\n-@ExpectedClassFlags(\"[PUBLIC, FINAL]\")\n+@ExpectedClassFlags(\"[PUBLIC, FINAL, SUPER]\")\n@@ -58,1 +53,1 @@\n-        \/\/ Top-level and axuillary classes; i.e. non-inner classes\n+        \/\/ Top-level and auxiliary classes; i.e. non-inner classes\n@@ -229,1 +224,1 @@\n-@ExpectedClassFlags(\"[FINAL, ENUM]\")\n+@ExpectedClassFlags(\"[FINAL, SUPER, ENUM]\")\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}