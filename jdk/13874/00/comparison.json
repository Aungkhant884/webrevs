{"files":[{"patch":"@@ -9700,0 +9700,1 @@\n+          <li><eventlink id=\"VirtualThreadStart\"><\/eventlink><\/li>\n@@ -12252,0 +12253,2 @@\n+      <li><eventlink id=\"VirtualThreadStart\"><\/eventlink><\/li>\n+      <li><eventlink id=\"VirtualThreadEnd\"><\/eventlink><\/li>\n@@ -12940,6 +12943,1 @@\n-      This event is generated by platform threads. It is also generated by\n-      virtual threads when the capability\n-      <internallink id=\"jvmtiCapabilities.can_support_virtual_threads\">\n-      <code>can_support_virtual_threads<\/code><\/internallink> is not enabled.\n-      Agents without support for virtual threads that enable this event will\n-      therefore be notified by all newly started threads.\n+      This event is generated by platform thread. It is not generated by virtual threads.\n@@ -12947,3 +12945,2 @@\n-      If the capability <code>can_support_virtual_threads<\/code> is enabled then\n-      this event is not generated by virtual threads. Agents with support for\n-      virtual threads can enable <eventlink id=\"VirtualThreadStart\"><\/eventlink>\n+      Agents with the <code>can_support_virtual_threads<\/code> capability\n+      can enable the <eventlink id=\"VirtualThreadStart\"><\/eventlink> event\n@@ -12987,6 +12984,1 @@\n-      This event is generated by platform threads. It is also generated by\n-      virtual threads when the capability\n-      <internallink id=\"jvmtiCapabilities.can_support_virtual_threads\">\n-      <code>can_support_virtual_threads<\/code><\/internallink> is not enabled.\n-      Agents without support for virtual threads that enable this event for\n-      all threads will therefore be notified by all terminating threads.\n+      This event is generated by platform thread. It is not generated by virtual threads.\n@@ -12994,3 +12986,2 @@\n-      If the capability <code>can_support_virtual_threads<\/code> is enabled then\n-      this event is not generated by virtual threads. Agents with support for\n-      virtual threads can enable <eventlink id=\"VirtualThreadEnd\"><\/eventlink>\n+      Agents with the <code>can_support_virtual_threads<\/code> capability\n+      can enable the <eventlink id=\"VirtualThreadEnd\"><\/eventlink> event\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1483,5 +1483,7 @@\n-  if (JvmtiExport::can_support_virtual_threads() && thread->threadObj()->is_a(vmClasses::BoundVirtualThread_klass())) {\n-    \/\/ Check for VirtualThreadStart event instead.\n-    HandleMark hm(thread);\n-    Handle vthread(thread, thread->threadObj());\n-    JvmtiExport::post_vthread_start((jthread)vthread.raw_value());\n+  if (thread->threadObj()->is_a(vmClasses::BoundVirtualThread_klass())) {\n+    if (JvmtiExport::can_support_virtual_threads()) {\n+      \/\/ Check for VirtualThreadStart event instead.\n+      HandleMark hm(thread);\n+      Handle vthread(thread, thread->threadObj());\n+      JvmtiExport::post_vthread_start((jthread)vthread.raw_value());\n+    }\n@@ -1527,5 +1529,7 @@\n-  if (JvmtiExport::can_support_virtual_threads() && thread->threadObj()->is_a(vmClasses::BoundVirtualThread_klass())) {\n-    \/\/ Check for VirtualThreadEnd event instead.\n-    HandleMark hm(thread);\n-    Handle vthread(thread, thread->threadObj());\n-    JvmtiExport::post_vthread_end((jthread)vthread.raw_value());\n+  if (thread->threadObj()->is_a(vmClasses::BoundVirtualThread_klass())) {\n+    if (JvmtiExport::can_support_virtual_threads()) {\n+      \/\/ Check for VirtualThreadEnd event instead.\n+      HandleMark hm(thread);\n+      Handle vthread(thread, thread->threadObj());\n+      JvmtiExport::post_vthread_end((jthread)vthread.raw_value());\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -529,0 +529,1 @@\n+  JvmtiEventController::thread_started(thread);\n@@ -530,1 +531,0 @@\n-    JvmtiEventController::thread_started(thread);\n@@ -534,6 +534,0 @@\n-  } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n-    if (PostVirtualThreadCompatibleLifecycleEvents &&\n-        JvmtiExport::should_post_thread_life()) {\n-      \/\/ JvmtiEventController::thread_started is called here\n-      JvmtiExport::post_thread_start(thread);\n-    }\n@@ -562,5 +556,0 @@\n-  } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n-    if (PostVirtualThreadCompatibleLifecycleEvents &&\n-        JvmtiExport::should_post_thread_life()) {\n-      JvmtiExport::post_thread_end(thread);\n-    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -701,4 +701,0 @@\n-  product(bool, PostVirtualThreadCompatibleLifecycleEvents, true, EXPERIMENTAL, \\\n-               \"Post virtual thread ThreadStart and ThreadEnd events for \"  \\\n-               \"virtual thread unaware agents\")                             \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    private static native boolean canSupportVirtualThreads();\n@@ -58,2 +59,2 @@\n-        } else {\n-            System.loadLibrary(AGENT_LIB);\n+\/\/        } else {\n+\/\/            System.loadLibrary(AGENT_LIB);\n@@ -67,0 +68,1 @@\n+        int expStartedThreads = canSupportVirtualThreads() ? THREAD_CNT : 0;\n@@ -68,2 +70,4 @@\n-        System.out.println(\"ThreadStart event count: \" + startedThreads + \", expected: \" + THREAD_CNT);\n-        if (startedThreads != THREAD_CNT) {\n+\n+        System.out.println(\"ThreadStart event count: \" + startedThreads + \", expected: \" + expStartedThreads);\n+\n+        if (startedThreads != expStartedThreads) {\n@@ -71,1 +75,1 @@\n-                                       startedThreads + \" expected: \" + THREAD_CNT);\n+                                       startedThreads + \" expected: \" + expStartedThreads);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/VirtualThreadStartTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    printf(\"VirtualThreadStart event: %s\\n\", tname);\n+    LOG(\"VirtualThreadStart event: %s\\n\", tname);\n@@ -76,0 +76,6 @@\n+JNIEXPORT jboolean JNICALL\n+Java_VirtualThreadStartTest_canSupportVirtualThreads(JNIEnv* jni, jclass clazz) {\n+  LOG(\"can_support_virtual_threads: %d\\n\", can_support_vt_enabled);\n+  return can_support_vt_enabled ? JNI_TRUE : JNI_FALSE;\n+}\n+\n@@ -119,2 +125,1 @@\n-  printf(\"agent_init: can_support_virtual_threads capability: %d\\n\",\n-         caps.can_support_virtual_threads);\n+  LOG(\"agent_init: can_support_virtual_threads: %d\\n\", caps.can_support_virtual_threads);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/libVirtualThreadStartTest.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}