{"files":[{"patch":"@@ -113,3 +113,1 @@\n-  for (size_t i = _n_outputs; i > 0; i--) {\n-    disable_output(i - 1);\n-  }\n+  disable_outputs();\n@@ -275,3 +273,2 @@\n-void LogConfiguration::disable_output(size_t idx) {\n-  assert(idx < _n_outputs, \"invalid index: \" SIZE_FORMAT \" (_n_outputs: \" SIZE_FORMAT \")\", idx, _n_outputs);\n-  LogOutput* out = _outputs[idx];\n+void LogConfiguration::disable_outputs() {\n+  size_t idx = _n_outputs;\n@@ -279,1 +276,1 @@\n-  \/\/ Remove the output from all tagsets.\n+  \/\/ Remove all outputs from all tagsets.\n@@ -281,2 +278,1 @@\n-    ts->set_output_level(out, LogLevel::Off);\n-    ts->update_decorators();\n+    ts->disable_outputs();\n@@ -285,5 +281,8 @@\n-  \/\/ Delete the output unless stdout or stderr (idx 0 or 1)\n-  if (idx > 1) {\n-    delete_output(idx);\n-  } else {\n-    out->set_config_string(\"all=off\");\n+  while (idx > 0) {\n+    LogOutput* out = _outputs[--idx];\n+    \/\/ Delete the output unless stdout or stderr (idx 0 or 1)\n+    if (idx > 1) {\n+      delete_output(idx);\n+    } else {\n+      out->set_config_string(\"all=off\");\n+    }\n@@ -295,2 +294,4 @@\n-  for (size_t i = _n_outputs; i > 0; i--) {\n-    disable_output(i - 1);\n+  disable_outputs();\n+  \/\/ Update the decorators on all tagsets to get rid of unused decorators\n+  for (LogTagSet* ts = LogTagSet::first(); ts != NULL; ts = ts->next()) {\n+    ts->update_decorators();\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-  \/\/ Disable all logging to the specified output and then delete it (unless it is stdout\/stderr).\n-  static void disable_output(size_t idx);\n+  \/\/ Disable all logging to all outputs. All outputs except stdout\/stderr will be deleted.\n+  static void disable_outputs();\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,0 +71,19 @@\n+void LogOutputList::clear() {\n+\n+  \/\/ Grab the linked list\n+  LogOutputNode* cur = _level_start[LogLevel::Last];\n+\n+  \/\/ Clear _level_start\n+  for (uint level = LogLevel::First; level < LogLevel::Count; level++) {\n+    _level_start[level] = NULL;\n+  }\n+\n+  \/\/ Delete all nodes from the linked list\n+  wait_until_no_readers();\n+  while (cur != NULL) {\n+    LogOutputNode* next = cur->_next;\n+    delete cur;\n+    cur = next;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logOutputList.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -91,0 +91,4 @@\n+  \/\/ Removes all outputs. Equivalent of set_output_level(out, Off)\n+  \/\/ for all outputs.\n+  void clear();\n+\n","filename":"src\/hotspot\/share\/logging\/logOutputList.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,0 +101,4 @@\n+  void disable_outputs() {\n+    _output_list.clear();\n+  }\n+\n","filename":"src\/hotspot\/share\/logging\/logTagSet.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}