{"files":[{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/flags\/jvmFlagLimit.hpp\"\n@@ -2273,0 +2274,5 @@\n+  \/\/ Make sure the above values match the range set in globals.hpp\n+  const JVMTypedFlagLimit<intx>* limit = JVMFlagLimit::get_range_at(FLAG_MEMBER_ENUM(ThreadStackSize))->cast<intx>();\n+  assert(min_ThreadStackSize == static_cast<julong>(limit->min()), \"must be\");\n+  assert(max_ThreadStackSize == static_cast<julong>(limit->max()), \"must be\");\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include <type_traits>\n@@ -293,0 +294,20 @@\n+  \/\/ type checking\n+#define CHECK_COMPATIBLE(type) \\\n+  case TYPE_##type: \\\n+    assert(sizeof(T) == sizeof(type) && \\\n+           std::is_integral<T>::value == std::is_integral<type>::value && \\\n+           std::is_signed  <T>::value == std::is_signed  <type>::value, \"must be\"); \\\n+    break;\n+\n+  template <typename T>\n+  static void assert_compatible_type(int type_enum) {\n+#ifndef PRODUCT\n+    switch (type_enum) {\n+      JVM_FLAG_NON_STRING_TYPES_DO(CHECK_COMPATIBLE);\n+      default: ShouldNotReachHere();\n+    }\n+#endif\n+  }\n+\n+#undef CHECK_COMPATIBLE\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-#define FLAG_LIMIT_DEFINE(      type, name, ...)       ); constexpr JVMTypedFlagLimit<type> limit_##name(0\n+#define FLAG_LIMIT_DEFINE(      type, name, ...)       ); constexpr JVMTypedFlagLimit<type> limit_##name(JVMFlag::TYPE_##type\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+template <typename T> class JVMTypedFlagLimit;\n+\n@@ -71,0 +73,4 @@\n+#ifdef ASSERT\n+  int   _type_enum;\n+#endif\n+\n@@ -100,1 +106,2 @@\n-  constexpr JVMFlagLimit(short func, short phase, short kind) : _constraint_func(func), _phase(phase), _kind(kind) {}\n+  constexpr JVMFlagLimit(int type_enum, short func, short phase, short kind)\n+    : _constraint_func(func), _phase(phase), _kind(kind) NOT_PRODUCT(COMMA _type_enum(type_enum)) {}\n@@ -133,0 +140,3 @@\n+\n+  template <typename T>\n+  const JVMTypedFlagLimit<T>* cast() const;\n@@ -147,2 +157,2 @@\n-  constexpr JVMTypedFlagLimit(int dummy) :\n-    JVMFlagLimit(0, 0, 0), _min(0), _max(0) {}\n+  constexpr JVMTypedFlagLimit(int type_enum) :\n+  JVMFlagLimit(0, 0, 0, 0), _min(0), _max(0) {}\n@@ -151,2 +161,2 @@\n-  constexpr JVMTypedFlagLimit(int dummy, T min, T max) :\n-    JVMFlagLimit(0, 0, HAS_RANGE), _min(min), _max(max) {}\n+  constexpr JVMTypedFlagLimit(int type_enum, T min, T max) :\n+    JVMFlagLimit(type_enum, 0, 0, HAS_RANGE), _min(min), _max(max) {}\n@@ -155,2 +165,2 @@\n-  constexpr JVMTypedFlagLimit(int dummy, ConstraintMarker dummy2, short func, int phase) :\n-    JVMFlagLimit(func, phase, HAS_CONSTRAINT), _min(0), _max(0) {}\n+  constexpr JVMTypedFlagLimit(int type_enum, ConstraintMarker dummy2, short func, int phase) :\n+    JVMFlagLimit(type_enum, func, phase, HAS_CONSTRAINT), _min(0), _max(0) {}\n@@ -159,2 +169,2 @@\n-  constexpr JVMTypedFlagLimit(int dummy, T min, T max, ConstraintMarker dummy2, short func, int phase)  :\n-    JVMFlagLimit(func, phase, HAS_RANGE | HAS_CONSTRAINT), _min(min), _max(max) {}\n+  constexpr JVMTypedFlagLimit(int type_enum, T min, T max, ConstraintMarker dummy2, short func, int phase)  :\n+    JVMFlagLimit(type_enum, func, phase, HAS_RANGE | HAS_CONSTRAINT), _min(min), _max(max) {}\n@@ -163,2 +173,2 @@\n-  constexpr JVMTypedFlagLimit(int dummy, ConstraintMarker dummy2, short func, int phase, T min, T max)  :\n-    JVMFlagLimit(func, phase, HAS_RANGE | HAS_CONSTRAINT), _min(min), _max(max) {}\n+  constexpr JVMTypedFlagLimit(int type_enum, ConstraintMarker dummy2, short func, int phase, T min, T max)  :\n+    JVMFlagLimit(type_enum, func, phase, HAS_RANGE | HAS_CONSTRAINT), _min(min), _max(max) {}\n@@ -170,0 +180,6 @@\n+template <typename T>\n+const JVMTypedFlagLimit<T>* JVMFlagLimit::cast() const {\n+  DEBUG_ONLY(JVMFlag::assert_compatible_type<T>(_type_enum));\n+  return static_cast<const JVMTypedFlagLimit<T>*>(this);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.hpp","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"}]}