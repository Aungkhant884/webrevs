{"files":[{"patch":"@@ -2271,0 +2271,4 @@\n+  const julong min_ThreadStackSize = 0;\n+  const julong max_ThreadStackSize = 1 * M;\n+\n+  \/\/ Make sure the above values match the range set in globals.hpp\n@@ -2272,2 +2276,5 @@\n-  const julong min_size = limit->min() * K;\n-  const julong max_size = limit->max() * K;\n+  assert(min_ThreadStackSize == static_cast<julong>(limit->min()), \"must be\");\n+  assert(max_ThreadStackSize == static_cast<julong>(limit->max()), \"must be\");\n+\n+  const julong min_size = min_ThreadStackSize * K;\n+  const julong max_size = max_ThreadStackSize * K;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -295,0 +295,6 @@\n+#define CHECK_COMPATIBLE(type) \\\n+  case TYPE_##type: \\\n+    assert(sizeof(T) == sizeof(type) && \\\n+           std::is_integral<T>::value == std::is_integral<type>::value && \\\n+           std::is_signed  <T>::value == std::is_signed  <type>::value, \"must be\"); break;\n+\n@@ -296,1 +302,1 @@\n-  static void assert_compatible_type(int flag_enum) {\n+  static void assert_compatible_type(int type_enum) {\n@@ -298,9 +304,2 @@\n-    if (std::is_integral<T>::value) {\n-      switch (flag_enum) {\n-      case TYPE_bool:     assert(sizeof(T) == sizeof(bool)     && std::is_signed<T>::value == std::is_signed<bool>    ::value, \"must be\"); break;\n-      case TYPE_int:      assert(sizeof(T) == sizeof(int)      && std::is_signed<T>::value == std::is_signed<int>     ::value, \"must be\"); break;\n-      case TYPE_uint:     assert(sizeof(T) == sizeof(uint)     && std::is_signed<T>::value == std::is_signed<uint>    ::value, \"must be\"); break;\n-      case TYPE_intx:     assert(sizeof(T) == sizeof(intx)     && std::is_signed<T>::value == std::is_signed<intx>    ::value, \"must be\"); break;\n-      case TYPE_uintx:    assert(sizeof(T) == sizeof(uintx)    && std::is_signed<T>::value == std::is_signed<uintx>   ::value, \"must be\"); break;\n-      case TYPE_uint64_t: assert(sizeof(T) == sizeof(uint64_t) && std::is_signed<T>::value == std::is_signed<uint64_t>::value, \"must be\"); break;\n-      case TYPE_size_t:   assert(sizeof(T) == sizeof(size_t)   && std::is_signed<T>::value == std::is_signed<size_t>  ::value, \"must be\"); break;\n+    switch (type_enum) {\n+      JVM_FLAG_NON_STRING_TYPES_DO(CHECK_COMPATIBLE);\n@@ -308,3 +307,0 @@\n-      }\n-    } else {\n-      assert(flag_enum == JVMFlag::TYPE_double, \"must be double\");\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -143,20 +143,0 @@\n-\n-  template <typename T>\n-  static void assert_compatible_type(int flag_enum) {\n-#ifndef PRODUCT\n-    if (std::is_integral<T>::value) {\n-      switch (flag_enum) {\n-      case JVMFlag::TYPE_bool:     assert(sizeof(T) == sizeof(bool)     && std::is_signed<T>::value == std::is_signed<bool>    ::value, \"must be\"); break;\n-      case JVMFlag::TYPE_int:      assert(sizeof(T) == sizeof(int)      && std::is_signed<T>::value == std::is_signed<int>     ::value, \"must be\"); break;\n-      case JVMFlag::TYPE_uint:     assert(sizeof(T) == sizeof(uint)     && std::is_signed<T>::value == std::is_signed<uint>    ::value, \"must be\"); break;\n-      case JVMFlag::TYPE_intx:     assert(sizeof(T) == sizeof(intx)     && std::is_signed<T>::value == std::is_signed<intx>    ::value, \"must be\"); break;\n-      case JVMFlag::TYPE_uintx:    assert(sizeof(T) == sizeof(uintx)    && std::is_signed<T>::value == std::is_signed<uintx>   ::value, \"must be\"); break;\n-      case JVMFlag::TYPE_uint64_t: assert(sizeof(T) == sizeof(uint64_t) && std::is_signed<T>::value == std::is_signed<uint64_t>::value, \"must be\"); break;\n-      case JVMFlag::TYPE_size_t:   assert(sizeof(T) == sizeof(size_t)   && std::is_signed<T>::value == std::is_signed<size_t>  ::value, \"must be\"); break;\n-      default: ShouldNotReachHere();\n-      }\n-    } else {\n-      assert(flag_enum == JVMFlag::TYPE_double, \"must be double\");\n-    }\n-#endif\n-  }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"}]}