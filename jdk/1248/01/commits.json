[{"commit":{"message":"uses pre-defined macro `right_n_bits` to get the right-most bits set.\n\nChange-Id: I456bcc883434b04527db912adaccc6a5f2dd96a0"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"29ed5d662e8704b1c3fa39001c58f7841a02eaee"},{"commit":{"message":"8256387: Unexpected result if patching an entire instruction on AArch64\n\nThis patch fixed some potential risks in assembler_aarch64.hpp.\n\nAccording to the C standard, shift operation is undefined if the shift\ncount greater than or equals to the length in bits of the promoted left\noperand.\n\nIn assembler_aarch64.hpp, there are some utility functions for easily\noperating the encoded instructions. E.g.\n\n        Instruction_aarch64::patch(address, int, int, uint64_t)\n\nAll those functions use `(1U << nbits) - 1` to calculate mask which may\nhave some potential risks if `nbits` equals 32. That would be an\nunexpected result if someone intends to deal with an entire instruction.\n\nTo fix this issue, this patch simply uses `1ULL` to replace `1U`.\n\nChange-Id: If977c8487056bbc2212d50f7c6f8a02533011eab"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"08ce2fbacdb1cd3836b4834ca99ed072585a1d5a"}]