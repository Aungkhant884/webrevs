{"files":[{"patch":"@@ -155,22 +155,0 @@\n-    \/**\n-     * Keep-Alive idle time and Keep-Alive retransmission interval time for Windows platforms.\n-     *\n-     * <p>\n-     * The value of this socket option is a {@code SioKeepAlive}, which represents the\n-     * Keep-Alive idle time and Keep-Alive retransmission interval time for Windows platforms.\n-     * Keep-Alive idle time is the number of seconds of idle time before Keep-Alive initiates\n-     * a probe. Keep-Alive retransmission interval time is the number of seconds to wait\n-     * before retransmitting a Keep-Alive probe. The socket option applies only to Windows\n-     * stream-oriented sockets using the TCP\/IP protocol.\n-     *\n-     * <p>\n-     * Setting this socket option enables {@link java.net.StandardSocketOptions#SO_KEEPALIVE\n-     * SO_KEEPALIVE} socket option. For Windows, the default Keep-Alive idle time is\n-     * 2 hours and the default Keep-Alive retransmission interval time is 1 second. On Windows\n-     * Vista and later, the number of Keep-Alive probes is set to 10 and cannot be changed.\n-     *\n-     * @since 21\n-     *\/\n-    public static final SocketOption<SioKeepAlive> TCP_SIO_KEEPALIVE =\n-            new ExtSocketOption<SioKeepAlive>(\"TCP_SIO_KEEPALIVE\", SioKeepAlive.class);\n-\n@@ -256,2 +234,0 @@\n-    private static final boolean sioKeepAliveOptSupported =\n-            platformSocketOptions.sioKeepAliveOptionsSupported();\n@@ -278,3 +254,0 @@\n-        if (sioKeepAliveOptSupported) {\n-            options.add(TCP_SIO_KEEPALIVE);\n-        }\n@@ -314,3 +287,0 @@\n-                } else if (option == TCP_SIO_KEEPALIVE) {\n-                    SioKeepAlive sioKeepAlive = (SioKeepAlive) value;\n-                    setTcpSioKeepAlive(fd, sioKeepAlive.getKeepAliveTime(), sioKeepAlive.getKeepAliveInterval());\n@@ -351,2 +321,0 @@\n-                } else if (option == TCP_SIO_KEEPALIVE) {\n-                    throw new SocketException(\"Acquiring option value for TCP_SIO_KEEPALIVE is not supported\");\n@@ -398,5 +366,0 @@\n-    private static void setTcpSioKeepAlive(FileDescriptor fd, int keepAliveTime, int keepAliveInterval)\n-            throws SocketException{\n-        platformSocketOptions.setTcpSioKeepAlive(fdAccess.get(fd), keepAliveTime, keepAliveInterval);\n-    }\n-\n@@ -474,4 +437,0 @@\n-        boolean sioKeepAliveOptionsSupported() {\n-            return false;\n-        }\n-\n@@ -498,4 +457,0 @@\n-        void setTcpSioKeepAlive(int fd, final int keepAliveTime, final int keepAliveInterval) throws SocketException {\n-            throw new UnsupportedOperationException(\"unsupported TCP_SIO_KEEPALIVE option\");\n-        }\n-\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/ExtendedSocketOptions.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-package jdk.net;\n-\n-\/**\n- * Represents the Keep-Alive idle time and Keep-Alive retransmission\n- * interval time for Windows platforms.\n- *\n- * @since 21\n- *\/\n-public class SioKeepAlive {\n-    private final int keepAliveTime;\n-    private final int keepAliveInterval;\n-\n-    \/**\n-     * Creates a SioKeepAlive object.\n-     *\n-     * @param keepAliveTime the number seconds before keep-alive initiates a probe\n-     * @param keepAliveInterval the number of seconds to wait before retransmitting a keep-alive probe\n-     *\/\n-    public SioKeepAlive(int keepAliveTime, int keepAliveInterval) {\n-        this.keepAliveTime = keepAliveTime;\n-        this.keepAliveInterval = keepAliveInterval;\n-    }\n-\n-    int getKeepAliveTime() {\n-        return keepAliveTime;\n-    }\n-\n-    int getKeepAliveInterval() {\n-        return keepAliveInterval;\n-    }\n-}\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/SioKeepAlive.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -40,1 +40,1 @@\n-    boolean sioKeepAliveOptionsSupported() {\n+    boolean ipDontFragmentSupported() {\n@@ -45,2 +45,2 @@\n-    boolean ipDontFragmentSupported() {\n-        return true;\n+    boolean keepAliveOptionsSupported() {\n+        return keepAliveOptionsSupported0();\n@@ -60,2 +60,27 @@\n-    void setTcpSioKeepAlive(int fd, final int keepAliveTime, final int keepAliveInterval) throws  SocketException {\n-        setTcpKeepAlive0(fd, keepAliveTime * 1000, keepAliveInterval * 1000);\n+    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpkeepAliveProbes0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpkeepAliveProbes(int fd) throws SocketException {\n+        return getTcpkeepAliveProbes0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveTime(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveTime0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveTime(int fd) throws SocketException {\n+        return getTcpKeepAliveTime0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveIntvl(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveIntvl0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveIntvl(int fd) throws SocketException {\n+        return getTcpKeepAliveIntvl0(fd);\n@@ -64,0 +89,1 @@\n+    private static native boolean keepAliveOptionsSupported0();\n@@ -66,1 +92,6 @@\n-    private static native void setTcpKeepAlive0(int fd, int keepAliveTime, int keepAliveIntvl) throws SocketException;\n+    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveTime0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveTime0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveIntvl0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveIntvl0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/windows\/classes\/jdk\/net\/WindowsSocketOptions.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include <winsock2.h>\n-#include <mstcpip.h>\n@@ -29,0 +27,1 @@\n+#include <winsock2.h>\n@@ -38,1 +37,2 @@\n-        if (errno == ENOPROTOOPT) {\n+        int error = WSAGetLastError();\n+        if (error == WSAENOPROTOOPT) {\n@@ -47,0 +47,51 @@\n+static jint socketOptionSupported(jint level, jint optname) {\n+    WSADATA wsaData;\n+    jint error = WSAStartup(MAKEWORD(2, 2), &wsaData);\n+\n+    if (error != 0) {\n+        return 0;\n+    }\n+\n+    SOCKET sock;\n+    jint one = 1;\n+    jint rv;\n+    socklen_t sz = sizeof(one);\n+\n+    \/* First try IPv6; fall back to IPv4. *\/\n+    sock = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);\n+    if (sock == INVALID_SOCKET) {\n+        error = WSAGetLastError();\n+        if (error == WSAEPFNOSUPPORT || error == WSAEAFNOSUPPORT) {\n+            sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        }\n+        if (sock == INVALID_SOCKET) {\n+            return 0;\n+        }\n+    }\n+\n+    rv = getsockopt(sock, level, optname, (char*) &one, &sz);\n+    error = WSAGetLastError();\n+\n+    if (rv != 0 && error == WSAENOPROTOOPT) {\n+        rv = 0;\n+    } else {\n+        rv = 1;\n+    }\n+\n+    closesocket(sock);\n+    WSACleanup();\n+\n+    return rv;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    keepAliveOptionsSupported0\n+ * Signature: ()Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_jdk_net_WindowsSocketOptions_keepAliveOptionsSupported0\n+(JNIEnv *env, jobject unused) {\n+    return socketOptionSupported(IPPROTO_TCP, TCP_KEEPIDLE) && socketOptionSupported(IPPROTO_TCP, TCP_KEEPCNT)\n+            && socketOptionSupported(IPPROTO_TCP, TCP_KEEPINTVL);\n+}\n+\n@@ -109,2 +160,63 @@\n- * Method:    setTcpKeepAlive0\n- * Signature: (III)V\n+ * Method:    setTcpkeepAliveProbes0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpkeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPCNT failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpkeepAliveProbes0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpkeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPCNT failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveTime0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPIDLE failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveTime0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPIDLE failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveIntvl0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPINTVL failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveIntvl0\n+ * Signature: (I)I;\n@@ -112,12 +224,7 @@\n-JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAlive0\n-(JNIEnv *env, jobject unused, jint fd, jint keepAliveTime, jint keepAliveIntvl) {\n-    DWORD dwBytes;\n-    int rv;\n-    struct tcp_keepalive keepalive;\n-\n-    keepalive.onoff = TRUE;\n-    keepalive.keepalivetime = keepAliveTime;\n-    keepalive.keepaliveinterval = keepAliveIntvl;\n-\n-    rv = WSAIoctl(fd, SIO_KEEPALIVE_VALS, &keepalive, sizeof(keepalive), NULL, 0, &dwBytes, NULL, NULL);\n-    handleError(env, rv, \"set options SIO_KEEPALIVE_VALS failed\");\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPINTVL failed\");\n+    return optval;\n","filename":"src\/jdk.net\/windows\/native\/libextnet\/WindowsSocketOptions.c","additions":124,"deletions":17,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.net.SioKeepAlive;\n@@ -111,3 +110,0 @@\n-            field = c.getField(\"TCP_SIO_KEEPALIVE\");\n-            map.put((SocketOption<?>)field.get(null), listOf(new SioKeepAlive(10, 10),\n-                    new SioKeepAlive(100, 100)));\n","filename":"test\/jdk\/java\/net\/SocketOption\/AfterClose.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.net.SioKeepAlive;\n-\n-import static java.net.StandardSocketOptions.SO_KEEPALIVE;\n@@ -48,1 +45,0 @@\n-    private static final SioKeepAlive DEFAULT_SIO_KEEP_ALIVE = new SioKeepAlive(1995, 25);\n@@ -92,9 +88,0 @@\n-            if (ss.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n-                ss.setOption(ExtendedSocketOptions.TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE); \/\/ can't check\n-            }\n-            if (s.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n-                s.setOption(ExtendedSocketOptions.TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE);\n-                if (!s.getOption(SO_KEEPALIVE)) {\n-                    throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE should have been set\");\n-                }\n-            }\n@@ -125,9 +112,0 @@\n-            if (ds.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n-                throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE is applicable\"\n-                        + \" for TCP Sockets on Windows only.\");\n-            }\n-\n-            if (mc.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n-                throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE is applicable\"\n-                        + \" for TCP Sockets on Windows only\");\n-            }\n","filename":"test\/jdk\/java\/net\/SocketOption\/TcpKeepAliveTest.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import jdk.net.SioKeepAlive;\n-\n@@ -45,1 +43,0 @@\n-import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n@@ -187,4 +184,0 @@\n-            List<? extends SocketOption> windowsExtOptions = List.of(TCP_SIO_KEEPALIVE);\n-            if (options.containsAll(windowsExtOptions)) {\n-                ch.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123)); \/\/ can't check\n-            }\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousServerSocketChannel\/Basic.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-\n-import jdk.net.SioKeepAlive;\n@@ -51,1 +49,0 @@\n-import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n@@ -204,6 +201,0 @@\n-\n-            List<? extends SocketOption> windowsExtOptions = List.of(TCP_SIO_KEEPALIVE);\n-            if (options.containsAll(windowsExtOptions)) {\n-                ch.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123));\n-                checkOption(ch, SO_KEEPALIVE, true);\n-            }\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousSocketChannel\/Basic.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import jdk.net.SioKeepAlive;\n-\n@@ -48,1 +46,0 @@\n-    private static final SioKeepAlive DEFAULT_SIO_KEEP_ALIVE = new SioKeepAlive(1995, 25);\n@@ -97,3 +94,0 @@\n-        if (ssc.supportedOptions().containsAll(List.of(TCP_SIO_KEEPALIVE))) {\n-            ssc.setOption(TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE); \/\/ can't check\n-        }\n","filename":"test\/jdk\/java\/nio\/channels\/ServerSocketChannel\/SocketOptionTests.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-\n-import jdk.net.SioKeepAlive;\n@@ -66,1 +64,0 @@\n-        Set<SocketOption<?>> windowsKeepAliveOptions = Set.of(TCP_SIO_KEEPALIVE);\n@@ -68,1 +65,0 @@\n-        boolean windowsKeepAliveOptionsSupported = extendedOptions.containsAll(windowsKeepAliveOptions);\n@@ -74,2 +70,0 @@\n-        } else if (windowsKeepAliveOptionsSupported) {\n-            expected = Set.of(TCP_SIO_KEEPALIVE);\n@@ -151,4 +145,0 @@\n-        if (windowsKeepAliveOptionsSupported) {\n-            sc.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123));\n-            checkOption(sc, SO_KEEPALIVE, true);\n-        }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/SocketOptionTests.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n-\n@@ -68,7 +66,5 @@\n-                if (!opt.equals(TCP_SIO_KEEPALIVE)) { \/\/ can't get\n-                    Object value = ch.getOption(opt);\n-                    System.out.format(\" %s -> %s%n\", opt.name(), value);\n-                    if (!READ_ONLY_OPTS.contains(opt.name())) {\n-                        if (value != null)\n-                            ch.setOption((SocketOption<Object>) opt, value);\n-                    }\n+                Object value = ch.getOption(opt);\n+                System.out.format(\" %s -> %s%n\", opt.name(), value);\n+                if (!READ_ONLY_OPTS.contains(opt.name())) {\n+                    if (value != null)\n+                        ch.setOption((SocketOption<Object>) opt, value);\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/PrintSupportedOptions.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}