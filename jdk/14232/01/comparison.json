{"files":[{"patch":"@@ -44,0 +44,5 @@\n+    @Override\n+    boolean keepAliveOptionsSupported() {\n+        return keepAliveOptionsSupported0();\n+    }\n+\n@@ -54,0 +59,31 @@\n+    @Override\n+    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpkeepAliveProbes0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpkeepAliveProbes(int fd) throws SocketException {\n+        return getTcpkeepAliveProbes0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveTime(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveTime0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveTime(int fd) throws SocketException {\n+        return getTcpKeepAliveTime0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveIntvl(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveIntvl0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveIntvl(int fd) throws SocketException {\n+        return getTcpKeepAliveIntvl0(fd);\n+    }\n+\n+    private static native boolean keepAliveOptionsSupported0();\n@@ -56,0 +92,6 @@\n+    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveTime0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveTime0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveIntvl0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveIntvl0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/windows\/classes\/jdk\/net\/WindowsSocketOptions.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-        if (errno == ENOPROTOOPT) {\n+        int error = WSAGetLastError();\n+        if (error == WSAENOPROTOOPT) {\n@@ -46,0 +47,51 @@\n+static jint socketOptionSupported(jint level, jint optname) {\n+    WSADATA wsaData;\n+    jint error = WSAStartup(MAKEWORD(2, 2), &wsaData);\n+\n+    if (error != 0) {\n+        return 0;\n+    }\n+\n+    SOCKET sock;\n+    jint one = 1;\n+    jint rv;\n+    socklen_t sz = sizeof(one);\n+\n+    \/* First try IPv6; fall back to IPv4. *\/\n+    sock = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);\n+    if (sock == INVALID_SOCKET) {\n+        error = WSAGetLastError();\n+        if (error == WSAEPFNOSUPPORT || error == WSAEAFNOSUPPORT) {\n+            sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        }\n+        if (sock == INVALID_SOCKET) {\n+            return 0;\n+        }\n+    }\n+\n+    rv = getsockopt(sock, level, optname, (char*) &one, &sz);\n+    error = WSAGetLastError();\n+\n+    if (rv != 0 && error == WSAENOPROTOOPT) {\n+        rv = 0;\n+    } else {\n+        rv = 1;\n+    }\n+\n+    closesocket(sock);\n+    WSACleanup();\n+\n+    return rv;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    keepAliveOptionsSupported0\n+ * Signature: ()Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_jdk_net_WindowsSocketOptions_keepAliveOptionsSupported0\n+(JNIEnv *env, jobject unused) {\n+    return socketOptionSupported(IPPROTO_TCP, TCP_KEEPIDLE) && socketOptionSupported(IPPROTO_TCP, TCP_KEEPCNT)\n+            && socketOptionSupported(IPPROTO_TCP, TCP_KEEPINTVL);\n+}\n+\n@@ -106,0 +158,75 @@\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpkeepAliveProbes0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpkeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPCNT failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpkeepAliveProbes0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpkeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPCNT failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveTime0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPIDLE failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveTime0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPIDLE failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveIntvl0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPINTVL failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveIntvl0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPINTVL failed\");\n+    return optval;\n+}\n+\n","filename":"src\/jdk.net\/windows\/native\/libextnet\/WindowsSocketOptions.c","additions":128,"deletions":1,"binary":false,"changes":129,"status":"modified"}]}