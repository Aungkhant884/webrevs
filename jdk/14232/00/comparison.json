{"files":[{"patch":"@@ -155,0 +155,22 @@\n+    \/**\n+     * Keep-Alive idle time and Keep-Alive retransmission interval time for Windows platforms.\n+     *\n+     * <p>\n+     * The value of this socket option is a {@code SioKeepAlive}, which represents the\n+     * Keep-Alive idle time and Keep-Alive retransmission interval time for Windows platforms.\n+     * Keep-Alive idle time is the number of seconds of idle time before Keep-Alive initiates\n+     * a probe. Keep-Alive retransmission interval time is the number of seconds to wait\n+     * before retransmitting a Keep-Alive probe. The socket option applies only to Windows\n+     * stream-oriented sockets using the TCP\/IP protocol.\n+     *\n+     * <p>\n+     * Setting this socket option enables {@link java.net.StandardSocketOptions#SO_KEEPALIVE\n+     * SO_KEEPALIVE} socket option. For Windows, the default Keep-Alive idle time is\n+     * 2 hours and the default Keep-Alive retransmission interval time is 1 second. On Windows\n+     * Vista and later, the number of Keep-Alive probes is set to 10 and cannot be changed.\n+     *\n+     * @since 21\n+     *\/\n+    public static final SocketOption<SioKeepAlive> TCP_SIO_KEEPALIVE =\n+            new ExtSocketOption<SioKeepAlive>(\"TCP_SIO_KEEPALIVE\", SioKeepAlive.class);\n+\n@@ -234,0 +256,2 @@\n+    private static final boolean sioKeepAliveOptSupported =\n+            platformSocketOptions.sioKeepAliveOptionsSupported();\n@@ -254,0 +278,3 @@\n+        if (sioKeepAliveOptSupported) {\n+            options.add(TCP_SIO_KEEPALIVE);\n+        }\n@@ -287,0 +314,3 @@\n+                } else if (option == TCP_SIO_KEEPALIVE) {\n+                    SioKeepAlive sioKeepAlive = (SioKeepAlive) value;\n+                    setTcpSioKeepAlive(fd, sioKeepAlive.getKeepAliveTime(), sioKeepAlive.getKeepAliveInterval());\n@@ -321,0 +351,2 @@\n+                } else if (option == TCP_SIO_KEEPALIVE) {\n+                    throw new SocketException(\"Acquiring option value for TCP_SIO_KEEPALIVE is not supported\");\n@@ -366,0 +398,5 @@\n+    private static void setTcpSioKeepAlive(FileDescriptor fd, int keepAliveTime, int keepAliveInterval)\n+            throws SocketException{\n+        platformSocketOptions.setTcpSioKeepAlive(fdAccess.get(fd), keepAliveTime, keepAliveInterval);\n+    }\n+\n@@ -437,0 +474,4 @@\n+        boolean sioKeepAliveOptionsSupported() {\n+            return false;\n+        }\n+\n@@ -457,0 +498,4 @@\n+        void setTcpSioKeepAlive(int fd, final int keepAliveTime, final int keepAliveInterval) throws SocketException {\n+            throw new UnsupportedOperationException(\"unsupported TCP_SIO_KEEPALIVE option\");\n+        }\n+\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/ExtendedSocketOptions.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+package jdk.net;\n+\n+\/**\n+ * Represents the Keep-Alive idle time and Keep-Alive retransmission\n+ * interval time for Windows platforms.\n+ *\n+ * @since 21\n+ *\/\n+public class SioKeepAlive {\n+    private final int keepAliveTime;\n+    private final int keepAliveInterval;\n+\n+    \/**\n+     * Creates a SioKeepAlive object.\n+     *\n+     * @param keepAliveTime the number seconds before keep-alive initiates a probe\n+     * @param keepAliveInterval the number of seconds to wait before retransmitting a keep-alive probe\n+     *\/\n+    public SioKeepAlive(int keepAliveTime, int keepAliveInterval) {\n+        this.keepAliveTime = keepAliveTime;\n+        this.keepAliveInterval = keepAliveInterval;\n+    }\n+\n+    int getKeepAliveTime() {\n+        return keepAliveTime;\n+    }\n+\n+    int getKeepAliveInterval() {\n+        return keepAliveInterval;\n+    }\n+}\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/SioKeepAlive.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -39,0 +39,5 @@\n+    @Override\n+    boolean sioKeepAliveOptionsSupported() {\n+        return true;\n+    }\n+\n@@ -54,0 +59,5 @@\n+    @Override\n+    void setTcpSioKeepAlive(int fd, final int keepAliveTime, final int keepAliveInterval) throws  SocketException {\n+        setTcpKeepAlive0(fd, keepAliveTime * 1000, keepAliveInterval * 1000);\n+    }\n+\n@@ -56,0 +66,1 @@\n+    private static native void setTcpKeepAlive0(int fd, int keepAliveTime, int keepAliveIntvl) throws SocketException;\n","filename":"src\/jdk.net\/windows\/classes\/jdk\/net\/WindowsSocketOptions.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include <windows.h>\n@@ -28,0 +27,2 @@\n+#include <mstcpip.h>\n+#include <windows.h>\n@@ -106,0 +107,19 @@\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAlive0\n+ * Signature: (III)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAlive0\n+(JNIEnv *env, jobject unused, jint fd, jint keepAliveTime, jint keepAliveIntvl) {\n+    DWORD dwBytes;\n+    int rv;\n+    struct tcp_keepalive keepalive;\n+\n+    keepalive.onoff = TRUE;\n+    keepalive.keepalivetime = keepAliveTime;\n+    keepalive.keepaliveinterval = keepAliveIntvl;\n+\n+    rv = WSAIoctl(fd, SIO_KEEPALIVE_VALS, &keepalive, sizeof(keepalive), NULL, 0, &dwBytes, NULL, NULL);\n+    handleError(env, rv, \"set options SIO_KEEPALIVE_VALS failed\");\n+}\n+\n","filename":"src\/jdk.net\/windows\/native\/libextnet\/WindowsSocketOptions.c","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import jdk.net.SioKeepAlive;\n@@ -110,0 +111,3 @@\n+            field = c.getField(\"TCP_SIO_KEEPALIVE\");\n+            map.put((SocketOption<?>)field.get(null), listOf(new SioKeepAlive(10, 10),\n+                    new SioKeepAlive(100, 100)));\n","filename":"test\/jdk\/java\/net\/SocketOption\/AfterClose.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+import jdk.net.SioKeepAlive;\n+\n+import static java.net.StandardSocketOptions.SO_KEEPALIVE;\n@@ -45,0 +48,1 @@\n+    private static final SioKeepAlive DEFAULT_SIO_KEEP_ALIVE = new SioKeepAlive(1995, 25);\n@@ -88,0 +92,9 @@\n+            if (ss.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n+                ss.setOption(ExtendedSocketOptions.TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE); \/\/ can't check\n+            }\n+            if (s.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n+                s.setOption(ExtendedSocketOptions.TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE);\n+                if (!s.getOption(SO_KEEPALIVE)) {\n+                    throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE should have been set\");\n+                }\n+            }\n@@ -112,0 +125,9 @@\n+            if (ds.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n+                throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE is applicable\"\n+                        + \" for TCP Sockets on Windows only.\");\n+            }\n+\n+            if (mc.supportedOptions().contains(ExtendedSocketOptions.TCP_SIO_KEEPALIVE)) {\n+                throw new RuntimeException(\"Test failed, TCP_SIO_KEEPALIVE is applicable\"\n+                        + \" for TCP Sockets on Windows only\");\n+            }\n","filename":"test\/jdk\/java\/net\/SocketOption\/TcpKeepAliveTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.net.SioKeepAlive;\n+\n@@ -43,0 +45,1 @@\n+import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n@@ -184,0 +187,4 @@\n+            List<? extends SocketOption> windowsExtOptions = List.of(TCP_SIO_KEEPALIVE);\n+            if (options.containsAll(windowsExtOptions)) {\n+                ch.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123)); \/\/ can't check\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousServerSocketChannel\/Basic.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+\n+import jdk.net.SioKeepAlive;\n@@ -49,0 +51,1 @@\n+import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n@@ -201,0 +204,6 @@\n+\n+            List<? extends SocketOption> windowsExtOptions = List.of(TCP_SIO_KEEPALIVE);\n+            if (options.containsAll(windowsExtOptions)) {\n+                ch.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123));\n+                checkOption(ch, SO_KEEPALIVE, true);\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousSocketChannel\/Basic.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.net.SioKeepAlive;\n+\n@@ -46,0 +48,1 @@\n+    private static final SioKeepAlive DEFAULT_SIO_KEEP_ALIVE = new SioKeepAlive(1995, 25);\n@@ -94,0 +97,3 @@\n+        if (ssc.supportedOptions().containsAll(List.of(TCP_SIO_KEEPALIVE))) {\n+            ssc.setOption(TCP_SIO_KEEPALIVE, DEFAULT_SIO_KEEP_ALIVE); \/\/ can't check\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/ServerSocketChannel\/SocketOptionTests.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+\n+import jdk.net.SioKeepAlive;\n@@ -64,0 +66,1 @@\n+        Set<SocketOption<?>> windowsKeepAliveOptions = Set.of(TCP_SIO_KEEPALIVE);\n@@ -65,0 +68,1 @@\n+        boolean windowsKeepAliveOptionsSupported = extendedOptions.containsAll(windowsKeepAliveOptions);\n@@ -70,0 +74,2 @@\n+        } else if (windowsKeepAliveOptionsSupported) {\n+            expected = Set.of(TCP_SIO_KEEPALIVE);\n@@ -145,0 +151,4 @@\n+        if (windowsKeepAliveOptionsSupported) {\n+            sc.setOption(TCP_SIO_KEEPALIVE, new SioKeepAlive(1234, 123));\n+            checkOption(sc, SO_KEEPALIVE, true);\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/SocketOptionTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import static jdk.net.ExtendedSocketOptions.TCP_SIO_KEEPALIVE;\n+\n@@ -66,5 +68,7 @@\n-                Object value = ch.getOption(opt);\n-                System.out.format(\" %s -> %s%n\", opt.name(), value);\n-                if (!READ_ONLY_OPTS.contains(opt.name())) {\n-                    if (value != null)\n-                        ch.setOption((SocketOption<Object>) opt, value);\n+                if (!opt.equals(TCP_SIO_KEEPALIVE)) { \/\/ can't get\n+                    Object value = ch.getOption(opt);\n+                    System.out.format(\" %s -> %s%n\", opt.name(), value);\n+                    if (!READ_ONLY_OPTS.contains(opt.name())) {\n+                        if (value != null)\n+                            ch.setOption((SocketOption<Object>) opt, value);\n+                    }\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/PrintSupportedOptions.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}