{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.awt.Dimension;\n@@ -41,1 +40,0 @@\n-import java.awt.event.KeyEvent;\n@@ -43,0 +41,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.lang.reflect.InvocationTargetException;\n@@ -118,4 +118,1 @@\n-        Point p = c.getLocationOnScreen();\n-        Dimension size = c.getSize();\n-        p.x += size.width \/ 2;\n-        p.y += size.height \/ 2;\n+        Point p = getCenterPoint(c);\n@@ -126,0 +123,18 @@\n+    private static Point getCenterPoint(Component c) {\n+        AtomicReference<Point> result = new AtomicReference<>();\n+        if (SwingUtilities.isEventDispatchThread()) {\n+            result.set(getCenterPointImpl(c));\n+        } else {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> result.set(getCenterPointImpl(c)));\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return result.get();\n+    }\n+\n+    private static Point getCenterPointImpl(Component c) {\n+        return centerOf(new Rectangle(c.getLocationOnScreen(), c.getSize()));\n+    }\n+\n@@ -156,1 +171,1 @@\n-        clickMouse(InputEvent.BUTTON1_MASK);\n+        clickMouse(InputEvent.BUTTON1_DOWN_MASK);\n@@ -174,1 +189,1 @@\n-        clickMouseOn(c, InputEvent.BUTTON1_MASK);\n+        clickMouseOn(c, InputEvent.BUTTON1_DOWN_MASK);\n@@ -222,2 +237,2 @@\n-    public Point centerOf(Rectangle r) {\n-        return new Point(r.x + r.width \/ 2, r.y + r.height \/ 2);\n+    public static Point centerOf(Rectangle r) {\n+        return centerOf(r, new Point());\n@@ -232,1 +247,1 @@\n-    public Point centerOf(Rectangle r, Point p) {\n+    public static Point centerOf(Rectangle r, Point p) {\n@@ -245,4 +260,11 @@\n-        Point p = new Point(r.x, r.y);\n-        SwingUtilities.convertPointToScreen(p, c);\n-        r.x = p.x;\n-        r.y = p.y;\n+        AtomicReference<Point> p = new AtomicReference<>();\n+        if (SwingUtilities.isEventDispatchThread()) {\n+            p.set(c.getLocationOnScreen());\n+        } else {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> p.set(c.getLocationOnScreen()));\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        r.setLocation(p.get());\n@@ -292,1 +314,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/regtesthelpers\/JRobot.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"}]}