{"files":[{"patch":"@@ -115,2 +115,2 @@\n-        Objects.requireNonNull(annotationType);\n-        Objects.requireNonNull(values);\n+        Objects.requireNonNull(annotationType, \"annotationType\");\n+        Objects.requireNonNull(values, \"values\");\n@@ -295,1 +295,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -317,1 +317,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/AnnotationElement.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        Objects.requireNonNull(path);\n+        Objects.requireNonNull(path, \"path\");\n@@ -159,1 +159,1 @@\n-        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(reader, \"reader\");\n@@ -180,0 +180,1 @@\n+        Objects.requireNonNull(name, \"name\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Configuration.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-        Objects.requireNonNull(fields);\n-        Objects.requireNonNull(annotationElements);\n+        Objects.requireNonNull(annotationElements, \"annotationElements\");\n+        Objects.requireNonNull(fields, \"fields\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -58,2 +59,4 @@\n-             delegate.with(name, value);\n-             return this;\n+            Objects.requireNonNull(name, \"name\");\n+            Objects.requireNonNull(value, \"value\");\n+            delegate.with(name, value);\n+            return this;\n@@ -114,0 +117,1 @@\n+        Objects.requireNonNull(duration, \"duration\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventSettings.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -184,1 +184,1 @@\n-        Objects.requireNonNull(annotationClass);\n+        Objects.requireNonNull(annotationClass, \"annotationClass\");\n@@ -201,1 +201,1 @@\n-        Objects.requireNonNull(eventClass);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        Objects.requireNonNull(eventClass);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n@@ -145,1 +145,1 @@\n-        Objects.requireNonNull(eventClass);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n@@ -218,2 +218,2 @@\n-        Objects.requireNonNull(eventClass);\n-        Objects.requireNonNull(hook);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n+        Objects.requireNonNull(hook, \"hook\");\n@@ -240,1 +240,1 @@\n-        Objects.requireNonNull(hook);\n+        Objects.requireNonNull(hook, \"hook\");\n@@ -277,1 +277,1 @@\n-        Objects.requireNonNull(changeListener);\n+        Objects.requireNonNull(changeListener, \"changeListener\");\n@@ -301,1 +301,1 @@\n-        Objects.requireNonNull(changeListener);\n+        Objects.requireNonNull(changeListener, \"changeListener\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-        super(Objects.requireNonNull(name));\n+        super(Objects.requireNonNull(name, \"name\"));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderPermission.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-            Objects.requireNonNull(value);\n+            Objects.requireNonNull(name, \"name\");\n+            Objects.requireNonNull(value, \"value\");\n@@ -104,1 +105,1 @@\n-        Objects.requireNonNull(settings);\n+        Objects.requireNonNull(settings, \"settings\");\n@@ -158,1 +159,1 @@\n-        this(configuration.getSettings());\n+        this(Objects.requireNonNull(configuration, \"configuration\").getSettings());\n@@ -190,1 +191,1 @@\n-        Objects.requireNonNull(delay);\n+        Objects.requireNonNull(delay, \"delay\");\n@@ -321,1 +322,1 @@\n-        Objects.requireNonNull(settings);\n+        Objects.requireNonNull(settings, \"settings\");\n@@ -378,1 +379,1 @@\n-        Objects.requireNonNull(destination);\n+        Objects.requireNonNull(destination, \"destination\");\n@@ -512,1 +513,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -622,1 +623,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -643,1 +644,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -660,1 +661,1 @@\n-        Objects.requireNonNull(eventClass);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n@@ -678,1 +679,1 @@\n-        Objects.requireNonNull(eventClass);\n+        Objects.requireNonNull(eventClass, \"eventClass\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -142,1 +142,3 @@\n-        Objects.requireNonNull(annotations);\n+        Objects.requireNonNull(type, \"type\");\n+        Objects.requireNonNull(name, \"name\");\n+        Objects.requireNonNull(annotations, \"annotations\");\n@@ -274,1 +276,1 @@\n-        Objects.requireNonNull(annotationType);\n+        Objects.requireNonNull(annotationType, \"annotationType\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/ValueDescriptor.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-        Objects.requireNonNull(directory);\n+        Objects.requireNonNull(directory, \"directory\");\n@@ -182,0 +182,1 @@\n+        Objects.requireNonNull(file, \"file\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/EventStream.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n@@ -339,1 +339,1 @@\n-        Objects.requireNonNull(name);\n+        Objects.requireNonNull(name, \"name\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-\n@@ -84,0 +83,1 @@\n+        Objects.requireNonNull(file, \"file\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,0 +100,4 @@\n+        this(Map.of());\n+    }\n+\n+    private RecordingStream(Map<String, String> settings) {\n@@ -120,0 +124,3 @@\n+        if (!settings.isEmpty()) {\n+            recording.setSettings(settings);\n+        }\n@@ -151,2 +158,1 @@\n-        this();\n-        recording.setSettings(configuration.getSettings());\n+        this(Objects.requireNonNull(configuration, \"configuration\").getSettings());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        Objects.requireNonNull(startTime);\n+        Objects.requireNonNull(startTime, \"startTime\");\n@@ -128,1 +128,1 @@\n-        Objects.requireNonNull(endTime);\n+        Objects.requireNonNull(endTime, \"endTime\");\n@@ -139,1 +139,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n@@ -145,2 +145,2 @@\n-        Objects.requireNonNull(eventName);\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(eventName, \"eventName\");\n+        Objects.requireNonNull(action, \"action\");\n@@ -152,1 +152,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n@@ -158,1 +158,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n@@ -164,1 +164,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n@@ -170,1 +170,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n@@ -181,1 +181,1 @@\n-        Objects.requireNonNull(timeout);\n+        Objects.requireNonNull(timeout, \"timeout\");\n@@ -301,1 +301,1 @@\n-        Objects.requireNonNull(action);\n+        Objects.requireNonNull(action, \"action\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/AbstractEventStream.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    public EventFileStream(@SuppressWarnings(\"removal\") AccessControlContext acc, Path path) throws IOException {\n+    public EventFileStream(@SuppressWarnings(\"removal\") AccessControlContext acc, Path file) throws IOException {\n@@ -51,2 +51,1 @@\n-        Objects.requireNonNull(path);\n-        this.input = new RecordingInput(path.toFile(), FileAccess.UNPRIVILEGED);\n+        this.input = new RecordingInput(file.toFile(), FileAccess.UNPRIVILEGED);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventFileStream.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -218,2 +218,2 @@\n-    public void setRecordingSettings(long recording, Map<String, String> values) throws IllegalArgumentException {\n-        Objects.requireNonNull(values);\n+    public void setRecordingSettings(long recording, Map<String, String> settings) throws IllegalArgumentException {\n+        Objects.requireNonNull(settings, \"settings\");\n@@ -221,1 +221,1 @@\n-        getExistingRecording(recording).setSettings(values);\n+        getExistingRecording(recording).setSettings(settings);\n@@ -244,2 +244,2 @@\n-    public void setConfiguration(long recording, String configuration) throws IllegalArgumentException {\n-        Objects.requireNonNull(configuration);\n+    public void setConfiguration(long recording, String contents) throws IllegalArgumentException {\n+        Objects.requireNonNull(contents, \"contents\");\n@@ -248,1 +248,1 @@\n-            Configuration c = Configuration.create(new StringReader(configuration));\n+            Configuration c = Configuration.create(new StringReader(contents));\n@@ -257,1 +257,1 @@\n-        Objects.requireNonNull(configurationName);\n+        Objects.requireNonNull(configurationName, \"configurationName\");\n@@ -270,2 +270,2 @@\n-    public void copyTo(long recording, String path) throws IOException {\n-        Objects.requireNonNull(path);\n+    public void copyTo(long recording, String outputFile) throws IOException {\n+        Objects.requireNonNull(outputFile, \"outputFile\");\n@@ -273,1 +273,1 @@\n-        getExistingRecording(recording).dump(Paths.get(path));\n+        getExistingRecording(recording).dump(Paths.get(outputFile));\n@@ -278,1 +278,1 @@\n-        Objects.requireNonNull(options);\n+        Objects.requireNonNull(options, \"options\");\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/FlightRecorderMXBeanImpl.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}