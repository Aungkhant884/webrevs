{"files":[{"patch":"@@ -1875,1 +1875,1 @@\n-bool os::get_page_info(char *start, page_info* info) {\n+bool os::numa_get_group_ids_for_range(const void** addresses, int* lgrp_ids, size_t count) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1581,1 +1581,1 @@\n-bool os::get_page_info(char *start, page_info* info) {\n+bool os::numa_get_group_ids_for_range(const void** addresses, int* lgrp_ids, size_t count) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2760,0 +2760,5 @@\n+bool os::numa_get_group_ids_for_range(const void** addresses, int* lgrp_ids, size_t count) {\n+  void** pages = const_cast<void**>(addresses);\n+  return os::Linux::numa_move_pages(0, count, pages, NULL, lgrp_ids, 0) == 0;\n+}\n+\n@@ -2790,4 +2795,0 @@\n-bool os::get_page_info(char *start, page_info* info) {\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3724,1 +3724,1 @@\n-bool os::get_page_info(char *start, page_info* info) {\n+bool os::numa_get_group_ids_for_range(const void** addresses, int* lgrp_ids, size_t count) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -376,6 +376,0 @@\n-  if (NUMAStats) {\n-    for (int i = 0; i < lgrp_spaces()->length(); i++) {\n-      lgrp_spaces()->at(i)->accumulate_statistics(page_size());\n-    }\n-  }\n-\n@@ -895,18 +889,15 @@\n-  if (start < end) {\n-    for (char *p = start; p < end;) {\n-      os::page_info info;\n-      if (os::get_page_info(p, &info)) {\n-        if (info.size > 0) {\n-          if (info.size > (size_t)os::vm_page_size()) {\n-            space_stats()->_large_pages++;\n-          } else {\n-            space_stats()->_small_pages++;\n-          }\n-          if (info.lgrp_id == lgrp_id()) {\n-            space_stats()->_local_space += info.size;\n-          } else {\n-            space_stats()->_remote_space += info.size;\n-          }\n-          p += info.size;\n-        } else {\n-          p += os::vm_page_size();\n+  for (char *p = start; p < end; ) {\n+    static const size_t PagesPerIteration = 128;\n+    const void* pages[PagesPerIteration];\n+    int lgrp_ids[PagesPerIteration];\n+\n+    size_t npages = 0;\n+    for (; npages < PagesPerIteration && p < end; p += os::vm_page_size())\n+      pages[npages++] = p;\n+\n+    if (os::numa_get_group_ids_for_range(pages, lgrp_ids, npages)) {\n+      for (size_t i = 0; i < npages; i++) {\n+        \/\/ No way to distinguish small\/large pages on currently supported systems\n+        space_stats()->_small_pages++;\n+\n+        if (lgrp_ids[i] < 0)\n@@ -914,3 +905,4 @@\n-        }\n-      } else {\n-        return;\n+        else if (lgrp_ids[i] == lgrp_id())\n+          space_stats()->_local_space += os::vm_page_size();\n+        else\n+          space_stats()->_remote_space += os::vm_page_size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -494,0 +494,1 @@\n+  static bool   numa_get_group_ids_for_range(const void** addresses, int* lgrp_ids, size_t count);\n@@ -500,1 +501,0 @@\n-  static bool   get_page_info(char *start, page_info* info);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}