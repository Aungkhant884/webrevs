{"files":[{"patch":"@@ -1784,1 +1784,0 @@\n-  uintx _claim_token;\n@@ -1790,2 +1789,1 @@\n-    _code_cl(&_cm_cl, !CodeBlobToOopClosure::FixRelocations, true \/* keepalive nmethods *\/),\n-    _claim_token(Threads::thread_claim_token()) {}\n+    _code_cl(&_cm_cl, !CodeBlobToOopClosure::FixRelocations, true \/* keepalive nmethods *\/) {}\n@@ -1794,12 +1792,10 @@\n-    if (thread->claim_threads_do(true, _claim_token)) {\n-      \/\/ Transfer any partial buffer to the qset for completed buffer processing.\n-      _qset.flush_queue(G1ThreadLocalData::satb_mark_queue(thread));\n-      if (thread->is_Java_thread()) {\n-        \/\/ In theory it should not be necessary to explicitly walk the nmethods to find roots for concurrent marking\n-        \/\/ however the liveness of oops reachable from nmethods have very complex lifecycles:\n-        \/\/ * Alive if on the stack of an executing method\n-        \/\/ * Weakly reachable otherwise\n-        \/\/ Some objects reachable from nmethods, such as the class loader (or klass_holder) of the receiver should be\n-        \/\/ live by the SATB invariant but other oops recorded in nmethods may behave differently.\n-        JavaThread::cast(thread)->nmethods_do(&_code_cl);\n-      }\n+    \/\/ Transfer any partial buffer to the qset for completed buffer processing.\n+    _qset.flush_queue(G1ThreadLocalData::satb_mark_queue(thread));\n+    if (thread->is_Java_thread()) {\n+      \/\/ In theory it should not be necessary to explicitly walk the nmethods to find roots for concurrent marking\n+      \/\/ however the liveness of oops reachable from nmethods have very complex lifecycles:\n+      \/\/ * Alive if on the stack of an executing method\n+      \/\/ * Weakly reachable otherwise\n+      \/\/ Some objects reachable from nmethods, such as the class loader (or klass_holder) of the receiver should be\n+      \/\/ live by the SATB invariant but other oops recorded in nmethods may behave differently.\n+      JavaThread::cast(thread)->nmethods_do(&_code_cl);\n@@ -1820,1 +1816,1 @@\n-      Threads::threads_do(&threads_f);\n+      Threads::possibly_parallel_threads_do(true \/* is_par *\/, &threads_f);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1979,1 +1979,1 @@\n-    Threads::possibly_parallel_threads_do(true \/*parallel *\/, &closure);\n+    Threads::possibly_parallel_threads_do(true \/* is_par *\/, &closure);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-    Threads::possibly_parallel_threads_do(true \/*parallel *\/, &closure);\n+    Threads::possibly_parallel_threads_do(true \/* is_par *\/, &closure);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,2 +81,1 @@\n-    _cl(cl),\n-    _claim_token(Threads::thread_claim_token()) {}\n+    _cl(cl)  {}\n@@ -85,8 +84,6 @@\n-    if (thread->claim_threads_do(true, _claim_token)) {\n-      \/\/ Transfer any partial buffer to the qset for completed buffer processing.\n-      _satb_qset.flush_queue(ShenandoahThreadLocalData::satb_mark_queue(thread));\n-      if (thread->is_Java_thread()) {\n-        if (_cl != NULL) {\n-          ResourceMark rm;\n-          thread->oops_do(_cl, NULL);\n-        }\n+    \/\/ Transfer any partial buffer to the qset for completed buffer processing.\n+    _satb_qset.flush_queue(ShenandoahThreadLocalData::satb_mark_queue(thread));\n+    if (thread->is_Java_thread()) {\n+      if (_cl != NULL) {\n+        ResourceMark rm;\n+        thread->oops_do(_cl, NULL);\n@@ -128,1 +125,1 @@\n-      Threads::threads_do(&tc);\n+      Threads::possibly_parallel_threads_do(true \/* is_par *\/, &tc);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -263,3 +263,5 @@\n-  VMThread* vmt = VMThread::vm_thread();\n-  if (vmt->claim_threads_do(is_par, claim_token)) {\n-    tc->do_thread(vmt);\n+  for (NonJavaThread::Iterator njti; !njti.end(); njti.step()) {\n+    Thread* current = njti.current();\n+    if (current->claim_threads_do(is_par, claim_token)) {\n+      tc->do_thread(current);\n+    }\n@@ -1308,1 +1310,1 @@\n-    assert_thread_claimed(\"Thread\", p, _thread_claim_token);\n+    assert_thread_claimed(\"JavaThread\", p, _thread_claim_token);\n@@ -1310,1 +1312,12 @@\n-  assert_thread_claimed(\"VMThread\", VMThread::vm_thread(), _thread_claim_token);\n+\n+  struct NJTClaimedVerifierClosure : public ThreadClosure {\n+    uintx _thread_claim_token;\n+\n+    NJTClaimedVerifierClosure(uintx thread_claim_token) : ThreadClosure(), _thread_claim_token(thread_claim_token) { }\n+\n+    virtual void do_thread(Thread* thread) override {\n+      assert_thread_claimed(\"Non-JavaThread\", VMThread::vm_thread(), _thread_claim_token);\n+    }\n+  } tc(_thread_claim_token);\n+\n+  non_java_threads_do(&tc);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+private:\n@@ -101,0 +102,2 @@\n+\n+public:\n","filename":"src\/hotspot\/share\/runtime\/threads.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-    possibly_parallel_threads_do(true, &count2);\n+    possibly_parallel_threads_do(true \/* is_par *\/, &count2);\n@@ -152,1 +152,1 @@\n-    ASSERT_EQ(1u, count2.non_java_threads_count()); \/\/ Only VM thread\n+    ASSERT_EQ(count1.non_java_threads_count(), count2.non_java_threads_count());\n@@ -158,1 +158,1 @@\n-    ASSERT_EQ(1u, check2.non_java_threads_claimed()); \/\/ Only VM thread\n+    ASSERT_EQ(0u, check2.non_java_threads_unclaimed());\n@@ -160,2 +160,1 @@\n-              check2.non_java_threads_claimed() +\n-              check2.non_java_threads_unclaimed());\n+              check2.non_java_threads_claimed());\n","filename":"test\/hotspot\/gtest\/runtime\/test_threads.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}