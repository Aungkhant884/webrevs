{"files":[{"patch":"@@ -110,1 +110,1 @@\n-  auto symbolThread= [&](Thread* _current, int _ig) {\n+  auto symbolThread= [&](Thread* _current, int _id) {\n@@ -117,2 +117,1 @@\n-  TestThreadGroup<decltype(symbolThread), int, symTestThreadCount>\n-    ttg(symbolThread, []() { return 0; });\n+  TestThreadGroup<decltype(symbolThread)> ttg(symbolThread, symTestThreadCount);\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -126,3 +127,3 @@\n-\/\/ Calls a single-argument function of type F with state of type S as its input\n-\/\/ in a new thread when doit() is run.\n-template<typename F, typename S>\n+\/\/ Calls a single-argument function of type F with the current thread (this)\n+\/\/ and a self-assigned thread id as its input in a new thread when doit() is run.\n+template<typename F>\n@@ -132,2 +133,1 @@\n-  S _state;\n-\n+  const int _id;\n@@ -135,1 +135,1 @@\n-  BasicTestThread(F fun, S state, Semaphore* sem)\n+  BasicTestThread(F fun, int id, Semaphore* sem)\n@@ -138,1 +138,1 @@\n-      _state(state) {\n+      _id(id) {\n@@ -144,1 +144,1 @@\n-    _fun(this, _state);\n+    _fun(this, _id);\n@@ -148,2 +148,4 @@\n-\/\/ A TestThreadGroup tracks multiple threads running the same function.\n-template<typename F, typename S, int N>\n+\/\/ A TestThreadGroup starts and tracks N threads running the same callable F.\n+\/\/ The callable F should have the signature void(Thread*,int) where Thread*\n+\/\/ is the current thread and int is an id in the range [0,N).\n+template<typename F>\n@@ -153,1 +155,2 @@\n-  BasicTestThread<F, S>* _threads[N];\n+  BasicTestThread<F>** _threads;\n+  const int _length;\n@@ -159,6 +162,7 @@\n-  \/\/ Use state_fun to generate varying state of type S for each function F.\n-  template<typename StateGenerator>\n-  TestThreadGroup(F fun, StateGenerator state_fun)\n-    : _sem() {\n-    for (int i = 0; i < N; i++) {\n-      _threads[i] = new BasicTestThread<F, S>(fun, state_fun(), &_sem);\n+  TestThreadGroup(F fun, const int number_of_threads)\n+    :\n+    _threads(NEW_C_HEAP_ARRAY(BasicTestThread<F>*, number_of_threads, mtTest)),\n+    _length(number_of_threads),\n+    _sem() {\n+    for (int i = 0; i < _length; i++) {\n+      _threads[i] = new BasicTestThread<F>(fun, i, &_sem);\n@@ -171,1 +175,1 @@\n-    for (int i = 0; i < N; i++) {\n+    for (int i = 0; i < _length; i++) {\n@@ -176,1 +180,1 @@\n-    for (int i = 0; i < N; i++) {\n+    for (int i = 0; i < _length; i++) {\n","filename":"test\/hotspot\/gtest\/threadHelper.inline.hpp","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-  auto rcu_reader = [&](Thread* current, volatile TestData** _test) {\n+  auto rcu_reader = [&](Thread* current, int _id) {\n+    volatile TestData** _test = &test;\n@@ -61,4 +62,1 @@\n-  TestThreadGroup<decltype(rcu_reader), volatile TestData**, number_of_readers> ttg(rcu_reader,\n-                                                                                    [&]() {\n-                                                                                      return &test;\n-                                                                                    });\n+  TestThreadGroup<decltype(rcu_reader)> ttg(rcu_reader, number_of_readers);\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalCounter.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}