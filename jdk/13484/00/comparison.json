{"files":[{"patch":"@@ -3916,1 +3916,4 @@\n-  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_mount(vthread, hide, first_mount);\n+  } else {\n+    \/\/ set transition bit value in JavaThread and java.lang.VirtualThread object\n@@ -3920,6 +3923,0 @@\n-    return;\n-  }\n-  if (hide) {\n-   JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n-  } else {\n-   JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n@@ -3940,1 +3937,4 @@\n-  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_unmount(vthread, hide, last_unmount);\n+  } else {\n+    \/\/ set transition bit value in JavaThread and java.lang.VirtualThread object\n@@ -3944,6 +3944,0 @@\n-    return;\n-  }\n-  if (hide) {\n-   JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n-  } else {\n-   JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -515,1 +515,77 @@\n-JvmtiVTMSTransitionDisabler::VTMS_mount_begin(jobject vthread, jboolean first_mount) {\n+JvmtiVTMSTransitionDisabler::VTMS_mount(jobject vthread, bool hide, bool first_mount) {\n+  if (hide) {\n+    VTMS_mount_begin(vthread);\n+  } else {\n+    VTMS_mount_end(vthread);\n+    if (first_mount) {\n+      VTMS_virtual_thread_start(vthread);\n+    }\n+    if (JvmtiExport::should_post_vthread_mount()) {\n+      JvmtiExport::post_vthread_mount(vthread);\n+    }\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_unmount(jobject vthread, bool hide, bool last_unmount) {\n+  if (hide) {\n+    if (JvmtiExport::should_post_vthread_unmount()) {\n+      JvmtiExport::post_vthread_unmount(vthread);\n+    }\n+    if (last_unmount) {\n+      VTMS_virtual_thread_end(vthread);\n+    }\n+    VTMS_unmount_begin(vthread);\n+  } else {\n+    VTMS_unmount_end(vthread);\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_virtual_thread_start(jobject vthread) {\n+  JavaThread* thread = JavaThread::current();\n+\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+\n+  if (JvmtiExport::can_support_virtual_threads()) {\n+    JvmtiEventController::thread_started(thread);\n+    if (JvmtiExport::should_post_vthread_start()) {\n+      JvmtiExport::post_vthread_start(vthread);\n+    }\n+  } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n+    if (PostVirtualThreadCompatibleLifecycleEvents &&\n+        JvmtiExport::should_post_thread_life()) {\n+      \/\/ JvmtiEventController::thread_started is called here\n+      JvmtiExport::post_thread_start(thread);\n+    }\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_virtual_thread_end(jobject vthread) {\n+  JavaThread* thread = JavaThread::current();\n+\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+\n+  if (JvmtiExport::can_support_virtual_threads()) {\n+    if (JvmtiExport::should_post_vthread_end()) {\n+      JvmtiExport::post_vthread_end(vthread);\n+    }\n+  } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n+    if (PostVirtualThreadCompatibleLifecycleEvents &&\n+        JvmtiExport::should_post_thread_life()) {\n+      JvmtiExport::post_thread_end(thread);\n+    }\n+  }\n+  if (thread->jvmti_thread_state() != nullptr) {\n+    JvmtiExport::cleanup_thread(thread);\n+    thread->set_jvmti_thread_state(nullptr);\n+    oop vt = JNIHandles::resolve(vthread);\n+    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_mount_begin(jobject vthread) {\n@@ -523,1 +599,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_mount_end(jobject vthread, jboolean first_mount) {\n+JvmtiVTMSTransitionDisabler::VTMS_mount_end(jobject vthread) {\n@@ -539,18 +615,0 @@\n-  if (first_mount) {\n-    \/\/ thread start\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      JvmtiEventController::thread_started(thread);\n-      if (JvmtiExport::should_post_vthread_start()) {\n-        JvmtiExport::post_vthread_start(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        \/\/ JvmtiEventController::thread_started is called here\n-        JvmtiExport::post_thread_start(thread);\n-      }\n-    }\n-  }\n-  if (JvmtiExport::should_post_vthread_mount()) {\n-    JvmtiExport::post_vthread_mount(vthread);\n-  }\n@@ -560,1 +618,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread, jboolean last_unmount) {\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread) {\n@@ -562,2 +620,0 @@\n-  HandleMark hm(thread);\n-  Handle ct(thread, thread->threadObj());\n@@ -565,15 +621,0 @@\n-  if (JvmtiExport::should_post_vthread_unmount()) {\n-    JvmtiExport::post_vthread_unmount(vthread);\n-  }\n-  if (last_unmount) {\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      if (JvmtiExport::should_post_vthread_end()) {\n-        JvmtiExport::post_vthread_end(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        JvmtiExport::post_thread_end(thread);\n-      }\n-    }\n-  }\n@@ -582,1 +623,0 @@\n-  start_VTMS_transition(vthread, \/* is_mount *\/ false);\n@@ -584,7 +624,2 @@\n-  if (last_unmount && thread->jvmti_thread_state() != nullptr) {\n-    JvmtiExport::cleanup_thread(thread);\n-    thread->set_jvmti_thread_state(nullptr);\n-    oop vt = JNIHandles::resolve(vthread);\n-    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n-  }\n-  thread->rebind_to_jvmti_thread_state_of(ct());\n+  start_VTMS_transition(vthread, \/* is_mount *\/ false);\n+  thread->rebind_to_jvmti_thread_state_of(thread->threadObj());\n@@ -594,1 +629,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_unmount_end(jobject vthread, jboolean last_unmount) {\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_end(jobject vthread) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":82,"deletions":47,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -111,4 +111,8 @@\n-  static void VTMS_mount_begin(jobject vthread, jboolean first_mount);\n-  static void VTMS_mount_end(jobject vthread, jboolean first_mount);\n-  static void VTMS_unmount_begin(jobject vthread, jboolean last_unmount);\n-  static void VTMS_unmount_end(jobject vthread, jboolean last_unmount);\n+  static void VTMS_mount(jobject vthread, bool hide, bool first_mount);\n+  static void VTMS_mount_begin(jobject vthread);\n+  static void VTMS_mount_end(jobject vthread);\n+  static void VTMS_unmount(jobject vthread, bool hide, bool last_unmount);\n+  static void VTMS_unmount_begin(jobject vthread);\n+  static void VTMS_unmount_end(jobject vthread);\n+  static void VTMS_virtual_thread_start(jobject vthread);\n+  static void VTMS_virtual_thread_end(jobject vthread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -642,5 +642,1 @@\n-  if (hide) {\n-    JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n-  } else {\n-    JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n-  }\n+  JvmtiVTMSTransitionDisabler::VTMS_mount(vthread, hide, first_mount);\n@@ -652,5 +648,1 @@\n-  if (hide) {\n-    JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n-  } else {\n-    JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n-  }\n+  JvmtiVTMSTransitionDisabler::VTMS_unmount(vthread, hide, last_unmount);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"}]}