{"files":[{"patch":"@@ -220,0 +220,2 @@\n+JVM_VirtualThreadStart\n+JVM_VirtualThreadEnd\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -587,3 +587,5 @@\n-  do_intrinsic(_notifyJvmtiMount, java_lang_VirtualThread, notifyJvmtiMount_name, bool_bool_void_signature, F_RN)       \\\n-  do_intrinsic(_notifyJvmtiUnmount, java_lang_VirtualThread, notifyJvmtiUnmount_name, bool_bool_void_signature, F_RN)   \\\n-  do_intrinsic(_notifyJvmtiHideFrames, java_lang_VirtualThread, notifyJvmtiHideFrames_name, bool_void_signature, F_RN)  \\\n+  do_intrinsic(_notifyJvmtiVThreadStart, java_lang_VirtualThread, notifyJvmtiStart_name, void_method_signature, F_RN)   \\\n+  do_intrinsic(_notifyJvmtiVThreadEnd, java_lang_VirtualThread, notifyJvmtiEnd_name, void_method_signature, F_RN)       \\\n+  do_intrinsic(_notifyJvmtiVThreadMount, java_lang_VirtualThread, notifyJvmtiMount_name, bool_void_signature, F_RN)     \\\n+  do_intrinsic(_notifyJvmtiVThreadUnmount, java_lang_VirtualThread, notifyJvmtiUnmount_name, bool_void_signature, F_RN) \\\n+  do_intrinsic(_notifyJvmtiVThreadHideFrames, java_lang_VirtualThread, notifyJvmtiHideFrames_name, bool_void_signature, F_RN) \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -415,0 +415,2 @@\n+  template(notifyJvmtiStart_name,                     \"notifyJvmtiStart\")                         \\\n+  template(notifyJvmtiEnd_name,                       \"notifyJvmtiEnd\")                           \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1147,1 +1147,1 @@\n-JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide, jboolean first_mount);\n+JVM_VirtualThreadStart(JNIEnv* env, jobject vthread);\n@@ -1150,1 +1150,7 @@\n-JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide, jboolean last_unmount);\n+JVM_VirtualThreadEnd(JNIEnv* env, jobject vthread);\n+\n+JNIEXPORT void JNICALL\n+JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide);\n+\n+JNIEXPORT void JNICALL\n+JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -778,3 +778,5 @@\n-  case vmIntrinsics::_notifyJvmtiMount:\n-  case vmIntrinsics::_notifyJvmtiUnmount:\n-  case vmIntrinsics::_notifyJvmtiHideFrames:\n+  case vmIntrinsics::_notifyJvmtiVThreadStart:\n+  case vmIntrinsics::_notifyJvmtiVThreadEnd:\n+  case vmIntrinsics::_notifyJvmtiVThreadMount:\n+  case vmIntrinsics::_notifyJvmtiVThreadUnmount:\n+  case vmIntrinsics::_notifyJvmtiVThreadHideFrames:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -484,5 +484,9 @@\n-  case vmIntrinsics::_notifyJvmtiMount:         return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_mount()),\n-                                                                                        \"notifyJvmtiMount\");\n-  case vmIntrinsics::_notifyJvmtiUnmount:       return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_unmount()),\n-                                                                                        \"notifyJvmtiUnmount\");\n-  case vmIntrinsics::_notifyJvmtiHideFrames:    return inline_native_notify_jvmti_hide();\n+  case vmIntrinsics::_notifyJvmtiVThreadStart:   return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_vthread_start()),\n+                                                                                         \"notifyJvmtiStart\", true, false);\n+  case vmIntrinsics::_notifyJvmtiVThreadEnd:     return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_vthread_end()),\n+                                                                                         \"notifyJvmtiEnd\", false, true);\n+  case vmIntrinsics::_notifyJvmtiVThreadMount:   return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_vthread_mount()),\n+                                                                                         \"notifyJvmtiMount\", false, false);\n+  case vmIntrinsics::_notifyJvmtiVThreadUnmount: return inline_native_notify_jvmti_funcs(CAST_FROM_FN_PTR(address, OptoRuntime::notify_jvmti_vthread_unmount()),\n+                                                                                         \"notifyJvmtiUnmount\", false, false);\n+  case vmIntrinsics::_notifyJvmtiVThreadHideFrames: return inline_native_notify_jvmti_hide();\n@@ -2876,1 +2880,1 @@\n-bool LibraryCallKit::inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName) {\n+bool LibraryCallKit::inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName, bool is_start, bool is_end) {\n@@ -2883,1 +2887,1 @@\n-  Node* hide = _gvn.transform(argument(1)); \/\/ hide argument: true for begin and false for end of VTMS transition\n+  Node* hide = is_start ? ideal.ConI(0) : (is_end ? ideal.ConI(1) : _gvn.transform(argument(1)));\n@@ -2889,1 +2893,1 @@\n-    const TypeFunc* tf = OptoRuntime::notify_jvmti_Type();\n+    const TypeFunc* tf = OptoRuntime::notify_jvmti_vthread_Type();\n@@ -2891,1 +2895,0 @@\n-    Node* cond   = _gvn.transform(argument(2)); \/\/ firstMount or lastUnmount argument\n@@ -2894,1 +2897,1 @@\n-    make_runtime_call(RC_NO_LEAF, tf, funcAddr, funcName, TypePtr::BOTTOM, vt_oop, hide, cond);\n+    make_runtime_call(RC_NO_LEAF, tf, funcAddr, funcName, TypePtr::BOTTOM, vt_oop, hide);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-  bool inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName);\n+  bool inline_native_notify_jvmti_funcs(address funcAddr, const char* funcName, bool is_start, bool is_end);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,2 +114,4 @@\n-address OptoRuntime::_notify_jvmti_mount                          = nullptr;\n-address OptoRuntime::_notify_jvmti_unmount                        = nullptr;\n+address OptoRuntime::_notify_jvmti_vthread_start                  = nullptr;\n+address OptoRuntime::_notify_jvmti_vthread_end                    = nullptr;\n+address OptoRuntime::_notify_jvmti_vthread_mount                  = nullptr;\n+address OptoRuntime::_notify_jvmti_vthread_unmount                = nullptr;\n@@ -158,2 +160,4 @@\n-  gen(env, _notify_jvmti_mount             , notify_jvmti_Type            , SharedRuntime::notify_jvmti_mount,   0 , true, false);\n-  gen(env, _notify_jvmti_unmount           , notify_jvmti_Type            , SharedRuntime::notify_jvmti_unmount, 0 , true, false);\n+  gen(env, _notify_jvmti_vthread_start     , notify_jvmti_vthread_Type    , SharedRuntime::notify_jvmti_vthread_start, 0, true, false);\n+  gen(env, _notify_jvmti_vthread_end       , notify_jvmti_vthread_Type    , SharedRuntime::notify_jvmti_vthread_end,   0, true, false);\n+  gen(env, _notify_jvmti_vthread_mount     , notify_jvmti_vthread_Type    , SharedRuntime::notify_jvmti_vthread_mount, 0, true, false);\n+  gen(env, _notify_jvmti_vthread_unmount   , notify_jvmti_vthread_Type    , SharedRuntime::notify_jvmti_vthread_unmount, 0, true, false);\n@@ -494,0 +498,15 @@\n+\n+const TypeFunc *OptoRuntime::notify_jvmti_vthread_Type() {\n+  \/\/ create input type (domain)\n+  const Type **fields = TypeTuple::fields(2);\n+  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ VirtualThread oop\n+  fields[TypeFunc::Parms+1] = TypeInt::BOOL;        \/\/ jboolean\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+2,fields);\n+\n+  \/\/ no result type needed\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = NULL; \/\/ void\n+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms, fields);\n+\n+  return TypeFunc::make(domain,range);\n+}\n@@ -1669,18 +1688,0 @@\n-  return TypeFunc::make(domain,range);\n-}\n-#endif\n-\n-#if INCLUDE_JVMTI\n-const TypeFunc *OptoRuntime::notify_jvmti_Type() {\n-  \/\/ create input type (domain)\n-  const Type **fields = TypeTuple::fields(3);\n-  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL; \/\/ VirtualThread oop\n-  fields[TypeFunc::Parms+1] = TypeInt::BOOL;        \/\/ jboolean\n-  fields[TypeFunc::Parms+2] = TypeInt::BOOL;        \/\/ jboolean\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+3,fields);\n-\n-  \/\/ no result type needed\n-  fields = TypeTuple::fields(1);\n-  fields[TypeFunc::Parms+0] = NULL; \/\/ void\n-  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms, fields);\n-\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -140,2 +140,4 @@\n-  static address _notify_jvmti_mount;\n-  static address _notify_jvmti_unmount;\n+  static address _notify_jvmti_vthread_start;\n+  static address _notify_jvmti_vthread_end;\n+  static address _notify_jvmti_vthread_mount;\n+  static address _notify_jvmti_vthread_unmount;\n@@ -218,2 +220,4 @@\n-  static address notify_jvmti_mount()                    { return _notify_jvmti_mount; }\n-  static address notify_jvmti_unmount()                  { return _notify_jvmti_unmount; }\n+  static address notify_jvmti_vthread_start()            { return _notify_jvmti_vthread_start; }\n+  static address notify_jvmti_vthread_end()              { return _notify_jvmti_vthread_end; }\n+  static address notify_jvmti_vthread_mount()            { return _notify_jvmti_vthread_mount; }\n+  static address notify_jvmti_vthread_unmount()          { return _notify_jvmti_vthread_unmount; }\n@@ -309,1 +313,1 @@\n-  static const TypeFunc* notify_jvmti_Type();\n+  static const TypeFunc* notify_jvmti_vthread_Type();\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3913,3 +3913,1 @@\n-\/\/ If notifications are disabled then just update the VTMS transition bit and return.\n-\/\/ Otherwise, the bit is updated in the given jvmtiVTMSTransitionDisabler function call.\n-JVM_ENTRY(void, JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide, jboolean first_mount))\n+JVM_ENTRY(void, JVM_VirtualThreadStart(JNIEnv* env, jobject vthread))\n@@ -3921,4 +3919,15 @@\n-  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n-    thread->set_is_in_VTMS_transition(hide);\n-    oop vt = JNIHandles::resolve_external_guard(vthread);\n-    java_lang_Thread::set_is_in_VTMS_transition(vt, hide);\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_vthread_start(vthread);\n+  } else {\n+    \/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+    JvmtiVTMSTransitionDisabler::set_is_in_VTMS_transition(thread, vthread, false);\n+  }\n+#else\n+  fatal(\"Should only be called with JVMTI enabled\");\n+#endif\n+JVM_END\n+\n+JVM_ENTRY(void, JVM_VirtualThreadEnd(JNIEnv* env, jobject vthread))\n+#if INCLUDE_JVMTI\n+  if (!DoJVMTIVirtualThreadTransitions) {\n+    assert(!JvmtiExport::can_support_virtual_threads(), \"sanity check\");\n@@ -3927,2 +3936,2 @@\n-  if (hide) {\n-   JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_vthread_end(vthread);\n@@ -3930,1 +3939,2 @@\n-   JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n+    \/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+    JvmtiVTMSTransitionDisabler::set_is_in_VTMS_transition(thread, vthread, true);\n@@ -3938,2 +3948,2 @@\n-\/\/ Otherwise, the bit is updated in the given jvmtiVTMSTransitionDisabler function call below.\n-JVM_ENTRY(void, JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide, jboolean last_unmount))\n+\/\/ Otherwise, the bit is updated in the given jvmtiVTMSTransitionDisabler function call.\n+JVM_ENTRY(void, JVM_VirtualThreadMount(JNIEnv* env, jobject vthread, jboolean hide))\n@@ -3945,4 +3955,17 @@\n-  if (!JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n-    thread->set_is_in_VTMS_transition(hide);\n-    oop vt = JNIHandles::resolve_external_guard(vthread);\n-    java_lang_Thread::set_is_in_VTMS_transition(vt, hide);\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_vthread_mount(vthread, hide);\n+  } else {\n+    \/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+    JvmtiVTMSTransitionDisabler::set_is_in_VTMS_transition(thread, vthread, hide);\n+  }\n+#else\n+  fatal(\"Should only be called with JVMTI enabled\");\n+#endif\n+JVM_END\n+\n+\/\/ If notifications are disabled then just update the VTMS transition bit and return.\n+\/\/ Otherwise, the bit is updated in the given jvmtiVTMSTransitionDisabler function call below.\n+JVM_ENTRY(void, JVM_VirtualThreadUnmount(JNIEnv* env, jobject vthread, jboolean hide))\n+#if INCLUDE_JVMTI\n+  if (!DoJVMTIVirtualThreadTransitions) {\n+    assert(!JvmtiExport::can_support_virtual_threads(), \"sanity check\");\n@@ -3951,2 +3974,2 @@\n-  if (hide) {\n-   JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n+  if (JvmtiVTMSTransitionDisabler::VTMS_notify_jvmti_events()) {\n+    JvmtiVTMSTransitionDisabler::VTMS_vthread_unmount(vthread, hide);\n@@ -3954,1 +3977,2 @@\n-   JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n+    \/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+    JvmtiVTMSTransitionDisabler::set_is_in_VTMS_transition(thread, vthread, hide);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":43,"deletions":19,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-  assert(_thread != NULL, \"sanity check\");\n+  assert(_thread != nullptr, \"sanity check\");\n@@ -514,0 +514,87 @@\n+\/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+void JvmtiVTMSTransitionDisabler::set_is_in_VTMS_transition(JavaThread* thread, jobject vthread, bool in_trans) {\n+  oop vt = JNIHandles::resolve_external_guard(vthread);\n+  java_lang_Thread::set_is_in_VTMS_transition(vt, in_trans);\n+  thread->set_is_in_VTMS_transition(in_trans);\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_vthread_start(jobject vthread) {\n+  VTMS_mount_end(vthread);\n+  JavaThread* thread = JavaThread::current();\n+\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+\n+  if (JvmtiExport::can_support_virtual_threads()) {\n+    JvmtiEventController::thread_started(thread);\n+    if (JvmtiExport::should_post_vthread_start()) {\n+      JvmtiExport::post_vthread_start(vthread);\n+    }\n+  } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n+    if (PostVirtualThreadCompatibleLifecycleEvents &&\n+        JvmtiExport::should_post_thread_life()) {\n+      \/\/ JvmtiEventController::thread_started is called here\n+      JvmtiExport::post_thread_start(thread);\n+    }\n+  }\n+  \/\/ post VirtualThreadMount event after VirtualThreadStart\n+  if (JvmtiExport::should_post_vthread_mount()) {\n+    JvmtiExport::post_vthread_mount(vthread);\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_vthread_end(jobject vthread) {\n+  JavaThread* thread = JavaThread::current();\n+\n+  assert(!thread->is_in_VTMS_transition(), \"sanity check\");\n+  assert(!thread->is_in_tmp_VTMS_transition(), \"sanity check\");\n+\n+  \/\/ post VirtualThreadUnmount event before VirtualThreadEnd\n+  if (JvmtiExport::should_post_vthread_unmount()) {\n+    JvmtiExport::post_vthread_unmount(vthread);\n+  }\n+  if (JvmtiExport::can_support_virtual_threads()) {\n+    if (JvmtiExport::should_post_vthread_end()) {\n+      JvmtiExport::post_vthread_end(vthread);\n+    }\n+  } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n+    if (PostVirtualThreadCompatibleLifecycleEvents &&\n+        JvmtiExport::should_post_thread_life()) {\n+      JvmtiExport::post_thread_end(thread);\n+    }\n+  }\n+  if (thread->jvmti_thread_state() != nullptr) {\n+    JvmtiExport::cleanup_thread(thread);\n+    thread->set_jvmti_thread_state(nullptr);\n+    oop vt = JNIHandles::resolve(vthread);\n+    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n+  }\n+  VTMS_unmount_begin(vthread);\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_vthread_mount(jobject vthread, bool hide) {\n+  if (hide) {\n+    VTMS_mount_begin(vthread);\n+  } else {\n+    VTMS_mount_end(vthread);\n+    if (JvmtiExport::should_post_vthread_mount()) {\n+      JvmtiExport::post_vthread_mount(vthread);\n+    }\n+  }\n+}\n+\n+void\n+JvmtiVTMSTransitionDisabler::VTMS_vthread_unmount(jobject vthread, bool hide) {\n+  if (hide) {\n+    if (JvmtiExport::should_post_vthread_unmount()) {\n+      JvmtiExport::post_vthread_unmount(vthread);\n+    }\n+    VTMS_unmount_begin(vthread);\n+  } else {\n+    VTMS_unmount_end(vthread);\n+  }\n+}\n+\n@@ -515,1 +602,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_mount_begin(jobject vthread, jboolean first_mount) {\n+JvmtiVTMSTransitionDisabler::VTMS_mount_begin(jobject vthread) {\n@@ -523,1 +610,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_mount_end(jobject vthread, jboolean first_mount) {\n+JvmtiVTMSTransitionDisabler::VTMS_mount_end(jobject vthread) {\n@@ -539,18 +626,0 @@\n-  if (first_mount) {\n-    \/\/ thread start\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      JvmtiEventController::thread_started(thread);\n-      if (JvmtiExport::should_post_vthread_start()) {\n-        JvmtiExport::post_vthread_start(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_start\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        \/\/ JvmtiEventController::thread_started is called here\n-        JvmtiExport::post_thread_start(thread);\n-      }\n-    }\n-  }\n-  if (JvmtiExport::should_post_vthread_mount()) {\n-    JvmtiExport::post_vthread_mount(vthread);\n-  }\n@@ -560,1 +629,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread, jboolean last_unmount) {\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(jobject vthread) {\n@@ -562,2 +631,0 @@\n-  HandleMark hm(thread);\n-  Handle ct(thread, thread->threadObj());\n@@ -565,15 +632,0 @@\n-  if (JvmtiExport::should_post_vthread_unmount()) {\n-    JvmtiExport::post_vthread_unmount(vthread);\n-  }\n-  if (last_unmount) {\n-    if (JvmtiExport::can_support_virtual_threads()) {\n-      if (JvmtiExport::should_post_vthread_end()) {\n-        JvmtiExport::post_vthread_end(vthread);\n-      }\n-    } else { \/\/ compatibility for vthread unaware agents: legacy thread_end\n-      if (PostVirtualThreadCompatibleLifecycleEvents &&\n-          JvmtiExport::should_post_thread_life()) {\n-        JvmtiExport::post_thread_end(thread);\n-      }\n-    }\n-  }\n@@ -582,1 +634,0 @@\n-  start_VTMS_transition(vthread, \/* is_mount *\/ false);\n@@ -584,7 +635,2 @@\n-  if (last_unmount && thread->jvmti_thread_state() != nullptr) {\n-    JvmtiExport::cleanup_thread(thread);\n-    thread->set_jvmti_thread_state(nullptr);\n-    oop vt = JNIHandles::resolve(vthread);\n-    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n-  }\n-  thread->rebind_to_jvmti_thread_state_of(ct());\n+  start_VTMS_transition(vthread, \/* is_mount *\/ false);\n+  thread->rebind_to_jvmti_thread_state_of(thread->threadObj());\n@@ -594,1 +640,1 @@\n-JvmtiVTMSTransitionDisabler::VTMS_unmount_end(jobject vthread, jboolean last_unmount) {\n+JvmtiVTMSTransitionDisabler::VTMS_unmount_end(jobject vthread) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":94,"deletions":48,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -108,0 +108,3 @@\n+  \/\/ set VTMS transition bit value in JavaThread and java.lang.VirtualThread object\n+  static void set_is_in_VTMS_transition(JavaThread* thread, jobject vthread, bool in_trans);\n+\n@@ -111,4 +114,11 @@\n-  static void VTMS_mount_begin(jobject vthread, jboolean first_mount);\n-  static void VTMS_mount_end(jobject vthread, jboolean first_mount);\n-  static void VTMS_unmount_begin(jobject vthread, jboolean last_unmount);\n-  static void VTMS_unmount_end(jobject vthread, jboolean last_unmount);\n+  static void VTMS_vthread_start(jobject vthread);\n+  static void VTMS_vthread_end(jobject vthread);\n+\n+  static void VTMS_vthread_mount(jobject vthread, bool hide);\n+  static void VTMS_vthread_unmount(jobject vthread, bool hide);\n+\n+  static void VTMS_mount_begin(jobject vthread);\n+  static void VTMS_mount_end(jobject vthread);\n+\n+  static void VTMS_unmount_begin(jobject vthread);\n+  static void VTMS_unmount_end(jobject vthread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -639,1 +639,2 @@\n-JRT_ENTRY(void, SharedRuntime::notify_jvmti_mount(oopDesc* vt, jboolean hide, jboolean first_mount, JavaThread* current))\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_vthread_start(oopDesc* vt, jboolean hide, JavaThread* current))\n+  assert(hide == JNI_FALSE, \"must be VTMS transition finish\");\n@@ -641,7 +642,1 @@\n-\n-  if (hide) {\n-    JvmtiVTMSTransitionDisabler::VTMS_mount_begin(vthread, first_mount);\n-  } else {\n-    JvmtiVTMSTransitionDisabler::VTMS_mount_end(vthread, first_mount);\n-  }\n-\n+  JvmtiVTMSTransitionDisabler::VTMS_vthread_start(vthread);\n@@ -651,1 +646,2 @@\n-JRT_ENTRY(void, SharedRuntime::notify_jvmti_unmount(oopDesc* vt, jboolean hide, jboolean last_unmount, JavaThread* current))\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_vthread_end(oopDesc* vt, jboolean hide, JavaThread* current))\n+  assert(hide == JNI_TRUE, \"must be VTMS transition start\");\n@@ -653,0 +649,3 @@\n+  JvmtiVTMSTransitionDisabler::VTMS_vthread_end(vthread);\n+  JNIHandles::destroy_local(vthread);\n+JRT_END\n@@ -654,5 +653,5 @@\n-  if (hide) {\n-    JvmtiVTMSTransitionDisabler::VTMS_unmount_begin(vthread, last_unmount);\n-  } else {\n-    JvmtiVTMSTransitionDisabler::VTMS_unmount_end(vthread, last_unmount);\n-  }\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_vthread_mount(oopDesc* vt, jboolean hide, JavaThread* current))\n+  jobject vthread = JNIHandles::make_local(const_cast<oopDesc*>(vt));\n+  JvmtiVTMSTransitionDisabler::VTMS_vthread_mount(vthread, hide);\n+  JNIHandles::destroy_local(vthread);\n+JRT_END\n@@ -660,0 +659,3 @@\n+JRT_ENTRY(void, SharedRuntime::notify_jvmti_vthread_unmount(oopDesc* vt, jboolean hide, JavaThread* current))\n+  jobject vthread = JNIHandles::make_local(const_cast<oopDesc*>(vt));\n+  JvmtiVTMSTransitionDisabler::VTMS_vthread_unmount(vthread, hide);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -270,2 +270,4 @@\n-  static void notify_jvmti_mount(oopDesc* vt, jboolean hide, jboolean first_mount, JavaThread* current);\n-  static void notify_jvmti_unmount(oopDesc* vt, jboolean hide, jboolean last_unmount, JavaThread* current);\n+  static void notify_jvmti_vthread_start(oopDesc* vt, jboolean hide, JavaThread* current);\n+  static void notify_jvmti_vthread_end(oopDesc* vt, jboolean hide, JavaThread* current);\n+  static void notify_jvmti_vthread_mount(oopDesc* vt, jboolean hide, JavaThread* current);\n+  static void notify_jvmti_vthread_unmount(oopDesc* vt, jboolean hide, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -208,1 +208,0 @@\n-        boolean firstRun;\n@@ -212,1 +211,0 @@\n-            firstRun = true;\n@@ -216,1 +214,0 @@\n-            firstRun = false;\n@@ -223,1 +220,1 @@\n-        notifyJvmtiMount(\/*hide*\/true, firstRun);\n+        notifyJvmtiMount(\/*hide*\/true);\n@@ -303,1 +300,1 @@\n-        notifyJvmtiMount(\/*hide*\/false, \/*first*\/true);\n+        notifyJvmtiStart();\n@@ -331,1 +328,1 @@\n-                notifyJvmtiUnmount(\/*hide*\/true, \/*last*\/true);\n+                notifyJvmtiEnd();\n@@ -441,1 +438,1 @@\n-        notifyJvmtiUnmount(\/*hide*\/true, \/*last*\/false);\n+        notifyJvmtiUnmount(\/*hide*\/true);\n@@ -448,1 +445,1 @@\n-            notifyJvmtiMount(\/*hide*\/false, \/*first*\/false);\n+            notifyJvmtiMount(\/*hide*\/false);\n@@ -465,1 +462,1 @@\n-            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/false);\n+            notifyJvmtiUnmount(\/*hide*\/false);\n@@ -481,1 +478,1 @@\n-            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/false);\n+            notifyJvmtiUnmount(\/*hide*\/false);\n@@ -511,1 +508,1 @@\n-            notifyJvmtiUnmount(\/*hide*\/false, \/*last*\/true);\n+            notifyJvmtiUnmount(\/*hide*\/false);\n@@ -1089,1 +1086,1 @@\n-    private native void notifyJvmtiMount(boolean hide, boolean firstMount);\n+    private native void notifyJvmtiStart();\n@@ -1093,1 +1090,9 @@\n-    private native void notifyJvmtiUnmount(boolean hide, boolean lastUnmount);\n+    private native void notifyJvmtiEnd();\n+\n+    @IntrinsicCandidate\n+    @JvmtiMountTransition\n+    private native void notifyJvmtiMount(boolean hide);\n+\n+    @IntrinsicCandidate\n+    @JvmtiMountTransition\n+    private native void notifyJvmtiUnmount(boolean hide);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -35,3 +35,5 @@\n-    { \"notifyJvmtiMount\",        \"(ZZ)V\", (void *)&JVM_VirtualThreadMount },\n-    { \"notifyJvmtiUnmount\",      \"(ZZ)V\", (void *)&JVM_VirtualThreadUnmount },\n-    { \"notifyJvmtiHideFrames\",   \"(Z)V\",  (void *)&JVM_VirtualThreadHideFrames },\n+    { \"notifyJvmtiStart\",        \"()V\",  (void *)&JVM_VirtualThreadStart },\n+    { \"notifyJvmtiEnd\",          \"()V\",  (void *)&JVM_VirtualThreadEnd },\n+    { \"notifyJvmtiMount\",        \"(Z)V\", (void *)&JVM_VirtualThreadMount },\n+    { \"notifyJvmtiUnmount\",      \"(Z)V\", (void *)&JVM_VirtualThreadUnmount },\n+    { \"notifyJvmtiHideFrames\",   \"(Z)V\", (void *)&JVM_VirtualThreadHideFrames },\n","filename":"src\/java.base\/share\/native\/libjava\/VirtualThread.c","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}