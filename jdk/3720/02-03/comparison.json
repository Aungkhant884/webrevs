{"files":[{"patch":"@@ -2491,1 +2491,0 @@\n-        assert(in2->bottom_type()->isa_int(), \"Shift must always be an int value\");\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -243,6 +243,38 @@\n-  \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n-  if (!arch_supports_vector(sopc, num_elem, elem_bt, is_vector_mask(vbox_klass) ? VecMaskUseAll : VecMaskNotUsed)) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n-                    n, sopc, num_elem, type2name(elem_bt),\n-                    is_vector_mask(vbox_klass) ? 1 : 0);\n+  if (VectorNode::is_rotate_opcode(opc)) {\n+    bool is_unsupported = false;\n+    if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/)) {\n+      is_unsupported = true;\n+    }\n+    int lshiftopc = VectorNode::opcode(elem_bt == T_LONG ? Op_LShiftL : Op_LShiftI, elem_bt);\n+    auto urshiftopc = [&]() {\n+      switch(elem_bt) {\n+        case T_INT: return Op_URShiftI;\n+        case T_LONG: return Op_URShiftL;\n+        case T_BYTE: return Op_URShiftB;\n+        case T_SHORT: return Op_URShiftS;\n+        default: return (Opcodes)0;\n+      }\n+    };\n+    int rshiftopc = VectorNode::opcode(urshiftopc(), elem_bt);\n+    if (is_unsupported &&\n+        arch_supports_vector(lshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(rshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n+      is_unsupported = false;\n+    }\n+    if (is_unsupported) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s ismask=no\",\n+                      sopc, num_elem, type2name(elem_bt));\n+      }\n+      return false; \/\/ not supported\n+    }\n+  } else {\n+    \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n+    if (!arch_supports_vector(sopc, num_elem, elem_bt, is_vector_mask(vbox_klass) ? VecMaskUseAll : VecMaskNotUsed)) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n+                      n, sopc, num_elem, type2name(elem_bt),\n+                      is_vector_mask(vbox_klass) ? 1 : 0);\n+      }\n+      return false; \/\/ not supported\n@@ -250,1 +282,0 @@\n-    return false; \/\/ not supported\n@@ -1299,2 +1330,3 @@\n-  bool is_const_rotate = is_rotate && cnt->is_Con() && -0x80 <= cnt->get_int() && cnt->get_int() < 0x80;\n-\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n+  bool is_const_rotate = is_rotate && cnt_type && cnt_type->is_con() &&\n+                         -0x80 <= cnt_type->get_con() && cnt_type->get_con() < 0x80;\n@@ -1308,1 +1340,1 @@\n-    auto urshiftopc = [=]() {\n+    auto urshiftopc = [&]() {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1160,3 +1160,5 @@\n-  if (cnt->is_Con() && cnt->bottom_type()->isa_int()) {\n-    \/\/ Constant shift case.\n-    int shift = cnt->get_int() & shift_mask;\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n+  bool is_binary_vector_op = false;\n+  if (cnt_type && cnt_type->is_con()) {\n+    \/\/ Constant shift.\n+    int shift = cnt_type->get_con() & shift_mask;\n@@ -1165,2 +1167,2 @@\n-  } else {\n-    \/\/ Variable shift case.\n+  } else if (VectorNode::is_invariant_vector(cnt)) {\n+    \/\/ Scalar variable shift.\n@@ -1176,0 +1178,11 @@\n+  } else {\n+    \/\/ Vector variable shift.\n+    assert(cnt->bottom_type()->isa_vect(), \"Unexpected shift\");\n+    const Type* elem_ty = Type::get_const_basic_type(bt);\n+    Node* shift_mask_node = (bt == T_LONG) ? (Node*)(phase->longcon(shift_mask + 1L)) :\n+                                             (Node*)(phase->intcon(shift_mask + 1));\n+    Node* vector_mask = phase->transform(VectorNode::scalar2vector(shift_mask_node,vlen, elem_ty));\n+    int subVopc = VectorNode::opcode((bt == T_LONG) ? Op_SubL : Op_SubI, bt);\n+    shiftRCnt = cnt;\n+    shiftLCnt = phase->transform(VectorNode::make(subVopc, vector_mask, shiftRCnt, vt));\n+    is_binary_vector_op = true;\n@@ -1183,2 +1196,4 @@\n-  shiftLCnt = phase->transform(new LShiftCntVNode(shiftLCnt, vt));\n-  shiftRCnt = phase->transform(new RShiftCntVNode(shiftRCnt, vt));\n+  if (!is_binary_vector_op) {\n+    shiftLCnt = phase->transform(new LShiftCntVNode(shiftLCnt, vt));\n+    shiftRCnt = phase->transform(new RShiftCntVNode(shiftRCnt, vt));\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-        default: fatal(\"URSHIFT: %s\", type2name(bt));\n+        default: fatal(\"LROTATE: %s\", type2name(bt));\n@@ -381,1 +381,1 @@\n-        default: fatal(\"URSHIFT: %s\", type2name(bt));\n+        default: fatal(\"RROTATE: %s\", type2name(bt));\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-    public static final \/*bitwise*\/ Binary ROL = binary(\"ROL\", \"rotateLeft\", VectorSupport.VECTOR_OP_LROTATE, VO_SHIFT | VO_SPECIAL);\n+    public static final \/*bitwise*\/ Binary ROL = binary(\"ROL\", \"rotateLeft\", VectorSupport.VECTOR_OP_LROTATE, VO_SHIFT);\n@@ -526,1 +526,1 @@\n-    public static final \/*bitwise*\/ Binary ROR = binary(\"ROR\", \"rotateRight\", VectorSupport.VECTOR_OP_RROTATE, VO_SHIFT | VO_SPECIAL);\n+    public static final \/*bitwise*\/ Binary ROR = binary(\"ROR\", \"rotateRight\", VectorSupport.VECTOR_OP_RROTATE, VO_SHIFT);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2305,1 +2305,1 @@\n-    static void LSHLByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHLByte128VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2323,1 +2323,1 @@\n-    static void LSHLByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHLByte128VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2351,1 +2351,1 @@\n-    static void LSHRByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHRByte128VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2369,1 +2369,1 @@\n-    static void LSHRByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHRByte128VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2397,1 +2397,1 @@\n-    static void ASHRByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ASHRByte128VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2415,1 +2415,1 @@\n-    static void ASHRByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ASHRByte128VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2435,0 +2435,49 @@\n+\n+    static byte ROR(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void RORByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Byte128VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void RORByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::ROR);\n+    }\n+\n+\n+    static byte ROL(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n+    }\n+\n@@ -2444,1 +2493,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2448,1 +2498,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Byte128VectorTests::ROL);\n@@ -2450,0 +2500,3 @@\n+\n+\n+\n@@ -2462,1 +2515,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2466,1 +2520,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Byte128VectorTests::ROL);\n+    }\n+\n+\n+    static byte ROR_unary(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n@@ -2468,0 +2527,1 @@\n+\n@@ -2469,1 +2529,1 @@\n-    static void RORByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte128VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2481,1 +2541,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROR_unary);\n@@ -2483,0 +2543,3 @@\n+\n+\n+\n@@ -2484,1 +2547,1 @@\n-    static void RORByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte128VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2499,1 +2562,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROR_unary);\n+    }\n+\n+\n+    static byte ROL_unary(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n@@ -2501,0 +2569,38 @@\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void ROLByte128VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void ROLByte128VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2305,1 +2305,1 @@\n-    static void LSHLByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHLByte256VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2323,1 +2323,1 @@\n-    static void LSHLByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHLByte256VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2351,1 +2351,1 @@\n-    static void LSHRByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHRByte256VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2369,1 +2369,1 @@\n-    static void LSHRByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHRByte256VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2397,1 +2397,1 @@\n-    static void ASHRByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ASHRByte256VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2415,1 +2415,1 @@\n-    static void ASHRByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ASHRByte256VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2435,0 +2435,49 @@\n+\n+    static byte ROR(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void RORByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Byte256VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void RORByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::ROR);\n+    }\n+\n+\n+    static byte ROL(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n+    }\n+\n@@ -2444,1 +2493,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2448,1 +2498,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Byte256VectorTests::ROL);\n@@ -2450,0 +2500,3 @@\n+\n+\n+\n@@ -2462,1 +2515,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2466,1 +2520,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Byte256VectorTests::ROL);\n+    }\n+\n+\n+    static byte ROR_unary(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n@@ -2468,0 +2527,1 @@\n+\n@@ -2469,1 +2529,1 @@\n-    static void RORByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte256VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2481,1 +2541,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROR_unary);\n@@ -2483,0 +2543,3 @@\n+\n+\n+\n@@ -2484,1 +2547,1 @@\n-    static void RORByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte256VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2499,1 +2562,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROR_unary);\n+    }\n+\n+\n+    static byte ROL_unary(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n@@ -2501,0 +2569,38 @@\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void ROLByte256VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void ROLByte256VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2305,1 +2305,1 @@\n-    static void LSHLByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHLByte512VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2323,1 +2323,1 @@\n-    static void LSHLByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHLByte512VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2351,1 +2351,1 @@\n-    static void LSHRByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHRByte512VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2369,1 +2369,1 @@\n-    static void LSHRByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHRByte512VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2397,1 +2397,1 @@\n-    static void ASHRByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ASHRByte512VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2415,1 +2415,1 @@\n-    static void ASHRByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ASHRByte512VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2435,0 +2435,49 @@\n+\n+    static byte ROR(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void RORByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Byte512VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void RORByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::ROR);\n+    }\n+\n+\n+    static byte ROL(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n+    }\n+\n@@ -2444,1 +2493,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2448,1 +2498,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Byte512VectorTests::ROL);\n@@ -2450,0 +2500,3 @@\n+\n+\n+\n@@ -2462,1 +2515,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2466,1 +2520,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Byte512VectorTests::ROL);\n+    }\n+\n+\n+    static byte ROR_unary(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n@@ -2468,0 +2527,1 @@\n+\n@@ -2469,1 +2529,1 @@\n-    static void RORByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte512VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2481,1 +2541,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROR_unary);\n@@ -2483,0 +2543,3 @@\n+\n+\n+\n@@ -2484,1 +2547,1 @@\n-    static void RORByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte512VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2499,1 +2562,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROR_unary);\n+    }\n+\n+\n+    static byte ROL_unary(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n@@ -2501,0 +2569,38 @@\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void ROLByte512VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void ROLByte512VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2305,1 +2305,1 @@\n-    static void LSHLByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHLByte64VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2323,1 +2323,1 @@\n-    static void LSHLByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHLByte64VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2351,1 +2351,1 @@\n-    static void LSHRByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHRByte64VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2369,1 +2369,1 @@\n-    static void LSHRByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHRByte64VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2397,1 +2397,1 @@\n-    static void ASHRByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ASHRByte64VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2415,1 +2415,1 @@\n-    static void ASHRByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ASHRByte64VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2435,0 +2435,49 @@\n+\n+    static byte ROR(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void RORByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Byte64VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void RORByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::ROR);\n+    }\n+\n+\n+    static byte ROL(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n+    }\n+\n@@ -2444,1 +2493,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2448,1 +2498,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Byte64VectorTests::ROL);\n@@ -2450,0 +2500,3 @@\n+\n+\n+\n@@ -2462,1 +2515,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2466,1 +2520,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Byte64VectorTests::ROL);\n+    }\n+\n+\n+    static byte ROR_unary(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n@@ -2468,0 +2527,1 @@\n+\n@@ -2469,1 +2529,1 @@\n-    static void RORByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte64VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2481,1 +2541,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROR_unary);\n@@ -2483,0 +2543,3 @@\n+\n+\n+\n@@ -2484,1 +2547,1 @@\n-    static void RORByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte64VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2499,1 +2562,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROR_unary);\n+    }\n+\n+\n+    static byte ROL_unary(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n@@ -2501,0 +2569,38 @@\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void ROLByte64VectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void ROLByte64VectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2310,1 +2310,1 @@\n-    static void LSHLByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHLByteMaxVectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2328,1 +2328,1 @@\n-    static void LSHLByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHLByteMaxVectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2356,1 +2356,1 @@\n-    static void LSHRByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void LSHRByteMaxVectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2374,1 +2374,1 @@\n-    static void LSHRByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void LSHRByteMaxVectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2402,1 +2402,1 @@\n-    static void ASHRByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ASHRByteMaxVectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2420,1 +2420,1 @@\n-    static void ASHRByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ASHRByteMaxVectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2440,0 +2440,49 @@\n+\n+    static byte ROR(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void RORByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void RORByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROR);\n+    }\n+\n+\n+    static byte ROL(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n+    }\n+\n@@ -2449,1 +2498,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2453,1 +2503,1 @@\n-        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, ByteMaxVectorTests::ROL);\n@@ -2455,0 +2505,3 @@\n+\n+\n+\n@@ -2467,1 +2520,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2471,1 +2525,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROL);\n+    }\n+\n+\n+    static byte ROR_unary(byte a, byte b) {\n+        return (byte)(ROR_scalar(a,b));\n@@ -2473,0 +2532,1 @@\n+\n@@ -2474,1 +2534,1 @@\n-    static void RORByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByteMaxVectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2486,1 +2546,1 @@\n-        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROR_unary);\n@@ -2488,0 +2548,3 @@\n+\n+\n+\n@@ -2489,1 +2552,1 @@\n-    static void RORByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByteMaxVectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2504,1 +2567,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROR_unary);\n+    }\n+\n+\n+    static byte ROL_unary(byte a, byte b) {\n+        return (byte)(ROL_scalar(a,b));\n@@ -2506,0 +2574,38 @@\n+\n+    @Test(dataProvider = \"byteBinaryOpProvider\")\n+    static void ROLByteMaxVectorTestsScalarShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n+    static void ROLByteMaxVectorTestsScalarShiftMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] b = fb.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -1933,0 +1933,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1933,0 +1933,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1933,0 +1933,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1933,0 +1933,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1938,0 +1938,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1943,0 +1943,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1943,0 +1943,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1943,0 +1943,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1943,0 +1943,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1948,0 +1948,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2269,1 +2269,1 @@\n-    static void LSHLInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHLInt128VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2287,1 +2287,1 @@\n-    static void LSHLInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHLInt128VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2315,1 +2315,1 @@\n-    static void LSHRInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHRInt128VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2333,1 +2333,1 @@\n-    static void LSHRInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHRInt128VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2361,1 +2361,1 @@\n-    static void ASHRInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ASHRInt128VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2379,1 +2379,1 @@\n-    static void ASHRInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ASHRInt128VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2401,0 +2401,49 @@\n+\n+    static int ROR(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void RORInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int128VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void RORInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::ROR);\n+    }\n+\n+\n+    static int ROL(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n+    }\n+\n@@ -2410,1 +2459,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2414,1 +2464,1 @@\n-        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Int128VectorTests::ROL);\n@@ -2416,0 +2466,3 @@\n+\n+\n+\n@@ -2428,1 +2481,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2432,1 +2486,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::ROL);\n+    }\n+\n+\n+    static int ROR_unary(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n@@ -2434,0 +2493,1 @@\n+\n@@ -2435,1 +2495,1 @@\n-    static void RORInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt128VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2447,1 +2507,1 @@\n-        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROR_unary);\n@@ -2449,0 +2509,3 @@\n+\n+\n+\n@@ -2450,1 +2513,1 @@\n-    static void RORInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt128VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2465,1 +2528,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROR_unary);\n+    }\n+\n+\n+    static int ROL_unary(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n@@ -2467,0 +2535,38 @@\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void ROLInt128VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void ROLInt128VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2269,1 +2269,1 @@\n-    static void LSHLInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHLInt256VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2287,1 +2287,1 @@\n-    static void LSHLInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHLInt256VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2315,1 +2315,1 @@\n-    static void LSHRInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHRInt256VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2333,1 +2333,1 @@\n-    static void LSHRInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHRInt256VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2361,1 +2361,1 @@\n-    static void ASHRInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ASHRInt256VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2379,1 +2379,1 @@\n-    static void ASHRInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ASHRInt256VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2401,0 +2401,49 @@\n+\n+    static int ROR(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void RORInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int256VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void RORInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::ROR);\n+    }\n+\n+\n+    static int ROL(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n+    }\n+\n@@ -2410,1 +2459,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2414,1 +2464,1 @@\n-        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Int256VectorTests::ROL);\n@@ -2416,0 +2466,3 @@\n+\n+\n+\n@@ -2428,1 +2481,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2432,1 +2486,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::ROL);\n+    }\n+\n+\n+    static int ROR_unary(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n@@ -2434,0 +2493,1 @@\n+\n@@ -2435,1 +2495,1 @@\n-    static void RORInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt256VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2447,1 +2507,1 @@\n-        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROR_unary);\n@@ -2449,0 +2509,3 @@\n+\n+\n+\n@@ -2450,1 +2513,1 @@\n-    static void RORInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt256VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2465,1 +2528,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROR_unary);\n+    }\n+\n+\n+    static int ROL_unary(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n@@ -2467,0 +2535,38 @@\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void ROLInt256VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void ROLInt256VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2269,1 +2269,1 @@\n-    static void LSHLInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHLInt512VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2287,1 +2287,1 @@\n-    static void LSHLInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHLInt512VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2315,1 +2315,1 @@\n-    static void LSHRInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHRInt512VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2333,1 +2333,1 @@\n-    static void LSHRInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHRInt512VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2361,1 +2361,1 @@\n-    static void ASHRInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ASHRInt512VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2379,1 +2379,1 @@\n-    static void ASHRInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ASHRInt512VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2401,0 +2401,49 @@\n+\n+    static int ROR(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void RORInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int512VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void RORInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::ROR);\n+    }\n+\n+\n+    static int ROL(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n+    }\n+\n@@ -2410,1 +2459,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2414,1 +2464,1 @@\n-        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Int512VectorTests::ROL);\n@@ -2416,0 +2466,3 @@\n+\n+\n+\n@@ -2428,1 +2481,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2432,1 +2486,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::ROL);\n+    }\n+\n+\n+    static int ROR_unary(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n@@ -2434,0 +2493,1 @@\n+\n@@ -2435,1 +2495,1 @@\n-    static void RORInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt512VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2447,1 +2507,1 @@\n-        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROR_unary);\n@@ -2449,0 +2509,3 @@\n+\n+\n+\n@@ -2450,1 +2513,1 @@\n-    static void RORInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt512VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2465,1 +2528,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROR_unary);\n+    }\n+\n+\n+    static int ROL_unary(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n@@ -2467,0 +2535,38 @@\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void ROLInt512VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void ROLInt512VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2269,1 +2269,1 @@\n-    static void LSHLInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHLInt64VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2287,1 +2287,1 @@\n-    static void LSHLInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHLInt64VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2315,1 +2315,1 @@\n-    static void LSHRInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHRInt64VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2333,1 +2333,1 @@\n-    static void LSHRInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHRInt64VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2361,1 +2361,1 @@\n-    static void ASHRInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ASHRInt64VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2379,1 +2379,1 @@\n-    static void ASHRInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ASHRInt64VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2401,0 +2401,49 @@\n+\n+    static int ROR(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void RORInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int64VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void RORInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::ROR);\n+    }\n+\n+\n+    static int ROL(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n+    }\n+\n@@ -2410,1 +2459,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2414,1 +2464,1 @@\n-        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Int64VectorTests::ROL);\n@@ -2416,0 +2466,3 @@\n+\n+\n+\n@@ -2428,1 +2481,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2432,1 +2486,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::ROL);\n+    }\n+\n+\n+    static int ROR_unary(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n@@ -2434,0 +2493,1 @@\n+\n@@ -2435,1 +2495,1 @@\n-    static void RORInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt64VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2447,1 +2507,1 @@\n-        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROR_unary);\n@@ -2449,0 +2509,3 @@\n+\n+\n+\n@@ -2450,1 +2513,1 @@\n-    static void RORInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt64VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2465,1 +2528,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROR_unary);\n+    }\n+\n+\n+    static int ROL_unary(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n@@ -2467,0 +2535,38 @@\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void ROLInt64VectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void ROLInt64VectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2274,1 +2274,1 @@\n-    static void LSHLIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHLIntMaxVectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2292,1 +2292,1 @@\n-    static void LSHLIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHLIntMaxVectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2320,1 +2320,1 @@\n-    static void LSHRIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void LSHRIntMaxVectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2338,1 +2338,1 @@\n-    static void LSHRIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void LSHRIntMaxVectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2366,1 +2366,1 @@\n-    static void ASHRIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ASHRIntMaxVectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2384,1 +2384,1 @@\n-    static void ASHRIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ASHRIntMaxVectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2406,0 +2406,49 @@\n+\n+    static int ROR(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void RORIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void RORIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::ROR);\n+    }\n+\n+\n+    static int ROL(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n+    }\n+\n@@ -2415,1 +2464,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2419,1 +2469,1 @@\n-        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::ROL);\n@@ -2421,0 +2471,3 @@\n+\n+\n+\n@@ -2433,1 +2486,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2437,1 +2491,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::ROL);\n+    }\n+\n+\n+    static int ROR_unary(int a, int b) {\n+        return (int)(ROR_scalar(a,b));\n@@ -2439,0 +2498,1 @@\n+\n@@ -2440,1 +2500,1 @@\n-    static void RORIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORIntMaxVectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2452,1 +2512,1 @@\n-        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROR_unary);\n@@ -2454,0 +2514,3 @@\n+\n+\n+\n@@ -2455,1 +2518,1 @@\n-    static void RORIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORIntMaxVectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2470,1 +2533,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROR_unary);\n+    }\n+\n+\n+    static int ROL_unary(int a, int b) {\n+        return (int)(ROL_scalar(a,b));\n@@ -2472,0 +2540,38 @@\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void ROLIntMaxVectorTestsScalarShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void ROLIntMaxVectorTestsScalarShiftMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2290,1 +2290,1 @@\n-    static void LSHLLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHLLong128VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2308,1 +2308,1 @@\n-    static void LSHLLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHLLong128VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2336,1 +2336,1 @@\n-    static void LSHRLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHRLong128VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2354,1 +2354,1 @@\n-    static void LSHRLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHRLong128VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2382,1 +2382,1 @@\n-    static void ASHRLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ASHRLong128VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2400,1 +2400,1 @@\n-    static void ASHRLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ASHRLong128VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2422,0 +2422,49 @@\n+\n+    static long ROR(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void RORLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long128VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void RORLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::ROR);\n+    }\n+\n+\n+    static long ROL(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n+    }\n+\n@@ -2431,1 +2480,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2435,1 +2485,1 @@\n-        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Long128VectorTests::ROL);\n@@ -2437,0 +2487,3 @@\n+\n+\n+\n@@ -2449,1 +2502,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2453,1 +2507,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::ROL);\n+    }\n+\n+\n+    static long ROR_unary(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n@@ -2455,0 +2514,1 @@\n+\n@@ -2456,1 +2516,1 @@\n-    static void RORLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong128VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2468,1 +2528,1 @@\n-        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROR_unary);\n@@ -2470,0 +2530,3 @@\n+\n+\n+\n@@ -2471,1 +2534,1 @@\n-    static void RORLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong128VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2486,1 +2549,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROR_unary);\n+    }\n+\n+\n+    static long ROL_unary(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n@@ -2488,0 +2556,38 @@\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void ROLLong128VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void ROLLong128VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2290,1 +2290,1 @@\n-    static void LSHLLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHLLong256VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2308,1 +2308,1 @@\n-    static void LSHLLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHLLong256VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2336,1 +2336,1 @@\n-    static void LSHRLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHRLong256VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2354,1 +2354,1 @@\n-    static void LSHRLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHRLong256VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2382,1 +2382,1 @@\n-    static void ASHRLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ASHRLong256VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2400,1 +2400,1 @@\n-    static void ASHRLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ASHRLong256VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2422,0 +2422,49 @@\n+\n+    static long ROR(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void RORLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long256VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void RORLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::ROR);\n+    }\n+\n+\n+    static long ROL(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n+    }\n+\n@@ -2431,1 +2480,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2435,1 +2485,1 @@\n-        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Long256VectorTests::ROL);\n@@ -2437,0 +2487,3 @@\n+\n+\n+\n@@ -2449,1 +2502,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2453,1 +2507,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::ROL);\n+    }\n+\n+\n+    static long ROR_unary(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n@@ -2455,0 +2514,1 @@\n+\n@@ -2456,1 +2516,1 @@\n-    static void RORLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong256VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2468,1 +2528,1 @@\n-        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROR_unary);\n@@ -2470,0 +2530,3 @@\n+\n+\n+\n@@ -2471,1 +2534,1 @@\n-    static void RORLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong256VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2486,1 +2549,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROR_unary);\n+    }\n+\n+\n+    static long ROL_unary(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n@@ -2488,0 +2556,38 @@\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void ROLLong256VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void ROLLong256VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2290,1 +2290,1 @@\n-    static void LSHLLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHLLong512VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2308,1 +2308,1 @@\n-    static void LSHLLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHLLong512VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2336,1 +2336,1 @@\n-    static void LSHRLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHRLong512VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2354,1 +2354,1 @@\n-    static void LSHRLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHRLong512VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2382,1 +2382,1 @@\n-    static void ASHRLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ASHRLong512VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2400,1 +2400,1 @@\n-    static void ASHRLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ASHRLong512VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2422,0 +2422,49 @@\n+\n+    static long ROR(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void RORLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long512VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void RORLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::ROR);\n+    }\n+\n+\n+    static long ROL(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n+    }\n+\n@@ -2431,1 +2480,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2435,1 +2485,1 @@\n-        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Long512VectorTests::ROL);\n@@ -2437,0 +2487,3 @@\n+\n+\n+\n@@ -2449,1 +2502,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2453,1 +2507,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::ROL);\n+    }\n+\n+\n+    static long ROR_unary(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n@@ -2455,0 +2514,1 @@\n+\n@@ -2456,1 +2516,1 @@\n-    static void RORLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong512VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2468,1 +2528,1 @@\n-        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROR_unary);\n@@ -2470,0 +2530,3 @@\n+\n+\n+\n@@ -2471,1 +2534,1 @@\n-    static void RORLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong512VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2486,1 +2549,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROR_unary);\n+    }\n+\n+\n+    static long ROL_unary(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n@@ -2488,0 +2556,38 @@\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void ROLLong512VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void ROLLong512VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2290,1 +2290,1 @@\n-    static void LSHLLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHLLong64VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2308,1 +2308,1 @@\n-    static void LSHLLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHLLong64VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2336,1 +2336,1 @@\n-    static void LSHRLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHRLong64VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2354,1 +2354,1 @@\n-    static void LSHRLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHRLong64VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2382,1 +2382,1 @@\n-    static void ASHRLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ASHRLong64VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2400,1 +2400,1 @@\n-    static void ASHRLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ASHRLong64VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2422,0 +2422,49 @@\n+\n+    static long ROR(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void RORLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long64VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void RORLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::ROR);\n+    }\n+\n+\n+    static long ROL(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n+    }\n+\n@@ -2431,1 +2480,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2435,1 +2485,1 @@\n-        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Long64VectorTests::ROL);\n@@ -2437,0 +2487,3 @@\n+\n+\n+\n@@ -2449,1 +2502,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2453,1 +2507,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::ROL);\n+    }\n+\n+\n+    static long ROR_unary(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n@@ -2455,0 +2514,1 @@\n+\n@@ -2456,1 +2516,1 @@\n-    static void RORLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong64VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2468,1 +2528,1 @@\n-        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROR_unary);\n@@ -2470,0 +2530,3 @@\n+\n+\n+\n@@ -2471,1 +2534,1 @@\n-    static void RORLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong64VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2486,1 +2549,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROR_unary);\n+    }\n+\n+\n+    static long ROL_unary(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n@@ -2488,0 +2556,38 @@\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void ROLLong64VectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void ROLLong64VectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2295,1 +2295,1 @@\n-    static void LSHLLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHLLongMaxVectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2313,1 +2313,1 @@\n-    static void LSHLLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHLLongMaxVectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2341,1 +2341,1 @@\n-    static void LSHRLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void LSHRLongMaxVectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2359,1 +2359,1 @@\n-    static void LSHRLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void LSHRLongMaxVectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2387,1 +2387,1 @@\n-    static void ASHRLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ASHRLongMaxVectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2405,1 +2405,1 @@\n-    static void ASHRLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ASHRLongMaxVectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2427,0 +2427,49 @@\n+\n+    static long ROR(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void RORLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void RORLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::ROR);\n+    }\n+\n+\n+    static long ROL(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n+    }\n+\n@@ -2436,1 +2485,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2440,1 +2490,1 @@\n-        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::ROL);\n@@ -2442,0 +2492,3 @@\n+\n+\n+\n@@ -2454,1 +2507,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2458,1 +2512,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::ROL);\n+    }\n+\n+\n+    static long ROR_unary(long a, long b) {\n+        return (long)(ROR_scalar(a,b));\n@@ -2460,0 +2519,1 @@\n+\n@@ -2461,1 +2521,1 @@\n-    static void RORLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLongMaxVectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2473,1 +2533,1 @@\n-        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROR_unary);\n@@ -2475,0 +2535,3 @@\n+\n+\n+\n@@ -2476,1 +2539,1 @@\n-    static void RORLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLongMaxVectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2491,1 +2554,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROR_unary);\n+    }\n+\n+\n+    static long ROL_unary(long a, long b) {\n+        return (long)(ROL_scalar(a,b));\n@@ -2493,0 +2561,38 @@\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void ROLLongMaxVectorTestsScalarShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void ROLLongMaxVectorTestsScalarShiftMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2297,1 +2297,1 @@\n-    static void LSHLShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHLShort128VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2315,1 +2315,1 @@\n-    static void LSHLShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHLShort128VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2343,1 +2343,1 @@\n-    static void LSHRShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHRShort128VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2361,1 +2361,1 @@\n-    static void LSHRShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHRShort128VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2389,1 +2389,1 @@\n-    static void ASHRShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ASHRShort128VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2407,1 +2407,1 @@\n-    static void ASHRShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ASHRShort128VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2425,0 +2425,49 @@\n+\n+    static short ROR(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void RORShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Short128VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void RORShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::ROR);\n+    }\n+\n+\n+    static short ROL(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n+    }\n+\n@@ -2434,1 +2483,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2438,1 +2488,1 @@\n-        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Short128VectorTests::ROL);\n@@ -2440,0 +2490,3 @@\n+\n+\n+\n@@ -2452,1 +2505,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2456,1 +2510,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Short128VectorTests::ROL);\n+    }\n+\n+\n+    static short ROR_unary(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n@@ -2458,0 +2517,1 @@\n+\n@@ -2459,1 +2519,1 @@\n-    static void RORShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort128VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2471,1 +2531,1 @@\n-        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROR_unary);\n@@ -2473,0 +2533,3 @@\n+\n+\n+\n@@ -2474,1 +2537,1 @@\n-    static void RORShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort128VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2489,1 +2552,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROR_unary);\n+    }\n+\n+\n+    static short ROL_unary(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n@@ -2491,0 +2559,38 @@\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void ROLShort128VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void ROLShort128VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2297,1 +2297,1 @@\n-    static void LSHLShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHLShort256VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2315,1 +2315,1 @@\n-    static void LSHLShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHLShort256VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2343,1 +2343,1 @@\n-    static void LSHRShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHRShort256VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2361,1 +2361,1 @@\n-    static void LSHRShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHRShort256VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2389,1 +2389,1 @@\n-    static void ASHRShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ASHRShort256VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2407,1 +2407,1 @@\n-    static void ASHRShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ASHRShort256VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2425,0 +2425,49 @@\n+\n+    static short ROR(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void RORShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Short256VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void RORShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::ROR);\n+    }\n+\n+\n+    static short ROL(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n+    }\n+\n@@ -2434,1 +2483,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2438,1 +2488,1 @@\n-        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Short256VectorTests::ROL);\n@@ -2440,0 +2490,3 @@\n+\n+\n+\n@@ -2452,1 +2505,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2456,1 +2510,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Short256VectorTests::ROL);\n+    }\n+\n+\n+    static short ROR_unary(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n@@ -2458,0 +2517,1 @@\n+\n@@ -2459,1 +2519,1 @@\n-    static void RORShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort256VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2471,1 +2531,1 @@\n-        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROR_unary);\n@@ -2473,0 +2533,3 @@\n+\n+\n+\n@@ -2474,1 +2537,1 @@\n-    static void RORShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort256VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2489,1 +2552,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROR_unary);\n+    }\n+\n+\n+    static short ROL_unary(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n@@ -2491,0 +2559,38 @@\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void ROLShort256VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void ROLShort256VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2297,1 +2297,1 @@\n-    static void LSHLShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHLShort512VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2315,1 +2315,1 @@\n-    static void LSHLShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHLShort512VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2343,1 +2343,1 @@\n-    static void LSHRShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHRShort512VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2361,1 +2361,1 @@\n-    static void LSHRShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHRShort512VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2389,1 +2389,1 @@\n-    static void ASHRShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ASHRShort512VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2407,1 +2407,1 @@\n-    static void ASHRShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ASHRShort512VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2425,0 +2425,49 @@\n+\n+    static short ROR(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void RORShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Short512VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void RORShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::ROR);\n+    }\n+\n+\n+    static short ROL(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n+    }\n+\n@@ -2434,1 +2483,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2438,1 +2488,1 @@\n-        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Short512VectorTests::ROL);\n@@ -2440,0 +2490,3 @@\n+\n+\n+\n@@ -2452,1 +2505,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2456,1 +2510,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Short512VectorTests::ROL);\n+    }\n+\n+\n+    static short ROR_unary(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n@@ -2458,0 +2517,1 @@\n+\n@@ -2459,1 +2519,1 @@\n-    static void RORShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort512VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2471,1 +2531,1 @@\n-        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROR_unary);\n@@ -2473,0 +2533,3 @@\n+\n+\n+\n@@ -2474,1 +2537,1 @@\n-    static void RORShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort512VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2489,1 +2552,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROR_unary);\n+    }\n+\n+\n+    static short ROL_unary(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n@@ -2491,0 +2559,38 @@\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void ROLShort512VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void ROLShort512VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2297,1 +2297,1 @@\n-    static void LSHLShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHLShort64VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2315,1 +2315,1 @@\n-    static void LSHLShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHLShort64VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2343,1 +2343,1 @@\n-    static void LSHRShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHRShort64VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2361,1 +2361,1 @@\n-    static void LSHRShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHRShort64VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2389,1 +2389,1 @@\n-    static void ASHRShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ASHRShort64VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2407,1 +2407,1 @@\n-    static void ASHRShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ASHRShort64VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2425,0 +2425,49 @@\n+\n+    static short ROR(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void RORShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Short64VectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void RORShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::ROR);\n+    }\n+\n+\n+    static short ROL(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n+    }\n+\n@@ -2434,1 +2483,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2438,1 +2488,1 @@\n-        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, Short64VectorTests::ROL);\n@@ -2440,0 +2490,3 @@\n+\n+\n+\n@@ -2452,1 +2505,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2456,1 +2510,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, Short64VectorTests::ROL);\n+    }\n+\n+\n+    static short ROR_unary(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n@@ -2458,0 +2517,1 @@\n+\n@@ -2459,1 +2519,1 @@\n-    static void RORShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort64VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2471,1 +2531,1 @@\n-        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROR_unary);\n@@ -2473,0 +2533,3 @@\n+\n+\n+\n@@ -2474,1 +2537,1 @@\n-    static void RORShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort64VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2489,1 +2552,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROR_unary);\n+    }\n+\n+\n+    static short ROL_unary(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n@@ -2491,0 +2559,38 @@\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void ROLShort64VectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void ROLShort64VectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2302,1 +2302,1 @@\n-    static void LSHLShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHLShortMaxVectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2320,1 +2320,1 @@\n-    static void LSHLShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHLShortMaxVectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2348,1 +2348,1 @@\n-    static void LSHRShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void LSHRShortMaxVectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2366,1 +2366,1 @@\n-    static void LSHRShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void LSHRShortMaxVectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2394,1 +2394,1 @@\n-    static void ASHRShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ASHRShortMaxVectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2412,1 +2412,1 @@\n-    static void ASHRShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ASHRShortMaxVectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2430,0 +2430,49 @@\n+\n+    static short ROR(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void RORShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::ROR);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void RORShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROR, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROR);\n+    }\n+\n+\n+    static short ROL(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n+    }\n+\n@@ -2439,1 +2488,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv).intoArray(r, i);\n@@ -2443,1 +2493,1 @@\n-        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, ShortMaxVectorTests::ROL);\n@@ -2445,0 +2495,3 @@\n+\n+\n+\n@@ -2457,1 +2510,2 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.ROL, bv, vmask).intoArray(r, i);\n@@ -2461,1 +2515,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROL_scalar);\n+        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROL);\n+    }\n+\n+\n+    static short ROR_unary(short a, short b) {\n+        return (short)(ROR_scalar(a,b));\n@@ -2463,0 +2522,1 @@\n+\n@@ -2464,1 +2524,1 @@\n-    static void RORShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShortMaxVectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2476,1 +2536,1 @@\n-        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROR_unary);\n@@ -2478,0 +2538,3 @@\n+\n+\n+\n@@ -2479,1 +2542,1 @@\n-    static void RORShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShortMaxVectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2494,1 +2557,6 @@\n-        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROR_scalar);\n+        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROR_unary);\n+    }\n+\n+\n+    static short ROL_unary(short a, short b) {\n+        return (short)(ROL_scalar(a,b));\n@@ -2496,0 +2564,38 @@\n+\n+    @Test(dataProvider = \"shortBinaryOpProvider\")\n+    static void ROLShortMaxVectorTestsScalarShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROL_unary);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void ROLShortMaxVectorTestsScalarShiftMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROL_unary);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":120,"deletions":14,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-rotate_template=\"Rotate-op\"\n@@ -78,1 +77,0 @@\n-rotate_masked_template=\"Rotate-Masked-op\"\n@@ -283,6 +281,0 @@\n-function gen_rotate_cst_op {\n-  echo \"Generating Rotate constant op $1 ($2)...\"\n-  gen_op_tmpl $rotate_template \"$@\"\n-  gen_op_tmpl $rotate_masked_template \"$@\"\n-}\n-\n@@ -460,2 +452,4 @@\n-gen_rotate_cst_op  \"ROL\" \"\" \"\"\n-gen_rotate_cst_op  \"ROR\" \"\" \"\"\n+gen_binary_alu_op \"ROR\" \"ROR_scalar(a,b)\" \"BITWISE\"\n+gen_binary_alu_op \"ROL\" \"ROL_scalar(a,b)\" \"BITWISE\"\n+gen_shift_cst_op  \"ROR\" \"ROR_scalar(a,b)\" \"BITWISE\"\n+gen_shift_cst_op  \"ROL\" \"ROL_scalar(a,b)\" \"BITWISE\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-    static void [[TEST]]$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n+    static void [[TEST]]$vectorteststype$ScalarShiftMasked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Shift-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-    static void [[TEST]]$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {\n+    static void [[TEST]]$vectorteststype$ScalarShift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Shift-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@OutputTimeUnit(TimeUnit.MINUTES)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n@@ -41,1 +41,1 @@\n-    @Param({\"11\",\"21\",\"31\"})\n+    @Param({\"7\",\"15\",\"31\"})\n@@ -44,2 +44,4 @@\n-    long[] longinp;\n-    long[] longres;\n+    byte[] byteinp;\n+    byte[] byteres;\n+    short[] shortinp;\n+    short[] shortres;\n@@ -48,0 +50,4 @@\n+    long[] longinp;\n+    long[] longres;\n+    VectorSpecies bspecies;\n+    VectorSpecies sspecies;\n@@ -51,1 +57,2 @@\n-    static final long[] specialvalslong = {0L, -0L, Long.MIN_VALUE, Long.MAX_VALUE};\n+    static final byte[] specialvalsbyte = {0, -0, Byte.MIN_VALUE, Byte.MAX_VALUE};\n+    static final short[] specialvalsshort = {0, -0, Short.MIN_VALUE, Short.MAX_VALUE};\n@@ -53,0 +60,1 @@\n+    static final long[] specialvalslong = {0L, -0L, Long.MIN_VALUE, Long.MAX_VALUE};\n@@ -57,2 +65,4 @@\n-        longinp = new long[size];\n-        longres = new long[size];\n+        byteinp = new byte[size];\n+        byteres = new byte[size];\n+        shortinp = new short[size];\n+        shortres = new short[size];\n@@ -61,0 +71,2 @@\n+        longinp = new long[size];\n+        longres = new long[size];\n@@ -62,0 +74,2 @@\n+        bspecies = VectorSpecies.of(byte.class, VectorShape.forBitSize(bits));\n+        sspecies = VectorSpecies.of(short.class, VectorShape.forBitSize(bits));\n@@ -66,0 +80,2 @@\n+            byteinp[i] = (byte)i;\n+            shortinp[i] = (short)i;\n@@ -69,2 +85,5 @@\n-        for (int i = 0 ; i < specialvalslong.length; i++) {\n-            longinp[i] = specialvalslong[i];\n+        for (int i = 0 ; i < specialvalsbyte.length; i++) {\n+            byteinp[i] = specialvalsbyte[i];\n+        }\n+        for (int i = 0 ; i < specialvalsshort.length; i++) {\n+            shortinp[i] = specialvalsshort[i];\n@@ -75,0 +94,59 @@\n+        for (int i = 0 ; i < specialvalslong.length; i++) {\n+            longinp[i] = specialvalslong[i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testRotateLeftB(Blackhole bh) {\n+        ByteVector bytevec = null;\n+        for (int j = 0 ; j < size; j+= bspecies.length()) {\n+            bytevec = ByteVector.fromArray(bspecies, byteinp, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n+            bytevec.lanewise(VectorOperators.ROL, j).intoArray(byteres, j);\n+        }\n+        bh.consume(bytevec);\n+    }\n+\n+    @Benchmark\n+    public void testRotateRightB(Blackhole bh) {\n+        ByteVector bytevec = null;\n+        for (int j = 0 ; j < size; j+= bspecies.length()) {\n+            bytevec = ByteVector.fromArray(bspecies, byteinp, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n+            bytevec.lanewise(VectorOperators.ROR, j).intoArray(byteres, j);\n+        }\n+        bh.consume(bytevec);\n+    }\n+\n+    @Benchmark\n+    public void testRotateLeftS(Blackhole bh) {\n+        ShortVector shortvec = null;\n+        for (int j = 0 ; j < size; j+= sspecies.length()) {\n+            shortvec = ShortVector.fromArray(sspecies, shortinp, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n+            shortvec.lanewise(VectorOperators.ROL, j).intoArray(shortres, j);\n+        }\n+        bh.consume(shortvec);\n+    }\n+\n+    @Benchmark\n+    public void testRotateRightS(Blackhole bh) {\n+        ShortVector shortvec = null;\n+        for (int j = 0 ; j < size; j+= sspecies.length()) {\n+            shortvec = ShortVector.fromArray(sspecies, shortinp, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n+            shortvec.lanewise(VectorOperators.ROR, j).intoArray(shortres, j);\n+        }\n+        bh.consume(shortvec);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RotateBenchmark.java","additions":87,"deletions":9,"binary":false,"changes":96,"status":"modified"}]}