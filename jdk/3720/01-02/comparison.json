{"files":[{"patch":"@@ -1296,0 +1296,1 @@\n+  Node* cnt  = argument(5);\n@@ -1298,0 +1299,1 @@\n+  bool is_const_rotate = is_rotate && cnt->is_Con() && -0x80 <= cnt->get_int() && cnt->get_int() < 0x80;\n@@ -1302,1 +1304,1 @@\n-        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed)) {\n+        (!is_const_rotate && !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n@@ -1340,1 +1342,0 @@\n-  Node* cnt  = argument(5);\n@@ -1345,1 +1346,1 @@\n-    if (!cnt->is_Con() || -0x80 > cnt->get_int() || cnt->get_int() >= 0x80) {\n+    if (!is_const_rotate) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -396,0 +396,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateLeft(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateRight(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n@@ -658,1 +670,1 @@\n-                        v0.bOp(v1, (i, a, n) ->(byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (Byte.SIZE - (n & Byte.SIZE-1)))));\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -660,1 +672,1 @@\n-                        v0.bOp(v1, (i, a, n) ->(byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (Byte.SIZE - (n & Byte.SIZE-1)))));\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -820,1 +832,1 @@\n-                        v.uOp((i, a) ->(byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (Byte.SIZE - (n & Byte.SIZE-1)))));\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n@@ -822,1 +834,1 @@\n-                        v.uOp((i, a) ->(byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (Byte.SIZE - (n & Byte.SIZE-1)))));\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -396,0 +396,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -396,0 +396,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -396,0 +396,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateLeft(int a, int n) {\n+        return Integer.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateRight(int a, int n) {\n+        return Integer.rotateRight(a, n);\n+    }\n+\n@@ -658,1 +670,1 @@\n-                        v0.bOp(v1, (i, a, n) -> Integer.rotateLeft(a, n));\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -660,1 +672,1 @@\n-                        v0.bOp(v1, (i, a, n) -> Integer.rotateRight(a, n));\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -820,1 +832,1 @@\n-                        v.uOp((i, a) -> Integer.rotateLeft(a, n));\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n@@ -822,1 +834,1 @@\n-                        v.uOp((i, a) -> Integer.rotateRight(a, n));\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -396,0 +396,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateLeft(long a, int n) {\n+        return Long.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateRight(long a, int n) {\n+        return Long.rotateRight(a, n);\n+    }\n+\n@@ -616,1 +628,1 @@\n-                        v0.bOp(v1, (i, a, n) -> Long.rotateLeft(a, (int)n));\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -618,1 +630,1 @@\n-                        v0.bOp(v1, (i, a, n) -> Long.rotateRight(a, (int)n));\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -738,1 +750,1 @@\n-                        v.uOp((i, a) -> Long.rotateLeft(a, (int)n));\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n@@ -740,1 +752,1 @@\n-                        v.uOp((i, a) -> Long.rotateRight(a, (int)n));\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -396,0 +396,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateLeft(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) << (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) >>> (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateRight(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) >>> (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) << (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n@@ -658,1 +670,1 @@\n-                        v0.bOp(v1, (i, a, n) ->(short)(((((short)a) & Short.toUnsignedInt((short)-1)) << (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) >>> (Short.SIZE - (n & Short.SIZE-1)))));\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -660,1 +672,1 @@\n-                        v0.bOp(v1, (i, a, n) ->(short)(((((short)a) & Short.toUnsignedInt((short)-1)) >>> (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) << (Short.SIZE - (n & Short.SIZE-1)))));\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -820,1 +832,1 @@\n-                        v.uOp((i, a) ->(short)(((((short)a) & Short.toUnsignedInt((short)-1)) << (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) >>> (Short.SIZE - (n & Short.SIZE-1)))));\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n@@ -822,1 +834,1 @@\n-                        v.uOp((i, a) ->(short)(((((short)a) & Short.toUnsignedInt((short)-1)) >>> (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) << (Short.SIZE - (n & Short.SIZE-1)))));\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -400,0 +400,22 @@\n+#if[BITWISE]\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateLeft($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateLeft(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateRight($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateRight(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+#end[BITWISE]\n+\n@@ -728,12 +750,0 @@\n-#if[long]\n-                case VECTOR_OP_LROTATE: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, n) -> Long.rotateLeft(a, (int)n));\n-                case VECTOR_OP_RROTATE: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, n) -> Long.rotateRight(a, (int)n));\n-#else[long]\n-#if[int]\n-                case VECTOR_OP_LROTATE: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, n) -> Integer.rotateLeft(a, n));\n-                case VECTOR_OP_RROTATE: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, n) -> Integer.rotateRight(a, n));\n-#else[int]\n@@ -741,1 +751,1 @@\n-                        v0.bOp(v1, (i, a, n) ->($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1)))));\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -743,3 +753,1 @@\n-                        v0.bOp(v1, (i, a, n) ->($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1)))));\n-#end[int]\n-#end[long]\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -914,12 +922,0 @@\n-#if[long]\n-                case VECTOR_OP_LROTATE: return (v, n) ->\n-                        v.uOp((i, a) -> Long.rotateLeft(a, (int)n));\n-                case VECTOR_OP_RROTATE: return (v, n) ->\n-                        v.uOp((i, a) -> Long.rotateRight(a, (int)n));\n-#else[long]\n-#if[int]\n-                case VECTOR_OP_LROTATE: return (v, n) ->\n-                        v.uOp((i, a) -> Integer.rotateLeft(a, n));\n-                case VECTOR_OP_RROTATE: return (v, n) ->\n-                        v.uOp((i, a) -> Integer.rotateRight(a, n));\n-#else[int]\n@@ -927,1 +923,1 @@\n-                        v.uOp((i, a) ->($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1)))));\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n@@ -929,3 +925,1 @@\n-                        v.uOp((i, a) ->($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1)))));\n-#end[int]\n-#end[long]\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":26,"deletions":32,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1168,0 +1168,8 @@\n+    static byte ROL_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+    }\n+\n+    static byte ROR_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+    }\n+\n@@ -2427,7 +2435,0 @@\n-\n-\n-\n-    static byte ROL_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> ((8 - (b & 7)) & 7))));\n-    }\n-\n@@ -2435,1 +2436,1 @@\n-    static void ROLByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ROLByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2447,1 +2448,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROL_scalar);\n@@ -2449,3 +2450,0 @@\n-\n-\n-\n@@ -2453,1 +2451,1 @@\n-    static void ROLByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ROLByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2468,10 +2466,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static byte ROR_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << ((8 - (b & 7)) & 7))));\n+        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROL_scalar);\n@@ -2479,1 +2468,0 @@\n-\n@@ -2481,1 +2469,1 @@\n-    static void RORByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2493,1 +2481,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Byte128VectorTests::ROR_scalar);\n@@ -2495,3 +2483,0 @@\n-\n-\n-\n@@ -2499,1 +2484,1 @@\n-    static void RORByte128VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2514,1 +2499,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Byte128VectorTests::ROR_scalar);\n@@ -2516,3 +2501,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1168,0 +1168,8 @@\n+    static byte ROL_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+    }\n+\n+    static byte ROR_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+    }\n+\n@@ -2427,7 +2435,0 @@\n-\n-\n-\n-    static byte ROL_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> ((8 - (b & 7)) & 7))));\n-    }\n-\n@@ -2435,1 +2436,1 @@\n-    static void ROLByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ROLByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2447,1 +2448,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROL_scalar);\n@@ -2449,3 +2450,0 @@\n-\n-\n-\n@@ -2453,1 +2451,1 @@\n-    static void ROLByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ROLByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2468,10 +2466,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static byte ROR_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << ((8 - (b & 7)) & 7))));\n+        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROL_scalar);\n@@ -2479,1 +2468,0 @@\n-\n@@ -2481,1 +2469,1 @@\n-    static void RORByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2493,1 +2481,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Byte256VectorTests::ROR_scalar);\n@@ -2495,3 +2483,0 @@\n-\n-\n-\n@@ -2499,1 +2484,1 @@\n-    static void RORByte256VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2514,1 +2499,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Byte256VectorTests::ROR_scalar);\n@@ -2516,3 +2501,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1168,0 +1168,8 @@\n+    static byte ROL_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+    }\n+\n+    static byte ROR_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+    }\n+\n@@ -2427,7 +2435,0 @@\n-\n-\n-\n-    static byte ROL_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> ((8 - (b & 7)) & 7))));\n-    }\n-\n@@ -2435,1 +2436,1 @@\n-    static void ROLByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ROLByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2447,1 +2448,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROL_scalar);\n@@ -2449,3 +2450,0 @@\n-\n-\n-\n@@ -2453,1 +2451,1 @@\n-    static void ROLByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ROLByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2468,10 +2466,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static byte ROR_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << ((8 - (b & 7)) & 7))));\n+        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROL_scalar);\n@@ -2479,1 +2468,0 @@\n-\n@@ -2481,1 +2469,1 @@\n-    static void RORByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2493,1 +2481,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Byte512VectorTests::ROR_scalar);\n@@ -2495,3 +2483,0 @@\n-\n-\n-\n@@ -2499,1 +2484,1 @@\n-    static void RORByte512VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2514,1 +2499,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Byte512VectorTests::ROR_scalar);\n@@ -2516,3 +2501,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1168,0 +1168,8 @@\n+    static byte ROL_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+    }\n+\n+    static byte ROR_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+    }\n+\n@@ -2427,7 +2435,0 @@\n-\n-\n-\n-    static byte ROL_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> ((8 - (b & 7)) & 7))));\n-    }\n-\n@@ -2435,1 +2436,1 @@\n-    static void ROLByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ROLByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2447,1 +2448,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROL_scalar);\n@@ -2449,3 +2450,0 @@\n-\n-\n-\n@@ -2453,1 +2451,1 @@\n-    static void ROLByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ROLByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2468,10 +2466,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static byte ROR_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << ((8 - (b & 7)) & 7))));\n+        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROL_scalar);\n@@ -2479,1 +2468,0 @@\n-\n@@ -2481,1 +2469,1 @@\n-    static void RORByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2493,1 +2481,1 @@\n-        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Byte64VectorTests::ROR_scalar);\n@@ -2495,3 +2483,0 @@\n-\n-\n-\n@@ -2499,1 +2484,1 @@\n-    static void RORByte64VectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2514,1 +2499,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Byte64VectorTests::ROR_scalar);\n@@ -2516,3 +2501,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1173,0 +1173,8 @@\n+    static byte ROL_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+    }\n+\n+    static byte ROR_scalar(byte a, byte b) {\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+    }\n+\n@@ -2432,7 +2440,0 @@\n-\n-\n-\n-    static byte ROL_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> ((8 - (b & 7)) & 7))));\n-    }\n-\n@@ -2440,1 +2441,1 @@\n-    static void ROLByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void ROLByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2452,1 +2453,1 @@\n-        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROL_scalar);\n@@ -2454,3 +2455,0 @@\n-\n-\n-\n@@ -2458,1 +2456,1 @@\n-    static void ROLByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void ROLByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2473,10 +2471,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static byte ROR_unary(byte a, byte b) {\n-        return (byte)((byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << ((8 - (b & 7)) & 7))));\n+        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROL_scalar);\n@@ -2484,1 +2473,0 @@\n-\n@@ -2486,1 +2474,1 @@\n-    static void RORByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n+    static void RORByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n@@ -2498,1 +2486,1 @@\n-        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, ByteMaxVectorTests::ROR_scalar);\n@@ -2500,3 +2488,0 @@\n-\n-\n-\n@@ -2504,1 +2489,1 @@\n-    static void RORByteMaxVectorTestsShift(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n+    static void RORByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n@@ -2519,1 +2504,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, ByteMaxVectorTests::ROR_scalar);\n@@ -2521,3 +2506,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1929,12 +1929,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1929,12 +1929,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1929,12 +1929,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1929,12 +1929,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1934,12 +1934,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1939,12 +1939,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1939,12 +1939,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1939,12 +1939,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1939,12 +1939,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1944,12 +1944,0 @@\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1129,0 +1129,8 @@\n+    static int ROL_scalar(int a, int b) {\n+        return Integer.rotateLeft(a, ((int)b));\n+    }\n+\n+    static int ROR_scalar(int a, int b) {\n+        return Integer.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2393,5 +2401,0 @@\n-\n-    static int ROL_unary(int a, int b) {\n-        return (int)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2399,1 +2402,1 @@\n-    static void ROLInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ROLInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2411,1 +2414,1 @@\n-        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROL_scalar);\n@@ -2413,3 +2416,0 @@\n-\n-\n-\n@@ -2417,1 +2417,1 @@\n-    static void ROLInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ROLInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2432,10 +2432,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static int ROR_unary(int a, int b) {\n-        return (int)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROL_scalar);\n@@ -2443,1 +2434,0 @@\n-\n@@ -2445,1 +2435,1 @@\n-    static void RORInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2457,1 +2447,1 @@\n-        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Int128VectorTests::ROR_scalar);\n@@ -2459,3 +2449,0 @@\n-\n-\n-\n@@ -2463,1 +2450,1 @@\n-    static void RORInt128VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2478,1 +2465,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Int128VectorTests::ROR_scalar);\n@@ -2480,5 +2467,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1129,0 +1129,8 @@\n+    static int ROL_scalar(int a, int b) {\n+        return Integer.rotateLeft(a, ((int)b));\n+    }\n+\n+    static int ROR_scalar(int a, int b) {\n+        return Integer.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2393,5 +2401,0 @@\n-\n-    static int ROL_unary(int a, int b) {\n-        return (int)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2399,1 +2402,1 @@\n-    static void ROLInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ROLInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2411,1 +2414,1 @@\n-        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROL_scalar);\n@@ -2413,3 +2416,0 @@\n-\n-\n-\n@@ -2417,1 +2417,1 @@\n-    static void ROLInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ROLInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2432,10 +2432,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static int ROR_unary(int a, int b) {\n-        return (int)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROL_scalar);\n@@ -2443,1 +2434,0 @@\n-\n@@ -2445,1 +2435,1 @@\n-    static void RORInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2457,1 +2447,1 @@\n-        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Int256VectorTests::ROR_scalar);\n@@ -2459,3 +2449,0 @@\n-\n-\n-\n@@ -2463,1 +2450,1 @@\n-    static void RORInt256VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2478,1 +2465,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Int256VectorTests::ROR_scalar);\n@@ -2480,5 +2467,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1129,0 +1129,8 @@\n+    static int ROL_scalar(int a, int b) {\n+        return Integer.rotateLeft(a, ((int)b));\n+    }\n+\n+    static int ROR_scalar(int a, int b) {\n+        return Integer.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2393,5 +2401,0 @@\n-\n-    static int ROL_unary(int a, int b) {\n-        return (int)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2399,1 +2402,1 @@\n-    static void ROLInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ROLInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2411,1 +2414,1 @@\n-        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROL_scalar);\n@@ -2413,3 +2416,0 @@\n-\n-\n-\n@@ -2417,1 +2417,1 @@\n-    static void ROLInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ROLInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2432,10 +2432,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static int ROR_unary(int a, int b) {\n-        return (int)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROL_scalar);\n@@ -2443,1 +2434,0 @@\n-\n@@ -2445,1 +2435,1 @@\n-    static void RORInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2457,1 +2447,1 @@\n-        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Int512VectorTests::ROR_scalar);\n@@ -2459,3 +2449,0 @@\n-\n-\n-\n@@ -2463,1 +2450,1 @@\n-    static void RORInt512VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2478,1 +2465,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Int512VectorTests::ROR_scalar);\n@@ -2480,5 +2467,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1129,0 +1129,8 @@\n+    static int ROL_scalar(int a, int b) {\n+        return Integer.rotateLeft(a, ((int)b));\n+    }\n+\n+    static int ROR_scalar(int a, int b) {\n+        return Integer.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2393,5 +2401,0 @@\n-\n-    static int ROL_unary(int a, int b) {\n-        return (int)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2399,1 +2402,1 @@\n-    static void ROLInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ROLInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2411,1 +2414,1 @@\n-        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROL_scalar);\n@@ -2413,3 +2416,0 @@\n-\n-\n-\n@@ -2417,1 +2417,1 @@\n-    static void ROLInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ROLInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2432,10 +2432,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static int ROR_unary(int a, int b) {\n-        return (int)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROL_scalar);\n@@ -2443,1 +2434,0 @@\n-\n@@ -2445,1 +2435,1 @@\n-    static void RORInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2457,1 +2447,1 @@\n-        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Int64VectorTests::ROR_scalar);\n@@ -2459,3 +2449,0 @@\n-\n-\n-\n@@ -2463,1 +2450,1 @@\n-    static void RORInt64VectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2478,1 +2465,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Int64VectorTests::ROR_scalar);\n@@ -2480,5 +2467,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1134,0 +1134,8 @@\n+    static int ROL_scalar(int a, int b) {\n+        return Integer.rotateLeft(a, ((int)b));\n+    }\n+\n+    static int ROR_scalar(int a, int b) {\n+        return Integer.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2398,5 +2406,0 @@\n-\n-    static int ROL_unary(int a, int b) {\n-        return (int)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2404,1 +2407,1 @@\n-    static void ROLIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void ROLIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2416,1 +2419,1 @@\n-        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROL_scalar);\n@@ -2418,3 +2421,0 @@\n-\n-\n-\n@@ -2422,1 +2422,1 @@\n-    static void ROLIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void ROLIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2437,10 +2437,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static int ROR_unary(int a, int b) {\n-        return (int)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROL_scalar);\n@@ -2448,1 +2439,0 @@\n-\n@@ -2450,1 +2440,1 @@\n-    static void RORIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+    static void RORIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n@@ -2462,1 +2452,1 @@\n-        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, IntMaxVectorTests::ROR_scalar);\n@@ -2464,3 +2454,0 @@\n-\n-\n-\n@@ -2468,1 +2455,1 @@\n-    static void RORIntMaxVectorTestsShift(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+    static void RORIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n@@ -2483,1 +2470,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, IntMaxVectorTests::ROR_scalar);\n@@ -2485,5 +2472,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1150,0 +1150,8 @@\n+    static long ROL_scalar(long a, long b) {\n+        return Long.rotateLeft(a, ((int)b));\n+    }\n+\n+    static long ROR_scalar(long a, long b) {\n+        return Long.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2414,5 +2422,0 @@\n-\n-    static long ROL_unary(long a, long b) {\n-        return (long)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2420,1 +2423,1 @@\n-    static void ROLLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ROLLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2432,1 +2435,1 @@\n-        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROL_scalar);\n@@ -2434,3 +2437,0 @@\n-\n-\n-\n@@ -2438,1 +2438,1 @@\n-    static void ROLLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ROLLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2453,10 +2453,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static long ROR_unary(long a, long b) {\n-        return (long)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROL_scalar);\n@@ -2464,1 +2455,0 @@\n-\n@@ -2466,1 +2456,1 @@\n-    static void RORLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2478,1 +2468,1 @@\n-        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Long128VectorTests::ROR_scalar);\n@@ -2480,3 +2470,0 @@\n-\n-\n-\n@@ -2484,1 +2471,1 @@\n-    static void RORLong128VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2499,1 +2486,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Long128VectorTests::ROR_scalar);\n@@ -2501,5 +2488,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1150,0 +1150,8 @@\n+    static long ROL_scalar(long a, long b) {\n+        return Long.rotateLeft(a, ((int)b));\n+    }\n+\n+    static long ROR_scalar(long a, long b) {\n+        return Long.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2414,5 +2422,0 @@\n-\n-    static long ROL_unary(long a, long b) {\n-        return (long)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2420,1 +2423,1 @@\n-    static void ROLLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ROLLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2432,1 +2435,1 @@\n-        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROL_scalar);\n@@ -2434,3 +2437,0 @@\n-\n-\n-\n@@ -2438,1 +2438,1 @@\n-    static void ROLLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ROLLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2453,10 +2453,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static long ROR_unary(long a, long b) {\n-        return (long)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROL_scalar);\n@@ -2464,1 +2455,0 @@\n-\n@@ -2466,1 +2456,1 @@\n-    static void RORLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2478,1 +2468,1 @@\n-        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Long256VectorTests::ROR_scalar);\n@@ -2480,3 +2470,0 @@\n-\n-\n-\n@@ -2484,1 +2471,1 @@\n-    static void RORLong256VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2499,1 +2486,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Long256VectorTests::ROR_scalar);\n@@ -2501,5 +2488,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1150,0 +1150,8 @@\n+    static long ROL_scalar(long a, long b) {\n+        return Long.rotateLeft(a, ((int)b));\n+    }\n+\n+    static long ROR_scalar(long a, long b) {\n+        return Long.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2414,5 +2422,0 @@\n-\n-    static long ROL_unary(long a, long b) {\n-        return (long)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2420,1 +2423,1 @@\n-    static void ROLLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ROLLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2432,1 +2435,1 @@\n-        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROL_scalar);\n@@ -2434,3 +2437,0 @@\n-\n-\n-\n@@ -2438,1 +2438,1 @@\n-    static void ROLLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ROLLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2453,10 +2453,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static long ROR_unary(long a, long b) {\n-        return (long)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROL_scalar);\n@@ -2464,1 +2455,0 @@\n-\n@@ -2466,1 +2456,1 @@\n-    static void RORLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2478,1 +2468,1 @@\n-        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Long512VectorTests::ROR_scalar);\n@@ -2480,3 +2470,0 @@\n-\n-\n-\n@@ -2484,1 +2471,1 @@\n-    static void RORLong512VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2499,1 +2486,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Long512VectorTests::ROR_scalar);\n@@ -2501,5 +2488,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1150,0 +1150,8 @@\n+    static long ROL_scalar(long a, long b) {\n+        return Long.rotateLeft(a, ((int)b));\n+    }\n+\n+    static long ROR_scalar(long a, long b) {\n+        return Long.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2414,5 +2422,0 @@\n-\n-    static long ROL_unary(long a, long b) {\n-        return (long)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2420,1 +2423,1 @@\n-    static void ROLLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ROLLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2432,1 +2435,1 @@\n-        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROL_scalar);\n@@ -2434,3 +2437,0 @@\n-\n-\n-\n@@ -2438,1 +2438,1 @@\n-    static void ROLLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ROLLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2453,10 +2453,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static long ROR_unary(long a, long b) {\n-        return (long)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROL_scalar);\n@@ -2464,1 +2455,0 @@\n-\n@@ -2466,1 +2456,1 @@\n-    static void RORLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2478,1 +2468,1 @@\n-        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Long64VectorTests::ROR_scalar);\n@@ -2480,3 +2470,0 @@\n-\n-\n-\n@@ -2484,1 +2471,1 @@\n-    static void RORLong64VectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2499,1 +2486,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Long64VectorTests::ROR_scalar);\n@@ -2501,5 +2488,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1155,0 +1155,8 @@\n+    static long ROL_scalar(long a, long b) {\n+        return Long.rotateLeft(a, ((int)b));\n+    }\n+\n+    static long ROR_scalar(long a, long b) {\n+        return Long.rotateRight(a, ((int)b));\n+    }\n+\n@@ -2419,5 +2427,0 @@\n-\n-    static long ROL_unary(long a, long b) {\n-        return (long)(((a << b) | (a >>> -b)));\n-    }\n-\n@@ -2425,1 +2428,1 @@\n-    static void ROLLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void ROLLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2437,1 +2440,1 @@\n-        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROL_scalar);\n@@ -2439,3 +2442,0 @@\n-\n-\n-\n@@ -2443,1 +2443,1 @@\n-    static void ROLLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void ROLLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2458,10 +2458,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROL_unary);\n-    }\n-\n-\n-\n-\n-\n-\n-    static long ROR_unary(long a, long b) {\n-        return (long)(((a >>> b) | (a << -b)));\n+        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROL_scalar);\n@@ -2469,1 +2460,0 @@\n-\n@@ -2471,1 +2461,1 @@\n-    static void RORLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+    static void RORLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n@@ -2483,1 +2473,1 @@\n-        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, LongMaxVectorTests::ROR_scalar);\n@@ -2485,3 +2475,0 @@\n-\n-\n-\n@@ -2489,1 +2476,1 @@\n-    static void RORLongMaxVectorTestsShift(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+    static void RORLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n@@ -2504,1 +2491,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, LongMaxVectorTests::ROR_scalar);\n@@ -2506,5 +2493,0 @@\n-\n-\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1158,0 +1158,8 @@\n+    static short ROL_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+    }\n+\n+    static short ROR_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+    }\n+\n@@ -2417,9 +2425,0 @@\n-\n-\n-\n-\n-\n-    static short ROL_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2427,1 +2426,1 @@\n-    static void ROLShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ROLShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2439,1 +2438,1 @@\n-        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROL_scalar);\n@@ -2441,3 +2440,0 @@\n-\n-\n-\n@@ -2445,1 +2441,1 @@\n-    static void ROLShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ROLShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2460,1 +2456,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROL_scalar);\n@@ -2462,10 +2458,0 @@\n-\n-\n-\n-\n-\n-\n-    static short ROR_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2473,1 +2459,1 @@\n-    static void RORShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2485,1 +2471,1 @@\n-        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Short128VectorTests::ROR_scalar);\n@@ -2487,3 +2473,0 @@\n-\n-\n-\n@@ -2491,1 +2474,1 @@\n-    static void RORShort128VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2506,1 +2489,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short128VectorTests::ROR_scalar);\n@@ -2508,1 +2491,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1158,0 +1158,8 @@\n+    static short ROL_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+    }\n+\n+    static short ROR_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+    }\n+\n@@ -2417,9 +2425,0 @@\n-\n-\n-\n-\n-\n-    static short ROL_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2427,1 +2426,1 @@\n-    static void ROLShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ROLShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2439,1 +2438,1 @@\n-        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROL_scalar);\n@@ -2441,3 +2440,0 @@\n-\n-\n-\n@@ -2445,1 +2441,1 @@\n-    static void ROLShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ROLShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2460,1 +2456,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROL_scalar);\n@@ -2462,10 +2458,0 @@\n-\n-\n-\n-\n-\n-\n-    static short ROR_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2473,1 +2459,1 @@\n-    static void RORShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2485,1 +2471,1 @@\n-        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Short256VectorTests::ROR_scalar);\n@@ -2487,3 +2473,0 @@\n-\n-\n-\n@@ -2491,1 +2474,1 @@\n-    static void RORShort256VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2506,1 +2489,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short256VectorTests::ROR_scalar);\n@@ -2508,1 +2491,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1158,0 +1158,8 @@\n+    static short ROL_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+    }\n+\n+    static short ROR_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+    }\n+\n@@ -2417,9 +2425,0 @@\n-\n-\n-\n-\n-\n-    static short ROL_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2427,1 +2426,1 @@\n-    static void ROLShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ROLShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2439,1 +2438,1 @@\n-        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROL_scalar);\n@@ -2441,3 +2440,0 @@\n-\n-\n-\n@@ -2445,1 +2441,1 @@\n-    static void ROLShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ROLShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2460,1 +2456,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROL_scalar);\n@@ -2462,10 +2458,0 @@\n-\n-\n-\n-\n-\n-\n-    static short ROR_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2473,1 +2459,1 @@\n-    static void RORShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2485,1 +2471,1 @@\n-        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Short512VectorTests::ROR_scalar);\n@@ -2487,3 +2473,0 @@\n-\n-\n-\n@@ -2491,1 +2474,1 @@\n-    static void RORShort512VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2506,1 +2489,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short512VectorTests::ROR_scalar);\n@@ -2508,1 +2491,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1158,0 +1158,8 @@\n+    static short ROL_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+    }\n+\n+    static short ROR_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+    }\n+\n@@ -2417,9 +2425,0 @@\n-\n-\n-\n-\n-\n-    static short ROL_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2427,1 +2426,1 @@\n-    static void ROLShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ROLShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2439,1 +2438,1 @@\n-        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROL_scalar);\n@@ -2441,3 +2440,0 @@\n-\n-\n-\n@@ -2445,1 +2441,1 @@\n-    static void ROLShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ROLShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2460,1 +2456,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROL_scalar);\n@@ -2462,10 +2458,0 @@\n-\n-\n-\n-\n-\n-\n-    static short ROR_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2473,1 +2459,1 @@\n-    static void RORShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2485,1 +2471,1 @@\n-        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, Short64VectorTests::ROR_scalar);\n@@ -2487,3 +2473,0 @@\n-\n-\n-\n@@ -2491,1 +2474,1 @@\n-    static void RORShort64VectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2506,1 +2489,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, Short64VectorTests::ROR_scalar);\n@@ -2508,1 +2491,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1163,0 +1163,8 @@\n+    static short ROL_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+    }\n+\n+    static short ROR_scalar(short a, short b) {\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+    }\n+\n@@ -2422,9 +2430,0 @@\n-\n-\n-\n-\n-\n-    static short ROL_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2432,1 +2431,1 @@\n-    static void ROLShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void ROLShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2444,1 +2443,1 @@\n-        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROL_scalar);\n@@ -2446,3 +2445,0 @@\n-\n-\n-\n@@ -2450,1 +2446,1 @@\n-    static void ROLShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void ROLShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2465,1 +2461,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROL_unary);\n+        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROL_scalar);\n@@ -2467,10 +2463,0 @@\n-\n-\n-\n-\n-\n-\n-    static short ROR_unary(short a, short b) {\n-        return (short)((short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << ((16 - (b & 15)) & 15))));\n-    }\n-\n@@ -2478,1 +2464,1 @@\n-    static void RORShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n+    static void RORShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n@@ -2490,1 +2476,1 @@\n-        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, ShortMaxVectorTests::ROR_scalar);\n@@ -2492,3 +2478,0 @@\n-\n-\n-\n@@ -2496,1 +2479,1 @@\n-    static void RORShortMaxVectorTestsShift(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+    static void RORShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n@@ -2511,1 +2494,1 @@\n-        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROR_unary);\n+        assertShiftArraysEquals(r, a, b, mask, ShortMaxVectorTests::ROR_scalar);\n@@ -2513,1 +2496,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+rotate_template=\"Rotate-op\"\n@@ -77,0 +78,1 @@\n+rotate_masked_template=\"Rotate-Masked-op\"\n@@ -106,1 +108,1 @@\n-    local kernel_escaped=$(echo -e \"$kernel\" | tr '\\n' '|')\n+    local kernel_escaped=$(echo -e \"$kernel\" | tr '\\n' '`')\n@@ -108,1 +110,1 @@\n-    cat ${filename}.current1 | tr '|' \"\\n\" > ${filename}.current\n+    cat ${filename}.current1 | tr '`' \"\\n\" > ${filename}.current\n@@ -163,1 +165,1 @@\n-        local kernel_smoke_escaped=$(echo -e \"$kernel_smoke\" | tr '\\n' '|')\n+        local kernel_smoke_escaped=$(echo -e \"$kernel_smoke\" | tr '\\n' '`')\n@@ -165,1 +167,1 @@\n-        cat ${filename}.scurrent1 | tr '|' \"\\n\" > ${filename}.scurrent\n+        cat ${filename}.scurrent1 | tr '`' \"\\n\" > ${filename}.scurrent\n@@ -281,0 +283,6 @@\n+function gen_rotate_cst_op {\n+  echo \"Generating Rotate constant op $1 ($2)...\"\n+  gen_op_tmpl $rotate_template \"$@\"\n+  gen_op_tmpl $rotate_masked_template \"$@\"\n+}\n+\n@@ -452,6 +460,2 @@\n-gen_shift_cst_op  \"ROL\" \"((a << b) | (a >>> -b))\" \"intOrLong\"\n-gen_shift_cst_op  \"ROL\" \"(byte)(((((byte)a) \\& 0xFF) << (b \\& 7)) | ((((byte)a) \\& 0xFF) >>> ((8 - (b \\& 7)) \\& 7)))\" \"byte\"\n-gen_shift_cst_op  \"ROL\" \"(short)(((((short)a) \\& 0xFFFF) << (b \\& 15)) | ((((short)a) \\& 0xFFFF) >>> ((16 - (b \\& 15)) \\& 15)))\" \"short\"\n-gen_shift_cst_op  \"ROR\" \"((a >>> b) | (a << -b))\" \"intOrLong\"\n-gen_shift_cst_op  \"ROR\" \"(byte)(((((byte)a) \\& 0xFF) >>> (b \\& 7)) | ((((byte)a) \\& 0xFF) << ((8 - (b \\& 7)) \\& 7)))\" \"byte\"\n-gen_shift_cst_op  \"ROR\" \"(short)(((((short)a) \\& 0xFFFF) >>> (b \\& 15)) | ((((short)a) \\& 0xFFFF) << ((16 - (b \\& 15)) \\& 15)))\" \"short\"\n+gen_rotate_cst_op  \"ROL\" \"\" \"\"\n+gen_rotate_cst_op  \"ROR\" \"\" \"\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Rotate-Masked-op.template","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Shift-Masked-op.template","status":"copied"},{"patch":"","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Rotate-op.template","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Shift-op.template","status":"copied"},{"patch":"@@ -0,0 +1,8 @@\n+#if[BITWISE]\n+    @Test(dataProvider = \"$type$BinaryOpMaskProvider\")\n+    static void [[TEST]]$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+[[KERNEL]]\n+        assertShiftArraysEquals(r, a, b, mask, $vectorteststype$::[[TEST]]_scalar);\n+    }\n+#end[BITWISE]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Rotate-Masked-op.template","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+#if[BITWISE]\n+    @Test(dataProvider = \"$type$BinaryOpProvider\")\n+    static void [[TEST]]$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {\n+[[KERNEL]]\n+        assertShiftArraysEquals(r, a, b, $vectorteststype$::[[TEST]]_scalar);\n+    }\n+#end[BITWISE]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Rotate-op.template","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -1394,0 +1394,24 @@\n+\n+    static $type$ ROL_scalar($type$ a, $type$ b) {\n+#if[intOrLong]\n+        return $Wideboxtype$.rotateLeft(a, ((int)b));\n+#else[intOrLong]\n+#if[short]\n+        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+#else[short]\n+        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+#end[short]\n+#end[intOrLong]\n+    }\n+\n+    static $type$ ROR_scalar($type$ a, $type$ b) {\n+#if[intOrLong]\n+        return $Wideboxtype$.rotateRight(a, ((int)b));\n+#else[intOrLong]\n+#if[short]\n+        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+#else[short]\n+        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+#end[short]\n+#end[intOrLong]\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+    @Param({\"64\",\"128\",\"256\"})\n+    int size;\n@@ -36,2 +38,2 @@\n-  @Param({\"64\",\"128\",\"256\"})\n-  public int TESTSIZE;\n+    @Param({\"128\",\"256\", \"512\"})\n+    int bits;\n@@ -39,2 +41,2 @@\n-  @Param({\"128\",\"256\", \"512\"})\n-  public int bits;\n+    @Param({\"11\",\"21\",\"31\"})\n+    int shift;\n@@ -42,2 +44,6 @@\n-  @Param({\"31\"})\n-  public int shift;\n+    long[] longinp;\n+    long[] longres;\n+    int[] intinp;\n+    int[] intres;\n+    VectorSpecies ispecies;\n+    VectorSpecies lspecies;\n@@ -45,8 +51,2 @@\n-  public long[] inpL;\n-  public long[] resL;\n-  public int[] inpI;\n-  public int[] resI;\n-  public VectorSpecies ISPECIES;\n-  public VectorSpecies LSPECIES;\n-  public IntVector vecI;\n-  public LongVector vecL;\n+    static final long[] specialvalslong = {0L, -0L, Long.MIN_VALUE, Long.MAX_VALUE};\n+    static final int[] specialvalsint = {0, -0, Integer.MIN_VALUE, Integer.MAX_VALUE};\n@@ -54,2 +54,7 @@\n-  public final long[] specialValsL = {0L, -0L, Long.MIN_VALUE, Long.MAX_VALUE};\n-  public final int[] specialValsI = {0, -0, Integer.MIN_VALUE, Integer.MAX_VALUE};\n+    @Setup(Level.Trial)\n+    public void BmSetup() {\n+        Random r = new Random(1024);\n+        longinp = new long[size];\n+        longres = new long[size];\n+        intinp = new int[size];\n+        intres = new int[size];\n@@ -57,7 +62,2 @@\n-  @Setup(Level.Trial)\n-  public void BmSetup() {\n-    Random r = new Random(1024);\n-    inpL = new long[TESTSIZE];\n-    resL = new long[TESTSIZE];\n-    inpI = new int[TESTSIZE];\n-    resI = new int[TESTSIZE];\n+        ispecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n+        lspecies = VectorSpecies.of(long.class, VectorShape.forBitSize(bits));\n@@ -65,9 +65,10 @@\n-    ISPECIES = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n-    LSPECIES = VectorSpecies.of(long.class, VectorShape.forBitSize(bits));\n-\n-    for (int i = 4; i < TESTSIZE; i++) {\n-      inpI[i] = i;\n-      inpL[i] = i;\n-    }\n-    for (int i = 0 ; i < specialValsL.length; i++) {\n-      inpL[i] = specialValsL[i];\n+        for (int i = 4; i < size; i++) {\n+            intinp[i] = i;\n+            longinp[i] = i;\n+        }\n+        for (int i = 0 ; i < specialvalslong.length; i++) {\n+            longinp[i] = specialvalslong[i];\n+        }\n+        for (int i = 0 ; i < specialvalsint.length; i++) {\n+            intinp[i] = specialvalsint[i];\n+        }\n@@ -75,5 +76,0 @@\n-    for (int i = 0 ; i < specialValsI.length; i++) {\n-      inpI[i] = specialValsI[i];\n-    }\n-\n-  }\n@@ -81,11 +77,12 @@\n-  @Benchmark\n-  public void testRotateLeftI(Blackhole bh) {\n-    for(int i = 0 ; i < 10000; i++) {\n-      for (int j = 0 ; j < TESTSIZE; j+= ISPECIES.length()) {\n-        vecI = IntVector.fromArray(ISPECIES, inpI, j);\n-        vecI = vecI.lanewise(VectorOperators.ROL, i);\n-        vecI = vecI.lanewise(VectorOperators.ROL, i);\n-        vecI = vecI.lanewise(VectorOperators.ROL, i);\n-        vecI = vecI.lanewise(VectorOperators.ROL, i);\n-        vecI.lanewise(VectorOperators.ROL, i).intoArray(resI, j);\n-      }\n+    @Benchmark\n+    public void testRotateLeftI(Blackhole bh) {\n+        IntVector intvec = null;\n+        for (int j = 0 ; j < size; j+= ispecies.length()) {\n+            intvec = IntVector.fromArray(ispecies, intinp, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROL, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROL, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROL, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROL, shift);\n+            intvec.lanewise(VectorOperators.ROL, j).intoArray(intres, j);\n+        }\n+        bh.consume(intvec);\n@@ -93,1 +90,0 @@\n-  }\n@@ -95,11 +91,12 @@\n-  @Benchmark\n-  public void testRotateRightI(Blackhole bh) {\n-    for(int i = 0 ; i < 10000; i++) {\n-      for (int j = 0 ; j < TESTSIZE; j+= ISPECIES.length()) {\n-        vecI = IntVector.fromArray(ISPECIES, inpI, j);\n-        vecI = vecI.lanewise(VectorOperators.ROR, i);\n-        vecI = vecI.lanewise(VectorOperators.ROR, i);\n-        vecI = vecI.lanewise(VectorOperators.ROR, i);\n-        vecI = vecI.lanewise(VectorOperators.ROR, i);\n-        vecI.lanewise(VectorOperators.ROR, i).intoArray(resI, j);\n-      }\n+    @Benchmark\n+    public void testRotateRightI(Blackhole bh) {\n+        IntVector intvec = null;\n+        for (int j = 0 ; j < size; j+= ispecies.length()) {\n+            intvec = IntVector.fromArray(ispecies, intinp, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROR, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROR, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROR, shift);\n+            intvec = intvec.lanewise(VectorOperators.ROR, shift);\n+            intvec.lanewise(VectorOperators.ROR, j).intoArray(intres, j);\n+        }\n+        bh.consume(intvec);\n@@ -107,1 +104,0 @@\n-  }\n@@ -109,11 +105,12 @@\n-  @Benchmark\n-  public void testRotateLeftL(Blackhole bh) {\n-    for(int i = 0 ; i < 10000; i++) {\n-      for (int j = 0 ; j < TESTSIZE; j+= LSPECIES.length()) {\n-        vecL = LongVector.fromArray(LSPECIES, inpL, j);\n-        vecL = vecL.lanewise(VectorOperators.ROL, i);\n-        vecL = vecL.lanewise(VectorOperators.ROL, i);\n-        vecL = vecL.lanewise(VectorOperators.ROL, i);\n-        vecL = vecL.lanewise(VectorOperators.ROL, i);\n-        vecL.lanewise(VectorOperators.ROL, i).intoArray(resL, j);\n-      }\n+    @Benchmark\n+    public void testRotateLeftL(Blackhole bh) {\n+        LongVector longvec = null;\n+        for (int j = 0 ; j < size; j+= lspecies.length()) {\n+            longvec = LongVector.fromArray(lspecies, longinp, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROL, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROL, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROL, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROL, shift);\n+            longvec.lanewise(VectorOperators.ROL, j).intoArray(longres, j);\n+        }\n+        bh.consume(longvec);\n@@ -121,1 +118,0 @@\n-  }\n@@ -123,11 +119,12 @@\n-  @Benchmark\n-  public void testRotateRightL(Blackhole bh) {\n-    for(int i = 0 ; i < 10000; i++) {\n-      for (int j = 0 ; j < TESTSIZE; j+= LSPECIES.length()) {\n-        vecL = LongVector.fromArray(LSPECIES, inpL, j);\n-        vecL = vecL.lanewise(VectorOperators.ROR, i);\n-        vecL = vecL.lanewise(VectorOperators.ROR, i);\n-        vecL = vecL.lanewise(VectorOperators.ROR, i);\n-        vecL = vecL.lanewise(VectorOperators.ROR, i);\n-        vecL.lanewise(VectorOperators.ROR, i).intoArray(resL, j);\n-      }\n+    @Benchmark\n+    public void testRotateRightL(Blackhole bh) {\n+        LongVector longvec = null;\n+        for (int j = 0 ; j < size; j+= lspecies.length()) {\n+            longvec = LongVector.fromArray(lspecies, longinp, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROR, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROR, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROR, shift);\n+            longvec = longvec.lanewise(VectorOperators.ROR, shift);\n+            longvec.lanewise(VectorOperators.ROR, j).intoArray(longres, j);\n+        }\n+        bh.consume(longvec);\n@@ -135,1 +132,0 @@\n-  }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RotateBenchmark.java","additions":81,"deletions":85,"binary":false,"changes":166,"status":"modified"}]}