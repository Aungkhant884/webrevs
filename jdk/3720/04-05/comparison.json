{"files":[{"patch":"@@ -337,0 +337,1 @@\n+  bool arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, bool check_bcast = false);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,26 @@\n+bool LibraryCallKit::arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, bool check_bcast) {\n+    bool is_supported = true;\n+    if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/) ||\n+        (check_bcast && !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+      is_supported = false;\n+    }\n+    int lshiftopc = VectorNode::opcode(elem_bt == T_LONG ? Op_LShiftL : Op_LShiftI, elem_bt);\n+    auto urshiftopc = [&]() {\n+      switch(elem_bt) {\n+        case T_INT: return Op_URShiftI;\n+        case T_LONG: return Op_URShiftL;\n+        case T_BYTE: return Op_URShiftB;\n+        case T_SHORT: return Op_URShiftS;\n+        default: return (Opcodes)0;\n+      }\n+    };\n+    int rshiftopc = VectorNode::opcode(urshiftopc(), elem_bt);\n+    if (!is_supported &&\n+        arch_supports_vector(lshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(rshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n+      is_supported = true;\n+    }\n+    return is_supported;\n+}\n+\n@@ -244,22 +270,1 @@\n-    bool is_unsupported = false;\n-    if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/)) {\n-      is_unsupported = true;\n-    }\n-    int lshiftopc = VectorNode::opcode(elem_bt == T_LONG ? Op_LShiftL : Op_LShiftI, elem_bt);\n-    auto urshiftopc = [&]() {\n-      switch(elem_bt) {\n-        case T_INT: return Op_URShiftI;\n-        case T_LONG: return Op_URShiftL;\n-        case T_BYTE: return Op_URShiftB;\n-        case T_SHORT: return Op_URShiftS;\n-        default: return (Opcodes)0;\n-      }\n-    };\n-    int rshiftopc = VectorNode::opcode(urshiftopc(), elem_bt);\n-    if (is_unsupported &&\n-        arch_supports_vector(lshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(rshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n-      is_unsupported = false;\n-    }\n-    if (is_unsupported) {\n+    if (!arch_supports_vector_rotate(sopc, num_elem, elem_bt, false)) {\n@@ -267,2 +272,3 @@\n-        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s ismask=no\",\n-                      sopc, num_elem, type2name(elem_bt));\n+        tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n+                      n, sopc, num_elem, type2name(elem_bt),\n+                      is_vector_mask(vbox_klass) ? 1 : 0);\n@@ -1334,23 +1340,1 @@\n-    bool is_unsupported = false;\n-    if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/) ||\n-        (!is_const_rotate && !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n-      is_unsupported = true;\n-    }\n-    int lshiftopc = VectorNode::opcode(elem_bt == T_LONG ? Op_LShiftL : Op_LShiftI, elem_bt);\n-    auto urshiftopc = [&]() {\n-      switch(elem_bt) {\n-        case T_INT: return Op_URShiftI;\n-        case T_LONG: return Op_URShiftL;\n-        case T_BYTE: return Op_URShiftB;\n-        case T_SHORT: return Op_URShiftS;\n-        default: return (Opcodes)0;\n-      }\n-    };\n-    int rshiftopc = VectorNode::opcode(urshiftopc(), elem_bt);\n-    if (is_unsupported &&\n-        arch_supports_vector(lshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(rshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n-      is_unsupported = false;\n-    }\n-    if (is_unsupported) {\n+    if (!arch_supports_vector_rotate(sopc, num_elem, elem_bt, !is_const_rotate)) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":31,"deletions":47,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -1176,1 +1176,1 @@\n-    shiftRCnt = phase->transform(new AndINode(cnt, phase->intcon(shift_mask)));\n+    shiftRCnt = cnt;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}