{"files":[{"patch":"@@ -1,12 +0,0 @@\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] b = fb.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                av.lanewise(VectorOperators.[[TEST]], (int)b[i], vmask).intoArray(r, i);\n-            }\n-        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Rotate-Masked-op.template","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] b = fb.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                av.lanewise(VectorOperators.[[TEST]], (int)b[i]).intoArray(r, i);\n-            }\n-        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Rotate-op.template","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-#if[BITWISE]\n-    @Test(dataProvider = \"$type$BinaryOpMaskProvider\")\n-    static void [[TEST]]$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-[[KERNEL]]\n-        assertShiftArraysEquals(r, a, b, mask, $vectorteststype$::[[TEST]]_scalar);\n-    }\n-#end[BITWISE]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Rotate-Masked-op.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-#if[BITWISE]\n-    @Test(dataProvider = \"$type$BinaryOpProvider\")\n-    static void [[TEST]]$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {\n-[[KERNEL]]\n-        assertShiftArraysEquals(r, a, b, $vectorteststype$::[[TEST]]_scalar);\n-    }\n-#end[BITWISE]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Rotate-op.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"}]}