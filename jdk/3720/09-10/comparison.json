{"files":[{"patch":"@@ -141,0 +141,5 @@\n+  \/\/ Does the CPU supports vector constant rotate instructions?\n+  static constexpr bool supports_vector_constant_rotates(int shift) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,0 +134,5 @@\n+  \/\/ Does the CPU supports vector constant rotate instructions?\n+  static constexpr bool supports_vector_constant_rotates(int shift) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -141,0 +141,5 @@\n+  \/\/ Does the CPU supports vector constant rotate instructions?\n+  static constexpr bool supports_vector_constant_rotates(int shift) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,0 +131,5 @@\n+  \/\/ Does the CPU supports vector constant rotate instructions?\n+  static constexpr bool supports_vector_constant_rotates(int shift) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -161,0 +161,5 @@\n+  \/\/ Does the CPU supports vector constant rotate instructions?\n+  static constexpr bool supports_vector_constant_rotates(int shift) {\n+    return -0x80 <= shift && shift < 0x80;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2492,1 +2492,1 @@\n-        if (!in2->is_Con() || -0x80 > in2->get_int() || in2->get_int() >= 0x80) {\n+        if (!in2->is_Con() || !Matcher::supports_vector_constant_rotates(in2->get_int())) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-bool LibraryCallKit::arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, bool check_bcast) {\n+bool LibraryCallKit::arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, bool has_scalar_args) {\n@@ -64,2 +64,5 @@\n-    if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/) ||\n-        (check_bcast && !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+    \/\/ has_scalar_args flag is true only for non-constant scalar shift count,\n+    \/\/ since in this case shift needs to be broadcasted.\n+    if (!Matcher::match_rule_supported_vector(opc, num_elem, elem_bt) ||\n+         (has_scalar_args &&\n+           !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n@@ -68,11 +71,24 @@\n-    int lshiftopc = VectorNode::opcode(elem_bt == T_LONG ? Op_LShiftL : Op_LShiftI, elem_bt);\n-    auto urshiftopc = [&]() {\n-      switch(elem_bt) {\n-        case T_INT: return Op_URShiftI;\n-        case T_LONG: return Op_URShiftL;\n-        case T_BYTE: return Op_URShiftB;\n-        case T_SHORT: return Op_URShiftS;\n-        default: return (Opcodes)0;\n-      }\n-    };\n-    int rshiftopc = VectorNode::opcode(urshiftopc(), elem_bt);\n+\n+    int lshiftopc, rshiftopc;\n+    switch(elem_bt) {\n+      case T_BYTE:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftB;\n+        break;\n+      case T_SHORT:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftS;\n+        break;\n+      case T_INT:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftI;\n+        break;\n+      case T_LONG:\n+        lshiftopc = Op_LShiftL;\n+        rshiftopc = Op_URShiftL;\n+        break;\n+      default:\n+        assert(false, \"Unexpected type\");\n+    }\n+    int lshiftvopc = VectorNode::opcode(lshiftopc, elem_bt);\n+    int rshiftvopc = VectorNode::opcode(rshiftopc, elem_bt);\n@@ -80,2 +96,2 @@\n-        arch_supports_vector(lshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(rshiftopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(lshiftvopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(rshiftvopc, num_elem, elem_bt, VecMaskNotUsed) &&\n@@ -141,2 +157,2 @@\n-  \/\/ Check that architecture supports this op-size-type combination.\n-  if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+  if (VectorNode::is_vector_rotate(sopc)) {\n+    if(!arch_supports_vector_rotate(sopc, num_elem, type, has_scalar_args)) {\n@@ -144,4 +160,4 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n-                    NodeClassNames[sopc], type2name(type), num_elem);\n-    }\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n@@ -149,1 +165,2 @@\n-    return false;\n+      return false;\n+    }\n@@ -151,1 +168,12 @@\n-    assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    \/\/ Check that architecture supports this op-size-type combination.\n+    if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+#ifndef PRODUCT\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n+#endif\n+      return false;\n+    } else {\n+      assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    }\n@@ -325,20 +353,7 @@\n-  if (VectorNode::is_rotate_opcode(opc)) {\n-    if ((sopc != 0) &&\n-        !arch_supports_vector_rotate(sopc, num_elem, elem_bt, false)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n-                      n, sopc, num_elem, type2name(elem_bt),\n-                      is_vector_mask(vbox_klass) ? 1 : 0);\n-      }\n-      return false; \/\/ not supported\n-    }\n-  } else {\n-    \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n-    if ((sopc != 0) &&\n-        !arch_supports_vector(sopc, num_elem, elem_bt, is_vector_mask(vbox_klass) ? VecMaskUseAll : VecMaskNotUsed)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n-                      n, sopc, num_elem, type2name(elem_bt),\n-                      is_vector_mask(vbox_klass) ? 1 : 0);\n-      }\n-      return false; \/\/ not supported\n+  \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n+  if ((sopc != 0) &&\n+      !arch_supports_vector(sopc, num_elem, elem_bt, is_vector_mask(vbox_klass) ? VecMaskUseAll : VecMaskNotUsed)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n+                    n, sopc, num_elem, type2name(elem_bt),\n+                    is_vector_mask(vbox_klass) ? 1 : 0);\n@@ -346,0 +361,1 @@\n+    return false; \/\/ not supported\n@@ -1560,0 +1576,2 @@\n+\n+  \/\/ If CPU supports vector constant rotate instructions pass it directly\n@@ -1561,16 +1579,6 @@\n-                         -0x80 <= cnt_type->get_con() && cnt_type->get_con() < 0x80;\n-  if (is_rotate) {\n-    if (!arch_supports_vector_rotate(sopc, num_elem, elem_bt, !is_const_rotate)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s ismask=no\",\n-                      sopc, num_elem, type2name(elem_bt));\n-      }\n-      return false; \/\/ not supported\n-    }\n-  } else {\n-    if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s ismask=no\",\n-                      sopc, num_elem, type2name(elem_bt));\n-      }\n-      return false; \/\/ not supported\n+                         Matcher::supports_vector_constant_rotates(cnt_type->get_con());\n+  bool has_scalar_args = is_rotate ? !is_const_rotate : true;\n+  if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s ismask=no\",\n+                    sopc, num_elem, type2name(elem_bt));\n@@ -1578,0 +1586,1 @@\n+    return false; \/\/ not supported\n@@ -1590,1 +1599,1 @@\n-      \/\/ constant shift.\n+      \/\/ Constant shift value.\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":70,"deletions":61,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    if (vopc == Op_RotateLeftV || vopc == Op_RotateRightV) {\n+    if (VectorNode::is_vector_rotate(vopc)) {\n@@ -299,1 +299,1 @@\n-  assert(vopc == Op_RotateLeftV || vopc == Op_RotateRightV, \"wrong opcode\");\n+  assert(VectorNode::is_vector_rotate(vopc), \"wrong opcode\");\n@@ -591,0 +591,10 @@\n+bool VectorNode::is_vector_rotate(int opc) {\n+  switch (opc) {\n+  case Op_RotateLeftV:\n+  case Op_RotateRight:\n+    return true;\n+  default:\n+    return false;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+  static bool is_vector_rotate(int opc);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,4 @@\n-    VectorSpecies bspecies;\n-    VectorSpecies sspecies;\n-    VectorSpecies ispecies;\n-    VectorSpecies lspecies;\n+    VectorSpecies<Byte> bspecies;\n+    VectorSpecies<Short> sspecies;\n+    VectorSpecies<Integer> ispecies;\n+    VectorSpecies<Long> lspecies;\n@@ -103,6 +103,6 @@\n-            bytevec = ByteVector.fromArray(bspecies, byteinp, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROL, shift);\n-            bytevec.lanewise(VectorOperators.ROL, j).intoArray(byteres, j);\n+            bytevec = ByteVector.fromArray(bspecies, byteinp, j);\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROL, ((byte)shift));\n+            bytevec.lanewise(VectorOperators.ROL, ((byte)j)).intoArray(byteres, j);\n@@ -117,6 +117,6 @@\n-            bytevec = ByteVector.fromArray(bspecies, byteinp, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n-            bytevec = bytevec.lanewise(VectorOperators.ROR, shift);\n-            bytevec.lanewise(VectorOperators.ROR, j).intoArray(byteres, j);\n+            bytevec = ByteVector.fromArray(bspecies, byteinp, j);\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, ((byte)shift));\n+            bytevec = bytevec.lanewise(VectorOperators.ROR, ((byte)shift));\n+            bytevec.lanewise(VectorOperators.ROR, ((byte)j)).intoArray(byteres, j);\n@@ -131,6 +131,6 @@\n-            shortvec = ShortVector.fromArray(sspecies, shortinp, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROL, shift);\n-            shortvec.lanewise(VectorOperators.ROL, j).intoArray(shortres, j);\n+            shortvec = ShortVector.fromArray(sspecies, shortinp, j);\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROL, ((short)shift));\n+            shortvec.lanewise(VectorOperators.ROL, ((short)j)).intoArray(shortres, j);\n@@ -145,6 +145,6 @@\n-            shortvec = ShortVector.fromArray(sspecies, shortinp, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n-            shortvec = shortvec.lanewise(VectorOperators.ROR, shift);\n-            shortvec.lanewise(VectorOperators.ROR, j).intoArray(shortres, j);\n+            shortvec = ShortVector.fromArray(sspecies, shortinp, j);\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, ((short)shift));\n+            shortvec = shortvec.lanewise(VectorOperators.ROR, ((short)shift));\n+            shortvec.lanewise(VectorOperators.ROR, ((short)j)).intoArray(shortres, j);\n@@ -159,1 +159,1 @@\n-            intvec = IntVector.fromArray(ispecies, intinp, shift);\n+            intvec = IntVector.fromArray(ispecies, intinp, j);\n@@ -173,1 +173,1 @@\n-            intvec = IntVector.fromArray(ispecies, intinp, shift);\n+            intvec = IntVector.fromArray(ispecies, intinp, j);\n@@ -187,1 +187,1 @@\n-            longvec = LongVector.fromArray(lspecies, longinp, shift);\n+            longvec = LongVector.fromArray(lspecies, longinp, j);\n@@ -201,1 +201,1 @@\n-            longvec = LongVector.fromArray(lspecies, longinp, shift);\n+            longvec = LongVector.fromArray(lspecies, longinp, j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RotateBenchmark.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"}]}