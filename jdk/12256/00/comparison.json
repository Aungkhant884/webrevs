{"files":[{"patch":"@@ -32,4 +32,4 @@\n-uint   SuspendibleThreadSet::_nthreads            = 0;\n-uint   SuspendibleThreadSet::_nthreads_stopped    = 0;\n-volatile bool SuspendibleThreadSet::_suspend_all  = false;\n-double SuspendibleThreadSet::_suspend_all_start   = 0.0;\n+uint          SuspendibleThreadSet::_nthreads          = 0;\n+uint          SuspendibleThreadSet::_nthreads_stopped  = 0;\n+volatile bool SuspendibleThreadSet::_suspend_all       = false;\n+double        SuspendibleThreadSet::_suspend_all_start = 0.0;\n@@ -53,1 +53,1 @@\n-  while (suspend_all()) {\n+  while (should_yield()) {\n@@ -66,1 +66,1 @@\n-  if (suspend_all() && is_synchronized()) {\n+  if (should_yield() && is_synchronized()) {\n@@ -72,1 +72,1 @@\n-void SuspendibleThreadSet::yield() {\n+void SuspendibleThreadSet::yield_slow() {\n@@ -75,1 +75,1 @@\n-  if (suspend_all()) {\n+  if (should_yield()) {\n@@ -85,1 +85,1 @@\n-    while (suspend_all()) {\n+    while (should_yield()) {\n@@ -100,1 +100,1 @@\n-    assert(!suspend_all(), \"Only one at a time\");\n+    assert(!should_yield(), \"Only one at a time\");\n@@ -123,1 +123,1 @@\n-  assert(suspend_all(), \"STS not synchronizing\");\n+  assert(should_yield(), \"STS not synchronizing\");\n@@ -131,1 +131,1 @@\n-  assert(suspend_all(), \"STS not synchronizing\");\n+  assert(should_yield(), \"STS not synchronizing\");\n","filename":"src\/hotspot\/share\/gc\/shared\/suspendibleThreadSet.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+  static uint          _nthreads;\n+  static uint          _nthreads_stopped;\n@@ -45,4 +47,1 @@\n-\n-  static uint   _nthreads;\n-  static uint   _nthreads_stopped;\n-  static double _suspend_all_start;\n+  static double        _suspend_all_start;\n@@ -58,1 +57,2 @@\n-  static bool suspend_all() { return Atomic::load(&_suspend_all); }\n+  \/\/ Suspends the current thread if a suspension is in progress.\n+  static void yield_slow();\n@@ -62,1 +62,1 @@\n-  static bool should_yield() { return suspend_all(); }\n+  static bool should_yield() { return Atomic::load(&_suspend_all); }\n@@ -65,1 +65,5 @@\n-  static void yield();\n+  static void yield() {\n+    if (should_yield()) {\n+      yield_slow();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/suspendibleThreadSet.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}