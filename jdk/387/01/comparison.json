{"files":[{"patch":"@@ -208,1 +208,1 @@\n-#ifndef CPU_MULTI_COPY_ATOMIC\n+\n@@ -222,6 +222,2 @@\n-  OrderAccess::fence();\n-#else\n-  \/\/ Everyone else can make do with a LoadLoad barrier to keep reads\n-  \/\/ from age and bottom in order.\n-  OrderAccess::loadload();\n-#endif\n+  OrderAccess::loadload_for_IRIW();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -492,7 +492,4 @@\n-  if (support_IRIW_for_not_multiple_copy_atomic_cpu) {\n-    \/\/ A non-multiple copy atomic (nMCA) machine needs a bigger\n-    \/\/ hammer to separate the loads before and the load below.\n-    OrderAccess::fence();\n-  } else {\n-    OrderAccess::loadload();\n-  }\n+\n+  \/\/ _contentions and dmw\/header may get written by different threads.\n+  \/\/ Make sure to observe them in the same order when having several observers.\n+  OrderAccess::loadload_for_IRIW();\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -246,0 +246,11 @@\n+\n+  \/\/ Processors which are not multi-copy-atomic require a full fence\n+  \/\/ to enforce a globally consistent order of Independent Reads of\n+  \/\/ Independent Writes. Please use only for such patterns!\n+  static void     loadload_for_IRIW() {\n+#ifndef CPU_MULTI_COPY_ATOMIC\n+    fence();\n+#else\n+    loadload();\n+#endif\n+  }\n","filename":"src\/hotspot\/share\/runtime\/orderAccess.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1108,7 +1108,5 @@\n-        if (support_IRIW_for_not_multiple_copy_atomic_cpu) {\n-          \/\/ A non-multiple copy atomic (nMCA) machine needs a bigger\n-          \/\/ hammer to separate the load above and the loads below.\n-          OrderAccess::fence();\n-        } else {\n-          OrderAccess::loadload();\n-        }\n+\n+        \/\/ dmw\/header and _contentions may get written by different threads.\n+        \/\/ Make sure to observe them in the same order when having several observers.\n+        OrderAccess::loadload_for_IRIW();\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}