{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,0 +114,37 @@\n+    \/**\n+     * Creates a CertAndKeyGen object for a particular key type,\n+     * signature algorithm, and provider. The newly generated cert will\n+     * be signed by the signer's private key.\n+     *\n+     * @param keyType type of key, e.g. \"RSA\", \"DSA\", \"X25519\", \"DH\", etc.\n+     * @param sigAlg name of the signature algorithm, e.g. \"SHA384WithRSA\",\n+     *          \"SHA256withDSA\", etc. If set to null, a default\n+     *          algorithm matching the signer's private key will be\n+     *          chosen after the first keypair is generated.\n+     * @param providerName name of the provider\n+     * @param signerPrivateKey signer's private key\n+     * @param signerSubjectName signer's subject name\n+     * @exception NoSuchAlgorithmException on unrecognized algorithms.\n+     * @exception NoSuchProviderException on unrecognized providers.\n+     *\/\n+    public CertAndKeyGen(String keyType, String sigAlg, String providerName,\n+            PrivateKey signerPrivateKey, X500Name signerSubjectName)\n+        throws NoSuchAlgorithmException, NoSuchProviderException\n+    {\n+        if (providerName == null) {\n+            keyGen = KeyPairGenerator.getInstance(keyType);\n+        } else {\n+            try {\n+                keyGen = KeyPairGenerator.getInstance(keyType, providerName);\n+            } catch (Exception e) {\n+                \/\/ try first available provider instead\n+                keyGen = KeyPairGenerator.getInstance(keyType);\n+            }\n+        }\n+        this.sigAlg = sigAlg;\n+        this.keyType = keyType;\n+        this.signerFlag = true;\n+        this.signerPrivateKey = signerPrivateKey;\n+        this.signerSubjectName = signerSubjectName;\n+    }\n+\n@@ -190,1 +227,5 @@\n-            sigAlg = SignatureUtil.getDefaultSigAlgForKey(privateKey);\n+            if (signerFlag) {\n+                sigAlg = SignatureUtil.getDefaultSigAlgForKey(signerPrivateKey);\n+            } else {\n+                sigAlg = SignatureUtil.getDefaultSigAlgForKey(privateKey);\n+            }\n@@ -269,0 +310,2 @@\n+    \/\/ Create a self-signed certificate, or a certificate that is signed by\n+    \/\/ a signer when the signer's private key is provided.\n@@ -296,1 +339,6 @@\n-            info.set(X509CertInfo.ISSUER, myname);\n+            if (signerFlag) {\n+                \/\/ use signer's subject name to set the issuer name\n+                info.set(X509CertInfo.ISSUER, signerSubjectName);\n+            } else {\n+                info.set(X509CertInfo.ISSUER, myname);\n+            }\n@@ -300,1 +348,6 @@\n-            cert.sign(privateKey, sigAlg);\n+            if (signerFlag) {\n+                \/\/ use signer's private key to sign\n+                cert.sign(signerPrivateKey, sigAlg);\n+            } else {\n+                cert.sign(privateKey, sigAlg);\n+            }\n@@ -324,0 +377,3 @@\n+    private boolean             signerFlag;\n+    private PrivateKey          signerPrivateKey;\n+    private X500Name            signerSubjectName;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/CertAndKeyGen.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -166,0 +166,2 @@\n+    private String signerAlias = null;\n+    private char[] signerKeyPass = null;\n@@ -212,0 +214,1 @@\n+            SIGNER, SIGNERKEYPASS,\n@@ -356,0 +359,2 @@\n+        SIGNER(\"signer\", \"<alias>\", \"signer.alias\"),\n+        SIGNERKEYPASS(\"signerkeypass\", \"<arg>\", \"signer.key.password\"),\n@@ -607,0 +612,5 @@\n+            } else if (collator.compare(flags, \"-signer\") == 0) {\n+                signerAlias = args[++i];\n+            } else if (collator.compare(flags, \"-signerkeypass\") == 0) {\n+                signerKeyPass = getPass(modifier, args[++i]);\n+                passwords.add(signerKeyPass);\n@@ -1152,1 +1162,2 @@\n-            doGenKeyPair(alias, dname, keyAlgName, keysize, groupName, sigAlgName);\n+            doGenKeyPair(alias, dname, keyAlgName, keysize, groupName, sigAlgName,\n+                    signerAlias);\n@@ -1862,1 +1873,2 @@\n-                              int keysize, String groupName, String sigAlgName)\n+                              int keysize, String groupName, String sigAlgName,\n+                              String signerAlias)\n@@ -1865,0 +1877,2 @@\n+        boolean reqSigner = false; \/\/ -signer option is required\n+        boolean signerFlag = false;\n@@ -1883,0 +1897,12 @@\n+                } else if (\"XDH\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = SecurityProviderConstants.DEF_XEC_KEY_SIZE;\n+                    reqSigner = true;\n+                } else if (\"X25519\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = 255;\n+                    reqSigner = true;\n+                } else if (\"X448\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = 448;\n+                    reqSigner = true;\n+                } else if (\"DH\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = SecurityProviderConstants.DEF_DH_KEY_SIZE;\n+                    reqSigner = true;\n@@ -1904,2 +1930,27 @@\n-        CertAndKeyGen keypair =\n-                new CertAndKeyGen(keyAlgName, sigAlgName, providerName);\n+        if (reqSigner && signerAlias == null) {\n+            MessageFormat form = new MessageFormat(rb.getString\n+                    (\"The.signer.option.must.be.specified.for.the.key.algorithm.keyAlgName\"));\n+            Object[] source = {keyAlgName};\n+            throw new Exception(form.format(source));\n+        }\n+\n+        CertAndKeyGen keypair;\n+        if (signerAlias != null) {\n+            signerFlag = true;\n+\n+            if (keyStore.containsAlias(signerAlias) == false) {\n+                MessageFormat form = new MessageFormat\n+                        (rb.getString(\"Alias.of.signer.signerAlias.does.not.exist\"));\n+                Object[] source = {signerAlias};\n+                throw new Exception(form.format(source));\n+            }\n+\n+            PrivateKey signerPrivateKey =\n+                    (PrivateKey)recoverKey(signerAlias, storePass, signerKeyPass).fst;\n+            Certificate signerCert = keyStore.getCertificate(signerAlias);\n+            byte[] encoded = signerCert.getEncoded();\n+            X509CertImpl signerCertImpl = new X509CertImpl(encoded);\n+            X509CertInfo signerCertInfo = (X509CertInfo)signerCertImpl.get(\n+                    X509CertImpl.NAME + \".\" + X509CertImpl.INFO);\n+            X500Name signerSubjectName = (X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + \".\" +\n+                    X509CertInfo.DN_NAME);\n@@ -1907,0 +1958,5 @@\n+            keypair = new CertAndKeyGen(keyAlgName, sigAlgName, providerName,\n+                    signerPrivateKey, signerSubjectName);\n+        } else {\n+            keypair = new CertAndKeyGen(keyAlgName, sigAlgName, providerName);\n+        }\n@@ -1925,0 +1981,1 @@\n+        CertificateExtensions ext;\n@@ -1926,6 +1983,29 @@\n-        CertificateExtensions ext = createV3Extensions(\n-                null,\n-                null,\n-                v3ext,\n-                keypair.getPublicKeyAnyway(),\n-                null);\n+        if (signerFlag) {\n+            Certificate signerCert = keyStore.getCertificate(signerAlias);\n+\n+            X509CertImpl certImpl;\n+            if (signerCert instanceof X509CertImpl) {\n+                    certImpl = (X509CertImpl) signerCert;\n+            } else {\n+                certImpl = new X509CertImpl(signerCert.getEncoded());\n+            }\n+\n+            KeyIdentifier signerSubjectKeyId = certImpl.getSubjectKeyId();\n+            if (signerSubjectKeyId == null) {\n+                signerSubjectKeyId = new KeyIdentifier(signerCert.getPublicKey());\n+            }\n+\n+            ext = createV3Extensions(\n+                    null,\n+                    null,\n+                    v3ext,\n+                    keypair.getPublicKeyAnyway(),\n+                    signerSubjectKeyId);\n+        } else {\n+            ext = createV3Extensions(\n+                    null,\n+                    null,\n+                    v3ext,\n+                    keypair.getPublicKeyAnyway(),\n+                    null);\n+        }\n@@ -1937,2 +2017,12 @@\n-        MessageFormat form = new MessageFormat(rb.getString\n-            (\"Generating.keysize.bit.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.validality.days.for\"));\n+        MessageFormat form;\n+        if (signerFlag) {\n+            form = new MessageFormat(rb.getString\n+                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.specified.by.the.signer.option.with.a.validity.of.validality.days.for\"));\n+        } else {\n+            form = new MessageFormat(rb.getString\n+                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.validality.days.for\"));\n+            if (groupName != null) {\n+                keysize = KeyUtil.getKeySize(privKey);\n+            }\n+        }\n+\n@@ -1940,1 +2030,1 @@\n-                groupName == null ? keysize : KeyUtil.getKeySize(privKey),\n+                keysize,\n@@ -1950,2 +2040,12 @@\n-        checkWeak(rb.getString(\"the.generated.certificate\"), chain[0]);\n-        keyStore.setKeyEntry(alias, privKey, keyPass, chain);\n+\n+        if (signerFlag) {\n+            Certificate[] signerChain = keyStore.getCertificateChain(signerAlias);\n+            Certificate[] tmpChain = new X509Certificate[signerChain.length + 1];\n+            System.arraycopy(chain, 0, tmpChain, 0, 1);\n+            System.arraycopy(signerChain, 0, tmpChain, 1, signerChain.length);\n+            checkWeak(rb.getString(\"the.generated.certificate\"), tmpChain);\n+            keyStore.setKeyEntry(alias, privKey, keyPass, tmpChain);\n+        } else {\n+            checkWeak(rb.getString(\"the.generated.certificate\"), chain[0]);\n+            keyStore.setKeyEntry(alias, privKey, keyPass, chain);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":115,"deletions":15,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,4 @@\n+        {\"signer.alias\",\n+                \"signer alias\"}, \/\/-signer\n+        {\"signer.key.password\",\n+                \"signer key password\"}, \/\/-signerkeypass\n@@ -297,0 +301,2 @@\n+        {\"Alias.of.signer.signerAlias.does.not.exist\",\n+                \"Alias of signer <{0}> does not exist\"},\n@@ -305,0 +311,2 @@\n+        {\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.specified.by.the.signer.option.with.a.validity.of.validality.days.for\",\n+                \"Generating {0} bit {1} key pair and a certificate ({2}) issued by an entry specified by the -signer option with a validity of {3} days\\n\\tfor: {4}\"},\n@@ -484,1 +492,1 @@\n-\n+        {\"The.signer.option.must.be.specified.for.the.key.algorithm.keyAlgName\", \"The -signer option must be specified for the key algorithm {0}\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.security.interfaces.XECKey;\n@@ -100,0 +101,10 @@\n+        } else if (key instanceof XECKey) {\n+            String name = ((NamedParameterSpec)((XECKey) key).getParams()).getName();\n+            if (name.equalsIgnoreCase(NamedParameterSpec.X25519.getName())) {\n+                size = 255;\n+            } else if (name.equalsIgnoreCase(\n+                    NamedParameterSpec.X448.getName())) {\n+                size = 448;\n+            } else {\n+                size = -1;\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+    public static final int DEF_XEC_KEY_SIZE;\n@@ -127,0 +128,1 @@\n+        int xecKeySize = 255;\n@@ -165,0 +167,2 @@\n+                    } else if (algoName.equals(\"XDH\")) {\n+                        xecKeySize = value;\n@@ -192,0 +196,1 @@\n+        DEF_XEC_KEY_SIZE = xecKeySize;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,319 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8260693\n+ * @summary Test for keytool -genkeypair with -signer and -signerkeypass options\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.security.KeyStore;\n+import java.security.PublicKey;\n+import java.util.Arrays;\n+import sun.security.util.DerValue;\n+import sun.security.util.KeyUtil;\n+import sun.security.util.KnownOIDs;\n+import static sun.security.util.KnownOIDs.*;\n+\n+public class GenKeyPairSigner {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    static OutputAnalyzer ktjks(String cmd, String ks, String kpass) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks + \" -storetype jks\" + \" -keypass \" +\n+                kpass);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        testSignerPKCS12();\n+        testSignerJKS();\n+        testSignerOpt();\n+    }\n+\n+    static void testSignerPKCS12() throws Exception {\n+        KeyStore kstore;\n+        X509Certificate cert;\n+        String sigName, pKeyAlg;\n+        PublicKey pKey;\n+        int keyLen;\n+\n+        \/*\n+         * The signer alias is stored in the PKCS12 keystore\n+         *\/\n+        System.out.println(\"Testing the signer alias that is stored in the PKCS12 keystore\");\n+        System.out.println(\"Generating a root cert with SubjectKeyIdentifier extension\");\n+        kt(\"-genkeypair -keyalg EdDSA -alias ca -dname CN=CA -ext bc:c \" +\n+                \"-ext 2.5.29.14=04:14:00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19\",\n+                \"ks\");\n+\n+        System.out.println(\"Generating an XDH cert with -signer option\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg XDH -alias e1 -dname CN=E1 -signer ca\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (Ed25519) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"for: CN=E1\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ examine the resulting cert\n+        kstore = KeyStore.getInstance(new File(\"ks\"), \"changeit\".toCharArray());\n+        cert = (X509Certificate)kstore.getCertificate(\"e1\");\n+\n+        Certificate[] certChain = kstore.getCertificateChain(\"e1\");\n+        if (certChain.length != 2) {\n+            System.out.println(\"Generated cert chain is in error\");\n+            System.exit(1);\n+        }\n+\n+        sigName = cert.getSigAlgName();\n+        if (sigName != \"Ed25519\") {\n+            System.out.println(\"Signature algorithm name is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKey = cert.getPublicKey();\n+        keyLen = KeyUtil.getKeySize(pKey);\n+        if (keyLen != 255) {\n+            System.out.println(\"Key size is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKeyAlg = pKey.getAlgorithm();\n+        if (pKeyAlg != \"XDH\") {\n+            System.out.println(\"Subject Public Key Algorithm is in error\");\n+            System.exit(1);\n+        }\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Alias name: e1\")\n+                .shouldContain(\"Certificate chain length: 2\")\n+                .shouldContain(\"Signature algorithm name: Ed25519\")\n+                .shouldContain(\"Subject Public Key Algorithm: 255-bit XDH key\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ check to make sure that cert's AKID is created from the SKID of the signing cert\n+        byte[] expectedId = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n+                0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};\n+\n+        byte[] authorityKeyIdExt = cert.getExtensionValue(\n+                KnownOIDs.AuthorityKeyID.value());\n+\n+        byte[] authorityKeyId = null;\n+        if (authorityKeyIdExt == null) {\n+            System.out.println(\"Failed to get AKID extension from the cert\");\n+            System.exit(1);\n+        } else {\n+            try {\n+                authorityKeyId = new DerValue(authorityKeyIdExt).getOctetString();\n+            } catch (IOException e) {\n+                System.out.println(\"Failed to get AKID encoded OctetString in the cert\");\n+                System.exit(1);\n+            }\n+        }\n+\n+        authorityKeyId = Arrays.copyOfRange(authorityKeyId, 4, authorityKeyId.length);\n+        if (!Arrays.equals(authorityKeyId, expectedId)) {\n+            System.out.println(\"Failed due to AKID mismatch\");\n+            System.exit(1);\n+        }\n+\n+        kt(\"-genkeypair -keyalg RSA -alias ca2 -dname CN=CA2 -ext bc:c \",\n+                \"ks\");\n+\n+        System.out.println(\"Generating an X448 cert with -signer option\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg X448 -alias e2 -dname CN=E2 -sigalg SHA384withRSA -signer ca2\")\n+                .shouldContain(\"Generating 448 bit XDH key pair and a certificate (SHA384withRSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"for: CN=E2\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ examine the resulting cert\n+        kstore = KeyStore.getInstance(new File(\"ks\"), \"changeit\".toCharArray());\n+        cert = (X509Certificate)kstore.getCertificate(\"e2\");\n+        sigName = cert.getSigAlgName();\n+        if (sigName != \"SHA384withRSA\") {\n+            System.out.println(\"Signature algorithm name is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKey = cert.getPublicKey();\n+        keyLen = KeyUtil.getKeySize(pKey);\n+        if (keyLen != 448) {\n+            System.out.println(\"Key size is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKeyAlg = pKey.getAlgorithm();\n+        if (pKeyAlg != \"XDH\") {\n+            System.out.println(\"Subject Public Key Algorithm is in error\");\n+            System.exit(1);\n+        }\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Alias name: e2\")\n+                .shouldContain(\"Signature algorithm name: SHA384withRSA\")\n+                .shouldContain(\"Subject Public Key Algorithm: 448-bit XDH key\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg DSA -alias ca3 -dname CN=CA3 -ext bc:c \",\n+                \"ks\");\n+\n+        System.out.println(\"Generating a DH cert with -signer option\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg DH -alias e3 -dname CN=E3 -signer ca3\")\n+                .shouldContain(\"Generating 2,048 bit DH key pair and a certificate (SHA256withDSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"for: CN=E3\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ examine the resulting cert\n+        kstore = KeyStore.getInstance(new File(\"ks\"), \"changeit\".toCharArray());\n+        cert = (X509Certificate)kstore.getCertificate(\"e3\");\n+        sigName = cert.getSigAlgName();\n+        if (sigName != \"SHA256withDSA\") {\n+            System.out.println(\"Signature algorithm name is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKey = cert.getPublicKey();\n+        keyLen = KeyUtil.getKeySize(pKey);\n+        if (keyLen != 2048) {\n+            System.out.println(\"Key size is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKeyAlg = pKey.getAlgorithm();\n+        if (pKeyAlg != \"DH\") {\n+            System.out.println(\"Subject Public Key Algorithm is in error\");\n+            System.exit(1);\n+        }\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Alias name: e3\")\n+                .shouldContain(\"Signature algorithm name: SHA256withRSA\")\n+                .shouldContain(\"Subject Public Key Algorithm: 2048-bit DH key\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    static void testSignerJKS() throws Exception {\n+        KeyStore kstore;\n+        X509Certificate cert;\n+        String sigName, pKeyAlg;\n+        PublicKey pKey;\n+        int keyLen;\n+\n+        \/*\n+         * The signer alias is stored in the JKS keystore\n+         *\/\n+        System.out.println(\"Testing the signer alias that is stored in the JKS keystore\");\n+        ktjks(\"-genkeypair -keyalg RSA -keysize 1024 -alias ca -dname CN=CA -ext bc:c\",\n+                \"ksjks\", \"cakeypass\");\n+\n+        System.out.println(\"Generating an DSA cert with -signer and -signerkeypass options\");\n+        SecurityTools.keytool(\"-keystore ksjks -storepass changeit -storetype jks \" +\n+                \"-genkeypair -keyalg DSA -keysize 1024 -alias ca1 -dname CN=CA1 \" +\n+                \"-keypass ca1keypass -signer ca -signerkeypass cakeypass\")\n+                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA256withRSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"for: CN=CA1\")\n+                .shouldContain(\"The generated certificate #1 of 2 uses a 1024-bit DSA key which is considered a security risk\")\n+                .shouldContain(\"The generated certificate #2 of 2 uses a 1024-bit RSA key which is considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        System.out.println(\"Generating an XDH cert with -signer and -signerkeypass options\");\n+        SecurityTools.keytool(\"-keystore ksjks -storepass changeit -storetype jks \" +\n+                \"-genkeypair -keyalg XDH -alias e1 -dname CN=E1 \" +\n+                \"-keypass e1keypass -signer ca1 -signerkeypass ca1keypass\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA256withDSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"for: CN=E1\")\n+                .shouldContain(\"The generated certificate #2 of 3 uses a 1024-bit DSA key which is considered a security risk\")\n+                .shouldContain(\"The generated certificate #3 of 3 uses a 1024-bit RSA key which is considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ examine the resulting cert\n+        kstore = KeyStore.getInstance(new File(\"ksjks\"), \"changeit\".toCharArray());\n+        cert = (X509Certificate)kstore.getCertificate(\"e1\");\n+\n+        Certificate[] certChain = kstore.getCertificateChain(\"e1\");\n+        if (certChain.length != 3) {\n+            System.out.println(\"Generated cert chain is in error\");\n+            System.exit(1);\n+        }\n+\n+        sigName = cert.getSigAlgName();\n+        if (sigName != \"SHA256withDSA\") {\n+            System.out.println(\"Signature algorithm name is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKey = cert.getPublicKey();\n+        keyLen = KeyUtil.getKeySize(pKey);\n+        if (keyLen != 255) {\n+            System.out.println(\"Key size is in error\");\n+            System.exit(1);\n+        }\n+\n+        pKeyAlg = pKey.getAlgorithm();\n+        if (pKeyAlg != \"XDH\") {\n+            System.out.println(\"Subject Public Key Algorithm is in error\");\n+            System.exit(1);\n+        }\n+\n+        SecurityTools.keytool(\"-keystore ksjks -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Alias name: e1\")\n+                .shouldContain(\"Certificate chain length: 3\")\n+                .shouldContain(\"Signature algorithm name: SHA256withDSA\")\n+                .shouldContain(\"Subject Public Key Algorithm: 255-bit XDH key\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    static void testSignerOpt() throws Exception {\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg X25519 -alias e4 -dname CN=E4\")\n+                .shouldContain(\"The -signer option must be specified\")\n+                .shouldHaveExitValue(1);\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg X448 -alias e4 -dname CN=E4 -signer noca\")\n+                .shouldContain(\"Alias of signer <noca> does not exist\")\n+                .shouldHaveExitValue(1);\n+\n+        SecurityTools.keytool(\"-genkeypair --help\")\n+                .shouldContain(\"-signer <alias>         signer alias\")\n+                .shouldContain(\"-signerkeypass <arg>    signer key password\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":319,"deletions":0,"binary":false,"changes":319,"status":"added"}]}