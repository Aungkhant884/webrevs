{"files":[{"patch":"@@ -85,11 +85,4 @@\n-     * Creates a CertAndKeyGen object for a particular key type,\n-     * signature algorithm, and provider.\n-     *\n-     * @param keyType type of key, e.g. \"RSA\", \"DSA\"\n-     * @param sigAlg name of the signature algorithm, e.g. \"MD5WithRSA\",\n-     *          \"MD2WithRSA\", \"SHAwithDSA\". If set to null, a default\n-     *          algorithm matching the private key will be chosen after\n-     *          the first keypair is generated.\n-     * @param providerName name of the provider\n-     * @exception NoSuchAlgorithmException on unrecognized algorithms.\n-     * @exception NoSuchProviderException on unrecognized providers.\n+     * See doc comments at:\n+     * constructor CertAndKeyGen(String keyType, String sigAlg,\n+     * String providerName, PrivateKey signerPrivateKey,\n+     * X500Name signerSubjectName)\n@@ -100,12 +93,1 @@\n-        if (providerName == null) {\n-            keyGen = KeyPairGenerator.getInstance(keyType);\n-        } else {\n-            try {\n-                keyGen = KeyPairGenerator.getInstance(keyType, providerName);\n-            } catch (Exception e) {\n-                \/\/ try first available provider instead\n-                keyGen = KeyPairGenerator.getInstance(keyType);\n-            }\n-        }\n-        this.sigAlg = sigAlg;\n-        this.keyType = keyType;\n+        this(keyType, sigAlg, providerName, null, null);\n@@ -117,1 +99,1 @@\n-     * be signed by the signer's private key.\n+     * be signed by the signer's private key when it is provided.\n@@ -122,2 +104,2 @@\n-     *          algorithm matching the signer's private key will be\n-     *          chosen after the first keypair is generated.\n+     *          algorithm matching the private key or signer's private\n+     *          key will be chosen after the first keypair is generated.\n@@ -146,1 +128,0 @@\n-        this.signerFlag = true;\n@@ -149,0 +130,3 @@\n+        if (signerPrivateKey != null) {\n+            this.signerFlag = true;\n+        }\n@@ -229,0 +213,5 @@\n+                if (sigAlg == null) {\n+                    throw new IllegalArgumentException(\n+                            \"Cannot derive signature algorithm from \"\n+                                    + signerPrivateKey.getAlgorithm());\n+                }\n@@ -231,5 +220,5 @@\n-            }\n-            if (sigAlg == null) {\n-                throw new IllegalArgumentException(\n-                        \"Cannot derive signature algorithm from \"\n-                                + privateKey.getAlgorithm());\n+                if (sigAlg == null) {\n+                    throw new IllegalArgumentException(\n+                            \"Cannot derive signature algorithm from \"\n+                                    + privateKey.getAlgorithm());\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/CertAndKeyGen.java","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1877,1 +1877,0 @@\n-        boolean reqSigner = false; \/\/ -signer option is required\n@@ -1899,1 +1898,0 @@\n-                    reqSigner = true;\n@@ -1902,1 +1900,0 @@\n-                    reqSigner = true;\n@@ -1905,1 +1902,0 @@\n-                    reqSigner = true;\n@@ -1908,1 +1904,0 @@\n-                    reqSigner = true;\n@@ -1930,7 +1925,0 @@\n-        if (reqSigner && signerAlias == null) {\n-            MessageFormat form = new MessageFormat(rb.getString\n-                    (\"The.signer.option.must.be.specified.for.the.key.algorithm.keyAlgName\"));\n-            Object[] source = {keyAlgName};\n-            throw new Exception(form.format(source));\n-        }\n-\n@@ -1941,1 +1929,4 @@\n-            if (keyStore.containsAlias(signerAlias) == false) {\n+            PrivateKey signerPrivateKey =\n+                    (PrivateKey)recoverKey(signerAlias, storePass, signerKeyPass).fst;\n+            Certificate signerCert = keyStore.getCertificate(signerAlias);\n+            if (signerCert == null) {\n@@ -1943,2 +1934,2 @@\n-                        (rb.getString(\"Alias.of.signer.signerAlias.does.not.exist\"));\n-                Object[] source = {signerAlias};\n+                        (rb.getString(\"alias.has.no.public.key.certificate.\"));\n+                Object[] source = {signerCert};\n@@ -1948,5 +1939,7 @@\n-            PrivateKey signerPrivateKey =\n-                    (PrivateKey)recoverKey(signerAlias, storePass, signerKeyPass).fst;\n-            Certificate signerCert = keyStore.getCertificate(signerAlias);\n-            byte[] encoded = signerCert.getEncoded();\n-            X509CertImpl signerCertImpl = new X509CertImpl(encoded);\n+            X509CertImpl signerCertImpl;\n+            if (signerCert instanceof X509CertImpl) {\n+                signerCertImpl = (X509CertImpl) signerCert;\n+            } else {\n+                signerCertImpl = new X509CertImpl(signerCert.getEncoded());\n+            }\n+\n@@ -2020,1 +2013,9 @@\n-                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.specified.by.the.signer.option.with.a.validity.of.validality.days.for\"));\n+                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.signerAlias.specified.by.the.signer.option.with.a.validity.of.validality.days.for\"));\n+            Object[] source = {\n+                    groupName == null ? keysize : KeyUtil.getKeySize(privKey),\n+                    fullDisplayAlgName(privKey),\n+                    chain[0].getSigAlgName(),\n+                    signerAlias,\n+                    validity,\n+                    x500Name};\n+            System.err.println(form.format(source));\n@@ -2024,3 +2025,7 @@\n-            if (groupName != null) {\n-                keysize = KeyUtil.getKeySize(privKey);\n-            }\n+            Object[] source = {\n+                    groupName == null ? keysize : KeyUtil.getKeySize(privKey),\n+                    fullDisplayAlgName(privKey),\n+                    chain[0].getSigAlgName(),\n+                    validity,\n+                    x500Name};\n+            System.err.println(form.format(source));\n@@ -2029,8 +2034,0 @@\n-        Object[] source = {\n-                keysize,\n-                fullDisplayAlgName(privKey),\n-                chain[0].getSigAlgName(),\n-                validity,\n-                x500Name};\n-        System.err.println(form.format(source));\n-\n@@ -2043,5 +2040,5 @@\n-            Certificate[] tmpChain = new X509Certificate[signerChain.length + 1];\n-            System.arraycopy(chain, 0, tmpChain, 0, 1);\n-            System.arraycopy(signerChain, 0, tmpChain, 1, signerChain.length);\n-            checkWeak(rb.getString(\"the.generated.certificate\"), tmpChain);\n-            keyStore.setKeyEntry(alias, privKey, keyPass, tmpChain);\n+            Certificate[] finalChain = new X509Certificate[signerChain.length + 1];\n+            System.arraycopy(chain, 0, finalChain, 0, 1);\n+            System.arraycopy(signerChain, 0, finalChain, 1, signerChain.length);\n+            checkWeak(rb.getString(\"the.generated.certificate\"), finalChain);\n+            keyStore.setKeyEntry(alias, privKey, keyPass, finalChain);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":34,"deletions":37,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -301,2 +301,0 @@\n-        {\"Alias.of.signer.signerAlias.does.not.exist\",\n-                \"Alias of signer <{0}> does not exist\"},\n@@ -311,2 +309,2 @@\n-        {\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.specified.by.the.signer.option.with.a.validity.of.validality.days.for\",\n-                \"Generating {0} bit {1} key pair and a certificate ({2}) issued by an entry specified by the -signer option with a validity of {3} days\\n\\tfor: {4}\"},\n+        {\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.an.entry.signerAlias.specified.by.the.signer.option.with.a.validity.of.validality.days.for\",\n+                \"Generating {0} bit {1} key pair and a certificate ({2}) issued by an entry <{3}> specified by the -signer option with a validity of {4} days\\n\\tfor: {5}\"},\n@@ -492,1 +490,0 @@\n-        {\"The.signer.option.must.be.specified.for.the.key.algorithm.keyAlgName\", \"The -signer option must be specified for the key algorithm {0}\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -102,6 +103,11 @@\n-            String name = ((NamedParameterSpec)((XECKey) key).getParams()).getName();\n-            if (name.equalsIgnoreCase(NamedParameterSpec.X25519.getName())) {\n-                size = 255;\n-            } else if (name.equalsIgnoreCase(\n-                    NamedParameterSpec.X448.getName())) {\n-                size = 448;\n+            XECKey pubk = (XECKey)key;\n+            AlgorithmParameterSpec params = pubk.getParams();\n+            if (params instanceof NamedParameterSpec) {\n+                String name = ((NamedParameterSpec) params).getName();\n+                if (name.equalsIgnoreCase(NamedParameterSpec.X25519.getName())) {\n+                    size = 255;\n+                } else if (name.equalsIgnoreCase(NamedParameterSpec.X448.getName())) {\n+                    size = 448;\n+                } else {\n+                    size = -1;\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,3 +77,6 @@\n-        kt(\"-genkeypair -keyalg EdDSA -alias ca -dname CN=CA -ext bc:c \" +\n-                \"-ext 2.5.29.14=04:14:00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19\",\n-                \"ks\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg EdDSA -alias ca -dname CN=CA -ext bc:c \" +\n+                \"-ext 2.5.29.14=04:14:00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19\")\n+                .shouldContain(\"Generating 255 bit Ed25519 key pair and self-signed certificate (Ed25519) with a validity of 90 days\")\n+                .shouldContain(\"for: CN=CA\")\n+                .shouldHaveExitValue(0);\n@@ -84,1 +87,1 @@\n-                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (Ed25519) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (Ed25519) issued by an entry <ca> specified by the -signer option with a validity of 90 days\")\n@@ -157,1 +160,1 @@\n-                .shouldContain(\"Generating 448 bit XDH key pair and a certificate (SHA384withRSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"Generating 448 bit XDH key pair and a certificate (SHA384withRSA) issued by an entry <ca2> specified by the -signer option with a validity of 90 days\")\n@@ -196,1 +199,1 @@\n-                .shouldContain(\"Generating 2,048 bit DH key pair and a certificate (SHA256withDSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"Generating 2,048 bit DH key pair and a certificate (SHA256withDSA) issued by an entry <ca3> specified by the -signer option with a validity of 90 days\")\n@@ -239,0 +242,4 @@\n+         * Using JKS keystore here is to test the scenario when the private key\n+         * of the signer entry is protected by a password different from the\n+         * store password, and -signerkeypass option needs to be specified\n+         * along with -signer option.\n@@ -248,1 +255,1 @@\n-                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA256withRSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA256withRSA) issued by an entry <ca> specified by the -signer option with a validity of 90 days\")\n@@ -258,1 +265,1 @@\n-                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA256withDSA) issued by an entry specified by the -signer option with a validity of 90 days\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA256withDSA) issued by an entry <ca1> specified by the -signer option with a validity of 90 days\")\n@@ -306,1 +313,1 @@\n-                .shouldContain(\"The -signer option must be specified\")\n+                .shouldContain(\"Cannot derive signature algorithm from XDH\")\n@@ -311,1 +318,1 @@\n-                .shouldContain(\"Alias of signer <noca> does not exist\")\n+                .shouldContain(\"Alias <noca> does not exist\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"}]}