{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -47,3 +48,3 @@\n-  static inline u2   get_Java_u2(address p)           { return swap_u2(get_native_u2(p)); }\n-  static inline u4   get_Java_u4(address p)           { return swap_u4(get_native_u4(p)); }\n-  static inline u8   get_Java_u8(address p)           { return swap_u8(get_native_u8(p)); }\n+  static inline u2   get_Java_u2(address p)           { return byteswap(get_native_u2(p)); }\n+  static inline u4   get_Java_u4(address p)           { return byteswap(get_native_u4(p)); }\n+  static inline u8   get_Java_u8(address p)           { return byteswap(get_native_u8(p)); }\n@@ -51,9 +52,3 @@\n-  static inline void put_Java_u2(address p, u2 x)     { put_native_u2(p, swap_u2(x)); }\n-  static inline void put_Java_u4(address p, u4 x)     { put_native_u4(p, swap_u4(x)); }\n-  static inline void put_Java_u8(address p, u8 x)     { put_native_u8(p, swap_u8(x)); }\n-\n-\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2   swap_u2(u2 x);                   \/\/ compiler-dependent implementation\n-  static inline u4   swap_u4(u4 x);                   \/\/ compiler-dependent implementation\n-  static inline u8   swap_u8(u8 x);\n+  static inline void put_Java_u2(address p, u2 x)     { put_native_u2(p, byteswap(x)); }\n+  static inline void put_Java_u4(address p, u4 x)     { put_native_u4(p, byteswap(x)); }\n+  static inline void put_Java_u8(address p, u8 x)     { put_native_u8(p, byteswap(x)); }\n@@ -62,4 +57,0 @@\n-\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8[_base]\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/bytes_aarch64.hpp","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -178,5 +178,0 @@\n-\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n@@ -185,4 +180,0 @@\n-\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/arm\/bytes_arm.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -40,5 +41,0 @@\n-  \/\/ Forward declarations of the compiler-dependent implementation\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n-\n@@ -144,3 +140,3 @@\n-  static inline u2   get_Java_u2(address p) { return swap_u2(get_native_u2(p)); }\n-  static inline u4   get_Java_u4(address p) { return swap_u4(get_native_u4(p)); }\n-  static inline u8   get_Java_u8(address p) { return swap_u8(get_native_u8(p)); }\n+  static inline u2   get_Java_u2(address p) { return byteswap(get_native_u2(p)); }\n+  static inline u4   get_Java_u4(address p) { return byteswap(get_native_u4(p)); }\n+  static inline u8   get_Java_u8(address p) { return byteswap(get_native_u8(p)); }\n@@ -148,3 +144,3 @@\n-  static inline void put_Java_u2(address p, u2 x)     { put_native_u2(p, swap_u2(x)); }\n-  static inline void put_Java_u4(address p, u4 x)     { put_native_u4(p, swap_u4(x)); }\n-  static inline void put_Java_u8(address p, u8 x)     { put_native_u8(p, swap_u8(x)); }\n+  static inline void put_Java_u2(address p, u2 x)     { put_native_u2(p, byteswap(x)); }\n+  static inline void put_Java_u4(address p, u4 x)     { put_native_u4(p, byteswap(x)); }\n+  static inline void put_Java_u8(address p, u8 x)     { put_native_u8(p, byteswap(x)); }\n@@ -154,5 +150,0 @@\n-  \/\/ Thus, a swap between native and Java ordering is always a no-op:\n-  static inline u2   swap_u2(u2 x)  { return x; }\n-  static inline u4   swap_u4(u4 x)  { return x; }\n-  static inline u8   swap_u8(u8 x)  { return x; }\n-\n@@ -269,2 +260,0 @@\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/ppc\/bytes_ppc.hpp","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -77,6 +78,0 @@\n-#ifndef VM_LITTLE_ENDIAN\n-static void reverse_bytes(juint &w) {\n-  w = ((w >> 24) & 0xFF) | (((w >> 16) & 0xFF) << 8) | (((w >> 8) & 0xFF) << 16) | ((w & 0xFF) << 24);\n-}\n-#endif\n-\n@@ -115,4 +110,4 @@\n-      reverse_bytes(a);\n-      reverse_bytes(b);\n-      reverse_bytes(c);\n-      reverse_bytes(d);\n+      a = byteswap(a);\n+      b = byteswap(b);\n+      c = byteswap(c);\n+      d = byteswap(d);\n","filename":"src\/hotspot\/cpu\/ppc\/stubRoutines_ppc_64.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -37,5 +38,0 @@\n-  \/\/ Forward declarations of the compiler-dependent implementation\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n-\n@@ -157,0 +153,4 @@\n+#ifndef VM_LITTLE_ENDIAN\n+#error RISC-V is little endian, the preprocessor macro VM_LITTLE_ENDIAN should be defined.\n+#endif\n+\n@@ -158,3 +158,3 @@\n-  static inline u2 get_Java_u2(address p) { return swap_u2(get_native_u2(p)); }\n-  static inline u4 get_Java_u4(address p) { return swap_u4(get_native_u4(p)); }\n-  static inline u8 get_Java_u8(address p) { return swap_u8(get_native_u8(p)); }\n+  static inline u2 get_Java_u2(address p) { return byteswap(get_native_u2(p)); }\n+  static inline u4 get_Java_u4(address p) { return byteswap(get_native_u4(p)); }\n+  static inline u8 get_Java_u8(address p) { return byteswap(get_native_u8(p)); }\n@@ -162,3 +162,3 @@\n-  static inline void put_Java_u2(address p, u2 x) { put_native_u2(p, swap_u2(x)); }\n-  static inline void put_Java_u4(address p, u4 x) { put_native_u4(p, swap_u4(x)); }\n-  static inline void put_Java_u8(address p, u8 x) { put_native_u8(p, swap_u8(x)); }\n+  static inline void put_Java_u2(address p, u2 x) { put_native_u2(p, byteswap(x)); }\n+  static inline void put_Java_u4(address p, u4 x) { put_native_u4(p, byteswap(x)); }\n+  static inline void put_Java_u8(address p, u8 x) { put_native_u8(p, byteswap(x)); }\n@@ -167,2 +167,0 @@\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/riscv\/bytes_riscv.hpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-  \/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8.\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/s390\/bytes_s390.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -33,6 +34,0 @@\n- private:\n-#ifndef AMD64\n-  \/\/ Helper function for swap_u8\n-  static inline u8   swap_u8_base(u4 x, u4 y);        \/\/ compiler-dependent implementation\n-#endif \/\/ AMD64\n-\n@@ -82,1 +77,1 @@\n-      x = swap<T>(x);\n+      x = byteswap(x);\n@@ -91,1 +86,1 @@\n-      x = swap<T>(x);\n+      x = byteswap(x);\n@@ -104,18 +99,0 @@\n-\n-  \/\/ Efficient swapping of byte ordering\n-  template <typename T>\n-  static T swap(T x) {\n-    switch (sizeof(T)) {\n-    case sizeof(u1): return x;\n-    case sizeof(u2): return swap_u2(x);\n-    case sizeof(u4): return swap_u4(x);\n-    case sizeof(u8): return swap_u8(x);\n-    default:\n-      guarantee(false, \"invalid size: \" SIZE_FORMAT \"\\n\", sizeof(T));\n-      return 0;\n-    }\n-  }\n-\n-  static inline u2   swap_u2(u2 x);                   \/\/ compiler-dependent implementation\n-  static inline u4   swap_u4(u4 x);                   \/\/ compiler-dependent implementation\n-  static inline u8   swap_u8(u8 x);\n@@ -124,3 +101,0 @@\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8[_base]\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/x86\/bytes_x86.hpp","additions":3,"deletions":29,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -121,5 +121,0 @@\n-\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n@@ -147,5 +142,0 @@\n-\n-  \/\/ No byte-order reversal is needed\n-  static inline u2 swap_u2(u2 x) { return x; }\n-  static inline u4 swap_u4(u4 x) { return x; }\n-  static inline u8 swap_u8(u8 x) { return x; }\n@@ -155,8 +145,0 @@\n-#ifdef VM_LITTLE_ENDIAN\n-\/\/ The following header contains the implementations of swap_u2,\n-\/\/ swap_u4, and swap_u8\n-\n-#include OS_CPU_HEADER(bytes)\n-\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n","filename":"src\/hotspot\/cpu\/zero\/bytes_zero.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n-#define OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n-\n-#if defined(VM_LITTLE_ENDIAN)\n-\/\/ Aix is not little endian.\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n-#endif \/\/ OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/bytes_aix_ppc.hpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n-#define OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n-\n-#ifdef __APPLE__\n-#include <libkern\/OSByteOrder.h>\n-#endif\n-\n-#if defined(__APPLE__)\n-#  define bswap_16(x) OSSwapInt16(x)\n-#  define bswap_32(x) OSSwapInt32(x)\n-#  define bswap_64(x) OSSwapInt64(x)\n-#else\n-#  error \"Unimplemented\"\n-#endif\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/bytes_bsd_aarch64.hpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n-#define OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n-\n-#ifdef __APPLE__\n-#include <libkern\/OSByteOrder.h>\n-#endif\n-\n-#if defined(AMD64)\n-#  if defined(__APPLE__)\n-#    define bswap_16(x) OSSwapInt16(x)\n-#    define bswap_32(x) OSSwapInt32(x)\n-#    define bswap_64(x) OSSwapInt64(x)\n-#  elif defined(__OpenBSD__)\n-#    define bswap_16(x) swap16(x)\n-#    define bswap_32(x) swap32(x)\n-#    define bswap_64(x) swap64(x)\n-#  elif defined(__NetBSD__)\n-#    define bswap_16(x) bswap16(x)\n-#    define bswap_32(x) bswap32(x)\n-#    define bswap_64(x) bswap64(x)\n-#  else\n-#    define bswap_16(x) __bswap16(x)\n-#    define bswap_32(x) __bswap32(x)\n-#    define bswap_64(x) __bswap64(x)\n-#  endif\n-#endif\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-#ifdef AMD64\n-  return bswap_16(x);\n-#else\n-  u2 ret;\n-  __asm__ __volatile__ (\n-    \"movw %0, %%ax;\"\n-    \"xchg %%al, %%ah;\"\n-    \"movw %%ax, %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"ax\", \"0\"       \/\/ clobbered registers\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-#ifdef AMD64\n-  return bswap_32(x);\n-#else\n-  u4 ret;\n-  __asm__ __volatile__ (\n-    \"bswap %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"0\"             \/\/ clobbered register\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-#ifdef AMD64\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-#else\n-\/\/ Helper function for swap_u8\n-inline u8   Bytes::swap_u8_base(u4 x, u4 y) {\n-  return (((u8)swap_u4(x))<<32) | swap_u4(y);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return swap_u8_base(*(u4*)&x, *(((u4*)&x)+1));\n-}\n-#endif \/\/ !AMD64\n-\n-#endif \/\/ OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/bytes_bsd_x86.hpp","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n-#define OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#ifdef __APPLE__\n-#  include <libkern\/OSByteOrder.h>\n-#else\n-#  include <sys\/endian.h>\n-#endif\n-\n-#if defined(__APPLE__)\n-#  define bswap_16(x)   OSSwapInt16(x)\n-#  define bswap_32(x)   OSSwapInt32(x)\n-#  define bswap_64(x)   OSSwapInt64(x)\n-#elif defined(__OpenBSD__)\n-#  define bswap_16(x)   swap16(x)\n-#  define bswap_32(x)   swap32(x)\n-#  define bswap_64(x)   swap64(x)\n-#elif defined(__NetBSD__)\n-#  define bswap_16(x)   bswap16(x)\n-#  define bswap_32(x)   bswap32(x)\n-#  define bswap_64(x)   bswap64(x)\n-#else\n-#  define bswap_16(x) __bswap16(x)\n-#  define bswap_32(x) __bswap32(x)\n-#  define bswap_64(x) __bswap64(x)\n-#endif\n-\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/bytes_bsd_zero.hpp","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n-#define OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/bytes_linux_aarch64.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n-#define OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/bytes_linux_arm.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright 2014 Google Inc.  All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n-#define OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n-\n-#if defined(VM_LITTLE_ENDIAN)\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) { return bswap_16(x); }\n-inline u4 Bytes::swap_u4(u4 x) { return bswap_32(x); }\n-inline u8 Bytes::swap_u8(u8 x) { return bswap_64(x); }\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n-#endif \/\/ OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/bytes_linux_ppc.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n-#define OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/bytes_linux_riscv.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n-#define OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#include <byteswap.h>\n-\n-inline u2 swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/bytes_linux_s390.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n-#define OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-#ifdef AMD64\n-  return bswap_16(x);\n-#else\n-  u2 ret;\n-  __asm__ __volatile__ (\n-    \"movw %0, %%ax;\"\n-    \"xchg %%al, %%ah;\"\n-    \"movw %%ax, %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"ax\", \"0\"       \/\/ clobbered registers\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-#ifdef AMD64\n-  return bswap_32(x);\n-#else\n-  u4 ret;\n-  __asm__ __volatile__ (\n-    \"bswap %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"0\"             \/\/ clobbered register\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-#ifdef AMD64\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-#else\n-\/\/ Helper function for swap_u8\n-inline u8   Bytes::swap_u8_base(u4 x, u4 y) {\n-  return (((u8)swap_u4(x))<<32) | swap_u4(y);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return swap_u8_base(*(u4*)&x, *(((u4*)&x)+1));\n-}\n-#endif \/\/ !AMD64\n-\n-#endif \/\/ OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/bytes_linux_x86.hpp","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n-#define OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#include <byteswap.h>\n-\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/bytes_linux_zero.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n-#define OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n-\n-#include <stdlib.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return _byteswap_ushort(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return _byteswap_ulong(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return _byteswap_uint64(x);\n-}\n-\n-#pragma warning(default: 4035) \/\/ Enable warning 4035: no return value\n-\n-#endif \/\/ OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/bytes_windows_aarch64.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n-#define OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n-\n-#include <stdlib.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return (u2) _byteswap_ushort((unsigned short) x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return (u4) _byteswap_ulong((unsigned long) x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return (u8) _byteswap_uint64((unsigned __int64) x);\n-}\n-\n-#endif \/\/ OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/bytes_windows_x86.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"utilities\/moveBits.hpp\"\n+#include \"utilities\/reverse_bits.hpp\"\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-#include \"utilities\/bytes.hpp\"\n+#include \"utilities\/byteswap.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -37,3 +38,3 @@\n-# define bigendian_16(x) Bytes::swap_u2(x)\n-# define bigendian_32(x) Bytes::swap_u4(x)\n-# define bigendian_64(x) Bytes::swap_u8(x)\n+# define bigendian_16(x) byteswap<u2>(x)\n+# define bigendian_32(x) byteswap<u4>(x)\n+# define bigendian_64(x) byteswap<u8>(x)\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBigEndian.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#include \"utilities\/moveBits.hpp\"\n+#include \"utilities\/reverse_bits.hpp\"\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2023, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_BYTESWAP_HPP\n+#define SHARE_UTILITIES_BYTESWAP_HPP\n+\n+#include \"metaprogramming\/enableIf.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <type_traits>\n+\n+template <typename T, size_t N = sizeof(T)>\n+struct ByteswapImpl;\n+\n+\/\/ T byteswap<T>(T)\n+\/\/\n+\/\/ Reverses the bytes for the value of the integer type T. Partially compatible with std::byteswap\n+\/\/ introduced in C++23.\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline T byteswap(T x) {\n+  using U = std::make_unsigned_t<T>;\n+  return static_cast<T>(ByteswapImpl<U>{}(static_cast<U>(x)));\n+}\n+\n+\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n+template <typename T>\n+struct ByteswapImpl<T, 1> {\n+  inline constexpr T operator()(T x) const {\n+    return x;\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * Fallback\n+ *****************************************************************************\/\n+\n+template <typename T, size_t N = sizeof(T)>\n+struct ByteswapFallbackImpl;\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 2> {\n+  inline constexpr uint16_t operator()(uint16_t x) const {\n+    return (((x & UINT16_C(0x00ff)) << 8) | ((x & UINT16_C(0xff00)) >> 8));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 4> {\n+  inline constexpr uint32_t operator()(uint32_t x) const {\n+    return (((x & UINT32_C(0x000000ff)) << 24) | ((x & UINT32_C(0x0000ff00)) << 8) |\n+            ((x & UINT32_C(0x00ff0000)) >> 8)  | ((x & UINT32_C(0xff000000)) >> 24));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 8> {\n+  inline constexpr uint64_t operator()(uint64_t x) const {\n+    return (((x & UINT64_C(0x00000000000000ff)) << 56) | ((x & UINT64_C(0x000000000000ff00)) << 40) |\n+            ((x & UINT64_C(0x0000000000ff0000)) << 24) | ((x & UINT64_C(0x00000000ff000000)) << 8) |\n+            ((x & UINT64_C(0x000000ff00000000)) >> 8)  | ((x & UINT64_C(0x0000ff0000000000)) >> 24) |\n+            ((x & UINT64_C(0x00ff000000000000)) >> 40) | ((x & UINT64_C(0xff00000000000000)) >> 56));\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * GCC and compatible (including Clang)\n+ *****************************************************************************\/\n+#if defined(TARGET_COMPILER_gcc) || defined(TARGET_COMPILER_xlc)\n+\n+#if defined(__clang__) || defined(ASSERT)\n+\n+\/\/ Unlike GCC, Clang is willing to inline the generic implementation of __builtin_bswap when\n+\/\/ architecture support is unavailable in -O2. This ensures we avoid the function call to libgcc.\n+\/\/ Clang is able to recognize the fallback implementation as byteswapping, but not on every\n+\/\/ architecture unlike GCC. This suggests the optimization pass for GCC that recognizes byteswapping\n+\/\/ is architecture agnostic, while for Clang it is not.\n+\n+template <typename T>\n+struct ByteswapImpl<T, 2> {\n+  inline constexpr uint16_t operator()(uint16_t x) const {\n+    return __builtin_bswap16(x);\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 4> {\n+  inline constexpr uint32_t operator()(uint32_t x) const {\n+    return __builtin_bswap32(x);\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 8> {\n+  inline constexpr uint64_t operator()(uint64_t x) const {\n+    return __builtin_bswap64(x);\n+  }\n+};\n+\n+#else\n+\n+\/\/ We do not use __builtin_bswap and friends for GCC in release builds. Unfortunately on\n+\/\/ architectures that do not have a byteswap instruction (i.e. RISC-V), GCC emits a function call to\n+\/\/ libgcc regardless of optimization options, even when the generic implementation is, for example,\n+\/\/ less than 20 instructions. GCC is however able to recognize the fallback as byteswapping\n+\/\/ regardless of architecture and appropriately replaces the code in -O2 with the appropriate\n+\/\/ architecture-specific byteswap instruction, if available. If it is not available, GCC emits the\n+\/\/ exact same implementation that underpins its __builtin_bswap in libgcc as there is really only\n+\/\/ one way to implement it, as we have in fallback.\n+\n+template <typename T, size_t N>\n+struct ByteswapImpl : public ByteswapFallbackImpl<T, N> {};\n+\n+#endif\n+\n+\/*****************************************************************************\n+ * Microsoft Visual Studio\n+ *****************************************************************************\/\n+#elif defined(TARGET_COMPILER_visCPP)\n+\n+#include <cstdlib>\n+\n+#pragma intrinsic(_byteswap_ushort)\n+#pragma intrinsic(_byteswap_ulong)\n+#pragma intrinsic(_byteswap_uint64)\n+\n+template <typename T>\n+struct ByteswapImpl<T, 2> {\n+  inline unsigned short operator()(unsigned short x) const {\n+    return _byteswap_ushort(x);\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 4> {\n+  inline unsigned long operator()(unsigned long x) const {\n+    return _byteswap_ulong(x);\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 8> {\n+  inline unsigned __int64 operator()(unsigned __int64 x) const {\n+    return _byteswap_uint64(x);\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * Unknown toolchain\n+ *****************************************************************************\/\n+#else\n+\n+#error Unknown toolchain.\n+\n+#endif\n+\n+#endif \/\/ SHARE_UTILITIES_BYTESWAP_HPP\n","filename":"src\/hotspot\/share\/utilities\/byteswap.hpp","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -87,27 +88,0 @@\n-  \/**\n-   * Byte swap a 16-bit value\n-   *\/\n-  static uint16_t byte_swap(uint16_t x) {\n-    return (x << 8) | (x >> 8);\n-  }\n-\n-  \/**\n-   * Byte swap a 32-bit value\n-   *\/\n-  static uint32_t byte_swap(uint32_t x) {\n-    uint16_t lo = (uint16_t)x;\n-    uint16_t hi = (uint16_t)(x >> 16);\n-\n-    return ((uint32_t)byte_swap(lo) << 16) | (uint32_t)byte_swap(hi);\n-  }\n-\n-  \/**\n-   * Byte swap a 64-bit value\n-   *\/\n-  static uint64_t byte_swap(uint64_t x) {\n-    uint32_t lo = (uint32_t)x;\n-    uint32_t hi = (uint32_t)(x >> 32);\n-\n-    return ((uint64_t)byte_swap(lo) << 32) | (uint64_t)byte_swap(hi);\n-  }\n-\n@@ -157,1 +131,1 @@\n-        tmp = byte_swap(tmp);\n+        tmp = byteswap(tmp);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_UTILITIES_MOVEBITS_HPP\n-#define SHARE_UTILITIES_MOVEBITS_HPP\n-\n-#include \"metaprogramming\/enableIf.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-#include <type_traits>\n-\n-template <typename T>\n-class ReverseBitsImpl {\n-  static const size_t NB = sizeof(T) * BitsPerByte;\n-\n-  static_assert((NB == 8) || (NB == 16) || (NB == 32) || (NB == 64),\n-                \"unsupported size\");\n-\n-  \/\/ The unsigned integral type for calculations.\n-  using I = std::conditional_t<NB <= 32, uint32_t, uint64_t>;\n-\n-  static const I rep_5555 = static_cast<I>(UCONST64(0x5555555555555555));\n-  static const I rep_3333 = static_cast<I>(UCONST64(0x3333333333333333));\n-  static const I rep_0F0F = static_cast<I>(UCONST64(0x0F0F0F0F0F0F0F0F));\n-  static const I rep_00FF = static_cast<I>(UCONST64(0x00FF00FF00FF00FF));\n-  static const I rep_FFFF = static_cast<I>(UCONST64(0x0000FFFF0000FFFF));\n-\n-public:\n-\n-  static constexpr T reverse_bits_in_bytes(T v) {\n-    \/\/ Based on Hacker's Delight Section 7-1\n-    auto x = static_cast<I>(v);\n-    x = ((x & rep_5555) << 1) | ((x >> 1) & rep_5555);\n-    x = ((x & rep_3333) << 2) | ((x >> 2) & rep_3333);\n-    x = ((x & rep_0F0F) << 4) | ((x >> 4) & rep_0F0F);\n-    return static_cast<T>(x);\n-  }\n-\n-  static constexpr T reverse_bytes(T v) {\n-    \/\/ Based on Hacker's Delight Section 7-1\n-    \/\/ NB: Compilers are good at recognizing byte-swap code and transforming\n-    \/\/ it into platform-specific instructions like x86 bswap.\n-    auto x = static_cast<I>(v);\n-    switch (NB) {\n-    case 64:\n-      \/\/ The use of NB\/2 rather than 32 avoids a warning in dead code when\n-      \/\/ I is uint32_t, because shifting a 32bit type by 32 is UB.\n-      x = (x << (NB\/2)) | (x >> (NB\/2));\n-    case 32:                    \/\/ fallthrough\n-      x = ((x & rep_FFFF) << 16) | ((x >> 16) & rep_FFFF);\n-    case 16:                    \/\/ fallthrough\n-      x = ((x & rep_00FF) << 8)  | ((x >> 8)  & rep_00FF);\n-    default:                    \/\/ fallthrough\n-      return static_cast<T>(x);\n-    }\n-  }\n-};\n-\n-\/\/ Performs byte reversal of an integral type up to 64 bits.\n-template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n-constexpr T reverse_bytes(T x) {\n-  return ReverseBitsImpl<T>::reverse_bytes(x);\n-}\n-\n-\/\/ Performs bytewise bit reversal of each byte of an integral\n-\/\/ type up to 64 bits.\n-template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n-constexpr T reverse_bits_in_bytes(T x) {\n-  return ReverseBitsImpl<T>::reverse_bits_in_bytes(x);\n-}\n-\n-\/\/ Performs full bit reversal an integral type up to 64 bits.\n-template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n-constexpr T reverse_bits(T x) {\n-  return reverse_bytes(reverse_bits_in_bytes(x));\n-}\n-\n-#endif \/\/ SHARE_UTILITIES_MOVEBITS_HPP\n","filename":"src\/hotspot\/share\/utilities\/moveBits.hpp","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_REVERSE_BITS_HPP\n+#define SHARE_UTILITIES_REVERSE_BITS_HPP\n+\n+#include \"metaprogramming\/enableIf.hpp\"\n+#include \"utilities\/byteswap.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <type_traits>\n+\n+template <typename T, size_t N = sizeof(T)>\n+struct ReverseBitsImpl;\n+\n+\/\/ T reverse_bits<T>(T)\n+\/\/\n+\/\/ Reverses the bits in the integral value of type T.\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline T reverse_bits(T x) {\n+  using U = std::make_unsigned_t<T>;\n+  return static_cast<T>(ReverseBitsImpl<U>{}(static_cast<U>(x)));\n+}\n+\n+\/*****************************************************************************\n+ * Fallback\n+ *****************************************************************************\/\n+\n+template <typename T>\n+struct ReverseBitsFallbackImpl {\n+ private:\n+  \/\/ The unsigned integral type for calculations.\n+  using U = std::conditional_t<sizeof(T) <= 4, uint32_t, uint64_t>;\n+\n+  static constexpr U rep_5555 = static_cast<U>(UINT64_C(0x5555555555555555));\n+  static constexpr U rep_3333 = static_cast<U>(UINT64_C(0x3333333333333333));\n+  static constexpr U rep_0F0F = static_cast<U>(UINT64_C(0x0F0F0F0F0F0F0F0F));\n+\n+ public:\n+  inline T operator()(T v) const {\n+    \/\/ Based on Hacker's Delight Section 7-1\n+    U x = static_cast<U>(v);\n+    x = ((x & rep_5555) << 1) | ((x >> 1) & rep_5555);\n+    x = ((x & rep_3333) << 2) | ((x >> 2) & rep_3333);\n+    x = ((x & rep_0F0F) << 4) | ((x >> 4) & rep_0F0F);\n+    return byteswap(static_cast<T>(x));\n+  }\n+};\n+\n+\n+\/*****************************************************************************\n+ * GCC and compatible (including Clang)\n+ *****************************************************************************\/\n+#if defined(TARGET_COMPILER_gcc) || defined(TARGET_COMPILER_xlc)\n+\n+\/\/ Default implementation for GCC-like compilers is the fallback. At the time of writing GCC does\n+\/\/ not have intrinsics for bit reversal while Clang does.\n+\n+template <typename T, size_t N>\n+struct ReverseBitsImpl : public ReverseBitsFallbackImpl<T> {};\n+\n+#ifdef __has_builtin\n+\n+#if __has_builtin(__builtin_bitreverse8)\n+\n+template <typename T>\n+struct ReverseBitsImpl<T, 1> {\n+  inline uint8_t operator()(uint8_t x) const {\n+    return __builtin_bitreverse8(x);\n+  }\n+};\n+\n+#endif \/\/ __has_builtin(__builtin_bitreverse8)\n+\n+#if __has_builtin(__builtin_bitreverse16)\n+\n+template <typename T>\n+struct ReverseBitsImpl<T, 2> {\n+  inline uint16_t operator()(uint16_t x) const {\n+    return __builtin_bitreverse16(x);\n+  }\n+};\n+\n+#endif \/\/ __has_builtin(__builtin_bitreverse16)\n+\n+#if __has_builtin(__builtin_bitreverse32)\n+\n+template <typename T>\n+struct ReverseBitsImpl<T, 4> {\n+  inline uint32_t operator()(uint32_t x) const {\n+    return __builtin_bitreverse32(x);\n+  }\n+};\n+\n+#endif \/\/ __has_builtin(__builtin_bitreverse32)\n+\n+#if __has_builtin(__builtin_bitreverse64)\n+\n+template <typename T>\n+struct ReverseBitsImpl<T, 8> {\n+  inline uint64_t operator()(uint64_t x) const {\n+    return __builtin_bitreverse64(x);\n+  }\n+};\n+\n+#endif \/\/ __has_builtin(__builtin_bitreverse64)\n+\n+#endif \/\/ __has_builtin\n+\n+\/*****************************************************************************\n+ * Microsoft Visual Studio\n+ *****************************************************************************\/\n+#elif defined(TARGET_COMPILER_visCPP)\n+\n+template <typename T, size_t N>\n+struct ReverseBitsImpl : public ReverseBitsFallbackImpl<T> {};\n+\n+\/*****************************************************************************\n+ * Unknown toolchain\n+ *****************************************************************************\/\n+#else\n+\n+#error Unknown toolchain.\n+\n+#endif\n+\n+#endif \/\/ SHARE_UTILITIES_REVERSE_BITS_HPP\n","filename":"src\/hotspot\/share\/utilities\/reverse_bits.hpp","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/moveBits.hpp\"\n-#include \"unittest.hpp\"\n-\n-template<typename T>\n-inline void test_moveBits() {\n-  const int  NBIT = sizeof(T) * 8;\n-  const bool IS_U = (T)-1 > 0;\n-  const int XOR_REV_BITS = (NBIT - 1);\n-  const int XOR_REV_BITS_IN_BYTES = 7;  \/\/ only flip position in byte\n-  const int XOR_REV_BYTES = XOR_REV_BITS ^ XOR_REV_BITS_IN_BYTES;\n-  printf(\"testing %sint%d_t...\\n\", IS_U ? \"u\" : \"\", NBIT);\n-  ASSERT_EQ(reverse_bits((T)0), (T)0);\n-  ASSERT_EQ(reverse_bits((T)-1), (T)-1);\n-  ASSERT_EQ(reverse_bytes((T)0), (T)0);\n-  ASSERT_EQ(reverse_bytes((T)-1), (T)-1);\n-  ASSERT_EQ(reverse_bits_in_bytes((T)0), (T)0);\n-  ASSERT_EQ(reverse_bits_in_bytes((T)-1), (T)-1);\n-  for (int i1 = 0; i1 < NBIT; i1++) {\n-    T mask1 = (T)1 << i1;\n-    T revm1 = (T)1 << (i1 ^ XOR_REV_BITS);\n-    T rbym1 = (T)1 << (i1 ^ XOR_REV_BYTES);\n-    T ribm1 = (T)1 << (i1 ^ XOR_REV_BITS_IN_BYTES);\n-    for (int i2 = 0; i2 <= i1; i2++) {\n-      T mask2 = (T)1 << i2;\n-      T revm2 = (T)1 << (i2 ^ XOR_REV_BITS);\n-      T rbym2 = (T)1 << (i2 ^ XOR_REV_BYTES);\n-      T ribm2 = (T)1 << (i2 ^ XOR_REV_BITS_IN_BYTES);\n-      T mask = mask1|mask2;\n-#define STUFF (IS_U?\"u\":\"s\") << NBIT << \"@\" << i1 << \",\" << i2\n-      ASSERT_EQ(reverse_bits(mask), revm1|revm2) << STUFF;\n-      ASSERT_EQ((T)~reverse_bits((T)~mask), revm1|revm2) << STUFF;\n-      ASSERT_EQ(reverse_bytes(mask), rbym1|rbym2) << STUFF;\n-      ASSERT_EQ((T)~reverse_bytes((T)~mask), rbym1|rbym2) << STUFF;\n-      ASSERT_EQ(reverse_bits_in_bytes(mask), ribm1|ribm2) << STUFF;\n-      ASSERT_EQ((T)~reverse_bits_in_bytes((T)~mask), ribm1|ribm2) << STUFF;\n-    }\n-  }\n-}\n-\n-TEST_VM(opto, moveBits) {\n-  test_moveBits<int64_t>();\n-  test_moveBits<uint64_t>();\n-  test_moveBits<int32_t>();\n-  test_moveBits<uint32_t>();\n-  test_moveBits<int16_t>();\n-  test_moveBits<uint16_t>();\n-  test_moveBits<int8_t>();\n-  test_moveBits<uint8_t>();\n-}\n-\n-\/\/ Here is some object code to look at if we want to do a manual\n-\/\/ study.  One could find the build file named test_moveBits.o.cmdline\n-\/\/ and hand-edit the command line to produce assembly code in\n-\/\/ test_moveBits.s.\n-\/\/\n-\/\/ Or, given the two empty \"fence functions\", one could do a\n-\/\/ quick scan like this:\n-\/\/\n-\/\/ $ objdump -D $(find build\/*release -name test_moveBits.o) \\\n-\/\/   | sed -n '\/start_code_quality\/,$p;\/end_code_quality\/q' \\\n-\/\/   | egrep -B10 bswap  # or grep -B20 cfi_endproc\n-\n-void start_code_quality_moveBits() { }\n-\n-int32_t code_quality_reverse_bits_32(int32_t x) {\n-  return reverse_bits(x);\n-}\n-\n-int32_t code_quality_reverse_bytes_32(int32_t x) {\n-  return reverse_bytes(x);\n-}\n-\n-int32_t code_quality_reverse_bits_in_bytes_32(int32_t x) {\n-  return reverse_bits_in_bytes(x);\n-}\n-\n-int64_t code_quality_reverse_bits_64(int64_t x) {\n-  return reverse_bits(x);\n-}\n-\n-int64_t code_quality_reverse_bytes_64(int64_t x) {\n-  return reverse_bytes(x);\n-}\n-\n-int64_t code_quality_reverse_bits_in_bytes_64(int64_t x) {\n-  return reverse_bits_in_bytes(x);\n-}\n","filename":"test\/hotspot\/gtest\/opto\/test_moveBits.cpp","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"utilities\/byteswap.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"unittest.hpp\"\n+\n+template<typename T>\n+static inline void test_byteswap() {\n+  const int  NBIT = sizeof(T) * 8;\n+  const bool IS_U = (T)-1 > 0;\n+  const int XOR_REV_BITS = (NBIT - 1);\n+  const int XOR_REV_BITS_IN_BYTES = 7;  \/\/ only flip position in byte\n+  const int XOR_REV_BYTES = XOR_REV_BITS ^ XOR_REV_BITS_IN_BYTES;\n+  ASSERT_EQ(byteswap<T>((T)0), (T)0);\n+  ASSERT_EQ(byteswap<T>((T)-1), (T)-1);\n+  for (int i1 = 0; i1 < NBIT; i1++) {\n+    T mask1 = (T)1 << i1;\n+    T rbym1 = (T)1 << (i1 ^ XOR_REV_BYTES);\n+    for (int i2 = 0; i2 <= i1; i2++) {\n+      T mask2 = (T)1 << i2;\n+      T rbym2 = (T)1 << (i2 ^ XOR_REV_BYTES);\n+      T mask = mask1|mask2;\n+#define STUFF (IS_U?\"u\":\"s\") << NBIT << \"@\" << i1 << \",\" << i2\n+      ASSERT_EQ(byteswap<T>(mask), rbym1|rbym2) << STUFF;\n+      ASSERT_EQ((T)~byteswap<T>((T)~mask), rbym1|rbym2) << STUFF;\n+    }\n+  }\n+}\n+\n+TEST_VM(utilities, byteswap) {\n+  test_byteswap<int64_t>();\n+  test_byteswap<uint64_t>();\n+  test_byteswap<int32_t>();\n+  test_byteswap<uint32_t>();\n+  test_byteswap<int16_t>();\n+  test_byteswap<uint16_t>();\n+  test_byteswap<int8_t>();\n+  test_byteswap<uint8_t>();\n+}\n+\n+\/\/ Here is some object code to look at if we want to do a manual\n+\/\/ study.  One could find the build file named test_byteswap.o.cmdline\n+\/\/ and hand-edit the command line to produce assembly code in\n+\/\/ test_byteswap.s.\n+\/\/\n+\/\/ Or, given the two empty \"fence functions\", one could do a\n+\/\/ quick scan like this:\n+\/\/\n+\/\/ $ objdump -D $(find build\/*release -name test_byteswap.o) \\\n+\/\/   | sed -n '\/start_code_quality\/,$p;\/end_code_quality\/q' \\\n+\/\/   | egrep -B10 bswap  # or grep -B20 cfi_endproc\n+\n+void start_code_quality_byteswap() { }\n+\n+int32_t code_quality_reverse_bytes_32(int32_t x) {\n+  return byteswap(x);\n+}\n+\n+int64_t code_quality_reverse_bytes_64(int64_t x) {\n+  return byteswap(x);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_byteswap.cpp","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/reverse_bits.hpp\"\n+#include \"unittest.hpp\"\n+\n+template<typename T>\n+static inline void test_reverse_bits() {\n+  const int  NBIT = sizeof(T) * 8;\n+  const bool IS_U = (T)-1 > 0;\n+  const int XOR_REV_BITS = (NBIT - 1);\n+  ASSERT_EQ(reverse_bits((T)0), (T)0);\n+  ASSERT_EQ(reverse_bits((T)-1), (T)-1);\n+  for (int i1 = 0; i1 < NBIT; i1++) {\n+    T mask1 = (T)1 << i1;\n+    T revm1 = (T)1 << (i1 ^ XOR_REV_BITS);\n+    for (int i2 = 0; i2 <= i1; i2++) {\n+      T mask2 = (T)1 << i2;\n+      T revm2 = (T)1 << (i2 ^ XOR_REV_BITS);\n+      T mask = mask1|mask2;\n+#define STUFF (IS_U?\"u\":\"s\") << NBIT << \"@\" << i1 << \",\" << i2\n+      ASSERT_EQ(reverse_bits(mask), revm1|revm2) << STUFF;\n+      ASSERT_EQ((T)~reverse_bits((T)~mask), revm1|revm2) << STUFF;\n+    }\n+  }\n+}\n+\n+TEST_VM(utilities, reverse_bits) {\n+  test_reverse_bits<int64_t>();\n+  test_reverse_bits<uint64_t>();\n+  test_reverse_bits<int32_t>();\n+  test_reverse_bits<uint32_t>();\n+  test_reverse_bits<int16_t>();\n+  test_reverse_bits<uint16_t>();\n+  test_reverse_bits<int8_t>();\n+  test_reverse_bits<uint8_t>();\n+}\n+\n+\/\/ Here is some object code to look at if we want to do a manual\n+\/\/ study.  One could find the build file named test_reverse_bits.o.cmdline\n+\/\/ and hand-edit the command line to produce assembly code in\n+\/\/ test_reverse_bits.s.\n+\/\/\n+\/\/ Or, given the two empty \"fence functions\", one could do a\n+\/\/ quick scan like this:\n+\/\/\n+\/\/ $ objdump -D $(find build\/*release -name test_reverse_bits.o) \\\n+\/\/   | sed -n '\/start_code_quality\/,$p;\/end_code_quality\/q' \\\n+\/\/   | egrep -B10 bswap  # or grep -B20 cfi_endproc\n+\n+void start_code_quality_reverse_bits() { }\n+\n+int32_t code_quality_reverse_bits_32(int32_t x) {\n+  return reverse_bits(x);\n+}\n+\n+int64_t code_quality_reverse_bits_64(int64_t x) {\n+  return reverse_bits(x);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_reverse_bits.cpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}