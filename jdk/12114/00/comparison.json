{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -55,5 +56,9 @@\n-\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2   swap_u2(u2 x);                   \/\/ compiler-dependent implementation\n-  static inline u4   swap_u4(u4 x);                   \/\/ compiler-dependent implementation\n-  static inline u8   swap_u8(u8 x);\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n@@ -62,4 +67,0 @@\n-\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8[_base]\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/bytes_aarch64.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -179,4 +180,9 @@\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n@@ -185,4 +191,0 @@\n-\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/arm\/bytes_arm.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -40,5 +41,0 @@\n-  \/\/ Forward declarations of the compiler-dependent implementation\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n-\n@@ -154,5 +150,0 @@\n-  \/\/ Thus, a swap between native and Java ordering is always a no-op:\n-  static inline u2   swap_u2(u2 x)  { return x; }\n-  static inline u4   swap_u4(u4 x)  { return x; }\n-  static inline u8   swap_u8(u8 x)  { return x; }\n-\n@@ -267,1 +258,0 @@\n-};\n@@ -269,1 +259,10 @@\n-#include OS_CPU_HEADER(bytes)\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n+};\n","filename":"src\/hotspot\/cpu\/ppc\/bytes_ppc.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -37,4 +38,9 @@\n-  \/\/ Forward declarations of the compiler-dependent implementation\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n@@ -167,2 +173,0 @@\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/riscv\/bytes_riscv.hpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -53,2 +54,9 @@\n-  \/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8.\n-#include OS_CPU_HEADER(bytes)\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n","filename":"src\/hotspot\/cpu\/s390\/bytes_s390.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -33,6 +34,0 @@\n- private:\n-#ifndef AMD64\n-  \/\/ Helper function for swap_u8\n-  static inline u8   swap_u8_base(u4 x, u4 y);        \/\/ compiler-dependent implementation\n-#endif \/\/ AMD64\n-\n@@ -119,3 +114,9 @@\n-  static inline u2   swap_u2(u2 x);                   \/\/ compiler-dependent implementation\n-  static inline u4   swap_u4(u4 x);                   \/\/ compiler-dependent implementation\n-  static inline u8   swap_u8(u8 x);\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n+  static inline u2 swap_u2(u2 x) { return x; }\n+  static inline u4 swap_u4(u4 x) { return x; }\n+  static inline u8 swap_u8(u8 x) { return x; }\n+#endif\n@@ -124,3 +125,0 @@\n-\/\/ The following header contains the implementations of swap_u2, swap_u4, and swap_u8[_base]\n-#include OS_CPU_HEADER(bytes)\n-\n","filename":"src\/hotspot\/cpu\/x86\/bytes_x86.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/byteswap.hpp\"\n@@ -121,5 +122,0 @@\n-\n-  \/\/ Efficient swapping of byte ordering\n-  static inline u2 swap_u2(u2 x);\n-  static inline u4 swap_u4(u4 x);\n-  static inline u8 swap_u8(u8 x);\n@@ -147,0 +143,1 @@\n+#endif \/\/ VM_LITTLE_ENDIAN\n@@ -148,1 +145,5 @@\n-  \/\/ No byte-order reversal is needed\n+#ifdef VM_LITTLE_ENDIAN\n+  static inline u2 swap_u2(u2 x) { return byteswap<u2>(x); }\n+  static inline u4 swap_u4(u4 x) { return byteswap<u4>(x); }\n+  static inline u8 swap_u8(u8 x) { return byteswap<u8>(x); }\n+#else\n@@ -152,1 +153,1 @@\n-#endif \/\/ VM_LITTLE_ENDIAN\n+#endif\n@@ -155,8 +156,0 @@\n-#ifdef VM_LITTLE_ENDIAN\n-\/\/ The following header contains the implementations of swap_u2,\n-\/\/ swap_u4, and swap_u8\n-\n-#include OS_CPU_HEADER(bytes)\n-\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n","filename":"src\/hotspot\/cpu\/zero\/bytes_zero.hpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n-#define OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n-\n-#if defined(VM_LITTLE_ENDIAN)\n-\/\/ Aix is not little endian.\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n-#endif \/\/ OS_CPU_AIX_PPC_BYTES_AIX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/bytes_aix_ppc.hpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n-#define OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n-\n-#ifdef __APPLE__\n-#include <libkern\/OSByteOrder.h>\n-#endif\n-\n-#if defined(__APPLE__)\n-#  define bswap_16(x) OSSwapInt16(x)\n-#  define bswap_32(x) OSSwapInt32(x)\n-#  define bswap_64(x) OSSwapInt64(x)\n-#else\n-#  error \"Unimplemented\"\n-#endif\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_BSD_AARCH64_BYTES_BSD_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/bytes_bsd_aarch64.hpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n-#define OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n-\n-#ifdef __APPLE__\n-#include <libkern\/OSByteOrder.h>\n-#endif\n-\n-#if defined(AMD64)\n-#  if defined(__APPLE__)\n-#    define bswap_16(x) OSSwapInt16(x)\n-#    define bswap_32(x) OSSwapInt32(x)\n-#    define bswap_64(x) OSSwapInt64(x)\n-#  elif defined(__OpenBSD__)\n-#    define bswap_16(x) swap16(x)\n-#    define bswap_32(x) swap32(x)\n-#    define bswap_64(x) swap64(x)\n-#  elif defined(__NetBSD__)\n-#    define bswap_16(x) bswap16(x)\n-#    define bswap_32(x) bswap32(x)\n-#    define bswap_64(x) bswap64(x)\n-#  else\n-#    define bswap_16(x) __bswap16(x)\n-#    define bswap_32(x) __bswap32(x)\n-#    define bswap_64(x) __bswap64(x)\n-#  endif\n-#endif\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-#ifdef AMD64\n-  return bswap_16(x);\n-#else\n-  u2 ret;\n-  __asm__ __volatile__ (\n-    \"movw %0, %%ax;\"\n-    \"xchg %%al, %%ah;\"\n-    \"movw %%ax, %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"ax\", \"0\"       \/\/ clobbered registers\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-#ifdef AMD64\n-  return bswap_32(x);\n-#else\n-  u4 ret;\n-  __asm__ __volatile__ (\n-    \"bswap %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"0\"             \/\/ clobbered register\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-#ifdef AMD64\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-#else\n-\/\/ Helper function for swap_u8\n-inline u8   Bytes::swap_u8_base(u4 x, u4 y) {\n-  return (((u8)swap_u4(x))<<32) | swap_u4(y);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return swap_u8_base(*(u4*)&x, *(((u4*)&x)+1));\n-}\n-#endif \/\/ !AMD64\n-\n-#endif \/\/ OS_CPU_BSD_X86_BYTES_BSD_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/bytes_bsd_x86.hpp","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n-#define OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#ifdef __APPLE__\n-#  include <libkern\/OSByteOrder.h>\n-#else\n-#  include <sys\/endian.h>\n-#endif\n-\n-#if defined(__APPLE__)\n-#  define bswap_16(x)   OSSwapInt16(x)\n-#  define bswap_32(x)   OSSwapInt32(x)\n-#  define bswap_64(x)   OSSwapInt64(x)\n-#elif defined(__OpenBSD__)\n-#  define bswap_16(x)   swap16(x)\n-#  define bswap_32(x)   swap32(x)\n-#  define bswap_64(x)   swap64(x)\n-#elif defined(__NetBSD__)\n-#  define bswap_16(x)   bswap16(x)\n-#  define bswap_32(x)   bswap32(x)\n-#  define bswap_64(x)   bswap64(x)\n-#else\n-#  define bswap_16(x) __bswap16(x)\n-#  define bswap_32(x) __bswap32(x)\n-#  define bswap_64(x) __bswap64(x)\n-#endif\n-\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_BSD_ZERO_BYTES_BSD_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/bytes_bsd_zero.hpp","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n-#define OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_AARCH64_BYTES_LINUX_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/bytes_linux_aarch64.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n-#define OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  \/\/ TODO: ARM - optimize\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_ARM_BYTES_LINUX_ARM_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/bytes_linux_arm.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright 2014 Google Inc.  All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n-#define OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n-\n-#if defined(VM_LITTLE_ENDIAN)\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) { return bswap_16(x); }\n-inline u4 Bytes::swap_u4(u4 x) { return bswap_32(x); }\n-inline u8 Bytes::swap_u8(u8 x) { return bswap_64(x); }\n-#endif \/\/ VM_LITTLE_ENDIAN\n-\n-#endif \/\/ OS_CPU_LINUX_PPC_BYTES_LINUX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/bytes_linux_ppc.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n-#define OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_RISCV_BYTES_LINUX_RISCV_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/bytes_linux_riscv.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n-#define OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#include <byteswap.h>\n-\n-inline u2 swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_S390_BYTES_LINUX_S390_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/bytes_linux_s390.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n-#define OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n-\n-#include <byteswap.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-#ifdef AMD64\n-  return bswap_16(x);\n-#else\n-  u2 ret;\n-  __asm__ __volatile__ (\n-    \"movw %0, %%ax;\"\n-    \"xchg %%al, %%ah;\"\n-    \"movw %%ax, %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"ax\", \"0\"       \/\/ clobbered registers\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-#ifdef AMD64\n-  return bswap_32(x);\n-#else\n-  u4 ret;\n-  __asm__ __volatile__ (\n-    \"bswap %0\"\n-    :\"=r\" (ret)      \/\/ output : register 0 => ret\n-    :\"0\"  (x)        \/\/ input  : x => register 0\n-    :\"0\"             \/\/ clobbered register\n-  );\n-  return ret;\n-#endif \/\/ AMD64\n-}\n-\n-#ifdef AMD64\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-#else\n-\/\/ Helper function for swap_u8\n-inline u8   Bytes::swap_u8_base(u4 x, u4 y) {\n-  return (((u8)swap_u4(x))<<32) | swap_u4(y);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return swap_u8_base(*(u4*)&x, *(((u4*)&x)+1));\n-}\n-#endif \/\/ !AMD64\n-\n-#endif \/\/ OS_CPU_LINUX_X86_BYTES_LINUX_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/bytes_linux_x86.hpp","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n-#define OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-\n-#include <byteswap.h>\n-\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return bswap_16(x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return bswap_32(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return bswap_64(x);\n-}\n-\n-#endif \/\/ OS_CPU_LINUX_ZERO_BYTES_LINUX_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/bytes_linux_zero.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n-#define OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n-\n-#include <stdlib.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2   Bytes::swap_u2(u2 x) {\n-  return _byteswap_ushort(x);\n-}\n-\n-inline u4   Bytes::swap_u4(u4 x) {\n-  return _byteswap_ulong(x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return _byteswap_uint64(x);\n-}\n-\n-#pragma warning(default: 4035) \/\/ Enable warning 4035: no return value\n-\n-#endif \/\/ OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/bytes_windows_aarch64.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n-#define OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n-\n-#include <stdlib.h>\n-\n-\/\/ Efficient swapping of data bytes from Java byte\n-\/\/ ordering to native byte ordering and vice versa.\n-inline u2 Bytes::swap_u2(u2 x) {\n-  return (u2) _byteswap_ushort((unsigned short) x);\n-}\n-\n-inline u4 Bytes::swap_u4(u4 x) {\n-  return (u4) _byteswap_ulong((unsigned long) x);\n-}\n-\n-inline u8 Bytes::swap_u8(u8 x) {\n-  return (u8) _byteswap_uint64((unsigned __int64) x);\n-}\n-\n-#endif \/\/ OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/bytes_windows_x86.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,247 @@\n+\/*\n+ * Copyright (c) 2023, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_BYTESWAP_HPP\n+#define SHARE_UTILITIES_BYTESWAP_HPP\n+\n+\/\/ Byte swapping for 8-bit, 16-bit, 32-bit, and 64-bit integers.\n+\n+\/\/ byteswap<T>()\n+\/\/\n+\/\/ Reverses the bytes for the value of the integer type T. Partially compatible with std::byteswap\n+\/\/ introduced in C++23.\n+\n+#include \"metaprogramming\/enableIf.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <type_traits>\n+\n+template <typename T>\n+struct CanByteswapImpl final\n+    : public std::integral_constant<bool, (std::is_integral<T>::value && sizeof(T) <= 8)> {};\n+\n+template <typename T, size_t N = sizeof(T)>\n+struct ByteswapImpl;\n+\n+template <typename T, ENABLE_IF(CanByteswapImpl<T>::value)>\n+ALWAYSINLINE T byteswap(T x) {\n+  using U = std::make_unsigned_t<T>;\n+  STATIC_ASSERT(sizeof(T) == sizeof(U));\n+  return static_cast<T>(ByteswapImpl<U>{}(static_cast<U>(x)));\n+}\n+\n+\/*****************************************************************************\n+ * Implementation\n+ *****************************************************************************\/\n+\n+\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n+template <typename T>\n+struct ByteswapImpl<T, 1> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 1);\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return x;\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * Fallback\n+ *****************************************************************************\/\n+\n+template <typename T, size_t N = sizeof(T)>\n+struct ByteswapFallbackImpl;\n+\n+\/\/ We support 8-bit integer types to be compatible with C++23's std::byteswap.\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 1> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 1);\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return x;\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 2> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 2);\n+\n+  ALWAYSINLINE uint16_t operator()(uint16_t x) const {\n+    return (((x & UINT16_C(0x00ff)) << 8) | ((x & UINT16_C(0xff00)) >> 8));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 4> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 4);\n+\n+  ALWAYSINLINE uint32_t operator()(uint32_t x) const {\n+    return (((x & UINT32_C(0x000000ff)) << 24) | ((x & UINT32_C(0x0000ff00)) << 8) |\n+            ((x & UINT32_C(0x00ff0000)) >> 8) | ((x & UINT32_C(0xff000000)) >> 24));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapFallbackImpl<T, 8> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == 8);\n+\n+  ALWAYSINLINE uint64_t operator()(uint64_t x) const {\n+    return (((x & UINT64_C(0x00000000000000ff)) << 56) | ((x & UINT64_C(0x000000000000ff00)) << 40) |\n+            ((x & UINT64_C(0x0000000000ff0000)) << 24) | ((x & UINT64_C(0x00000000ff000000)) << 8) |\n+            ((x & UINT64_C(0x000000ff00000000)) >> 8) | ((x & UINT64_C(0x0000ff0000000000)) >> 24) |\n+            ((x & UINT64_C(0x00ff000000000000)) >> 40) | ((x & UINT64_C(0xff00000000000000)) >> 56));\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * GCC and compatible (including Clang)\n+ *****************************************************************************\/\n+#if defined(TARGET_COMPILER_gcc)\n+\n+#if defined(__clang__)\n+\n+\/\/ Unlike GCC, Clang is willing to inline the generic implementation of __builtin_bswap when\n+\/\/ architecture support is unavailable in -O2. This ensures we avoid the function call to libgcc.\n+\/\/ Clang is able to recognize the fallback implementation as byteswapping, but not on every\n+\/\/ architecture unlike GCC. This suggests the optimization pass for GCC that recognizes byteswapping\n+\/\/ is architecture agnostic, while for Clang it is not.\n+\n+template <typename T>\n+struct ByteswapImpl<T, 2> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == sizeof(uint16_t));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(__builtin_bswap16(static_cast<uint16_t>(x)));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 4> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == sizeof(uint32_t));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(__builtin_bswap32(static_cast<uint32_t>(x)));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 8> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(T) == sizeof(uint64_t));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(__builtin_bswap64(static_cast<uint64_t>(x)));\n+  }\n+};\n+\n+#else\n+\n+\/\/ We do not use __builtin_bswap and friends for GCC. Unfortunately on architectures that do not\n+\/\/ have a byteswap instruction (i.e. RISC-V), GCC emits a function call to libgcc regardless of\n+\/\/ optimization options, even when the generic implementation is, for example, less than 20\n+\/\/ instructions. GCC is however able to recognize the fallback as byteswapping regardless of\n+\/\/ architecture and appropriately replaces the code in -O2 with the appropriate\n+\/\/ architecture-specific byteswap instruction, if available. If it is not available, GCC emits the\n+\/\/ exact same implementation that underpins its __builtin_bswap in libgcc as there is really only\n+\/\/ one way to implement it, as we have in fallback.\n+\n+template <typename T, size_t N>\n+struct ByteswapImpl final : public ByteswapFallbackImpl<T, N> {};\n+\n+#endif\n+\n+\/*****************************************************************************\n+ * Microsoft Visual Studio\n+ *****************************************************************************\/\n+#elif defined(TARGET_COMPILER_visCPP)\n+\n+#include <stdlib.h>\n+\n+#pragma intrinsic(_byteswap_ushort)\n+#pragma intrinsic(_byteswap_ulong)\n+#pragma intrinsic(_byteswap_uint64)\n+\n+template <typename T>\n+struct ByteswapImpl<T, 2> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(unsigned short) == sizeof(2));\n+  STATIC_ASSERT(sizeof(T) == sizeof(unsigned short));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(_byteswap_ushort(static_cast<unsigned short>(x)));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 4> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(unsigned long) == sizeof(4));\n+  STATIC_ASSERT(sizeof(T) == sizeof(unsigned long));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(_byteswap_ulong(static_cast<unsigned long>(x)));\n+  }\n+};\n+\n+template <typename T>\n+struct ByteswapImpl<T, 8> final {\n+  STATIC_ASSERT(CanByteswapImpl<T>::value);\n+  STATIC_ASSERT(sizeof(unsigned __int64) == sizeof(4));\n+  STATIC_ASSERT(sizeof(T) == sizeof(unsigned __int64));\n+\n+  ALWAYSINLINE T operator()(T x) const {\n+    return static_cast<T>(_byteswap_uint64(static_cast<unsigned __int64>(x)));\n+  }\n+};\n+\n+\/*****************************************************************************\n+ * IBM XL C\/C++\n+ *****************************************************************************\/\n+#elif defined(TARGET_COMPILER_xlc)\n+\n+\/\/ To our knowledge XL C\/C++ does not have a compiler intrinsic for byteswapping.\n+\n+template <typename T, size_t N>\n+struct ByteswapImpl final : public ByteswapFallbackImpl<T, N> {};\n+\n+\/*****************************************************************************\n+ * Unknown toolchain\n+ *****************************************************************************\/\n+#else\n+\n+#error Unknown toolchain.\n+\n+#endif\n+\n+#endif \/\/ SHARE_UTILITIES_BYTESWAP_HPP\n","filename":"src\/hotspot\/share\/utilities\/byteswap.hpp","additions":247,"deletions":0,"binary":false,"changes":247,"status":"added"}]}