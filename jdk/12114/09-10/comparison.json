{"files":[{"patch":"@@ -31,33 +31,28 @@\n-class MoveBitsTest final {\n- public:\n-  template<typename T>\n-  static inline void test_moveBits() {\n-    using ReverseBitsImpl<T>::reverse_bytes;\n-\n-    const int  NBIT = sizeof(T) * 8;\n-    const bool IS_U = (T)-1 > 0;\n-    const int XOR_REV_BITS = (NBIT - 1);\n-    const int XOR_REV_BITS_IN_BYTES = 7;  \/\/ only flip position in byte\n-    const int XOR_REV_BYTES = XOR_REV_BITS ^ XOR_REV_BITS_IN_BYTES;\n-    printf(\"testing %sint%d_t...\\n\", IS_U ? \"u\" : \"\", NBIT);\n-    ASSERT_EQ(reverse_bits((T)0), (T)0);\n-    ASSERT_EQ(reverse_bits((T)-1), (T)-1);\n-    ASSERT_EQ(byteswap<T>((T)0), (T)0);\n-    ASSERT_EQ(byteswap<T>((T)-1), (T)-1);\n-    for (int i1 = 0; i1 < NBIT; i1++) {\n-      T mask1 = (T)1 << i1;\n-      T revm1 = (T)1 << (i1 ^ XOR_REV_BITS);\n-      T rbym1 = (T)1 << (i1 ^ XOR_REV_BYTES);\n-      T ribm1 = (T)1 << (i1 ^ XOR_REV_BITS_IN_BYTES);\n-      for (int i2 = 0; i2 <= i1; i2++) {\n-        T mask2 = (T)1 << i2;\n-        T revm2 = (T)1 << (i2 ^ XOR_REV_BITS);\n-        T rbym2 = (T)1 << (i2 ^ XOR_REV_BYTES);\n-        T ribm2 = (T)1 << (i2 ^ XOR_REV_BITS_IN_BYTES);\n-        T mask = mask1|mask2;\n-  #define STUFF (IS_U?\"u\":\"s\") << NBIT << \"@\" << i1 << \",\" << i2\n-        ASSERT_EQ(reverse_bits(mask), revm1|revm2) << STUFF;\n-        ASSERT_EQ((T)~reverse_bits((T)~mask), revm1|revm2) << STUFF;\n-        ASSERT_EQ(byteswap<T>(mask), rbym1|rbym2) << STUFF;\n-        ASSERT_EQ((T)~byteswap<T>((T)~mask), rbym1|rbym2) << STUFF;\n-      }\n+template<typename T>\n+static inline void test_moveBits() {\n+  const int  NBIT = sizeof(T) * 8;\n+  const bool IS_U = (T)-1 > 0;\n+  const int XOR_REV_BITS = (NBIT - 1);\n+  const int XOR_REV_BITS_IN_BYTES = 7;  \/\/ only flip position in byte\n+  const int XOR_REV_BYTES = XOR_REV_BITS ^ XOR_REV_BITS_IN_BYTES;\n+  printf(\"testing %sint%d_t...\\n\", IS_U ? \"u\" : \"\", NBIT);\n+  ASSERT_EQ(reverse_bits((T)0), (T)0);\n+  ASSERT_EQ(reverse_bits((T)-1), (T)-1);\n+  ASSERT_EQ(byteswap<T>((T)0), (T)0);\n+  ASSERT_EQ(byteswap<T>((T)-1), (T)-1);\n+  for (int i1 = 0; i1 < NBIT; i1++) {\n+    T mask1 = (T)1 << i1;\n+    T revm1 = (T)1 << (i1 ^ XOR_REV_BITS);\n+    T rbym1 = (T)1 << (i1 ^ XOR_REV_BYTES);\n+    T ribm1 = (T)1 << (i1 ^ XOR_REV_BITS_IN_BYTES);\n+    for (int i2 = 0; i2 <= i1; i2++) {\n+      T mask2 = (T)1 << i2;\n+      T revm2 = (T)1 << (i2 ^ XOR_REV_BITS);\n+      T rbym2 = (T)1 << (i2 ^ XOR_REV_BYTES);\n+      T ribm2 = (T)1 << (i2 ^ XOR_REV_BITS_IN_BYTES);\n+      T mask = mask1|mask2;\n+#define STUFF (IS_U?\"u\":\"s\") << NBIT << \"@\" << i1 << \",\" << i2\n+      ASSERT_EQ(reverse_bits(mask), revm1|revm2) << STUFF;\n+      ASSERT_EQ((T)~reverse_bits((T)~mask), revm1|revm2) << STUFF;\n+      ASSERT_EQ(byteswap<T>(mask), rbym1|rbym2) << STUFF;\n+      ASSERT_EQ((T)~byteswap<T>((T)~mask), rbym1|rbym2) << STUFF;\n@@ -66,1 +61,1 @@\n-};\n+}\n","filename":"test\/hotspot\/gtest\/opto\/test_moveBits.cpp","additions":29,"deletions":34,"binary":false,"changes":63,"status":"modified"}]}