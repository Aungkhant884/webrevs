{"files":[{"patch":"@@ -0,0 +1,30 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+include LauncherCommon.gmk\n+\n+$(eval $(call SetupBuildLauncher, jwebserver, \\\n+    MAIN_CLASS := sun.net.httpserver.simpleserver.JWebServer, \\\n+))\n","filename":"make\/modules\/jdk.httpserver\/Launcher.gmk","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -107,1 +107,1 @@\n- * <h2>Main entry point<\/h2>\n+ * <h2>jwebserver Tool<\/h2>\n@@ -109,4 +109,2 @@\n- * <p>A <a id=\"server-impl\">simple HTTP file server implementation<\/a> is\n- * provided via the\n- * <a href=\"{@docRoot}\/jdk.httpserver\/module-summary.html#entry-point\">main entry point<\/a>\n- * of the {@code jdk.httpserver} module.\n+ * <p>A simple HTTP file server implementation is provided via the\n+ * {@code jwebserver} tool.\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/SimpleFileServer.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,18 @@\n+ * The main components are:\n+ * <ul>\n+ * <li>the {@link com.sun.net.httpserver.HttpExchange} class that describes a\n+ * request and response pair,<\/li>\n+ * <li>the {@link com.sun.net.httpserver.HttpHandler} interface to handle\n+ * incoming requests, plus the {@link com.sun.net.httpserver.HttpHandlers} class\n+ * that provides useful handler implementations,<\/li>\n+ * <li>the {@link com.sun.net.httpserver.HttpContext} class that maps a URI path\n+ * to a {@code HttpHandler},<\/li>\n+ * <li>the {@link com.sun.net.httpserver.HttpServer} class to listen for\n+ * connections and dispatch requests to handlers,<\/li>\n+ * <li>the {@link com.sun.net.httpserver.Filter} class that allows pre- and post-\n+ * processing of requests.<\/li><\/ul>\n+ * <p>\n+ * The {@link com.sun.net.httpserver.SimpleFileServer} class offers a simple\n+ * HTTP-only file server (intended for testing, development and debugging purposes\n+ * only). A default implementation is provided via the {@code jwebserver} tool.\n+   <p>\n@@ -123,7 +141,0 @@\n-   <p>\n-   The {@link com.sun.net.httpserver.SimpleFileServer} class offers a simple\n-   HTTP file server (intended for testing, development and debugging purposes\n-   only). A default implementation is provided via the\n-   <a href=\"{@docRoot}\/jdk.httpserver\/module-summary.html#entry-point\">main entry point<\/a>\n-   of the {@code jdk.httpserver} module.\n-\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/package-info.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,35 +27,15 @@\n- * Defines the JDK-specific HTTP server API.\n- * <p>\n- * A basic high-level API for building embedded servers. Both HTTP and\n- * HTTPS are supported.\n- * <p>\n- * The main components are:\n- * <ul>\n- * <li>the {@link com.sun.net.httpserver.HttpExchange} class that describes a\n- * request and response pair,<\/li>\n- * <li>the {@link com.sun.net.httpserver.HttpHandler} interface to handle\n- * incoming requests, plus the {@link com.sun.net.httpserver.HttpHandlers} class\n- * that provides useful handler implementations,<\/li>\n- * <li>the {@link com.sun.net.httpserver.HttpContext} class that maps a URI path\n- * to a {@code HttpHandler},<\/li>\n- * <li>the {@link com.sun.net.httpserver.HttpServer} class to listen for\n- * connections and dispatch requests to handlers,<\/li>\n- * <li>the {@link com.sun.net.httpserver.Filter} class that allows pre- and post-\n- * processing of requests.<\/li><\/ul>\n- * <p>\n- * The {@link com.sun.net.httpserver.SimpleFileServer} class offers a simple\n- * HTTP file server (intended for testing, development and debugging purposes\n- * only). A default implementation is provided via the <a id=\"entry-point\"><\/a>\n- * main entry point of the {@code jdk.httpserver} module, which can be used on\n- * the command line as such:\n- * <pre>{@code\n- *    Usage: java -m jdk.httpserver [-b bind address] [-p port] [-d directory]\n- *                                  [-o none|info|verbose] [-h to show options]\n- *    Options:\n- *    -b, --bind-address    - Address to bind to. Default: 127.0.0.1 or ::1 (loopback).\n- *                            For all interfaces use \"-b 0.0.0.0\" or \"-b ::\".\n- *    -d, --directory       - Directory to serve. Default: current directory.\n- *    -o, --output          - Output format. none|info|verbose. Default: info.\n- *    -p, --port            - Port to listen on. Default: 8000.\n- *    -h, -?, --help        - Print this help message.\n- * }<\/pre>\n+ * Defines the JDK-specific HTTP server API, and provides the jwebserver tool\n+ * for running a minimal HTTP server.\n+ *\n+ * <p>The {@link com.sun.net.httpserver} package defines a high-level API for\n+ * building servers that support HTTP and HTTPS. The SimpleFileServer class\n+ * implements a simple HTTP-only file server intended for testing, development\n+ * and debugging purposes. A default implementation is provided via the\n+ * {@code jwebserver} tool and the main entry point of the module, which can\n+ * also be invoked with {@code java -m jdk.httpserver}.\n+ *\n+ * <p>The {@link com.sun.net.httpserver.spi} package specifies a Service Provider\n+ * Interface (SPI) for locating HTTP server implementations based on the\n+ * {@code com.sun.net.httpserver} API.\n+ *\n+ * @toolGuide jwebserver\n","filename":"src\/jdk.httpserver\/share\/classes\/module-info.java","additions":15,"deletions":35,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.net.httpserver.simpleserver;\n+\n+import java.io.PrintWriter;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+\/**\n+ * Programmatic entry point to start the jwebserver tool.\n+ *\n+ * <p><b> This is NOT part of any supported API.\n+ * If you write code that depends on this, you do so at your own risk.\n+ * This code and its internal interface are subject to change or deletion\n+ * without notice.<\/b>\n+ *\/\n+public class JWebServer {\n+\n+    \/**\n+     * This constructor should never be called.\n+     *\/\n+    private JWebServer() { throw new AssertionError(); }\n+\n+    \/**\n+     * The main entry point.\n+     *\n+     * <p> The command line arguments are parsed and the server is started. If\n+     * started successfully, the server will run on a new non-daemon thread,\n+     * and this method will return. Otherwise, if the server is not started\n+     * successfully, e.g. an error is encountered while parsing the arguments\n+     * or an I\/O error occurs, the server is not started and this method invokes\n+     * System::exit with an appropriate exit code.\n+     *\n+     * @param args the command-line options\n+     * @throws NullPointerException if {@code args} is {@code null}, or if there\n+     *         are any {@code null} values in the {@code args} array\n+     *\/\n+    public static void main(String... args) {\n+        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true, UTF_8), \"jwebserver\", args);\n+        if (ec != 0) {\n+            System.exit(ec);\n+        }  \/\/ otherwise the server has been started successfully and runs in\n+           \/\/ another non-daemon thread.\n+    }\n+}\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/JWebServer.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n- * Programmatic entry point to start the simpleserver tool.\n+ * Programmatic entry point to start \"java -m jdk.httpserver\".\n@@ -59,2 +59,2 @@\n-        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true, UTF_8), args);\n-        if (ec != 0)\n+        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true, UTF_8), \"java\", args);\n+        if (ec != 0) {\n@@ -62,2 +62,2 @@\n-        \/\/ otherwise the server has been started successfully and runs in\n-        \/\/ another non-daemon thread.\n+        }  \/\/ otherwise the server has been started successfully and runs in\n+           \/\/ another non-daemon thread.\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/Main.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+     * @param  launcher the launcher the server is started from\n@@ -78,1 +79,1 @@\n-    static int start(PrintWriter writer, String[] args) {\n+    static int start(PrintWriter writer, String launcher, String[] args) {\n@@ -99,1 +100,5 @@\n-                        out.showHelp();\n+                        out.showHelp(launcher);\n+                        return Startup.OK.statusCode;\n+                    }\n+                    case \"-version\", \"--version\" -> {\n+                        out.showVersion(launcher);\n@@ -118,1 +123,1 @@\n-            out.showUsage();\n+            out.showUsage(launcher);\n@@ -172,2 +177,6 @@\n-        void showUsage() {\n-            writer.println(ResourceBundleHelper.getMessage(\"usage\"));\n+        void showUsage(String launcher) {\n+            writer.println(ResourceBundleHelper.getMessage(\"usage.\" + launcher));\n+        }\n+\n+        void showVersion(String launcher) {\n+            writer.println(ResourceBundleHelper.getMessage(\"version\", launcher, System.getProperty(\"java.version\")));\n@@ -176,2 +185,2 @@\n-        void showHelp() {\n-            writer.println(ResourceBundleHelper.getMessage(\"usage\"));\n+        void showHelp(String launcher) {\n+            writer.println(ResourceBundleHelper.getMessage(\"usage.\" + launcher));\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-usage=\\\n+usage.java=\\\n@@ -28,1 +28,10 @@\n-\\                              [-o none|info|verbose] [-h to show options]\n+\\                              [-o none|info|verbose] [-h to show options]\\n\\\n+\\                              [-version to show version information]\n+\n+usage.jwebserver=\\\n+Usage: jwebserver [-b bind address] [-p port] [-d directory]\\n\\\n+\\                  [-o none|info|verbose] [-h to show options]\\n\\\n+\\                  [-version to show version information]\n+\n+version=\\\n+{0} {1}\n@@ -37,1 +46,2 @@\n--h, -?, --help        - Print this help message.\\n\\\n+-h, -?, --help        - Prints this help message and exits.\\n\\\n+-version, --version   - Prints version information and exits.\\n\\\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/resources\/simpleserver.properties","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+.\\\" Automatically generated by Pandoc 2.3.1\n+.\\\"\n+.TH \"JWEBSERVER\" \"1\" \"2021\" \"JDK 18\\-internal\" \"JDK Commands\"\n+.hy\n+.SH NAME\n+.PP\n+jwebserver \\- launch the Java Simple Web Server\n+.SH SYNOPSIS\n+.PP\n+\\f[CB]jwebserver\\f[R] [\\f[I]options\\f[R]]\n+.TP\n+.B \\f[I]options\\f[R]\n+Command\\-line options.\n+For a detailed description of the options, see \\f[B]Options\\f[R].\n+.RS\n+.RE\n+.SH DESCRIPTION\n+.PP\n+The \\f[CB]jwebserver\\f[R] tool provides a minimal HTTP server, designed to\n+be used for prototyping, testing, and debugging.\n+It serves a single directory hierarchy, and only serves static files.\n+Only HTTP\/1.1 is supported; HTTP\/2 and HTTPS are not supported.\n+.PP\n+Only idempotent HEAD and GET requests are served.\n+Any other requests receive a \\f[CB]501\\ \\-\\ Not\\ Implemented\\f[R] or a\n+\\f[CB]405\\ \\-\\ Not\\ Allowed\\f[R] response.\n+GET requests are mapped to the directory being served, as follows:\n+.IP \\[bu] 2\n+If the requested resource is a file, its content is served.\n+.IP \\[bu] 2\n+If the requested resource is a directory that contains an index file,\n+the content of the index file is served.\n+.IP \\[bu] 2\n+Otherwise, the names of all files and subdirectories of the directory\n+are listed.\n+Symbolic links and hidden files are not listed or served.\n+.PP\n+MIME types are configured automatically, using the built\\-in table.\n+For example, \\f[CB]\\&.html\\f[R] files are served as \\f[CB]text\/html\\f[R] and\n+\\f[CB]\\&.java\\f[R] files are served as \\f[CB]text\/plain\\f[R].\n+.PP\n+\\f[CB]jwebserver\\f[R] is located in the jdk.httpserver module, and can\n+alternatively be started with \\f[CB]java\\ \\-m\\ jdk.httpserver\\f[R].\n+It is based on the web server implementation in the\n+\\f[CB]com.sun.net.httpserver\\f[R] package.\n+The \\f[CB]com.sun.net.httpserver.SimpleFileServer\\f[R] class provides a\n+programmatic way to retrieve the server and its components for reuse and\n+extension.\n+.SH USAGE\n+.IP\n+.nf\n+\\f[CB]\n+jwebserver\\ [\\-b\\ bind\\ address]\\ [\\-p\\ port]\\ [\\-d\\ directory]\n+\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ [\\-o\\ none|info|verbose]\\ [\\-h\\ to\\ show\\ options]\n+\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ [\\-version\\ to\\ show\\ version\\ information]\n+\\f[R]\n+.fi\n+.SH OPTIONS\n+.TP\n+.B \\f[CB]\\-h\\f[R] or \\f[CB]\\-?\\f[R] or \\f[CB]\\-\\-help\\f[R]\n+Prints the help message and exits.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-b\\f[R] \\f[I]addr\\f[R] or \\f[CB]\\-\\-bind\\-address\\f[R] \\f[I]addr\\f[R]\n+Specifies the address to bind to.\n+Default: 127.0.0.1 or ::1 (loopback).\n+For all interfaces use \\f[CB]\\-b\\ 0.0.0.0\\f[R] or \\f[CB]\\-b\\ ::\\f[R].\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-d\\f[R] \\f[I]dir\\f[R] or \\f[CB]\\-\\-directory\\f[R] \\f[I]dir\\f[R]\n+Specifies the directory to serve.\n+Default: current directory.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-o\\f[R] \\f[I]level\\f[R] or \\f[CB]\\-\\-output\\f[R] \\f[I]level\\f[R]\n+Specifies the output format.\n+\\f[CB]none\\f[R] | \\f[CB]info\\f[R] | \\f[CB]verbose\\f[R].\n+Default: \\f[CB]info\\f[R].\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-p\\f[R] \\f[I]port\\f[R] or \\f[CB]\\-\\-port\\f[R] \\f[I]port\\f[R]\n+Specifies the port to listen on.\n+Default: 8000.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-version\\f[R] or \\f[CB]\\-\\-version\\f[R]\n+Prints the version information and exits.\n+.RS\n+.RE\n+.PP\n+To stop the server, press \\f[CB]Ctrl\\ +\\ C\\f[R].\n+.SH STARTING THE SERVER\n+.PP\n+The following command starts the Simple Web Server:\n+.IP\n+.nf\n+\\f[CB]\n+$\\ jwebserver\n+\\f[R]\n+.fi\n+.PP\n+If startup is successful, the server prints a message to\n+\\f[CB]System.out\\f[R] listing the local address and the absolute path of\n+the directory being served.\n+For example:\n+.IP\n+.nf\n+\\f[CB]\n+$\\ jwebserver\n+Binding\\ to\\ loopback\\ by\\ default.\\ For\\ all\\ interfaces\\ use\\ \"\\-b\\ 0.0.0.0\"\\ or\\ \"\\-b\\ ::\".\n+Serving\\ \/cwd\\ and\\ subdirectories\\ on\\ 127.0.0.1\\ port\\ 8000\n+URL\\ http:\/\/127.0.0.1:8000\/\n+\\f[R]\n+.fi\n+.SH CONFIGURATION\n+.PP\n+By default, the server runs in the foreground and binds to the loopback\n+address and port 8000.\n+This can be changed with the \\f[CB]\\-b\\f[R] and \\f[CB]\\-p\\f[R] options.\n+.PD 0\n+.P\n+.PD\n+For example, to bind the Simple Web Server to all interfaces, use:\n+.IP\n+.nf\n+\\f[CB]\n+$\\ jwebserver\\ \\-b\\ 0.0.0.0\n+Serving\\ \/cwd\\ and\\ subdirectories\\ on\\ 0.0.0.0\\ (all\\ interfaces)\\ port\\ 8000\n+URL\\ http:\/\/123.456.7.891:8000\/\n+\\f[R]\n+.fi\n+.PP\n+Note that this makes the web server accessible to all hosts on the\n+network.\n+\\f[I]Do not do this unless you are sure the server cannot leak any\n+sensitive information.\\f[R]\n+.PP\n+As another example, use the following command to run on port 9000:\n+.IP\n+.nf\n+\\f[CB]\n+$\\ jwebserver\\ \\-p\\ 9000\n+\\f[R]\n+.fi\n+.PP\n+By default, the files of the current directory are served.\n+A different directory can be specified with the \\f[CB]\\-d\\f[R] option.\n+.PP\n+By default, every request is logged on the console.\n+The output looks like this:\n+.IP\n+.nf\n+\\f[CB]\n+127.0.0.1\\ \\-\\ \\-\\ [10\/Feb\/2021:14:34:11\\ +0000]\\ \"GET\\ \/some\/subdirectory\/\\ HTTP\/1.1\"\\ 200\\ \\-\n+\\f[R]\n+.fi\n+.PP\n+Logging output can be changed with the \\f[CB]\\-o\\f[R] option.\n+The default setting is \\f[CB]info\\f[R].\n+The \\f[CB]verbose\\f[R] setting additionally includes the request and\n+response headers as well as the absolute path of the requested resource.\n+.SH STOPPING THE SERVER\n+.PP\n+Once started successfully, the server runs until it is stopped.\n+On Unix platforms, the server can be stopped by sending it a\n+\\f[CB]SIGINT\\f[R] signal (\\f[CB]Ctrl+C\\f[R] in a terminal window).\n+.SH HELP OPTION\n+.PP\n+The \\f[CB]\\-h\\f[R] option displays a help message describing the usage and\n+the options of the \\f[CB]jwebserver\\f[R].\n","filename":"src\/jdk.httpserver\/share\/man\/jwebserver.1","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Negative tests for simpleserver command-line tool\n+ * @summary Negative tests for java -m jdk.httpserver command\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLineNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Tests the command-line tool with port not specified\n+ * @summary Tests the java -m jdk.httpserver command with port not specified\n@@ -121,1 +121,2 @@\n-            -h, -?, --help        - Print this help message.\n+            -h, -?, --help        - Prints this help message and exits.\n+            -version, --version   - Prints version information and exits.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePortNotSpecifiedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Positive tests for simpleserver command-line tool\n+ * @summary Positive tests for java -m jdk.httpserver command\n@@ -49,0 +49,1 @@\n+    static final String JAVA_VERSION = System.getProperty(\"java.version\");\n@@ -109,1 +110,2 @@\n-                                          [-o none|info|verbose] [-h to show options]\"\"\";\n+                                          [-o none|info|verbose] [-h to show options]\n+                                          [-version to show version information]\"\"\";\n@@ -118,1 +120,2 @@\n-            -h, -?, --help        - Print this help message.\n+            -h, -?, --help        - Prints this help message and exits.\n+            -version, --version   - Prints version information and exits.\n@@ -132,0 +135,12 @@\n+    @DataProvider\n+    public Object[][] versionOptions() { return new Object[][] {{\"-version\"}, {\"--version\"}}; }\n+\n+    @Test(dataProvider = \"versionOptions\")\n+    public void testVersion(String opt) throws Throwable {\n+        out.println(\"\\n--- testVersion, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(WaitForLine.VERSION_STARTUP_LINE,\n+                false,  \/\/ do not explicitly destroy the process\n+                JAVA, \"-m\", \"jdk.httpserver\", opt)\n+                .shouldHaveExitValue(0);\n+    }\n+\n@@ -210,0 +225,1 @@\n+    static final String VERSION_STARTUP_LINE_STRING = \"java \" + JAVA_VERSION;\n@@ -214,1 +230,2 @@\n-        HELP_STARTUP_LINE (OPTIONS_TEXT.lines().reduce((first, second) -> second).orElseThrow());\n+        HELP_STARTUP_LINE (OPTIONS_TEXT.lines().reduce((first, second) -> second).orElseThrow()),\n+        VERSION_STARTUP_LINE (VERSION_STARTUP_LINE_STRING);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Negative tests for simpleserver command-line tool\n+ * @summary Negative tests for the jwebserver command-line tool\n@@ -51,1 +51,1 @@\n-    static final String JAVA = getJava(JAVA_HOME);\n+    static final String JWEBSERVER = getJwebserver(JAVA_HOME);\n@@ -77,1 +77,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt)\n+        simpleserver(JWEBSERVER, opt)\n@@ -100,1 +100,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, arg, arg)\n+        simpleserver(JWEBSERVER, opt, arg, arg)\n@@ -127,1 +127,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt)\n+        simpleserver(JWEBSERVER, opt)\n@@ -151,1 +151,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, val)\n+        simpleserver(JWEBSERVER, opt, val)\n@@ -162,1 +162,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"65536\")  \/\/ range 0 to 65535\n+        simpleserver(JWEBSERVER, opt, \"65536\")  \/\/ range 0 to 65535\n@@ -175,1 +175,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+        simpleserver(JWEBSERVER, opt, root.toString())\n@@ -185,1 +185,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, file)\n+        simpleserver(JWEBSERVER, opt, file)\n@@ -195,1 +195,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+        simpleserver(JWEBSERVER, opt, root.toString())\n@@ -212,1 +212,1 @@\n-            simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+            simpleserver(JWEBSERVER, opt, root.toString())\n@@ -229,1 +229,1 @@\n-    static String getJava(Path image) {\n+    static String getJwebserver(Path image) {\n@@ -231,4 +231,4 @@\n-        Path java = image.resolve(\"bin\").resolve(isWindows ? \"java.exe\" : \"java\");\n-        if (Files.notExists(java))\n-            throw new RuntimeException(java + \" not found\");\n-        return java.toAbsolutePath().toString();\n+        Path jwebserver = image.resolve(\"bin\").resolve(isWindows ? \"jwebserver.exe\" : \"jwebserver\");\n+        if (Files.notExists(jwebserver))\n+            throw new RuntimeException(jwebserver + \" not found\");\n+        return jwebserver.toAbsolutePath().toString();\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLineNegativeTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"previous_filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLineNegativeTest.java","status":"copied"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Tests the command-line tool with port not specified\n+ * @summary Tests the jwebserver tool with port not specified\n@@ -50,1 +50,1 @@\n-    static final String JAVA = getJava(JAVA_HOME);\n+    static final String JWEBSERVER = getJwebserver(JAVA_HOME);\n@@ -87,1 +87,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\")\n+        simpleserver(JWEBSERVER)\n@@ -103,1 +103,1 @@\n-    static String getJava(Path image) {\n+    static String getJwebserver(Path image) {\n@@ -105,4 +105,4 @@\n-        Path java = image.resolve(\"bin\").resolve(isWindows ? \"java.exe\" : \"java\");\n-        if (Files.notExists(java))\n-            throw new RuntimeException(java + \" not found\");\n-        return java.toAbsolutePath().toString();\n+        Path jwebserver = image.resolve(\"bin\").resolve(isWindows ? \"jwebserver.exe\" : \"jwebserver\");\n+        if (Files.notExists(jwebserver))\n+            throw new RuntimeException(jwebserver + \" not found\");\n+        return jwebserver.toAbsolutePath().toString();\n@@ -121,1 +121,2 @@\n-            -h, -?, --help        - Print this help message.\n+            -h, -?, --help        - Prints this help message and exits.\n+            -version, --version   - Prints version information and exits.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePortNotSpecifiedTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"previous_filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePortNotSpecifiedTest.java","status":"copied"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Positive tests for the jwebserver command-line tool\n+ * @library \/test\/lib\n+ * @modules jdk.httpserver\n+ * @run testng\/othervm CommandLinePositiveTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.FileUtils;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static java.lang.System.out;\n+\n+public class CommandLinePositiveTest {\n+\n+    static final String JAVA_VERSION = System.getProperty(\"java.version\");\n+    static final Path JAVA_HOME = Path.of(System.getProperty(\"java.home\"));\n+    static final String JWEBSERVER = getJwebserver(JAVA_HOME);\n+    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n+    static final Path TEST_DIR = CWD.resolve(\"CommandLinePositiveTest\");\n+    static final Path TEST_FILE = TEST_DIR.resolve(\"file.txt\");\n+    static final String TEST_DIR_STR = TEST_DIR.toString();\n+    static final String LOOPBACK_ADDR = InetAddress.getLoopbackAddress().getHostAddress();\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        if (Files.exists(TEST_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        }\n+        Files.createDirectories(TEST_DIR);\n+        Files.createFile(TEST_FILE);\n+    }\n+\n+    static final int SIGTERM = 15;\n+    static final int NORMAL_EXIT_CODE = normalExitCode();\n+\n+    static int normalExitCode() {\n+        if (Platform.isWindows()) {\n+            return 1; \/\/ expected process destroy exit code\n+        } else {\n+            \/\/ signal terminated exit code on Unix is 128 + signal value\n+            return 128 + SIGTERM;\n+        }\n+    }\n+\n+    @DataProvider\n+    public Object[][] directoryOptions() { return new Object[][] {{\"-d\"}, {\"--directory\"}}; }\n+\n+    @Test(dataProvider = \"directoryOptions\")\n+    public void testDirectory(String opt) throws Throwable {\n+        out.println(\"\\n--- testDirectory, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, TEST_DIR_STR)\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    }\n+\n+    @DataProvider\n+    public Object[][] portOptions() { return new Object[][] {{\"-p\"}, {\"--port\"}}; }\n+\n+    @Test(dataProvider = \"portOptions\")\n+    public void testPort(String opt) throws Throwable {\n+        out.println(\"\\n--- testPort, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, opt, \"0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    }\n+\n+    @DataProvider\n+    public Object[][] helpOptions() { return new Object[][] {{\"-h\"}, {\"-?\"}, {\"--help\"}}; }\n+\n+    static final String USAGE_TEXT = \"\"\"\n+            Usage: jwebserver [-b bind address] [-p port] [-d directory]\n+                              [-o none|info|verbose] [-h to show options]\n+                              [-version to show version information]\"\"\";\n+\n+    static final String OPTIONS_TEXT = \"\"\"\n+            Options:\n+            -b, --bind-address    - Address to bind to. Default: %s (loopback).\n+                                    For all interfaces use \"-b 0.0.0.0\" or \"-b ::\".\n+            -d, --directory       - Directory to serve. Default: current directory.\n+            -o, --output          - Output format. none|info|verbose. Default: info.\n+            -p, --port            - Port to listen on. Default: 8000.\n+            -h, -?, --help        - Prints this help message and exits.\n+            -version, --version   - Prints version information and exits.\n+            To stop the server, press Ctrl + C.\"\"\".formatted(LOOPBACK_ADDR);\n+\n+    @Test(dataProvider = \"helpOptions\")\n+    public void testHelp(String opt) throws Throwable {\n+        out.println(\"\\n--- testHelp, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(WaitForLine.HELP_STARTUP_LINE,\n+                     false,  \/\/ do not explicitly destroy the process\n+                JWEBSERVER, opt)\n+                .shouldHaveExitValue(0)\n+                .shouldContain(USAGE_TEXT)\n+                .shouldContain(OPTIONS_TEXT);\n+    }\n+\n+    @DataProvider\n+    public Object[][] versionOptions() { return new Object[][] {{\"-version\"}, {\"--version\"}}; }\n+\n+    @Test(dataProvider = \"versionOptions\")\n+    public void testVersion(String opt) throws Throwable {\n+        out.println(\"\\n--- testVersion, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(WaitForLine.VERSION_STARTUP_LINE,\n+                     false,  \/\/ do not explicitly destroy the process\n+                JWEBSERVER, opt)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    @DataProvider\n+    public Object[][] bindOptions() { return new Object[][] {{\"-b\"}, {\"--bind-address\"}}; }\n+\n+    @Test(dataProvider = \"bindOptions\")\n+    public void testBindAllInterfaces(String opt) throws Throwable {\n+        out.println(\"\\n--- testBindAllInterfaces, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"0.0.0.0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        simpleserver(JWEBSERVER, opt, \"::0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+    }\n+\n+    @Test(dataProvider = \"bindOptions\")\n+    public void testLastOneWinsBindAddress(String opt) throws Throwable {\n+        out.println(\"\\n--- testLastOneWinsBindAddress, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+\n+    }\n+\n+    @Test(dataProvider = \"directoryOptions\")\n+    public void testLastOneWinsDirectory(String opt) throws Throwable {\n+        out.println(\"\\n--- testLastOneWinsDirectory, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    }\n+\n+    @DataProvider\n+    public Object[][] outputOptions() { return new Object[][] {{\"-o\"}, {\"--output\"}}; }\n+\n+    @Test(dataProvider = \"outputOptions\")\n+    public void testLastOneWinsOutput(String opt) throws Throwable {\n+        out.println(\"\\n--- testLastOneWinsOutput, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"none\", opt, \"verbose\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    }\n+\n+    @Test(dataProvider = \"portOptions\")\n+    public void testLastOneWinsPort(String opt) throws Throwable {\n+        out.println(\"\\n--- testLastOneWinsPort, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JWEBSERVER, opt, \"-999\", opt, \"0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port\")\n+                .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    }\n+\n+    @AfterTest\n+    public void teardown() throws IOException {\n+        if (Files.exists(TEST_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        }\n+    }\n+\n+    \/\/ --- infra ---\n+\n+    static String getJwebserver(Path image) {\n+        boolean isWindows = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+        Path jwebserver = image.resolve(\"bin\").resolve(isWindows ? \"jwebserver.exe\" : \"jwebserver\");\n+        if (Files.notExists(jwebserver))\n+            throw new RuntimeException(jwebserver + \" not found\");\n+        return jwebserver.toAbsolutePath().toString();\n+    }\n+\n+    static final String REGULAR_STARTUP_LINE1_STRING = \"Serving\";\n+    static final String REGULAR_STARTUP_LINE2_STRING = \"URL http:\/\/\";\n+    static final String VERSION_STARTUP_LINE_STRING = \"jwebserver \" + JAVA_VERSION;\n+\n+    \/\/ The stdout\/stderr output line to wait for when starting the simpleserver\n+    enum WaitForLine {\n+        REGULAR_STARTUP_LINE (REGULAR_STARTUP_LINE2_STRING) ,\n+        HELP_STARTUP_LINE (OPTIONS_TEXT.lines().reduce((first, second) -> second).orElseThrow()),\n+        VERSION_STARTUP_LINE (VERSION_STARTUP_LINE_STRING);\n+\n+        final String value;\n+        WaitForLine(String value) { this.value = value; }\n+    }\n+\n+    static OutputAnalyzer simpleserver(String... args) throws Throwable {\n+        return simpleserver(WaitForLine.REGULAR_STARTUP_LINE, true, args);\n+    }\n+\n+    static OutputAnalyzer simpleserver(WaitForLine waitForLine, boolean destroy, String... args) throws Throwable {\n+        StringBuffer sb = new StringBuffer();  \/\/ stdout & stderr\n+        \/\/ start the process and await the waitForLine before returning\n+        var p = ProcessTools.startProcess(\"simpleserver\",\n+                new ProcessBuilder(args).directory(TEST_DIR.toFile()),\n+                line -> sb.append(line + \"\\n\"),\n+                line -> line.startsWith(waitForLine.value),\n+                30,  \/\/ suitably high default timeout, not expected to timeout\n+                TimeUnit.SECONDS);\n+        if (destroy) {\n+            p.destroy();  \/\/ SIGTERM on Unix\n+        }\n+        int ec = p.waitFor();\n+        var outputAnalyser = new OutputAnalyzer(sb.toString(), \"\", ec);\n+        return outputAnalyser;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -154,0 +154,1 @@\n+        new ToolHelpSpec(\"jwebserver\",  1,   1,   1,   0,         0,    1,     1),     \/\/ -?, -h, --help\n","filename":"test\/jdk\/tools\/launcher\/HelpFlagsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n-        \"ssvagent\"\n+        \"ssvagent\",\n+        \"jwebserver\"\n","filename":"test\/jdk\/tools\/launcher\/VersionCheck.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}