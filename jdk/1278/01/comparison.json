{"files":[{"patch":"@@ -343,1 +343,1 @@\n-    assert(_owner == Self, \"must be Self: owner=\" INTPTR_FORMAT, p2i(_owner));\n+    assert(owner_raw() == Self, \"must be Self: owner=\" INTPTR_FORMAT, p2i(owner_raw()));\n@@ -353,1 +353,1 @@\n-  assert(_owner != Self, \"invariant\");\n+  assert(owner_raw() != Self, \"invariant\");\n@@ -444,1 +444,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -482,1 +482,1 @@\n-  void * own = _owner;\n+  void* own = owner_raw();\n@@ -662,2 +662,2 @@\n-  if (_owner != DEFLATER_MARKER) {\n-    ss->print(\"owner=\" INTPTR_FORMAT, p2i(_owner));\n+  if (!owner_is_DEFLATER_MARKER()) {\n+    ss->print(\"owner=\" INTPTR_FORMAT, p2i(owner_raw()));\n@@ -683,1 +683,1 @@\n-    assert(_owner == Self, \"invariant\");\n+    assert(owner_raw() == Self, \"invariant\");\n@@ -716,1 +716,1 @@\n-    assert(_owner == Self, \"invariant\");\n+    assert(owner_raw() == Self, \"invariant\");\n@@ -724,1 +724,1 @@\n-  assert(_owner != Self, \"invariant\");\n+  assert(owner_raw() != Self, \"invariant\");\n@@ -754,1 +754,1 @@\n-      assert(_owner == Self, \"invariant\");\n+      assert(owner_raw() == Self, \"invariant\");\n@@ -806,1 +806,1 @@\n-    assert(_owner != Self, \"invariant\");\n+    assert(owner_raw() != Self, \"invariant\");\n@@ -875,1 +875,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -951,1 +951,1 @@\n-    assert(_owner != Self, \"invariant\");\n+    assert(owner_raw() != Self, \"invariant\");\n@@ -1010,1 +1010,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -1024,1 +1024,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -1144,1 +1144,1 @@\n-  void* cur = Atomic::load(&_owner);\n+  void* cur = owner_raw();\n@@ -1190,1 +1190,1 @@\n-    assert(THREAD == _owner, \"invariant\");\n+    assert(THREAD == owner_raw(), \"invariant\");\n@@ -1246,1 +1246,1 @@\n-    guarantee(_owner == THREAD, \"invariant\");\n+    guarantee(owner_raw() == THREAD, \"invariant\");\n@@ -1358,1 +1358,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -1402,1 +1402,1 @@\n-  void* cur = Atomic::load(&_owner);\n+  void* cur = owner_raw();\n@@ -1411,1 +1411,1 @@\n-  guarantee(Self == _owner, \"complete_exit not owner\");\n+  guarantee(Self == owner_raw(), \"complete_exit not owner\");\n@@ -1415,1 +1415,1 @@\n-  guarantee(_owner != Self, \"invariant\");\n+  guarantee(owner_raw() != Self, \"invariant\");\n@@ -1425,1 +1425,1 @@\n-  guarantee(_owner != Self, \"reenter already owner\");\n+  guarantee(owner_raw() != Self, \"reenter already owner\");\n@@ -1453,1 +1453,1 @@\n-  void* cur = Atomic::load(&_owner);\n+  void* cur = owner_raw();\n@@ -1551,1 +1551,1 @@\n-  guarantee(_owner != Self, \"invariant\");\n+  guarantee(owner_raw() != Self, \"invariant\");\n@@ -1666,1 +1666,1 @@\n-    assert(_owner != Self, \"invariant\");\n+    assert(owner_raw() != Self, \"invariant\");\n@@ -1681,1 +1681,1 @@\n-    assert(_owner == Self, \"invariant\");\n+    assert(owner_raw() == Self, \"invariant\");\n@@ -1693,1 +1693,1 @@\n-  assert(_owner == Self, \"invariant\");\n+  assert(owner_raw() == Self, \"invariant\");\n@@ -1922,1 +1922,1 @@\n-  if (NotRunnable(Self, (Thread *) _owner)) {\n+  if (NotRunnable(Self, (Thread *) owner_raw())) {\n@@ -1968,1 +1968,1 @@\n-    Thread * ox = (Thread *) _owner;\n+    Thread * ox = (Thread *) owner_raw();\n@@ -2094,1 +2094,1 @@\n-    return BlockedOn != intptr_t(this) && _owner == ox;\n+    return BlockedOn != intptr_t(this) && owner_raw() == ox;\n@@ -2286,1 +2286,1 @@\n-  st->print_cr(\"  _owner = \" INTPTR_FORMAT, p2i(_owner));\n+  st->print_cr(\"  _owner = \" INTPTR_FORMAT, p2i(owner_raw()));\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  void* volatile _owner;            \/\/ pointer to owning thread OR BasicLock\n+  void* _owner;                     \/\/ pointer to owning thread OR BasicLock\n@@ -156,1 +156,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, OM_CACHE_LINE_SIZE, sizeof(void* volatile) +\n+  DEFINE_PAD_MINUS_SIZE(1, OM_CACHE_LINE_SIZE, sizeof(void*) +\n@@ -245,2 +245,2 @@\n-    if (_owner != DEFLATER_MARKER) {\n-      ret_code |= intptr_t(_owner);\n+    if (!owner_is_DEFLATER_MARKER()) {\n+      ret_code |= intptr_t(owner_raw());\n@@ -255,0 +255,1 @@\n+  void*     owner_raw() const;\n@@ -256,1 +257,1 @@\n-  bool      owner_is_DEFLATER_MARKER();\n+  bool      owner_is_DEFLATER_MARKER() const;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-  if (THREAD == _owner || THREAD->is_lock_owned((address) _owner)) {\n+  void* owner = owner_raw();\n+  if (THREAD == owner || THREAD->is_lock_owned((address)owner)) {\n@@ -58,1 +59,1 @@\n-  void* owner = _owner;\n+  void* owner = owner_raw();\n@@ -62,0 +63,4 @@\n+inline void* ObjectMonitor::owner_raw() const {\n+  return Atomic::load(&_owner);\n+}\n+\n@@ -65,2 +70,2 @@\n-inline bool ObjectMonitor::owner_is_DEFLATER_MARKER() {\n-  return Atomic::load(&_owner) == DEFLATER_MARKER;\n+inline bool ObjectMonitor::owner_is_DEFLATER_MARKER() const {\n+  return owner_raw() == DEFLATER_MARKER;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.inline.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-    Thread* const owner = (Thread *) m->_owner;\n+    Thread* const owner = (Thread *) m->owner_raw();\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}