{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,7 +229,0 @@\n-# For reproducible builds specify the jmod --date using SOURCE_DATE in ISO-8601\n-ifeq ($(ENABLE_REPRODUCIBLE_BUILD), true)\n-  JMOD_SOURCE_DATE := --date $(SOURCE_DATE_ISO_8601)\n-else\n-  JMOD_SOURCE_DATE :=\n-endif\n-\n@@ -247,1 +240,1 @@\n-        $(JMOD_SOURCE_DATE) \\\n+        --date $(SOURCE_DATE_ISO_8601) \\\n","filename":"make\/CreateJmods.gmk","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,0 @@\n-export HOTSPOT_BUILD_TIME=\"@HOTSPOT_BUILD_TIME@\"\n","filename":"make\/autoconf\/compare.sh.in","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -789,4 +789,2 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft && test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xtrue; then\n-    # Enabling deterministic creates warnings if __DATE__ or __TIME__ are\n-    # used, and since we are, silence that warning.\n-    REPRODUCIBLE_CFLAGS=\"-experimental:deterministic -wd5048\"\n+  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+    REPRODUCIBLE_CFLAGS=\"-experimental:deterministic\"\n@@ -819,2 +817,1 @@\n-    elif test \"x$TOOLCHAIN_TYPE\" = xmicrosoft &&\n-        test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xtrue; then\n+    elif test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n","filename":"make\/autoconf\/flags-cflags.m4","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -131,4 +131,7 @@\n-  if test \"x$ENABLE_REPRODUCIBLE_BUILD\" = \"xtrue\"; then\n-    if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n-      REPRODUCIBLE_LDFLAGS=\"-experimental:deterministic\"\n-    fi\n+  if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+    REPRODUCIBLE_LDFLAGS=\"-experimental:deterministic\"\n+    FLAGS_LINKER_CHECK_ARGUMENTS(ARGUMENT: [$REPRODUCIBLE_LDFLAGS],\n+        IF_FALSE: [\n+            REPRODUCIBLE_LDFLAGS=\n+        ]\n+    )\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -716,22 +716,0 @@\n-  REPRODUCIBLE_BUILD_DEFAULT=$with_source_date_present\n-\n-  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n-      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse; then\n-    # To support banning absolute paths on Windows, we must use the -pathmap\n-    # method, which requires reproducible builds.\n-    REPRODUCIBLE_BUILD_DEFAULT=true\n-  fi\n-\n-  UTIL_ARG_ENABLE(NAME: reproducible-build, DEFAULT: $REPRODUCIBLE_BUILD_DEFAULT,\n-      RESULT: ENABLE_REPRODUCIBLE_BUILD,\n-      DESC: [enable reproducible builds (not yet fully functional)],\n-      DEFAULT_DESC: [enabled if --with-source-date is given or on Windows without absolute paths])\n-\n-  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n-      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse && \\\n-      test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xfalse; then\n-    AC_MSG_NOTICE([On Windows it is not possible to combine  --disable-reproducible-build])\n-    AC_MSG_NOTICE([with --disable-absolute-paths-in-output.])\n-    AC_MSG_ERROR([Cannot continue])\n-  fi\n-\n@@ -739,1 +717,0 @@\n-  AC_SUBST(ENABLE_REPRODUCIBLE_BUILD)\n@@ -742,0 +719,2 @@\n+\n+  UTIL_DEPRECATED_ARG_ENABLE(reproducible-build)\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -132,1 +132,0 @@\n-ENABLE_REPRODUCIBLE_BUILD := @ENABLE_REPRODUCIBLE_BUILD@\n","filename":"make\/autoconf\/spec.gmk.in","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -226,4 +226,2 @@\n-  ifeq ($$(ENABLE_REPRODUCIBLE_BUILD), true)\n-    ifeq ($$(BOOT_JDK_JAR_SUPPORTS_DATE), true)\n-      $1_JAR_OPTIONS += --date $(SOURCE_DATE_ISO_8601)\n-    endif\n+  ifeq ($$(BOOT_JDK_JAR_SUPPORTS_DATE), true)\n+    $1_JAR_OPTIONS += --date $(SOURCE_DATE_ISO_8601)\n","filename":"make\/common\/JarArchive.gmk","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -409,3 +409,1 @@\n-       ifeq ($$(ENABLE_REPRODUCIBLE_BUILD), true)\n-         $1_COMPILE_OPTIONS += -frandom-seed=\"$$($1_FILENAME)\"\n-       endif\n+      $1_COMPILE_OPTIONS += -frandom-seed=\"$$($1_FILENAME)\"\n","filename":"make\/common\/NativeCompilation.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-#   REPRODUCIBLE override ENABLE_REPRODUCIBLE_BUILD (to make zip reproducible or not)\n+#   REPRODUCIBLE set to false to disable the step that makes zip reproducible\n@@ -133,1 +133,1 @@\n-    $1_REPRODUCIBLE := $$(ENABLE_REPRODUCIBLE_BUILD)\n+    $1_REPRODUCIBLE := true\n","filename":"make\/common\/ZipArchive.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,0 +69,4 @@\n+ifeq ($(HOTSPOT_BUILD_TIME), )\n+  HOTSPOT_BUILD_TIME := $(call EpochToISO8601, $(shell $(DATE) +\"%s\"))\n+endif\n+\n@@ -76,0 +80,1 @@\n+    -DHOTSPOT_BUILD_TIME='\"$(HOTSPOT_BUILD_TIME)\"' \\\n@@ -78,4 +83,0 @@\n-ifneq ($(HOTSPOT_BUILD_TIME), )\n-  CFLAGS_VM_VERSION += -DHOTSPOT_BUILD_TIME='\"$(HOTSPOT_BUILD_TIME)\"'\n-endif\n-\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,6 +32,0 @@\n-  CFLAGS_LIBDT_SHMEM := $(CFLAGS_JDKLIB)\n-\n-  ifneq ($(HOTSPOT_BUILD_TIME), )\n-    CFLAGS_LIBDT_SHMEM += -DSHMEM_BUILD_TIME='\"$(HOTSPOT_BUILD_TIME)\"'\n-  endif\n-\n@@ -41,1 +35,1 @@\n-      CFLAGS := $(CFLAGS_LIBDT_SHMEM), \\\n+      CFLAGS := $(CFLAGS_JDKLIB), \\\n","filename":"make\/modules\/jdk.jdi\/Lib.gmk","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-  if [ \"$HOTSPOT_BUILD_TIME\" = \"\" -o \"$USE_PRECOMPILED_HEADER\" = \"true\" ]; then\n+  if [ \"$USE_PRECOMPILED_HEADER\" = \"true\" ]; then\n","filename":"make\/scripts\/compare_exceptions.sh.incl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,0 +77,4 @@\n+#ifndef HOTSPOT_BUILD_TIME\n+  #error HOTSPOT_BUILD_TIME must be defined\n+#endif\n+\n@@ -270,4 +274,0 @@\n-  #ifndef HOTSPOT_BUILD_TIME\n-    #define HOTSPOT_BUILD_TIME __DATE__ \" \" __TIME__\n-  #endif\n-\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1260,1 +1260,1 @@\n-                       char *date, int lineNumber)\n+                       int lineNumber)\n@@ -1266,2 +1266,2 @@\n-    sprintf(buffer, \"Shared Memory Transport \\\"%s\\\" (%s), line %d: %s\\n\",\n-            fileName, date, lineNumber, message);\n+    sprintf(buffer, \"Shared Memory Transport \\\"%s\\\", line %d: %s\\n\",\n+            fileName, lineNumber, message);\n","filename":"src\/jdk.jdi\/share\/native\/libdt_shmem\/shmemBase.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-                            char *date, int lineNumber);\n+                            int lineNumber);\n@@ -52,4 +52,0 @@\n-#ifndef SHMEM_BUILD_TIME\n-#define SHMEM_BUILD_TIME __DATE__\n-#endif\n-\n@@ -60,1 +56,1 @@\n-        exitTransportWithError(\"assertion failed\", __FILE__, SHMEM_BUILD_TIME, __LINE__); \\\n+        exitTransportWithError(\"assertion failed\", __FILE__, __LINE__); \\\n@@ -70,1 +66,1 @@\n-        exitTransportWithError(\"assertion failed\", __FILE__, SHMEM_BUILD_TIME, __LINE__); \\\n+        exitTransportWithError(\"assertion failed\", __FILE__, __LINE__); \\\n","filename":"src\/jdk.jdi\/share\/native\/libdt_shmem\/shmemBase.h","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"shmemBase.h\"  \/* for exitTransportWithError *\/\n+#include \"shmemBase.h\"  \/* for SHMEM_ASSERT *\/\n@@ -42,16 +42,0 @@\n-#ifndef SHMEM_BUILD_TIME\n-#define SHMEM_BUILD_TIME __DATE__\n-#endif\n-\n-#ifdef DEBUG\n-#define sysAssert(expression) {         \\\n-    if (!(expression)) {                \\\n-            exitTransportWithError \\\n-            (\"\\\"%s\\\", line %d: assertion failure\\n\", \\\n-             __FILE__, SHMEM_BUILD_TIME, __LINE__); \\\n-    }                                   \\\n-}\n-#else\n-#define sysAssert(expression) ((void) 0)\n-#endif\n-\n@@ -65,3 +49,3 @@\n-    sysAssert(buffer);\n-    sysAssert(name);\n-    sysAssert(length > 0);\n+    SHMEM_ASSERT(buffer);\n+    SHMEM_ASSERT(name);\n+    SHMEM_ASSERT(length > 0);\n@@ -106,2 +90,2 @@\n-    sysAssert(name);\n-    sysAssert(buffer);\n+    SHMEM_ASSERT(name);\n+    SHMEM_ASSERT(buffer);\n@@ -154,2 +138,2 @@\n-    sysAssert(mutexPtr);\n-    sysAssert(name);\n+    SHMEM_ASSERT(mutexPtr);\n+    SHMEM_ASSERT(name);\n@@ -177,2 +161,2 @@\n-    sysAssert(mutexPtr);\n-    sysAssert(name);\n+    SHMEM_ASSERT(mutexPtr);\n+    SHMEM_ASSERT(name);\n@@ -198,1 +182,1 @@\n-    sysAssert(mutex);\n+    SHMEM_ASSERT(mutex);\n@@ -208,1 +192,1 @@\n-    sysAssert(mutex);\n+    SHMEM_ASSERT(mutex);\n@@ -224,1 +208,1 @@\n-    sysAssert(eventPtr);\n+    SHMEM_ASSERT(eventPtr);\n@@ -247,2 +231,2 @@\n-    sysAssert(eventPtr);\n-    sysAssert(name);\n+    SHMEM_ASSERT(eventPtr);\n+    SHMEM_ASSERT(name);\n@@ -274,1 +258,1 @@\n-    sysAssert(event);\n+    SHMEM_ASSERT(event);\n@@ -300,1 +284,1 @@\n-    sysAssert(event);\n+    SHMEM_ASSERT(event);\n@@ -321,1 +305,1 @@\n-    sysAssert(processPtr);\n+    SHMEM_ASSERT(processPtr);\n","filename":"src\/jdk.jdi\/windows\/native\/libdt_shmem\/shmem_md.c","additions":18,"deletions":34,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-void exitTransportWithError(char *msg, char *fileName,\n-                            char *date, int lineNumber);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libdt_socket\/socketTransport.h","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"socketTransport.h\"\n","filename":"src\/jdk.jdwp.agent\/windows\/native\/libdt_socket\/socket_md.c","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}