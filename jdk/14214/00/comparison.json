{"files":[{"patch":"@@ -238,1 +238,1 @@\n-instruct vabsB(vReg dst, vReg src, vReg tmp) %{\n+instruct vabs(vReg dst, vReg src, vReg tmp) %{\n@@ -240,13 +240,0 @@\n-  ins_cost(VEC_COST);\n-  effect(TEMP tmp);\n-  format %{ \"vrsub.vi $tmp, 0, $src\\t#@vabsB\\n\\t\"\n-            \"vmax.vv $dst, $tmp, $src\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vrsub_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg), 0);\n-    __ vmax_vv(as_VectorRegister($dst$$reg), as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vabsS(vReg dst, vReg src, vReg tmp) %{\n@@ -254,13 +241,0 @@\n-  ins_cost(VEC_COST);\n-  effect(TEMP tmp);\n-  format %{ \"vrsub.vi $tmp, 0, $src\\t#@vabsS\\n\\t\"\n-            \"vmax.vv $dst, $tmp, $src\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vrsub_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg), 0);\n-    __ vmax_vv(as_VectorRegister($dst$$reg), as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vabsI(vReg dst, vReg src, vReg tmp) %{\n@@ -268,13 +242,0 @@\n-  ins_cost(VEC_COST);\n-  effect(TEMP tmp);\n-  format %{ \"vrsub.vi $tmp, 0, $src\\t#@vabsI\\n\\t\"\n-            \"vmax.vv $dst, $tmp, $src\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vrsub_vi(as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg), 0);\n-    __ vmax_vv(as_VectorRegister($dst$$reg), as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vabsL(vReg dst, vReg src, vReg tmp) %{\n@@ -284,1 +245,1 @@\n-  format %{ \"vrsub.vi $tmp, 0, $src\\t#@vabsL\\n\\t\"\n+  format %{ \"vrsub.vi $tmp, 0, $src\\t#@vabs\\n\\t\"\n@@ -287,1 +248,2 @@\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -294,1 +256,1 @@\n-instruct vabsF(vReg dst, vReg src) %{\n+instruct vabs_fp(vReg dst, vReg src) %{\n@@ -296,10 +258,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsgnjx.vv $dst, $src, $src, vm\\t#@vabsF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfsgnjx_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vabsD(vReg dst, vReg src) %{\n@@ -308,1 +260,1 @@\n-  format %{ \"vfsgnjx.vv $dst, $src, $src, vm\\t#@vabsD\" %}\n+  format %{ \"vfsgnjx.vv $dst, $src, $src, vm\\t#@vabs_fp\" %}\n@@ -310,1 +262,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -353,1 +306,1 @@\n-instruct vaddB(vReg dst, vReg src1, vReg src2) %{\n+instruct vadd(vReg dst, vReg src1, vReg src2) %{\n@@ -355,0 +308,3 @@\n+  match(Set dst (AddVS src1 src2));\n+  match(Set dst (AddVI src1 src2));\n+  match(Set dst (AddVL src1 src2));\n@@ -356,1 +312,1 @@\n-  format %{ \"vadd.vv $dst, $src1, $src2\\t#@vaddB\" %}\n+  format %{ \"vadd.vv $dst, $src1, $src2\\t#@vadd\" %}\n@@ -358,1 +314,2 @@\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -366,2 +323,3 @@\n-instruct vaddS(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (AddVS src1 src2));\n+instruct vadd_fp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (AddVF src1 src2));\n+  match(Set dst (AddVD src1 src2));\n@@ -369,1 +327,1 @@\n-  format %{ \"vadd.vv $dst, $src1, $src2\\t#@vaddS\" %}\n+  format %{ \"vfadd.vv $dst, $src1, $src2\\t#@vadd_fp\" %}\n@@ -371,4 +329,5 @@\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vadd_vv(as_VectorRegister($dst$$reg),\n-               as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfadd_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n@@ -379,2 +338,7 @@\n-instruct vaddI(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (AddVI src1 src2));\n+\/\/ vector add - predicated\n+\n+instruct vadd_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst_src1 (AddVB (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (AddVS (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (AddVI (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (AddVL (Binary dst_src1 src2) v0));\n@@ -382,1 +346,1 @@\n-  format %{ \"vadd.vv $dst, $src1, $src2\\t#@vaddI\" %}\n+  format %{ \"vadd.vv $dst_src1, $src2, $v0\\t#@vadd_masked\" %}\n@@ -384,4 +348,5 @@\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vadd_vv(as_VectorRegister($dst$$reg),\n-               as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vadd_vv(as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($dst_src1$$reg),\n+               as_VectorRegister($src2$$reg), Assembler::v0_t);\n@@ -392,2 +357,3 @@\n-instruct vaddL(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (AddVL src1 src2));\n+instruct vadd_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst_src1 (AddVF (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (AddVD (Binary dst_src1 src2) v0));\n@@ -395,1 +361,1 @@\n-  format %{ \"vadd.vv $dst, $src1, $src2\\t#@vaddL\" %}\n+  format %{ \"vfadd.vv $dst_src1, $src2, $v0\\t#@vadd_fp_masked\" %}\n@@ -397,4 +363,5 @@\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n-    __ vadd_vv(as_VectorRegister($dst$$reg),\n-               as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfadd_vv(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg), Assembler::v0_t);\n@@ -405,2 +372,7 @@\n-instruct vaddF(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (AddVF src1 src2));\n+\/\/ vector sub\n+\n+instruct vsub(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (SubVB src1 src2));\n+  match(Set dst (SubVS src1 src2));\n+  match(Set dst (SubVI src1 src2));\n+  match(Set dst (SubVL src1 src2));\n@@ -408,1 +380,1 @@\n-  format %{ \"vfadd.vv $dst, $src1, $src2\\t#@vaddF\" %}\n+  format %{ \"vsub.vv $dst, $src1, $src2\\t#@vsub\" %}\n@@ -410,4 +382,4 @@\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfadd_vv(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src1$$reg),\n-                as_VectorRegister($src2$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n+               as_VectorRegister($src2$$reg));\n@@ -418,2 +390,3 @@\n-instruct vaddD(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (AddVD src1 src2));\n+instruct vsub_fp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (SubVF src1 src2));\n+  match(Set dst (SubVD src1 src2));\n@@ -421,1 +394,1 @@\n-  format %{ \"vfadd.vv $dst, $src1, $src2\\t#@vaddD\" %}\n+  format %{ \"vfsub.vv $dst, $src1, $src2\\t@vsub_fp\" %}\n@@ -423,3 +396,3 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n-    __ vfadd_vv(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src1$$reg),\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n@@ -431,1 +404,1 @@\n-\/\/ vector add - predicated\n+\/\/ vector sub - predicated\n@@ -433,5 +406,5 @@\n-instruct vadd_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n-  match(Set dst_src1 (AddVB (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (AddVS (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (AddVI (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (AddVL (Binary dst_src1 src2) v0));\n+instruct vsub_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst_src1 (SubVB (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (SubVS (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (SubVI (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (SubVL (Binary dst_src1 src2) v0));\n@@ -439,1 +412,1 @@\n-  format %{ \"vadd.vv $dst_src1, $src2, $v0\\t#@vadd_masked\" %}\n+  format %{ \"vsub.vv $dst_src1, $src2, $v0\\t#@vsub_masked\" %}\n@@ -443,2 +416,1 @@\n-    __ vadd_vv(as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($dst_src1$$reg),\n+    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n@@ -450,3 +422,3 @@\n-instruct vadd_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n-  match(Set dst_src1 (AddVF (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (AddVD (Binary dst_src1 src2) v0));\n+instruct vsub_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst_src1 (SubVF (Binary dst_src1 src2) v0));\n+  match(Set dst_src1 (SubVD (Binary dst_src1 src2) v0));\n@@ -454,1 +426,1 @@\n-  format %{ \"vfadd.vv $dst_src1, $src2, $v0\\t#@vadd_fp_masked\" %}\n+  format %{ \"vfsub.vv $dst_src1, $src2, $v0\\t#@vsub_fp_masked\" %}\n@@ -458,2 +430,1 @@\n-    __ vfadd_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($dst_src1$$reg),\n+    __ vfsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n@@ -563,1 +534,1 @@\n-instruct vdivF(vReg dst, vReg src1, vReg src2) %{\n+instruct vdiv_fp(vReg dst, vReg src1, vReg src2) %{\n@@ -565,12 +536,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfdiv.vv  $dst, $src1, $src2\\t#@vdivF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfdiv_vv(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src1$$reg),\n-                as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vdivD(vReg dst, vReg src1, vReg src2) %{\n@@ -579,1 +538,1 @@\n-  format %{ \"vfdiv.vv  $dst, $src1, $src2\\t#@vdivD\" %}\n+  format %{ \"vfdiv.vv  $dst, $src1, $src2\\t#@vdiv_fp\" %}\n@@ -581,1 +540,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -793,1 +753,1 @@\n-instruct vfmlaF(vReg dst_src1, vReg src2, vReg src3) %{\n+instruct vfmla(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -796,13 +756,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfmacc.vv $dst_src1, $src2, $src3\\t#@vfmlaF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfmacc_vv(as_VectorRegister($dst_src1$$reg),\n-                 as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n-instruct vfmlaD(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n@@ -811,1 +758,1 @@\n-  format %{ \"vfmacc.vv $dst_src1, $src2, $src3\\t#@vfmlaD\" %}\n+  format %{ \"vfmacc.vv $dst_src1, $src2, $src3\\t#@vfmla\" %}\n@@ -813,1 +760,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -989,1 +937,1 @@\n-instruct vmlaB(vReg dst_src1, vReg src2, vReg src3) %{\n+instruct vmla(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -991,12 +939,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmacc.vv $dst_src1, src2, src3\\t#@vmlaB\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vmacc_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n-instruct vmlaS(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1004,12 +940,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmacc.vv $dst_src1, src2, src3\\t#@vmlaS\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vmacc_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n-instruct vmlaI(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1017,12 +941,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmacc.vv $dst_src1, src2, src3\\t#@vmlaI\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vmacc_vv(as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n-instruct vmlaL(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1031,1 +943,1 @@\n-  format %{ \"vmacc.vv $dst_src1, src2, src3\\t#@vmlaL\" %}\n+  format %{ \"vmacc.vv $dst_src1, src2, src3\\t#@vmla\" %}\n@@ -1033,1 +945,2 @@\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1060,1 +973,1 @@\n-instruct vmlsB(vReg dst_src1, vReg src2, vReg src3) %{\n+instruct vmls(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1062,12 +975,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vnmsac.vv $dst_src1, src2, src3\\t#@vmlsB\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vnmsac_vv(as_VectorRegister($dst_src1$$reg),\n-                 as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 - src2 * src3\n-instruct vmlsS(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1075,12 +976,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vnmsac.vv $dst_src1, src2, src3\\t#@vmlsS\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vnmsac_vv(as_VectorRegister($dst_src1$$reg),\n-                 as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 - src2 * src3\n-instruct vmlsI(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1088,12 +977,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vnmsac.vv $dst_src1, src2, src3\\t#@vmlsI\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vnmsac_vv(as_VectorRegister($dst_src1$$reg),\n-                 as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 - src2 * src3\n-instruct vmlsL(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1102,1 +979,1 @@\n-  format %{ \"vnmsac.vv $dst_src1, src2, src3\\t#@vmlsL\" %}\n+  format %{ \"vnmsac.vv $dst_src1, src2, src3\\t#@vmls\" %}\n@@ -1104,1 +981,2 @@\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1130,1 +1008,1 @@\n-instruct vmulB(vReg dst, vReg src1, vReg src2) %{\n+instruct vmul(vReg dst, vReg src1, vReg src2) %{\n@@ -1132,11 +1010,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst, $src1, $src2\\t#@vmulB\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vmul_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulS(vReg dst, vReg src1, vReg src2) %{\n@@ -1144,11 +1011,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst, $src1, $src2\\t#@vmulS\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vmul_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulI(vReg dst, vReg src1, vReg src2) %{\n@@ -1156,11 +1012,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmul.vv $dst, $src1, $src2\\t#@vmulI\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vmul_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulL(vReg dst, vReg src1, vReg src2) %{\n@@ -1169,1 +1014,1 @@\n-  format %{ \"vmul.vv $dst, $src1, $src2\\t#@vmulL\" %}\n+  format %{ \"vmul.vv $dst, $src1, $src2\\t#@vmul\" %}\n@@ -1171,1 +1016,2 @@\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1178,1 +1024,1 @@\n-instruct vmulF(vReg dst, vReg src1, vReg src2) %{\n+instruct vmul_fp(vReg dst, vReg src1, vReg src2) %{\n@@ -1180,11 +1026,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfmul.vv $dst, $src1, $src2\\t#@vmulF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfmul_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-                as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmulD(vReg dst, vReg src1, vReg src2) %{\n@@ -1193,1 +1028,1 @@\n-  format %{ \"vfmul.vv $dst, $src1, $src2\\t#@vmulD\" %}\n+  format %{ \"vfmul.vv $dst, $src1, $src2\\t#@vmul_fp\" %}\n@@ -1195,1 +1030,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1236,1 +1072,1 @@\n-instruct vnegI(vReg dst, vReg src) %{\n+instruct vneg(vReg dst, vReg src) %{\n@@ -1238,0 +1074,1 @@\n+  match(Set dst (NegVL src));\n@@ -1239,1 +1076,1 @@\n-  format %{ \"vrsub.vx $dst, $src, $src\\t#@vnegI\" %}\n+  format %{ \"vrsub.vx $dst, $src, $src\\t#@vneg\" %}\n@@ -1248,11 +1085,0 @@\n-instruct vnegL(vReg dst, vReg src) %{\n-  match(Set dst (NegVL src));\n-  ins_cost(VEC_COST);\n-  format %{ \"vrsub.vx $dst, $src, $src\\t#@vnegL\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n-    __ vneg_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -1277,1 +1103,1 @@\n-instruct vnegF(vReg dst, vReg src) %{\n+instruct vfneg(vReg dst, vReg src) %{\n@@ -1279,10 +1105,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsgnjn.vv $dst, $src, $src\\t#@vnegF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfneg_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vnegD(vReg dst, vReg src) %{\n@@ -1291,1 +1107,1 @@\n-  format %{ \"vfsgnjn.vv $dst, $src, $src\\t#@vnegD\" %}\n+  format %{ \"vfsgnjn.vv $dst, $src, $src\\t#@vfneg\" %}\n@@ -1293,1 +1109,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1949,1 +1766,1 @@\n-instruct replicateB(vReg dst, iRegIorL2I src) %{\n+instruct replicate(vReg dst, iRegIorL2I src) %{\n@@ -1951,10 +1768,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmv.v.x  $dst, $src\\t#@replicateB\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), as_Register($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct replicateS(vReg dst, iRegIorL2I src) %{\n@@ -1962,10 +1769,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmv.v.x  $dst, $src\\t#@replicateS\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), as_Register($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct replicateI(vReg dst, iRegIorL2I src) %{\n@@ -1974,1 +1771,1 @@\n-  format %{ \"vmv.v.x  $dst, $src\\t#@replicateI\" %}\n+  format %{ \"vmv.v.x  $dst, $src\\t#@replicate\" %}\n@@ -1976,1 +1773,2 @@\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -1993,1 +1791,1 @@\n-instruct replicateB_imm5(vReg dst, immI5 con) %{\n+instruct replicate_imm5(vReg dst, immI5 con) %{\n@@ -1995,10 +1793,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmv.v.i  $dst, $con\\t#@replicateB_imm5\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vmv_v_i(as_VectorRegister($dst$$reg), $con$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct replicateS_imm5(vReg dst, immI5 con) %{\n@@ -2006,10 +1794,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vmv.v.i  $dst, $con\\t#@replicateS_imm5\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vmv_v_i(as_VectorRegister($dst$$reg), $con$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct replicateI_imm5(vReg dst, immI5 con) %{\n@@ -2018,1 +1796,1 @@\n-  format %{ \"vmv.v.i  $dst, $con\\t#@replicateI_imm5\" %}\n+  format %{ \"vmv.v.i  $dst, $con\\t#@replicate_imm5\" %}\n@@ -2020,1 +1798,2 @@\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length_in_bytes(this));\n@@ -2875,1 +2654,1 @@\n-instruct vsqrtF(vReg dst, vReg src) %{\n+instruct vsqrt_fp(vReg dst, vReg src) %{\n@@ -2877,10 +2656,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsqrt.v $dst, $src\\t#@vsqrtF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfsqrt_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsqrtD(vReg dst, vReg src) %{\n@@ -2889,1 +2658,1 @@\n-  format %{ \"vfsqrt.v $dst, $src\\t#@vsqrtD\" %}\n+  format %{ \"vfsqrt.v $dst, $src\\t#@vsqrt_fp\" %}\n@@ -2891,1 +2660,2 @@\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2899,1 +2669,1 @@\n-instruct vsqrtF_masked(vReg dst_src, vRegMask_V0 v0) %{\n+instruct vsqrt_fp_masked(vReg dst_src, vRegMask_V0 v0) %{\n@@ -2901,11 +2671,0 @@\n-  ins_cost(VEC_COST);\n-  format %{ \"vsqrtF_masked $dst_src, $v0\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfsqrt_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n-                Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsqrtD_masked(vReg dst_src, vRegMask_V0 v0) %{\n@@ -2914,106 +2673,1 @@\n-  format %{ \"vsqrtD_masked $dst_src, $v0\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n-    __ vfsqrt_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n-                Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ vector sub\n-\n-instruct vsubB(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVB src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst, $src1, $src2\\t#@vsubB\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n-    __ vsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubS(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVS src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst, $src1, $src2\\t#@vsubS\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n-    __ vsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubI(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVI src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst, $src1, $src2\\t#@vsubI\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n-    __ vsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubL(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVL src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst, $src1, $src2\\t#@vsubL\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n-    __ vsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-               as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubF(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVF src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsub.vv $dst, $src1, $src2\\t@vsubF\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n-    __ vfsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-                as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsubD(vReg dst, vReg src1, vReg src2) %{\n-  match(Set dst (SubVD src1 src2));\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsub.vv $dst, $src1, $src2\\t#@vsubD\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n-    __ vfsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n-                as_VectorRegister($src2$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ vector sub - predicated\n-\n-instruct vsub_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n-  match(Set dst_src1 (SubVB (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (SubVS (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (SubVI (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (SubVL (Binary dst_src1 src2) v0));\n-  ins_cost(VEC_COST);\n-  format %{ \"vsub.vv $dst_src1, $src2, $v0\\t#@vsub_masked\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n-    __ vsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-               as_VectorRegister($src2$$reg), Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vsub_fp_masked(vReg dst_src1, vReg src2, vRegMask_V0 v0) %{\n-  match(Set dst_src1 (SubVF (Binary dst_src1 src2) v0));\n-  match(Set dst_src1 (SubVD (Binary dst_src1 src2) v0));\n-  ins_cost(VEC_COST);\n-  format %{ \"vfsub.vv $dst_src1, $src2, $v0\\t#@vsub_fp_masked\" %}\n+  format %{ \"vsqrt_fp_masked $dst_src, $v0\" %}\n@@ -3023,2 +2677,2 @@\n-    __ vfsub_vv(as_VectorRegister($dst_src1$$reg), as_VectorRegister($dst_src1$$reg),\n-                as_VectorRegister($src2$$reg), Assembler::v0_t);\n+    __ vfsqrt_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                Assembler::v0_t);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":125,"deletions":471,"binary":false,"changes":596,"status":"modified"}]}