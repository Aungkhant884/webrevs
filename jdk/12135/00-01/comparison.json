{"files":[{"patch":"@@ -4115,0 +4115,11 @@\n+     * @apiNote\n+     * Modification methods of the returned list (such as {@link List#set} and\n+     * {@link List#replaceAll}) will throw an {@link ArrayStoreException} when\n+     * trying to set a wrong type of element into the list (and the backing\n+     * array).  For example:\n+     * {@snippet :\n+     *   List<Object> list = Arrays.asList((Object[])new String[1]);\n+     *   list.set(0, Integer.valueOf(0));    \/\/ throws ArrayStoreException\n+     *   list.replaceAll(Objects::hashCode); \/\/ throws ArrayStoreException\n+     * }\n+     *\n@@ -4169,0 +4180,5 @@\n+        \/**\n+         * {@inheritDoc}\n+         * \n+         * @throws ArrayStoreException if {@code element} cannot be stored into the array.\n+         *\/\n@@ -4172,5 +4188,1 @@\n-            try {\n-                a[index] = element;\n-            } catch (ArrayStoreException e) {\n-                throw new ClassCastException(e.getMessage());\n-            }\n+            a[index] = element;\n@@ -4213,0 +4225,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         * \n+         * @throws ArrayStoreException if {@code operator.apply} returns an object which cannot be\n+         *         stored into the array.\n+         *\/\n@@ -4218,6 +4236,1 @@\n-                E result = operator.apply(a[i]);\n-                try {\n-                    a[i] = result;\n-                } catch (ArrayStoreException e) {\n-                    throw new ClassCastException(e.getMessage());\n-                }\n+                a[i] = operator.apply(a[i]);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"}]}