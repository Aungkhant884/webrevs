{"files":[{"patch":"@@ -384,2 +384,6 @@\n-        UNSAFE.ensureClassInitialized(defc); \/\/ initialization barrier; blocks unless called by the initializing thread\n-        return !UNSAFE.shouldBeInitialized(defc); \/\/ keep the barrier if the initialization is still in progress\n+        UNSAFE.ensureClassInitialized(defc);\n+        \/\/ Once we get here either defc was fully initialized by another thread, or\n+        \/\/ defc was already being initialized by the current thread. In the latter case\n+        \/\/ the barrier must remain. We can detect this simply by checking if initialization\n+        \/\/ is still needed.\n+        return !UNSAFE.shouldBeInitialized(defc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1146,3 +1146,7 @@\n-     * Ensures the given class has been initialized. This is often\n-     * needed in conjunction with obtaining the static field base of a\n-     * class.\n+     * Ensures the given class has been initialized (see JVMS-5.5 for details).\n+     * This is often needed in conjunction with obtaining the static field base\n+     * of a class.\n+     *\n+     * The call returns when either class {@code c} is fully initialized or\n+     * class {@code c} is being initialized and the call is performed from\n+     * the initializing thread.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}