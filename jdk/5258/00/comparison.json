{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.ref.WeakReference;\n@@ -366,3 +365,1 @@\n-            if (UNSAFE.shouldBeInitialized(cls)) {\n-                UNSAFE.ensureClassInitialized(cls);\n-            }\n+            UNSAFE.ensureClassInitialized(cls);\n@@ -374,13 +371,0 @@\n-    private static class EnsureInitialized extends ClassValue<WeakReference<Thread>> {\n-        @Override\n-        protected WeakReference<Thread> computeValue(Class<?> type) {\n-            UNSAFE.ensureClassInitialized(type);\n-            if (UNSAFE.shouldBeInitialized(type))\n-                \/\/ If the previous call didn't block, this can happen.\n-                \/\/ We are executing inside <clinit>.\n-                return new WeakReference<>(Thread.currentThread());\n-            return null;\n-        }\n-        static final EnsureInitialized INSTANCE = new EnsureInitialized();\n-    }\n-\n@@ -400,18 +384,2 @@\n-        WeakReference<Thread> ref = EnsureInitialized.INSTANCE.get(defc);\n-        if (ref == null) {\n-            return true;  \/\/ the final state\n-        }\n-        \/\/ Somebody may still be running defc.<clinit>.\n-        if (ref.refersTo(Thread.currentThread())) {\n-            \/\/ If anybody is running defc.<clinit>, it is this thread.\n-            if (UNSAFE.shouldBeInitialized(defc))\n-                \/\/ Yes, we are running it; keep the barrier for now.\n-                return false;\n-        } else {\n-            \/\/ We are in a random thread.  Block.\n-            UNSAFE.ensureClassInitialized(defc);\n-        }\n-        assert(!UNSAFE.shouldBeInitialized(defc));\n-        \/\/ put it into the final state\n-        EnsureInitialized.INSTANCE.remove(defc);\n-        return true;\n+        UNSAFE.ensureClassInitialized(defc); \/\/ initialization barrier; blocks unless called by the initializing thread\n+        return !UNSAFE.shouldBeInitialized(defc); \/\/ keep the barrier if the initialization is still in progress\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"}]}