{"files":[{"patch":"@@ -773,0 +773,2 @@\n+  bool debug_logging_enabled = log_is_enabled(Debug, class, init);\n+\n@@ -775,0 +777,5 @@\n+    if (debug_logging_enabled) {\n+      ResourceMark rm(current);\n+      log_debug(class, init)(\"Thread \\\"%s\\\" waiting for linking of %s by thread \\\"%s\\\"\",\n+                             current->name(), external_name(), init_thread_name());\n+    }\n@@ -780,0 +787,5 @@\n+    if (debug_logging_enabled) {\n+      ResourceMark rm(current);\n+      log_debug(class, init)(\"Thread \\\"%s\\\" recursively linking %s\",\n+                             current->name(), external_name());\n+    }\n@@ -785,0 +797,5 @@\n+    if (debug_logging_enabled) {\n+      ResourceMark rm(current);\n+      log_debug(class, init)(\"Thread \\\"%s\\\" linking %s\",\n+                             current->name(), external_name());\n+    }\n@@ -787,0 +804,6 @@\n+  } else {\n+    if (debug_logging_enabled) {\n+      ResourceMark rm(current);\n+      log_debug(class, init)(\"Thread \\\"%s\\\" found %s already linked\",\n+                             current->name(), external_name());\n+      }\n@@ -1061,0 +1084,2 @@\n+  bool debug_logging_enabled = log_is_enabled(Debug, class, init);\n+\n@@ -1064,1 +1089,1 @@\n-    MonitorLocker ml(THREAD, _init_monitor);\n+    MonitorLocker ml(jt, _init_monitor);\n@@ -1068,0 +1093,6 @@\n+      if (debug_logging_enabled) {\n+        ResourceMark rm(jt);\n+        log_debug(class, init)(\"Thread \\\"%s\\\" waiting for initialization of %s by thread \\\"%s\\\"\",\n+                               jt->name(), external_name(), init_thread_name());\n+      }\n+\n@@ -1076,0 +1107,5 @@\n+      if (debug_logging_enabled) {\n+        ResourceMark rm(jt);\n+        log_debug(class, init)(\"Thread \\\"%s\\\" recursively initializing %s\",\n+                               jt->name(), external_name());\n+      }\n@@ -1082,0 +1118,5 @@\n+      if (debug_logging_enabled) {\n+        ResourceMark rm(jt);\n+        log_debug(class, init)(\"Thread \\\"%s\\\" found %s already initialized\",\n+                               jt->name(), external_name());\n+      }\n@@ -1088,0 +1129,5 @@\n+      if (debug_logging_enabled) {\n+        ResourceMark rm(jt);\n+        log_debug(class, init)(\"Thread \\\"%s\\\" found %s is in error state\",\n+                               jt->name(), external_name());\n+      }\n@@ -1094,0 +1140,5 @@\n+      if (debug_logging_enabled) {\n+        ResourceMark rm(jt);\n+        log_debug(class, init)(\"Thread \\\"%s\\\" is initializing %s\",\n+                               jt->name(), external_name());\n+      }\n@@ -1567,1 +1618,3 @@\n-    ls.print_cr(\"%s (\" PTR_FORMAT \")\", h_method() == nullptr ? \"(no method)\" : \"\", p2i(this));\n+    ls.print_cr(\"%s (\" PTR_FORMAT \") by thread \\\"%s\\\"\",\n+                h_method() == nullptr ? \"(no method)\" : \"\", p2i(this),\n+                THREAD->name());\n@@ -4430,1 +4483,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":55,"deletions":3,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -498,0 +498,8 @@\n+\n+  JavaThread* init_thread()  { return Atomic::load(&_init_thread); }\n+  \/\/ We can safely access the name as long as we hold the _init_monitor.\n+  const char* init_thread_name() {\n+    assert(_init_monitor->owned_by_self(), \"Must hold _init_monitor here\");\n+    return init_thread()->name_raw();\n+  }\n+\n@@ -507,1 +515,1 @@\n-  bool is_init_thread(JavaThread *thread)  { return thread == Atomic::load(&_init_thread); }\n+  bool is_init_thread(JavaThread *thread)  { return thread == init_thread(); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1591,0 +1591,7 @@\n+\/\/ Like name() but doesn't include the protection check. This must only be\n+\/\/ called when it is known to be safe, even though the protection check can't tell\n+\/\/ that e.g. when this thread is the init_thread() - see instanceKlass.cpp.\n+const char* JavaThread::name_raw() const  {\n+  return get_thread_name_string();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -903,0 +903,1 @@\n+  const char* name_raw() const;\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}