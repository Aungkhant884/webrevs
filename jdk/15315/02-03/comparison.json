{"files":[{"patch":"@@ -89,1 +89,1 @@\n-            return reason.equals(\"disallowed by ciReplay\");\n+            return reason.equals(\"failed to inline: disallowed by ciReplay\");\n@@ -93,1 +93,1 @@\n-            return reason.equals(\"unloaded signature classes\");\n+            return reason.equals(\"failed to inline: unloaded signature classes\");\n@@ -105,1 +105,1 @@\n-            return reason.equals(\"inlining too deep\");\n+            return reason.equals(\"failed to inline: inlining too deep\");\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/InliningBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   not inlineable\");\n-        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   no static binding\");\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   failed to inline: not inlineable\");\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   failed to inline: no static binding\");\n@@ -128,1 +128,1 @@\n-        analyzer.shouldNotMatch(\"java\\\\.lang\\\\.invoke\\\\..+::linkToTargetMethod \\\\(9 bytes\\\\)   not inlineable\");\n+        analyzer.shouldNotMatch(\"java\\\\.lang\\\\.invoke\\\\..+::linkToTargetMethod \\\\(9 bytes\\\\)   failed to inline: not inlineable\");\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/ResolvedClassTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}