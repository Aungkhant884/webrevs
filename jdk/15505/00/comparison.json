{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -289,1 +289,0 @@\n-                    return r;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/SSLStreams.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315436\n+ * @summary Test if HttpsServer sends the TLS alerts produced\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ * @run testng\/othervm HttpsServerAlertTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpsConfigurator;\n+import com.sun.net.httpserver.HttpsParameters;\n+import com.sun.net.httpserver.HttpsServer;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static org.testng.Assert.fail;\n+\n+public class HttpsServerAlertTest {\n+\n+    static final InetSocketAddress LOOPBACK_ADDR = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+\n+    static final boolean ENABLE_LOGGING = true;\n+    static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    SSLContext sslContext;\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        if (ENABLE_LOGGING) {\n+            ConsoleHandler ch = new ConsoleHandler();\n+            LOGGER.setLevel(Level.ALL);\n+            ch.setLevel(Level.ALL);\n+            LOGGER.addHandler(ch);\n+        }\n+        sslContext = new SimpleSSLContext().get();\n+        SSLContext.setDefault(sslContext);\n+    }\n+\n+    @Test\n+    public void testProtocolMismatch() throws Exception {\n+        SSLSocketFactory sf = sslContext.getSocketFactory();\n+        var server = HttpsServer.create(LOOPBACK_ADDR, 0);\n+        server.setHttpsConfigurator(new Configurator(sslContext));\n+        server.start();\n+        try (SSLSocket s = (SSLSocket) sf.createSocket()) {\n+            \/\/ server only accepts TLS 1.3\n+            s.setEnabledProtocols(new String[]{\"TLSv1.2\"});\n+            s.connect(server.getAddress());\n+            s.startHandshake();\n+            fail(\"Expected a handshake failure\");\n+        } catch (SSLHandshakeException e) {\n+            System.out.println(\"Got exception: \" + e);\n+            if (e.getCause() instanceof EOFException ||\n+                    !e.getMessage().contains(\"protocol_version\"))\n+                throw e;\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    private static class Configurator extends HttpsConfigurator {\n+        public Configurator(SSLContext sslContext) {\n+            super(sslContext);\n+        }\n+\n+        @Override\n+        public void configure(HttpsParameters params) {\n+            SSLParameters sslParams = getSSLContext().getDefaultSSLParameters();\n+            sslParams.setProtocols(new String[]{\"TLSv1.3\"});\n+            params.setSSLParameters(sslParams);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/HttpsServerAlertTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}