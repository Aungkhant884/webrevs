{"files":[{"patch":"@@ -1374,1 +1374,0 @@\n-  Arena *arena = CURRENT_ENV->arena();\n@@ -1376,0 +1375,1 @@\n+    Arena *arena = CURRENT_ENV->arena();\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,2 +78,10 @@\n-                                 int expected_size) {\n-\n+                                 int expected_size)\n+                                 : _arena(arena),\n+                                   _ci_metadata(arena, expected_size, 0, NULL),\n+                                   _unloaded_methods(arena, 4, 0, NULL),\n+                                   _unloaded_klasses(arena, 8, 0, NULL),\n+                                   _unloaded_instances(arena, 4, 0, NULL),\n+                                   _return_addresses(arena, 8, 0, NULL),\n+                                   _symbols(arena, 100, 0, NULL),\n+                                   _next_ident(_shared_ident_limit),\n+                                   _non_perm_count(0) {\n@@ -83,5 +91,0 @@\n-  _non_perm_count = 0;\n-\n-  _next_ident = _shared_ident_limit;\n-  _arena = arena;\n-  _ci_metadata = new (arena) GrowableArray<ciMetadata*>(arena, expected_size, 0, NULL);\n@@ -90,1 +93,0 @@\n-\n@@ -92,1 +94,1 @@\n-    _ci_metadata->appendAll(_shared_ci_metadata);\n+    _ci_metadata.appendAll(_shared_ci_metadata);\n@@ -94,8 +96,0 @@\n-\n-  _unloaded_methods = new (arena) GrowableArray<ciMethod*>(arena, 4, 0, NULL);\n-  _unloaded_klasses = new (arena) GrowableArray<ciKlass*>(arena, 8, 0, NULL);\n-  _unloaded_instances = new (arena) GrowableArray<ciInstance*>(arena, 4, 0, NULL);\n-  _return_addresses =\n-    new (arena) GrowableArray<ciReturnAddress*>(arena, 8, 0, NULL);\n-\n-  _symbols = new (arena) GrowableArray<ciSymbol*>(arena, 100, 0, NULL);\n@@ -148,2 +142,0 @@\n-  _ci_metadata = new (_arena) GrowableArray<ciMetadata*>(_arena, 64, 0, NULL);\n-\n@@ -169,2 +161,2 @@\n-  for (int len = -1; len != _ci_metadata->length(); ) {\n-    len = _ci_metadata->length();\n+  for (int len = -1; len != _ci_metadata.length(); ) {\n+    len = _ci_metadata.length();\n@@ -172,1 +164,1 @@\n-      ciMetadata* obj = _ci_metadata->at(i2);\n+      ciMetadata* obj = _ci_metadata.at(i2);\n@@ -197,2 +189,0 @@\n-\n-\n@@ -207,1 +197,1 @@\n-  _shared_ci_metadata = _ci_metadata;\n+  _shared_ci_metadata = &_ci_metadata;\n@@ -220,1 +210,1 @@\n-  _symbols->push(s);\n+  _symbols.push(s);\n@@ -226,2 +216,2 @@\n-  for (int i = 0; i < _symbols->length(); i++) {\n-    ciSymbol* s = _symbols->at(i);\n+  for (int i = 0; i < _symbols.length(); i++) {\n+    ciSymbol* s = _symbols.at(i);\n@@ -279,1 +269,1 @@\n-  int index = _ci_metadata->find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n+  int index = _ci_metadata.find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n@@ -284,1 +274,1 @@\n-  return _ci_metadata->at(index)->as_metadata();\n+  return _ci_metadata.at(index)->as_metadata();\n@@ -300,2 +290,2 @@\n-    for (int j = 0; j< _ci_metadata->length(); j++) {\n-      Metadata* o = _ci_metadata->at(j)->constant_encoding();\n+    for (int j = 0; j < _ci_metadata.length(); j++) {\n+      Metadata* o = _ci_metadata.at(j)->constant_encoding();\n@@ -307,1 +297,1 @@\n-  int len = _ci_metadata->length();\n+  int len = _ci_metadata.length();\n@@ -309,1 +299,1 @@\n-  int index = _ci_metadata->find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n+  int index = _ci_metadata.find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n@@ -312,2 +302,2 @@\n-    for (int i=0; i<_ci_metadata->length(); i++) {\n-      if (_ci_metadata->at(i)->constant_encoding() == key) {\n+    for (int i = 0; i < _ci_metadata.length(); i++) {\n+      if (_ci_metadata.at(i)->constant_encoding() == key) {\n@@ -327,1 +317,1 @@\n-    if (len != _ci_metadata->length()) {\n+    if (len != _ci_metadata.length()) {\n@@ -330,1 +320,1 @@\n-      index = _ci_metadata->find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n+      index = _ci_metadata.find_sorted<Metadata*, ciObjectFactory::metadata_compare>(key, found);\n@@ -333,1 +323,1 @@\n-    _ci_metadata->insert_before(index, new_object);\n+    _ci_metadata.insert_before(index, new_object);\n@@ -336,1 +326,1 @@\n-  return _ci_metadata->at(index)->as_metadata();\n+  return _ci_metadata.at(index)->as_metadata();\n@@ -423,2 +413,2 @@\n-  for (int i = 0; i < _unloaded_methods->length(); i++) {\n-    ciMethod* entry = _unloaded_methods->at(i);\n+  for (int i = 0; i < _unloaded_methods.length(); i++) {\n+    ciMethod* entry = _unloaded_methods.at(i);\n@@ -448,1 +438,1 @@\n-  _unloaded_methods->append(new_method);\n+  _unloaded_methods.append(new_method);\n@@ -471,2 +461,2 @@\n-  for (int i=0; i<_unloaded_klasses->length(); i++) {\n-    ciKlass* entry = _unloaded_klasses->at(i);\n+  for (int i = 0; i < _unloaded_klasses.length(); i++) {\n+    ciKlass* entry = _unloaded_klasses.at(i);\n@@ -522,1 +512,1 @@\n-  _unloaded_klasses->append(new_klass);\n+  _unloaded_klasses.append(new_klass);\n@@ -534,2 +524,2 @@\n-  for (int i=0; i<_unloaded_instances->length(); i++) {\n-    ciInstance* entry = _unloaded_instances->at(i);\n+  for (int i = 0; i < _unloaded_instances.length(); i++) {\n+    ciInstance* entry = _unloaded_instances.at(i);\n@@ -547,1 +537,1 @@\n-  _unloaded_instances->append(new_instance);\n+  _unloaded_instances.append(new_instance);\n@@ -614,2 +604,2 @@\n-  for (int i=0; i<_return_addresses->length(); i++) {\n-    ciReturnAddress* entry = _return_addresses->at(i);\n+  for (int i = 0; i < _return_addresses.length(); i++) {\n+    ciReturnAddress* entry = _return_addresses.at(i);\n@@ -624,1 +614,1 @@\n-  _return_addresses->append(new_ret_addr);\n+  _return_addresses.append(new_ret_addr);\n@@ -690,3 +680,2 @@\n-  if (_ci_metadata == NULL) return;\n-  for (int j = 0; j< _ci_metadata->length(); j++) {\n-    Metadata* o = _ci_metadata->at(j)->constant_encoding();\n+  for (int j = 0; j < _ci_metadata.length(); j++) {\n+    Metadata* o = _ci_metadata.at(j)->constant_encoding();\n@@ -700,1 +689,1 @@\n-  int len = _ci_metadata->length();\n+  int len = _ci_metadata.length();\n@@ -702,2 +691,2 @@\n-  for (int i=0; i<len; i++) {\n-    _ci_metadata->at(i)->print();\n+  for (int i = 0; i < len; i++) {\n+    _ci_metadata.at(i)->print();\n@@ -722,3 +711,3 @@\n-             _non_perm_count, _ci_metadata->length(), _unloaded_methods->length(),\n-             _unloaded_instances->length(),\n-             _unloaded_klasses->length());\n+             _non_perm_count, _ci_metadata.length(), _unloaded_methods.length(),\n+             _unloaded_instances.length(),\n+             _unloaded_klasses.length());\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":50,"deletions":61,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -49,8 +49,8 @@\n-  Arena*                    _arena;\n-  GrowableArray<ciMetadata*>*        _ci_metadata;\n-  GrowableArray<ciMethod*>* _unloaded_methods;\n-  GrowableArray<ciKlass*>* _unloaded_klasses;\n-  GrowableArray<ciInstance*>* _unloaded_instances;\n-  GrowableArray<ciReturnAddress*>* _return_addresses;\n-  GrowableArray<ciSymbol*>* _symbols;  \/\/ keep list of symbols created\n-  int                       _next_ident;\n+  Arena*                           _arena;\n+  GrowableArray<ciMetadata*>       _ci_metadata;\n+  GrowableArray<ciMethod*>         _unloaded_methods;\n+  GrowableArray<ciKlass*>          _unloaded_klasses;\n+  GrowableArray<ciInstance*>       _unloaded_instances;\n+  GrowableArray<ciReturnAddress*>  _return_addresses;\n+  GrowableArray<ciSymbol*>         _symbols;  \/\/ keep list of symbols created\n+  int                              _next_ident;\n@@ -142,1 +142,1 @@\n-  GrowableArray<ciMetadata*>* get_ci_metadata() const { return _ci_metadata; }\n+  GrowableArray<ciMetadata*>* get_ci_metadata() { return &_ci_metadata; }\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,1 +40,2 @@\n-ciSignature::ciSignature(ciKlass* accessing_klass, const constantPoolHandle& cpool, ciSymbol* symbol) {\n+ciSignature::ciSignature(ciKlass* accessing_klass, const constantPoolHandle& cpool, ciSymbol* symbol)\n+  : _symbol(symbol), _accessing_klass(accessing_klass), _types(CURRENT_ENV->arena(), 8, 0, NULL) {\n@@ -44,2 +45,0 @@\n-  _accessing_klass = accessing_klass;\n-  _symbol = symbol;\n@@ -48,2 +47,0 @@\n-  Arena* arena = env->arena();\n-  _types = new (arena) GrowableArray<ciType*>(arena, 8, 0, NULL);\n@@ -65,1 +62,0 @@\n-    _types->append(type);\n@@ -67,1 +63,2 @@\n-      \/\/ Done processing the return type; do not add it into the count.\n+      \/\/ don't include return type in size calculation\n+      _return_type = type;\n@@ -70,0 +67,1 @@\n+    _types.append(type);\n@@ -71,1 +69,0 @@\n-    count++;\n@@ -74,38 +71,0 @@\n-  _count = count;\n-}\n-\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciSignature::ciSignature\n-ciSignature::ciSignature(ciKlass* accessing_klass, ciSymbol* symbol, ciMethodType* method_type) :\n-  _symbol(symbol),\n-  _accessing_klass(accessing_klass),\n-  _size( method_type->ptype_slot_count()),\n-  _count(method_type->ptype_count())\n-{\n-  ASSERT_IN_VM;\n-  EXCEPTION_CONTEXT;\n-  Arena* arena = CURRENT_ENV->arena();\n-  _types = new (arena) GrowableArray<ciType*>(arena, _count + 1, 0, NULL);\n-  for (int i = 0; i < _count; i++) {\n-    _types->append(method_type->ptype_at(i));\n-  }\n-  _types->append(method_type->rtype());\n-}\n-\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciSignature::return_type\n-\/\/\n-\/\/ What is the return type of this signature?\n-ciType* ciSignature::return_type() const {\n-  return _types->at(_count);\n-}\n-\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciSignature::type_at\n-\/\/\n-\/\/ What is the type of the index'th element of this\n-\/\/ signature?\n-ciType* ciSignature::type_at(int index) const {\n-  assert(index < _count, \"out of bounds\");\n-  \/\/ The first _klasses element holds the return klass.\n-  return _types->at(index);\n@@ -122,1 +81,3 @@\n-  if (!this->as_symbol()->equals(that->as_symbol()))  return false;\n+  if (!this->as_symbol()->equals(that->as_symbol())) {\n+    return false;\n+  }\n@@ -124,2 +85,7 @@\n-  for (int i = 0; i < _count; i++) {\n-    if (this->type_at(i) != that->type_at(i))         return false;\n+  if (_types.length() != that->_types.length()) {\n+    return false;\n+  }\n+  for (int i = 0; i < _types.length(); i++) {\n+    if (this->type_at(i) != that->type_at(i)) {\n+      return false;\n+    }\n@@ -128,1 +94,3 @@\n-  if (this->return_type() != that->return_type())     return false;\n+  if (this->return_type() != that->return_type()) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciSignature.cpp","additions":18,"deletions":50,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,2 @@\n-  GrowableArray<ciType*>* _types;\n+  GrowableArray<ciType*> _types; \/\/ parameter types\n+  ciType* _return_type;\n@@ -44,1 +45,0 @@\n-  int _count;  \/\/ number of parameter types in the signature\n@@ -51,1 +51,0 @@\n-  ciSignature(ciKlass* accessing_klass,                           ciSymbol* signature, ciMethodType* method_type);\n@@ -59,2 +58,2 @@\n-  ciType*   return_type() const;\n-  ciType*   type_at(int index) const;\n+  ciType*   return_type() const                  { return _return_type; }\n+  ciType*   type_at(int index) const             { return _types.at(index); }\n@@ -63,1 +62,1 @@\n-  int       count() const                        { return _count; }\n+  int       count() const                        { return _types.length(); }\n","filename":"src\/hotspot\/share\/ci\/ciSignature.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,8 +58,4 @@\n-ciTypeFlow::JsrSet::JsrSet(Arena* arena, int default_len) {\n-  if (arena != NULL) {\n-    \/\/ Allocate growable array in Arena.\n-    _set = new (arena) GrowableArray<JsrRecord*>(arena, default_len, 0, NULL);\n-  } else {\n-    \/\/ Allocate growable array in current ResourceArea.\n-    _set = new GrowableArray<JsrRecord*>(4, 0, NULL);\n-  }\n+\n+\/\/ Allocate growable array storage in Arena.\n+ciTypeFlow::JsrSet::JsrSet(Arena* arena, int default_len) : _set(arena, default_len, 0, NULL) {\n+  assert(arena != NULL, \"invariant\");\n@@ -68,0 +64,3 @@\n+\/\/ Allocate growable array storage in current ResourceArea.\n+ciTypeFlow::JsrSet::JsrSet(int default_len) : _set(default_len, 0, NULL) {}\n+\n@@ -72,1 +71,1 @@\n-  jsrs->_set->clear();\n+  jsrs->_set.clear();\n@@ -74,1 +73,1 @@\n-    jsrs->_set->append(_set->at(i));\n+    jsrs->_set.append(_set.at(i));\n@@ -161,1 +160,1 @@\n-      _set->at_put(pos, record);\n+      _set.at_put(pos, record);\n@@ -173,2 +172,2 @@\n-    temp = _set->at(pos);\n-    _set->at_put(pos, swap);\n+    temp = _set.at(pos);\n+    _set.at_put(pos, swap);\n@@ -177,1 +176,1 @@\n-  _set->append(swap);\n+  _set.append(swap);\n@@ -191,2 +190,2 @@\n-      for (int j = i+1; j < len ; j++) {\n-        _set->at_put(j-1, _set->at(j));\n+      for (int j = i + 1; j < len ; j++) {\n+        _set.at_put(j - 1, _set.at(j));\n@@ -194,1 +193,1 @@\n-      _set->trunc_to(len-1);\n+      _set.trunc_to(len - 1);\n@@ -242,1 +241,1 @@\n-      _set->at(i)->print_on(st);\n+      _set.at(i)->print_on(st);\n@@ -245,1 +244,1 @@\n-    _set->at(i)->print_on(st);\n+    _set.at(i)->print_on(st);\n@@ -374,1 +373,1 @@\n-    JsrSet* jsrs = new JsrSet(NULL, 16);\n+    JsrSet* jsrs = new JsrSet(4);\n@@ -1587,1 +1586,1 @@\n-                         ciTypeFlow::JsrSet* jsrs) {\n+                         ciTypeFlow::JsrSet* jsrs) : _predecessors(outer->arena(), 1, 0, NULL) {\n@@ -1592,1 +1591,0 @@\n-  _predecessors = new (outer->arena()) GrowableArray<Block*>(outer->arena(), 1, 0, NULL);\n@@ -1922,1 +1920,1 @@\n-  if (_predecessors == NULL) {\n+  if (_predecessors.is_empty()) {\n@@ -1925,1 +1923,1 @@\n-    int num_predecessors = _predecessors->length();\n+    int num_predecessors = _predecessors.length();\n@@ -1928,1 +1926,1 @@\n-      Block* predecessor = _predecessors->at(i);\n+      Block* predecessor = _predecessors.at(i);\n@@ -1982,4 +1980,0 @@\n-  _methodBlocks = method->get_method_blocks();\n-  _max_locals = method->max_locals();\n-  _max_stack = method->max_stack();\n-  _code_size = method->code_size();\n@@ -1992,3 +1986,3 @@\n-  _ciblock_count = _methodBlocks->num_blocks();\n-  _idx_to_blocklist = NEW_ARENA_ARRAY(arena(), GrowableArray<Block*>*, _ciblock_count);\n-  for (int i = 0; i < _ciblock_count; i++) {\n+  int ciblock_count = _method->get_method_blocks()->num_blocks();\n+  _idx_to_blocklist = NEW_ARENA_ARRAY(arena(), GrowableArray<Block*>*, ciblock_count);\n+  for (int i = 0; i < ciblock_count; i++) {\n@@ -1998,1 +1992,0 @@\n-  _jsr_count = 0;\n@@ -2068,1 +2061,1 @@\n-  ciBlock* ciblk = _methodBlocks->block_containing(bci);\n+  ciBlock* ciblk = _method->get_method_blocks()->block_containing(bci);\n@@ -2096,1 +2089,1 @@\n-                                                           _jsr_count,\n+                                                           2,\n@@ -2640,2 +2633,2 @@\n-  ciBlock* dummy = _methodBlocks->make_dummy_block();\n-  JsrSet* root_set = new JsrSet(NULL, 0);\n+  ciBlock* dummy = _method->get_method_blocks()->make_dummy_block();\n+  JsrSet* root_set = new JsrSet(0);\n@@ -2714,1 +2707,1 @@\n-  JsrSet* temp_set = new JsrSet(NULL, 16);\n+  JsrSet* temp_set = new JsrSet(4);\n@@ -2842,1 +2835,1 @@\n-  Block* new_block = new (a) Block(this, _methodBlocks->block(ciBlockIndex), jsrs);\n+  Block* new_block = new (a) Block(this, _method->get_method_blocks()->block(ciBlockIndex), jsrs);\n@@ -2907,3 +2900,3 @@\n-  JsrSet* jsrs = new ciTypeFlow::JsrSet(NULL);\n-  int        index = _methodBlocks->block_containing(bci)->index();\n-  int    dom_index = _methodBlocks->block_containing(dom_bci)->index();\n+  JsrSet* jsrs = new ciTypeFlow::JsrSet();\n+  int        index = _method->get_method_blocks()->block_containing(bci)->index();\n+  int    dom_index = _method->get_method_blocks()->block_containing(dom_bci)->index();\n@@ -2991,1 +2984,1 @@\n-  ciMethodBlocks  *mblks = _methodBlocks;\n+  ciMethodBlocks* mblks = _method->get_method_blocks();\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":37,"deletions":44,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-  ciMethodBlocks* _methodBlocks;\n@@ -42,4 +41,0 @@\n-  \/\/ information cached from the method:\n-  int _max_locals;\n-  int _max_stack;\n-  int _code_size;\n@@ -65,4 +60,4 @@\n-  int       max_locals() const { return _max_locals; }\n-  int       max_stack() const  { return _max_stack; }\n-  int       max_cells() const  { return _max_locals + _max_stack; }\n-  int       code_size() const  { return _code_size; }\n+  int       max_locals() const { return method()->max_locals(); }\n+  int       max_stack() const  { return method()->max_stack(); }\n+  int       max_cells() const  { return max_locals() + max_stack(); }\n+  int       code_size() const  { return method()->code_size(); }\n@@ -107,1 +102,1 @@\n-    GrowableArray<JsrRecord*>* _set;\n+    GrowableArray<JsrRecord*> _set;\n@@ -110,1 +105,1 @@\n-      return _set->at(i);\n+      return _set.at(i);\n@@ -122,0 +117,1 @@\n+    JsrSet(int default_len = 4);\n@@ -135,1 +131,1 @@\n-    int size() const { return _set->length(); }\n+    int size() const { return _set.length(); }\n@@ -526,1 +522,1 @@\n-    GrowableArray<Block*>*           _predecessors;\n+    GrowableArray<Block*>            _predecessors;\n@@ -617,2 +613,1 @@\n-      assert(_predecessors != NULL, \"must be filled in\");\n-      return _predecessors;\n+      return &_predecessors;\n@@ -798,2 +793,0 @@\n-  \/\/ count of ciBlocks\n-  int _ciblock_count;\n@@ -875,1 +868,0 @@\n-  int _jsr_count;\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -868,3 +868,2 @@\n-  nonstatic_field(ciObjectFactory,             _ci_metadata,                                  GrowableArray<ciMetadata*>*)           \\\n-  nonstatic_field(ciObjectFactory,             _symbols,                                      GrowableArray<ciSymbol*>*)             \\\n-  nonstatic_field(ciObjectFactory,             _unloaded_methods,                             GrowableArray<ciMethod*>*)             \\\n+  nonstatic_field(ciObjectFactory,             _ci_metadata,                                  GrowableArray<ciMetadata*>)            \\\n+  nonstatic_field(ciObjectFactory,             _symbols,                                      GrowableArray<ciSymbol*>)              \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-    unloadedMethodsField = type.getAddressField(\"_unloaded_methods\");\n@@ -57,1 +56,0 @@\n-  private static AddressField unloadedMethodsField;\n@@ -78,1 +76,2 @@\n-    return GrowableArray.create(ciMetadataField.getValue(getAddress()), ciMetadataConstructor);\n+    Address addr = getAddress().addOffsetTo(ciMetadataField.getOffset());\n+    return GrowableArray.create(addr, ciMetadataConstructor);\n@@ -82,1 +81,2 @@\n-    return GrowableArray.create(symbolsField.getValue(getAddress()), ciSymbolConstructor);\n+    Address addr = getAddress().addOffsetTo(symbolsField.getOffset());\n+    return GrowableArray.create(addr, ciSymbolConstructor);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ci\/ciObjectFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}