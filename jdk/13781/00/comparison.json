{"files":[{"patch":"@@ -697,2 +697,0 @@\n-com\/sun\/jdi\/JdbLastErrorTest.java                               8305913 windows-x64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8292302\n- * @summary Test persistence of native last error value under jdb (Windows)\n- * @requires (os.family == \"windows\") & (vm.compMode != \"Xcomp\") & (vm.compMode != \"Xint\") & (vm.gc != \"Z\")\n- * @library \/test\/lib\n- * @enablePreview\n- * @run main\/othervm JdbLastErrorTest\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import lib.jdb.JdbCommand;\n-import lib.jdb.JdbTest;\n-\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.SymbolLookup;\n-import java.lang.foreign.ValueLayout;\n-import java.lang.invoke.MethodHandle;\n-\n-class TestNativeLastError {\n-\n-    static final int VALUE = 42;\n-\n-    public static void main(String[] args) throws Throwable {\n-        testWindows();\n-    }\n-\n-    private static void testWindows() throws Throwable {\n-        Linker linker = Linker.nativeLinker();\n-        System.loadLibrary(\"Kernel32\");\n-        SymbolLookup lookup = SymbolLookup.loaderLookup();\n-        MethodHandle getLastError = linker.downcallHandle(\n-            lookup.find(\"GetLastError\").orElseThrow(),\n-            FunctionDescriptor.of(ValueLayout.JAVA_INT));\n-        MethodHandle setLastError = linker.downcallHandle(\n-            lookup.find(\"SetLastError\").orElseThrow(),\n-            FunctionDescriptor.ofVoid(ValueLayout.JAVA_INT));\n-\n-        for (int i = 0; i < 10; i++) {\n-            setLastError.invoke(VALUE);\n-            int lastError = (int) getLastError.invoke();\n-            System.out.println(\"lastError = \" + lastError);\n-            if (lastError != VALUE) {\n-                System.err.println(\"iteration \" + i + \" got lastError = \" + lastError\n-                                   + \" (expected \" + VALUE + \")\");\n-                throw new RuntimeException(\"failed, lastError = \" + lastError);\n-            }\n-        }\n-    }\n-}\n-\n-public class JdbLastErrorTest extends JdbTest {\n-\n-    public static void main(String argv[]) {\n-        LaunchOptions lo = new LaunchOptions(DEBUGGEE_CLASS);\n-        lo.addVMOptions(\"--enable-preview\");\n-        new JdbLastErrorTest(lo).run();\n-    }\n-\n-    private JdbLastErrorTest(LaunchOptions launchOptions) {\n-        super(launchOptions);\n-    }\n-\n-    private static final String DEBUGGEE_CLASS = TestNativeLastError.class.getName();\n-\n-    @Override\n-    protected void runCases() {\n-        \/\/ Simply run app within jdb.\n-        \/\/ App should finish and exit, or report last error mismatch on failure.\n-        JdbCommand runCommand = JdbCommand.run();\n-        runCommand.allowExit();\n-        jdb.command(runCommand);\n-        \/\/ Good lastError should be reported in debuggee output:\n-        new OutputAnalyzer(getDebuggeeOutput()).shouldMatch(\"lastError = \" + Integer.toString(TestNativeLastError.VALUE));\n-        \/\/ Exception would be captured in jdb output:\n-        new OutputAnalyzer(jdb.getJdbOutput()).shouldNotMatch(\"failed, lastError = \");\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbLastErrorTest.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"}]}