{"files":[{"patch":"@@ -209,5 +209,11 @@\n-            \/\/ Check the response\n-            if (debug != null &&\n-                con.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-                debug.println(\"Received HTTP error: \" + con.getResponseCode()\n-                    + \" - \" + con.getResponseMessage());\n+            \/\/ Check the response.  Non-200 codes will generate an exception\n+            \/\/ but path validation may complete successfully if revocation info\n+            \/\/ can be obtained elsewhere (e.g. CRL).\n+            int respCode = con.getResponseCode();\n+            if (respCode != HttpURLConnection.HTTP_OK) {\n+                String msg = \"Received HTTP error: \" + respCode + \" - \" +\n+                        con.getResponseMessage();\n+                if (debug != null) {\n+                    debug.println(msg);\n+                }\n+                throw new IOException(msg);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSP.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,2 @@\n+import java.util.concurrent.TimeUnit;\n+\n@@ -117,5 +119,4 @@\n-            for (int i = 0; (i < 100 && !ocspResponder.isServerReady()); i++) {\n-                Thread.sleep(50);\n-            }\n-            if (!ocspResponder.isServerReady()) {\n-                throw new RuntimeException(\"Server not ready yet\");\n+            boolean readyStatus =\n+                    ocspResponder.awaitServerReady(5, TimeUnit.SECONDS);\n+            if (!readyStatus) {\n+                throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/OCSP\/GetAndPostTests.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    private volatile boolean serverReady = false;\n+    private CountDownLatch serverReady = new CountDownLatch(1);\n@@ -220,3 +220,0 @@\n-                    \/\/ Singal ready\n-                    serverReady = true;\n-\n@@ -228,0 +225,4 @@\n+                    \/\/ Decrement the latch, allowing any waiting entities\n+                    \/\/ to proceed with their requests.\n+                    serverReady.countDown();\n+\n@@ -261,1 +262,1 @@\n-                    serverReady = false;\n+                    serverReady = new CountDownLatch(1);\n@@ -501,1 +502,1 @@\n-        if (serverReady) {\n+        if (serverReady.getCount() == 0) {\n@@ -511,1 +512,9 @@\n-     * Use to check if OCSP server is ready to accept connection.\n+     * Allow SimpleOCSPServer consumers to wait for the server to be in\n+     * the ready state before sending requests.\n+     *\n+     * @param timeout the length of time to wait for the server to be ready\n+     * @param unit the unit of time applied to the timeout parameter\n+     *\n+     * @return true if the server enters the ready state, false if the\n+     *      timeout period elapses while the caller is waiting for the server\n+     *      to become ready.\n@@ -513,1 +522,1 @@\n-     * @return true if server ready, false otherwise\n+     * @throws InterruptedException if the current thread is interrupted.\n@@ -515,2 +524,3 @@\n-    public boolean isServerReady() {\n-        return serverReady;\n+    public boolean awaitServerReady(long timeout, TimeUnit unit)\n+            throws InterruptedException {\n+        return serverReady.await(timeout, unit);\n","filename":"test\/jdk\/java\/security\/testlibrary\/SimpleOCSPServer.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -565,5 +565,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -618,5 +616,3 @@\n-        for (int i = 0; (i < 100 && !intOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        readyStatus = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/javax\/net\/ssl\/Stapling\/HttpsUrlConnClient.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -506,5 +506,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -559,5 +557,3 @@\n-        for (int i = 0; (i < 100 && !intOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        readyStatus = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/javax\/net\/ssl\/Stapling\/SSLEngineWithStapling.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -435,5 +435,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Root OCSP responder not ready yet\");\n+        boolean rootOcspReady = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!rootOcspReady) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -496,7 +494,5 @@\n-        \/\/ Wait 5 seconds for server ready\n-        for (int i = 0; (i < 100 && (!intOcsp.isServerReady() ||\n-                !rootOcsp.isServerReady())); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady() || !rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        \/\/ Wait up to 5 seconds for each server\n+        boolean rootOcspReady = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        boolean intOcspReady = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!rootOcspReady || !intOcspReady) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -566,6 +562,4 @@\n-        for (int i = 0; (i < 100 && (!intOcsp.isServerReady() ||\n-                        !rootOcsp.isServerReady())); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady() || !rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean rootOcspReady = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        boolean intOcspReady = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!rootOcspReady || !intOcspReady) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -605,6 +599,4 @@\n-        for (int i = 0; (i < 100 && (!intOcsp.isServerReady() ||\n-                        !rootOcsp.isServerReady())); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady() || !rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean rootOcspReady = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        boolean intOcspReady = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!rootOcspReady || !intOcspReady) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -657,6 +649,4 @@\n-        for (int i = 0; (i < 100 && (!intOcsp.isServerReady() ||\n-                !rootOcsp.isServerReady())); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady() || !rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        rootOcspReady = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        intOcspReady = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!rootOcspReady || !intOcspReady) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -962,5 +952,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -1015,5 +1003,3 @@\n-        for (int i = 0; (i < 100 && !intOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        readyStatus = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/javax\/net\/ssl\/Stapling\/SSLSocketWithStapling.java","additions":27,"deletions":41,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -699,5 +699,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -752,5 +750,3 @@\n-        for (int i = 0; (i < 100 && !intOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        readyStatus = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/javax\/net\/ssl\/Stapling\/StapleEnableProps.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.security.spec.ECGenParameterSpec;\n@@ -57,2 +58,2 @@\n-    \/\/ Turn on debugging\n-    static final boolean debug = true;\n+    \/\/ Enable debugging for additional output\n+    static final boolean debug = false;\n@@ -102,4 +103,3 @@\n-        sun.security.testlibrary.CertificateBuilder cbld =\n-                new sun.security.testlibrary.CertificateBuilder();\n-        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n-        keyGen.initialize(2048);\n+        CertificateBuilder cbld = new CertificateBuilder();\n+        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"EC\");\n+        keyGen.initialize(new ECGenParameterSpec(\"secp256r1\"));\n@@ -110,1 +110,1 @@\n-        \/\/ Generate Root, IntCA, EE keys\n+        \/\/ Generate Root and EE keys\n@@ -128,1 +128,1 @@\n-                \"SHA256withRSA\");\n+                \"SHA256withECDSA\");\n@@ -138,2 +138,1 @@\n-        rootOcsp = new sun.security.testlibrary.SimpleOCSPServer(rootKeystore,\n-                passwd, ROOT_ALIAS, null);\n+        rootOcsp = new SimpleOCSPServer(rootKeystore, passwd, ROOT_ALIAS, null);\n@@ -146,5 +145,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -152,0 +149,6 @@\n+\/\/        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n+\/\/            Thread.sleep(50);\n+\/\/        }\n+\/\/        if (!rootOcsp.isServerReady()) {\n+\/\/            throw new RuntimeException(\"Server not ready yet\");\n+\/\/        }\n@@ -170,1 +173,1 @@\n-        boolean[] kuBits = {true, false, true, false, false, false,\n+        boolean[] kuBits = {true, false, false, false, false, false,\n@@ -181,1 +184,1 @@\n-                \"SHA256withRSA\");\n+                \"SHA256withECDSA\");\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/OCSP\/OCSPNoContentLength.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -307,5 +307,3 @@\n-        for (int i = 0; (i < 100 && !rootOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!rootOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n@@ -360,5 +358,3 @@\n-        for (int i = 0; (i < 100 && !intOcsp.isServerReady()); i++) {\n-            Thread.sleep(50);\n-        }\n-        if (!intOcsp.isServerReady()) {\n-            throw new RuntimeException(\"Server not ready yet\");\n+        readyStatus = intOcsp.awaitServerReady(5, TimeUnit.SECONDS);\n+        if (!readyStatus) {\n+            throw new RuntimeException(\"Server not ready\");\n","filename":"test\/jdk\/sun\/security\/ssl\/Stapling\/java.base\/sun\/security\/ssl\/StatusResponseManagerTests.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"}]}