{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-  vmassert(_anchor.last_Java_pc() != NULL, \"not walkable\");\n+  vmassert(_anchor.last_Java_pc() != nullptr, \"not walkable\");\n@@ -69,1 +69,1 @@\n-    if (addr == NULL || ret_sp == NULL ) {\n+    if (addr == nullptr || ret_sp == nullptr ) {\n@@ -77,2 +77,2 @@\n-      \/\/ C2 and JVMCI use ebp as a general register see if NULL fp helps\n-      frame ret_frame2(ret_sp, NULL, addr);\n+      \/\/ C2 and JVMCI use ebp as a general register see if null fp helps\n+      frame ret_frame2(ret_sp, nullptr, addr);\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/javaThread_bsd_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-  if (uc != NULL) {\n+  if (uc != nullptr) {\n@@ -151,3 +151,3 @@\n-    epc = NULL;\n-    if (ret_sp) *ret_sp = (intptr_t *)NULL;\n-    if (ret_fp) *ret_fp = (intptr_t *)NULL;\n+    epc = nullptr;\n+    if (ret_sp) *ret_sp = (intptr_t *)nullptr;\n+    if (ret_fp) *ret_fp = (intptr_t *)nullptr;\n@@ -212,1 +212,1 @@\n-  address stub = NULL;\n+  address stub = nullptr;\n@@ -214,1 +214,1 @@\n-  address pc          = NULL;\n+  address pc          = nullptr;\n@@ -217,1 +217,1 @@\n-  if (info != NULL && uc != NULL && thread != NULL) {\n+  if (info != nullptr && uc != nullptr && thread != nullptr) {\n@@ -243,1 +243,1 @@\n-    if (thread->thread_state() == _thread_in_Java && stub == NULL) {\n+    if (thread->thread_state() == _thread_in_Java && stub == nullptr) {\n@@ -259,2 +259,2 @@\n-      \/\/ Catching SIGBUS here prevents the implicit SIGBUS NULL check below from\n-      \/\/ being called, so only do so if the implicit NULL check is not necessary.\n+      \/\/ Catching SIGBUS here prevents the implicit SIGBUS null check below from\n+      \/\/ being called, so only do so if the implicit null check is not necessary.\n@@ -269,1 +269,1 @@\n-        CompiledMethod* nm = (cb != NULL) ? cb->as_compiled_method_or_null() : NULL;\n+        CompiledMethod* nm = (cb != nullptr) ? cb->as_compiled_method_or_null() : nullptr;\n@@ -271,1 +271,1 @@\n-        if ((nm != NULL && nm->has_unsafe_access()) || is_unsafe_arraycopy) {\n+        if ((nm != nullptr && nm->has_unsafe_access()) || is_unsafe_arraycopy) {\n@@ -291,1 +291,1 @@\n-        report_and_die(thread, uc, NULL, 0, msg, \"%s\", detail_msg);\n+        report_and_die(thread, uc, nullptr, 0, msg, \"%s\", detail_msg);\n@@ -328,1 +328,1 @@\n-  if (stub != NULL) {\n+  if (stub != nullptr) {\n@@ -330,1 +330,1 @@\n-    if (thread != NULL) thread->set_saved_exception_pc(pc);\n+    if (thread != nullptr) thread->set_saved_exception_pc(pc);\n@@ -417,1 +417,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n@@ -468,1 +468,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n@@ -485,1 +485,1 @@\n-  if (context == NULL) return;\n+  if (context == nullptr) return;\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  if (sysctlbyname(optional, &val, &len, NULL, 0)) {\n+  if (sysctlbyname(optional, &val, &len, nullptr, 0)) {\n@@ -100,1 +100,1 @@\n-  if (sysctl(hw_conf_cache_line, 2, &cache_line_size, &sysctllen, NULL, 0)) {\n+  if (sysctl(hw_conf_cache_line, 2, &cache_line_size, &sysctllen, nullptr, 0)) {\n@@ -117,1 +117,1 @@\n-  if (sysctlbyname(\"hw.cpufamily\", &family, &sysctllen, NULL, 0)) {\n+  if (sysctlbyname(\"hw.cpufamily\", &family, &sysctllen, nullptr, 0)) {\n@@ -126,1 +126,1 @@\n-  assert(buf != NULL, \"invalid argument\");\n+  assert(buf != nullptr, \"invalid argument\");\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vm_version_bsd_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}