{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.net.http.common.Alpns;\n@@ -110,1 +111,1 @@\n-        if (alpn != null && alpn.length != 0 && !contains(alpn, \"http\/1.1\")) {\n+        if (alpn != null && alpn.length != 0 && !contains(alpn, Alpns.HTTP_1_1)) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AbstractAsyncSSLConnection.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,2 @@\n-    HttpBodySubscriberWrapper<T> createResponseSubscriber(HttpResponse.BodyHandler<T> handler, ResponseInfo response) {\n+    HttpBodySubscriberWrapper<T> createResponseSubscriber(\n+            HttpResponse.BodyHandler<T> handler, ResponseInfo response) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ExchangeImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import java.net.URI;\n-import java.net.http.HttpConnectTimeoutException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpHeaders;\n@@ -38,0 +38,2 @@\n+import java.util.ArrayList;\n+import java.net.http.HttpConnectTimeoutException;\n@@ -43,2 +45,0 @@\n-import java.util.concurrent.CompletableFuture;\n-import java.util.ArrayList;\n@@ -46,1 +46,1 @@\n-import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.CompletableFuture;\n@@ -56,2 +56,1 @@\n-import java.net.http.HttpClient;\n-import java.net.http.HttpHeaders;\n+\n@@ -59,0 +58,1 @@\n+import jdk.internal.net.http.common.Alpns;\n@@ -84,1 +84,0 @@\n-import jdk.internal.net.http.hpack.Encoder;\n@@ -87,0 +86,1 @@\n+import jdk.internal.net.http.hpack.Encoder;\n@@ -88,1 +88,5 @@\n-import static jdk.internal.net.http.frame.SettingsFrame.*;\n+import static jdk.internal.net.http.frame.SettingsFrame.DEFAULT_INITIAL_WINDOW_SIZE;\n+import static jdk.internal.net.http.frame.SettingsFrame.HEADER_TABLE_SIZE;\n+import static jdk.internal.net.http.frame.SettingsFrame.INITIAL_WINDOW_SIZE;\n+import static jdk.internal.net.http.frame.SettingsFrame.MAX_CONCURRENT_STREAMS;\n+import static jdk.internal.net.http.frame.SettingsFrame.MAX_FRAME_SIZE;\n@@ -299,1 +303,1 @@\n-    private final ConcurrentMap<Integer,Stream<?>> streams = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<Integer,Stream<?>> streams = new ConcurrentHashMap<>();\n@@ -538,1 +542,1 @@\n-            if (alpn == null || !alpn.equals(\"h2\")) {\n+            if (alpn == null || !alpn.equals(Alpns.H2)) {\n@@ -548,1 +552,1 @@\n-                        case \"http\/1.1\":\n+                        case Alpns.HTTP_1_1:\n@@ -757,1 +761,8 @@\n-        if (!markShutdownRequested()) return;\n+        stateLock.lock();\n+        try {\n+            if (!markShutdownRequested()) return;\n+            Throwable initialCause = this.cause;\n+            if (initialCause == null && t != null) this.cause = t;\n+        } finally {\n+            stateLock.unlock();\n+        }\n@@ -767,2 +778,0 @@\n-        Throwable initialCause = this.cause;\n-        if (initialCause == null && t != null) this.cause = t;\n@@ -1431,0 +1440,1 @@\n+            if (debug.on()) debug.log(\"sending frame: \" + frame);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1486,1 +1486,1 @@\n-                    ? \"key.interestOps=\" + key.interestOps() : \"invalid key\";\n+                    ? \"key.interestOps=\" + Utils.interestOps(key) : \"invalid key\";\n@@ -1488,2 +1488,2 @@\n-                                 keyInterestOps,\n-                                 ((SelectorAttachment)key.attachment()).interestOps);\n+                    keyInterestOps,\n+                    Utils.describeOps(((SelectorAttachment)key.attachment()).interestOps));\n@@ -1528,1 +1528,2 @@\n-                debug.log(\"Registering %s for %d (%s)\", e, newOps, reRegister);\n+                debug.log(\"Registering %s for %d (%s)\",\n+                        e, Utils.describeOps(newOps), reRegister);\n@@ -1844,1 +1845,1 @@\n-            Log.logTrace(\"Invalid value set for \" + prop + \" property: \" + ignored.toString());\n+            Log.logTrace(\"Invalid value set for \" + prop + \" property: \" + ignored);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import jdk.internal.net.http.common.Alpns;\n@@ -293,1 +294,1 @@\n-                    alpn = new String[] { \"h2\", \"http\/1.1\" };\n+                    alpn = new String[] { Alpns.H2, Alpns.HTTP_1_1 };\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpConnection.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.net.http.common.Alpns;\n@@ -291,1 +292,1 @@\n-        systemHeadersBuilder.setHeader(\"Upgrade\", \"h2c\");\n+        systemHeadersBuilder.setHeader(\"Upgrade\", Alpns.H2C);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpRequestImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -476,1 +476,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LineSubscriberAdapter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -285,0 +285,3 @@\n+                debug.log(\"multi exchange recording: \" + interrupted.get());\n+            } else {\n+                debug.log(\"multi exchange recorded: \" + interrupted.get());\n@@ -292,0 +295,6 @@\n+        } else {\n+            if (cancelled) {\n+                debug.log(\"multi exchange already cancelled: \" + interrupted.get());\n+            } else {\n+                debug.log(\"multi exchange mayInterruptIfRunning=\" + mayInterruptIfRunning);\n+            }\n@@ -296,0 +305,4 @@\n+    public <U> MinimalFuture<U> newMinimalFuture() {\n+        return new MinimalFuture<>(new CancelableRef(this));\n+    }\n+\n@@ -297,1 +310,1 @@\n-        CompletableFuture<Void> start = new MinimalFuture<>(new CancelableRef(this));\n+        CompletableFuture<Void> start = newMinimalFuture();\n@@ -549,2 +562,4 @@\n-                if (debug.on())\n-                    debug.log(t.getClass().getSimpleName() + \" (async): retrying...\", t);\n+                if (debug.on()) {\n+                    debug.log(t.getClass().getSimpleName()\n+                            + \" (async): retrying due to: \", t);\n+                }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/MultiExchange.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.time.Instant;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainHttpConnection.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-                    .append(rops).append(\", demand=\").append(rd)\n+                    .append(Utils.describeOps(rops)).append(\", demand=\").append(rd)\n@@ -216,1 +216,1 @@\n-                    .append(\"], Writing: [ops=\").append(wops)\n+                    .append(\"], Writing: [ops=\").append(Utils.describeOps(wops))\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/SocketTube.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.time.Instant;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/TimeoutEvent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.net.http.common;\n+\n+\/**\n+ * A static class to define ALPN constant strings used\n+ * internally by the HttpClient\n+ *\/\n+public final class Alpns {\n+    private Alpns() { throw new InternalError(); }\n+\n+    public static final String HTTP_1_1 = \"http\/1.1\";\n+    public static final String H2 = \"h2\";\n+    public static final String H2C = \"h2c\";\n+}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Alpns.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -67,1 +67,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/BufferSupplier.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -112,0 +112,2 @@\n+        \/** logs on both System.err and System.out **\/\n+        public static final LoggerConfig ERROUT = new LoggerConfig(Level.ALL, Level.ALL, Level.OFF);\n@@ -116,0 +118,1 @@\n+            if (config.equals(ERROUT)) return ERROUT;\n@@ -250,1 +253,1 @@\n-                    getFormat(new StringBuilder(), format, params).toString(),\n+                    format(new StringBuilder(), format, params).toString(),\n@@ -279,1 +282,1 @@\n-                    getFormat(new StringBuilder(), msg, null).toString(),\n+                    format(new StringBuilder(), msg, null).toString(),\n@@ -320,14 +323,8 @@\n-    private StringBuilder getFormat(StringBuilder sb, String format, Object[] params) {\n-        if (format == null || params == null || params.length == 0) {\n-            return decorate(sb, format);\n-        } else if (format.contains(\"{0}\") || format.contains(\"{1}\")) {\n-            return decorate(sb, format);\n-        } else if (format.contains(\"%s\") || format.contains(\"%d\")) {\n-            try {\n-                return decorate(sb, String.format(format, params));\n-            } catch (Throwable t) {\n-                return decorate(sb, format);\n-            }\n-        } else {\n-            return decorate(sb, format);\n-        }\n+    \/\/ Only called when params[] is not empty.\n+    \/\/ Simplified detection of String.format: if the format\n+    \/\/ string contains at least one % and if that percent\n+    \/\/ is not the last character in the string we assume\n+    \/\/ that we have a formatted string.\n+    private boolean useStringFormat(String format) {\n+        var percent = format.indexOf(\"%\");\n+        return percent >= 0 && percent < format.length() - 1;\n@@ -341,1 +338,1 @@\n-        } else if (format.contains(\"%s\") || format.contains(\"%d\")) {\n+        } else if (useStringFormat(format)) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/DebugLogger.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+import java.nio.channels.CancelledKeyException;\n+import java.nio.channels.SelectionKey;\n@@ -64,0 +66,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -325,0 +328,49 @@\n+    private static final ConcurrentHashMap<Integer, String> opsMap = new ConcurrentHashMap<>();\n+    static {\n+        opsMap.put(0, \"None\");\n+    }\n+\n+    public static String interestOps(SelectionKey key) {\n+        try {\n+            return describeOps(key.interestOps());\n+        } catch (CancelledKeyException x) {\n+            return \"cancelled-key\";\n+        }\n+    }\n+\n+    public static String readyOps(SelectionKey key) {\n+        try {\n+            return describeOps(key.readyOps());\n+        } catch (CancelledKeyException x) {\n+            return \"cancelled-key\";\n+        }\n+    }\n+\n+    public static String describeOps(int interestOps) {\n+        String ops = opsMap.get(interestOps);\n+        if (ops != null) return ops;\n+        StringBuilder opsb = new StringBuilder();\n+        int mask = SelectionKey.OP_READ\n+                | SelectionKey.OP_WRITE\n+                | SelectionKey.OP_CONNECT\n+                | SelectionKey.OP_ACCEPT;\n+        if ((interestOps & SelectionKey.OP_READ) == SelectionKey.OP_READ) {\n+            opsb.append(\"R\");\n+        }\n+        if ((interestOps & SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE) {\n+            opsb.append(\"W\");\n+        }\n+        if ((interestOps & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) {\n+            opsb.append(\"A\");\n+        }\n+        if ((interestOps & SelectionKey.OP_CONNECT) == SelectionKey.OP_CONNECT) {\n+            opsb.append(\"C\");\n+        }\n+        if ((interestOps | mask) != mask) {\n+            opsb.append(\"(\"+interestOps+\")\");\n+        }\n+        ops = opsb.toString();\n+        opsMap.put(interestOps, ops);\n+        return ops;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -121,1 +121,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/HeadersTest2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -422,1 +422,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientLocalAddrTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -185,1 +185,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/LargeResponseContent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.util.concurrent.CompletionException;\n@@ -53,1 +52,0 @@\n-import java.net.http.HttpResponse.BodyHandler;\n@@ -63,2 +61,1 @@\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.net.http.HttpResponse.BodyHandlers.discarding;\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/MaxStreams.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/RetryPost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/SSLExceptionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -121,1 +121,0 @@\n-\n@@ -123,1 +122,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyPost.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ImplicitPushCancel.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,9 +38,0 @@\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-import jdk.internal.net.http.frame.ContinuationFrame;\n-import jdk.internal.net.http.frame.HeaderFrame;\n-import org.testng.TestException;\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n@@ -66,0 +57,1 @@\n+\n@@ -74,0 +66,10 @@\n+import jdk.internal.net.http.common.HttpHeadersBuilder;\n+import jdk.internal.net.http.frame.ContinuationFrame;\n+import jdk.internal.net.http.frame.HeaderFrame;\n+\n+import org.testng.TestException;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n@@ -77,0 +79,1 @@\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PushPromiseContinuation.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/SendTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/DefaultMessageStreamHandler.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/java.net.http\/jdk\/internal\/net\/http\/websocket\/MessageStreamHandler.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- *\/\n\\ No newline at end of file\n+ *\/\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/DefaultProxyDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/FramesDecoderTestDriver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/RawChannelTestDriver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.time.InstantSource;\n@@ -53,1 +52,0 @@\n-import java.time.Instant;\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/ConnectionPoolTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/SimpleSSLContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}