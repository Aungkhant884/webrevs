{"files":[{"patch":"@@ -49,1 +49,1 @@\n-    @Native private static final long TRANSFER_SIZE = 8192;\n+    @Native private static final long MIN_TRANSFER_SIZE = 16384;\n@@ -276,1 +276,1 @@\n-                long transferSize = TRANSFER_SIZE;\n+                long ts = MIN_TRANSFER_SIZE;\n@@ -281,1 +281,5 @@\n-                        transferSize = bss == bst ? bss : lcm(bss, bst);\n+                        ts = bss == bst ? bss : lcm(bss, bst);\n+                    }\n+                    if (ts < MIN_TRANSFER_SIZE) {\n+                        int factor = (int)((MIN_TRANSFER_SIZE + ts - 1)\/ts);\n+                        ts *= factor;\n@@ -290,1 +294,1 @@\n-                        transfer0(fo, fi, transferSize, addressToPollForCancel);\n+                        transfer0(fo, fi, ts, addressToPollForCancel);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixCopyFile.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include <fcntl.h>\n@@ -41,1 +42,1 @@\n-#define DEFAULT_TRANSFER_SIZE (sun_nio_fs_UnixCopyFile_TRANSFER_SIZE)\n+#define MIN_TRANSFER_SIZE (sun_nio_fs_UnixCopyFile_MIN_TRANSFER_SIZE)\n@@ -78,1 +79,1 @@\n-    char stackBuf[DEFAULT_TRANSFER_SIZE];\n+    char stackBuf[MIN_TRANSFER_SIZE];\n@@ -81,0 +82,9 @@\n+#if defined(__linux__)\n+    int advice = POSIX_FADV_SEQUENTIAL | \/\/ sequential data access\n+                 POSIX_FADV_NOREUSE    | \/\/ will access only once\n+                 POSIX_FADV_WILLNEED;    \/\/ will access in near future\n+\n+    \/\/ ignore the return value hence any failure\n+    posix_fadvise(src, 0, 0, advice);\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixCopyFile.c","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"}]}