{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.annotation.Native;\n@@ -48,1 +49,1 @@\n-    private static final long TRANSFER_SIZE = transferSize0();\n+    @Native private static final long TRANSFER_SIZE = 8192;\n@@ -223,1 +224,4 @@\n-    \/\/ calculate the least common multiple of two values\n+    \/\/ calculate the least common multiple of two values;\n+    \/\/ the parameters in general will be powers of two likely in the\n+    \/\/ range [4096, 65536] so this algorithm is expected to converge\n+    \/\/ when it is rarely called\n@@ -274,2 +278,2 @@\n-                    long bss = Files.getFileStore(source).getBlockSize();\n-                    long bst = Files.getFileStore(target).getBlockSize();\n+                    long bss = UnixFileStoreAttributes.get(source).blockSize();\n+                    long bst = UnixFileStoreAttributes.get(target).blockSize();\n@@ -279,3 +283,2 @@\n-                } catch (IOException | IllegalArgumentException |\n-                         SecurityException | UnsupportedOperationException\n-                         ignored) {\n+                } catch (IllegalArgumentException | SecurityException |\n+                         UnixException | UnsupportedOperationException ignored) {\n@@ -664,2 +667,0 @@\n-    static native long transferSize0();\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixCopyFile.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#define DEFAULT_TRANSFER_SIZE 8192\n+#define DEFAULT_TRANSFER_SIZE (sun_nio_fs_UnixCopyFile_TRANSFER_SIZE)\n@@ -126,10 +126,0 @@\n-\/**\n- * Return the default transfer buffer size\n- *\/\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_fs_UnixCopyFile_transferSize0\n-    (JNIEnv* env, jclass this)\n-{\n-    return DEFAULT_TRANSFER_SIZE;\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixCopyFile.c","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}