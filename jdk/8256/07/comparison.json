{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,3 @@\n+#if defined(LINUX)\n+#include \"osContainer_linux.hpp\"\n+#endif\n@@ -141,0 +144,9 @@\n+#if defined(LINUX)\n+  if (OSContainer::is_containerized() && FLAG_IS_CMDLINE(InitialHeapSize)) {\n+    jlong limit = OSContainer::memory_and_swap_limit_in_bytes();\n+    if ((limit > 0) && (InitialHeapSize >= (julong) limit)) {\n+      vm_exit_during_initialization(\"Initial heap size set to a larger value than the container memory & swap limit\");\n+    }\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+            testMemorySwapLimit(\"100m\", \"100m\");\n+\n@@ -178,0 +180,13 @@\n+    private static void testMemorySwapLimit(String dockerMemSwapLimit, String initialHeapSize) throws Exception {\n+        Common.logNewTestCase(\"Check initial heap size with memory and swap limit\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"CheckInitialHeapSize\")\n+            .addDockerOpts(\"--memory\", dockerMemSwapLimit, \"--memory-swap\", dockerMemSwapLimit)\n+            .addJavaOptsAppended(\"-Xms\" + initialHeapSize);\n+\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldContain(\"Error occurred during initialization of VM\")\n+           .shouldContain(\"Initial heap size set to a larger value than the container memory & swap limit\");\n+\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}