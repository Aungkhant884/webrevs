{"files":[{"patch":"@@ -0,0 +1,415 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8167108 8265153\n+ * @summary The test checks that ThreadInfo.getLockOwnerName() returns a\n+ *   non-null string for a blocked thread and then makes repeated calls\n+ *   to getThreadInfo() and ThreadInfo.getLockOwnerName() until the thread\n+ *   has exited.\n+ * @requires vm.jvmti\n+ * @run main\/othervm\/native -agentlib:GetLockOwnerName GetLockOwnerName\n+ *\/\n+\n+import java.io.PrintStream;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+\n+\/\/\n+\/\/ main               blocker           contender            releaser\n+\/\/ =================  ================  ===================  ================\n+\/\/ launch blocker\n+\/\/ <launch returns>   blocker running\n+\/\/ launch contender   enter threadLock\n+\/\/ <launch returns>   wait for notify   contender running\n+\/\/ launch releaser    :                 block on threadLock\n+\/\/ <launch returns>   :                 :                    releaser running\n+\/\/ wait for           :                 :                    wait for notify\n+\/\/  contended enter   :                 :                    :\n+\/\/ <ready to test>    :                 :                    :\n+\/\/ getThreadInfo      :                 :                    :\n+\/\/ verify contender   :                 :                    :\n+\/\/  lock owner name   :                 :                    :\n+\/\/  is \"blocker\"      :                 :                    :\n+\/\/ notify releaser    :                 :                    :\n+\/\/ loop until thread  :                 :                    wait finishes\n+\/\/  is NULL           :                 :                    notify blocker\n+\/\/   get thread info  wait finishes     :                    releaser exits\n+\/\/   get lock owner   exit threadLock   :                    :\n+\/\/    name            blocker exits     enter threadLock     :\n+\/\/ join releaser      :                 exit threadLock      <exit finishes>\n+\/\/ <join returns>     :                 contender exits\n+\/\/ join blocker       <exit finishes>   :\n+\/\/ <join returns>                       :\n+\/\/ join contender                       <exit finishes>\n+\/\/ <join returns>\n+\/\/\n+\n+public class GetLockOwnerName {\n+    private static final String AGENT_LIB = \"GetLockOwnerName\";\n+\n+    private static final int DEF_TIME_MAX = 60;    \/\/ default max # secs to test\n+    private static final int JOIN_MAX     = 30;    \/\/ max # secs to wait for join\n+\n+    public static final int TS_INIT              = 1;  \/\/ initial testState\n+    public static final int TS_BLOCKER_RUNNING   = 2;  \/\/ blocker is running\n+    public static final int TS_CONTENDER_RUNNING = 3;  \/\/ contender is running\n+    public static final int TS_RELEASER_RUNNING  = 4;  \/\/ releaser is running\n+    public static final int TS_CONTENDER_BLOCKED = 5;  \/\/ contender is blocked\n+    public static final int TS_READY_TO_RELEASE  = 6;  \/\/ ready to release the blocker\n+    public static final int TS_DONE_BLOCKING     = 7;  \/\/ done blocking threadLock\n+    public static final int TS_CONTENDER_DONE    = 8;  \/\/ contender has run; done\n+\n+    public static Object barrierLaunch = new Object();   \/\/ controls thread launch\n+    public static Object barrierBlocker = new Object();  \/\/ controls blocker\n+    public static Object barrierReleaser = new Object();  \/\/ controls releaser\n+    public static Object threadLock = new Object();      \/\/ testing object\n+\n+    public static long count = 0;\n+    public static boolean printDebug = false;\n+    public volatile static int testState;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int wait4ContendedEnter(GetLockOwnerNameWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n+            int argIndex = 0;\n+            int argsLeft = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                printDebug = true;\n+                argIndex = 1;\n+                argsLeft--;\n+            }\n+            if (argsLeft == 0) {\n+                timeMax = DEF_TIME_MAX;\n+            } else if (argsLeft == 1) {\n+                try {\n+                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[argIndex] +\n+                                       \"': invalid timeMax value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        int retCode = run(timeMax, System.out);\n+        if (retCode != 0) {\n+            throw new RuntimeException(\"Test failed with retCode=\" + retCode);\n+        }\n+    }\n+\n+    public static void logDebug(String mesg) {\n+        if (printDebug) {\n+            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n+        }\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(int timeMax, PrintStream out) {\n+        return (new GetLockOwnerName()).doWork(timeMax, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(int timeMax, PrintStream out) {\n+        ThreadMXBean mbean = ManagementFactory.getThreadMXBean();\n+\n+        GetLockOwnerNameWorker blocker;    \/\/ blocker thread\n+        GetLockOwnerNameWorker contender;  \/\/ contender thread\n+        GetLockOwnerNameWorker releaser;   \/\/ releaser thread\n+\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n+            count++;\n+            testState = TS_INIT;  \/\/ starting the test loop\n+\n+            \/\/ launch the blocker thread\n+            synchronized (barrierLaunch) {\n+                blocker = new GetLockOwnerNameWorker(\"blocker\");\n+                blocker.start();\n+\n+                while (testState != TS_BLOCKER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait();  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the contender thread\n+            synchronized (barrierLaunch) {\n+                contender = new GetLockOwnerNameWorker(\"contender\");\n+                contender.start();\n+\n+                while (testState != TS_CONTENDER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait();  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ launch the releaser thread\n+            synchronized (barrierLaunch) {\n+                releaser = new GetLockOwnerNameWorker(\"releaser\");\n+                releaser.start();\n+\n+                while (testState != TS_RELEASER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait();  \/\/ wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            \/\/ wait for the contender thread to block\n+            logDebug(\"before contended enter wait\");\n+            int retCode = wait4ContendedEnter(contender);\n+            if (retCode != 0) {\n+                throw new RuntimeException(\"error in JVMTI GetThreadState \" +\n+                                           \"or GetCurrentContendedMonitor \" +\n+                                           \"retCode=\" + retCode);\n+            }\n+            testState = TS_CONTENDER_BLOCKED;\n+            logDebug(\"done contended enter wait\");\n+\n+            \/\/\n+            \/\/ At this point, all of the child threads are running\n+            \/\/ and we can get to meat of the test:\n+            \/\/\n+            \/\/ - query the contender thread and verify that it is blocked\n+            \/\/   by the blocker thread\n+            \/\/ - tell the releaser thread to release the blocker thread\n+            \/\/ - continue to query the contender thread until it exits\n+            \/\/\n+            long id = 0;\n+            ThreadInfo info = null;\n+            int lateCount = 0;\n+\n+            checkTestState(TS_CONTENDER_BLOCKED);\n+\n+            id = contender.getId();\n+            info = mbean.getThreadInfo(id, 0);\n+            String name = info.getLockOwnerName();\n+\n+            if (name == null) {\n+                out.println(\"Failure at \" + count + \" loops.\");\n+                throw new RuntimeException(\"ThreadInfo.GetLockOwnerName() \"\n+                                           + \"returned null name for \"\n+                                           + \"contender.\");\n+            } else if (!name.equals(\"blocker\")) {\n+                out.println(\"Failure at \" + count + \" loops.\");\n+                throw new RuntimeException(\"name='\" + name + \"': name \"\n+                                           + \"should be blocker.\");\n+            } else {\n+                logDebug(\"ThreadInfo.GetLockOwnerName() returned blocker.\");\n+            }\n+\n+            synchronized (barrierReleaser) {\n+                \/\/ tell releaser thread to release the blocker thread\n+                testState = TS_READY_TO_RELEASE;\n+                barrierReleaser.notify();\n+            }\n+\n+            while (true) {\n+                \/\/ maxDepth == 0 requires no safepoint so alternate.\n+                int maxDepth = ((count % 1) == 1) ? Integer.MAX_VALUE : 0;\n+                info = mbean.getThreadInfo(id, maxDepth);\n+                if (info == null) {\n+                    \/\/ the contender has exited\n+                    break;\n+                }\n+                name = info.getLockOwnerName();\n+                \/\/ We can't verify that name == null here because contender\n+                \/\/ might be slow leaving the threadLock monitor.\n+                lateCount++;\n+            }\n+            logDebug(\"made \" + lateCount + \" late calls to getThreadInfo() \" +\n+                     \"and info.getLockOwnerName().\");\n+\n+            try {\n+                releaser.join(JOIN_MAX * 1000);\n+                if (releaser.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"releaser thread is stuck\");\n+                }\n+                blocker.join(JOIN_MAX * 1000);\n+                if (blocker.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"blocker thread is stuck\");\n+                }\n+                contender.join(JOIN_MAX * 1000);\n+                if (contender.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"contender thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_CONTENDER_DONE);\n+        }\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n+                           \" seconds.\");\n+\n+        return 0;\n+    }\n+}\n+\n+class GetLockOwnerNameWorker extends Thread {\n+    public GetLockOwnerNameWorker(String name) {\n+        super(name);\n+    }\n+\n+    public void run() {\n+        GetLockOwnerName.logDebug(\"thread running\");\n+\n+        \/\/\n+        \/\/ The blocker thread:\n+        \/\/ - grabs threadLock\n+        \/\/ - holds threadLock until we tell it let go\n+        \/\/ - releases threadLock\n+        \/\/\n+        if (getName().equals(\"blocker\")) {\n+            \/\/ grab threadLock before we tell main we are running\n+            GetLockOwnerName.logDebug(\"before enter threadLock\");\n+            synchronized(GetLockOwnerName.threadLock) {\n+                GetLockOwnerName.logDebug(\"enter threadLock\");\n+\n+                GetLockOwnerName.checkTestState(GetLockOwnerName.TS_INIT);\n+\n+                synchronized(GetLockOwnerName.barrierBlocker) {\n+                    synchronized(GetLockOwnerName.barrierLaunch) {\n+                        \/\/ tell main we are running\n+                        GetLockOwnerName.testState = GetLockOwnerName.TS_BLOCKER_RUNNING;\n+                        GetLockOwnerName.barrierLaunch.notify();\n+                    }\n+                    GetLockOwnerName.logDebug(\"thread waiting\");\n+                    while (GetLockOwnerName.testState != GetLockOwnerName.TS_DONE_BLOCKING) {\n+                        try {\n+                            \/\/ wait for main to tell us when to exit threadLock\n+                            GetLockOwnerName.barrierBlocker.wait();\n+                        } catch (InterruptedException ex) {\n+                        }\n+                    }\n+                }\n+                GetLockOwnerName.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ The contender thread:\n+        \/\/ - tries to grab the threadLock\n+        \/\/ - grabs threadLock\n+        \/\/ - releases threadLock\n+        \/\/\n+        else if (getName().equals(\"contender\")) {\n+            synchronized(GetLockOwnerName.barrierLaunch) {\n+                \/\/ tell main we are running\n+                GetLockOwnerName.testState = GetLockOwnerName.TS_CONTENDER_RUNNING;\n+                GetLockOwnerName.barrierLaunch.notify();\n+            }\n+\n+            GetLockOwnerName.logDebug(\"before enter threadLock\");\n+            synchronized(GetLockOwnerName.threadLock) {\n+                GetLockOwnerName.logDebug(\"enter threadLock\");\n+\n+                GetLockOwnerName.checkTestState(GetLockOwnerName.TS_DONE_BLOCKING);\n+                GetLockOwnerName.testState = GetLockOwnerName.TS_CONTENDER_DONE;\n+\n+                GetLockOwnerName.logDebug(\"exit threadLock\");\n+            }\n+        }\n+        \/\/\n+        \/\/ The releaser thread:\n+        \/\/ - tries to grab the barrierBlocker (should not block!)\n+        \/\/ - grabs barrierBlocker\n+        \/\/ - releases the blocker thread\n+        \/\/ - releases barrierBlocker\n+        \/\/\n+        else if (getName().equals(\"releaser\")) {\n+            synchronized(GetLockOwnerName.barrierReleaser) {\n+                synchronized(GetLockOwnerName.barrierLaunch) {\n+                    \/\/ tell main we are running\n+                    GetLockOwnerName.testState = GetLockOwnerName.TS_RELEASER_RUNNING;\n+                    GetLockOwnerName.barrierLaunch.notify();\n+                }\n+                GetLockOwnerName.logDebug(\"thread waiting\");\n+                while (GetLockOwnerName.testState != GetLockOwnerName.TS_READY_TO_RELEASE) {\n+                    try {\n+                        \/\/ wait for main to tell us when to continue\n+                        GetLockOwnerName.barrierReleaser.wait();\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            GetLockOwnerName.logDebug(\"before enter barrierBlocker\");\n+            synchronized (GetLockOwnerName.barrierBlocker) {\n+                GetLockOwnerName.logDebug(\"enter barrierBlocker\");\n+\n+                \/\/ tell blocker thread to exit threadLock\n+                GetLockOwnerName.testState = GetLockOwnerName.TS_DONE_BLOCKING;\n+                GetLockOwnerName.barrierBlocker.notify();\n+\n+                GetLockOwnerName.logDebug(\"released blocker thread\");\n+                GetLockOwnerName.logDebug(\"exit barrierBlocker\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/monitoring\/ThreadInfo\/GetLockOwnerName\/GetLockOwnerName.java","additions":415,"deletions":0,"binary":false,"changes":415,"status":"added"},{"patch":"@@ -39,1 +39,1 @@\n-Java_getLockOwnerName_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n+Java_GetLockOwnerName_wait4ContendedEnter(JNIEnv *jni, jclass cls, jthread thr) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/monitoring\/ThreadInfo\/GetLockOwnerName\/libGetLockOwnerName.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/monitoring\/ThreadInfo\/getLockOwnerName\/libgetLockOwnerName.cpp","status":"renamed"},{"patch":"@@ -1,415 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8167108 8265153\n- * @summary The test checks that ThreadInfo.getLockOwnerName() returns a\n- *   non-null string for a blocked thread and then makes repeated calls\n- *   to getThreadInfo() and ThreadInfo.getLockOwnerName() until the thread\n- *   has exited.\n- * @requires vm.jvmti\n- * @run main\/othervm\/native -agentlib:getLockOwnerName getLockOwnerName\n- *\/\n-\n-import java.io.PrintStream;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.ThreadInfo;\n-import java.lang.management.ThreadMXBean;\n-\n-\/\/\n-\/\/ main               blocker           contender            releaser\n-\/\/ =================  ================  ===================  ================\n-\/\/ launch blocker\n-\/\/ <launch returns>   blocker running\n-\/\/ launch contender   enter threadLock\n-\/\/ <launch returns>   wait for notify   contender running\n-\/\/ launch releaser    :                 block on threadLock\n-\/\/ <launch returns>   :                 :                    releaser running\n-\/\/ wait for           :                 :                    wait for notify\n-\/\/  contended enter   :                 :                    :\n-\/\/ <ready to test>    :                 :                    :\n-\/\/ getThreadInfo      :                 :                    :\n-\/\/ verify contender   :                 :                    :\n-\/\/  lock owner name   :                 :                    :\n-\/\/  is \"blocker\"      :                 :                    :\n-\/\/ notify releaser    :                 :                    :\n-\/\/ loop until thread  :                 :                    wait finishes\n-\/\/  is NULL           :                 :                    notify blocker\n-\/\/   get thread info  wait finishes     :                    releaser exits\n-\/\/   get lock owner   exit threadLock   :                    :\n-\/\/    name            blocker exits     enter threadLock     :\n-\/\/ join releaser      :                 exit threadLock      <exit finishes>\n-\/\/ <join returns>     :                 contender exits\n-\/\/ join blocker       <exit finishes>   :\n-\/\/ <join returns>                       :\n-\/\/ join contender                       <exit finishes>\n-\/\/ <join returns>\n-\/\/\n-\n-public class getLockOwnerName {\n-    private static final String AGENT_LIB = \"getLockOwnerName\";\n-\n-    private static final int DEF_TIME_MAX = 60;    \/\/ default max # secs to test\n-    private static final int JOIN_MAX     = 30;    \/\/ max # secs to wait for join\n-\n-    public static final int TS_INIT              = 1;  \/\/ initial testState\n-    public static final int TS_BLOCKER_RUNNING   = 2;  \/\/ blocker is running\n-    public static final int TS_CONTENDER_RUNNING = 3;  \/\/ contender is running\n-    public static final int TS_RELEASER_RUNNING  = 4;  \/\/ releaser is running\n-    public static final int TS_CONTENDER_BLOCKED = 5;  \/\/ contender is blocked\n-    public static final int TS_READY_TO_RELEASE  = 6;  \/\/ ready to release the blocker\n-    public static final int TS_DONE_BLOCKING     = 7;  \/\/ done blocking threadLock\n-    public static final int TS_CONTENDER_DONE    = 8;  \/\/ contender has run; done\n-\n-    public static Object barrierLaunch = new Object();   \/\/ controls thread launch\n-    public static Object barrierBlocker = new Object();  \/\/ controls blocker\n-    public static Object barrierReleaser = new Object();  \/\/ controls releaser\n-    public static Object threadLock = new Object();      \/\/ testing object\n-\n-    public static long count = 0;\n-    public static boolean printDebug = false;\n-    public volatile static int testState;\n-\n-    private static void log(String msg) { System.out.println(msg); }\n-\n-    native static int wait4ContendedEnter(getLockOwnerNameWorker thr);\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            System.loadLibrary(AGENT_LIB);\n-            log(\"Loaded library: \" + AGENT_LIB);\n-        } catch (UnsatisfiedLinkError ule) {\n-            log(\"Failed to load library: \" + AGENT_LIB);\n-            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n-            throw ule;\n-        }\n-\n-        int timeMax = 0;\n-        if (args.length == 0) {\n-            timeMax = DEF_TIME_MAX;\n-        } else {\n-            int argIndex = 0;\n-            int argsLeft = args.length;\n-            if (args[0].equals(\"-p\")) {\n-                printDebug = true;\n-                argIndex = 1;\n-                argsLeft--;\n-            }\n-            if (argsLeft == 0) {\n-                timeMax = DEF_TIME_MAX;\n-            } else if (argsLeft == 1) {\n-                try {\n-                    timeMax = Integer.parseUnsignedInt(args[argIndex]);\n-                } catch (NumberFormatException nfe) {\n-                    System.err.println(\"'\" + args[argIndex] +\n-                                       \"': invalid timeMax value.\");\n-                    usage();\n-                }\n-            } else {\n-                usage();\n-            }\n-        }\n-\n-        int retCode = run(timeMax, System.out);\n-        if (retCode != 0) {\n-            throw new RuntimeException(\"Test failed with retCode=\" + retCode);\n-        }\n-    }\n-\n-    public static void logDebug(String mesg) {\n-        if (printDebug) {\n-            System.err.println(Thread.currentThread().getName() + \": \" + mesg);\n-        }\n-    }\n-\n-    public static void usage() {\n-        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n-        System.err.println(\"where:\");\n-        System.err.println(\"    -p       ::= print debug info\");\n-        System.err.println(\"    time_max ::= max looping time in seconds\");\n-        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n-                           \" seconds)\");\n-        System.exit(1);\n-    }\n-\n-    public static int run(int timeMax, PrintStream out) {\n-        return (new getLockOwnerName()).doWork(timeMax, out);\n-    }\n-\n-    public static void checkTestState(int exp) {\n-        if (testState != exp) {\n-            System.err.println(\"Failure at \" + count + \" loops.\");\n-            throw new InternalError(\"Unexpected test state value: \"\n-                + \"expected=\" + exp + \" actual=\" + testState);\n-        }\n-    }\n-\n-    public int doWork(int timeMax, PrintStream out) {\n-        ThreadMXBean mbean = ManagementFactory.getThreadMXBean();\n-\n-        getLockOwnerNameWorker blocker;    \/\/ blocker thread\n-        getLockOwnerNameWorker contender;  \/\/ contender thread\n-        getLockOwnerNameWorker releaser;   \/\/ releaser thread\n-\n-        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n-\n-        long start_time = System.currentTimeMillis();\n-        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n-            count++;\n-            testState = TS_INIT;  \/\/ starting the test loop\n-\n-            \/\/ launch the blocker thread\n-            synchronized (barrierLaunch) {\n-                blocker = new getLockOwnerNameWorker(\"blocker\");\n-                blocker.start();\n-\n-                while (testState != TS_BLOCKER_RUNNING) {\n-                    try {\n-                        barrierLaunch.wait();  \/\/ wait until it is running\n-                    } catch (InterruptedException ex) {\n-                    }\n-                }\n-            }\n-\n-            \/\/ launch the contender thread\n-            synchronized (barrierLaunch) {\n-                contender = new getLockOwnerNameWorker(\"contender\");\n-                contender.start();\n-\n-                while (testState != TS_CONTENDER_RUNNING) {\n-                    try {\n-                        barrierLaunch.wait();  \/\/ wait until it is running\n-                    } catch (InterruptedException ex) {\n-                    }\n-                }\n-            }\n-\n-            \/\/ launch the releaser thread\n-            synchronized (barrierLaunch) {\n-                releaser = new getLockOwnerNameWorker(\"releaser\");\n-                releaser.start();\n-\n-                while (testState != TS_RELEASER_RUNNING) {\n-                    try {\n-                        barrierLaunch.wait();  \/\/ wait until it is running\n-                    } catch (InterruptedException ex) {\n-                    }\n-                }\n-            }\n-\n-            \/\/ wait for the contender thread to block\n-            logDebug(\"before contended enter wait\");\n-            int retCode = wait4ContendedEnter(contender);\n-            if (retCode != 0) {\n-                throw new RuntimeException(\"error in JVMTI GetThreadState \" +\n-                                           \"or GetCurrentContendedMonitor \" +\n-                                           \"retCode=\" + retCode);\n-            }\n-            testState = TS_CONTENDER_BLOCKED;\n-            logDebug(\"done contended enter wait\");\n-\n-            \/\/\n-            \/\/ At this point, all of the child threads are running\n-            \/\/ and we can get to meat of the test:\n-            \/\/\n-            \/\/ - query the contender thread and verify that it is blocked\n-            \/\/   by the blocker thread\n-            \/\/ - tell the releaser thread to release the blocker thread\n-            \/\/ - continue to query the contender thread until it exits\n-            \/\/\n-            long id = 0;\n-            ThreadInfo info = null;\n-            int lateCount = 0;\n-\n-            checkTestState(TS_CONTENDER_BLOCKED);\n-\n-            id = contender.getId();\n-            info = mbean.getThreadInfo(id, 0);\n-            String name = info.getLockOwnerName();\n-\n-            if (name == null) {\n-                out.println(\"Failure at \" + count + \" loops.\");\n-                throw new RuntimeException(\"ThreadInfo.getLockOwnerName() \"\n-                                           + \"returned null name for \"\n-                                           + \"contender.\");\n-            } else if (!name.equals(\"blocker\")) {\n-                out.println(\"Failure at \" + count + \" loops.\");\n-                throw new RuntimeException(\"name='\" + name + \"': name \"\n-                                           + \"should be blocker.\");\n-            } else {\n-                logDebug(\"ThreadInfo.getLockOwnerName() returned blocker.\");\n-            }\n-\n-            synchronized (barrierReleaser) {\n-                \/\/ tell releaser thread to release the blocker thread\n-                testState = TS_READY_TO_RELEASE;\n-                barrierReleaser.notify();\n-            }\n-\n-            while (true) {\n-                \/\/ maxDepth == 0 requires no safepoint so alternate.\n-                int maxDepth = ((count % 1) == 1) ? Integer.MAX_VALUE : 0;\n-                info = mbean.getThreadInfo(id, maxDepth);\n-                if (info == null) {\n-                    \/\/ the contender has exited\n-                    break;\n-                }\n-                name = info.getLockOwnerName();\n-                \/\/ We can't verify that name == null here because contender\n-                \/\/ might be slow leaving the threadLock monitor.\n-                lateCount++;\n-            }\n-            logDebug(\"made \" + lateCount + \" late calls to getThreadInfo() \" +\n-                     \"and info.getLockOwnerName().\");\n-\n-            try {\n-                releaser.join(JOIN_MAX * 1000);\n-                if (releaser.isAlive()) {\n-                    System.err.println(\"Failure at \" + count + \" loops.\");\n-                    throw new InternalError(\"releaser thread is stuck\");\n-                }\n-                blocker.join(JOIN_MAX * 1000);\n-                if (blocker.isAlive()) {\n-                    System.err.println(\"Failure at \" + count + \" loops.\");\n-                    throw new InternalError(\"blocker thread is stuck\");\n-                }\n-                contender.join(JOIN_MAX * 1000);\n-                if (contender.isAlive()) {\n-                    System.err.println(\"Failure at \" + count + \" loops.\");\n-                    throw new InternalError(\"contender thread is stuck\");\n-                }\n-            } catch (InterruptedException ex) {\n-            }\n-\n-            checkTestState(TS_CONTENDER_DONE);\n-        }\n-\n-        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n-                           \" seconds.\");\n-\n-        return 0;\n-    }\n-}\n-\n-class getLockOwnerNameWorker extends Thread {\n-    public getLockOwnerNameWorker(String name) {\n-        super(name);\n-    }\n-\n-    public void run() {\n-        getLockOwnerName.logDebug(\"thread running\");\n-\n-        \/\/\n-        \/\/ Launch the blocker thread:\n-        \/\/ - grabs threadLock\n-        \/\/ - holds threadLock until we tell it let go\n-        \/\/ - releases threadLock\n-        \/\/\n-        if (getName().equals(\"blocker\")) {\n-            \/\/ grab threadLock before we tell main we are running\n-            getLockOwnerName.logDebug(\"before enter threadLock\");\n-            synchronized(getLockOwnerName.threadLock) {\n-                getLockOwnerName.logDebug(\"enter threadLock\");\n-\n-                getLockOwnerName.checkTestState(getLockOwnerName.TS_INIT);\n-\n-                synchronized(getLockOwnerName.barrierBlocker) {\n-                    synchronized(getLockOwnerName.barrierLaunch) {\n-                        \/\/ tell main we are running\n-                        getLockOwnerName.testState = getLockOwnerName.TS_BLOCKER_RUNNING;\n-                        getLockOwnerName.barrierLaunch.notify();\n-                    }\n-                    getLockOwnerName.logDebug(\"thread waiting\");\n-                    while (getLockOwnerName.testState != getLockOwnerName.TS_DONE_BLOCKING) {\n-                        try {\n-                            \/\/ wait for main to tell us when to exit threadLock\n-                            getLockOwnerName.barrierBlocker.wait();\n-                        } catch (InterruptedException ex) {\n-                        }\n-                    }\n-                }\n-                getLockOwnerName.logDebug(\"exit threadLock\");\n-            }\n-        }\n-        \/\/\n-        \/\/ Launch the contender thread:\n-        \/\/ - tries to grab the threadLock\n-        \/\/ - grabs threadLock\n-        \/\/ - releases threadLock\n-        \/\/\n-        else if (getName().equals(\"contender\")) {\n-            synchronized(getLockOwnerName.barrierLaunch) {\n-                \/\/ tell main we are running\n-                getLockOwnerName.testState = getLockOwnerName.TS_CONTENDER_RUNNING;\n-                getLockOwnerName.barrierLaunch.notify();\n-            }\n-\n-            getLockOwnerName.logDebug(\"before enter threadLock\");\n-            synchronized(getLockOwnerName.threadLock) {\n-                getLockOwnerName.logDebug(\"enter threadLock\");\n-\n-                getLockOwnerName.checkTestState(getLockOwnerName.TS_DONE_BLOCKING);\n-                getLockOwnerName.testState = getLockOwnerName.TS_CONTENDER_DONE;\n-\n-                getLockOwnerName.logDebug(\"exit threadLock\");\n-            }\n-        }\n-        \/\/\n-        \/\/ Launch the releaser thread:\n-        \/\/ - tries to grab the barrierBlocker (should not block!)\n-        \/\/ - grabs barrierBlocker\n-        \/\/ - releases the blocker thread\n-        \/\/ - releases barrierBlocker\n-        \/\/\n-        else if (getName().equals(\"releaser\")) {\n-            synchronized(getLockOwnerName.barrierReleaser) {\n-                synchronized(getLockOwnerName.barrierLaunch) {\n-                    \/\/ tell main we are running\n-                    getLockOwnerName.testState = getLockOwnerName.TS_RELEASER_RUNNING;\n-                    getLockOwnerName.barrierLaunch.notify();\n-                }\n-                getLockOwnerName.logDebug(\"thread waiting\");\n-                while (getLockOwnerName.testState != getLockOwnerName.TS_READY_TO_RELEASE) {\n-                    try {\n-                        \/\/ wait for main to tell us when to continue\n-                        getLockOwnerName.barrierReleaser.wait();\n-                    } catch (InterruptedException ex) {\n-                    }\n-                }\n-            }\n-\n-            getLockOwnerName.logDebug(\"before enter barrierBlocker\");\n-            synchronized (getLockOwnerName.barrierBlocker) {\n-                getLockOwnerName.logDebug(\"enter barrierBlocker\");\n-\n-                \/\/ tell blocker thread to exit threadLock\n-                getLockOwnerName.testState = getLockOwnerName.TS_DONE_BLOCKING;\n-                getLockOwnerName.barrierBlocker.notify();\n-\n-                getLockOwnerName.logDebug(\"released blocker thread\");\n-                getLockOwnerName.logDebug(\"exit barrierBlocker\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/monitoring\/ThreadInfo\/getLockOwnerName\/getLockOwnerName.java","additions":0,"deletions":415,"binary":false,"changes":415,"status":"deleted"}]}