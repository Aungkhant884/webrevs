{"files":[{"patch":"@@ -134,2 +134,1 @@\n-    os->print(\"Static hugepage support: \");\n-    bool first = true;\n+    os->print_cr(\"Static hugepage support:\");\n@@ -137,5 +136,1 @@\n-      os->print(\"%s\" EXACTFMT, (first ? \"\" : \", \"), EXACTFMTARGS(s));\n-      if (_default_hugepage_size == s) {\n-        os->print_cr(\" (default)\");\n-      }\n-      first = false;\n+      os->print_cr(\"  hugepage size: \" EXACTFMT, EXACTFMTARGS(s));\n@@ -143,1 +138,1 @@\n-    os->print_cr(\"  default pagesize: \" EXACTFMT, EXACTFMTARGS(_default_hugepage_size));\n+    os->print_cr(\"  default hugepage size: \" EXACTFMT, EXACTFMTARGS(_default_hugepage_size));\n@@ -199,4 +194,2 @@\n-  if (_mode != THPMode::never) {\n-    read_number_file(\"\/sys\/kernel\/mm\/transparent_hugepage\/hpage_pmd_size\", &_pagesize);\n-    assert(_pagesize > 0, \"Expected\");\n-  }\n+  read_number_file(\"\/sys\/kernel\/mm\/transparent_hugepage\/hpage_pmd_size\", &_pagesize);\n+  assert(_pagesize > 0, \"Expected\");\n@@ -215,1 +208,1 @@\n-    os->print_cr(\"  mode: %s\",\n+    os->print_cr(\"  THP mode: %s\",\n@@ -217,3 +210,1 @@\n-    if (_mode != THPMode::never) {\n-      os->print_cr(\"  pagesize: \" EXACTFMT, EXACTFMTARGS(_pagesize));\n-    }\n+    os->print_cr(\"  THP pagesize: \" EXACTFMT, EXACTFMTARGS(_pagesize));\n","filename":"src\/hotspot\/os\/linux\/hugepages.cpp","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -3708,0 +3708,18 @@\n+struct LargePageInitializationLoggerMark {\n+  ~LargePageInitializationLoggerMark() {\n+    LogTarget(Info, pagesize) lt;\n+    if (lt.is_enabled()) {\n+      LogStream ls(lt);\n+      if (UseLargePages) {\n+        ls.print_cr(\"UseLargePages=1, UseTransparentHugePages=%d, UseHugeTLBFS=%d, UseSHM=%d\",\n+                    UseTransparentHugePages, UseHugeTLBFS, UseSHM);\n+        ls.print(\"Large page support enabled. Usable page sizes: \");\n+        os::page_sizes().print_on(&ls);\n+        ls.print_cr(\". Default large page size: \" EXACTFMT \".\", EXACTFMTARGS(os::large_page_size()));\n+      } else {\n+        ls.print(\"Large page support disabled.\");\n+      }\n+    }\n+  }\n+};\n+\n@@ -3709,0 +3727,2 @@\n+  LargePageInitializationLoggerMark logger;\n+\n@@ -3804,10 +3824,0 @@\n-  if (UseLargePages) {\n-    LogTarget(Info, pagesize) lt;\n-    if (lt.is_enabled()) {\n-      LogStream ls(lt);\n-      ls.print(\"Large page support enabled. Usable page sizes: \");\n-      _page_sizes.print_on(&ls);\n-      ls.print_cr(\" Default: \" EXACTFMT, EXACTFMTARGS(os::large_page_size()));\n-    }\n-  }\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.*;\n+import java.util.Set;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+class HugePageConfiguration {\n+\n+    Set<Long> _staticHugePageSizes;\n+    long _staticDefaultHugePageSize;\n+\n+    enum THPMode {always, never, madvise}\n+    THPMode _thpMode;\n+    long _thpPageSize;\n+\n+    public Set<Long> getStaticHugePageSizes() {\n+        return _staticHugePageSizes;\n+    }\n+\n+    public long getStaticDefaultHugePageSize() {\n+        return _staticDefaultHugePageSize;\n+    }\n+\n+    public THPMode getThpMode() {\n+        return _thpMode;\n+    }\n+\n+    public long getThpPageSize() {\n+        return _thpPageSize;\n+    }\n+\n+    public HugePageConfiguration(Set<Long> _staticHugePageSizes, long _staticDefaultHugePageSize, THPMode _thpMode, long _thpPageSize) {\n+        this._staticHugePageSizes = _staticHugePageSizes;\n+        this._staticDefaultHugePageSize = _staticDefaultHugePageSize;\n+        this._thpMode = _thpMode;\n+        this._thpPageSize = _thpPageSize;\n+    }\n+\n+    @java.lang.Override\n+    public String toString() {\n+        return \"Configuration{\" +\n+                \"_staticHugePageSizes=\" + _staticHugePageSizes +\n+                \", _staticDefaultHugePageSize=\" + _staticDefaultHugePageSize +\n+                \", _thpMode=\" + _thpMode +\n+                \", _thpPageSize=\" + _thpPageSize +\n+                '}';\n+    }\n+\n+    @java.lang.Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        HugePageConfiguration that = (HugePageConfiguration) o;\n+        return _staticDefaultHugePageSize == that._staticDefaultHugePageSize && _thpPageSize == that._thpPageSize && Objects.equals(_staticHugePageSizes, that._staticHugePageSizes) && _thpMode == that._thpMode;\n+    }\n+\n+    @java.lang.Override\n+    public int hashCode() {\n+        return Objects.hash(_staticHugePageSizes, _staticDefaultHugePageSize, _thpMode, _thpPageSize);\n+    }\n+\n+    private static long readDefaultHugePageSizeFromOS() {\n+        Pattern pat = Pattern.compile(\"Hugepagesize: *(\\\\d+) +kB\");\n+        Scanner scanner;\n+        try {\n+            scanner = new Scanner(new File(\"\/proc\/meminfo\"));\n+        } catch (FileNotFoundException e) {\n+            return 0;\n+        }\n+        while (scanner.hasNextLine()) {\n+            Matcher mat = pat.matcher(scanner.nextLine());\n+            if (mat.matches()) {\n+                scanner.close();\n+                return Long.parseLong(mat.group(1)) * 1024;\n+            }\n+        }\n+        scanner.close();\n+        return 0;\n+    }\n+\n+    private static Set<Long> readSupportedHugePagesFromOS() {\n+        TreeSet<Long> pagesizes = new TreeSet<>();\n+        Pattern pat = Pattern.compile(\"hugepages-(\\\\d+)kB\");\n+        File[] subdirs = new File(\"\/sys\/kernel\/mm\/hugepages\").listFiles();\n+        if (subdirs != null) {\n+            for (File f : subdirs) {\n+                String name = f.getName();\n+                Matcher mat = pat.matcher(name);\n+                if (mat.matches()) {\n+                    long pagesize = Long.parseLong(mat.group(1)) * 1024;\n+                    pagesizes.add(pagesize);\n+                }\n+            }\n+        }\n+        return pagesizes;\n+    }\n+\n+    private static THPMode readTHPModeFromOS() {\n+        THPMode mode;\n+        try {\n+            String file = \"\/sys\/kernel\/mm\/transparent_hugepage\/enabled\";\n+            BufferedReader reader = new BufferedReader(new FileReader(file));\n+            String s = reader.readLine();\n+            if (s.contains(\"[never]\")) {\n+                mode = THPMode.never;\n+            } else if (s.contains(\"[always]\")) {\n+                mode = THPMode.always;\n+            } else if (s.contains(\"[madvise]\")) {\n+                mode = THPMode.madvise;\n+            } else {\n+                throw new RuntimeException(\"Unexpected content of \" + file + \": \" + s);\n+            }\n+        } catch (IOException e) {\n+            mode = THPMode.never;\n+        }\n+        return mode;\n+    }\n+\n+    private static long readTHPPageSizeFromOS() {\n+        long pagesize = 0;\n+        try {\n+            String file = \"\/sys\/kernel\/mm\/transparent_hugepage\/hpage_pmd_size\";\n+            BufferedReader reader = new BufferedReader(new FileReader(file));\n+            String s = reader.readLine();\n+            pagesize = Long.parseLong(s);\n+        } catch (IOException | NumberFormatException e) { \/* ignored *\/ }\n+        return pagesize;\n+    }\n+\n+    \/\/ Fill object with info read from proc file system\n+    public static HugePageConfiguration readFromOS() {\n+        return new HugePageConfiguration(readSupportedHugePagesFromOS(),\n+                readDefaultHugePageSizeFromOS(),\n+                readTHPModeFromOS(),\n+                readTHPPageSizeFromOS());\n+    }\n+\n+    private static long parseSIUnit(String num, String unit) {\n+        long n = Long.parseLong(num);\n+        return switch (unit) {\n+            case \"K\" -> n * 1024;\n+            case \"M\" -> n * 1024 * 1024;\n+            case \"G\" -> n * 1024 * 1024 * 1024;\n+            default -> throw new RuntimeException(\"Invalid unit \" + unit);\n+        };\n+    }\n+\n+    public static HugePageConfiguration readFromJVMLog(OutputAnalyzer output) {\n+        \/\/ Expects output from -Xlog:pagesize\n+        \/\/ Example:\n+        \/\/ [0.001s][info][pagesize] Static hugepage support:\n+        \/\/ [0.001s][info][pagesize]   hugepage size: 2M\n+        \/\/ [0.001s][info][pagesize]   hugepage size: 1G\n+        \/\/ [0.001s][info][pagesize]   default hugepage size: 2M\n+        \/\/ [0.001s][info][pagesize] Transparent hugepage (THP) support:\n+        \/\/ [0.001s][info][pagesize]   THP mode: madvise\n+        \/\/ [0.001s][info][pagesize]   THP pagesize: 2M\n+        TreeSet<Long> hugepages = new TreeSet<>();\n+        long defaultHugepageSize = 0;\n+        THPMode thpMode = THPMode.never;\n+        long thpPageSize = 0;\n+        Pattern patternHugepageSize = Pattern.compile(\".*\\\\[pagesize] *hugepage size: (\\\\d+)([KMG])\");\n+        Pattern patternDefaultHugepageSize = Pattern.compile(\".*\\\\[pagesize] *default hugepage size: (\\\\d+)([KMG]) *\");\n+        Pattern patternTHPPageSize = Pattern.compile(\".*\\\\[pagesize] *THP pagesize: (\\\\d+)([KMG])\");\n+        Pattern patternTHPMode = Pattern.compile(\".*\\\\[pagesize] *THP mode: (\\\\S+)\");\n+        List<String> lines = output.asLines();\n+        for (String s : lines) {\n+            Matcher mat = patternHugepageSize.matcher(s);\n+            if (mat.matches()) {\n+                hugepages.add(parseSIUnit(mat.group(1), mat.group(2)));\n+                continue;\n+            }\n+            if (defaultHugepageSize == 0) {\n+                mat = patternDefaultHugepageSize.matcher(s);\n+                if (mat.matches()) {\n+                    defaultHugepageSize = parseSIUnit(mat.group(1), mat.group(2));\n+                    continue;\n+                }\n+            }\n+            if (thpPageSize == 0) {\n+                mat = patternTHPPageSize.matcher(s);\n+                if (mat.matches()) {\n+                    thpPageSize = parseSIUnit(mat.group(1), mat.group(2));\n+                    continue;\n+                }\n+            }\n+            mat = patternTHPMode.matcher(s);\n+            if (mat.matches()) {\n+                thpMode = THPMode.valueOf(mat.group(1));\n+            }\n+        }\n+\n+        return new HugePageConfiguration(hugepages, defaultHugepageSize, thpMode, thpPageSize);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/HugePageConfiguration.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that the JVM detects the OS hugepage\/THP settings correctly.\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver HugePageDetection\n+ *\/\n+\n+import java.util.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class HugePageDetection {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ArrayList<String> finalargs = new ArrayList<String>();\n+        String[] defaultArgs = {\n+            \"-Xlog:pagesize\", \"-Xmx64M\", \"-XX:-CreateCoredumpOnCrash\"\n+        };\n+        finalargs.addAll(Arrays.asList(defaultArgs));\n+        finalargs.add(\"-version\");\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                new String[] {\"-Xlog:pagesize\", \"-Xmx64M\", \"-version\"});\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.reportDiagnosticSummary();\n+        output.shouldHaveExitValue(0);\n+\n+        \/\/ The configuration detected by the JVM should match the OS settings\n+\n+        HugePageConfiguration configurationFromOS = HugePageConfiguration.readFromOS();\n+        System.out.println(\"Configuration read from OS: \" + configurationFromOS);\n+\n+        HugePageConfiguration configurationFromLog = HugePageConfiguration.readFromJVMLog(output);\n+        System.out.println(\"Configuration read from JVM log: \" + configurationFromLog);\n+\n+        if (configurationFromOS.equals(configurationFromLog)) {\n+            System.out.println(\"Okay\");\n+        } else {\n+            throw new RuntimeException(\"Configurations differ\");\n+        }\n+\n+        \/\/ If we want to run\n+\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/HugePageDetection.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}