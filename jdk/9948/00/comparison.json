{"files":[{"patch":"@@ -466,4 +466,0 @@\n- * If shares are in effect (shares != -1), calculate the number\n- * of CPUs required for the shares by dividing the share value\n- * by PER_CPU_SHARES.\n- *\n@@ -472,1 +468,1 @@\n- * If neither shares or quotas have been specified, return the\n+ * If quotas have not been specified, return the\n@@ -475,6 +471,1 @@\n- * If both shares and quotas have been specified, the results are\n- * based on the flag PreferContainerQuotaForCPUCount.  If true,\n- * return the quota value.  If false return the smallest value\n- * between shares or quotas.\n- *\n- * If shares and\/or quotas have been specified, the resulting number\n+ * If quotas have been specified, the resulting number\n@@ -487,1 +478,1 @@\n-  int quota_count = 0, share_count = 0;\n+  int quota_count = 0;\n@@ -506,6 +497,0 @@\n-  \/\/ It's not a good idea to use cpu_shares() to limit the number\n-  \/\/ of CPUs used by the JVM. See JDK-8281181.\n-  \/\/ UseContainerCpuShares and PreferContainerQuotaForCPUCount are\n-  \/\/ deprecated and will be removed in the next JDK release.\n-  int share  = UseContainerCpuShares ? cpu_shares() : -1;\n-\n@@ -516,4 +501,0 @@\n-  if (share > -1) {\n-    share_count = ceilf((float)share \/ (float)PER_CPU_SHARES);\n-    log_trace(os, container)(\"CPU Share count based on shares: %d\", share_count);\n-  }\n@@ -521,11 +502,2 @@\n-  \/\/ If both shares and quotas are setup results depend\n-  \/\/ on flag PreferContainerQuotaForCPUCount.\n-  \/\/ If true, limit CPU count to quota\n-  \/\/ If false, use minimum of shares and quotas\n-  if (quota_count !=0 && share_count != 0) {\n-    if (PreferContainerQuotaForCPUCount) {\n-      limit_count = quota_count;\n-    } else {\n-      limit_count = MIN2(quota_count, share_count);\n-    }\n-  } else if (quota_count != 0) {\n+  \/\/ Use quotas\n+  if (quota_count != 0) {\n@@ -533,2 +505,0 @@\n-  } else if (share_count != 0) {\n-    limit_count = share_count;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -62,9 +62,0 @@\n-  product(bool, UseContainerCpuShares, false,                           \\\n-          \"(Deprecated) Include CPU shares in the CPU availability\"     \\\n-          \" calculation.\")                                              \\\n-                                                                        \\\n-  product(bool, PreferContainerQuotaForCPUCount, true,                  \\\n-          \"(Deprecated) Calculate the container CPU availability based\" \\\n-          \" on the value of quotas (if set), when true. Otherwise, use\" \\\n-          \" the CPU shares value, provided it is less than quota.\")     \\\n-                                                                        \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -91,8 +91,0 @@\n-            } else if (share > 0) {\n-                long hostTicks = getHostTotalCpuTicks0();\n-                int totalCPUs = getHostOnlineCpuCount0();\n-                int containerCPUs = getAvailableProcessors();\n-                \/\/ scale the total host load to the actual container cpus\n-                double scaleFactor = ((double) containerCPUs) \/ totalCPUs;\n-                hostTicks = (long) (hostTicks * scaleFactor);\n-                return getUsageDividesTotal(cpuUsageSupplier().getAsLong(), hostTicks);\n@@ -100,1 +92,1 @@\n-                \/\/ If CPU quotas and shares are not active then find the average load for\n+                \/\/ If CPU quotas are not active then find the average load for\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,5 +61,0 @@\n-            \/\/ cpu shares - it should be safe to use CPU shares exceeding available CPUs\n-            testCpuShares(256, 1);\n-            testCpuShares(2048, 2);\n-            testCpuShares(4096, 4);\n-\n@@ -103,5 +98,0 @@\n-        \/\/ OLD = use the deprecated -XX:+UseContainerCpuShares flag, which\n-        \/\/ will be removed in the next JDK release. See JDK-8281181.\n-        boolean OLD = true;\n-        boolean NEW = false;\n-\n@@ -116,2 +106,1 @@\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000,   4*1024, true, 1);\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000,   4*1024, true, 1);\n+                testAPCCombo(testCpuSet, 200*1000, 100*1000,   4*1024, 1);\n@@ -123,7 +112,2 @@\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 4*1024, true, 2);\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   false,1);\n-\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 4*1024, true, 2);\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   false,2);\n+                testAPCCombo(testCpuSet, 200*1000, 100*1000, 4*1024, 2);\n+                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   2);\n@@ -135,7 +119,2 @@\n-                testAPCCombo(OLD, testCpuSet, 100*1000, 100*1000, 2*1024, true, 1);\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   false,1);\n-\n-                testAPCCombo(NEW, testCpuSet, 100*1000, 100*1000, 2*1024, true, 1);\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   false,2);\n+                testAPCCombo(testCpuSet, 100*1000, 100*1000, 2*1024, 1);\n+                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   2);\n@@ -198,6 +177,1 @@\n-    \/\/ Test correctess of automatically selected active processor count\n-    \/\/ Note: when -XX:+UseContainerCpuShares is removed,\n-    \/\/ useContainerCpuShares, shares, and usePreferContainerQuotaForCPUCount\n-    \/\/ should also be removed.\n-    private static void testAPCCombo(boolean useContainerCpuShares, String cpuset, int quota, int period, int shares,\n-                                     boolean usePreferContainerQuotaForCPUCount,\n+    private static void testAPCCombo(String cpuset, int quota, int period, int shares,\n@@ -210,2 +184,0 @@\n-        System.out.println(\"useContainerCpuShares = \" + useContainerCpuShares);\n-        System.out.println(\"usePreferContainerQuotaForCPUCount = \" + usePreferContainerQuotaForCPUCount);\n@@ -222,3 +194,0 @@\n-        if (useContainerCpuShares) opts.addJavaOpts(\"-XX:+UseContainerCpuShares\");  \/\/ deprecated\n-        if (!usePreferContainerQuotaForCPUCount) opts.addJavaOpts(\"-XX:-PreferContainerQuotaForCPUCount\");  \/\/ deprecated\n-\n@@ -230,27 +199,0 @@\n-    \/\/ Note: when -XX:+UseContainerCpuShares is removed, this test should also be removed.\n-    private static void testCpuShares(int shares, int expectedAPC) throws Exception {\n-        Common.logNewTestCase(\"test cpu shares, shares = \" + shares);\n-        System.out.println(\"expectedAPC = \" + expectedAPC);\n-\n-        expectedAPC = adjustExpectedAPCForAvailableCPUs(expectedAPC);\n-\n-        DockerRunOptions opts = Common.newOpts(imageName)\n-            .addDockerOpts(\"--cpu-shares=\" + shares);\n-        opts.addJavaOpts(\"-XX:+UseContainerCpuShares\"); \/\/ deprecated\n-        OutputAnalyzer out = Common.run(opts);\n-        \/\/ Cgroups v2 needs to do some scaling of raw shares values. Hence,\n-        \/\/ 256 CPU shares come back as 264. Raw value written to cpu.weight\n-        \/\/ is 10. The reason this works for >= 1024 shares value is because\n-        \/\/ post-scaling the closest multiple of 1024 is found and returned.\n-        \/\/\n-        \/\/ For values < 1024, this doesn't happen so loosen the match to a\n-        \/\/ 3-digit number and ensure the active_processor_count is as\n-        \/\/ expected.\n-        if (shares < 1024) {\n-            out.shouldMatch(\"CPU Shares is.*\\\\d{3}\");\n-        } else {\n-            out.shouldMatch(\"CPU Shares is.*\" + shares);\n-        }\n-        out.shouldMatch(\"active_processor_count.*\" + expectedAPC);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":6,"deletions":64,"binary":false,"changes":70,"status":"modified"}]}