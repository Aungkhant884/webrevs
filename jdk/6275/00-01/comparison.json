{"files":[{"patch":"@@ -5448,1 +5448,1 @@\n-        if (startInclusive == endExclusive) return Stream.empty();\n+        if (startInclusive == endExclusive) return StreamSupport.emptyStream(spliterator);\n@@ -5480,1 +5480,1 @@\n-        if (startInclusive == endExclusive) return IntStream.empty();\n+        if (startInclusive == endExclusive) return StreamSupport.emptyIntStream(spliterator);\n@@ -5512,1 +5512,1 @@\n-        if (startInclusive == endExclusive) return LongStream.empty();\n+        if (startInclusive == endExclusive) return StreamSupport.emptyLongStream(spliterator);\n@@ -5544,1 +5544,1 @@\n-        if (startInclusive == endExclusive) return DoubleStream.empty();\n+        if (startInclusive == endExclusive) return StreamSupport.emptyDoubleStream(spliterator);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -331,0 +331,33 @@\n+\n+    \/**\n+     * Creates a new sequential empty {@code IntStream} with the\n+     * characteristics of the provided {@code Spliterator}.\n+     *\n+     * @param spliterator a {@code Spliterator.OfInt} describing the stream elements\n+     * @return a new sequential empty {@code IntStream}\n+     *\/\n+    public static IntStream emptyIntStream(Spliterator.OfInt spliterator) {\n+        return new Streams.EmptyIntStream(spliterator);\n+    }\n+\n+    \/**\n+     * Creates a new sequential empty {@code LongStream} with the\n+     * characteristics of the provided {@code Spliterator}.\n+     *\n+     * @param spliterator a {@code Spliterator.OfLong} describing the stream elements\n+     * @return a new sequential empty {@code IntStream}\n+     *\/\n+    public static LongStream emptyLongStream(Spliterator.OfLong spliterator) {\n+        return new Streams.EmptyLongStream(spliterator);\n+    }\n+\n+    \/**\n+     * Creates a new sequential empty {@code DoubleStream} with the\n+     * characteristics of the provided {@code Spliterator}.\n+     *\n+     * @param spliterator a {@code Spliterator.OfDouble} describing the stream elements\n+     * @return a new sequential empty {@code DoubleStream}\n+     *\/\n+    public static DoubleStream emptyDoubleStream(Spliterator.OfDouble spliterator) {\n+        return new Streams.EmptyDoubleStream(spliterator);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/StreamSupport.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -970,1 +970,1 @@\n-        protected final void stateDistinct(boolean hasComparator) {\n+        protected final void stateDistinct() {\n@@ -973,2 +973,1 @@\n-            if (hasComparator)\n-                state &= ~(SORTED);\n+            if (hasComparator()) state &= ~SORTED;\n@@ -990,6 +989,8 @@\n-        protected boolean stateIsUnordered() {\n-            return (state & ORDERED) == 0;\n-        }\n-\n-        protected void stateUnordered() {\n-            state &= ~ORDERED;\n+        protected boolean unorderedSame() {\n+            if ((state & ORDERED) == ORDERED) {\n+                state &= ~(CONCURRENT | NONNULL | ORDERED | IMMUTABLE);\n+                if (hasComparator()) state &= ~SORTED;\n+                state |= OPERATED_ON;\n+                return false;\n+            }\n+            return true;\n@@ -1006,0 +1007,52 @@\n+\n+        public boolean isParallel() {\n+            return false;\n+        }\n+\n+        protected final void checkParametersAndThenState(Object parameter) {\n+            Objects.requireNonNull(parameter);\n+            checkIfOperatedOnOrClosedAndChangeState();\n+        }\n+\n+        protected final void checkParametersAndThenState(Object parameter1, Object parameter2) {\n+            Objects.requireNonNull(parameter1);\n+            Objects.requireNonNull(parameter2);\n+            checkIfOperatedOnOrClosedAndChangeState();\n+        }\n+\n+        protected final void checkParametersAndThenState(Object parameter1, Object parameter2, Object parameter3) {\n+            Objects.requireNonNull(parameter1);\n+            Objects.requireNonNull(parameter2);\n+            Objects.requireNonNull(parameter3);\n+            checkIfOperatedOnOrClosedAndChangeState();\n+        }\n+\n+        protected final void checkStateAndThenParameters(Object parameter) {\n+            \/\/ for some of the methods, we first check the state and then the parameter\n+            checkIfOperatedOnOrClosedAndChangeState();\n+            Objects.requireNonNull(parameter);\n+        }\n+\n+        protected final <R> EmptyStream<R> nextEmptyStream(Object parameter) {\n+            checkParametersAndThenState(parameter);\n+            return new EmptyStream<>(this);\n+        }\n+\n+        protected final EmptyIntStream nextEmptyIntStream(Object parameter) {\n+            checkParametersAndThenState(parameter);\n+            return new EmptyIntStream(this);\n+        }\n+\n+        protected final EmptyLongStream nextEmptyLongStream(Object parameter) {\n+            checkParametersAndThenState(parameter);\n+            return new EmptyLongStream(this);\n+        }\n+\n+        protected final EmptyDoubleStream nextEmptyDoubleStream(Object parameter) {\n+            checkParametersAndThenState(parameter);\n+            return new EmptyDoubleStream(this);\n+        }\n+\n+        protected boolean hasComparator() {\n+            return false;\n+        }\n@@ -1035,3 +1088,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(predicate);\n@@ -1042,3 +1093,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1049,3 +1098,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1056,3 +1103,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1063,3 +1108,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1070,3 +1113,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1077,3 +1118,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1084,3 +1123,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1091,3 +1128,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1098,3 +1133,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1105,3 +1138,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1112,3 +1143,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1119,3 +1148,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1127,1 +1154,1 @@\n-            super.stateDistinct(comparator != null);\n+            super.stateDistinct();\n@@ -1131,0 +1158,5 @@\n+        @Override\n+        protected boolean hasComparator() {\n+            return comparator != null;\n+        }\n+\n@@ -1140,3 +1172,1 @@\n-            \/\/ the check is the other way round to normal\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(comparator);\n+            checkStateAndThenParameters(comparator);\n@@ -1148,3 +1178,1 @@\n-            Objects.requireNonNull(action);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(action);\n@@ -1172,3 +1200,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(predicate);\n@@ -1179,3 +1205,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(predicate);\n@@ -1186,2 +1210,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1193,2 +1216,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1208,2 +1230,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(generator);\n+            checkStateAndThenParameters(generator);\n@@ -1215,2 +1236,1 @@\n-            Objects.requireNonNull(accumulator);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(accumulator);\n@@ -1222,2 +1242,1 @@\n-            Objects.requireNonNull(accumulator);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(accumulator);\n@@ -1229,3 +1248,1 @@\n-            Objects.requireNonNull(accumulator);\n-            Objects.requireNonNull(combiner);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(accumulator, combiner);\n@@ -1237,4 +1254,1 @@\n-            Objects.requireNonNull(supplier);\n-            Objects.requireNonNull(accumulator);\n-            Objects.requireNonNull(combiner);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(supplier, accumulator, combiner);\n@@ -1246,2 +1260,1 @@\n-            Objects.requireNonNull(collector);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(collector);\n@@ -1259,2 +1272,1 @@\n-            Objects.requireNonNull(comparator);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(comparator);\n@@ -1266,2 +1278,1 @@\n-            Objects.requireNonNull(comparator);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(comparator);\n@@ -1279,2 +1290,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1286,2 +1296,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1293,2 +1302,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1325,6 +1333,0 @@\n-\n-        @Override\n-        public boolean isParallel() {\n-            return false;\n-        }\n-\n@@ -1344,4 +1346,2 @@\n-            if (super.stateIsUnordered()) return this;\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            super.stateUnordered();\n-            return new EmptyStream<>(this);\n+            if (super.unorderedSame()) return this;\n+            else return new EmptyStream<>(this);\n@@ -1369,3 +1369,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(predicate);\n@@ -1376,3 +1374,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1383,3 +1379,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1390,3 +1384,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1397,3 +1389,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1404,3 +1394,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1411,3 +1399,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1432,3 +1418,1 @@\n-            Objects.requireNonNull(action);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(action);\n@@ -1456,3 +1440,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(predicate);\n@@ -1463,3 +1445,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(predicate);\n@@ -1470,2 +1450,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1477,2 +1456,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1492,2 +1470,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -1499,2 +1476,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -1506,4 +1482,1 @@\n-            Objects.requireNonNull(supplier);\n-            Objects.requireNonNull(accumulator);\n-            Objects.requireNonNull(combiner);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(supplier, accumulator, combiner);\n@@ -1533,2 +1506,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1540,2 +1512,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1547,2 +1518,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1590,5 +1560,0 @@\n-        @Override\n-        public boolean isParallel() {\n-            return false;\n-        }\n-\n@@ -1607,4 +1572,3 @@\n-            if (super.stateIsUnordered()) return this;\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            super.stateUnordered();\n-            return new EmptyIntStream(this);\n+            checkIfOperatedOnOrClosed();\n+            if (super.unorderedSame()) return this;\n+            else return new EmptyIntStream(this);\n@@ -1668,3 +1632,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(predicate);\n@@ -1675,3 +1637,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1682,3 +1642,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1689,3 +1647,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1696,3 +1652,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1703,3 +1657,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1710,3 +1662,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1731,3 +1681,1 @@\n-            Objects.requireNonNull(action);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(action);\n@@ -1755,3 +1703,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(predicate);\n@@ -1762,3 +1708,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(predicate);\n@@ -1769,2 +1713,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1776,2 +1719,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -1791,2 +1733,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -1798,2 +1739,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -1805,4 +1745,1 @@\n-            Objects.requireNonNull(supplier);\n-            Objects.requireNonNull(accumulator);\n-            Objects.requireNonNull(combiner);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(supplier, accumulator, combiner);\n@@ -1832,2 +1769,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1839,2 +1775,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1846,2 +1781,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -1889,5 +1823,0 @@\n-        @Override\n-        public boolean isParallel() {\n-            return false;\n-        }\n-\n@@ -1906,4 +1835,3 @@\n-            if (super.stateIsUnordered()) return this;\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            super.stateUnordered();\n-            return new EmptyLongStream(this);\n+            checkIfOperatedOnOrClosed();\n+            if (super.unorderedSame()) return this;\n+            else return new EmptyLongStream(this);\n@@ -1961,3 +1889,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(predicate);\n@@ -1968,3 +1894,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -1975,3 +1899,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyStream<>(this);\n+            return nextEmptyStream(mapper);\n@@ -1982,3 +1904,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyIntStream(this);\n+            return nextEmptyIntStream(mapper);\n@@ -1989,3 +1909,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyLongStream(this);\n+            return nextEmptyLongStream(mapper);\n@@ -1996,3 +1914,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -2003,3 +1919,1 @@\n-            Objects.requireNonNull(mapper);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(mapper);\n@@ -2024,2 +1938,1 @@\n-            Objects.requireNonNull(action);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(action);\n@@ -2048,3 +1961,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(predicate);\n@@ -2055,3 +1966,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            return new EmptyDoubleStream(this);\n+            return nextEmptyDoubleStream(predicate);\n@@ -2062,2 +1971,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -2069,2 +1977,1 @@\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            Objects.requireNonNull(action);\n+            checkStateAndThenParameters(action);\n@@ -2084,2 +1991,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -2091,2 +1997,1 @@\n-            Objects.requireNonNull(op);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(op);\n@@ -2098,4 +2003,1 @@\n-            Objects.requireNonNull(supplier);\n-            Objects.requireNonNull(accumulator);\n-            Objects.requireNonNull(combiner);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(supplier, accumulator, combiner);\n@@ -2125,2 +2027,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -2132,2 +2033,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -2139,2 +2039,1 @@\n-            Objects.requireNonNull(predicate);\n-            checkIfOperatedOnOrClosedAndChangeState();\n+            checkParametersAndThenState(predicate);\n@@ -2182,5 +2081,0 @@\n-        @Override\n-        public boolean isParallel() {\n-            return false;\n-        }\n-\n@@ -2199,4 +2093,3 @@\n-            if (super.stateIsUnordered()) return this;\n-            checkIfOperatedOnOrClosedAndChangeState();\n-            super.stateUnordered();\n-            return new EmptyDoubleStream(this);\n+            checkIfOperatedOnOrClosed();\n+            if (super.unorderedSame()) return this;\n+            else return new EmptyDoubleStream(this);\n@@ -2315,0 +2208,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Streams.java","additions":164,"deletions":270,"binary":false,"changes":434,"status":"modified"},{"patch":"@@ -296,0 +296,1 @@\n+        assertEquals(actualResult.characteristics(), expectedResult.characteristics());\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/EmptyBaseStreamTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Arrays;\n+import java.util.Spliterator;\n@@ -37,0 +39,1 @@\n+import java.util.function.Function;\n@@ -57,0 +60,9 @@\n+        Function<Spliterator.OfDouble, DoubleStream> emptyStreamCreator =\n+                StreamSupport::emptyDoubleStream;\n+        Function<Spliterator.OfDouble, DoubleStream> traditionalStreamCreator =\n+                spliterator -> StreamSupport.doubleStream(spliterator, false);\n+\n+        this.compare(DoubleStream.class,\n+                () -> emptyStreamCreator.apply(Spliterators.emptyDoubleSpliterator()),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyDoubleSpliterator())\n+        );\n@@ -58,1 +70,2 @@\n-                DoubleStream::empty, () -> StreamSupport.doubleStream(Spliterators.emptyDoubleSpliterator(), false)\n+                () -> emptyStreamCreator.apply(Spliterators.emptyDoubleSpliterator()).parallel(),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyDoubleSpliterator()).parallel()\n@@ -61,1 +74,2 @@\n-                () -> DoubleStream.empty().parallel(), () -> StreamSupport.doubleStream(Spliterators.emptyDoubleSpliterator(), true)\n+                () -> emptyStreamCreator.apply(Arrays.spliterator(new double[0])),\n+                () -> traditionalStreamCreator.apply(Arrays.spliterator(new double[0]))\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/EmptyDoubleStreamTest.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Arrays;\n+import java.util.Spliterator;\n@@ -30,0 +32,1 @@\n+import java.util.function.Function;\n@@ -57,0 +60,9 @@\n+        Function<Spliterator.OfInt, IntStream> emptyStreamCreator =\n+                StreamSupport::emptyIntStream;\n+        Function<Spliterator.OfInt, IntStream> traditionalStreamCreator =\n+                spliterator -> StreamSupport.intStream(spliterator, false);\n+\n+        this.compare(IntStream.class,\n+                () -> emptyStreamCreator.apply(Spliterators.emptyIntSpliterator()),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyIntSpliterator())\n+        );\n@@ -58,1 +70,2 @@\n-                IntStream::empty, () -> StreamSupport.intStream(Spliterators.emptyIntSpliterator(), false)\n+                () -> emptyStreamCreator.apply(Spliterators.emptyIntSpliterator()).parallel(),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyIntSpliterator()).parallel()\n@@ -61,1 +74,2 @@\n-                () -> IntStream.empty().parallel(), () -> StreamSupport.intStream(Spliterators.emptyIntSpliterator(), true)\n+                () -> emptyStreamCreator.apply(Arrays.spliterator(new int[0])),\n+                () -> traditionalStreamCreator.apply(Arrays.spliterator(new int[0]))\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/EmptyIntStreamTest.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Arrays;\n+import java.util.Spliterator;\n@@ -30,0 +32,1 @@\n+import java.util.function.Function;\n@@ -57,0 +60,9 @@\n+        Function<Spliterator.OfLong, LongStream> emptyStreamCreator =\n+                StreamSupport::emptyLongStream;\n+        Function<Spliterator.OfLong, LongStream> traditionalStreamCreator =\n+                spliterator -> StreamSupport.longStream(spliterator, false);\n+\n+        this.compare(LongStream.class,\n+                () -> emptyStreamCreator.apply(Spliterators.emptyLongSpliterator()),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyLongSpliterator())\n+        );\n@@ -58,1 +70,2 @@\n-                LongStream::empty, () -> StreamSupport.longStream(Spliterators.emptyLongSpliterator(), false)\n+                () -> emptyStreamCreator.apply(Spliterators.emptyLongSpliterator()).parallel(),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptyLongSpliterator()).parallel()\n@@ -61,1 +74,2 @@\n-                () -> LongStream.empty().parallel(), () -> StreamSupport.longStream(Spliterators.emptyLongSpliterator(), true)\n+                () -> emptyStreamCreator.apply(Arrays.spliterator(new long[0])),\n+                () -> traditionalStreamCreator.apply(Arrays.spliterator(new long[0]))\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/EmptyLongStreamTest.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n@@ -29,0 +34,5 @@\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.PriorityQueue;\n@@ -30,0 +40,1 @@\n+import java.util.Spliterator;\n@@ -31,0 +42,15 @@\n+import java.util.TreeSet;\n+import java.util.Vector;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.DelayQueue;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.LinkedTransferQueue;\n+import java.util.concurrent.PriorityBlockingQueue;\n+import java.util.concurrent.SynchronousQueue;\n@@ -62,0 +88,9 @@\n+        Function<Spliterator<?>, Stream<?>> emptyStreamCreator =\n+                StreamSupport::emptyStream;\n+        Function<Spliterator<?>, Stream<?>> traditionalStreamCreator =\n+                spliterator -> StreamSupport.stream(spliterator, false);\n+\n+        this.compare(Stream.class,\n+                () -> emptyStreamCreator.apply(Spliterators.emptySpliterator()),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptySpliterator())\n+        );\n@@ -63,2 +98,2 @@\n-                Stream::empty,\n-                () -> StreamSupport.stream(Spliterators.emptySpliterator(), false)\n+                () -> emptyStreamCreator.apply(Spliterators.emptySpliterator()).parallel(),\n+                () -> traditionalStreamCreator.apply(Spliterators.emptySpliterator()).parallel()\n@@ -67,2 +102,40 @@\n-                () -> Stream.empty().parallel(),\n-                () -> StreamSupport.stream(Spliterators.emptySpliterator(), true)\n+                () -> emptyStreamCreator.apply(Arrays.spliterator(new Object[0])),\n+                () -> traditionalStreamCreator.apply(Arrays.spliterator(new Object[0]))\n+        );\n+\n+        List<Supplier<Collection<?>>> suppliers = List.of(\n+                ArrayList::new,\n+                LinkedList::new,\n+                Vector::new,\n+                CopyOnWriteArrayList::new,\n+\n+                HashSet::new,\n+                TreeSet::new,\n+                ConcurrentSkipListSet::new,\n+                ConcurrentHashMap::newKeySet,\n+                LinkedHashSet::new,\n+                CopyOnWriteArraySet::new,\n+\n+                () -> new ArrayBlockingQueue<>(10),\n+                LinkedBlockingQueue::new,\n+                LinkedBlockingDeque::new,\n+                ArrayDeque::new,\n+                ConcurrentLinkedQueue::new,\n+                ConcurrentLinkedDeque::new,\n+                DelayQueue::new,\n+                LinkedTransferQueue::new,\n+                PriorityQueue::new,\n+                PriorityBlockingQueue::new,\n+                SynchronousQueue::new,\n+                () -> new ConcurrentSkipListSet<>(Comparator.reverseOrder()),\n+                () -> new TreeSet<>(Comparator.reverseOrder()),\n+                List::of,\n+                Set::of,\n+                Collections::emptyList,\n+                Collections::emptySet,\n+                Collections::emptyNavigableSet,\n+                Collections::emptySortedSet,\n+                Arrays::asList,\n+                () -> Collections.unmodifiableCollection(new ArrayList<>()),\n+                () -> Collections.synchronizedCollection(new ArrayList<>()),\n+                () -> Collections.checkedCollection(new ArrayList<>(), Integer.class)\n@@ -70,0 +143,8 @@\n+\n+        for (Supplier<Collection<?>> supplier : suppliers) {\n+            var collection = supplier.get();\n+            this.compare(Stream.class,\n+                    () -> emptyStreamCreator.apply(collection.spliterator()),\n+                    () -> traditionalStreamCreator.apply(collection.spliterator())\n+            );\n+        }\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/EmptyStreamTest.java","additions":85,"deletions":4,"binary":false,"changes":89,"status":"modified"}]}