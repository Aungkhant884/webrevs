{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-\/\/ The default factory has NO intelligence.  In fact it's not clear\n+\/\/ The default factory has NO intelligence.  In fact, it's not clear\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ServerSocketFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * SSL connection.  All of the core information about that handshake's\n+ * SSL connection.  All the core information about that handshake's\n@@ -55,1 +55,1 @@\n-    private transient SSLSession session;\n+    private final transient SSLSession session;\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/HandshakeCompletedEvent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-    public boolean verify(String hostname, SSLSession session);\n+    boolean verify(String hostname, SSLSession session);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/HostnameVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -48,1 +48,1 @@\n-    private KeyManagerFactorySpi factorySpi;\n+    private final KeyManagerFactorySpi factorySpi;\n@@ -51,1 +51,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -66,1 +66,1 @@\n-    public static final String getDefaultAlgorithm() {\n+    public static String getDefaultAlgorithm() {\n@@ -68,7 +68,2 @@\n-        type = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public String run() {\n-                return Security.getProperty(\n-                    \"ssl.KeyManagerFactory.algorithm\");\n-            }\n-        });\n+        type = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+            Security.getProperty(\"ssl.KeyManagerFactory.algorithm\"));\n@@ -126,1 +121,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/KeyManagerFactory.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-     * which may contains A-labels.  For example, a returned value of an pseudo\n+     * which may contain A-labels.  For example, a returned value of a pseudo\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SNIHostName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-     * returned value of an pseudo server name may look like:\n+     * returned value of a pseudo server name may look like:\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SNIServerName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,1 +162,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n- * functionality, but all of the inbound and outbound data is\n+ * functionality, but all the inbound and outbound data is\n@@ -873,1 +873,1 @@\n-     *          consume anymore network data (and by implication,\n+     *          consume any more network data (and by implication,\n@@ -977,1 +977,1 @@\n-     * on why a specific cipher suite may never be used on a engine.\n+     * on why a specific cipher suite may never be used on an engine.\n@@ -1034,1 +1034,1 @@\n-     * These can be long lived, and frequently correspond to an entire\n+     * These can be long-lived, and frequently correspond to an entire\n@@ -1339,2 +1339,0 @@\n-        } else if (params.getWantClientAuth()) {\n-            setWantClientAuth(true);\n@@ -1342,1 +1340,1 @@\n-            setWantClientAuth(false);\n+            setWantClientAuth(params.getWantClientAuth());\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLEngine.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    public static enum Status {\n+    public enum Status {\n@@ -100,1 +100,1 @@\n-        CLOSED;\n+        CLOSED\n@@ -110,1 +110,1 @@\n-    public static enum HandshakeStatus {\n+    public enum HandshakeStatus {\n@@ -166,1 +166,1 @@\n-        NEED_UNWRAP_AGAIN;\n+        NEED_UNWRAP_AGAIN\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLEngineResult.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-     * or may choose to ignore the parameter altogther. The value provided\n+     * or may choose to ignore the parameter altogether. The value provided\n@@ -157,1 +157,1 @@\n-     * or may choose to ignore the parameter altogther. The value provided\n+     * or may choose to ignore the parameter altogether. The value provided\n@@ -241,1 +241,1 @@\n-    public abstract void setEnabledCipherSuites(String suites []);\n+    public abstract void setEnabledCipherSuites(String[] suites);\n@@ -312,1 +312,1 @@\n-    public abstract void setEnabledProtocols(String protocols[]);\n+    public abstract void setEnabledProtocols(String[] protocols);\n@@ -548,2 +548,0 @@\n-        } else if (params.getWantClientAuth()) {\n-            setWantClientAuth(true);\n@@ -551,1 +549,1 @@\n-            setWantClientAuth(false);\n+            setWantClientAuth(params.getWantClientAuth());\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLServerSocket.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    public byte[] getId();\n+    byte[] getId();\n@@ -94,1 +94,1 @@\n-    public SSLSessionContext getSessionContext();\n+    SSLSessionContext getSessionContext();\n@@ -103,1 +103,1 @@\n-    public long getCreationTime();\n+    long getCreationTime();\n@@ -122,1 +122,1 @@\n-    public long getLastAccessedTime();\n+    long getLastAccessedTime();\n@@ -135,1 +135,1 @@\n-    public void invalidate();\n+    void invalidate();\n@@ -147,1 +147,1 @@\n-    public boolean isValid();\n+    boolean isValid();\n@@ -169,1 +169,1 @@\n-    public void putValue(String name, Object value);\n+    void putValue(String name, Object value);\n@@ -184,1 +184,1 @@\n-    public Object getValue(String name);\n+    Object getValue(String name);\n@@ -201,1 +201,1 @@\n-    public void removeValue(String name);\n+    void removeValue(String name);\n@@ -214,1 +214,1 @@\n-    public String [] getValueNames();\n+    String [] getValueNames();\n@@ -234,1 +234,1 @@\n-    public java.security.cert.Certificate [] getPeerCertificates()\n+    java.security.cert.Certificate [] getPeerCertificates()\n@@ -257,1 +257,1 @@\n-    public java.security.cert.Certificate [] getLocalCertificates();\n+    java.security.cert.Certificate [] getLocalCertificates();\n@@ -294,1 +294,1 @@\n-    public default javax.security.cert.X509Certificate[]\n+    default javax.security.cert.X509Certificate[]\n@@ -317,1 +317,1 @@\n-    public Principal getPeerPrincipal()\n+    Principal getPeerPrincipal()\n@@ -333,1 +333,1 @@\n-    public Principal getLocalPrincipal();\n+    Principal getLocalPrincipal();\n@@ -345,1 +345,1 @@\n-    public String getCipherSuite();\n+    String getCipherSuite();\n@@ -356,1 +356,1 @@\n-    public String getProtocol();\n+    String getProtocol();\n@@ -376,1 +376,1 @@\n-    public String getPeerHost();\n+    String getPeerHost();\n@@ -393,1 +393,1 @@\n-    public int getPeerPort();\n+    int getPeerPort();\n@@ -412,1 +412,1 @@\n-    public int getPacketBufferSize();\n+    int getPacketBufferSize();\n@@ -431,1 +431,1 @@\n-    public int getApplicationBufferSize();\n+    int getApplicationBufferSize();\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSession.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * implement the SSLSessionBindingListener will be receive an\n+ * implement the SSLSessionBindingListener will receive an\n@@ -58,1 +58,1 @@\n-    private String name;\n+    private final String name;\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSessionBindingEvent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    public void valueBound(SSLSessionBindingEvent event);\n+    void valueBound(SSLSessionBindingEvent event);\n@@ -65,1 +65,1 @@\n-    public void valueUnbound(SSLSessionBindingEvent event);\n+    void valueUnbound(SSLSessionBindingEvent event);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSessionBindingListener.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-    public SSLSession getSession(byte[] sessionId);\n+    SSLSession getSession(byte[] sessionId);\n@@ -82,1 +82,1 @@\n-    public Enumeration<byte[]> getIds();\n+    Enumeration<byte[]> getIds();\n@@ -109,2 +109,1 @@\n-    public void setSessionTimeout(int seconds)\n-                 throws IllegalArgumentException;\n+    void setSessionTimeout(int seconds);\n@@ -134,1 +133,1 @@\n-    public int getSessionTimeout();\n+    int getSessionTimeout();\n@@ -153,2 +152,1 @@\n-    public void setSessionCacheSize(int size)\n-                 throws IllegalArgumentException;\n+    void setSessionCacheSize(int size);\n@@ -170,1 +168,1 @@\n-    public int getSessionCacheSize();\n+    int getSessionCacheSize();\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSessionContext.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-    public abstract void setEnabledCipherSuites(String suites []);\n+    public abstract void setEnabledCipherSuites(String[] suites);\n@@ -436,1 +436,1 @@\n-    public abstract void setEnabledProtocols(String protocols[]);\n+    public abstract void setEnabledProtocols(String[] protocols);\n@@ -441,1 +441,1 @@\n-     * be long lived, and frequently correspond to an entire login session\n+     * be long-lived, and frequently correspond to an entire login session\n@@ -747,2 +747,0 @@\n-        } else if (params.getWantClientAuth()) {\n-            setWantClientAuth(true);\n@@ -750,1 +748,1 @@\n-            setWantClientAuth(false);\n+            setWantClientAuth(params.getWantClientAuth());\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocket.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -91,9 +91,6 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public String run() {\n-                String s = java.security.Security.getProperty(name);\n-                if (s != null) {\n-                    s = s.trim();\n-                    if (s.isEmpty()) {\n-                        s = null;\n-                    }\n+        return AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n+            String s = Security.getProperty(name);\n+            if (s != null) {\n+                s = s.trim();\n+                if (s.isEmpty()) {\n+                    s = null;\n@@ -101,1 +98,0 @@\n-                return s;\n@@ -103,0 +99,1 @@\n+            return s;\n@@ -178,1 +175,1 @@\n-     * {@link Socket} begins handshaking, it will read all of the data in\n+     * {@link Socket} begins handshaking, it will read all the data in\n@@ -259,1 +256,1 @@\n-    private Exception reason;\n+    private final Exception reason;\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocketFactory.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -60,1 +60,1 @@\n-    private TrustManagerFactorySpi factorySpi;\n+    private final TrustManagerFactorySpi factorySpi;\n@@ -63,1 +63,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -78,1 +78,1 @@\n-    public static final String getDefaultAlgorithm() {\n+    public static String getDefaultAlgorithm() {\n@@ -80,7 +80,2 @@\n-        type = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public String run() {\n-                return Security.getProperty(\n-                    \"ssl.TrustManagerFactory.algorithm\");\n-            }\n-        });\n+        type = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+            Security.getProperty( \"ssl.TrustManagerFactory.algorithm\"));\n@@ -140,1 +135,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/TrustManagerFactory.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    public String[] getClientAliases(String keyType, Principal[] issuers);\n+    String[] getClientAliases(String keyType, Principal[] issuers);\n@@ -83,2 +83,2 @@\n-    public String chooseClientAlias(String[] keyType, Principal[] issuers,\n-        Socket socket);\n+    String chooseClientAlias(String[] keyType, Principal[] issuers,\n+                             Socket socket);\n@@ -97,1 +97,1 @@\n-    public String[] getServerAliases(String keyType, Principal[] issuers);\n+    String[] getServerAliases(String keyType, Principal[] issuers);\n@@ -114,2 +114,2 @@\n-    public String chooseServerAlias(String keyType, Principal[] issuers,\n-        Socket socket);\n+    String chooseServerAlias(String keyType, Principal[] issuers,\n+                             Socket socket);\n@@ -125,1 +125,1 @@\n-    public X509Certificate[] getCertificateChain(String alias);\n+    X509Certificate[] getCertificateChain(String alias);\n@@ -133,1 +133,1 @@\n-    public PrivateKey getPrivateKey(String alias);\n+    PrivateKey getPrivateKey(String alias);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/X509KeyManager.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    public void checkClientTrusted(X509Certificate[] chain, String authType)\n+    void checkClientTrusted(X509Certificate[] chain, String authType)\n@@ -84,1 +84,1 @@\n-    public void checkServerTrusted(X509Certificate[] chain, String authType)\n+    void checkServerTrusted(X509Certificate[] chain, String authType)\n@@ -94,1 +94,1 @@\n-    public X509Certificate[] getAcceptedIssuers();\n+    X509Certificate[] getAcceptedIssuers();\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/X509TrustManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}