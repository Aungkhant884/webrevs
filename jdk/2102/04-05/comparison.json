{"files":[{"patch":"@@ -535,2 +535,1 @@\n-                byte[] dst = new byte[length];\n-\n+                byte[] dst = null;\n@@ -538,0 +537,1 @@\n+                    dst = new byte[length];\n@@ -567,1 +567,1 @@\n-                if (dp == 0) {\n+                if (dp == 0 || dst == null) {\n@@ -691,17 +691,13 @@\n-        int sl = offset + length;\n-        int dp = 0;\n-        byte[] dst = new byte[length];\n-        if (COMPACT_STRINGS) {\n-            while (offset < sl) {\n-                int b1 = bytes[offset];\n-                if (b1 >= 0) {\n-                    dst[dp++] = (byte)b1;\n-                    offset++;\n-                    continue;\n-                }\n-                if ((b1 == (byte)0xc2 || b1 == (byte)0xc3) &&\n-                        offset + 1 < sl) {\n-                    int b2 = bytes[offset + 1];\n-                    if (!StringCoding.isNotContinuation(b2)) {\n-                        dst[dp++] = (byte)StringCoding.decode2(b1, b2);\n-                        offset += 2;\n+        if (COMPACT_STRINGS && !StringCoding.hasNegatives(bytes, offset, length)) {\n+            return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n+        } else {\n+            int sl = offset + length;\n+            int dp = 0;\n+            byte[] dst = null;\n+            if (COMPACT_STRINGS) {\n+                dst = new byte[length];\n+                while (offset < sl) {\n+                    int b1 = bytes[offset];\n+                    if (b1 >= 0) {\n+                        dst[dp++] = (byte) b1;\n+                        offset++;\n@@ -710,0 +706,12 @@\n+                    if ((b1 == (byte) 0xc2 || b1 == (byte) 0xc3) &&\n+                            offset + 1 < sl) {\n+                        int b2 = bytes[offset + 1];\n+                        if (!StringCoding.isNotContinuation(b2)) {\n+                            dst[dp++] = (byte) StringCoding.decode2(b1, b2);\n+                            offset += 2;\n+                            continue;\n+                        }\n+                    }\n+                    \/\/ anything not a latin1, including the REPL\n+                    \/\/ we have to go with the utf16\n+                    break;\n@@ -711,7 +719,5 @@\n-                \/\/ anything not a latin1, including the REPL\n-                \/\/ we have to go with the utf16\n-                break;\n-            }\n-            if (offset == sl) {\n-                if (dp != dst.length) {\n-                    dst = Arrays.copyOf(dst, dp);\n+                if (offset == sl) {\n+                    if (dp != dst.length) {\n+                        dst = Arrays.copyOf(dst, dp);\n+                    }\n+                    return new String(dst, LATIN1);\n@@ -719,1 +725,0 @@\n-                return new String(dst, LATIN1);\n@@ -721,0 +726,12 @@\n+            if (dp == 0 || dst == null) {\n+                dst = new byte[length << 1];\n+            } else {\n+                byte[] buf = new byte[length << 1];\n+                StringLatin1.inflate(dst, 0, buf, 0, dp);\n+                dst = buf;\n+            }\n+            dp = StringCoding.decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n+            if (dp != length) {\n+                dst = Arrays.copyOf(dst, dp << 1);\n+            }\n+            return new String(dst, UTF16);\n@@ -722,12 +739,0 @@\n-        if (dp == 0) {\n-            dst = new byte[length << 1];\n-        } else {\n-            byte[] buf = new byte[length << 1];\n-            StringLatin1.inflate(dst, 0, buf, 0, dp);\n-            dst = buf;\n-        }\n-        dp = StringCoding.decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n-        if (dp != length) {\n-            dst = Arrays.copyOf(dst, dp << 1);\n-        }\n-        return new String(dst, UTF16);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":45,"deletions":40,"binary":false,"changes":85,"status":"modified"}]}