{"files":[{"patch":"@@ -61,1 +61,0 @@\n-import static java.lang.StringUTF16.putChar;\n@@ -227,2 +226,0 @@\n-    private static final char REPL = '\\ufffd';\n-\n@@ -566,3 +563,1 @@\n-                                dst[dp++] = (byte)(((b1 << 6) ^ b2)^\n-                                        (((byte) 0xC0 << 6) ^\n-                                        ((byte) 0x80 << 0)));\n+                                dst[dp++] = (byte)StringCoding.decode2(b1, b2);\n@@ -593,88 +588,1 @@\n-                while (offset < sl) {\n-                    int b1 = bytes[offset++];\n-                    if (b1 >= 0) {\n-                        putChar(dst, dp++, (char) b1);\n-                    } else if ((b1 >> 5) == -2 && (b1 & 0x1e) != 0) {\n-                        if (offset < sl) {\n-                            int b2 = bytes[offset++];\n-                            if (StringCoding.isNotContinuation(b2)) {\n-                                putChar(dst, dp++, REPL);\n-                                offset--;\n-                            } else {\n-                                putChar(dst, dp++, (char)(((b1 << 6) ^ b2)^\n-                                        (((byte) 0xC0 << 6) ^\n-                                        ((byte) 0x80 << 0))));\n-                            }\n-                            continue;\n-                        }\n-                        putChar(dst, dp++, REPL);\n-                        break;\n-                    } else if ((b1 >> 4) == -2) {\n-                        if (offset + 1 < sl) {\n-                            int b2 = bytes[offset++];\n-                            int b3 = bytes[offset++];\n-                            if (StringCoding.isMalformed3(b1, b2, b3)) {\n-                                putChar(dst, dp++, REPL);\n-                                offset -= 3;\n-                                offset += StringCoding.malformedN(bytes, offset, 3);\n-                            } else {\n-                                char c = (char)((b1 << 12) ^\n-                                                (b2 <<  6) ^\n-                                                (b3 ^\n-                                                 (((byte) 0xE0 << 12) ^\n-                                                  ((byte) 0x80 <<  6) ^\n-                                                  ((byte) 0x80 <<  0))));\n-                                if (Character.isSurrogate(c)) {\n-                                    putChar(dst, dp++, REPL);\n-                                } else {\n-                                    putChar(dst, dp++, c);\n-                                }\n-                            }\n-                            continue;\n-                        }\n-                        if (offset  < sl && StringCoding.isMalformed3_2(b1, bytes[offset])) {\n-                            putChar(dst, dp++, REPL);\n-                            continue;\n-                        }\n-                        putChar(dst, dp++, REPL);\n-                        break;\n-                    } else if ((b1 >> 3) == -2) {\n-                        if (offset + 2 < sl) {\n-                            int b2 = bytes[offset++];\n-                            int b3 = bytes[offset++];\n-                            int b4 = bytes[offset++];\n-                            int uc = ((b1 << 18) ^\n-                                      (b2 << 12) ^\n-                                      (b3 <<  6) ^\n-                                      (b4 ^\n-                                       (((byte) 0xF0 << 18) ^\n-                                        ((byte) 0x80 << 12) ^\n-                                        ((byte) 0x80 <<  6) ^\n-                                        ((byte) 0x80 <<  0))));\n-                            if (StringCoding.isMalformed4(b2, b3, b4) ||\n-                                    !Character.isSupplementaryCodePoint(uc)) { \/\/ shortest form check\n-                                putChar(dst, dp++, REPL);\n-                                offset -= 4;\n-                                offset += StringCoding.malformedN(bytes, offset, 4);\n-                            } else {\n-                                putChar(dst, dp++, Character.highSurrogate(uc));\n-                                putChar(dst, dp++, Character.lowSurrogate(uc));\n-                            }\n-                            continue;\n-                        }\n-                        b1 &= 0xff;\n-                        if (b1 > 0xf4 ||\n-                                offset  < sl && StringCoding.isMalformed4_2(b1, bytes[offset] & 0xff)) {\n-                            putChar(dst, dp++, REPL);\n-                            continue;\n-                        }\n-                        offset++;\n-                        putChar(dst, dp++, REPL);\n-                        if (offset  < sl && StringCoding.isMalformed4_3(bytes[offset])) {\n-                            continue;\n-                        }\n-                        break;\n-                    } else {\n-                        putChar(dst, dp++, REPL);\n-                    }\n-                }\n+                dp = StringCoding.decodeUTF8_UTF16(bytes, offset, sl, dst, dp, true);\n@@ -704,1 +612,1 @@\n-                    putChar(dst, dp++, (b >= 0) ? (char) b : REPL);\n+                    StringUTF16.putChar(dst, dp++, (b >= 0) ? (char) b : StringCoding.REPL);\n@@ -909,3 +817,1 @@\n-                        dst[dp++] = (byte)(((b1 << 6) ^ b2)^\n-                                (((byte) 0xC0 << 6) ^\n-                                        ((byte) 0x80 << 0)));\n+                        dst[dp++] = (byte)StringCoding.decode2(b1, b2);\n@@ -916,1 +822,1 @@\n-                \/\/ anything not a latin1, including the repl\n+                \/\/ anything not a latin1, including the REPL\n@@ -936,79 +842,1 @@\n-        while (offset < sl) {\n-            int b1 = bytes[offset++];\n-            if (b1 >= 0) {\n-                putChar(dst, dp++, (char) b1);\n-            } else if ((b1 >> 5) == -2 && (b1 & 0x1e) != 0) {\n-                if (offset < sl) {\n-                    int b2 = bytes[offset++];\n-                    if (StringCoding.isNotContinuation(b2)) {\n-                        StringCoding.throwMalformed(offset - 1, 1);\n-                    } else {\n-                        putChar(dst, dp++, (char)(((b1 << 6) ^ b2)^\n-                                (((byte) 0xC0 << 6) ^\n-                                        ((byte) 0x80 << 0))));\n-                    }\n-                    continue;\n-                }\n-                StringCoding.throwMalformed(offset, 1);  \/\/ underflow()\n-                break;\n-            } else if ((b1 >> 4) == -2) {\n-                if (offset + 1 < sl) {\n-                    int b2 = bytes[offset++];\n-                    int b3 = bytes[offset++];\n-                    if (StringCoding.isMalformed3(b1, b2, b3)) {\n-                        StringCoding.throwMalformed(offset - 3, 3);\n-                    } else {\n-                        char c = (char)((b1 << 12) ^\n-                                (b2 <<  6) ^\n-                                (b3 ^\n-                                        (((byte) 0xE0 << 12) ^\n-                                        ((byte) 0x80 <<  6) ^\n-                                        ((byte) 0x80 <<  0))));\n-                        if (Character.isSurrogate(c)) {\n-                            StringCoding.throwMalformed(offset - 3, 3);\n-                        } else {\n-                            putChar(dst, dp++, c);\n-                        }\n-                    }\n-                    continue;\n-                }\n-                if (offset  < sl && StringCoding.isMalformed3_2(b1, bytes[offset])) {\n-                    StringCoding.throwMalformed(offset - 1, 2);\n-                    continue;\n-                }\n-                StringCoding.throwMalformed(offset, 1);\n-                break;\n-            } else if ((b1 >> 3) == -2) {\n-                if (offset + 2 < sl) {\n-                    int b2 = bytes[offset++];\n-                    int b3 = bytes[offset++];\n-                    int b4 = bytes[offset++];\n-                    int uc = ((b1 << 18) ^\n-                              (b2 << 12) ^\n-                              (b3 <<  6) ^\n-                              (b4 ^\n-                               (((byte) 0xF0 << 18) ^\n-                               ((byte) 0x80 << 12) ^\n-                               ((byte) 0x80 <<  6) ^\n-                               ((byte) 0x80 <<  0))));\n-                    if (StringCoding.isMalformed4(b2, b3, b4) ||\n-                            !Character.isSupplementaryCodePoint(uc)) { \/\/ shortest form check\n-                        StringCoding.throwMalformed(offset - 4, 4);\n-                    } else {\n-                        putChar(dst, dp++, Character.highSurrogate(uc));\n-                        putChar(dst, dp++, Character.lowSurrogate(uc));\n-                    }\n-                    continue;\n-                }\n-                b1 &= 0xff;\n-                if (b1 > 0xf4 ||\n-                    offset < sl && StringCoding.isMalformed4_2(b1, bytes[offset] & 0xff)) {\n-                    StringCoding.throwMalformed(offset - 1, 1);  \/\/ or 2\n-                    continue;\n-                }\n-                StringCoding.throwMalformed(offset - 1, 1);\n-                break;\n-            } else {\n-                StringCoding.throwMalformed(offset - 1, 1);\n-            }\n-        }\n+        dp = StringCoding.decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":6,"deletions":178,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import static java.lang.StringUTF16.putChar;\n@@ -65,0 +66,2 @@\n+    static final char REPL = '\\ufffd';\n+\n@@ -402,0 +405,134 @@\n+    static char decode2(int b1, int b2) {\n+        return (char)(((b1 << 6) ^ b2)^\n+                (((byte) 0xC0 << 6) ^\n+                ((byte) 0x80 << 0)));\n+    }\n+\n+    static char decode3(int b1, int b2, int b3) {\n+        return (char)((b1 << 12) ^\n+                        (b2 <<  6) ^\n+                        (b3 ^\n+                         (((byte) 0xE0 << 12) ^\n+                          ((byte) 0x80 <<  6) ^\n+                          ((byte) 0x80 <<  0))));\n+    }\n+\n+    static int decode4(int b1, int b2, int b3, int b4) {\n+        return ((b1 << 18) ^\n+                (b2 << 12) ^\n+                (b3 <<  6) ^\n+                (b4 ^\n+                 (((byte) 0xF0 << 18) ^\n+                  ((byte) 0x80 << 12) ^\n+                  ((byte) 0x80 <<  6) ^\n+                  ((byte) 0x80 <<  0))));\n+    }\n+\n+    static int decodeUTF8_UTF16(byte[] bytes, int offset, int sl, byte[] dst, int dp, boolean doReplace) {\n+        while (offset < sl) {\n+            int b1 = bytes[offset++];\n+            if (b1 >= 0) {\n+                putChar(dst, dp++, (char) b1);\n+            } else if ((b1 >> 5) == -2 && (b1 & 0x1e) != 0) {\n+                if (offset < sl) {\n+                    int b2 = bytes[offset++];\n+                    if (StringCoding.isNotContinuation(b2)) {\n+                        if (!doReplace) {\n+                            throwMalformed(offset - 1, 1);\n+                        }\n+                        putChar(dst, dp++, REPL);\n+                        offset--;\n+                    } else {\n+                        putChar(dst, dp++, decode2(b1, b2));\n+                    }\n+                    continue;\n+                }\n+                if (!doReplace) {\n+                    throwMalformed(offset, 1);  \/\/ underflow()\n+                }\n+                putChar(dst, dp++, REPL);\n+                break;\n+            } else if ((b1 >> 4) == -2) {\n+                if (offset + 1 < sl) {\n+                    int b2 = bytes[offset++];\n+                    int b3 = bytes[offset++];\n+                    if (isMalformed3(b1, b2, b3)) {\n+                        if (!doReplace) {\n+                            throwMalformed(offset - 3, 3);\n+                        }\n+                        putChar(dst, dp++, REPL);\n+                        offset -= 3;\n+                        offset += malformedN(bytes, offset, 3);\n+                    } else {\n+                        char c = decode3(b1, b2, b3);\n+                        if (Character.isSurrogate(c)) {\n+                            if (!doReplace) {\n+                                throwMalformed(offset - 3, 3);\n+                            }\n+                            putChar(dst, dp++, REPL);\n+                        } else {\n+                            putChar(dst, dp++, c);\n+                        }\n+                    }\n+                    continue;\n+                }\n+                if (offset < sl && isMalformed3_2(b1, bytes[offset])) {\n+                    if (!doReplace) {\n+                        throwMalformed(offset - 1, 2);\n+                    }\n+                    putChar(dst, dp++, REPL);\n+                    continue;\n+                }\n+                if (!doReplace) {\n+                    throwMalformed(offset, 1);\n+                }\n+                putChar(dst, dp++, REPL);\n+                break;\n+            } else if ((b1 >> 3) == -2) {\n+                if (offset + 2 < sl) {\n+                    int b2 = bytes[offset++];\n+                    int b3 = bytes[offset++];\n+                    int b4 = bytes[offset++];\n+                    int uc = decode4(b1, b2, b3, b4);\n+                    if (isMalformed4(b2, b3, b4) ||\n+                            !Character.isSupplementaryCodePoint(uc)) { \/\/ shortest form check\n+                        if (!doReplace) {\n+                            throwMalformed(offset - 4, 4);\n+                        }\n+                        putChar(dst, dp++, REPL);\n+                        offset -= 4;\n+                        offset += StringCoding.malformedN(bytes, offset, 4);\n+                    } else {\n+                        putChar(dst, dp++, Character.highSurrogate(uc));\n+                        putChar(dst, dp++, Character.lowSurrogate(uc));\n+                    }\n+                    continue;\n+                }\n+                b1 &= 0xff;\n+                if (b1 > 0xf4 ||\n+                        offset  < sl && StringCoding.isMalformed4_2(b1, bytes[offset] & 0xff)) {\n+                    if (!doReplace) {\n+                        throwMalformed(offset - 1, 1);  \/\/ or 2\n+                    }\n+                    putChar(dst, dp++, REPL);\n+                    continue;\n+                }\n+                if (!doReplace) {\n+                    throwMalformed(offset - 1, 1);\n+                }\n+                offset++;\n+                putChar(dst, dp++, REPL);\n+                if (offset < sl && StringCoding.isMalformed4_3(bytes[offset])) {\n+                    continue;\n+                }\n+                break;\n+            } else {\n+                if (!doReplace) {\n+                    throwMalformed(offset - 1, 1);\n+                }\n+                putChar(dst, dp++, REPL);\n+            }\n+        }\n+        return dp;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"modified"}]}