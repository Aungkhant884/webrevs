{"files":[{"patch":"@@ -63,3 +63,6 @@\n-    if (PSScavenge::should_scavenge(p)) {\n-      \/\/ We never card mark roots, maybe call a func without test?\n-      _promotion_manager->copy_and_push_safe_barrier<promote_immediately>(p);\n+    assert(!ParallelScavengeHeap::heap()->is_in_reserved(p), \"roots should be outside of heap\");\n+    oop o = RawAccess<>::oop_load(p);\n+    if (PSScavenge::is_obj_in_young(o)) {\n+      assert(!PSScavenge::is_obj_in_to_space(o), \"Revisiting roots?\");\n+      oop new_obj = _promotion_manager->copy_to_survivor_space<promote_immediately>(o);\n+      RawAccess<IS_NOT_NULL>::oop_store(p, new_obj);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -303,2 +303,0 @@\n-\/\/ This version tests the oop* to make sure it is within the heap before\n-\/\/ attempting marking.\n@@ -307,0 +305,1 @@\n+  assert(ParallelScavengeHeap::heap()->is_in_reserved(p), \"precondition\");\n@@ -313,8 +312,3 @@\n-  \/\/ We cannot mark without test, as some code passes us pointers\n-  \/\/ that are outside the heap. These pointers are either from roots\n-  \/\/ or from metadata.\n-  if ((!PSScavenge::is_obj_in_young((HeapWord*)p)) &&\n-      ParallelScavengeHeap::heap()->is_in_reserved(p)) {\n-    if (PSScavenge::is_obj_in_young(new_obj)) {\n-      PSScavenge::card_table()->inline_write_ref_field_gc(p, new_obj);\n-    }\n+  if (!PSScavenge::is_obj_in_young((HeapWord*)p) &&\n+       PSScavenge::is_obj_in_young(new_obj)) {\n+    PSScavenge::card_table()->inline_write_ref_field_gc(p, new_obj);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -138,0 +138,4 @@\n+\n+  static bool is_obj_in_to_space(oop o) {\n+    return ParallelScavengeHeap::young_gen()->to_space()->contains(o);\n+  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}