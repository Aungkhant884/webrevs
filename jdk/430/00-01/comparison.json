{"files":[{"patch":"@@ -319,5 +319,9 @@\n-    \/\/ For file mapping, we do not call os:reserve_memory() because\n-    \/\/ we need to deal with shrinking of the file space later when we release extra memory after alignment.\n-    \/\/ We also cannot called os:reserve_memory() with file_desc set to -1 because on aix we might get SHM memory.\n-    \/\/ So here to call a helper function while reserve memory for us. After we have a aligned base,\n-    \/\/ we will replace anonymous mapping with file mapping.\n+    \/\/ For file mapping, we do not call os:reserve_memory_with_fd since:\n+    \/\/ - we later chop away parts of the mapping using os::release_memory and that could fail if the\n+    \/\/   original mmap call had been tied to a fd (TODO: really?)\n+    \/\/ - there is no guarantee that os::reserve_memory even returns mmaped memory. In fact it never does\n+    \/\/   on Windows, obviously, and usually on AIX SystemV shm is used.\n+    \/\/\n+    \/\/ Todo: this probably works more out of accident. Using reserve_mmapped_memory would require an munmap\n+    \/\/  to release, but later in this function os::release_memory is used which is not guaranteed to use mmap.\n+    \/\/  See JDK-8253851.\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-    \/\/ Optimistically assume that the OSes returns an aligned base pointer.\n+    \/\/ Optimistically assume that the OS returns an aligned base pointer.\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}