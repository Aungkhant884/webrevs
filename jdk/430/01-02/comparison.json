{"files":[{"patch":"@@ -321,7 +321,4 @@\n-    \/\/   original mmap call had been tied to a fd (TODO: really?)\n-    \/\/ - there is no guarantee that os::reserve_memory even returns mmaped memory. In fact it never does\n-    \/\/   on Windows, obviously, and usually on AIX SystemV shm is used.\n-    \/\/\n-    \/\/ Todo: this probably works more out of accident. Using reserve_mmapped_memory would require an munmap\n-    \/\/  to release, but later in this function os::release_memory is used which is not guaranteed to use mmap.\n-    \/\/  See JDK-8253851.\n+    \/\/   original mmap call had been tied to an fd.\n+    \/\/ - The memory API os::reserve_memory uses is an implementation detail. It may (and usually is)\n+    \/\/   mmap but it also may System V shared memory which cannot be uncommitted as a whole, so\n+    \/\/   chopping off and unmapping excess bits back and front (see below) would not work.\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}