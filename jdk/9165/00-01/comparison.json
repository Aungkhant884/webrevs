{"files":[{"patch":"@@ -736,1 +736,1 @@\n-    CompLevel comp_level = (CompLevel)parse_int(comp_level_label);\n+    int comp_level = parse_int(comp_level_label);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,2 +215,2 @@\n-  virtual CompLevel comp_level() const = 0;\n-  virtual int       compile_id() const = 0;\n+  virtual int   comp_level() const = 0;\n+  virtual int   compile_id() const = 0;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  CompLevel comp_level\n+  int comp_level\n@@ -721,1 +721,1 @@\n-void* nmethod::operator new(size_t size, int nmethod_size, CompLevel comp_level) throw () {\n+void* nmethod::operator new(size_t size, int nmethod_size, int comp_level) throw () {\n@@ -741,1 +741,1 @@\n-  CompLevel comp_level\n+  int comp_level\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-  CompLevel _comp_level;               \/\/ compilation level\n+  int _comp_level;               \/\/ compilation level\n@@ -316,1 +316,1 @@\n-          CompLevel comp_level\n+          int comp_level\n@@ -325,1 +325,1 @@\n-  void* operator new(size_t size, int nmethod_size, CompLevel comp_level) throw();\n+  void* operator new(size_t size, int nmethod_size, int comp_level) throw();\n@@ -364,1 +364,1 @@\n-                              CompLevel comp_level\n+                              int comp_level\n@@ -503,1 +503,1 @@\n-  CompLevel comp_level() const                    { return _comp_level; }\n+  int   comp_level() const                        { return _comp_level; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-bool CompilationPolicy::must_be_compiled(const methodHandle& m, CompLevel comp_level) {\n+bool CompilationPolicy::must_be_compiled(const methodHandle& m, int comp_level) {\n@@ -126,1 +126,1 @@\n-bool CompilationPolicy::can_be_compiled(const methodHandle& m, CompLevel comp_level) {\n+bool CompilationPolicy::can_be_compiled(const methodHandle& m, int comp_level) {\n@@ -150,1 +150,1 @@\n-bool CompilationPolicy::can_be_osr_compiled(const methodHandle& m, CompLevel comp_level) {\n+bool CompilationPolicy::can_be_osr_compiled(const methodHandle& m, int comp_level) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-  static bool must_be_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n+  static bool must_be_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n@@ -250,1 +250,1 @@\n-  static bool can_be_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n+  static bool can_be_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n@@ -252,1 +252,1 @@\n-  static bool can_be_osr_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n+  static bool can_be_osr_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-CompileQueue* CompileBroker::compile_queue(CompLevel comp_level) {\n+CompileQueue* CompileBroker::compile_queue(int comp_level) {\n@@ -1166,1 +1166,1 @@\n-                                        CompLevel comp_level,\n+                                        int comp_level,\n@@ -1348,1 +1348,1 @@\n-                                       CompLevel comp_level,\n+                                       int comp_level,\n@@ -1368,1 +1368,1 @@\n-                                         CompLevel comp_level,\n+                                         int comp_level,\n@@ -1517,1 +1517,1 @@\n-                                            CompLevel           comp_level) {\n+                                            int                 comp_level) {\n@@ -1556,1 +1556,1 @@\n-bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, CompLevel comp_level, bool excluded) {\n+bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded) {\n@@ -1645,1 +1645,1 @@\n-                                                CompLevel           comp_level,\n+                                                int                 comp_level,\n@@ -2192,1 +2192,1 @@\n-  const CompLevel task_level = task->comp_level();\n+  const int task_level = task->comp_level();\n@@ -2514,1 +2514,1 @@\n-  const CompLevel comp_level = task->comp_level();\n+  const int comp_level = task->comp_level();\n@@ -2638,1 +2638,1 @@\n-const char* CompileBroker::compiler_name(CompLevel comp_level) {\n+const char* CompileBroker::compiler_name(int comp_level) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, CompLevel comp_level, bool excluded);\n+  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded);\n@@ -247,1 +247,1 @@\n-                                          CompLevel           comp_level,\n+                                          int                 comp_level,\n@@ -266,1 +266,1 @@\n-                                  CompLevel comp_level,\n+                                  int comp_level,\n@@ -273,1 +273,1 @@\n-  static CompileQueue* compile_queue(CompLevel comp_level);\n+  static CompileQueue* compile_queue(int comp_level);\n@@ -283,1 +283,1 @@\n-  static AbstractCompiler* compiler(CompLevel comp_level) {\n+  static AbstractCompiler* compiler(int comp_level) {\n@@ -289,1 +289,1 @@\n-  static bool compilation_is_complete(const methodHandle& method, int osr_bci, CompLevel comp_level);\n+  static bool compilation_is_complete(const methodHandle& method, int osr_bci, int comp_level);\n@@ -292,1 +292,1 @@\n-  static int queue_size(CompLevel comp_level) {\n+  static int queue_size(int comp_level) {\n@@ -301,1 +301,1 @@\n-                                 CompLevel comp_level,\n+                                 int comp_level,\n@@ -309,1 +309,1 @@\n-                                   CompLevel comp_level,\n+                                   int comp_level,\n@@ -380,1 +380,1 @@\n-  static const char* compiler_name(CompLevel comp_level);\n+  static const char* compiler_name(int comp_level);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                             CompLevel comp_level,\n+                             int comp_level,\n@@ -238,1 +238,1 @@\n-void CompileTask::print_impl(outputStream* st, Method* method, int compile_id, CompLevel comp_level,\n+void CompileTask::print_impl(outputStream* st, Method* method, int compile_id, int comp_level,\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  CompLevel    _comp_level;\n+  int          _comp_level;\n@@ -111,1 +111,1 @@\n-  void initialize(int compile_id, const methodHandle& method, int osr_bci, CompLevel comp_level,\n+  void initialize(int compile_id, const methodHandle& method, int osr_bci, int comp_level,\n@@ -167,2 +167,2 @@\n-  CompLevel    comp_level()                      { return _comp_level;}\n-  void         set_comp_level(CompLevel comp_level)  { _comp_level = comp_level; }\n+  int          comp_level()                      { return _comp_level;}\n+  void         set_comp_level(int comp_level)    { _comp_level = comp_level;}\n@@ -189,1 +189,1 @@\n-  static void  print_impl(outputStream* st, Method* method, int compile_id, CompLevel comp_level,\n+  static void  print_impl(outputStream* st, Method* method, int compile_id, int comp_level,\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2054,1 +2054,1 @@\n-  CompLevel comp_level = CompLevel_full_optimization;\n+  int comp_level = CompLevel_full_optimization;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3268,1 +3268,1 @@\n-  n->method()->set_highest_osr_comp_level(MAX2(n->method()->highest_osr_comp_level(), int(n->comp_level())));\n+  n->method()->set_highest_osr_comp_level(MAX2(n->method()->highest_osr_comp_level(), n->comp_level()));\n@@ -3287,1 +3287,1 @@\n-  CompLevel max_level = CompLevel_none;  \/\/ Find the max comp level excluding n\n+  int max_level = CompLevel_none;  \/\/ Find the max comp level excluding n\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1044,1 +1044,1 @@\n-void Method::print_made_not_compilable(CompLevel comp_level, bool is_osr, bool report, const char* reason) {\n+void Method::print_made_not_compilable(int comp_level, bool is_osr, bool report, const char* reason) {\n@@ -1088,1 +1088,1 @@\n-bool Method::is_not_compilable(CompLevel comp_level) const {\n+bool Method::is_not_compilable(int comp_level) const {\n@@ -1103,1 +1103,1 @@\n-void Method::set_not_compilable(const char* reason, CompLevel comp_level, bool report) {\n+void Method::set_not_compilable(const char* reason, int comp_level, bool report) {\n@@ -1121,1 +1121,1 @@\n-bool Method::is_not_osr_compilable(CompLevel comp_level) const {\n+bool Method::is_not_osr_compilable(int comp_level) const {\n@@ -1133,1 +1133,1 @@\n-void Method::set_not_osr_compilable(const char* reason, CompLevel comp_level, bool report) {\n+void Method::set_not_osr_compilable(const char* reason, int comp_level, bool report) {\n@@ -1316,1 +1316,1 @@\n-  CompLevel comp_level = code->comp_level();\n+  int comp_level = code->comp_level();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -932,3 +932,3 @@\n-  bool  is_not_compilable(CompLevel comp_level = CompLevel_any) const;\n-  void set_not_compilable(const char* reason, CompLevel comp_level = CompLevel_all, bool report = true);\n-  void set_not_compilable_quietly(const char* reason, CompLevel comp_level = CompLevel_all) {\n+  bool  is_not_compilable(int comp_level = CompLevel_any) const;\n+  void set_not_compilable(const char* reason, int comp_level = CompLevel_all, bool report = true);\n+  void set_not_compilable_quietly(const char* reason, int comp_level = CompLevel_all) {\n@@ -937,3 +937,3 @@\n-  bool  is_not_osr_compilable(CompLevel comp_level = CompLevel_any) const;\n-  void set_not_osr_compilable(const char* reason, CompLevel comp_level = CompLevel_all, bool report = true);\n-  void set_not_osr_compilable_quietly(const char* reason, CompLevel comp_level = CompLevel_all) {\n+  bool  is_not_osr_compilable(int comp_level = CompLevel_any) const;\n+  void set_not_osr_compilable(const char* reason, int comp_level = CompLevel_all, bool report = true);\n+  void set_not_osr_compilable_quietly(const char* reason, int comp_level = CompLevel_all) {\n@@ -945,1 +945,1 @@\n-  void print_made_not_compilable(CompLevel comp_level, bool is_osr, bool report, const char* reason);\n+  void print_made_not_compilable(int comp_level, bool is_osr, bool report, const char* reason);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -827,1 +827,1 @@\n-static bool can_be_compiled_at_level(methodHandle& mh, jboolean is_osr, CompLevel level) {\n+static bool can_be_compiled_at_level(methodHandle& mh, jboolean is_osr, int level) {\n@@ -863,1 +863,1 @@\n-  } else if (comp_level > CompLevel_none && is_excluded_for_compiler(CompileBroker::compiler((CompLevel)comp_level), mh)) {\n+  } else if (comp_level > CompLevel_none && is_excluded_for_compiler(CompileBroker::compiler((int)comp_level), mh)) {\n@@ -868,1 +868,1 @@\n-  return can_be_compiled_at_level(mh, is_osr, (CompLevel)comp_level);\n+  return can_be_compiled_at_level(mh, is_osr, (int)comp_level);\n@@ -889,1 +889,1 @@\n-  AbstractCompiler* comp = CompileBroker::compiler((CompLevel)compLevel);\n+  AbstractCompiler* comp = CompileBroker::compiler((int)compLevel);\n@@ -918,1 +918,1 @@\n-    mh->set_not_osr_compilable(\"WhiteBox\", (CompLevel)comp_level);\n+    mh->set_not_osr_compilable(\"WhiteBox\", comp_level);\n@@ -920,1 +920,1 @@\n-    mh->set_not_compilable(\"WhiteBox\", (CompLevel)comp_level);\n+    mh->set_not_compilable(\"WhiteBox\", comp_level);\n@@ -1012,1 +1012,1 @@\n-    return CompileBroker::queue_size((CompLevel)comp_level);\n+    return CompileBroker::queue_size(comp_level);\n@@ -1037,1 +1037,1 @@\n-bool WhiteBox::compile_method(Method* method, CompLevel comp_level, int bci, JavaThread* THREAD) {\n+bool WhiteBox::compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD) {\n@@ -1087,1 +1087,1 @@\n-  return WhiteBox::compile_method(Method::checked_resolve_jmethod_id(jmid), (CompLevel)comp_level, bci, THREAD);\n+  return WhiteBox::compile_method(Method::checked_resolve_jmethod_id(jmid), comp_level, bci, THREAD);\n@@ -1096,1 +1096,1 @@\n-  return WhiteBox::compile_method(clinit, (CompLevel)comp_level, InvocationEntryBci, THREAD);\n+  return WhiteBox::compile_method(clinit, comp_level, InvocationEntryBci, THREAD);\n@@ -1104,1 +1104,1 @@\n-  DirectiveSet* directive = DirectivesStack::getMatchingDirective(mh, CompileBroker::compiler((CompLevel)comp_level));\n+  DirectiveSet* directive = DirectivesStack::getMatchingDirective(mh, CompileBroker::compiler(comp_level));\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  static bool compile_method(Method* method, CompLevel comp_level, int bci, JavaThread* THREAD);\n+  static bool compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD);\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}