{"files":[{"patch":"@@ -1149,1 +1149,1 @@\n-                               compiler, task()->comp_level());\n+                               compiler, CompLevel(task()->comp_level()));\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,6 +82,0 @@\n-  _type(type),\n-  _size(layout.size()),\n-  _header_size(layout.header_size()),\n-  _frame_complete_offset(frame_complete_offset),\n-  _data_offset(layout.data_offset()),\n-  _frame_size(frame_size),\n@@ -95,0 +89,6 @@\n+  _name(name),\n+  _size(layout.size()),\n+  _header_size(layout.header_size()),\n+  _frame_complete_offset(frame_complete_offset),\n+  _data_offset(layout.data_offset()),\n+  _frame_size(frame_size),\n@@ -97,1 +97,1 @@\n-  _name(name)\n+  _type(type)\n@@ -111,6 +111,0 @@\n-  _type(type),\n-  _size(layout.size()),\n-  _header_size(layout.header_size()),\n-  _frame_complete_offset(frame_complete_offset),\n-  _data_offset(layout.data_offset()),\n-  _frame_size(frame_size),\n@@ -123,0 +117,6 @@\n+  _name(name),\n+  _size(layout.size()),\n+  _header_size(layout.header_size()),\n+  _frame_complete_offset(frame_complete_offset),\n+  _data_offset(layout.data_offset()),\n+  _frame_size(frame_size),\n@@ -125,1 +125,1 @@\n-  _name(name)\n+  _type(type)\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -93,10 +93,1 @@\n-  const CompilerType _type;                      \/\/ CompilerType\n-  int        _size;                              \/\/ total size of CodeBlob in bytes\n-  int        _header_size;                       \/\/ size of header (depends on subclass)\n-  int        _frame_complete_offset;             \/\/ instruction offsets in [0.._frame_complete_offset) have\n-                                                 \/\/ not finished setting up their frame. Beware of pc's in\n-                                                 \/\/ that range. There is a similar range(s) on returns\n-                                                 \/\/ which we don't detect.\n-  int        _data_offset;                       \/\/ offset to where data region begins\n-  int        _frame_size;                        \/\/ size of stack frame\n-\n+  \/\/ order fields from large to small to minimize padding between fields\n@@ -112,3 +103,0 @@\n-  bool                _caller_must_gc_arguments;\n-\n-  bool                _is_compiled;\n@@ -119,0 +107,14 @@\n+  int        _size;                              \/\/ total size of CodeBlob in bytes\n+  int        _header_size;                       \/\/ size of header (depends on subclass)\n+  int        _frame_complete_offset;             \/\/ instruction offsets in [0.._frame_complete_offset) have\n+                                                 \/\/ not finished setting up their frame. Beware of pc's in\n+                                                 \/\/ that range. There is a similar range(s) on returns\n+                                                 \/\/ which we don't detect.\n+  int        _data_offset;                       \/\/ offset to where data region begins\n+  int        _frame_size;                        \/\/ size of stack frame\n+\n+  bool                _caller_must_gc_arguments;\n+\n+  bool                _is_compiled;\n+  const CompilerType  _type;                     \/\/ CompilerType\n+\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  int comp_level\n+  CompLevel comp_level\n@@ -614,1 +614,0 @@\n-  _is_unloading_state(0),\n@@ -616,1 +615,2 @@\n-  _native_basic_lock_sp_offset(basic_lock_sp_offset)\n+  _native_basic_lock_sp_offset(basic_lock_sp_offset),\n+  _is_unloading_state(0)\n@@ -627,0 +627,1 @@\n+    _comp_level              = CompLevel_none;\n@@ -651,1 +652,0 @@\n-    _comp_level              = CompLevel_none;\n@@ -741,1 +741,1 @@\n-  int comp_level\n+  CompLevel comp_level\n@@ -749,1 +749,0 @@\n-  _is_unloading_state(0),\n@@ -751,1 +750,2 @@\n-  _native_basic_lock_sp_offset(in_ByteSize(-1))\n+  _native_basic_lock_sp_offset(in_ByteSize(-1)),\n+  _is_unloading_state(0)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,2 +74,0 @@\n-  \/\/ Shared fields for all nmethod's\n-  int       _entry_bci;        \/\/ != InvocationEntryBci if this nmethod is an on-stack replacement method\n@@ -79,0 +77,7 @@\n+  \/\/ not_entrant method removal. Each mark_sweep pass will update\n+  \/\/ this mark to current sweep invocation count if it is seen on the\n+  \/\/ stack.  An not_entrant method can be removed when there are no\n+  \/\/ more activations, i.e., when the _stack_traversal_mark is less than\n+  \/\/ current sweep traversal index.\n+  volatile int64_t _stack_traversal_mark;\n+\n@@ -201,0 +206,3 @@\n+  \/\/ Shared fields for all nmethod's\n+  int _entry_bci;      \/\/ != InvocationEntryBci if this nmethod is an on-stack replacement method\n+\n@@ -228,15 +236,0 @@\n-  int _comp_level;                           \/\/ compilation level\n-\n-  \/\/ protected by CodeCache_lock\n-  bool _has_flushed_dependencies;            \/\/ Used for maintenance of dependencies (CodeCache_lock)\n-\n-  \/\/ used by jvmti to track if an event has been posted for this nmethod.\n-  bool _unload_reported;\n-  bool _load_reported;\n-\n-  \/\/ Protected by CompiledMethod_lock\n-  volatile signed char _state;               \/\/ {not_installed, in_use, not_entrant, zombie, unloaded}\n-\n-#ifdef ASSERT\n-  bool _oops_are_stale;  \/\/ indicates that it's no longer safe to access oops section\n-#endif\n@@ -256,7 +249,0 @@\n-  \/\/ not_entrant method removal. Each mark_sweep pass will update\n-  \/\/ this mark to current sweep invocation count if it is seen on the\n-  \/\/ stack.  An not_entrant method can be removed when there are no\n-  \/\/ more activations, i.e., when the _stack_traversal_mark is less than\n-  \/\/ current sweep traversal index.\n-  volatile int64_t _stack_traversal_mark;\n-\n@@ -270,3 +256,0 @@\n-  \/\/ Local state used to keep track of whether unloading is happening or not\n-  volatile uint8_t _is_unloading_state;\n-\n@@ -284,0 +267,19 @@\n+  CompLevel _comp_level;               \/\/ compilation level\n+\n+  \/\/ Local state used to keep track of whether unloading is happening or not\n+  volatile uint8_t _is_unloading_state;\n+\n+  \/\/ protected by CodeCache_lock\n+  bool _has_flushed_dependencies;      \/\/ Used for maintenance of dependencies (CodeCache_lock)\n+\n+  \/\/ used by jvmti to track if an event has been posted for this nmethod.\n+  bool _unload_reported;\n+  bool _load_reported;\n+\n+  \/\/ Protected by CompiledMethod_lock\n+  volatile signed char _state;         \/\/ {not_installed, in_use, not_entrant, zombie, unloaded}\n+\n+#ifdef ASSERT\n+  bool _oops_are_stale;  \/\/ indicates that it's no longer safe to access oops section\n+#endif\n+\n@@ -314,1 +316,1 @@\n-          int comp_level\n+          CompLevel comp_level\n@@ -362,1 +364,1 @@\n-                              int comp_level\n+                              CompLevel comp_level\n@@ -375,1 +377,0 @@\n-      _is_unloading_state(0),\n@@ -377,1 +378,2 @@\n-      _native_basic_lock_sp_offset(in_ByteSize(-1)) {}\n+      _native_basic_lock_sp_offset(in_ByteSize(-1)),\n+      _is_unloading_state(0) {}\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-enum CompilerType {\n+enum CompilerType : u1 {\n@@ -57,1 +57,1 @@\n-enum CompLevel {\n+enum CompLevel : s1 {\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2054,1 +2054,1 @@\n-  int comp_level = CompLevel_full_optimization;\n+  CompLevel comp_level = CompLevel_full_optimization;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-  nonstatic_field(nmethod,                     _comp_level,                                   int)                                   \\\n+  nonstatic_field(nmethod,                     _comp_level,                                   CompLevel)                             \\\n@@ -369,0 +369,1 @@\n+  declare_integer_type(CompLevel)                                         \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -668,1 +668,1 @@\n-  nonstatic_field(nmethod,                     _comp_level,                                   int)                                   \\\n+  nonstatic_field(nmethod,                     _comp_level,                                   CompLevel)                             \\\n@@ -1977,0 +1977,2 @@\n+                                                                          \\\n+  declare_integer_type(CompLevel)                                         \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-            return UNSAFE.getInt(compiledCode + config().nmethodCompLevelOffset) == level;\n+            return UNSAFE.getByte(compiledCode + config().nmethodCompLevelOffset) == level;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-    final int nmethodCompLevelOffset = getFieldOffset(\"nmethod::_comp_level\", Integer.class, \"int\");\n+    final int nmethodCompLevelOffset = getFieldOffset(\"nmethod::_comp_level\", Integer.class, \"CompLevel\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}