{"files":[{"patch":"@@ -736,1 +736,1 @@\n-    int comp_level = parse_int(comp_level_label);\n+    CompLevel comp_level = (CompLevel)parse_int(comp_level_label);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,6 +82,0 @@\n-  _type(type),\n-  _size(layout.size()),\n-  _header_size(layout.header_size()),\n-  _frame_complete_offset(frame_complete_offset),\n-  _data_offset(layout.data_offset()),\n-  _frame_size(frame_size),\n@@ -95,0 +89,6 @@\n+  _name(name),\n+  _size(layout.size()),\n+  _header_size(layout.header_size()),\n+  _frame_complete_offset(frame_complete_offset),\n+  _data_offset(layout.data_offset()),\n+  _frame_size(frame_size),\n@@ -97,1 +97,1 @@\n-  _name(name)\n+  _type(type)\n@@ -111,6 +111,0 @@\n-  _type(type),\n-  _size(layout.size()),\n-  _header_size(layout.header_size()),\n-  _frame_complete_offset(frame_complete_offset),\n-  _data_offset(layout.data_offset()),\n-  _frame_size(frame_size),\n@@ -123,0 +117,6 @@\n+  _name(name),\n+  _size(layout.size()),\n+  _header_size(layout.header_size()),\n+  _frame_complete_offset(frame_complete_offset),\n+  _data_offset(layout.data_offset()),\n+  _frame_size(frame_size),\n@@ -125,1 +125,1 @@\n-  _name(name)\n+  _type(type)\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -93,10 +93,1 @@\n-  const CompilerType _type;                      \/\/ CompilerType\n-  int        _size;                              \/\/ total size of CodeBlob in bytes\n-  int        _header_size;                       \/\/ size of header (depends on subclass)\n-  int        _frame_complete_offset;             \/\/ instruction offsets in [0.._frame_complete_offset) have\n-                                                 \/\/ not finished setting up their frame. Beware of pc's in\n-                                                 \/\/ that range. There is a similar range(s) on returns\n-                                                 \/\/ which we don't detect.\n-  int        _data_offset;                       \/\/ offset to where data region begins\n-  int        _frame_size;                        \/\/ size of stack frame\n-\n+  \/\/ order fields from large to small to minimize padding between fields\n@@ -112,3 +103,0 @@\n-  bool                _caller_must_gc_arguments;\n-\n-  bool                _is_compiled;\n@@ -119,0 +107,14 @@\n+  int        _size;                              \/\/ total size of CodeBlob in bytes\n+  int        _header_size;                       \/\/ size of header (depends on subclass)\n+  int        _frame_complete_offset;             \/\/ instruction offsets in [0.._frame_complete_offset) have\n+                                                 \/\/ not finished setting up their frame. Beware of pc's in\n+                                                 \/\/ that range. There is a similar range(s) on returns\n+                                                 \/\/ which we don't detect.\n+  int        _data_offset;                       \/\/ offset to where data region begins\n+  int        _frame_size;                        \/\/ size of stack frame\n+\n+  bool                _caller_must_gc_arguments;\n+\n+  bool                _is_compiled;\n+  const CompilerType  _type;                     \/\/ CompilerType\n+\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -215,2 +215,2 @@\n-  virtual int   comp_level() const = 0;\n-  virtual int   compile_id() const = 0;\n+  virtual CompLevel comp_level() const = 0;\n+  virtual int       compile_id() const = 0;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  int comp_level\n+  CompLevel comp_level\n@@ -614,1 +614,0 @@\n-  _is_unloading_state(0),\n@@ -616,1 +615,2 @@\n-  _native_basic_lock_sp_offset(basic_lock_sp_offset)\n+  _native_basic_lock_sp_offset(basic_lock_sp_offset),\n+  _is_unloading_state(0)\n@@ -627,0 +627,1 @@\n+    _comp_level              = CompLevel_none;\n@@ -651,1 +652,0 @@\n-    _comp_level              = CompLevel_none;\n@@ -721,1 +721,1 @@\n-void* nmethod::operator new(size_t size, int nmethod_size, int comp_level) throw () {\n+void* nmethod::operator new(size_t size, int nmethod_size, CompLevel comp_level) throw () {\n@@ -741,1 +741,1 @@\n-  int comp_level\n+  CompLevel comp_level\n@@ -749,1 +749,0 @@\n-  _is_unloading_state(0),\n@@ -751,1 +750,2 @@\n-  _native_basic_lock_sp_offset(in_ByteSize(-1))\n+  _native_basic_lock_sp_offset(in_ByteSize(-1)),\n+  _is_unloading_state(0)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -74,2 +74,0 @@\n-  \/\/ Shared fields for all nmethod's\n-  int       _entry_bci;        \/\/ != InvocationEntryBci if this nmethod is an on-stack replacement method\n@@ -79,0 +77,7 @@\n+  \/\/ not_entrant method removal. Each mark_sweep pass will update\n+  \/\/ this mark to current sweep invocation count if it is seen on the\n+  \/\/ stack.  An not_entrant method can be removed when there are no\n+  \/\/ more activations, i.e., when the _stack_traversal_mark is less than\n+  \/\/ current sweep traversal index.\n+  volatile int64_t _stack_traversal_mark;\n+\n@@ -201,0 +206,3 @@\n+  \/\/ Shared fields for all nmethod's\n+  int _entry_bci;      \/\/ != InvocationEntryBci if this nmethod is an on-stack replacement method\n+\n@@ -228,15 +236,0 @@\n-  int _comp_level;                           \/\/ compilation level\n-\n-  \/\/ protected by CodeCache_lock\n-  bool _has_flushed_dependencies;            \/\/ Used for maintenance of dependencies (CodeCache_lock)\n-\n-  \/\/ used by jvmti to track if an event has been posted for this nmethod.\n-  bool _unload_reported;\n-  bool _load_reported;\n-\n-  \/\/ Protected by CompiledMethod_lock\n-  volatile signed char _state;               \/\/ {not_installed, in_use, not_entrant, zombie, unloaded}\n-\n-#ifdef ASSERT\n-  bool _oops_are_stale;  \/\/ indicates that it's no longer safe to access oops section\n-#endif\n@@ -256,7 +249,0 @@\n-  \/\/ not_entrant method removal. Each mark_sweep pass will update\n-  \/\/ this mark to current sweep invocation count if it is seen on the\n-  \/\/ stack.  An not_entrant method can be removed when there are no\n-  \/\/ more activations, i.e., when the _stack_traversal_mark is less than\n-  \/\/ current sweep traversal index.\n-  volatile int64_t _stack_traversal_mark;\n-\n@@ -270,3 +256,0 @@\n-  \/\/ Local state used to keep track of whether unloading is happening or not\n-  volatile uint8_t _is_unloading_state;\n-\n@@ -284,0 +267,19 @@\n+  CompLevel _comp_level;               \/\/ compilation level\n+\n+  \/\/ Local state used to keep track of whether unloading is happening or not\n+  volatile uint8_t _is_unloading_state;\n+\n+  \/\/ protected by CodeCache_lock\n+  bool _has_flushed_dependencies;      \/\/ Used for maintenance of dependencies (CodeCache_lock)\n+\n+  \/\/ used by jvmti to track if an event has been posted for this nmethod.\n+  bool _unload_reported;\n+  bool _load_reported;\n+\n+  \/\/ Protected by CompiledMethod_lock\n+  volatile signed char _state;         \/\/ {not_installed, in_use, not_entrant, zombie, unloaded}\n+\n+#ifdef ASSERT\n+  bool _oops_are_stale;  \/\/ indicates that it's no longer safe to access oops section\n+#endif\n+\n@@ -314,1 +316,1 @@\n-          int comp_level\n+          CompLevel comp_level\n@@ -323,1 +325,1 @@\n-  void* operator new(size_t size, int nmethod_size, int comp_level) throw();\n+  void* operator new(size_t size, int nmethod_size, CompLevel comp_level) throw();\n@@ -362,1 +364,1 @@\n-                              int comp_level\n+                              CompLevel comp_level\n@@ -375,1 +377,0 @@\n-      _is_unloading_state(0),\n@@ -377,1 +378,2 @@\n-      _native_basic_lock_sp_offset(in_ByteSize(-1)) {}\n+      _native_basic_lock_sp_offset(in_ByteSize(-1)),\n+      _is_unloading_state(0) {}\n@@ -501,1 +503,1 @@\n-  int   comp_level() const                        { return _comp_level; }\n+  CompLevel comp_level() const                    { return _comp_level; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-bool CompilationPolicy::must_be_compiled(const methodHandle& m, int comp_level) {\n+bool CompilationPolicy::must_be_compiled(const methodHandle& m, CompLevel comp_level) {\n@@ -126,1 +126,1 @@\n-bool CompilationPolicy::can_be_compiled(const methodHandle& m, int comp_level) {\n+bool CompilationPolicy::can_be_compiled(const methodHandle& m, CompLevel comp_level) {\n@@ -150,1 +150,1 @@\n-bool CompilationPolicy::can_be_osr_compiled(const methodHandle& m, int comp_level) {\n+bool CompilationPolicy::can_be_osr_compiled(const methodHandle& m, CompLevel comp_level) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-  static bool must_be_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n+  static bool must_be_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n@@ -250,1 +250,1 @@\n-  static bool can_be_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n+  static bool can_be_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n@@ -252,1 +252,1 @@\n-  static bool can_be_osr_compiled(const methodHandle& m, int comp_level = CompLevel_any);\n+  static bool can_be_osr_compiled(const methodHandle& m, CompLevel comp_level = CompLevel_any);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-CompileQueue* CompileBroker::compile_queue(int comp_level) {\n+CompileQueue* CompileBroker::compile_queue(CompLevel comp_level) {\n@@ -1166,1 +1166,1 @@\n-                                        int comp_level,\n+                                        CompLevel comp_level,\n@@ -1348,1 +1348,1 @@\n-                                       int comp_level,\n+                                       CompLevel comp_level,\n@@ -1368,1 +1368,1 @@\n-                                         int comp_level,\n+                                         CompLevel comp_level,\n@@ -1517,1 +1517,1 @@\n-                                            int                 comp_level) {\n+                                            CompLevel           comp_level) {\n@@ -1556,1 +1556,1 @@\n-bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded) {\n+bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, CompLevel comp_level, bool excluded) {\n@@ -1645,1 +1645,1 @@\n-                                                int                 comp_level,\n+                                                CompLevel           comp_level,\n@@ -2192,1 +2192,1 @@\n-  const int task_level = task->comp_level();\n+  const CompLevel task_level = task->comp_level();\n@@ -2514,1 +2514,1 @@\n-  const int comp_level = task->comp_level();\n+  const CompLevel comp_level = task->comp_level();\n@@ -2638,1 +2638,1 @@\n-const char* CompileBroker::compiler_name(int comp_level) {\n+const char* CompileBroker::compiler_name(CompLevel comp_level) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded);\n+  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, CompLevel comp_level, bool excluded);\n@@ -247,1 +247,1 @@\n-                                          int                 comp_level,\n+                                          CompLevel           comp_level,\n@@ -266,1 +266,1 @@\n-                                  int comp_level,\n+                                  CompLevel comp_level,\n@@ -273,1 +273,1 @@\n-  static CompileQueue* compile_queue(int comp_level);\n+  static CompileQueue* compile_queue(CompLevel comp_level);\n@@ -283,1 +283,1 @@\n-  static AbstractCompiler* compiler(int comp_level) {\n+  static AbstractCompiler* compiler(CompLevel comp_level) {\n@@ -289,1 +289,1 @@\n-  static bool compilation_is_complete(const methodHandle& method, int osr_bci, int comp_level);\n+  static bool compilation_is_complete(const methodHandle& method, int osr_bci, CompLevel comp_level);\n@@ -292,1 +292,1 @@\n-  static int queue_size(int comp_level) {\n+  static int queue_size(CompLevel comp_level) {\n@@ -301,1 +301,1 @@\n-                                 int comp_level,\n+                                 CompLevel comp_level,\n@@ -309,1 +309,1 @@\n-                                   int comp_level,\n+                                   CompLevel comp_level,\n@@ -380,1 +380,1 @@\n-  static const char* compiler_name(int comp_level);\n+  static const char* compiler_name(CompLevel comp_level);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                             int comp_level,\n+                             CompLevel comp_level,\n@@ -238,1 +238,1 @@\n-void CompileTask::print_impl(outputStream* st, Method* method, int compile_id, int comp_level,\n+void CompileTask::print_impl(outputStream* st, Method* method, int compile_id, CompLevel comp_level,\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  int          _comp_level;\n+  CompLevel    _comp_level;\n@@ -111,1 +111,1 @@\n-  void initialize(int compile_id, const methodHandle& method, int osr_bci, int comp_level,\n+  void initialize(int compile_id, const methodHandle& method, int osr_bci, CompLevel comp_level,\n@@ -167,2 +167,2 @@\n-  int          comp_level()                      { return _comp_level;}\n-  void         set_comp_level(int comp_level)    { _comp_level = comp_level;}\n+  CompLevel    comp_level()                      { return _comp_level;}\n+  void         set_comp_level(CompLevel comp_level)  { _comp_level = comp_level; }\n@@ -189,1 +189,1 @@\n-  static void  print_impl(outputStream* st, Method* method, int compile_id, int comp_level,\n+  static void  print_impl(outputStream* st, Method* method, int compile_id, CompLevel comp_level,\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-enum CompilerType {\n+enum CompilerType : u1 {\n@@ -57,1 +57,1 @@\n-enum CompLevel {\n+enum CompLevel : s1 {\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2054,1 +2054,1 @@\n-  int comp_level = CompLevel_full_optimization;\n+  CompLevel comp_level = CompLevel_full_optimization;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-  nonstatic_field(nmethod,                     _comp_level,                                   int)                                   \\\n+  nonstatic_field(nmethod,                     _comp_level,                                   CompLevel)                             \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3268,1 +3268,1 @@\n-  n->method()->set_highest_osr_comp_level(MAX2(n->method()->highest_osr_comp_level(), n->comp_level()));\n+  n->method()->set_highest_osr_comp_level(MAX2(n->method()->highest_osr_comp_level(), int(n->comp_level())));\n@@ -3287,1 +3287,1 @@\n-  int max_level = CompLevel_none;  \/\/ Find the max comp level excluding n\n+  CompLevel max_level = CompLevel_none;  \/\/ Find the max comp level excluding n\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1044,1 +1044,1 @@\n-void Method::print_made_not_compilable(int comp_level, bool is_osr, bool report, const char* reason) {\n+void Method::print_made_not_compilable(CompLevel comp_level, bool is_osr, bool report, const char* reason) {\n@@ -1088,1 +1088,1 @@\n-bool Method::is_not_compilable(int comp_level) const {\n+bool Method::is_not_compilable(CompLevel comp_level) const {\n@@ -1103,1 +1103,1 @@\n-void Method::set_not_compilable(const char* reason, int comp_level, bool report) {\n+void Method::set_not_compilable(const char* reason, CompLevel comp_level, bool report) {\n@@ -1121,1 +1121,1 @@\n-bool Method::is_not_osr_compilable(int comp_level) const {\n+bool Method::is_not_osr_compilable(CompLevel comp_level) const {\n@@ -1133,1 +1133,1 @@\n-void Method::set_not_osr_compilable(const char* reason, int comp_level, bool report) {\n+void Method::set_not_osr_compilable(const char* reason, CompLevel comp_level, bool report) {\n@@ -1316,1 +1316,1 @@\n-  int comp_level = code->comp_level();\n+  CompLevel comp_level = code->comp_level();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -932,3 +932,3 @@\n-  bool  is_not_compilable(int comp_level = CompLevel_any) const;\n-  void set_not_compilable(const char* reason, int comp_level = CompLevel_all, bool report = true);\n-  void set_not_compilable_quietly(const char* reason, int comp_level = CompLevel_all) {\n+  bool  is_not_compilable(CompLevel comp_level = CompLevel_any) const;\n+  void set_not_compilable(const char* reason, CompLevel comp_level = CompLevel_all, bool report = true);\n+  void set_not_compilable_quietly(const char* reason, CompLevel comp_level = CompLevel_all) {\n@@ -937,3 +937,3 @@\n-  bool  is_not_osr_compilable(int comp_level = CompLevel_any) const;\n-  void set_not_osr_compilable(const char* reason, int comp_level = CompLevel_all, bool report = true);\n-  void set_not_osr_compilable_quietly(const char* reason, int comp_level = CompLevel_all) {\n+  bool  is_not_osr_compilable(CompLevel comp_level = CompLevel_any) const;\n+  void set_not_osr_compilable(const char* reason, CompLevel comp_level = CompLevel_all, bool report = true);\n+  void set_not_osr_compilable_quietly(const char* reason, CompLevel comp_level = CompLevel_all) {\n@@ -945,1 +945,1 @@\n-  void print_made_not_compilable(int comp_level, bool is_osr, bool report, const char* reason);\n+  void print_made_not_compilable(CompLevel comp_level, bool is_osr, bool report, const char* reason);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -827,1 +827,1 @@\n-static bool can_be_compiled_at_level(methodHandle& mh, jboolean is_osr, int level) {\n+static bool can_be_compiled_at_level(methodHandle& mh, jboolean is_osr, CompLevel level) {\n@@ -863,1 +863,1 @@\n-  } else if (comp_level > CompLevel_none && is_excluded_for_compiler(CompileBroker::compiler((int)comp_level), mh)) {\n+  } else if (comp_level > CompLevel_none && is_excluded_for_compiler(CompileBroker::compiler((CompLevel)comp_level), mh)) {\n@@ -868,1 +868,1 @@\n-  return can_be_compiled_at_level(mh, is_osr, (int)comp_level);\n+  return can_be_compiled_at_level(mh, is_osr, (CompLevel)comp_level);\n@@ -889,1 +889,1 @@\n-  AbstractCompiler* comp = CompileBroker::compiler((int)compLevel);\n+  AbstractCompiler* comp = CompileBroker::compiler((CompLevel)compLevel);\n@@ -918,1 +918,1 @@\n-    mh->set_not_osr_compilable(\"WhiteBox\", comp_level);\n+    mh->set_not_osr_compilable(\"WhiteBox\", (CompLevel)comp_level);\n@@ -920,1 +920,1 @@\n-    mh->set_not_compilable(\"WhiteBox\", comp_level);\n+    mh->set_not_compilable(\"WhiteBox\", (CompLevel)comp_level);\n@@ -1012,1 +1012,1 @@\n-    return CompileBroker::queue_size(comp_level);\n+    return CompileBroker::queue_size((CompLevel)comp_level);\n@@ -1037,1 +1037,1 @@\n-bool WhiteBox::compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD) {\n+bool WhiteBox::compile_method(Method* method, CompLevel comp_level, int bci, JavaThread* THREAD) {\n@@ -1087,1 +1087,1 @@\n-  return WhiteBox::compile_method(Method::checked_resolve_jmethod_id(jmid), comp_level, bci, THREAD);\n+  return WhiteBox::compile_method(Method::checked_resolve_jmethod_id(jmid), (CompLevel)comp_level, bci, THREAD);\n@@ -1096,1 +1096,1 @@\n-  return WhiteBox::compile_method(clinit, comp_level, InvocationEntryBci, THREAD);\n+  return WhiteBox::compile_method(clinit, (CompLevel)comp_level, InvocationEntryBci, THREAD);\n@@ -1104,1 +1104,1 @@\n-  DirectiveSet* directive = DirectivesStack::getMatchingDirective(mh, CompileBroker::compiler(comp_level));\n+  DirectiveSet* directive = DirectivesStack::getMatchingDirective(mh, CompileBroker::compiler((CompLevel)comp_level));\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  static bool compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD);\n+  static bool compile_method(Method* method, CompLevel comp_level, int bci, JavaThread* THREAD);\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,1 +668,1 @@\n-  nonstatic_field(nmethod,                     _comp_level,                                   int)                                   \\\n+  nonstatic_field(nmethod,                     _comp_level,                                   CompLevel)                             \\\n@@ -1072,1 +1072,1 @@\n-  nonstatic_field(CompileTask,                 _comp_level,                                   int)                                   \\\n+  nonstatic_field(CompileTask,                 _comp_level,                                   CompLevel)                             \\\n@@ -1977,0 +1977,2 @@\n+                                                                          \\\n+  declare_unsigned_integer_type(CompLevel)                                \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-            return UNSAFE.getInt(compiledCode + config().nmethodCompLevelOffset) == level;\n+            return UNSAFE.getByte(compiledCode + config().nmethodCompLevelOffset) == level;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-    final int nmethodCompLevelOffset = getFieldOffset(\"nmethod::_comp_level\", Integer.class, \"int\");\n+    final int nmethodCompLevelOffset = getFieldOffset(\"nmethod::_comp_level\", Integer.class, \"CompLevel\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}