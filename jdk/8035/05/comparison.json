{"files":[{"patch":"@@ -961,0 +961,1 @@\n+                                            \"I\"                                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1134,1 +1134,1 @@\n-\/\/              int length, Object base, long offset, M m,\n+\/\/              int length, Object base, long offset, M m, int offsetInRange,\n@@ -1219,9 +1219,35 @@\n-  bool use_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n-                                            mem_num_elem, mem_elem_bt,\n-                                            (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n-  \/\/ Masked vector store operation needs the architecture predicate feature. We need to check\n-  \/\/ whether the predicated vector operation is supported by backend.\n-  if (is_store && !use_predicate) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=storeMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+  bool supports_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n+                                                mem_num_elem, mem_elem_bt,\n+                                                (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n+\n+  \/\/ If current arch does not support the predicated operations, we have to bail\n+  \/\/ out when current case uses the predicate feature.\n+  if (!supports_predicate) {\n+    bool needs_predicate = false;\n+    if (is_store) {\n+      \/\/ Masked vector store always uses the predicated store.\n+      needs_predicate = true;\n+    } else {\n+      \/\/ Masked vector load with IOOBE always uses the predicated load.\n+      const TypeInt* offset_in_range = gvn().type(argument(8))->isa_int();\n+      if (!offset_in_range->is_con()) {\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n+                        NodeClassNames[argument(8)->Opcode()]);\n+        }\n+        set_map(old_map);\n+        set_sp(old_sp);\n+        return false;\n+      }\n+      needs_predicate = (offset_in_range->get_con() == 0);\n+    }\n+\n+    if (needs_predicate) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+                      is_store ? \"storeMasked\" : \"loadMasked\",\n+                      num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1229,3 +1255,0 @@\n-    set_map(old_map);\n-    set_sp(old_sp);\n-    return false;\n@@ -1236,1 +1259,1 @@\n-  if (!use_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n+  if (!supports_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n@@ -1333,1 +1356,1 @@\n-    if (use_predicate) {\n+    if (supports_predicate) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -366,1 +366,1 @@\n-                                  int length, AbstractMemorySegmentImpl msp, long offset, M m, S s,\n+                                  int length, AbstractMemorySegmentImpl msp, long offset, M m, S s, int offsetInRange,\n@@ -378,1 +378,1 @@\n-                    s,\n+                    s, offsetInRange,\n@@ -393,1 +393,1 @@\n-                                                S s,\n+                                                S s, int offsetInRange,\n@@ -399,1 +399,1 @@\n-                    msp.unsafeGetBase(), msp.unsafeGetOffset() + offset, m,\n+                    msp.unsafeGetBase(), msp.unsafeGetOffset() + offset, m, offsetInRange,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -419,3 +419,3 @@\n-                 int length,\n-                 Object base, long offset,\n-                 M m, C container, long index, S s,\n+                 int length, Object base, long offset,\n+                 M m, int offsetInRange,\n+                 C container, long index, S s,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,0 +65,6 @@\n+    \/*package-private*\/\n+    static final int OFFSET_IN_RANGE = 1;\n+\n+    \/*package-private*\/\n+    static final int OFFSET_OUT_OF_RANGE = 0;\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -881,2 +881,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -897,2 +897,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -911,2 +911,2 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m) {\n-        return super.fromMemorySegment0Template(Byte128Mask.class, ms, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Byte128Mask.class, ms, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -913,2 +913,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -929,2 +929,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -943,2 +943,2 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m) {\n-        return super.fromMemorySegment0Template(Byte256Mask.class, ms, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Byte256Mask.class, ms, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -977,2 +977,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -993,2 +993,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -1007,2 +1007,2 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m) {\n-        return super.fromMemorySegment0Template(Byte512Mask.class, ms, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Byte512Mask.class, ms, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -865,2 +865,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -881,2 +881,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -895,2 +895,2 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m) {\n-        return super.fromMemorySegment0Template(Byte64Mask.class, ms, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Byte64Mask.class, ms, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -851,2 +851,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -881,2 +881,2 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m) {\n-        return super.fromMemorySegment0Template(ByteMaxMask.class, ms, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(ByteMaxMask.class, ms, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3012,1 +3012,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3015,1 +3015,0 @@\n-        \/\/ FIXME: optimize\n@@ -3017,1 +3016,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3169,1 +3168,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3172,1 +3171,0 @@\n-        \/\/ FIXME: optimize\n@@ -3174,1 +3172,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3356,1 +3354,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3359,1 +3357,0 @@\n-        \/\/ FIXME: optimize\n@@ -3361,1 +3358,1 @@\n-        return vsp.ldLongOp(ms, offset, m, ByteVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3759,1 +3756,1 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3763,1 +3760,1 @@\n-    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3768,1 +3765,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3793,1 +3790,1 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3797,1 +3794,1 @@\n-    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n+    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, int offsetInRange) {\n@@ -3802,1 +3799,1 @@\n-            a, booleanArrayAddress(a, offset), m,\n+            a, booleanArrayAddress(a, offset), m, offsetInRange,\n@@ -3823,1 +3820,1 @@\n-    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m);\n+    ByteVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3827,1 +3824,1 @@\n-    ByteVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    ByteVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3832,1 +3829,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -842,2 +842,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m) {\n-        return super.fromMemorySegment0Template(Double128Mask.class, ms, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Double128Mask.class, ms, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -846,2 +846,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m) {\n-        return super.fromMemorySegment0Template(Double256Mask.class, ms, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Double256Mask.class, ms, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -854,2 +854,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -877,2 +877,2 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m) {\n-        return super.fromMemorySegment0Template(Double512Mask.class, ms, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Double512Mask.class, ms, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -863,2 +863,2 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m) {\n-        return super.fromMemorySegment0Template(Double64Mask.class, ms, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Double64Mask.class, ms, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -839,2 +839,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -862,2 +862,2 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m) {\n-        return super.fromMemorySegment0Template(DoubleMaxMask.class, ms, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(DoubleMaxMask.class, ms, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2809,1 +2809,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2812,1 +2812,0 @@\n-        \/\/ FIXME: optimize\n@@ -2814,1 +2813,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3042,1 +3041,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3045,1 +3044,0 @@\n-        \/\/ FIXME: optimize\n@@ -3047,1 +3045,1 @@\n-        return vsp.ldLongOp(ms, offset, m, DoubleVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3314,1 +3312,1 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m);\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange);\n@@ -3318,1 +3316,1 @@\n-    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m) {\n+    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m, int offsetInRange) {\n@@ -3323,1 +3321,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3398,1 +3396,1 @@\n-    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m);\n+    DoubleVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Double> m, int offsetInRange);\n@@ -3402,1 +3400,1 @@\n-    DoubleVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    DoubleVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3407,1 +3405,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -846,2 +846,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m) {\n-        return super.fromMemorySegment0Template(Float128Mask.class, ms, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Float128Mask.class, ms, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -854,2 +854,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -877,2 +877,2 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m) {\n-        return super.fromMemorySegment0Template(Float256Mask.class, ms, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Float256Mask.class, ms, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -870,2 +870,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -893,2 +893,2 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m) {\n-        return super.fromMemorySegment0Template(Float512Mask.class, ms, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Float512Mask.class, ms, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -842,2 +842,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m) {\n-        return super.fromMemorySegment0Template(Float64Mask.class, ms, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Float64Mask.class, ms, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -839,2 +839,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -862,2 +862,2 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m) {\n-        return super.fromMemorySegment0Template(FloatMaxMask.class, ms, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(FloatMaxMask.class, ms, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2833,1 +2833,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2836,1 +2836,0 @@\n-        \/\/ FIXME: optimize\n@@ -2838,1 +2837,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3048,1 +3047,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3051,1 +3050,0 @@\n-        \/\/ FIXME: optimize\n@@ -3053,1 +3051,1 @@\n-        return vsp.ldLongOp(ms, offset, m, FloatVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3301,1 +3299,1 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m);\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange);\n@@ -3305,1 +3303,1 @@\n-    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m) {\n+    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m, int offsetInRange) {\n@@ -3310,1 +3308,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3367,1 +3365,1 @@\n-    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m);\n+    FloatVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Float> m, int offsetInRange);\n@@ -3371,1 +3369,1 @@\n-    FloatVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    FloatVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3376,1 +3374,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -857,2 +857,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -880,2 +880,2 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m) {\n-        return super.fromMemorySegment0Template(Int128Mask.class, ms, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Int128Mask.class, ms, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -865,2 +865,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -888,2 +888,2 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m) {\n-        return super.fromMemorySegment0Template(Int256Mask.class, ms, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Int256Mask.class, ms, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -881,2 +881,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -904,2 +904,2 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m) {\n-        return super.fromMemorySegment0Template(Int512Mask.class, ms, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Int512Mask.class, ms, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -853,2 +853,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -876,2 +876,2 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m) {\n-        return super.fromMemorySegment0Template(Int64Mask.class, ms, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Int64Mask.class, ms, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -862,2 +862,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -885,2 +885,2 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m) {\n-        return super.fromMemorySegment0Template(IntMaxMask.class, ms, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(IntMaxMask.class, ms, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2990,1 +2990,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2993,1 +2993,0 @@\n-        \/\/ FIXME: optimize\n@@ -2995,1 +2994,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3205,1 +3204,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3208,1 +3207,0 @@\n-        \/\/ FIXME: optimize\n@@ -3210,1 +3208,1 @@\n-        return vsp.ldLongOp(ms, offset, m, IntVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3458,1 +3456,1 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m);\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange);\n@@ -3462,1 +3460,1 @@\n-    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m) {\n+    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m, int offsetInRange) {\n@@ -3467,1 +3465,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3524,1 +3522,1 @@\n-    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m);\n+    IntVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Integer> m, int offsetInRange);\n@@ -3528,1 +3526,1 @@\n-    IntVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    IntVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3533,1 +3531,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -843,2 +843,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m) {\n-        return super.fromMemorySegment0Template(Long128Mask.class, ms, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Long128Mask.class, ms, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -847,2 +847,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m) {\n-        return super.fromMemorySegment0Template(Long256Mask.class, ms, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Long256Mask.class, ms, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -855,2 +855,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -878,2 +878,2 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m) {\n-        return super.fromMemorySegment0Template(Long512Mask.class, ms, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Long512Mask.class, ms, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -841,2 +841,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -864,2 +864,2 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m) {\n-        return super.fromMemorySegment0Template(Long64Mask.class, ms, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Long64Mask.class, ms, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -841,2 +841,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -864,2 +864,2 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m) {\n-        return super.fromMemorySegment0Template(LongMaxMask.class, ms, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(LongMaxMask.class, ms, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2851,1 +2851,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2854,1 +2854,0 @@\n-        \/\/ FIXME: optimize\n@@ -2856,1 +2855,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3084,1 +3083,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3087,1 +3086,0 @@\n-        \/\/ FIXME: optimize\n@@ -3089,1 +3087,1 @@\n-        return vsp.ldLongOp(ms, offset, m, LongVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3356,1 +3354,1 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m);\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange);\n@@ -3360,1 +3358,1 @@\n-    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m) {\n+    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m, int offsetInRange) {\n@@ -3365,1 +3363,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3440,1 +3438,1 @@\n-    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m);\n+    LongVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Long> m, int offsetInRange);\n@@ -3444,1 +3442,1 @@\n-    LongVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    LongVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3449,1 +3447,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -865,2 +865,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -880,2 +880,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -895,2 +895,2 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m) {\n-        return super.fromMemorySegment0Template(Short128Mask.class, ms, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Short128Mask.class, ms, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -881,2 +881,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -911,2 +911,2 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m) {\n-        return super.fromMemorySegment0Template(Short256Mask.class, ms, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Short256Mask.class, ms, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -913,2 +913,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -928,2 +928,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -943,2 +943,2 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m) {\n-        return super.fromMemorySegment0Template(Short512Mask.class, ms, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Short512Mask.class, ms, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -857,2 +857,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -887,2 +887,2 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m) {\n-        return super.fromMemorySegment0Template(Short64Mask.class, ms, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(Short64Mask.class, ms, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -851,2 +851,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -881,2 +881,2 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m) {\n-        return super.fromMemorySegment0Template(ShortMaxMask.class, ms, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template(ShortMaxMask.class, ms, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3013,1 +3013,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3016,1 +3016,0 @@\n-        \/\/ FIXME: optimize\n@@ -3018,1 +3017,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3162,1 +3161,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3165,1 +3164,0 @@\n-        \/\/ FIXME: optimize\n@@ -3167,1 +3165,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3355,1 +3353,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3358,1 +3356,0 @@\n-        \/\/ FIXME: optimize\n@@ -3360,1 +3357,1 @@\n-        return vsp.ldLongOp(ms, offset, m, ShortVector::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3745,1 +3742,1 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3749,1 +3746,1 @@\n-    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m) {\n+    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m, int offsetInRange) {\n@@ -3754,1 +3751,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3778,1 +3775,1 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3782,1 +3779,1 @@\n-    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n+    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, int offsetInRange) {\n@@ -3787,1 +3784,1 @@\n-                a, charArrayAddress(a, offset), m,\n+                a, charArrayAddress(a, offset), m, offsetInRange,\n@@ -3809,1 +3806,1 @@\n-    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m);\n+    ShortVector fromMemorySegment0(MemorySegment ms, long offset, VectorMask<Short> m, int offsetInRange);\n@@ -3813,1 +3810,1 @@\n-    ShortVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    ShortVector fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -3818,1 +3815,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -3587,1 +3587,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3590,1 +3590,0 @@\n-        \/\/ FIXME: optimize\n@@ -3592,1 +3591,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3808,1 +3807,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3811,1 +3810,0 @@\n-        \/\/ FIXME: optimize\n@@ -3813,1 +3811,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3968,1 +3966,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3971,1 +3969,0 @@\n-        \/\/ FIXME: optimize\n@@ -3973,1 +3970,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -4165,1 +4162,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -4168,1 +4165,0 @@\n-        \/\/ FIXME: optimize\n@@ -4170,1 +4166,1 @@\n-        return vsp.ldLongOp(ms, offset, m, $abstractvectortype$::memorySegmentGet);\n+        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -4796,1 +4792,1 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4800,1 +4796,1 @@\n-    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m) {\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, int offsetInRange) {\n@@ -4805,1 +4801,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -4890,1 +4886,1 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4894,1 +4890,1 @@\n-    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n+    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, int offsetInRange) {\n@@ -4899,1 +4895,1 @@\n-                a, charArrayAddress(a, offset), m,\n+                a, charArrayAddress(a, offset), m, offsetInRange,\n@@ -4924,1 +4920,1 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4928,1 +4924,1 @@\n-    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n+    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, int offsetInRange) {\n@@ -4933,1 +4929,1 @@\n-            a, booleanArrayAddress(a, offset), m,\n+            a, booleanArrayAddress(a, offset), m, offsetInRange,\n@@ -4955,1 +4951,1 @@\n-    $abstractvectortype$ fromMemorySegment0(MemorySegment ms, long offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromMemorySegment0(MemorySegment ms, long offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4959,1 +4955,1 @@\n-    $abstractvectortype$ fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m) {\n+    $abstractvectortype$ fromMemorySegment0Template(Class<M> maskClass, MemorySegment ms, long offset, M m, int offsetInRange) {\n@@ -4964,1 +4960,1 @@\n-                (AbstractMemorySegmentImpl) ms, offset, m, vsp,\n+                (AbstractMemorySegmentImpl) ms, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1139,2 +1139,2 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1163,2 +1163,2 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1179,2 +1179,2 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1194,2 +1194,2 @@\n-    $abstractvectortype$ fromMemorySegment0(MemorySegment ms, long offset, VectorMask<$Boxtype$> m) {\n-        return super.fromMemorySegment0Template($masktype$.class, ms, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromMemorySegment0(MemorySegment ms, long offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromMemorySegment0Template($masktype$.class, ms, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class LoadMaskedIOOBEBenchmark {\n+    @Param({\"1026\"})\n+    private int inSize;\n+\n+    @Param({\"1152\"})\n+    private int outSize;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[inSize];\n+        byteOut = new byte[outSize];\n+        shortIn = new short[inSize];\n+        shortOut = new short[outSize];\n+        intIn = new int[inSize];\n+        intOut = new int[outSize];\n+        longIn = new long[inSize];\n+        longOut = new long[outSize];\n+        floatIn = new float[inSize];\n+        floatOut = new float[outSize];\n+        doubleIn = new double[inSize];\n+        doubleOut = new double[outSize];\n+\n+        for (int i = 0; i < inSize; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        m = new boolean[outSize];\n+        for (int i = 0; i < inSize; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i, mask).intoArray(shortOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i, mask).intoArray(intOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i, mask).intoArray(longOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i, mask).intoArray(floatOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i, mask).intoArray(doubleOut, i);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}