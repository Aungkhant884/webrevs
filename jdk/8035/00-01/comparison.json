{"files":[{"patch":"@@ -1140,1 +1140,1 @@\n-\/\/              int length, Object base, long offset, M m, int usePred,\n+\/\/              int length, Object base, long offset, M m, int offsetInRange,\n@@ -1238,2 +1238,2 @@\n-      const TypeInt* pred = gvn().type(argument(8))->isa_int();\n-      if (!pred->is_con()) {\n+      const TypeInt* offset_in_range = gvn().type(argument(8))->isa_int();\n+      if (!offset_in_range->is_con()) {\n@@ -1241,1 +1241,1 @@\n-          tty->print_cr(\"  ** missing constant: usePred=%s\",\n+          tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n@@ -1248,1 +1248,1 @@\n-      use_predicate = (pred->get_con() == 1);\n+      use_predicate = (offset_in_range->get_con() == 0);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-                               int length, ByteBuffer bb, int offset, M m, S s, boolean usePred,\n+                               int length, ByteBuffer bb, int offset, M m, S s, boolean offsetInRange,\n@@ -434,1 +434,1 @@\n-                    s, usePred,\n+                    s, offsetInRange,\n@@ -449,1 +449,1 @@\n-                                     S s, boolean usePred,\n+                                     S s, boolean offsetInRange,\n@@ -456,1 +456,1 @@\n-            if (usePred) {\n+            if (offsetInRange) {\n@@ -458,1 +458,1 @@\n-                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* usePred *\/ 1,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* offsetInRange *\/ 1,\n@@ -463,1 +463,1 @@\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* usePred *\/ 0,\n+                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* offsetInRange *\/ 0,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-                 M m, int usePred,\n+                 M m, int offsetInRange,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -904,2 +904,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -952,2 +952,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -968,2 +968,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -982,2 +982,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -996,2 +996,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, usePred);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -842,2 +842,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, usePred);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, usePred);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2865,1 +2865,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2920,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2924,1 +2924,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3076,1 +3076,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* usePred*\/ false);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ true);\n@@ -3080,1 +3080,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3253,1 +3253,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3257,1 +3257,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3676,1 +3676,1 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred);\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3680,3 +3680,3 @@\n-    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3690,1 +3690,1 @@\n-    ByteVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    ByteVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3694,1 +3694,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3697,1 +3697,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3702,1 +3702,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3726,1 +3726,1 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean usePred);\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3730,2 +3730,2 @@\n-    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3733,1 +3733,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3757,1 +3757,1 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean usePred);\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3761,2 +3761,2 @@\n-    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3764,1 +3764,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3789,1 +3789,1 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean usePred);\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3793,1 +3793,1 @@\n-    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3798,1 +3798,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -815,2 +815,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -838,2 +838,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, usePred);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, usePred);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2686,1 +2686,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2690,1 +2690,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2745,1 +2745,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2749,1 +2749,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -2969,1 +2969,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2973,1 +2973,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3263,1 +3263,1 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean usePred);\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3267,3 +3267,3 @@\n-    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3277,1 +3277,1 @@\n-    DoubleVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    DoubleVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3281,1 +3281,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3284,1 +3284,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3289,1 +3289,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3367,1 +3367,1 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean usePred);\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3371,2 +3371,2 @@\n-    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3374,1 +3374,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3399,1 +3399,1 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean usePred);\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3403,1 +3403,1 @@\n-    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3408,1 +3408,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -845,2 +845,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -868,2 +868,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -882,2 +882,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, usePred);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, usePred);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2710,1 +2710,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2714,1 +2714,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2769,1 +2769,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2773,1 +2773,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -2975,1 +2975,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2979,1 +2979,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3250,1 +3250,1 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean usePred);\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3254,3 +3254,3 @@\n-    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3264,1 +3264,1 @@\n-    FloatVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    FloatVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3268,1 +3268,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3271,1 +3271,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3276,1 +3276,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3336,1 +3336,1 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean usePred);\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3340,2 +3340,2 @@\n-    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3343,1 +3343,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3368,1 +3368,1 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean usePred);\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3372,1 +3372,1 @@\n-    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3377,1 +3377,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, usePred);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, usePred);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -863,2 +863,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -877,2 +877,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, usePred);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -879,2 +879,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -893,2 +893,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -828,2 +828,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, usePred);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, usePred);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -837,2 +837,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, usePred);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -860,2 +860,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, usePred);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -874,2 +874,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, usePred);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2853,1 +2853,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2857,1 +2857,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2912,1 +2912,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2916,1 +2916,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3118,1 +3118,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3122,1 +3122,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3393,1 +3393,1 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean usePred);\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3397,3 +3397,3 @@\n-    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3407,1 +3407,1 @@\n-    IntVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    IntVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3411,1 +3411,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3414,1 +3414,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3419,1 +3419,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3479,1 +3479,1 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean usePred);\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3483,2 +3483,2 @@\n-    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3486,1 +3486,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3511,1 +3511,1 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean usePred);\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3515,1 +3515,1 @@\n-    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3520,1 +3520,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -818,2 +818,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, usePred);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -822,2 +822,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, usePred);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -845,2 +845,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -859,2 +859,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -830,2 +830,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, usePred);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, usePred);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, usePred);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, usePred);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, usePred);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, usePred);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2714,1 +2714,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2718,1 +2718,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2773,1 +2773,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2777,1 +2777,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -2997,1 +2997,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3001,1 +3001,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3291,1 +3291,1 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean usePred);\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3295,3 +3295,3 @@\n-    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3305,1 +3305,1 @@\n-    LongVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    LongVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3309,1 +3309,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3312,1 +3312,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3317,1 +3317,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3395,1 +3395,1 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean usePred);\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3399,2 +3399,2 @@\n-    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3402,1 +3402,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3427,1 +3427,1 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean usePred);\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3431,1 +3431,1 @@\n-    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3436,1 +3436,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -871,2 +871,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -903,2 +903,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -847,2 +847,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -862,2 +862,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -876,2 +876,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, usePred);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, usePred);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred) {\n-        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, usePred);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2865,1 +2865,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2920,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2924,1 +2924,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3068,1 +3068,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3072,1 +3072,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3252,1 +3252,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3256,1 +3256,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3662,1 +3662,1 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean usePred);\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3666,3 +3666,3 @@\n-    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3676,1 +3676,1 @@\n-    ShortVector fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    ShortVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -3680,1 +3680,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -3683,1 +3683,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -3688,1 +3688,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -3711,1 +3711,1 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean usePred);\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3715,2 +3715,2 @@\n-    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3718,1 +3718,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3743,1 +3743,1 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean usePred);\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3747,2 +3747,2 @@\n-    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -3750,1 +3750,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -3775,1 +3775,1 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean usePred);\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3779,1 +3779,1 @@\n-    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3784,1 +3784,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -3379,1 +3379,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3383,1 +3383,1 @@\n-        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3438,1 +3438,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3442,1 +3442,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3658,1 +3658,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* usePred *\/ false);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3662,1 +3662,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3817,1 +3817,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* usePred*\/ false);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ true);\n@@ -3821,1 +3821,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* usePred *\/ true);\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -4007,1 +4007,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ false).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -4011,1 +4011,1 @@\n-        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* usePred *\/ true).maybeSwap(bo);\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -4656,1 +4656,1 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred);\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4660,3 +4660,3 @@\n-    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(maskClass, a, arrayAddress(a, offset),\n-            offset, m, usePred,\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -4670,1 +4670,1 @@\n-    $abstractvectortype$ fromArrayMaskedTemplate(Class<M> maskClass, C base, long offset, int index, M m, boolean usePred,\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n@@ -4674,1 +4674,1 @@\n-        if (usePred) {\n+        if (offsetInRange) {\n@@ -4677,1 +4677,1 @@\n-                base, offset, m, \/* usePred *\/ 1,\n+                base, offset, m, \/* offsetInRange *\/ 1,\n@@ -4682,1 +4682,1 @@\n-                base, offset, m, \/* usePred *\/ 0,\n+                base, offset, m, \/* offsetInRange *\/ 0,\n@@ -4766,1 +4766,1 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred);\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4770,2 +4770,2 @@\n-    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -4773,1 +4773,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -4797,1 +4797,1 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred);\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4801,2 +4801,2 @@\n-    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -4804,1 +4804,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -4829,1 +4829,1 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred);\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4833,2 +4833,2 @@\n-    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean usePred) {\n-        return fromArrayMaskedTemplate(\n+    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n@@ -4836,1 +4836,1 @@\n-            offset, m, usePred,\n+            offset, m, offsetInRange,\n@@ -4861,1 +4861,1 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean usePred);\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4865,1 +4865,1 @@\n-    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean usePred) {\n+    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -4870,1 +4870,1 @@\n-                bb, offset, m, vsp, usePred,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -1114,2 +1114,2 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred) {\n-        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m, usePred);  \/\/ specialize\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1138,2 +1138,2 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred) {\n-        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m, usePred);  \/\/ specialize\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1154,2 +1154,2 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred) {\n-        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, usePred);  \/\/ specialize\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1169,2 +1169,2 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean usePred) {\n-        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m, usePred);  \/\/ specialize\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1183,2 +1183,2 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean usePred) {\n-        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, usePred);  \/\/ specialize\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}