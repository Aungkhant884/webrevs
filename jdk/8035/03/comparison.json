{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -921,0 +921,1 @@\n+                                            \"I\"                                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1140,1 +1140,1 @@\n-\/\/              int length, Object base, long offset, M m,\n+\/\/              int length, Object base, long offset, M m, int offsetInRange,\n@@ -1225,9 +1225,35 @@\n-  bool use_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n-                                            mem_num_elem, mem_elem_bt,\n-                                            (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n-  \/\/ Masked vector store operation needs the architecture predicate feature. We need to check\n-  \/\/ whether the predicated vector operation is supported by backend.\n-  if (is_store && !use_predicate) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=storeMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+  bool supports_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n+                                                mem_num_elem, mem_elem_bt,\n+                                                (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n+\n+  \/\/ If current arch does not support the predicated operations, we have to bail\n+  \/\/ out when current case uses the predicate feature.\n+  if (!supports_predicate) {\n+    bool needs_predicate = false;\n+    if (is_store) {\n+      \/\/ Masked vector store always uses the predicated store.\n+      needs_predicate = true;\n+    } else {\n+      \/\/ Masked vector load with IOOBE always uses the predicated load.\n+      const TypeInt* offset_in_range = gvn().type(argument(8))->isa_int();\n+      if (!offset_in_range->is_con()) {\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n+                        NodeClassNames[argument(8)->Opcode()]);\n+        }\n+        set_map(old_map);\n+        set_sp(old_sp);\n+        return false;\n+      }\n+      needs_predicate = (offset_in_range->get_con() == 0);\n+    }\n+\n+    if (needs_predicate) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+                      is_store ? \"storeMasked\" : \"loadMasked\",\n+                      num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1235,3 +1261,0 @@\n-    set_map(old_map);\n-    set_sp(old_sp);\n-    return false;\n@@ -1242,1 +1265,1 @@\n-  if (!use_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n+  if (!supports_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n@@ -1339,1 +1362,1 @@\n-    if (use_predicate) {\n+    if (supports_predicate) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,1 +427,1 @@\n-                               int length, ByteBuffer bb, int offset, M m, S s,\n+                               int length, ByteBuffer bb, int offset, M m, S s, int offsetInRange,\n@@ -434,1 +434,1 @@\n-                    s,\n+                    s, offsetInRange,\n@@ -449,1 +449,1 @@\n-                                     S s,\n+                                     S s, int offsetInRange,\n@@ -457,1 +457,1 @@\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m,\n+                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, offsetInRange,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -401,3 +401,3 @@\n-                 int length,\n-                 Object base, long offset,\n-                 M m, C container, int index, S s,\n+                 int length, Object base, long offset,\n+                 M m, int offsetInRange,\n+                 C container, int index, S s,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -904,2 +904,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -952,2 +952,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -968,2 +968,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -982,2 +982,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -996,2 +996,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -842,2 +842,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2864,1 +2864,0 @@\n-        \/\/ FIXME: optimize\n@@ -2866,3 +2865,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Byte>)m,\n-                   (wb_, o, i)  -> wb_.get(o + i * 1));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2923,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2926,1 +2923,0 @@\n-        \/\/ FIXME: optimize\n@@ -2928,1 +2924,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3080,1 +3076,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ 1);\n@@ -3083,1 +3079,0 @@\n-        \/\/ FIXME: optimize\n@@ -3085,1 +3080,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3258,1 +3253,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -3261,1 +3256,0 @@\n-        \/\/ FIXME: optimize\n@@ -3263,3 +3257,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Byte>)m,\n-                   (wb_, o, i)  -> wb_.get(o + i * 1));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3684,1 +3676,1 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3688,1 +3680,1 @@\n-    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3693,1 +3685,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3718,1 +3710,1 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3722,1 +3714,1 @@\n-    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n+    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, int offsetInRange) {\n@@ -3727,1 +3719,1 @@\n-            a, booleanArrayAddress(a, offset), m,\n+            a, booleanArrayAddress(a, offset), m, offsetInRange,\n@@ -3752,1 +3744,1 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3756,1 +3748,1 @@\n-    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3761,1 +3753,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3787,1 +3779,1 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m);\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, int offsetInRange);\n@@ -3791,1 +3783,1 @@\n-    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3796,1 +3788,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -815,2 +815,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -838,2 +838,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2686,1 +2686,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2689,1 +2689,0 @@\n-        \/\/ FIXME: optimize\n@@ -2691,3 +2690,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Double>)m,\n-                   (wb_, o, i)  -> wb_.getDouble(o + i * 8));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2748,1 +2745,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2751,1 +2748,0 @@\n-        \/\/ FIXME: optimize\n@@ -2753,1 +2749,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -2973,1 +2969,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2976,1 +2972,0 @@\n-        \/\/ FIXME: optimize\n@@ -2978,3 +2973,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Double>)m,\n-                   (wb_, o, i)  -> wb_.getDouble(o + i * 8));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3270,1 +3263,1 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m);\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, int offsetInRange);\n@@ -3274,1 +3267,1 @@\n-    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m) {\n+    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m, int offsetInRange) {\n@@ -3279,1 +3272,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3358,1 +3351,1 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m);\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, int offsetInRange);\n@@ -3362,1 +3355,1 @@\n-    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3367,1 +3360,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3393,1 +3386,1 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m);\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, int offsetInRange);\n@@ -3397,1 +3390,1 @@\n-    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3402,1 +3395,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -845,2 +845,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -868,2 +868,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -882,2 +882,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2710,1 +2710,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2713,1 +2713,0 @@\n-        \/\/ FIXME: optimize\n@@ -2715,3 +2714,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Float>)m,\n-                   (wb_, o, i)  -> wb_.getFloat(o + i * 4));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2772,1 +2769,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2775,1 +2772,0 @@\n-        \/\/ FIXME: optimize\n@@ -2777,1 +2773,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -2979,1 +2975,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2982,1 +2978,0 @@\n-        \/\/ FIXME: optimize\n@@ -2984,3 +2979,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Float>)m,\n-                   (wb_, o, i)  -> wb_.getFloat(o + i * 4));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3257,1 +3250,1 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m);\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, int offsetInRange);\n@@ -3261,1 +3254,1 @@\n-    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m) {\n+    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m, int offsetInRange) {\n@@ -3266,1 +3259,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3327,1 +3320,1 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m);\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, int offsetInRange);\n@@ -3331,1 +3324,1 @@\n-    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3336,1 +3329,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3362,1 +3355,1 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m);\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, int offsetInRange);\n@@ -3366,1 +3359,1 @@\n-    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3371,1 +3364,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -863,2 +863,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -877,2 +877,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -879,2 +879,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -893,2 +893,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -828,2 +828,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -837,2 +837,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -860,2 +860,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -874,2 +874,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2853,1 +2853,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2856,1 +2856,0 @@\n-        \/\/ FIXME: optimize\n@@ -2858,3 +2857,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Integer>)m,\n-                   (wb_, o, i)  -> wb_.getInt(o + i * 4));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2915,1 +2912,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2918,1 +2915,0 @@\n-        \/\/ FIXME: optimize\n@@ -2920,1 +2916,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3122,1 +3118,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -3125,1 +3121,0 @@\n-        \/\/ FIXME: optimize\n@@ -3127,3 +3122,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Integer>)m,\n-                   (wb_, o, i)  -> wb_.getInt(o + i * 4));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3400,1 +3393,1 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m);\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, int offsetInRange);\n@@ -3404,1 +3397,1 @@\n-    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m) {\n+    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m, int offsetInRange) {\n@@ -3409,1 +3402,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3470,1 +3463,1 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m);\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, int offsetInRange);\n@@ -3474,1 +3467,1 @@\n-    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3479,1 +3472,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3505,1 +3498,1 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m);\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, int offsetInRange);\n@@ -3509,1 +3502,1 @@\n-    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3514,1 +3507,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -818,2 +818,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -822,2 +822,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -845,2 +845,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -859,2 +859,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -830,2 +830,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2714,1 +2714,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2717,1 +2717,0 @@\n-        \/\/ FIXME: optimize\n@@ -2719,3 +2718,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Long>)m,\n-                   (wb_, o, i)  -> wb_.getLong(o + i * 8));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2776,1 +2773,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2779,1 +2776,0 @@\n-        \/\/ FIXME: optimize\n@@ -2781,1 +2777,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3001,1 +2997,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -3004,1 +3000,0 @@\n-        \/\/ FIXME: optimize\n@@ -3006,3 +3001,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Long>)m,\n-                   (wb_, o, i)  -> wb_.getLong(o + i * 8));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3298,1 +3291,1 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m);\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, int offsetInRange);\n@@ -3302,1 +3295,1 @@\n-    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m) {\n+    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m, int offsetInRange) {\n@@ -3307,1 +3300,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3386,1 +3379,1 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m);\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, int offsetInRange);\n@@ -3390,1 +3383,1 @@\n-    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3395,1 +3388,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3421,1 +3414,1 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m);\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, int offsetInRange);\n@@ -3425,1 +3418,1 @@\n-    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3430,1 +3423,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -871,2 +871,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -903,2 +903,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -847,2 +847,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -862,2 +862,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -876,2 +876,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -2864,1 +2864,0 @@\n-        \/\/ FIXME: optimize\n@@ -2866,3 +2865,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Short>)m,\n-                   (wb_, o, i)  -> wb_.getShort(o + i * 2));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -2923,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -2926,1 +2923,0 @@\n-        \/\/ FIXME: optimize\n@@ -2928,1 +2924,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3072,1 +3068,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -3075,1 +3071,0 @@\n-        \/\/ FIXME: optimize\n@@ -3077,1 +3072,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3257,1 +3252,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -3260,1 +3255,0 @@\n-        \/\/ FIXME: optimize\n@@ -3262,3 +3256,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Short>)m,\n-                   (wb_, o, i)  -> wb_.getShort(o + i * 2));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3670,1 +3662,1 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3674,1 +3666,1 @@\n-    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m) {\n+    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m, int offsetInRange) {\n@@ -3679,1 +3671,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -3703,1 +3695,1 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3707,1 +3699,1 @@\n-    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n+    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, int offsetInRange) {\n@@ -3712,1 +3704,1 @@\n-                a, charArrayAddress(a, offset), m,\n+                a, charArrayAddress(a, offset), m, offsetInRange,\n@@ -3738,1 +3730,1 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3742,1 +3734,1 @@\n-    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -3747,1 +3739,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -3773,1 +3765,1 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m);\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, int offsetInRange);\n@@ -3777,1 +3769,1 @@\n-    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -3782,1 +3774,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -3379,1 +3379,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -3382,1 +3382,0 @@\n-        \/\/ FIXME: optimize\n@@ -3384,3 +3383,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<$Boxtype$>)m,\n-                   (wb_, o, i)  -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -3441,1 +3438,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -3444,1 +3441,0 @@\n-        \/\/ FIXME: optimize\n@@ -3446,1 +3442,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3662,1 +3658,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ 1);\n@@ -3665,1 +3661,0 @@\n-        \/\/ FIXME: optimize\n@@ -3667,1 +3662,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -3822,1 +3817,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ 1);\n@@ -3825,1 +3820,0 @@\n-        \/\/ FIXME: optimize\n@@ -3827,1 +3821,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ 0);\n@@ -4013,1 +4007,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 1).maybeSwap(bo);\n@@ -4016,1 +4010,0 @@\n-        \/\/ FIXME: optimize\n@@ -4018,3 +4011,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<$Boxtype$>)m,\n-                   (wb_, o, i)  -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ 0).maybeSwap(bo);\n@@ -4665,1 +4656,1 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4669,1 +4660,1 @@\n-    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m) {\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, int offsetInRange) {\n@@ -4674,1 +4665,1 @@\n-            a, arrayAddress(a, offset), m,\n+            a, arrayAddress(a, offset), m, offsetInRange,\n@@ -4759,1 +4750,1 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4763,1 +4754,1 @@\n-    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n+    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, int offsetInRange) {\n@@ -4768,1 +4759,1 @@\n-                a, charArrayAddress(a, offset), m,\n+                a, charArrayAddress(a, offset), m, offsetInRange,\n@@ -4793,1 +4784,1 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4797,1 +4788,1 @@\n-    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n+    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, int offsetInRange) {\n@@ -4802,1 +4793,1 @@\n-            a, booleanArrayAddress(a, offset), m,\n+            a, booleanArrayAddress(a, offset), m, offsetInRange,\n@@ -4828,1 +4819,1 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4832,1 +4823,1 @@\n-    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, int offsetInRange) {\n@@ -4837,1 +4828,1 @@\n-            a, byteArrayAddress(a, offset), m,\n+            a, byteArrayAddress(a, offset), m, offsetInRange,\n@@ -4863,1 +4854,1 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, int offsetInRange);\n@@ -4867,1 +4858,1 @@\n-    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, int offsetInRange) {\n@@ -4872,1 +4863,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":25,"deletions":34,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1114,2 +1114,2 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1138,2 +1138,2 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1154,2 +1154,2 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1169,2 +1169,2 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1183,2 +1183,2 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, int offsetInRange) {\n+        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class LoadMaskedIOOBEBenchmark {\n+    @Param({\"1026\"})\n+    private int inSize;\n+\n+    @Param({\"1152\"})\n+    private int outSize;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[inSize];\n+        byteOut = new byte[outSize];\n+        shortIn = new short[inSize];\n+        shortOut = new short[outSize];\n+        intIn = new int[inSize];\n+        intOut = new int[outSize];\n+        longIn = new long[inSize];\n+        longOut = new long[outSize];\n+        floatIn = new float[inSize];\n+        floatOut = new float[outSize];\n+        doubleIn = new double[inSize];\n+        doubleOut = new double[outSize];\n+\n+        for (int i = 0; i < inSize; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        m = new boolean[outSize];\n+        for (int i = 0; i < inSize; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i, mask).intoArray(shortOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i, mask).intoArray(intOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i, mask).intoArray(longOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i, mask).intoArray(floatOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i, mask).intoArray(doubleOut, i);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}