{"files":[{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Shape;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.AbstractDocument.AbstractElement;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLDocument;\n+import javax.swing.text.html.HTMLEditorKit;\n+import javax.swing.text.html.StyleSheet;\n+\n+\/*\n+ * @test\n+ * @bug 4765271 8231286\n+ * @summary  Tests if JEditorPane displays text with proper size\n+ * @run main bug4765271\n+ *\/\n+public class bug4765271 {\n+\n+    \/\/ The default resolution for screen\n+    private static final int RES = 96;\n+\n+    private static final String TEXT =\n+            \"<html>\" +\n+            \"<body>\" +\n+            \"<span style=\\\"font-size: 72pt  \\\">A<\/span>\" +\n+            \"<span style=\\\"font-size: 6pc   \\\">B<\/span>\" +\n+            \"<span style=\\\"font-size: \" + RES + \"px  \\\">C<\/span>\" +\n+            \"<span style=\\\"font-size: 25.4mm\\\">D<\/span>\" +\n+            \"<span style=\\\"font-size: 2.54cm\\\">E<\/span>\" +\n+            \"<span style=\\\"font-size: 1in   \\\">F<\/span>\" +\n+            \"<\/body>\" +\n+            \"<\/html>\";\n+\n+    private JEditorPane jep;\n+\n+    private final boolean showFrame;\n+    private final AtomicBoolean passed = new AtomicBoolean(true);\n+\n+    public bug4765271(boolean showFrame) {\n+        this.showFrame = showFrame;\n+    }\n+\n+    public void init() {\n+        System.out.println(\"res = \" + RES);\n+\n+        jep = new JEditorPane();\n+        jep.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, Boolean.TRUE);\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(TEXT);\n+\n+        if (showFrame) {\n+            JFrame f = new JFrame(\"Reg test for bug4765271\");\n+            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+            f.getContentPane().add(jep);\n+            f.pack();\n+            f.setVisible(true);\n+        } else {\n+            jep.setSize(jep.getPreferredSize());\n+        }\n+    }\n+\n+    public void test() {\n+        Shape r = jep.getBounds();\n+        View v = jep.getUI().getRootView(jep);\n+        while (!(v instanceof javax.swing.text.html.InlineView)) {\n+            String viewName = v.getClass().getName();\n+            int n = v.getViewCount();\n+            if (viewName.endsWith(\"Row\")) {\n+                break;\n+            }\n+            Shape sh = v.getChildAllocation(n - 1,  r);\n+            if (sh != null) {\n+                r = sh;\n+            }\n+            v = v.getView(n - 1);\n+        }\n+\n+        Shape sh = v.getChildAllocation(0,  r);\n+        int h1 = sh.getBounds().height;\n+        StyleSheet ss = ((HTMLDocument) v.getDocument()).getStyleSheet();\n+        View childView = v.getView(0);\n+        AttributeSet attrs = childView.getAttributes();\n+        Font font = ss.getFont(attrs);\n+        int size1 = font.getSize();\n+        System.out.println(\"Font Size for InlineView #0 = \" + size1 + \"; height = \" + h1 + \"; element = {\");\n+        ((AbstractElement) childView.getElement()).dump(System.out, 3);\n+        System.out.println(\"}\");\n+\n+        boolean testPassed = true;\n+        int n = v.getViewCount() - 1;\n+        for (int i = 1; i < n; i++) {\n+            sh = v.getChildAllocation(i,  r);\n+            int h2 = sh.getBounds().height;\n+            childView = v.getView(i);\n+            attrs = childView.getAttributes();\n+            font = ss.getFont(attrs);\n+            int size2 = font.getSize();\n+            System.out.println(\"Font Size for InlineView #\" + i + \" = \" + size2 + \"; height = \" + h2 + \"; element = {\");\n+            ((AbstractElement) childView.getElement()).dump(System.out, 3);\n+            System.out.println(\"}\");\n+            testPassed &= ((size1 == size2) && (h1 == h2));\n+        }\n+        passed.set(testPassed);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        bug4765271 test = new bug4765271(\n+                (args.length > 0) && \"-show\".equals(args[0]));\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            test.init();\n+            test.test();\n+        });\n+\n+        if (!test.passed.get()) {\n+            throw new RuntimeException(\"Test failed\");\n+        } else {\n+            System.out.println(\"Test succeeded\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/CSS\/4765271\/bug4765271.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}