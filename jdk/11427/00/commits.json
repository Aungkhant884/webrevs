[{"commit":{"message":"8297689: Fix incorrect result of Short.reverseBytes() call in loops\n\nRecently, we find calling `Short.reverseBytes()` in loops may generate\nincorrect result if the code is compiled by C2. Below is a simple case\nto reproduce.\n\n```\nclass Foo {\n  static final int SIZE = 50;\n  static int a[] = new int[SIZE];\n\n  static void test() {\n    for (int i = 0; i < SIZE; i++) {\n      a[i] = Short.reverseBytes((short) a[i]);\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    Class.forName(\"java.lang.Short\");\n    a[25] = 16;\n    test();\n    System.out.println(a[25]);\n  }\n}\n\n\/\/ $ java -Xint Foo\n\/\/ 4096\n\/\/ $ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Foo.test Foo\n\/\/ 268435456\n```\n\nIn this case, the `reverseBytes()` call is intrinsified and transformed\ninto a `ReverseBytesS` node. But then C2 compiler incorrectly vectorizes\nit into `ReverseBytesV` with int type. C2 `Op_ReverseBytes*` has short,\nchar, int and long versions. Their behaviors are different for different\ndata sizes. In superword, subword operation itself doesn't have precise\ndata size info. Instead, the data size info comes from memory operations\nin its use-def chain. Hence, vectorization of `reverseBytes()` is valid\nonly if the data size is consistent with the type size of the caller's\nclass. But current C2 compiler code lacks fine-grained type checks for\n`ReverseBytes*` in vector transformation. It results in `reverseBytes()`\ncall from Short or Character class with int load\/store gets vectorized\nincorrectly in above case.\n\nTo fix the issue, this patch adds more checks in `VectorNode::opcode()`.\nT_BYTE is a special case for `Op_ReverseBytes*`. As the Java Byte class\ndoesn't have `reverseBytes()` method so there's no `Op_ReverseBytesB`.\nBut T_BYTE may still appear in VectorAPI calls. In this patch we still\nuse `Op_ReverseBytesI` for T_BYTE to ensure vector intrinsification\nsucceeds.\n\nTested with hotspot::hotspot_all_no_apps, jdk tier1~3 and langtools\ntier1 on x86 and AArch64, no issue is found."},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSubwordReverseBytes.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java"}],"sha":"639dc58b7eca7201122dbd1325c4c50a174ccd33"}]