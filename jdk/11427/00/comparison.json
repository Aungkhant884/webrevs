{"files":[{"patch":"@@ -172,0 +172,5 @@\n+  case Op_ReverseBytesUS:\n+    \/\/ Subword operations in superword usually don't have precise info\n+    \/\/ about signedness. But the behavior of reverseBytes for short and\n+    \/\/ char are exactly the same.\n+    return ((bt == T_SHORT || bt == T_CHAR) ? Op_ReverseBytesV : 0);\n@@ -173,0 +178,4 @@\n+    \/\/ There is no reverseBytes() in Byte class but T_BYTE may appear\n+    \/\/ in VectorAPI calls. We still use ReverseBytesI for T_BYTE to\n+    \/\/ ensure vector intrinsification succeeds.\n+    return ((bt == T_INT || bt == T_BYTE) ? Op_ReverseBytesV : 0);\n@@ -174,2 +183,1 @@\n-  case Op_ReverseBytesUS:\n-    return (is_integral_type(bt) ? Op_ReverseBytesV : 0);\n+    return (bt == T_LONG ? Op_ReverseBytesV : 0);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -523,2 +523,7 @@\n-        case T_BYTE:\n-        case T_SHORT:\n+        case T_SHORT: return Op_ReverseBytesS;\n+        \/\/ Superword requires type consistency between the ReverseBytes*\n+        \/\/ node and the data. But there's no ReverseBytesB node because\n+        \/\/ no reverseBytes() method in Java Byte class. T_BYTE can only\n+        \/\/ appear in VectorAPI calls. We reuse Op_ReverseBytesI for this\n+        \/\/ to ensure vector intrinsification succeeds.\n+        case T_BYTE:  \/\/ Intentionally fall-through\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @requires vm.cpu.features ~= \".*avx2.*\"\n- * @requires os.simpleArch == \"x64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") | os.simpleArch == \"AArch64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297689\n+ * @summary Test miscompilation of reverseBytes call from subword types\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.vectorization.TestSubwordReverseBytes\n+ *\/\n+\n+public class TestSubwordReverseBytes {\n+    private static final int SIZE = 32000;\n+\n+    private static   int[] idx = new int[SIZE];\n+    private static short[] rbs = new short[SIZE];\n+    private static  char[] rbc = new char[SIZE];\n+\n+    static {\n+        for (int i = 0; i < SIZE; i++) {\n+            idx[i] = i;\n+        }\n+        for (short s = 0; s < SIZE; s++) {\n+            rbs[s] = Short.reverseBytes(s);\n+        }\n+        for (char c = 0; c < SIZE; c++) {\n+            rbc[c] = Character.reverseBytes(c);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_V})\n+    public static int[] testShortReverseBytes() {\n+        int[] res = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+           res[i] = Short.reverseBytes((short) idx[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Run(test = \"testShortReverseBytes\")\n+    public static void testShort() {\n+        int[] res = testShortReverseBytes();\n+        for (int i = 0; i < SIZE; i++) {\n+            if (res[i] != rbs[i]) {\n+                throw new RuntimeException(\"Wrong result: expected = \" +\n+                        (int) rbs[i] + \", actual = \" + res[i]);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_V})\n+    public static int[] testCharacterReverseBytes() {\n+        int[] res = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+           res[i] = Character.reverseBytes((char) idx[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Run(test = \"testCharacterReverseBytes\")\n+    public static void testChar() {\n+        int[] res = testCharacterReverseBytes();\n+        for (int i = 0; i < SIZE; i++) {\n+            if (res[i] != rbc[i]) {\n+                throw new RuntimeException(\"Wrong result: expected = \" +\n+                        (int) rbc[i] + \", actual = \" + res[i]);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSubwordReverseBytes.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -50,0 +50,1 @@\n+    private int[] idx;\n@@ -55,0 +56,1 @@\n+        idx = new int[SIZE];\n@@ -59,0 +61,1 @@\n+            idx[i] = i;\n@@ -192,0 +195,19 @@\n+\n+    \/\/ ------------- ReverseBytes -------------\n+    @Test\n+    public char[] reverseBytesWithChar() {\n+        char[] res = new char[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = Character.reverseBytes(a[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    public int[] reverseBytesWithInt() {\n+        int[] res = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = Character.reverseBytes((char) idx[i]);\n+        }\n+        return res;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicCharOpTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    private int[] idx;\n@@ -55,0 +56,1 @@\n+        idx = new int[SIZE];\n@@ -59,0 +61,1 @@\n+            idx[i] = i;\n@@ -190,0 +193,19 @@\n+\n+    \/\/ ------------- ReverseBytes -------------\n+    @Test\n+    public short[] reverseBytesWithShort() {\n+        short[] res = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = Short.reverseBytes(a[i]);\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    public int[] reverseBytesWithInt() {\n+        int[] res = new int[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = Short.reverseBytes((short) idx[i]);\n+        }\n+        return res;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}