{"files":[{"patch":"@@ -154,11 +154,4 @@\n-                try {\n-                    Provider p = Signature.getInstance(sigName).getProvider();\n-                    paramSpec = ECUtil.getECParameterSpec(p, paramBytes);\n-                } catch (Exception e) {\n-                    throw new ProviderException(\"Error handling EC parameters\", e);\n-                }\n-                \/\/ ECUtil discards exception and returns null, so we need to check\n-                \/\/ the returned value\n-                if (paramSpec == null) {\n-                    throw new ProviderException(\"Error handling EC parameters\");\n-                }\n+                \/\/ Some certificates have params in an ECDSA algorithmID.\n+                \/\/ According to RFC 3279 2.2.3 and RFC 5758 3.2,\n+                \/\/ they are useless and should be ignored.\n+                return null;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -216,0 +216,1 @@\n+                    || algid.equals(SHA1withECDSA_oid)\n@@ -220,0 +221,3 @@\n+                \/\/ RFC 3279 2.2.3: When the ecdsa-with-SHA1 algorithm identifier\n+                \/\/ appears as the algorithm field in an AlgorithmIdentifier,\n+                \/\/ the encoding MUST omit the parameters field.\n@@ -695,0 +699,2 @@\n+    public static final ObjectIdentifier SHA1withECDSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA1withECDSA);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,3 +83,0 @@\n-    \/\/ signature parameters\n-    private ECParameterSpec sigParams = null;\n-\n@@ -350,4 +347,0 @@\n-        if (!isCompatible(this.sigParams, key.getParams())) {\n-            throw new InvalidKeyException(\"Key params does not match signature params\");\n-        }\n-\n@@ -373,4 +366,0 @@\n-        if (!isCompatible(this.sigParams, key.getParams())) {\n-            throw new InvalidKeyException(\"Key params does not match signature params\");\n-        }\n-\n@@ -433,9 +422,0 @@\n-    private static boolean isCompatible(ECParameterSpec sigParams,\n-            ECParameterSpec keyParams) {\n-        if (sigParams == null) {\n-            \/\/ no restriction on key param\n-            return true;\n-        }\n-        return ECUtil.equals(sigParams, keyParams);\n-    }\n-\n@@ -531,3 +511,9 @@\n-    throws InvalidAlgorithmParameterException {\n-        if (params != null && !(params instanceof ECParameterSpec)) {\n-            throw new InvalidAlgorithmParameterException(\"No parameter accepted\");\n+            throws InvalidAlgorithmParameterException {\n+        \/\/ Interop: some certificates include parameters in an ECDSA\n+        \/\/ algorithm identifier. We only accept one matching the key.\n+        if (params == null) {\n+            return;\n+        }\n+        if (!(params instanceof ECParameterSpec ecparams)) {\n+            throw new InvalidAlgorithmParameterException(\n+                    \"Parameters must be of type ECParameterSpec\");\n@@ -536,1 +522,1 @@\n-        if ((key != null) && !isCompatible((ECParameterSpec)params, key.getParams())) {\n+        if ((key != null) && !ECUtil.equals(ecparams, key.getParams())) {\n@@ -540,2 +526,0 @@\n-\n-        sigParams = (ECParameterSpec) params;\n@@ -554,11 +538,4 @@\n-        if (sigParams == null) {\n-            return null;\n-        }\n-        try {\n-            AlgorithmParameters ap = AlgorithmParameters.getInstance(\"EC\");\n-            ap.init(sigParams);\n-            return ap;\n-        } catch (Exception e) {\n-            \/\/ should never happen\n-            throw new ProviderException(\"Error retrieving EC parameters\", e);\n-        }\n+        \/\/ Always return null even if setParameter is called before.\n+        \/\/ According to RFC 3279 2.2.3 and RFC 5758 3.2, no parameters is\n+        \/\/ defined for ECDSA AlgorithmIdentifiers.\n+        return null;\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECDSASignature.java","additions":15,"deletions":38,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286908\n+ * @summary ECDSA signature should not return parameters\n+ * @library \/test\/lib\n+ * @modules jdk.crypto.ec\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.security.*;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.spec.ECGenParameterSpec;\n+\n+public class SignatureParameters {\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\");\n+        kpg.initialize(new ECGenParameterSpec(\"secp384r1\"));\n+        ECPrivateKey key = (ECPrivateKey) kpg.generateKeyPair().getPrivate();\n+        Signature s = Signature.getInstance(\"SHA384withECDSA\");\n+        s.initSign(key);\n+        s.setParameter(key.getParams());\n+        Asserts.assertEQ(s.getParameters(), null);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ec\/SignatureParameters.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}