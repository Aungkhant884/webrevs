{"files":[{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\n+\/*\n+ * @test\n+ * @bug 8280494\n+ * @summary (D)TLS signature schemes\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @build DTLSOverDatagram\n+ * @run main\/othervm DTLSSignatureSchemes\n+ *\/\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import java.security.Security;\n+\n+\/**\n+ * Test DTLS client authentication.\n+ *\/\n+public class DTLSSignatureSchemes extends DTLSOverDatagram {\n+    private final String[] serverSignatureSchemes;\n+    private final String[] clientSignatureSchemes;\n+\n+    public DTLSSignatureSchemes(String[] serverSignatureSchemes,\n+                            String[] clientSignatureSchemes) {\n+        this.serverSignatureSchemes = serverSignatureSchemes;\n+        this.clientSignatureSchemes = clientSignatureSchemes;\n+    }\n+\n+    @Override\n+    SSLEngine createSSLEngine(boolean isClient) throws Exception {\n+        SSLEngine engine = super.createSSLEngine(isClient);\n+\n+        SSLParameters sslParameters = engine.getSSLParameters();\n+        if (isClient) {\n+            sslParameters.setSignatureSchemes(clientSignatureSchemes);\n+        } else {\n+            sslParameters.setSignatureSchemes(serverSignatureSchemes);\n+        }\n+        engine.setSSLParameters(sslParameters);\n+\n+        return engine;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+\n+        runTest(new String[] {\n+                        \"ecdsa_secp256r1_sha256\",\n+                        \"ed25519\"\n+                },\n+                new String[] {\n+                        \"ecdsa_secp256r1_sha256\",\n+                        \"ed25519\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                false);\n+        runTest(null,\n+                new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                null,\n+                false);\n+        runTest(new String[0],\n+                new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                true);\n+        runTest(new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                new String[0],\n+                true);\n+        runTest(new String[] {\n+                        \"ecdsa_secp256r1_shaNA\"\n+                },\n+                new String[] {\n+                        \"ecdsa_secp256r1_sha256\"\n+                },\n+                true);\n+    }\n+\n+    private static void runTest(String[] serverSignatureSchemes,\n+                                String[] clientSignatureSchemes,\n+                                boolean exceptionExpected) throws Exception {\n+        DTLSSignatureSchemes testCase = new DTLSSignatureSchemes(\n+                serverSignatureSchemes, clientSignatureSchemes);\n+        try {\n+            testCase.runTest(testCase);\n+            if (exceptionExpected) {\n+                throw new RuntimeException(\"Unexpected success!\");\n+            }\n+        } catch (Exception e) {\n+            if (!exceptionExpected) {\n+                throw e;\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSSignatureSchemes.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}