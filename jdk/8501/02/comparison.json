{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/flags\/jvmFlagConstraintsCompiler.hpp\"\n@@ -289,1 +290,4 @@\n-    FLAG_SET_ERGO(CompileThreshold, scaled_compile_threshold(CompileThreshold));\n+    intx scaled_value = scaled_compile_threshold(CompileThreshold);\n+    if (CompileThresholdConstraintFunc(scaled_value, true) != JVMFlag::VIOLATES_CONSTRAINT) {\n+      FLAG_SET_ERGO(CompileThreshold, scaled_value);\n+    }\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestCompileThresholdScaling\n+ * @bug 8283807\n+ * @summary With a very large value of CompileThresholdScaling all scaled\n+ *          thresholds should be outside the allowed range\n+ * @library \/test\/lib\n+ * @run driver compiler.arguments.TestCompileThresholdScaling\n+ *\/\n+\n+package compiler.arguments;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+import java.util.List;\n+\n+public class TestCompileThresholdScaling {\n+\n+    public static void main(String args[]) throws Throwable {\n+        checkCompileThresholdScaling(Double.MAX_VALUE, true);\n+        checkCompileThresholdScaling(Double.valueOf(Integer.MAX_VALUE), true);\n+        checkCompileThresholdScaling(1.0, false);\n+    }\n+\n+    static void checkCompileThresholdScaling(double value, boolean fail) throws Throwable {\n+        OutputAnalyzer out = ProcessTools.executeTestJvm(\"-XX:CompileThresholdScaling=\" + value, \"--version\");\n+        out.shouldHaveExitValue(0);\n+        String output = out.getOutput();\n+\n+        List<String> thresholdList = List.of(\n+        \"Tier0InvokeNotifyFreqLog\", \"Tier0BackedgeNotifyFreqLog\", \"Tier3InvocationThreshold\",\n+        \"Tier3MinInvocationThreshold\", \"Tier3CompileThreshold\", \"Tier3BackEdgeThreshold\",\n+        \"Tier2InvokeNotifyFreqLog\", \"Tier2BackedgeNotifyFreqLog\", \"Tier3InvokeNotifyFreqLog\",\n+        \"Tier3BackedgeNotifyFreqLog\", \"Tier23InlineeNotifyFreqLog\", \"Tier4InvocationThreshold\",\n+        \"Tier4MinInvocationThreshold\", \"Tier4CompileThreshold\", \"Tier4BackEdgeThreshold\");\n+\n+        String pattern = \".*CompileThreshold .* must be between .* and .*\";\n+        boolean found = Pattern.compile(pattern).matcher(output).find();\n+        Asserts.assertEquals(found, fail, \"Unexpected result\");\n+\n+        for (String threshold : thresholdList) {\n+            pattern = \".*\" + threshold + \"=.* is outside the allowed range\";\n+            Asserts.assertEquals(found, fail, \"Unexpected result\");\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompileThresholdScaling.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -260,0 +260,8 @@\n+        \/*\n+         * Exclude CompileThresholdScaling from max range testing, because\n+         * it is expected to print \"outside the allowed range\" warnings for the\n+         * scaled flag and the \"outside the allowed range\" warning does not\n+         * refer to CompileThresholdScaling itself.\n+         *\/\n+        excludeTestMaxRange(\"CompileThresholdScaling\");\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -130,4 +130,1 @@\n-            if (!name.equals(\"CompileThresholdScaling\")) {\n-                \/\/ See JDK-8283807: Max range for -XX:CompileThresholdScaling is too large\n-                validValues.add(formatValue(max));\n-            }\n+            validValues.add(formatValue(max));\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/common\/optionsvalidation\/DoubleJVMOption.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}