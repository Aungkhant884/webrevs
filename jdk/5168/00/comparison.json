{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,4 +70,3 @@\n-     * Given an array of <code>Parameter<\/code>s, return\n-     * a name\/rank number map.  If the array is null, then\n-     * null is returned.\n-     * @param params The array of parameters (from type or executable member) to\n+     * Given a list of parameters, return a name\/rank number map.\n+     * If the list is null, then null is returned.\n+     * @param params The list of parameters (from type or executable member) to\n@@ -248,3 +247,1 @@\n-                String paramName = kind != ParamKind.TYPE_PARAMETER\n-                        ? name.toString()\n-                        : \"<\" + name + \">\";\n+                String paramName = kind == ParamKind.TYPE_PARAMETER ? \"<\" + name + \">\" : name;\n@@ -252,7 +249,6 @@\n-                    String key;\n-                    switch (kind) {\n-                        case PARAMETER:       key = \"doclet.Parameters_warn\" ; break;\n-                        case TYPE_PARAMETER:  key = \"doclet.TypeParameters_warn\" ; break;\n-                        case RECORD_COMPONENT: key = \"doclet.RecordComponents_warn\" ; break;\n-                        default: throw new IllegalArgumentException(kind.toString());\n-                }\n+                    String key = switch (kind) {\n+                        case PARAMETER        -> \"doclet.Parameters_warn\";\n+                        case TYPE_PARAMETER   -> \"doclet.TypeParameters_warn\";\n+                        case RECORD_COMPONENT -> \"doclet.RecordComponents_warn\";\n+                        default -> throw new IllegalArgumentException(kind.toString());\n+                    };\n@@ -263,7 +259,6 @@\n-                    String key;\n-                    switch (kind) {\n-                        case PARAMETER:       key = \"doclet.Parameters_dup_warn\" ; break;\n-                        case TYPE_PARAMETER:  key = \"doclet.TypeParameters_dup_warn\" ; break;\n-                        case RECORD_COMPONENT: key = \"doclet.RecordComponents_dup_warn\" ; break;\n-                        default: throw new IllegalArgumentException(kind.toString());\n-                }\n+                    String key = switch (kind) {\n+                        case PARAMETER        -> \"doclet.Parameters_dup_warn\";\n+                        case TYPE_PARAMETER   -> \"doclet.TypeParameters_dup_warn\";\n+                        case RECORD_COMPONENT -> \"doclet.RecordComponents_dup_warn\";\n+                        default -> throw new IllegalArgumentException(kind.toString());\n+                    };\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-            return ((ParamTree) dtree).getName().toString();\n+            return ((ParamTree) dtree).getName().getName().toString();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      8203176\n+ * @bug      8203176 8271258\n@@ -36,1 +36,0 @@\n-import java.nio.file.Paths;\n@@ -45,1 +44,1 @@\n-        tester.runTests();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName())});\n@@ -51,1 +50,1 @@\n-    public void test() throws Exception {\n+    public void testUnicode(Path base) throws Exception {\n@@ -53,1 +52,1 @@\n-        Path src = Files.createDirectories(Paths.get(\"src\"));\n+        Path src = Files.createDirectories(base.resolve(\"src\"));\n@@ -58,1 +57,1 @@\n-        javadoc(\"-d\", \"out\",\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n@@ -64,1 +63,2 @@\n-                \"<div class=\\\"block\\\">Hel\" + ellipsis + \"lo <code>World(\" + ellipsis + \")<\/code>.<\/div>\");\n+                \"\"\"\n+                        \"\"\");\n@@ -68,0 +68,62 @@\n+\n+    @Test\n+    public void testParam(Path base) throws Exception {\n+        String chineseElephant = \"\\u5927\\u8c61\"; \/\/ taken from JDK-8271258\n+        Path src = Files.createDirectories(base.resolve(\"src\"));\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    \/**\n+                     * Comment. ##.\n+                     * @param <##> the ##\n+                     *\/\n+                    public class Code<##> {\n+                        \/**\n+                         * Comment. ##.\n+                         * @param ## the ##\n+                         *\/\n+                         public void set##(int ##) { }\n+                    }\"\"\".replaceAll(\"##\", chineseElephant));\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-encoding\", \"utf-8\",\n+                \"--no-platform-links\",\n+                src.resolve(\"Code.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"Code.html\", true,\n+                \"\"\"\n+                    <h1 title=\"Class Code\" class=\"title\">Class Code&lt;##&gt;<\/h1>\n+                    \"\"\".replaceAll(\"##\", chineseElephant),\n+                \"\"\"\n+                    <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                    <div class=\"inheritance\">Code&lt;##&gt;<\/div>\n+                    <\/div>\n+                    \"\"\".replaceAll(\"##\", chineseElephant),\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Type Parameters:<\/dt>\n+                    <dd><code>##<\/code> - the ##<\/dd>\n+                    <\/dl>\n+                    \"\"\".replaceAll(\"##\", chineseElephant),\n+                \"\"\"\n+                    <section class=\"detail\" id=\"set##(int)\">\n+                    <h3>set##<\/h3>\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span c\\\n+                    lass=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">set##<\/span><wbr>\\\n+                    <span class=\"parameters\">(int&nbsp;##)<\/span><\/div>\n+                    <div class=\"block\">Comment. ##.<\/div>\n+                    <dl class=\"notes\">\n+                    <dt>Parameters:<\/dt>\n+                    <dd><code>##<\/code> - the ##<\/dd>\n+                    <\/dl>\n+                    <\/section>\n+                    \"\"\".replaceAll(\"##\", chineseElephant)\n+                );\n+\n+        \/\/ The following checks for the numeric forms of the Unicode characters being tested:\n+        \/\/ these numeric forms should not show up as literal character sequences.\n+        checkOutput(\"Code.html\", false,\n+                Integer.toHexString(chineseElephant.charAt(0)),\n+                Integer.toHexString(chineseElephant.charAt(1))\n+                );\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUnicode\/TestUnicode.java","additions":70,"deletions":8,"binary":false,"changes":78,"status":"modified"}]}