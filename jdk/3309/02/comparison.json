{"files":[{"patch":"@@ -1783,2 +1783,8 @@\n-WB_ENTRY(jlong, WB_MetaspaceReserveAlignment(JNIEnv* env, jobject wb))\n-  return (jlong)Metaspace::reserve_alignment();\n+\/\/ The function is only valid when CDS is available.\n+WB_ENTRY(jlong, WB_MetaspaceSharedRegionAlignment(JNIEnv* env, jobject wb))\n+#if INCLUDE_CDS\n+  return (jlong)MetaspaceShared::core_region_alignment();\n+#else\n+  ShouldNotReachHere();\n+  return 0L;\n+#endif\n@@ -2508,1 +2514,1 @@\n-  {CC\"metaspaceReserveAlignment\", CC\"()J\",            (void*)&WB_MetaspaceReserveAlignment },\n+  {CC\"metaspaceSharedRegionAlignment\", CC\"()J\",       (void*)&WB_MetaspaceSharedRegionAlignment },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \/\/     WhiteBox.metaspaceReserveAlignment() bytes of unused space.\n+    \/\/     WhiteBox.metaspaceSharedRegionAlignment() bytes of unused space.\n@@ -61,2 +61,2 @@\n-        long reserve_alignment = wb.metaspaceReserveAlignment();\n-        System.out.println(\"Metaspace::reserve_alignment() = \" + reserve_alignment);\n+        long reserve_alignment = wb.metaspaceSharedRegionAlignment();\n+        System.out.println(\"MetaspaceShared::core_region_alignment() = \" + reserve_alignment);\n@@ -91,1 +91,1 @@\n-                        throw new RuntimeException(\"Unused space (\" + unused + \") must be smaller than Metaspace::reserve_alignment() (\" +\n+                        throw new RuntimeException(\"Unused space (\" + unused + \") must be smaller than MetaspaceShared::core_region_alignment() (\" +\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SpaceUtilizationCheck.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+    public static long alignment;      \/\/ MetaspaceShared::core_region_alignment\n@@ -107,0 +108,1 @@\n+        alignment = wb.metaspaceSharedRegionAlignment();\n@@ -198,1 +200,0 @@\n-        long alignment = WhiteBox.getWhiteBox().metaspaceReserveAlignment();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -35,0 +36,1 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n@@ -36,1 +38,1 @@\n- * @run driver SharedRegionAlignmentTest\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. SharedRegionAlignmentTest\n@@ -39,0 +41,1 @@\n+\n@@ -41,0 +44,1 @@\n+import sun.hotspot.WhiteBox;\n@@ -52,0 +56,2 @@\n+        String checkString = \"Core region alignment: \" +\n+                             WhiteBox.getWhiteBox().metaspaceSharedRegionAlignment();\n@@ -58,2 +64,0 @@\n-        final String logFor64K = \"core_region_alignment = 65535\";\n-\n@@ -70,2 +74,2 @@\n-            out.shouldContain(\"Dumping shared data to file\");\n-            boolean is_aligned_64k = out.getStdout().contains(logFor64K);\n+            out.shouldContain(\"Dumping shared data to file\")\n+               .shouldContain(checkString);\n@@ -82,4 +86,2 @@\n-                            if (is_aligned_64k) {\n-                                output.shouldContain(logFor64K);\n-                            }\n-                            output.shouldContain(\"Hello World\");\n+                            output.shouldContain(checkString)\n+                                  .shouldContain(\"Hello World\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedRegionAlignmentTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-  public native long metaspaceReserveAlignment();\n+  public native long metaspaceSharedRegionAlignment();\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}