{"files":[{"patch":"@@ -202,0 +202,3 @@\n+  product(bool, AlwaysPreTouchStacks, false, DIAGNOSTIC,                    \\\n+          \"Force java thread stacks to be fully pre-touched\")               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -696,0 +696,4 @@\n+  if (AlwaysPreTouchStacks) {\n+    pretouch_stack();\n+  }\n+\n@@ -2122,0 +2126,19 @@\n+void JavaThread::pretouch_stack() {\n+  \/\/ Given an established java thread stack with usable area followed by\n+  \/\/ shadow zone and reserved\/yellow\/red zone, pretouch the usable area ranging\n+  \/\/ from the current frame down to the start of the shadow zone.\n+  const address end = _stack_overflow_state.shadow_zone_safe_limit();\n+  if (is_in_full_stack(end)) {\n+    char* p1 = (char*) alloca(1);\n+    address here = (address) &p1;\n+    if (is_in_full_stack(here) && here > end) {\n+      size_t to_alloc = here - end;\n+      char* p2 = (char*) alloca(to_alloc);\n+      log_trace(os, thread)(\"Pretouching thread stack from \" PTR_FORMAT \" to \" PTR_FORMAT \".\",\n+                            p2i(p2), p2i(end));\n+      os::pretouch_memory(p2, p2 + to_alloc,\n+                          NOT_AIX(os::vm_page_size()) AIX_ONLY(4096));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -418,0 +418,2 @@\n+  void pretouch_stack();\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/*\n+ * @test\n+ * @summary Test AlwaysPreTouchThreadStacks\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestAlwaysPreTouchStacks\n+ *\/\n+\n+public class TestAlwaysPreTouchStacks extends Thread {\n+\n+    static private final Thread createTestThread(int stackSize) {\n+        Thread t = new Thread(null,\n+                () -> System.out.println(\"Alive: \" + stackSize),\n+                \"Thread-\" + stackSize, stackSize);\n+        return t;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, IOException {\n+\n+        int[] stackSizes = {\n+          1024 * 256, 1024 * 512, 1024 * 1024 * 3\n+        };\n+\n+        if (args.length == 1 && args[0].equals(\"test\")) {\n+\n+            ArrayList<Thread> threads = new ArrayList<>();\n+\n+            for (int s: stackSizes) {\n+                threads.add(createTestThread(s));\n+            }\n+\n+            threads.forEach(Thread::start);\n+            for (Thread t: threads) {\n+                t.join();\n+            }\n+\n+        } else {\n+\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                    \"-Xmx100M\",\n+                    \"-XX:+AlwaysPreTouchStacks\", \"-Xlog:os+thread=trace\",\n+                    \"-XX:NativeMemoryTracking=summary\", \"-XX:+PrintNMTStatistics\",\n+                    \"TestAlwaysPreTouchStacks\",\n+                    \"test\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.reportDiagnosticSummary();\n+\n+            output.shouldHaveExitValue(0);\n+\n+            for (int s: stackSizes) {\n+                output.shouldContain(\"Alive: \" + Integer.toString(s));\n+            }\n+\n+            output.shouldContain(\"Pretouching thread stack\");\n+\n+            \/\/ We want to see, in the final NMT printout, a committed thread stack size very close to reserved\n+            \/\/ stack size. Like this:\n+            \/\/ -                    Thread (reserved=10332400KB, committed=10284360KB)\n+            \/\/                      (thread #10021)\n+            \/\/                      (stack: reserved=10301560KB, committed=10253520KB)   <<<<\n+            \/\/\n+            \/\/ ... without -XX:+AlwaysPreTouchStacks, the committed\/reserved ratio for thread stacks should be\n+            \/\/ a lot lower, e.g.:\n+            \/\/ -                    Thread (reserved=10332400KB, committed=331828KB)\n+            \/\/                      (thread #10021)\n+            \/\/                      (stack: reserved=10301560KB, committed=300988KB)  <<<\n+\n+            output.shouldMatch(\"- *Thread.*reserved.*committed\");\n+            Pattern pat = Pattern.compile(\".*stack: reserved=(\\\\d+), committed=(\\\\d+).*\");\n+            boolean foundLine = false;\n+            for (String line : output.asLines()) {\n+                Matcher m = pat.matcher(line);\n+                if (m.matches()) {\n+                    long reserved = Long.parseLong(m.group(1));\n+                    long committed = Long.parseLong(m.group(2));\n+                    System.out.println(\">>>>> \" + line + \": \" + reserved + \" - \" + committed);\n+                    if (committed < (reserved \/ 2)) {\n+                        throw new RuntimeException(\"Expected a higher ratio between stack committed and reserved.\");\n+                    }\n+                    foundLine = true;\n+                    break;\n+                }\n+            }\n+            if (!foundLine) {\n+                throw new RuntimeException(\"Did not find expected NMT output\");\n+            }\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestAlwaysPreTouchStacks.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}