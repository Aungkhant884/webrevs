{"files":[{"patch":"@@ -105,3 +105,14 @@\n- * The following method shuts down an {@code ExecutorService} in two phases,\n- * first by calling {@code shutdown} to reject incoming tasks, and then\n- * calling {@code shutdownNow}, if necessary, to cancel any lingering tasks:\n+ * An {@code ExecutorService} may also be established and closed\n+ * (shutdown, blocking until terminated) as follows; illustrating with\n+ * a different {@code Executors} factory method:\n+ *\n+ * <pre> {@code\n+ * try (ExecutorService e =  Executors.newWorkStealingPool()) {\n+ *   \/\/ submit or execute many tasks with e ...\n+ * }}<\/pre>\n+ *\n+ * Further customization is also possible. For example, the following\n+ * method shuts down an {@code ExecutorService} in two phases, first\n+ * by calling {@code shutdown} to reject incoming tasks, and then\n+ * calling {@code shutdownNow}, if necessary, to cancel any lingering\n+ * tasks:\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ExecutorService.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -722,1 +722,1 @@\n-     * to any user-defined ThreadGroup, and erase all ThreadLocals\n+     * to any user-defined ThreadGroup, and clear all ThreadLocals\n@@ -886,1 +886,1 @@\n-    static final int INNOCUOUS    = 1 << 18;       \/\/ set for Innocuous workers\n+    static final int CLEAR_TLS    = 1 << 18;       \/\/ set for Innocuous workers\n@@ -1316,1 +1316,1 @@\n-            if ((cfg & INNOCUOUS) != 0)\n+            if ((cfg & CLEAR_TLS) != 0)\n@@ -1452,1 +1452,1 @@\n-         * Callback from InnocuousForkJoinWorkerThread.onStart\n+         * Called in constructors if ThreadLocals not preserved\n@@ -1454,2 +1454,2 @@\n-        final void setInnocuous() {\n-            config |= INNOCUOUS;\n+        final void setClearThreadLocals() {\n+            config |= CLEAR_TLS;\n@@ -2927,3 +2927,4 @@\n-     * @throws IllegalStateException if this is the{@link #commonPool()} and\n-     *         parallelism level was set by System property\n-     *         {@systemProperty java.util.concurrent.ForkJoinPool.common.parallelism}.\n+     * @throws UnsupportedOperationException this is the{@link\n+     *         #commonPool()} and parallelism level was set by System\n+     *         property {@systemProperty\n+     *         java.util.concurrent.ForkJoinPool.common.parallelism}.\n@@ -2940,1 +2941,1 @@\n-            throw new IllegalStateException(\"Cannot override System property\");\n+            throw new UnsupportedOperationException(\"Cannot override System property\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1050,2 +1050,2 @@\n-     * (possibly exceptionally) before the given timeout and\/or the\n-     * the current thread has been interrupted, else false.\n+     * (possibly exceptionally) before the given timeout and the\n+     * the current thread has not been interrupted.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinTask.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,2 +75,3 @@\n-                         boolean useSystemClassLoader, boolean isInnocuous) {\n-        super(group, null, pool.nextWorkerThreadName(), 0L, !isInnocuous);\n+                         boolean useSystemClassLoader,\n+                         boolean clearThreadLocals) {\n+        super(group, null, pool.nextWorkerThreadName(), 0L, !clearThreadLocals);\n@@ -79,0 +80,2 @@\n+        if (clearThreadLocals)\n+            workQueue.setClearThreadLocals();\n@@ -90,1 +93,4 @@\n-     * @param group if non-null, the thread group for this thread\n+     * @param group if non-null, the thread group for this\n+     * thread. Otherwise, the thread group is chosen by the security\n+     * manager if present, else set to the current thread's thread\n+     * group.\n@@ -190,1 +196,1 @@\n-     * thread context class loader, and erases all ThreadLocals after\n+     * thread context class loader, and clears all ThreadLocals after\n@@ -204,3 +210,0 @@\n-            ForkJoinPool.WorkQueue w = workQueue;\n-            if (w != null)\n-                w.setInnocuous();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinWorkerThread.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}