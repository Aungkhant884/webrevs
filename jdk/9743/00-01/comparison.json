{"files":[{"patch":"@@ -41,2 +41,0 @@\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -48,1 +46,0 @@\n-    private static JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Util.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8202788\n+ * @bug 8202788 8291897\n@@ -38,2 +38,2 @@\n- * @compile --enable-preview -source ${jdk.version} TestTerminatingThreadLocal.java\n- * @run main\/othervm --enable-preview -Djdk.virtualThreadScheduler.parallelism=1 -Djdk.virtualThreadScheduler.maxPoolSize=2 TestTerminatingThreadLocal\n+ * @enablePreview\n+ * @run main\/othervm -Djdk.virtualThreadScheduler.parallelism=1 -Djdk.virtualThreadScheduler.maxPoolSize=2 TestTerminatingThreadLocal\n@@ -148,1 +148,4 @@\n-        System.out.println(\"terminatedValues after VirtualThread.join(): \" + terminatedValues);\n+        if (!terminatedValues.isEmpty()) {\n+            throw new AssertionError(\"Unexpected terminated values after virtual thread.join(): \" +\n+                                     terminatedValues);\n+        }\n","filename":"test\/jdk\/jdk\/internal\/misc\/TerminatingThreadLocal\/TestTerminatingThreadLocal.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}