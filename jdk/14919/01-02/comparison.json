{"files":[{"patch":"@@ -92,3 +92,5 @@\n-  product(bool, PreventTHPsForThreadStacks, true, EXPERIMENTAL,         \\\n-          \"If true, the JVM will attempt to prevent formation of \"      \\\n-          \"transparent huge pages in thread stacks.\")                   \\\n+  product(bool, DisableTHPStackMitigation, false, DIAGNOSTIC,           \\\n+          \"If THPs are unconditionally enabled on the system (mode \"    \\\n+          \"\\\"always\\\"), the JVM will prevent THP from forming in \"      \\\n+          \"thread stacks. This switch disables that mitigation and \"    \\\n+          \"allows THPs to form in thread stacks.\")                      \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -919,1 +919,1 @@\n-  if (PreventTHPsForThreadStacks) {\n+  if (!DisableTHPStackMitigation) {\n@@ -921,1 +921,1 @@\n-    \/\/ coalescation (see comment in os::Linux::default_guard_size()), we also make\n+    \/\/ coalescing (see comment in os::Linux::default_guard_size()), we also make\n@@ -3089,1 +3089,1 @@\n-  if (PreventTHPsForThreadStacks) {\n+  if (!DisableTHPStackMitigation) {\n@@ -3104,2 +3104,2 @@\n-    \/\/ cost for that one extra protected page is dwarfed a large win in performance and memory that\n-    \/\/ avoiding interference by khugepaged buys us.\n+    \/\/ cost for that one extra protected page is dwarfed from a large win in performance and memory\n+    \/\/ that avoiding interference by khugepaged buys us.\n@@ -3776,1 +3776,1 @@\n-  \/\/ -XX:-PreventTHPsForThreadStacks.\n+  \/\/ -XX:+DisableTHPStackMitigation.\n@@ -3778,3 +3778,1 @@\n-    if (PreventTHPsForThreadStacks) {\n-      log_info(pagesize)(\"JVM will attempt to prevent THPs in thread stacks.\");\n-    } else if (!FLAG_IS_DEFAULT(PreventTHPsForThreadStacks)) {\n+    if (DisableTHPStackMitigation) {\n@@ -3782,0 +3780,2 @@\n+    } else {\n+      log_info(pagesize)(\"JVM will attempt to prevent THPs in thread stacks.\");\n@@ -3784,1 +3784,1 @@\n-    FLAG_SET_ERGO(PreventTHPsForThreadStacks, false); \/\/ not needed\n+    FLAG_SET_ERGO(DisableTHPStackMitigation, true); \/\/ Mitigation not needed\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- * Note: only run manually, since this test is very costly (>2 GB)! Remove this line to run test.\n@@ -49,1 +48,1 @@\n- * @run driver THPsInThreadStackPreventionTest  PATCH-DISABLED\n+ * @run main\/manual THPsInThreadStackPreventionTest  PATCH-DISABLED\n@@ -211,2 +210,2 @@\n-                finalargs.add(\"-XX:+UnlockExperimentalVMOptions\");\n-                finalargs.add(\"-XX:-PreventTHPsForThreadStacks\");\n+                finalargs.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+                finalargs.add(\"-XX:+DisableTHPStackMitigation\");\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/THPsInThreadStackPreventionTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}