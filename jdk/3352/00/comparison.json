{"files":[{"patch":"@@ -82,1 +82,1 @@\n-  \/\/ some collectors need to to different things depending on whether the nmethods\n+  \/\/ some collectors need to do different things depending on whether the nmethods\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,4 +74,0 @@\n-\n-  void do_code_blob_weak(CodeBlob* cb);\n-  void do_code_blob_strong(CodeBlob* cb);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -144,1 +144,0 @@\n-  ~G1ParCopyHelper() { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,3 +36,1 @@\n-  virtual ~G1RootClosures() {}\n-\n-\/\/ Closures to process raw oops in the root set.\n+  \/\/ Closures to process raw oops in the root set.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,8 +152,2 @@\n-  \/\/ We need to make make sure that the \"strong\" nmethods are processed first\n-  \/\/ using the strong closure. Only after that we process the weakly reachable\n-  \/\/ nmethods.\n-  \/\/ We need to strictly separate the strong and weak nmethod processing because\n-  \/\/ any processing claims that nmethod, i.e. will not be iterated again.\n-  \/\/ Which means if an nmethod is processed first and claimed, the strong processing\n-  \/\/ will not happen, and the oops reachable by that nmethod will not be marked\n-  \/\/ properly.\n+  \/\/ In the concurrent start pause, when class unloading is enabled, G1\n+  \/\/ processes nmethods in two ways, as \"strong\" and \"weak\" nmethods.\n@@ -161,5 +155,9 @@\n-  \/\/ That is why we process strong nmethods first, synchronize all threads via a\n-  \/\/ barrier, and only then allow weak processing. To minimize the wait time at\n-  \/\/ that barrier we do the strong nmethod processing first, and immediately after-\n-  \/\/ wards indicate that that thread is done. Hopefully other root processing after\n-  \/\/ nmethod processing is enough so there is no need to wait.\n+  \/\/ 1) Strong nmethods are reachable from the thread stack frames. G1 applies\n+  \/\/ the G1RootClosures::strong_codeblobs() closure on them. The closure\n+  \/\/ iterates over all oops embedded inside each nmethod, and performs 3\n+  \/\/ operations:\n+  \/\/   a) evacuates; relocate objects outside of collection set\n+  \/\/   b) fixes up; remap oops to reflect new addresses\n+  \/\/   c) mark; mark object alive\n+  \/\/ This keeps these oops alive wrt. to the upcoming marking phase, and their\n+  \/\/ classes will not be unloaded.\n@@ -167,1 +165,16 @@\n-  \/\/ This is only required in the concurrent start pause with class unloading enabled.\n+  \/\/ 2) Weak nmethods are reachable only from the code root remembered set (see\n+  \/\/ G1CodeRootSet). G1 applies the G1RootClosures::weak_codeblobs() closure on\n+  \/\/ them. The closure iterates over all oops embedded inside each nmethod, and\n+  \/\/ performs 2 operations: a) and b).\n+  \/\/ Since these oops are *not* marked, their classes can potentially be\n+  \/\/ unloaded.\n+  \/\/\n+  \/\/ G1 doesn't segregate strong\/weak nmethods processing (finish processing\n+  \/\/ all strong nmethods before starting with any weak nmethods, or vice\n+  \/\/ versa), as that could lead to poor CPU utilization (a single slow thread\n+  \/\/ prevents all other thread from crossing the synchronization barrier).\n+  \/\/ Instead, G1 interleaves strong and weak nmethods processing via\n+  \/\/ per-nmethod synchronization. A nmethod is either *strongly* or *weakly*\n+  \/\/ claimed before processing. A weakly claimed nmethod could be strongly\n+  \/\/ claimed again for performing marking (the c) operation above); see\n+  \/\/ oops_do_process_weak and oops_do_process_strong in nmethod.hpp\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"}]}