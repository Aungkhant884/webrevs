{"files":[{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4848555\n+  @summary Popping an event queue could cause its thread to restart inadvertently\n+  @run main StoppingEdtOnPushPopTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.ActiveEvent;\n+import java.awt.EventQueue;\n+import java.awt.Toolkit;\n+\n+public class StoppingEdtOnPushPopTest implements Runnable {\n+    public void start() {\n+        int before = countEventQueues();\n+        try {\n+            for (int i = 0; i < 10; i++) {\n+                EventQueue.invokeAndWait(this);\n+            }\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Test was interrupted\");\n+        } catch (java.lang.reflect.InvocationTargetException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"InvocationTargetException occurred\");\n+        }\n+        pause(1000);\n+        int after = countEventQueues();\n+        if (before < after && after > 1) {\n+            throw new RuntimeException(\"Test failed (before=\" + before\n+                    + \"; after=\" + after + \")\");\n+        }\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    public void run() {\n+        System.out.println(\"push\/pop\");\n+        MyEventQueue queue = new MyEventQueue();\n+        Toolkit.getDefaultToolkit().getSystemEventQueue().push(queue);\n+        Toolkit.getDefaultToolkit().getSystemEventQueue()\n+                .postEvent(new EmptyEvent());\n+        queue.pop();\n+    }\n+\n+    public int countEventQueues() {\n+        int count = 0;\n+        System.out.println(\"All threads currently running in the system\");\n+        Thread threads[] = new Thread[Thread.activeCount()];\n+        Thread.enumerate(threads);\n+        for (int i = 0; i < threads.length; ++i) {\n+            Thread thread = threads[i];\n+            if (thread != null) {\n+                System.out.println(thread.getName());\n+                if (thread.getName().startsWith(\"AWT-EventQueue\")) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n+    public void pause(long aMillis) {\n+        try {\n+            Thread.sleep(aMillis);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        StoppingEdtOnPushPopTest test = new StoppingEdtOnPushPopTest();\n+        test.start();\n+    }\n+}\n+\n+class MyEventQueue extends EventQueue {\n+    public MyEventQueue() {\n+        super();\n+    }\n+\n+    public void pop() {\n+        super.pop();\n+    }\n+}\n+\n+class EmptyEvent extends AWTEvent implements ActiveEvent {\n+    public EmptyEvent() {\n+        super(new Object(), 0);\n+    }\n+\n+    public void dispatch() {\n+        System.out.println(\"one more EmptyEvent\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/EventDispatchThread\/StoppingEdtOnPushPopTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6308332\n+  @summary FileDialog.setDirectory() throws exception on Linux & Solaris\n+  @key headful\n+  @run main ExceptionAfterSetDirectory\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.EventQueue;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ExceptionAfterSetDirectory {\n+    FileDialog fd = null;\n+    Frame frame;\n+\n+    public void start() throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"ExceptionAfterSetDirectory\");\n+            frame.setLayout(new FlowLayout());\n+            frame.setBounds(100, 100, 100, 100);\n+            frame.setVisible(true);\n+            fd = new FileDialog(frame, \"file dialog\", FileDialog.LOAD);\n+        });\n+\n+        try {\n+            test();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed.\", e);\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(frame::dispose);\n+            }\n+            if (fd != null) {\n+                EventQueue.invokeAndWait(fd::dispose);;\n+            }\n+        }\n+    }\n+\n+    private void test() throws InterruptedException, InvocationTargetException {\n+        final Robot r;\n+\n+        try {\n+            r = new Robot();\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Can not initialize Robot.\", e);\n+        }\n+\n+        r.setAutoDelay(200);\n+        r.delay(500);\n+\n+        EventQueue.invokeLater(() -> {\n+            fd.setVisible(true);\n+        });\n+        r.delay(2000);\n+        r.waitForIdle();\n+\n+        if (System.getProperty(\"os.name\").contains(\"OS X\")) {\n+            \/\/ Workaround for JDK-7186009 - try to close file dialog pressing escape\n+            r.keyPress(KeyEvent.VK_ESCAPE);\n+            r.keyRelease(KeyEvent.VK_ESCAPE);\n+            r.delay(2000);\n+            r.waitForIdle();\n+        }\n+\n+        if (fd.isVisible()) {\n+            EventQueue.invokeAndWait(() -> {\n+                fd.setVisible(false);\n+            });\n+            r.delay(2000);\n+            r.waitForIdle();\n+        }\n+\n+        \/\/ Changing directory on hidden file dialog should not cause an exception\n+        EventQueue.invokeAndWait(() -> {\n+            fd.setDirectory(\"\/\");\n+        });\n+        r.delay(2000);\n+        r.waitForIdle();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        ExceptionAfterSetDirectory test = new ExceptionAfterSetDirectory();\n+        test.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FileDialog\/ExceptionAfterSetDirectory.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6257219\n+  @summary FlowLayout gives a wrong minimum size if the first component is hidden.\n+  @key headful\n+  @run main MinimumLayoutSize\n+*\/\n+\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.LayoutManager;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class MinimumLayoutSize {\n+    Frame frame;\n+    Button b1;\n+    Button b2;\n+    Panel panel;\n+\n+    public void start() throws AWTException,\n+            InterruptedException, InvocationTargetException {\n+        try {\n+            Robot robot = new Robot();\n+            LayoutManager layout = new FlowLayout(FlowLayout.LEFT, 100, 0);\n+            final int[] widths = new int[2];\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"MinimumLayoutSize\");\n+                b1 = new Button(\"B1\");\n+                b2 = new Button(\"B2\");\n+                panel = new Panel();\n+                panel.add(b2);\n+                frame.add(panel);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            \/\/add hidden component b1\n+            EventQueue.invokeAndWait(() -> {\n+                widths[0] = layout.minimumLayoutSize(panel).width;\n+                b1.setVisible(false);\n+                panel.add(b1, 0);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                widths[1] = layout.minimumLayoutSize(panel).width;\n+                frame.setVisible(false);\n+            });\n+            System.out.println(\"TRACE: w1 = \" + widths[0] + \" w2 = \" + widths[1]);\n+\n+            if (widths[0] != widths[1]) {\n+                throw new RuntimeException(\"Test FAILED. Minimum sizes are not equal.\"\n+                        + \" w1 = \" + widths[0] + \" w2 = \" + widths[1]);\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        MinimumLayoutSize test = new MinimumLayoutSize();\n+        test.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FlowLayout\/MinimumLayoutSize.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4284124\n+  @summary FlowLayout gives a wrong size if the first component is hidden.\n+  @key headful\n+  @run main PreferredLayoutSize\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PreferredLayoutSize {\n+    public void start() {\n+        Frame f = new Frame(\"PreferredLayoutSize\");\n+        int[] widths = new int[2];\n+\n+        try {\n+            f.setLocationRelativeTo(null);\n+            Button b1 = new Button(\"button 1\");\n+            Button b2 = new Button(\"button 2\");\n+            f.setLayout(new FlowLayout(FlowLayout.LEFT, 50, 5));\n+            f.add(b1);\n+            f.add(b2);\n+            f.pack();\n+            f.setVisible(true);\n+            b1.setVisible(false);\n+            b2.setVisible(true);\n+            Dimension d1 = f.getPreferredSize();\n+            Dimension d2 = b2.getPreferredSize();\n+            widths[0] = d1.width - d2.width;\n+            b1.setVisible(true);\n+            b2.setVisible(false);\n+            d1 = f.getPreferredSize();\n+            d2 = b1.getPreferredSize();\n+            widths[1] = d1.width - d2.width;\n+            f.setVisible(false);\n+        } finally {\n+            f.dispose();\n+        }\n+\n+        if (widths[0] != widths[1]) {\n+            throw new RuntimeException(\"Test FAILED\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PreferredLayoutSize test = new PreferredLayoutSize();\n+        EventQueue.invokeAndWait(test::start);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FlowLayout\/PreferredLayoutSize.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}