{"files":[{"patch":"@@ -25,1 +25,3 @@\n-\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Robot;\n@@ -27,1 +29,1 @@\n-import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Predicate;\n@@ -29,1 +31,1 @@\n-import javax.swing.JFrame;\n+import javax.swing.JComboBox;\n@@ -31,0 +33,1 @@\n+import javax.swing.JFrame;\n@@ -32,0 +35,2 @@\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -33,1 +38,0 @@\n-\n@@ -35,0 +39,1 @@\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n@@ -40,3 +45,0 @@\n- * @requires (os.family == \"windows\" | os.family == \"linux\")\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n@@ -44,1 +46,1 @@\n- * @run main\/manual FileViewNPETest\n+ * @run main FileViewNPETest\n@@ -47,1 +49,5 @@\n-    static PassFailJFrame passFailJFrame;\n+\n+    private static JFrame frame;\n+    private static JFileChooser jfc;\n+    private static File path;\n+\n@@ -49,6 +55,11 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                try {\n-                    initialize();\n-                } catch (InterruptedException | InvocationTargetException e) {\n-                    throw new RuntimeException(e);\n+        final Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(FileViewNPETest::initialize);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                jfc.setCurrentDirectory(path.getParentFile());\n+                if (null != jfc.getCurrentDirectory()) {\n+                    \/\/ The current directory to become null because\n+                    \/\/ the parent directory is not traversable\n+                    throw new RuntimeException(\"Current directory is not null\");\n@@ -56,3 +67,18 @@\n-            }\n-        });\n-        passFailJFrame.awaitAndCheck();\n+            });\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                JComboBox<?> dirs = findDirectoryComboBox(jfc);\n+                \/\/ No NPE is expected\n+                dirs.setSelectedIndex(dirs.getSelectedIndex());\n+                if (!jfc.getCurrentDirectory().equals(path)) {\n+                    throw new RuntimeException(\"The current directory is not restored\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n@@ -61,22 +87,6 @@\n-    static void initialize() throws InterruptedException, InvocationTargetException {\n-        JFrame frame;\n-        JFileChooser jfc;\n-\n-        \/\/Initialize the components\n-        final String INSTRUCTIONS = \"\"\"\n-                Instructions to Test:\n-                1. The traversable folder is set to the Documents folder,\n-                 if it exists, in the user's home folder, otherwise\n-                 it's the user's home. Other folders are non-traversable.\n-                2. When the file chooser appears on the screen, select any\n-                 non-traversable folder from \"Look-In\" combo box,\n-                 for example the user's folder or a folder above it.\n-                 (The folder will not be opened since it's non-traversable).\n-                3. Select the Documents folder again.\n-                4. If NullPointerException does not occur in the step 3,\n-                 click Pass, otherwise the test fails automatically.\n-                \"\"\";\n-        frame = new JFrame(\"JFileChooser File View NPE test\");\n-        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS,\n-                5L, 13, 40);\n-        jfc = new JFileChooser();\n+    private static void initialize() {\n+        try {\n+            UIManager.setLookAndFeel(new MetalLookAndFeel());\n+        } catch (UnsupportedLookAndFeelException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -86,1 +96,1 @@\n-        String path = (new File(docs).exists()) ? docs : userHome;\n+        path = new File((new File(docs).exists()) ? docs : userHome);\n@@ -88,2 +98,3 @@\n-        jfc.setCurrentDirectory(new File(path));\n-        jfc.setFileView(new CustomFileView(path));\n+        jfc = new JFileChooser();\n+        jfc.setCurrentDirectory(path);\n+        jfc.setFileView(new CustomFileView(path.getPath()));\n@@ -92,2 +103,1 @@\n-        PassFailJFrame.addTestWindow(frame);\n-        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame = new JFrame(\"JFileChooser FileView NPE test\");\n@@ -95,1 +105,0 @@\n-\n@@ -98,0 +107,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -100,0 +110,22 @@\n+\n+    private static JComboBox<?> findDirectoryComboBox(final Container container) {\n+        Component result = findComponent(container,\n+                                         c -> c instanceof JComboBox<?>);\n+        return (JComboBox<?>) result;\n+    }\n+\n+    private static Component findComponent(final Container container,\n+                                           final Predicate<Component> predicate) {\n+        for (Component child : container.getComponents()) {\n+            if (predicate.test(child)) {\n+                return child;\n+            }\n+            if (child instanceof Container cont && cont.getComponentCount() > 0) {\n+                Component result = findComponent(cont, predicate);\n+                if (result != null) {\n+                    return result;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n@@ -109,0 +141,1 @@\n+    @Override\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileViewNPETest.java","additions":79,"deletions":46,"binary":false,"changes":125,"status":"modified"}]}