{"files":[{"patch":"@@ -33,0 +33,2 @@\n+#include \"utilities\/align.hpp\"\n+#include \"utilities\/debug.hpp\"\n@@ -35,0 +37,7 @@\n+\/\/ Pre-defined default chunk sizes must be arena-aligned, see Chunk::operator new()\n+STATIC_ASSERT(is_aligned((int)Chunk::tiny_size, ARENA_AMALLOC_ALIGNMENT));\n+STATIC_ASSERT(is_aligned((int)Chunk::init_size, ARENA_AMALLOC_ALIGNMENT));\n+STATIC_ASSERT(is_aligned((int)Chunk::medium_size, ARENA_AMALLOC_ALIGNMENT));\n+STATIC_ASSERT(is_aligned((int)Chunk::size, ARENA_AMALLOC_ALIGNMENT));\n+STATIC_ASSERT(is_aligned((int)Chunk::non_pool_size, ARENA_AMALLOC_ALIGNMENT));\n+\n@@ -195,2 +204,2 @@\n-  assert(is_aligned(length, BytesPerLong), \"chunk payload length not 64-bit aligned: \"\n-                                           SIZE_FORMAT \".\", length);\n+  assert(is_aligned(length, ARENA_AMALLOC_ALIGNMENT), \"chunk payload length misaligned: \"\n+         SIZE_FORMAT \".\", length);\n@@ -208,1 +217,2 @@\n-     assert(is_aligned(p, BytesPerLong), \"Chunk start address not malloc aligned?\");\n+     \/\/ We rely on arena alignment <= malloc alignment.\n+     assert(is_aligned(p, ARENA_AMALLOC_ALIGNMENT), \"Chunk start address misaligned.\");\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,0 +3,2 @@\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ *\n@@ -26,0 +28,2 @@\n+#include \"utilities\/align.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -39,1 +43,1 @@\n-  ASSERT_TRUE(is_aligned(p2, BytesPerLong));\n+  ASSERT_TRUE(is_aligned(p2, ARENA_AMALLOC_ALIGNMENT));\n@@ -49,1 +53,1 @@\n-  ASSERT_TRUE(is_aligned(p2, BytesPerLong));\n+  ASSERT_TRUE(is_aligned(p2, ARENA_AMALLOC_ALIGNMENT));\n@@ -60,1 +64,1 @@\n-  ASSERT_TRUE(is_aligned(p, BytesPerLong));\n+  \/\/ some more allocations for good measure\n","filename":"test\/hotspot\/gtest\/memory\/test_arena.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}