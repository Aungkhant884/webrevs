{"files":[{"patch":"@@ -463,0 +463,1 @@\n+    \/\/ Governing predicates for load\/store and arithmetic\n@@ -470,1 +471,0 @@\n-    P7,\n@@ -472,0 +472,1 @@\n+    \/\/ Extra predicates\n@@ -480,0 +481,3 @@\n+\n+    \/\/ Preserved for all-true predicate\n+    P7,\n@@ -5541,0 +5545,1 @@\n+  match(pReg);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4662,1 +4662,1 @@\n-instruct vloadmaskB_sve(pRegGov dst, vReg src, rFlagsReg cr) %{\n+instruct vloadmaskB_sve(pReg dst, vReg src, rFlagsReg cr) %{\n@@ -4674,1 +4674,1 @@\n-instruct vloadmask_extend_sve(pRegGov dst, vReg src, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_extend_sve(pReg dst, vReg src, vReg tmp, rFlagsReg cr) %{\n@@ -4688,1 +4688,1 @@\n-instruct vloadmaskB_masked(pRegGov dst, vReg src, pRegGov pg, rFlagsReg cr) %{\n+instruct vloadmaskB_masked(pReg dst, vReg src, pRegGov pg, rFlagsReg cr) %{\n@@ -4700,1 +4700,1 @@\n-instruct vloadmask_extend_masked(pRegGov dst, vReg src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_extend_masked(pReg dst, vReg src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -4754,1 +4754,1 @@\n-instruct vstoremaskB_sve(vReg dst, pRegGov src, immI_1 size) %{\n+instruct vstoremaskB_sve(vReg dst, pReg src, immI_1 size) %{\n@@ -4764,1 +4764,1 @@\n-instruct vstoremask_narrow_sve(vReg dst, pRegGov src, immI_gt_1 size, vReg tmp) %{\n+instruct vstoremask_narrow_sve(vReg dst, pReg src, immI_gt_1 size, vReg tmp) %{\n@@ -4781,1 +4781,1 @@\n-instruct vloadmask_loadV(pRegGov dst, indirect mem, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_loadV(pReg dst, indirect mem, vReg tmp, rFlagsReg cr) %{\n@@ -4803,1 +4803,1 @@\n-instruct vloadmask_loadV_masked(pRegGov dst, indirect mem, pRegGov pg,\n+instruct vloadmask_loadV_masked(pReg dst, indirect mem, pRegGov pg,\n@@ -4824,1 +4824,1 @@\n-instruct vloadmask_loadVMasked(pRegGov dst, vmemA mem, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_loadVMasked(pReg dst, vmemA mem, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -4851,1 +4851,1 @@\n-instruct vloadmask_loadVMasked_masked(pRegGov dst, vmemA mem, pRegGov pg1, pRegGov pg2,\n+instruct vloadmask_loadVMasked_masked(pReg dst, vmemA mem, pRegGov pg1, pRegGov pg2,\n@@ -4881,1 +4881,1 @@\n-instruct storeV_vstoremask(indirect mem, pRegGov src, immI_gt_1 esize, vReg tmp) %{\n+instruct storeV_vstoremask(indirect mem, pReg src, immI_gt_1 esize, vReg tmp) %{\n@@ -4902,1 +4902,1 @@\n-instruct storeV_vstoremask_masked(indirect mem, pRegGov src, immI_gt_1 esize,\n+instruct storeV_vstoremask_masked(indirect mem, pReg src, immI_gt_1 esize,\n@@ -4924,1 +4924,1 @@\n-instruct storeVMasked_vstoremask(vmemA mem, pRegGov src, pRegGov pg, immI_gt_1 esize, vReg tmp) %{\n+instruct storeVMasked_vstoremask(vmemA mem, pReg src, pRegGov pg, immI_gt_1 esize, vReg tmp) %{\n@@ -4950,1 +4950,1 @@\n-instruct storeVMasked_vstoremask_masked(vmemA mem, pRegGov src, pRegGov pg, immI_gt_1 esize,\n+instruct storeVMasked_vstoremask_masked(vmemA mem, pReg src, pRegGov pg, immI_gt_1 esize,\n@@ -4980,1 +4980,1 @@\n-instruct vmask_and(pRegGov pd, pRegGov pn, pRegGov pm) %{\n+instruct vmask_and(pReg pd, pReg pn, pReg pm) %{\n@@ -4990,1 +4990,1 @@\n-instruct vmask_or(pRegGov pd, pRegGov pn, pRegGov pm) %{\n+instruct vmask_or(pReg pd, pReg pn, pReg pm) %{\n@@ -5000,1 +5000,1 @@\n-instruct vmask_xor(pRegGov pd, pRegGov pn, pRegGov pm) %{\n+instruct vmask_xor(pReg pd, pReg pn, pReg pm) %{\n@@ -5010,1 +5010,1 @@\n-instruct vmask_and_notI(pRegGov pd, pRegGov pn, pRegGov pm, immI_M1 m1) %{\n+instruct vmask_and_notI(pReg pd, pReg pn, pReg pm, immI_M1 m1) %{\n@@ -5020,1 +5020,1 @@\n-instruct vmask_and_notL(pRegGov pd, pRegGov pn, pRegGov pm, immL_M1 m1) %{\n+instruct vmask_and_notL(pReg pd, pReg pn, pReg pm, immL_M1 m1) %{\n@@ -5048,1 +5048,1 @@\n-instruct vmaskcmp_sve(pRegGov dst, vReg src1, vReg src2, immI cond, rFlagsReg cr) %{\n+instruct vmaskcmp_sve(pReg dst, vReg src1, vReg src2, immI cond, rFlagsReg cr) %{\n@@ -5063,1 +5063,1 @@\n-instruct vmaskcmp_masked(pRegGov dst, vReg src1, vReg src2, immI cond,\n+instruct vmaskcmp_masked(pReg dst, vReg src1, vReg src2, immI cond,\n@@ -5090,1 +5090,1 @@\n-instruct vmaskcast_same_esize_sve(pRegGov dst_src) %{\n+instruct vmaskcast_same_esize_sve(pReg dst_src) %{\n@@ -5100,1 +5100,1 @@\n-instruct vmaskcast_extend(pRegGov dst, pReg src) %{\n+instruct vmaskcast_extend(pReg dst, pReg src) %{\n@@ -5117,1 +5117,1 @@\n-instruct vmaskcast_narrow(pRegGov dst, pReg src) %{\n+instruct vmaskcast_narrow(pReg dst, pReg src) %{\n@@ -5136,1 +5136,1 @@\n-instruct vmask_reinterpret_same_esize(pRegGov dst_src) %{\n+instruct vmask_reinterpret_same_esize(pReg dst_src) %{\n@@ -5147,1 +5147,1 @@\n-instruct vmask_reinterpret_diff_esize(pRegGov dst, pRegGov src, vReg tmp, rFlagsReg cr) %{\n+instruct vmask_reinterpret_diff_esize(pReg dst, pReg src, vReg tmp, rFlagsReg cr) %{\n@@ -5293,1 +5293,1 @@\n-instruct vmask_firsttrue_masked(iRegINoSp dst, pReg src, pRegGov pg, pReg ptmp) %{\n+instruct vmask_firsttrue_masked(iRegINoSp dst, pReg src, pReg pg, pReg ptmp) %{\n@@ -5405,1 +5405,1 @@\n-instruct vmask_fromlong(pRegGov dst, iRegL src, vReg tmp1, vReg tmp2) %{\n+instruct vmask_fromlong(pReg dst, iRegL src, vReg tmp1, vReg tmp2) %{\n@@ -5422,1 +5422,1 @@\n-instruct vmaskAll_immI(pRegGov dst, immI src, rFlagsReg cr) %{\n+instruct vmaskAll_immI(pReg dst, immI src, rFlagsReg cr) %{\n@@ -5440,1 +5440,1 @@\n-instruct vmaskAllI(pRegGov dst, iRegIorL2I src, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAllI(pReg dst, iRegIorL2I src, vReg tmp, rFlagsReg cr) %{\n@@ -5456,1 +5456,1 @@\n-instruct vmaskAllI_masked(pRegGov dst, iRegIorL2I src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAllI_masked(pReg dst, iRegIorL2I src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -5471,1 +5471,1 @@\n-instruct vmaskAll_immL(pRegGov dst, immL src, rFlagsReg cr) %{\n+instruct vmaskAll_immL(pReg dst, immL src, rFlagsReg cr) %{\n@@ -5489,1 +5489,1 @@\n-instruct vmaskAllL(pRegGov dst, iRegL src, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAllL(pReg dst, iRegL src, vReg tmp, rFlagsReg cr) %{\n@@ -5505,1 +5505,1 @@\n-instruct vmaskAllL_masked(pRegGov dst, iRegL src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAllL_masked(pReg dst, iRegL src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -5522,1 +5522,1 @@\n-instruct vmask_gen_I(pRegGov pd, iRegIorL2I src, rFlagsReg cr) %{\n+instruct vmask_gen_I(pReg pd, iRegIorL2I src, rFlagsReg cr) %{\n@@ -5534,1 +5534,1 @@\n-instruct vmask_gen_L(pRegGov pd, iRegL src, rFlagsReg cr) %{\n+instruct vmask_gen_L(pReg pd, iRegL src, rFlagsReg cr) %{\n@@ -5546,1 +5546,1 @@\n-instruct vmask_gen_imm(pRegGov pd, immL con, rFlagsReg cr) %{\n+instruct vmask_gen_imm(pReg pd, immL con, rFlagsReg cr) %{\n@@ -5840,1 +5840,1 @@\n-instruct vtest_anytrue_sve(iRegINoSp dst, pRegGov src1, pRegGov src2, rFlagsReg cr) %{\n+instruct vtest_anytrue_sve(iRegINoSp dst, pReg src1, pReg src2, rFlagsReg cr) %{\n@@ -5874,1 +5874,1 @@\n-instruct vtest_alltrue_sve(iRegINoSp dst, pRegGov src1, pRegGov src2, pReg ptmp, rFlagsReg cr) %{\n+instruct vtest_alltrue_sve(iRegINoSp dst, pReg src1, pReg src2, pReg ptmp, rFlagsReg cr) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -3096,1 +3096,1 @@\n-instruct vloadmaskB_sve(pRegGov dst, vReg src, rFlagsReg cr) %{\n+instruct vloadmaskB_sve(pReg dst, vReg src, rFlagsReg cr) %{\n@@ -3108,1 +3108,1 @@\n-instruct vloadmask_extend_sve(pRegGov dst, vReg src, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_extend_sve(pReg dst, vReg src, vReg tmp, rFlagsReg cr) %{\n@@ -3122,1 +3122,1 @@\n-instruct vloadmaskB_masked(pRegGov dst, vReg src, pRegGov pg, rFlagsReg cr) %{\n+instruct vloadmaskB_masked(pReg dst, vReg src, pRegGov pg, rFlagsReg cr) %{\n@@ -3134,1 +3134,1 @@\n-instruct vloadmask_extend_masked(pRegGov dst, vReg src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_extend_masked(pReg dst, vReg src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -3188,1 +3188,1 @@\n-instruct vstoremaskB_sve(vReg dst, pRegGov src, immI_1 size) %{\n+instruct vstoremaskB_sve(vReg dst, pReg src, immI_1 size) %{\n@@ -3198,1 +3198,1 @@\n-instruct vstoremask_narrow_sve(vReg dst, pRegGov src, immI_gt_1 size, vReg tmp) %{\n+instruct vstoremask_narrow_sve(vReg dst, pReg src, immI_gt_1 size, vReg tmp) %{\n@@ -3215,1 +3215,1 @@\n-instruct vloadmask_loadV(pRegGov dst, indirect mem, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_loadV(pReg dst, indirect mem, vReg tmp, rFlagsReg cr) %{\n@@ -3237,1 +3237,1 @@\n-instruct vloadmask_loadV_masked(pRegGov dst, indirect mem, pRegGov pg,\n+instruct vloadmask_loadV_masked(pReg dst, indirect mem, pRegGov pg,\n@@ -3258,1 +3258,1 @@\n-instruct vloadmask_loadVMasked(pRegGov dst, vmemA mem, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vloadmask_loadVMasked(pReg dst, vmemA mem, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -3285,1 +3285,1 @@\n-instruct vloadmask_loadVMasked_masked(pRegGov dst, vmemA mem, pRegGov pg1, pRegGov pg2,\n+instruct vloadmask_loadVMasked_masked(pReg dst, vmemA mem, pRegGov pg1, pRegGov pg2,\n@@ -3315,1 +3315,1 @@\n-instruct storeV_vstoremask(indirect mem, pRegGov src, immI_gt_1 esize, vReg tmp) %{\n+instruct storeV_vstoremask(indirect mem, pReg src, immI_gt_1 esize, vReg tmp) %{\n@@ -3336,1 +3336,1 @@\n-instruct storeV_vstoremask_masked(indirect mem, pRegGov src, immI_gt_1 esize,\n+instruct storeV_vstoremask_masked(indirect mem, pReg src, immI_gt_1 esize,\n@@ -3358,1 +3358,1 @@\n-instruct storeVMasked_vstoremask(vmemA mem, pRegGov src, pRegGov pg, immI_gt_1 esize, vReg tmp) %{\n+instruct storeVMasked_vstoremask(vmemA mem, pReg src, pRegGov pg, immI_gt_1 esize, vReg tmp) %{\n@@ -3384,1 +3384,1 @@\n-instruct storeVMasked_vstoremask_masked(vmemA mem, pRegGov src, pRegGov pg, immI_gt_1 esize,\n+instruct storeVMasked_vstoremask_masked(vmemA mem, pReg src, pRegGov pg, immI_gt_1 esize,\n@@ -3416,1 +3416,1 @@\n-instruct vmask_$1(pRegGov pd, pRegGov pn, pRegGov pm) %{\n+instruct vmask_$1(pReg pd, pReg pn, pReg pm) %{\n@@ -3429,1 +3429,1 @@\n-instruct vmask_and_not$1(pRegGov pd, pRegGov pn, pRegGov pm, imm$1_M1 m1) %{\n+instruct vmask_and_not$1(pReg pd, pReg pn, pReg pm, imm$1_M1 m1) %{\n@@ -3464,1 +3464,1 @@\n-instruct vmaskcmp_sve(pRegGov dst, vReg src1, vReg src2, immI cond, rFlagsReg cr) %{\n+instruct vmaskcmp_sve(pReg dst, vReg src1, vReg src2, immI cond, rFlagsReg cr) %{\n@@ -3479,1 +3479,1 @@\n-instruct vmaskcmp_masked(pRegGov dst, vReg src1, vReg src2, immI cond,\n+instruct vmaskcmp_masked(pReg dst, vReg src1, vReg src2, immI cond,\n@@ -3506,1 +3506,1 @@\n-instruct vmaskcast_same_esize_sve(pRegGov dst_src) %{\n+instruct vmaskcast_same_esize_sve(pReg dst_src) %{\n@@ -3516,1 +3516,1 @@\n-instruct vmaskcast_extend(pRegGov dst, pReg src) %{\n+instruct vmaskcast_extend(pReg dst, pReg src) %{\n@@ -3533,1 +3533,1 @@\n-instruct vmaskcast_narrow(pRegGov dst, pReg src) %{\n+instruct vmaskcast_narrow(pReg dst, pReg src) %{\n@@ -3552,1 +3552,1 @@\n-instruct vmask_reinterpret_same_esize(pRegGov dst_src) %{\n+instruct vmask_reinterpret_same_esize(pReg dst_src) %{\n@@ -3563,1 +3563,1 @@\n-instruct vmask_reinterpret_diff_esize(pRegGov dst, pRegGov src, vReg tmp, rFlagsReg cr) %{\n+instruct vmask_reinterpret_diff_esize(pReg dst, pReg src, vReg tmp, rFlagsReg cr) %{\n@@ -3709,1 +3709,1 @@\n-instruct vmask_firsttrue_masked(iRegINoSp dst, pReg src, pRegGov pg, pReg ptmp) %{\n+instruct vmask_firsttrue_masked(iRegINoSp dst, pReg src, pReg pg, pReg ptmp) %{\n@@ -3821,1 +3821,1 @@\n-instruct vmask_fromlong(pRegGov dst, iRegL src, vReg tmp1, vReg tmp2) %{\n+instruct vmask_fromlong(pReg dst, iRegL src, vReg tmp1, vReg tmp2) %{\n@@ -3841,1 +3841,1 @@\n-instruct vmaskAll_imm$1(pRegGov dst, imm$1 src, rFlagsReg cr) %{\n+instruct vmaskAll_imm$1(pReg dst, imm$1 src, rFlagsReg cr) %{\n@@ -3862,1 +3862,1 @@\n-instruct vmaskAll$1(pRegGov dst, $2 src, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAll$1(pReg dst, $2 src, vReg tmp, rFlagsReg cr) %{\n@@ -3881,1 +3881,1 @@\n-instruct vmaskAll$1_masked(pRegGov dst, $2 src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n+instruct vmaskAll$1_masked(pReg dst, $2 src, pRegGov pg, vReg tmp, rFlagsReg cr) %{\n@@ -3905,1 +3905,1 @@\n-instruct vmask_gen_I(pRegGov pd, iRegIorL2I src, rFlagsReg cr) %{\n+instruct vmask_gen_I(pReg pd, iRegIorL2I src, rFlagsReg cr) %{\n@@ -3917,1 +3917,1 @@\n-instruct vmask_gen_L(pRegGov pd, iRegL src, rFlagsReg cr) %{\n+instruct vmask_gen_L(pReg pd, iRegL src, rFlagsReg cr) %{\n@@ -3929,1 +3929,1 @@\n-instruct vmask_gen_imm(pRegGov pd, immL con, rFlagsReg cr) %{\n+instruct vmask_gen_imm(pReg pd, immL con, rFlagsReg cr) %{\n@@ -4212,1 +4212,1 @@\n-instruct vtest_anytrue_sve(iRegINoSp dst, pRegGov src1, pRegGov src2, rFlagsReg cr) %{\n+instruct vtest_anytrue_sve(iRegINoSp dst, pReg src1, pReg src2, rFlagsReg cr) %{\n@@ -4246,1 +4246,1 @@\n-instruct vtest_alltrue_sve(iRegINoSp dst, pRegGov src1, pRegGov src2, pReg ptmp, rFlagsReg cr) %{\n+instruct vtest_alltrue_sve(iRegINoSp dst, pReg src1, pReg src2, pReg ptmp, rFlagsReg cr) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2397,1 +2397,1 @@\n-  unsigned char regs[PRegister::number_of_saved_registers];\n+  unsigned char regs[PRegister::number_of_registers];\n@@ -2399,1 +2399,1 @@\n-  for (int reg = 0; reg < PRegister::number_of_saved_registers; reg++) {\n+  for (int reg = 0; reg < PRegister::number_of_registers; reg++) {\n@@ -2434,1 +2434,1 @@\n-  unsigned char regs[PRegister::number_of_saved_registers];\n+  unsigned char regs[PRegister::number_of_registers];\n@@ -2436,1 +2436,1 @@\n-  for (int reg = 0; reg < PRegister::number_of_saved_registers; reg++) {\n+  for (int reg = 0; reg < PRegister::number_of_registers; reg++) {\n@@ -2940,1 +2940,1 @@\n-    for (int i = 0; i < PRegister::number_of_saved_registers; i++) {\n+    for (int i = 0; i < PRegister::number_of_registers; i++) {\n@@ -2949,1 +2949,1 @@\n-    for (int i = PRegister::number_of_saved_registers - 1; i >= 0; i--) {\n+    for (int i = PRegister::number_of_registers - 1; i >= 0; i--) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -299,5 +299,0 @@\n-    \/\/ p0-p7 are governing predicates for load\/store and arithmetic, but p7 is\n-    \/\/ preserved as an all-true predicate in OpenJDK. And since we don't support\n-    \/\/ non-governing predicate registers allocation for non-temp register, the\n-    \/\/ predicate registers to be saved are p0-p6.\n-    number_of_saved_registers = number_of_governing_registers - 1,\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -164,5 +164,2 @@\n-    \/\/ The number of total predicate bytes is unlikely to be a multiple\n-    \/\/ of 16 bytes so we manually align it up.\n-    return align_up(Matcher::scalable_predicate_reg_slots() *\n-                    VMRegImpl::stack_slot_size *\n-                    PRegister::number_of_saved_registers, 16);\n+    return (Matcher::scalable_vector_reg_size(T_BYTE) >> LogBitsPerByte) *\n+           PRegister::number_of_registers;\n@@ -254,8 +251,0 @@\n-  if (_save_vectors && use_sve) {\n-    for (int i = 0; i < PRegister::number_of_saved_registers; i++) {\n-      PRegister r = as_PRegister(i);\n-      int sp_offset = sve_predicate_size_in_slots * i;\n-      oop_map->set_callee_saved(VMRegImpl::stack2reg(sp_offset), r->as_VMReg());\n-    }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"}]}