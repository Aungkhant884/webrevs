[{"commit":{"message":"8294261: AArch64: Use pReg instead of pRegGov when possible\n\nCurrently we allocate SVE predicate register p0-p6 for pRegGov operand,\nwhich are used as governing predicates for load\/store and arithmetic,\nand also define pReg operand for all allocatable predicate registers.\nSince some SVE instructions are fine to use\/define p8-p15, e.g.\npredicate operations, this patch makes the matcher work for mixed use\nof pRegGov and pReg, and tries to match pReg when possible. If a\npredicate reg is defined as pReg but used as pRegGov, register\nallocator will handle that properly.\n\nWith p8-p15 being used as non-temp register, we need to save them as\nwell when saving all registers. The code of setting predicate reg slot\nin OopMap in RegisterSaver::save_live_registers() is also removed,\nbecause on safepoint, vector masks have been transformed to vector [1].\n\nTested on different SVE systems. Also tested with making RA to allocate\np8-p15 first for vReg operand, so that a p8-p15 reg has more chance to\nbe allocated, and if an SVE instruction, emitted by ad rule, does not\naccept p8-p5, assembler will crash.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/opto\/vector.cpp#L265"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"382c5f9927a933e0d48e1288783ef300af6fa6ad"}]