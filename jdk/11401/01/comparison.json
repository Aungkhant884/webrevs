{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -45,1 +46,10 @@\n-    amount_in_current_scale(reserved), scale, amount_in_current_scale(committed), scale);\n+                  amount_in_current_scale(reserved), scale,\n+                  amount_in_current_scale(committed), scale);\n+}\n+\n+void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only) const {\n+  const char* scale = current_scale();\n+  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s, readonly=\" SIZE_FORMAT \"%s\",\n+                  amount_in_current_scale(reserved), scale,\n+                  amount_in_current_scale(committed), scale,\n+                  amount_in_current_scale(read_only), scale);\n@@ -108,0 +118,7 @@\n+  size_t read_only_bytes = 0;\n+  FileMapRegion* r = FileMapInfo::current_info()->region_at(MetaspaceShared::ro);\n+  \/\/ Region will be read-write on windows, otherwise this is a sanity check\n+  if (!MetaspaceShared::use_windows_memory_mapping())\n+    assert(r->read_only(), \"Region should be read only\");\n+  read_only_bytes = r->used();\n+\n@@ -117,1 +134,1 @@\n-  print_total(total_reserved_amount, total_committed_amount);\n+  print_total(total_reserved_amount, total_committed_amount, read_only_bytes);\n@@ -135,1 +152,1 @@\n-    report_summary_of_type(flag, malloc_memory, virtual_memory);\n+    report_summary_of_type(flag, malloc_memory, virtual_memory, read_only_bytes);\n@@ -140,1 +157,1 @@\n-  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory) {\n+  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory, size_t read_only_bytes) {\n@@ -168,1 +185,1 @@\n-    print_total(reserved_amount, committed_amount);\n+    flag == mtClassShared ? print_total(reserved_amount, committed_amount, read_only_bytes) : print_total(reserved_amount, committed_amount);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+  void print_total(size_t reserved, size_t committed, size_t read_only) const;\n@@ -118,1 +119,1 @@\n-    VirtualMemory* virtual_memory);\n+    VirtualMemory* virtual_memory, size_t read_only_bytes);\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    long totalReadonly = 0;\n@@ -70,1 +71,3 @@\n-    Pattern totalMemoryPattern = Pattern.compile(\"Total\\\\:\\\\sreserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB\");\n+    Pattern totalMemoryPattern = Pattern.compile(\"Total\\\\:\\\\sreserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB,\\\\sreadonly=(?<readonly>\\\\d+)KB\");\n+    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB)\n+    Pattern mtSharedPattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB,\\\\sreadonly=(?<readonly>\\\\d+)KB\\\\)\");\n@@ -79,0 +82,1 @@\n+          totalReadonly = Long.parseLong(totalMemoryMatcher.group(\"readonly\"));\n@@ -84,1 +88,21 @@\n-        if (typeMatcher.matches()) {\n+        Matcher sharedMatcher = mtSharedPattern.matcher(lines[i]);\n+        if (sharedMatcher.matches()) {\n+          long typeCommitted = Long.parseLong(sharedMatcher.group(\"committed\"));\n+          long typeReserved = Long.parseLong(sharedMatcher.group(\"reserved\"));\n+          long typeShared = Long.parseLong(sharedMatcher.group(\"readonly\"));\n+\n+          \/\/ Make sure reserved is always less or equals\n+          if (typeCommitted > typeReserved) {\n+            throwTestException(\"Committed (\" + typeCommitted + \") was more than Reserved (\"\n+                + typeReserved + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+          }\n+          \/\/ Make sure readonly is always less or equals\n+          if (typeShared > typeReserved) {\n+            throwTestException(\"Readonly (\" + typeShared + \") was more than Reserved (\"\n+                + typeReserved + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+          }\n+\n+           \/\/ Add to total and compare them in the end\n+          totalCommittedSum += typeCommitted;\n+          totalReservedSum += typeReserved;\n+        } else if (typeMatcher.matches()) {\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummarySanityCheck.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}