{"files":[{"patch":"@@ -42,1 +42,14 @@\n-void MemReporterBase::print_total(size_t reserved, size_t committed) const {\n+\/\/ There can be upto two CDS archives which can contain readonly data. On Windows, pages are not\n+\/\/ shareable so the RO region may not actually be read only\n+size_t MemReporterBase::readonly_total(FileMapInfo* info) const {\n+  size_t total = 0;\n+  if (info!= NULL) {\n+    FileMapRegion* r = info->region_at(MetaspaceShared::ro);\n+    if (r->read_only()) {\n+      total = r->used();\n+    }\n+  }\n+  return total;\n+}\n+\n+void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only) const {\n@@ -45,1 +58,6 @@\n-    amount_in_current_scale(reserved), scale, amount_in_current_scale(committed), scale);\n+                  amount_in_current_scale(reserved), scale,\n+                  amount_in_current_scale(committed), scale);\n+  if (read_only > 0) {\n+    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                    amount_in_current_scale(read_only), scale);\n+  }\n@@ -136,0 +154,2 @@\n+  size_t read_only_bytes = readonly_total(FileMapInfo::current_info()); \/\/ static archive\n+  read_only_bytes += readonly_total(FileMapInfo::dynamic_info()); \/\/ dynamic archive\n@@ -164,1 +184,1 @@\n-    report_summary_of_type(flag, malloc_memory, virtual_memory);\n+    report_summary_of_type(flag, malloc_memory, virtual_memory, read_only_bytes);\n@@ -169,1 +189,1 @@\n-  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory) {\n+  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory, size_t read_only_bytes) {\n@@ -197,1 +217,1 @@\n-    print_total(reserved_amount, committed_amount);\n+    flag == mtClassShared ? print_total(reserved_amount, committed_amount, read_only_bytes) : print_total(reserved_amount, committed_amount);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -80,0 +81,1 @@\n+  size_t readonly_total(FileMapInfo* info) const;\n@@ -82,1 +84,1 @@\n-  void print_total(size_t reserved, size_t committed) const;\n+  void print_total(size_t reserved, size_t committed, size_t read_only = 0) const;\n@@ -118,1 +120,1 @@\n-    VirtualMemory* virtual_memory);\n+    VirtualMemory* virtual_memory, size_t read_only_bytes);\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB)\n-    Pattern mtTypePattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB\\\\)\");\n+    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB) and some times readonly=<readonly>KB\n+    Pattern mtTypePattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB((,\\\\sreadonly=(?<readonly>\\\\d+)KB)|)\\\\)\");\n@@ -88,0 +88,9 @@\n+          if(typeMatcher.group(\"readonly\") != null) {\n+            long typeReadOnly = Long.parseLong(typeMatcher.group(\"readonly\"));\n+            \/\/ Make sure readonly is always less or equal to committed\n+            if (typeReadOnly > typeCommitted) {\n+              throwTestException(\"Readonly (\" + typeReadOnly + \") was more than Committed (\"\n+                  + typeCommitted + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+            }\n+          }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummarySanityCheck.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}