{"files":[{"patch":"@@ -42,1 +42,15 @@\n-void MemReporterBase::print_total(size_t reserved, size_t committed) const {\n+\/\/ There can be upto two CDS archives which can contain readonly data. On Windows, pages are not\n+\/\/ shareable so the RO region may not actually be read only\n+size_t MemReporterBase::readonly_total(FileMapInfo* info) const {\n+  size_t total = 0;\n+  FileMapRegion* r;\n+  if (info!= NULL) {\n+    FileMapRegion* r = info->region_at(MetaspaceShared::ro);\n+    if (r->read_only()) {\n+      total = r->used();\n+    }\n+  }\n+  return total;\n+}\n+\n+void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only = 0) const {\n@@ -45,1 +59,6 @@\n-    amount_in_current_scale(reserved), scale, amount_in_current_scale(committed), scale);\n+                  amount_in_current_scale(reserved), scale,\n+                  amount_in_current_scale(committed), scale);\n+  if (read_only > 0) {\n+    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                    amount_in_current_scale(read_only), scale);\n+  }\n@@ -107,0 +126,2 @@\n+  size_t read_only_bytes = readonly_total(FileMapInfo::current_info()); \/\/ static archive\n+  read_only_bytes += readonly_total(FileMapInfo::dynamic_info()); \/\/ dynamic archive\n@@ -117,1 +138,1 @@\n-  print_total(total_reserved_amount, total_committed_amount);\n+  print_total(total_reserved_amount, total_committed_amount, read_only_bytes);\n@@ -135,1 +156,1 @@\n-    report_summary_of_type(flag, malloc_memory, virtual_memory);\n+    report_summary_of_type(flag, malloc_memory, virtual_memory, read_only_bytes);\n@@ -140,1 +161,1 @@\n-  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory) {\n+  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory, size_t read_only_bytes) {\n@@ -168,1 +189,1 @@\n-    print_total(reserved_amount, committed_amount);\n+    flag == mtClassShared ? print_total(reserved_amount, committed_amount, read_only_bytes) : print_total(reserved_amount, committed_amount);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -80,0 +81,1 @@\n+  size_t readonly_total(FileMapInfo* info) const;\n@@ -82,1 +84,1 @@\n-  void print_total(size_t reserved, size_t committed) const;\n+  void print_total(size_t reserved, size_t committed, size_t read_only) const;\n@@ -118,1 +120,1 @@\n-    VirtualMemory* virtual_memory);\n+    VirtualMemory* virtual_memory, size_t read_only_bytes);\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    long totalReadonly = 0;\n@@ -69,2 +70,4 @@\n-    \/\/ Match 'Total: reserved=<reserved>KB, committed=<committed>KB'\n-    Pattern totalMemoryPattern = Pattern.compile(\"Total\\\\:\\\\sreserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB\");\n+    \/\/ Match 'Total: reserved=<reserved>KB, committed=<committed>KB, readonly=<readonly>KB'\n+    Pattern totalMemoryPattern = Pattern.compile(\"Total\\\\:\\\\sreserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB,\\\\sreadonly=(?<readonly>\\\\d+)KB\");\n+    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB, readonly<readonly>KB)\n+    Pattern mtSharedPattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB,\\\\sreadonly=(?<readonly>\\\\d+)KB\\\\)\");\n@@ -79,0 +82,5 @@\n+          totalReadonly = Long.parseLong(totalMemoryMatcher.group(\"readonly\"));\n+\n+          if (totalReadonly > totalCommitted) {\n+            throwTestException(\"Total readonly was more than committed\");\n+          }\n@@ -84,1 +92,21 @@\n-        if (typeMatcher.matches()) {\n+        Matcher sharedMatcher = mtSharedPattern.matcher(lines[i]);\n+        if (sharedMatcher.matches()) {\n+          long typeCommitted = Long.parseLong(sharedMatcher.group(\"committed\"));\n+          long typeReserved = Long.parseLong(sharedMatcher.group(\"reserved\"));\n+          long typeShared = Long.parseLong(sharedMatcher.group(\"readonly\"));\n+\n+          \/\/ Make sure reserved is always less or equals\n+          if (typeCommitted > typeReserved) {\n+            throwTestException(\"Committed (\" + typeCommitted + \") was more than Reserved (\"\n+                + typeReserved + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+          }\n+          \/\/ Make sure readonly is always less or equals\n+          if (typeShared > typeCommitted) {\n+            throwTestException(\"Readonly (\" + typeShared + \") was more than Committed (\"\n+                + typeCommitted + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+          }\n+\n+           \/\/ Add to total and compare them in the end\n+          totalCommittedSum += typeCommitted;\n+          totalReservedSum += typeReserved;\n+        } else if (typeMatcher.matches()) {\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummarySanityCheck.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"}]}