{"files":[{"patch":"@@ -25,1 +25,0 @@\n-#include \"cds\/filemap.hpp\"\n@@ -43,5 +42,12 @@\n-void MemReporterBase::print_total(size_t reserved, size_t committed) const {\n-  const char* scale = current_scale();\n-  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s\",\n-                  amount_in_current_scale(reserved), scale,\n-                  amount_in_current_scale(committed), scale);\n+\/\/ There can be upto two CDS archives which can contain readonly data. On Windows, pages are not\n+\/\/ shareable so the RO region may not actually be read only\n+size_t MemReporterBase::readonly_total(FileMapInfo* info) const {\n+  size_t total = 0;\n+  FileMapRegion* r;\n+  if (info!= NULL) {\n+    FileMapRegion* r = info->region_at(MetaspaceShared::ro);\n+    if (r->read_only()) {\n+      total = r->used();\n+    }\n+  }\n+  return total;\n@@ -50,1 +56,1 @@\n-void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only) const {\n+void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only = 0) const {\n@@ -52,1 +58,1 @@\n-  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s, readonly=\" SIZE_FORMAT \"%s\",\n+  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s\",\n@@ -54,2 +60,5 @@\n-                  amount_in_current_scale(committed), scale,\n-                  amount_in_current_scale(read_only), scale);\n+                  amount_in_current_scale(committed), scale);\n+  if (read_only > 0) {\n+    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                    amount_in_current_scale(read_only), scale);\n+  }\n@@ -117,7 +126,2 @@\n-\n-  size_t read_only_bytes = 0;\n-  FileMapRegion* r = FileMapInfo::current_info()->region_at(MetaspaceShared::ro);\n-  \/\/ Region will be read-write on windows, otherwise this is a sanity check\n-  if (!MetaspaceShared::use_windows_memory_mapping())\n-    assert(r->read_only(), \"Region should be read only\");\n-  read_only_bytes = r->used();\n+  size_t read_only_bytes = readonly_total(FileMapInfo::current_info()); \/\/ static archive\n+  read_only_bytes += readonly_total(FileMapInfo::dynamic_info()); \/\/ dynamic archive\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -80,0 +81,1 @@\n+  size_t readonly_total(FileMapInfo* info) const;\n@@ -82,1 +84,0 @@\n-  void print_total(size_t reserved, size_t committed) const;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    \/\/ Match 'Total: reserved=<reserved>KB, committed=<committed>KB'\n+    \/\/ Match 'Total: reserved=<reserved>KB, committed=<committed>KB, readonly=<readonly>KB'\n@@ -72,1 +72,1 @@\n-    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB)\n+    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB, readonly<readonly>KB)\n@@ -83,0 +83,4 @@\n+\n+          if (totalReadonly > totalCommitted) {\n+            throwTestException(\"Total readonly was more than committed\");\n+          }\n@@ -100,3 +104,3 @@\n-          if (typeShared > typeReserved) {\n-            throwTestException(\"Readonly (\" + typeShared + \") was more than Reserved (\"\n-                + typeReserved + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+          if (typeShared > typeCommitted) {\n+            throwTestException(\"Readonly (\" + typeShared + \") was more than Committed (\"\n+                + typeCommitted + \") for mtType: \" + typeMatcher.group(\"typename\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummarySanityCheck.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}