{"files":[{"patch":"@@ -2063,0 +2063,10 @@\n+\/\/ Get the total size in bytes of a read only region\n+size_t FileMapInfo::readonly_total() const {\n+  size_t total = 0;\n+  FileMapRegion* r = region_at(MetaspaceShared::ro);\n+  if (r->read_only()) {\n+    total = r->used();\n+  }\n+  return total;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -463,0 +463,1 @@\n+  size_t readonly_total() const;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-    amount_in_current_scale(reserved), scale, amount_in_current_scale(committed), scale);\n+                  amount_in_current_scale(reserved), scale,\n+                  amount_in_current_scale(committed), scale);\n@@ -173,0 +174,6 @@\n+  \/\/ There can be up to two CDS archives which can contain readonly data. On Windows, pages are not\n+  \/\/ shareable so the RO region may not actually be read only\n+  size_t read_only_bytes;\n+  FileMapInfo::current_info() != nullptr ? read_only_bytes = FileMapInfo::current_info()->readonly_total() : read_only_bytes = 0; \/\/ static archive\n+  if (FileMapInfo::dynamic_info() != nullptr)\n+    read_only_bytes += FileMapInfo::dynamic_info()->readonly_total(); \/\/ dynamic archive\n@@ -198,0 +205,4 @@\n+    if (flag == mtClassShared) {\n+      output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                      amount_in_current_scale(read_only_bytes), scale);\n+    }\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -80,0 +81,1 @@\n+  size_t readonly_total(FileMapInfo* info) const;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB)\n-    Pattern mtTypePattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB\\\\)\");\n+    \/\/ Match '- <mtType> (reserved=<reserved>KB, committed=<committed>KB) and some times readonly=<readonly>KB\n+    Pattern mtTypePattern = Pattern.compile(\"-\\\\s+(?<typename>[\\\\w\\\\s]+)\\\\(reserved=(?<reserved>\\\\d+)KB,\\\\scommitted=(?<committed>\\\\d+)KB((,\\\\sreadonly=(?<readonly>\\\\d+)KB)|)\\\\)\");\n@@ -88,0 +88,9 @@\n+          if(typeMatcher.group(\"readonly\") != null) {\n+            long typeReadOnly = Long.parseLong(typeMatcher.group(\"readonly\"));\n+            \/\/ Make sure readonly is always less or equal to committed\n+            if (typeReadOnly > typeCommitted) {\n+              throwTestException(\"Readonly (\" + typeReadOnly + \") was more than Committed (\"\n+                  + typeCommitted + \") for mtType: \" + typeMatcher.group(\"typename\"));\n+            }\n+          }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummarySanityCheck.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}