{"files":[{"patch":"@@ -2063,0 +2063,10 @@\n+\/\/ Get the total size in bytes of a read only region\n+size_t FileMapInfo::readonly_total() const {\n+  size_t total = 0;\n+  FileMapRegion* r = region_at(MetaspaceShared::ro);\n+  if (r->read_only()) {\n+    total = r->used();\n+  }\n+  return total;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -463,0 +463,1 @@\n+  size_t readonly_total() const;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,14 +42,1 @@\n-\/\/ There can be upto two CDS archives which can contain readonly data. On Windows, pages are not\n-\/\/ shareable so the RO region may not actually be read only\n-size_t MemReporterBase::readonly_total(FileMapInfo* info) const {\n-  size_t total = 0;\n-  if (info!= NULL) {\n-    FileMapRegion* r = info->region_at(MetaspaceShared::ro);\n-    if (r->read_only()) {\n-      total = r->used();\n-    }\n-  }\n-  return total;\n-}\n-\n-void MemReporterBase::print_total(size_t reserved, size_t committed, size_t read_only) const {\n+void MemReporterBase::print_total(size_t reserved, size_t committed) const {\n@@ -60,4 +47,0 @@\n-  if (read_only > 0) {\n-    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n-                    amount_in_current_scale(read_only), scale);\n-  }\n@@ -154,2 +137,0 @@\n-  size_t read_only_bytes = readonly_total(FileMapInfo::current_info()); \/\/ static archive\n-  read_only_bytes += readonly_total(FileMapInfo::dynamic_info()); \/\/ dynamic archive\n@@ -184,1 +165,1 @@\n-    report_summary_of_type(flag, malloc_memory, virtual_memory, read_only_bytes);\n+    report_summary_of_type(flag, malloc_memory, virtual_memory);\n@@ -189,1 +170,1 @@\n-  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory, size_t read_only_bytes) {\n+  MallocMemory*  malloc_memory, VirtualMemory* virtual_memory) {\n@@ -193,0 +174,6 @@\n+  \/\/ There can be up to two CDS archives which can contain readonly data. On Windows, pages are not\n+  \/\/ shareable so the RO region may not actually be read only\n+  size_t read_only_bytes;\n+  FileMapInfo::current_info() != nullptr ? read_only_bytes = FileMapInfo::current_info()->readonly_total() : read_only_bytes = 0; \/\/ static archive\n+  if (FileMapInfo::dynamic_info() != nullptr)\n+    read_only_bytes += FileMapInfo::dynamic_info()->readonly_total(); \/\/ dynamic archive\n@@ -217,1 +204,5 @@\n-    flag == mtClassShared ? print_total(reserved_amount, committed_amount, read_only_bytes) : print_total(reserved_amount, committed_amount);\n+    print_total(reserved_amount, committed_amount);\n+    if (flag == mtClassShared) {\n+      output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+                      amount_in_current_scale(read_only_bytes), scale);\n+    }\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":14,"deletions":23,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  void print_total(size_t reserved, size_t committed, size_t read_only = 0) const;\n+  void print_total(size_t reserved, size_t committed) const;\n@@ -120,1 +120,1 @@\n-    VirtualMemory* virtual_memory, size_t read_only_bytes);\n+    VirtualMemory* virtual_memory);\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}