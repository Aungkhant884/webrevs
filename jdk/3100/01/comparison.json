{"files":[{"patch":"@@ -9,1 +9,1 @@\n-\t\t\t<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"producer\" type=\"producerType\" \/>\n+\t\t\t<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"event\" type=\"eventType\" \/>\n@@ -12,1 +12,1 @@\n-\t\t<xsd:attribute use=\"required\" name=\"name\" type=\"xsd:string\" \/>\n+\t\t<xsd:attribute use=\"required\" name=\"label\" type=\"xsd:string\" \/>\n@@ -17,10 +17,0 @@\n-\t<xsd:complexType name=\"producerType\">\n-\t\t<xsd:sequence>\n-\t\t\t<xsd:element minOccurs=\"0\" maxOccurs=\"1\" name=\"control\" type=\"controlType\" \/>\n-\t\t\t<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"event\" type=\"eventType\" \/>\n-\t\t<\/xsd:sequence>\n-\t\t<xsd:attribute use=\"required\" name=\"uri\" type=\"xsd:anyURI\" \/>\n-\t\t<xsd:attribute use=\"optional\" name=\"label\" type=\"xsd:string\" default=\"\" \/>\n-\t\t<xsd:attribute use=\"optional\" name=\"description\" type=\"xsd:string\" default=\"\" \/>\n-\t<\/xsd:complexType>\n-\n@@ -31,1 +21,1 @@\n-\t\t<xsd:attribute use=\"required\" name=\"path\" type=\"xsd:string\" \/>\n+\t\t<xsd:attribute use=\"required\" name=\"name\" type=\"xsd:string\" \/>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/jfc.xsd","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+public final class AbortException extends Exception {\n+    private static final long serialVersionUID = -2501519883611363246L;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/AbortException.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+record Constraint(Class<? extends XmlElement> type, int min, int max) {\n+\n+    public static Constraint any(Class<? extends XmlElement> type) {\n+        return new Constraint(type, 0, Integer.MAX_VALUE);\n+    }\n+\n+    public static Constraint atLeast(Class<? extends XmlElement> type, int min) {\n+        return new Constraint(type, min, Integer.MAX_VALUE);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Constraint.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Interface for elements that can control a setting,\n+\/\/ <condition>, <selection>, <text> and <flag>\n+interface ControlElement {\n+    String getName();\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/ControlElement.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.charset.Charset;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.jfr.internal.SecuritySupport.SafePath;\n+\n+\/\/ Holds the structure of a .jfc file similar to an XML DOM.\n+public final class JFCModel {\n+    private final Map<String, List<ControlElement>> controls = new LinkedHashMap<>();\n+    private final XmlConfiguration configuration;\n+\n+    public JFCModel(SafePath file) throws ParseException, IOException {\n+        this.configuration = createConfiguration(file);\n+        this.configuration.validate();\n+        addControls();\n+        wireConditions();\n+        wireSettings();\n+    }\n+\n+    public JFCModel(List<SafePath> files) throws IOException, ParseException {\n+        this.configuration = new XmlConfiguration();\n+        this.configuration.setAttribute(\"version\", \"2.0\");\n+        for (SafePath file : files) {\n+            JFCModel model = new JFCModel(file);\n+            for (var entry : model.controls.entrySet()) {\n+                String name = entry.getKey();\n+                \/\/ Fail-fast checks that prevents an ambiguous file to be written later\n+                if (controls.containsKey(name)) {\n+                    throw new ParseException(\"Control with '\" + name + \"' is declared in multiple files\", 0);\n+                }\n+                controls.put(name, entry.getValue());\n+            }\n+            for (XmlElement child : model.configuration.getChildren()) {\n+                this.configuration.addChild(child);\n+            }\n+        }\n+    }\n+\n+    public void setLabel(String label) {\n+        configuration.setAttribute(\"label\", label);\n+    }\n+\n+    public void configure(String name, String value) {\n+        for (XmlInput i : getInputs()) {\n+            if (i.getName().equals(name)) {\n+                i.configure(value);\n+                return;\n+            }\n+        }\n+        boolean add = name.startsWith(\"+\");\n+        if (add) {\n+            name = name.substring(1);\n+        }\n+        int index = name.indexOf(\"#\");\n+        if (index < 1 || index == name.length() - 1) {\n+            throw new IllegalArgumentException(\"Option '\" + name + \"' doesn't exist in configuration\");\n+        }\n+        XmlEvent event = configuration.getEvent(name.substring(0, index), add);\n+        String settingName = name.substring(index + 1);\n+        XmlSetting setting = event.getSetting(settingName, add);\n+\n+        if (settingName.equals(\"period\") || settingName.equals(\"threshold\")) {\n+            try {\n+                value = Utilities.parseTimespan(value);\n+            } catch (IllegalArgumentException iae) {\n+                \/\/ OK, no validation to allow forward compatibility.\n+            }\n+        }\n+\n+        setting.setContent(value);\n+    }\n+\n+    public void configure(UserInterface ui) throws AbortException {\n+        for (XmlInput input : getInputs()) {\n+            input.configure(ui);\n+        }\n+    }\n+\n+    public List<XmlInput> getInputs() {\n+        List<XmlInput> inputs = new ArrayList<>();\n+        for (XmlControl control : configuration.getControls()) {\n+            inputs.addAll(control.getInputs());\n+        }\n+        return inputs;\n+    }\n+\n+    public XmlConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void saveToFile(SafePath path) throws IOException {\n+        try (PrintWriter p = new PrintWriter(path.toFile(), Charset.forName(\"UTF-8\"))) {\n+            PrettyPrinter pp = new PrettyPrinter(p);\n+            pp.print(configuration);\n+            if (p.checkError()) {\n+                throw new IOException(\"Error writing \" + path);\n+            }\n+        }\n+    }\n+\n+    private List<ControlElement> getControlElements(String name) {\n+        return controls.getOrDefault(name, Collections.emptyList());\n+    }\n+\n+    private void addControls() {\n+        for (var controls : configuration.getControls()) {\n+            for (var control : controls.getControlElements()) {\n+                add(control);\n+            }\n+        }\n+    }\n+\n+    private void wireConditions() {\n+        for (XmlControl control : configuration.getControls()) {\n+            for (XmlCondition condition : control.getConditions()) {\n+                for (XmlElement element : condition.getChildren()) {\n+                    wireExpression(condition, element);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void wireExpression(XmlElement parent, XmlElement element) {\n+        element.addListener(parent);\n+        if (element instanceof XmlTest test) {\n+            wireTest(test);\n+        }\n+        if (element instanceof XmlExpression expression) {\n+            for (XmlExpression child : expression.getExpressions()) {\n+                wireExpression(expression, child);\n+            }\n+        }\n+    }\n+\n+    private void wireTest(XmlTest test) {\n+        String name = test.getName();\n+        for (ControlElement ce : getControlElements(name)) {\n+            XmlElement control = (XmlElement) ce;\n+            control.addListener(test);\n+        }\n+    }\n+\n+    private void wireSettings() {\n+        for (XmlEvent event : configuration.getEvents()) {\n+            for (XmlSetting setting : event.getSettings()) {\n+                var controlName = setting.getControl();\n+                if (controlName.isPresent()) {\n+                    List<ControlElement> controls = getControlElements(controlName.get());\n+                    if (controls.isEmpty()) {\n+                        System.out.println(\"Warning! Setting '\" + setting.getFullName() + \"' refers to missing control '\" + controlName.get() + \"'\");\n+                    }\n+                    for (ControlElement ce : controls) {\n+                        XmlElement control = (XmlElement) ce;\n+                        control.addListener(setting);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void add(ControlElement control) {\n+        controls.computeIfAbsent(control.getName(), x -> new ArrayList<>()).add(control);\n+    }\n+\n+    private XmlConfiguration createConfiguration(SafePath file) throws ParseException, IOException {\n+        if (file.toString().equals(\"none\")) {\n+            XmlConfiguration configuration = new XmlConfiguration();\n+            configuration.setAttribute(\"version\", \"2.0\");\n+            configuration.setAttribute(\"label\", \"None\");\n+            return configuration;\n+        }\n+        return Parser.parse(file.toPath());\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/JFCModel.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+import jdk.internal.org.xml.sax.Attributes;\n+import jdk.internal.org.xml.sax.InputSource;\n+import jdk.internal.org.xml.sax.SAXException;\n+import jdk.internal.org.xml.sax.helpers.DefaultHandler;\n+import jdk.internal.util.xml.SAXParser;\n+import jdk.internal.util.xml.impl.SAXParserImpl;\n+\n+final class Parser {\n+\n+    static XmlConfiguration parse(Path path) throws ParseException, IOException {\n+        try (FileReader r = new FileReader(path.toFile(), Charset.forName(\"UTF-8\"))) {\n+            SAXParser saxParser = new SAXParserImpl();\n+            ConfigurationHandler handler = new ConfigurationHandler();\n+            saxParser.parse(new InputSource(r), handler);\n+            return handler.configuration;\n+        } catch (SAXException sp) {\n+            ParseException pe = new ParseException(sp.getMessage(), -1);\n+            pe.initCause(sp);\n+            throw pe;\n+        }\n+    }\n+\n+    private static final class ConfigurationHandler extends DefaultHandler {\n+        private final Deque<XmlElement> stack = new ArrayDeque<>();\n+        private final StringBuilder buffer = new StringBuilder();\n+        private XmlConfiguration configuration;\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n+            if (configuration == null) {\n+                if (!qName.equalsIgnoreCase(\"configuration\")) {\n+                    throw new SAXException(\"Expected root element to be named 'configuration'\");\n+                }\n+                configuration = new XmlConfiguration();\n+                addAttributes(configuration, attributes);\n+                stack.push(configuration);\n+                return;\n+            }\n+            XmlElement current = stack.peek();\n+            XmlElement child = current.createChild(qName);\n+            addAttributes(child, attributes);\n+            stack.push(child);\n+        }\n+\n+        @Override\n+        public void characters(char ch[], int start, int length) throws SAXException {\n+            buffer.append(ch, start, length);\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) {\n+            String content = buffer.toString().strip();\n+            if (!content.isEmpty()) {\n+                stack.peek().setContent(content);\n+                buffer.setLength(0);\n+            }\n+\n+            XmlElement current = stack.peek();\n+            if (current.getElementName().equalsIgnoreCase(qName)) {\n+                stack.pop();\n+            } else {\n+                throw new IllegalStateException(\"Unexpected <\" + qName + \"\/>\");\n+            }\n+        }\n+\n+        private void addAttributes(XmlElement element, Attributes attributes) {\n+            for (int i = 0; i < attributes.getLength(); i++) {\n+                element.setAttribute(attributes.getQName(i), attributes.getValue(i));\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Parser.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.io.PrintWriter;\n+import java.util.Map;\n+\n+final class PrettyPrinter {\n+    private final PrintWriter out;\n+\n+    PrettyPrinter(PrintWriter out) {\n+        this.out = out;\n+    }\n+\n+    void print(XmlConfiguration configuration) {\n+        printHeader();\n+        prettyPrint(\"\", configuration);\n+    }\n+\n+    private void printHeader() {\n+        out.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n+    }\n+\n+    private void prettyPrint(String indent, XmlElement element) {\n+        printComment(indent, element);\n+        String elementName = element.getElementName();\n+        out.print(indent + '<' + elementName);\n+        printAttributes(element.getAttributes());\n+        if (element.getChildren().isEmpty() && !element.hasContent()) {\n+            out.println(\"\/>\");\n+            return;\n+        }\n+        out.print('>');\n+        out.print(Utilities.escapeAll(element.getContent().trim()));\n+        if (element.getChildren().isEmpty()) {\n+            out.println(\"<\/\" + elementName + '>');\n+            return;\n+        }\n+        out.println();\n+        boolean first = true;\n+        for (XmlElement child : element.getChildren()) {\n+            if (first && child.isEntity()) {\n+                out.println();\n+            }\n+            prettyPrint(indent + \"  \", child);\n+            if (child.isEntity()) {\n+                out.println();\n+            }\n+            first = false;\n+        }\n+        out.println(indent + \"<\/\" + elementName + '>');\n+    }\n+\n+    private void printComment(String indent, XmlElement element) {\n+        String comment = element.comment();\n+        if (!comment.isEmpty()) {\n+            String text = comment.indent(indent.length());\n+            out.println(indent + \"<!--\");\n+            out.println(text.replace(\"\\n\", System.lineSeparator()));\n+            out.println(indent + \"-->\");\n+        }\n+    }\n+\n+    private void printAttributes(Map<String, String> attributes) {\n+        for (var entry : attributes.entrySet()) {\n+            out.print(' ');\n+            out.print(entry.getKey());\n+            out.print(\"=\\\"\");\n+            out.print(Utilities.escapeAll(entry.getValue()));\n+            out.print('\\\"');\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/PrettyPrinter.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+record Result(String value) {\n+    public static final Result FALSE = new Result(\"false\");\n+    public static final Result TRUE = new Result(\"true\");\n+    public static final Result NULL = new Result(null);\n+\n+    public boolean isTrue() {\n+        return \"true\".equalsIgnoreCase(value);\n+    }\n+\n+    public boolean isNull() {\n+        return value == null;\n+    }\n+\n+    public boolean isFalse() {\n+        return \"false\".equalsIgnoreCase(value);\n+    }\n+\n+    public static Result of(String value) {\n+        if (\"true\".equalsIgnoreCase(value)) {\n+            return TRUE;\n+        }\n+        if (\"false\".equalsIgnoreCase(value)) {\n+            return FALSE;\n+        }\n+        return new Result(value);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Result.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+public final class SettingsLog {\n+    private static final Map<String, String> settings = new TreeMap<>();\n+    private static boolean enabled;\n+\n+    public static void enable() {\n+        enabled = true;\n+    }\n+\n+    public static void flush() {\n+        if (!settings.isEmpty()) {\n+            System.out.println();\n+            System.out.println(\"Setting:\");\n+            for (var s : settings.entrySet()) {\n+                System.out.println(\"\\\"\" + s.getKey() + \"=\" + s.getValue() + \"\\\"\");\n+            }\n+            settings.clear();\n+        }\n+    }\n+\n+    static void log(XmlSetting setting, String value) {\n+        if (enabled) {\n+            settings.put(setting.getFullName(), value);\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/SettingsLog.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public final class UserInterface {\n+\n+    public void println() {\n+        System.out.println();\n+    }\n+\n+    public void println(String text) {\n+        System.out.println(text);\n+    }\n+\n+    public String readLine() throws AbortException {\n+        try {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+            String line = br.readLine();\n+            if (line == null || line.equalsIgnoreCase(\"Q\")) {\n+                println();\n+                throw new AbortException();\n+            }\n+            return line;\n+        } catch (IOException e) {\n+            throw new Error(\"Unable to read input\", e);\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/UserInterface.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.StringJoiner;\n+\n+public final class Utilities {\n+    private static final String[] UNITS = new String[] {\n+        \"ns\", \"us\", \"ns\", \"ms\", \"s\", \"m\", \"h\", \"d\" \/\/ order matters\n+    };\n+\n+    static XmlElement instantiate(Class<? extends XmlElement> type) {\n+        try {\n+            return type.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw new InternalError(\"Unable to instantiate \" + type, e);\n+        }\n+    }\n+\n+    static String elementName(Class<? extends XmlElement> type) {\n+        String name = type.getSimpleName();\n+        if (name.startsWith(\"Xml\") && name.length() > 3) {\n+            return name.substring(3).toLowerCase();\n+        }\n+        throw new InternalError(\"Unexpected class \" + type);\n+    }\n+\n+    static String escapeAll(String text) {\n+        StringBuilder s = new StringBuilder();\n+        for (int i = 0; i < text.length(); i++) {\n+            addCharacter(s, text.charAt(i));\n+        }\n+        return s.toString();\n+    }\n+\n+    private static void addCharacter(StringBuilder s, char c) {\n+        if (c == 34) {\n+            s.append(\"&quot;\");\n+            return;\n+        }\n+        if (c == 38) {\n+            s.append(\"&amp;\");\n+            return;\n+        }\n+        if (c == 39) {\n+            s.append(\"&apos;\");\n+            return;\n+        }\n+        if (c == 60) {\n+            s.append(\"&lt;\");\n+            return;\n+        }\n+        if (c == 62) {\n+            s.append(\"&gt;\");\n+            return;\n+        }\n+        if (c > 0x7F) {\n+            s.append(\"&#\");\n+            s.append((int) c);\n+            s.append(';');\n+            return;\n+        }\n+        s.append(c);\n+    }\n+\n+    static void checkValid(String value, Object... valid) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object v : valid) {\n+            if (v.equals(value)) {\n+                return;\n+            }\n+            sj.add(\"'\" + v + \"'\");\n+        }\n+        String msg = \"Incorrect value '\" + value + \"'. Valid values are \" + sj.toString() + \".\";\n+        int index = msg.lastIndexOf(\",\");\n+        if (index != -1) {\n+            msg = msg.substring(0, index) + \" and\" + msg.substring(index + 1);\n+        }\n+        throw new IllegalArgumentException(msg);\n+    }\n+\n+    static String parseTimespan(String s) {\n+        StringBuilder sb = new StringBuilder();\n+        try {\n+            for (String unit : UNITS) {\n+                if (s.endsWith(unit)) {\n+                    return parseForUnit(s, unit);\n+                }\n+            }\n+            Long.parseLong(s);\n+            sb.append(\"Timespan '\" + s + \"' is missing unit.\");\n+        } catch (NumberFormatException nfe) {\n+            sb.append(\"'\" + s + \"' is not a valid timespan.\" + System.lineSeparator());\n+            sb.append(\"Should be numeric value followed by a unit, i.e. 20 ms.\");\n+        }\n+        sb.append(\" Valid units are ns, us, ms, s, m, h and d.\");\n+        throw new IllegalArgumentException(sb.toString());\n+    }\n+\n+    private static String parseForUnit(String s, String unit) {\n+        String number = s.trim().substring(0, s.length() - unit.length());\n+        return Long.parseLong(number.trim()) + \" \" + unit;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Utilities.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Corresponds to <and>\n+final class XmlAnd extends XmlExpression {\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        Result result = Result.NULL;\n+        for (XmlElement e : getProducers()) {\n+            Result r = e.evaluate();\n+            if (r.isFalse()) {\n+                return Result.FALSE;\n+            }\n+            if (r.isTrue()) {\n+                result = Result.TRUE;\n+            }\n+        }\n+        return result;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlAnd.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/\/ Corresponds <condition>\n+final class XmlCondition extends XmlExpression implements ControlElement {\n+\n+    @Override\n+    public String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public Result getTrueValue() {\n+        return Result.of(attribute(\"true\"));\n+    }\n+\n+    public Result getFalseValue() {\n+        return Result.of(attribute(\"false\"));\n+    }\n+\n+    @Override\n+    protected void validateChildConstraints() throws ParseException {\n+        if (getExpressions().size() > 1) {\n+            throw new ParseException(\"Expected <condition> to not have more than one child\", -1);\n+        }\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\");\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        Optional<String> trueValue = optional(\"true\");\n+        Optional<String> falseValue = optional(\"false\");\n+        for (XmlElement producer : getProducers()) {\n+            Result r = producer.evaluate();\n+            if (trueValue.isPresent() && r.isTrue()) {\n+                return getTrueValue();\n+            }\n+            if (falseValue.isPresent() && r.isFalse()) {\n+                return getFalseValue();\n+            }\n+        }\n+        return Result.NULL;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlCondition.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/\/ Corresponds to <configuration>\n+final class XmlConfiguration extends XmlElement {\n+\n+    public List<XmlEvent> getEvents() {\n+        return elements(XmlEvent.class);\n+    }\n+\n+    public Optional<String> getDescription() {\n+        return optional(\"description\");\n+    }\n+\n+    public Optional<String> getLabel() {\n+        return optional(\"label\");\n+    }\n+\n+    public Optional<String> getProvider() {\n+        return optional(\"provider\");\n+    }\n+\n+    public Optional<String> getVersion() {\n+        return optional(\"version\");\n+    }\n+\n+    public List<XmlControl> getControls() {\n+        return elements(XmlControl.class);\n+    }\n+\n+    @Override\n+    String comment() {\n+        return \"\"\"\n+               Recommended way to edit .jfc files is to use the configure command of\n+               the 'jfr' tool, i.e. jfr configure, or JDK Mission Control\n+               see Window -> Flight Recorder Template Manager\n+               \"\"\";\n+    }\n+\n+    XmlEvent getEvent(String eventName, boolean add) {\n+        for (XmlEvent event : getEvents()) {\n+            if (eventName.equals(event.getName())) {\n+                return event;\n+            }\n+        }\n+        if (!add) {\n+            throw new IllegalArgumentException(\"Could not find event '\" + eventName + \"'\");\n+        }\n+        XmlEvent event = new XmlEvent();\n+        event.setAttribute(\"name\", eventName);\n+        addChild(event);\n+        return event;\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"version\", \"label\");\n+    }\n+\n+    @Override\n+    protected void validateAttributes() throws ParseException {\n+        super.validateAttributes();\n+        if (!attribute(\"version\").equals(\"2.0\")) {\n+            throw new ParseException(\"Only .jfc files of version 2.0 is supported\", -1);\n+        }\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(\n+            Constraint.any(XmlEvent.class),\n+            Constraint.any(XmlControl.class)\n+        );\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlConfiguration.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+\n+\/\/ Corresponds to <control>\n+final class XmlControl extends XmlElement {\n+\n+    public List<XmlInput> getInputs() {\n+        return elements(XmlInput.class);\n+    }\n+\n+    public List<XmlCondition> getConditions() {\n+        return elements(XmlCondition.class);\n+    }\n+\n+    \/\/  Returns list of all <selection>, <condition>, <flag> and <text>\n+    public List<ControlElement> getControlElements() {\n+        return elements(ControlElement.class);\n+    }\n+\n+    @Override\n+    String comment() {\n+        return \"\"\"\n+               Contents of the control element is not read by the JVM, it's used\n+               by JDK Mission Control and the 'jfr'-tool to change settings that\n+               carry the control attribute.\n+               \"\"\";\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(\n+            Constraint.any(XmlCondition.class),\n+            Constraint.any(XmlText.class),\n+            Constraint.any(XmlSelection.class),\n+            Constraint.any(XmlFlag.class)\n+        );\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlControl.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+\/\/ Base class for XML-elements\n+class XmlElement {\n+    private final Map<String, String> attributes = new HashMap<>();\n+    private final List<XmlElement> elements = new ArrayList<>();\n+    private final List<XmlElement> listeners = new ArrayList<>(2);\n+    private final List<XmlElement> producers = new ArrayList<>(2);\n+    private final String elementName;\n+\n+    private XmlElement parent;\n+    private String content = \"\";\n+\n+    XmlElement() {\n+        this.elementName = Utilities.elementName(this.getClass());\n+    }\n+\n+    private XmlElement(String elementName) {\n+        this.elementName = elementName;\n+    }\n+\n+    final String getElementName() {\n+        return elementName;\n+    }\n+\n+    final boolean hasContent() {\n+        return content != null && !content.isEmpty();\n+    }\n+\n+    final Map<String, String> getAttributes() {\n+        return attributes;\n+    }\n+\n+    final void validate() throws ParseException {\n+        validateAttributes();\n+        validateChildConstraints();\n+        validateChildren();\n+    }\n+\n+    final void setAttribute(String key, String value) {\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(key);\n+        attributes.put(key, value);\n+    }\n+\n+    final XmlElement createChild(String name) {\n+        XmlElement child = instantiate(name);\n+        child.parent = this;\n+        addChild(child);\n+        return child;\n+    }\n+\n+    private XmlElement instantiate(String name) {\n+        for (var e : constraints()) {\n+            String elementName = Utilities.elementName(e.type());\n+            if (elementName.equalsIgnoreCase(name)) {\n+                return Utilities.instantiate(e.type());\n+            }\n+        }\n+        return new XmlElement(name);\n+    }\n+\n+    final void addChild(XmlElement element) {\n+        elements.add(element);\n+    }\n+\n+    final List<XmlElement> getChildren() {\n+        return elements;\n+    }\n+\n+    void setContent(String content) {\n+        this.content = content;\n+    }\n+\n+    final String getContent() {\n+        return content;\n+    }\n+\n+    final void addListener(XmlElement listener) {\n+        listeners.add(listener);\n+        listener.addProducer(this);\n+    }\n+\n+    \/\/ If the element should be surrounded with an empty\n+    \/\/ line when printed to file, for example, <event> but not <setting>\n+    boolean isEntity() {\n+        return true;\n+    }\n+\n+    String comment() {\n+        return \"\";\n+    }\n+\n+    protected final void notifyListeners() {\n+        onChange();\n+        SettingsLog.flush();\n+    }\n+\n+    protected void onChange() {\n+        for (XmlElement listener : listeners) {\n+            listener.onChange();\n+        }\n+    }\n+\n+    protected final XmlElement getParent() {\n+        return parent;\n+    }\n+\n+    protected List<Constraint> constraints() {\n+        return List.of();\n+    }\n+\n+    protected List<String> attributes() {\n+        return List.of();\n+    }\n+\n+    protected final List<XmlElement> getProducers() {\n+        return producers;\n+    }\n+\n+    protected final Optional<String> optional(String name) {\n+        return Optional.ofNullable(attributes.get(name));\n+    }\n+\n+    protected final String attribute(String name) {\n+        return attributes.get(name);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected final <T> List<T> elements(Class<T> type) {\n+        List<T> result = new ArrayList<>();\n+        for (XmlElement e : elements) {\n+            if (type.isAssignableFrom(e.getClass())) {\n+                result.add((T) e);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected Result evaluate() {\n+        if (producers.isEmpty()) {\n+            throw new Error(\"No producer evaluate for \" + getClass());\n+        }\n+        if (producers.size() != 1) {\n+            throw new Error(\"Unsure how to evaluate multiple producers \" + getClass());\n+        }\n+        return producers.get(0).evaluate();\n+    }\n+\n+    protected void validateAttributes() throws ParseException {\n+        for (String key : attributes()) {\n+            if (!attributes.containsKey(key)) {\n+                throw new ParseException(\"Missing mandatory attribute '\" + key + \"'\", 0);\n+            }\n+        }\n+    }\n+\n+    private void validateChildren() throws ParseException {\n+        for (XmlElement child : elements) {\n+            child.validate();\n+        }\n+    }\n+\n+    protected void validateChildConstraints() throws ParseException {\n+        for (Constraint c : constraints()) {\n+            validateConstraint(c);\n+        }\n+    }\n+\n+    private final void validateConstraint(Constraint c) throws ParseException {\n+        int count = count(c.type());\n+        if (count < c.min()) {\n+            String elementName = Utilities.elementName(c.type());\n+            throw new ParseException(\"Missing mandatory element <\" + elementName + \">\", 0);\n+        }\n+        if (count > c.max()) {\n+            String elementName = Utilities.elementName(c.type());\n+            throw new ParseException(\"Too many elements of type <\" + elementName + \">\", 0);\n+        }\n+    }\n+\n+    private void addProducer(XmlElement producer) {\n+        producers.add(producer);\n+    }\n+\n+    private int count(Class<? extends XmlElement> type) {\n+        int count = 0;\n+        for (XmlElement element : getChildren()) {\n+            if (type.isAssignableFrom(element.getClass())) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlElement.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+\n+\/\/ Corresponds to <event>\n+final class XmlEvent extends XmlElement {\n+\n+    public String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public List<XmlSetting> getSettings() {\n+        return elements(XmlSetting.class);\n+    }\n+\n+    XmlSetting getSetting(String settingName, boolean add) {\n+        for (XmlSetting setting : getSettings()) {\n+            if (settingName.equals(setting.getName())) {\n+                return setting;\n+            }\n+        }\n+        if (!add) {\n+            String msg = \"Could not find setting '\" + settingName;\n+            msg += \"' for event '\" + getName() + \"'\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+        XmlSetting setting = new XmlSetting();\n+        setting.setAttribute(\"name\", settingName);\n+        addChild(setting);\n+        return setting;\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\");\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(Constraint.any(XmlSetting.class));\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlEvent.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+\n+\/\/ Base class for <condition>, <or>, <not>, <and> and <test>\n+abstract class XmlExpression extends XmlElement {\n+\n+    public final List<XmlExpression> getExpressions() {\n+        return elements(XmlExpression.class);\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(\n+            Constraint.any(XmlOr.class),\n+            Constraint.any(XmlAnd.class),\n+            Constraint.any(XmlTest.class),\n+            Constraint.any(XmlNot.class)\n+        );\n+    }\n+\n+    @Override\n+    protected void validateChildConstraints() throws ParseException {\n+        if (getExpressions().size() < 2) {\n+            throw new ParseException(\"Expected + <\" + getElementName() + \"> to have at least two children\", 0);\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlExpression.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Corresponds to <flag>\n+final class XmlFlag extends XmlInput {\n+\n+    @Override\n+    public String getOptionSyntax() {\n+        return getName() + \"=<true|false>\";\n+    }\n+\n+    @Override\n+    public void configure(String value) {\n+        Utilities.checkValid(value, \"true\", \"false\");\n+        setContent(value);\n+        notifyListeners();\n+    }\n+\n+    @Override\n+    public void configure(UserInterface ui) throws AbortException {\n+        Result defaultValue = Result.of(getContent());\n+        ui.println();\n+        ui.println(getLabel() + \" [Y\/N]: \" + (defaultValue.isTrue() ? \"Yes\" : \"No\") + \" (default)\");\n+\n+        while (!read(ui, defaultValue)) {\n+            ;\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        return Result.of(getContent());\n+    }\n+\n+    private boolean read(UserInterface ui, Result defaultValue) throws AbortException {\n+        String line = ui.readLine();\n+        if (line.isBlank()) {\n+            ui.println(\"Using default: \" + (defaultValue.isTrue() ? \"Yes\" : \"No\"));\n+            return true;\n+        }\n+        if (line.equalsIgnoreCase(\"Y\") || line.equalsIgnoreCase(\"N\")) {\n+            boolean value = line.equalsIgnoreCase(\"Y\");\n+            ui.println(\"Using: \" + (value ? \"Yes\" : \"No\"));\n+            configure(String.valueOf(value));\n+            return true;\n+        }\n+        ui.println(\"Not a valid choice.\");\n+        return false;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlFlag.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/\/ Base class for elements that the user can interact with,\n+\/\/ <selection>, <text> and <flag>\n+public abstract class XmlInput extends XmlElement implements ControlElement {\n+\n+    public abstract String getOptionSyntax();\n+\n+    abstract void configure(UserInterface ui) throws AbortException;\n+\n+    abstract void configure(String value);\n+\n+    public final Optional<String> getContentType() {\n+        return optional(\"contentType\");\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public final String getLabel() {\n+        return attribute(\"label\");\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\", \"label\");\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlInput.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+\n+\/\/ Corresponds to <not>\n+final class XmlNot extends XmlExpression {\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateChildConstraints() throws ParseException {\n+        if (getExpressions().size() != 1) {\n+            throw new ParseException(\"Expected <not> to have a single child\", 0);\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        List<XmlElement> producers = getProducers();\n+        if (!producers.isEmpty()) {\n+            Result r = producers.get(0).evaluate();\n+            if (!r.isNull()) {\n+                return r.isTrue() ? Result.FALSE : Result.TRUE;\n+            }\n+        }\n+        return Result.NULL;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlNot.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+\n+\/\/ Corresponds to <option>\n+final class XmlOption extends XmlElement {\n+\n+    public String getLabel() {\n+        return attribute(\"label\");\n+    }\n+\n+    public String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"label\", \"name\");\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlOption.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Corresponds to <or>\n+final class XmlOr extends XmlExpression {\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        Result result = Result.NULL;\n+        for (XmlElement e : getProducers()) {\n+            Result r = e.evaluate();\n+            if (r.isFalse()) {\n+                result = Result.FALSE;\n+            }\n+            if (r.isTrue()) {\n+                return Result.TRUE;\n+            }\n+\n+        }\n+        return result;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlOr.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+\/\/ Corresponds to <selection>\n+final class XmlSelection extends XmlInput {\n+\n+    @Override\n+    public String getOptionSyntax() {\n+        StringJoiner sj = new StringJoiner(\"|\", \"<\", \">\");\n+        for (XmlOption option : getOptions()) {\n+            sj.add(option.getName());\n+        }\n+        return getName() + \"=\" + sj.toString();\n+    }\n+\n+    @Override\n+    public void configure(String value) {\n+        var valid = getOptions().stream().map(XmlOption::getName);\n+        Utilities.checkValid(value, valid.toArray());\n+        setAttribute(\"default\", value);\n+        notifyListeners();\n+    }\n+\n+    @Override\n+    public void configure(UserInterface ui) throws AbortException {\n+        XmlOption selected = getSelected();\n+        if (selected == null) {\n+            return;\n+        }\n+        String label = getLabel();\n+        ui.println();\n+        ui.println(label + \": \" + selected.getLabel() + \" (default)\");\n+        int index = 1;\n+        List<XmlOption> options = getOptions();\n+        for (XmlOption s : options) {\n+            ui.println(index + \". \" + s.getLabel());\n+            index++;\n+        }\n+        while (true) {\n+            String line = ui.readLine();\n+            if (line.isBlank()) {\n+                ui.println(\"Using default: \" + selected.getLabel());\n+                return;\n+            }\n+            try {\n+                int s = Integer.parseInt(line) - 1;\n+                if (s >= 0 && s < options.size()) {\n+                    XmlOption o = options.get(s);\n+                    ui.println(\"Using: \" + o.getLabel());\n+                    configure(o.getName());\n+                    return;\n+                }\n+                ui.println(\"Not in range.\");\n+            } catch (NumberFormatException nfe) {\n+                ui.println(\"Must enter a number, or ENTER to select default.\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\", \"label\", \"default\");\n+    }\n+\n+    public String getDefault() {\n+        return attribute(\"default\");\n+    }\n+\n+    public List<XmlOption> getOptions() {\n+        return elements(XmlOption.class);\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(Constraint.atLeast(XmlOption.class, 1));\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        return Result.of(getSelected().getContent());\n+    }\n+\n+    private XmlOption getSelected() {\n+        List<XmlOption> options = getOptions();\n+        for (XmlOption optionElement : options) {\n+            if (getDefault().equals(optionElement.getName())) {\n+                return optionElement;\n+            }\n+        }\n+        return options.isEmpty() ? null : options.get(0);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlSelection.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/\/ Corresponds to <setting>\n+final class XmlSetting extends XmlElement {\n+\n+    @Override\n+    public boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\");\n+    }\n+\n+    public String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public Optional<String> getControl() {\n+        return optional(\"control\");\n+    }\n+\n+    @Override\n+    public void onChange() {\n+        String value = evaluate().value();\n+        if (value != null) {\n+            setContent(value);\n+        }\n+    }\n+\n+    @Override\n+    final void setContent(String value) {\n+        super.setContent(value);\n+        if (getParent() instanceof XmlEvent event) {\n+            SettingsLog.log(this, value);\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        for (XmlElement producer : getProducers()) {\n+            Result result = producer.evaluate();\n+            if (!result.isNull()) {\n+                return result;\n+            }\n+        }\n+        return Result.NULL;\n+    }\n+\n+    public String getFullName() {\n+        if (getParent() instanceof XmlEvent event) {\n+            return event.getName() + \"#\" + getName();\n+        }\n+        return \"unknown\";\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlSetting.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+\n+\/\/ Corresponds to <test>\n+final class XmlTest extends XmlExpression {\n+\n+    public String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public String getOperator() {\n+        return attribute(\"operator\");\n+    }\n+\n+    public String getValue() {\n+        return attribute(\"value\");\n+    }\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\", \"operator\", \"value\");\n+    }\n+\n+    @Override\n+    protected void validateChildConstraints() throws ParseException {\n+        if (!getExpressions().isEmpty()) {\n+            throw new ParseException(\"Expected <test> to not have child elements\", 0);\n+        }\n+    }\n+\n+    @Override\n+    protected void validateAttributes() throws ParseException {\n+        super.validateAttributes();\n+        if (!getOperator().equalsIgnoreCase(\"equal\")) {\n+            throw new ParseException(\"Unknown operator '\" + getOperator() + \"', only supported is 'equal'\", 0);\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        Result ret = Result.NULL;\n+        List<XmlElement> producers = getProducers();\n+        if (!producers.isEmpty()) {\n+            XmlElement producer = producers.get(0);\n+            Result r = producer.evaluate();\n+            if (!r.isNull()) {\n+                ret = getValue().equals(r.value()) ? Result.TRUE : Result.FALSE;\n+            }\n+\n+        }\n+        return ret;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Corresponds to <text>\n+final class XmlText extends XmlInput {\n+\n+    @Override\n+    public String getOptionSyntax() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getName());\n+        sb.append(\"=<\");\n+        sb.append(getContentType().orElse(\"text\"));\n+        sb.append(\">\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void configure(String value) {\n+        if (isTimespan()) {\n+            value = Utilities.parseTimespan(value);\n+        }\n+        setContent(value);\n+        notifyListeners();\n+    }\n+\n+    @Override\n+    public void configure(UserInterface ui) throws AbortException {\n+        ui.println();\n+        ui.println(getLabel() + \": \" + getContent() + \"  (default)\");\n+        while (!readInput(ui)) {\n+            ;\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        return Result.of(getContent());\n+    }\n+\n+    private boolean readInput(UserInterface ui) throws AbortException {\n+        String line = ui.readLine();\n+        if (line.isBlank()) {\n+            ui.println(\"Using default: \" + getContent());\n+            return true;\n+        }\n+        if (isTimespan()) {\n+            try {\n+                line = Utilities.parseTimespan(line);\n+            } catch (IllegalArgumentException iae) {\n+                ui.println(iae.getMessage());\n+                return false;\n+            }\n+        }\n+        ui.println(\"Using: \" + line);\n+        configure(line);\n+        return true;\n+    }\n+\n+    private boolean isTimespan() {\n+        return getContentType().orElse(\"text\").equals(\"timespan\");\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlText.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -73,1 +73,1 @@\n-        ensureJFRFile(file);\n+        ensureFileExtension(file, \".jfr\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Assemble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.charset.Charset;\n@@ -51,1 +50,1 @@\n-    public final static String title = \"Tool for working with Flight Recorder files (.jfr)\";\n+    public final static String title = \"Tool for working with Flight Recorder files\";\n@@ -58,0 +57,1 @@\n+        commands.add(new Configure());\n@@ -159,0 +159,8 @@\n+    protected boolean acceptSwitch(Deque<String> options, String expected) throws UserSyntaxException {\n+        if (!options.isEmpty() && options.peek().equals(expected)) {\n+            options.remove();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n@@ -237,1 +245,1 @@\n-            ensureJFRFile(path);\n+            ensureFileExtension(path, \".jfr\");\n@@ -270,3 +278,3 @@\n-    final protected void ensureJFRFile(Path path) throws UserDataException {\n-        if (!path.toString().endsWith(\".jfr\")) {\n-            throw new UserDataException(\"filename must end with '.jfr'\");\n+    final protected void ensureFileExtension(Path path, String extension) throws UserDataException {\n+        if (!path.toString().endsWith(extension)) {\n+            throw new UserDataException(\"filename must end with '\" + extension + \"'\");\n@@ -417,1 +425,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,301 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.tool;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOError;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.jfr.internal.SecuritySupport;\n+import jdk.jfr.internal.SecuritySupport.SafePath;\n+import jdk.jfr.internal.jfc.JFC;\n+import jdk.jfr.internal.jfc.model.AbortException;\n+import jdk.jfr.internal.jfc.model.JFCModel;\n+import jdk.jfr.internal.jfc.model.SettingsLog;\n+import jdk.jfr.internal.jfc.model.UserInterface;\n+import jdk.jfr.internal.jfc.model.XmlInput;\n+\n+final class Configure extends Command {\n+    private final List<SafePath> inputFiles = new ArrayList<>();\n+\n+    @Override\n+    public List<String> getOptionSyntax() {\n+        List<String> list = new ArrayList<>();\n+        list.add(\"[--interactive] [--verbose]\");\n+        list.add(\"[--input <files>] [--output <file>]\");\n+        list.add(\"[option=value]* [event-setting=value]*\");\n+        return list;\n+    }\n+\n+    @Override\n+    protected String getTitle() {\n+        return \"Configures a .jfc file\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"configure\";\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Creates a custom .jfc-file for event configuration\";\n+    }\n+\n+    @Override\n+    public void displayOptionUsage(PrintStream stream) {\n+        stream.println(\"  --interactive           Interactive mode where the configuration is\");\n+        stream.println(\"                          determined by a set of questions.\");\n+        stream.println();\n+        stream.println(\"  --verbose               Displays the modified settings.\");\n+        stream.println();\n+        stream.println(\"  --input <files>         A comma-separated list of .jfc files from which\");\n+        stream.println(\"                          the new configuration is based. If no file is\");\n+        stream.println(\"                          specified, the default file in the JDK is used\");\n+        stream.println(\"                          (default.jfc). If 'none' is specified, the new\");\n+        stream.println(\"                          configuration starts empty.\");\n+        stream.println();\n+        stream.println(\"  --ouput <file>          The filename of the generated output file. If not\");\n+        stream.println(\"                          specified, the filename custom.jfc will be used.\");\n+        stream.println();\n+        stream.println(\"  option=value            The option value to modify. For available options,\");\n+        stream.println(\"                          see listed input files below.\");\n+        stream.println();\n+        stream.println(\"  event-setting=value     The event setting value to modify. Use the form:\");\n+        stream.println(\"                          <event-name>#<setting-name>=<value>\");\n+        stream.println(\"                          To add a new event setting, prefix the event name\");\n+        stream.println(\"                          with '+'.\");\n+        stream.println();\n+        stream.println(\"The whitespace delimiter can be omitted for timespan values, i.e. 20ms. For\");\n+        stream.println(\"more information about the settings syntax, see Javadoc of the jdk.jfr package.\");\n+        ensureInputFiles();\n+        for (SafePath path : inputFiles) {\n+            try {\n+                String name = path.toPath().getFileName().toString();\n+                displayParameters(stream, path, name);\n+            } catch (InvalidPathException | ParseException | IOException e) {\n+                stream.println(\"Unable read options for \" + path + \" \" + e.getMessage());\n+            }\n+        }\n+        stream.println();\n+        stream.println(\"To run interactive configuration wizard:\");\n+        stream.println();\n+        stream.println(\"  jfr configure --interactive\");\n+        stream.println();\n+        stream.println(\"Example usage:\");\n+        stream.println();\n+        stream.println(\"  jfr configure gc=high method-profiling=high --output high.jfc\");\n+        stream.println();\n+        stream.println(\"  jfr configure jdk.JavaMonitorEnter#threshold=1ms --output locks.jfc\");\n+        stream.println();\n+        stream.println(\"  jfr configure +HelloWorld#enabled=true +HelloWorld#stackTrace=true\");\n+        stream.println();\n+        stream.println(\"  jfr configure --input default.jfc,third-party.jfc --output unified.jfc\");\n+        stream.println();\n+        stream.println(\"  jfr configure --input none +Hello#enabled=true --output minimal.jfc\");\n+    }\n+\n+    private void displayParameters(PrintStream stream, SafePath path, String name) throws ParseException, IOException {\n+        JFCModel parameters = new JFCModel(path);\n+        stream.println();\n+        stream.println(\"Options for \" + name + \":\");\n+        stream.println();\n+        for (XmlInput input : parameters.getInputs()) {\n+            stream.println(\"  \" + input.getOptionSyntax());\n+            stream.println();\n+        }\n+    }\n+\n+    @Override\n+    public void execute(Deque<String> options) throws UserSyntaxException, UserDataException {\n+        boolean interactive = false;\n+        boolean log = false;\n+        SafePath output = null;\n+        Map<String, String> keyValues = new LinkedHashMap<>();\n+        int optionCount = options.size();\n+        while (optionCount > 0) {\n+            if (acceptSwitch(options, \"--interactive\")) {\n+                interactive = true;\n+            }\n+            if (acceptSwitch(options, \"--verbose\")) {\n+                log = true;\n+            }\n+            if (acceptOption(options, \"--input\")) {\n+                String value = options.pop();\n+                inputFiles.addAll(makeSafePathList(value));\n+            }\n+            if (acceptOption(options, \"--output\")) {\n+                if (output != null) {\n+                    throw new UserDataException(\"only one output file can be specified\");\n+                }\n+                String value = options.pop();\n+                output = makeJFCPath(value);\n+            }\n+            if (acceptKeyValue(options)) {\n+                String value = options.pop();\n+                var keyValue = value.split(\"=\");\n+                keyValues.put(keyValue[0], keyValue[1]);\n+            }\n+            if (optionCount == options.size()) {\n+                \/\/ No progress\n+                throw new UserSyntaxException(\"unknown option \" + options.peek());\n+            }\n+            optionCount = options.size();\n+        }\n+        if (!interactive && output == null && keyValues.isEmpty()) {\n+            throw new UserSyntaxException(\"missing argument\");\n+        }\n+        ensureInputFiles();\n+        configure(interactive, log, output, keyValues);\n+    }\n+\n+    private boolean acceptKeyValue(Deque<String> options) {\n+        if (!options.isEmpty()) {\n+            String keyValue = options.peek();\n+            int index = keyValue.indexOf(\"=\");\n+            return index > 0 && index < keyValue.length() - 1;\n+        }\n+        return false;\n+    }\n+\n+    private void configure(boolean interactive, boolean log, SafePath output, Map<String, String> options) throws UserDataException {\n+        try {\n+            if (output == null) {\n+                output = new SafePath(Path.of(\"custom.jfc\"));\n+            }\n+            UserInterface ui = new UserInterface();\n+            JFCModel model = new JFCModel(inputFiles);\n+            model.setLabel(\"Custom\");\n+            if (log) {\n+                SettingsLog.enable();\n+            }\n+            for (var option : options.entrySet()) {\n+                model.configure(option.getKey(), option.getValue());\n+            }\n+            SettingsLog.flush();\n+            try {\n+                if (interactive) {\n+                    int q = model.getInputs().size() + 1;\n+                    ui.println(\"============== .jfc Configuration Wizard ============\");\n+                    ui.println(\"This wizard will generate a JFR configuration file by\");\n+                    ui.println(\"asking \" + q + \" questions. Press ENTER to use the default\");\n+                    ui.println(\"value, or type Q to abort the wizard.\");\n+                    model.configure(ui);\n+                    output = filename(ui, output);\n+                }\n+            } catch (AbortException e) {\n+                ui.println(\"Abort.\");\n+                return;\n+            }\n+            model.saveToFile(output);\n+            ui.println(\"Configuration written successfully to:\");\n+            ui.println(output.toPath().toAbsolutePath().toString());\n+        } catch (IllegalArgumentException iae) {\n+            throw new UserDataException(iae.getMessage());\n+        } catch (FileNotFoundException ffe) {\n+            throw new UserDataException(\"could not find file: \" + ffe.getMessage());\n+        } catch (IOException ioe) {\n+            throw new UserDataException(\"i\/o error: \" + ioe.getMessage());\n+        } catch (ParseException pe) {\n+            pe.printStackTrace();\n+            throw new UserDataException(\"parsing error: \" + pe.getMessage());\n+        }\n+    }\n+\n+    private List<SafePath> makeSafePathList(String value) {\n+        List<SafePath> paths = new ArrayList<>();\n+        for (String name : value.split(\",\")) {\n+            paths.add(makeSafePath(name));\n+        }\n+        return paths;\n+    }\n+\n+    private SafePath makeSafePath(String path) {\n+        for (SafePath predefined : SecuritySupport.getPredefinedJFCFiles()) {\n+            try {\n+                String name = JFC.nameFromPath(predefined.toPath());\n+                if (name.equals(path) || (name + \".jfc\").equals(path)) {\n+                    return predefined;\n+                }\n+            } catch (IOException e) {\n+                throw new InternalError(\"Error in predefined .jfc file\", e);\n+            }\n+        }\n+        return new SafePath(path);\n+    }\n+\n+    private void ensureInputFiles() throws InternalError {\n+        if (inputFiles.isEmpty()) {\n+            for (SafePath predefined : SecuritySupport.getPredefinedJFCFiles()) {\n+                if (predefined.toString().endsWith(\"default.jfc\")) {\n+                    inputFiles.add(predefined);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static SafePath filename(UserInterface ui, SafePath file) throws AbortException {\n+        ui.println();\n+        ui.println(\"Filename: \" + file + \" (default)\");\n+        while (true) {\n+            String line = ui.readLine();\n+            try {\n+                if (line.isBlank()) {\n+                    return file;\n+                }\n+                if (line.endsWith(\".jfc\")) {\n+                    return new SafePath(line);\n+                }\n+                ui.println(\"Filename must end with .jfc.\");\n+            } catch (InvalidPathException ipe) {\n+                ui.println(\"Not a valid filename. \" + ipe.getMessage());\n+            }\n+        }\n+    }\n+\n+    private SafePath makeJFCPath(String file) throws UserDataException, UserSyntaxException {\n+        if (file.startsWith(\"--\")) {\n+            throw new UserSyntaxException(\"missing file\");\n+        }\n+        try {\n+            Path path = Path.of(file).toAbsolutePath();\n+            ensureFileExtension(path, \".jfc\");\n+            return new SafePath(path);\n+        } catch (IOError ioe) {\n+            throw new UserDataException(\"i\/o error reading file '\" + file + \"', \" + ioe.getMessage());\n+        } catch (InvalidPathException ipe) {\n+            throw new UserDataException(\"invalid path '\" + file + \"'\");\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Configure.java","additions":301,"deletions":0,"binary":false,"changes":301,"status":"added"},{"patch":"@@ -2,1 +2,0 @@\n-\n@@ -4,2 +3,3 @@\n-     Recommended way to edit .jfc files is to use Java Mission Control,\n-     see Window -> Flight Recorder Template Manager.\n+     Recommended way to edit .jfc files is to use the configure command of\n+     the 'jfr' tool, i.e. jfr configure, or JDK Mission Control\n+     see Window -> Flight Recorder Template Manager\n@@ -67,1 +67,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">20 ms<\/setting>\n@@ -73,1 +73,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">20 ms<\/setting>\n@@ -79,1 +79,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">20 ms<\/setting>\n@@ -85,1 +85,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">20 ms<\/setting>\n@@ -91,1 +91,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">20 ms<\/setting>\n@@ -123,1 +123,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -129,1 +129,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -146,1 +146,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">true<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">true<\/setting>\n@@ -150,1 +150,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -210,1 +210,1 @@\n-      <setting name=\"period\" control=\"thread-dump-interval\">everyChunk<\/setting>\n+      <setting name=\"period\" control=\"thread-dump\">everyChunk<\/setting>\n@@ -277,1 +277,1 @@\n-      <setting name=\"enabled\" control=\"heap-statistics-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n@@ -385,1 +385,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -390,1 +390,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -395,1 +395,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -400,1 +400,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -446,1 +446,1 @@\n-      <setting name=\"enabled\" control=\"promotion-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -450,1 +450,1 @@\n-      <setting name=\"enabled\" control=\"promotion-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -458,1 +458,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -467,1 +467,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -472,1 +472,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -476,1 +476,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -481,1 +481,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -485,3 +485,3 @@\n-      <setting name=\"enabled\" control=\"memory-leak-detection-enabled\">true<\/setting>\n-      <setting name=\"stackTrace\" control=\"memory-leak-detection-stack-trace\">false<\/setting>\n-      <setting name=\"cutoff\" control=\"memory-leak-detection-cutoff\">0 ns<\/setting>\n+      <setting name=\"enabled\" control=\"old-objects-enabled\">true<\/setting>\n+      <setting name=\"stackTrace\" control=\"old-objects-stack-trace\">false<\/setting>\n+      <setting name=\"cutoff\" control=\"old-objects-cutoff\">0 ns<\/setting>\n@@ -608,1 +608,1 @@\n-      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -613,1 +613,1 @@\n-      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -618,2 +618,2 @@\n-      <setting name=\"enabled\" control=\"enable-object-allocation\">true<\/setting>\n-      <setting name=\"throttle\" control=\"object-allocation-rate\">150\/s<\/setting>\n+      <setting name=\"enabled\" control=\"object-allocation-enabled\">true<\/setting>\n+      <setting name=\"throttle\" control=\"allocation-profiling\">150\/s<\/setting>\n@@ -641,1 +641,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">20 ms<\/setting>\n@@ -647,1 +647,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">20 ms<\/setting>\n@@ -653,1 +653,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">20 ms<\/setting>\n@@ -659,1 +659,1 @@\n-      <setting name=\"threshold\" control=\"socket-io-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n@@ -665,1 +665,1 @@\n-      <setting name=\"threshold\" control=\"socket-io-threshold\">20 ms<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">20 ms<\/setting>\n@@ -822,5 +822,5 @@\n-\n-    <!--\n-        Contents of the control element is not read by the JVM, it's used\n-        by Java Mission Control to change settings that carry the control attribute.\n-    -->\n+  <!--                                                                                                        \n+  Contents of the control element is not read by the JVM, it's used                                           \n+  by JDK Mission Control and the 'jfr' tool to change settings that                                           \n+  carry the control attribute.                                                                                \n+  -->\n@@ -828,1 +828,1 @@\n-      <selection name=\"gc-level\" default=\"detailed\" label=\"Garbage Collector\">\n+     <selection name=\"gc\" default=\"normal\" label=\"Garbage Collector\">\n@@ -830,2 +830,4 @@\n-        <option label=\"Normal\" name=\"detailed\">normal<\/option>\n-        <option label=\"All\" name=\"all\">all<\/option>\n+        <option label=\"Normal\" name=\"normal\">normal<\/option>\n+        <option label=\"Detailed\" name=\"detailed\">detailed<\/option>\n+        <option label=\"High, incl. TLABs\/PLABs (may cause many events)\" name=\"high\">high<\/option>\n+        <option label=\"All, incl. Heap Statistics (may cause long GCs)\" name=\"all\">all<\/option>\n@@ -836,2 +838,4 @@\n-          <test name=\"gc-level\" operator=\"equal\" value=\"normal\"\/>\n-          <test name=\"gc-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"normal\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -841,16 +845,1 @@\n-      <condition name=\"gc-enabled-all\" true=\"true\" false=\"false\">\n-        <test name=\"gc-level\" operator=\"equal\" value=\"all\"\/>\n-      <\/condition>\n-\n-      <selection name=\"memory-profiling\" default=\"low\" label=\"Memory Profiling\">\n-        <option label=\"Off\" name=\"off\">off<\/option>\n-        <option label=\"Object Allocation\" name=\"low\">low<\/option>\n-        <option label=\"Object Allocation and Promotion\" name=\"medium\">medium<\/option>\n-        <option label=\"All, including Heap Statistics (May cause long full GCs)\" name=\"all\">all<\/option>\n-      <\/selection>\n-\n-     <condition name=\"memory-profiling-enabled-low\" true=\"true\" false=\"false\">\n-        <test name=\"memory-profiling\" operator=\"equal\" value=\"low\"\/>\n-      <\/condition>\n-\n-      <condition name=\"object-allocation-enabled\" true=\"true\" false=\"false\">\n+      <condition name=\"gc-enabled-detailed\" true=\"true\" false=\"false\">\n@@ -858,3 +847,3 @@\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"low\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -864,8 +853,1 @@\n-      <condition name=\"object-allocation-rate\" true=\"300\/s\" false=\"150\/s\">\n-         <or>\n-           <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-           <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n-         <\/or>\n-       <\/condition>\n-\n-      <condition name=\"promotion-enabled\" true=\"true\" false=\"false\">\n+      <condition name=\"gc-enabled-high\" true=\"true\" false=\"false\">\n@@ -873,2 +855,2 @@\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -878,2 +860,16 @@\n-      <condition name=\"heap-statistics-enabled\" true=\"true\" false=\"false\">\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n+      <condition name=\"gc-enabled-all\" true=\"true\" false=\"false\">\n+        <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n+      <\/condition>\n+\n+      <selection name=\"allocation-profiling\" default=\"low\" label=\"Allocation Profiling\">\n+        <option label=\"Off\" name=\"off\">0\/s<\/option>\n+        <option label=\"Low\" name=\"low\">150\/s<\/option>\n+        <option label=\"Medium\" name=\"medium\">300\/s<\/option>\n+        <option label=\"High\" name=\"high\">1000\/s<\/option>\n+        <option label=\"Maximum\" name=\"maximum\">1000000000\/s<\/option>\n+      <\/selection>\n+\n+      <condition name=\"object-allocation-enabled\" true=\"true\" false=\"false\">\n+\t <not>\n+          <test name=\"allocation-profiling\" operator=\"equal\" value=\"off\"\/>\n+        <\/not>\n@@ -882,1 +878,1 @@\n-      <selection name=\"compiler-level\" default=\"normal\" label=\"Compiler\">\n+      <selection name=\"compiler\" default=\"normal\" label=\"Compiler\">\n@@ -890,1 +886,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"off\"\/>\n@@ -895,2 +891,2 @@\n-          <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n-          <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -901,1 +897,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -905,1 +901,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"normal\"\/>\n@@ -909,1 +905,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n@@ -913,1 +909,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -917,1 +913,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"normal\"\/>\n@@ -921,1 +917,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n@@ -925,1 +921,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -928,1 +924,1 @@\n-      <selection name=\"method-sampling-interval\" default=\"normal\" label=\"Method Sampling\">\n+      <selection name=\"method-profiling\" default=\"normal\" label=\"Method Profiling\">\n@@ -932,1 +928,1 @@\n-        <option label=\"Ludicrous (High Overhead)\" name=\"ludicrous\">ludicrous<\/option>\n+        <option label=\"Maximum (High Overhead)\" name=\"max\">max<\/option>\n@@ -936,1 +932,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -940,1 +936,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"normal\"\/>\n@@ -944,1 +940,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"high\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"high\"\/>\n@@ -948,1 +944,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"ludicrous\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"max\"\/>\n@@ -952,1 +948,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -957,3 +953,3 @@\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"normal\"\/>\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"high\"\/>\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"ludicrous\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"normal\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"max\"\/>\n@@ -964,1 +960,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -967,1 +963,1 @@\n-      <selection name=\"thread-dump-interval\" default=\"normal\" label=\"Thread Dump\">\n+      <selection name=\"thread-dump\" default=\"once\" label=\"Thread Dump\">\n@@ -969,4 +965,4 @@\n-        <option label=\"At least Once\" name=\"normal\">everyChunk<\/option>\n-        <option label=\"Every 60 s\" name=\"everyMinute\">60 s<\/option>\n-        <option label=\"Every 10 s\" name=\"everyTenSecond\">10 s<\/option>\n-        <option label=\"Every 1 s\" name=\"everySecond\">1 s<\/option>\n+        <option label=\"At least Once\" name=\"once\">everyChunk<\/option>\n+        <option label=\"Every 60 s\" name=\"60s\">60 s<\/option>\n+        <option label=\"Every 10 s\" name=\"10s\">10 s<\/option>\n+        <option label=\"Every 1 s\" name=\"1s\">1 s<\/option>\n@@ -976,1 +972,1 @@\n-        <test name=\"thread-dump-interval\" operator=\"equal\" value=\"999 d\"\/>\n+        <test name=\"thread-dump\" operator=\"equal\" value=\"999 d\"\/>\n@@ -979,1 +975,1 @@\n-      <selection name=\"exception-level\" default=\"errors\" label=\"Exceptions\">\n+      <selection name=\"exceptions\" default=\"errors\" label=\"Exceptions\">\n@@ -987,2 +983,2 @@\n-          <test name=\"exception-level\" operator=\"equal\" value=\"errors\"\/>\n-          <test name=\"exception-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"exceptions\" operator=\"equal\" value=\"errors\"\/>\n+          <test name=\"exceptions\" operator=\"equal\" value=\"all\"\/>\n@@ -993,1 +989,1 @@\n-        <test name=\"exception-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"exceptions\" operator=\"equal\" value=\"all\"\/>\n@@ -996,1 +992,1 @@\n-      <selection name=\"memory-leak-detection\" default=\"minimal\" label=\"Memory Leak Detection\">\n+      <selection name=\"memory-leaks\" default=\"types\" label=\"Memory Leak Detection\">\n@@ -998,3 +994,3 @@\n-        <option label=\"Object Types\" name=\"minimal\">minimal<\/option>\n-        <option label=\"Object Types + Allocation Stack Traces\" name=\"medium\">medium<\/option>\n-        <option label=\"Object Types + Allocation Stack Traces + Path to GC Root\" name=\"full\">full<\/option>\n+        <option label=\"Object Types\" name=\"types\">types<\/option>\n+        <option label=\"Object Types + Allocation Stack Traces\" name=\"stack-traces\">stack-traces<\/option>\n+        <option label=\"Object Types + Allocation Stack Traces + Path to GC Root\" name=\"gc-roots\">gc-roots<\/option>\n@@ -1003,2 +999,2 @@\n-      <condition name=\"memory-leak-detection-enabled\" true=\"false\" false=\"true\">\n-        <test name=\"memory-leak-detection\" operator=\"equal\" value=\"off\"\/>\n+      <condition name=\"old-objects-enabled\" true=\"false\" false=\"true\">\n+        <test name=\"memory-leaks\" operator=\"equal\" value=\"off\"\/>\n@@ -1007,1 +1003,1 @@\n-      <condition name=\"memory-leak-detection-stack-trace\" true=\"true\" false=\"false\">\n+      <condition name=\"old-objects-stack-trace\" true=\"true\" false=\"false\">\n@@ -1009,2 +1005,2 @@\n-          <test name=\"memory-leak-detection\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-leak-detection\" operator=\"equal\" value=\"full\"\/>\n+          <test name=\"memory-leaks\" operator=\"equal\" value=\"stack-traces\"\/>\n+          <test name=\"memory-leaks\" operator=\"equal\" value=\"gc-roots\"\/>\n@@ -1014,2 +1010,2 @@\n-      <condition name=\"memory-leak-detection-cutoff\" true=\"1 h\" false=\"0 ns\">\n-        <test name=\"memory-leak-detection\" operator=\"equal\" value=\"full\"\/>\n+      <condition name=\"old-objects-cutoff\" true=\"1 h\" false=\"0 ns\">\n+        <test name=\"memory-leaks\" operator=\"equal\" value=\"gc-roots\"\/>\n@@ -1018,1 +1014,1 @@\n-      <text name=\"synchronization-threshold\" label=\"Synchronization Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n+      <text name=\"locking-threshold\" label=\"Locking Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n@@ -1020,1 +1016,1 @@\n-      <text name=\"file-io-threshold\" label=\"File I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n+      <text name=\"file-threshold\" label=\"File I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n@@ -1022,1 +1018,1 @@\n-      <text name=\"socket-io-threshold\" label=\"Socket I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n+      <text name=\"socket-threshold\" label=\"Socket I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">20 ms<\/text>\n@@ -1024,1 +1020,1 @@\n-      <flag name=\"class-loading-enabled\" label=\"Class Loading\">false<\/flag>\n+      <flag name=\"class-loading\" label=\"Class Loading\">false<\/flag>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":121,"deletions":125,"binary":false,"changes":246,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-\n@@ -4,2 +3,3 @@\n-     Recommended way to edit .jfc files is to use Java Mission Control,\n-     see Window -> Flight Recorder Template Manager.\n+     Recommended way to edit .jfc files is to use the configure command of\n+     the 'jfr' tool, i.e. jfr configure, or JDK Mission Control\n+     see Window -> Flight Recorder Template Manager\n@@ -67,1 +67,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">10 ms<\/setting>\n@@ -73,1 +73,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">10 ms<\/setting>\n@@ -79,1 +79,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">10 ms<\/setting>\n@@ -85,1 +85,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">10 ms<\/setting>\n@@ -91,1 +91,1 @@\n-      <setting name=\"threshold\" control=\"synchronization-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"locking-threshold\">10 ms<\/setting>\n@@ -123,1 +123,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -129,1 +129,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -146,1 +146,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">true<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">true<\/setting>\n@@ -150,1 +150,1 @@\n-      <setting name=\"enabled\" control=\"class-loading-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"class-loading\">false<\/setting>\n@@ -210,1 +210,1 @@\n-      <setting name=\"period\" control=\"thread-dump-interval\">60 s<\/setting>\n+      <setting name=\"period\" control=\"thread-dump\">60 s<\/setting>\n@@ -277,1 +277,1 @@\n-      <setting name=\"enabled\" control=\"heap-statistics-enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n@@ -385,1 +385,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -390,1 +390,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -395,1 +395,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -400,1 +400,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -446,1 +446,1 @@\n-      <setting name=\"enabled\" control=\"promotion-enabled\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -450,1 +450,1 @@\n-      <setting name=\"enabled\" control=\"promotion-enabled\">true<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">true<\/setting>\n@@ -458,1 +458,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -467,1 +467,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -472,1 +472,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -476,1 +476,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -481,1 +481,1 @@\n-      <setting name=\"enabled\" control=\"gc-enabled-all\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -485,3 +485,3 @@\n-      <setting name=\"enabled\" control=\"memory-leak-detection-enabled\">true<\/setting>\n-      <setting name=\"stackTrace\" control=\"memory-leak-detection-stack-trace\">true<\/setting>\n-      <setting name=\"cutoff\" control=\"memory-leak-detection-cutoff\">0 ns<\/setting>\n+      <setting name=\"enabled\" control=\"old-objects-enabled\">true<\/setting>\n+      <setting name=\"stackTrace\" control=\"old-objects-stack-trace\">true<\/setting>\n+      <setting name=\"cutoff\" control=\"old-objects-cutoff\">0 ns<\/setting>\n@@ -608,1 +608,1 @@\n-      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -613,1 +613,1 @@\n-      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"enabled\" control=\"gc-enabled-high\">false<\/setting>\n@@ -618,2 +618,2 @@\n-      <setting name=\"enabled\" control=\"enable-object-allocation\">true<\/setting>\n-      <setting name=\"throttle\" control=\"object-allocation-rate\">300\/s<\/setting>\n+      <setting name=\"enabled\" control=\"object-allocation-enabled\">true<\/setting>\n+      <setting name=\"throttle\" control=\"allocation-profiling\">300\/s<\/setting>\n@@ -641,1 +641,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">10 ms<\/setting>\n@@ -647,1 +647,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">10 ms<\/setting>\n@@ -653,1 +653,1 @@\n-      <setting name=\"threshold\" control=\"file-io-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"file-threshold\">10 ms<\/setting>\n@@ -659,1 +659,1 @@\n-      <setting name=\"threshold\" control=\"socket-io-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n@@ -665,1 +665,1 @@\n-      <setting name=\"threshold\" control=\"socket-io-threshold\">10 ms<\/setting>\n+      <setting name=\"threshold\" control=\"socket-threshold\">10 ms<\/setting>\n@@ -822,4 +822,5 @@\n-    <!--\n-         Contents of the control element is not read by the JVM, it's used\n-         by Java Mission Control to change settings that carry the control attribute.\n-    -->\n+  <!--                                                                                                        \n+  Contents of the control element is not read by the JVM, it's used                                           \n+  by JDK Mission Control and the 'jfr' tool to change settings that                                           \n+  carry the control attribute.                                                                                \n+  -->\n@@ -827,2 +828,1 @@\n-\n-      <selection name=\"gc-level\" default=\"detailed\" label=\"Garbage Collector\">\n+        <selection name=\"gc\" default=\"detailed\" label=\"Garbage Collector\">\n@@ -830,2 +830,4 @@\n-        <option label=\"Normal\" name=\"detailed\">normal<\/option>\n-        <option label=\"All\" name=\"all\">all<\/option>\n+        <option label=\"Normal\" name=\"normal\">normal<\/option>\n+        <option label=\"Detailed\" name=\"detailed\">detailed<\/option>\n+        <option label=\"High, incl. TLABs\/PLABs (may cause many events)\" name=\"high\">high<\/option>\n+        <option label=\"All, incl. Heap Statistics (may cause long GCs)\" name=\"all\">all<\/option>\n@@ -836,2 +838,4 @@\n-          <test name=\"gc-level\" operator=\"equal\" value=\"normal\"\/>\n-          <test name=\"gc-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"normal\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -841,13 +845,6 @@\n-      <condition name=\"gc-enabled-all\" true=\"true\" false=\"false\">\n-        <test name=\"gc-level\" operator=\"equal\" value=\"all\"\/>\n-      <\/condition>\n-\n-      <selection name=\"memory-profiling\" default=\"low\" label=\"Memory Profiling\">\n-        <option label=\"Off\" name=\"off\">off<\/option>\n-        <option label=\"Object Allocation\" name=\"low\">low<\/option>\n-        <option label=\"Object Allocation and Promotion\" name=\"medium\">medium<\/option>\n-        <option label=\"All, including Heap Statistics (May cause long full GCs)\" name=\"all\">all<\/option>\n-      <\/selection>\n-\n-     <condition name=\"memory-profiling-enabled-low\" true=\"true\" false=\"false\">\n-        <test name=\"memory-profiling\" operator=\"equal\" value=\"low\"\/>\n+      <condition name=\"gc-enabled-detailed\" true=\"true\" false=\"false\">\n+       <or>\n+          <test name=\"gc\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n+       <\/or>\n@@ -856,1 +853,1 @@\n-      <condition name=\"object-allocation-enabled\" true=\"true\" false=\"false\">\n+      <condition name=\"gc-enabled-high\" true=\"true\" false=\"false\">\n@@ -858,3 +855,2 @@\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"low\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -864,12 +860,2 @@\n-      <condition name=\"object-allocation-rate\" true=\"300\/s\" false=\"150\/s\">\n-         <or>\n-           <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-           <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n-         <\/or>\n-       <\/condition>\n-\n-      <condition name=\"promotion-enabled\" true=\"true\" false=\"false\">\n-        <or>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n-        <\/or>\n+      <condition name=\"gc-enabled-all\" true=\"true\" false=\"false\">\n+        <test name=\"gc\" operator=\"equal\" value=\"all\"\/>\n@@ -878,2 +864,12 @@\n-      <condition name=\"heap-statistics-enabled\" true=\"true\" false=\"false\">\n-          <test name=\"memory-profiling\" operator=\"equal\" value=\"all\"\/>\n+      <selection name=\"allocation-profiling\" default=\"medium\" label=\"Allocation Profiling\">\n+        <option label=\"Off\" name=\"off\">0\/s<\/option>\n+        <option label=\"Low\" name=\"low\">150\/s<\/option>\n+        <option label=\"Medium\" name=\"medium\">300\/s<\/option>\n+\t    <option label=\"High\" name=\"high\">1000\/s<\/option>\n+        <option label=\"Maximum\" name=\"maximum\">1000000000\/s<\/option>\n+      <\/selection>\n+\n+      <condition name=\"object-allocation-enabled\" true=\"true\" false=\"false\">\n+        <not>\n+          <test name=\"allocation-profiling\" operator=\"equal\" value=\"off\"\/>\n+        <\/not>\n@@ -881,1 +877,2 @@\n-      <selection name=\"compiler-level\" default=\"detailed\" label=\"Compiler\">\n+\n+      <selection name=\"compiler\" default=\"detailed\" label=\"Compiler\">\n@@ -889,1 +886,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"off\"\/>\n@@ -894,2 +891,2 @@\n-          <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n-          <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n+          <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -900,1 +897,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -904,1 +901,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"normal\"\/>\n@@ -908,1 +905,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n@@ -912,1 +909,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -916,1 +913,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"normal\"\/>\n@@ -920,1 +917,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"detailed\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"detailed\"\/>\n@@ -924,1 +921,1 @@\n-        <test name=\"compiler-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"compiler\" operator=\"equal\" value=\"all\"\/>\n@@ -927,1 +924,1 @@\n-      <selection name=\"method-sampling-interval\" default=\"normal\" label=\"Method Sampling\">\n+      <selection name=\"method-profiling\" default=\"high\" label=\"Method Profiling\">\n@@ -931,1 +928,1 @@\n-        <option label=\"Ludicrous (High Overhead)\" name=\"ludicrous\">ludicrous<\/option>\n+        <option label=\"Maximum (High Overhead)\" name=\"max\">max<\/option>\n@@ -935,1 +932,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -939,1 +936,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"normal\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"normal\"\/>\n@@ -943,1 +940,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"high\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"high\"\/>\n@@ -947,1 +944,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"ludicrous\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"max\"\/>\n@@ -951,1 +948,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -956,3 +953,3 @@\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"normal\"\/>\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"high\"\/>\n-          <test name=\"method-sampling-interval\" operator=\"equal\" value=\"ludicrous\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"normal\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"high\"\/>\n+          <test name=\"method-profiling\" operator=\"equal\" value=\"max\"\/>\n@@ -963,1 +960,1 @@\n-        <test name=\"method-sampling-interval\" operator=\"equal\" value=\"off\"\/>\n+        <test name=\"method-profiling\" operator=\"equal\" value=\"off\"\/>\n@@ -966,1 +963,1 @@\n-      <selection name=\"thread-dump-interval\" default=\"everyMinute\" label=\"Thread Dump\">\n+      <selection name=\"thread-dump\" default=\"once\" label=\"Thread Dump\">\n@@ -968,4 +965,4 @@\n-        <option label=\"At least Once\" name=\"normal\">everyChunk<\/option>\n-        <option label=\"Every 60 s\" name=\"everyMinute\">60 s<\/option>\n-        <option label=\"Every 10 s\" name=\"everyTenSecond\">10 s<\/option>\n-        <option label=\"Every 1 s\" name=\"everySecond\">1 s<\/option>\n+        <option label=\"At least Once\" name=\"once\">everyChunk<\/option>\n+        <option label=\"Every 60 s\" name=\"60s\">60 s<\/option>\n+        <option label=\"Every 10 s\" name=\"10s\">10 s<\/option>\n+        <option label=\"Every 1 s\" name=\"1s\">1 s<\/option>\n@@ -975,1 +972,1 @@\n-        <test name=\"thread-dump-interval\" operator=\"equal\" value=\"999 d\"\/>\n+        <test name=\"thread-dump\" operator=\"equal\" value=\"999 d\"\/>\n@@ -978,1 +975,1 @@\n-      <selection name=\"exception-level\" default=\"errors\" label=\"Exceptions\">\n+      <selection name=\"exceptions\" default=\"errors\" label=\"Exceptions\">\n@@ -986,2 +983,2 @@\n-          <test name=\"exception-level\" operator=\"equal\" value=\"errors\"\/>\n-          <test name=\"exception-level\" operator=\"equal\" value=\"all\"\/>\n+          <test name=\"exceptions\" operator=\"equal\" value=\"errors\"\/>\n+          <test name=\"exceptions\" operator=\"equal\" value=\"all\"\/>\n@@ -992,1 +989,1 @@\n-        <test name=\"exception-level\" operator=\"equal\" value=\"all\"\/>\n+        <test name=\"exceptions\" operator=\"equal\" value=\"all\"\/>\n@@ -995,1 +992,1 @@\n-      <selection name=\"memory-leak-detection\" default=\"medium\" label=\"Memory Leak Detection\">\n+      <selection name=\"memory-leaks\" default=\"stack-traces\" label=\"Memory Leak Detection\">\n@@ -997,3 +994,3 @@\n-        <option label=\"Object Types\" name=\"minimal\">minimal<\/option>\n-        <option label=\"Object Types + Allocation Stack Traces\" name=\"medium\">medium<\/option>\n-        <option label=\"Object Types + Allocation Stack Traces + Path to GC Root\" name=\"full\">full<\/option>\n+        <option label=\"Object Types\" name=\"types\">types<\/option>\n+        <option label=\"Object Types + Allocation Stack Traces\" name=\"stack-traces\">stack-traces<\/option>\n+        <option label=\"Object Types + Allocation Stack Traces + Path to GC Root\" name=\"gc-roots\">gc-roots<\/option>\n@@ -1002,2 +999,2 @@\n-      <condition name=\"memory-leak-detection-enabled\" true=\"false\" false=\"true\">\n-        <test name=\"memory-leak-detection\" operator=\"equal\" value=\"off\"\/>\n+      <condition name=\"old-objects-enabled\" true=\"false\" false=\"true\">\n+        <test name=\"memory-leaks\" operator=\"equal\" value=\"off\"\/>\n@@ -1006,1 +1003,1 @@\n-      <condition name=\"memory-leak-detection-stack-trace\" true=\"true\" false=\"false\">\n+      <condition name=\"old-objects-stack-trace\" true=\"true\" false=\"false\">\n@@ -1008,2 +1005,2 @@\n-          <test name=\"memory-leak-detection\" operator=\"equal\" value=\"medium\"\/>\n-          <test name=\"memory-leak-detection\" operator=\"equal\" value=\"full\"\/>\n+          <test name=\"memory-leaks\" operator=\"equal\" value=\"stack-traces\"\/>\n+          <test name=\"memory-leaks\" operator=\"equal\" value=\"gc-roots\"\/>\n@@ -1013,2 +1010,2 @@\n-      <condition name=\"memory-leak-detection-cutoff\" true=\"1 h\" false=\"0 ns\">\n-        <test name=\"memory-leak-detection\" operator=\"equal\" value=\"full\"\/>\n+      <condition name=\"old-objects-cutoff\" true=\"1 h\" false=\"0 ns\">\n+        <test name=\"memory-leaks\" operator=\"equal\" value=\"gc-roots\"\/>\n@@ -1017,1 +1014,1 @@\n-      <text name=\"synchronization-threshold\" label=\"Synchronization Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n+      <text name=\"locking-threshold\" label=\"Locking Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n@@ -1019,1 +1016,1 @@\n-      <text name=\"file-io-threshold\" label=\"File I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n+      <text name=\"file-threshold\" label=\"File I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n@@ -1021,1 +1018,1 @@\n-      <text name=\"socket-io-threshold\" label=\"Socket I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n+      <text name=\"socket-threshold\" label=\"Socket I\/O Threshold\" contentType=\"timespan\" minimum=\"0 s\">10 ms<\/text>\n@@ -1023,1 +1020,1 @@\n-      <flag name=\"class-loading-enabled\" label=\"Class Loading\">false<\/flag>\n+      <flag name=\"class-loading\" label=\"Class Loading\">false<\/flag>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":122,"deletions":125,"binary":false,"changes":247,"status":"modified"},{"patch":"@@ -0,0 +1,362 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.tool;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import jdk.jfr.Configuration;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\/**\n+ * @test\n+ * @summary Test jfr configure\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.tool.TestConfigure\n+ *\/\n+public class TestConfigure {\n+\n+    private static final String DIR = System.getProperty(\"test.src\", \".\");\n+\n+    public static void main(String... args) throws Throwable {\n+        testSelection();\n+        testText();\n+        testFlag();\n+        testCondition();\n+        testAnd();\n+        testOr();\n+        testNone();\n+        testMissingControl();\n+        testDefault();\n+        testCopyPredefined();\n+        testSuperflouos();\n+        testModify();\n+        testAdding();\n+        testUnification();\n+        testTimespan();\n+        testVerbose();\n+    }\n+\n+    private static void testVerbose() throws Throwable {\n+        var input = newInputFile(\"flag.jfc\");\n+\n+        var output = newOutputFile(\"verbose-1.jfc\");\n+        var result = jfrConfigure(\"--input\", input, \"--verbose\", \"mammal=true\", \"--output\", output);\n+        result.shouldContain(\"com.example.Lion#enabled=true\");\n+        result.shouldContain(\"com.example.Tiger#enabled=true\");\n+\n+        output = newOutputFile(\"verbose-2.jfc\");\n+        result = jfrConfigure(\"--input\", input, \"--verbose\", \"+com.example.Albatross#enabled=true\", \"--output\",  output);\n+        result.shouldContain(\"com.example.Albatross#enabled=true\");\n+    }\n+\n+    private static void testTimespan() throws Throwable {\n+        var input = newInputFile(\"timespan.jfc\");\n+\n+        var output = newOutputFile(\"quoted-timespan.jfc\");\n+        jfrConfigure(\"--input\", input, \"value=20 s\",\"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#threshold\", \"20 s\");\n+        expected.put(\"com.example.Lion#period\", \"20 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"compact-timespan.jfc\");\n+        jfrConfigure(\"--input\", input, \"value=13s\",\"--output\", output);\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#threshold\", \"13 s\");\n+        expected.put(\"com.example.Lion#period\", \"13 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"threshold-period-timespan.jfc\");\n+        jfrConfigure(\"--input\", input,\n+                \"com.example.Tiger#threshold=2s\",\n+                \"com.example.Lion#period=3s\",\n+                \"--output\", output);\n+\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#threshold\", \"2 s\");\n+        expected.put(\"com.example.Lion#period\", \"3 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testUnification() throws Throwable {\n+        var input1 = newInputFile(\"or.jfc\");\n+        var input2 = newInputFile(\"and.jfc\");\n+        var output = newOutputFile(\"combined.jfc\");\n+\n+        jfrConfigure(\"--input\", input1 + \",\" + input2, \"--output\", output);\n+\n+        var input1Setting = readSettings(input1);\n+        var input2Setting = readSettings(input2);\n+        var outputSetting = readSettings(output);\n+\n+        Map<String, String> expected = new HashMap<>();\n+        expected.putAll(input1Setting);\n+        expected.putAll(input2Setting);\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testAdding() throws Throwable {\n+        var input = newInputFile(\"plain.jfc\");\n+\n+        var output = newOutputFile(\"test-adding-succeed-1.jfc\");\n+        var result = jfrConfigure(\"--input\", input, \"+com.example.Tiger#legs=4\", \"--output\", output);\n+        result.shouldNotContain(\"Could not find\");\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#legs\", \"4\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"test-adding-succeed-2.jfc\");\n+        result = jfrConfigure(\"--input\", input, \"+com.example.Foo#bar=baz\", \"--output\", output);\n+        result.shouldNotContain(\"Could not find\");\n+\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"com.example.Foo#bar\", \"baz\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testModify() throws Throwable {\n+        var input = newInputFile(\"plain.jfc\");\n+\n+        var output = newOutputFile(\"test-modify-fail-1.jfc\");\n+        var result = jfrConfigure(\"--input\", input, \"com.example.Zebra#stackTrace=true\", \"--output\", output);\n+        result.shouldContain(\"Could not find event 'com.example.Zebra'\");\n+\n+        output = newOutputFile(\"test-modify-fail-2.jfc\");\n+        result = jfrConfigure(\"--input\", input, \"com.example.Tiger#foo=true\", \"--output\", output);\n+        result.shouldContain(\"Could not find setting 'foo' for event 'com.example.Tiger'\");\n+\n+        output = newOutputFile(\"test-modify-succeed.jfc\");\n+        result = jfrConfigure(\"--input\", input, \"com.example.Tiger#enabled=true\", \"--output\", output);\n+        result.shouldNotContain(\"Could not find\");\n+\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#enabled\", \"true\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    \/\/ JMC may add attributes or elements, make sure some random elements\/attributes survive\n+    private static void testSuperflouos() throws Throwable {\n+        var output = newOutputFile(\"test-superfluous.jfc\");\n+        var input = newInputFile(\"superfluous.jfc\");\n+        jfrConfigure(\"--input\", input, \"--output\", output);\n+        String content = Files.readString(Path.of(output));\n+        for (String t : List.of(\"legs=\\\"4\\\"\", \"radio\", \"red\", \"<\/radio>\", \"option\")) {\n+            if (!content.contains(t)) {\n+                throw new Exception(\"Expected superfluous element '\" + t + \"' or attribute to survive\");\n+            }\n+        }\n+    }\n+\n+    private static void testMissingControl() throws Throwable {\n+        var output = newOutputFile(\"missed.jfc\");\n+        var input = newInputFile(\"missing.jfc\");\n+        var result = jfrConfigure(\"--input\", input, \"--output\", output);\n+        result.shouldContain(\"Warning! Setting 'com.example.Tiger#enabled' refers to missing control 'tigre'\");\n+     }\n+\n+    private static void testDefault() throws Throwable {\n+        var output = newOutputFile(\"fresh.jfc\");\n+        var result = jfrConfigure(\"--output\", output);\n+        result.shouldNotContain(\"Warning\"); \/\/ checks dangling control reference in default.jfc\n+        var outputSetting = readSettings(output);\n+        aseertEqual(outputSetting, Configuration.getConfiguration(\"default\").getSettings());\n+    }\n+\n+    private static void testCopyPredefined() throws Throwable {\n+        var output = newOutputFile(\"new.jfc\");\n+        var result = jfrConfigure(\"--input\", \"profile\", \"--output\", output);\n+        result.shouldNotContain(\"Warning\"); \/\/ checks missing control reference in profile.jfc\n+\n+        var outputSetting = readSettings(output);\n+        aseertEqual(outputSetting, Configuration.getConfiguration(\"profile\").getSettings());\n+    }\n+\n+    private static void testNone() throws Throwable {\n+        var output = newOutputFile(\"new.jfc\");\n+        jfrConfigure(\"--input\", \"none\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        aseertEqual(outputSetting, Map.of());\n+    }\n+\n+    private static void testOr() throws Throwable {\n+        var output = newOutputFile(\"test-or-true.jfc\");\n+        var input = newInputFile(\"or.jfc\");\n+        jfrConfigure(\"--input\", input, \"month=May\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"season.Spring#enabled\", \"true\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"test-or-false.jfc\");\n+        jfrConfigure(\"--input\", input, \"month=September\", \"--output\", output);\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"season.Spring#enabled\", \"false\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testAnd() throws Throwable {\n+        var output = newOutputFile(\"test-and-true.jfc\");\n+        var input = newInputFile(\"and.jfc\");\n+        jfrConfigure(\"--input\", input,\n+                \"closure=true\",\n+                \"identity=true\",\n+                \"associativity=true\",\n+                \"inverse=true\",\n+                \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"algebra.Group#enabled\", \"true\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"test-and-false.jfc\");\n+        jfrConfigure(\"--input\", input,\n+                \"closure=true\",\n+                \"identity=true\",\n+                \"associativity=true\",\n+                \"inverse=false\",\n+                \"--output\", output);\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"algebra.Group#enabled\", \"false\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+\n+    private static void testCondition() throws Throwable {\n+        var output = newOutputFile(\"test-condition-1.jfc\");\n+        var input = newInputFile(\"condition.jfc\");\n+        jfrConfigure(\"--input\", input, \"variable=activate\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#period\", \"1 s\");\n+        expected.put(\"com.example.Lion#period\", \"3 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+\n+        output = newOutputFile(\"test-condition-2.jfc\");\n+        jfrConfigure(\"--input\", input, \"variable=whatever\", \"--output\", output);\n+        outputSetting = readSettings(output);\n+        expected = readSettings(input);\n+        expected.put(\"com.example.Lion#period\", \"5 s\");\n+        expected.put(\"com.example.Zebra#period\", \"7 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testFlag() throws Throwable {\n+        var output = newOutputFile(\"test-flag.jfc\");\n+        var input = newInputFile(\"flag.jfc\");\n+        jfrConfigure(\"--input\", input, \"mammal=true\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#enabled\", \"true\");\n+        expected.put(\"com.example.Lion#enabled\", \"true\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testText() throws Throwable {\n+        var output = newOutputFile(\"test-text.jfc\");\n+        var input = newInputFile(\"text.jfc\");\n+        jfrConfigure(\"--input\", input, \"animal-threshold=3s\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#threshold\", \"3 s\");\n+        expected.put(\"com.example.Lion#threshold\", \"3 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static void testSelection() throws Throwable {\n+        var output = newOutputFile(\"test-selection.jfc\");\n+        var input = newInputFile(\"selection.jfc\");\n+        jfrConfigure(\"--input\", input, \"animal=medium\", \"--output\", output);\n+        var outputSetting = readSettings(output);\n+        var expected = readSettings(input);\n+        expected.put(\"com.example.Tiger#threshold\", \"10 s\");\n+        expected.put(\"com.example.Lion#threshold\", \"10 s\");\n+\n+        aseertEqual(outputSetting, expected);\n+    }\n+\n+    private static String newInputFile(String filename) {\n+        return Path.of(DIR, \"configure\", filename).toAbsolutePath().toString();\n+    }\n+\n+    private static Map<String, String> readSettings(String text) throws IOException, ParseException {\n+        return Configuration.create(Path.of(text)).getSettings();\n+    }\n+\n+    private static OutputAnalyzer jfrConfigure(String... args) throws Throwable {\n+        String[] all = new String[args.length + 1];\n+        all[0] = \"configure\";\n+        for (int i = 0; i < args.length; i++) {\n+            all[i + 1] = args[i];\n+        }\n+        OutputAnalyzer o = ExecuteHelper.jfr(all);\n+        System.out.println(o.getOutput());\n+        return o;\n+    }\n+\n+    private static String newOutputFile(String filename) {\n+        return Path.of(DIR, System.currentTimeMillis() + filename).toAbsolutePath().toString();\n+    }\n+\n+    private static void aseertEqual(Map<String, String> output, Map<String, String> expected) throws Exception {\n+        if (!output.equals(expected)) {\n+            System.out.println(\"Output:\");\n+            for (var e : output.entrySet()) {\n+                System.out.println(\"\\\"\" + e.getKey() + \"=\" + e.getValue() + \"\\\"\");\n+            }\n+            System.out.println(\"Expected:\");\n+            for (var e : expected.entrySet()) {\n+                System.out.println(\"\\\"\" + e.getKey() + \"=\" + e.getValue() + \"\\\"\");\n+            }\n+            throw new Exception(\"Mismatch between output and expected\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestConfigure.java","additions":362,"deletions":0,"binary":false,"changes":362,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test and\">\n+\n+    <event name=\"algebra.Group\">\n+      <setting name=\"enabled\" control=\"group\">unknown<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <flag name=\"closure\" label=\"Close\">false<\/flag>\n+      <flag name=\"identity\" label=\"Identity\">false<\/flag>\n+      <flag name=\"associativity\" label=\"Associativity\">false<\/flag>\n+      <flag name=\"inverse\" label=\"Inverse\">false<\/flag>\n+      \n+      <condition name=\"group\" true=\"true\" false=\"false\">\n+        <and>\n+           <test name=\"closure\" operator=\"equal\" value=\"true\"\/>\n+           <test name=\"identity\" operator=\"equal\" value=\"true\"\/>\n+           <test name=\"associativity\" operator=\"equal\" value=\"true\"\/>\n+           <test name=\"inverse\" operator=\"equal\" value=\"true\"\/>\n+        <\/and>\n+      <\/condition>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/and.jfc","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+  <configuration version=\"2.0\" label=\"Test condition\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"period\" control=\"tiger\">0 s<\/setting>\n+    <\/event>\n+    \n+    <event name=\"com.example.Lion\">\n+      <setting name=\"period\" control=\"lion\">0 s<\/setting>\n+    <\/event>\n+    \n+    <event name=\"com.example.Zebra\">\n+      <setting name=\"period\" control=\"zebra\">0 s<\/setting>\n+    <\/event>\n+    \n+    <control>\n+      <text name=\"variable\" label=\"Variable\">disabled<\/text>\n+      \n+      <condition name=\"tiger\" true=\"1 s\">\n+        <test name=\"variable\" operator=\"equal\" value=\"activate\"\/>\n+      <\/condition>\n+\n+      <condition name=\"lion\" true=\"3 s\" false=\"5 s\">\n+        <test name=\"variable\" operator=\"equal\" value=\"activate\"\/>\n+      <\/condition>\n+\n+      <condition name=\"zebra\" false=\"7 s\">\n+        <test name=\"variable\" operator=\"equal\" value=\"activate\"\/>\n+      <\/condition>\n+            \n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/condition.jfc","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test flag\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\" control=\"mammal\">false<\/setting>\n+      <setting name=\"stackTrace\">false<\/setting>\n+    <\/event>\n+    \n+     <event name=\"com.example.Lion\">\n+      <setting name=\"enabled\" control=\"mammal\">false<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Albatross\">\n+      <setting name=\"enabled\">false<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <flag name=\"mammal\" label=\"Mammal\">false<\/flag>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/flag.jfc","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+ <configuration version=\"2.0\" label=\"Test missing reference\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\" control=\"tigre\">false<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Cactus\">\n+      <setting name=\"threshold\">0 s<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <selection name=\"tiger\" label=\"Tiger\" default=\"true\">\n+        <option name=\"true\" label=\"True\">true<\/option>\n+        <option name=\"false\" label=\"False\">false<\/option>\n+      <\/selection>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/missing.jfc","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test or\">\n+\n+    <event name=\"season.Spring\">\n+      <setting name=\"enabled\" control=\"spring\">unknown<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <text name=\"month\" label=\"Month\">January<\/text>\n+      \n+      <condition name=\"spring\" true=\"true\" false=\"false\">\n+        <or>\n+           <test name=\"month\" operator=\"equal\" value=\"March\"\/>\n+           <test name=\"month\" operator=\"equal\" value=\"April\"\/>\n+           <test name=\"month\" operator=\"equal\" value=\"May\"\/>\n+        <\/or>\n+      <\/condition>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/or.jfc","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test plain\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"stackTrace\">false<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Lion\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n+   \n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/plain.jfc","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test selection\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"threshold\" control=\"animal\">0 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Lion\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"threshold\" control=\"animal\">0 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Cactus\">\n+      <setting name=\"threshold\">0 s<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <selection name=\"animal\" label=\"Animal\" default=\"off\">\n+        <option name=\"off\" label=\"Off\">0 s<\/option>\n+        <option name=\"low\" label=\"Low\">1 s<\/option>\n+        <option name=\"medium\" label=\"Medium\">10 s<\/option>\n+        <option name=\"high\" label=\"High\">100 s<\/option>\n+      <\/selection>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/selection.jfc","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test superfluous elements and attributes\">\n+\n+    <event legs=\"4\" name=\"com.example.Tiger\">\n+      <setting name=\"enabled\" control=\"animal\">false<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <flag name=\"animal\" label=\"Animal\">true<\/flag>\n+    \n+      <radio name=\"color\" label=\"Color\" default=\"green\">\n+        <option name=\"red\" label=\"Red\">red<\/option>\n+        <option name=\"green\" label=\"Green\">green<\/option>\n+        <option name=\"blue\" label=\"Blue\">blue<\/option>\n+      <\/radio>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/superfluous.jfc","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test text\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"threshold\" control=\"animal-threshold\">0 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Lion\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"threshold\" control=\"animal-threshold\">0 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Cactus\">\n+      <setting name=\"legs\">0 s<\/setting>\n+    <\/event>\n+\n+    <control>\n+      <text name=\"animal-threshold\" contentType=\"timespan\" label=\"Threshold\">0 s<\/text>\n+    <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/text.jfc","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration version=\"2.0\" label=\"Test timespan\">\n+\n+    <event name=\"com.example.Tiger\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"threshold\" control=\"value\">0 s<\/setting>\n+    <\/event>\n+\n+    <event name=\"com.example.Lion\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\" control=\"value\">0 s<\/setting>\n+    <\/event>\n+   \n+   <control>\n+     <text name=\"value\" label=\"Value\" contentType=\"timespan\">0 s<\/text>\n+   <\/control>\n+\n+<\/configuration>\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/timespan.jfc","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"}]}