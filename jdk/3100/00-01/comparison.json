{"files":[{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/AbortException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/AbortException.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Constraint.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/Constraint.java","status":"renamed"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+\/\/ Interface for elements that can control a setting,\n+\/\/ <condition>, <selection>, <text> and <flag>\n+interface ControlElement {\n+    String getName();\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/ControlElement.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.charset.Charset;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.jfr.internal.SecuritySupport.SafePath;\n+\n+\/\/ Holds the structure of a .jfc file similar to an XML DOM.\n+public final class JFCModel {\n+    private final Map<String, List<ControlElement>> controls = new LinkedHashMap<>();\n+    private final XmlConfiguration configuration;\n+\n+    public JFCModel(SafePath file) throws ParseException, IOException {\n+        this.configuration = createConfiguration(file);\n+        this.configuration.validate();\n+        addControls();\n+        wireConditions();\n+        wireSettings();\n+    }\n+\n+    public JFCModel(List<SafePath> files) throws IOException, ParseException {\n+        this.configuration = new XmlConfiguration();\n+        this.configuration.setAttribute(\"version\", \"2.0\");\n+        for (SafePath file : files) {\n+            JFCModel model = new JFCModel(file);\n+            for (var entry : model.controls.entrySet()) {\n+                String name = entry.getKey();\n+                \/\/ Fail-fast checks that prevents an ambiguous file to be written later\n+                if (controls.containsKey(name)) {\n+                    throw new ParseException(\"Control with '\" + name + \"' is declared in multiple files\", 0);\n+                }\n+                controls.put(name, entry.getValue());\n+            }\n+            for (XmlElement child : model.configuration.getChildren()) {\n+                this.configuration.addChild(child);\n+            }\n+        }\n+    }\n+\n+    public void setLabel(String label) {\n+        configuration.setAttribute(\"label\", label);\n+    }\n+\n+    public void configure(String name, String value) {\n+        for (XmlInput i : getInputs()) {\n+            if (i.getName().equals(name)) {\n+                i.configure(value);\n+                return;\n+            }\n+        }\n+        boolean add = name.startsWith(\"+\");\n+        if (add) {\n+            name = name.substring(1);\n+        }\n+        int index = name.indexOf(\"#\");\n+        if (index < 1 || index == name.length() - 1) {\n+            throw new IllegalArgumentException(\"Option '\" + name + \"' doesn't exist in configuration\");\n+        }\n+        XmlEvent event = configuration.getEvent(name.substring(0, index), add);\n+        String settingName = name.substring(index + 1);\n+        XmlSetting setting = event.getSetting(settingName, add);\n+\n+        if (settingName.equals(\"period\") || settingName.equals(\"threshold\")) {\n+            try {\n+                value = Utilities.parseTimespan(value);\n+            } catch (IllegalArgumentException iae) {\n+                \/\/ OK, no validation to allow forward compatibility.\n+            }\n+        }\n+\n+        setting.setContent(value);\n+    }\n+\n+    public void configure(UserInterface ui) throws AbortException {\n+        for (XmlInput input : getInputs()) {\n+            input.configure(ui);\n+        }\n+    }\n+\n+    public List<XmlInput> getInputs() {\n+        List<XmlInput> inputs = new ArrayList<>();\n+        for (XmlControl control : configuration.getControls()) {\n+            inputs.addAll(control.getInputs());\n+        }\n+        return inputs;\n+    }\n+\n+    public XmlConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void saveToFile(SafePath path) throws IOException {\n+        try (PrintWriter p = new PrintWriter(path.toFile(), Charset.forName(\"UTF-8\"))) {\n+            PrettyPrinter pp = new PrettyPrinter(p);\n+            pp.print(configuration);\n+            if (p.checkError()) {\n+                throw new IOException(\"Error writing \" + path);\n+            }\n+        }\n+    }\n+\n+    private List<ControlElement> getControlElements(String name) {\n+        return controls.getOrDefault(name, Collections.emptyList());\n+    }\n+\n+    private void addControls() {\n+        for (var controls : configuration.getControls()) {\n+            for (var control : controls.getControlElements()) {\n+                add(control);\n+            }\n+        }\n+    }\n+\n+    private void wireConditions() {\n+        for (XmlControl control : configuration.getControls()) {\n+            for (XmlCondition condition : control.getConditions()) {\n+                for (XmlElement element : condition.getChildren()) {\n+                    wireExpression(condition, element);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void wireExpression(XmlElement parent, XmlElement element) {\n+        element.addListener(parent);\n+        if (element instanceof XmlTest test) {\n+            wireTest(test);\n+        }\n+        if (element instanceof XmlExpression expression) {\n+            for (XmlExpression child : expression.getExpressions()) {\n+                wireExpression(expression, child);\n+            }\n+        }\n+    }\n+\n+    private void wireTest(XmlTest test) {\n+        String name = test.getName();\n+        for (ControlElement ce : getControlElements(name)) {\n+            XmlElement control = (XmlElement) ce;\n+            control.addListener(test);\n+        }\n+    }\n+\n+    private void wireSettings() {\n+        for (XmlEvent event : configuration.getEvents()) {\n+            for (XmlSetting setting : event.getSettings()) {\n+                var controlName = setting.getControl();\n+                if (controlName.isPresent()) {\n+                    List<ControlElement> controls = getControlElements(controlName.get());\n+                    if (controls.isEmpty()) {\n+                        System.out.println(\"Warning! Setting '\" + setting.getFullName() + \"' refers to missing control '\" + controlName.get() + \"'\");\n+                    }\n+                    for (ControlElement ce : controls) {\n+                        XmlElement control = (XmlElement) ce;\n+                        control.addListener(setting);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void add(ControlElement control) {\n+        controls.computeIfAbsent(control.getName(), x -> new ArrayList<>()).add(control);\n+    }\n+\n+    private XmlConfiguration createConfiguration(SafePath file) throws ParseException, IOException {\n+        if (file.toString().equals(\"none\")) {\n+            XmlConfiguration configuration = new XmlConfiguration();\n+            configuration.setAttribute(\"version\", \"2.0\");\n+            configuration.setAttribute(\"label\", \"None\");\n+            return configuration;\n+        }\n+        return Parser.parse(file.toPath());\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/JFCModel.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Parser.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/Parser.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/PrettyPrinter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/PrettyPrinter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Result.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/Result.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -32,1 +32,1 @@\n-    private static Map<String, String> settings = new TreeMap<>();\n+    private static final Map<String, String> settings = new TreeMap<>();\n@@ -53,1 +53,0 @@\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/SettingsLog.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/SettingsLog.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/UserInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/UserInterface.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Utilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/Utilities.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -27,0 +27,1 @@\n+\/\/ Corresponds to <and>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlAnd.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlAnd.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -31,1 +31,2 @@\n-final class XmlCondition extends XmlExpression implements XmlVariable {\n+\/\/ Corresponds <condition>\n+final class XmlCondition extends XmlExpression implements ControlElement {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlCondition.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlCondition.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -31,0 +31,1 @@\n+\/\/ Corresponds to <configuration>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlConfiguration.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlConfiguration.java","status":"renamed"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+\n+\/\/ Corresponds to <control>\n+final class XmlControl extends XmlElement {\n+\n+    public List<XmlInput> getInputs() {\n+        return elements(XmlInput.class);\n+    }\n+\n+    public List<XmlCondition> getConditions() {\n+        return elements(XmlCondition.class);\n+    }\n+\n+    \/\/  Returns list of all <selection>, <condition>, <flag> and <text>\n+    public List<ControlElement> getControlElements() {\n+        return elements(ControlElement.class);\n+    }\n+\n+    @Override\n+    String comment() {\n+        return \"\"\"\n+               Contents of the control element is not read by the JVM, it's used\n+               by JDK Mission Control and the 'jfr'-tool to change settings that\n+               carry the control attribute.\n+               \"\"\";\n+    }\n+\n+    @Override\n+    protected List<Constraint> constraints() {\n+        return List.of(\n+            Constraint.any(XmlCondition.class),\n+            Constraint.any(XmlText.class),\n+            Constraint.any(XmlSelection.class),\n+            Constraint.any(XmlFlag.class)\n+        );\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlControl.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -35,0 +35,1 @@\n+\/\/ Base class for XML-elements\n@@ -115,0 +116,2 @@\n+    \/\/ If the element should be surrounded with an empty\n+    \/\/ line when printed to file, for example, <event> but not <setting>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlElement.java","additions":4,"deletions":1,"binary":false,"changes":5,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlElement.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -29,0 +29,1 @@\n+\/\/ Corresponds to <event>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlEvent.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlEvent.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -30,0 +30,1 @@\n+\/\/ Base class for <condition>, <or>, <not>, <and> and <test>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlExpression.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlExpression.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -27,0 +27,1 @@\n+\/\/ Corresponds to <flag>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlFlag.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlFlag.java","status":"renamed"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+\/\/ Base class for elements that the user can interact with,\n+\/\/ <selection>, <text> and <flag>\n+public abstract class XmlInput extends XmlElement implements ControlElement {\n+\n+    public abstract String getOptionSyntax();\n+\n+    abstract void configure(UserInterface ui) throws AbortException;\n+\n+    abstract void configure(String value);\n+\n+    public final Optional<String> getContentType() {\n+        return optional(\"contentType\");\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return attribute(\"name\");\n+    }\n+\n+    public final String getLabel() {\n+        return attribute(\"label\");\n+    }\n+\n+    @Override\n+    protected List<String> attributes() {\n+        return List.of(\"name\", \"label\");\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlInput.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+\n+\/\/ Corresponds to <not>\n+final class XmlNot extends XmlExpression {\n+\n+    @Override\n+    boolean isEntity() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected void validateChildConstraints() throws ParseException {\n+        if (getExpressions().size() != 1) {\n+            throw new ParseException(\"Expected <not> to have a single child\", 0);\n+        }\n+    }\n+\n+    @Override\n+    protected Result evaluate() {\n+        List<XmlElement> producers = getProducers();\n+        if (!producers.isEmpty()) {\n+            Result r = producers.get(0).evaluate();\n+            if (!r.isNull()) {\n+                return r.isTrue() ? Result.FALSE : Result.TRUE;\n+            }\n+        }\n+        return Result.NULL;\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlNot.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -29,0 +29,1 @@\n+\/\/ Corresponds to <option>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlOption.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlOption.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -27,0 +27,1 @@\n+\/\/ Corresponds to <or>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlOr.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlOr.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -30,0 +30,1 @@\n+\/\/ Corresponds to <selection>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlSelection.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlSelection.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -30,0 +30,1 @@\n+\/\/ Corresponds to <setting>\n@@ -58,0 +59,1 @@\n+    @Override\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlSetting.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlSetting.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -30,0 +30,1 @@\n+\/\/ Corresponds to <test>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlTest.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.jfr.internal.parameters;\n+package jdk.jfr.internal.jfc.model;\n@@ -27,0 +27,1 @@\n+\/\/ Corresponds to <text>\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlText.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlText.java","status":"renamed"},{"patch":"@@ -1,205 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.parameters;\n-\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.nio.charset.Charset;\n-import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import jdk.jfr.internal.SecuritySupport.SafePath;\n-\n-public final class Parameters {\n-    private final Map<String, List<XmlVariable>> variables = new LinkedHashMap<>();\n-    private final XmlConfiguration configuration;\n-\n-    public Parameters(SafePath file) throws ParseException, IOException {\n-        this.configuration = createConfiguration(file);\n-        this.configuration.validate();\n-        addVariables();\n-        wireConditions();\n-        wireSettings();\n-    }\n-\n-    public Parameters(List<SafePath> files) throws IOException, ParseException {\n-        this.configuration = new XmlConfiguration();\n-        this.configuration.setAttribute(\"version\", \"2.0\");\n-        for (SafePath file : files) {\n-            Parameters params = new Parameters(file);\n-            for (var entry : params.variables.entrySet()) {\n-                String name = entry.getKey();\n-                \/\/ Fail-fast checks that prevents an ambiguous file to be written later\n-                if (variables.containsKey(name)) {\n-                    throw new ParseException(\"Control with '\" + name + \"' is declared in multiple files\", 0);\n-                }\n-                variables.put(name, entry.getValue());\n-            }\n-            for (XmlElement child : params.configuration.getChildren()) {\n-                this.configuration.addChild(child);\n-            }\n-        }\n-    }\n-\n-    public void setLabel(String label) {\n-        configuration.setAttribute(\"label\", label);\n-    }\n-\n-    public void configure(String name, String value) {\n-        for (XmlInput i : getInputs()) {\n-            if (i.getName().equals(name)) {\n-                i.configure(value);\n-                return;\n-            }\n-        }\n-        boolean add = name.startsWith(\"+\");\n-        if (add) {\n-            name = name.substring(1);\n-        }\n-        int index = name.indexOf(\"#\");\n-        if (index < 1 || index == name.length() - 1) {\n-            throw new IllegalArgumentException(\"Option '\" + name + \"' doesn't exist in configuration\");\n-        }\n-        XmlEvent event = configuration.getEvent(name.substring(0, index), add);\n-        String settingName = name.substring(index + 1);\n-        XmlSetting setting = event.getSetting(settingName, add);\n-\n-        if (settingName.equals(\"period\") || settingName.equals(\"threshold\")) {\n-            try {\n-                value = Utilities.parseTimespan(value);\n-            } catch (IllegalArgumentException iae) {\n-                \/\/ OK, no validation to allow forward compatibility.\n-            }\n-        }\n-\n-        setting.setContent(value);\n-    }\n-\n-    public void configure(UserInterface ui) throws AbortException {\n-        for (XmlInput input : getInputs()) {\n-            input.configure(ui);\n-        }\n-    }\n-\n-    public List<XmlInput> getInputs() {\n-        List<XmlInput> inputs = new ArrayList<>();\n-        for (XmlControl control : configuration.getControls()) {\n-            inputs.addAll(control.getInputs());\n-        }\n-        return inputs;\n-    }\n-\n-    public XmlConfiguration getConfiguration() {\n-        return configuration;\n-    }\n-\n-    public void saveToFile(SafePath path) throws IOException {\n-        try (PrintWriter p = new PrintWriter(path.toFile(), Charset.forName(\"UTF-8\"))) {\n-            PrettyPrinter pp = new PrettyPrinter(p);\n-            pp.print(configuration);\n-            if (p.checkError()) {\n-                throw new IOException(\"Error writing \" + path);\n-            }\n-        }\n-    }\n-\n-    private List<XmlVariable> getVariables(String name) {\n-        return variables.getOrDefault(name, Collections.emptyList());\n-    }\n-\n-    private void addVariables() {\n-        for (var control : configuration.getControls()) {\n-            for (var variable : control.getVariables()) {\n-                add(variable);\n-            }\n-        }\n-    }\n-\n-    private void wireConditions() {\n-        for (XmlControl control : configuration.getControls()) {\n-            for (XmlCondition condition : control.getConditions()) {\n-                for (XmlElement element : condition.getChildren()) {\n-                    wireExpression(condition, element);\n-                }\n-            }\n-        }\n-    }\n-\n-    private void wireExpression(XmlElement parent, XmlElement element) {\n-        element.addListener(parent);\n-        if (element instanceof XmlTest test) {\n-            wireTest(test);\n-        }\n-        if (element instanceof XmlExpression expression) {\n-            for (XmlExpression child : expression.getExpressions()) {\n-                wireExpression(expression, child);\n-            }\n-        }\n-    }\n-\n-    private void wireTest(XmlTest test) {\n-        String name = test.getName();\n-        for (XmlVariable variable : getVariables(name)) {\n-            XmlElement producer = (XmlElement) variable;\n-            producer.addListener(test);\n-        }\n-    }\n-\n-    private void wireSettings() {\n-        for (XmlEvent event : configuration.getEvents()) {\n-            for (XmlSetting setting : event.getSettings()) {\n-                var control = setting.getControl();\n-                if (control.isPresent()) {\n-                    List<XmlVariable> variables = getVariables(control.get());\n-                    if (variables.isEmpty()) { \/\/ dangling reference\n-                        System.out.println(\"Warning! Setting '\" + setting.getFullName() + \"' refers to missing control '\" + control.get() + \"'\");\n-                    }\n-                    for (XmlVariable variable : variables) {\n-                        XmlElement producer = (XmlElement) variable;\n-                        producer.addListener(setting);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private void add(XmlVariable variable) {\n-        variables.computeIfAbsent(variable.getName(), x -> new ArrayList<>()).add(variable);\n-    }\n-\n-    private XmlConfiguration createConfiguration(SafePath file) throws ParseException, IOException {\n-        if (file.toString().equals(\"none\")) {\n-            XmlConfiguration configuration = new XmlConfiguration();\n-            configuration.setAttribute(\"version\", \"2.0\");\n-            configuration.setAttribute(\"label\", \"None\");\n-            return configuration;\n-        }\n-        return Parser.parse(file.toPath());\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/Parameters.java","additions":0,"deletions":205,"binary":false,"changes":205,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.parameters;\n-\n-import java.util.List;\n-\n-final class XmlControl extends XmlElement {\n-\n-    public List<XmlInput> getInputs() {\n-        return elements(XmlInput.class);\n-    }\n-\n-    public List<XmlCondition> getConditions() {\n-        return elements(XmlCondition.class);\n-    }\n-\n-    public List<XmlVariable> getVariables() {\n-        return elements(XmlVariable.class);\n-    }\n-\n-    @Override\n-    String comment() {\n-        return \"\"\"\n-               Contents of the control element is not read by the JVM, it's used\n-               by JDK Mission Control and the 'jfr'-tool to change settings that\n-               carry the control attribute.\n-               \"\"\";\n-    }\n-\n-    @Override\n-    protected List<Constraint> constraints() {\n-        return List.of(\n-            Constraint.any(XmlCondition.class),\n-            Constraint.any(XmlText.class),\n-            Constraint.any(XmlSelection.class),\n-            Constraint.any(XmlFlag.class)\n-        );\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlControl.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.parameters;\n-\n-import java.util.List;\n-import java.util.Optional;\n-\n-public abstract class XmlInput extends XmlElement implements XmlVariable {\n-\n-    public abstract String getOptionSyntax();\n-\n-    abstract void configure(UserInterface ui) throws AbortException;\n-\n-    abstract void configure(String value);\n-\n-    public final Optional<String> getContentType() {\n-        return optional(\"contentType\");\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return attribute(\"name\");\n-    }\n-\n-    public final String getLabel() {\n-        return attribute(\"label\");\n-    }\n-\n-    @Override\n-    protected List<String> attributes() {\n-        return List.of(\"name\", \"label\");\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlInput.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.parameters;\n-\n-import java.text.ParseException;\n-import java.util.List;\n-\n-final class XmlNot extends XmlExpression {\n-\n-    @Override\n-    boolean isEntity() {\n-        return false;\n-    }\n-\n-    @Override\n-    protected void validateChildConstraints() throws ParseException {\n-        if (getExpressions().size() != 1) {\n-            throw new ParseException(\"Expected <not> to have a single child\", 0);\n-        }\n-    }\n-\n-    @Override\n-    protected Result evaluate() {\n-        List<XmlElement> producers = getProducers();\n-        if (!producers.isEmpty()) {\n-            Result r = producers.get(0).evaluate();\n-            if (!r.isNull()) {\n-                return r.isTrue() ? Result.FALSE : Result.TRUE;\n-            }\n-        }\n-        return Result.NULL;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlNot.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.parameters;\n-\n-interface XmlVariable {\n-    String getName();\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/parameters\/XmlVariable.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -19,5 +43,5 @@\n-import jdk.jfr.internal.parameters.AbortException;\n-import jdk.jfr.internal.parameters.Parameters;\n-import jdk.jfr.internal.parameters.SettingsLog;\n-import jdk.jfr.internal.parameters.UserInterface;\n-import jdk.jfr.internal.parameters.XmlInput;\n+import jdk.jfr.internal.jfc.model.AbortException;\n+import jdk.jfr.internal.jfc.model.JFCModel;\n+import jdk.jfr.internal.jfc.model.SettingsLog;\n+import jdk.jfr.internal.jfc.model.UserInterface;\n+import jdk.jfr.internal.jfc.model.XmlInput;\n@@ -106,1 +130,1 @@\n-        Parameters parameters = new Parameters(path);\n+        JFCModel parameters = new JFCModel(path);\n@@ -174,2 +198,2 @@\n-            Parameters params = new Parameters(inputFiles);\n-            params.setLabel(\"Custom\");\n+            JFCModel model = new JFCModel(inputFiles);\n+            model.setLabel(\"Custom\");\n@@ -180,1 +204,1 @@\n-                params.configure(option.getKey(), option.getValue());\n+                model.configure(option.getKey(), option.getValue());\n@@ -185,1 +209,1 @@\n-                    int q = params.getInputs().size() + 1;\n+                    int q = model.getInputs().size() + 1;\n@@ -190,1 +214,1 @@\n-                    params.configure(ui);\n+                    model.configure(ui);\n@@ -197,1 +221,1 @@\n-            params.saveToFile(output);\n+            model.saveToFile(output);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Configure.java","additions":36,"deletions":12,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestConfigure.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  <configuration version=\"2.0\" label=\"Test and\">\n+<configuration version=\"2.0\" label=\"Test and\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/and.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  <configuration version=\"2.0\" label=\"Test flag\">\n+<configuration version=\"2.0\" label=\"Test flag\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/flag.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- <configuration version=\"2.0\" label=\"Test or\">\n+<configuration version=\"2.0\" label=\"Test or\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/or.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- <configuration version=\"2.0\" label=\"Test superfluous elements and attributes\">\n+<configuration version=\"2.0\" label=\"Test plain\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/plain.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- <configuration version=\"2.0\" label=\"Test selection\">\n+<configuration version=\"2.0\" label=\"Test selection\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/selection.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- <configuration version=\"2.0\" label=\"Test superfluous elements and attributes\">\n+<configuration version=\"2.0\" label=\"Test superfluous elements and attributes\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/superfluous.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- <configuration version=\"2.0\" label=\"Test superfluous elements and attributes\">\n+<configuration version=\"2.0\" label=\"Test timespan\">\n","filename":"test\/jdk\/jdk\/jfr\/tool\/configure\/timespan.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}