{"files":[{"patch":"@@ -1711,0 +1711,3 @@\n+  void prune_all();\n+  void prune_all_paths();\n+  void prune_shortest_path();\n@@ -1733,0 +1736,1 @@\n+  bool _all_paths = false;\n@@ -1770,0 +1774,2 @@\n+    int d2() {return _d2; }\n+    void set_d2(int d) { _d2 = d; }\n@@ -1776,1 +1782,2 @@\n-    int _distance;\n+    int _distance; \/\/ distance from _start\n+    int _d2 = 0; \/\/ distance from _target if _all_paths\n@@ -1851,0 +1858,2 @@\n+\n+\n@@ -1854,6 +1863,1 @@\n-    \/\/ take all nodes from BFS\n-    for (uint i = 0; i < _worklist.size(); i++) {\n-      Node* n = _worklist.at(i);\n-      Info* info = find_info(n);\n-      info->set_mark();\n-    }\n+    prune_all();\n@@ -1861,1 +1865,0 @@\n-    \/\/ backtrack shortest path\n@@ -1866,6 +1869,40 @@\n-    Node* current = _target;\n-    while (true) {\n-      Info* info = find_info(current);\n-      info->set_mark();\n-      if (current == _start) {\n-        break;\n+    if(_all_paths) {\n+      prune_all_paths();\n+    } else {\n+      prune_shortest_path();\n+    }\n+  }\n+}\n+\n+\/\/ take all nodes from BFS\n+void PrintBFS::prune_all() {\n+  for (uint i = 0; i < _worklist.size(); i++) {\n+    Node* n = _worklist.at(i);\n+    Info* info = find_info(n);\n+    info->set_mark();\n+  }\n+}\n+\n+\/\/ traverse backward from target, along edges found in BFS\n+void PrintBFS::prune_all_paths() {\n+  uint pos = 0;\n+  Node_List backtrace;\n+  \/\/ start from target\n+  backtrace.push(_target);\n+  find_info(_target)->set_mark();\n+  \/\/ traverse backward\n+  while(pos < backtrace.size()) {\n+    Node* n = backtrace.at(pos++);\n+    Info* info = find_info(n);\n+    for(uint i=0; i<info->edge_bwd.size(); i++) {\n+      \/\/ all backward edges\n+      Node* back = info->edge_bwd.at(i);\n+      Info* back_info = find_info(back);\n+      if(!back_info->is_marked()) {\n+        \/\/ not yet found this on way back.\n+        back_info->set_d2(info->d2()+1);\n+        if(back_info->d2() + back_info->distance() <= _max_distance) {\n+          \/\/ total distance is small enough\n+          back_info->set_mark();\n+          backtrace.push(back);\n+        }\n@@ -1873,2 +1910,0 @@\n-      \/\/ first edge -> leads us one step closer to _start\n-      current = info->edge_bwd.at(0);\n@@ -1879,0 +1914,14 @@\n+\n+void PrintBFS::prune_shortest_path() {\n+  Node* current = _target;\n+  while (true) {\n+    Info* info = find_info(current);\n+    info->set_mark();\n+    if (current == _start) {\n+      break;\n+    }\n+    \/\/ first edge -> leads us one step closer to _start\n+    current = info->edge_bwd.at(0);\n+  }\n+}\n+\n@@ -1945,0 +1994,1 @@\n+  parse_options_helper(_all_paths,              \"A\");\n@@ -2086,1 +2136,4 @@\n-  tty->print(\"dis\");                          \/\/ distance\n+  tty->print(\"   d\");                         \/\/ distance\n+  if (_all_paths) {\n+    tty->print(\" apd\");                       \/\/ all paths distance\n+  }\n@@ -2098,1 +2151,6 @@\n-  tty->print(\"%3d\", find_info(n)->distance());\/\/ distance\n+  tty->print(\"%4d\", find_info(n)->distance());\/\/ distance\n+  if (_all_paths) {\n+    Info* info = find_info(n);\n+    int apd = info->distance() + info->d2();\n+    tty->print(\"%4d\", apd);                   \/\/ all paths distance\n+  }\n@@ -2133,0 +2191,1 @@\n+\/\/     A: all paths (not just shortest path to target)\n@@ -2151,1 +2210,1 @@\n-\/\/   find_node(385)->dump_bfs(3, 0, \"cdmox+#OB\")\n+\/\/   find_node(385)->dump_bfs(3, 0, \"cdmox+#@B\")\n@@ -2159,0 +2218,1 @@\n+\/\/   apd:      all paths distance (d_start + d_target)\n@@ -2161,1 +2221,0 @@\n-\/\/   category: characters cmdxo from options string\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":79,"deletions":20,"binary":false,"changes":99,"status":"modified"}]}