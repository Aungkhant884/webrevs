{"files":[{"patch":"@@ -1703,2 +1703,2 @@\n-    _dcc(this), _info_uid((CmpKey)&cmp, hashkey) {\n-  };\n+    _dcc(this), _info_uid(cmpkey, hashkey) {}\n+\n@@ -1710,4 +1710,4 @@\n-  void prune();\n-  void prune_all();\n-  void prune_all_paths();\n-  void prune_shortest_path();\n+  void select();\n+  void select_all();\n+  void select_all_paths();\n+  void select_shortest_path();\n@@ -1727,5 +1727,5 @@\n-    bool control = false;\n-    bool memory = false;\n-    bool data = false;\n-    bool mixed = false;\n-    bool other = false;\n+    bool _control = false;\n+    bool _memory = false;\n+    bool _data = false;\n+    bool _mixed = false;\n+    bool _other = false;\n@@ -1733,2 +1733,2 @@\n-  Filter filter_visit;\n-  Filter filter_boundary;\n+  Filter _filter_visit;\n+  Filter _filter_boundary;\n@@ -1740,1 +1740,1 @@\n-  void print_options_help(bool print_examples);\n+  static void print_options_help(bool print_examples);\n@@ -1744,1 +1744,1 @@\n-  bool filter_category(Node* n, Filter& filter); \/\/ filter node category agains options\n+  static bool filter_category(Node* n, Filter& filter); \/\/ filter node category against options\n@@ -1749,2 +1749,2 @@\n-    virtual void pre_dump(outputStream *st, const Node* n);\n-    virtual void post_dump(outputStream *st);\n+    virtual void pre_dump(outputStream* st, const Node* n);\n+    virtual void post_dump(outputStream* st);\n@@ -1758,3 +1758,3 @@\n-  Node* old_node (Node* n); \/\/ mach node -> prior IR node\n-  void print_node_idx (Node* n); \/\/ to tty\n-  void print_node_block (Node* n); \/\/ to tty: head idx, _idom, _dom_depth\n+  Node* old_node(Node* n); \/\/ mach node -> prior IR node\n+  void print_node_idx(Node* n); \/\/ to tty\n+  void print_node_block(Node* n); \/\/ to tty: head idx, _idom, _dom_depth\n@@ -1771,1 +1771,1 @@\n-      : _node(node), _distance(distance) {};\n+      : _node(node), _distance_from_start(distance) {};\n@@ -1773,4 +1773,3 @@\n-    int distance() { return _distance; };\n-    int d2() {return _d2; }\n-    void set_d2(int d) { _d2 = d; }\n-    Node_List edge_fwd; \/\/ pointing away from _start\n+    int distance() const { return _distance_from_start; };\n+    int distance_from_target() const { return _distance_from_target; }\n+    void set_distance_from_target(int d) { _distance_from_target = d; }\n@@ -1778,1 +1777,1 @@\n-    bool is_marked() { return _mark; } \/\/ marked to keep during pruning\n+    bool is_marked() const { return _mark; } \/\/ marked to keep during select\n@@ -1782,2 +1781,2 @@\n-    int _distance; \/\/ distance from _start\n-    int _d2 = 0; \/\/ distance from _target if _all_paths\n+    int _distance_from_start; \/\/ distance from _start\n+    int _distance_from_target = 0; \/\/ distance from _target if _all_paths\n@@ -1786,3 +1785,3 @@\n-  static int cmp(const Node* n1, const Node* n2) { return n1 != n2; }\n-  Dict _info_uid;             \/\/ Node -> uid\n-  GrowableArray <Info> _info; \/\/ uid  -> info\n+  Dict _info_uid;            \/\/ Node -> uid\n+  GrowableArray<Info> _info; \/\/ uid  -> info\n+\n@@ -1795,2 +1794,3 @@\n-  };\n-  void make_info(Node* node, int distance) {\n+  }\n+\n+  void make_info(Node* node, const int distance) {\n@@ -1805,1 +1805,1 @@\n-  GrowableArray<Node*> _printlist;\n+  GrowableArray<Node*> _print_list;\n@@ -1808,1 +1808,1 @@\n-  void print_header();\n+  void print_header() const;\n@@ -1817,1 +1817,1 @@\n-  prune();\n+  select();\n@@ -1824,1 +1824,1 @@\n-  if(_max_distance < 0) {\n+  if (_max_distance < 0) {\n@@ -1838,1 +1838,1 @@\n-    if (!filter_category(n, filter_visit) && n != _start) {\n+    if (!filter_category(n, _filter_visit) && n != _start) {\n@@ -1858,3 +1858,3 @@\n-void PrintBFS::prune() {\n-  if ( _target == nullptr ) {\n-    prune_all();\n+void PrintBFS::select() {\n+  if (_target == nullptr ) {\n+    select_all();\n@@ -1866,2 +1866,2 @@\n-    if(_all_paths) {\n-      prune_all_paths();\n+    if (_all_paths) {\n+      select_all_paths();\n@@ -1869,1 +1869,1 @@\n-      prune_shortest_path();\n+      select_shortest_path();\n@@ -1875,1 +1875,1 @@\n-void PrintBFS::prune_all() {\n+void PrintBFS::select_all() {\n@@ -1884,1 +1884,1 @@\n-void PrintBFS::prune_all_paths() {\n+void PrintBFS::select_all_paths() {\n@@ -1891,1 +1891,1 @@\n-  while(pos < backtrace.size()) {\n+  while (pos < backtrace.size()) {\n@@ -1894,1 +1894,1 @@\n-    for(uint i=0; i<info->edge_bwd.size(); i++) {\n+    for (uint i = 0; i < info->edge_bwd.size(); i++) {\n@@ -1898,1 +1898,1 @@\n-      if(!back_info->is_marked()) {\n+      if (!back_info->is_marked()) {\n@@ -1900,2 +1900,2 @@\n-        back_info->set_d2(info->d2()+1);\n-        if(back_info->d2() + back_info->distance() <= _max_distance) {\n+        back_info->set_distance_from_target(info->distance_from_target() + 1);\n+        if (back_info->distance_from_target() + back_info->distance() <= _max_distance) {\n@@ -1911,1 +1911,1 @@\n-void PrintBFS::prune_shortest_path() {\n+void PrintBFS::select_shortest_path() {\n@@ -1928,1 +1928,1 @@\n-\/\/ go through worklist in desired order, put the marked ones in printlist\n+\/\/ go through worklist in desired order, put the marked ones in print list\n@@ -1930,1 +1930,1 @@\n-  if(_traverse_inputs && !_traverse_outputs) {\n+  if (_traverse_inputs && !_traverse_outputs) {\n@@ -1932,1 +1932,1 @@\n-    for (int i = _worklist.size()-1; i >= 0; i--) {\n+    for (int i = _worklist.size() - 1; i >= 0; i--) {\n@@ -1936,1 +1936,1 @@\n-        _printlist.push(n);\n+        _print_list.push(n);\n@@ -1945,1 +1945,1 @@\n-        _printlist.push(n);\n+        _print_list.push(n);\n@@ -1949,2 +1949,2 @@\n-  if(_sort_idx) {\n-    _printlist.sort(node_idx_cmp);\n+  if (_sort_idx) {\n+    _print_list.sort(node_idx_cmp);\n@@ -1956,1 +1956,1 @@\n-  if( _printlist.length() > 0 ) {\n+  if (_print_list.length() > 0 ) {\n@@ -1958,2 +1958,2 @@\n-    for (int i = 0; i < _printlist.length(); i++) {\n-      Node* n = _printlist.at(i);\n+    for (int i = 0; i < _print_list.length(); i++) {\n+      Node* n = _print_list.at(i);\n@@ -2048,3 +2048,3 @@\n-  int len = strlen(_options);\n-  for (int i = 0; i < len; i++) {\n-    switch(_options[i]) {\n+  size_t len = strlen(_options);\n+  for (size_t i = 0; i < len; i++) {\n+    switch (_options[i]) {\n@@ -2058,1 +2058,1 @@\n-        filter_visit.control = true;\n+        _filter_visit._control = true;\n@@ -2061,1 +2061,1 @@\n-        filter_visit.memory = true;\n+        _filter_visit._memory = true;\n@@ -2064,1 +2064,1 @@\n-        filter_visit.data = true;\n+        _filter_visit._data = true;\n@@ -2067,1 +2067,1 @@\n-        filter_visit.mixed = true;\n+        _filter_visit._mixed = true;\n@@ -2070,1 +2070,1 @@\n-        filter_visit.other = true;\n+        _filter_visit._other = true;\n@@ -2073,1 +2073,1 @@\n-        filter_boundary.control = true;\n+        _filter_boundary._control = true;\n@@ -2076,1 +2076,1 @@\n-        filter_boundary.memory = true;\n+        _filter_boundary._memory = true;\n@@ -2079,1 +2079,1 @@\n-        filter_boundary.data = true;\n+        _filter_boundary._data = true;\n@@ -2082,1 +2082,1 @@\n-        filter_boundary.mixed = true;\n+        _filter_boundary._mixed = true;\n@@ -2085,1 +2085,1 @@\n-        filter_boundary.other = true;\n+        _filter_boundary._other = true;\n@@ -2124,1 +2124,1 @@\n-  const Type *t = n->bottom_type();\n+  const Type* t = n->bottom_type();\n@@ -2127,1 +2127,1 @@\n-      return filter.data;\n+      return filter._data;\n@@ -2129,1 +2129,1 @@\n-      return filter.memory;\n+      return filter._memory;\n@@ -2131,1 +2131,1 @@\n-      return filter.mixed;\n+      return filter._mixed;\n@@ -2133,1 +2133,1 @@\n-      return filter.control;\n+      return filter._control;\n@@ -2135,1 +2135,1 @@\n-      return filter.other;\n+      return filter._other;\n@@ -2146,2 +2146,2 @@\n-void PrintBFS::DumpConfigColored::pre_dump(outputStream *st, const Node* n) {\n-  if(!_bfs->_use_color) {\n+void PrintBFS::DumpConfigColored::pre_dump(outputStream* st, const Node* n) {\n+  if (!_bfs->_use_color) {\n@@ -2155,1 +2155,1 @@\n-  const Type *t = n->bottom_type();\n+  const Type* t = n->bottom_type();\n@@ -2183,2 +2183,2 @@\n-void PrintBFS::DumpConfigColored::post_dump(outputStream *st) {\n-  if(!_bfs->_use_color) {\n+void PrintBFS::DumpConfigColored::post_dump(outputStream* st) {\n+  if (!_bfs->_use_color) {\n@@ -2190,1 +2190,1 @@\n-Node* PrintBFS::old_node (Node* n) {\n+Node* PrintBFS::old_node(Node* n) {\n@@ -2199,1 +2199,1 @@\n-void PrintBFS::print_node_idx (Node* n) {\n+void PrintBFS::print_node_idx(Node* n) {\n@@ -2212,1 +2212,1 @@\n-void PrintBFS::print_node_block (Node* n) {\n+void PrintBFS::print_node_block(Node* n) {\n@@ -2223,1 +2223,1 @@\n-    if(b->_idom) {\n+    if (b->_idom) {\n@@ -2235,2 +2235,2 @@\n-     (filter_category(dst, filter_visit) ||\n-      filter_category(dst, filter_boundary) ||\n+     (filter_category(dst, _filter_visit) ||\n+      filter_category(dst, _filter_boundary) ||\n@@ -2238,1 +2238,1 @@\n-    if( find_info(dst) == nullptr ){\n+    if (find_info(dst) == nullptr) {\n@@ -2248,2 +2248,1 @@\n-      \/\/ traversal edges useful during pruning\n-      find_info(src)->edge_fwd.push(dst);\n+      \/\/ traversal edges useful during select\n@@ -2255,1 +2254,1 @@\n-void PrintBFS::print_header() {\n+void PrintBFS::print_header() const {\n@@ -2263,1 +2262,1 @@\n-  if(_print_old) {\n+  if (_print_old) {\n@@ -2274,1 +2273,1 @@\n-    int apd = info->distance() + info->d2();\n+    int apd = info->distance() + info->distance_from_target();\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":97,"deletions":98,"binary":false,"changes":195,"status":"modified"}]}