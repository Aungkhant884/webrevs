{"files":[{"patch":"@@ -1658,8 +1658,2 @@\n-void Node::print_bfs(const uint max_distance, Node* target, char const* options) {\n-  \/\/ BFS or shortest path?\n-  if (target == NULL) {\n-    tty->print(\"No target: perform BFS.\\n\");\n-  } else {\n-    tty->print(\"Find shortest path: %d -> %d.\\n\", this->_idx, target->_idx);\n-  }\n-\n+void Node::print_bfs(const int max_distance, Node* target, char const* options) {\n+  assert(max_distance >= 0, \"non-negative distance\");\n@@ -1794,0 +1788,1 @@\n+  \/\/ Note: for distance, we store an int in a (void*), this requires double casting\n@@ -1796,1 +1791,1 @@\n-  auto worklist_push = [&] (Node* n, Node* p, const long d) {\n+  auto worklist_push = [&] (Node* n, Node* p, const int d) {\n@@ -1799,1 +1794,1 @@\n-    distance.Insert(n, (void*)d);\n+    distance.Insert(n, (void*)(size_t)d);\n@@ -1821,1 +1816,1 @@\n-    tty->print(\"%3ld\", abs((long)distance[n])); \/\/ distance\n+    tty->print(\"%3d\", abs((int)(size_t)distance[n])); \/\/ distance\n@@ -1832,1 +1827,1 @@\n-      long dd = (long)distance[n];\n+      int dd = (int)(size_t)distance[n];\n@@ -1840,1 +1835,1 @@\n-  \/\/ BFS header\n+  \/\/ BFS or shortest path?\n@@ -1842,0 +1837,1 @@\n+    tty->print(\"No target: perform BFS.\\n\");\n@@ -1843,0 +1839,6 @@\n+  } else {\n+    tty->print(\"Find shortest path:\");\n+    print_node_idx(this);\n+    tty->print(\" ->\");\n+    print_node_idx(target);\n+    tty->print(\"\\n\");\n@@ -1844,1 +1846,1 @@\n-\n+ \n@@ -1853,1 +1855,1 @@\n-    long d = abs((long)distance[n]);\n+    int d = abs((int)(size_t)distance[n]);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"}]}