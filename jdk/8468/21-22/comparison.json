{"files":[{"patch":"@@ -1740,2 +1740,2 @@\n-  void parse_options_helper(bool &variable, const char* character);\n-  void parse_options();\n+  void print_options_help(bool print_examples);\n+  bool parse_options();\n@@ -1828,2 +1828,1 @@\n-  parse_options();\n-  return true;\n+  return parse_options();\n@@ -1968,7 +1967,78 @@\n-void PrintBFS::parse_options_helper(bool &variable, const char* character) {\n-  if (strstr(_options, character) != nullptr) {\n-    variable = true;\n-  }\n-}\n-\n-void PrintBFS::parse_options() {\n+void PrintBFS::print_options_help(bool print_examples) {\n+  tty->print(\"Usage: node->dump_bfs(int max_distance, Node* target, char* options)\\n\");\n+  tty->print(\"\\n\");\n+  tty->print(\"Usecases:\\n\");\n+  tty->print(\"  BFS traversal: no target required\\n\");\n+  tty->print(\"  shortest path: set target\\n\");\n+  tty->print(\"  all paths: set target and put 'A' in options\\n\");\n+  tty->print(\"  detect loop: subcase of all paths, have start==target\\n\");\n+  tty->print(\"\\n\");\n+  tty->print(\"Arguments:\\n\");\n+  tty->print(\"  this\/start: staring point of BFS\\n\");\n+  tty->print(\"  target:\\n\");\n+  tty->print(\"    if nullptr: simple BFS\\n\");\n+  tty->print(\"    else: shortest path or all paths between this\/start and target\\n\");\n+  tty->print(\"  options:\\n\");\n+  tty->print(\"    if nullptr: same as \\\"cdmxo@B\\\"\\n\");\n+  tty->print(\"    else: use combination of following characters\\n\");\n+  tty->print(\"      h: display this help info\\n\");\n+  tty->print(\"      H: display this help info, with examples\\n\");\n+  tty->print(\"      +: traverse in-edges (on if neither + nor -)\\n\");\n+  tty->print(\"      -: traverse out-edges\\n\");\n+  tty->print(\"      c: visit control nodes\\n\");\n+  tty->print(\"      m: visit memory nodes\\n\");\n+  tty->print(\"      d: visit data nodes\\n\");\n+  tty->print(\"      x: visit mixed nodes\\n\");\n+  tty->print(\"      o: visit other nodes\\n\");\n+  tty->print(\"      C: boundary control nodes\\n\");\n+  tty->print(\"      M: boundary memory nodes\\n\");\n+  tty->print(\"      D: boundary data nodes\\n\");\n+  tty->print(\"      X: boundary mixed nodes\\n\");\n+  tty->print(\"      O: boundary other nodes\\n\");\n+  tty->print(\"      S: sort displayed nodes by node idx\\n\");\n+  tty->print(\"      A: all paths (not just shortest path to target)\\n\");\n+  tty->print(\"      #: display node category in color (not supported in all terminals)\\n\");\n+  tty->print(\"      @: print old nodes - before matching (if available)\\n\");\n+  tty->print(\"      B: print scheduling blocks (if available)\\n\");\n+  tty->print(\"\\n\");\n+  tty->print(\"recursively follow edges to nodes with permitted visit types,\\n\");\n+  tty->print(\"on the boundary additionally display nodes allowed in boundary types\\n\");\n+  tty->print(\"\\n\");\n+  tty->print(\"output columns:\\n\");\n+  tty->print(\"  d:     BFS distance to this\/start\\n\");\n+  tty->print(\"  adp:   all paths distance (d_start + d_target)\\n\");\n+  tty->print(\"  block: block block in which the node has been scheduled [head(), _idom->head(), _dom_depth]\\n\");\n+  tty->print(\"  old:   old IR node - before matching\\n\");\n+  tty->print(\"  dump:  node->dump()\\n\");\n+  if (print_examples) {\n+    tty->print(\"\\n\");\n+    tty->print(\"Examples:\\n\");\n+    tty->print(\"  if->dump_bfs(10, 0, \\\"+cxo\\\")\\n\");\n+    tty->print(\"    starting at some if node, traverse inputs recursively\\n\");\n+    tty->print(\"    only along control (mixed and other can also be control)\\n\");\n+    tty->print(\"  phi->dump_bfs(5, 0, \\\"-dxo\\\")\\n\");\n+    tty->print(\"    starting at phi node, traverse outputs recursively\\n\");\n+    tty->print(\"    only along data (mixed and other can also have data flow)\\n\");\n+    tty->print(\"  find_node(385)->dump_bfs(3, 0, \\\"cdmox+#@B\\\")\\n\");\n+    tty->print(\"    find inputs of node 385, up to 3 nodes up (+)\\n\");\n+    tty->print(\"    traverse all nodes (cdmox), use colors (#)\\n\");\n+    tty->print(\"    display old nodes and blocks, if they exist\\n\");\n+    tty->print(\"    useful call to start with\\n\");\n+    tty->print(\"  find_node(102)->dump_bfs(10,0,\\\"dCDMOX-\\\")\\n\");\n+    tty->print(\"    find non-data dependencies of a data node\\n\");\n+    tty->print(\"    follow data node outputs until find another category\\n\");\n+    tty->print(\"    node as the boundary\\n\");\n+    tty->print(\"  x->dump_bfs(10, y, 0)\\n\");\n+    tty->print(\"    find shortest path from x to y, along any edge or node\\n\");\n+    tty->print(\"    will not find a path if it is longer than 10\\n\");\n+    tty->print(\"    useful to find how x and y are related\\n\");\n+    tty->print(\"  find_node(741)->dump_bfs(20,find_node(746),\\\"c+\\\")\\n\");\n+    tty->print(\"    find shortest control path  between two nodes\\n\");\n+    tty->print(\"  find_node(741)->dump_bfs(8,find_node(746),\\\"cdmxo+A\\\")\\n\");\n+    tty->print(\"    find all paths (A) between two nodes of length at most 8\\n\");\n+    tty->print(\"  find_node(741)->dump_bfs(7,find_node(741),\\\"c+A\\\")\\n\");\n+    tty->print(\"    find all control loops for this node\\n\");\n+  }\n+}\n+\n+bool PrintBFS::parse_options() {\n@@ -1976,19 +2046,71 @@\n-    _options = \"cmdxo+-@B\"; \/\/ default options\n-  }\n-  parse_options_helper(_traverse_inputs,        \"+\");\n-  parse_options_helper(_traverse_outputs,       \"-\");\n-  parse_options_helper(filter_visit.control,    \"c\");\n-  parse_options_helper(filter_visit.memory,     \"m\");\n-  parse_options_helper(filter_visit.data,       \"d\");\n-  parse_options_helper(filter_visit.mixed,      \"x\");\n-  parse_options_helper(filter_visit.other,      \"o\");\n-  parse_options_helper(filter_boundary.control, \"C\");\n-  parse_options_helper(filter_boundary.memory,  \"M\");\n-  parse_options_helper(filter_boundary.data,    \"D\");\n-  parse_options_helper(filter_boundary.mixed,   \"X\");\n-  parse_options_helper(filter_boundary.other,   \"O\");\n-  parse_options_helper(_sort_idx,               \"S\");\n-  parse_options_helper(_all_paths,              \"A\");\n-  parse_options_helper(_use_color,              \"#\");\n-  parse_options_helper(_print_blocks,           \"B\");\n-  parse_options_helper(_print_old,              \"@\");\n+    _options = \"cmdxo@B\"; \/\/ default options\n+  }\n+  int len = strlen(_options);\n+  for (int i = 0; i < len; i++) {\n+    switch(_options[i]) {\n+      case '+':\n+        _traverse_inputs = true;\n+        break;\n+      case '-':\n+        _traverse_outputs = true;\n+        break;\n+      case 'c':\n+        filter_visit.control = true;\n+        break;\n+      case 'm':\n+        filter_visit.memory = true;\n+        break;\n+      case 'd':\n+        filter_visit.data = true;\n+        break;\n+      case 'x':\n+        filter_visit.mixed = true;\n+        break;\n+      case 'o':\n+        filter_visit.other = true;\n+        break;\n+      case 'C':\n+        filter_boundary.control = true;\n+        break;\n+      case 'M':\n+        filter_boundary.memory = true;\n+        break;\n+      case 'D':\n+        filter_boundary.data = true;\n+        break;\n+      case 'X':\n+        filter_boundary.mixed = true;\n+        break;\n+      case 'O':\n+        filter_boundary.other = true;\n+        break;\n+      case 'S':\n+        _sort_idx = true;\n+        break;\n+      case 'A':\n+        _all_paths = true;\n+        break;\n+      case '#':\n+        _use_color = true;\n+        break;\n+      case 'B':\n+        _print_blocks = true;\n+        break;\n+      case '@':\n+        _print_old = true;\n+        break;\n+      case 'h':\n+        print_options_help(false);\n+        return false;\n+       case 'H':\n+        print_options_help(true);\n+        return false;\n+      default:\n+        tty->print_cr(\"dump_bfs: Unrecognized option \\'%c\\'\", _options[i]);\n+        tty->print_cr(\"for help, run: find_node(0)->dump_bfs(0,0,\\\"H\\\")\");\n+        return false;\n+    }\n+  }\n+  if (!_traverse_inputs && !_traverse_outputs) {\n+    _traverse_inputs = true;\n+  }\n@@ -1998,0 +2120,1 @@\n+  return true;\n@@ -2165,64 +2288,5 @@\n-\/\/ Call this from debugger:\n-\/\/ BFS traversal of graph, starting at node this\/start\n-\/\/ this\/start: staring point of BFS\n-\/\/ max_distance: maximal distance from this\/start BFS visits\n-\/\/ target:\n-\/\/   if nullptr: print all nodes visited during BFS\n-\/\/   else: find shortest path from this\/start to target, via BFS and backtracking\n-\/\/ options:\n-\/\/   if nullptr: same as \"cmdxo+-@B\"\n-\/\/   else: use combination of these characters\n-\/\/     +: traverse in-edges\n-\/\/     -: traverse out-edges\n-\/\/     c: visit control nodes\n-\/\/     m: visit memory nodes\n-\/\/     d: visit data nodes\n-\/\/     x: visit mixed nodes\n-\/\/     o: visit other nodes\n-\/\/     C: boundary control nodes\n-\/\/     M: boundary memory nodes\n-\/\/     D: boundary data nodes\n-\/\/     X: boundary mixed nodes\n-\/\/     O: boundary other nodes\n-\/\/     S: sort displayed nodes by node idx\n-\/\/     A: all paths (not just shortest path to target)\n-\/\/     #: display node category in color (maybe not supported in all terminals)\n-\/\/     @: print old nodes - before matching (if available)\n-\/\/     B: print scheduling blocks (if available)\n-\/\/\n-\/\/ recursively follwo edges to nodes with permitted visit types,\n-\/\/ on the boundary additionally follow nodes allowed in boundary types.\n-\/\/\n-\/\/ examples:\n-\/\/   if->dump_bfs(10, 0, \"+cxo\")\n-\/\/     starting at if node, traverse inputs recursively\n-\/\/     only along control (mixed and other can also be control)\n-\/\/   phi->dump_bfs(5, 0, \"-dxo\")\n-\/\/     starting at phi node, traverse outputs recursively\n-\/\/     only along data (mixed and other can also have data flow)\n-\/\/   find_node(385)->dump_bfs(3, 0, \"cdmox+#@B\")\n-\/\/     find inputs of node 385, up to 3 nodes up (+)\n-\/\/     traverse all nodes (cdmox), use colors (#)\n-\/\/     display old nodes and blocks, if they exist\n-\/\/     useful call to start with\n-\/\/   find_node(102)->dump_bfs(10,0,\"dCDMOX-\")\n-\/\/     find non-data dependencies of a data node\n-\/\/     follow data node outputs until find another category\n-\/\/     node as the boundary\n-\/\/   x->dump_bfs(10, y, 0)\n-\/\/     find shortest path from x to y, along any edge or node\n-\/\/     will not find a path if it is longer than 10\n-\/\/     useful to find how x and y are related\n-\/\/   find_node(741)->dump_bfs(20,find_node(746),\"c+\")\n-\/\/     find shortest control path  between two nodes\n-\/\/   find_node(741)->dump_bfs(8,find_node(746),\"cdmxo+A\")\n-\/\/     find all paths (A) between two nodes of length at most 8\n-\/\/   find_node(741)->dump_bfs(7,find_node(741),\"c+A\")\n-\/\/     find all control loops for this node\n-\/\/\n-\/\/ output columns:\n-\/\/   distance: distance to this\/start in BFS traversal\n-\/\/   apd:      all paths distance (d_start + d_target)\n-\/\/   block:    block in which the node has been scheduled [head(), _idom->head(), _dom_depth]\n-\/\/   old:      old IR node - before matching\n-\/\/   dump\n+\/\/ Call this from debugger\n+\/\/ Useful for BFS traversal, shortest path, all path, loop detection, etc\n+\/\/ Designed to be more readable, and provide additional info\n+\/\/ To find all options, run:\n+\/\/   find_node(0)->dump_bfs(0,0,\"H\")\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":158,"deletions":94,"binary":false,"changes":252,"status":"modified"}]}