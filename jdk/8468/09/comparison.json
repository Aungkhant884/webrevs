{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1699,0 +1699,338 @@\n+class PrintBFS {\n+public:\n+  PrintBFS(Node* start, const int max_distance, Node* target, char const* options)\n+  : _start(start), _max_distance(max_distance), _target(target), _options(options),\n+    _parent((CmpKey)&cmp, hashkey), _distance((CmpKey)&cmp, hashkey) {};\n+  void run();\n+private:\n+  void traversal();\n+  void backtrack();\n+\n+  \/\/ inputs\n+  Node* _start;\n+  const int _max_distance;\n+  Node* _target;\n+  char const* _options;\n+\n+  \/\/ options\n+  bool _traverse_inputs = false;\n+  bool _traverse_outputs = false;\n+  bool _traverse_control = false;\n+  bool _traverse_memory = false;\n+  bool _traverse_data = false;\n+  bool _traverse_mixed = false;\n+  bool _traverse_other = false;\n+  bool _use_color = false;\n+  bool _print_blocks = false;\n+  bool _print_old = false;\n+  void parse_options_helper(bool &variable, const char* character);\n+  void parse_options();\n+\n+  \/\/ node category\n+  bool is_visitable_category(Node* n); \/\/ filter node category agains options\n+  const char* category_string(Node* n); \/\/ (colored) category\n+\n+  \/\/ node info\n+  Node* old_node (Node* n); \/\/ mach node -> prior IR node\n+  void print_node_idx (Node* n); \/\/ to tty\n+  void print_node_block (Node* n); \/\/ to tty: head idx, _idom, _dom_depth\n+\n+  \/\/ traversal data structures\n+  Node_List _worklist; \/\/ BFS queue\n+  void worklist_maybe_push(Node* n, Node* p, const int d);\n+  static int cmp(const Node* n1, const Node* n2) { return n1 != n2; }\n+  Dict _parent;   \/\/ node -> parent (one step closer to _start)\n+  Dict _distance; \/\/ node -> distance to start\n+  int distance(Node* n);\n+  Node* parent(Node* n);\n+\n+  \/\/ print header + node table\n+  void print_header(bool print_parent);\n+  void print_node(Node* n, bool print_parent);\n+};\n+\n+void PrintBFS::run() {\n+  if(_max_distance < 0) {\n+    tty->print(\"print_bfs: max_distance must be non-negative!\\n\");\n+    return;\n+  }\n+  parse_options();\n+\n+  if (_target == nullptr) {\n+    tty->print(\"No target: perform BFS.\\n\");\n+    print_header(true);\n+  } else {\n+    tty->print(\"Find shortest path:\");\n+    print_node_idx(_start);\n+    tty->print(\" ->\");\n+    print_node_idx(_target);\n+    tty->print(\"\\n\");\n+  }\n+\n+  traversal();\n+  backtrack();\n+}\n+\n+void PrintBFS::traversal() {\n+  worklist_maybe_push(_start, _start, 0);\n+  uint pos = 0;\n+  while (pos < _worklist.size()) {\n+    Node* n = _worklist.at(pos++);\n+    int d = abs(distance(n));\n+    if (_target == nullptr) {\n+      print_node(n, true);\n+    }\n+    if (n->is_Con()) {\n+      continue; \/\/ don't traverse through constant or top node\n+    }\n+    if (_traverse_inputs && _max_distance > d) {\n+      for (uint i = 0; i < n->req(); i++) {\n+        worklist_maybe_push(n->in(i), n, d+1); \/\/ positive for input\n+      }\n+    }\n+    if (_traverse_outputs && _max_distance > d) {\n+      for (uint i = 0; i < n->outcnt(); i++) {\n+        worklist_maybe_push(n->raw_out(i), n, -d-1); \/\/ negative for output\n+      }\n+    }\n+  }\n+}\n+\n+void PrintBFS::backtrack() {\n+  if (_target != nullptr) {\n+    if (parent(_target) == nullptr) {\n+      tty->print(\"Could not find target in BFS.\\n\");\n+      return;\n+    }\n+    print_header(false);\n+    Node* current = _target;\n+    while (current != parent(current)) {\n+      print_node(current, false);\n+      current = parent(current);\n+    }\n+    print_node(_start, false);\n+  }\n+}\n+\n+void PrintBFS::parse_options_helper(bool &variable, const char* character) {\n+  if (strstr(_options, character) != nullptr) {\n+    variable = true;\n+  }\n+}\n+\n+void PrintBFS::parse_options() {\n+  if (_options == nullptr) {\n+    _options = \"+-cmdxoOB\"; \/\/ default options\n+  }\n+  parse_options_helper(_traverse_inputs,  \"+\");\n+  parse_options_helper(_traverse_outputs, \"-\");\n+  parse_options_helper(_traverse_control, \"c\");\n+  parse_options_helper(_traverse_memory,  \"m\");\n+  parse_options_helper(_traverse_data,    \"d\");\n+  parse_options_helper(_traverse_mixed,   \"x\");\n+  parse_options_helper(_traverse_other,   \"o\");\n+  parse_options_helper(_use_color,        \"#\");\n+  parse_options_helper(_print_blocks,     \"B\");\n+  parse_options_helper(_print_old,        \"O\");\n+  Compile* C = Compile::current();\n+  _print_old &= (C->matcher() != nullptr); \/\/ only show old if there are new\n+  _print_blocks &= (C->cfg() != nullptr); \/\/ only show blocks if available\n+}\n+\n+bool PrintBFS::is_visitable_category(Node* n) {\n+  const Type *t = n->bottom_type();\n+  switch (t->category()) {\n+    case Type::Category::Data:\n+      return _traverse_data;\n+    case Type::Category::Memory:\n+      return _traverse_memory;\n+    case Type::Category::Mixed:\n+      return _traverse_mixed;\n+    case Type::Category::Control:\n+      return _traverse_control;\n+    case Type::Category::Other:\n+      return _traverse_other;\n+    case Type::Category::Undef:\n+      n->dump();\n+      assert(false, \"category undef ??\");\n+    default:\n+      n->dump();\n+      assert(false, \"not covered\");\n+  }\n+  return false;\n+}\n+\n+const char* PrintBFS::category_string(Node* n) {\n+  const Type *t = n->bottom_type();\n+  switch (t->category()) {\n+    case Type::Category::Data:\n+      return _use_color ? \"\\u001b[34md\\u001b[0m\" : \"d\";\n+    case Type::Category::Memory:\n+      return _use_color ? \"\\u001b[32mm\\u001b[0m\" : \"m\";\n+    case Type::Category::Mixed:\n+      return _use_color ? \"\\u001b[35mx\\u001b[0m\" : \"x\";\n+    case Type::Category::Control:\n+      return _use_color ? \"\\u001b[31mc\\u001b[0m\" : \"c\";\n+    case Type::Category::Other:\n+      return _use_color ? \"\\u001b[33mo\\u001b[0m\" : \"o\";\n+    case Type::Category::Undef:\n+      n->dump();\n+      assert(false, \"category undef ??\");\n+    default:\n+      n->dump();\n+      assert(false, \"not covered\");\n+  }\n+  return \"?\";\n+}\n+\n+Node* PrintBFS::old_node (Node* n) {\n+  Compile* C = Compile::current();\n+  if (C->matcher() == nullptr || !C->node_arena()->contains(n)) {\n+    return (Node*)nullptr;\n+  } else {\n+    return C->matcher()->find_old_node(n);\n+  }\n+}\n+\n+void PrintBFS::print_node_idx (Node* n) {\n+  Compile* C = Compile::current();\n+  char buf[30];\n+  if (n == nullptr) {\n+    sprintf(buf,\"_\");           \/\/ null\n+  } else if (C->node_arena()->contains(n)) {\n+    sprintf(buf, \"%d\", n->_idx);  \/\/ new node\n+  } else {\n+    sprintf(buf, \"o%d\", n->_idx); \/\/ old node\n+  }\n+  tty->print(\"%6s\", buf);\n+}\n+\n+void PrintBFS::print_node_block (Node* n) {\n+  Compile* C = Compile::current();\n+  Block* b = C->node_arena()->contains(n)\n+             ? C->cfg()->get_block_for_node(n)\n+             : nullptr; \/\/ guard against old nodes\n+  if (b == nullptr) {\n+    tty->print(\"     _\");\n+    tty->print(\"     _\");\n+    tty->print(\"   _\");\n+  } else {\n+    print_node_idx(b->head());\n+    if(b->_idom) {\n+      print_node_idx(b->_idom->head());\n+    } else {\n+      tty->print(\"     _\");\n+    }\n+    tty->print(\"%4d\", b->_dom_depth);\n+  }\n+}\n+\n+void PrintBFS::worklist_maybe_push(Node* n, Node* p, const int d) {\n+  if (n != nullptr &&\n+      parent(n) == nullptr && \/\/ visited before?\n+      (is_visitable_category(n) || n == _start)) { \/\/ correct category or start?\n+    _worklist.push(n);\n+    _parent.Insert(n, p);\n+    _distance.Insert(n, (void*)(size_t)d);\n+  }\n+}\n+\n+int PrintBFS::distance(Node* n) {\n+  return (int)(size_t)_distance[n];\n+  \/\/ storing int in a (void*), must do double casting\n+}\n+\n+Node* PrintBFS::parent(Node* n) {\n+  return (Node*)_parent[n];\n+}\n+\n+void PrintBFS::print_header(bool print_parent) {\n+  tty->print(\"dis\");                          \/\/ distance\n+  if (_print_blocks) {\n+    tty->print(\" [head  idom  d]\");           \/\/ block\n+  }\n+  if(_print_old) {\n+    tty->print(\"   old\");                     \/\/ old node\n+  }\n+  if (print_parent) {\n+    tty->print(\"   par\");                     \/\/ parent\n+  }\n+  if (_traverse_inputs && _traverse_outputs) {\n+    tty->print(\" e\");                         \/\/ edge\n+  }\n+  tty->print(\" c dump\\n\");                    \/\/ category and dump\n+  tty->print(\"---------------------------------------------\\n\");\n+}\n+\n+void PrintBFS::print_node(Node* n, bool print_parent) {\n+  tty->print(\"%3d\", abs(distance(n)));        \/\/ distance\n+  if (_print_blocks) {\n+    print_node_block(n);                      \/\/ block\n+  }\n+  if (_print_old) {\n+    print_node_idx(old_node(n));              \/\/ old node\n+  }\n+  if (print_parent) {\n+    print_node_idx(parent(n));                \/\/ parent\n+  }\n+  if (_traverse_inputs && _traverse_outputs) {\n+    int dd = distance(n);\n+    const char* edge = (dd >=0 ) ? ((dd > 0) ? \"+\" : \" \" ) : \"-\";\n+    tty->print(\" %s\", edge);                  \/\/ edge\n+  }\n+  tty->print(\" %s \", category_string(n));     \/\/ category\n+  n->dump();                                  \/\/ node dump\n+}\n+\n+\/\/------------------------------print_bfs--------------------------------------\n+\/\/ Call this from debugger:\n+\/\/ BFS traversal of graph, starting at node this\/start\n+\/\/ this\/start: staring point of BFS\n+\/\/ max_distance: maximal distance from this\/start BFS visits\n+\/\/ target:\n+\/\/   if nullptr: print all nodes visited during BFS\n+\/\/   else: find shortest path from this\/start to target, via BFS and backtracking\n+\/\/ options:\n+\/\/   if nullptr: same as \"+-cmdxoOB\"\n+\/\/   else: use combination of these characters\n+\/\/     +: traverse in-edges\n+\/\/     -: traverse out-edges\n+\/\/     c: traverse control nodes\n+\/\/     m: traverse memory nodes\n+\/\/     d: traverse data nodes\n+\/\/     x: traverse mixed nodes\n+\/\/     o: traverse other nodes\n+\/\/     #: display node category in color (maybe not supported in all terminals)\n+\/\/     O: print old nodes - before matching (if available)\n+\/\/     B: print scheduling blocks (if available)\n+\/\/\n+\/\/ examples:\n+\/\/   if->print_bfs(10, 0, \"+cxo\")\n+\/\/     starting at if node, traverse inputs recursively\n+\/\/     only along control (mixed and other can also be control)\n+\/\/   phi->print_bfs(5, 0, \"-dxo\")\n+\/\/     starting at phi node, traverse outputs recursively\n+\/\/     only along data (mixed and other can also have data flow)\n+\/\/   x->print_bfs(10, y, 0)\n+\/\/     find shortest path from x to y, along any edge or node\n+\/\/     will not find a path if it is longer than 10\n+\/\/     useful to find how x and y are related\n+\/\/   find_node(385)->print_bfs(3, 0, \"cdmox+#OB\")\n+\/\/     find inputs of node 385, up to 3 nodes up (+)\n+\/\/     traverse all nodes (cdmox), use colors (#)\n+\/\/     display old nodes and blocks, if they exist\n+\/\/     useful call to start with\n+\/\/\n+\/\/ output columns:\n+\/\/   distance: distance to this\/start in BFS traversal\n+\/\/   block:    block in which the node has been scheduled [head(), _idom->head(), _dom_depth]\n+\/\/   old:      old IR node - before matching\n+\/\/   parent:   parent node - one distance closer to this\/start\n+\/\/   edge:     input (+) or output (-)\n+\/\/   category: characters cmdxo from options string\n+\/\/   dump\n+void Node::print_bfs(const int max_distance, Node* target, char const* options) {\n+  PrintBFS bfs(this, max_distance, target, options);\n+  bfs.run();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":339,"deletions":1,"binary":false,"changes":340,"status":"modified"},{"patch":"@@ -1193,0 +1193,1 @@\n+  void print_bfs (const int max_distance, Node* target, char const* options); \/\/ Print BFS traversal\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}