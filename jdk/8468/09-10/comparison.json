{"files":[{"patch":"@@ -141,7 +141,0 @@\n-\n-\/\/ For a ParmNode, all immediate inputs and outputs are considered relevant\n-\/\/ both in compact and standard representation.\n-void ParmNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  this->collect_nodes(in_rel, 1, false, false);\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n@@ -195,2 +188,2 @@\n-void ReturnNode::dump_req(outputStream *st) const {\n-  \/\/ Dump the required inputs, enclosed in '(' and ')'\n+void ReturnNode::dump_req(outputStream *st, DumpConfig* dc) const {\n+  \/\/ Dump the required inputs, after printing \"returns\"\n@@ -199,3 +192,8 @@\n-    if (i == TypeFunc::Parms) st->print(\"returns\");\n-    if (in(i)) st->print(\"%c%d \", Compile::current()->node_arena()->contains(in(i)) ? ' ' : 'o', in(i)->_idx);\n-    else st->print(\"_ \");\n+    if (i == TypeFunc::Parms) st->print(\"returns \");\n+    Node* p = in(i);\n+    if (p != nullptr) {\n+      p->dump_idx(false, st, dc);\n+      st->print(\" \");\n+    } else {\n+      st->print(\"_ \");\n+    }\n@@ -238,2 +236,2 @@\n-void RethrowNode::dump_req(outputStream *st) const {\n-  \/\/ Dump the required inputs, enclosed in '(' and ')'\n+void RethrowNode::dump_req(outputStream *st, DumpConfig* dc) const {\n+  \/\/ Dump the required inputs, after printing \"exception\"\n@@ -242,3 +240,8 @@\n-    if (i == TypeFunc::Parms) st->print(\"exception\");\n-    if (in(i)) st->print(\"%c%d \", Compile::current()->node_arena()->contains(in(i)) ? ' ' : 'o', in(i)->_idx);\n-    else st->print(\"_ \");\n+    if (i == TypeFunc::Parms) st->print(\"exception \");\n+    Node* p = in(i);\n+    if (p != nullptr) {\n+      p->dump_idx(false, st, dc);\n+      st->print(\" \");\n+    } else {\n+      st->print(\"_ \");\n+    }\n@@ -692,1 +695,1 @@\n-void CallNode::dump_req(outputStream *st) const {\n+void CallNode::dump_req(outputStream *st, DumpConfig* dc) const {\n@@ -697,2 +700,7 @@\n-    if (in(i)) st->print(\"%c%d \", Compile::current()->node_arena()->contains(in(i)) ? ' ' : 'o', in(i)->_idx);\n-    else st->print(\"_ \");\n+    Node* p = in(i);\n+    if (p != nullptr) {\n+      p->dump_idx(false, st, dc);\n+      st->print(\" \");\n+    } else {\n+      st->print(\"_ \");\n+    }\n@@ -1464,13 +1472,0 @@\n-\n-\/\/ The related nodes of a SafepointNode are all data inputs, excluding the\n-\/\/ control boundary, as well as all outputs till level 2 (to include projection\n-\/\/ nodes and targets). In compact mode, just include inputs till level 1 and\n-\/\/ outputs as before.\n-void SafePointNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 1, false, false);\n-  } else {\n-    this->collect_nodes_in_all_data(in_rel, false);\n-  }\n-  this->collect_nodes(out_rel, -2, false, false);\n-}\n@@ -2040,10 +2035,0 @@\n-\n-\/\/ The related set of lock nodes includes the control boundary.\n-void AbstractLockNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-      this->collect_nodes(in_rel, 1, false, false);\n-    } else {\n-      this->collect_nodes_in_all_data(in_rel, true);\n-    }\n-    this->collect_nodes(out_rel, -2, false, false);\n-}\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":28,"deletions":43,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n@@ -131,1 +130,1 @@\n-  virtual void dump_req(outputStream *st = tty) const;\n+  virtual void dump_req(outputStream *st = tty, DumpConfig* dc = nullptr) const;\n@@ -152,1 +151,1 @@\n-  virtual void dump_req(outputStream *st = tty) const;\n+  virtual void dump_req(outputStream *st = tty, DumpConfig* dc = nullptr) const;\n@@ -502,1 +501,0 @@\n-  virtual void           related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n@@ -659,1 +657,1 @@\n-  virtual void        dump_req(outputStream* st = tty) const;\n+  virtual void        dump_req(outputStream *st = tty, DumpConfig* dc = nullptr) const;\n@@ -1118,1 +1116,0 @@\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2576,8 +2576,0 @@\n-void PhiNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  \/\/ For a PhiNode, the set of related nodes includes all inputs till level 2,\n-  \/\/ and all outputs till level 1. In compact mode, inputs till level 1 are\n-  \/\/ collected.\n-  this->collect_nodes(in_rel, compact ? 1 : 2, false, false);\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n-\n@@ -2608,11 +2600,0 @@\n-#ifndef PRODUCT\n-\/\/-----------------------------related-----------------------------------------\n-\/\/ The related nodes of a GotoNode are all inputs at level 1, as well as the\n-\/\/ outputs at level 1. This is regardless of compact mode.\n-void GotoNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  this->collect_nodes(in_rel, 1, false, false);\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n-#endif\n-\n-\n@@ -2624,11 +2605,0 @@\n-#ifndef PRODUCT\n-\/\/-----------------------------related-----------------------------------------\n-\/\/ The related nodes of a JumpNode are all inputs at level 1, as well as the\n-\/\/ outputs at level 2 (to include actual jump targets beyond projection nodes).\n-\/\/ This is regardless of compact mode.\n-void JumpNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  this->collect_nodes(in_rel, 1, false, false);\n-  this->collect_nodes(out_rel, -2, false, false);\n-}\n-#endif\n-\n@@ -2695,6 +2665,0 @@\n-\n-void JumpProjNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  \/\/ The related nodes of a JumpProjNode are its inputs and outputs at level 1.\n-  this->collect_nodes(in_rel, 1, false, false);\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -227,1 +227,0 @@\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n@@ -253,4 +252,0 @@\n-\n-#ifndef PRODUCT\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n@@ -409,1 +404,0 @@\n-  virtual void related(GrowableArray <Node *> *in_rel, GrowableArray <Node *> *out_rel, bool compact) const;\n@@ -435,5 +429,0 @@\n-\n-#ifndef PRODUCT\n-public:\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n@@ -507,3 +496,0 @@\n-#ifndef PRODUCT\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n@@ -535,1 +521,0 @@\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1741,15 +1741,0 @@\n-\/\/-------------------------------related---------------------------------------\n-\/\/ An IfProjNode's related node set consists of its input (an IfNode) including\n-\/\/ the IfNode's condition, plus all of its outputs at level 1. In compact mode,\n-\/\/ the restrictions for IfNode apply (see IfNode::rel).\n-void IfProjNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  Node* ifNode = this->in(0);\n-  in_rel->append(ifNode);\n-  if (compact) {\n-    ifNode->collect_nodes(in_rel, 3, false, true);\n-  } else {\n-    ifNode->collect_nodes_in_all_data(in_rel, false);\n-  }\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n-\n@@ -1760,15 +1745,0 @@\n-\n-\/\/-------------------------------related---------------------------------------\n-\/\/ For an IfNode, the set of related output nodes is just the output nodes till\n-\/\/ depth 2, i.e, the IfTrue\/IfFalse projection nodes plus the nodes they refer.\n-\/\/ The related input nodes contain no control nodes, but all data nodes\n-\/\/ pertaining to the condition. In compact mode, the input nodes are collected\n-\/\/ up to a depth of 3.\n-void IfNode::related(GrowableArray <Node *> *in_rel, GrowableArray <Node *> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 3, false, true);\n-  } else {\n-    this->collect_nodes_in_all_data(in_rel, false);\n-  }\n-  this->collect_nodes(out_rel, -2, false, false);\n-}\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -465,15 +465,0 @@\n-\n-#ifndef PRODUCT\n-\/\/----------------------------BinaryNode---------------------------------------\n-\/\/ The set of related nodes for a BinaryNode is all data inputs and all outputs\n-\/\/ till level 2 (i.e., one beyond the associated CMoveNode). In compact mode,\n-\/\/ it's the inputs till level 1 and the outputs till level 2.\n-void BinaryNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 1, false, true);\n-  } else {\n-    this->collect_nodes_in_all_data(in_rel, false);\n-  }\n-  this->collect_nodes(out_rel, -2, false, false);\n-}\n-#endif\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -163,4 +163,0 @@\n-\n-#ifndef PRODUCT\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n","filename":"src\/hotspot\/share\/opto\/movenode.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1703,1 +1703,2 @@\n-    _parent((CmpKey)&cmp, hashkey), _distance((CmpKey)&cmp, hashkey) {};\n+    _dcc(this), _info_uid((CmpKey)&cmp, hashkey) {\n+  };\n@@ -1706,2 +1707,6 @@\n-  void traversal();\n-  void backtrack();\n+  \/\/ pipeline steps\n+  bool configure();\n+  void collect();\n+  void prune();\n+  void sort();\n+  void print();\n@@ -1718,5 +1723,9 @@\n-  bool _traverse_control = false;\n-  bool _traverse_memory = false;\n-  bool _traverse_data = false;\n-  bool _traverse_mixed = false;\n-  bool _traverse_other = false;\n+  struct Filter {\n+    bool control = false;\n+    bool memory = false;\n+    bool data = false;\n+    bool mixed = false;\n+    bool other = false;\n+  };\n+  Filter filter_visit;\n+  Filter filter_boundary;\n@@ -1729,3 +1738,13 @@\n-  \/\/ node category\n-  bool is_visitable_category(Node* n); \/\/ filter node category agains options\n-  const char* category_string(Node* n); \/\/ (colored) category\n+  \/\/ node category (filter \/ color)\n+  bool filter_category(Node* n, Filter& filter); \/\/ filter node category agains options\n+public:\n+  class DumpConfigColored : public Node::DumpConfig {\n+  public:\n+    DumpConfigColored(PrintBFS* bfs) : _bfs(bfs) {};\n+    virtual void pre_dump(outputStream *st, const Node* n);\n+    virtual void post_dump(outputStream *st);\n+  private:\n+    PrintBFS* _bfs;\n+  };\n+private:\n+  DumpConfigColored _dcc;\n@@ -1740,1 +1759,19 @@\n-  void worklist_maybe_push(Node* n, Node* p, const int d);\n+  void maybe_traverse(Node* src, Node* dst);\n+\n+  \/\/ node info annotation\n+  class Info {\n+  public:\n+    Info() : Info(nullptr, 0) {};\n+    Info(Node* node, int distance)\n+      : _node(node), _distance(distance) {};\n+    Node* node() { return _node; };\n+    int distance() { return _distance; };\n+    Node_List edge_fwd; \/\/ pointing away from _start\n+    Node_List edge_bwd; \/\/ pointing toward _start\n+    bool is_marked() { return _mark; } \/\/ marked to keep during pruning\n+    void set_mark() { _mark = true; }\n+  private:\n+    Node* _node;\n+    int _distance;\n+    bool _mark = false;\n+  };\n@@ -1742,4 +1779,19 @@\n-  Dict _parent;   \/\/ node -> parent (one step closer to _start)\n-  Dict _distance; \/\/ node -> distance to start\n-  int distance(Node* n);\n-  Node* parent(Node* n);\n+  Dict _info_uid;             \/\/ Node -> uid\n+  GrowableArray <Info> _info; \/\/ uid  -> info\n+  Info* find_info(const Node* n) {\n+    size_t uid = (size_t)_info_uid[n];\n+    if (uid == 0) {\n+      return nullptr;\n+    }\n+    return &_info.at(uid);\n+  };\n+  void make_info(Node* node, int distance) {\n+    assert(find_info(node) == nullptr, \"node does not yet have info\");\n+    size_t uid = _info.length()+1;\n+    _info_uid.Insert(node, (void*)uid);\n+    _info.at_put_grow(uid, Info(node, distance));\n+    assert(find_info(node)->node() == node, \"stored correct node\");\n+  };\n+\n+  \/\/ filled by sort, printed by print\n+  Node_List _printlist;\n@@ -1748,2 +1800,2 @@\n-  void print_header(bool print_parent);\n-  void print_node(Node* n, bool print_parent);\n+  void print_header();\n+  void print_node(Node* n);\n@@ -1753,0 +1805,11 @@\n+  if (!configure()) {\n+    return;\n+  }\n+  collect();\n+  prune();\n+  sort();\n+  print();\n+}\n+\n+\/\/ set up configuration for BFS and print\n+bool PrintBFS::configure() {\n@@ -1755,1 +1818,1 @@\n-    return;\n+    return false;\n@@ -1761,1 +1824,0 @@\n-    print_header(true);\n@@ -1769,3 +1831,1 @@\n-\n-  traversal();\n-  backtrack();\n+  return true;\n@@ -1774,2 +1834,3 @@\n-void PrintBFS::traversal() {\n-  worklist_maybe_push(_start, _start, 0);\n+\/\/ BFS traverse according to configuration, fill worklist and info\n+void PrintBFS::collect() {\n+  maybe_traverse(_start, _start);\n@@ -1778,4 +1839,4 @@\n-    Node* n = _worklist.at(pos++);\n-    int d = abs(distance(n));\n-    if (_target == nullptr) {\n-      print_node(n, true);\n+    Node* n = _worklist.at(pos++); \/\/ next node to traverse\n+    Info* info = find_info(n);\n+    if (!filter_category(n, filter_visit) && n != _start) {\n+      continue; \/\/ we hit boundary, do not traverse further\n@@ -1783,2 +1844,2 @@\n-    if (n->is_Con()) {\n-      continue; \/\/ don't traverse through constant or top node\n+    if (n != _start && (n->is_Root() || n->is_Con())) {\n+      continue; \/\/ traversing through root \/ const node would lead to unrelated nodes\n@@ -1786,1 +1847,1 @@\n-    if (_traverse_inputs && _max_distance > d) {\n+    if (_traverse_inputs && _max_distance > info->distance()) {\n@@ -1788,1 +1849,1 @@\n-        worklist_maybe_push(n->in(i), n, d+1); \/\/ positive for input\n+        maybe_traverse(n, n->in(i));\n@@ -1791,1 +1852,1 @@\n-    if (_traverse_outputs && _max_distance > d) {\n+    if (_traverse_outputs && _max_distance > info->distance()) {\n@@ -1793,1 +1854,1 @@\n-        worklist_maybe_push(n->raw_out(i), n, -d-1); \/\/ negative for output\n+        maybe_traverse(n, n->raw_out(i));\n@@ -1799,3 +1860,12 @@\n-void PrintBFS::backtrack() {\n-  if (_target != nullptr) {\n-    if (parent(_target) == nullptr) {\n+\/\/ go through work list, mark those that we want to print\n+void PrintBFS::prune() {\n+  if ( _target == nullptr ) {\n+    \/\/ take all nodes from BFS\n+    for (uint i = 0; i < _worklist.size(); i++) {\n+      Node* n = _worklist.at(i);\n+      Info* info = find_info(n);\n+      info->set_mark();\n+    }\n+  } else {\n+    \/\/ backtrack shortest path\n+    if (find_info(_target) == nullptr) {\n@@ -1805,1 +1875,0 @@\n-    print_header(false);\n@@ -1807,3 +1876,31 @@\n-    while (current != parent(current)) {\n-      print_node(current, false);\n-      current = parent(current);\n+    while (true) {\n+      Info* info = find_info(current);\n+      info->set_mark();\n+      if (current == _start) {\n+        break;\n+      }\n+      \/\/ first edge -> leads us one step closer to _start\n+      current = info->edge_bwd.at(0);\n+    }\n+  }\n+}\n+\n+\/\/ go through worklist in desired order, put the marked ones in printlist\n+void PrintBFS::sort() {\n+  if(_traverse_inputs && !_traverse_outputs) {\n+    \/\/ reverse order\n+    for (int i = _worklist.size()-1; i >= 0; i--) {\n+      Node* n = _worklist.at(i);\n+      Info* info = find_info(n);\n+      if (info->is_marked()) {\n+        _printlist.push(n);\n+      }\n+    }\n+  } else {\n+    \/\/ same order as worklist\n+    for (uint i = 0; i < _worklist.size(); i++) {\n+      Node* n = _worklist.at(i);\n+      Info* info = find_info(n);\n+      if (info->is_marked()) {\n+        _printlist.push(n);\n+      }\n@@ -1811,1 +1908,13 @@\n-    print_node(_start, false);\n+  }\n+}\n+\n+\/\/ go through printlist and print\n+void PrintBFS::print() {\n+  if( _printlist.size() > 0 ) {\n+    print_header();\n+    for (uint i = 0; i < _printlist.size(); i++) {\n+      Node* n = _printlist.at(i);\n+      print_node(n);\n+    }\n+  } else {\n+    tty->print(\"No nodes to print.\\n\");\n@@ -1823,12 +1932,17 @@\n-    _options = \"+-cmdxoOB\"; \/\/ default options\n-  }\n-  parse_options_helper(_traverse_inputs,  \"+\");\n-  parse_options_helper(_traverse_outputs, \"-\");\n-  parse_options_helper(_traverse_control, \"c\");\n-  parse_options_helper(_traverse_memory,  \"m\");\n-  parse_options_helper(_traverse_data,    \"d\");\n-  parse_options_helper(_traverse_mixed,   \"x\");\n-  parse_options_helper(_traverse_other,   \"o\");\n-  parse_options_helper(_use_color,        \"#\");\n-  parse_options_helper(_print_blocks,     \"B\");\n-  parse_options_helper(_print_old,        \"O\");\n+    _options = \"cmdxo+-@B\"; \/\/ default options\n+  }\n+  parse_options_helper(_traverse_inputs,        \"+\");\n+  parse_options_helper(_traverse_outputs,       \"-\");\n+  parse_options_helper(filter_visit.control,    \"c\");\n+  parse_options_helper(filter_visit.memory,     \"m\");\n+  parse_options_helper(filter_visit.data,       \"d\");\n+  parse_options_helper(filter_visit.mixed,      \"x\");\n+  parse_options_helper(filter_visit.other,      \"o\");\n+  parse_options_helper(filter_boundary.control, \"C\");\n+  parse_options_helper(filter_boundary.memory,  \"M\");\n+  parse_options_helper(filter_boundary.data,    \"D\");\n+  parse_options_helper(filter_boundary.mixed,   \"X\");\n+  parse_options_helper(filter_boundary.other,   \"O\");\n+  parse_options_helper(_use_color,              \"#\");\n+  parse_options_helper(_print_blocks,           \"B\");\n+  parse_options_helper(_print_old,              \"@\");\n@@ -1840,1 +1954,1 @@\n-bool PrintBFS::is_visitable_category(Node* n) {\n+bool PrintBFS::filter_category(Node* n, Filter& filter) {\n@@ -1844,1 +1958,1 @@\n-      return _traverse_data;\n+      return filter.data;\n@@ -1846,1 +1960,1 @@\n-      return _traverse_memory;\n+      return filter.memory;\n@@ -1848,1 +1962,1 @@\n-      return _traverse_mixed;\n+      return filter.mixed;\n@@ -1850,1 +1964,1 @@\n-      return _traverse_control;\n+      return filter.control;\n@@ -1852,1 +1966,1 @@\n-      return _traverse_other;\n+      return filter.other;\n@@ -1863,1 +1977,9 @@\n-const char* PrintBFS::category_string(Node* n) {\n+void PrintBFS::DumpConfigColored::pre_dump(outputStream *st, const Node* n) {\n+  if(!_bfs->_use_color) {\n+    return;\n+  }\n+  Info* info = _bfs->find_info(n);\n+  if (info == nullptr || !info->is_marked()) {\n+    return;\n+  }\n+\n@@ -1867,1 +1989,2 @@\n-      return _use_color ? \"\\u001b[34md\\u001b[0m\" : \"d\";\n+      st->print(\"\\u001b[34m\");\n+      break;\n@@ -1869,1 +1992,2 @@\n-      return _use_color ? \"\\u001b[32mm\\u001b[0m\" : \"m\";\n+      st->print(\"\\u001b[32m\");\n+      break;\n@@ -1871,1 +1995,2 @@\n-      return _use_color ? \"\\u001b[35mx\\u001b[0m\" : \"x\";\n+      st->print(\"\\u001b[35m\");\n+      break;\n@@ -1873,1 +1998,2 @@\n-      return _use_color ? \"\\u001b[31mc\\u001b[0m\" : \"c\";\n+      st->print(\"\\u001b[31m\");\n+      break;\n@@ -1875,1 +2001,2 @@\n-      return _use_color ? \"\\u001b[33mo\\u001b[0m\" : \"o\";\n+      st->print(\"\\u001b[33m\");\n+      break;\n@@ -1879,0 +2006,1 @@\n+      break;\n@@ -1882,0 +2010,1 @@\n+      break;\n@@ -1883,1 +2012,7 @@\n-  return \"?\";\n+}\n+\n+void PrintBFS::DumpConfigColored::post_dump(outputStream *st) {\n+  if(!_bfs->_use_color) {\n+    return;\n+  }\n+  st->print(\"\\u001b[0m\"); \/\/ white\n@@ -1928,7 +2063,20 @@\n-void PrintBFS::worklist_maybe_push(Node* n, Node* p, const int d) {\n-  if (n != nullptr &&\n-      parent(n) == nullptr && \/\/ visited before?\n-      (is_visitable_category(n) || n == _start)) { \/\/ correct category or start?\n-    _worklist.push(n);\n-    _parent.Insert(n, p);\n-    _distance.Insert(n, (void*)(size_t)d);\n+\/\/ filter, and add to worklist, add info, note traversal edges\n+void PrintBFS::maybe_traverse(Node* src, Node* dst) {\n+  if (dst != nullptr &&\n+     (filter_category(dst, filter_visit) ||\n+      filter_category(dst, filter_boundary) ||\n+      dst == _start)) { \/\/ correct category or start?\n+    if( find_info(dst) == nullptr ){\n+      \/\/ never visited - set up info\n+      _worklist.push(dst);\n+      int d = 0;\n+      if (dst != _start) {\n+        d = find_info(src)->distance()+1;\n+      }\n+      make_info(dst, d);\n+    }\n+    if (src != dst) {\n+      \/\/ traversal edges useful during pruning\n+      find_info(src)->edge_fwd.push(dst);\n+      find_info(dst)->edge_bwd.push(src);\n+    }\n@@ -1938,10 +2086,1 @@\n-int PrintBFS::distance(Node* n) {\n-  return (int)(size_t)_distance[n];\n-  \/\/ storing int in a (void*), must do double casting\n-}\n-\n-Node* PrintBFS::parent(Node* n) {\n-  return (Node*)_parent[n];\n-}\n-\n-void PrintBFS::print_header(bool print_parent) {\n+void PrintBFS::print_header() {\n@@ -1955,7 +2094,1 @@\n-  if (print_parent) {\n-    tty->print(\"   par\");                     \/\/ parent\n-  }\n-  if (_traverse_inputs && _traverse_outputs) {\n-    tty->print(\" e\");                         \/\/ edge\n-  }\n-  tty->print(\" c dump\\n\");                    \/\/ category and dump\n+  tty->print(\" dump\\n\");                      \/\/ node dump\n@@ -1965,2 +2098,2 @@\n-void PrintBFS::print_node(Node* n, bool print_parent) {\n-  tty->print(\"%3d\", abs(distance(n)));        \/\/ distance\n+void PrintBFS::print_node(Node* n) {\n+  tty->print(\"%3d\", find_info(n)->distance());\/\/ distance\n@@ -1973,10 +2106,2 @@\n-  if (print_parent) {\n-    print_node_idx(parent(n));                \/\/ parent\n-  }\n-  if (_traverse_inputs && _traverse_outputs) {\n-    int dd = distance(n);\n-    const char* edge = (dd >=0 ) ? ((dd > 0) ? \"+\" : \" \" ) : \"-\";\n-    tty->print(\" %s\", edge);                  \/\/ edge\n-  }\n-  tty->print(\" %s \", category_string(n));     \/\/ category\n-  n->dump();                                  \/\/ node dump\n+  tty->print(\" \");\n+  n->dump(\"\\n\", false, tty, &_dcc);           \/\/ node dump\n@@ -1994,1 +2119,1 @@\n-\/\/   if nullptr: same as \"+-cmdxoOB\"\n+\/\/   if nullptr: same as \"cmdxo+-@B\"\n@@ -1998,5 +2123,10 @@\n-\/\/     c: traverse control nodes\n-\/\/     m: traverse memory nodes\n-\/\/     d: traverse data nodes\n-\/\/     x: traverse mixed nodes\n-\/\/     o: traverse other nodes\n+\/\/     c: visit control nodes\n+\/\/     m: visit memory nodes\n+\/\/     d: visit data nodes\n+\/\/     x: visit mixed nodes\n+\/\/     o: visit other nodes\n+\/\/     C: boundary control nodes\n+\/\/     M: boundary memory nodes\n+\/\/     D: boundary data nodes\n+\/\/     X: boundary mixed nodes\n+\/\/     O: boundary other nodes\n@@ -2004,1 +2134,1 @@\n-\/\/     O: print old nodes - before matching (if available)\n+\/\/     @: print old nodes - before matching (if available)\n@@ -2007,0 +2137,3 @@\n+\/\/ recursively follwo edges to nodes with permitted visit types,\n+\/\/ on the boundary additionally follow nodes allowed in boundary types.\n+\/\/\n@@ -2028,2 +2161,0 @@\n-\/\/   parent:   parent node - one distance closer to this\/start\n-\/\/   edge:     input (+) or output (-)\n@@ -2037,0 +2168,48 @@\n+\/\/ log10 rounded down\n+uint log10(const uint i) {\n+  uint v = 10;\n+  uint e = 0;\n+  while(v <= i) {\n+    v *= 10;\n+    e++;\n+  }\n+  return e;\n+}\n+\n+\/\/ -----------------------------dump_idx---------------------------------------\n+void Node::dump_idx(bool align, outputStream *st, DumpConfig* dc) const {\n+  if (dc != nullptr) {\n+    dc->pre_dump(st, this);\n+  }\n+  Compile* C = Compile::current();\n+  bool is_new = C->node_arena()->contains(this);\n+  if(align) { \/\/ print prefix empty spaces$\n+    \/\/ +1 for leading digit, +1 for \"o\"\n+    uint max_width = log10(C->unique()) + 2;\n+    \/\/ +1 for leading digit, maybe +1 for \"o\"\n+    uint width = log10(_idx) + 1 + (is_new ? 0 : 1);\n+    while(max_width > width) {\n+      st->print(\" \");\n+      width++;\n+    }\n+  }\n+  if(!is_new) {\n+    st->print(\"o\");\n+  }\n+  st->print(\"%d\", _idx);\n+  if (dc != nullptr) {\n+    dc->post_dump(st);\n+  }\n+}\n+\n+\/\/ -----------------------------dump_name--------------------------------------\n+void Node::dump_name(outputStream *st, DumpConfig* dc) const {\n+  if (dc != nullptr) {\n+    dc->pre_dump(st, this);\n+  }\n+  st->print(\"%s\", Name());\n+  if (dc != nullptr) {\n+    dc->post_dump(st);\n+  }\n+}\n+\n@@ -2107,1 +2286,1 @@\n-void Node::dump(const char* suffix, bool mark, outputStream *st) const {\n+void Node::dump(const char* suffix, bool mark, outputStream *st, DumpConfig* dc) const {\n@@ -2112,1 +2291,1 @@\n-  if (_indent > 0) {\n+  if (_indent > 0) {\/\/ TODO: remove?\n@@ -2116,1 +2295,5 @@\n-  st->print(\"%c%d%s%s  === \", is_new ? ' ' : 'o', _idx, mark ? \" >\" : \"  \", Name());\n+  \/\/ idx mark name ===\n+  dump_idx(true, st, dc);\n+  st->print(mark ? \" >\" : \"  \");\n+  dump_name(st, dc);\n+  st->print(\"  === \");\n@@ -2119,2 +2302,2 @@\n-  dump_req(st);\n-  dump_prec(st);\n+  dump_req(st, dc);\n+  dump_prec(st, dc);\n@@ -2122,1 +2305,1 @@\n-  dump_out(st);\n+  dump_out(st, dc);\n@@ -2189,1 +2372,1 @@\n-void Node::dump_req(outputStream *st) const {\n+void Node::dump_req(outputStream *st, DumpConfig* dc) const {\n@@ -2198,1 +2381,2 @@\n-      st->print(\"%c%d \", Compile::current()->node_arena()->contains(d) ? ' ' : 'o', d->_idx);\n+      d->dump_idx(false, st, dc);\n+      st->print(\" \");\n@@ -2205,1 +2389,1 @@\n-void Node::dump_prec(outputStream *st) const {\n+void Node::dump_prec(outputStream *st, DumpConfig* dc) const {\n@@ -2213,1 +2397,2 @@\n-      st->print(\"%c%d \", Compile::current()->node_arena()->contains(in(i)) ? ' ' : 'o', in(i)->_idx);\n+      p->dump_idx(false, st, dc);\n+      st->print(\" \");\n@@ -2219,1 +2404,1 @@\n-void Node::dump_out(outputStream *st) const {\n+void Node::dump_out(outputStream *st, DumpConfig* dc) const {\n@@ -2221,1 +2406,1 @@\n-  st->print(\" [[\");\n+  st->print(\" [[ \");\n@@ -2230,1 +2415,2 @@\n-      st->print(\"%c%d \", Compile::current()->node_arena()->contains(u) ? ' ' : 'o', u->_idx);\n+      u->dump_idx(false, st, dc);\n+      st->print(\" \");\n@@ -2334,82 +2520,0 @@\n-\/\/----------------------------dump_related-------------------------------------\n-\/\/ Dump a Node's related nodes - the notion of \"related\" depends on the Node at\n-\/\/ hand and is determined by the implementation of the virtual method rel.\n-void Node::dump_related() const {\n-  Compile* C = Compile::current();\n-  GrowableArray <Node *> in_rel(C->unique());\n-  GrowableArray <Node *> out_rel(C->unique());\n-  this->related(&in_rel, &out_rel, false);\n-  for (int i = in_rel.length() - 1; i >= 0; i--) {\n-    in_rel.at(i)->dump();\n-  }\n-  this->dump(\"\\n\", true);\n-  for (int i = 0; i < out_rel.length(); i++) {\n-    out_rel.at(i)->dump();\n-  }\n-}\n-\n-\/\/----------------------------dump_related-------------------------------------\n-\/\/ Dump a Node's related nodes up to a given depth (distance from the start\n-\/\/ node).\n-\/\/ Arguments:\n-\/\/   d_in:  depth for input nodes.\n-\/\/   d_out: depth for output nodes (note: this also is a positive number).\n-void Node::dump_related(uint d_in, uint d_out) const {\n-  Compile* C = Compile::current();\n-  GrowableArray <Node *> in_rel(C->unique());\n-  GrowableArray <Node *> out_rel(C->unique());\n-\n-  \/\/ call collect_nodes_i directly\n-  collect_nodes_i(&in_rel, this, 1, d_in, false, false, false);\n-  collect_nodes_i(&out_rel, this, -1, d_out, false, false, false);\n-\n-  for (int i = in_rel.length() - 1; i >= 0; i--) {\n-    in_rel.at(i)->dump();\n-  }\n-  this->dump(\"\\n\", true);\n-  for (int i = 0; i < out_rel.length(); i++) {\n-    out_rel.at(i)->dump();\n-  }\n-}\n-\n-\/\/------------------------dump_related_compact---------------------------------\n-\/\/ Dump a Node's related nodes in compact representation. The notion of\n-\/\/ \"related\" depends on the Node at hand and is determined by the implementation\n-\/\/ of the virtual method rel.\n-void Node::dump_related_compact() const {\n-  Compile* C = Compile::current();\n-  GrowableArray <Node *> in_rel(C->unique());\n-  GrowableArray <Node *> out_rel(C->unique());\n-  this->related(&in_rel, &out_rel, true);\n-  int n_in = in_rel.length();\n-  int n_out = out_rel.length();\n-\n-  this->dump_comp(n_in == 0 ? \"\\n\" : \"  \");\n-  for (int i = 0; i < n_in; i++) {\n-    in_rel.at(i)->dump_comp(i == n_in - 1 ? \"\\n\" : \"  \");\n-  }\n-  for (int i = 0; i < n_out; i++) {\n-    out_rel.at(i)->dump_comp(i == n_out - 1 ? \"\\n\" : \"  \");\n-  }\n-}\n-\n-\/\/------------------------------related----------------------------------------\n-\/\/ Collect a Node's related nodes. The default behaviour just collects the\n-\/\/ inputs and outputs at depth 1, including both control and data flow edges,\n-\/\/ regardless of whether the presentation is compact or not. For data nodes,\n-\/\/ the default is to collect all data inputs (till level 1 if compact), and\n-\/\/ outputs till level 1.\n-void Node::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (this->is_CFG()) {\n-    collect_nodes_i(in_rel, this, 1, 1, false, false, false);\n-    collect_nodes_i(out_rel, this, -1, 1, false, false, false);\n-  } else {\n-    if (compact) {\n-      this->collect_nodes(in_rel, 1, false, true);\n-    } else {\n-      this->collect_nodes_in_all_data(in_rel, false);\n-    }\n-    this->collect_nodes(out_rel, -1, false, false);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":312,"deletions":208,"binary":false,"changes":520,"status":"modified"},{"patch":"@@ -1183,1 +1183,2 @@\n-  int _indent;\n+  int _indent; \/\/ TODO remove?\n+  \/\/TODO: clean up public \/ private, add more comments about what is for debugger\n@@ -1193,1 +1194,9 @@\n-  void print_bfs (const int max_distance, Node* target, char const* options); \/\/ Print BFS traversal\n+  void print_bfs(const int max_distance, Node* target, char const* options); \/\/ Print BFS traversal\n+  class DumpConfig {\n+  public:\n+    \/\/ overridden to implement coloring of node idx\n+    virtual void pre_dump(outputStream *st, const Node* n) = 0;\n+    virtual void post_dump(outputStream *st) = 0;\n+  };\n+  void dump_idx(bool align = false, outputStream *st = tty, DumpConfig* dc = nullptr) const;\n+  void dump_name(outputStream *st = tty, DumpConfig* dc = nullptr) const;\n@@ -1195,1 +1204,1 @@\n-  void dump(const char* suffix, bool mark = false, outputStream *st = tty) const; \/\/ Print this node.\n+  void dump(const char* suffix, bool mark = false, outputStream *st = tty, DumpConfig* dc = nullptr) const; \/\/ Print this node.\n@@ -1201,3 +1210,3 @@\n-  virtual void dump_req(outputStream *st = tty) const;    \/\/ Print required-edge info\n-  virtual void dump_prec(outputStream *st = tty) const;   \/\/ Print precedence-edge info\n-  virtual void dump_out(outputStream *st = tty) const;    \/\/ Print the output edge info\n+  virtual void dump_req(outputStream *st = tty, DumpConfig* dc = nullptr) const;    \/\/ Print required-edge info\n+  virtual void dump_prec(outputStream *st = tty, DumpConfig* dc = nullptr) const;   \/\/ Print precedence-edge info\n+  virtual void dump_out(outputStream *st = tty, DumpConfig* dc = nullptr) const;    \/\/ Print the output edge info\n@@ -1207,6 +1216,0 @@\n-  void dump_related() const;             \/\/ Print related nodes (depends on node at hand).\n-  \/\/ Print related nodes up to given depths for input and output nodes.\n-  void dump_related(uint d_in, uint d_out) const;\n-  void dump_related_compact() const;     \/\/ Print related nodes in compact representation.\n-  \/\/ Collect related nodes.\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -94,15 +94,0 @@\n-\n-#ifndef PRODUCT\n-\/\/-----------------------------related-----------------------------------------\n-\/\/ Include all control inputs in the related set, and also the input data\n-\/\/ boundary. In compact mode, include all inputs till level 2. Also include\n-\/\/ all outputs at level 1.\n-void HaltNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 2, false, false);\n-  } else {\n-    this->collect_nodes_in_all_ctrl(in_rel, true);\n-  }\n-  this->collect_nodes(out_rel, -1, false, false);\n-}\n-#endif\n","filename":"src\/hotspot\/share\/opto\/rootnode.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -71,4 +71,0 @@\n-\n-#ifndef PRODUCT\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n","filename":"src\/hotspot\/share\/opto\/rootnode.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -631,32 +631,0 @@\n-#ifndef PRODUCT\n-\/\/----------------------------related------------------------------------------\n-\/\/ Related nodes of comparison nodes include all data inputs (until hitting a\n-\/\/ control boundary) as well as all outputs until and including control nodes\n-\/\/ as well as their projections. In compact mode, data inputs till depth 1 and\n-\/\/ all outputs till depth 1 are considered.\n-void CmpNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 1, false, true);\n-    this->collect_nodes(out_rel, -1, false, false);\n-  } else {\n-    this->collect_nodes_in_all_data(in_rel, false);\n-    this->collect_nodes_out_all_ctrl_boundary(out_rel);\n-    \/\/ Now, find all control nodes in out_rel, and include their projections\n-    \/\/ and projection targets (if any) in the result.\n-    GrowableArray<Node*> proj(Compile::current()->unique());\n-    for (GrowableArrayIterator<Node*> it = out_rel->begin(); it != out_rel->end(); ++it) {\n-      Node* n = *it;\n-      if (n->is_CFG() && !n->is_Proj()) {\n-        \/\/ Assume projections and projection targets are found at levels 1 and 2.\n-        n->collect_nodes(&proj, -2, false, false);\n-        for (GrowableArrayIterator<Node*> p = proj.begin(); p != proj.end(); ++p) {\n-          out_rel->append_if_missing(*p);\n-        }\n-        proj.clear();\n-      }\n-    }\n-  }\n-}\n-\n-#endif\n-\n@@ -1793,14 +1761,0 @@\n-\n-\/\/-------------------------------related---------------------------------------\n-\/\/ A BoolNode's related nodes are all of its data inputs, and all of its\n-\/\/ outputs until control nodes are hit, which are included. In compact\n-\/\/ representation, inputs till level 3 and immediate outputs are included.\n-void BoolNode::related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const {\n-  if (compact) {\n-    this->collect_nodes(in_rel, 3, false, true);\n-    this->collect_nodes(out_rel, -1, false, false);\n-  } else {\n-    this->collect_nodes_in_all_data(in_rel, false);\n-    this->collect_nodes_out_all_ctrl_boundary(out_rel);\n-  }\n-}\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -146,7 +146,0 @@\n-\n-#ifndef PRODUCT\n-  \/\/ CmpNode and subclasses include all data inputs (until hitting a control\n-  \/\/ boundary) in their related node set, as well as all outputs until and\n-  \/\/ including eventual control nodes and their projections.\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n-#endif\n@@ -340,1 +333,0 @@\n-  virtual void related(GrowableArray<Node*> *in_rel, GrowableArray<Node*> *out_rel, bool compact) const;\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}