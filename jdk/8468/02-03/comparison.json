{"files":[{"patch":"@@ -1610,1 +1610,1 @@\n-int print_bfs_cmp(const Node* n1, const Node* n2) { return n1 != n2; }\n+\/\/------------------------------print_bfs--------------------------------------\n@@ -1647,1 +1647,1 @@\n-\/\/     this is very useful to start at\n+\/\/     useful call to start with\n@@ -1651,1 +1651,1 @@\n-\/\/   block:    block in which the node has been scheduled (head(), _idom->head(), _dom_depth)\n+\/\/   block:    block in which the node has been scheduled [head(), _idom->head(), _dom_depth]\n@@ -1654,1 +1654,2 @@\n-\/\/   direction and node type\n+\/\/   edge:     input (+) or output (-)\n+\/\/   category: characters cmdxo from options string\n@@ -1656,0 +1657,1 @@\n+int print_bfs_cmp(const Node* n1, const Node* n2) { return n1 != n2; }\n@@ -1694,5 +1696,0 @@\n-  \/\/ Data structures\n-  Node_List worklist; \/\/ BFS queue\n-  Dict parent((CmpKey)&print_bfs_cmp, hashkey);   \/\/ node -> parent (one step closer to this)\n-  Dict distance((CmpKey)&print_bfs_cmp, hashkey); \/\/ node -> distance to this\n-  \n@@ -1777,1 +1774,1 @@\n-               : NULL; \/\/ guard agains old nodes\n+               : NULL; \/\/ guard against old nodes\n@@ -1793,0 +1790,5 @@\n+  \/\/ Data structures\n+  Node_List worklist; \/\/ BFS queue\n+  Dict parent((CmpKey)&print_bfs_cmp, hashkey);   \/\/ node -> parent (one step closer to this)\n+  Dict distance((CmpKey)&print_bfs_cmp, hashkey); \/\/ node -> distance to this\n+\n@@ -1800,6 +1802,2 @@\n-  \/\/ initialize BFS at this\n-  worklist_push(this, this, 0);\n-\n-  \/\/ BFS header\n-  if (target == NULL) {\n-    tty->print(\"dis\");\n+  auto print_header = [&] (bool print_parent) {\n+    tty->print(\"dis\");                          \/\/ distance\n@@ -1807,1 +1805,1 @@\n-      tty->print(\"  head  idom dep\");\n+      tty->print(\" [head  idom  d]\");           \/\/ block\n@@ -1810,1 +1808,19 @@\n-      tty->print(\"   old\");\n+      tty->print(\"   old\");                     \/\/ old node\n+    }\n+    if (print_parent) {\n+      tty->print(\"   par\");                     \/\/ parent\n+    }\n+    if (traverse_inputs && traverse_outputs) {\n+      tty->print(\" e\");                         \/\/ edge\n+    }\n+    tty->print(\" c dump\\n\");                    \/\/ category and dump\n+    tty->print(\"---------------------------------------------\\n\");\n+  };\n+\n+  auto print_node = [&] (Node* n, bool print_parent) {\n+    tty->print(\"%3ld\", abs((long)distance[n])); \/\/ distance\n+    if (print_blocks) {\n+      print_node_block(n);                      \/\/ block\n+    }\n+    if (print_old) {\n+      print_node_idx(old_node(n));              \/\/ old node\n@@ -1812,2 +1828,15 @@\n-    tty->print(\"   par dir dump\\n\");\n-    tty->print(\"-------------------------------------------\\n\");\n+    if (print_parent) {\n+      print_node_idx((Node*)parent[n]);         \/\/ parent\n+    }\n+    if (traverse_inputs && traverse_outputs) {\n+      long dd = (long)distance[n];\n+      const char* edge = (dd >=0 ) ? ((dd > 0) ? \"+\" : \" \" ) : \"-\";\n+      tty->print(\" %s\", edge);                  \/\/ edge\n+    }\n+    tty->print(\" %s \", category(n));            \/\/ category\n+    n->dump();                                  \/\/ node dump\n+  };\n+\n+  \/\/ BFS header\n+  if (target == NULL) {\n+    print_header(true);\n@@ -1816,0 +1845,3 @@\n+  \/\/ initialize BFS at this\n+  worklist_push(this, this, 0);\n+\n@@ -1822,1 +1854,0 @@\n-    const char* direction = ((long)distance[n] >= 0) ? \"+\" : \"-\";\n@@ -1825,10 +1856,1 @@\n-      tty->print(\"%3ld\", d);                         \/\/ distance\n-      if (print_blocks) {\n-        print_node_block(n);                         \/\/ block\n-      }\n-      if (print_old) {\n-        print_node_idx(old_node(n));                 \/\/ old node\n-      }\n-      print_node_idx((Node*)parent[n]);              \/\/ parent\n-      tty->print(\" %s%s \", direction, category(n));  \/\/ direction and category\n-      n->dump();                                     \/\/ node dump\n+      print_node(n, true);\n@@ -1875,9 +1897,1 @@\n-    tty->print(\"dis\");\n-    if (print_blocks) {\n-      tty->print(\"  head  idom dep\");\n-    }\n-    if(print_old) {\n-      tty->print(\"   old\");\n-    }\n-    tty->print(\" dir dump\\n\"); \/\/ backtrace header\n-    tty->print(\"-------------------------------------\\n\");\n+    print_header(false);\n@@ -1886,10 +1900,1 @@\n-      const char* direction = ((long)distance[current] >=0 ) ? \"+\" : \"-\";\n-      tty->print(\"%3ld\", abs((long)distance[current]));    \/\/ distance\n-      if (print_blocks) {\n-        print_node_block(current);                         \/\/ block\n-      }\n-      if (print_old) {\n-        print_node_idx(old_node(current));                 \/\/ old node\n-      }\n-      tty->print(\" %s%s \", direction, category(current));  \/\/ direction and category\n-      current->dump();                                     \/\/ node dump\n+      print_node(current, false);\n@@ -1898,9 +1903,1 @@\n-    tty->print(\"  0\");                      \/\/ distance\n-    if (print_blocks) {\n-      print_node_block(this);               \/\/ block\n-    }\n-    if (print_old) {\n-      print_node_idx(old_node(this));       \/\/ old node\n-    }\n-    tty->print(\"  %s \", category(this));    \/\/ direction and category\n-    this->dump();                           \/\/ node dump\n+    print_node(this, false);\n@@ -1910,2 +1907,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":56,"deletions":61,"binary":false,"changes":117,"status":"modified"}]}