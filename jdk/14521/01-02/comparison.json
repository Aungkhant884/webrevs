{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n@@ -85,3 +83,3 @@\n-    Map<Object, Method[]> table1 = new HashMap<>();\n-    ArrayList<Map<String, Integer>> mapList = new ArrayList<>();\n-    Map<Class, Object[]> instList = new HashMap<>();\n+    Map<Object, Method[]> classToMethodsMap = new HashMap<>();\n+    ArrayList<Map<String, Integer>> argumentMaps = new ArrayList<>();\n+    Map<Class, Object[]> instancesOfClassMap = new HashMap<>();\n@@ -337,3 +335,3 @@\n-        mapList.add(new HashMap<String, Integer>());\n-        mapList.add(new LinkedHashMap<String, Integer>());\n-        mapList.add(new WeakHashMap<String, Integer>());\n+        argumentMaps.add(new HashMap<String, Integer>());\n+        argumentMaps.add(new LinkedHashMap<String, Integer>());\n+        argumentMaps.add(new WeakHashMap<String, Integer>());\n@@ -341,3 +339,3 @@\n-        mapList.get(0).put(k, v);\n-        mapList.get(1).put(k, v);\n-        mapList.get(2).put(k, v);\n+        argumentMaps.get(0).put(k, v);\n+        argumentMaps.get(1).put(k, v);\n+        argumentMaps.get(2).put(k, v);\n@@ -361,1 +359,1 @@\n-            instList.put(c, receivers1);\n+            instancesOfClassMap.put(c, receivers1);\n@@ -374,1 +372,1 @@\n-            table1.put((receivers1[0]).getClass(), methods);\n+            classToMethodsMap.put((receivers1[0]).getClass(), methods);\n@@ -380,3 +378,3 @@\n-                        Object r = ((Object[]) instList.get(c))[0];\n-                        Method[] mi = table1.get(r.getClass());\n-                        mi[m].invoke(r, mapList.get(0), k, 5);\n+                        Object r = ((Object[]) instancesOfClassMap.get(c))[0];\n+                        Method[] mi = classToMethodsMap.get(r.getClass());\n+                        mi[m].invoke(r, argumentMaps.get(0), k, 5);\n@@ -405,1 +403,1 @@\n-        return ((Object[]) instList.get(c))[whichInst];\n+        return ((Object[]) instancesOfClassMap.get(c))[whichInst];\n@@ -411,1 +409,1 @@\n-        return table1.get(c)[whichM];\n+        return classToMethodsMap.get(c)[whichM];\n@@ -416,2 +414,2 @@\n-        int whichMap = tlr.nextInt(mapList.size());\n-        return mapList.get(whichMap);\n+        int whichMap = tlr.nextInt(argumentMaps.size());\n+        return argumentMaps.get(whichMap);\n@@ -426,1 +424,1 @@\n-        Integer sum = 0;\n+        int sum = 0;\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CodeCacheStress.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"}]}