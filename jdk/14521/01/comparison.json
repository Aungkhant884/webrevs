{"files":[{"patch":"@@ -0,0 +1,447 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.util.*;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import org.openjdk.bench.util.InMemoryJavaCompiler;\n+\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 20, time = 2)\n+@Measurement(iterations = 15, time = 2)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Threads(1)\n+@Fork(value = 2)\n+public class CodeCacheStress {\n+\n+    \/\/ The number of distinct classes generated from the source string below\n+    \/\/ All the classes are \"warmed up\" by invoking their methods to get compiled by the jit\n+    @Param({\"100\"})\n+    public int numberOfClasses;\n+\n+    \/\/ The range of these classes to use in the measured phase after the warm up\n+    @Param({\"100\"})\n+    public int rangeOfClasses;\n+\n+    \/\/ How deep is the recursion when calling into the generated classes\n+    @Param({\"20\"})\n+    public int recurse;\n+\n+    \/\/ How many instances of each generated class to create and call in the measurement phase\n+    @Param({\"100\"})\n+    public int instanceCount;\n+\n+    byte[][] compiledClasses;\n+    Class[] loadedClasses;\n+    String[] classNames;\n+\n+    int index = 0;\n+    Map<Object, Method[]> table1 = new HashMap<>();\n+    ArrayList<Map<String, Integer>> mapList = new ArrayList<>();\n+    Map<Class, Object[]> instList = new HashMap<>();\n+\n+\n+    static String B(int count) {\n+        return \"import java.util.*; \"\n+                + \" \"\n+                + \"public class B\" + count + \" {\"\n+                + \" \"\n+                + \"   static int staticA = 0;\"\n+                + \"   static int staticB = 0;\"\n+                + \"   static int staticC = 0;\"\n+                + \"   static int staticD = 0;\"\n+                + \" \"\n+                + \" static synchronized void setA(int a) {\"\n+                + \"   staticB = a;\"\n+                + \" }\"\n+                + \" \"\n+                + \" static synchronized void setB(int b) {\"\n+                + \"   staticB = b;\"\n+                + \" }\"\n+                + \" \"\n+                + \" static synchronized void setC(int c) {\"\n+                + \"   staticC = c;\"\n+                + \" }\"\n+                + \" \"\n+                + \" static synchronized void setD(int d) {\"\n+                + \"   staticD = d;\"\n+                + \" }\"\n+                + \" \"\n+                + \"    int instA = 0;\"\n+                + \" \"\n+                + \"    int padAA = 0;\"\n+                + \"    int padAB = 0;\"\n+                + \"    int padAC = 0;\"\n+                + \"    int padAD = 0;\"\n+                + \"    int padAE = 0;\"\n+                + \"    int padAF = 0;\"\n+                + \"    int padAG = 0;\"\n+                + \"    int padAH = 0;\"\n+                + \"    int padAI = 0;\"\n+                + \"    int padAJ = 0;\"\n+                + \"    int padAK = 0;\"\n+                + \"    int padAL = 0;\"\n+                + \"    int padAM = 0;\"\n+                + \"    int padAN = 0;\"\n+                + \"    int padAO = 0;\"\n+                + \"    int padAP = 0;\"\n+                + \"    int padAQ = 0;\"\n+                + \"    int padAR = 0;\"\n+                + \"    int padAS = 0;\"\n+                + \"    int padAT = 0;\"\n+                + \" \"\n+                + \"    int instB = 0;\"\n+                + \" \"\n+                + \"    int padBA = 0;\"\n+                + \"    int padBB = 0;\"\n+                + \"    int padBC = 0;\"\n+                + \"    int padBD = 0;\"\n+                + \"    int padBE = 0;\"\n+                + \"    int padBF = 0;\"\n+                + \"    int padBG = 0;\"\n+                + \"    int padBH = 0;\"\n+                + \"    int padBI = 0;\"\n+                + \"    int padBJ = 0;\"\n+                + \"    int padBK = 0;\"\n+                + \"    int padBL = 0;\"\n+                + \"    int padBM = 0;\"\n+                + \"    int padBN = 0;\"\n+                + \"    int padBO = 0;\"\n+                + \"    int padBP = 0;\"\n+                + \"    int padBQ = 0;\"\n+                + \"    int padBR = 0;\"\n+                + \"    int padBS = 0;\"\n+                + \"    int padBT = 0;\"\n+                + \" \"\n+                + \"    int instC = 0;\"\n+                + \" \"\n+                + \"    int padCA = 0;\"\n+                + \"    int padCB = 0;\"\n+                + \"    int padCC = 0;\"\n+                + \"    int padCD = 0;\"\n+                + \"    int padCE = 0;\"\n+                + \"    int padCF = 0;\"\n+                + \"    int padCG = 0;\"\n+                + \"    int padCH = 0;\"\n+                + \"    int padCI = 0;\"\n+                + \"    int padCJ = 0;\"\n+                + \"    int padCK = 0;\"\n+                + \"    int padCL = 0;\"\n+                + \"    int padCM = 0;\"\n+                + \"    int padCN = 0;\"\n+                + \"    int padCO = 0;\"\n+                + \"    int padCP = 0;\"\n+                + \"    int padCQ = 0;\"\n+                + \"    int padCR = 0;\"\n+                + \"    int padCS = 0;\"\n+                + \"    int padCT = 0;\"\n+                + \" \"\n+                + \"    int instD = 0;\"\n+                + \" \"\n+                + \" \"\n+                + \"   public Integer get(Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         instA += ((depth % 2) + staticA);\"\n+                + \"         return (Integer) m.get(k) + get2(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         setA(depth);\"\n+                + \"         return (Integer) m.get(k)+ 10;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get2( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         instB += ((depth % 2) + staticB);\"\n+                + \"         return (Integer) m.get(k) + get3(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         setB(depth);\"\n+                + \"         return (Integer) m.get(k)+ 20;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get3( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         instC += ((depth % 2) + staticC);\"\n+                + \"         return (Integer) m.get(k) + get4(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         setC(depth);\"\n+                + \"         return (Integer) m.get(k)+ 30;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \" \"\n+                + \"   public Integer get4( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         instD += ((depth % 2) + staticD);\"\n+                + \"         return (Integer) m.get(k) + get5(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         setD(depth);\"\n+                + \"         return (Integer) m.get(k)+ 40;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \" \"\n+                + \"   public Integer get5( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get6(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instA;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get6( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get7(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instB;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get7( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get8(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instC;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get8( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get9(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instD;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get9( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get10(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instA;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get10( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get11(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instB;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get11( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get12(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instC;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \" \"\n+                + \"   public Integer get12( Map m, String k, Integer depth) { \"\n+                + \"       if (depth > 0) {\"\n+                + \"         return (Integer) m.get(k) + get(m, k, --depth);\"\n+                + \"       } else {\"\n+                + \"         return (Integer) m.get(k)+ instD;\"\n+                + \"       }\"\n+                + \"   }\"\n+                + \"}\";\n+    }\n+\n+\n+    class BenchLoader extends ClassLoader {\n+\n+        BenchLoader() {\n+            super();\n+        }\n+\n+        BenchLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.equals(classNames[index])) {\n+                assert compiledClasses[index] != null;\n+                return defineClass(name, compiledClasses[index],\n+                        0,\n+                        (compiledClasses[index]).length);\n+            } else {\n+                return super.findClass(name);\n+            }\n+        }\n+    }\n+\n+    CodeCacheStress.BenchLoader loader1 = new CodeCacheStress.BenchLoader();\n+\n+    final String k = \"key\";\n+    final Integer v = 1000;\n+\n+    final String methodNames[] = {\n+            \"get\"\n+    };\n+\n+    @Setup(Level.Trial)\n+    public void setupClasses() throws Exception {\n+        Object[] receivers1;\n+\n+        compiledClasses = new byte[numberOfClasses][];\n+        loadedClasses = new Class[numberOfClasses];\n+        classNames = new String[numberOfClasses];\n+\n+        mapList.add(new HashMap<String, Integer>());\n+        mapList.add(new LinkedHashMap<String, Integer>());\n+        mapList.add(new WeakHashMap<String, Integer>());\n+\n+        mapList.get(0).put(k, v);\n+        mapList.get(1).put(k, v);\n+        mapList.get(2).put(k, v);\n+\n+        for (int i = 0; i < numberOfClasses; i++) {\n+            classNames[i] = \"B\" + i;\n+            compiledClasses[i] = InMemoryJavaCompiler.compile(classNames[i], B(i));\n+        }\n+\n+        for (index = 0; index < compiledClasses.length; index++) {\n+            Class<?> c = loader1.findClass(classNames[index]);\n+            loadedClasses[index] = c;\n+\n+            Constructor<?>[] ca = c.getConstructors();\n+            assert ca.length == 1;\n+\n+            receivers1 = new Object[instanceCount];\n+            for (int j = 0; j < instanceCount; j++) {\n+                receivers1[j] = ca[0].newInstance();\n+            }\n+            instList.put(c, receivers1);\n+\n+            Method[] methods = new Method[methodNames.length];\n+            IntStream.range(0, methodNames.length).forEach(m -> {\n+                try {\n+                    methods[m] = c.getMethod(methodNames[m], java.util.Map.class, String.class, Integer.class);\n+                } catch (Exception e) {\n+                    System.out.println(\"Exception = \" + e);\n+                    e.printStackTrace();\n+                    System.exit(-1);\n+                }\n+            });\n+\n+            table1.put((receivers1[0]).getClass(), methods);\n+\n+            \/\/ Warmup the methods to get compiled\n+            IntStream.range(0, methodNames.length).parallel().forEach(m -> {\n+                IntStream.range(0, 12000).forEach(x -> {\n+                    try {\n+                        Object r = ((Object[]) instList.get(c))[0];\n+                        Method[] mi = table1.get(r.getClass());\n+                        mi[m].invoke(r, mapList.get(0), k, 5);\n+                    } catch (Exception e) {\n+                        System.out.println(\"Exception = \" + e);\n+                        e.printStackTrace();\n+                        System.exit(-1);\n+                    }\n+                });\n+\n+            });\n+        }\n+\n+        System.gc();\n+    }\n+\n+    Class chooseClass() {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichClass = tlr.nextInt(rangeOfClasses);\n+        return loadedClasses[whichClass];\n+    }\n+\n+    Object chooseInstance(Class c) {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichInst = tlr.nextInt(instanceCount);\n+        return ((Object[]) instList.get(c))[whichInst];\n+    }\n+\n+    Method chooseMethod(Class c) {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichM = tlr.nextInt(methodNames.length);\n+        return table1.get(c)[whichM];\n+    }\n+\n+    Map chooseMap() {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichMap = tlr.nextInt(mapList.size());\n+        return mapList.get(whichMap);\n+    }\n+\n+    Integer callTheMethod(Method m, Object r, String k, Map map) throws Exception {\n+        return (Integer) m.invoke(r, map, k, recurse);\n+    }\n+\n+    @Benchmark\n+    public Integer work() throws Exception {\n+        Integer sum = 0;\n+\n+        \/\/ Call a method of a random instance of a random class up to the specified range\n+        for (int index = 0; index < compiledClasses.length; index++) {\n+            try {\n+                Class c = chooseClass();\n+                Object r = chooseInstance(c);\n+                Method m = chooseMethod(c);\n+                assert m != null;\n+                Map map = chooseMap();\n+                Integer result = callTheMethod(m, r, k, map);\n+                assert result != null && result >= v;\n+                sum += result;\n+            } catch (Exception e) {\n+                System.out.println(\"Exception = \" + e);\n+                e.printStackTrace();\n+            }\n+        }\n+        return sum;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CodeCacheStress.java","additions":447,"deletions":0,"binary":false,"changes":447,"status":"added"}]}