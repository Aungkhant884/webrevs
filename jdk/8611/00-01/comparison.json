{"files":[{"patch":"@@ -105,0 +105,1 @@\n+#include <versionhelpers.h>\n@@ -1761,9 +1762,0 @@\n-static bool get_version_ex(OSVERSIONINFOEX* osvi) {\n-  \/\/ GetVersionEx is deprecated, but there doesn't seem to be a better\n-  \/\/ option for the places where we're using it.\n-  PRAGMA_DIAG_PUSH\n-  PRAGMA_DISABLE_MSVC_WARNING(4996) \/\/ Disable deprecation warning.\n-  return GetVersionEx((OSVERSIONINFO *)osvi);\n-  PRAGMA_DIAG_POP\n-}\n-\n@@ -1771,1 +1763,0 @@\n-  OSVERSIONINFOEX osvi;\n@@ -1776,10 +1767,1 @@\n-  \/\/ Use the GetVersionEx information to see if we're on a server or\n-  \/\/ workstation edition of Windows. Starting with Windows 8.1 we can't\n-  \/\/ trust the OS version information returned by this API.\n-  ZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));\n-  osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\n-  if (!get_version_ex(&osvi)) {\n-    st->print_cr(\"Call to GetVersionEx failed\");\n-    return;\n-  }\n-  bool is_workstation = (osvi.wProductType == VER_NT_WORKSTATION);\n+  bool is_workstation = !IsWindowsServer();\n@@ -3928,12 +3910,1 @@\n-  OSVERSIONINFOEX oi;\n-  oi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\n-  get_version_ex(&oi);\n-  switch (oi.dwPlatformId) {\n-  case VER_PLATFORM_WIN32_NT:\n-    if (oi.wProductType == VER_NT_DOMAIN_CONTROLLER ||\n-        oi.wProductType == VER_NT_SERVER) {\n-      _is_windows_server = true;\n-    }\n-    break;\n-  default: fatal(\"Unknown platform\");\n-  }\n+  _is_windows_server = IsWindowsServer();\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"}]}