{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimals.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n@@ -45,1 +51,1 @@\n-    private BigInteger[] hugeArray, largeArray, smallArray, shiftArray, smallShiftArray;\n+    private BigInteger[] hugeArray, largeArray, smallArray, shiftArray;\n@@ -50,3 +56,0 @@\n-    @Param({\"32\", \"64\", \"96\", \"128\", \"160\", \"192\", \"224\", \"256\"})\n-    private int maxNumbits;\n-\n@@ -75,3 +78,0 @@\n-        smallShiftArray = new BigInteger[TESTSIZE]; \/*\n-        * Small numbers, bits count in range [maxNumbits - 31, maxNumbits]\n-        *\/\n@@ -90,1 +90,0 @@\n-            smallShiftArray[i] = new BigInteger(Math.max(maxNumbits - value % 32, 0), r);\n@@ -185,26 +184,0 @@\n-    \/** Invokes the shiftLeft method of small BigInteger with different values. *\/\n-    @Benchmark\n-    @OperationsPerInvocation(TESTSIZE)\n-    public void testSmallLeftShift(Blackhole bh) {\n-        Random rand = new Random();\n-        int shift = rand.nextInt(30) + 1;\n-        BigInteger tmp = null;\n-        for (BigInteger s : smallShiftArray) {\n-            tmp = s.shiftLeft(shift);\n-            bh.consume(tmp);\n-        }\n-    }\n-\n-    \/** Invokes the shiftRight method of small BigInteger with different values. *\/\n-    @Benchmark\n-    @OperationsPerInvocation(TESTSIZE)\n-    public void testSmallRightShift(Blackhole bh) {\n-        Random rand = new Random();\n-        int shift = rand.nextInt(30) + 1;\n-        BigInteger tmp = null;\n-        for (BigInteger s : smallShiftArray) {\n-            tmp = s.shiftRight(shift);\n-            bh.consume(tmp);\n-        }\n-    }\n-\n@@ -221,0 +194,48 @@\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    @State(Scope.Thread)\n+    @Warmup(iterations = 5, time = 1)\n+    @Measurement(iterations = 5, time = 1)\n+    @Fork(value = 3)\n+    public static class SmallShifts {\n+\n+        @Param({\"32\", \"128\", \"256\"})\n+        private int maxNumbits;\n+\n+        \/*\n+         * Small numbers, bits count in range [maxNumbits - 31, maxNumbits]\n+         *\/\n+        BigInteger[] smallShiftArray = new BigInteger[TESTSIZE];\n+\n+        @Setup\n+        public void setup() {\n+            Random r = new Random(1123);\n+            for (int i = 0; i < TESTSIZE; i++) {\n+                int value = Math.abs(r.nextInt());\n+                smallShiftArray[i] = new BigInteger(Math.max(maxNumbits - value % 32, 0), r);\n+            }\n+        }\n+\n+        \/** Invokes the shiftLeft method of small BigInteger with different values. *\/\n+        @Benchmark\n+        @OperationsPerInvocation(TESTSIZE)\n+        public void testLeftShift(Blackhole bh) {\n+            Random rand = new Random();\n+            int shift = rand.nextInt(30) + 1;\n+            for (BigInteger s : smallShiftArray) {\n+                bh.consume(s.shiftLeft(shift));\n+            }\n+        }\n+\n+        \/** Invokes the shiftRight method of small BigInteger with different values. *\/\n+        @Benchmark\n+        @OperationsPerInvocation(TESTSIZE)\n+        public void testRightShift(Blackhole bh) {\n+            Random rand = new Random();\n+            int shift = rand.nextInt(30) + 1;\n+            for (BigInteger s : smallShiftArray) {\n+                bh.consume(s.shiftRight(shift));\n+            }\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegers.java","additions":55,"deletions":34,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n@@ -34,1 +37,1 @@\n-  @Param({\"1024\", \"2048\"})\n+  @Param({\"2048\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/FpRoundingBenchmark.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 2)\n@@ -51,1 +54,1 @@\n-        for (int i=0; i<SIZE; i++) {\n+        for (int i = 0; i < SIZE; i++) {\n@@ -59,1 +62,1 @@\n-        for(int i = 0; i < SIZE; i++) {\n+        for (int i = 0; i < SIZE; i++) {\n@@ -66,1 +69,1 @@\n-        for(int i = 0; i < SIZE; i++) {\n+        for (int i = 0; i < SIZE; i++) {\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorSignum.java","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/VectorSignum.java","status":"renamed"}]}