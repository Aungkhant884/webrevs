{"files":[{"patch":"@@ -3589,1 +3589,1 @@\n-Node* LibraryCallKit::scopedValueCache_helper() {\n+const Type* LibraryCallKit::scopedValueCache_type() {\n@@ -3592,0 +3592,1 @@\n+  const TypeAry* arr0 = TypeAry::make(etype, TypeInt::POS);\n@@ -3593,0 +3594,2 @@\n+  \/\/ Because we create the scopedValue cache lazily we have to make the\n+  \/\/ type of the result BotPTR.\n@@ -3594,0 +3597,3 @@\n+  const Type* objects_type = TypeAryPtr::make(TypePtr::BotPTR, arr0, objects_klass, xk, 0);\n+  return objects_type;\n+}\n@@ -3595,0 +3601,1 @@\n+Node* LibraryCallKit::scopedValueCache_helper() {\n@@ -3607,8 +3614,0 @@\n-  ciKlass *objects_klass = ciObjArrayKlass::make(env()->Object_klass());\n-  const TypeOopPtr *etype = TypeOopPtr::make_from_klass(env()->Object_klass());\n-  const TypeAry* arr0 = TypeAry::make(etype, TypeInt::POS);\n-\n-  \/\/ Because we create the scopedValue cache lazily we have to make the\n-  \/\/ type of the result BotPTR.\n-  bool xk = etype->klass_is_exact();\n-  const Type* objects_type = TypeAryPtr::make(TypePtr::BotPTR, arr0, objects_klass, xk, 0);\n@@ -3616,0 +3615,1 @@\n+  const Type* objects_type = scopedValueCache_type();\n@@ -3625,0 +3625,1 @@\n+  const Type* objects_type = scopedValueCache_type();\n@@ -3627,1 +3628,1 @@\n-  access_store_at(nullptr, cache_obj_handle, adr_type, arr, _gvn.type(arr), T_OBJECT, IN_NATIVE | MO_UNORDERED);\n+  access_store_at(nullptr, cache_obj_handle, adr_type, arr, objects_type, T_OBJECT, IN_NATIVE | MO_UNORDERED);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -240,0 +240,1 @@\n+  const Type* scopedValueCache_type();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}