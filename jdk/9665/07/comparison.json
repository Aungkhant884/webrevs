{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.module.ModuleDescriptor.Version;\n@@ -55,0 +54,3 @@\n+    private static final String NATIVE_METHOD = \"Native Method\";\n+    private static final String UNKNOWN_SOURCE = \"Unknown Source\";\n+\n@@ -358,0 +360,1 @@\n+    @Override\n@@ -359,4 +362,11 @@\n-        String s = \"\";\n-        if (!dropClassLoaderName() && classLoaderName != null &&\n-                !classLoaderName.isEmpty()) {\n-            s += classLoaderName + \"\/\";\n+        int estimatedLength = length(classLoaderName) + 1\n+                + length(moduleName) + 1\n+                + length(moduleVersion) + 1\n+                + declaringClass.length() + 1\n+                + methodName.length() + 1\n+                + Math.max(UNKNOWN_SOURCE.length(), length(fileName)) + 1\n+                + 12;\n+\n+        StringBuilder sb = new StringBuilder(estimatedLength);\n+        if (!dropClassLoaderName() && classLoaderName != null && !classLoaderName.isEmpty()) {\n+            sb.append(classLoaderName).append('\/');\n@@ -364,0 +374,1 @@\n+\n@@ -365,1 +376,5 @@\n-            s += moduleName;\n+            sb.append(moduleName);\n+            if (!dropModuleVersion() && moduleVersion != null && !moduleVersion.isEmpty()) {\n+                sb.append('@').append(moduleVersion);\n+            }\n+        }\n@@ -367,3 +382,13 @@\n-            if (!dropModuleVersion() && moduleVersion != null &&\n-                    !moduleVersion.isEmpty()) {\n-                s += \"@\" + moduleVersion;\n+        if (sb.length() > 0) {\n+            sb.append('\/');\n+        }\n+\n+        sb.append(declaringClass).append('.').append(methodName).append('(');\n+        if (isNativeMethod()) {\n+            sb.append(NATIVE_METHOD);\n+        } else if (fileName == null) {\n+            sb.append(UNKNOWN_SOURCE);\n+        } else {\n+            sb.append(fileName);\n+            if (lineNumber >= 0) {\n+                sb.append(':').append(lineNumber);\n@@ -372,1 +397,4 @@\n-        s = s.isEmpty() ? declaringClass : s + \"\/\" + declaringClass;\n+        sb.append(')');\n+\n+        return sb.toString();\n+    }\n@@ -374,5 +402,2 @@\n-        return s + \".\" + methodName + \"(\" +\n-             (isNativeMethod() ? \"Native Method)\" :\n-              (fileName != null && lineNumber >= 0 ?\n-               fileName + \":\" + lineNumber + \")\" :\n-                (fileName != null ?  \"\"+fileName+\")\" : \"Unknown Source)\")));\n+    private static int length(String s) {\n+        return (s == null) ? 0 : s.length();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackTraceElement.java","additions":40,"deletions":15,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6479237\n+ * @bug 6479237 8291641\n","filename":"test\/jdk\/java\/lang\/StackTraceElement\/SerialTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmarks for java.lang.StackTraceElement\n+ *\/\n+@State(value = Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class StackTraceElementBench {\n+\n+    private StackTraceElement element;\n+    private Throwable throwable;\n+\n+    @Setup\n+    public void setup() {\n+        StackTraceElement[] elements = IntStream.range(0, 500)\n+                .mapToObj(i -> new StackTraceElement(\n+                        \"classloader\" + i,\n+                        \"module\" + i,\n+                        \"version\" + i,\n+                        \"class\" + i,\n+                        \"method\" + i,\n+                        \"file\" + i + \".java\",\n+                        i))\n+                .toArray(StackTraceElement[]::new);\n+        this.element = elements[0];\n+        this.throwable = new RuntimeException(\"benchmark\") {\n+            @Override\n+            public synchronized Throwable fillInStackTrace() {\n+                setStackTrace(elements);\n+                return this;\n+            }\n+        };\n+    }\n+\n+    @Benchmark\n+    public String toString() {\n+        return element.toString();\n+    }\n+\n+    @Benchmark\n+    public String printStackTrace() {\n+        StringWriter sw = new StringWriter();\n+        throwable.printStackTrace(new PrintWriter(sw));\n+        return sw.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StackTraceElementBench.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}