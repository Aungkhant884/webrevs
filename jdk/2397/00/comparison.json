{"files":[{"patch":"@@ -862,1 +862,1 @@\n-            oop archived_s = StringTable::create_archived_string(s, CHECK);\n+            oop archived_s = StringTable::create_archived_string(s);\n@@ -1124,1 +1124,1 @@\n-void java_lang_Class::archive_basic_type_mirrors(TRAPS) {\n+void java_lang_Class::archive_basic_type_mirrors() {\n@@ -1133,1 +1133,1 @@\n-      oop archived_m = HeapShared::archive_heap_object(m, THREAD);\n+      oop archived_m = HeapShared::archive_heap_object(m);\n@@ -1144,1 +1144,1 @@\n-      Handle archived_mirror_h(THREAD, archived_m);\n+      Handle archived_mirror_h(Thread::current(), archived_m);\n@@ -1164,1 +1164,1 @@\n-oop java_lang_Class::archive_mirror(Klass* k, TRAPS) {\n+oop java_lang_Class::archive_mirror(Klass* k) {\n@@ -1193,1 +1193,1 @@\n-  oop archived_mirror = HeapShared::archive_heap_object(mirror, THREAD);\n+  oop archived_mirror = HeapShared::archive_heap_object(mirror);\n@@ -1198,1 +1198,1 @@\n-  archived_mirror = process_archived_mirror(k, mirror, archived_mirror, THREAD);\n+  archived_mirror = process_archived_mirror(k, mirror, archived_mirror);\n@@ -1215,2 +1215,1 @@\n-                                             oop archived_mirror,\n-                                             Thread *THREAD) {\n+                                             oop archived_mirror) {\n@@ -1220,1 +1219,1 @@\n-  Handle archived_mirror_h(THREAD, archived_mirror);\n+  Handle archived_mirror_h(Thread::current(), archived_mirror);\n@@ -1235,1 +1234,1 @@\n-      archived_comp_mirror = archive_mirror(element_klass, THREAD);\n+      archived_comp_mirror = archive_mirror(element_klass);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -280,3 +280,3 @@\n-  static void archive_basic_type_mirrors(TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n-  static oop  archive_mirror(Klass* k, TRAPS) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n-  static oop  process_archived_mirror(Klass* k, oop mirror, oop archived_mirror, Thread *THREAD)\n+  static void archive_basic_type_mirrors() NOT_CDS_JAVA_HEAP_RETURN;\n+  static oop  archive_mirror(Klass* k) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop  process_archived_mirror(Klass* k, oop mirror, oop archived_mirro)\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -720,1 +720,1 @@\n-oop StringTable::create_archived_string(oop s, Thread* THREAD) {\n+oop StringTable::create_archived_string(oop s) {\n@@ -726,1 +726,1 @@\n-  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_heap_object(v, THREAD);\n+  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_heap_object(v);\n@@ -730,1 +730,1 @@\n-  new_s = HeapShared::archive_heap_object(s, THREAD);\n+  new_s = HeapShared::archive_heap_object(s);\n@@ -747,1 +747,1 @@\n-    oop new_s = StringTable::create_archived_string(s, Thread::current());\n+    oop new_s = StringTable::create_archived_string(s);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-  static oop create_archived_string(oop s, Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop create_archived_string(oop s) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,1 +168,1 @@\n-  reset_states(SystemDictionary::java_platform_loader(), THREAD);\n+  reset_states(SystemDictionary::java_platform_loader(), CHECK);\n@@ -249,1 +249,1 @@\n-oop HeapShared::archive_heap_object(oop obj, Thread* THREAD) {\n+oop HeapShared::archive_heap_object(oop obj) {\n@@ -300,1 +300,1 @@\n-void HeapShared::archive_klass_objects(Thread* THREAD) {\n+void HeapShared::archive_klass_objects() {\n@@ -307,1 +307,1 @@\n-    java_lang_Class::archive_mirror(k, CHECK);\n+    java_lang_Class::archive_mirror(k);\n@@ -312,1 +312,1 @@\n-      ik->constants()->archive_resolved_references(THREAD);\n+      ik->constants()->archive_resolved_references();\n@@ -372,2 +372,1 @@\n-                           false \/* is_full_module_graph *\/,\n-                           THREAD);\n+                           false \/* is_full_module_graph *\/);\n@@ -383,1 +382,0 @@\n-  Thread* THREAD = Thread::current();\n@@ -386,1 +384,1 @@\n-  java_lang_Class::archive_basic_type_mirrors(THREAD);\n+  java_lang_Class::archive_basic_type_mirrors();\n@@ -388,1 +386,1 @@\n-  archive_klass_objects(THREAD);\n+  archive_klass_objects();\n@@ -393,2 +391,1 @@\n-                           false \/* is_full_module_graph *\/,\n-                           THREAD);\n+                           false \/* is_full_module_graph *\/);\n@@ -399,2 +396,1 @@\n-                             true \/* is_full_module_graph *\/,\n-                             THREAD);\n+                             true \/* is_full_module_graph *\/);\n@@ -688,1 +684,1 @@\n-                                CHECK);\n+                                THREAD \/* exceptions are ignored *\/);\n@@ -691,1 +687,1 @@\n-                                CHECK);\n+                                THREAD \/* exceptions are ignored *\/);\n@@ -694,1 +690,1 @@\n-                                CHECK);\n+                                THREAD \/* exceptions are ignored *\/);\n@@ -704,1 +700,1 @@\n-    resolve_classes_for_subgraph_of(k, CHECK);\n+    resolve_classes_for_subgraph_of(k, THREAD \/* exceptions are ignored *\/);\n@@ -735,1 +731,1 @@\n-    init_archived_fields_for(k, record, THREAD);\n+    init_archived_fields_for(k, record);\n@@ -800,1 +796,1 @@\n-void HeapShared::init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record, TRAPS) {\n+void HeapShared::init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record) {\n@@ -853,1 +849,0 @@\n-  Thread* _thread;\n@@ -859,1 +854,1 @@\n-                           oop orig, oop archived, TRAPS) :\n+                           oop orig, oop archived) :\n@@ -863,2 +858,1 @@\n-    _orig_referencing_obj(orig), _archived_referencing_obj(archived),\n-    _thread(THREAD) {}\n+    _orig_referencing_obj(orig), _archived_referencing_obj(archived) {}\n@@ -877,1 +871,0 @@\n-      Thread* THREAD = _thread;\n@@ -890,1 +883,1 @@\n-          _level + 1, _subgraph_info, obj, _is_closed_archive, THREAD);\n+          _level + 1, _subgraph_info, obj, _is_closed_archive);\n@@ -904,2 +897,1 @@\n-void HeapShared::check_closed_archive_heap_region_object(InstanceKlass* k,\n-                                                         Thread* THREAD) {\n+void HeapShared::check_closed_archive_heap_region_object(InstanceKlass* k) {\n@@ -911,1 +903,1 @@\n-        ResourceMark rm(THREAD);\n+        ResourceMark rm;\n@@ -947,2 +939,1 @@\n-                                               bool is_closed_archive,\n-                                               TRAPS) {\n+                                               bool is_closed_archive) {\n@@ -988,1 +979,1 @@\n-    archived_obj = archive_heap_object(orig_obj, THREAD);\n+    archived_obj = archive_heap_object(orig_obj);\n@@ -1027,1 +1018,1 @@\n-                                  subgraph_info, orig_obj, archived_obj, THREAD);\n+                                  subgraph_info, orig_obj, archived_obj);\n@@ -1030,1 +1021,1 @@\n-    check_closed_archive_heap_region_object(InstanceKlass::cast(orig_k), THREAD);\n+    check_closed_archive_heap_region_object(InstanceKlass::cast(orig_k));\n@@ -1073,2 +1064,1 @@\n-                                                             bool is_closed_archive,\n-                                                             TRAPS) {\n+                                                             bool is_closed_archive) {\n@@ -1092,2 +1082,1 @@\n-    oop af = archive_reachable_objects_from(1, subgraph_info, f,\n-                                            is_closed_archive, CHECK);\n+    oop af = archive_reachable_objects_from(1, subgraph_info, f, is_closed_archive);\n@@ -1252,1 +1241,1 @@\n-                                            int num, Thread* THREAD) {\n+                                            int num, TRAPS) {\n@@ -1281,1 +1270,1 @@\n-void HeapShared::init_subgraph_entry_fields(Thread* THREAD) {\n+void HeapShared::init_subgraph_entry_fields(TRAPS) {\n@@ -1286,1 +1275,1 @@\n-                             THREAD);\n+                             THREAD \/* aborts on exception *\/);\n@@ -1289,1 +1278,1 @@\n-                             THREAD);\n+                             THREAD \/* aborts on exception *\/);\n@@ -1293,1 +1282,1 @@\n-                               THREAD);\n+                               THREAD \/* aborts on exception *\/);\n@@ -1297,1 +1286,1 @@\n-void HeapShared::init_for_dumping(Thread* THREAD) {\n+void HeapShared::init_for_dumping(TRAPS) {\n@@ -1300,1 +1289,1 @@\n-    init_subgraph_entry_fields(THREAD);\n+    init_subgraph_entry_fields(THREAD \/* aborts on exception *\/);\n@@ -1306,2 +1295,1 @@\n-                                          bool is_full_module_graph,\n-                                          Thread* THREAD) {\n+                                          bool is_full_module_graph) {\n@@ -1338,1 +1326,1 @@\n-                                                  is_closed_archive, CHECK);\n+                                                  is_closed_archive);\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":37,"deletions":49,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -203,2 +203,1 @@\n-  static void check_closed_archive_heap_region_object(InstanceKlass* k,\n-                                                      Thread* THREAD);\n+  static void check_closed_archive_heap_region_object(InstanceKlass* k);\n@@ -209,2 +208,1 @@\n-                                       bool is_full_module_graph,\n-                                       Thread* THREAD);\n+                                       bool is_full_module_graph);\n@@ -217,1 +215,1 @@\n-    bool is_closed_archive, TRAPS);\n+    bool is_closed_archive);\n@@ -228,1 +226,1 @@\n-                                         int num, Thread* THREAD);\n+                                         int num, TRAPS);\n@@ -285,1 +283,1 @@\n-  static void init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record, TRAPS);\n+  static void init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record);\n@@ -301,1 +299,1 @@\n-  static oop archive_heap_object(oop obj, Thread* THREAD);\n+  static oop archive_heap_object(oop obj);\n@@ -303,1 +301,1 @@\n-  static void archive_klass_objects(Thread* THREAD);\n+  static void archive_klass_objects();\n@@ -320,2 +318,1 @@\n-                                            bool is_closed_archive,\n-                                            TRAPS);\n+                                            bool is_closed_archive);\n@@ -405,2 +402,2 @@\n-  static void init_for_dumping(Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void init_subgraph_entry_fields(Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_for_dumping(TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_subgraph_entry_fields(TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/memory\/heapShared.hpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-void ConstantPool::archive_resolved_references(Thread* THREAD) {\n+void ConstantPool::archive_resolved_references() {\n@@ -313,1 +313,1 @@\n-    oop archived = HeapShared::archive_heap_object(rr, THREAD);\n+    oop archived = HeapShared::archive_heap_object(rr);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -742,1 +742,1 @@\n-  void archive_resolved_references(Thread *THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  void archive_resolved_references() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}