{"files":[{"patch":"@@ -866,1 +866,1 @@\n-            oop archived_s = StringTable::create_archived_string(s, CHECK);\n+            oop archived_s = StringTable::create_archived_string(s);\n@@ -1143,1 +1143,1 @@\n-void java_lang_Class::archive_basic_type_mirrors(TRAPS) {\n+void java_lang_Class::archive_basic_type_mirrors() {\n@@ -1152,1 +1152,1 @@\n-      oop archived_m = HeapShared::archive_heap_object(m, THREAD);\n+      oop archived_m = HeapShared::archive_heap_object(m);\n@@ -1162,1 +1162,1 @@\n-      Handle archived_mirror_h(THREAD, archived_m);\n+      Handle archived_mirror_h(Thread::current(), archived_m);\n@@ -1182,1 +1182,1 @@\n-oop java_lang_Class::archive_mirror(Klass* k, TRAPS) {\n+oop java_lang_Class::archive_mirror(Klass* k) {\n@@ -1211,1 +1211,1 @@\n-  oop archived_mirror = HeapShared::archive_heap_object(mirror, THREAD);\n+  oop archived_mirror = HeapShared::archive_heap_object(mirror);\n@@ -1216,1 +1216,1 @@\n-  archived_mirror = process_archived_mirror(k, mirror, archived_mirror, THREAD);\n+  archived_mirror = process_archived_mirror(k, mirror, archived_mirror);\n@@ -1233,2 +1233,1 @@\n-                                             oop archived_mirror,\n-                                             Thread *THREAD) {\n+                                             oop archived_mirror) {\n@@ -1238,1 +1237,1 @@\n-  Handle archived_mirror_h(THREAD, archived_mirror);\n+  Handle archived_mirror_h(Thread::current(), archived_mirror);\n@@ -1253,1 +1252,1 @@\n-      archived_comp_mirror = archive_mirror(element_klass, THREAD);\n+      archived_comp_mirror = archive_mirror(element_klass);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -279,3 +279,3 @@\n-  static void archive_basic_type_mirrors(TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n-  static oop  archive_mirror(Klass* k, TRAPS) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n-  static oop  process_archived_mirror(Klass* k, oop mirror, oop archived_mirror, Thread *THREAD)\n+  static void archive_basic_type_mirrors() NOT_CDS_JAVA_HEAP_RETURN;\n+  static oop  archive_mirror(Klass* k) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop  process_archived_mirror(Klass* k, oop mirror, oop archived_mirror)\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -720,1 +720,1 @@\n-oop StringTable::create_archived_string(oop s, Thread* THREAD) {\n+oop StringTable::create_archived_string(oop s) {\n@@ -727,1 +727,1 @@\n-  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_heap_object(v, THREAD);\n+  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_heap_object(v);\n@@ -731,1 +731,1 @@\n-  new_s = HeapShared::archive_heap_object(s, THREAD);\n+  new_s = HeapShared::archive_heap_object(s);\n@@ -748,1 +748,1 @@\n-    oop new_s = StringTable::create_archived_string(s, Thread::current());\n+    oop new_s = StringTable::create_archived_string(s);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-  static oop create_archived_string(oop s, Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop create_archived_string(oop s) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1811,1 +1811,1 @@\n-    HeapShared::resolve_classes(CHECK);\n+    HeapShared::resolve_classes(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-  reset_states(SystemDictionary::java_platform_loader(), THREAD);\n+  reset_states(SystemDictionary::java_platform_loader(), CHECK);\n@@ -250,1 +250,1 @@\n-oop HeapShared::archive_heap_object(oop obj, Thread* THREAD) {\n+oop HeapShared::archive_heap_object(oop obj) {\n@@ -300,1 +300,1 @@\n-void HeapShared::archive_klass_objects(Thread* THREAD) {\n+void HeapShared::archive_klass_objects() {\n@@ -307,1 +307,1 @@\n-    java_lang_Class::archive_mirror(k, CHECK);\n+    java_lang_Class::archive_mirror(k);\n@@ -312,1 +312,1 @@\n-      ik->constants()->archive_resolved_references(THREAD);\n+      ik->constants()->archive_resolved_references();\n@@ -372,2 +372,1 @@\n-                           false \/* is_full_module_graph *\/,\n-                           THREAD);\n+                           false \/* is_full_module_graph *\/);\n@@ -383,1 +382,0 @@\n-  Thread* THREAD = Thread::current();\n@@ -386,1 +384,1 @@\n-  java_lang_Class::archive_basic_type_mirrors(THREAD);\n+  java_lang_Class::archive_basic_type_mirrors();\n@@ -388,1 +386,1 @@\n-  archive_klass_objects(THREAD);\n+  archive_klass_objects();\n@@ -393,2 +391,1 @@\n-                           false \/* is_full_module_graph *\/,\n-                           THREAD);\n+                           false \/* is_full_module_graph *\/);\n@@ -399,2 +396,1 @@\n-                             true \/* is_full_module_graph *\/,\n-                             THREAD);\n+                             true \/* is_full_module_graph *\/);\n@@ -681,1 +677,1 @@\n-void HeapShared::resolve_classes(TRAPS) {\n+void HeapShared::resolve_classes(Thread* THREAD) {\n@@ -687,1 +683,1 @@\n-                                CHECK);\n+                                THREAD);\n@@ -690,1 +686,1 @@\n-                                CHECK);\n+                                THREAD);\n@@ -693,1 +689,1 @@\n-                                CHECK);\n+                                THREAD);\n@@ -697,1 +693,1 @@\n-                                               int num, TRAPS) {\n+                                               int num, Thread* THREAD) {\n@@ -703,1 +699,1 @@\n-    resolve_classes_for_subgraph_of(k, CHECK);\n+    resolve_classes_for_subgraph_of(k, THREAD);\n@@ -707,2 +703,3 @@\n-void HeapShared::resolve_classes_for_subgraph_of(Klass* k, TRAPS) {\n- const ArchivedKlassSubGraphInfoRecord* record = resolve_or_init_classes_for_subgraph_of(k, \/*do_init=*\/false, THREAD);\n+void HeapShared::resolve_classes_for_subgraph_of(Klass* k, Thread* THREAD) {\n+ const ArchivedKlassSubGraphInfoRecord* record =\n+   resolve_or_init_classes_for_subgraph_of(k, \/*do_init=*\/false, THREAD);\n@@ -717,1 +714,1 @@\n-void HeapShared::initialize_from_archived_subgraph(Klass* k, TRAPS) {\n+void HeapShared::initialize_from_archived_subgraph(Klass* k, Thread* THREAD) {\n@@ -734,1 +731,1 @@\n-    init_archived_fields_for(k, record, THREAD);\n+    init_archived_fields_for(k, record);\n@@ -806,1 +803,1 @@\n-void HeapShared::init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record, TRAPS) {\n+void HeapShared::init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record) {\n@@ -859,1 +856,0 @@\n-  Thread* _thread;\n@@ -865,1 +861,1 @@\n-                           oop orig, oop archived, TRAPS) :\n+                           oop orig, oop archived) :\n@@ -869,2 +865,1 @@\n-    _orig_referencing_obj(orig), _archived_referencing_obj(archived),\n-    _thread(THREAD) {}\n+    _orig_referencing_obj(orig), _archived_referencing_obj(archived) {}\n@@ -883,1 +878,0 @@\n-      Thread* THREAD = _thread;\n@@ -896,1 +890,1 @@\n-          _level + 1, _subgraph_info, obj, _is_closed_archive, THREAD);\n+          _level + 1, _subgraph_info, obj, _is_closed_archive);\n@@ -910,2 +904,1 @@\n-void HeapShared::check_closed_archive_heap_region_object(InstanceKlass* k,\n-                                                         Thread* THREAD) {\n+void HeapShared::check_closed_archive_heap_region_object(InstanceKlass* k) {\n@@ -917,1 +910,1 @@\n-        ResourceMark rm(THREAD);\n+        ResourceMark rm;\n@@ -953,2 +946,1 @@\n-                                               bool is_closed_archive,\n-                                               TRAPS) {\n+                                               bool is_closed_archive) {\n@@ -994,1 +986,1 @@\n-    archived_obj = archive_heap_object(orig_obj, THREAD);\n+    archived_obj = archive_heap_object(orig_obj);\n@@ -1032,1 +1024,1 @@\n-                                  subgraph_info, orig_obj, archived_obj, THREAD);\n+                                  subgraph_info, orig_obj, archived_obj);\n@@ -1035,1 +1027,1 @@\n-    check_closed_archive_heap_region_object(InstanceKlass::cast(orig_k), THREAD);\n+    check_closed_archive_heap_region_object(InstanceKlass::cast(orig_k));\n@@ -1078,2 +1070,1 @@\n-                                                             bool is_closed_archive,\n-                                                             TRAPS) {\n+                                                             bool is_closed_archive) {\n@@ -1097,2 +1088,1 @@\n-    oop af = archive_reachable_objects_from(1, subgraph_info, f,\n-                                            is_closed_archive, CHECK);\n+    oop af = archive_reachable_objects_from(1, subgraph_info, f, is_closed_archive);\n@@ -1311,2 +1301,1 @@\n-                                          bool is_full_module_graph,\n-                                          Thread* THREAD) {\n+                                          bool is_full_module_graph) {\n@@ -1343,1 +1332,1 @@\n-                                                  is_closed_archive, CHECK);\n+                                                  is_closed_archive);\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":35,"deletions":46,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -203,2 +203,1 @@\n-  static void check_closed_archive_heap_region_object(InstanceKlass* k,\n-                                                      Thread* THREAD);\n+  static void check_closed_archive_heap_region_object(InstanceKlass* k);\n@@ -209,2 +208,1 @@\n-                                       bool is_full_module_graph,\n-                                       Thread* THREAD);\n+                                       bool is_full_module_graph);\n@@ -217,1 +215,1 @@\n-    bool is_closed_archive, TRAPS);\n+    bool is_closed_archive);\n@@ -279,2 +277,2 @@\n-                                            int num, TRAPS);\n-  static void resolve_classes_for_subgraph_of(Klass* k, TRAPS);\n+                                            int num, Thread* THREAD);\n+  static void resolve_classes_for_subgraph_of(Klass* k, Thread* THREAD);\n@@ -285,1 +283,1 @@\n-  static void init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record, TRAPS);\n+  static void init_archived_fields_for(Klass* k, const ArchivedKlassSubGraphInfoRecord* record);\n@@ -301,1 +299,1 @@\n-  static oop archive_heap_object(oop obj, Thread* THREAD);\n+  static oop archive_heap_object(oop obj);\n@@ -303,1 +301,1 @@\n-  static void archive_klass_objects(Thread* THREAD);\n+  static void archive_klass_objects();\n@@ -320,2 +318,1 @@\n-                                            bool is_closed_archive,\n-                                            TRAPS);\n+                                            bool is_closed_archive);\n@@ -391,2 +388,2 @@\n-  static void resolve_classes(TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void initialize_from_archived_subgraph(Klass* k, TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void resolve_classes(Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void initialize_from_archived_subgraph(Klass* k, Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/memory\/heapShared.hpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-void ConstantPool::archive_resolved_references(Thread* THREAD) {\n+void ConstantPool::archive_resolved_references() {\n@@ -314,1 +314,1 @@\n-    oop archived = HeapShared::archive_heap_object(rr, THREAD);\n+    oop archived = HeapShared::archive_heap_object(rr);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -742,1 +742,1 @@\n-  void archive_resolved_references(Thread *THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  void archive_resolved_references() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}