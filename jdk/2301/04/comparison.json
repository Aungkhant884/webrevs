{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                                 Register obj, VMClassID klass_id,\n+                                 Register obj, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                           Register obj, VMClassID klass_id,\n+                           Register obj, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/runtime_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                                 Register obj, Register temp1, Register temp2, VMClassID klass_id,\n+                                 Register obj, Register temp1, Register temp2, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                           Register obj, Register temp1, Register temp2, VMClassID klass_id,\n+                           Register obj, Register temp1, Register temp2, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                                 Register obj_reg, VMClassID klass_id,\n+                                 Register obj_reg, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                           Register obj_reg, VMClassID klass_id,\n+                           Register obj_reg, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                                 Register obj_reg, VMClassID klass_id,\n+                                 Register obj_reg, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                           Register obj_reg, VMClassID klass_id,\n+                           Register obj_reg, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/runtime_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                                 Register obj, VMClassID klass_id,\n+                                 Register obj, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                           Register obj, VMClassID klass_id,\n+                           Register obj, vmClassID klass_id,\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_32.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -392,1 +394,1 @@\n-  link_klass(SystemDictionary::Reference_klass());\n+  link_klass(vmClasses::Reference_klass());\n","filename":"src\/hotspot\/share\/aot\/aotCodeHeap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -535,1 +535,1 @@\n-  assert(exception->is_a(SystemDictionary::Throwable_klass()),\n+  assert(exception->is_a(vmClasses::Throwable_klass()),\n@@ -1422,1 +1422,1 @@\n-      assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n+      assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -802,1 +803,1 @@\n-    ciInstanceKlass* holder    = get_instance_klass(SystemDictionary::MethodHandle_klass());\n+    ciInstanceKlass* holder    = get_instance_klass(vmClasses::MethodHandle_klass());\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -273,2 +273,2 @@\n-      assert(SystemDictionary::System_klass() != NULL, \"Check once per vm\");\n-      if (k == SystemDictionary::System_klass()) {\n+      assert(vmClasses::System_klass() != NULL, \"Check once per vm\");\n+      if (k == vmClasses::System_klass()) {\n@@ -292,2 +292,2 @@\n-    assert(SystemDictionary::CallSite_klass() != NULL, \"should be already initialized\");\n-    if (k == SystemDictionary::CallSite_klass() &&\n+    assert(vmClasses::CallSite_klass() != NULL, \"should be already initialized\");\n+    if (k == vmClasses::CallSite_klass() &&\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -46,1 +46,1 @@\n-  if (m == NULL || m->klass() != SystemDictionary::Class_klass()) {\n+  if (m == NULL || m->klass() != vmClasses::Class_klass()) {\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -110,1 +110,1 @@\n-    if (k != SystemDictionary::Object_klass()) {\n+    if (k != vmClasses::Object_klass()) {\n@@ -263,1 +263,1 @@\n-    return SystemDictionary::box_klass_type(get_Klass());\n+    return vmClasses::box_klass_type(get_Klass());\n@@ -692,1 +692,1 @@\n-            if (value->is_a(SystemDictionary::String_klass())) {\n+            if (value->is_a(vmClasses::String_klass())) {\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -53,0 +53,1 @@\n+#include \"runtime\/signature.hpp\"\n@@ -156,2 +157,2 @@\n-  if (SystemDictionary::name##_is_loaded()) \\\n-    ciEnv::_##name = get_metadata(SystemDictionary::name())->as_instance_klass();\n+  if (vmClasses::name##_is_loaded()) \\\n+    ciEnv::_##name = get_metadata(vmClasses::name())->as_instance_klass();\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciType.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -65,2 +65,2 @@\n-            (uint32_t) object_hash(SystemDictionary::String_klass()),\n-            (uint32_t) object_hash(SystemDictionary::System_klass()),\n+            (uint32_t) object_hash(vmClasses::String_klass()),\n+            (uint32_t) object_hash(vmClasses::System_klass()),\n","filename":"src\/hotspot\/share\/classfile\/altHashing.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -2687,1 +2688,1 @@\n-      if (!SystemDictionary::Parameter_klass_loaded())\n+      if (!vmClasses::Parameter_klass_loaded())\n@@ -4309,2 +4310,2 @@\n-  if (SystemDictionary::Cloneable_klass_loaded()) {\n-    if (ik->is_subtype_of(SystemDictionary::Cloneable_klass())) {\n+  if (vmClasses::Cloneable_klass_loaded()) {\n+    if (ik->is_subtype_of(vmClasses::Cloneable_klass())) {\n@@ -4955,1 +4956,1 @@\n-          SystemDictionary::Character_klass(),\n+          vmClasses::Character_klass(),\n@@ -4963,1 +4964,1 @@\n-          SystemDictionary::Character_klass(),\n+          vmClasses::Character_klass(),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -567,1 +568,1 @@\n-                              SystemDictionary::ClassLoader_klass(),\n+                              vmClasses::ClassLoader_klass(),\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1079,1 +1080,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::String_klass(),\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::String_klass(),\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -366,1 +367,1 @@\n-      assert(m->is_a(SystemDictionary::Class_klass()), \"invalid mirror\");\n+      assert(m->is_a(vmClasses::Class_klass()), \"invalid mirror\");\n@@ -588,1 +589,1 @@\n-  } else if (class_loader()->is_a(SystemDictionary::reflect_DelegatingClassLoader_klass())) {\n+  } else if (class_loader()->is_a(vmClasses::reflect_DelegatingClassLoader_klass())) {\n@@ -771,1 +772,1 @@\n-      } else if (class_loader()->is_a(SystemDictionary::reflect_DelegatingClassLoader_klass())) {\n+      } else if (class_loader()->is_a(vmClasses::reflect_DelegatingClassLoader_klass())) {\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -143,1 +144,1 @@\n-    if (cls == SystemDictionary::Object_klass()) {\n+    if (cls == vmClasses::Object_klass()) {\n@@ -820,1 +821,1 @@\n-  assert(klass != SystemDictionary::Object_klass(), \"Shouldn't be called for Object\");\n+  assert(klass != vmClasses::Object_klass(), \"Shouldn't be called for Object\");\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -107,1 +108,1 @@\n-  objArrayOop pn = oopFactory::new_objArray(SystemDictionary::String_klass(), len, CHECK_NULL);\n+  objArrayOop pn = oopFactory::new_objArray(vmClasses::String_klass(), len, CHECK_NULL);\n@@ -114,1 +115,1 @@\n-  objArrayOop cn = oopFactory::new_objArray(SystemDictionary::String_klass(), len, CHECK_NULL);\n+  objArrayOop cn = oopFactory::new_objArray(vmClasses::String_klass(), len, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/javaAssertions.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -100,1 +101,1 @@\n-  InstanceKlass* obj = SystemDictionary::Object_klass();\n+  InstanceKlass* obj = vmClasses::Object_klass();\n@@ -220,1 +221,1 @@\n-  InstanceKlass* k = SystemDictionary::String_klass();\n+  InstanceKlass* k = vmClasses::String_klass();\n@@ -243,1 +244,1 @@\n-      assert(fd->field_holder() == SystemDictionary::String_klass(), \"Should be String\");\n+      assert(fd->field_holder() == vmClasses::String_klass(), \"Should be String\");\n@@ -252,1 +253,1 @@\n-  SystemDictionary::String_klass()->do_local_static_fields(&fix);\n+  vmClasses::String_klass()->do_local_static_fields(&fix);\n@@ -262,1 +263,1 @@\n-  obj = SystemDictionary::String_klass()->allocate_instance(CHECK_NH);\n+  obj = vmClasses::String_klass()->allocate_instance(CHECK_NH);\n@@ -742,1 +743,1 @@\n-  assert(java_string->klass() == SystemDictionary::String_klass(),\n+  assert(java_string->klass() == vmClasses::String_klass(),\n@@ -767,1 +768,1 @@\n-  assert(str1->klass() == SystemDictionary::String_klass(),\n+  assert(str1->klass() == vmClasses::String_klass(),\n@@ -769,1 +770,1 @@\n-  assert(str2->klass() == SystemDictionary::String_klass(),\n+  assert(str2->klass() == vmClasses::String_klass(),\n@@ -784,1 +785,1 @@\n-  assert(java_string->klass() == SystemDictionary::String_klass(), \"must be java_string\");\n+  assert(java_string->klass() == vmClasses::String_klass(), \"must be java_string\");\n@@ -994,1 +995,1 @@\n-  if (SystemDictionary::Class_klass_loaded()) {\n+  if (vmClasses::Class_klass_loaded()) {\n@@ -996,1 +997,1 @@\n-    oop mirror_oop = InstanceMirrorKlass::cast(SystemDictionary::Class_klass())->allocate_instance(k, CHECK);\n+    oop mirror_oop = InstanceMirrorKlass::cast(vmClasses::Class_klass())->allocate_instance(k, CHECK);\n@@ -1315,1 +1316,1 @@\n-  if (!SystemDictionary::Class_klass_loaded()) {\n+  if (!vmClasses::Class_klass_loaded()) {\n@@ -1486,1 +1487,1 @@\n-  oop java_class = InstanceMirrorKlass::cast(SystemDictionary::Class_klass())->allocate_instance(NULL, CHECK_NULL);\n+  oop java_class = InstanceMirrorKlass::cast(vmClasses::Class_klass())->allocate_instance(NULL, CHECK_NULL);\n@@ -1493,1 +1494,1 @@\n-  InstanceMirrorKlass* mk = InstanceMirrorKlass::cast(SystemDictionary::Class_klass());\n+  InstanceMirrorKlass* mk = InstanceMirrorKlass::cast(vmClasses::Class_klass());\n@@ -1623,1 +1624,1 @@\n-  assert(mirror != NULL && mirror->is_a(SystemDictionary::Class_klass()), \"must be a Class\");\n+  assert(mirror != NULL && mirror->is_a(vmClasses::Class_klass()), \"must be a Class\");\n@@ -1643,1 +1644,1 @@\n-  InstanceKlass* k = SystemDictionary::Class_klass();\n+  InstanceKlass* k = vmClasses::Class_klass();\n@@ -1716,1 +1717,1 @@\n-  InstanceKlass* k = SystemDictionary::Thread_klass();\n+  InstanceKlass* k = vmClasses::Thread_klass();\n@@ -1936,1 +1937,1 @@\n-  InstanceKlass* k = SystemDictionary::ThreadGroup_klass();\n+  InstanceKlass* k = vmClasses::ThreadGroup_klass();\n@@ -1962,1 +1963,1 @@\n-  InstanceKlass* k = SystemDictionary::Throwable_klass();\n+  InstanceKlass* k = vmClasses::Throwable_klass();\n@@ -1973,1 +1974,1 @@\n-  InstanceKlass* ik = SystemDictionary::Throwable_klass();\n+  InstanceKlass* ik = vmClasses::Throwable_klass();\n@@ -2399,1 +2400,1 @@\n-  assert(throwable->is_a(SystemDictionary::Throwable_klass()), \"Throwable instance expected\");\n+  assert(throwable->is_a(vmClasses::Throwable_klass()), \"Throwable instance expected\");\n@@ -2403,1 +2404,1 @@\n-                          SystemDictionary::Throwable_klass(),\n+                          vmClasses::Throwable_klass(),\n@@ -2582,1 +2583,1 @@\n-  assert(throwable->is_a(SystemDictionary::Throwable_klass()), \"sanity check\");\n+  assert(throwable->is_a(vmClasses::Throwable_klass()), \"sanity check\");\n@@ -2684,1 +2685,1 @@\n-  InstanceKlass* k = SystemDictionary::StackTraceElement_klass();\n+  InstanceKlass* k = vmClasses::StackTraceElement_klass();\n@@ -2700,1 +2701,1 @@\n-  assert(element->is_a(SystemDictionary::StackTraceElement_klass()), \"sanity check\");\n+  assert(element->is_a(vmClasses::StackTraceElement_klass()), \"sanity check\");\n@@ -2807,1 +2808,1 @@\n-  InstanceKlass* k = SystemDictionary::StackFrameInfo_klass();\n+  InstanceKlass* k = vmClasses::StackFrameInfo_klass();\n@@ -2879,1 +2880,1 @@\n-  InstanceKlass* k = SystemDictionary::LiveStackFrameInfo_klass();\n+  InstanceKlass* k = vmClasses::LiveStackFrameInfo_klass();\n@@ -2914,1 +2915,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_AccessibleObject_klass();\n+  InstanceKlass* k = vmClasses::reflect_AccessibleObject_klass();\n@@ -2960,1 +2961,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_Method_klass();\n+  InstanceKlass* k = vmClasses::reflect_Method_klass();\n@@ -2972,1 +2973,1 @@\n-  Klass* klass = SystemDictionary::reflect_Method_klass();\n+  Klass* klass = vmClasses::reflect_Method_klass();\n@@ -3059,1 +3060,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_Constructor_klass();\n+  InstanceKlass* k = vmClasses::reflect_Constructor_klass();\n@@ -3143,1 +3144,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_Field_klass();\n+  InstanceKlass* k = vmClasses::reflect_Field_klass();\n@@ -3218,1 +3219,1 @@\n-  InstanceKlass* ik = SystemDictionary::RecordComponent_klass();\n+  InstanceKlass* ik = vmClasses::RecordComponent_klass();\n@@ -3279,1 +3280,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_ConstantPool_klass();\n+  InstanceKlass* k = vmClasses::reflect_ConstantPool_klass();\n@@ -3302,1 +3303,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_Parameter_klass();\n+  InstanceKlass* k = vmClasses::reflect_Parameter_klass();\n@@ -3362,1 +3363,1 @@\n-  return JavaCalls::construct_new_instance(SystemDictionary::Module_klass(),\n+  return JavaCalls::construct_new_instance(vmClasses::Module_klass(),\n@@ -3372,1 +3373,1 @@\n-  InstanceKlass* k = SystemDictionary::Module_klass();\n+  InstanceKlass* k = vmClasses::Module_klass();\n@@ -3431,1 +3432,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_ConstantPool_klass();\n+  InstanceKlass* k = vmClasses::reflect_ConstantPool_klass();\n@@ -3464,1 +3465,1 @@\n-  InstanceKlass* k = SystemDictionary::reflect_UnsafeStaticFieldAccessorImpl_klass();\n+  InstanceKlass* k = vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass();\n@@ -3494,1 +3495,1 @@\n-  InstanceKlass* k = SystemDictionary::Reference_klass();\n+  InstanceKlass* k = vmClasses::Reference_klass();\n@@ -3518,1 +3519,1 @@\n-  assert(!is_reference || ik->is_subclass_of(SystemDictionary::Reference_klass()), \"sanity\");\n+  assert(!is_reference || ik->is_subclass_of(vmClasses::Reference_klass()), \"sanity\");\n@@ -3530,2 +3531,2 @@\n-  InstanceKlass* integerKlass = SystemDictionary::Integer_klass();\n-  InstanceKlass* longKlass = SystemDictionary::Long_klass();\n+  InstanceKlass* integerKlass = vmClasses::Integer_klass();\n+  InstanceKlass* longKlass = vmClasses::Long_klass();\n@@ -3542,1 +3543,1 @@\n-  Klass* k = SystemDictionary::box_klass(type);\n+  Klass* k = vmClasses::box_klass(type);\n@@ -3587,1 +3588,1 @@\n-  BasicType type = SystemDictionary::box_klass_type(box->klass());\n+  BasicType type = vmClasses::box_klass_type(box->klass());\n@@ -3595,1 +3596,1 @@\n-  BasicType type = SystemDictionary::box_klass_type(box->klass());\n+  BasicType type = vmClasses::box_klass_type(box->klass());\n@@ -3629,1 +3630,1 @@\n-  BasicType type = SystemDictionary::box_klass_type(box->klass());\n+  BasicType type = vmClasses::box_klass_type(box->klass());\n@@ -3688,1 +3689,1 @@\n-  InstanceKlass* k = SystemDictionary::SoftReference_klass();\n+  InstanceKlass* k = vmClasses::SoftReference_klass();\n@@ -3703,1 +3704,1 @@\n-  InstanceKlass* ik = SystemDictionary::SoftReference_klass();\n+  InstanceKlass* ik = vmClasses::SoftReference_klass();\n@@ -3709,1 +3710,1 @@\n-  InstanceKlass* ik = SystemDictionary::SoftReference_klass();\n+  InstanceKlass* ik = vmClasses::SoftReference_klass();\n@@ -3729,1 +3730,1 @@\n-  InstanceKlass* k = SystemDictionary::DirectMethodHandle_klass();\n+  InstanceKlass* k = vmClasses::DirectMethodHandle_klass();\n@@ -3761,1 +3762,1 @@\n-  InstanceKlass* k = SystemDictionary::MethodHandle_klass();\n+  InstanceKlass* k = vmClasses::MethodHandle_klass();\n@@ -3779,1 +3780,1 @@\n-  InstanceKlass* k = SystemDictionary::MemberName_klass();\n+  InstanceKlass* k = vmClasses::MemberName_klass();\n@@ -3792,1 +3793,1 @@\n-  InstanceKlass* k = SystemDictionary::ResolvedMethodName_klass();\n+  InstanceKlass* k = vmClasses::ResolvedMethodName_klass();\n@@ -3807,1 +3808,1 @@\n-  InstanceKlass* k = SystemDictionary::LambdaForm_klass();\n+  InstanceKlass* k = vmClasses::LambdaForm_klass();\n@@ -3844,1 +3845,1 @@\n-  InstanceKlass* k = SystemDictionary::NativeEntryPoint_klass();\n+  InstanceKlass* k = vmClasses::NativeEntryPoint_klass();\n@@ -3998,1 +3999,1 @@\n-  InstanceKlass* k = SystemDictionary::ResolvedMethodName_klass();\n+  InstanceKlass* k = vmClasses::ResolvedMethodName_klass();\n@@ -4044,1 +4045,1 @@\n-  InstanceKlass* k = SystemDictionary::MethodType_klass();\n+  InstanceKlass* k = vmClasses::MethodType_klass();\n@@ -4138,1 +4139,1 @@\n-  InstanceKlass* k = SystemDictionary::CallSite_klass();\n+  InstanceKlass* k = vmClasses::CallSite_klass();\n@@ -4163,1 +4164,1 @@\n-  InstanceKlass* k = SystemDictionary::ConstantCallSite_klass();\n+  InstanceKlass* k = vmClasses::ConstantCallSite_klass();\n@@ -4179,1 +4180,1 @@\n-  InstanceKlass* k = SystemDictionary::Context_klass();\n+  InstanceKlass* k = vmClasses::Context_klass();\n@@ -4212,1 +4213,1 @@\n-  InstanceKlass* k = SystemDictionary::AccessControlContext_klass();\n+  InstanceKlass* k = vmClasses::AccessControlContext_klass();\n@@ -4226,1 +4227,1 @@\n-  SystemDictionary::AccessControlContext_klass()->initialize(CHECK_NULL);\n+  vmClasses::AccessControlContext_klass()->initialize(CHECK_NULL);\n@@ -4228,1 +4229,1 @@\n-  oop result = SystemDictionary::AccessControlContext_klass()->allocate_instance(CHECK_NULL);\n+  oop result = vmClasses::AccessControlContext_klass()->allocate_instance(CHECK_NULL);\n@@ -4273,1 +4274,1 @@\n-  InstanceKlass* k1 = SystemDictionary::ClassLoader_klass();\n+  InstanceKlass* k1 = vmClasses::ClassLoader_klass();\n@@ -4354,1 +4355,1 @@\n-    Klass* delegating_cl_class = SystemDictionary::reflect_DelegatingClassLoader_klass();\n+    Klass* delegating_cl_class = vmClasses::reflect_DelegatingClassLoader_klass();\n@@ -4392,1 +4393,1 @@\n-  InstanceKlass* k = SystemDictionary::System_klass();\n+  InstanceKlass* k = vmClasses::System_klass();\n@@ -4424,1 +4425,1 @@\n-    assert(fd->field_holder() == SystemDictionary::UnsafeConstants_klass(), \"Should be UnsafeConstants\");\n+    assert(fd->field_holder() == vmClasses::UnsafeConstants_klass(), \"Should be UnsafeConstants\");\n@@ -4445,1 +4446,1 @@\n-  SystemDictionary::UnsafeConstants_klass()->do_local_static_fields(&fixup);\n+  vmClasses::UnsafeConstants_klass()->do_local_static_fields(&fixup);\n@@ -4472,1 +4473,1 @@\n-  InstanceKlass* k = SystemDictionary::StackTraceElement_klass();\n+  InstanceKlass* k = vmClasses::StackTraceElement_klass();\n@@ -4532,1 +4533,1 @@\n-  InstanceKlass* k = SystemDictionary::AssertionStatusDirectives_klass();\n+  InstanceKlass* k = vmClasses::AssertionStatusDirectives_klass();\n@@ -4571,1 +4572,1 @@\n-  InstanceKlass* k = SystemDictionary::nio_Buffer_klass();\n+  InstanceKlass* k = vmClasses::nio_Buffer_klass();\n@@ -4588,1 +4589,1 @@\n-  InstanceKlass* k = SystemDictionary::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass();\n+  InstanceKlass* k = vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass();\n@@ -4609,1 +4610,1 @@\n-  InstanceKlass* k = SystemDictionary::vector_VectorPayload_klass();\n+  InstanceKlass* k = vmClasses::vector_VectorPayload_klass();\n@@ -4844,1 +4845,1 @@\n-  InstanceKlass* k = SystemDictionary::RecordComponent_klass();\n+  InstanceKlass* k = vmClasses::RecordComponent_klass();\n@@ -4936,1 +4937,1 @@\n-  if (klass == SystemDictionary::ClassLoader_klass() ||  \/\/ ClassLoader::loader_data is malloc'ed.\n+  if (klass == vmClasses::ClassLoader_klass() ||  \/\/ ClassLoader::loader_data is malloc'ed.\n@@ -4944,3 +4945,3 @@\n-      klass == SystemDictionary::ResolvedMethodName_klass() ||\n-      klass == SystemDictionary::MemberName_klass() ||\n-      klass == SystemDictionary::Context_klass()) {\n+      klass == vmClasses::ResolvedMethodName_klass() ||\n+      klass == vmClasses::MemberName_klass() ||\n+      klass == vmClasses::Context_klass()) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":80,"deletions":79,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -949,1 +948,1 @@\n-    return klass->is_subclass_of(SystemDictionary::MethodHandle_klass());\n+    return klass->is_subclass_of(vmClasses::MethodHandle_klass());\n@@ -976,1 +975,1 @@\n-    return klass->is_subclass_of(SystemDictionary::DirectMethodHandle_klass());\n+    return klass->is_subclass_of(vmClasses::DirectMethodHandle_klass());\n@@ -1004,2 +1003,2 @@\n-    return SystemDictionary::LambdaForm_klass() != NULL &&\n-      klass->is_subclass_of(SystemDictionary::LambdaForm_klass());\n+    return vmClasses::LambdaForm_klass() != NULL &&\n+      klass->is_subclass_of(vmClasses::LambdaForm_klass());\n@@ -1044,2 +1043,2 @@\n-    return SystemDictionary::NativeEntryPoint_klass() != NULL &&\n-      klass->is_subclass_of(SystemDictionary::NativeEntryPoint_klass());\n+    return vmClasses::NativeEntryPoint_klass() != NULL &&\n+      klass->is_subclass_of(vmClasses::NativeEntryPoint_klass());\n@@ -1138,1 +1137,1 @@\n-    return klass->is_subclass_of(SystemDictionary::MemberName_klass());\n+    return klass->is_subclass_of(vmClasses::MemberName_klass());\n@@ -1234,1 +1233,1 @@\n-    return klass->is_subclass_of(SystemDictionary::CallSite_klass());\n+    return klass->is_subclass_of(vmClasses::CallSite_klass());\n@@ -1260,1 +1259,1 @@\n-    return klass->is_subclass_of(SystemDictionary::ConstantCallSite_klass());\n+    return klass->is_subclass_of(vmClasses::ConstantCallSite_klass());\n@@ -1289,1 +1288,1 @@\n-    return klass->is_subclass_of(SystemDictionary::Context_klass());\n+    return klass->is_subclass_of(vmClasses::Context_klass());\n@@ -1357,1 +1356,1 @@\n-    return klass->is_subclass_of(SystemDictionary::ClassLoader_klass());\n+    return klass->is_subclass_of(vmClasses::ClassLoader_klass());\n@@ -1601,1 +1600,1 @@\n-    return klass->is_subclass_of(SystemDictionary::vector_VectorPayload_klass());\n+    return klass->is_subclass_of(vmClasses::vector_VectorPayload_klass());\n@@ -1721,1 +1720,1 @@\n-  const VMClassID klass_id;\n+  const vmClassID klass_id;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"oops\/method.hpp\"\n@@ -99,1 +100,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::String_klass();\n+  return obj != NULL && obj->klass() == vmClasses::String_klass();\n@@ -193,1 +194,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::MemberName_klass();\n+  return obj != NULL && obj->klass() == vmClasses::MemberName_klass();\n@@ -197,1 +198,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::ResolvedMethodName_klass();\n+  return obj != NULL && obj->klass() == vmClasses::ResolvedMethodName_klass();\n@@ -201,1 +202,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::MethodType_klass();\n+  return obj != NULL && obj->klass() == vmClasses::MethodType_klass();\n@@ -209,1 +210,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::Class_klass();\n+  return obj != NULL && obj->klass() == vmClasses::Class_klass();\n@@ -248,1 +249,1 @@\n-  return obj != NULL && obj->klass() == SystemDictionary::Module_klass();\n+  return obj != NULL && obj->klass() == vmClasses::Module_klass();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -67,1 +68,1 @@\n-  objArrayHandle list_lines = oopFactory::new_objArray_handle(SystemDictionary::String_klass(), len, CHECK);\n+  objArrayHandle list_lines = oopFactory::new_objArray_handle(vmClasses::String_klass(), len, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/lambdaFormInvokers.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -171,1 +172,1 @@\n-    if (pkg_str == NULL || pkg_str->klass() != SystemDictionary::String_klass()) {\n+    if (pkg_str == NULL || pkg_str->klass() != vmClasses::String_klass()) {\n@@ -328,1 +329,1 @@\n-    if (pkg_str == NULL || pkg_str->klass() != SystemDictionary::String_klass()) {\n+    if (pkg_str == NULL || pkg_str->klass() != vmClasses::String_klass()) {\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/protectionDomainCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -545,1 +545,1 @@\n-  } else if (obj->klass() == SystemDictionary::String_klass()) {\n+  } else if (obj->klass() == vmClasses::String_klass()) {\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  InstanceKlass* class_loader_klass = SystemDictionary::ClassLoader_klass();\n+  InstanceKlass* class_loader_klass = vmClasses::ClassLoader_klass();\n@@ -169,1 +169,1 @@\n-  return (class_loader->klass() == SystemDictionary::jdk_internal_loader_ClassLoaders_AppClassLoader_klass() ||\n+  return (class_loader->klass() == vmClasses::jdk_internal_loader_ClassLoaders_AppClassLoader_klass() ||\n@@ -178,1 +178,1 @@\n-  return (class_loader->klass() == SystemDictionary::jdk_internal_loader_ClassLoaders_PlatformClassLoader_klass());\n+  return (class_loader->klass() == vmClasses::jdk_internal_loader_ClassLoaders_PlatformClassLoader_klass());\n@@ -233,1 +233,1 @@\n-    if (throw_error && PENDING_EXCEPTION->is_a(SystemDictionary::ClassNotFoundException_klass())) {\n+    if (throw_error && PENDING_EXCEPTION->is_a(vmClasses::ClassNotFoundException_klass())) {\n@@ -497,1 +497,1 @@\n-  InstanceKlass* system_loader = SystemDictionary::ClassLoader_klass();\n+  InstanceKlass* system_loader = vmClasses::ClassLoader_klass();\n@@ -1534,1 +1534,1 @@\n-    InstanceKlass* spec_klass = SystemDictionary::ClassLoader_klass();\n+    InstanceKlass* spec_klass = vmClasses::ClassLoader_klass();\n@@ -2286,1 +2286,1 @@\n-  objArrayHandle appendix_box = oopFactory::new_objArray_handle(SystemDictionary::Object_klass(), 1, CHECK_NULL);\n+  objArrayHandle appendix_box = oopFactory::new_objArray_handle(vmClasses::Object_klass(), 1, CHECK_NULL);\n@@ -2304,1 +2304,1 @@\n-                         SystemDictionary::MethodHandleNatives_klass(),\n+                         vmClasses::MethodHandleNatives_klass(),\n@@ -2327,2 +2327,2 @@\n-         (InstanceKlass::cast(klass)->is_same_class_package(SystemDictionary::Object_klass()) ||       \/\/ java.lang\n-          InstanceKlass::cast(klass)->is_same_class_package(SystemDictionary::MethodHandle_klass()));  \/\/ java.lang.invoke\n+         (InstanceKlass::cast(klass)->is_same_class_package(vmClasses::Object_klass()) ||       \/\/ java.lang\n+          InstanceKlass::cast(klass)->is_same_class_package(vmClasses::MethodHandle_klass()));  \/\/ java.lang.invoke\n@@ -2397,1 +2397,1 @@\n-  objArrayHandle pts = oopFactory::new_objArray_handle(SystemDictionary::Class_klass(), npts, CHECK_(empty));\n+  objArrayHandle pts = oopFactory::new_objArray_handle(vmClasses::Class_klass(), npts, CHECK_(empty));\n@@ -2438,1 +2438,1 @@\n-                         SystemDictionary::MethodHandleNatives_klass(),\n+                         vmClasses::MethodHandleNatives_klass(),\n@@ -2495,1 +2495,1 @@\n-  Handle mname = MemberName_klass()->allocate_instance_handle(CHECK_(empty));\n+  Handle mname = vmClasses::MemberName_klass()->allocate_instance_handle(CHECK_(empty));\n@@ -2524,1 +2524,1 @@\n-                         SystemDictionary::MethodHandleNatives_klass(),\n+                         vmClasses::MethodHandleNatives_klass(),\n@@ -2547,1 +2547,1 @@\n-    appendix_box = oopFactory::new_objArray_handle(SystemDictionary::Object_klass(), 1, CHECK);\n+    appendix_box = oopFactory::new_objArray_handle(vmClasses::Object_klass(), 1, CHECK);\n@@ -2565,1 +2565,1 @@\n-                         SystemDictionary::MethodHandleNatives_klass(),\n+                         vmClasses::MethodHandleNatives_klass(),\n@@ -2601,1 +2601,1 @@\n-  return !m->is_public() && m->method_holder() == SystemDictionary::Object_klass();\n+  return !m->is_public() && m->method_holder() == vmClasses::Object_klass();\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/vmClasses.hpp\"\n@@ -90,4 +89,1 @@\n-\/\/ TMP: subclass from vmClasses so that we can still access the VM classes like\n-\/\/ SystemDictionary::Object_klass(). This will be fixed when we replace all SystemDictionary::*_klass()\n-\/\/ calls with vmClasses::*_klass().\n-class SystemDictionary : public vmClasses {\n+class SystemDictionary : AllStatic {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -727,1 +728,1 @@\n-  Handle bais = JavaCalls::construct_new_instance(SystemDictionary::ByteArrayInputStream_klass(),\n+  Handle bais = JavaCalls::construct_new_instance(vmClasses::ByteArrayInputStream_klass(),\n@@ -731,1 +732,1 @@\n-  Handle manifest = JavaCalls::construct_new_instance(SystemDictionary::Jar_Manifest_klass(),\n+  Handle manifest = JavaCalls::construct_new_instance(vmClasses::Jar_Manifest_klass(),\n@@ -776,1 +777,1 @@\n-        SystemDictionary::jdk_internal_loader_ClassLoaders_klass();\n+        vmClasses::jdk_internal_loader_ClassLoaders_klass();\n@@ -814,1 +815,1 @@\n-    Klass* app_classLoader_klass = SystemDictionary::jdk_internal_loader_ClassLoaders_AppClassLoader_klass();\n+    Klass* app_classLoader_klass = vmClasses::jdk_internal_loader_ClassLoaders_AppClassLoader_klass();\n@@ -833,1 +834,1 @@\n-  Handle cs = JavaCalls::construct_new_instance(SystemDictionary::CodeSource_klass(),\n+  Handle cs = JavaCalls::construct_new_instance(vmClasses::CodeSource_klass(),\n@@ -838,1 +839,1 @@\n-  Klass* secureClassLoader_klass = SystemDictionary::SecureClassLoader_klass();\n+  Klass* secureClassLoader_klass = vmClasses::SecureClassLoader_klass();\n@@ -878,1 +879,1 @@\n-        url = JavaCalls::construct_new_instance(SystemDictionary::URL_klass(),\n+        url = JavaCalls::construct_new_instance(vmClasses::URL_klass(),\n@@ -883,1 +884,1 @@\n-          SystemDictionary::jdk_internal_loader_ClassLoaders_klass();\n+          vmClasses::jdk_internal_loader_ClassLoaders_klass();\n@@ -1095,1 +1096,1 @@\n-        SystemDictionary::ProtectionDomain_klass(), size, CHECK);\n+        vmClasses::ProtectionDomain_klass(), size, CHECK);\n@@ -1103,1 +1104,1 @@\n-        SystemDictionary::URL_klass(), size, CHECK);\n+        vmClasses::URL_klass(), size, CHECK);\n@@ -1111,1 +1112,1 @@\n-        SystemDictionary::Jar_Manifest_klass(), size, CHECK);\n+        vmClasses::Jar_Manifest_klass(), size, CHECK);\n@@ -2190,2 +2191,2 @@\n-  for (auto id : EnumRange<VMClassID>{}) {\n-    soc->do_ptr((void**)klass_addr_at(id));\n+  for (auto id : EnumRange<vmClassID>{}) {\n+    soc->do_ptr((void**)vmClasses::klass_addr_at(id));\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -30,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -72,2 +74,2 @@\n-      this_class == SystemDictionary::Cloneable_klass() ||\n-      this_class == SystemDictionary::Serializable_klass();\n+      this_class == vmClasses::Cloneable_klass() ||\n+      this_class == vmClasses::Serializable_klass();\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verificationType.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -269,1 +270,1 @@\n-  Klass* refl_magic_klass = SystemDictionary::reflect_MagicAccessorImpl_klass();\n+  Klass* refl_magic_klass = vmClasses::reflect_MagicAccessorImpl_klass();\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-enum class VMClassID : int {\n+enum class vmClassID : int {\n@@ -41,1 +41,1 @@\n-ENUMERATOR_RANGE(VMClassID, VMClassID::FIRST, VMClassID::LAST) \/\/ (inclusive start, inclusive end)\n+ENUMERATOR_RANGE(vmClassID, vmClassID::FIRST, vmClassID::LAST) \/\/ (inclusive start, inclusive end)\n","filename":"src\/hotspot\/share\/classfile\/vmClassID.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ _VM_CLASS_ENUM - internal: should be used only by VMClass*.{hpp,cpp}\n+\/\/ _VM_CLASS_ENUM - internal: should be used only by vmClass*.{hpp,cpp}\n@@ -31,1 +31,1 @@\n-#define VM_CLASS_ID(kname)      VMClassID::_VM_CLASS_ENUM(kname)\n+#define VM_CLASS_ID(kname)      vmClassID::_VM_CLASS_ENUM(kname)\n@@ -40,1 +40,1 @@\n-\/\/ be used to find the VMClassID for this class. The following two\n+\/\/ be used to find the vmClassID for this class. The following two\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-InstanceKlass* vmClasses::_klasses[static_cast<int>(VMClassID::LIMIT)]\n+InstanceKlass* vmClasses::_klasses[static_cast<int>(vmClassID::LIMIT)]\n@@ -47,1 +47,1 @@\n-  for (auto id : EnumRange<VMClassID>{}) {\n+  for (auto id : EnumRange<vmClassID>{}) {\n@@ -82,1 +82,1 @@\n-bool vmClasses::resolve(VMClassID id, TRAPS) {\n+bool vmClasses::resolve(vmClassID id, TRAPS) {\n@@ -105,1 +105,1 @@\n-void vmClasses::resolve_until(VMClassID limit_id, VMClassID &start_id, TRAPS) {\n+void vmClasses::resolve_until(vmClassID limit_id, vmClassID &start_id, TRAPS) {\n@@ -107,1 +107,1 @@\n-  for (auto id : EnumRange<VMClassID>{start_id, limit_id}) { \/\/ (inclusive start, exclusive end)\n+  for (auto id : EnumRange<vmClassID>{start_id, limit_id}) { \/\/ (inclusive start, exclusive end)\n@@ -123,1 +123,1 @@\n-  VMClassID scan = VMClassID::FIRST;\n+  vmClassID scan = vmClassID::FIRST;\n@@ -138,1 +138,1 @@\n-    \/\/ SystemDictionary::Object_klass(), so we can do this only after\n+    \/\/ vmClasses::Object_klass(), so we can do this only after\n@@ -188,2 +188,2 @@\n-  VMClassID jsr292_group_start = VM_CLASS_ID(MethodHandle_klass);\n-  VMClassID jsr292_group_end   = VM_CLASS_ID(VolatileCallSite_klass);\n+  vmClassID jsr292_group_start = VM_CLASS_ID(MethodHandle_klass);\n+  vmClassID jsr292_group_end   = VM_CLASS_ID(VolatileCallSite_klass);\n@@ -192,1 +192,1 @@\n-  resolve_until(VMClassID::LIMIT, scan, CHECK);\n+  resolve_until(vmClassID::LIMIT, scan, CHECK);\n@@ -209,1 +209,1 @@\n-    for (auto id : EnumRange<VMClassID>{}) {\n+    for (auto id : EnumRange<vmClassID>{}) {\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-  static VMClassID check_id(VMClassID id) {\n-    assert((int)id >= (int)VMClassID::FIRST && (int)id < (int)VMClassID::LIMIT, \"oob\");\n+  static vmClassID check_id(vmClassID id) {\n+    assert((int)id >= (int)vmClassID::FIRST && (int)id < (int)vmClassID::LIMIT, \"oob\");\n@@ -45,1 +45,1 @@\n-  static int as_int(VMClassID id) {\n+  static int as_int(vmClassID id) {\n@@ -49,2 +49,2 @@\n-  static VMClassID as_id(int i) {\n-    VMClassID id = static_cast<VMClassID>(i);\n+  static vmClassID as_id(int i) {\n+    vmClassID id = static_cast<vmClassID>(i);\n@@ -60,3 +60,3 @@\n-  static bool resolve(VMClassID id, TRAPS);\n-  static void resolve_until(VMClassID limit_id, VMClassID &start_id, TRAPS);\n-  static void resolve_through(VMClassID last_id, VMClassID &start_id, TRAPS) {\n+  static bool resolve(vmClassID id, TRAPS);\n+  static void resolve_until(vmClassID limit_id, vmClassID &start_id, TRAPS);\n+  static void resolve_through(vmClassID last_id, vmClassID &start_id, TRAPS) {\n@@ -90,1 +90,1 @@\n-  static InstanceKlass* klass_at(VMClassID id) {\n+  static InstanceKlass* klass_at(vmClassID id) {\n@@ -94,1 +94,1 @@\n-  static InstanceKlass** klass_addr_at(VMClassID id) {\n+  static InstanceKlass** klass_addr_at(vmClassID id) {\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1814,1 +1815,1 @@\n-  assert(call_site->is_a(SystemDictionary::CallSite_klass()),     \"sanity\");\n+  assert(call_site->is_a(vmClasses::CallSite_klass()),     \"sanity\");\n@@ -2037,2 +2038,2 @@\n-  assert(_call_site()->is_a(SystemDictionary::CallSite_klass()), \"must be\");\n-  assert(_method_handle.is_null() || _method_handle()->is_a(SystemDictionary::MethodHandle_klass()), \"must be\");\n+  assert(_call_site()->is_a(vmClasses::CallSite_klass()), \"must be\");\n+  assert(_method_handle.is_null() || _method_handle()->is_a(vmClasses::MethodHandle_klass()), \"must be\");\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -798,1 +798,1 @@\n-                       SystemDictionary::Thread_klass(),\n+                       vmClasses::Thread_klass(),\n@@ -1275,1 +1275,1 @@\n-              (vfst.method()->method_holder()->is_subclass_of(SystemDictionary::ClassLoader_klass()) &&\n+              (vfst.method()->method_holder()->is_subclass_of(vmClasses::ClassLoader_klass()) &&\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -81,1 +81,1 @@\n-                          ? SystemDictionary::String_klass()\n+                          ? vmClasses::String_klass()\n@@ -89,1 +89,1 @@\n-  assert(SystemDictionary::String_klass()->is_final(), \"precondition\");\n+  assert(vmClasses::String_klass()->is_final(), \"precondition\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -458,1 +458,1 @@\n-    ObjAllocator allocator(SystemDictionary::Object_klass(), words);\n+    ObjAllocator allocator(vmClasses::Object_klass(), words);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -608,1 +608,1 @@\n-    obj->set_klass(SystemDictionary::Object_klass());\n+    obj->set_klass(vmClasses::Object_klass());\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -186,1 +188,1 @@\n-    objArrayOop args_oop = oopFactory::new_objArray(SystemDictionary::Object_klass(), _argc, CHECK);\n+    objArrayOop args_oop = oopFactory::new_objArray(vmClasses::Object_klass(), _argc, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1451,1 +1451,1 @@\n-      SystemDictionary::reflect_NativeConstructorAccessorImpl_klass()) {\n+      vmClasses::reflect_NativeConstructorAccessorImpl_klass()) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -321,1 +321,1 @@\n-        assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())),\n+        assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())),\n@@ -368,1 +368,1 @@\n-                                 SystemDictionary::StackOverflowError_klass(),\n+                                 vmClasses::StackOverflowError_klass(),\n@@ -377,1 +377,1 @@\n-                                 SystemDictionary::StackOverflowError_klass(),\n+                                 vmClasses::StackOverflowError_klass(),\n@@ -496,1 +496,1 @@\n-    assert(h_exception->is_a(SystemDictionary::Throwable_klass()),\n+    assert(h_exception->is_a(vmClasses::Throwable_klass()),\n@@ -777,1 +777,1 @@\n-  if (!exception->is_a(SystemDictionary::ThreadDeath_klass())) {\n+  if (!exception->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -779,1 +779,1 @@\n-                       SystemDictionary::IllegalMonitorStateException_klass(),\n+                       vmClasses::IllegalMonitorStateException_klass(),\n@@ -845,1 +845,1 @@\n-    if (resolved_method->method_holder() == SystemDictionary::Object_klass()) {\n+    if (resolved_method->method_holder() == vmClasses::Object_klass()) {\n@@ -1119,1 +1119,1 @@\n-    assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n+    assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -99,1 +100,1 @@\n-  set_handle(SystemDictionary::MethodHandle_klass(), resolved_method, resolved_appendix, CHECK);\n+  set_handle(vmClasses::MethodHandle_klass(), resolved_method, resolved_appendix, CHECK);\n@@ -162,1 +163,1 @@\n-    Klass* object_klass = SystemDictionary::Object_klass();\n+    Klass* object_klass = vmClasses::Object_klass();\n@@ -353,1 +354,1 @@\n-      result->method_holder() == SystemDictionary::Object_klass()) {\n+      result->method_holder() == vmClasses::Object_klass()) {\n@@ -457,2 +458,2 @@\n-  if ((klass == SystemDictionary::MethodHandle_klass() ||\n-       klass == SystemDictionary::VarHandle_klass()) &&\n+  if ((klass == vmClasses::MethodHandle_klass() ||\n+       klass == vmClasses::VarHandle_klass()) &&\n@@ -491,1 +492,1 @@\n-        Klass* natives = SystemDictionary::MethodHandleNatives_klass();\n+        Klass* natives = vmClasses::MethodHandleNatives_klass();\n@@ -577,1 +578,1 @@\n-      sel_klass == SystemDictionary::Object_klass() &&\n+      sel_klass == vmClasses::Object_klass() &&\n@@ -635,1 +636,1 @@\n-    Klass* resolved_klass = SystemDictionary::MethodHandle_klass();\n+    Klass* resolved_klass = vmClasses::MethodHandle_klass();\n@@ -647,1 +648,1 @@\n-      || (resolved_klass == SystemDictionary::MethodHandle_klass() &&\n+      || (resolved_klass == vmClasses::MethodHandle_klass() &&\n@@ -1187,1 +1188,1 @@\n-                        SystemDictionary::reflect_MagicAccessorImpl_klass());\n+                        vmClasses::reflect_MagicAccessorImpl_klass());\n@@ -1541,1 +1542,1 @@\n-           (resolved_method()->is_final() && resolved_method->method_holder() == SystemDictionary::Object_klass()),\n+           (resolved_method()->is_final() && resolved_method->method_holder() == vmClasses::Object_klass()),\n@@ -1727,2 +1728,2 @@\n-  assert(resolved_klass == SystemDictionary::MethodHandle_klass() ||\n-         resolved_klass == SystemDictionary::VarHandle_klass(), \"\");\n+  assert(resolved_klass == vmClasses::MethodHandle_klass() ||\n+         resolved_klass == vmClasses::VarHandle_klass(), \"\");\n@@ -1788,1 +1789,1 @@\n-    if (!PENDING_EXCEPTION->is_a(SystemDictionary::LinkageError_klass())) {\n+    if (!PENDING_EXCEPTION->is_a(vmClasses::LinkageError_klass())) {\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -222,1 +223,1 @@\n-            MethodHandles::is_signature_polymorphic_name(SystemDictionary::MethodHandle_klass(),\n+            MethodHandles::is_signature_polymorphic_name(vmClasses::MethodHandle_klass(),\n@@ -228,1 +229,1 @@\n-                   MethodHandles::is_signature_polymorphic_name(SystemDictionary::VarHandle_klass(),\n+                   MethodHandles::is_signature_polymorphic_name(vmClasses::VarHandle_klass(),\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -569,1 +569,1 @@\n-  if (ex->is_a(SystemDictionary::OutOfMemoryError_klass())) {\n+  if (ex->is_a(vmClasses::OutOfMemoryError_klass())) {\n@@ -573,1 +573,1 @@\n-  if (ex->is_a(SystemDictionary::StackOverflowError_klass())) {\n+  if (ex->is_a(vmClasses::StackOverflowError_klass())) {\n@@ -577,1 +577,1 @@\n-  if (ex->is_a(SystemDictionary::Error_klass())) {\n+  if (ex->is_a(vmClasses::Error_klass())) {\n@@ -581,1 +581,1 @@\n-  if (ex->is_a(SystemDictionary::RuntimeException_klass())) {\n+  if (ex->is_a(vmClasses::RuntimeException_klass())) {\n@@ -585,1 +585,1 @@\n-  if (ex->is_a(SystemDictionary::Exception_klass())) {\n+  if (ex->is_a(vmClasses::Exception_klass())) {\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -129,1 +129,1 @@\n-  if (_object->is_a(SystemDictionary::Class_klass())) {\n+  if (_object->is_a(vmClasses::Class_klass())) {\n@@ -134,1 +134,1 @@\n-  if (_object->is_a(SystemDictionary::Thread_klass())) {\n+  if (_object->is_a(vmClasses::Thread_klass())) {\n@@ -139,1 +139,1 @@\n-  if (_object->is_a(SystemDictionary::ThreadGroup_klass())) {\n+  if (_object->is_a(vmClasses::ThreadGroup_klass())) {\n@@ -151,1 +151,1 @@\n-  assert(_object->is_a(SystemDictionary::Class_klass()), \"invariant\");\n+  assert(_object->is_a(vmClasses::Class_klass()), \"invariant\");\n@@ -179,1 +179,1 @@\n-  assert(_object->is_a(SystemDictionary::ThreadGroup_klass()), \"invariant\");\n+  assert(_object->is_a(vmClasses::ThreadGroup_klass()), \"invariant\");\n@@ -188,1 +188,1 @@\n-  assert(_object->is_a(SystemDictionary::Thread_klass()), \"invariant\");\n+  assert(_object->is_a(vmClasses::Thread_klass()), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleDescription.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -217,1 +218,1 @@\n-  return klass->is_subclass_of(SystemDictionary::ClassLoader_klass()) || klass == SystemDictionary::Object_klass();\n+  return klass->is_subclass_of(vmClasses::ClassLoader_klass()) || klass == vmClasses::Object_klass();\n@@ -273,1 +274,1 @@\n-  mark_stack.push(SystemDictionary::ClassLoader_klass()->subklass());\n+  mark_stack.push(vmClasses::ClassLoader_klass()->subklass());\n@@ -298,2 +299,2 @@\n-  SET_TRANSIENT(SystemDictionary::Object_klass());\n-  do_klass(SystemDictionary::Object_klass());\n+  SET_TRANSIENT(vmClasses::Object_klass());\n+  do_klass(vmClasses::Object_klass());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -111,1 +112,1 @@\n-  remove_thread_args.set_klass(SystemDictionary::ThreadGroup_klass());\n+  remove_thread_args.set_klass(vmClasses::ThreadGroup_klass());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/compilerRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -81,1 +82,1 @@\n-  Array<Method*>* objectMethods = SystemDictionary::Object_klass()->methods();\n+  Array<Method*>* objectMethods = vmClasses::Object_klass()->methods();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -356,1 +358,1 @@\n-  if (executable->klass() == SystemDictionary::reflect_Constructor_klass()) {\n+  if (executable->klass() == vmClasses::reflect_Constructor_klass()) {\n@@ -360,1 +362,1 @@\n-    assert(executable->klass() == SystemDictionary::reflect_Method_klass(), \"wrong type\");\n+    assert(executable->klass() == vmClasses::reflect_Method_klass(), \"wrong type\");\n@@ -377,1 +379,1 @@\n-    if (obj->is_a(SystemDictionary::ResolvedMethodName_klass())) {\n+    if (obj->is_a(vmClasses::ResolvedMethodName_klass())) {\n@@ -435,1 +437,1 @@\n-        if (base_oop->is_a(SystemDictionary::Class_klass())) {\n+        if (base_oop->is_a(vmClasses::Class_klass())) {\n@@ -756,1 +758,1 @@\n-      resolved == SystemDictionary::Object_klass() &&\n+      resolved == vmClasses::Object_klass() &&\n@@ -1820,1 +1822,1 @@\n-  if (lambda_form->is_a(SystemDictionary::LambdaForm_klass())) {\n+  if (lambda_form->is_a(vmClasses::LambdaForm_klass())) {\n@@ -1823,1 +1825,1 @@\n-    JavaCalls::call_special(&result, lambda_form, SystemDictionary::LambdaForm_klass(), compileToBytecode, vmSymbols::void_method_signature(), CHECK);\n+    JavaCalls::call_special(&result, lambda_form, vmClasses::LambdaForm_klass(), compileToBytecode, vmSymbols::void_method_signature(), CHECK);\n@@ -1877,1 +1879,1 @@\n-    box_klass = SystemDictionary::name##_klass(); \\\n+    box_klass = vmClasses::name##_klass(); \\\n@@ -2662,1 +2664,1 @@\n-                       SystemDictionary::System_klass(),\n+                       vmClasses::System_klass(),\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -388,1 +390,1 @@\n-      if (iklass->is_subclass_of(SystemDictionary::Throwable_klass()) && iklass->is_public() && !iklass->is_abstract()) {\n+      if (iklass->is_subclass_of(vmClasses::Throwable_klass()) && iklass->is_public() && !iklass->is_abstract()) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -263,1 +265,1 @@\n-  assert(exception->is_a(SystemDictionary::Throwable_klass()),\n+  assert(exception->is_a(vmClasses::Throwable_klass()),\n@@ -1074,1 +1076,1 @@\n-    if (exception->is_a(SystemDictionary::ThreadDeath_klass())) {\n+    if (exception->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -1379,1 +1381,1 @@\n-      || ((holder == SystemDictionary::MethodHandle_klass() || holder == SystemDictionary::VarHandle_klass()) &&\n+      || ((holder == vmClasses::MethodHandle_klass() || holder == vmClasses::VarHandle_klass()) &&\n@@ -1424,1 +1426,1 @@\n-    return SystemDictionary::Object_klass();\n+    return vmClasses::Object_klass();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -325,1 +326,1 @@\n-  if (exception->is_a(SystemDictionary::OutOfMemoryError_klass())) {\n+  if (exception->is_a(vmClasses::OutOfMemoryError_klass())) {\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -377,1 +377,1 @@\n-  KlassInfoEntry* jlo_cie = cit.lookup(SystemDictionary::Object_klass());\n+  KlassInfoEntry* jlo_cie = cit.lookup(vmClasses::Object_klass());\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -507,1 +508,1 @@\n-    \/\/ SystemDictionary::xxx_klass() are not updated, need to check\n+    \/\/ vmClasses::xxx_klass() are not updated, need to check\n@@ -509,2 +510,2 @@\n-    if (orig_k == SystemDictionary::String_klass() ||\n-        orig_k == SystemDictionary::Object_klass()) {\n+    if (orig_k == vmClasses::String_klass() ||\n+        orig_k == vmClasses::Object_klass()) {\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -282,1 +283,1 @@\n-  Klass* ok = SystemDictionary::Object_klass();\n+  Klass* ok = vmClasses::Object_klass();\n@@ -344,1 +345,1 @@\n-             SystemDictionary::Cloneable_klass(), \"u3\");\n+             vmClasses::Cloneable_klass(), \"u3\");\n@@ -346,1 +347,1 @@\n-             SystemDictionary::Serializable_klass(), \"u3\");\n+             vmClasses::Serializable_klass(), \"u3\");\n@@ -351,2 +352,2 @@\n-      _the_array_interfaces_array->at_put(0, SystemDictionary::Cloneable_klass());\n-      _the_array_interfaces_array->at_put(1, SystemDictionary::Serializable_klass());\n+      _the_array_interfaces_array->at_put(0, vmClasses::Cloneable_klass());\n+      _the_array_interfaces_array->at_put(1, vmClasses::Serializable_klass());\n@@ -386,1 +387,1 @@\n-    cast(SystemDictionary::Object_klass())->array_klass(1, CHECK);\n+    cast(vmClasses::Object_klass())->array_klass(1, CHECK);\n@@ -407,1 +408,1 @@\n-    objArrayOop    naked_array = oopFactory::new_objArray(SystemDictionary::Object_klass(), size, CHECK);\n+    objArrayOop    naked_array = oopFactory::new_objArray(vmClasses::Object_klass(), size, CHECK);\n@@ -412,1 +413,1 @@\n-      oop dummy = SystemDictionary::Object_klass()->allocate_instance(CHECK);\n+      oop dummy = vmClasses::Object_klass()->allocate_instance(CHECK);\n@@ -462,1 +463,1 @@\n-  assert(SystemDictionary::Class_klass_loaded(), \"java.lang.Class should be loaded\");\n+  assert(vmClasses::Class_klass_loaded(), \"java.lang.Class should be loaded\");\n@@ -530,1 +531,1 @@\n-  Klass* ok = SystemDictionary::Object_klass();\n+  Klass* ok = vmClasses::Object_klass();\n@@ -615,1 +616,1 @@\n-      SystemDictionary::Throwable_klass()->is_initialized()) {\n+      vmClasses::Throwable_klass()->is_initialized()) {\n@@ -647,1 +648,1 @@\n-  InstanceKlass* ik = SystemDictionary::OutOfMemoryError_klass();\n+  InstanceKlass* ik = vmClasses::OutOfMemoryError_klass();\n@@ -901,1 +902,1 @@\n-                          SystemDictionary::Finalizer_klass(),\n+                          vmClasses::Finalizer_klass(),\n@@ -906,1 +907,1 @@\n-                          SystemDictionary::internal_Unsafe_klass(),\n+                          vmClasses::internal_Unsafe_klass(),\n@@ -911,1 +912,1 @@\n-                          SystemDictionary::internal_Unsafe_klass(),\n+                          vmClasses::internal_Unsafe_klass(),\n@@ -917,1 +918,1 @@\n-                          SystemDictionary::ClassLoader_klass(),\n+                          vmClasses::ClassLoader_klass(),\n@@ -923,1 +924,1 @@\n-                          SystemDictionary::AbstractStackWalker_klass(),\n+                          vmClasses::AbstractStackWalker_klass(),\n@@ -951,1 +952,1 @@\n-  objArrayOop the_empty_class_array = oopFactory::new_objArray(SystemDictionary::Class_klass(), 0, CHECK_false);\n+  objArrayOop the_empty_class_array = oopFactory::new_objArray(vmClasses::Class_klass(), 0, CHECK_false);\n@@ -977,1 +978,1 @@\n-  k = SystemDictionary::VirtualMachineError_klass();\n+  k = vmClasses::VirtualMachineError_klass();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -58,1 +58,1 @@\n-  return SystemDictionary::Object_klass();\n+  return vmClasses::Object_klass();\n@@ -95,1 +95,1 @@\n-    set_super(Universe::is_bootstrapping() ? NULL : SystemDictionary::Object_klass());\n+    set_super(Universe::is_bootstrapping() ? NULL : vmClasses::Object_klass());\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  virtual InstanceKlass* java_super() const;\/\/{ return SystemDictionary::Object_klass(); }\n+  virtual InstanceKlass* java_super() const;\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -199,1 +200,1 @@\n-    objArrayOop stom = oopFactory::new_objArray(SystemDictionary::Object_klass(), map_length, CHECK);\n+    objArrayOop stom = oopFactory::new_objArray(vmClasses::Object_klass(), map_length, CHECK);\n@@ -367,1 +368,1 @@\n-  if (SystemDictionary::Object_klass_loaded()) {\n+  if (vmClasses::Object_klass_loaded()) {\n@@ -384,1 +385,1 @@\n-        objArrayOop stom = oopFactory::new_objArray(SystemDictionary::Object_klass(), map_length, CHECK);\n+        objArrayOop stom = oopFactory::new_objArray(vmClasses::Object_klass(), map_length, CHECK);\n@@ -824,1 +825,1 @@\n-    is_a(SystemDictionary::LinkageError_klass())) {\n+    is_a(vmClasses::LinkageError_klass())) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -205,1 +207,1 @@\n-        assert(holder->is_interface() || holder == SystemDictionary::Object_klass(), \"unexpected holder class\");\n+        assert(holder->is_interface() || holder == vmClasses::Object_klass(), \"unexpected holder class\");\n@@ -307,1 +309,1 @@\n-                (method->is_final() && method->method_holder() == SystemDictionary::Object_klass())))),\n+                (method->is_final() && method->method_holder() == vmClasses::Object_klass())))),\n@@ -478,1 +480,1 @@\n-  assert(PENDING_EXCEPTION->is_a(SystemDictionary::LinkageError_klass()),\n+  assert(PENDING_EXCEPTION->is_a(vmClasses::LinkageError_klass()),\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -152,1 +153,1 @@\n-  if (SystemDictionary::ClassLoader_klass_loaded()) {\n+  if (vmClasses::ClassLoader_klass_loaded()) {\n@@ -155,1 +156,1 @@\n-      if (super_klass->is_subtype_of(SystemDictionary::ClassLoader_klass())) {\n+      if (super_klass->is_subtype_of(vmClasses::ClassLoader_klass())) {\n@@ -189,1 +190,1 @@\n-      assert(!HAS_PENDING_EXCEPTION || PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass()),\n+      assert(!HAS_PENDING_EXCEPTION || PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass()),\n@@ -207,1 +208,1 @@\n-        assert(!HAS_PENDING_EXCEPTION || PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass()),\n+        assert(!HAS_PENDING_EXCEPTION || PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass()),\n@@ -302,1 +303,1 @@\n-      if (PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass())) {\n+      if (PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass())) {\n@@ -341,1 +342,1 @@\n-            if (PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass())) {\n+            if (PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass())) {\n@@ -735,1 +736,1 @@\n-         java_super() == SystemDictionary::Record_klass();\n+         java_super() == vmClasses::Record_klass();\n@@ -1197,1 +1198,1 @@\n-    if (e->is_a(SystemDictionary::Error_klass())) {\n+    if (e->is_a(vmClasses::Error_klass())) {\n@@ -1427,1 +1428,1 @@\n-  if (this == SystemDictionary::Class_klass()) {\n+  if (this == vmClasses::Class_klass()) {\n@@ -3525,1 +3526,1 @@\n-  if (this == SystemDictionary::String_klass()) {\n+  if (this == vmClasses::String_klass()) {\n@@ -3542,1 +3543,1 @@\n-  if (this == SystemDictionary::Class_klass()) {\n+  if (this == vmClasses::Class_klass()) {\n@@ -3560,1 +3561,1 @@\n-  } else if (this == SystemDictionary::MethodType_klass()) {\n+  } else if (this == vmClasses::MethodType_klass()) {\n@@ -3579,1 +3580,1 @@\n-  if (this == SystemDictionary::String_klass()\n+  if (this == vmClasses::String_klass()\n@@ -3588,1 +3589,1 @@\n-  } else if (this == SystemDictionary::Class_klass()) {\n+  } else if (this == vmClasses::Class_klass()) {\n@@ -3597,1 +3598,1 @@\n-  } else if (this == SystemDictionary::MethodType_klass()) {\n+  } else if (this == vmClasses::MethodType_klass()) {\n@@ -3603,1 +3604,1 @@\n-  } else if (this == SystemDictionary::LambdaForm_klass()) {\n+  } else if (this == vmClasses::LambdaForm_klass()) {\n@@ -3609,1 +3610,1 @@\n-  } else if (this == SystemDictionary::MemberName_klass()) {\n+  } else if (this == vmClasses::MemberName_klass()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -79,1 +79,1 @@\n-    _offset_of_static_fields = InstanceMirrorKlass::cast(SystemDictionary::Class_klass())->size_helper() << LogHeapWordSize;\n+    _offset_of_static_fields = InstanceMirrorKlass::cast(vmClasses::Class_klass())->size_helper() << LogHeapWordSize;\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -39,1 +39,1 @@\n-  assert(k == SystemDictionary::Reference_klass() && first_time,\n+  assert(k == vmClasses::Reference_klass() && first_time,\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -73,1 +74,1 @@\n-         is_subtype_of(SystemDictionary::Cloneable_klass());\n+         is_subtype_of(vmClasses::Cloneable_klass());\n@@ -248,2 +249,2 @@\n-  } else if (k != super() || k == SystemDictionary::Object_klass()) {\n-    assert(super() == NULL || super() == SystemDictionary::Object_klass(),\n+  } else if (k != super() || k == vmClasses::Object_klass()) {\n+    assert(super() == NULL || super() == vmClasses::Object_klass(),\n@@ -477,1 +478,1 @@\n-  Klass* root = SystemDictionary::Object_klass();\n+  Klass* root = vmClasses::Object_klass();\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -843,1 +844,1 @@\n-    objArrayOop m_oop = oopFactory::new_objArray(SystemDictionary::Class_klass(), length, CHECK_(objArrayHandle()));\n+    objArrayOop m_oop = oopFactory::new_objArray(vmClasses::Class_klass(), length, CHECK_(objArrayHandle()));\n@@ -849,1 +850,1 @@\n-          !k->is_subclass_of(SystemDictionary::Throwable_klass())) {\n+          !k->is_subclass_of(vmClasses::Throwable_klass())) {\n@@ -1394,1 +1395,1 @@\n-  if (method_holder()->is_subclass_of(SystemDictionary::reflect_MethodAccessorImpl_klass())) {\n+  if (method_holder()->is_subclass_of(vmClasses::reflect_MethodAccessorImpl_klass())) {\n@@ -1439,1 +1440,1 @@\n-  InstanceKlass* holder = SystemDictionary::MethodHandle_klass();\n+  InstanceKlass* holder = vmClasses::MethodHandle_klass();\n@@ -1727,2 +1728,2 @@\n-        if (PENDING_EXCEPTION->is_a(SystemDictionary::ClassNotFoundException_klass()) ||\n-            PENDING_EXCEPTION->is_a(SystemDictionary::LinkageError_klass())) {\n+        if (PENDING_EXCEPTION->is_a(vmClasses::ClassNotFoundException_klass()) ||\n+            PENDING_EXCEPTION->is_a(vmClasses::LinkageError_klass())) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -44,0 +43,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -62,1 +62,1 @@\n-  if (!Universe::is_bootstrapping() || SystemDictionary::Object_klass_loaded()) {\n+  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_loaded()) {\n@@ -95,1 +95,1 @@\n-      super_klass = SystemDictionary::Object_klass();\n+      super_klass = vmClasses::Object_klass();\n@@ -377,2 +377,2 @@\n-    secondaries->push(SystemDictionary::Cloneable_klass());\n-    secondaries->push(SystemDictionary::Serializable_klass());\n+    secondaries->push(vmClasses::Cloneable_klass());\n+    secondaries->push(vmClasses::Serializable_klass());\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -29,0 +29,1 @@\n+#include \"oops\/instanceKlass.hpp\"\n@@ -103,1 +104,1 @@\n-  return k->super() == SystemDictionary::reflect_MethodAccessorImpl_klass() &&\n+  return k->super() == vmClasses::reflect_MethodAccessorImpl_klass() &&\n@@ -109,1 +110,1 @@\n-  return k->super() == SystemDictionary::reflect_ConstructorAccessorImpl_klass() &&\n+  return k->super() == vmClasses::reflect_ConstructorAccessorImpl_klass() &&\n@@ -117,1 +118,1 @@\n-  if (sk != NULL && sk->super() == SystemDictionary::reflect_ConstructorAccessorImpl_klass() &&\n+  if (sk != NULL && sk->super() == vmClasses::reflect_ConstructorAccessorImpl_klass() &&\n","filename":"src\/hotspot\/share\/oops\/reflectionAccessorImplKlassHelper.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -413,1 +413,1 @@\n-    if (SystemDictionary::reflect_CallerSensitive_klass() == NULL) return false;\n+    if (vmClasses::reflect_CallerSensitive_klass() == NULL) return false;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1263,1 +1263,1 @@\n-  if (!(exception->is_a(SystemDictionary::Throwable_klass()))) {\n+  if (!(exception->is_a(vmClasses::Throwable_klass()))) {\n@@ -1423,1 +1423,1 @@\n-  if (!(exception->is_a(SystemDictionary::Throwable_klass()))) {\n+  if (!(exception->is_a(vmClasses::Throwable_klass()))) {\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -368,1 +369,1 @@\n-  if (reflected->klass() == SystemDictionary::reflect_Constructor_klass()) {\n+  if (reflected->klass() == vmClasses::reflect_Constructor_klass()) {\n@@ -372,1 +373,1 @@\n-    assert(reflected->klass() == SystemDictionary::reflect_Method_klass(), \"wrong type\");\n+    assert(reflected->klass() == vmClasses::reflect_Method_klass(), \"wrong type\");\n@@ -470,1 +471,1 @@\n-                                 ? SystemDictionary::Object_klass()\n+                                 ? vmClasses::Object_klass()\n@@ -567,1 +568,1 @@\n-    if (ex->is_a(SystemDictionary::ThreadDeath_klass())) {\n+    if (ex->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -576,1 +577,1 @@\n-      if (ex->is_a(SystemDictionary::Throwable_klass())) {\n+      if (ex->is_a(vmClasses::Throwable_klass())) {\n@@ -580,1 +581,1 @@\n-                                SystemDictionary::Throwable_klass(),\n+                                vmClasses::Throwable_klass(),\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -516,1 +516,1 @@\n-  if (mirror->klass() != SystemDictionary::Class_klass()) {\n+  if (mirror->klass() != vmClasses::Class_klass()) {\n@@ -533,1 +533,1 @@\n-      !klass->is_subclass_of(SystemDictionary::Throwable_klass())) {\n+      !klass->is_subclass_of(vmClasses::Throwable_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -161,1 +162,1 @@\n-      if (!vfst.method()->method_holder()->is_subclass_of(SystemDictionary::ClassLoader_klass())&&\n+      if (!vfst.method()->method_holder()->is_subclass_of(vmClasses::ClassLoader_klass())&&\n@@ -315,1 +316,1 @@\n-                          SystemDictionary::Properties_klass(),\n+                          vmClasses::Properties_klass(),\n@@ -341,1 +342,1 @@\n-  InstanceKlass* ik = SystemDictionary::String_klass();\n+  InstanceKlass* ik = vmClasses::String_klass();\n@@ -647,1 +648,1 @@\n-    bool cloneable = klass->is_subtype_of(SystemDictionary::Cloneable_klass());\n+    bool cloneable = klass->is_subtype_of(vmClasses::Cloneable_klass());\n@@ -1146,1 +1147,1 @@\n-    objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(), 0, CHECK_NULL);\n+    objArrayOop r = oopFactory::new_objArray(vmClasses::Class_klass(), 0, CHECK_NULL);\n@@ -1161,1 +1162,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(), size, CHECK_NULL);\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::Class_klass(), size, CHECK_NULL);\n@@ -1172,2 +1173,2 @@\n-    result->obj_at_put(0, SystemDictionary::Cloneable_klass()->java_mirror());\n-    result->obj_at_put(1, SystemDictionary::Serializable_klass()->java_mirror());\n+    result->obj_at_put(0, vmClasses::Cloneable_klass()->java_mirror());\n+    result->obj_at_put(1, vmClasses::Serializable_klass()->java_mirror());\n@@ -1287,1 +1288,1 @@\n-    if (method->method_holder() == SystemDictionary::AccessController_klass() &&\n+    if (method->method_holder() == vmClasses::AccessController_klass() &&\n@@ -1327,1 +1328,1 @@\n-  objArrayOop context = oopFactory::new_objArray(SystemDictionary::ProtectionDomain_klass(),\n+  objArrayOop context = oopFactory::new_objArray(vmClasses::ProtectionDomain_klass(),\n@@ -1375,1 +1376,1 @@\n-    oop result = oopFactory::new_objArray(SystemDictionary::Class_klass(), 0, CHECK_NULL);\n+    oop result = oopFactory::new_objArray(vmClasses::Class_klass(), 0, CHECK_NULL);\n@@ -1384,1 +1385,1 @@\n-    oop result = oopFactory::new_objArray(SystemDictionary::Class_klass(), 0, CHECK_NULL);\n+    oop result = oopFactory::new_objArray(vmClasses::Class_klass(), 0, CHECK_NULL);\n@@ -1393,1 +1394,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(), length\/4, CHECK_NULL);\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::Class_klass(), length\/4, CHECK_NULL);\n@@ -1423,1 +1424,1 @@\n-    objArrayOop res = oopFactory::new_objArray(SystemDictionary::Class_klass(), members, CHECK_NULL);\n+    objArrayOop res = oopFactory::new_objArray(vmClasses::Class_klass(), members, CHECK_NULL);\n@@ -1549,1 +1550,1 @@\n-  if (reflected->klass() == SystemDictionary::reflect_Constructor_klass()) {\n+  if (reflected->klass() == vmClasses::reflect_Constructor_klass()) {\n@@ -1553,1 +1554,1 @@\n-    assert(reflected->klass() == SystemDictionary::reflect_Method_klass(),\n+    assert(reflected->klass() == vmClasses::reflect_Method_klass(),\n@@ -1651,1 +1652,1 @@\n-    objArrayOop result_oop = oopFactory::new_objArray(SystemDictionary::reflect_Parameter_klass(), num_params, CHECK_NULL);\n+    objArrayOop result_oop = oopFactory::new_objArray(vmClasses::reflect_Parameter_klass(), num_params, CHECK_NULL);\n@@ -1680,1 +1681,1 @@\n-    oop res = oopFactory::new_objArray(SystemDictionary::reflect_Field_klass(), 0, CHECK_NULL);\n+    oop res = oopFactory::new_objArray(vmClasses::reflect_Field_klass(), 0, CHECK_NULL);\n@@ -1702,1 +1703,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::reflect_Field_klass(), num_fields, CHECK_NULL);\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::reflect_Field_klass(), num_fields, CHECK_NULL);\n@@ -1752,1 +1753,1 @@\n-      oopFactory::new_objArray(SystemDictionary::RecordComponent_klass(), length, CHECK_NULL);\n+      oopFactory::new_objArray(vmClasses::RecordComponent_klass(), length, CHECK_NULL);\n@@ -1850,1 +1851,1 @@\n-                                           SystemDictionary::reflect_Method_klass(), THREAD);\n+                                           vmClasses::reflect_Method_klass(), THREAD);\n@@ -1858,1 +1859,1 @@\n-                                           SystemDictionary::reflect_Constructor_klass(), THREAD);\n+                                           vmClasses::reflect_Constructor_klass(), THREAD);\n@@ -1918,1 +1919,1 @@\n-    objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(),\n+    objArrayOop r = oopFactory::new_objArray(vmClasses::Class_klass(),\n@@ -1928,1 +1929,1 @@\n-          if (PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass())) {\n+          if (PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass())) {\n@@ -1962,1 +1963,1 @@\n-        objArrayOop r2 = oopFactory::new_objArray(SystemDictionary::Class_klass(),\n+        objArrayOop r2 = oopFactory::new_objArray(vmClasses::Class_klass(),\n@@ -1996,1 +1997,1 @@\n-    objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(),\n+    objArrayOop r = oopFactory::new_objArray(vmClasses::Class_klass(),\n@@ -2004,1 +2005,1 @@\n-        if (PENDING_EXCEPTION->is_a(SystemDictionary::VirtualMachineError_klass())) {\n+        if (PENDING_EXCEPTION->is_a(vmClasses::VirtualMachineError_klass())) {\n@@ -2025,1 +2026,1 @@\n-      objArrayOop r2 = oopFactory::new_objArray(SystemDictionary::Class_klass(),\n+      objArrayOop r2 = oopFactory::new_objArray(vmClasses::Class_klass(),\n@@ -2203,1 +2204,1 @@\n-  objArrayOop  dest_o = oopFactory::new_objArray(SystemDictionary::String_klass(), 3, CHECK_NULL);\n+  objArrayOop  dest_o = oopFactory::new_objArray(vmClasses::String_klass(), 3, CHECK_NULL);\n@@ -2252,1 +2253,1 @@\n-  objArrayOop dest_o = oopFactory::new_objArray(SystemDictionary::String_klass(), 2, CHECK_NULL);\n+  objArrayOop dest_o = oopFactory::new_objArray(vmClasses::String_klass(), 2, CHECK_NULL);\n@@ -2851,1 +2852,1 @@\n-                          SystemDictionary::Thread_klass(),\n+                          vmClasses::Thread_klass(),\n@@ -3181,1 +3182,1 @@\n-  if (SystemDictionary::reflect_CallerSensitive_klass() != NULL) {\n+  if (vmClasses::reflect_CallerSensitive_klass() != NULL) {\n@@ -3184,1 +3185,1 @@\n-    if (!(m->method_holder() == SystemDictionary::SecurityManager_klass() &&\n+    if (!(m->method_holder() == vmClasses::SecurityManager_klass() &&\n@@ -3204,1 +3205,1 @@\n-  objArrayOop result = oopFactory::new_objArray(SystemDictionary::Class_klass(), klass_array->length(), CHECK_NULL);\n+  objArrayOop result = oopFactory::new_objArray(vmClasses::Class_klass(), klass_array->length(), CHECK_NULL);\n@@ -3721,1 +3722,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::Thread_klass(), num_threads, CHECK_NULL);\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::Thread_klass(), num_threads, CHECK_NULL);\n@@ -3754,1 +3755,1 @@\n-  if (k != SystemDictionary::Thread_klass()) {\n+  if (k != vmClasses::Thread_klass()) {\n@@ -3814,1 +3815,1 @@\n-  objArrayOop dest_o = oopFactory::new_objArray(SystemDictionary::Object_klass(), 3, CHECK_NULL);\n+  objArrayOop dest_o = oopFactory::new_objArray(vmClasses::Object_klass(), 3, CHECK_NULL);\n@@ -3848,1 +3849,1 @@\n-  InstanceKlass* ik = SystemDictionary::String_klass();\n+  InstanceKlass* ik = vmClasses::String_klass();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":39,"deletions":38,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+# include \"classfile\/vmClasses.hpp\"\n@@ -851,1 +852,1 @@\n-  if (!k_mirror->is_a(SystemDictionary::Class_klass())) {\n+  if (!k_mirror->is_a(vmClasses::Class_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -414,1 +415,1 @@\n-    if (!k_mirror->is_a(SystemDictionary::Class_klass())) {\n+    if (!k_mirror->is_a(vmClasses::Class_klass())) {\n@@ -857,1 +858,1 @@\n-    if (thread_oop == NULL || !thread_oop->is_a(SystemDictionary::Thread_klass())) {\n+    if (thread_oop == NULL || !thread_oop->is_a(vmClasses::Thread_klass())) {\n@@ -1132,1 +1133,1 @@\n-    if (thread_oop == NULL || !thread_oop->is_a(SystemDictionary::Thread_klass())) {\n+    if (thread_oop == NULL || !thread_oop->is_a(vmClasses::Thread_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -433,1 +433,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -460,1 +460,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -490,1 +490,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -525,1 +525,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -559,1 +559,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -589,1 +589,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -789,1 +789,1 @@\n-  if (!thread_oop->is_a(SystemDictionary::Thread_klass())) {\n+  if (!thread_oop->is_a(vmClasses::Thread_klass())) {\n@@ -838,1 +838,1 @@\n-  if (!thread_oop->is_a(SystemDictionary::Thread_klass())) {\n+  if (!thread_oop->is_a(vmClasses::Thread_klass())) {\n@@ -1078,1 +1078,1 @@\n-  if (k == SystemDictionary::Class_klass()) {\n+  if (k == vmClasses::Class_klass()) {\n@@ -2313,1 +2313,1 @@\n-        if (obj->klass() != SystemDictionary::Class_klass()) {\n+        if (obj->klass() != vmClasses::Class_klass()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiGetLoadedClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -4237,1 +4238,1 @@\n-  _has_redefined_Object |= the_class == SystemDictionary::Object_klass();\n+  _has_redefined_Object |= the_class == vmClasses::Object_klass();\n@@ -4393,1 +4394,1 @@\n-  assert(!HAS_PENDING_EXCEPTION || (THREAD->pending_exception()->is_a(SystemDictionary::ThreadDeath_klass())), \"redefine exception\");\n+  assert(!HAS_PENDING_EXCEPTION || (THREAD->pending_exception()->is_a(vmClasses::ThreadDeath_klass())), \"redefine exception\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -239,1 +239,1 @@\n-    assert(SystemDictionary::Class_klass()->is_mirror_instance_klass(), \"Is not?\");\n+    assert(vmClasses::Class_klass()->is_mirror_instance_klass(), \"Is not?\");\n@@ -694,1 +694,1 @@\n-  assert(str->klass() == SystemDictionary::String_klass(), \"not a string\");\n+  assert(str->klass() == vmClasses::String_klass(), \"not a string\");\n@@ -775,1 +775,1 @@\n-  assert(obj->klass() == SystemDictionary::Class_klass(), \"not a class\");\n+  assert(obj->klass() == vmClasses::Class_klass(), \"not a class\");\n@@ -1086,1 +1086,1 @@\n-    if (obj->klass() == SystemDictionary::Class_klass()) {\n+    if (obj->klass() == vmClasses::Class_klass()) {\n@@ -1103,1 +1103,1 @@\n-      obj->klass() == SystemDictionary::String_klass()) {\n+      obj->klass() == vmClasses::String_klass()) {\n@@ -2033,1 +2033,1 @@\n-  assert(str->klass() == SystemDictionary::String_klass(), \"not a string\");\n+  assert(str->klass() == vmClasses::String_klass(), \"not a string\");\n@@ -2555,1 +2555,1 @@\n-    if (java_super != NULL && java_super != SystemDictionary::Object_klass()) {\n+    if (java_super != NULL && java_super != vmClasses::Object_klass()) {\n@@ -2707,1 +2707,1 @@\n-      o->klass() == SystemDictionary::String_klass()) {\n+      o->klass() == vmClasses::String_klass()) {\n@@ -2905,1 +2905,1 @@\n-    if (o->klass() == SystemDictionary::Class_klass()) {\n+    if (o->klass() == vmClasses::Class_klass()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -86,1 +87,1 @@\n-  assert(SystemDictionary::MethodHandle_klass() != NULL, \"should be present\");\n+  assert(vmClasses::MethodHandle_klass() != NULL, \"should be present\");\n@@ -191,1 +192,1 @@\n-  if (target_klass == SystemDictionary::reflect_Field_klass()) {\n+  if (target_klass == vmClasses::reflect_Field_klass()) {\n@@ -207,1 +208,1 @@\n-  } else if (target_klass == SystemDictionary::reflect_Method_klass()) {\n+  } else if (target_klass == vmClasses::reflect_Method_klass()) {\n@@ -218,1 +219,1 @@\n-  } else if (target_klass == SystemDictionary::reflect_Constructor_klass()) {\n+  } else if (target_klass == vmClasses::reflect_Constructor_klass()) {\n@@ -278,1 +279,1 @@\n-        m_klass_non_interface = SystemDictionary::Object_klass();\n+        m_klass_non_interface = vmClasses::Object_klass();\n@@ -389,1 +390,1 @@\n-  \/\/    if (klass != SystemDictionary::MethodHandle_klass())\n+  \/\/    if (klass != vmClasses::MethodHandle_klass())\n@@ -653,1 +654,1 @@\n-  return SystemDictionary::Object_klass()->java_mirror();\n+  return vmClasses::Object_klass()->java_mirror();\n@@ -674,1 +675,1 @@\n-      return SystemDictionary::Class_klass()->java_mirror();\n+      return vmClasses::Class_klass()->java_mirror();\n@@ -676,1 +677,1 @@\n-      return SystemDictionary::String_klass()->java_mirror();\n+      return vmClasses::String_klass()->java_mirror();\n@@ -719,1 +720,1 @@\n-      defc_klass = SystemDictionary::Object_klass();\n+      defc_klass = vmClasses::Object_klass();\n@@ -736,1 +737,1 @@\n-      (defc == SystemDictionary::MethodHandle_klass() || defc == SystemDictionary::VarHandle_klass()) &&\n+      (defc == vmClasses::MethodHandle_klass() || defc == vmClasses::VarHandle_klass()) &&\n@@ -1314,1 +1315,1 @@\n-  objArrayHandle result = oopFactory::new_objArray_handle(SystemDictionary::Object_klass(), 2, CHECK_NULL);\n+  objArrayHandle result = oopFactory::new_objArray_handle(vmClasses::Object_klass(), 2, CHECK_NULL);\n@@ -1573,1 +1574,1 @@\n-  assert(SystemDictionary::MethodHandle_klass() != NULL, \"should be present\");\n+  assert(vmClasses::MethodHandle_klass() != NULL, \"should be present\");\n@@ -1575,1 +1576,1 @@\n-  oop mirror = SystemDictionary::MethodHandle_klass()->java_mirror();\n+  oop mirror = vmClasses::MethodHandle_klass()->java_mirror();\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -30,0 +30,1 @@\n+#include \"oops\/method.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"runtime\/fieldDescriptor.hpp\"\n","filename":"src\/hotspot\/share\/prims\/methodHandles.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -291,1 +292,1 @@\n-  Klass*   klass = SystemDictionary::ClassLoader_klass();\n+  Klass*   klass = vmClasses::ClassLoader_klass();\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -191,1 +192,1 @@\n-  Klass* k = SystemDictionary::LiveStackFrameInfo_klass();\n+  Klass* k = vmClasses::LiveStackFrameInfo_klass();\n@@ -248,1 +249,1 @@\n-  objArrayOop array_oop = oopFactory::new_objArray(SystemDictionary::Object_klass(),\n+  objArrayOop array_oop = oopFactory::new_objArray(vmClasses::Object_klass(),\n@@ -272,1 +273,1 @@\n-  objArrayOop array_oop = oopFactory::new_objArray(SystemDictionary::Object_klass(),\n+  objArrayOop array_oop = oopFactory::new_objArray(vmClasses::Object_klass(),\n@@ -370,2 +371,2 @@\n-    Klass* stackWalker_klass = SystemDictionary::StackWalker_klass();\n-    Klass* abstractStackWalker_klass = SystemDictionary::AbstractStackWalker_klass();\n+    Klass* stackWalker_klass = vmClasses::StackWalker_klass();\n+    Klass* abstractStackWalker_klass = vmClasses::AbstractStackWalker_klass();\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -44,1 +45,1 @@\n-  return klass->is_subclass_of(SystemDictionary::vector_VectorPayload_klass());\n+  return klass->is_subclass_of(vmClasses::vector_VectorPayload_klass());\n@@ -48,1 +49,1 @@\n-  return klass->is_subclass_of(SystemDictionary::vector_VectorMask_klass());\n+  return klass->is_subclass_of(vmClasses::vector_VectorMask_klass());\n@@ -52,1 +53,1 @@\n-  return klass->is_subclass_of(SystemDictionary::vector_VectorShuffle_klass());\n+  return klass->is_subclass_of(vmClasses::vector_VectorShuffle_klass());\n@@ -56,1 +57,1 @@\n-  assert(ik->is_subclass_of(SystemDictionary::vector_VectorPayload_klass()), \"%s not a VectorPayload\", ik->name()->as_C_string());\n+  assert(ik->is_subclass_of(vmClasses::vector_VectorPayload_klass()), \"%s not a VectorPayload\", ik->name()->as_C_string());\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -158,1 +159,1 @@\n-  Klass* k = SystemDictionary::Object_klass();\n+  Klass* k = vmClasses::Object_klass();\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1013,1 +1014,1 @@\n-   BasicType box_type = SystemDictionary::box_klass_type(k);\n+   BasicType box_type = vmClasses::box_klass_type(k);\n@@ -1803,1 +1804,1 @@\n-      assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n+      assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/memprofiler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -46,1 +47,1 @@\n-                          SystemDictionary::Thread_klass(),\n+                          vmClasses::Thread_klass(),\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -47,1 +48,1 @@\n-                          SystemDictionary::Thread_klass(),\n+                          vmClasses::Thread_klass(),\n@@ -53,1 +54,1 @@\n-  Klass* group = SystemDictionary::ThreadGroup_klass();\n+  Klass* group = vmClasses::ThreadGroup_klass();\n","filename":"src\/hotspot\/share\/runtime\/notificationThread.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -475,1 +476,1 @@\n-    Handle thread_oop = JavaCalls::construct_new_instance(SystemDictionary::Thread_klass(),\n+    Handle thread_oop = JavaCalls::construct_new_instance(vmClasses::Thread_klass(),\n@@ -481,1 +482,1 @@\n-    Klass* group = SystemDictionary::ThreadGroup_klass();\n+    Klass* group = vmClasses::ThreadGroup_klass();\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -474,2 +474,2 @@\n-  if (SystemDictionary::reflect_MagicAccessorImpl_klass_is_loaded() &&\n-      current_class->is_subclass_of(SystemDictionary::reflect_MagicAccessorImpl_klass())) {\n+  if (vmClasses::reflect_MagicAccessorImpl_klass_is_loaded() &&\n+      current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n@@ -700,1 +700,1 @@\n-  if (current_class->is_subclass_of(SystemDictionary::reflect_MagicAccessorImpl_klass())) {\n+  if (current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n@@ -763,1 +763,1 @@\n-  objArrayOop m = oopFactory::new_objArray(SystemDictionary::Class_klass(), parameter_count, CHECK_(objArrayHandle()));\n+  objArrayOop m = oopFactory::new_objArray(vmClasses::Class_klass(), parameter_count, CHECK_(objArrayHandle()));\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -77,1 +78,1 @@\n-  _filtered_fields->append(new FilteredField(SystemDictionary::reflect_ConstantPool_klass(), offset));\n+  _filtered_fields->append(new FilteredField(vmClasses::reflect_ConstantPool_klass(), offset));\n@@ -79,1 +80,1 @@\n-  _filtered_fields->append(new FilteredField(SystemDictionary::reflect_UnsafeStaticFieldAccessorImpl_klass(), offset));\n+  _filtered_fields->append(new FilteredField(vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass(), offset));\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -98,1 +99,1 @@\n-                          SystemDictionary::Thread_klass(),\n+                          vmClasses::Thread_klass(),\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -791,1 +791,1 @@\n-  Klass* k = SystemDictionary::StackOverflowError_klass();\n+  Klass* k = vmClasses::StackOverflowError_klass();\n@@ -1234,1 +1234,1 @@\n-           callee_method->method_holder() != SystemDictionary::Object_klass()) {\n+           callee_method->method_holder() != vmClasses::Object_klass()) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -192,1 +192,1 @@\n-                         SystemDictionary::System_klass(),\n+                         vmClasses::System_klass(),\n","filename":"src\/hotspot\/share\/runtime\/statSampler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -854,1 +855,1 @@\n-                            SystemDictionary::ThreadGroup_klass(),\n+                            vmClasses::ThreadGroup_klass(),\n@@ -861,1 +862,1 @@\n-                            SystemDictionary::ThreadGroup_klass(),\n+                            vmClasses::ThreadGroup_klass(),\n@@ -872,1 +873,1 @@\n-  InstanceKlass* ik = SystemDictionary::Thread_klass();\n+  InstanceKlass* ik = vmClasses::Thread_klass();\n@@ -1050,1 +1051,1 @@\n-  InstanceKlass* ik = SystemDictionary::Thread_klass();\n+  InstanceKlass* ik = vmClasses::Thread_klass();\n@@ -1095,1 +1096,1 @@\n-  Klass* group = SystemDictionary::ThreadGroup_klass();\n+  Klass* group = vmClasses::ThreadGroup_klass();\n@@ -1865,1 +1866,1 @@\n-      Klass* thread_klass = SystemDictionary::Thread_klass();\n+      Klass* thread_klass = vmClasses::Thread_klass();\n@@ -1892,1 +1893,1 @@\n-        Klass* thread_klass = SystemDictionary::Thread_klass();\n+        Klass* thread_klass = vmClasses::Thread_klass();\n@@ -2150,1 +2151,1 @@\n-    if (!has_pending_exception() || !pending_exception()->is_a(SystemDictionary::ThreadDeath_klass())) {\n+    if (!has_pending_exception() || !pending_exception()->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -2238,1 +2239,1 @@\n-    if (_pending_async_exception == NULL || !_pending_async_exception->is_a(SystemDictionary::ThreadDeath_klass())) {\n+    if (_pending_async_exception == NULL || !_pending_async_exception->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -3305,1 +3306,1 @@\n-  Klass* klass = SystemDictionary::System_klass();\n+  Klass* klass = vmClasses::System_klass();\n@@ -3325,1 +3326,1 @@\n-  Klass* klass = SystemDictionary::System_klass();\n+  Klass* klass = vmClasses::System_klass();\n@@ -3347,1 +3348,1 @@\n-  Klass* klass = SystemDictionary::System_klass();\n+  Klass* klass = vmClasses::System_klass();\n@@ -3379,1 +3380,1 @@\n-  InstanceKlass *k = SystemDictionary::UnsafeConstants_klass();\n+  InstanceKlass *k = vmClasses::UnsafeConstants_klass();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -164,1 +164,1 @@\n-    if (obj->klass() == SystemDictionary::Class_klass()) {\n+    if (obj->klass() == vmClasses::Class_klass()) {\n@@ -568,2 +568,2 @@\n-          (method()->method_holder()->is_subclass_of(SystemDictionary::reflect_MethodAccessorImpl_klass()) ||\n-           method()->method_holder()->is_subclass_of(SystemDictionary::reflect_ConstructorAccessorImpl_klass()))) {\n+          (method()->method_holder()->is_subclass_of(vmClasses::reflect_MethodAccessorImpl_klass()) ||\n+           method()->method_holder()->is_subclass_of(vmClasses::reflect_ConstructorAccessorImpl_klass()))) {\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -123,1 +124,1 @@\n-                           SystemDictionary::module_Modules_klass(),\n+                           vmClasses::module_Modules_klass(),\n@@ -465,1 +466,1 @@\n-  Handle thread_oop = JavaCalls::construct_new_instance(SystemDictionary::Thread_klass(),\n+  Handle thread_oop = JavaCalls::construct_new_instance(vmClasses::Thread_klass(),\n@@ -475,1 +476,1 @@\n-  Klass* group = SystemDictionary::ThreadGroup_klass();\n+  Klass* group = vmClasses::ThreadGroup_klass();\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -30,0 +29,2 @@\n+#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/method.hpp\"\n","filename":"src\/hotspot\/share\/services\/classLoadingService.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -66,1 +68,1 @@\n-                         SystemDictionary::module_Modules_klass(),\n+                         vmClasses::module_Modules_klass(),\n@@ -451,1 +453,1 @@\n-  Klass* k = SystemDictionary::System_klass();\n+  Klass* k = vmClasses::System_klass();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -136,1 +136,1 @@\n-  objArrayOop extra_args_array = oopFactory::new_objArray(SystemDictionary::Integer_klass(), 1, CHECK_NH);\n+  objArrayOop extra_args_array = oopFactory::new_objArray(vmClasses::Integer_klass(), 1, CHECK_NH);\n@@ -142,1 +142,1 @@\n-                            SystemDictionary::Integer_klass(),\n+                            vmClasses::Integer_klass(),\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1426,1 +1426,1 @@\n-  if (o->klass() == SystemDictionary::Class_klass()) {\n+  if (o->klass() == vmClasses::Class_klass()) {\n@@ -1516,1 +1516,1 @@\n-      InstanceKlass* oome_ik = SystemDictionary::OutOfMemoryError_klass();\n+      InstanceKlass* oome_ik = vmClasses::OutOfMemoryError_klass();\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -314,1 +314,1 @@\n-       assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())), \"we expect only an OOME here\");\n+       assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOME here\");\n@@ -333,1 +333,1 @@\n-       assert((PENDING_EXCEPTION->is_a(SystemDictionary::OutOfMemoryError_klass())), \"we expect only an OOME here\");\n+       assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOME here\");\n","filename":"src\/hotspot\/share\/services\/lowMemoryDetector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -1219,1 +1220,1 @@\n-      objArrayOop array = oopFactory::new_objArray(SystemDictionary::Object_klass(), num_locked_monitors, CHECK_NULL);\n+      objArrayOop array = oopFactory::new_objArray(vmClasses::Object_klass(), num_locked_monitors, CHECK_NULL);\n@@ -1261,1 +1262,1 @@\n-      objArrayOop array = oopFactory::new_objArray(SystemDictionary::Object_klass(), num_locked_synchronizers, CHECK_NULL);\n+      objArrayOop array = oopFactory::new_objArray(vmClasses::Object_klass(), num_locked_synchronizers, CHECK_NULL);\n@@ -1401,1 +1402,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::String_klass(),\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::String_klass(),\n@@ -1421,1 +1422,1 @@\n-    objArrayOop res = oopFactory::new_objArray(SystemDictionary::String_klass(), num_entries, CHECK_NULL);\n+    objArrayOop res = oopFactory::new_objArray(vmClasses::String_klass(), num_entries, CHECK_NULL);\n@@ -1531,1 +1532,1 @@\n-    if (element_klass != SystemDictionary::String_klass()) {\n+    if (element_klass != vmClasses::String_klass()) {\n@@ -1695,1 +1696,1 @@\n-  if (element_klass != SystemDictionary::String_klass()) {\n+  if (element_klass != vmClasses::String_klass()) {\n@@ -1730,1 +1731,1 @@\n-  objArrayOop r = oopFactory::new_objArray(SystemDictionary::Thread_klass(), num_threads, CHECK_NH);\n+  objArrayOop r = oopFactory::new_objArray(vmClasses::Thread_klass(), num_threads, CHECK_NH);\n@@ -1938,1 +1939,1 @@\n-  objArrayOop cmd_array_oop = oopFactory::new_objArray(SystemDictionary::String_klass(),\n+  objArrayOop cmd_array_oop = oopFactory::new_objArray(vmClasses::String_klass(),\n@@ -1961,1 +1962,1 @@\n-  if (element_klass != SystemDictionary::String_klass()) {\n+  if (element_klass != vmClasses::String_klass()) {\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryService.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -456,1 +457,1 @@\n-          if (waitingToLockBlocker->is_a(SystemDictionary::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n+          if (waitingToLockBlocker->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n@@ -720,1 +721,1 @@\n-  InstanceKlass* ik = SystemDictionary::StackTraceElement_klass();\n+  InstanceKlass* ik = vmClasses::StackTraceElement_klass();\n@@ -768,1 +769,1 @@\n-  HeapInspection::find_instances_at_safepoint(SystemDictionary::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass(),\n+  HeapInspection::find_instances_at_safepoint(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass(),\n@@ -916,1 +917,1 @@\n-    if (blocker_object != NULL && blocker_object->is_a(SystemDictionary::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n+    if (blocker_object != NULL && blocker_object->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n@@ -1025,1 +1026,1 @@\n-      assert(waitingToLockBlocker->is_a(SystemDictionary::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass()),\n+      assert(waitingToLockBlocker->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass()),\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -76,2 +77,2 @@\n-  if (!_pending_exception->is_a(SystemDictionary::ThreadDeath_klass()) &&\n-      (_pending_exception->klass() != SystemDictionary::InternalError_klass() ||\n+  if (!_pending_exception->is_a(vmClasses::ThreadDeath_klass()) &&\n+      (_pending_exception->klass() != vmClasses::InternalError_klass() ||\n@@ -97,1 +98,1 @@\n-  if (h_exception()->klass() == SystemDictionary::StackOverflowError_klass()) {\n+  if (h_exception()->klass() == vmClasses::StackOverflowError_klass()) {\n@@ -165,1 +166,1 @@\n-  if (h_exception->is_a(SystemDictionary::OutOfMemoryError_klass())) {\n+  if (h_exception->is_a(vmClasses::OutOfMemoryError_klass())) {\n@@ -169,1 +170,1 @@\n-  if (h_exception->is_a(SystemDictionary::LinkageError_klass())) {\n+  if (h_exception->is_a(vmClasses::LinkageError_klass())) {\n@@ -173,1 +174,1 @@\n-  assert(h_exception->is_a(SystemDictionary::Throwable_klass()), \"exception is not a subclass of java\/lang\/Throwable\");\n+  assert(h_exception->is_a(vmClasses::Throwable_klass()), \"exception is not a subclass of java\/lang\/Throwable\");\n@@ -238,1 +239,1 @@\n-    InstanceKlass* k = SystemDictionary::StackOverflowError_klass();\n+    InstanceKlass* k = vmClasses::StackOverflowError_klass();\n@@ -313,1 +314,1 @@\n-    assert(h_cause->is_a(SystemDictionary::Throwable_klass()),\n+    assert(h_cause->is_a(vmClasses::Throwable_klass()),\n@@ -437,1 +438,1 @@\n-    if (exception->is_a(SystemDictionary::Error_klass())) {\n+    if (exception->is_a(vmClasses::Error_klass())) {\n@@ -547,1 +548,1 @@\n-  if (message == NULL && exception->is_a(SystemDictionary::Throwable_klass())) {\n+  if (message == NULL && exception->is_a(vmClasses::Throwable_klass())) {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/vmClasses.hpp\"\n@@ -123,1 +124,1 @@\n-  } else if (obj->klass() == SystemDictionary::String_klass()) {\n+  } else if (obj->klass() == vmClasses::String_klass()) {\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-enum class VMClassID : int;\n+enum class vmClassID : int;\n","filename":"src\/hotspot\/share\/utilities\/vmEnums.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    \/\/ Note, vmStructs contains a field with the name \"_klasses[static_cast<int>(VMClassID::Object_klass_knum)]\"\n+    \/\/ Note, vmStructs contains a field with the name \"_klasses[static_cast<int>(vmClassID::Object_klass_knum)]\"\n@@ -74,2 +74,2 @@\n-    \/\/ #define VM_CLASS_ID(kname)      VMClassID::_VM_CLASS_ENUM(kname)\n-    return \"VMClassID::\" + _VM_CLASS_ENUM(kname);\n+    \/\/ #define VM_CLASS_ID(kname)      vmClassID::_VM_CLASS_ENUM(kname)\n+    return \"vmClassID::\" + _VM_CLASS_ENUM(kname);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/SystemDictionary.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -32,1 +32,1 @@\n-  InstanceKlass* klass = SystemDictionary::ClassLoader_klass();\n+  InstanceKlass* klass = vmClasses::ClassLoader_klass();\n@@ -37,1 +37,1 @@\n-  InstanceKlass* klass = SystemDictionary::String_klass();\n+  InstanceKlass* klass = vmClasses::String_klass();\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n@@ -28,0 +28,1 @@\n+#include \"oops\/instanceKlass.hpp\"\n@@ -88,1 +89,1 @@\n-  oop obj = SystemDictionary::Byte_klass()->allocate_instance(THREAD);\n+  oop obj = vmClasses::Byte_klass()->allocate_instance(THREAD);\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}