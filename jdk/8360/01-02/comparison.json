{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import java.util.stream.Collectors;\n@@ -380,4 +381,10 @@\n-    public static void patch(Path path, int fromLine, int toLine, String to) throws IOException {\n-        if(fromLine < 1 || toLine < 1) {\n-            throw new RuntimeException(\"Invalid range fromLine: \" + fromLine + \", toLine: \" + toLine);\n-        }\n+    \/**\n+     * Patches a part of a file.\n+     * @param path of file\n+     * @param fromLine the first line to patch. This is the number you see in an editor, 1-based.\n+     * @param toLine the last line to patch. This is the number you see in an editor, inclusive.\n+     * @param from the lines to remove, used to ensure the correct lines are removed. Ignored if null.\n+     * @param to the newly added line, can be multiple lines or empty. Cannot be null.\n+     * @throws IOException\n+     *\/\n+    public static void patch(Path path, int fromLine, int toLine, List<String> from, String to) throws IOException {\n@@ -385,5 +392,13 @@\n-        if(toLine > lines.size()) {\n-            throw new RuntimeException(\"Expected toLine: \" + toLine + \", actual range available: \" + lines.size());\n-        }\n-        for (int i = toLine - 1; i >= fromLine - 1; i--) {\n-            lines.remove(i);\n+        if (from != null) {\n+            var removed = \"\";\n+            for (int i = fromLine; i <= toLine; i++) {\n+                removed += lines.remove(fromLine - 1).trim();\n+            }\n+            var froms = from.stream()\n+                    .map(String::trim)\n+                    .collect(Collectors.joining());\n+            if (!removed.equals(froms)) {\n+                throw new IOException(\"Removed not the same\");\n+            }\n+        } else {\n+            lines.subList(fromLine - 1, toLine).clear();\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"}]}