{"files":[{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8285452\n- * @summary Unit Test for a common Test API in jdk.test.lib.util.FileUtils\n- * @library .. \/test\/lib\n- * @run main FileUtilsTest\n- *\/\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import jdk.test.lib.util.FileUtils;\n-\n-public class FileUtilsTest {\n-\n-    private static volatile int counter = 1;\n-\n-    public static void main(String[] args) throws Exception {\n-        String a = \"a\";\n-        String z = \"z\";\n-        String abc = \"\"\"\n-a\n-b\n-c\"\"\";\n-        \/\/ 1st line has a space character\n-        String sabc = \" \" + System.lineSeparator() + abc;\n-        String xyz = \"\"\"\n-x\n-y\n-z\"\"\";\n-        var sList = Arrays.asList(\" \");\n-        var aList = Arrays.asList(a);\n-        var abcList = abc.lines().toList();\n-        var sabcList = sabc.lines().toList();\n-        \/\/ Replace with same line\n-        test(aList, 1, 1, null, a, a);\n-        \/\/ Replace with different line\n-        test(aList, 1, 1, null, z, z);\n-        \/\/ Replace with same line based on line match\n-        test(aList, 1, 1, a, a, a);\n-        \/\/ Replace with different line based on line match\n-        test(aList, 1, 1, a, z, z);\n-        \/\/ Replace single line with multiple lines\n-        test(aList, 1, 1, null, xyz, \"xyz\");\n-        \/\/ Replace single line with multiple lines based on lines match\n-        test(aList, 1, 1, a, xyz, \"xyz\");\n-        \/\/ Replace all lines\n-        test(abcList, 1, 3, null, xyz, \"xyz\");\n-        \/\/ Replace all lines based on lines match\n-        test(abcList, 1, 3, abc, xyz, \"xyz\");\n-        \/\/ Replace all lines with single line based on lines match\n-        test(abcList, 1, 3, abc, z, z);\n-        \/\/ Replace single line\n-        test(abcList, 1, 1, null, z, \"zbc\");\n-        \/\/ Replace single line based on line match\n-        test(abcList, 1, 1, a, z, \"zbc\");\n-        \/\/ Replace multiple lines\n-        test(abcList, 1, 2, null, z, \"zc\");\n-        \/\/ Replace multiple lines based on line match\n-        test(abcList, 1, 2, \"ab\", z, \"zc\");\n-        \/\/ Replace multiple lines based on line match\n-        test(abcList, 1, 2, \"ab\", xyz, \"xyzc\");\n-\n-        \/\/ Test with space characters\n-        \/\/ Replace with same space line\n-        test(sList, 1, 1, null, \" \", \" \");\n-        \/\/ Replace with same line based on line match\n-        test(sList, 1, 1, \" \", a, a);\n-        \/\/ Replace with same space line\n-        test(sabcList, 1, 1, null, a, \"aabc\");\n-        \/\/ Replace space line with different line based on line match\n-        test(sabcList, 1, 1, \" \", a, \"aabc\");\n-        \/\/ Replace range of lines with space to different lines based on line match\n-        test(sabcList, 1, 2, \" a\", xyz, \"xyzbc\");\n-\n-        \/\/ Mismatched range with \"replace\" lines Tests\n-        \/\/ Replace all lines with mismatched line\n-        test(aList, 1, 1, z, z, z);\n-        \/\/ Replace all lines with mismatched lines\n-        test(abcList, 1, 3, xyz, xyz, \"xyz\");\n-        \/\/ Replace single line with mismatched line\n-        test(abcList, 1, 1, z, z, \"zbc\");\n-        \/\/ Replace a range of lines with mismatched lines\n-        test(abcList, 1, 3, \"ab\", xyz, \"xyz\");\n-    }\n-\n-    private static List<String> toList(String str) {\n-        return str.chars().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.toList());\n-    }\n-\n-    private static void test(List<String> content, int from, int to, String replace,\n-            String replaceTo, String expected) throws IOException {\n-        Path path = Files.write(Paths.get(\"Test-\" + counter++), content);\n-        try {\n-            FileUtils.patch(path, from, to, replace, replaceTo);\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Removed not the same\")) {\n-                System.out.printf(\"Expected failure: Lines %s-%s, don't match with lines to replace '%s'%n\",\n-                        from, to, replace);\n-                return;\n-            }\n-            throw e;\n-        }\n-        var lines = Files.readAllLines(path);\n-        System.out.printf(\"Content:%s, Resulted Lines: %s, Expected: %s%n\", content, lines, toList(expected));\n-        if (!lines.equals(toList(expected))) {\n-            throw new IOException(\"Unmatched result\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/FileUtilsTest.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8285452\n+ * @summary Unit Test for a common Test API in jdk.test.lib.util.FileUtils\n+ * @library .. \/test\/lib\n+ * @run main FileUtilsTest\n+ *\/\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.util.FileUtils;\n+\n+public class FileUtilsTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Replace with same line\n+        test(\"a\", 1, 1, null, \"a\", \"a\\n\");\n+        \/\/ Replace with different line\n+        test(\"a\", 1, 1, null, \"z\", \"z\\n\");\n+        \/\/ Replace with same line based on line match\n+        test(\"a\", 1, 1, \"a\", \"a\", \"a\\n\");\n+        \/\/ Replace with different line based on line match\n+        test(\"a\", 1, 1, \"a\", \"z\", \"z\\n\");\n+        \/\/ Replace single line with multiple lines\n+        test(\"a\", 1, 1, null, \"x\\ny\\nz\", \"x\\ny\\nz\\n\");\n+        \/\/ Replace single line with multiple lines based on lines match\n+        test(\"a\", 1, 1, \"a\", \"x\\ny\\nz\", \"x\\ny\\nz\\n\");\n+        \/\/ Replace all lines\n+        test(\"a\\nb\\nc\", 1, 3, null, \"x\\ny\\nz\", \"x\\ny\\nz\\n\");\n+        \/\/ Replace all lines based on lines match\n+        test(\"a\\nb\\nc\", 1, 3, \"a\\nb\\nc\", \"x\\ny\\nz\", \"x\\ny\\nz\\n\");\n+        \/\/ Replace all lines with single line based on lines match\n+        test(\"a\\nb\\nc\", 1, 3, \"a\\nb\\nc\", \"z\", \"z\\n\");\n+        \/\/ Replace single line\n+        test(\"a\\nb\\nc\", 1, 1, null, \"z\", \"z\\nb\\nc\\n\");\n+        \/\/ Replace single line based on line match\n+        test(\"a\\nb\\nc\", 1, 1, \"a\", \"z\", \"z\\nb\\nc\\n\");\n+        \/\/ Replace multiple lines\n+        test(\"a\\nb\\nc\", 1, 2, null, \"z\", \"z\\nc\\n\");\n+        \/\/ Replace multiple lines based on line match\n+        test(\"a\\nb\\nc\", 1, 2, \"a\\nb\", \"z\", \"z\\nc\\n\");\n+        \/\/ Replace multiple lines based on line match\n+        test(\"a\\nb\\nc\", 1, 2, \"a\\nb\", \"x\\ny\\nz\", \"x\\ny\\nz\\nc\\n\");\n+\n+        \/\/ Test with space characters\n+        \/\/ Replace with space line\n+        test(\"\\n\", 1, 1, null, \" \", \" \\n\");\n+        \/\/ Replace empty line with another line based on line match\n+        test(\"\\n\", 1, 1, \" \", \"a\", \"a\\n\");\n+        \/\/ Replace with space line\n+        test(\" \\na\\nb\\nc\", 1, 1, null, \"a\", \"a\\na\\nb\\nc\\n\");\n+        \/\/ Replace empty line with different line based on line match\n+        test(\" \\na\\nb\\nc\", 1, 1, \" \", \"a\", \"a\\na\\nb\\nc\\n\");\n+        \/\/ Replace range of lines with space to different lines based on line match\n+        test(\" \\na\\nb\\nc\", 1, 2, \" \\na\", \"x\\ny\\nz\", \"x\\ny\\nz\\nb\\nc\\n\");\n+\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \" a\\nb\", \"1\\n2\", \"1\\n2\\nc\\n\"); \/\/ free to add spaces around a line in from\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a \\nb\", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\n b \", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"\\na\\nb\", \"1\\n2\", \"1\\n2\\nc\\n\"); \/\/ free to add empty lines at both ends of from\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\\n\", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"\\na\\nb\\n\", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"\\n\\na\\nb\\n\\n\", \"1\\n2\", \"1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\", \"1\\n2\\n\", \"1\\n2\\nc\\n\"); \/\/ ok to add a new line at end of to\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\", \"1\\n2\\n\\n\", \"1\\n2\\n\\nc\\n\"); \/\/ more will change result\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\", \"\\n1\\n2\", \"\\n1\\n2\\nc\\n\");\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\n\\nb\", \"1\\n2\\n\", null); \/\/ no extra new line inside\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"ab\", \"1\\n2\\n\", null); \/\/ new line inside must preserve\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\", \"1\\n2\\n\", null); \/\/ must be all\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"b\", \"1\\n2\\n\", null); \/\/ must be all\n+\n+        test(\"a\\nb\\nc\\n\", 1, 2, \"a\\nb\", \"\", \"c\\n\"); \/\/ just remove\n+        test(\"a\\nb\\nc\\n\", 1, 0, \"\", \"1\\n2\", \"1\\n2\\na\\nb\\nc\\n\"); \/\/ just add\n+\n+        \/\/ Mismatched range with \"replace\" lines Tests\n+        \/\/ Replace all lines with mismatched line\n+        test(\"a\", 1, 1, \"z\", \"z\", null);\n+        \/\/ Replace all lines with mismatched lines\n+        test(\"a\\nb\\nc\", 1, 3, \"x\\ny\\nz\", \"x\\ny\\nz\", null);\n+        \/\/ Replace single line with mismatched line\n+        test(\"a\\nb\\nc\", 1, 1, \"z\", \"z\", null);\n+        \/\/ Replace a range of lines with mismatched lines\n+        test(\"a\\nb\\nc\", 1, 3, \"ab\", \"x\\ny\\nz\", null);\n+    }\n+\n+    private static void test(String content, int from, int to, String replace,\n+                String replaceTo, String expected) throws IOException {\n+        String name = \"Test-\" + new Exception().getStackTrace()[1].getLineNumber();\n+        Path path = Files.writeString(Paths.get(name), content);\n+        String output = null;\n+        try {\n+            FileUtils.patch(path, from, to, replace, replaceTo);\n+            output = Files.readString(path);\n+        } catch (IOException e) {\n+            \/\/ output is null\n+        }\n+        Asserts.assertEQ(output, expected);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/lib-test\/jdk\/test\/lib\/FileUtilsTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -382,1 +382,2 @@\n-     * @param path of file\n+     *\n+     * @param path the file\n@@ -385,3 +386,6 @@\n-     * @param from the lines to remove, used to ensure the correct lines are removed. Ignored if null.\n-     * @param to the newly added line, can be multiple lines or empty. Cannot be null.\n-     * @throws IOException\n+     *               Set {@code toLine} to {@code fromLine - 1} if you only want to insert lines.\n+     * @param from lines to remove, used to ensure the correct lines are removed. Can be multiple lines or empty.\n+     *            It's compared to existing lines with all lines trimmed and no new lines at both ends. Ignored if null.\n+     * @param to the newly added lines, can be multiple lines or empty. New line at end is optional. Cannot be null.\n+     * @throws IOException if there's an I\/O error or {@code from} does not match the existing lines\n+     * @throws IndexOutOfBoundsException if {@code fromLine} or {@code toLine} is invalid\n@@ -391,0 +395,2 @@\n+        \/\/ The next line does a from\/to as well\n+        var subList = lines.subList(fromLine - 1, toLine);\n@@ -392,3 +398,13 @@\n-            var removed = \"\";\n-            for (int i = fromLine; i <= toLine; i++) {\n-                removed += lines.remove(fromLine - 1).trim();\n+            \/\/ Each line is trimmed so caller needs not care about indentation.\n+            \/\/ Caller also needs not care about new lines on both ends.\n+            \/\/ New lines inside are preserved.\n+            String actuallyRemoved = subList.stream()\n+                            .map(String::trim)\n+                            .collect(Collectors.joining(\"\\n\")).trim();\n+            String wantToRemove = from.lines()\n+                            .map(String::trim)\n+                            .collect(Collectors.joining(\"\\n\")).trim();\n+            if (!actuallyRemoved.equals(wantToRemove)) {\n+                throw new IOException(\"Removed not the same: [\"\n+                        + String.join(\"\\\\n\", subList) + \"] and [\"\n+                        + from.replaceAll(\"\\\\n\", \"\\\\\\\\n\") + \"]\");\n@@ -396,8 +412,0 @@\n-            var froms = from.lines()\n-                    .map(String::trim)\n-                    .collect(Collectors.joining());\n-            if (!removed.equals(froms)) {\n-                throw new IOException(\"Removed not the same\");\n-            }\n-        } else {\n-            lines.subList(fromLine - 1, toLine).clear();\n@@ -405,0 +413,1 @@\n+        subList.clear();\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"}]}