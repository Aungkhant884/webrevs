{"files":[{"patch":"@@ -84,4 +84,4 @@\n-    static const int blocksToKeep = 5;\n-    Chunk* cur = nullptr;\n-    Chunk* next;\n-    \/\/ if we have more than n chunks, free all of them\n+    Chunk* cur = _first;\n+    Chunk* next = nullptr;\n+    \/\/ Free all chunks while in ThreadCritical lock\n+    \/\/ so NMT adjustment is stable.\n@@ -89,9 +89,1 @@\n-    if (_num_chunks > blocksToKeep) {\n-      \/\/ free chunks at end of queue, for better locality\n-      cur = _first;\n-      for (size_t i = 0; i < (blocksToKeep - 1); i++) {\n-        assert(cur != nullptr, \"counter out of sync?\");\n-        cur = cur->next();\n-      }\n-      assert(cur != nullptr, \"counter out of sync?\");\n-\n+    while (cur != nullptr) {\n@@ -99,1 +91,2 @@\n-      cur->set_next(nullptr);\n+      os::free(cur);\n+      _num_chunks--;\n@@ -101,9 +94,0 @@\n-\n-      \/\/ Free all remaining chunks while in ThreadCritical lock\n-      \/\/ so NMT adjustment is stable.\n-      while(cur != nullptr) {\n-        next = cur->next();\n-        os::free(cur);\n-        _num_chunks--;\n-        cur = next;\n-      }\n@@ -138,1 +122,1 @@\n-  enum { CleaningInterval = 5000 };      \/\/ cleaning interval in ms\n+  static const int cleaning_interval = 5000; \/\/ cleaning interval in ms\n@@ -141,1 +125,1 @@\n-   ChunkPoolCleaner() : PeriodicTask(CleaningInterval) {}\n+   ChunkPoolCleaner() : PeriodicTask(cleaning_interval) {}\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"}]}