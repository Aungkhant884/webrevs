{"files":[{"patch":"@@ -48,1 +48,1 @@\n-static const size_t iso8601_len = 19; \/\/ \"YYYY-MM-DDTHH:MM:SS\"\n+static const size_t iso8601_len = 19; \/\/ \"YYYY-MM-DDTHH:MM:SS\" (note: we just use a subset of the full timestamp)\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,8 @@\n+\/\/ E.g., YYYY-MM-DDThh:mm:ss.mmm+zzzz.\n+\/\/ Returns buffer, or NULL if it failed.\n+char* os::iso8601_time(char* buffer, size_t buffer_length, bool utc) {\n+  const jlong now = javaTimeMillis();\n+  return os::iso8601_time(now, buffer, buffer_length, utc);\n+}\n+\n+\/\/ Fill in buffer with an ISO-8601 string corresponding to the given javaTimeMillis value\n@@ -112,1 +120,1 @@\n-char* os::iso8601_time(char* buffer, size_t buffer_length, bool utc) {\n+char* os::iso8601_time(jlong milliseconds_since_19700101, char* buffer, size_t buffer_length, bool utc) {\n@@ -117,1 +125,1 @@\n-  static const size_t needed_buffer = 29;\n+  static const size_t needed_buffer = os::iso8601_timestamp_size;\n@@ -128,2 +136,0 @@\n-  \/\/ Get the current time\n-  jlong milliseconds_since_19700101 = javaTimeMillis();\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -227,0 +227,10 @@\n+\n+  \/\/ \"YYYY-MM-DDThh:mm:ss.mmm+zzzz\" incl. terminating zero\n+  static const size_t iso8601_timestamp_size = 29;\n+\n+  \/\/ Fill in buffer with an ISO-8601 string corresponding to the given javaTimeMillis value\n+  \/\/ E.g., YYYY-MM-DDThh:mm:ss.mmm+zzzz.\n+  \/\/ Returns buffer, or NULL if it failed.\n+  static char* iso8601_time(jlong milliseconds_since_19700101, char* buffer,\n+                            size_t buffer_length, bool utc = false);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -757,0 +757,54 @@\n+\n+\/\/ Not a regex! Very primitive, just match:\n+\/\/ \"d\" - digit\n+\/\/ \"a\" - ascii\n+\/\/ \".\" - everything\n+\/\/ rest must match\n+static bool very_simple_string_matcher(const char* pattern, const char* s) {\n+  const size_t lp = strlen(pattern);\n+  const size_t ls = strlen(s);\n+  if (ls < lp) {\n+    return false;\n+  }\n+  for (size_t i = 0; i < lp; i ++) {\n+    switch (pattern[i]) {\n+      case '.': continue;\n+      case 'd': if (!isdigit(s[i])) return false; break;\n+      case 'a': if (!isascii(s[i])) return false; break;\n+      default: if (s[i] != pattern[i]) return false; break;\n+    }\n+  }\n+  return true;\n+}\n+\n+TEST_VM(os, iso8601_time) {\n+  char buffer[os::iso8601_timestamp_size + 1]; \/\/ + space for canary\n+  buffer[os::iso8601_timestamp_size] = 'X'; \/\/ canary\n+  const char* result = NULL;\n+  \/\/ YYYY-MM-DDThh:mm:ss.mmm+zzzz\n+  const char* const pattern = \"dddd-dd-dd.dd:dd:dd.ddd+dddd\";\n+\n+  result = os::iso8601_time(buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(pattern, result));\n+\n+  result = os::iso8601_time(buffer, sizeof(buffer), false);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(pattern, result));\n+\n+  \/\/ Test with explicit timestamps\n+  result = os::iso8601_time(0, buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(\"1970-01-01.00:00:00.000+dddd\", result));\n+\n+  result = os::iso8601_time(17, buffer, sizeof(buffer), true);\n+  tty->print_cr(\"%s\", result);\n+  EXPECT_EQ(result, buffer);\n+  EXPECT_TRUE(very_simple_string_matcher(\"1970-01-01.00:00:00.017+dddd\", result));\n+\n+  \/\/ Canary should still be intact\n+  EXPECT_EQ(buffer[os::iso8601_timestamp_size], 'X');\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}