{"files":[{"patch":"@@ -3830,5 +3830,11 @@\n-      \/\/ Emit stub for static call\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n-      if (stub == NULL) {\n-        ciEnv::current()->record_failure(\"CodeCache is full\");\n-        return;\n+      if (CodeBuffer::supports_shared_stubs() && _method->can_be_statically_bound()) {\n+        \/\/ Calls of the same statically bound method can share\n+        \/\/ a stub to the interpreter.\n+        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+      } else {\n+        \/\/ Emit stub for static call\n+        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+        if (stub == NULL) {\n+          ciEnv::current()->record_failure(\"CodeCache is full\");\n+          return;\n+        }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/codeBuffer.inline.hpp\"\n+#include \"asm\/macroAssembler.hpp\"\n+\n+bool CodeBuffer::pd_finalize_stubs() {\n+  return emit_shared_stubs_to_interp<MacroAssembler>(this, _shared_stub_to_interp_requests);\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+  bool pd_finalize_stubs();\n@@ -34,0 +35,1 @@\n+  static constexpr bool supports_shared_stubs() { return true; }\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,6 @@\n+  bool pd_finalize_stubs() {\n+    if (_finalize_stubs) {\n+      Unimplemented();\n+    }\n+    return true;\n+  }\n@@ -33,0 +39,1 @@\n+  static constexpr bool supports_shared_stubs() { return false; }\n","filename":"src\/hotspot\/cpu\/arm\/codeBuffer_arm.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,6 @@\n+  bool pd_finalize_stubs() {\n+    if (_finalize_stubs) {\n+      Unimplemented();\n+    }\n+    return true;\n+  }\n@@ -34,0 +40,1 @@\n+  static constexpr bool supports_shared_stubs() { return false; }\n","filename":"src\/hotspot\/cpu\/ppc\/codeBuffer_ppc.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,6 @@\n+  bool pd_finalize_stubs() {\n+    if (_finalize_stubs) {\n+      Unimplemented();\n+    }\n+    return true;\n+  }\n@@ -35,0 +41,1 @@\n+  static constexpr bool supports_shared_stubs() { return false; }\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,6 @@\n+  bool pd_finalize_stubs() {\n+    if (_finalize_stubs) {\n+      Unimplemented();\n+    }\n+    return true;\n+  }\n@@ -36,0 +42,1 @@\n+  static constexpr bool supports_shared_stubs() { return false; }\n","filename":"src\/hotspot\/cpu\/s390\/codeBuffer_s390.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/codeBuffer.inline.hpp\"\n+#include \"asm\/macroAssembler.hpp\"\n+\n+bool CodeBuffer::pd_finalize_stubs() {\n+  return emit_shared_stubs_to_interp<MacroAssembler, Assembler::imm_operand>(this, _shared_stub_to_interp_requests);\n+}\n","filename":"src\/hotspot\/cpu\/x86\/codeBuffer_x86.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+  bool pd_finalize_stubs();\n@@ -33,0 +34,1 @@\n+  static constexpr bool supports_shared_stubs() { return true; }\n","filename":"src\/hotspot\/cpu\/x86\/codeBuffer_x86.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,4 +58,1 @@\n-  \/\/ Static stub relocation also tags the Method* in the code-stream.\n-  __ mov_metadata(rbx, (Metadata*) NULL);  \/\/ Method is zapped till fixup time.\n-  \/\/ This is recognized as unresolved by relocs\/nativeinst\/ic code.\n-  __ jump(RuntimeAddress(__ pc()));\n+  __ emit_static_call_stub();\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1331,0 +1331,7 @@\n+void MacroAssembler::emit_static_call_stub() {\n+  \/\/ Static stub relocation also tags the Method* in the code-stream.\n+  mov_metadata(rbx, (Metadata*) NULL);  \/\/ Method is zapped till fixup time.\n+  \/\/ This is recognized as unresolved by relocs\/nativeinst\/ic code.\n+  jump(RuntimeAddress(pc()));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -868,0 +868,2 @@\n+  void emit_static_call_stub();\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,5 +1817,12 @@\n-      \/\/ Emit stubs for static call.\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n-      if (stub == NULL) {\n-        ciEnv::current()->record_failure(\"CodeCache is full\");\n-        return;\n+      address mark = cbuf.insts_mark();\n+      if (CodeBuffer::supports_shared_stubs() && _method->can_be_statically_bound()) {\n+        \/\/ Calls of the same statically bound method can share\n+        \/\/ a stub to the interpreter.\n+        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+      } else {\n+        \/\/ Emit stubs for static call.\n+        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n+        if (stub == NULL) {\n+          ciEnv::current()->record_failure(\"CodeCache is full\");\n+          return;\n+        }\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2171,1 +2171,0 @@\n-      \/\/ Emit stubs for static call.\n@@ -2173,4 +2172,11 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n-      if (stub == NULL) {\n-        ciEnv::current()->record_failure(\"CodeCache is full\");\n-        return;\n+      if (CodeBuffer::supports_shared_stubs() && _method->can_be_statically_bound()) {\n+        \/\/ Calls of the same statically bound method can share\n+        \/\/ a stub to the interpreter.\n+        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+      } else {\n+        \/\/ Emit stubs for static call.\n+        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n+        if (stub == NULL) {\n+          ciEnv::current()->record_failure(\"CodeCache is full\");\n+          return;\n+        }\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,8 @@\n+  bool pd_finalize_stubs() {\n+    if (_finalize_stubs) {\n+      Unimplemented();\n+    }\n+    return true;\n+  }\n+ public:\n+  static constexpr bool supports_shared_stubs() { return false; }\n","filename":"src\/hotspot\/cpu\/zero\/codeBuffer_zero.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+  assert(!_finalize_stubs, \"non-finalized stubs\");\n@@ -983,0 +984,16 @@\n+void CodeBuffer::finalize_stubs() {\n+  if (!pd_finalize_stubs()) {\n+    return;\n+  }\n+  _finalize_stubs = false;\n+}\n+\n+void CodeBuffer::shared_stub_to_interp_for(ciMethod* callee, csize_t call_offset) {\n+  if (_shared_stub_to_interp_requests == NULL) {\n+    _shared_stub_to_interp_requests = new SharedStubToInterpRequests(8);\n+  }\n+  SharedStubToInterpRequest request(callee, call_offset);\n+  _shared_stub_to_interp_requests->push(request);\n+  _finalize_stubs = true;\n+}\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -40,0 +41,2 @@\n+class ciMethod;\n+class SharedStubToInterpRequest;\n@@ -349,0 +352,2 @@\n+typedef GrowableArray<SharedStubToInterpRequest> SharedStubToInterpRequests;\n+\n@@ -421,0 +426,3 @@\n+  SharedStubToInterpRequests* _shared_stub_to_interp_requests; \/\/ used to collect requests for shared iterpreter stubs\n+  bool         _finalize_stubs; \/\/ Indicate if we need to finalize stubs to make CodeBuffer final.\n+\n@@ -438,0 +446,2 @@\n+    _finalize_stubs  = false;\n+    _shared_stub_to_interp_requests = NULL;\n@@ -689,0 +699,6 @@\n+  \/\/ Make a set of stubs final. It can create\/optimize stubs.\n+  void finalize_stubs();\n+\n+  \/\/ Request for a shared stub to the interpreter\n+  void shared_stub_to_interp_for(ciMethod* callee, csize_t call_offset);\n+\n@@ -704,0 +720,17 @@\n+\/\/ A Java method can have calls of Java methods which can be statically bound.\n+\/\/ Calls of Java methods need stubs to the interpreter. Calls sharing the same Java method\n+\/\/ can share a stub to the interpreter.\n+\/\/ A SharedStubToInterpRequest is a request for a shared stub to the interpreter.\n+class SharedStubToInterpRequest : public ResourceObj {\n+ private:\n+  ciMethod* _shared_method;\n+  CodeBuffer::csize_t _call_offset; \/\/ The offset of the call in CodeBuffer\n+\n+ public:\n+  SharedStubToInterpRequest(ciMethod* method = NULL, CodeBuffer::csize_t call_offset = -1) : _shared_method(method),\n+      _call_offset(call_offset) {}\n+\n+  ciMethod* shared_method() const { return _shared_method; }\n+  CodeBuffer::csize_t call_offset() const { return _call_offset; }\n+};\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_ASM_CODEBUFFER_INLINE_HPP\n+#define SHARE_ASM_CODEBUFFER_INLINE_HPP\n+\n+#include \"asm\/codeBuffer.hpp\"\n+#include \"ci\/ciEnv.hpp\"\n+#include \"code\/compiledIC.hpp\"\n+\n+template <typename MacroAssembler, int relocate_format = 0>\n+bool emit_shared_stubs_to_interp(CodeBuffer* cb, SharedStubToInterpRequests* shared_stub_to_interp_requests) {\n+  if (shared_stub_to_interp_requests == NULL) {\n+    return true;\n+  }\n+  auto by_shared_method = [](SharedStubToInterpRequest* r1, SharedStubToInterpRequest* r2) {\n+    if (r1->shared_method() < r2->shared_method()) {\n+      return -1;\n+    } else if (r1->shared_method() > r2->shared_method()) {\n+      return 1;\n+    } else {\n+      return 0;\n+    }\n+  };\n+  shared_stub_to_interp_requests->sort(by_shared_method);\n+  MacroAssembler masm(cb);\n+  for (int i = 0; i < shared_stub_to_interp_requests->length();) {\n+    address stub = masm.start_a_stub(CompiledStaticCall::to_interp_stub_size());\n+    if (stub == NULL) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return false;\n+    }\n+\n+    ciMethod* method = shared_stub_to_interp_requests->at(i).shared_method();\n+    do {\n+      address caller_pc = cb->insts_begin() + shared_stub_to_interp_requests->at(i).call_offset();\n+      masm.relocate(static_stub_Relocation::spec(caller_pc), relocate_format);\n+      ++i;\n+    } while (i < shared_stub_to_interp_requests->length() && shared_stub_to_interp_requests->at(i).shared_method() == method);\n+    masm.emit_static_call_stub();\n+    masm.end_a_stub();\n+  }\n+  return true;\n+}\n+\n+#endif \/\/ SHARE_ASM_CODEBUFFER_INLINE_HPP\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.inline.hpp","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -452,1 +452,0 @@\n-\n@@ -459,2 +458,8 @@\n-  \/\/ emit the static call stub stuff out of line\n-  emit_static_call_stub();\n+  if (CodeBuffer::supports_shared_stubs() && op->method()->can_be_statically_bound()) {\n+    \/\/ Calls of the same statically bound method can share\n+    \/\/ a stub to the interpreter.\n+    CodeBuffer::csize_t call_offset = pc() - _masm->code()->insts_begin();\n+    _masm->code()->shared_stub_to_interp_for(op->method(), call_offset);\n+  } else {\n+    emit_static_call_stub();\n+  }\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1120,0 +1120,4 @@\n+    if (!failing()) {\n+      code_buffer->finalize_stubs();\n+    }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2059,2 +2059,2 @@\n-  develop(bool, TraceOptimizedUpcallStubs, false,                              \\\n-                \"Trace optimized upcall stub generation\")                      \\\n+  develop(bool, TraceOptimizedUpcallStubs, false,                           \\\n+                \"Trace optimized upcall stub generation\")                   \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test SharedStubToInterpTest\n+ * @summary Checks that stubs to the interpreter can be shared for static or final method.\n+ * @bug 8280481\n+ * @library \/test\/lib\n+ *\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"i386\" | os.arch==\"x86\" | os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.sharedstubs.SharedStubToInterpTest\n+ *\/\n+\n+package compiler.sharedstubs;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SharedStubToInterpTest {\n+    private final static int ITERATIONS_TO_HEAT_LOOP = 20_000;\n+\n+    private static void runTest(String compiler, String test) throws Exception {\n+        String testClassName = SharedStubToInterpTest.class.getName() + \"$\" + test;\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(compiler);\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:CompileCommand=compileonly,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=print,\" + testClassName + \"::\" + \"test\");\n+        command.add(\"-XX:CompileCommand=exclude,\" + testClassName + \"::\" + \"log01\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"log01\");\n+        command.add(\"-XX:CompileCommand=exclude,\" + testClassName + \"::\" + \"log02\");\n+        command.add(\"-XX:CompileCommand=dontinline,\" + testClassName + \"::\" + \"log02\");\n+        command.add(testClassName);\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        List<String> compilers = java.util.Arrays.asList(\"-XX:-TieredCompilation\" \/* C2 *\/,\n+            \"-XX:TieredStopAtLevel=1\" \/* C1 *\/);\n+        List<String> tests = java.util.Arrays.asList(\"StaticMethodTest\",\n+            \"FinalClassTest\", \"FinalMethodTest\");\n+        for (String compiler : compilers) {\n+            for (String test : tests) {\n+                runTest(compiler, test);\n+            }\n+        }\n+    }\n+\n+    private static String skipTo(Iterator<String> iter, String substring) {\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.contains(substring)) {\n+                return nextLine;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void checkOutput(OutputAnalyzer output) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+\n+        String match = skipTo(iter, \"Compiled method\");\n+        while (match != null && !match.contains(\"Test::test\")) {\n+            match = skipTo(iter, \"Compiled method\");\n+        }\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing compiler output for the method 'test'\");\n+        }\n+\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.contains(\"{static_stub}\")) {\n+                \/\/ Static stubs must be created at the end of the Stub section.\n+                throw new RuntimeException(\"Found {static_stub} before Deopt Handler Code\");\n+            } else if (nextLine.contains(\"{runtime_call DeoptimizationBlob}\")) {\n+                \/\/ Shared static stubs are put after Deopt Handler Code.\n+                break;\n+            }\n+        }\n+\n+        int foundStaticStubs = 0;\n+        while (iter.hasNext()) {\n+            if (iter.next().contains(\"{static_stub}\")) {\n+                foundStaticStubs += 1;\n+            }\n+        }\n+\n+        final int expectedStaticStubs = 2;\n+        if (foundStaticStubs != expectedStaticStubs) {\n+            throw new RuntimeException(\"Found static stubs: \" + foundStaticStubs + \"; Expected static stubs: \" + expectedStaticStubs);\n+        }\n+    }\n+\n+    public static class StaticMethodTest {\n+        static void log01(int i) {\n+        }\n+        static void log02(int i) {\n+        }\n+\n+        static void test(int i) {\n+            if (i % 3 == 0) {\n+                log01(i);\n+                log02(i);\n+            } else {\n+                log01(i);\n+                log02(i);\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                test(i);\n+            }\n+        }\n+    }\n+\n+    public static final class FinalClassTest {\n+        void log01(int i) {\n+        }\n+        void log02(int i) {\n+        }\n+\n+        void test(int i) {\n+            if (i % 3 == 0) {\n+                log01(i);\n+                log02(i);\n+            } else {\n+                log01(i);\n+                log02(i);\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            FinalClassTest tFC = new FinalClassTest();\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                tFC.test(i);\n+            }\n+        }\n+    }\n+\n+    public static class FinalMethodTest {\n+        final void log01(int i) {\n+        }\n+        final void log02(int i) {\n+        }\n+\n+        void test(int i) {\n+            if (i % 3 == 0) {\n+                log01(i);\n+                log02(i);\n+            } else {\n+                log01(i);\n+                log02(i);\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            FinalMethodTest tFM = new FinalMethodTest();\n+            for (int i = 1; i < ITERATIONS_TO_HEAT_LOOP; ++i) {\n+                tFM.test(i);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStubToInterpTest.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"}]}