{"files":[{"patch":"@@ -563,0 +563,6 @@\n+  \/\/ Check if it's java.lang.Class, because java.lang.Class may not be loaded by\n+  \/\/ current classloader. And this helps to avoid deoptimizations (see JDK-8278135)\n+  if (found_klass == NULL && sym == vmSymbols::java_lang_Class()) {\n+    return Class_klass();\n+  }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.exceptions;\n+\n+public class CodeDependenciesSimple {\n+    private static Class clzOne;\n+    private static Class clzTwo;\n+    public static void main(String[] args) throws Exception {\n+        clzOne = Object.class;\n+        for (int i = 0; i < 3000000; i++) {\n+            foo();\n+        }\n+    }\n+    public static void foo() {\n+        clzTwo = clzOne;\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/CodeDependenciesSimple.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8278135\n+ * @summary Excessive null check guard deoptimization due to java.lang.Class unloaded\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.debug == true\n+ * @compile CodeDependenciesSimple.java\n+ *\n+ * @run driver compiler.exceptions.ExcessiveNullGuardDeopt\n+ *\/\n+\n+package compiler.exceptions;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ExcessiveNullGuardDeopt {\n+    public static void main(String[] args) throws Exception {\n+        String[] procArgs = new String[] {\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+TraceDeoptimization\",\n+            \"-XX:CompileOnly=compiler\/exceptions\/CodeDependenciesSimple.foo\",\n+            \"compiler.exceptions.CodeDependenciesSimple\",\n+        };\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        System.out.println(output.getOutput());\n+        output.shouldHaveExitValue(0);\n+        output.shouldNotContain(\"reason=null_assert_or_unreached0\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/ExcessiveNullGuardDeopt.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}