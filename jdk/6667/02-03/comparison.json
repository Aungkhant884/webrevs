{"files":[{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (C) 2021 THL A29 Limited, a Tencent company All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/*\n- * @test\n- * @bug 8278135\n- * @summary Excessive null check guard deoptimization due to java.lang.Class unloaded\n- *\n- * @library \/test\/lib\n- *\n- * @requires vm.compiler2.enabled\n- * @requires vm.debug == true\n- * @compile CodeDependenciesSimple.java\n- *\n- * @run driver compiler.exceptions.ExcessiveNullGuardDeopt\n- *\/\n-\n-package compiler.exceptions;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class ExcessiveNullGuardDeopt {\n-    public static void main(String[] args) throws Exception {\n-        String[] procArgs = new String[] {\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+TraceDeoptimization\",\n-            \"-XX:CompileOnly=compiler\/exceptions\/CodeDependenciesSimple.foo\",\n-            \"compiler.exceptions.CodeDependenciesSimple\",\n-        };\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        System.out.println(output.getOutput());\n-        output.shouldHaveExitValue(0);\n-        output.shouldNotContain(\"reason=null_assert_or_unreached0\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/ExcessiveNullGuardDeopt.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -23,1 +23,1 @@\n-package compiler.exceptions;\n+package compiler.uncommontrap;\n@@ -38,1 +38,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/CodeDependenciesSimple.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/CodeDependenciesSimple.java","status":"renamed"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8278135\n+ * @summary Excessive null check guard deoptimization due to java.lang.Class unloaded\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.debug == true\n+ * @compile CodeDependenciesSimple.java\n+ *\n+ * @run driver compiler.uncommontrap.ExcessiveNullGuardDeopt\n+ *\/\n+\n+package compiler.uncommontrap;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ExcessiveNullGuardDeopt {\n+    public static void main(String[] args) throws Exception {\n+        String[] procArgs = new String[] {\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+TraceDeoptimization\",\n+            \"-XX:CompileOnly=compiler\/uncommontrap\/CodeDependenciesSimple.foo\",\n+            \"compiler.uncommontrap.CodeDependenciesSimple\",\n+        };\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        System.out.println(output.getOutput());\n+        output.shouldHaveExitValue(0);\n+        output.shouldNotContain(\"reason=null_assert_or_unreached0\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/ExcessiveNullGuardDeopt.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}