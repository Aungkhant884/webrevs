{"files":[{"patch":"@@ -16676,1 +16676,1 @@\n-    \/\/ Count is in 8-bit bytes; non-Compact chars are 16 bits.\n+    \/\/ Count is in 8-bit bytes; non-Compact chars are 8 bits.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4766,1 +4766,1 @@\n-  Label SAME, DONE, SHORT, NEXT_WORD;\n+  Label SAME, DONE, SHORT, NEXT_WORD, MEDIUM, NEXT_TWO_WORDS;\n@@ -4785,0 +4785,24 @@\n+  \/\/ Check for short strings, i.e. smaller than wordSize * 2.\n+  subs(cnt1, cnt1, wordSize * 2);\n+  br(Assembler::LT, MEDIUM);\n+  \/\/ Main 16 byte comparison loop.\n+  bind(NEXT_TWO_WORDS); {\n+    ldr(v0, Q, Address(post(a1, wordSize * 2)));\n+    ldr(v1, Q, Address(post(a2, wordSize * 2)));\n+    subs(cnt1, cnt1, wordSize * 2);\n+    eor(v0, T16B, v0, v1);\n+    mov(tmp1, v0, T2D, 0);\n+    cbnz(tmp1, DONE);\n+    mov(tmp2, v0, T2D, 1);\n+    cbnz(tmp2, DONE);\n+  } br(GT, NEXT_TWO_WORDS);\n+  \/\/ Same as MEDIUM\n+  ldr(v0, Q, Address(a1, cnt1));\n+  ldr(v1, Q, Address(a2, cnt1));\n+  eor(v0, T16B, v0, v1);\n+  mov(tmp1, v0, T2D, 0);\n+  cbnz(tmp1, DONE);\n+  mov(tmp2, v0, T2D, 1);\n+  cbnz(tmp2, DONE);\n+  b(SAME);\n+\n@@ -4786,1 +4810,2 @@\n-  subs(cnt1, cnt1, wordSize);\n+  bind(MEDIUM);\n+  adds(cnt1, cnt1, wordSize);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}