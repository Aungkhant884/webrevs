{"files":[{"patch":"@@ -4785,19 +4785,31 @@\n-    Label STUB, LOOP;\n-    subs(zr, cnt1, stubBytesThreshold);\n-    br(GE, STUB);\n-\n-    bind(LOOP); {\n-      ldr(tmp1, Address(post(a1, wordSize)));\n-      ldr(tmp2, Address(post(a2, wordSize)));\n-      subs(cnt1, cnt1, wordSize);\n-      eor(tmp1, tmp1, tmp2);\n-      cbnz(tmp1, DONE);\n-      br(LT, SHORT);\n-\n-      ldr(tmp1, Address(post(a1, wordSize)));\n-      ldr(tmp2, Address(post(a2, wordSize)));\n-      subs(cnt1, cnt1, wordSize);\n-      eor(tmp1, tmp1, tmp2);\n-      cbnz(tmp1, DONE);\n-    } br(GE, LOOP);\n-    b(SHORT);\n+    Label STUB, B16, B24;\n+\n+    subs(cnt1, cnt1, wordSize);\n+    br(LE, B16);\n+    subs(cnt1, cnt1, wordSize);\n+    br(LE, B24);\n+    subs(cnt1, cnt1, wordSize);\n+    br(GT, STUB);\n+\n+    ldr(rscratch1, Address(post(a1, wordSize)));\n+    ldr(rscratch2, Address(post(a2, wordSize)));\n+    eor(rscratch1, rscratch1, rscratch2);\n+    cbnz(rscratch1, DONE);\n+\n+    bind(B24);\n+    ldr(rscratch1, Address(post(a1, wordSize)));\n+    ldr(rscratch2, Address(post(a2, wordSize)));\n+    eor(rscratch2, rscratch1, rscratch2);\n+    cbnz(rscratch2, DONE);\n+\n+    bind(B16);\n+    ldr(rscratch1, Address(post(a1, wordSize)));\n+    ldr(rscratch2, Address(post(a2, wordSize)));\n+    eor(rscratch1, rscratch1, rscratch2);\n+    cbnz(rscratch1, DONE);\n+\n+    ldr(rscratch1, Address(a1, cnt1));\n+    ldr(rscratch2, Address(a2, cnt1));\n+    eor(rscratch2, rscratch1, rscratch2);\n+    cbnz(rscratch2, DONE);\n+    b(SAME);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":31,"deletions":19,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -4640,4 +4640,3 @@\n-    Register a1 = r1, a2 = r3, result = r0, cnt1 = r4, tmp1 = rscratch1,\n-        tmp2 = rscratch2;\n-    Label TAIL, NOT_EQUAL, EQUAL, LOOP, SMALL_LOOP, POST_LOOP;\n-    int loopThreshold = 4 * 2 * wordSize;\n+    Register a1 = r1, a2 = r3, result = r0, cnt1 = r4;\n+    Label NOT_EQUAL, EQUAL, LOOP, SMALL_LOOP, POST_LOOP;\n+    int loopThreshold = 4 * wordSize;\n@@ -4645,1 +4644,1 @@\n-    assert_different_registers(a1, a2, result, cnt1, tmp1, tmp2);\n+    assert_different_registers(a1, a2, result, cnt1);\n@@ -4654,2 +4653,2 @@\n-    \/\/ cnt1 minus wordSize outside of stub\n-    __ add(cnt1, cnt1, wordSize);\n+    \/\/ reset cnt1\n+    __ add(cnt1, cnt1, loopThreshold);\n@@ -4657,0 +4656,1 @@\n+    \/\/ Main 32 byte comparison loop.\n@@ -4658,25 +4658,1 @@\n-      __ ldr(v0, __ Q, Address(__ post(a1, wordSize * 2)));\n-      __ ldr(v1, __ Q, Address(__ post(a2, wordSize * 2)));\n-      __ eor(v0, __ T16B, v0, v1);\n-      __ umov(tmp1, v0, __ D, 0);\n-      __ umov(tmp2, v0, __ D, 1);\n-      __ orr(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n-\n-      __ ldr(v2, __ Q, Address(__ post(a1, wordSize * 2)));\n-      __ ldr(v3, __ Q, Address(__ post(a2, wordSize * 2)));\n-      __ eor(v2, __ T16B, v2, v3);\n-      __ umov(tmp1, v2, __ D, 0);\n-      __ umov(tmp2, v2, __ D, 1);\n-      __ orr(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n-\n-      __ ldr(v4, __ Q, Address(__ post(a1, wordSize * 2)));\n-      __ ldr(v5, __ Q, Address(__ post(a2, wordSize * 2)));\n-      __ eor(v4, __ T16B, v4, v5);\n-      __ umov(tmp1, v4, __ D, 0);\n-      __ umov(tmp2, v4, __ D, 1);\n-      __ orr(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n-\n-      __ ldr(v6, __ Q, Address(__ post(a1, wordSize * 2)));\n+      __ ld1(v0, v1, __ T2D, Address(__ post(a1, loopThreshold)));\n@@ -4684,7 +4660,9 @@\n-      __ ldr(v7, __ Q, Address(__ post(a2, wordSize * 2)));\n-      __ subs(tmp1, cnt1, loopThreshold);\n-      __ eor(v6, __ T16B, v6, v7);\n-      __ umov(tmp1, v6, __ D, 0);\n-      __ umov(tmp2, v6, __ D, 1);\n-      __ orr(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n+      __ ld1(v2, v3, __ T2D, Address(__ post(a2, loopThreshold)));\n+      __ subs(zr, cnt1, loopThreshold);\n+      __ eor(v0, __ T16B, v0, v2);\n+      __ eor(v1, __ T16B, v1, v3);\n+      __ orr(v0, __ T16B, v0, v1);\n+      __ umov(rscratch1, v0, __ D, 0);\n+      __ umov(rscratch2, v0, __ D, 1);\n+      __ orr(rscratch1, rscratch1, rscratch2);\n+      __ cbnz(rscratch1, NOT_EQUAL);\n@@ -4693,4 +4671,4 @@\n-    __ bind(TAIL);\n-      __ cbz(cnt1, EQUAL);\n-      __ subs(cnt1, cnt1, wordSize);\n-      __ br(__ LE, POST_LOOP);\n+    __ cbz(cnt1, EQUAL);\n+    __ subs(cnt1, cnt1, wordSize);\n+    __ br(__ LE, POST_LOOP);\n+\n@@ -4698,2 +4676,2 @@\n-      __ ldr(tmp1, Address(__ post(a1, wordSize)));\n-      __ ldr(tmp2, Address(__ post(a2, wordSize)));\n+      __ ldr(rscratch1, Address(__ post(a1, wordSize)));\n+      __ ldr(rscratch2, Address(__ post(a2, wordSize)));\n@@ -4701,2 +4679,2 @@\n-      __ eor(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n+      __ eor(rscratch1, rscratch1, rscratch2);\n+      __ cbnz(rscratch1, NOT_EQUAL);\n@@ -4705,4 +4683,4 @@\n-      __ ldr(tmp1, Address(a1, cnt1));\n-      __ ldr(tmp2, Address(a2, cnt1));\n-      __ eor(tmp1, tmp1, tmp2);\n-      __ cbnz(tmp1, NOT_EQUAL);\n+      __ ldr(rscratch1, Address(a1, cnt1));\n+      __ ldr(rscratch2, Address(a2, cnt1));\n+      __ eor(rscratch1, rscratch1, rscratch2);\n+      __ cbnz(rscratch1, NOT_EQUAL);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":29,"deletions":51,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations=3, time=1)\n+@Measurement(iterations=5, time=1)\n@@ -36,0 +38,1 @@\n+@Fork(value=1)\n@@ -37,1 +40,1 @@\n-    @Param({\"8\", \"16\", \"32\", \"64\", \"128\"})\n+    @Param({\"8\", \"11\", \"16\", \"22\", \"32\", \"45\", \"64\", \"91\", \"121\", \"181\", \"256\", \"512\", \"1024\"})\n@@ -51,0 +54,1 @@\n+    public String strDup;\n@@ -57,0 +61,1 @@\n+        strDup = new String (str.toCharArray());\n@@ -71,5 +76,0 @@\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean different_simple() {\n-        return test.equals(test2);\n-    }\n-\n@@ -77,15 +77,5 @@\n-        return test.equals(test2);\n-    }\n-\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean equal_simple() {\n-        return test.equals(test3);\n-    }\n-\n-    public boolean equal() {\n-        return test.equals(test3);\n-    }\n-\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean almostEqual_simple() {\n-        return test.equals(test6);\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= test.equals(test2);\n+        }\n+        return result;\n@@ -95,6 +85,5 @@\n-        return test.equals(test6);\n-    }\n-\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean almostEqualUTF16_simple() {\n-        return test4.equals(test7);\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= test.equals(test6);\n+        }\n+        return result;\n@@ -104,6 +93,5 @@\n-        return test4.equals(test7);\n-    }\n-\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean differentCoders_simple() {\n-        return test.equals(test4);\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= test4.equals(test7);\n+        }\n+        return result;\n@@ -113,6 +101,5 @@\n-        return test.equals(test4);\n-    }\n-\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean equalsUTF16_simple() {\n-        return test5.equals(test4);\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= test.equals(test4);\n+        }\n+        return result;\n@@ -121,2 +108,6 @@\n-    public boolean equalsUTF16() {\n-        return test5.equals(test4);\n+    public boolean equalUTF16() {\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= test5.equals(test4);\n+        }\n+        return result;\n@@ -125,4 +116,6 @@\n-    @Benchmark\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean equalsLenH_simple() {\n-        return str.equals(strh);\n+    public boolean equalDiffAtHead() {\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= str.equals(strh);\n+        }\n+        return result;\n@@ -131,3 +124,6 @@\n-    @Benchmark\n-    public boolean equalsLenH() {\n-        return str.equals(strh);\n+    public boolean equalDiffAtTail() {\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= str.equals(strt);\n+        }\n+        return result;\n@@ -137,3 +133,7 @@\n-    @Fork(jvmArgsAppend = {\"-XX:+UseSimpleStringEquals\"})\n-    public boolean equalsLenT_simple() {\n-        return str.equals(strt);\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public boolean equal() {\n+        boolean result = false;\n+        for (int i = 0; i < 1000; i++) {\n+            result ^= str.equals(strDup);\n+        }\n+        return result;\n@@ -141,0 +141,1 @@\n+}\n@@ -142,5 +143,0 @@\n-    @Benchmark\n-    public boolean equalsLenT() {\n-        return str.equals(strt);\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringEquals.java","additions":53,"deletions":57,"binary":false,"changes":110,"status":"modified"}]}