{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.internal.event.FinalizerEvent;\n@@ -88,0 +89,1 @@\n+                Class<?> finalizedClass = finalizee.getClass();\n@@ -93,0 +95,7 @@\n+\n+                FinalizerEvent event = new FinalizerEvent();\n+                if (event.shouldCommit()) {\n+                    event.finalizedClass = finalizedClass;\n+                    event.commit();\n+                }\n+                finalizedClass = null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Finalizer.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\/**\n+ * Event details for the running of a finalizer\n+ *\/\n+public class FinalizerEvent extends Event {\n+    \/\/ boolean isJDKclass?\n+    public Class<?> finalizedClass;\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/FinalizerEvent.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+\n+@Category({\"Java Virtual Machine\", \"GC\", \"Finalization\"})\n+@Label(\"Finalizer Called\")\n+@Name(\"jdk.Finalizer\")\n+@Description(\"A finalizer method was called\")\n+@MirrorEvent(className = \"jdk.internal.event.FinalizerEvent\")\n+public final class FinalizerEvent extends AbstractJDKEvent {\n+    @Label (\"Finalized Class\")\n+    public Class<?> finalizedClass;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/FinalizerEvent.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.events.FinalizerEvent;\n@@ -60,0 +61,1 @@\n+        FinalizerEvent.class,\n@@ -79,0 +81,1 @@\n+        jdk.internal.event.FinalizerEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -475,0 +475,5 @@\n+    <event name=\"jdk.Finalizer\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">false<\/setting>\n+    <\/event>\n+    \n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -475,0 +475,5 @@\n+    <event name=\"jdk.Finalizer\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">false<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,6 @@\n+\/* @test\n+ * @bug 8266936\n+ * @summary Test with finalization JFR event\n+ * @requires vm.hasJFR\n+ * @run main\/othervm -XX:StartFlightRecording=dumponexit=true FinalizeOverride\n+ *\/\n","filename":"test\/jdk\/java\/lang\/ref\/FinalizeOverride.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.gc.finalization;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedClass;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 8266936\n+ * @summary Test the finalization JFR event\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run testng\/othervm jdk.jfr.event.gc.finalization.TestFinalizerEvent\n+ *\/\n+\n+public class TestFinalizerEvent {\n+    static volatile boolean finalizerRun = false;\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.Finalizer);\n+            recording.start();\n+\n+            FinalizableClass finalizeMe = new FinalizableClass();\n+            System.out.println(\"Created: \" + finalizeMe);\n+            finalizeMe = null;\n+            while (!finalizerRun) {\n+                System.gc();\n+                Thread.sleep(1000);\n+            }\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            assertEquals(events.size(), 1);\n+            for (RecordedEvent event : events) {\n+                System.out.println(\"Event: \" + event);\n+                assertTrue(event.hasField(\"finalizedClass\"));\n+                RecordedClass clazz = event.getValue(\"finalizedClass\");\n+                assertEquals(clazz.getName(), FinalizableClass.class.getName());\n+            }\n+        }\n+    }\n+}\n+\n+class FinalizableClass {\n+    @Override\n+    protected void finalize() {\n+        System.out.println(\"FinalizeClass.finalize() called\");\n+        TestFinalizerEvent.finalizerRun = true;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/finalization\/TestFinalizerEvent.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -180,0 +180,1 @@\n+        insertSetting(doc, EventNames.Finalizer, \"threshold\", \"0 ns\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestDefaultConfigurations.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -208,0 +208,1 @@\n+        settingValues.put(EventNames.Finalizer + \"#threshold\", \"0 ns\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveSettingEvent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -203,0 +203,1 @@\n+    public final static String Finalizer = PREFIX + \"Finalizer\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}