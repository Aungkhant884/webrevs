{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-        this.reqHdrs = req.headers();\n+        this.reqHdrs = new UnmodifiableHeaders(req.headers());\n@@ -102,1 +102,1 @@\n-        return new UnmodifiableHeaders (reqHdrs);\n+        return reqHdrs;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.function.BiFunction;\n@@ -31,1 +32,1 @@\n-class UnmodifiableHeaders extends Headers {\n+public class UnmodifiableHeaders extends Headers {\n@@ -33,1 +34,2 @@\n-        Headers map;\n+    private final Headers headers;  \/\/ modifiable, but no reference to it escapes\n+    private final Map<String, List<String>> map;  \/\/ unmodifiable\n@@ -35,3 +37,7 @@\n-        UnmodifiableHeaders(Headers map) {\n-            this.map = map;\n-        }\n+    public UnmodifiableHeaders(Headers headers) {\n+        var h = headers;\n+        var unmodHeaders = new Headers();\n+        h.forEach((k, v) -> unmodHeaders.put(k, Collections.unmodifiableList(v)));\n+        this.map = Collections.unmodifiableMap(unmodHeaders);\n+        this.headers = h;\n+    }\n@@ -39,1 +45,1 @@\n-        public int size() {return map.size();}\n+    public int size() {return headers.size();}\n@@ -41,1 +47,1 @@\n-        public boolean isEmpty() {return map.isEmpty();}\n+    public boolean isEmpty() {return headers.isEmpty();}\n@@ -43,3 +49,1 @@\n-        public boolean containsKey(Object key) {\n-            return map.containsKey (key);\n-        }\n+    public boolean containsKey(Object key) { return headers.containsKey(key); }\n@@ -47,3 +51,1 @@\n-        public boolean containsValue(Object value) {\n-            return map.containsValue(value);\n-        }\n+    public boolean containsValue(Object value) { return headers.containsValue(value); }\n@@ -51,3 +53,4 @@\n-        public List<String> get(Object key) {\n-            return map.get(key);\n-        }\n+    public List<String> get(Object key) {\n+        List<String> l = headers.get(key);\n+        return l == null ? null : Collections.unmodifiableList(l);\n+    }\n@@ -55,3 +58,1 @@\n-        public String getFirst (String key) {\n-            return map.getFirst(key);\n-        }\n+    public String getFirst(String key) { return headers.getFirst(key); }\n@@ -59,0 +60,3 @@\n+    public List<String> put(String key, List<String> value) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -60,3 +64,3 @@\n-        public List<String> put(String key, List<String> value) {\n-            return map.put (key, value);\n-        }\n+    public void add(String key, String value) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -64,3 +68,3 @@\n-        public void add (String key, String value) {\n-            throw new UnsupportedOperationException (\"unsupported operation\");\n-        }\n+    public void set(String key, String value) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -68,3 +72,3 @@\n-        public void set (String key, String value) {\n-            throw new UnsupportedOperationException (\"unsupported operation\");\n-        }\n+    public List<String> remove(Object key) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -72,3 +76,3 @@\n-        public List<String> remove(Object key) {\n-            throw new UnsupportedOperationException (\"unsupported operation\");\n-        }\n+    public void putAll(Map<? extends String,? extends List<String>> t)  {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -76,3 +80,3 @@\n-        public void putAll(Map<? extends String,? extends List<String>> t)  {\n-            throw new UnsupportedOperationException (\"unsupported operation\");\n-        }\n+    public void clear() {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -80,3 +84,1 @@\n-        public void clear() {\n-            throw new UnsupportedOperationException (\"unsupported operation\");\n-        }\n+    public Set<String> keySet() { return map.keySet(); }\n@@ -84,3 +86,1 @@\n-        public Set<String> keySet() {\n-            return Collections.unmodifiableSet (map.keySet());\n-        }\n+    public Collection<List<String>> values() { return map.values(); }\n@@ -88,3 +88,1 @@\n-        public Collection<List<String>> values() {\n-            return Collections.unmodifiableCollection(map.values());\n-        }\n+    \/* TODO check that contents of set are not modifable : security *\/\n@@ -92,1 +90,1 @@\n-        \/* TODO check that contents of set are not modifable : security *\/\n+    public Set<Map.Entry<String, List<String>>> entrySet() { return map.entrySet(); }\n@@ -94,3 +92,3 @@\n-        public Set<Map.Entry<String, List<String>>> entrySet() {\n-            return Collections.unmodifiableSet (map.entrySet());\n-        }\n+    public List<String> replace(String key, List<String> value) {\n+        throw new UnsupportedOperationException(\"unsupported operation\");\n+    }\n@@ -98,1 +96,3 @@\n-        public boolean equals(Object o) {return map.equals(o);}\n+    public boolean replace(String key, List<String> oldValue, List<String> newValue) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n+    }\n@@ -100,1 +100,2 @@\n-        public int hashCode() {return map.hashCode();}\n+    public void replaceAll(BiFunction<? super String, ? super List<String>, ? extends List<String>> function) {\n+        throw new UnsupportedOperationException (\"unsupported operation\");\n@@ -102,0 +103,5 @@\n+\n+    public boolean equals(Object o) {return headers.equals(o);}\n+\n+    public int hashCode() {return headers.hashCode();}\n+}\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/UnmodifiableHeaders.java","additions":56,"deletions":50,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8251496\n+ * @summary Test that UnmodifiableHeaders is in fact immutable\n+ * @modules jdk.httpserver\/sun.net.httpserver:+open\n+ * @run testng\/othervm UnmodifiableHeadersTest\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpContext;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpPrincipal;\n+import org.testng.annotations.Test;\n+import sun.net.httpserver.UnmodifiableHeaders;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+public class UnmodifiableHeadersTest {\n+\n+    @Test\n+    public static void testEquality() {\n+        var headers = new Headers();\n+        var unmodifiableHeaders1 = new UnmodifiableHeaders(headers);\n+        assertEquals(unmodifiableHeaders1, headers);\n+        assertEquals(unmodifiableHeaders1.hashCode(), headers.hashCode());\n+        assertEquals(unmodifiableHeaders1.get(\"Foo\"), headers.get(\"Foo\"));\n+\n+        headers.add(\"Foo\", \"Bar\");\n+        var unmodifiableHeaders2 = new UnmodifiableHeaders(headers);\n+        assertEquals(unmodifiableHeaders2, headers);\n+        assertEquals(unmodifiableHeaders2.hashCode(), headers.hashCode());\n+        assertEquals(unmodifiableHeaders2.get(\"Foo\"), headers.get(\"Foo\"));\n+    }\n+\n+    @Test\n+    public static void testUnmodifiableHeaders() {\n+        var headers = new Headers();\n+        headers.add(\"Foo\", \"Bar\");\n+        HttpExchange exchange = new TestHttpExchange(headers);\n+\n+        assertUnsupportedOperation(exchange.getRequestHeaders());\n+        assertUnmodifiableCollection(exchange.getRequestHeaders());\n+    }\n+\n+    static final Class<UnsupportedOperationException> UOP = UnsupportedOperationException.class;\n+\n+    static void assertUnsupportedOperation(Headers headers) {\n+        assertThrows(UOP, () -> headers.add(\"a\", \"b\"));\n+        assertThrows(UOP, () -> headers.compute(\"c\", (k, v) -> List.of(\"c\")));\n+        assertThrows(UOP, () -> headers.computeIfAbsent(\"d\", k -> List.of(\"d\")));\n+        assertThrows(UOP, () -> headers.computeIfPresent(\"Foo\", (k, v) -> null));\n+        assertThrows(UOP, () -> headers.merge(\"e\", List.of(\"e\"), (k, v) -> List.of(\"e\")));\n+        assertThrows(UOP, () -> headers.put(\"f\", List.of(\"f\")));\n+        assertThrows(UOP, () -> headers.putAll(Map.of()));\n+        assertThrows(UOP, () -> headers.putIfAbsent(\"g\", List.of(\"g\")));\n+        assertThrows(UOP, () -> headers.remove(\"h\"));\n+        assertThrows(UOP, () -> headers.replace(\"i\", List.of(\"i\")));\n+        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"j\"), List.of(\"j\")));\n+        assertThrows(UOP, () -> headers.replaceAll((k, v) -> List.of(\"k\")));\n+        assertThrows(UOP, () -> headers.set(\"l\", \"m\"));\n+        assertThrows(UOP, () -> headers.clear());\n+    }\n+\n+    static void assertUnmodifiableCollection(Headers headers) {\n+        var entry = new AbstractMap.SimpleEntry<>(\"n\", List.of(\"n\"));\n+\n+        assertThrows(UOP, () -> headers.values().remove(List.of(\"Bar\")));\n+        assertThrows(UOP, () -> headers.values().removeAll(List.of(\"Bar\")));\n+        assertThrows(UOP, () -> headers.keySet().remove(\"Foo\"));\n+        assertThrows(UOP, () -> headers.keySet().removeAll(List.of(\"Foo\")));\n+        assertThrows(UOP, () -> headers.entrySet().remove(entry));\n+        assertThrows(UOP, () -> headers.entrySet().removeAll(List.of(entry)));\n+    }\n+\n+    static void assertUnmodifiableList(Headers headers) {\n+        assertThrows(UOP, () -> headers.get(\"Foo\").remove(0));\n+        assertThrows(UOP, () -> headers.get(\"foo\").remove(0));\n+        assertThrows(UOP, () -> headers.values().stream().findFirst().orElseThrow().remove(0));\n+        assertThrows(UOP, () -> headers.entrySet().stream().findFirst().orElseThrow().getValue().remove(0));\n+    }\n+\n+    static class TestHttpExchange extends StubHttpExchange {\n+        final UnmodifiableHeaders headers;\n+\n+        TestHttpExchange(Headers headers) {\n+            this.headers = new UnmodifiableHeaders(headers);\n+        }\n+\n+        @Override\n+        public Headers getRequestHeaders() {\n+            return headers;\n+        }\n+    }\n+\n+    static class StubHttpExchange extends HttpExchange {\n+        @Override public Headers getRequestHeaders() { return null; }\n+        @Override public Headers getResponseHeaders() { return null; }\n+        @Override public URI getRequestURI() { return null; }\n+        @Override public String getRequestMethod() { return null; }\n+        @Override public HttpContext getHttpContext() { return null; }\n+        @Override public void close() { }\n+        @Override public InputStream getRequestBody() { return null; }\n+        @Override public OutputStream getResponseBody() { return null; }\n+        @Override public void sendResponseHeaders(int rCode, long responseLength) { }\n+        @Override public InetSocketAddress getRemoteAddress() { return null; }\n+        @Override public int getResponseCode() { return 0; }\n+        @Override public InetSocketAddress getLocalAddress() { return null; }\n+        @Override public String getProtocol() { return null; }\n+        @Override public Object getAttribute(String name) { return null; }\n+        @Override public void setAttribute(String name, Object value) { }\n+        @Override public void setStreams(InputStream i, OutputStream o) { }\n+        @Override public HttpPrincipal getPrincipal() { return null; }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/UnmodifiableHeadersTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}