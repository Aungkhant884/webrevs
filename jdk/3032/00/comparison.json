{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.function.BiFunction;\n@@ -31,1 +32,1 @@\n-class UnmodifiableHeaders extends Headers {\n+public class UnmodifiableHeaders extends Headers {\n@@ -33,1 +34,1 @@\n-        Headers map;\n+        private Map<String, List<String>> map;\n@@ -35,2 +36,2 @@\n-        UnmodifiableHeaders(Headers map) {\n-            this.map = map;\n+        public UnmodifiableHeaders(Headers map) {\n+            this.map = Collections.unmodifiableMap(map);\n@@ -55,2 +56,4 @@\n-        public String getFirst (String key) {\n-            return map.getFirst(key);\n+        public String getFirst(String key) {\n+            final var headers = new Headers();\n+            map.forEach((k, v) -> headers.add(k, v.get(0)));\n+            return headers.getFirst(key);\n@@ -59,1 +62,0 @@\n-\n@@ -85,1 +87,1 @@\n-            return Collections.unmodifiableSet (map.keySet());\n+            return Collections.unmodifiableSet(map.keySet());\n@@ -95,1 +97,13 @@\n-            return Collections.unmodifiableSet (map.entrySet());\n+            return Collections.unmodifiableSet(map.entrySet());\n+        }\n+\n+        public List<String> replace(String key, List<String> value) {\n+            throw new UnsupportedOperationException(\"unsupported operation\");\n+        }\n+\n+        public boolean replace(String key, List<String> oldValue, List<String> newValue) {\n+            throw new UnsupportedOperationException (\"unsupported operation\");\n+        }\n+\n+        public void replaceAll(BiFunction<? super String, ? super List<String>, ? extends List<String>> function) {\n+            throw new UnsupportedOperationException (\"unsupported operation\");\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/UnmodifiableHeaders.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8251496\n+ * @summary Test that UnmodifiableHeaders is in fact immutable\n+ * @modules jdk.httpserver\/sun.net.httpserver:+open\n+ * @run testng\/othervm UnmodifiableHeadersTest\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpContext;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpPrincipal;\n+import org.testng.annotations.Test;\n+import sun.net.httpserver.UnmodifiableHeaders;\n+import static org.testng.Assert.assertThrows;\n+\n+public class UnmodifiableHeadersTest {\n+\n+    @Test\n+    public static void testUnmodifiableHeaders() {\n+        var headers = new Headers();\n+        headers.add(\"Foo\", \"Bar\");\n+        HttpExchange exchange = new TestHttpExchange(headers);\n+\n+        assertUnsupportedOperation(exchange.getRequestHeaders());\n+        assertUnmodifiableCollection(exchange.getRequestHeaders());\n+    }\n+\n+    static final Class<UnsupportedOperationException> UOP = UnsupportedOperationException.class;\n+\n+    static void assertUnsupportedOperation(Headers headers) {\n+        assertThrows(UOP, () -> headers.add(\"a\", \"b\"));\n+        assertThrows(UOP, () -> headers.compute(\"c\", (k, v) -> List.of()));\n+        assertThrows(UOP, () -> headers.computeIfAbsent(\"d\", k -> List.of()));\n+        assertThrows(UOP, () -> headers.computeIfPresent(\"Foo\", (k, v) -> null));\n+        assertThrows(UOP, () -> headers.merge(\"e\", List.of(), (k, v) -> List.of()));\n+        assertThrows(UOP, () -> headers.put(\"f\", List.of(\"g\")));\n+        assertThrows(UOP, () -> headers.putAll(Map.of()));\n+        assertThrows(UOP, () -> headers.putIfAbsent(\"h\", List.of()));\n+        assertThrows(UOP, () -> headers.remove(\"i\"));\n+        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"k\")));\n+        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"k\"), List.of(\"k\")));\n+        assertThrows(UOP, () -> headers.replaceAll((k, v) -> List.of()));\n+        assertThrows(UOP, () -> headers.set(\"l\", \"m\"));\n+        assertThrows(UOP, headers::clear);\n+    }\n+\n+    static void assertUnmodifiableCollection(Headers headers) {\n+        var entry = new AbstractMap.SimpleEntry<>(\"n\", List.of(\"o\"));\n+\n+        assertThrows(UOP, () -> headers.values().remove(List.of(\"p\")));\n+        assertThrows(UOP, () -> headers.values().removeAll(List.of(\"q\")));\n+        assertThrows(UOP, () -> headers.keySet().remove(\"r\"));\n+        assertThrows(UOP, () -> headers.keySet().removeAll(List.of(\"s\", \"t\")));\n+        assertThrows(UOP, () -> headers.entrySet().remove(entry));\n+        assertThrows(UOP, () -> headers.entrySet().removeAll(List.of(entry)));\n+    }\n+\n+    static class TestHttpExchange extends StubHttpExchange {\n+        final UnmodifiableHeaders headers;\n+\n+        TestHttpExchange(Headers headers) {\n+            this.headers = new UnmodifiableHeaders(headers);\n+        }\n+\n+        @Override\n+        public Headers getRequestHeaders() {\n+            return headers;\n+        }\n+    }\n+\n+    static class StubHttpExchange extends HttpExchange {\n+        @Override public Headers getRequestHeaders() { return null; }\n+        @Override public Headers getResponseHeaders() { return null; }\n+        @Override public URI getRequestURI() { return null; }\n+        @Override public String getRequestMethod() { return null; }\n+        @Override public HttpContext getHttpContext() { return null; }\n+        @Override public void close() { }\n+        @Override public InputStream getRequestBody() { return null; }\n+        @Override public OutputStream getResponseBody() { return null; }\n+        @Override public void sendResponseHeaders(int rCode, long responseLength) { }\n+        @Override public InetSocketAddress getRemoteAddress() { return null; }\n+        @Override public int getResponseCode() { return 0; }\n+        @Override public InetSocketAddress getLocalAddress() { return null; }\n+        @Override public String getProtocol() { return null; }\n+        @Override public Object getAttribute(String name) { return null; }\n+        @Override public void setAttribute(String name, Object value) { }\n+        @Override public void setStreams(InputStream i, OutputStream o) { }\n+        @Override public HttpPrincipal getPrincipal() { return null; }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/UnmodifiableHeadersTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}