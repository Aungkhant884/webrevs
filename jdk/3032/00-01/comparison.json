{"files":[{"patch":"@@ -34,5 +34,10 @@\n-        private Map<String, List<String>> map;\n-\n-        public UnmodifiableHeaders(Headers map) {\n-            this.map = Collections.unmodifiableMap(map);\n-        }\n+    private final Headers headers;\n+    private final Map<String, List<String>> map;\n+\n+    public UnmodifiableHeaders(Headers headers) {\n+        var h = headers;\n+        Map<String, List<String>> unmodListMap = new HashMap<>();\n+        h.forEach((k, v) -> unmodListMap.put(k, Collections.unmodifiableList(v)));\n+        this.map = Collections.unmodifiableMap(unmodListMap);\n+        this.headers = h;\n+    }\n@@ -57,2 +62,0 @@\n-            final var headers = new Headers();\n-            map.forEach((k, v) -> headers.add(k, v.get(0)));\n@@ -63,1 +66,1 @@\n-            return map.put (key, value);\n+            throw new UnsupportedOperationException (\"unsupported operation\");\n@@ -86,3 +89,1 @@\n-        public Set<String> keySet() {\n-            return Collections.unmodifiableSet(map.keySet());\n-        }\n+        public Set<String> keySet() { return map.keySet(); }\n@@ -90,3 +91,1 @@\n-        public Collection<List<String>> values() {\n-            return Collections.unmodifiableCollection(map.values());\n-        }\n+        public Collection<List<String>> values() { return map.values(); }\n@@ -96,3 +95,1 @@\n-        public Set<Map.Entry<String, List<String>>> entrySet() {\n-            return Collections.unmodifiableSet(map.entrySet());\n-        }\n+        public Set<Map.Entry<String, List<String>>> entrySet() { return map.entrySet(); }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/UnmodifiableHeaders.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-        assertThrows(UOP, () -> headers.compute(\"c\", (k, v) -> List.of()));\n-        assertThrows(UOP, () -> headers.computeIfAbsent(\"d\", k -> List.of()));\n+        assertThrows(UOP, () -> headers.compute(\"c\", (k, v) -> List.of(\"c\")));\n+        assertThrows(UOP, () -> headers.computeIfAbsent(\"d\", k -> List.of(\"d\")));\n@@ -66,2 +66,2 @@\n-        assertThrows(UOP, () -> headers.merge(\"e\", List.of(), (k, v) -> List.of()));\n-        assertThrows(UOP, () -> headers.put(\"f\", List.of(\"g\")));\n+        assertThrows(UOP, () -> headers.merge(\"e\", List.of(\"e\"), (k, v) -> List.of(\"e\")));\n+        assertThrows(UOP, () -> headers.put(\"f\", List.of(\"f\")));\n@@ -69,5 +69,5 @@\n-        assertThrows(UOP, () -> headers.putIfAbsent(\"h\", List.of()));\n-        assertThrows(UOP, () -> headers.remove(\"i\"));\n-        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"k\")));\n-        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"k\"), List.of(\"k\")));\n-        assertThrows(UOP, () -> headers.replaceAll((k, v) -> List.of()));\n+        assertThrows(UOP, () -> headers.putIfAbsent(\"g\", List.of(\"g\")));\n+        assertThrows(UOP, () -> headers.remove(\"h\"));\n+        assertThrows(UOP, () -> headers.replace(\"i\", List.of(\"i\")));\n+        assertThrows(UOP, () -> headers.replace(\"j\", List.of(\"j\"), List.of(\"j\")));\n+        assertThrows(UOP, () -> headers.replaceAll((k, v) -> List.of(\"k\")));\n@@ -75,1 +75,1 @@\n-        assertThrows(UOP, headers::clear);\n+        assertThrows(UOP, () -> headers.clear());\n@@ -79,1 +79,1 @@\n-        var entry = new AbstractMap.SimpleEntry<>(\"n\", List.of(\"o\"));\n+        var entry = new AbstractMap.SimpleEntry<>(\"n\", List.of(\"n\"));\n@@ -81,4 +81,4 @@\n-        assertThrows(UOP, () -> headers.values().remove(List.of(\"p\")));\n-        assertThrows(UOP, () -> headers.values().removeAll(List.of(\"q\")));\n-        assertThrows(UOP, () -> headers.keySet().remove(\"r\"));\n-        assertThrows(UOP, () -> headers.keySet().removeAll(List.of(\"s\", \"t\")));\n+        assertThrows(UOP, () -> headers.values().remove(List.of(\"Bar\")));\n+        assertThrows(UOP, () -> headers.values().removeAll(List.of(\"Bar\")));\n+        assertThrows(UOP, () -> headers.keySet().remove(\"Foo\"));\n+        assertThrows(UOP, () -> headers.keySet().removeAll(List.of(\"Foo\")));\n@@ -89,0 +89,6 @@\n+    static void assertUnmodifiableList(Headers headers) {\n+        assertThrows(UOP, () -> headers.get(\"Foo\").remove(0));\n+        assertThrows(UOP, () -> headers.values().stream().findFirst().orElseThrow().remove(0));\n+        assertThrows(UOP, () -> headers.entrySet().stream().findFirst().orElseThrow().getValue().remove(0));\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/UnmodifiableHeadersTest.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"}]}