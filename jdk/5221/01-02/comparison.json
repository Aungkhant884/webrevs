{"files":[{"patch":"@@ -271,1 +271,0 @@\n-        DerValue prf = null;\n@@ -273,8 +272,3 @@\n-        if (pBKDF2_params.data.available() > 0) {\n-            DerValue keyLength = pBKDF2_params.data.getDerValue();\n-            if (keyLength.tag == DerValue.tag_Integer) {\n-                keysize = keyLength.getInteger() * 8; \/\/ keysize (in bits)\n-            } else {\n-                \/\/ Should be the prf\n-                prf = keyLength;\n-            }\n+        var ksDer = pBKDF2_params.data.getOptional(DerValue.tag_Integer);\n+        if (ksDer.isPresent()) {\n+            keysize = ksDer.get().getInteger() * 8; \/\/ keysize (in bits)\n@@ -282,0 +276,1 @@\n+\n@@ -283,7 +278,4 @@\n-        String kdfAlgo = \"HmacSHA1\";\n-        if (prf == null) {\n-            if (pBKDF2_params.data.available() > 0) {\n-                prf = pBKDF2_params.data.getDerValue();\n-            }\n-        }\n-        if (prf != null) {\n+        String kdfAlgo;\n+        var prfDer = pBKDF2_params.data.getOptional(DerValue.tag_Sequence);\n+        if (prfDer.isPresent()) {\n+            DerValue prf = prfDer.get();\n@@ -293,4 +285,4 @@\n-                !o.stdName().equals(\"HmacSHA224\") &&\n-                !o.stdName().equals(\"HmacSHA256\") &&\n-                !o.stdName().equals(\"HmacSHA384\") &&\n-                !o.stdName().equals(\"HmacSHA512\"))) {\n+                    !o.stdName().equals(\"HmacSHA224\") &&\n+                    !o.stdName().equals(\"HmacSHA256\") &&\n+                    !o.stdName().equals(\"HmacSHA384\") &&\n+                    !o.stdName().equals(\"HmacSHA512\"))) {\n@@ -302,9 +294,4 @@\n-\n-            if (prf.data.available() != 0) {\n-                \/\/ parameter is 'NULL' for all HmacSHA KDFs\n-                DerValue parameter = prf.data.getDerValue();\n-                if (parameter.tag != DerValue.tag_Null) {\n-                    throw new IOException(\"PBE parameter parsing error: \"\n-                            + \"not an ASN.1 NULL tag\");\n-                }\n-            }\n+            prf.data.getOptional(DerValue.tag_Null);\n+            prf.data.atEnd();\n+        } else {\n+            kdfAlgo = \"HmacSHA1\";\n@@ -312,1 +299,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -258,0 +258,10 @@\n+    \/\/    SignedData ::= SEQUENCE {\n+    \/\/     version Version,\n+    \/\/     digestAlgorithms DigestAlgorithmIdentifiers,\n+    \/\/     contentInfo ContentInfo,\n+    \/\/     certificates\n+    \/\/        [0] IMPLICIT ExtendedCertificatesAndCertificates\n+    \/\/          OPTIONAL,\n+    \/\/     crls\n+    \/\/       [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n+    \/\/     signerInfos SignerInfos }\n@@ -297,3 +307,3 @@\n-        if ((byte)(dis.peekByte()) == (byte)0xA0) {\n-            DerValue[] certVals = dis.getSet(2, true);\n-\n+        var certDer = dis.getOptionalImplicitContextSpecific(0, DerValue.tag_SetOf);\n+        if (certDer.isPresent()) {\n+            DerValue[] certVals = certDer.get().subs(DerValue.tag_SetOf, 2);\n@@ -342,3 +352,3 @@\n-        if ((byte)(dis.peekByte()) == (byte)0xA1) {\n-            DerValue[] crlVals = dis.getSet(1, true);\n-\n+        var crlsDer = dis.getOptionalImplicitContextSpecific(1, DerValue.tag_SetOf);\n+        if (crlsDer.isPresent()) {\n+            DerValue[] crlVals = crlsDer.get().subs(DerValue.tag_SetOf, 1);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-    public boolean checkNextTag(Predicate<Byte> rule) throws IOException {\n+    private boolean checkNextTag(Predicate<Byte> rule) {\n@@ -340,1 +340,1 @@\n-    public boolean checkNextTag(byte tag) throws IOException {\n+    private boolean checkNextTag(byte tag) {\n@@ -344,0 +344,15 @@\n+    \/**\n+     * Returns the next DerValue if its tag is the given one.\n+     *\n+     * @param tag the expected tag\n+     * @return the next DerValue, or empty if not found or stream at end\n+     * @throws IOException if an I\/O error happens\n+     *\/\n+    public Optional<DerValue> getOptional(byte tag) throws IOException {\n+        if (checkNextTag(tag)) {\n+            return Optional.of(getDerValue());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerInputStream.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-     * Wraps a byte array at a single DerValue.\n+     * Wraps a byte array as a single DerValue.\n@@ -319,1 +319,1 @@\n-     * Wraps a byte array at a single DerValue.\n+     * Wraps a byte array as a single DerValue.\n@@ -1257,1 +1257,1 @@\n-    DerValue[] subs(byte expectedTag, int startLen) throws IOException {\n+    public DerValue[] subs(byte expectedTag, int startLen) throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerValue.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- * @summary Ensures OAEPParameters read correct encoding\n+ * @summary Ensures OAEPParameters read correct encoding and\n+ * reject encoding with invalid ordering\n@@ -41,1 +42,1 @@\n-                \"SHA-1\", \"MGF1\", MGF1ParameterSpec.SHA1,\n+                \"SHA-384\", \"MGF1\", MGF1ParameterSpec.SHA384,\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/AlgorithmParameters\/OAEPOrder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}