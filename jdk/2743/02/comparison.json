{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -76,0 +77,1 @@\n+  int32_t pending_threads()        { return Atomic::load(&_pending_threads); }\n@@ -177,7 +179,2 @@\n-class VM_Handshake: public VM_Operation {\n-  const jlong _handshake_timeout;\n- public:\n-  bool evaluate_at_safepoint() const { return false; }\n-\n- protected:\n-  HandshakeOperation* const _op;\n+static void handle_timeout(HandshakeOperation* op, JavaThread* target) {\n+  JavaThreadIteratorWithHandle jtiwh;\n@@ -185,2 +182,2 @@\n-  VM_Handshake(HandshakeOperation* op) :\n-      _handshake_timeout(millis_to_nanos(HandshakeTimeout)), _op(op) {}\n+  log_error(handshake)(\"Handshake timeout: %s(\" INTPTR_FORMAT \"), pending threads: \" INT32_FORMAT,\n+                       op->name(), p2i(op), op->pending_threads());\n@@ -188,3 +185,10 @@\n-  bool handshake_has_timed_out(jlong start_time);\n-  static void handle_timeout();\n-};\n+  if (target == NULL) {\n+    for ( ; JavaThread* thr = jtiwh.next(); ) {\n+      if (thr->handshake_state()->operation_pending(op)) {\n+        log_error(handshake)(\"JavaThread \" INTPTR_FORMAT \" has not cleared handshake op: \" INTPTR_FORMAT, p2i(thr), p2i(op));\n+        target = thr;\n+      }\n+    }\n+  } else {\n+    log_error(handshake)(\"JavaThread \" INTPTR_FORMAT \" has not cleared handshake op: \" INTPTR_FORMAT, p2i(target), p2i(op));\n+  }\n@@ -192,4 +196,7 @@\n-bool VM_Handshake::handshake_has_timed_out(jlong start_time) {\n-  \/\/ Check if handshake operation has timed out\n-  if (_handshake_timeout > 0) {\n-    return os::javaTimeNanos() >= (start_time + _handshake_timeout);\n+  if (target != NULL) {\n+    if (os::signal_thread(target, SIGILL, \"cannot be handshaked\")) {\n+      \/\/ Give target a chance to report the error and terminate the VM.\n+      os::naked_sleep(3000);\n+    }\n+  } else {\n+    log_error(handshake)(\"No thread with an unfinished handshake op(\" INTPTR_FORMAT \") found.\", p2i(op));\n@@ -197,1 +204,1 @@\n-  return false;\n+  fatal(\"Handshake timeout\");\n@@ -200,6 +207,6 @@\n-void VM_Handshake::handle_timeout() {\n-  LogStreamHandle(Warning, handshake) log_stream;\n-  for (JavaThreadIteratorWithHandle jtiwh; JavaThread* thr = jtiwh.next(); ) {\n-    if (thr->handshake_state()->has_operation()) {\n-      log_stream.print(\"Thread \" PTR_FORMAT \" has not cleared its handshake op\", p2i(thr));\n-      thr->print_thread_state_on(&log_stream);\n+static void check_handshake_timeout(jlong start_time, HandshakeOperation* op, JavaThread* target = NULL) {\n+  \/\/ Check if handshake operation has timed out\n+  jlong timeout_ns = millis_to_nanos(HandshakeTimeout);\n+  if (timeout_ns > 0) {\n+    if (os::javaTimeNanos() >= (start_time + timeout_ns)) {\n+      handle_timeout(op, target);\n@@ -208,2 +215,0 @@\n-  log_stream.flush();\n-  fatal(\"Handshake operation timed out\");\n@@ -224,1 +229,2 @@\n-class VM_HandshakeAllThreads: public VM_Handshake {\n+class VM_HandshakeAllThreads: public VM_Operation {\n+  HandshakeOperation* const _op;\n@@ -226,1 +232,3 @@\n-  VM_HandshakeAllThreads(HandshakeOperation* op) : VM_Handshake(op) {}\n+  VM_HandshakeAllThreads(HandshakeOperation* op) : _op(op) {}\n+\n+  bool evaluate_at_safepoint() const { return false; }\n@@ -252,3 +260,1 @@\n-      if (handshake_has_timed_out(start_time_ns)) {\n-        handle_timeout();\n-      }\n+      check_handshake_timeout(start_time_ns, _op);\n@@ -362,0 +368,4 @@\n+\n+    \/\/ Check if handshake operation has timed out\n+    check_handshake_timeout(start_time_ns, &op, target);\n+\n@@ -409,0 +419,14 @@\n+bool HandshakeState::operation_pending(HandshakeOperation* op) {\n+  MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n+  class MatchOp {\n+    HandshakeOperation* _op;\n+   public:\n+    MatchOp(HandshakeOperation* op) : _op(op) {}\n+    bool operator()(HandshakeOperation* op) {\n+      return op == _op;\n+    }\n+  };\n+  MatchOp mo(op);\n+  return _queue.contains(mo);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":54,"deletions":30,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -100,0 +100,2 @@\n+  bool operation_pending(HandshakeOperation* op);\n+\n","filename":"src\/hotspot\/share\/runtime\/handshake.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import sun.hotspot.WhiteBox;\n+\n+\/*\n+ * @test HandshakeTimeoutTest\n+ * @summary Test handshake timeout.\n+ * @requires vm.debug\n+ * @library \/testlibrary \/test\/lib\n+ * @build HandshakeTimeoutTest\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI HandshakeTimeoutTest\n+ *\/\n+\n+public class HandshakeTimeoutTest {\n+    public static void main(String[] args) throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        Boolean useJVMCICompiler = wb.getBooleanVMFlag(\"UseJVMCICompiler\");\n+        String useJVMCICompilerStr;\n+        if (useJVMCICompiler != null) {\n+            useJVMCICompilerStr = useJVMCICompiler ?  \"-XX:+UseJVMCICompiler\" : \"-XX:-UseJVMCICompiler\";\n+        } else {\n+            \/\/ pass something innocuous\n+            useJVMCICompilerStr = \"-XX:+UnlockExperimentalVMOptions\";\n+        }\n+        ProcessBuilder pb =\n+            ProcessTools.createTestJvm(\n+                    \"-Xbootclasspath\/a:.\",\n+                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                    \"-XX:+WhiteBoxAPI\",\n+                    \"-XX:+HandshakeALot\",\n+                    \"-XX:GuaranteedSafepointInterval=10\",\n+                    \"-XX:ParallelGCThreads=1\",\n+                    \"-XX:ConcGCThreads=1\",\n+                    \"-XX:CICompilerCount=2\",\n+                    \"-XX:+UnlockExperimentalVMOptions\",\n+                    \"-XX:HandshakeTimeout=50\",\n+                    useJVMCICompilerStr,\n+                    \"HandshakeTimeoutTest$Test\");\n+\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.reportDiagnosticSummary();\n+        \/\/ In rare cases the target wakes up and performs the handshake at the same time as we timeout.\n+        \/\/ Therefore it's not certain the timeout will find any thread.\n+        output.shouldMatch(\"has not cleared handshake op|No thread with an unfinished handshake op\");\n+    }\n+\n+    static class Test implements Runnable {\n+        public static void main(String[] args) throws Exception {\n+            Test test = new Test();\n+            Thread thread = new Thread(test);\n+            thread.start();\n+            thread.join();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (true) {\n+                \/\/ If there is a safepoint this thread might still be able to perform\n+                \/\/ it's handshake in time. Therefore we loop util failure.\n+                WhiteBox.getWhiteBox().waitUnsafe(100);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/handshake\/HandshakeTimeoutTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}