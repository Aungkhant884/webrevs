{"files":[{"patch":"@@ -150,0 +150,10 @@\n+\/\/ Sparse set of card indexes comprising a remembered set on the Java heap. Card\n+\/\/ size is assumed to be card table card size.\n+\/\/\n+\/\/ Technically it is implemented using a ConcurrentHashTable that stores a card\n+\/\/ set container for every region containing at least one card.\n+\/\/\n+\/\/ There are in total five different containers, encoded in the ConcurrentHashTable\n+\/\/ node as CardSetPtr. A CardSetPtr may cover the whole region or just a part of\n+\/\/ it.\n+\/\/ See its description below for more information.\n@@ -167,1 +177,1 @@\n-  \/\/ CardSetPtr represents the card storage type of a given region. It encodes\n+  \/\/ CardSetPtr represents the card storage type of a given covered area. It encodes\n@@ -172,6 +182,8 @@\n-  \/\/ 0...00000 free               (should never happen)\n-  \/\/ 1...11111 full\n-  \/\/ X...XXX00 inline-ptr-cards   (64 bit)\n-  \/\/ X...XXX01 array of cards\n-  \/\/ X...XXX10 bitmap\n-  \/\/ X...XXX11 howl (64 bit)\n+  \/\/ 0...00000 free               (Empty, should never happen)\n+  \/\/ 1...11111 full               All card indexes in the whole area this CardSetPtr covers are part of this container.\n+  \/\/ X...XXX00 inline-ptr-cards   A handful of card indexes covered by this CardSetPtr are encoded within the CardSetPtr.\n+  \/\/ X...XXX01 array of cards     The container is a contiguous array of card indexes.\n+  \/\/ X...XXX10 bitmap             The container uses a bitmap to determine whether a given index is part of this set.\n+  \/\/ X...XXX11 howl               This is a card set container containing an array of CardSetPtr, with each CardSetPtr\n+  \/\/                              limited to a sub-range of the original range. Currently only one level of this\n+  \/\/                              container is supported.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -96,2 +96,3 @@\n-\/\/ Common base class for card set container related objects managed on the heap. Depending\n-\/\/ on the current use, one of the two overlapping elements are used:\n+\/\/ Common base class for card set containers where the memory for the entries is\n+\/\/ managed on the (C-)heap. Depending on the current use, one of the two overlapping\n+\/\/ members are used:\n@@ -113,0 +114,3 @@\n+\/\/\n+\/\/ All but inline pointers are of this kind. For those, card entries are stored\n+\/\/ directly in the CardSetPtr of the ConcurrentHashTable node.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -335,1 +335,3 @@\n-  num_arrays = MAX2((size_t)1, MIN2(num_arrays, max_num_buckets));\n+  \/\/ We use shifts and masks for indexing the array. So round down to the next\n+  \/\/ power of two to not use more than expected memory.\n+  num_arrays = round_down_power_of_2(MAX2((size_t)1, MIN2(num_arrays, max_num_buckets)));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}