{"files":[{"patch":"@@ -68,1 +68,1 @@\n-Monitor* VMOperation_lock        = NULL;\n+Monitor* VMOperation_lock             = NULL;\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-extern Monitor* VMOperation_lock;           \/\/ a lock on queue of vm_operations waiting to execute\n+extern Monitor* VMOperation_lock;                \/\/ a lock on queue of vm_operations waiting to execute\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -259,2 +259,0 @@\n-  _vm_operation_started_count = 0;\n-  _vm_operation_completed_count = 0;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -404,3 +404,0 @@\n-  int   _vm_operation_started_count;            \/\/ VM_Operation support\n-  int   _vm_operation_completed_count;          \/\/ VM_Operation support\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+static VM_None    safepointALot_op(\"SafepointALot\");\n+static VM_Cleanup cleanup_op;\n+\n@@ -90,1 +93,1 @@\n-VM_Operation*     VMThread::_next_vm_operation  = NULL;\n+VM_Operation*     VMThread::_next_vm_operation  = &cleanup_op; \/\/ Prevent any thread from setting an operation until VM thread is ready.\n@@ -221,2 +224,1 @@\n-  assert(Thread::current()->is_Java_thread(), \"Should be a JavaThread\");\n-  assert(((JavaThread*)Thread::current())->is_terminated(), \"Should be terminated\");\n+  assert(JavaThread::current()->is_terminated(), \"Should be terminated\");\n@@ -226,1 +228,1 @@\n-    mu.notify();\n+    mu.notify_all();\n@@ -240,1 +242,1 @@\n-    while(!VMThread::is_terminated()) {\n+    while (!VMThread::is_terminated()) {\n@@ -281,3 +283,0 @@\n-static VM_None    safepointALot_op(\"SafepointALot\");\n-static VM_Cleanup cleanup_op;\n-\n@@ -304,4 +303,5 @@\n-  jlong deadline_ms = GuaranteedSafepointInterval != 0 ? GuaranteedSafepointInterval : 1000;\n-  deadline_ms += last_halot_ms;\n-  if (now_ms < deadline_ms) {\n-    return false;\n+  jlong interval = GuaranteedSafepointInterval != 0 ? GuaranteedSafepointInterval : 1000;\n+  jlong deadline_ms = interval + last_halot_ms;\n+  if (now_ms > deadline_ms) {\n+    last_halot_ms = now_ms;\n+    return true;\n@@ -309,2 +309,1 @@\n-  last_halot_ms = now_ms;\n-  return true;\n+  return false;\n@@ -313,1 +312,1 @@\n-void VMThread::cleanup_safepoint_alot() {\n+void VMThread::setup_periodic_safepoint_if_needed() {\n@@ -344,1 +343,1 @@\n-void VMThread::until_executed(VM_Operation* op) {\n+void VMThread::wait_until_executed(VM_Operation* op) {\n@@ -354,1 +353,0 @@\n-    ml.notify_all();\n@@ -357,3 +355,3 @@\n-  while (_next_vm_operation == op ||\n-         _cur_vm_operation  == op) {\n-    ml.notify_all();\n+  \/\/ _next_vm_operation is cleared holding VMOperation_lock\n+  \/\/ after it have been executed.\n+  while (_next_vm_operation == op) {\n@@ -392,1 +390,1 @@\n-  EventMark em(\"Executing %s VM operation: %s\", prev_vm_operation ? \"nested\" : \"\", op->name());\n+  EventMark em(\"Executing %s VM operation: %s\", prev_vm_operation != NULL ? \"nested\" : \"\", op->name());\n@@ -397,1 +395,1 @@\n-                       prev_vm_operation ? \"nested\" : \"\",\n+                       prev_vm_operation != NULL ? \"nested\" : \"\",\n@@ -424,1 +422,1 @@\n-  MonitorLocker mu_queue(VMOperation_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml_op_lock(VMOperation_lock, Mutex::_no_safepoint_check_flag);\n@@ -426,2 +424,5 @@\n-  \/\/ Notify previous op done\n-  mu_queue.notify();\n+  \/\/ Clear previous operation.\n+  \/\/ On first call this clears a dummy place-holder.\n+  _next_vm_operation = NULL;\n+  \/\/ Notify operation done and notify a next operation can be installed.\n+  ml_op_lock.notify_all();\n@@ -448,1 +449,1 @@\n-    cleanup_safepoint_alot();\n+    setup_periodic_safepoint_if_needed();\n@@ -453,2 +454,3 @@\n-    mu_queue.notify();\n-    mu_queue.wait(GuaranteedSafepointInterval);\n+    \/\/ We did find anything to execute, notify any waiter so they can install a new one.\n+    ml_op_lock.notify_all();\n+    ml_op_lock.wait(GuaranteedSafepointInterval);\n@@ -468,1 +470,1 @@\n-  while (true) {\n+  do {\n@@ -473,1 +475,0 @@\n-      _next_vm_operation = NULL;\n@@ -477,1 +478,1 @@\n-  }\n+  } while(!should_terminate());\n@@ -527,1 +528,1 @@\n-  until_executed(op);\n+  wait_until_executed(op);\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  static void cleanup_safepoint_alot();\n+  static void setup_periodic_safepoint_if_needed();\n@@ -103,1 +103,1 @@\n-    assert(Thread::current()->is_VM_thread(), \"Must be);\");\n+    assert(Thread::current()->is_VM_thread(), \"Must be\");\n@@ -106,1 +106,4 @@\n-  static VM_Operation::VMOp_Type vm_op_type()     { return _cur_vm_operation->type(); }\n+  static VM_Operation::VMOp_Type vm_op_type()     {\n+    assert(Thread::current()->is_VM_thread(), \"Must be\");\n+    return _cur_vm_operation->type();\n+  }\n@@ -114,2 +117,3 @@\n-  static PerfCounter* perf_accumulated_vm_operation_time()\n-    { return _perf_accumulated_vm_operation_time; }\n+  static PerfCounter* perf_accumulated_vm_operation_time() {\n+    return _perf_accumulated_vm_operation_time;\n+  }\n@@ -124,1 +128,1 @@\n-  static void until_executed(VM_Operation* op);\n+  static void wait_until_executed(VM_Operation* op);\n@@ -129,1 +133,1 @@\n-  static VM_Operation*     _next_vm_operation;\n+  static VM_Operation*     _next_vm_operation;  \/\/ Next VM operation\n@@ -131,1 +135,1 @@\n-  bool set_next_operation(VM_Operation *op);\n+  bool set_next_operation(VM_Operation *op);    \/\/ Set the _next_vm_operation if possible.\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}