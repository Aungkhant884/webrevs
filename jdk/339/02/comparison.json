{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.net.URI;\n@@ -40,0 +41,1 @@\n+import javax.print.attribute.standard.Destination;\n@@ -254,0 +256,15 @@\n+    private void setDestinationFile(String dest) {\n+        if (attributes != null && dest != null) {\n+            try {\n+               URI destURI = new URI(dest);\n+               attributes.add(new Destination(destURI));\n+               destinationAttr = \"\" + destURI.getSchemeSpecificPart();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+    private String getDestinationFile() {\n+        return destinationAttr;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -319,6 +319,1 @@\n-\n-    if (src.jobDisposition == NSPrintSaveJob) {\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, true);\n-    } else {\n-        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, false);\n-    }\n+    static JNF_MEMBER_CACHE(jm_setDestinationFile, sjc_CPrinterJob, \"setDestinationFile\", \"(Ljava\/lang\/String;)V\");\n@@ -331,1 +326,0 @@\n-\n@@ -334,0 +328,10 @@\n+    if (src.jobDisposition == NSPrintSaveJob) {\n+        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, true);\n+        NSURL *url = [printingDictionary objectForKey:NSPrintJobSavingURL];\n+        NSString *nsStr = [url absoluteString];\n+        jstring str = JNFNSToJavaString(env, nsStr);\n+        JNFCallVoidMethod(env, dstPrinterJob, jm_setDestinationFile, str);\n+    } else {\n+        JNFCallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, false);\n+    }\n+\n@@ -387,0 +391,2 @@\n+    static JNF_MEMBER_CACHE(jm_getDestinationFile, sjc_CPrinterJob,\n+                            \"getDestinationFile\", \"()Ljava\/lang\/String;\");\n@@ -426,0 +432,10 @@\n+\n+    jstring dest = JNFCallObjectMethod(env, srcPrinterJob, jm_getDestinationFile);\n+    if (dest != NULL) {\n+       [dst setJobDisposition:NSPrintSaveJob];\n+       NSString *nsDestStr = JNFJavaToNSString(env, dest);\n+       NSURL *nsURL = [NSURL fileURLWithPath:nsDestStr isDirectory:NO];\n+       [printingDictionary setObject:nsURL forKey:NSPrintJobSavingURL];\n+    } else {\n+       [dst setJobDisposition:NSPrintSpoolJob];\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n-  @bug 4865976 7158366\n-  @summary  Pass if it program exits.\n+  @key printer\n+  @bug 4865976 7158366 7179006\n+  @summary Pass if program exits.\n@@ -30,3 +31,12 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import javax.print.attribute.*;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PrinterException;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n@@ -35,1 +45,0 @@\n-import java.util.Locale;\n@@ -37,1 +46,1 @@\n-import javax.print.*;\n+public class PrintDlgApp implements Printable {\n@@ -39,23 +48,1 @@\n-class PrintDlgApp implements Printable {\n-        \/**\n-         * Constructor\n-         *\/\n-        public PrintDlgApp() {\n-                super();\n-        }\n-        \/**\n-         * Starts the application.\n-         *\/\n-        public static void main(java.lang.String[] args) {\n-                PrintDlgApp pd = new PrintDlgApp();\n-                PrinterJob pj = PrinterJob.getPrinterJob();\n-                System.out.println(pj);\n-                PrintRequestAttributeSet pSet = new HashPrintRequestAttributeSet();\n-                pSet.add(new Copies(1));\n-                \/\/PageFormat pf = pj.pageDialog(pSet);\n-                PageFormat pf = new PageFormat();\n-                System.out.println(\"Setting Printable...pf = \"+pf);\n-                if (pf == null) {\n-                    return;\n-                }\n-                pj.setPrintable(pd,pf);\n+    public PrintDlgApp() {}\n@@ -63,15 +50,6 @@\n-                \/\/try { pj.setPrintService(services[0]); } catch(Exception e) { e.printStackTrace(); }\n-                pSet.add(new Destination(new java.io.File(\".\/out.prn\").toURI()));\n-                System.out.println(\"open PrintDialog..\");\n-                for (int i=0; i<2; i++) {\n-                if (pj.printDialog(pSet)) {\n-                        try {\n-                                System.out.println(\"About to print the data ...\");\n-                                pj.print(pSet);\n-                                System.out.println(\"Printed\");\n-                        }\n-                        catch (PrinterException pe) {\n-                                pe.printStackTrace();\n-                        }\n-                }\n-                }\n+    public static void main(String[] args) {\n+         PrinterJob pj = PrinterJob.getPrinterJob();\n+         if (pj.getPrintService() == null) {\n+             System.out.println(\"No printers installed. Skipping test\");\n+             return;\n+         }\n@@ -79,1 +57,36 @@\n-        }\n+         PrintDlgApp pd = new PrintDlgApp();\n+         PageFormat pf = new PageFormat();\n+         pj.setPrintable(pd, pf);\n+\n+         PrintRequestAttributeSet pSet = new HashPrintRequestAttributeSet();\n+         pSet.add(new Copies(1));\n+\n+         Destination dest = null;\n+         for (int i=0; i<2; i++) {\n+             File file = new File(\".\/out\"+i+\".prn\");\n+             dest = new Destination(file.toURI());\n+             pSet.add(dest);\n+             System.out.println(\"open PrintDialog.\");\n+             if (pj.printDialog(pSet)) {\n+                 \/\/ In case tester changes the destination :\n+                 dest = (Destination)pSet.get(Destination.class);\n+                 System.out.println(\"DEST=\"+dest);\n+                 if (dest != null) {\n+                     URI uri = dest.getURI();\n+                     file = new File(uri.getSchemeSpecificPart());\n+                     System.out.println(\"will be checking for file \" + file);\n+                 }\n+                 try {\n+                     System.out.println(\"About to print the data ...\");\n+                     pj.print(pSet);\n+                     System.out.println(\"Printed.\");\n+                 }\n+                 catch (PrinterException pe) {\n+                     pe.printStackTrace();\n+                 }\n+             }\n+             if (dest != null && !file.exists()) {\n+                 throw new RuntimeException(\"No file created\");\n+             }\n+         }\n+    }\n@@ -81,3 +94,1 @@\n-        \/\/printable interface\n-        public int print(Graphics g, PageFormat pf, int pi) throws\n-PrinterException {\n+    public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n@@ -85,12 +96,2 @@\n-                if (pi > 0) {\n-                        System.out.println(\"pi is greater than 0\");\n-                        return Printable.NO_SUCH_PAGE;\n-                }\n-                \/\/ Simply draw two rectangles\n-                Graphics2D g2 = (Graphics2D)g;\n-                g2.setColor(Color.black);\n-                g2.translate(pf.getImageableX(), pf.getImageableY());\n-                g2.drawRect(1,1,200,300);\n-                g2.drawRect(1,1,25,25);\n-                System.out.println(\"print method called \"+pi);\n-                return Printable.PAGE_EXISTS;\n+        if (pi > 0) {\n+            return Printable.NO_SUCH_PAGE;\n@@ -98,0 +99,9 @@\n+        \/\/ Simply draw two rectangles\n+        Graphics2D g2 = (Graphics2D)g;\n+        g2.setColor(Color.black);\n+        g2.translate(pf.getImageableX(), pf.getImageableY());\n+        g2.drawRect(1,1,200,300);\n+        g2.drawRect(1,1,25,25);\n+        System.out.println(\"print method called \"+pi);\n+        return Printable.PAGE_EXISTS;\n+    }\n","filename":"test\/jdk\/java\/awt\/print\/Dialog\/PrintDlgApp.java","additions":72,"deletions":62,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key printer\n+ * @bug 7179006\n+ * @summary Confirm printing to file works.\n+*\/\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PrinterException;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.Destination;\n+\n+public class PrintToFileTest implements Printable {\n+\n+    public PrintToFileTest() {}\n+\n+    public static void main(String[] args) throws Exception {\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        if (pj.getPrintService() == null) {\n+            System.out.println(\"No printers installed. Skipping test.\");\n+            return;\n+        }\n+        pj.setPrintable(new PrintToFileTest(), new PageFormat());\n+        PrintRequestAttributeSet pSet = new HashPrintRequestAttributeSet();\n+        File file = new File(\".\/out.prn\");\n+        pSet.add(new Destination(file.toURI()));\n+        pj.print(pSet);\n+        if (!file.exists()) {\n+             throw new RuntimeException(\"No file created\");\n+        }\n+    }\n+\n+    public int print(Graphics g, PageFormat pf, int pi) throws\n+                                PrinterException {\n+\n+        if (pi > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+        Graphics2D g2 = (Graphics2D)g;\n+        g2.setColor(Color.black);\n+        g2.translate(pf.getImageableX(), pf.getImageableY());\n+        g2.drawRect(1,1,200,300);\n+        g2.drawRect(1,1,25,25);\n+        return Printable.PAGE_EXISTS;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintToFileTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}