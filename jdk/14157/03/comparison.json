{"files":[{"patch":"@@ -785,0 +785,14 @@\n+    private boolean canRead() {\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            try {\n+                sm.checkRead(getPathForPermissionCheck());\n+                return true;\n+            } catch (SecurityException ignore) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n@@ -882,0 +896,2 @@\n+        \/\/ If SM and no read permission, then fall back to result derived so\n+        \/\/ far with case possibly not retained\n@@ -883,0 +899,2 @@\n+        if (!path.canRead())\n+            return result;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+grant {\n+    permission java.io.FilePermission \"${java.io.tmpdir}\", \"read,write\";\n+    permission java.io.FilePermission \"${java.io.tmpdir}\/-\", \"read,write,delete\";\n+};\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacToRealPath.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8308678\n+ * @requires (os.family == \"mac\")\n+ * @summary Verify UnixPath::toRealPath falls back if no perms on macOS\n+ * @run junit\/othervm -Djava.security.manager=allow MacToRealPathWithSM\n+ *\/\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+public class MacToRealPathWithSM {\n+    private static final String POLICY_FILE = \"MacToRealPath.policy\";\n+\n+    private static Path src;\n+    private static Path path;\n+\n+    @BeforeAll\n+    public static void setup() throws IOException {\n+        String testSrc = System.getProperty(\"test.src\");\n+        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+        if (testSrc == null || tmpDir == null)\n+            throw new RuntimeException(\"This test must be run by jtreg\");\n+        System.out.printf(\"testSrc: %s%ntmpDir:  %s%n\", testSrc, tmpDir);\n+\n+        src = Path.of(testSrc);\n+        Path tmp = Path.of(tmpDir);\n+\n+        path = Files.createTempFile(tmp, \"bonjour\", \".txt\");\n+        path.toFile().deleteOnExit();\n+\n+        \/\/ Write to the path\n+        Files.writeString(path, \"\\nBonjour, tout le monde!\\n\");\n+        System.out.println(Files.readString(path));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"\", POLICY_FILE})\n+    @SuppressWarnings(\"removal\")\n+    public void testToRealPath(String policyFile) throws IOException {\n+        \/\/ Install security manager with the given policy file\n+        if (!policyFile.isEmpty()) {\n+            System.setProperty(\"java.security.policy\",\n+                src.resolve(policyFile).toString());\n+            System.setSecurityManager(new SecurityManager());\n+        }\n+\n+        \/\/ Derive real path. Without the source change for this issue applied,\n+        \/\/ if a SecurityManager is used which does not grant read permission\n+        \/\/ for traversing \"path\" down from its root, an AccessContolException\n+        \/\/ is thrown by UnixPath::toRealPath\n+        assertDoesNotThrow(() ->\n+            System.out.printf(\"real path: %s%n\", path.toRealPath()),\n+            \"UnixPath::toRealPath() failed\");\n+        assertDoesNotThrow(() ->\n+            System.out.printf(\"real path no follow: %s%n\",\n+                              path.toRealPath(LinkOption.NOFOLLOW_LINKS)),\n+            \"UnixPath::toRealPath(LinkOption.NOFOLLOW_LINKS) failed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacToRealPathWithSM.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}