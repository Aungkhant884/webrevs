{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-      TreeValues.addElement(new Integer(o));\n+      TreeValues.addElement(Integer.valueOf(o));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/JumbleGC\/Tree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-                    Integer ik = new Integer(prh.getReferentHashCode());\n+                    Integer ik = Integer.valueOf(prh.getReferentHashCode());\n@@ -113,1 +113,1 @@\n-                                        new Integer(prh.getReferentHashCode()));\n+                                        Integer.valueOf(prh.getReferentHashCode()));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/PhantomReference\/PhantomHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-                        Integer ik = new Integer(tmp.hashCode());\n+                        Integer ik = Integer.valueOf(tmp.hashCode());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/PhantomReference\/PhantomReferenceEvilTest\/PhantomReferenceEvilTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-            Integer ik = new Integer(tmp.hashCode());\n+            Integer ik = Integer.valueOf(tmp.hashCode());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/PhantomReference\/PhantomReferenceTest\/PhantomReferenceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-                RANGE = new Integer(args[++i]).intValue();\n+                RANGE = Integer.valueOf(args[++i]).intValue();\n@@ -69,1 +69,1 @@\n-                RATIO = new Float(args[++i]).floatValue();\n+                RATIO = Float.valueOf(args[++i]).floatValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/ReferencesGC\/ReferencesGC.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n-                                numLists = new Integer(args[++i]).intValue();\n+                                numLists = Integer.valueOf(args[++i]).intValue();\n@@ -175,1 +175,1 @@\n-                                qFactor = new Float(args[++i]).floatValue();\n+                                qFactor = Float.valueOf(args[++i]).floatValue();\n@@ -177,1 +177,1 @@\n-                                gcCount = new Integer(args[++i]).intValue();\n+                                gcCount = Integer.valueOf(args[++i]).intValue();\n@@ -179,1 +179,1 @@\n-                                loopCount = new Integer(args[++i]).intValue();\n+                                loopCount = Integer.valueOf(args[++i]).intValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/WeakReferenceGC\/WeakReferenceGC.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-                                peopleLimit = new Integer(args[0]).intValue();\n+                                peopleLimit = Integer.valueOf(args[0]).intValue();\n@@ -208,1 +208,1 @@\n-                                LOOPCOUNT = new Integer(args[1]).intValue();\n+                                LOOPCOUNT = Integer.valueOf(args[1]).intValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/gctest01\/gctest01.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,1 +183,1 @@\n-                                peopleLimit = new Integer(args[0]).intValue();\n+                                peopleLimit = Integer.valueOf(args[0]).intValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/gctest02\/gctest02.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                                dataNodeLimit = new Integer(args[0]).intValue();\n+                                dataNodeLimit = Integer.valueOf(args[0]).intValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/gctest03\/gctest03.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-            queueLimit = new Integer(args[0]).intValue();\n+            queueLimit = Integer.valueOf(args[0]).intValue();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/gctest04\/gctest04.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,1 +242,1 @@\n-            allHashes.add(new Integer(foundHashes[i]));\n+            allHashes.add(Integer.valueOf(foundHashes[i]));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/hashcode\/ExternalHashingTest\/ExternalHashingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,4 +71,4 @@\n-        fOne = new Integer(1).floatValue();\n-        fZero = new Integer(0).floatValue();\n-        dOne = new Integer(1).doubleValue();\n-        dZero = new Integer(0).doubleValue();\n+        fOne = Integer.valueOf(1).floatValue();\n+        fZero = Integer.valueOf(0).floatValue();\n+        dOne = Integer.valueOf(1).doubleValue();\n+        dZero = Integer.valueOf(0).doubleValue();\n@@ -371,1 +371,1 @@\n-            if (new Float(x).equals(new Float(floatValues[i])))\n+            if (Float.valueOf(x).equals(Float.valueOf(floatValues[i])))\n@@ -379,1 +379,1 @@\n-            if (new Double(x).equals(new Double(doubleValues[i])))\n+            if (Double.valueOf(x).equals(Double.valueOf(doubleValues[i])))\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/FloatingPoint\/FPCompare\/TestFPBinop\/TestFPBinop.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -59,1 +59,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -60,1 +60,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -97,1 +97,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -101,1 +101,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test2.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -65,1 +65,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -72,1 +72,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -104,1 +104,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -107,1 +107,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test3.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -59,1 +59,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -92,1 +92,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -96,1 +96,1 @@\n-            numFcalls = new Long(temp \/ 2);\n+            numFcalls = Long.valueOf(temp \/ 2);\n@@ -120,1 +120,1 @@\n-            numFcalls = new Long(temp);\n+            numFcalls = Long.valueOf(temp);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test4.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -170,1 +170,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -208,1 +208,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -211,1 +211,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -249,1 +249,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -252,1 +252,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -294,1 +294,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -297,1 +297,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test5.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            staticFcalls = new Integer(staticFunctionDepth.intValue() - 1);\n+            staticFcalls = Integer.valueOf(staticFunctionDepth.intValue() - 1);\n@@ -71,1 +71,1 @@\n-            numFcalls = new Long(functionDepth.longValue() - 1);\n+            numFcalls = Long.valueOf(functionDepth.longValue() - 1);\n@@ -85,1 +85,1 @@\n-            while (temp.indexOf(new Integer(nextKey)) != -1) {\n+            while (temp.indexOf(Integer.valueOf(nextKey)) != -1) {\n@@ -89,1 +89,1 @@\n-            temp.addElement(new Integer(nextKey));\n+            temp.addElement(Integer.valueOf(nextKey));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/graph\/test6.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-            return new Integer(i);\n+            return Integer.valueOf(i);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/pop_exception\/pop_exception001\/pop_exception001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-        FS0 = flag ? FS0 : new Boolean(false);\n+        FS0 = flag ? FS0 : Boolean.valueOf(false);\n@@ -105,5 +105,5 @@\n-            FP0 = flag ? FP0 : new Byte(Byte.MIN_VALUE) ;\n-            FU0 = flag ? FU0 : new Character(Character.MIN_VALUE);\n-            FR0 = flag ? FR0 : new Double(Double.MIN_VALUE);\n-            FT0 = flag ? FT0 : new Float(Float.MIN_VALUE);\n-            FV0 = flag ? FV0 : new Long(Long.MIN_VALUE);\n+            FP0 = flag ? FP0 : Byte.valueOf(Byte.MIN_VALUE) ;\n+            FU0 = flag ? FU0 : Character.valueOf(Character.MIN_VALUE);\n+            FR0 = flag ? FR0 : Double.valueOf(Double.MIN_VALUE);\n+            FT0 = flag ? FT0 : Float.valueOf(Float.MIN_VALUE);\n+            FV0 = flag ? FV0 : Long.valueOf(Long.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/unwatch\/unwatch001\/unwatch001a.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-        FS0 = flag ? FS0 : new Boolean(false);\n+        FS0 = flag ? FS0 : Boolean.valueOf(false);\n@@ -105,5 +105,5 @@\n-            FP0 = flag ? FP0 : new Byte(Byte.MIN_VALUE) ;\n-            FU0 = flag ? FU0 : new Character(Character.MIN_VALUE);\n-            FR0 = flag ? FR0 : new Double(Double.MIN_VALUE);\n-            FT0 = flag ? FT0 : new Float(Float.MIN_VALUE);\n-            FV0 = flag ? FV0 : new Long(Long.MIN_VALUE);\n+            FP0 = flag ? FP0 : Byte.valueOf(Byte.MIN_VALUE) ;\n+            FU0 = flag ? FU0 : Character.valueOf(Character.MIN_VALUE);\n+            FR0 = flag ? FR0 : Double.valueOf(Double.MIN_VALUE);\n+            FT0 = flag ? FT0 : Float.valueOf(Float.MIN_VALUE);\n+            FV0 = flag ? FV0 : Long.valueOf(Long.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/unwatch\/unwatch002\/unwatch002a.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        FS0 = flag ? FS0 : new Boolean(false);\n+        FS0 = flag ? FS0 : Boolean.valueOf(false);\n@@ -101,5 +101,5 @@\n-            FP0 = flag ? FP0 : new Byte(Byte.MIN_VALUE) ;\n-            FU0 = flag ? FU0 : new Character(Character.MIN_VALUE);\n-            FR0 = flag ? FR0 : new Double(Double.MIN_VALUE);\n-            FT0 = flag ? FT0 : new Float(Float.MIN_VALUE);\n-            FV0 = flag ? FV0 : new Long(Long.MIN_VALUE);\n+            FP0 = flag ? FP0 : Byte.valueOf(Byte.MIN_VALUE) ;\n+            FU0 = flag ? FU0 : Character.valueOf(Character.MIN_VALUE);\n+            FR0 = flag ? FR0 : Double.valueOf(Double.MIN_VALUE);\n+            FT0 = flag ? FT0 : Float.valueOf(Float.MIN_VALUE);\n+            FV0 = flag ? FV0 : Long.valueOf(Long.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/watch\/watch001\/watch001a.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        FS0 = flag ? FS0 : new Boolean(false);\n+        FS0 = flag ? FS0 : Boolean.valueOf(false);\n@@ -101,5 +101,5 @@\n-            FP0 = flag ? FP0 : new Byte(Byte.MIN_VALUE) ;\n-            FU0 = flag ? FU0 : new Character(Character.MIN_VALUE);\n-            FR0 = flag ? FR0 : new Double(Double.MIN_VALUE);\n-            FT0 = flag ? FT0 : new Float(Float.MIN_VALUE);\n-            FV0 = flag ? FV0 : new Long(Long.MIN_VALUE);\n+            FP0 = flag ? FP0 : Byte.valueOf(Byte.MIN_VALUE) ;\n+            FU0 = flag ? FU0 : Character.valueOf(Character.MIN_VALUE);\n+            FR0 = flag ? FR0 : Double.valueOf(Double.MIN_VALUE);\n+            FT0 = flag ? FT0 : Float.valueOf(Float.MIN_VALUE);\n+            FV0 = flag ? FV0 : Long.valueOf(Long.MIN_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/watch\/watch002\/watch002a.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,10 +44,10 @@\n-    Boolean   Z0  = new Boolean(true),  Z1[] ={Z0},  Z2[][]={Z1},   Z3[][][]={Z2},   Z4[][][][]={Z3};\n-    Byte      B0  = new Byte(\"0\"),      B1[] ={B0},  B2[][]={B1},   B3[][][]={B2},   B4[][][][]={B3};\n-    Character C0  = new Character('0'), C1[] ={C0},  C2[][]={C1},   C3[][][]={C2},   C4[][][][]={C3};\n-    Double    D0  = new Double(0),      D1[] ={D0},  D2[][]={D1},   D3[][][]={D2},   D4[][][][]={D3};\n-    Float     F0  = new Float(0),       F1[] ={F0},  F2[][]={F1},   F3[][][]={F2},   F4[][][][]={F3};\n-    Integer   I0  = new Integer(0),     I1[] ={I0},  I2[][]={I1},   I3[][][]={I2},   I4[][][][]={I3};\n-    Long      L0  = new Long(0),        L1[] ={L0},  L2[][]={L1},   L3[][][]={L2},   L4[][][][]={L3};\n-    Short     Sh0 = new Short(\"1\"),     Sh1[]={Sh0}, Sh2[][]={Sh1}, Sh3[][][]={Sh2}, Sh4[][][][]={Sh3};\n-    String    S0  = new String(\" \"),    S1[] ={S0},  S2[][]={S1},   S3[][][]={S2},   S4[][][][]={S3};\n-    Object    O0  = new Object(),       O1[] ={O0},  O2[][]={O1},   O3[][][]={O2},   O4[][][][]={O3};\n+    Boolean   Z0  = Boolean.valueOf(true),  Z1[] ={Z0},  Z2[][]={Z1},   Z3[][][]={Z2},   Z4[][][][]={Z3};\n+    Byte      B0  = Byte.valueOf(\"0\"),      B1[] ={B0},  B2[][]={B1},   B3[][][]={B2},   B4[][][][]={B3};\n+    Character C0  = Character.valueOf('0'), C1[] ={C0},  C2[][]={C1},   C3[][][]={C2},   C4[][][][]={C3};\n+    Double    D0  = Double.valueOf(0),      D1[] ={D0},  D2[][]={D1},   D3[][][]={D2},   D4[][][][]={D3};\n+    Float     F0  = Float.valueOf(0),       F1[] ={F0},  F2[][]={F1},   F3[][][]={F2},   F4[][][][]={F3};\n+    Integer   I0  = Integer.valueOf(0),     I1[] ={I0},  I2[][]={I1},   I3[][][]={I2},   I4[][][][]={I3};\n+    Long      L0  = Long.valueOf(0),        L1[] ={L0},  L2[][]={L1},   L3[][][]={L2},   L4[][][][]={L3};\n+    Short     Sh0 = Short.valueOf(\"1\"),     Sh1[]={Sh0}, Sh2[][]={Sh1}, Sh3[][][]={Sh2}, Sh4[][][][]={Sh3};\n+    String    S0  = new String(\" \"),        S1[] ={S0},  S2[][]={S1},   S3[][][]={S2},   S4[][][][]={S3};\n+    Object    O0  = new Object(),           O1[] ={O0},  O2[][]={O1},   O3[][][]={O2},   O4[][][][]={O3};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Accessible\/isPackagePrivate\/accipp001a.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,9 +49,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Accessible\/isPrivate\/isPrivate001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,9 +49,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Accessible\/isProtected\/isProtected001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,9 +49,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Accessible\/isPublic\/isPublic001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,7 +41,7 @@\n-    Boolean   Z0 = new Boolean(false);\n-    Byte      B0 = new Byte((byte)1);\n-    Character C0 = new Character('c');\n-    Double    D0 = new Double(1);\n-    Float     F0 = new Float(1);\n-    Integer   I0 = new Integer(1);\n-    Long      L0 = new Long(1);\n+    Boolean   Z0 = Boolean.valueOf(false);\n+    Byte      B0 = Byte.valueOf((byte)1);\n+    Character C0 = Character.valueOf('c');\n+    Double    D0 = Double.valueOf(1);\n+    Float     F0 = Float.valueOf(1);\n+    Integer   I0 = Integer.valueOf(1);\n+    Long      L0 = Long.valueOf(1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Accessible\/modifiers\/modifiers001a.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -346,1 +346,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -350,1 +350,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -391,1 +391,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -395,1 +395,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValue\/getvalue001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-            Integer totalElements = new Integer(FIELD_NAME[i][1]);\n+            Integer totalElements = Integer.valueOf(FIELD_NAME[i][1]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValue\/getvalue002.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -300,1 +300,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -305,1 +305,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -328,1 +328,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -333,1 +333,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValues\/getvalues001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -319,2 +319,2 @@\n-                        Character c = new Character('c');\n-                         Integer  n = new Integer(0);\n+                        Character c = Character.valueOf('c');\n+                         Integer  n = Integer.valueOf(0);\n@@ -350,1 +350,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -355,1 +355,1 @@\n-                    if (!element.equals(new Double(DOUB[j + i]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j + i]))) {\n@@ -378,1 +378,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -383,1 +383,1 @@\n-                    if (!element.equals(new Float(FLOAT[j + i]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j + i]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValues_ii\/getvaluesii001.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -334,2 +334,2 @@\n-                        Character c = new Character('c');\n-                         Integer  n = new Integer(0);\n+                        Character c = Character.valueOf('c');\n+                         Integer  n = Integer.valueOf(0);\n@@ -365,1 +365,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -370,1 +370,1 @@\n-                    if (!element.equals(new Double(DOUB[j + i]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j + i]))) {\n@@ -393,1 +393,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -398,1 +398,1 @@\n-                    if (!element.equals(new Float(FLOAT[j + i]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j + i]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValues_ii\/getvaluesii002.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-            Integer totalElements = new Integer(FIELD_NAME[i][1]);\n+            Integer totalElements = Integer.valueOf(FIELD_NAME[i][1]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValues_ii\/getvaluesii003.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-            Integer lengthOfArray = new Integer(FIELD_NAME[i][1]);\n+            Integer lengthOfArray = Integer.valueOf(FIELD_NAME[i][1]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/getValues_ii\/getvaluesii004.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,6 +90,6 @@\n-    static final     Long LF1[]={new Long(1), new Long(-2), new Long(3)};\n-    static private   Long LP1[][]={{new Long(1)}, {new Long(2)}, {new Long(3)}};\n-    static public    Long LU1[][][]={{{new Long(1)}}, {{new Long(-2)}}};\n-    static protected Long LR1[][][][]={{{{new Long(1)}}}, {{{new Long(-2)}}}};\n-    static transient Long LT1[][][][][]={{{{{new Long(1)}}}}};\n-    static volatile  Long LV1[][][][][][]={{{{{{new Long(1)}}}}}};\n+    static final     Long LF1[]={Long.valueOf(1), Long.valueOf(-2), Long.valueOf(3)};\n+    static private   Long LP1[][]={{Long.valueOf(1)}, {Long.valueOf(2)}, {Long.valueOf(3)}};\n+    static public    Long LU1[][][]={{{Long.valueOf(1)}}, {{Long.valueOf(-2)}}};\n+    static protected Long LR1[][][][]={{{{Long.valueOf(1)}}}, {{{Long.valueOf(-2)}}}};\n+    static transient Long LT1[][][][][]={{{{{Long.valueOf(1)}}}}};\n+    static volatile  Long LV1[][][][][][]={{{{{{Long.valueOf(1)}}}}}};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/length\/length001a.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,1 +498,1 @@\n-                    dblSample = new Double(dblValue.value());\n+                    dblSample = Double.valueOf(dblValue.value());\n@@ -508,1 +508,1 @@\n-                    dblNew = new Double(dblValue.value());\n+                    dblNew = Double.valueOf(dblValue.value());\n@@ -538,1 +538,1 @@\n-                    fltSample = new Float(fltValue.value());\n+                    fltSample = Float.valueOf(fltValue.value());\n@@ -548,1 +548,1 @@\n-                    fltNew = new Float(fltValue.value());\n+                    fltNew = Float.valueOf(fltValue.value());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValue\/setvalue001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,1 +221,1 @@\n-            Integer totalElements = new Integer(FIELD_NAME[i][1]);\n+            Integer totalElements = Integer.valueOf(FIELD_NAME[i][1]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValue\/setvalue002.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -808,1 +808,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -812,1 +812,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -836,1 +836,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -840,1 +840,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValues_ilii\/setvaluesilii001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -813,1 +813,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -817,1 +817,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -841,1 +841,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -845,1 +845,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValues_ilii\/setvaluesilii002.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -603,1 +603,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -607,1 +607,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -631,1 +631,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -635,1 +635,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValues_l\/setvaluesl001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -603,1 +603,1 @@\n-                    element = new Double(doubleValue.value());\n+                    element = Double.valueOf(doubleValue.value());\n@@ -607,1 +607,1 @@\n-                    if (!element.equals(new Double(DOUB[j]))) {\n+                    if (!element.equals(Double.valueOf(DOUB[j]))) {\n@@ -631,1 +631,1 @@\n-                    element = new Float(floatValue.value());\n+                    element = Float.valueOf(floatValue.value());\n@@ -635,1 +635,1 @@\n-                    if (!element.equals(new Float(FLOAT[j]))) {\n+                    if (!element.equals(Float.valueOf(FLOAT[j]))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ArrayReference\/setValues_l\/setvaluesl002.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,9 +50,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassObjectReference\/reflectedType\/reflectype001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,10 +72,10 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    Short     H0 = new Short((short)-1),    H1[]={H0}, H2[][]={H1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    Short     H0 = Short.valueOf((short)-1),    H1[]={H0}, H2[][]={H1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassObjectReference\/toString\/tostring001a.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,1 +222,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/equals\/equals001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/equals\/equals001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/equals\/equals002a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n@@ -149,1 +149,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/equals\/equals003a.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/equals\/equals005a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/hashCode\/hashcode001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n@@ -98,1 +98,1 @@\n-    transient final     Long LF0T = new Long(999), LF1T[]={LF0T},\n+    transient final     Long LF0T = Long.valueOf(999), LF1T[]={LF0T},\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/isTransient\/istrans001a.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/isVolatile\/isvol001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,7 +59,7 @@\n-    Boolean   Z0 = new Boolean(true);\n-    Byte      B0 = new Byte(Byte.MIN_VALUE);\n-    Character C0 = new Character('\\u00ff');\n-    Double    D0 = new Double(1);\n-    Float     F0 = new Float(1f);\n-    Integer   I0 = new Integer(1);\n-    Long      L0 = new Long(1l);\n+    Boolean   Z0 = Boolean.valueOf(true);\n+    Byte      B0 = Byte.valueOf(Byte.MIN_VALUE);\n+    Character C0 = Character.valueOf('\\u00ff');\n+    Double    D0 = Double.valueOf(1);\n+    Float     F0 = Float.valueOf(1f);\n+    Integer   I0 = Integer.valueOf(1);\n+    Long      L0 = Long.valueOf(1l);\n@@ -69,7 +69,7 @@\n-    static    Long LS0 = new Long(1l);\n-    private   Long LP0 = new Long(1l);\n-    public    Long LU0 = new Long(1l);\n-    protected Long LR0 = new Long(1l);\n-    transient Long LT0 = new Long(1l);\n-    volatile  Long LV0 = new Long(1l);\n-    final     Long LF0 = new Long(1l);\n+    static    Long LS0 = Long.valueOf(1l);\n+    private   Long LP0 = Long.valueOf(1l);\n+    public    Long LU0 = Long.valueOf(1l);\n+    protected Long LR0 = Long.valueOf(1l);\n+    transient Long LT0 = Long.valueOf(1l);\n+    volatile  Long LV0 = Long.valueOf(1l);\n+    final     Long LF0 = Long.valueOf(1l);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/type\/type002a.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-    final     Long LF0 = new Long(999), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(999), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Field\/typeName\/typename001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,8 +83,8 @@\n-        Boolean   Z0 = new Boolean(false),  Z1[] = {Z0}, Z2[][] = {Z1};\n-        Byte B0 = new Byte((byte)1),        B1[] = {B0}, B2[][] = {B1};\n-        Character C0 = new Character('z'),  C1[] = {C0}, C2[][] = {C1};\n-        Double D0 = new Double((double)1),  D1[] = {D0}, D2[][] = {D1};\n-        Float F0 = new Float((float)1),     F1[] = {F0}, F2[][] = {F1};\n-        Integer I0 = new Integer(1),        I1[] = {I0}, I2[][] = {I1};\n-        Long L0 = new Long((long)1),        L1[] = {L0}, L2[][] = {L1};\n-        Short R0 = new Short((short)1),     R1[] = {R0}, R2[][] = {R1};\n+        Boolean   Z0 = Boolean.valueOf(false),  Z1[] = {Z0}, Z2[][] = {Z1};\n+        Byte B0 = Byte.valueOf((byte)1),        B1[] = {B0}, B2[][] = {B1};\n+        Character C0 = Character.valueOf('z'),  C1[] = {C0}, C2[][] = {C1};\n+        Double D0 = Double.valueOf((double)1),  D1[] = {D0}, D2[][] = {D1};\n+        Float F0 = Float.valueOf((float)1),     F1[] = {F0}, F2[][] = {F1};\n+        Integer I0 = Integer.valueOf(1),        I1[] = {I0}, I2[][] = {I1};\n+        Long L0 = Long.valueOf((long)1),        L1[] = {L0}, L2[][] = {L1};\n+        Short R0 = Short.valueOf((short)1),     R1[] = {R0}, R2[][] = {R1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LocalVariable\/toString\/tostring001a.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -216,1 +216,1 @@\n-                    boolean bridge = new Boolean(methods[i][idx][2]);\n+                    boolean bridge = Boolean.valueOf(methods[i][idx][2]);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Method\/isBridge\/isbridge001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-            j = new Integer(new String(String.valueOf(i)));\n+            j = Integer.valueOf(new String(String.valueOf(i)));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Method\/isObsolete\/isobsolete003\/newclass\/isobsolete003b.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-        return new Integer(i);  \/\/ isobsolete003.brkpFooLineNumber\n+        return Integer.valueOf(i);  \/\/ isobsolete003.brkpFooLineNumber\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Method\/isObsolete\/isobsolete003b.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,1 +234,1 @@\n-        Z0  = new Boolean(true);\n+        Z0  = Boolean.valueOf(true);\n@@ -237,1 +237,1 @@\n-        B0  = new Byte(java.lang.Byte.MIN_VALUE);\n+        B0  = Byte.valueOf(java.lang.Byte.MIN_VALUE);\n@@ -240,1 +240,1 @@\n-        C0  = new Character(java.lang.Character.MIN_VALUE);\n+        C0  = Character.valueOf(java.lang.Character.MIN_VALUE);\n@@ -243,1 +243,1 @@\n-        D0  = new Double(java.lang.Double.MIN_VALUE);\n+        D0  = Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -246,1 +246,1 @@\n-        F0  = new Float(java.lang.Float.MIN_VALUE);\n+        F0  = Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -249,1 +249,1 @@\n-        I0  = new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -252,1 +252,1 @@\n-        L0  = new Long(java.lang.Long.MIN_VALUE);\n+        L0  = Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -255,1 +255,1 @@\n-        S0  = new Short(java.lang.Short.MIN_VALUE);\n+        S0  = Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -265,1 +265,1 @@\n-        LS0 = new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -268,1 +268,1 @@\n-        LP0 = new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -271,1 +271,1 @@\n-        LU0 = new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -274,1 +274,1 @@\n-        LR0 = new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -277,1 +277,1 @@\n-        LT0 = new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -280,1 +280,1 @@\n-        LV0 = new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ModificationWatchpointEvent\/_itself_\/mwevent001a.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,1 +215,1 @@\n-        D0  = new Double(java.lang.Double.MIN_VALUE);\n+        D0  = Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -218,1 +218,1 @@\n-        F0  = new Float(java.lang.Float.MIN_VALUE);\n+        F0  = Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -221,1 +221,1 @@\n-        I0  = new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -224,1 +224,1 @@\n-        L0  = new Long(java.lang.Long.MIN_VALUE);\n+        L0  = Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -227,1 +227,1 @@\n-        S0  = new Short(java.lang.Short.MIN_VALUE);\n+        S0  = Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -237,1 +237,1 @@\n-        LS0 = new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -240,1 +240,1 @@\n-        LP0 = new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -243,1 +243,1 @@\n-        LU0 = new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -246,1 +246,1 @@\n-        LR0 = new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -249,1 +249,1 @@\n-        LT0 = new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -252,1 +252,1 @@\n-        LV0 = new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ModificationWatchpointEvent\/valueToBe\/valuetobe001a.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -204,1 +204,1 @@\n-        D0  = flag ? D0  : new Double(java.lang.Double.MIN_VALUE);\n+        D0  = flag ? D0  : Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -207,1 +207,1 @@\n-        F0  = flag ? F0  : new Float(java.lang.Float.MIN_VALUE);\n+        F0  = flag ? F0  : Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -210,1 +210,1 @@\n-        I0  = flag ? I0  : new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = flag ? I0  : Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -213,1 +213,1 @@\n-        L0  = flag ? L0  : new Long(java.lang.Long.MIN_VALUE);\n+        L0  = flag ? L0  : Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -216,1 +216,1 @@\n-        S0  = flag ? S0  : new Short(java.lang.Short.MIN_VALUE);\n+        S0  = flag ? S0  : Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -226,1 +226,1 @@\n-        LS0 = flag ? LS0 : new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = flag ? LS0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -229,1 +229,1 @@\n-        LP0 = flag ? LP0 : new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = flag ? LP0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -232,1 +232,1 @@\n-        LU0 = flag ? LU0 : new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = flag ? LU0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -235,1 +235,1 @@\n-        LR0 = flag ? LR0 : new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = flag ? LR0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -238,1 +238,1 @@\n-        LT0 = flag ? LT0 : new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = flag ? LT0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -241,1 +241,1 @@\n-        LV0 = flag ? LV0 : new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = flag ? LV0 : Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ModificationWatchpointEvent\/valueToBe\/valuetobe002a.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/allFields\/allfields005t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,8 +73,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/allLineLocations\/alllinelocations002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,8 +73,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/allLineLocations_ss\/alllinelocations_ss002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/allMethods\/allmethods005t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,9 +50,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/classObject\/classobj001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,9 +51,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/equals\/equals001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/fields\/fields005t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,9 +51,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/hashCode\/hashcode001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,8 +154,8 @@\n-    Boolean   blBl = new Boolean(true);\n-    Byte      btBt = new Byte((byte)1);\n-    Character chCh = new Character('c');\n-    Double    dbDb = new Double(0);\n-    Float     flFl = new Float(0.0f);\n-    Integer   inIn = new Integer(0);\n-    Long      lnLn = new Long(0);\n-    Short     shSh = new Short((short)1);\n+    Boolean   blBl = Boolean.valueOf(true);\n+    Byte      btBt = Byte.valueOf((byte)1);\n+    Character chCh = Character.valueOf('c');\n+    Double    dbDb = Double.valueOf(0);\n+    Float     flFl = Float.valueOf(0.0f);\n+    Integer   inIn = Integer.valueOf(0);\n+    Long      lnLn = Long.valueOf(0);\n+    Short     shSh = Short.valueOf((short)1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/isFinal\/isfinal001a.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,8 +152,8 @@\n-    Boolean   blBl = new Boolean(true);\n-    Byte      btBt = new Byte((byte)1);\n-    Character chCh = new Character('c');\n-    Double    dbDb = new Double(0);\n-    Float     flFl = new Float(0.0f);\n-    Integer   inIn = new Integer(0);\n-    Long      lnLn = new Long(0);\n-    Short     shSh = new Short((short)1);\n+    Boolean   blBl = Boolean.valueOf(true);\n+    Byte      btBt = Byte.valueOf((byte)1);\n+    Character chCh = Character.valueOf('c');\n+    Double    dbDb = Double.valueOf(0);\n+    Float     flFl = Float.valueOf(0.0f);\n+    Integer   inIn = Integer.valueOf(0);\n+    Long      lnLn = Long.valueOf(0);\n+    Short     shSh = Short.valueOf((short)1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/isStatic\/isstatic001a.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,8 +73,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/locationsOfLine_i\/locationsofline_i002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,8 +73,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/locationsOfLine_ssi\/locationsofline_ssi002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/methods\/methods005t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,9 +51,9 @@\n-    Boolean   Z0 = new Boolean(true),       Z1[]={Z0}, Z2[][]={Z1};\n-    Byte      B0 = new Byte((byte)1),       B1[]={B0}, B2[][]={B1};\n-    Character C0 = new Character('\\u00ff'), C1[]={C0}, C2[][]={C1};\n-    Double    D0 = new Double(1.0),         D1[]={D0}, D2[][]={D1};\n-    Float     F0 = new Float(1.0f),         F1[]={F0}, F2[][]={F1};\n-    Integer   I0 = new Integer(-1),         I1[]={I0}, I2[][]={I1};\n-    Long      L0 = new Long(-1l),           L1[]={L0}, L2[][]={L1};\n-    String    S0 = new String(\"4434819\"),   S1[]={S0}, S2[][]={S1};\n-    Object    O0 = new Object(),            O1[]={O0}, O2[][]={O1};\n+    Boolean   Z0 = Boolean.valueOf(true),       Z1[]={Z0}, Z2[][]={Z1};\n+    Byte      B0 = Byte.valueOf((byte)1),       B1[]={B0}, B2[][]={B1};\n+    Character C0 = Character.valueOf('\\u00ff'), C1[]={C0}, C2[][]={C1};\n+    Double    D0 = Double.valueOf(1.0),         D1[]={D0}, D2[][]={D1};\n+    Float     F0 = Float.valueOf(1.0f),         F1[]={F0}, F2[][]={F1};\n+    Integer   I0 = Integer.valueOf(-1),         I1[]={I0}, I2[][]={I1};\n+    Long      L0 = Long.valueOf(-1l),           L1[]={L0}, L2[][]={L1};\n+    String    S0 = new String(\"4434819\"),       S1[]={S0}, S2[][]={S1};\n+    Object    O0 = new Object(),                O1[]={O0}, O2[][]={O1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/name\/name001a.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,8 +91,8 @@\n-    Boolean boolClsArr[] = {new Boolean(false)};\n-    Byte byteClsArr[] = {new Byte((byte) 127)};\n-    Character charClsArr[] = {new Character('a')};\n-    Double doubleClsArr[] = {new Double(6.2D)};\n-    Float floatClsArr[] = {new Float(5.1F)};\n-    Integer intClsArr[] = {new Integer(2147483647)};\n-    Long longClsArr[] = {new Long(9223372036854775807L)};\n-    Short shortClsArr[] = {new Short((short) -32768)};\n+    Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    Character charClsArr[] = {Character.valueOf('a')};\n+    Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/sourceNames\/sourcenames002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,8 +76,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/sourcePaths\/sourcepaths002t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/visibleFields\/visibfield005t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,8 +74,8 @@\n-    static Boolean boolClsArr[] = {new Boolean(false)};\n-    static Byte byteClsArr[] = {new Byte((byte) 127)};\n-    static Character charClsArr[] = {new Character('a')};\n-    static Double doubleClsArr[] = {new Double(6.2D)};\n-    static Float floatClsArr[] = {new Float(5.1F)};\n-    static Integer intClsArr[] = {new Integer(2147483647)};\n-    static Long longClsArr[] = {new Long(9223372036854775807L)};\n-    static Short shortClsArr[] = {new Short((short) -32768)};\n+    static Boolean boolClsArr[] = {Boolean.valueOf(false)};\n+    static Byte byteClsArr[] = {Byte.valueOf((byte) 127)};\n+    static Character charClsArr[] = {Character.valueOf('a')};\n+    static Double doubleClsArr[] = {Double.valueOf(6.2D)};\n+    static Float floatClsArr[] = {Float.valueOf(5.1F)};\n+    static Integer intClsArr[] = {Integer.valueOf(2147483647)};\n+    static Long longClsArr[] = {Long.valueOf(9223372036854775807L)};\n+    static Short shortClsArr[] = {Short.valueOf((short) -32768)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/visibleMethods\/visibmethod006t.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n@@ -118,3 +118,3 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n-    public    Long LU0 = new Long(1), LU1[]={LU0}, LU2[][]={LU1};\n-    static    Long L0S = new Long(1), L1S[]={L0S}, L2S[][]={L1S};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n+    public    Long LU0 = Long.valueOf(1), LU1[]={LU0}, LU2[][]={LU1};\n+    static    Long L0S = Long.valueOf(1), L1S[]={L0S}, L2S[][]={L1S};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/declaringType\/decltype001a.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n@@ -127,3 +127,3 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n-    public    Long LU0 = new Long(1), LU1[]={LU0}, LU2[][]={LU1};\n-    static    Long L0S = new Long(1), L1S[]={L0S}, L2S[][]={L1S};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n+    public    Long LU0 = Long.valueOf(1), LU1[]={LU0}, LU2[][]={LU1};\n+    static    Long L0S = Long.valueOf(1), L1S[]={L0S}, L2S[][]={L1S};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/declaringType\/decltype002a.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n@@ -122,1 +122,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n@@ -162,3 +162,3 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n-    public    Long LU0 = new Long(1), LU1[]={LU0}, LU2[][]={LU1};\n-    static    Long L0S = new Long(1), L1S[]={L0S}, L2S[][]={L1S};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n+    public    Long LU0 = Long.valueOf(1), LU1[]={LU0}, LU2[][]={LU1};\n+    static    Long L0S = Long.valueOf(1), L1S[]={L0S}, L2S[][]={L1S};\n@@ -190,3 +190,3 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n-    public    Long LU0 = new Long(1), LU1[]={LU0}, LU2[][]={LU1};\n-    static    Long L0S = new Long(1), L1S[]={L0S}, L2S[][]={L1S};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n+    public    Long LU0 = Long.valueOf(1), LU1[]={LU0}, LU2[][]={LU1};\n+    static    Long L0S = Long.valueOf(1), L1S[]={L0S}, L2S[][]={L1S};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/declaringType\/decltype003a.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    static { cL = new Long(1l); }\n+    static { cL = Long.valueOf(1l); }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/declaringType\/decltype007a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-        super(new Long(1), f);\n+        super(Long.valueOf(1), f);\n@@ -60,1 +60,1 @@\n-        super(new Long(1), obj);\n+        super(Long.valueOf(1), obj);\n@@ -63,1 +63,1 @@\n-        super(new Long(1), l);\n+        super(Long.valueOf(1), l);\n@@ -90,1 +90,1 @@\n-    static { cL = new Long(1l); }\n+    static { cL = Long.valueOf(1l); }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/declaringType\/decltype008a.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,5 +103,5 @@\n-    final static    Long LS0F = new Long(1), LS1F[]={LS0F}, LS2F[][]={LS1F};\n-    final private   Long LP0F = new Long(1), LP1F[]={LP0F}, LP2F[][]={LP1F};\n-    final public    Long LU0F = new Long(1), LU1F[]={LU0F}, LU2F[][]={LU1F};\n-    final protected Long LR0F = new Long(1), LR1F[]={LR0F}, LR2F[][]={LR1F};\n-    final transient Long LT0F = new Long(1), LT1F[]={LT0F}, LT2F[][]={LT1F};\n+    final static    Long LS0F = Long.valueOf(1), LS1F[]={LS0F}, LS2F[][]={LS1F};\n+    final private   Long LP0F = Long.valueOf(1), LP1F[]={LP0F}, LP2F[][]={LP1F};\n+    final public    Long LU0F = Long.valueOf(1), LU1F[]={LU0F}, LU2F[][]={LU1F};\n+    final protected Long LR0F = Long.valueOf(1), LR1F[]={LR0F}, LR2F[][]={LR1F};\n+    final transient Long LT0F = Long.valueOf(1), LT1F[]={LT0F}, LT2F[][]={LT1F};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/isFinal\/isfinal001a.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    static { cL = new Long(1l); }\n+    static { cL = Long.valueOf(1l); }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/isFinal\/isfinal003a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n@@ -104,1 +104,1 @@\n-    static final     Long LF0S = new Long(1), LF1S[]={LF0S}, LF2S[][]={LF1S};\n+    static final     Long LF0S = Long.valueOf(1), LF1S[]={LF0S}, LF2S[][]={LF1S};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/isStatic\/isstatic001a.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    static { cL = new Long(1l); }\n+    static { cL = Long.valueOf(1l); }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/isStatic\/isstatic003a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-        final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+        final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/isSynthetic\/issynthetic001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/name\/name001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    static { cL = new Long(1l); }\n+    static { cL = Long.valueOf(1l); }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/name\/name003a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-    final     Long LF0 = new Long(1), LF1[]={LF0}, LF2[][]={LF1};\n+    final     Long LF0 = Long.valueOf(1), LF1[]={LF0}, LF2[][]={LF1};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/TypeComponent\/signature\/sign001a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-        Z0  = new Boolean(true);\n+        Z0  = Boolean.valueOf(true);\n@@ -216,1 +216,1 @@\n-        B0  = new Byte(java.lang.Byte.MIN_VALUE);\n+        B0  = Byte.valueOf(java.lang.Byte.MIN_VALUE);\n@@ -219,1 +219,1 @@\n-        C0  = new Character(java.lang.Character.MIN_VALUE);\n+        C0  = Character.valueOf(java.lang.Character.MIN_VALUE);\n@@ -222,1 +222,1 @@\n-        D0  = new Double(java.lang.Double.MIN_VALUE);\n+        D0  = Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -225,1 +225,1 @@\n-        F0  = new Float(java.lang.Float.MIN_VALUE);\n+        F0  = Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -228,1 +228,1 @@\n-        I0  = new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -231,1 +231,1 @@\n-        L0  = new Long(java.lang.Long.MIN_VALUE);\n+        L0  = Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -234,1 +234,1 @@\n-        S0  = new Short(java.lang.Short.MIN_VALUE);\n+        S0  = Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -244,1 +244,1 @@\n-        LS0 = new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -247,1 +247,1 @@\n-        LP0 = new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -250,1 +250,1 @@\n-        LU0 = new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -253,1 +253,1 @@\n-        LR0 = new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -256,1 +256,1 @@\n-        LT0 = new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -259,1 +259,1 @@\n-        LV0 = new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointEvent\/_itself_\/wevent001a.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-        Z0  = new Boolean(true);\n+        Z0  = Boolean.valueOf(true);\n@@ -178,1 +178,1 @@\n-        B0  = new Byte(java.lang.Byte.MIN_VALUE);\n+        B0  = Byte.valueOf(java.lang.Byte.MIN_VALUE);\n@@ -181,1 +181,1 @@\n-        C0  = new Character(java.lang.Character.MIN_VALUE);\n+        C0  = Character.valueOf(java.lang.Character.MIN_VALUE);\n@@ -184,1 +184,1 @@\n-        D0  = new Double(java.lang.Double.MIN_VALUE);\n+        D0  = Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -187,1 +187,1 @@\n-        F0  = new Float(java.lang.Float.MIN_VALUE);\n+        F0  = Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -190,1 +190,1 @@\n-        I0  = new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -193,1 +193,1 @@\n-        L0  = new Long(java.lang.Long.MIN_VALUE);\n+        L0  = Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -196,1 +196,1 @@\n-        S0  = new Short(java.lang.Short.MIN_VALUE);\n+        S0  = Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -206,1 +206,1 @@\n-        LS0 = new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -209,1 +209,1 @@\n-        LP0 = new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -212,1 +212,1 @@\n-        LU0 = new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -215,1 +215,1 @@\n-        LR0 = new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -218,1 +218,1 @@\n-        LT0 = new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -221,1 +221,1 @@\n-        LV0 = new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointEvent\/object\/object001a.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,1 +184,1 @@\n-        Z0  = new Boolean(true);\n+        Z0  = Boolean.valueOf(true);\n@@ -187,1 +187,1 @@\n-        B0  = new Byte(java.lang.Byte.MIN_VALUE);\n+        B0  = Byte.valueOf(java.lang.Byte.MIN_VALUE);\n@@ -190,1 +190,1 @@\n-        C0  = new Character(java.lang.Character.MIN_VALUE);\n+        C0  = Character.valueOf(java.lang.Character.MIN_VALUE);\n@@ -193,1 +193,1 @@\n-        D0  = new Double(java.lang.Double.MIN_VALUE);\n+        D0  = Double.valueOf(java.lang.Double.MIN_VALUE);\n@@ -196,1 +196,1 @@\n-        F0  = new Float(java.lang.Float.MIN_VALUE);\n+        F0  = Float.valueOf(java.lang.Float.MIN_VALUE);\n@@ -199,1 +199,1 @@\n-        I0  = new Integer(java.lang.Integer.MIN_VALUE);\n+        I0  = Integer.valueOf(java.lang.Integer.MIN_VALUE);\n@@ -202,1 +202,1 @@\n-        L0  = new Long(java.lang.Long.MIN_VALUE);\n+        L0  = Long.valueOf(java.lang.Long.MIN_VALUE);\n@@ -205,1 +205,1 @@\n-        S0  = new Short(java.lang.Short.MIN_VALUE);\n+        S0  = Short.valueOf(java.lang.Short.MIN_VALUE);\n@@ -215,1 +215,1 @@\n-        LS0 = new Long(java.lang.Long.MAX_VALUE);\n+        LS0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -218,1 +218,1 @@\n-        LP0 = new Long(java.lang.Long.MAX_VALUE);\n+        LP0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -221,1 +221,1 @@\n-        LU0 = new Long(java.lang.Long.MAX_VALUE);\n+        LU0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -224,1 +224,1 @@\n-        LR0 = new Long(java.lang.Long.MAX_VALUE);\n+        LR0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -227,1 +227,1 @@\n-        LT0 = new Long(java.lang.Long.MAX_VALUE);\n+        LT0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n@@ -230,1 +230,1 @@\n-        LV0 = new Long(java.lang.Long.MAX_VALUE);\n+        LV0 = Long.valueOf(java.lang.Long.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointEvent\/valueCurrent\/valuecur001a.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,1 +267,1 @@\n-            JDWP.UntaggedValue value = new JDWP.UntaggedValue(new Integer(intValue));\n+            JDWP.UntaggedValue value = new JDWP.UntaggedValue(Integer.valueOf(intValue));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ArrayReference\/SetValues\/setvalues001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,1 @@\n-            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, new Integer(ARGUMENT_VALUE));\n+            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, Integer.valueOf(ARGUMENT_VALUE));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ClassType\/InvokeMethod\/invokemeth001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,1 +243,1 @@\n-            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, new Integer(ARGUMENT_VALUE));\n+            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, Integer.valueOf(ARGUMENT_VALUE));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ClassType\/NewInstance\/newinst001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,9 +72,9 @@\n-                    { \"booleanValue\", \"boolean\",  new Boolean(true),           \"own\"},\n-                    { \"byteValue\",    \"byte\",     new Byte((byte)0x0F),        \"own\"},\n-                    { \"charValue\",    \"char\",     new Character('Z'),          \"own\"},\n-                    { \"intValue\",     \"int\",      new Integer(100),            \"own\"},\n-                    { \"shortValue\",   \"short\",    new Short((short)10),        \"own\"},\n-                    { \"longValue\",    \"long\",     new Long((long)1000000),     \"own\"},\n-                    { \"floatValue\",   \"float\",    new Float((float)3.14),      \"own\"},\n-                    { \"doubleValue\",  \"double\",   new Double((double)2.8e-12), \"own\"},\n-                    { \"objectValue\",  \"objectID\", new Long((long)0),           \"own\"},\n+                    { \"booleanValue\", \"boolean\",  Boolean.valueOf(true),           \"own\"},\n+                    { \"byteValue\",    \"byte\",     Byte.valueOf((byte)0x0F),        \"own\"},\n+                    { \"charValue\",    \"char\",     Character.valueOf('Z'),          \"own\"},\n+                    { \"intValue\",     \"int\",      Integer.valueOf(100),            \"own\"},\n+                    { \"shortValue\",   \"short\",    Short.valueOf((short)10),        \"own\"},\n+                    { \"longValue\",    \"long\",     Long.valueOf((long)1000000),     \"own\"},\n+                    { \"floatValue\",   \"float\",    Float.valueOf((float)3.14),      \"own\"},\n+                    { \"doubleValue\",  \"double\",   Double.valueOf((double)2.8e-12), \"own\"},\n+                    { \"objectValue\",  \"objectID\", Long.valueOf((long)0),           \"own\"},\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ObjectReference\/GetValues\/getvalues001.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,1 +254,1 @@\n-            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, new Integer(ARGUMENT_VALUE));\n+            JDWP.Value value = new JDWP.Value(JDWP.Tag.INT, Integer.valueOf(ARGUMENT_VALUE));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ObjectReference\/InvokeMethod\/invokemeth001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,9 +69,9 @@\n-                    { \"booleanValue\", \"boolean\",  new Boolean(true),           \"own\"},\n-                    { \"byteValue\",    \"byte\",     new Byte((byte)0x0F),        \"own\"},\n-                    { \"charValue\",    \"char\",     new Character('Z'),          \"own\"},\n-                    { \"intValue\",     \"int\",      new Integer(100),            \"own\"},\n-                    { \"shortValue\",   \"short\",    new Short((short)10),        \"own\"},\n-                    { \"longValue\",    \"long\",     new Long((long)1000000),     \"own\"},\n-                    { \"floatValue\",   \"float\",    new Float((float)3.14),      \"own\"},\n-                    { \"doubleValue\",  \"double\",   new Double((double)2.8e-12), \"own\"},\n-                    { \"objectValue\",  \"objectID\", new Long((long)0),           \"own\"},\n+                    { \"booleanValue\", \"boolean\",  Boolean.valueOf(true),           \"own\"},\n+                    { \"byteValue\",    \"byte\",     Byte.valueOf((byte)0x0F),        \"own\"},\n+                    { \"charValue\",    \"char\",     Character.valueOf('Z'),          \"own\"},\n+                    { \"intValue\",     \"int\",      Integer.valueOf(100),            \"own\"},\n+                    { \"shortValue\",   \"short\",    Short.valueOf((short)10),        \"own\"},\n+                    { \"longValue\",    \"long\",     Long.valueOf((long)1000000),     \"own\"},\n+                    { \"floatValue\",   \"float\",    Float.valueOf((float)3.14),      \"own\"},\n+                    { \"doubleValue\",  \"double\",   Double.valueOf((double)2.8e-12), \"own\"},\n+                    { \"objectValue\",  \"objectID\", Long.valueOf((long)0),           \"own\"},\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ReferenceType\/GetValues\/getvalues001.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,9 +76,9 @@\n-                    { \"booleanValue\", \"boolean\",  new Boolean(true),           new Byte(JDWP.Tag.BOOLEAN)},\n-                    { \"byteValue\",    \"byte\",     new Byte((byte)0x0F),        new Byte(JDWP.Tag.BYTE)   },\n-                    { \"charValue\",    \"char\",     new Character('Z'),          new Byte(JDWP.Tag.CHAR)   },\n-                    { \"intValue\",     \"int\",      new Integer(100),            new Byte(JDWP.Tag.INT)    },\n-                    { \"shortValue\",   \"short\",    new Short((short)10),        new Byte(JDWP.Tag.SHORT)  },\n-                    { \"longValue\",    \"long\",     new Long((long)1000000),     new Byte(JDWP.Tag.LONG)   },\n-                    { \"floatValue\",   \"float\",    new Float((float)3.14),      new Byte(JDWP.Tag.FLOAT)  },\n-                    { \"doubleValue\",  \"double\",   new Double((double)2.8e-12), new Byte(JDWP.Tag.DOUBLE) },\n-                    { \"objectValue\",  \"objectID\", new Long((long)0),           new Byte(JDWP.Tag.OBJECT) }\n+                    { \"booleanValue\", \"boolean\",  Boolean.valueOf(true),           Byte.valueOf(JDWP.Tag.BOOLEAN)},\n+                    { \"byteValue\",    \"byte\",     Byte.valueOf((byte)0x0F),        Byte.valueOf(JDWP.Tag.BYTE)   },\n+                    { \"charValue\",    \"char\",     Character.valueOf('Z'),          Byte.valueOf(JDWP.Tag.CHAR)   },\n+                    { \"intValue\",     \"int\",      Integer.valueOf(100),            Byte.valueOf(JDWP.Tag.INT)    },\n+                    { \"shortValue\",   \"short\",    Short.valueOf((short)10),        Byte.valueOf(JDWP.Tag.SHORT)  },\n+                    { \"longValue\",    \"long\",     Long.valueOf((long)1000000),     Byte.valueOf(JDWP.Tag.LONG)   },\n+                    { \"floatValue\",   \"float\",    Float.valueOf((float)3.14),      Byte.valueOf(JDWP.Tag.FLOAT)  },\n+                    { \"doubleValue\",  \"double\",   Double.valueOf((double)2.8e-12), Byte.valueOf(JDWP.Tag.DOUBLE) },\n+                    { \"objectValue\",  \"objectID\", Long.valueOf((long)0),           Byte.valueOf(JDWP.Tag.OBJECT) }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/StackFrame\/GetValues\/getvalues001.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                        new Integer(argParser.getAgents().size()).toString() });\n+                        Integer.valueOf(argParser.getAgents().size()).toString() });\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach001\/attach001TestRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,1 +223,1 @@\n-            objGl = new Integer(1973);\n+            objGl = Integer.valueOf(1973);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/PopFrame\/popframe003p.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        new Integer(\"4\");\n+        Integer.valueOf(\"4\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/redefclass019\/newclass_g\/redefclass019a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-                    list.add(new Integer(j));\n+                    list.add(Integer.valueOf(j));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/unit\/timers\/JvmtiTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        Object[] params = {new Long(id), new Integer(Integer.MAX_VALUE)};\n+        Object[] params = {Long.valueOf(id), Integer.valueOf(Integer.MAX_VALUE)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/MemoryUsage\/from\/from001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-        Object[] params = {new Long(id), new Integer(Integer.MAX_VALUE)};\n+        Object[] params = {Long.valueOf(id), Integer.valueOf(Integer.MAX_VALUE)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/ThreadInfo\/from_c\/from_c001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-                                       register.postRegister(new Boolean(false));\n+                                       register.postRegister(Boolean.valueOf(false));\n@@ -185,1 +185,1 @@\n-                                       register.postRegister(new Boolean(false));\n+                                       register.postRegister(Boolean.valueOf(false));\n@@ -196,1 +196,1 @@\n-                               register.postRegister(new Boolean(true));\n+                               register.postRegister(Boolean.valueOf(true));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/CustomMBeanServer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -426,1 +426,1 @@\n-        Attribute attribute = new Attribute(name, new Long(value));\n+        Attribute attribute = new Attribute(name, Long.valueOf(value));\n@@ -445,1 +445,1 @@\n-        Attribute attribute = new Attribute(name, new Boolean(value));\n+        Attribute attribute = new Attribute(name, Boolean.valueOf(value));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/Monitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-            Object[] params = {new Long(id), new Integer(maxDepth)};\n+            Object[] params = {Long.valueOf(id), Integer.valueOf(maxDepth)};\n@@ -314,1 +314,1 @@\n-            Object[] params = {new Long(id)};\n+            Object[] params = {Long.valueOf(id)};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/ThreadMonitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-                Attribute attribute = new Attribute(name, new Long(value));\n+                Attribute attribute = new Attribute(name, Long.valueOf(value));\n@@ -122,1 +122,1 @@\n-                Attribute attribute = new Attribute(name, new Boolean(value));\n+                Attribute attribute = new Attribute(name, Boolean.valueOf(value));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/server\/ServerMXBean.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private static String calculatedSync = \"abc\";\n@@ -86,1 +87,1 @@\n-            calculated = new Integer(0);\n+            calculated = Integer.valueOf(0);\n@@ -206,2 +207,2 @@\n-                synchronized (calculated) {\n-                    calculated = new Integer(calculated.intValue() + 1);\n+                synchronized (calculatedSync) {\n+                    calculated = Integer.valueOf(calculated.intValue() + 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/thread\/cmon001.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+    public static String activeThreadsSync = \"abc\";\n@@ -72,1 +73,1 @@\n-            activeThreads = new Integer(0);\n+            activeThreads = Integer.valueOf(0);\n@@ -295,1 +296,1 @@\n-            synchronized (strace001.activeThreads) {\n+            synchronized (strace001.activeThreadsSync) {\n@@ -297,1 +298,1 @@\n-                    = new Integer(strace001.activeThreads.intValue() + 1);\n+                    = Integer.valueOf(strace001.activeThreads.intValue() + 1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/thread\/strace001.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-            pool.add(new Character(this.alphabeth.charAt(i)));\n+            pool.add(Character.valueOf(this.alphabeth.charAt(i)));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/TreeNodesDenotation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,1 +180,1 @@\n-        return new Long(System.currentTimeMillis()).toString();\n+        return Long.valueOf(System.currentTimeMillis()).toString();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/AODTestRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,1 +172,1 @@\n-                                        offsets.add(new Integer(i));\n+                                        offsets.add(Integer.valueOf(i));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/classload\/GeneratingClassLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-            param = new Byte(value.byteValue());\n+            param = Byte.valueOf(value.byteValue());\n@@ -76,1 +76,1 @@\n-            param = new Short(value.shortValue());\n+            param = Short.valueOf(value.shortValue());\n@@ -79,1 +79,1 @@\n-            param = new Character(value.charValue());\n+            param = Character.valueOf(value.charValue());\n@@ -82,1 +82,1 @@\n-            param = new Integer(value.intValue());\n+            param = Integer.valueOf(value.intValue());\n@@ -85,1 +85,1 @@\n-            param = new Long(value.longValue());\n+            param = Long.valueOf(value.longValue());\n@@ -88,1 +88,1 @@\n-            param = new Float(value.floatValue());\n+            param = Float.valueOf(value.floatValue());\n@@ -91,1 +91,1 @@\n-            param = new Double(value.doubleValue());\n+            param = Double.valueOf(value.doubleValue());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/ValueConversionDebugger.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1445,1 +1445,1 @@\n-                    Long value = new Long(typeID);\n+                    Long value = Long.valueOf(typeID);\n@@ -1480,1 +1480,1 @@\n-                    Long value = new Long(typeID);\n+                    Long value = Long.valueOf(typeID);\n@@ -1539,1 +1539,1 @@\n-                    IDs.add(new Long(id));\n+                    IDs.add(Long.valueOf(id));\n@@ -1545,1 +1545,1 @@\n-                    modifiers.add(new Integer(modBits));\n+                    modifiers.add(Integer.valueOf(modBits));\n@@ -1597,1 +1597,1 @@\n-                    IDs.add(new Long(id));\n+                    IDs.add(Long.valueOf(id));\n@@ -1603,1 +1603,1 @@\n-                    modifiers.add(new Integer(modBits));\n+                    modifiers.add(Integer.valueOf(modBits));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdwp\/Debugee.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -813,1 +813,1 @@\n-                    value = new Byte(castedValue);\n+                    value = Byte.valueOf(castedValue);\n@@ -817,1 +817,1 @@\n-                    value = new Character(castedValue);\n+                    value = Character.valueOf(castedValue);\n@@ -821,1 +821,1 @@\n-                    value = new Float(castedValue);\n+                    value = Float.valueOf(castedValue);\n@@ -825,1 +825,1 @@\n-                    value = new Double(castedValue);\n+                    value = Double.valueOf(castedValue);\n@@ -829,1 +829,1 @@\n-                    value = new Integer(castedValue);\n+                    value = Integer.valueOf(castedValue);\n@@ -833,1 +833,1 @@\n-                    value = new Short(castedValue);\n+                    value = Short.valueOf(castedValue);\n@@ -837,1 +837,1 @@\n-                    value = new Boolean(castedValue != 0);\n+                    value = Boolean.valueOf(castedValue != 0);\n@@ -841,1 +841,1 @@\n-                    value = new Long(castedValue);\n+                    value = Long.valueOf(castedValue);\n@@ -844,1 +844,1 @@\n-                    value = new Long(0);\n+                    value = Long.valueOf(0);\n@@ -854,1 +854,1 @@\n-                    value = new Long(castedValue);\n+                    value = Long.valueOf(castedValue);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdwp\/JDWP.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -454,8 +454,8 @@\n-    public static Boolean expectedBooleanWrapperValue = new Boolean(Boolean.TRUE);\n-    public static Byte expectedByteWrapperValue = new Byte(Byte.MAX_VALUE);\n-    public static Character expectedCharWrapperValue = new Character(Character.MAX_VALUE);\n-    public static Short expectedShortWrapperValue = new Short(Short.MAX_VALUE);\n-    public static Integer expectedIntWrapperValue = new Integer(Integer.MAX_VALUE);\n-    public static Long expectedLongWrapperValue = new Long(Long.MAX_VALUE);\n-    public static Float expectedFloatWrapperValue = new Float(Float.MAX_VALUE);\n-    public static Double expectedDoubleWrapperValue = new Double(Double.MAX_VALUE);\n+    public static Boolean expectedBooleanWrapperValue = Boolean.valueOf(Boolean.TRUE);\n+    public static Byte expectedByteWrapperValue = Byte.valueOf(Byte.MAX_VALUE);\n+    public static Character expectedCharWrapperValue = Character.valueOf(Character.MAX_VALUE);\n+    public static Short expectedShortWrapperValue = Short.valueOf(Short.MAX_VALUE);\n+    public static Integer expectedIntWrapperValue = Integer.valueOf(Integer.MAX_VALUE);\n+    public static Long expectedLongWrapperValue = Long.valueOf(Long.MAX_VALUE);\n+    public static Float expectedFloatWrapperValue = Float.valueOf(Float.MAX_VALUE);\n+    public static Double expectedDoubleWrapperValue = Double.valueOf(Double.MAX_VALUE);\n@@ -480,8 +480,8 @@\n-    public static Boolean unexpectedBooleanWrapperValue = new Boolean(Boolean.FALSE);\n-    public static Byte unexpectedByteWrapperValue = new Byte((byte)0);\n-    public static Character unexpectedCharWrapperValue = new Character((char)0);\n-    public static Short unexpectedShortWrapperValue = new Short((short)0);\n-    public static Integer unexpectedIntWrapperValue = new Integer(0);\n-    public static Long unexpectedLongWrapperValue = new Long(0);\n-    public static Float unexpectedFloatWrapperValue = new Float(0);\n-    public static Double unexpectedDoubleWrapperValue = new Double(0);\n+    public static Boolean unexpectedBooleanWrapperValue = Boolean.valueOf(Boolean.FALSE);\n+    public static Byte unexpectedByteWrapperValue = Byte.valueOf((byte)0);\n+    public static Character unexpectedCharWrapperValue = Character.valueOf((char)0);\n+    public static Short unexpectedShortWrapperValue = Short.valueOf((short)0);\n+    public static Integer unexpectedIntWrapperValue = Integer.valueOf(0);\n+    public static Long unexpectedLongWrapperValue = Long.valueOf(0);\n+    public static Float unexpectedFloatWrapperValue = Float.valueOf(0);\n+    public static Double unexpectedDoubleWrapperValue = Double.valueOf(0);\n@@ -537,7 +537,7 @@\n-    public static Byte invalidBooleanWrapperValue = new Byte(Byte.MAX_VALUE);\n-    public static Short invalidByteWrapperValue = new Short(Short.MAX_VALUE);\n-    public static Character invalidShortWrapperValue = new Character(Character.MAX_VALUE);\n-    public static Integer invalidCharWrapperValue = new Integer(Integer.MAX_VALUE);\n-    public static Long invalidIntWrapperValue = new Long(Long.MAX_VALUE);\n-    public static Float invalidLongWrapperValue = new Float(Float.MAX_VALUE);\n-    public static Double invalidFloatWrapperValue = new Double(Double.MAX_VALUE);\n+    public static Byte invalidBooleanWrapperValue = Byte.valueOf(Byte.MAX_VALUE);\n+    public static Short invalidByteWrapperValue = Short.valueOf(Short.MAX_VALUE);\n+    public static Character invalidShortWrapperValue = Character.valueOf(Character.MAX_VALUE);\n+    public static Integer invalidCharWrapperValue = Integer.valueOf(Integer.MAX_VALUE);\n+    public static Long invalidIntWrapperValue = Long.valueOf(Long.MAX_VALUE);\n+    public static Float invalidLongWrapperValue = Float.valueOf(Float.MAX_VALUE);\n+    public static Double invalidFloatWrapperValue = Double.valueOf(Double.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/ForceEarlyReturnTestThread.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-    public static Boolean expectedBooleanWrapperValue = new Boolean(Boolean.TRUE);\n+    public static Boolean expectedBooleanWrapperValue = Boolean.valueOf(Boolean.TRUE);\n@@ -121,1 +121,1 @@\n-    public static Byte expectedByteWrapperValue = new Byte(Byte.MAX_VALUE);\n+    public static Byte expectedByteWrapperValue = Byte.valueOf(Byte.MAX_VALUE);\n@@ -123,1 +123,1 @@\n-    public static Character expectedCharWrapperValue = new Character(Character.MAX_VALUE);\n+    public static Character expectedCharWrapperValue = Character.valueOf(Character.MAX_VALUE);\n@@ -125,1 +125,1 @@\n-    public static Short expectedShortWrapperValue = new Short(Short.MAX_VALUE);\n+    public static Short expectedShortWrapperValue = Short.valueOf(Short.MAX_VALUE);\n@@ -127,1 +127,1 @@\n-    public static Integer expectedIntWrapperValue = new Integer(Integer.MAX_VALUE);\n+    public static Integer expectedIntWrapperValue = Integer.valueOf(Integer.MAX_VALUE);\n@@ -129,1 +129,1 @@\n-    public static Long expectedLongWrapperValue = new Long(Long.MAX_VALUE);\n+    public static Long expectedLongWrapperValue = Long.valueOf(Long.MAX_VALUE);\n@@ -131,1 +131,1 @@\n-    public static Float expectedFloatWrapperValue = new Float(Float.MAX_VALUE);\n+    public static Float expectedFloatWrapperValue = Float.valueOf(Float.MAX_VALUE);\n@@ -133,1 +133,1 @@\n-    public static Double expectedDoubleWrapperValue = new Double(Double.MAX_VALUE);\n+    public static Double expectedDoubleWrapperValue = Double.valueOf(Double.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/NativeMethodsTestThread.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,2 +211,2 @@\n-        Object integerValue = new Integer(0);\n-        Object doubleValue = new Double(0);\n+        Object integerValue = Integer.valueOf(0);\n+        Object doubleValue = Double.valueOf(0);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/except\/except004.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            return new Boolean(! (Boolean) notEqualTo);\n+            return Boolean.valueOf(! (Boolean) notEqualTo);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/share\/RandomValueGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-            Argument intArg = new Argument(int.class, new Integer(1));\n+            Argument intArg = new Argument(int.class, Integer.valueOf(1));\n@@ -89,1 +89,1 @@\n-                            new Argument[] { new Argument(int.class, new Integer(1)), new Argument(float.class, new Float(1.0)) },\n+                            new Argument[] { new Argument(int.class, Integer.valueOf(1)), new Argument(float.class, Float.valueOf(1.0)) },\n@@ -102,1 +102,1 @@\n-                                new Argument[] { new Argument(int.class, new Integer(1)), new Argument(float.class, new Float(1.0)) },\n+                                new Argument[] { new Argument(int.class, Integer.valueOf(1)), new Argument(float.class, Float.valueOf(1.0)) },\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/share\/SimpleUnitTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-            return new Boolean(Env.getRNG().nextInt(2) == 0);\n+            return Boolean.valueOf(Env.getRNG().nextInt(2) == 0);\n@@ -261,1 +261,1 @@\n-            return new Byte((byte) Env.getRNG().nextInt(1 << Byte.SIZE));\n+            return Byte.valueOf((byte) Env.getRNG().nextInt(1 << Byte.SIZE));\n@@ -264,1 +264,1 @@\n-            return new Integer(Env.getRNG().nextInt());\n+            return Integer.valueOf(Env.getRNG().nextInt());\n@@ -267,1 +267,1 @@\n-            return new Short((short) Env.getRNG().nextInt(1 << Short.SIZE));\n+            return Short.valueOf((short) Env.getRNG().nextInt(1 << Short.SIZE));\n@@ -270,1 +270,1 @@\n-            return new Long(Env.getRNG().nextLong());\n+            return Long.valueOf(Env.getRNG().nextLong());\n@@ -273,1 +273,1 @@\n-            return new Float(Env.getRNG().nextFloat());\n+            return Float.valueOf(Env.getRNG().nextFloat());\n@@ -276,1 +276,1 @@\n-            return new Double(Env.getRNG().nextDouble());\n+            return Double.valueOf(Env.getRNG().nextDouble());\n@@ -279,1 +279,1 @@\n-            return new Character((char) (32 + Env.getRNG().nextInt(96)));\n+            return Character.valueOf((char) (32 + Env.getRNG().nextInt(96)));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/share\/TestTypes.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-            return new Integer(0);\n+            return Integer.valueOf(0);\n@@ -101,1 +101,1 @@\n-            return new Integer(1);\n+            return Integer.valueOf(1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/deoptimize\/Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-        return new Integer(0);\n+        return Integer.valueOf(0);\n@@ -105,1 +105,1 @@\n-            return new Integer(1);\n+            return Integer.valueOf(1);\n@@ -125,1 +125,1 @@\n-        final Argument finalRetVal = Argument.fromValue(new Integer(0));\n+        final Argument finalRetVal = Argument.fromValue(Integer.valueOf(0));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/i2c_c2i\/Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -721,1 +721,1 @@\n-            mv.visitLdcInsn(new Long(value));\n+            mv.visitLdcInsn(Long.valueOf(value));\n@@ -736,1 +736,1 @@\n-            mv.visitLdcInsn(new Float(value));\n+            mv.visitLdcInsn(Float.valueOf(value));\n@@ -749,1 +749,1 @@\n-            mv.visitLdcInsn(new Double(value));\n+            mv.visitLdcInsn(Double.valueOf(value));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/ClassFileGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}