{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.nio.file.*;\n-import java.util.*;\n@@ -31,0 +29,11 @@\n+import java.io.UncheckedIOException;\n+import java.lang.ref.Cleaner.Cleanable;\n+import java.nio.file.Files;\n+import java.nio.file.NotDirectoryException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n@@ -32,0 +41,2 @@\n+import jdk.internal.ref.Cleaner;\n+import jdk.internal.ref.CleanerFactory;\n@@ -53,0 +64,18 @@\n+    private final Cleanable closer;\n+\n+    private static class Closer implements Runnable {\n+        private final Poller poller;\n+\n+        Closer(Poller poller) {\n+            this.poller = poller;\n+        }\n+\n+        public void run() {\n+            try {\n+                poller.close();\n+            } catch (IOException cause) {\n+                throw new UncheckedIOException(cause);\n+            }\n+        }\n+    }\n+\n@@ -79,0 +108,3 @@\n+\n+        this.closer = CleanerFactory.cleaner().register(this,\n+                                                        new Closer(poller));\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxWatchService.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.io.IOException;\n+import java.lang.ref.Cleaner.Cleanable;\n@@ -41,1 +43,0 @@\n-import java.security.PrivilegedExceptionAction;\n@@ -43,1 +44,1 @@\n-import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n@@ -54,0 +55,2 @@\n+import jdk.internal.ref.Cleaner;\n+import jdk.internal.ref.CleanerFactory;\n@@ -75,0 +78,37 @@\n+    private final Cleanable closer;\n+\n+    @SuppressWarnings(\"removal\")\n+    private static void dispose(Map<Object, PollingWatchKey> map,\n+                                ScheduledExecutorService scheduledExecutor) {\n+        synchronized (map) {\n+            for (Map.Entry<Object, PollingWatchKey> entry: map.entrySet()) {\n+                PollingWatchKey watchKey = entry.getValue();\n+                watchKey.disable();\n+                watchKey.invalidate();\n+            }\n+            map.clear();\n+        }\n+        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            @Override\n+            public Void run() {\n+                scheduledExecutor.shutdown();\n+                return null;\n+            }\n+         });\n+    }\n+\n+    private static class Closer implements Runnable {\n+        private final Map<Object, PollingWatchKey> map;\n+        private final ScheduledExecutorService scheduledExecutor;\n+\n+        Closer(Map<Object, PollingWatchKey> map, ScheduledExecutorService scheduledExecutor) {\n+            this.map = map;\n+            this.scheduledExecutor = scheduledExecutor;\n+        }\n+\n+        @SuppressWarnings(\"removal\")\n+        public void run() {\n+            dispose(map, scheduledExecutor);\n+        }\n+    }\n+\n@@ -85,0 +125,1 @@\n+        this.closer = CleanerFactory.cleaner().register(this, new Closer(map, scheduledExecutor));\n@@ -203,1 +244,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -206,15 +246,1 @@\n-        synchronized (map) {\n-            for (Map.Entry<Object, PollingWatchKey> entry: map.entrySet()) {\n-                PollingWatchKey watchKey = entry.getValue();\n-                watchKey.disable();\n-                watchKey.invalidate();\n-            }\n-            map.clear();\n-        }\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                scheduledExecutor.shutdown();\n-                return null;\n-            }\n-         });\n+        dispose(map, scheduledExecutor);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":45,"deletions":19,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.io.UncheckedIOException;\n+import java.lang.ref.Cleaner.Cleanable;\n@@ -39,0 +41,2 @@\n+import jdk.internal.ref.Cleaner;\n+import jdk.internal.ref.CleanerFactory;\n@@ -55,0 +59,19 @@\n+    private final Cleanable closer;\n+\n+    private static class Closer implements Runnable {\n+        private final Poller poller;\n+\n+        Closer(Poller poller) {\n+            this.poller = poller;\n+        }\n+\n+        public void run() {\n+            try {\n+                poller.close();\n+            } catch (IOException cause) {\n+                throw new UncheckedIOException(cause);\n+            }\n+        }\n+    }\n+\n+\n@@ -69,0 +92,3 @@\n+\n+        this.closer = CleanerFactory.cleaner().register(this,\n+                                                        new Closer(poller));\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsWatchService.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}