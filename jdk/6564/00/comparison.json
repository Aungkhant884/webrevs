{"files":[{"patch":"@@ -1,85 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-\n- Redistribution and use in source and binary forms, with or without\n- modification, are permitted provided that the following conditions\n- are met:\n-\n-   - Redistributions of source code must retain the above copyright\n-     notice, this list of conditions and the following disclaimer.\n-\n-   - Redistributions in binary form must reproduce the above copyright\n-     notice, this list of conditions and the following disclaimer in the\n-     documentation and\/or other materials provided with the distribution.\n-\n-   - Neither the name of Oracle nor the names of its\n-     contributors may be used to endorse or promote products derived\n-     from this software without specific prior written permission.\n-\n- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n- IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-\n-<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0<\/modelVersion>\n-    <parent>\n-        <artifactId>IdealGraphVisualizer-parent<\/artifactId>\n-        <groupId>com.sun.hotspot.igv<\/groupId>\n-        <version>1.0-SNAPSHOT<\/version>\n-    <\/parent>\n-    <groupId>com.sun.hotspot.igv<\/groupId>\n-    <artifactId>BatikSVGProxy<\/artifactId>\n-    <version>1.0-SNAPSHOT<\/version>\n-    <packaging>nbm<\/packaging>\n-    <name>BatikSVGProxy<\/name>\n-    <properties>\n-        <project.build.sourceEncoding>UTF-8<\/project.build.sourceEncoding>\n-    <\/properties>\n-    <dependencies>\n-    <\/dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.netbeans.utilities<\/groupId>\n-                <artifactId>nbm-maven-plugin<\/artifactId>\n-                <version>${nbmmvnplugin.version}<\/version>\n-                <extensions>true<\/extensions>\n-                <configuration>\n-                    <publicPackages>\n-                        <publicPackage>com.sun.hotspot.igv.svg<\/publicPackage>\n-                    <\/publicPackages>\n-                <\/configuration>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-compiler-plugin<\/artifactId>\n-                <version>${mvncompilerplugin.version}<\/version>\n-                <configuration>\n-                    <source>1.8<\/source>\n-                    <target>1.8<\/target>\n-                <\/configuration>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-jar-plugin<\/artifactId>\n-                <version>${mvnjarplugin.version}<\/version>\n-                <configuration>\n-                    <!-- to have the jar plugin pickup the nbm generated manifest -->\n-                    <archive>\n-                        <manifestFile>${project.build.outputDirectory}\/META-INF\/MANIFEST.MF<\/manifestFile>\n-                    <\/archive>\n-                <\/configuration>\n-            <\/plugin>\n-        <\/plugins>\n-    <\/build>\n-<\/project>\n","filename":"src\/utils\/IdealGraphVisualizer\/BatikSVGProxy\/pom.xml","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.svg;\n-\n-import java.awt.Graphics2D;\n-import java.io.Writer;\n-import java.io.File;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import org.w3c.dom.DOMImplementation;\n-\n-\/**\n- * Utility class\n- * @author Thomas Wuerthinger\n- *\/\n-public class BatikSVG {\n-\n-    private BatikSVG() {\n-    }\n-\n-    private static Constructor SVGGraphics2DConstructor;\n-    private static Method streamMethod;\n-    private static Method createDefaultMethod;\n-    private static Method getDOMImplementationMethod;\n-    private static Method setEmbeddedFontsOnMethod;\n-    private static Class<?> classSVGGraphics2D;\n-\n-    \/**\n-     * Creates a graphics object that allows to be exported to SVG data using the {@link #printToStream(Graphics2D, Writer, boolean) printToStream} method.\n-     * @return the newly created Graphics2D object or null if the library does not exist\n-     *\/\n-    public static Graphics2D createGraphicsObject() {\n-        try {\n-            if (SVGGraphics2DConstructor == null) {\n-                String batikJar = System.getenv().get(\"IGV_BATIK_JAR\");\n-                if (batikJar == null) {\n-                    return null;\n-                }\n-                \/\/ Load batik in it's own class loader since some it's support jars interfere with the JDK\n-                URL url = new File(batikJar).toURI().toURL();\n-                ClassLoader cl = new URLClassLoader(new URL[] { url });\n-                Class<?> classGenericDOMImplementation = cl.loadClass(\"org.apache.batik.dom.GenericDOMImplementation\");\n-                Class<?> classSVGGeneratorContext = cl.loadClass(\"org.apache.batik.svggen.SVGGeneratorContext\");\n-                classSVGGraphics2D = cl.loadClass(\"org.apache.batik.svggen.SVGGraphics2D\");\n-                getDOMImplementationMethod = classGenericDOMImplementation.getDeclaredMethod(\"getDOMImplementation\", new Class[0]);\n-                createDefaultMethod = classSVGGeneratorContext.getDeclaredMethod(\"createDefault\", new Class[]{org.w3c.dom.Document.class});\n-                setEmbeddedFontsOnMethod = classSVGGeneratorContext.getDeclaredMethod(\"setEmbeddedFontsOn\", new Class[]{boolean.class});\n-                streamMethod = classSVGGraphics2D.getDeclaredMethod(\"stream\", Writer.class, boolean.class);\n-                SVGGraphics2DConstructor = classSVGGraphics2D.getConstructor(classSVGGeneratorContext, boolean.class);\n-            }\n-            DOMImplementation dom = (DOMImplementation) getDOMImplementationMethod.invoke(null);\n-            org.w3c.dom.Document document = dom.createDocument(\"http:\/\/www.w3.org\/2000\/svg\", \"svg\", null);\n-            Object ctx = createDefaultMethod.invoke(null, document);\n-            setEmbeddedFontsOnMethod.invoke(ctx, true);\n-            Graphics2D svgGenerator = (Graphics2D) SVGGraphics2DConstructor.newInstance(ctx, true);\n-            return svgGenerator;\n-        } catch (ClassNotFoundException e) {\n-            return null;\n-        } catch (NoSuchMethodException e) {\n-            return null;\n-        } catch (IllegalAccessException e) {\n-            return null;\n-        } catch (InvocationTargetException e) {\n-            return null;\n-        } catch (InstantiationException e) {\n-            return null;\n-        } catch (MalformedURLException e) {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Serializes a graphics object to a stream in SVG format.\n-     * @param svgGenerator the graphics object. Only graphics objects created by the {@link #createGraphicsObject() createGraphicsObject} method are valid.\n-     * @param stream the stream to which the data is written\n-     * @param useCSS whether to use CSS styles in the SVG output\n-     *\/\n-    public static void printToStream(Graphics2D svgGenerator, Writer stream, boolean useCSS) {\n-        assert classSVGGraphics2D != null;\n-        assert classSVGGraphics2D.isInstance(svgGenerator);\n-        try {\n-            streamMethod.invoke(svgGenerator, stream, useCSS);\n-        } catch (IllegalAccessException e) {\n-            assert false;\n-        } catch (InvocationTargetException e) {\n-            assert false;\n-        }\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/BatikSVGProxy\/src\/main\/java\/com\/sun\/hotspot\/igv\/svg\/BatikSVG.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/**\n- * This package is used to proxy the SVG export functionality of the BatikSVG library. Reflection is used such that the\n- * library is optional and need not be present at build time.\n- *\/\n-package com.sun.hotspot.igv.svg;\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/BatikSVGProxy\/src\/main\/java\/com\/sun\/hotspot\/igv\/svg\/package-info.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-Manifest-Version: 1.0\n-OpenIDE-Module: com.sun.hotspot.igv.svg\n-OpenIDE-Module-Localizing-Bundle: com\/sun\/hotspot\/igv\/svg\/Bundle.properties\n-OpenIDE-Module-Specification-Version: 1.0\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/BatikSVGProxy\/src\/main\/nbm\/manifest.mf","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-OpenIDE-Module-Name=BatikSVGProxy\n","filename":"src\/utils\/IdealGraphVisualizer\/BatikSVGProxy\/src\/main\/resources\/com\/sun\/hotspot\/igv\/svg\/Bundle.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -84,5 +84,0 @@\n-        <dependency>\n-            <groupId>com.sun.hotspot.igv<\/groupId>\n-            <artifactId>BatikSVGProxy<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n@@ -154,0 +149,15 @@\n+        <dependency>\n+            <groupId>org.apache.xmlgraphics<\/groupId>\n+            <artifactId>batik-dom<\/artifactId>\n+            <version>${batik.version}<\/version>\n+        <\/dependency>\n+        <dependency>\n+            <groupId>org.apache.xmlgraphics<\/groupId>\n+            <artifactId>batik-svggen<\/artifactId>\n+            <version>${batik.version}<\/version>\n+        <\/dependency>\n+        <dependency>\n+            <groupId>com.github.librepdf<\/groupId>\n+            <artifactId>openpdf<\/artifactId>\n+            <version>${openpdf.version}<\/version>\n+        <\/dependency>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/pom.xml","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.awt.Rectangle;\n@@ -47,1 +48,1 @@\n-    public void paint(Graphics2D svgGenerator);\n+    public void paint(Graphics2D generator);\n@@ -73,0 +74,2 @@\n+    public Rectangle getBounds();\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import com.sun.hotspot.igv.svg.BatikSVG;\n@@ -55,0 +54,10 @@\n+import org.apache.batik.dom.GenericDOMImplementation;\n+import org.apache.batik.svggen.SVGGeneratorContext;\n+import org.apache.batik.svggen.SVGGraphics2D;\n+import com.lowagie.text.Document;\n+import com.lowagie.text.Rectangle;\n+import com.lowagie.text.pdf.PdfWriter;\n+import com.lowagie.text.pdf.PdfContentByte;\n+import com.lowagie.text.pdf.PdfTemplate;\n+import com.lowagie.text.pdf.PdfGraphics2D;\n+import org.w3c.dom.DOMImplementation;\n@@ -106,5 +115,5 @@\n-            Graphics2D svgGenerator = BatikSVG.createGraphicsObject();\n-\n-            if (svgGenerator == null) {\n-                NotifyDescriptor message = new NotifyDescriptor.Message(\"For export to SVG files the Batik SVG Toolkit must be intalled.\", NotifyDescriptor.ERROR_MESSAGE);\n-                DialogDisplayer.getDefault().notifyLater(message);\n+            String lcFileName = f.getName().toLowerCase();\n+            if (lcFileName.endsWith(\".pdf\")) {\n+                exportToPDF(scene, f);\n+            } else if (lcFileName.endsWith(\".svg\")) {\n+                exportToSVG(scene, f);\n@@ -112,18 +121,2 @@\n-                scene.paint(svgGenerator);\n-                FileOutputStream os = null;\n-                try {\n-                    os = new FileOutputStream(f);\n-                    Writer out = new OutputStreamWriter(os, UTF_8);\n-                    BatikSVG.printToStream(svgGenerator, out, true);\n-                } catch (FileNotFoundException e) {\n-                    NotifyDescriptor message = new NotifyDescriptor.Message(\"For export to SVG files the Batik SVG Toolkit must be intalled.\", NotifyDescriptor.ERROR_MESSAGE);\n-                    DialogDisplayer.getDefault().notifyLater(message);\n-                } finally {\n-                    if (os != null) {\n-                        try {\n-                            os.close();\n-                        } catch (IOException e) {\n-                        }\n-                    }\n-                }\n-\n+                NotifyDescriptor message = new NotifyDescriptor.Message(\"Unknown image file extension: expected either '.pdf' or '.svg'\", NotifyDescriptor.ERROR_MESSAGE);\n+                DialogDisplayer.getDefault().notifyLater(message);\n@@ -642,1 +635,51 @@\n-}\n+    }\n+\n+    private static void exportToPDF(DiagramViewer scene, File f) {\n+        int width = scene.getBounds().width;\n+        int height = scene.getBounds().height;\n+        com.lowagie.text.Document document = new Document(new Rectangle(width, height));\n+        PdfWriter writer = null;\n+        try {\n+            writer = PdfWriter.getInstance(document, new FileOutputStream(f));\n+            writer.setCloseStream(true);\n+            document.open();\n+            PdfContentByte contentByte = writer.getDirectContent();\n+            PdfTemplate template = contentByte.createTemplate(width, height);\n+            PdfGraphics2D pdfGenerator = new PdfGraphics2D(contentByte, width, height);\n+            scene.paint(pdfGenerator);\n+            pdfGenerator.dispose();\n+            contentByte.addTemplate(template, 0, 0);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (document.isOpen()) {\n+                document.close();\n+            }\n+            if (writer != null) {\n+                writer.close();\n+            }\n+        }\n+    }\n+\n+    private static void exportToSVG(DiagramViewer scene, File f) {\n+        DOMImplementation dom = GenericDOMImplementation.getDOMImplementation();\n+        org.w3c.dom.Document document = dom.createDocument(\"http:\/\/www.w3.org\/2000\/svg\", \"svg\", null);\n+        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);\n+        ctx.setEmbeddedFontsOn(true);\n+        SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, true);\n+        scene.paint(svgGenerator);\n+        FileOutputStream os = null;\n+        try {\n+            os = new FileOutputStream(f);\n+            Writer out = new OutputStreamWriter(os, \"UTF-8\");\n+            svgGenerator.stream(out, true);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (os != null) {\n+                try {\n+                    os.close();\n+                } catch (IOException e) {}\n+            }\n+        }\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":68,"deletions":25,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        putValue(Action.SHORT_DESCRIPTION, \"Export current graph as SVG file\");\n+        putValue(Action.SHORT_DESCRIPTION, \"Export current graph as image file\");\n@@ -69,1 +69,4 @@\n-                return true;\n+                String lcFileName = f.getName().toLowerCase();\n+                return lcFileName.endsWith(\".pdf\") ||\n+                       lcFileName.endsWith(\".svg\") ||\n+                       f.isDirectory();\n@@ -74,1 +77,1 @@\n-                return \"SVG files (*.svg)\";\n+                return \"Image files (*.pdf, *.svg)\";\n@@ -83,1 +86,1 @@\n-                file = new File(file.getAbsolutePath() + \".svg\");\n+                file = new File(file.getAbsolutePath() + \".pdf\");\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExportAction.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -145,5 +145,0 @@\n-        <dependency>\n-            <groupId>${project.groupId}<\/groupId>\n-            <artifactId>BatikSVGProxy<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n","filename":"src\/utils\/IdealGraphVisualizer\/application\/pom.xml","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-        <module>BatikSVGProxy<\/module>\n@@ -95,1 +94,1 @@\n-        <nbmmvnplugin.version>4.3<\/nbmmvnplugin.version>\n+        <nbmmvnplugin.version>4.6<\/nbmmvnplugin.version>\n@@ -97,1 +96,1 @@\n-        <mvnjarplugin.version>3.1.2<\/mvnjarplugin.version>\n+        <mvnjarplugin.version>3.2.0<\/mvnjarplugin.version>\n@@ -99,0 +98,2 @@\n+        <batik.version>1.14<\/batik.version>\n+        <openpdf.version>1.3.26<\/openpdf.version>\n","filename":"src\/utils\/IdealGraphVisualizer\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}