{"files":[{"patch":"@@ -89,1 +89,1 @@\n-        private Platform platform;\n+        private final Platform platform;\n@@ -91,1 +91,1 @@\n-        DefaultExecutableImage(Path home, Set<String> modules) {\n+        DefaultExecutableImage(Path home, Set<String> modules, Platform p) {\n@@ -99,1 +99,1 @@\n-            this.platform = Platform.UNKNOWN;\n+            this.platform = p;\n@@ -133,5 +133,0 @@\n-        @Override\n-        public void setTargetPlatform(Platform p) {\n-            platform = p;\n-        }\n-\n@@ -142,6 +137,0 @@\n-\n-        @Override\n-        public boolean is64Bit() {\n-            return (platform.arch() == Platform.Architecture.x64 ||\n-                    platform.arch() == Platform.Architecture.AARCH64);\n-        }\n@@ -184,1 +173,1 @@\n-            this.platform = Platform.parseTargetPlatform(value);\n+            this.platform = Platform.parsePlatform(value);\n@@ -535,1 +524,1 @@\n-        return new DefaultExecutableImage(root, modules);\n+        return new DefaultExecutableImage(root, modules, platform);\n@@ -577,1 +566,4 @@\n-            return new DefaultExecutableImage(root, retrieveModules(root));\n+            \/\/ It may be possible to extract the platform info from the given image.\n+            \/\/ --post-process-path is a hidden option and pass unknown platform for now.\n+            \/\/ --generate-cds-archive plugin cannot be used with --post-process-path option.\n+            return new DefaultExecutableImage(root, retrieveModules(root), Platform.UNKNOWN);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-     * Gets the target image platform.\n+     * Gets the platform of the image.\n@@ -82,1 +82,1 @@\n-     * @return Platform\n+     * @return {@code Platform} object representing the platform of the image\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/ImageBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,7 +65,0 @@\n-    \/**\n-     * Set the Platform of the image.\n-     *\n-     * @param p\n-     *\/\n-    public void setTargetPlatform(Platform p);\n-\n@@ -78,7 +71,0 @@\n-\n-    \/**\n-     * Checks if the image is 64-bit.\n-     *\n-     * @return boolean\n-     *\/\n-    public boolean is64Bit();\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ExecutableImage.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -195,1 +195,0 @@\n-        img.setTargetPlatform(imageBuilder.getTargetPlatform());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImagePluginStack.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    public static Platform parseTargetPlatform(String platformString) {\n+    public static Platform parsePlatform(String platformString) {\n@@ -76,0 +76,8 @@\n+    \/**\n+     * @return true is it's a 64-bit platform\n+     *\/\n+    public boolean is64Bit() {\n+        return (arch() == Platform.Architecture.x64 ||\n+                arch() == Platform.Architecture.AARCH64);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Platform.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -30,1 +31,0 @@\n-import java.util.stream.Collectors;\n@@ -79,2 +79,2 @@\n-        } catch (Exception ex) {\n-            ex.printStackTrace();\n+        } catch (InterruptedException | IOException e) {\n+            throw new PluginException(e);\n@@ -82,3 +82,2 @@\n-        if (status == 0) {\n-            System.out.println(\"Created \" + archiveMsg + \" archive successfully\");\n-        } else {\n+\n+        if (status != 0) {\n@@ -104,1 +103,1 @@\n-            if (image.is64Bit()) {\n+            if (targetPlatform.is64Bit()) {\n@@ -107,0 +106,1 @@\n+            System.out.println(\"Created CDS archive successfully\");\n@@ -121,4 +121,1 @@\n-        in.transformAndCopy((file) -> {\n-            return file;\n-            }, out);\n-        return out.build();\n+        return in;\n@@ -126,1 +123,0 @@\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/CDSPlugin.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-        Platform platform = Platform.parseTargetPlatform(targetPlatform);\n+        Platform platform = Platform.parsePlatform(targetPlatform);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,3 +90,0 @@\n-main.opt.generate-cds-archive=\\\n-\\      --generate-cds-archive            Generate CDS archives (classes.jsa, classes_nocoops.jsa)\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-generate-cds-archive.argument=\n@@ -143,2 +142,1 @@\n-CDS plugin: generate cds archives (classes.jsa, classes_nocoops.jsa).\\n\\\n-Applicable to JDK images built with the CDS feature.\n+CDS plugin: generate cds archives if the runtime image supports CDS feature.\\n\\\n@@ -147,2 +145,1 @@\n-\\  --generate-cds-archive    Generate CDS archives (classes.jsa, classes_nocoops.jsa).\\n\\\n-\\                            Applicable to JDK images built with the CDS feature.\n+\\  --generate-cds-archive    Generate CDS archives if the runtime image supports CDS feature.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.Platform;\n@@ -65,2 +66,1 @@\n-        String osName = System.getProperty(\"os.name\");\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+        if (Platform.isWindows()) {\n@@ -76,1 +76,1 @@\n-       if (osName.toLowerCase().startsWith(\"linux\")) {\n+       if (Platform.isLinux()) {\n@@ -81,1 +81,1 @@\n-                           \"--output\", System.getProperty(\"test.classes\") + sep + \"module\" + \"-tmp\"};\n+                           \"--output\", System.getProperty(\"test.classes\") + sep + module + \"-tmp\"};\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}