{"files":[{"patch":"@@ -655,1 +655,3 @@\n-        FieldValues vals = defaultReadFields(curObj, curDesc);\n+\n+        \/\/ Read fields of the current descriptor into a new FieldValues\n+        FieldValues values = new FieldValues(curDesc, true);\n@@ -657,2 +659,2 @@\n-            defaultCheckFieldValues(curObj, curDesc, vals);\n-            defaultSetFieldValues(curObj, curDesc, vals);\n+            values.defaultCheckFieldValues(curObj);\n+            values.defaultSetFieldValues(curObj);\n@@ -698,2 +700,2 @@\n-        GetFieldImpl getField = new GetFieldImpl(curDesc);\n-        getField.readFields();\n+        \/\/ Read fields of the current descriptor into a new FieldValues\n+        FieldValues values = new FieldValues(curDesc, false);\n@@ -709,2 +711,1 @@\n-\n-        return getField;\n+        return values;\n@@ -2324,1 +2325,0 @@\n-                ObjectStreamClass slotDesc = slots[i].desc;\n@@ -2326,1 +2326,1 @@\n-                    defaultReadFields(null, slotDesc);\n+                    new FieldValues(slots[i].desc, true);\n@@ -2331,1 +2331,1 @@\n-        FieldValues fieldValues = defaultReadFields(null, desc);\n+        FieldValues fieldValues = new FieldValues(desc, true);\n@@ -2390,1 +2390,2 @@\n-                    defaultReadFields(null, slotDesc); \/\/ skip field values\n+                    \/\/ Read fields of the current descriptor into a new FieldValues and discard\n+                    new FieldValues(slotDesc, true);\n@@ -2434,1 +2435,2 @@\n-                    FieldValues vals = defaultReadFields(obj, slotDesc);\n+                    \/\/ Read fields of the current descriptor into a new FieldValues\n+                    FieldValues values = new FieldValues(slotDesc, true);\n@@ -2436,1 +2438,1 @@\n-                        slotValues[i] = vals;\n+                        slotValues[i] = values;\n@@ -2438,2 +2440,2 @@\n-                        defaultCheckFieldValues(obj, slotDesc, vals);\n-                        defaultSetFieldValues(obj, slotDesc, vals);\n+                        values.defaultCheckFieldValues(obj);\n+                        values.defaultSetFieldValues(obj);\n@@ -2463,1 +2465,1 @@\n-                    defaultCheckFieldValues(obj, slots[i].desc, slotValues[i]);\n+                    slotValues[i].defaultCheckFieldValues(obj);\n@@ -2467,1 +2469,1 @@\n-                    defaultSetFieldValues(obj, slots[i].desc, slotValues[i]);\n+                    slotValues[i].defaultSetFieldValues(obj);\n@@ -2501,70 +2503,0 @@\n-    \/*package-private*\/ class FieldValues {\n-        final byte[] primValues;\n-        final Object[] objValues;\n-\n-        FieldValues(byte[] primValues, Object[] objValues) {\n-            this.primValues = primValues;\n-            this.objValues = objValues;\n-        }\n-    }\n-\n-    \/**\n-     * Reads in values of serializable fields declared by given class\n-     * descriptor. Expects that passHandle is set to obj's handle before this\n-     * method is called.\n-     *\/\n-    private FieldValues defaultReadFields(Object obj, ObjectStreamClass desc)\n-        throws IOException\n-    {\n-        Class<?> cl = desc.forClass();\n-        if (cl != null && obj != null && !cl.isInstance(obj)) {\n-            throw new ClassCastException();\n-        }\n-\n-        byte[] primVals = null;\n-        int primDataSize = desc.getPrimDataSize();\n-        if (primDataSize > 0) {\n-            primVals = new byte[primDataSize];\n-            bin.readFully(primVals, 0, primDataSize, false);\n-        }\n-\n-        Object[] objVals = null;\n-        int numObjFields = desc.getNumObjFields();\n-        if (numObjFields > 0) {\n-            int objHandle = passHandle;\n-            ObjectStreamField[] fields = desc.getFields(false);\n-            objVals = new Object[numObjFields];\n-            int numPrimFields = fields.length - objVals.length;\n-            for (int i = 0; i < objVals.length; i++) {\n-                ObjectStreamField f = fields[numPrimFields + i];\n-                objVals[i] = readObject0(Object.class, f.isUnshared());\n-                if (f.getField() != null) {\n-                    handles.markDependency(objHandle, passHandle);\n-                }\n-            }\n-            passHandle = objHandle;\n-        }\n-\n-        return new FieldValues(primVals, objVals);\n-    }\n-\n-    \/** Throws ClassCastException if any value is not assignable. *\/\n-    private void defaultCheckFieldValues(Object obj, ObjectStreamClass desc,\n-                                         FieldValues values) {\n-        Object[] objectValues = values.objValues;\n-        if (objectValues != null)\n-            desc.checkObjFieldValueTypes(obj, objectValues);\n-    }\n-\n-    \/** Sets field values in obj. *\/\n-    private void defaultSetFieldValues(Object obj, ObjectStreamClass desc,\n-                                       FieldValues values) {\n-        byte[] primValues = values.primValues;\n-        Object[] objectValues = values.objValues;\n-\n-        if (primValues != null)\n-            desc.setPrimFieldValues(obj, primValues);\n-        if (objectValues != null)\n-            desc.setObjFieldValues(obj, objectValues);\n-    }\n-\n@@ -2610,1 +2542,1 @@\n-    private class GetFieldImpl extends GetField {\n+    private final class FieldValues extends GetField {\n@@ -2615,1 +2547,1 @@\n-        private final byte[] primVals;\n+        final byte[] primValues;\n@@ -2617,1 +2549,1 @@\n-        private final Object[] objVals;\n+        final Object[] objValues;\n@@ -2622,1 +2554,1 @@\n-         * Creates GetFieldImpl object for reading fields defined in given\n+         * Creates FieldValues object for reading fields defined in given\n@@ -2624,0 +2556,3 @@\n+         * @param desc the ObjectStreamClass to read\n+         * @param recordDependencies if true, record the dependencies\n+         *                           from current PassHandle and the object's read.\n@@ -2625,1 +2560,1 @@\n-        GetFieldImpl(ObjectStreamClass desc) {\n+        FieldValues(ObjectStreamClass desc, boolean recordDependencies) throws IOException {\n@@ -2627,3 +2562,24 @@\n-            primVals = new byte[desc.getPrimDataSize()];\n-            objVals = new Object[desc.getNumObjFields()];\n-            objHandles = new int[objVals.length];\n+\n+            int primDataSize = desc.getPrimDataSize();\n+            primValues = (primDataSize > 0) ? new byte[primDataSize] : null;\n+            if (primDataSize > 0) {\n+                bin.readFully(primValues, 0, primDataSize, false);\n+            }\n+\n+            int numObjFields = desc.getNumObjFields();\n+            objValues = (numObjFields > 0) ? new Object[numObjFields] : null;\n+            objHandles = (numObjFields > 0) ? new int[numObjFields] : null;\n+            if (numObjFields > 0) {\n+                int objHandle = passHandle;\n+                ObjectStreamField[] fields = desc.getFields(false);\n+                int numPrimFields = fields.length - objValues.length;\n+                for (int i = 0; i < objValues.length; i++) {\n+                    ObjectStreamField f = fields[numPrimFields + i];\n+                    objValues[i] = readObject0(Object.class, f.isUnshared());\n+                    objHandles[i] = passHandle;\n+                    if (recordDependencies && f.getField() != null) {\n+                        handles.markDependency(objHandle, passHandle);\n+                    }\n+                }\n+                passHandle = objHandle;\n+            }\n@@ -2636,1 +2592,1 @@\n-        public boolean defaulted(String name) throws IOException {\n+        public boolean defaulted(String name) {\n@@ -2640,1 +2596,1 @@\n-        public boolean get(String name, boolean val) throws IOException {\n+        public boolean get(String name, boolean val) {\n@@ -2642,1 +2598,1 @@\n-            return (off >= 0) ? Bits.getBoolean(primVals, off) : val;\n+            return (off >= 0) ? Bits.getBoolean(primValues, off) : val;\n@@ -2645,1 +2601,1 @@\n-        public byte get(String name, byte val) throws IOException {\n+        public byte get(String name, byte val) {\n@@ -2647,1 +2603,1 @@\n-            return (off >= 0) ? primVals[off] : val;\n+            return (off >= 0) ? primValues[off] : val;\n@@ -2650,1 +2606,1 @@\n-        public char get(String name, char val) throws IOException {\n+        public char get(String name, char val) {\n@@ -2652,1 +2608,1 @@\n-            return (off >= 0) ? Bits.getChar(primVals, off) : val;\n+            return (off >= 0) ? Bits.getChar(primValues, off) : val;\n@@ -2655,1 +2611,1 @@\n-        public short get(String name, short val) throws IOException {\n+        public short get(String name, short val) {\n@@ -2657,1 +2613,1 @@\n-            return (off >= 0) ? Bits.getShort(primVals, off) : val;\n+            return (off >= 0) ? Bits.getShort(primValues, off) : val;\n@@ -2660,1 +2616,1 @@\n-        public int get(String name, int val) throws IOException {\n+        public int get(String name, int val) {\n@@ -2662,1 +2618,1 @@\n-            return (off >= 0) ? Bits.getInt(primVals, off) : val;\n+            return (off >= 0) ? Bits.getInt(primValues, off) : val;\n@@ -2665,1 +2621,1 @@\n-        public float get(String name, float val) throws IOException {\n+        public float get(String name, float val) {\n@@ -2667,1 +2623,1 @@\n-            return (off >= 0) ? Bits.getFloat(primVals, off) : val;\n+            return (off >= 0) ? Bits.getFloat(primValues, off) : val;\n@@ -2670,1 +2626,1 @@\n-        public long get(String name, long val) throws IOException {\n+        public long get(String name, long val) {\n@@ -2672,1 +2628,1 @@\n-            return (off >= 0) ? Bits.getLong(primVals, off) : val;\n+            return (off >= 0) ? Bits.getLong(primValues, off) : val;\n@@ -2675,1 +2631,1 @@\n-        public double get(String name, double val) throws IOException {\n+        public double get(String name, double val) {\n@@ -2677,1 +2633,1 @@\n-            return (off >= 0) ? Bits.getDouble(primVals, off) : val;\n+            return (off >= 0) ? Bits.getDouble(primValues, off) : val;\n@@ -2680,1 +2636,1 @@\n-        public Object get(String name, Object val) throws IOException {\n+        public Object get(String name, Object val) {\n@@ -2686,1 +2642,1 @@\n-                    objVals[off] : null;\n+                    objValues[off] : null;\n@@ -2692,15 +2648,11 @@\n-        \/**\n-         * Reads primitive and object field values from stream.\n-         *\/\n-        void readFields() throws IOException {\n-            bin.readFully(primVals, 0, primVals.length, false);\n-\n-            int oldHandle = passHandle;\n-            ObjectStreamField[] fields = desc.getFields(false);\n-            int numPrimFields = fields.length - objVals.length;\n-            for (int i = 0; i < objVals.length; i++) {\n-                objVals[i] =\n-                    readObject0(Object.class, fields[numPrimFields + i].isUnshared());\n-                objHandles[i] = passHandle;\n-            }\n-            passHandle = oldHandle;\n+        \/** Throws ClassCastException if any value is not assignable. *\/\n+        void defaultCheckFieldValues(Object obj) {\n+            if (objValues != null)\n+                desc.checkObjFieldValueTypes(obj, objValues);\n+        }\n+\n+        private void defaultSetFieldValues(Object obj) {\n+            if (primValues != null)\n+                desc.setPrimFieldValues(obj, primValues);\n+            if (objValues != null)\n+                desc.setObjFieldValues(obj, objValues);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":81,"deletions":129,"binary":false,"changes":210,"status":"modified"}]}