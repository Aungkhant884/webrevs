{"files":[{"patch":"@@ -519,5 +519,5 @@\n-#define DEVELOP_FLAG_INIT(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, DEVELOP_KIND,    __VA_ARGS__),\n-#define DEVELOP_FLAG_INIT_PD(type, name,        ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, DEVELOP_KIND_PD, __VA_ARGS__),\n-#define PRODUCT_FLAG_INIT(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, PRODUCT_KIND,    __VA_ARGS__),\n-#define PRODUCT_FLAG_INIT_PD(type, name,        ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, PRODUCT_KIND_PD, __VA_ARGS__),\n-#define NOTPROD_FLAG_INIT(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, NOTPROD_KIND,    __VA_ARGS__),\n+#define INITIALIZE_DEVELOP_FLAG(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, DEVELOP_KIND,    __VA_ARGS__),\n+#define INITIALIZE_DEVELOP_FLAG_PD(type, name,        ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, DEVELOP_KIND_PD, __VA_ARGS__),\n+#define INITIALIZE_PRODUCT_FLAG(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, PRODUCT_KIND,    __VA_ARGS__),\n+#define INITIALIZE_PRODUCT_FLAG_PD(type, name,        ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, PRODUCT_KIND_PD, __VA_ARGS__),\n+#define INITIALIZE_NOTPROD_FLAG(   type, name, value, ...) JVMFlag(FLAG_MEMBER_ENUM(name), FLAG_TYPE(type), XSTR(name), (void*)&name, NOTPROD_KIND,    __VA_ARGS__),\n@@ -531,5 +531,5 @@\n-  ALL_FLAGS(DEVELOP_FLAG_INIT,     \\\n-            DEVELOP_FLAG_INIT_PD,  \\\n-            PRODUCT_FLAG_INIT,     \\\n-            PRODUCT_FLAG_INIT_PD,  \\\n-            NOTPROD_FLAG_INIT,     \\\n+  ALL_FLAGS(INITIALIZE_DEVELOP_FLAG,     \\\n+            INITIALIZE_DEVELOP_FLAG_PD,  \\\n+            INITIALIZE_PRODUCT_FLAG,     \\\n+            INITIALIZE_PRODUCT_FLAG_PD,  \\\n+            INITIALIZE_NOTPROD_FLAG,     \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    bool verbose = !JVMFlagLimit::validated_after_ergo();\n+    bool verbose = JVMFlagLimit::verbose_checks_needed();\n@@ -106,1 +106,1 @@\n-    bool verbose = !JVMFlagLimit::validated_after_ergo();\n+    bool verbose = JVMFlagLimit::verbose_checks_needed();\n@@ -328,1 +328,1 @@\n-\/\/ This is called by the SET_FLAG_XXX macros.\n+\/\/ This is called by the FLAG_SET_XXX macros.\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  \/\/ SET_FLAG_{DEFAULT, CMDLINE, ERGO, MGMT} macros.\n+  \/\/ FLAG_SET_{DEFAULT, CMDLINE, ERGO, MGMT} macros.\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,2 +147,2 @@\n-JVMFlagsEnum JVMFlagLimit::_last_checked = static_cast<JVMFlagsEnum>(-1);\n-JVMFlagConstraintPhase JVMFlagLimit::_validating_phase = JVMFlagConstraintPhase::AtParse;;\n+JVMFlagsEnum JVMFlagLimit::_last_checked = INVALID_JVMFlagsEnum;\n+JVMFlagConstraintPhase JVMFlagLimit::_validating_phase = JVMFlagConstraintPhase::AtParse;\n@@ -152,0 +152,8 @@\n+const JVMFlag* JVMFlagLimit::last_checked_flag() {\n+  if (_last_checked != INVALID_JVMFlagsEnum) {\n+    return JVMFlag::flag_from_enum(_last_checked);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -115,7 +115,1 @@\n-  static const JVMFlag* last_checked_flag() {\n-    if (static_cast<int>(_last_checked) >= 0) {\n-      return JVMFlag::flag_from_enum(_last_checked);\n-    } else {\n-      return NULL;\n-    }\n-  }\n+  static const JVMFlag* last_checked_flag();\n@@ -129,1 +123,8 @@\n-  static bool validated_after_ergo() { return _validating_phase >= JVMFlagConstraintPhase::AfterErgo; };\n+\n+  \/\/ If range\/constraint checks fail, print verbose error messages only if we are parsing\n+  \/\/ arguments from the command-line. Silently ignore any invalid values that are\n+  \/\/ set programmatically via FLAG_SET_ERGO, etc.\n+  static bool verbose_checks_needed() {\n+    return _validating_phase == JVMFlagConstraintPhase::AtParse;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#define FLAG_MEMBER_ENUM_DECLARE(type, name, ...)  FLAG_MEMBER_ENUM_(name)\n+#define DEFINE_FLAG_MEMBER_ENUM(type, name, ...)  FLAG_MEMBER_ENUM_(name)\n@@ -41,5 +41,6 @@\n-  ALL_FLAGS(FLAG_MEMBER_ENUM_DECLARE,\n-            FLAG_MEMBER_ENUM_DECLARE,\n-            FLAG_MEMBER_ENUM_DECLARE,\n-            FLAG_MEMBER_ENUM_DECLARE,\n-            FLAG_MEMBER_ENUM_DECLARE,\n+  INVALID_JVMFlagsEnum = -1,\n+  ALL_FLAGS(DEFINE_FLAG_MEMBER_ENUM,\n+            DEFINE_FLAG_MEMBER_ENUM,\n+            DEFINE_FLAG_MEMBER_ENUM,\n+            DEFINE_FLAG_MEMBER_ENUM,\n+            DEFINE_FLAG_MEMBER_ENUM,\n@@ -53,3 +54,3 @@\n-#define FLAG_MEMBER_SET(name) Flag_##name##_set\n-#define FLAG_MEMBER_SET_(type, name) \\\n-  inline JVMFlag::Error FLAG_MEMBER_SET(name)(type value, JVMFlag::Flags origin) { \\\n+#define FLAG_MEMBER_SETTER(name) Flag_##name##_set\n+#define FLAG_MEMBER_SETTER_(type, name) \\\n+  inline JVMFlag::Error FLAG_MEMBER_SETTER(name)(type value, JVMFlag::Flags origin) { \\\n@@ -59,1 +60,1 @@\n-#define FLAG_MEMBER_SET_DECLARE(type, name, ...) FLAG_MEMBER_SET_(type, name)\n+#define DEFINE_FLAG_MEMBER_SETTER(type, name, ...) FLAG_MEMBER_SETTER_(type, name)\n@@ -61,5 +62,5 @@\n-ALL_FLAGS(FLAG_MEMBER_SET_DECLARE,\n-          FLAG_MEMBER_SET_DECLARE,\n-          FLAG_MEMBER_SET_DECLARE,\n-          FLAG_MEMBER_SET_DECLARE,\n-          FLAG_MEMBER_SET_DECLARE,\n+ALL_FLAGS(DEFINE_FLAG_MEMBER_SETTER,\n+          DEFINE_FLAG_MEMBER_SETTER,\n+          DEFINE_FLAG_MEMBER_SETTER,\n+          DEFINE_FLAG_MEMBER_SETTER,\n+          DEFINE_FLAG_MEMBER_SETTER,\n@@ -77,3 +78,3 @@\n-                                       FLAG_MEMBER_SET(name)((value), JVMFlag::COMMAND_LINE))\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SET(name)((value), JVMFlag::ERGONOMIC))\n-#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SET(name)((value), JVMFlag::MANAGEMENT))\n+                                       FLAG_MEMBER_SETTER(name)((value), JVMFlag::COMMAND_LINE))\n+#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::ERGONOMIC))\n+#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::MANAGEMENT))\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}