{"files":[{"patch":"@@ -254,1 +254,1 @@\n-  return JfrStackTraceRepository::record(thread, skip);\n+  return JfrStackTraceRepository::instance().record(thread, skip);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,0 +200,51 @@\n+class StackTraceChunkWriter {\n+ private:\n+  const JfrStackTraceRepository& _stack_trace_repo;\n+  JfrChunkWriter& _chunkwriter;\n+  int _count;\n+  const JfrStackTrace* resolve(const ObjectSample* sample);\n+ public:\n+  StackTraceChunkWriter(const JfrStackTraceRepository& stack_trace_repo, JfrChunkWriter& chunkwriter);\n+  void sample_do(ObjectSample* sample) {\n+    if (stack_trace_precondition(sample)) {\n+      const JfrStackTrace* const stack_trace = resolve(sample);\n+      if (stack_trace->should_write()) {\n+        stack_trace->write(_chunkwriter);\n+        _count++;\n+      }\n+    }\n+  }\n+  int count() const {\n+    return _count;\n+  }\n+};\n+\n+StackTraceChunkWriter::StackTraceChunkWriter(const JfrStackTraceRepository& stack_trace_repo, JfrChunkWriter& chunkwriter) :\n+  _stack_trace_repo(stack_trace_repo), _chunkwriter(chunkwriter), _count(0) {\n+}\n+\n+const JfrStackTrace* StackTraceChunkWriter::resolve(const ObjectSample* sample) {\n+  return _stack_trace_repo.lookup(sample->stack_trace_hash(), sample->stack_trace_id());\n+}\n+\n+static int do_write_stacktraces(const ObjectSampler* sampler, JfrStackTraceRepository& stack_trace_repo, JfrChunkWriter& chunkwriter) {\n+  assert(sampler != NULL, \"invariant\");\n+  const ObjectSample* const last = sampler->last();\n+  if (last != sampler->last_resolved()) {\n+    ResourceMark rm;\n+    StackTraceChunkWriter writer(stack_trace_repo, chunkwriter);\n+    iterate_samples(writer);\n+    return writer.count();\n+  }\n+  return 0;\n+}\n+\n+int ObjectSampleCheckpoint::write_objectsampler_stacktraces(const ObjectSampler* sampler, JfrStackTraceRepository& stack_trace_repo, JfrChunkWriter& chunkwriter) {\n+  assert(sampler != NULL, \"invariant\");\n+  assert(LeakProfiler::is_running(), \"invariant\");\n+  MutexLocker lock(JfrStacktrace_lock, Mutex::_no_safepoint_check_flag);\n+  \/\/ the lock is needed to ensure the unload lists do not grow in the middle of inspection.\n+  return do_write_stacktraces(sampler, stack_trace_repo, chunkwriter);\n+}\n+\n+\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class JfrChunkWriter;\n@@ -57,0 +58,1 @@\n+  static int write_objectsampler_stacktraces(const ObjectSampler* sampler, JfrStackTraceRepository& stack_trace_repo, JfrChunkWriter& chunkwriter);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-    JfrStackTraceRepository::record_and_cache(thread);\n+    JfrStackTraceRepository::leak_profiler_instance().record_and_cache(thread);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-  traceid id = JfrStackTraceRepository::add(sampler.stacktrace());\n+  traceid id = JfrStackTraceRepository::instance().add(sampler.stacktrace());\n@@ -284,1 +284,1 @@\n-  traceid id = JfrStackTraceRepository::add(cb.stacktrace());\n+  traceid id = JfrStackTraceRepository::instance().add(cb.stacktrace());\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -284,0 +284,3 @@\n+  if (!create_leak_profiler_stacktrace_repository()) {\n+    return false;\n+  }\n@@ -305,0 +308,1 @@\n+static JfrStackTraceRepository* _stack_trace_repository_leak_profiler;\n@@ -356,0 +360,6 @@\n+bool JfrRecorder::create_leak_profiler_stacktrace_repository() {\n+  assert(_stack_trace_repository_leak_profiler == NULL, \"invariant\");\n+  _stack_trace_repository_leak_profiler = JfrStackTraceRepository::create_leak_profiler();\n+  return _stack_trace_repository_leak_profiler != NULL && _stack_trace_repository_leak_profiler->initialize();\n+}\n+\n@@ -395,0 +405,4 @@\n+  if (_stack_trace_repository_leak_profiler != NULL) {\n+    JfrStackTraceRepository::destroy_leak_profiler();\n+    _stack_trace_repository_leak_profiler = NULL;\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  static bool create_leak_profiler_stacktrace_repository();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-          writer.write(JfrStackTraceRepository::record(event_thread));\n+          writer.write(JfrStackTraceRepository::instance().record(event_thread));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEvent.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,0 +267,36 @@\n+class ObjectSamplerStackTraceRepository : public StackObj {\n+ private:\n+  JfrStackTraceRepository& _repo;\n+  const ObjectSampler* _sampler;\n+  JfrChunkWriter& _cw;\n+  size_t _elements;\n+  bool _clear;\n+\n+ public:\n+  ObjectSamplerStackTraceRepository(JfrStackTraceRepository& repo, ObjectSampler* sampler, JfrChunkWriter& cw, bool clear) :\n+    _repo(repo), _sampler(sampler), _cw(cw), _elements(0), _clear(clear) {}\n+  bool process() {\n+    _elements = ObjectSampleCheckpoint::write_objectsampler_stacktraces(_sampler, _repo, _cw);\n+    if (_clear) {\n+      _repo.clear();\n+    }\n+    return true;\n+  }\n+  size_t elements() const { return _elements; }\n+  void reset() { _elements = 0; }\n+};\n+\n+typedef WriteCheckpointEvent<ObjectSamplerStackTraceRepository> WriteObjectSamplerStackTrace;\n+\n+static u4 flush_object_sampler_stacktrace(JfrStackTraceRepository& stack_trace_repo, ObjectSampler* sampler, JfrChunkWriter& chunkwriter) {\n+  ObjectSamplerStackTraceRepository str(stack_trace_repo, sampler, chunkwriter, false);\n+  WriteObjectSamplerStackTrace wst(chunkwriter, str, TYPE_STACKTRACE);\n+  return invoke(wst);\n+}\n+\n+static u4 write_object_sampler_stacktrace(JfrStackTraceRepository& stack_trace_repo, ObjectSampler* sampler, JfrChunkWriter& chunkwriter, bool clear) {\n+  ObjectSamplerStackTraceRepository str(stack_trace_repo, sampler, chunkwriter, clear);\n+  WriteObjectSamplerStackTrace wst(chunkwriter, str, TYPE_STACKTRACE);\n+  return invoke(wst);\n+}\n+\n@@ -383,0 +419,1 @@\n+  _leak_profiler_stack_trace_repository(JfrStackTraceRepository::leak_profiler_instance()),\n@@ -441,0 +478,3 @@\n+  if (LeakProfiler::is_running()) {\n+    _leak_profiler_stack_trace_repository.clear();\n+  }\n@@ -456,0 +496,3 @@\n+  if (LeakProfiler::is_running()) {\n+    _leak_profiler_stack_trace_repository.clear();\n+  }\n@@ -542,1 +585,1 @@\n-    ObjectSampleCheckpoint::on_rotation(ObjectSampler::acquire(), _stack_trace_repository);\n+    ObjectSampleCheckpoint::on_rotation(ObjectSampler::acquire(), _leak_profiler_stack_trace_repository);\n@@ -551,0 +594,5 @@\n+  if (LeakProfiler::is_running()) {\n+    if (_leak_profiler_stack_trace_repository.is_modified()) {\n+      write_object_sampler_stacktrace(_leak_profiler_stack_trace_repository, ObjectSampler::sampler(), _chunkwriter, false);\n+    }\n+  }\n@@ -570,0 +618,4 @@\n+  if (LeakProfiler::is_running()) {\n+    \/\/ The object sampler instance was exclusively acquired and locked in pre_safepoint_write.\n+    write_object_sampler_stacktrace(_leak_profiler_stack_trace_repository, ObjectSampler::sampler(), _chunkwriter, true);\n+  }\n@@ -627,0 +679,6 @@\n+  if (LeakProfiler::is_running()) {\n+    if (_leak_profiler_stack_trace_repository.is_modified()) {\n+      total_elements += flush_object_sampler_stacktrace(_leak_profiler_stack_trace_repository, ObjectSampler::acquire(), _chunkwriter);\n+      ObjectSampler::release();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  JfrStackTraceRepository& _leak_profiler_stack_trace_repository;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  friend class StackTraceChunkWriter;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"jfr\/leakprofiler\/sampling\/objectSample.hpp\"\n+#include \"jfr\/leakprofiler\/sampling\/objectSampler.hpp\"\n@@ -34,0 +36,2 @@\n+static JfrStackTraceRepository* _leak_profiler_instance = NULL;\n+static bool _serializer_registered = false;\n@@ -35,1 +39,4 @@\n-JfrStackTraceRepository::JfrStackTraceRepository() : _next_id(0), _entries(0) {\n+JfrStackTraceRepository::JfrStackTraceRepository() :\n+  _next_id(0),\n+  _entries(0),\n+  _last_id(0) {\n@@ -43,0 +50,4 @@\n+JfrStackTraceRepository& JfrStackTraceRepository::leak_profiler_instance() {\n+  return *_leak_profiler_instance;\n+}\n+\n@@ -49,0 +60,6 @@\n+JfrStackTraceRepository* JfrStackTraceRepository::create_leak_profiler() {\n+  assert(_leak_profiler_instance == NULL, \"invariant\");\n+  _leak_profiler_instance = new JfrStackTraceRepository();\n+  return _leak_profiler_instance;\n+}\n+\n@@ -65,1 +82,4 @@\n-  return JfrSerializer::register_serializer(TYPE_FRAMETYPE, true, new JfrFrameType());\n+  if (!_serializer_registered) {\n+    _serializer_registered = JfrSerializer::register_serializer(TYPE_FRAMETYPE, true, new JfrFrameType());\n+  }\n+  return _serializer_registered;\n@@ -69,1 +89,1 @@\n-  assert(_instance != NULL, \"invarinat\");\n+  assert(_instance != NULL, \"invariant\");\n@@ -74,1 +94,5 @@\n-static traceid last_id = 0;\n+void JfrStackTraceRepository::destroy_leak_profiler() {\n+  assert(_leak_profiler_instance != NULL, \"invariant\");\n+  delete _leak_profiler_instance;\n+  _leak_profiler_instance = NULL;\n+}\n@@ -77,1 +101,1 @@\n-  return last_id != _next_id;\n+  return _last_id != _next_id;\n@@ -105,1 +129,1 @@\n-  last_id = _next_id;\n+  _last_id = _next_id;\n@@ -145,1 +169,1 @@\n-  return instance().record_for(thread->as_Java_thread(), skip, frames, tl->stackdepth());\n+  return record_for(thread->as_Java_thread(), skip, frames, tl->stackdepth());\n@@ -154,1 +178,1 @@\n-  traceid tid = instance().add_trace(stacktrace);\n+  traceid tid = add_trace(stacktrace);\n@@ -157,1 +181,1 @@\n-    tid = instance().add_trace(stacktrace);\n+    tid = add_trace(stacktrace);\n@@ -172,1 +196,1 @@\n-    tl->set_cached_stack_trace_id(instance().add(stacktrace), hash);\n+    tl->set_cached_stack_trace_id(add(stacktrace), hash);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":34,"deletions":10,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+  friend class StackTraceChunkWriter;\n+  friend class ObjectSamplerStackTraceRepository;\n@@ -50,0 +52,1 @@\n+  traceid _last_id;\n@@ -52,1 +55,0 @@\n-  static JfrStackTraceRepository& instance();\n@@ -55,0 +57,2 @@\n+  static JfrStackTraceRepository* create_leak_profiler();\n+  static void destroy_leak_profiler();\n@@ -64,1 +68,1 @@\n-  static traceid add(const JfrStackTrace& stacktrace);\n+  traceid add(const JfrStackTrace& stacktrace);\n@@ -68,2 +72,4 @@\n-  static traceid record(Thread* thread, int skip = 0);\n-  static void record_and_cache(JavaThread* thread, int skip = 0);\n+  static JfrStackTraceRepository& instance();\n+  static JfrStackTraceRepository& leak_profiler_instance();\n+  traceid record(Thread* thread, int skip = 0);\n+  void record_and_cache(JavaThread* thread, int skip = 0);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(thread));\n+  tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(thread));\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrFlush.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(Thread::current()));\n+  tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(Thread::current()));\n@@ -47,1 +47,1 @@\n-  tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(t));\n+  tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(t));\n@@ -58,1 +58,1 @@\n-    tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(_t));\n+    tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(_t));\n@@ -70,1 +70,1 @@\n-    tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(_t));\n+    tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(_t));\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrStackTraceMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2923,1 +2923,1 @@\n-    tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(thread, 2));\n+    tl->set_cached_stack_trace_id(JfrStackTraceRepository::instance().record(thread, 2));\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}