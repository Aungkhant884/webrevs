{"files":[{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTree;\n+import java.awt.EventQueue;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+  @test\n+  @bug 4273712 4396746\n+  @summary tests that mouse exit event doesn't trigger drag\n+  @key headful\n+  @run main MouseExitGestureTriggerTest\n+*\/\n+\n+public class MouseExitGestureTriggerTest {\n+\n+    boolean recognized = false;\n+    volatile JFrame frame;\n+    volatile JPanel panel;\n+    volatile JTree tree;\n+    volatile DragSource dragSource;\n+    volatile Point srcPoint;\n+    volatile Rectangle r;\n+    volatile DragGestureListener dgl;\n+    static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    static final int RECOGNITION_TIMEOUT = 1000;\n+\n+    public static void main(String[] args) throws Exception {\n+        MouseExitGestureTriggerTest test = new MouseExitGestureTriggerTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new JFrame(\"MouseExitGestureTriggerTest\");\n+        panel = new JPanel();\n+        tree = new JTree();\n+\n+        dragSource = DragSource.getDefaultDragSource();\n+        dgl = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                Thread.dumpStack();\n+                recognized = true;\n+            }\n+        };\n+\n+        tree.setEditable(true);\n+        dragSource.createDefaultDragGestureRecognizer(tree,\n+                                                      DnDConstants.ACTION_MOVE,\n+                                                      dgl);\n+        panel.add(tree);\n+        frame.getContentPane().add(panel);\n+        frame.setLocation(200, 200);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        final Robot robot = new Robot();\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        clickRootNode(robot);\n+        clickRootNode(robot);\n+        clickRootNode(robot);\n+\n+        Thread.sleep(RECOGNITION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (recognized) {\n+                throw new RuntimeException(\"Mouse exit event triggered drag\");\n+            }\n+        });\n+    }\n+\n+    void clickRootNode(final Robot robot) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = tree.getLocationOnScreen();\n+            r = tree.getRowBounds(0);\n+        });\n+        srcPoint.translate(r.x + 2 * r.width \/3 , r.y + r.height \/ 2);\n+        robot.mouseMove(srcPoint.x ,srcPoint.y);\n+\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        Thread.sleep(10);\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        Thread.sleep(10);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/MouseExitGestureTriggerTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,494 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.SystemFlavorMap;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+\n+\/*\n+  @test\n+  @bug 4746177\n+  @summary tests that data types exported by Netscape 6.2 are supported\n+  @requires(os != \"windows\")\n+  @key headful\n+  @run main MozillaDnDTest\n+*\/\n+\n+public class MozillaDnDTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final String DATA = \"www.sun.com\";\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    volatile Frame frame;\n+    volatile Robot robot;\n+    volatile Panel panel;\n+    volatile Point p;\n+    volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        MozillaDnDTest test = new MozillaDnDTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            panel = new DragSourcePanel();\n+            frame = new Frame();\n+\n+            frame.setTitle(\"DragSource frame\");\n+            frame.setLocation(300, 200);\n+            frame.add(panel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Util.waitForInit();\n+\n+            Point sourcePoint = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+\n+            if (!Util.pointInComponent(robot, sourcePoint, panel)) {\n+                System.err.println(\"WARNING: Couldn't locate \" + panel +\n+                                   \" at point \" + sourcePoint);\n+                System.exit(MozillaDnDTest.CODE_OK);\n+            }\n+\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                                       sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(50);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(MozillaDnDTest.CODE_FAILURE);\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        panel = new DropTargetPanel();\n+\n+        frame.setTitle(\"DropTarget frame\");\n+        frame.setLocation(10, 200);\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() {\n+        \/\/ Solaris\/Linux-only test\n+        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+            return;\n+        }\n+        try {\n+            Util.waitForInit();\n+            EventQueue.invokeAndWait(() -> {\n+                p = panel.getLocationOnScreen();\n+                d = panel.getSize();\n+            });\n+\n+            Robot robot = new Robot();\n+            Point pp = new Point(p);\n+            pp.translate(d.width \/ 2, d.height \/ 2);\n+            if (!Util.pointInComponent(robot, pp, panel)) {\n+                System.err.println(\"WARNING: Couldn't locate \" + panel +\n+                                   \" at point \" + pp);\n+                return;\n+            }\n+\n+            String javaPath = System.getProperty(\"java.home\", \"\");\n+            String command = javaPath + File.separator + \"bin\" +\n+                File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+                \" MozillaDnDTest \" +\n+                p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+\n+            Process process = Runtime.getRuntime().exec(command);\n+            ProcessResults pres = ProcessResults.doWaitFor(process);\n+            returnCode = pres.exitValue;\n+\n+            if (pres.stderr != null && pres.stderr.length() > 0) {\n+                System.err.println(\"========= Child VM System.err ========\");\n+                System.err.print(pres.stderr);\n+                System.err.println(\"======================================\");\n+            }\n+\n+            if (pres.stdout != null && pres.stdout.length() > 0) {\n+                System.err.println(\"========= Child VM System.out ========\");\n+                System.err.print(pres.stdout);\n+                System.err.println(\"======================================\");\n+            }\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+        switch (returnCode) {\n+        case CODE_NOT_RETURNED:\n+            System.err.println(\"Child VM: failed to start\");\n+            break;\n+        case CODE_OK:\n+            System.err.println(\"Child VM: normal termination\");\n+            break;\n+        case CODE_FAILURE:\n+            System.err.println(\"Child VM: abnormal termination\");\n+            break;\n+        }\n+        if (returnCode != CODE_OK) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class Util implements AWTEventListener {\n+    private static final Toolkit tk = Toolkit.getDefaultToolkit();\n+    public static final Object SYNC_LOCK = new Object();\n+    private Component clickedComponent = null;\n+    private static final int PAINT_TIMEOUT = 10000;\n+    private static final int MOUSE_RELEASE_TIMEOUT = 10000;\n+    private static final Util util = new Util();\n+\n+    static {\n+        tk.addAWTEventListener(util, 0xFFFFFFFF);\n+    }\n+\n+    private void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        return util.isPointInComponent(robot, p, comp);\n+    }\n+\n+    private boolean isPointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        tk.sync();\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+\n+    public static void waitForInit() throws InterruptedException {\n+        final Frame f = new Frame() {\n+                public void paint(Graphics g) {\n+                    dispose();\n+                    synchronized (SYNC_LOCK) {\n+                        SYNC_LOCK.notifyAll();\n+                    }\n+                }\n+            };\n+        f.setBounds(600, 400, 200, 200);\n+        synchronized (SYNC_LOCK) {\n+            f.setVisible(true);\n+            SYNC_LOCK.wait(PAINT_TIMEOUT);\n+        }\n+        tk.sync();\n+    }\n+}\n+\n+class ProcessResults {\n+    public int exitValue;\n+    public String stdout;\n+    public String stderr;\n+\n+    public ProcessResults() {\n+        exitValue = -1;\n+        stdout = \"\";\n+        stderr = \"\";\n+    }\n+\n+    \/**\n+     * Method to perform a \"wait\" for a process and return its exit value.\n+     * This is a workaround for <code>Process.waitFor()<\/code> never returning.\n+     *\/\n+    public static ProcessResults doWaitFor(Process p) {\n+        ProcessResults pres = new ProcessResults();\n+\n+        InputStream in = null;\n+        InputStream err = null;\n+\n+        try {\n+            in = p.getInputStream();\n+            err = p.getErrorStream();\n+\n+            boolean finished = false;\n+\n+            while (!finished) {\n+                try {\n+                    while (in.available() > 0) {\n+                        pres.stdout += (char)in.read();\n+                    }\n+                    while (err.available() > 0) {\n+                        pres.stderr += (char)err.read();\n+                    }\n+                    \/\/ Ask the process for its exitValue. If the process\n+                    \/\/ is not finished, an IllegalThreadStateException\n+                    \/\/ is thrown. If it is finished, we fall through and\n+                    \/\/ the variable finished is set to true.\n+                    pres.exitValue = p.exitValue();\n+                    finished = true;\n+                }\n+                catch (IllegalThreadStateException e) {\n+                    \/\/ Process is not finished yet;\n+                    \/\/ Sleep a little to save on CPU cycles\n+                    Thread.currentThread().sleep(500);\n+                }\n+            }\n+            if (in != null) in.close();\n+            if (err != null) err.close();\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"doWaitFor(): unexpected exception\");\n+            e.printStackTrace();\n+        }\n+        return pres;\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+    static final Dimension preferredDimension = new Dimension(200, 200);\n+    static final DataFlavor df = new DataFlavor(\"application\/mozilla-test-flavor\",\n+                                                null);\n+    final DragSource ds = DragSource.getDefaultDragSource();\n+    final Transferable t = new Transferable() {\n+            final DataFlavor[] flavors = new DataFlavor[] { df };\n+            public DataFlavor[] getTransferDataFlavors() {\n+                return flavors;\n+            }\n+            public boolean isDataFlavorSupported(DataFlavor flav) {\n+                return df.equals(flav);\n+            }\n+            public Object getTransferData(DataFlavor flav)\n+              throws IOException, UnsupportedFlavorException {\n+                if (!isDataFlavorSupported(flav)) {\n+                    throw new UnsupportedFlavorException(flav);\n+                }\n+                byte[] bytes = MozillaDnDTest.DATA.getBytes(\"ASCII\");\n+                return new ByteArrayInputStream(bytes);\n+            }\n+        };\n+    final DragSourceListener dsl = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent dsde) {\n+                System.exit(MozillaDnDTest.CODE_OK);\n+            }\n+        };\n+    final DragGestureListener dgl = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, t, dsl);\n+            }\n+        };\n+    final DragGestureRecognizer dgr =\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              dgl);\n+    static {\n+        SystemFlavorMap sfm =\n+            (SystemFlavorMap)SystemFlavorMap.getDefaultFlavorMap();\n+        String[] natives = new String[] {\n+            \"_NETSCAPE_URL\",\n+            \"text\/plain\",\n+            \"text\/unicode\",\n+            \"text\/x-moz-url\",\n+            \"text\/html\"\n+        };\n+        sfm.setNativesForFlavor(df, natives);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+    final DropTarget dt = new DropTarget(this, this);\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public String getTransferString(Transferable t) {\n+        String string = null;\n+        DataFlavor[] dfs = t.getTransferDataFlavors();\n+        for (int i = 0; i < dfs.length; i++) {\n+            if (\"text\".equals(dfs[i].getPrimaryType()) ||\n+                DataFlavor.stringFlavor.equals(dfs[i])) {\n+                try {\n+                    Object o = t.getTransferData(dfs[i]);\n+                    if (o instanceof InputStream ||\n+                        o instanceof Reader) {\n+                        Reader reader = null;\n+                        if (o instanceof InputStream) {\n+                            InputStream is = (InputStream)o;\n+                            reader = new InputStreamReader(is);\n+                        } else {\n+                            reader = (Reader)o;\n+                        }\n+                        StringBuffer buf = new StringBuffer();\n+                        for (int c = reader.read(); c != -1; c = reader.read()) {\n+                            buf.append((char)c);\n+                        }\n+                        reader.close();\n+                        string = buf.toString();\n+                        break;\n+                    } else if (o instanceof String) {\n+                        string = (String)o;\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    \/\/ ignore.\n+                }\n+            }\n+        }\n+        return string;\n+     }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        Transferable t = dtde.getTransferable();\n+        String str = getTransferString(t);\n+        dtde.dropComplete(true);\n+\n+        if (!MozillaDnDTest.DATA.equals(str)) {\n+            throw new RuntimeException(\"Drop data:\" + str);\n+        }\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/MozillaDnDTest.java","additions":494,"deletions":0,"binary":false,"changes":494,"status":"added"},{"patch":"@@ -0,0 +1,415 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4399700\n+  @summary tests that drop transfer data can be requested in several data flavors.\n+  @key headful\n+  @run main MultiDataFlavorDropTest\n+*\/\n+\n+public class MultiDataFlavorDropTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    public static final int DROP_TIMEOUT = 10000;\n+    public static final int DROP_COMPLETION_TIMEOUT = 1000;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    volatile Frame frame;\n+    volatile Robot robot;\n+    volatile Panel panel;\n+    volatile Point p;\n+    volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        MultiDataFlavorDropTest test = new MultiDataFlavorDropTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            Transferable t = new TransferableNumber();\n+            panel = new DragSourcePanel(t);\n+\n+            frame = new Frame();\n+            frame.setTitle(\"DragSource frame\");\n+            frame.setLocation(300, 200);\n+            frame.add(panel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point sourcePoint = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                         sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+            synchronized (t) {\n+                t.wait(DROP_TIMEOUT);\n+            }\n+\n+            Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(MultiDataFlavorDropTest.CODE_FAILURE);\n+        }\n+        System.exit(MultiDataFlavorDropTest.CODE_OK);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        panel = new DropTargetPanel();\n+\n+        frame.setTitle(\"MultiDataFlavorDropTest\");\n+        frame.setLocation(10, 200);\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p = panel.getLocationOnScreen();\n+            d = panel.getSize();\n+        });\n+\n+        String javaPath = System.getProperty(\"java.home\", \"\");\n+        String command = javaPath + File.separator + \"bin\" +\n+                File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+                \" MultiDataFlavorDropTest \" +\n+                p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+\n+        Process process = Runtime.getRuntime().exec(command);\n+        returnCode = process.waitFor();\n+\n+        InputStream errorStream = process.getErrorStream();\n+        int count = errorStream.available();\n+        if (count > 0) {\n+            byte[] b = new byte[count];\n+            errorStream.read(b);\n+            System.err.println(\"========= Child VM System.err ========\");\n+            System.err.print(new String(b));\n+            System.err.println(\"======================================\");\n+        }\n+\n+        switch (returnCode) {\n+            case CODE_NOT_RETURNED:\n+                System.err.println(\"Child VM: failed to start\");\n+                break;\n+            case CODE_OK:\n+                System.err.println(\"Child VM: normal termination\");\n+                break;\n+            case CODE_FAILURE:\n+                System.err.println(\"Child VM: abnormal termination\");\n+                break;\n+        }\n+        if (returnCode != CODE_OK) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 DragGestureListener,\n+                                                 DragSourceListener {\n+\n+    final Transferable transferable;\n+\n+    public DragSourceButton(Transferable t) {\n+        super(\"DragSourceButton\");\n+\n+        this.transferable = t;\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, transferable, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+}\n+\n+class IntegerDataFlavor extends DataFlavor {\n+\n+    private final int number;\n+\n+    public IntegerDataFlavor(int n) throws ClassNotFoundException {\n+        super(\"application\/integer-\" + n +\n+              \"; class=java.lang.Integer\");\n+        this.number = n;\n+    }\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+}\n+\n+class TransferableNumber implements Transferable {\n+\n+    private int transferDataRequestCount = 0;\n+    public static final int NUM_DATA_FLAVORS = 5;\n+    static final DataFlavor[] supportedFlavors =\n+        new DataFlavor[NUM_DATA_FLAVORS];\n+\n+    static {\n+        try {\n+            for (int i = 0; i < NUM_DATA_FLAVORS; i++) {\n+                supportedFlavors[i] =\n+                    new IntegerDataFlavor(i);\n+            }\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return supportedFlavors;\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+        if (flavor instanceof IntegerDataFlavor) {\n+            IntegerDataFlavor integerFlavor = (IntegerDataFlavor)flavor;\n+            int flavorNumber = integerFlavor.getNumber();\n+            if (flavorNumber >= 0 && flavorNumber < NUM_DATA_FLAVORS) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        transferDataRequestCount++;\n+\n+        if (transferDataRequestCount >= NUM_DATA_FLAVORS) {\n+            synchronized (this) {\n+                this.notifyAll();\n+            }\n+        }\n+\n+        IntegerDataFlavor integerFlavor = (IntegerDataFlavor)flavor;\n+        return new Integer(integerFlavor.getNumber());\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DragSourcePanel(Transferable t) {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton(t));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DropTargetPanel() {\n+        setBackground(Color.green);\n+        setDropTarget(new DropTarget(this, this));\n+        setLayout(new GridLayout(1, 1));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        removeAll();\n+        final List list = new List();\n+        add(list);\n+\n+        Transferable t = dtde.getTransferable();\n+        DataFlavor[] dfs = t.getTransferDataFlavors();\n+\n+        if (dfs.length != TransferableNumber.NUM_DATA_FLAVORS) {\n+            throw new RuntimeException(\"FAILED: Incorrect number of data flavors.\");\n+        }\n+\n+        for (int i = 0; i < dfs.length; i++) {\n+\n+            DataFlavor flavor = dfs[i];\n+            Integer transferNumber = null;\n+\n+            if (flavor.getRepresentationClass().equals(Integer.class)) {\n+                try {\n+                    transferNumber = (Integer)t.getTransferData(flavor);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(\"FAILED: Cannot get data: \" +\n+                                               flavor.getMimeType());\n+                }\n+            }\n+\n+            boolean supportedFlavor = false;\n+            for (int j = 0; j < TransferableNumber.NUM_DATA_FLAVORS; j++) {\n+                int number = (i + j) % TransferableNumber.NUM_DATA_FLAVORS;\n+                try {\n+                    if (flavor.equals(new IntegerDataFlavor(number))) {\n+                        if (!(new Integer(number).equals(transferNumber))) {\n+                            throw new RuntimeException(\"FAILED: Invalid data \\n\" +\n+                                                       \"\\tflavor : \" + flavor +\n+                                                       \"\\tdata   : \" + transferNumber);\n+                        }\n+                        supportedFlavor = true;\n+                        break;\n+                    }\n+                } catch (ClassNotFoundException cannotHappen) {\n+                }\n+            }\n+            if (!supportedFlavor) {\n+                throw new RuntimeException(\"FAILED: Invalid flavor: \" + flavor);\n+            }\n+\n+            list.add(transferNumber + \":\" + flavor.getMimeType());\n+        }\n+\n+        dtc.dropComplete(true);\n+        validate();\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/MultiDataFlavorDropTest.java","additions":415,"deletions":0,"binary":false,"changes":415,"status":"added"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+  @test\n+  @bug 4399700\n+  @summary tests that Motif drag support for label widget doesn't cause\n+           crash when used for drag and drop from label to Java drop target\n+  @key headful\n+  @run main NativeDragJavaDropTest\n+*\/\n+\n+public class NativeDragJavaDropTest {\n+\n+    volatile Frame frame;\n+    volatile DropTargetLabel label;\n+    volatile Point p;\n+    volatile Dimension d;\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    public static final int DRAG_START_TIMEOUT = 500;\n+    public static final int DROP_COMPLETION_TIMEOUT = 2000;\n+\n+    public static void main(String[] args) throws Exception {\n+        NativeDragJavaDropTest test = new NativeDragJavaDropTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        label = new DropTargetLabel();\n+        frame.setTitle(\"NativeDragJavaDropTest\");\n+        frame.setLocation(200, 200);\n+        frame.add(label);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p = label.getLocationOnScreen();\n+            d = label.getSize();\n+        });\n+\n+        p.translate(d.width \/ 2, d.height \/ 2);\n+\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON2_MASK);\n+\n+        Thread.sleep(DRAG_START_TIMEOUT);\n+\n+        robot.mouseRelease(InputEvent.BUTTON2_MASK);\n+\n+        Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+    }\n+}\n+\n+class DropTargetLabel extends Label implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+\n+    public DropTargetLabel() {\n+        super(\"Label\");\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                Object obj = (Object)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NativeDragJavaDropTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,492 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4389284\n+  @summary tests that drop targets registered on nested heavyweight\n+           components work properly\n+  @key headful\n+  @run main NestedHeavyweightDropTargetTest\n+*\/\n+\n+public class NestedHeavyweightDropTargetTest {\n+\n+    volatile Frame frame;\n+    volatile DragSourceButton dragSourceButton;\n+    volatile DropTargetPanel dropTargetPanel;\n+    volatile InnerDropTargetPanel innerDropTargetPanel;\n+    volatile Button button;\n+    volatile Dimension d;\n+    volatile Point srcPoint;\n+    volatile Point dstPoint;\n+\n+    static final int DROP_COMPLETION_TIMEOUT = 1000;\n+\n+    public static void main(String[] args) throws Exception {\n+        NestedHeavyweightDropTargetTest test = new NestedHeavyweightDropTargetTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        dragSourceButton = new DragSourceButton();\n+        dropTargetPanel = new DropTargetPanel();\n+        innerDropTargetPanel = new InnerDropTargetPanel();\n+        button = new Button(\"button\");\n+        button.setBackground(Color.red);\n+\n+        innerDropTargetPanel.setLayout(new GridLayout(3, 1));\n+        innerDropTargetPanel.add(button);\n+        innerDropTargetPanel.setBackground(Color.yellow);\n+\n+        dropTargetPanel.setLayout(new GridLayout(2, 1));\n+        dropTargetPanel.add(innerDropTargetPanel);\n+        dropTargetPanel.setBackground(Color.green);\n+\n+        frame.setTitle(\"NestedHeavyweightDropTargetTest\");\n+        frame.setLocation(200, 200);\n+        frame.setLayout(new BorderLayout());\n+        frame.add(dropTargetPanel, BorderLayout.CENTER);\n+        frame.add(dragSourceButton, BorderLayout.SOUTH);\n+\n+        frame.pack();\n+\n+        innerDropTargetPanel.setDropTarget(new DropTarget(innerDropTargetPanel, innerDropTargetPanel));\n+        dropTargetPanel.setDropTarget(new DropTarget(dropTargetPanel, dropTargetPanel));\n+\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        Util.waitForInit();\n+\n+        test1(robot);\n+        test2(robot);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void test1(Robot robot) throws Exception {\n+        innerDropTargetPanel.setDragEnterTriggered(false);\n+        innerDropTargetPanel.setDragOverTriggered(false);\n+        innerDropTargetPanel.setDragExitTriggered(false);\n+        innerDropTargetPanel.setDropTriggered(false);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = dragSourceButton.getLocationOnScreen();\n+            d = dragSourceButton.getSize();\n+        });\n+\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!Util.pointInComponent(robot, srcPoint, dragSourceButton)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + dragSourceButton +\n+                               \" at point \" + srcPoint);\n+            return;\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dstPoint = innerDropTargetPanel.getLocationOnScreen();\n+            d = innerDropTargetPanel.getSize();\n+        });\n+\n+        dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!Util.pointInComponent(robot, dstPoint, innerDropTargetPanel)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + innerDropTargetPanel +\n+                               \" at point \" + dstPoint);\n+            return;\n+        }\n+\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            Thread.sleep(10);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        if (!innerDropTargetPanel.isDragEnterTriggered()) {\n+            throw new RuntimeException(\"child dragEnter() not triggered\");\n+        }\n+\n+        if (!innerDropTargetPanel.isDragOverTriggered()) {\n+            throw new RuntimeException(\"child dragOver() not triggered\");\n+        }\n+\n+        if (!innerDropTargetPanel.isDropTriggered()) {\n+            throw new RuntimeException(\"child drop() not triggered\");\n+        }\n+    }\n+\n+    public void test2(Robot robot) throws Exception {\n+        innerDropTargetPanel.setDragEnterTriggered(false);\n+        innerDropTargetPanel.setDragOverTriggered(false);\n+        innerDropTargetPanel.setDragExitTriggered(false);\n+        innerDropTargetPanel.setDropTriggered(false);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = dragSourceButton.getLocationOnScreen();\n+            d = dragSourceButton.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!Util.pointInComponent(robot, srcPoint, dragSourceButton)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + dragSourceButton +\n+                               \" at point \" + srcPoint);\n+            return;\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dstPoint = button.getLocationOnScreen();\n+            d = button.getSize();\n+        });\n+\n+        dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!Util.pointInComponent(robot, dstPoint, button)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + button +\n+                               \" at point \" + dstPoint);\n+            return;\n+        }\n+\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            Thread.sleep(10);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        if (!innerDropTargetPanel.isDragEnterTriggered()) {\n+            throw new RuntimeException(\"child dragEnter() not triggered\");\n+        }\n+\n+        if (!innerDropTargetPanel.isDragOverTriggered()) {\n+            throw new RuntimeException(\"child dragOver() not triggered\");\n+        }\n+\n+        if (!innerDropTargetPanel.isDropTriggered()) {\n+            throw new RuntimeException(\"child drop() not triggered\");\n+        }\n+    }\n+}\n+\n+class Util implements AWTEventListener {\n+    private static final Toolkit tk = Toolkit.getDefaultToolkit();\n+    public static final Object SYNC_LOCK = new Object();\n+    private Component clickedComponent = null;\n+    private static final int PAINT_TIMEOUT = 10000;\n+    private static final int MOUSE_RELEASE_TIMEOUT = 10000;\n+    private static final Util util = new Util();\n+\n+    static {\n+        tk.addAWTEventListener(util, 0xFFFFFFFF);\n+    }\n+\n+    private void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        return util.isPointInComponent(robot, p, comp);\n+    }\n+\n+    private boolean isPointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        tk.sync();\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+\n+    public static void waitForInit() throws InterruptedException {\n+        final Frame f = new Frame() {\n+                public void paint(Graphics g) {\n+                    dispose();\n+                    synchronized (SYNC_LOCK) {\n+                        SYNC_LOCK.notifyAll();\n+                    }\n+                }\n+            };\n+        f.setBounds(600, 400, 200, 200);\n+        synchronized (SYNC_LOCK) {\n+            f.setVisible(true);\n+            SYNC_LOCK.wait(PAINT_TIMEOUT);\n+        }\n+        tk.sync();\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 Transferable,\n+                                                 DragGestureListener,\n+                                                 DragSourceListener {\n+    private final DataFlavor dataflavor =\n+        new DataFlavor(Button.class, \"DragSourceButton\");\n+\n+    public DragSourceButton() {\n+        this(\"DragSourceButton\");\n+    }\n+\n+    public DragSourceButton(String str) {\n+        super(str);\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        Object retObj = null;\n+\n+        ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+        ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+        ooStream.writeObject(this);\n+\n+        ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(baiStream);\n+        try {\n+            retObj = ois.readObject();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(e.toString());\n+        }\n+\n+        return retObj;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+}\n+\n+class InnerDropTargetPanel extends DropTargetPanel {\n+    private boolean dragEnterTriggered = false;\n+    private boolean dragOverTriggered = false;\n+    private boolean dragExitTriggered = false;\n+    private boolean dropTriggered = false;\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        setDragEnterTriggered(true);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {\n+        setDragExitTriggered(true);\n+    }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        setDragOverTriggered(true);\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        setDropTriggered(true);\n+        dtde.rejectDrop();\n+    }\n+\n+    public boolean isDragEnterTriggered() {\n+        return dragEnterTriggered;\n+    }\n+\n+    public boolean isDragOverTriggered() {\n+        return dragOverTriggered;\n+    }\n+\n+    public boolean isDragExitTriggered() {\n+        return dragExitTriggered;\n+    }\n+\n+    public boolean isDropTriggered() {\n+        return dropTriggered;\n+    }\n+\n+    public void setDragEnterTriggered(boolean b) {\n+        dragEnterTriggered = b;\n+    }\n+\n+    public void setDragOverTriggered(boolean b) {\n+        dragOverTriggered = b;\n+    }\n+\n+    public void setDragExitTriggered(boolean b) {\n+        dragExitTriggered = b;\n+    }\n+\n+    public void setDropTriggered(boolean b) {\n+        dropTriggered = b;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        add(comp);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NestedHeavyweightDropTargetTest.java","additions":492,"deletions":0,"binary":false,"changes":492,"status":"added"}]}