{"files":[{"patch":"@@ -70,13 +70,1 @@\n-  static constexpr const JVMFlagLimit* no_limit(int dummy) {\n-    return NULL;\n-  }\n-  static constexpr const JVMFlagLimit* no_limit(int dummy, T min, T max) {\n-    return NULL;\n-  }\n-  static constexpr const JVMFlagLimit* no_limit(int dummy, ConstraintMarker dummy2, short func, int phase) {\n-    return NULL;\n-  }\n-  static constexpr const JVMFlagLimit* no_limit(int dummy, T min, T max, ConstraintMarker dummy2, short func, int phase) {\n-    return NULL;\n-  }\n-  static constexpr const JVMFlagLimit* no_limit(int dummy, ConstraintMarker dummy2, short func, int phase, T min, T max) {\n+  static constexpr const JVMFlagLimit* no_limit(...) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,2 +37,3 @@\n-  static constexpr unsigned int hash_code(const char* s) {\n-    unsigned int h = 0;\n+  \/\/ Cannot use strlen() -- it's not constexpr.\n+  static constexpr size_t string_len(const char* s) {\n+    size_t len = 0;\n@@ -40,1 +41,1 @@\n-      h = 31*h + (unsigned int) *s;\n+      len ++;\n@@ -43,1 +44,7 @@\n-    return h;\n+    return len;\n+  }\n+\n+  \/\/ This is executed at build-time only, so it doesn't matter if we walk\n+  \/\/ the string twice.\n+  static constexpr unsigned int hash_code(const char* s) {\n+    return hash_code(s, string_len(s));\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLookup.hpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}