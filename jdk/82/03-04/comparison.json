{"files":[{"patch":"@@ -713,1 +713,1 @@\n-\/\/ We want flagTable to be completely initialized at C++ compilation time, which requires\n+\/\/ We want flagTable[] to be completely initialized at C++ compilation time, which requires\n@@ -715,2 +715,2 @@\n-\/\/ ensures this -- if any non-constexpr arguments are passed, the C++ compiler will generate\n-\/\/ an error.\n+\/\/ checks for this this -- if any non-constexpr arguments are passed, the C++ compiler will\n+\/\/ generate an error.\n@@ -718,2 +718,5 @@\n-\/\/ constexpr implies internal linkage, so the following symbol will not be included in\n-\/\/ jvmFlag.o.\n+\/\/ constexpr implies internal linkage. This means the flagTable_verify_constexpr[] variable\n+\/\/ will not be included in jvmFlag.o, so there's no footprint cost for having this variable.\n+\/\/\n+\/\/ Note that we cannot declare flagTable[] as constexpr because JVMFlag::_flags is modified\n+\/\/ at runtime.\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-enum JVMFlagConstraintsEnum {\n+enum JVMFlagConstraintsEnum : int {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,4 +67,2 @@\n-  enum Kind {\n-    HAS_RANGE = 1,\n-    HAS_CONSTRAINT = 2\n-  };\n+  static constexpr int HAS_RANGE = 1;\n+  static constexpr int HAS_CONSTRAINT = 2;\n@@ -73,1 +71,1 @@\n-  static const JVMFlagLimit* get_kind_at(int flag_enum, Kind kind) {\n+  static const JVMFlagLimit* get_kind_at(int flag_enum, int required_kind) {\n@@ -75,1 +73,1 @@\n-    if (limit != NULL && (limit->_kind & int(kind)) != 0) {\n+    if (limit != NULL && (limit->_kind & required_kind) != 0) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-    _hashes[i] = 0;\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLookup.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+\/\/ This is a hashtable that maps from (const char*) to (JVMFlag*) to speed up\n+\/\/ the processing of JVM command-line argument at runtime.\n+\/\/\n+\/\/ With constexpr, this table is generated at C++ compile time so there's\n+\/\/ no set up cost at runtime.\n@@ -32,1 +37,1 @@\n-  static const int NUM_BUCKETS = 277;\n+  static constexpr int NUM_BUCKETS = 277;\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLookup.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-typedef enum {\n+typedef enum : int {\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}