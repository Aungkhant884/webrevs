{"files":[{"patch":"@@ -4668,1 +4668,2 @@\n-                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel);\n+                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel) &&\n+                                         TreeInfo.unguardedCase(testCase);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,2 +5,0 @@\n-Domination.java:74:18: compiler.err.pattern.dominated\n-Domination.java:81:18: compiler.err.pattern.dominated\n@@ -8,2 +6,0 @@\n-Domination.java:95:18: compiler.err.pattern.dominated\n-Domination.java:102:18: compiler.err.pattern.dominated\n@@ -11,2 +7,0 @@\n-Domination.java:124:18: compiler.err.pattern.dominated\n-Domination.java:135:18: compiler.err.pattern.dominated\n@@ -19,1 +13,1 @@\n-18 errors\n\\ No newline at end of file\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.out","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-        \/\/ A type pattern that declares a pattern variable of type T dominates a constant c of a primitive type P if the wrapper class of P ([5.1.7]) is a subtype of the erasure of T.\n+        \/\/ (unguarded case with) A type pattern that declares a pattern variable of type T dominates a constant c of a primitive type P if the wrapper class of P ([5.1.7]) is a subtype of the erasure of T.\n@@ -285,0 +285,12 @@\n+               \"\"\");\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private int test(Integer o) {\n+                       return switch (o) {\n+                           case Integer i -> 0;\n+                           case 0 -> 0;\n+                       };\n+                   }\n+               }\n@@ -288,1 +300,1 @@\n-        \/\/ A type pattern that declares a pattern variable of type T dominates an enum constant c of type E if E is a subtype of the erasure of the type of T.\n+        \/\/ (unguarded case with) A type pattern that declares a pattern variable of type T dominates an enum constant c of type E if E is a subtype of the erasure of the type of T.\n@@ -302,0 +314,13 @@\n+               \"\"\");\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private int test(E o) {\n+                       return switch (o) {\n+                           case E e -> 0;\n+                           case B -> 0;\n+                       };\n+                   }\n+               }\n+               enum E {A, B;}\n@@ -318,4 +343,1 @@\n-               \"\"\",\n-               \"Test.java:6:18: compiler.err.pattern.dominated\",\n-               \"1 error\");\n-        \/\/ A parenthesized pattern dominates a constant c if its contained pattern dominates c.\n+               \"\"\");\n@@ -326,1 +348,1 @@\n-                   private int test(Integer o) {\n+                   private int test(String o) {\n@@ -328,3 +350,2 @@\n-                           case Integer i when i > 0 -> 0;\n-                           case 0 -> 0;\n-                           case Integer i -> 0;\n+                           case String s -> 0;\n+                           case \"a\" -> 0;\n","filename":"test\/langtools\/tools\/javac\/patterns\/NewCaseStructureTest.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -108,0 +108,12 @@\n+        assertEquals(0, constantAndPatternGuardInteger(0, true));\n+        assertEquals(0, constantAndPatternGuardInteger(1, true));\n+        assertEquals(1, constantAndPatternGuardInteger(1, false));\n+        assertEquals(2, constantAndPatternGuardInteger(0, false));\n+        assertEquals(0, constantAndPatternGuardString(\"\", true));\n+        assertEquals(0, constantAndPatternGuardString(\"a\", true));\n+        assertEquals(1, constantAndPatternGuardString(\"a\", false));\n+        assertEquals(2, constantAndPatternGuardString(\"\", false));\n+        assertEquals(0, constantAndPatternGuardEnum(E.A, true));\n+        assertEquals(0, constantAndPatternGuardEnum(E.B, true));\n+        assertEquals(1, constantAndPatternGuardEnum(E.B, false));\n+        assertEquals(2, constantAndPatternGuardEnum(E.A, false));\n@@ -716,0 +728,24 @@\n+    int constantAndPatternGuardInteger(Integer i, boolean g) {\n+        return switch (i) {\n+            case Integer j when g -> 0;\n+            case 1 -> 1;\n+            case Integer j -> 2;\n+        };\n+    }\n+\n+    int constantAndPatternGuardString(String s, boolean g) {\n+        return switch (s) {\n+            case String t when g -> 0;\n+            case \"a\" -> 1;\n+            case String t -> 2;\n+        };\n+    }\n+\n+    int constantAndPatternGuardEnum(E e, boolean g) {\n+        return switch (e) {\n+            case E f when g -> 0;\n+            case E.B -> 1;\n+            case E f -> 2;\n+        };\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}