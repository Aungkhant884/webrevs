{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-            if (gv.getGlyphCode(i) >= 0x1000000) { \/\/ SLOTMASK 0xff000000\n+            if ((gv.getGlyphCode(i) & CompositeGlyphMapper.SLOTMASK) != 0) {\n@@ -110,1 +110,1 @@\n-            glyphs[i] = gV.getGlyphCode(start+i) & 0xFFFFFF;\n+            glyphs[i] = gV.getGlyphCode(start+i) & CompositeGlyphMapper.GLYPHMASK;\n@@ -123,0 +123,12 @@\n+    private int getLengthOfSameSlot(final GlyphVector gV, final int targetSlot, final int start, final int length) {\n+        int count = 1;\n+        for (; start + count < length; count++) {\n+            int slot = (gV.getGlyphCode(start + count) &\n+                        CompositeGlyphMapper.SLOTMASK) >> 24;\n+            if (targetSlot != slot) {\n+                break;\n+            }\n+        }\n+        return count;\n+    }\n+\n@@ -138,1 +150,0 @@\n-            int currentSlot = 0;\n@@ -142,20 +153,11 @@\n-            int count = 0;\n-            GlyphVector rangeGV;\n-            for (int i = 0; i < length; i++) {\n-                int slot = gV.getGlyphCode(i) >> 24;\n-                if (slot == currentSlot) {\n-                    count++;\n-                } else {\n-                    if (i > 0) {\n-                        rangeGV = getGlyphVectorWithRange(sg2d.getFont(), gV,\n-                                                          start, count);\n-                        drawGlyphVectorImpl(sg2d,\n-                                            rangeGV,\n-                                            x + positions[start * 2],\n-                                            y + positions[start * 2 + 1]);\n-                    }\n-                    start = i;\n-                    count = 1;\n-                    sg2d.setFont(getSlotFont(gV.getFont(), slot));\n-                    currentSlot = slot;\n-                }\n+            while (start < length) {\n+                int slot = (gV.getGlyphCode(start) &\n+                            CompositeGlyphMapper.SLOTMASK) >> 24;\n+                sg2d.setFont(getSlotFont(gV.getFont(), slot));\n+                int count = getLengthOfSameSlot(gV, slot, start, length);\n+                GlyphVector rangeGV = getGlyphVectorWithRange(sg2d.getFont(),\n+                                                              gV, start, count);\n+                drawGlyphVectorImpl(sg2d, rangeGV,\n+                                    x + positions[start * 2],\n+                                    y + positions[start * 2 + 1]);\n+                start += count;\n@@ -163,5 +165,0 @@\n-            rangeGV = getGlyphVectorWithRange(sg2d.getFont(), gV, start, count);\n-            drawGlyphVectorImpl(sg2d,\n-                                rangeGV,\n-                                x + positions[start * 2],\n-                                y + positions[start * 2 + 1]);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CTextPipe.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.awt.Dimension;\n@@ -43,1 +44,0 @@\n-import sun.java2d.OSXSurfaceData;\n@@ -50,4 +50,2 @@\n-    private static final int width = 100;\n-    private static final int height = 60;\n-    private static final int LIMIT = 5;\n-    private StandardGlyphVector gv;\n+    private static final int WIDTH = 100;\n+    private static final int HEIGHT = 60;\n@@ -55,6 +53,5 @@\n-    private static final String[] TEST_STRINGS = {\n-        \"\\u3042\\u3044\\u3046\\u3048\\u304A\",\n-        \"a\\u3042b\\u3044c\\u3046d\",\n-        \"\\u3042abcd\",\n-        \"abcd\\u3042\",\n-    };\n+    private static final String TEST_STR = \"\\u3042\\u3044\\u3046\\u3048\\u304Aabc\";\n+    private static final int EXPECTED_HEIGHT = 10;\n+    private static final int EXPECTED_WIDTH = 77;\n+    private static final int LIMIT_DIFF_HEIGHT = 3;\n+    private static final int LIMIT_DIFF_WIDTH = 15;\n@@ -67,1 +64,1 @@\n-        BufferedImage img1, img2;\n+        BufferedImage img = createImage();\n@@ -69,19 +66,1 @@\n-        for (String str: TEST_STRINGS) {\n-            img1 = createImage();\n-            img2 = createImage();\n-\n-            callDrawGlyphVector(img1, str);\n-            callDrawString(img2, str);\n-\n-            int diff = compareImages(img1, img2);\n-            if (diff > LIMIT) {\n-                debugOut(img1, img2);\n-                throw new RuntimeException(\n-                    \"Incorrect GlyphVector shape \" +\n-                    diff + \",\" + str + \",\" + gv);\n-            }\n-        }\n-    }\n-\n-    private void callDrawGlyphVector(BufferedImage image, String str) {\n-        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(image,\n+        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(img,\n@@ -91,1 +70,0 @@\n-        FontRenderContext frc = new FontRenderContext(null, false, false);\n@@ -93,6 +71,0 @@\n-        gv = new StandardGlyphVector(font, str, frc);\n-        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n-                             RenderingHints.VALUE_ANTIALIAS_OFF);\n-        g2d.drawGlyphVector(gv, 0.0f, (float)(height - 5));\n-        g2d.dispose();\n-    }\n@@ -100,5 +72,8 @@\n-    private void callDrawString(BufferedImage image, String str) {\n-        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(image,\n-                             SurfaceType.IntRgb);\n-        SunGraphics2D g2d = new SunGraphics2D(sd,\n-                                    Color.BLACK, Color.WHITE, null);\n+        if (font.canDisplayUpTo(TEST_STR) != -1) {\n+            System.out.println(\"There is no capable font. Skipping the test.\");\n+            System.out.println(\"Font: \" + font);\n+            return;\n+        }\n+\n+        FontRenderContext frc = new FontRenderContext(null, false, false);\n+        StandardGlyphVector gv = new StandardGlyphVector(font, TEST_STR, frc);\n@@ -107,1 +82,1 @@\n-        g2d.drawString(str, 0.0f, (float)(height - 5));\n+        g2d.drawGlyphVector(gv, 0.0f, (float)(HEIGHT - 5));\n@@ -109,0 +84,9 @@\n+\n+        Dimension d = getBounds(img);\n+\n+        if (Math.abs(d.height - EXPECTED_HEIGHT) > LIMIT_DIFF_HEIGHT ||\n+            Math.abs(d.width  - EXPECTED_WIDTH)  > LIMIT_DIFF_WIDTH) {\n+            debugOut(img);\n+            throw new RuntimeException(\n+                \"Incorrect GlyphVector shape \" + d + \",\" + gv);\n+        }\n@@ -112,1 +96,1 @@\n-        BufferedImage image = new BufferedImage(width, height,\n+        BufferedImage image = new BufferedImage(WIDTH, HEIGHT,\n@@ -116,1 +100,1 @@\n-        g.fillRect(0, 0, width, height);\n+        g.fillRect(0, 0, WIDTH, HEIGHT);\n@@ -121,4 +105,7 @@\n-    private int getPixcelCount(BufferedImage img) {\n-        int count = 0;\n-        for (int y = 0; y < height; y++) {\n-            for (int x = 0; x < width; x++) {\n+    private Dimension getBounds(BufferedImage img) {\n+        int top = HEIGHT;\n+        int left = WIDTH;\n+        int right = 0;\n+        int bottom = 0;\n+        for (int y = 0; y < HEIGHT; y++) {\n+            for (int x = 0; x < WIDTH; x++) {\n@@ -126,1 +113,4 @@\n-                    count++;\n+                    if (top    > y) top = y;\n+                    if (bottom < y) bottom = y;\n+                    if (left   > x) left = x;\n+                    if (right  < x) right = x;\n@@ -130,1 +120,1 @@\n-        return count;\n+        return new Dimension(right - left, bottom - top);\n@@ -133,18 +123,6 @@\n-    private int compareImages(BufferedImage img1, BufferedImage img2) {\n-        \/\/ Since positions can be shifted, check pixcel count.\n-        int count1 = getPixcelCount(img1);\n-        int count2 = getPixcelCount(img2);\n-        return Math.abs(count1-count2);\n-    }\n-\n-    private void debugOut(BufferedImage img1, BufferedImage img2) {\n-        for (int y = 0; y < height; y++) {\n-            for (int x = 0; x < width; x++) {\n-                int c1 = img1.getRGB(x, y) & 0xFFFFFF;\n-                int c2 = img2.getRGB(x, y) & 0xFFFFFF;\n-                if (c1 != c2) {\n-                    if (c1==0) {\n-                        System.out.print(\"+\");\n-                    } else {\n-                        System.out.print(\"*\");\n-                    }\n+    private void debugOut(BufferedImage img) {\n+        for (int y = 0; y < HEIGHT; y++) {\n+            for (int x = 0; x < WIDTH; x++) {\n+                int c = img.getRGB(x, y) & 0xFFFFFF;\n+                if (c == 0) {\n+                    System.out.print(\"*\");\n@@ -152,6 +130,2 @@\n-                    if (c1==0) {\n-                        System.out.print(\".\");\n-                    } else {\n-                        System.out.print(\" \");\n-                    }\n-               }\n+                    System.out.print(\" \");\n+                }\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/MultiSlotFontTest.java","additions":51,"deletions":77,"binary":false,"changes":128,"status":"modified"}]}