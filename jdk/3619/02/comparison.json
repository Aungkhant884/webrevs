{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,3 +84,9 @@\n-    public void drawGlyphVector(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n-        final Font prevFont = sg2d.getFont();\n-        sg2d.setFont(gV.getFont());\n+    private boolean hasSlotData(GlyphVector gv) {\n+        final int length = gv.getNumGlyphs();\n+        for (int i = 0; i < length; i++) {\n+            if (gv.getGlyphCode(i) >= 0x1000000) { \/\/ SLOTMASK 0xff000000\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n@@ -88,0 +94,30 @@\n+    private Font getSlotFont(Font font, int slot) {\n+        Font2D f2d = FontUtilities.getFont2D(font);\n+        if (f2d instanceof CFont) {\n+            CompositeFont cf = ((CFont)f2d).getCompositeFont2D();\n+            PhysicalFont pf = cf.getSlotFont(slot);\n+            Font f = new Font(pf.getFontName(null),\n+                              font.getStyle(), font.getSize());\n+            return f;\n+        }\n+        return null;\n+    }\n+\n+    private GlyphVector getGlyphVectorWithRange(final Font font, final GlyphVector gV, int start, int count) {\n+        final int length = gV.getNumGlyphs();\n+        int[] glyphs = new int[count];\n+        for (int i = 0; i < count; i++) {\n+            glyphs[i] = gV.getGlyphCode(start+i) & 0xFFFFFF;\n+        }\n+        \/\/ Positions should be null to recalculate by native methods,\n+        \/\/ if GV was segmented.\n+        StandardGlyphVector sgv = new StandardGlyphVector(font,\n+                                          gV.getFontRenderContext(),\n+                                          glyphs,\n+                                          null, \/\/ positions\n+                                          null, \/\/ indices\n+                                          gV.getLayoutFlags());\n+        return sgv;\n+    }\n+\n+    private void drawGlyphVectorImpl(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n@@ -95,0 +131,40 @@\n+    }\n+\n+    public void drawGlyphVector(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n+        final Font prevFont = sg2d.getFont();\n+        sg2d.setFont(gV.getFont());\n+\n+        if (hasSlotData(gV)) {\n+            int currentSlot = 0;\n+            final int length = gV.getNumGlyphs();\n+            float[] positions = gV.getGlyphPositions(0, length, null);\n+            int start = 0;\n+            int count = 0;\n+            GlyphVector rangeGV;\n+            for (int i = 0; i < length; i++) {\n+                int slot = gV.getGlyphCode(i) >> 24;\n+                if (slot == currentSlot) {\n+                    count++;\n+                } else {\n+                    if (i > 0) {\n+                        rangeGV = getGlyphVectorWithRange(sg2d.getFont(), gV,\n+                                                          start, count);\n+                        drawGlyphVectorImpl(sg2d,\n+                                            rangeGV,\n+                                            x + positions[start * 2],\n+                                            y + positions[start * 2 + 1]);\n+                    }\n+                    start = i;\n+                    count = 1;\n+                    sg2d.setFont(getSlotFont(gV.getFont(), slot));\n+                    currentSlot = slot;\n+                }\n+            }\n+            rangeGV = getGlyphVectorWithRange(sg2d.getFont(), gV, start, count);\n+            drawGlyphVectorImpl(sg2d,\n+                                rangeGV,\n+                                x + positions[start * 2],\n+                                y + positions[start * 2 + 1]);\n+        } else {\n+            drawGlyphVectorImpl(sg2d, gV, x, y);\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CTextPipe.java","additions":80,"deletions":4,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8240756\n+ * @summary Non-English characters are printed with wrong glyphs on MacOS\n+ * @modules java.desktop\/sun.java2d java.desktop\/sun.java2d.loops java.desktop\/sun.font\n+ * @requires os.family == \"mac\"\n+ * @run main MultiSlotFontTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.RenderingHints;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.image.BufferedImage;\n+import sun.font.StandardGlyphVector;\n+import sun.java2d.OSXOffScreenSurfaceData;\n+import sun.java2d.OSXSurfaceData;\n+import sun.java2d.SunGraphics2D;\n+import sun.java2d.SurfaceData;\n+import sun.java2d.loops.SurfaceType;\n+\n+public class MultiSlotFontTest {\n+\n+    private static final int width = 100;\n+    private static final int height = 60;\n+    private static final int LIMIT = 5;\n+    private StandardGlyphVector gv;\n+\n+    private static final String[] TEST_STRINGS = {\n+        \"\\u3042\\u3044\\u3046\\u3048\\u304A\",\n+        \"a\\u3042b\\u3044c\\u3046d\",\n+        \"\\u3042abcd\",\n+        \"abcd\\u3042\",\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        MultiSlotFontTest test = new MultiSlotFontTest();\n+    }\n+\n+    public MultiSlotFontTest() {\n+        BufferedImage img1, img2;\n+\n+        for (String str: TEST_STRINGS) {\n+            img1 = createImage();\n+            img2 = createImage();\n+\n+            callDrawGlyphVector(img1, str);\n+            callDrawString(img2, str);\n+\n+            int diff = compareImages(img1, img2);\n+            if (diff > LIMIT) {\n+                debugOut(img1, img2);\n+                throw new RuntimeException(\n+                    \"Incorrect GlyphVector shape \" +\n+                    diff + \",\" + str + \",\" + gv);\n+            }\n+        }\n+    }\n+\n+    private void callDrawGlyphVector(BufferedImage image, String str) {\n+        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(image,\n+                             SurfaceType.IntRgb);\n+        SunGraphics2D g2d = new SunGraphics2D(sd,\n+                                    Color.BLACK, Color.WHITE, null);\n+        FontRenderContext frc = new FontRenderContext(null, false, false);\n+        Font font = g2d.getFont();\n+        gv = new StandardGlyphVector(font, str, frc);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2d.drawGlyphVector(gv, 0.0f, (float)(height - 5));\n+        g2d.dispose();\n+    }\n+\n+    private void callDrawString(BufferedImage image, String str) {\n+        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(image,\n+                             SurfaceType.IntRgb);\n+        SunGraphics2D g2d = new SunGraphics2D(sd,\n+                                    Color.BLACK, Color.WHITE, null);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2d.drawString(str, 0.0f, (float)(height - 5));\n+        g2d.dispose();\n+    }\n+\n+    private static BufferedImage createImage() {\n+        BufferedImage image = new BufferedImage(width, height,\n+                                      BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, width, height);\n+        g.dispose();\n+        return image;\n+    }\n+\n+    private int getPixcelCount(BufferedImage img) {\n+        int count = 0;\n+        for (int y = 0; y < height; y++) {\n+            for (int x = 0; x < width; x++) {\n+                if ((img.getRGB(x, y) & 0xFFFFFF) == 0) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n+    private int compareImages(BufferedImage img1, BufferedImage img2) {\n+        \/\/ Since positions can be shifted, check pixcel count.\n+        int count1 = getPixcelCount(img1);\n+        int count2 = getPixcelCount(img2);\n+        return Math.abs(count1-count2);\n+    }\n+\n+    private void debugOut(BufferedImage img1, BufferedImage img2) {\n+        for (int y = 0; y < height; y++) {\n+            for (int x = 0; x < width; x++) {\n+                int c1 = img1.getRGB(x, y) & 0xFFFFFF;\n+                int c2 = img2.getRGB(x, y) & 0xFFFFFF;\n+                if (c1 != c2) {\n+                    if (c1==0) {\n+                        System.out.print(\"+\");\n+                    } else {\n+                        System.out.print(\"*\");\n+                    }\n+                } else {\n+                    if (c1==0) {\n+                        System.out.print(\".\");\n+                    } else {\n+                        System.out.print(\" \");\n+                    }\n+               }\n+            }\n+            System.out.println();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/MultiSlotFontTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}