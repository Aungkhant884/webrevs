{"files":[{"patch":"@@ -127,1 +127,1 @@\n-  __ far_call(Address(Runtime1::entry_for(Runtime1::throw_div0_exception_id), relocInfo::runtime_call_type));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::throw_div0_exception_id)));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -406,0 +406,3 @@\n+  assert(entry.rspec().type() == relocInfo::external_word_type\n+         || entry.rspec().type() == relocInfo::runtime_call_type\n+         || entry.rspec().type() == relocInfo::none, \"wrong entry relocInfo type\");\n@@ -424,0 +427,3 @@\n+  assert(entry.rspec().type() == relocInfo::external_word_type\n+         || entry.rspec().type() == relocInfo::runtime_call_type\n+         || entry.rspec().type() == relocInfo::none, \"wrong entry relocInfo type\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1098,2 +1098,9 @@\n-  \/\/ Jumps that can reach anywhere in the code cache.\n-  \/\/ Trashes tmp.\n+  \/\/ Far_call and far_jump generate a call of\/jump to the provided address.\n+  \/\/ The address must be inside the code cache.\n+  \/\/ Supported entry.rspec():\n+  \/\/ - relocInfo::external_word_type\n+  \/\/ - relocInfo::runtime_call_type\n+  \/\/ - relocInfo::none\n+  \/\/ If the distance to the address can exceed the branch range (128M for the release build)\n+  \/\/ for direct calls\/jumps, an indirect call\/jump is generated.\n+  \/\/ It trashes tmp.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}