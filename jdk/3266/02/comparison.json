{"files":[{"patch":"@@ -102,0 +102,2 @@\n+    permission java.io.FilePermission \"<<ALL FILES>>\",\"read\";\n+    permission java.net.SocketPermission \"*\", \"connect,resolve\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8264277\n+ * @library \/test\/lib\n+ * @modules jdk.httpserver\n+ *          java.base\/jdk.internal.misc\n+ * @requires os.family != \"windows\"\n+ * @summary check permissions for XML signature\n+ *\/\n+\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.Proc;\n+import jdk.test.lib.security.XMLUtils;\n+\n+import java.io.File;\n+import java.io.FilePermission;\n+import java.net.InetSocketAddress;\n+import java.net.SocketPermission;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+\n+\/\/ Note: This test does not run fine on Windows because the format by\n+\/\/ Path.toUri.toString (file:\/\/\/c:\/path\/to\/file) is not supported by\n+\/\/ ResolverLocalFilesystem.translateUriToFilename.\n+public class FileSocketPermissions    {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            Path plain = Files.writeString(\n+                    Path.of(System.getProperty(\"user.dir\"), \"a.xml\"), \"<a>x<\/a>\");\n+            HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);\n+            server.createContext(\"\/\", ex -> {\n+                ex.sendResponseHeaders(200, 0);\n+                ex.getResponseBody().write(\"<a>x<\/a>\".getBytes(StandardCharsets.UTF_8));\n+                ex.close();\n+            });\n+            server.start();\n+            try {\n+                String httpDoc = \"http:\/\/localhost:\" + server.getAddress().getPort() + \"\/b.xml\";\n+                System.out.println(httpDoc);\n+\n+                \/\/ No permission granted.\n+                Proc p0 = Proc.create(\"FileSocketPermissions\")\n+                        .prop(\"java.security.manager\", \"\")\n+                        .debug(\"S\")\n+                        .args(\"sign\", plain.toUri().toString(), httpDoc)\n+                        .start();\n+                Asserts.assertEQ(p0.readData(), \"Error\");\n+                Asserts.assertEQ(p0.readData(), \"Error\");\n+\n+                \/\/ Permission to file and socket granted.\n+                Proc p = Proc.create(\"FileSocketPermissions\")\n+                        .prop(\"java.security.manager\", \"\")\n+                        .grant(new File(System.getProperty(\"test.classes\")))\n+                        .perm(new FilePermission(plain.toString(), \"read\"))\n+                        .perm(new SocketPermission(\"localhost\", \"resolve,connect\"))\n+                        .debug(\"S2\")\n+                        .args(\"sign\", plain.toUri().toString(), httpDoc)\n+                        .start();\n+\n+                Proc p2 = Proc.create(\"FileSocketPermissions\")\n+                        .prop(\"java.security.manager\", \"\")\n+                        .grant(new File(System.getProperty(\"test.classes\")))\n+                        .perm(new FilePermission(plain.toString(), \"read\"))\n+                        .perm(new SocketPermission(\"localhost\", \"resolve,connect\"))\n+                        .debug(\"V\")\n+                        .args(\"validate\")\n+                        .start();\n+\n+                while (true) {\n+                    String in = p.readData(); \/\/ read signed XML from signer\n+                    p2.println(in); \/\/ send signed XML to validator\n+                    if (in.equals(\"Over\")) {\n+                        break;\n+                    }\n+                    if (!p2.readData().equals(\"true\")) { \/\/ read validator result\n+                        throw new Exception(\"Validation error\");\n+                    }\n+                }\n+            } finally {\n+                server.stop(0);\n+            }\n+        } else if (args[0].equals(\"sign\")) {\n+            KeyPairGenerator g = KeyPairGenerator.getInstance(\"EC\");\n+            KeyPair p = g.generateKeyPair();\n+            var signer = XMLUtils.signer(p.getPrivate(), p.getPublic());\n+            for (int i = 1; i < args.length; i++) {\n+                try {\n+                    \/\/ Multiple line XML. Send as raw bytes (in Base64)\n+                    Proc.binOut(XMLUtils.doc2string(signer.sign(new URI(args[i])))\n+                            .getBytes(StandardCharsets.UTF_8));\n+                } catch (Exception se) {\n+                    se.printStackTrace();\n+                    Proc.textOut(\"Error\");\n+                }\n+            }\n+            Proc.textOut(\"Over\");\n+        } else if (args[0].equals(\"validate\")) {\n+            \/\/ Turn secureValidation off. Will read external data\n+            var validator = XMLUtils.validator().secureValidation(false);\n+            while (true) {\n+                String in = new String(Proc.binIn());\n+                if (in.equals(\"Over\")) {\n+                    Proc.textOut(\"Over\");\n+                    break;\n+                }\n+                Proc.textOut(Boolean.toString(validator.validate(XMLUtils.string2doc(in))));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/FileSocketPermissions.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}