{"files":[{"patch":"@@ -514,0 +514,1 @@\n+     * @jvms 4.6 Methods\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -521,0 +521,1 @@\n+     * @jvms 4.6 Methods\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -570,2 +570,2 @@\n-     * Returns {@code true} if this method is a bridge\n-     * method; returns {@code false} otherwise.\n+     * {@return {@code true} if this method is a bridge\n+     * method; returns {@code false} otherwise}\n@@ -573,2 +573,28 @@\n-     * @return true if and only if this method is a bridge\n-     * method as defined by the Java Language Specification.\n+     * @apiNote\n+     * A bridge method is a {@linkplain isSynthetic synthetic} method created by a Java\n+     * compiler alongside a method originating from the source\n+     * code.\n+     * Bridge methods are used by Java compilers in various\n+     * circumstances to span across differences in Java programming\n+     * language semantics and JVM semantics.\n+     *\n+     * One example use of bridge methods is as technique for a\n+     * Java compiler to support <i>covariant overrides<\/i>, where a\n+     * subclass overrides a method and gives the new method a more\n+     * specific return type than the method in the superclass.\n+     * While the Java language specification forbids a class\n+     * declaring two methods with the same parameter types but a\n+     * different return type, the virtual machine does not.\n+     * A\n+     * common case where covariant overrides are used is for a {@link\n+     * java.lang.Cloneable Cloneable} class where the {@code clone}\n+     * method inherited from {@code java.lang.Object} and returning {@code Object} is overridden\n+     * and declared to return the type of the class; for example\n+     * {@link java.util.EnumSet#clone() EnumSet.clone()} returns\n+     * {@code EnumSet<E>} rather than {@link java.lang.Object#clone()\n+     * Object}. If this technique was being used, the resulting class\n+     * file for {@code EnumSet} would have two {@code clone} methods,\n+     * one returning {@code EnumSet<E>} and the second a bridge method\n+     * returning {@code Object}; the body of the {@code clone} bridge\n+     * method calls its non-bridge counterpart and returns its\n+     * result.\n@@ -576,0 +602,4 @@\n+     *\n+     * @jls 8.4.8.3 Requirements in Overriding and Hiding\n+     * @jls 15.12.4.5 Create Frame, Synchronize, Transfer Control\n+     * @jvms 4.6 Methods\n@@ -593,0 +623,1 @@\n+     * @jvms 4.6 Methods\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"}]}