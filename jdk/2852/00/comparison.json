{"files":[{"patch":"@@ -570,2 +570,28 @@\n-     * Returns {@code true} if this method is a bridge\n-     * method; returns {@code false} otherwise.\n+     * {@return {@code true} if this method is a bridge\n+     * method; returns {@code false} otherwise}\n+     *\n+     * @apiNote\n+     * A bridge method is a synthetic method created by a Java\n+     * compiler alongside a method originating from the source\n+     * code. One example use of a bridge method is as technique for a\n+     * Java compiler to support <i>covariant overrides<\/i>, where a\n+     * subclass overrides a method and gives the new method a more\n+     * specific return type than the method in the superclass. A\n+     * common case where covariant overrides are used is for a {@link\n+     * java.lang.Cloneable Cloneable} class where the {@code clone}\n+     * method inherited from {@code java.lang.Object} is overridden\n+     * and declared to return the type of the class; for example\n+     * {@link java.util.EnumSet#clone() EnumSet.clone()} returns\n+     * {@code EnumSet<E>} rather than {@link java.lang.Object#clone()\n+     * Object}. If this technique was being used, the resulting class\n+     * file for {@code EnumSet} would have two {@code clone} methods,\n+     * one returning {@code EnumSet<E>} and the second a bridge method\n+     * returning {@code Object}; the body of the {@code clone} bridge\n+     * method calls its non-bridge counterpart and returns its\n+     * result. (While the Java language specification forbids a class\n+     * declaring two methods with the same parameter types but a\n+     * different return type, the virtual machine does not.)\n+     *\n+     * <p>Bridge methods may also be used by Java compiler in other\n+     * circumstances to span across difference in Java Language\n+     * semantics and JVM semantics.\n@@ -573,2 +599,0 @@\n-     * @return true if and only if this method is a bridge\n-     * method as defined by the Java Language Specification.\n@@ -576,0 +600,4 @@\n+     *\n+     * @jls 8.4.8.3 Requirements in Overriding and Hiding\n+     * @jls 15.12.4.5 Create Frame, Synchronize, Transfer Control\n+     * @jvms 4.6 Methods\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"}]}