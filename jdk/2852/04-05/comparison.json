{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -574,5 +574,4 @@\n-     * A bridge method is a {@linkplain isSynthetic synthetic} method created by a Java\n-     * compiler alongside a method originating from the source\n-     * code.\n-     * Bridge methods are used by Java compilers in various\n-     * circumstances to span differences in Java programming\n+     * A bridge method is a {@linkplain isSynthetic synthetic} method\n+     * created by a Java compiler alongside a method originating from\n+     * the source code. Bridge methods are used by Java compilers in\n+     * various circumstances to span differences in Java programming\n@@ -581,1 +580,1 @@\n-     * One example use of bridge methods is as a technique for a\n+     * <p>One example use of bridge methods is as a technique for a\n@@ -584,20 +583,20 @@\n-     * specific return type than the method in the superclass.\n-     * While the Java language specification forbids a class\n-     * declaring two methods with the same parameter types but a\n-     * different return type, the virtual machine does not.\n-     * A\n-     * common case where covariant overrides are used is for a {@link\n-     * java.lang.Cloneable Cloneable} class where the {@link Object#clone() clone}\n-     * method inherited from {@code java.lang.Object} is overridden\n-     * and declared to return the type of the class. For example, {@code Object}\n-     * declares<br>\n-     * {@code protected Object clone() throws CloneNotSupportedException {...}}<br>\n-     * and {@code EnumSet<E>} declares its language-level {@linkplain java.util.EnumSet#clone() covariant override}<br>\n-     * {@code public EnumSet<E> clone() {...}}<br>\n-     * If this technique was being used, the resulting class\n-     * file for {@code EnumSet} would have two {@code clone} methods,\n-     * one returning {@code EnumSet<E>} and the second a bridge method\n-     * returning {@code Object}. The bridge method is a JVM-level override of {@code Object.clone()}.\n-     * The body of the {@code clone} bridge\n-     * method calls its non-bridge counterpart and returns its\n-     * result.\n+     * specific return type than the method in the superclass.  While\n+     * the Java language specification forbids a class declaring two\n+     * methods with the same parameter types but a different return\n+     * type, the virtual machine does not. A common case where\n+     * covariant overrides are used is for a {@link\n+     * java.lang.Cloneable Cloneable} class where the {@link\n+     * Object#clone() clone} method inherited from {@code\n+     * java.lang.Object} is overridden and declared to return the type\n+     * of the class. For example, {@code Object} declares\n+     * <pre>{@code protected Object clone() throws CloneNotSupportedException {...}}<\/pre>\n+     * and {@code EnumSet<E>} declares its language-level {@linkplain\n+     * java.util.EnumSet#clone() covariant override}\n+     * <pre>{@code public EnumSet<E> clone() {...}}<\/pre>\n+     * If this technique was being used, the resulting class file for\n+     * {@code EnumSet} would have two {@code clone} methods, one\n+     * returning {@code EnumSet<E>} and the second a bridge method\n+     * returning {@code Object}. The bridge method is a JVM-level\n+     * override of {@code Object.clone()}.  The body of the {@code\n+     * clone} bridge method calls its non-bridge counterpart and\n+     * returns its result.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"}]}