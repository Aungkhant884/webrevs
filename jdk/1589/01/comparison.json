{"files":[{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.tool;\n+\n+import java.util.Comparator;\n+import jdk.jfr.consumer.RecordedEvent;\n+\n+public class EndTicksComparator implements Comparator<RecordedEvent> {\n+    public long readEndTicks(RecordedEvent event) {\n+        long timestamp = event.getLong(\"startTime\");\n+        if (event.hasField(\"duration\")) {\n+            timestamp += event.getLong(\"duration\");\n+        }\n+        return timestamp;\n+    }\n+\n+    @Override\n+    public int compare(RecordedEvent a, RecordedEvent b) {\n+        return Long.compare(readEndTicks(a), readEndTicks(b));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/tool\/EndTicksComparator.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-\n@@ -28,0 +27,1 @@\n+import java.lang.reflect.Field;\n@@ -31,0 +31,1 @@\n+import java.util.Comparator;\n@@ -68,1 +69,1 @@\n-        Collections.sort(events, (e1, e2) -> e1.getEndTime().compareTo(e2.getEndTime()));\n+        Collections.sort(events, new EndTicksComparator());\n@@ -74,1 +75,1 @@\n-            Asserts.assertEquals(typeName,  jsonEvent.get(\"type\").asString());\n+            Asserts.assertEquals(typeName, jsonEvent.get(\"type\").asString());\n@@ -83,1 +84,1 @@\n-            JSONValue values = ((JSONValue)jsonObject).get(\"values\");\n+            JSONValue values = ((JSONValue) jsonObject).get(\"values\");\n@@ -92,1 +93,1 @@\n-                    String text = ((JSONValue)jsonValue).asString();\n+                    String text = ((JSONValue) jsonValue).asString();\n@@ -106,1 +107,1 @@\n-            JSONArray jsArray = ((JSONArray)jsonObject);\n+            JSONArray jsArray = ((JSONArray) jsonObject);\n@@ -153,0 +154,2 @@\n+\n+    \n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestPrintJSON.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        Collections.sort(events, (e1, e2) -> e1.getEndTime().compareTo(e2.getEndTime()));\n+        Collections.sort(events, new EndTicksComparator());\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestPrintXML.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}