{"files":[{"patch":"@@ -365,1 +365,1 @@\n-      if (VectorNode::implemented(n->Opcode(), cur_max_vector, bt)) {\n+      if (VectorNode::implemented(n, cur_max_vector, bt)) {\n@@ -2011,1 +2011,1 @@\n-      retValue = VectorNode::implemented(opc, size, velt_basic_type(p0));\n+      retValue = VectorNode::implemented(p0, size, velt_basic_type(p0));\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-        arch_supports_vector(lshiftvopc, num_elem, elem_bt, VecMaskNotUsed) &&\n-        arch_supports_vector(rshiftvopc, num_elem, elem_bt, VecMaskNotUsed) &&\n+        arch_supports_vector(lshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n+        arch_supports_vector(rshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/convertnode.hpp\"\n@@ -256,1 +257,1 @@\n-bool VectorNode::implemented(int opc, uint vlen, BasicType bt) {\n+bool VectorNode::implemented(Node* n, uint vlen, BasicType bt) {\n@@ -260,1 +261,1 @@\n-    int vopc = VectorNode::opcode(opc, bt);\n+    int vopc = VectorNode::opcode(n->Opcode(), bt);\n@@ -265,1 +266,1 @@\n-      return is_vector_rotate_supported(vopc, vlen, bt);\n+      return is_vector_rotate_supported(n, vlen, bt);\n@@ -298,1 +299,2 @@\n-bool VectorNode::is_vector_rotate_supported(int vopc, uint vlen, BasicType bt) {\n+bool VectorNode::is_vector_rotate_supported(Node* n, uint vlen, BasicType bt) {\n+  int vopc = VectorNode::opcode(n->Opcode(), bt);\n@@ -307,0 +309,7 @@\n+  \/\/ If target does not support variable shift operations then no point\n+  \/\/ in creating a rotate vector node since it will not be disintegratable.\n+  int has_scalar_shift = n->in(2)->Opcode() != Op_LoadI;\n+  if (!has_scalar_shift && !Matcher::supports_vector_variable_shifts()) {\n+     return false;\n+  }\n+\n@@ -1187,2 +1196,6 @@\n-      assert(cnt->Opcode() == Op_ConvI2L, \"ConvI2L expected\");\n-      cnt = cnt->in(1);\n+      if (cnt->Opcode() == Op_ConvI2L) {\n+         cnt = cnt->in(1);\n+      } else {\n+         assert(cnt->bottom_type()->isa_long() && cnt->bottom_type()->is_long()->is_con(), \"\");\n+         cnt = phase->transform(new ConvL2INode(cnt));\n+      }\n@@ -1194,1 +1207,8 @@\n-    \/\/ Vector variable shift.\n+    \/\/ Variable vector rotate count.\n+    assert(Matcher::supports_vector_variable_shifts(), \"\");\n+\n+    int subVopc = 0;\n+    int addVopc = 0;\n+    Node* shift_mask_node = NULL;\n+    Node* const_one_node = NULL;\n+\n@@ -1197,4 +1217,15 @@\n-    Node* shift_mask_node = (bt == T_LONG) ? (Node*)(phase->longcon(shift_mask + 1L)) :\n-                                             (Node*)(phase->intcon(shift_mask + 1));\n-    Node* vector_mask = phase->transform(VectorNode::scalar2vector(shift_mask_node,vlen, elem_ty));\n-    int subVopc = VectorNode::opcode((bt == T_LONG) ? Op_SubL : Op_SubI, bt);\n+\n+    if (bt == T_LONG) {\n+      shift_mask_node = phase->longcon(shift_mask);\n+      const_one_node = phase->longcon(1L);\n+      subVopc = VectorNode::opcode(Op_SubL, bt);\n+      addVopc = VectorNode::opcode(Op_AddL, bt);\n+    } else {\n+      shift_mask_node = phase->intcon(shift_mask);\n+      const_one_node = phase->intcon(1);\n+      subVopc = VectorNode::opcode(Op_SubI, bt);\n+      addVopc = VectorNode::opcode(Op_AddI, bt);\n+    }\n+    Node* vector_mask = phase->transform(VectorNode::scalar2vector(shift_mask_node, vlen, elem_ty));\n+    Node* vector_one = phase->transform(VectorNode::scalar2vector(const_one_node, vlen, elem_ty));\n+\n@@ -1202,0 +1233,2 @@\n+    shiftRCnt = phase->transform(VectorNode::make(Op_AndV, shiftRCnt, vector_mask, vt));\n+    vector_mask = phase->transform(VectorNode::make(addVopc, vector_one, vector_mask, vt));\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":44,"deletions":11,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  static bool implemented(int opc, uint vlen, BasicType bt);\n+  static bool implemented(Node* n, uint vlen, BasicType bt);\n@@ -91,1 +91,1 @@\n-  static bool is_vector_rotate_supported(int vopc, uint vlen, BasicType bt);\n+  static bool is_vector_rotate_supported(Node* n, uint vlen, BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}