{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import java.io.Closeable;\n+import java.io.Externalizable;\n+import java.io.Serializable;\n@@ -32,0 +35,1 @@\n+import java.util.Arrays;\n@@ -35,0 +39,1 @@\n+import java.util.Set;\n@@ -40,0 +45,12 @@\n+\n+    \/\/ These are some common interfaces that we know a priori\n+    \/\/ will not contain any bean property getters or setters.\n+    static final Set<Class<?>> IGNORABLE_INTERFACES = Set.of(\n+        AutoCloseable.class,\n+        Cloneable.class,\n+        Closeable.class,\n+        Comparable.class,\n+        Externalizable.class,\n+        Serializable.class\n+    );\n+\n@@ -69,0 +86,2 @@\n+\n+            \/\/ Add declared methods\n@@ -84,4 +103,13 @@\n-                        if (list == null) {\n-                            list = new ArrayList<>();\n-                        }\n-                        list.add(method);\n+                        (list = createIfNeeded(list)).add(method);\n+                    }\n+                }\n+            }\n+\n+            \/\/ Add default methods inherited from interfaces\n+            for (Class<?> iface : type.getInterfaces()) {\n+                if (IGNORABLE_INTERFACES.contains(iface)) {\n+                    continue;\n+                }\n+                for (Method method : iface.getMethods()) {\n+                    if (!Modifier.isAbstract(method.getModifiers())) {\n+                        (list = createIfNeeded(list)).add(method);\n@@ -99,0 +127,4 @@\n+    private static List<Method> createIfNeeded(List<Method> list) {\n+        return list != null ? list : new ArrayList<>();\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/MethodInfo.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8071693\n+ * @summary Verify that the Introspector finds default methods inherited from interfaces\n+ *\/\n+\n+import java.beans.PropertyDescriptor;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+public class DefaultMethodBeanPropertyTest {\n+\n+    public interface IfaceA {\n+        default int getValue() {\n+            return 0;\n+        }\n+        default Object getObj() {\n+            return null;\n+        }\n+\n+        public static int getStaticValue() {\n+            return 0;\n+        }\n+    }\n+\n+    public interface IfaceB extends IfaceA {\n+    }\n+\n+    public interface IfaceC extends IfaceA {\n+        Number getFoo();\n+    }\n+\n+    public class ClassB implements IfaceC {\n+        @Override\n+        public Integer getFoo() {\n+            return null;\n+        }\n+        @Override\n+        public Float getObj() {\n+            return null;\n+        }\n+    }\n+\n+    public static void findProperty(Class<?> type, String name) {\n+        PropertyDescriptor pd = BeanUtils.getPropertyDescriptor(type, name);\n+        if (pd == null) {\n+            throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        findProperty(ClassB.class, \"foo\");\n+\n+        \/\/ Expected properties\n+        final HashSet<PropertyDescriptor> expected = new HashSet<>();\n+        expected.add(new PropertyDescriptor(\"class\", ClassB.class, \"getClass\", null));  \/\/ inherited method\n+        expected.add(new PropertyDescriptor(\"value\", ClassB.class, \"getValue\", null));  \/\/ inherited default method\n+        expected.add(new PropertyDescriptor(\"foo\", ClassB.class, \"getFoo\", null));      \/\/ overridden interface method\n+        expected.add(new PropertyDescriptor(\"obj\", ClassB.class, \"getObj\", null));      \/\/ overridden default method\n+\n+        \/\/ Actual properties\n+        final HashSet<PropertyDescriptor> actual = new HashSet<>(\n+          Arrays.asList(BeanUtils.getPropertyDescriptors(ClassB.class)));\n+\n+        \/\/ Verify they are the same\n+        if (!actual.equals(expected)) {\n+            throw new Error(\"mismatch:\\n    actual: \" + actual + \"\\n  expected: \" + expected);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}