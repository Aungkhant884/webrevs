{"files":[{"patch":"@@ -27,1 +27,2 @@\n- * @summary Verify that the Introspector finds default methods inherited from interfaces\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n@@ -30,0 +31,2 @@\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n@@ -31,1 +34,2 @@\n-import java.util.Arrays;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n@@ -33,0 +37,3 @@\n+import java.util.NavigableSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n@@ -36,1 +43,7 @@\n-    public interface IfaceA {\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 1              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A1 {\n@@ -49,1 +62,1 @@\n-    public interface IfaceB extends IfaceA {\n+    public interface B1 extends A1 {\n@@ -52,1 +65,1 @@\n-    public interface IfaceC extends IfaceA {\n+    public interface C1 extends A1 {\n@@ -56,1 +69,1 @@\n-    public class ClassB implements IfaceC {\n+    public class D1 implements C1 {\n@@ -67,4 +80,18 @@\n-    public static void findProperty(Class<?> type, String name) {\n-        PropertyDescriptor pd = BeanUtils.getPropertyDescriptor(type, name);\n-        if (pd == null) {\n-            throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n+    public static void testScenario1() {\n+        verifyProperties(D1.class,\n+            \"getClass\",     \/\/ inherited method\n+            \"getValue\",     \/\/ inherited default method\n+            \"getFoo\",       \/\/ overridden interface method\n+            \"getObj\"        \/\/ overridden default method\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 2              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A2 {\n+        default Object getFoo() {\n+            return null;\n@@ -74,2 +101,2 @@\n-    public static void main(String[] args) throws Exception {\n-        findProperty(ClassB.class, \"foo\");\n+    public interface B2 extends A2 {\n+    }\n@@ -77,1 +104,54 @@\n-        \/\/ Expected properties\n+    public interface C2 extends A2 {\n+    }\n+\n+    public class D2 implements B2, C2 {\n+    }\n+\n+    public static void testScenario2() {\n+        verifyProperties(D2.class,\n+            \"getClass\",\n+            \"getFoo\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 3              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A3 {\n+        default Object getFoo() {\n+            return null;\n+        }\n+    }\n+\n+    public interface B3 extends A3 {\n+        @Override\n+        Set<?> getFoo();\n+    }\n+\n+    public interface C3 extends A3 {\n+        @Override\n+        Collection<?> getFoo();\n+    }\n+\n+    public class D3 implements B3, C3 {\n+        @Override\n+        public NavigableSet<?> getFoo() {\n+            return null;\n+        }\n+    }\n+\n+    public static void testScenario3() {\n+        verifyProperties(D3.class,\n+            \"getClass\",\n+            \"getFoo\"\n+        );\n+    }\n+\n+\/\/ Helper methods\n+\n+    public static void verifyProperties(Class<?> type, String... getterNames) {\n+\n+        \/\/ Gather expected properties\n@@ -79,4 +159,26 @@\n-        expected.add(new PropertyDescriptor(\"class\", ClassB.class, \"getClass\", null));  \/\/ inherited method\n-        expected.add(new PropertyDescriptor(\"value\", ClassB.class, \"getValue\", null));  \/\/ inherited default method\n-        expected.add(new PropertyDescriptor(\"foo\", ClassB.class, \"getFoo\", null));      \/\/ overridden interface method\n-        expected.add(new PropertyDescriptor(\"obj\", ClassB.class, \"getObj\", null));      \/\/ overridden default method\n+        for (String methodName : getterNames) {\n+            final String suffix = methodName.substring(3);\n+            final String propName = Introspector.decapitalize(suffix);\n+            final Method getter;\n+            try {\n+                getter = type.getMethod(methodName);\n+            } catch (NoSuchMethodException e) {\n+                throw new Error(\"unexpected error\", e);\n+            }\n+            final PropertyDescriptor propDesc;\n+            try {\n+                propDesc = new PropertyDescriptor(propName, getter, null);\n+            } catch (IntrospectionException e) {\n+                throw new Error(\"unexpected error\", e);\n+            }\n+            expected.add(propDesc);\n+        }\n+\n+        \/\/ Verify properties can be found directly\n+        expected.stream()\n+          .map(PropertyDescriptor::getName)\n+          .filter(name -> BeanUtils.getPropertyDescriptor(type, name) == null)\n+          .findFirst()\n+          .ifPresent(name -> {\n+            throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n+          });\n@@ -84,3 +186,3 @@\n-        \/\/ Actual properties\n-        final HashSet<PropertyDescriptor> actual = new HashSet<>(\n-          Arrays.asList(BeanUtils.getPropertyDescriptors(ClassB.class)));\n+        \/\/ Gather actual properties\n+        final Set<PropertyDescriptor> actual = Set.of(\n+            BeanUtils.getPropertyDescriptors(type));\n@@ -88,1 +190,1 @@\n-        \/\/ Verify they are the same\n+        \/\/ Verify the two sets are the same\n@@ -90,1 +192,9 @@\n-            throw new Error(\"mismatch:\\n    actual: \" + actual + \"\\n  expected: \" + expected);\n+            throw new Error(\"mismatch: \" + type\n+              + \"\\nACTUAL:\\n  \"\n+              + actual.stream()\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\"\\n  \"))\n+              + \"\\nEXPECTED:\\n  \"\n+              + expected.stream()\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\"\\n  \")));\n@@ -93,0 +203,8 @@\n+\n+\/\/ Main method\n+\n+    public static void main(String[] args) throws Exception {\n+        testScenario1();\n+        testScenario2();\n+        testScenario3();\n+    }\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":140,"deletions":22,"binary":false,"changes":162,"status":"modified"}]}