{"files":[{"patch":"@@ -397,1 +397,2 @@\n-         * when previously bound, in the current thread.\n+         * when previously bound, in the current thread. If {@code op} completes with an\n+         * exception then it propagated by this method.\n@@ -399,7 +400,6 @@\n-         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-         * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-         * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-         * underlying construct of each {@code StructuredTaskScope} created in the\n-         * dynamic scope to be closed. This may require blocking until all child threads\n-         * have completed their sub-tasks. The closing is done in the reverse order that\n-         * they were created. Once closed, {@link StructureViolationException} is thrown.\n+         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+         * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+         * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+         * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+         * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+         * is closed and {@link StructureViolationException} is thrown.\n@@ -410,0 +410,1 @@\n+         * @throws StructureViolationException if a structure violation is detected\n@@ -426,1 +427,2 @@\n-         * when previously bound, in the current thread.\n+         * when previously bound, in the current thread. If {@code op} completes with an\n+         * exception then it propagated by this method.\n@@ -428,7 +430,6 @@\n-         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-         * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-         * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-         * underlying construct of each {@code StructuredTaskScope} created in the\n-         * dynamic scope to be closed. This may require blocking until all child threads\n-         * have completed their sub-tasks. The closing is done in the reverse order that\n-         * they were created. Once closed, {@link StructureViolationException} is thrown.\n+         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+         * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+         * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+         * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+         * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+         * is closed and {@link StructureViolationException} is thrown.\n@@ -439,0 +440,1 @@\n+         * @throws StructureViolationException if a structure violation is detected\n@@ -489,1 +491,2 @@\n-         * when previously bound, in the current thread.\n+         * when previously bound, in the current thread. If {@code op} completes with an\n+         * exception then it propagated by this method.\n@@ -491,7 +494,6 @@\n-         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-         * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-         * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-         * underlying construct of each {@code StructuredTaskScope} created in the\n-         * dynamic scope to be closed. This may require blocking until all child threads\n-         * have completed their sub-tasks. The closing is done in the reverse order that\n-         * they were created. Once closed, {@link StructureViolationException} is thrown.\n+         * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+         * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+         * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+         * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+         * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+         * is closed and {@link StructureViolationException} is thrown.\n@@ -500,0 +502,1 @@\n+         * @throws StructureViolationException if a structure violation is detected\n@@ -556,1 +559,2 @@\n-     * its previous value when previously bound, in the current thread.\n+     * its previous value when previously bound, in the current thread. If {@code op}\n+     * completes with an exception then it propagated by this method.\n@@ -558,7 +562,6 @@\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-     * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-     * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-     * underlying construct of each {@code StructuredTaskScope} created in the\n-     * dynamic scope to be closed. This may require blocking until all child threads\n-     * have completed their sub-tasks. The closing is done in the reverse order that\n-     * they were created. Once closed, {@link StructureViolationException} is thrown.\n+     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+     * is closed and {@link StructureViolationException} is thrown.\n@@ -579,0 +582,1 @@\n+     * @throws StructureViolationException if a structure violation is detected\n@@ -591,1 +595,2 @@\n-     * its previous value when previously bound, in the current thread.\n+     * its previous value when previously bound, in the current thread. If {@code op}\n+     * completes with an exception then it propagated by this method.\n@@ -593,7 +598,6 @@\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-     * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-     * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-     * underlying construct of each {@code StructuredTaskScope} created in the\n-     * dynamic scope to be closed. This may require blocking until all child threads\n-     * have completed their sub-tasks. The closing is done in the reverse order that\n-     * they were created. Once closed, {@link StructureViolationException} is thrown.\n+     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+     * is closed and {@link StructureViolationException} is thrown.\n@@ -614,0 +618,1 @@\n+     * @throws StructureViolationException if a structure violation is detected\n@@ -625,1 +630,2 @@\n-     * when previously bound, in the current thread.\n+     * when previously bound, in the current thread. If {@code op} completes with an\n+     * exception then it propagated by this method.\n@@ -627,7 +633,6 @@\n-     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>.\n-     * If {@code op} creates a {@link StructuredTaskScope} but does not {@linkplain\n-     * StructuredTaskScope#close() close} it, then exiting {@code op} causes the\n-     * underlying construct of each {@code StructuredTaskScope} created in the\n-     * dynamic scope to be closed. This may require blocking until all child threads\n-     * have completed their sub-tasks. The closing is done in the reverse order that\n-     * they were created. Once closed, {@link StructureViolationException} is thrown.\n+     * <p> Scoped values are intended to be used in a <em>structured manner<\/em>. If code\n+     * invoked directly or indirectly by the operation creates a {@link StructuredTaskScope}\n+     * but does not {@linkplain StructuredTaskScope#close() close} it, then it is detected\n+     * as a <em>structure violation<\/em> when the operation completes (normally or with an\n+     * exception). In that case, the underlying construct of the {@code StructuredTaskScope}\n+     * is closed and {@link StructureViolationException} is thrown.\n@@ -646,0 +651,1 @@\n+     * @throws StructureViolationException if a structure violation is detected\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":54,"deletions":48,"binary":false,"changes":102,"status":"modified"}]}