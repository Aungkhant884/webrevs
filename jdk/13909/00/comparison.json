{"files":[{"patch":"@@ -27,2 +27,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -30,0 +28,2 @@\n+import java.net.http.HttpClient.Builder;\n+import java.net.http.HttpClient.Version;\n@@ -38,5 +38,0 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -46,0 +41,1 @@\n+\n@@ -47,3 +43,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n-import jdk.httpclient.test.lib.http2.Http2TestExchange;\n-import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -69,1 +62,1 @@\n- * @build jdk.httpclient.test.lib.http2.Http2TestServer\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -74,1 +67,1 @@\n-public class FlowAdapterPublisherTest {\n+public class FlowAdapterPublisherTest implements HttpServerAdapters {\n@@ -77,4 +70,4 @@\n-    HttpServer httpTestServer;         \/\/ HTTP\/1.1    [ 4 servers ]\n-    HttpsServer httpsTestServer;       \/\/ HTTPS\/1.1\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    HttpTestServer httpTestServer;     \/\/ HTTP\/1.1    [ 4 servers ]\n+    HttpTestServer httpsTestServer;    \/\/ HTTPS\/1.1\n+    HttpTestServer http2TestServer;    \/\/ HTTP\/2 ( h2c )\n+    HttpTestServer https2TestServer;   \/\/ HTTP\/2 ( h2  )\n@@ -99,0 +92,17 @@\n+    private static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\")) return Version.HTTP_1_1;\n+        if (uri.contains(\"\/https1\/\")) return Version.HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\")) return Version.HTTP_2;\n+        if (uri.contains(\"\/https2\/\")) return Version.HTTP_2;\n+        return null;\n+    }\n+\n+    private HttpClient newHttpClient(String uri) {\n+        var builder = HttpClient.newBuilder();\n+        return builder.sslContext(sslContext).proxy(Builder.NO_PROXY).build();\n+    }\n+\n+    private HttpRequest.Builder newRequestBuilder(String uri) {\n+        return HttpRequest.newBuilder(URI.create(uri));\n+    }\n+\n@@ -114,1 +124,1 @@\n-    void testByteBufferPublisherUnknownLength(String url) {\n+    void testByteBufferPublisherUnknownLength(String uri) {\n@@ -117,9 +127,11 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new BBPublisher(body))).build();\n-\n-        HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, Arrays.stream(body).collect(joining()));\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new BBPublisher(body))).build();\n+\n+            HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, Arrays.stream(body).collect(joining()));\n+        }\n@@ -129,1 +141,1 @@\n-    void testByteBufferPublisherFixedLength(String url) {\n+    void testByteBufferPublisherFixedLength(String uri) {\n@@ -133,9 +145,11 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new BBPublisher(body), cl)).build();\n-\n-        HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, Arrays.stream(body).collect(joining()));\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new BBPublisher(body), cl)).build();\n+\n+            HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, Arrays.stream(body).collect(joining()));\n+        }\n@@ -147,1 +161,1 @@\n-    void testMappedByteBufferPublisherUnknownLength(String url) {\n+    void testMappedByteBufferPublisherUnknownLength(String uri) {\n@@ -150,9 +164,11 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new MBBPublisher(body))).build();\n-\n-        HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, Arrays.stream(body).collect(joining()));\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new MBBPublisher(body))).build();\n+\n+            HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, Arrays.stream(body).collect(joining()));\n+        }\n@@ -162,1 +178,1 @@\n-    void testMappedByteBufferPublisherFixedLength(String url) {\n+    void testMappedByteBufferPublisherFixedLength(String uri) {\n@@ -166,9 +182,11 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new MBBPublisher(body), cl)).build();\n-\n-        HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, Arrays.stream(body).collect(joining()));\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new MBBPublisher(body), cl)).build();\n+\n+            HttpResponse<String> response = client.sendAsync(request, ofString(UTF_8)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, Arrays.stream(body).collect(joining()));\n+        }\n@@ -182,1 +200,1 @@\n-    void testPublishTooFew(String url) throws InterruptedException {\n+    void testPublishTooFew(String uri) throws InterruptedException {\n@@ -186,9 +204,10 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new BBPublisher(body), cl)).build();\n-\n-        try {\n-            HttpResponse<String> response = client.send(request, ofString(UTF_8));\n-            fail(\"Unexpected response: \" + response);\n-        } catch (IOException expected) {\n-            assertMessage(expected, \"Too few bytes returned\");\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new BBPublisher(body), cl)).build();\n+\n+            try {\n+                HttpResponse<String> response = client.send(request, ofString(UTF_8));\n+                fail(\"Unexpected response: \" + response);\n+            } catch (IOException expected) {\n+                assertMessage(expected, \"Too few bytes returned\");\n+            }\n@@ -199,1 +218,1 @@\n-    void testPublishTooMany(String url) throws InterruptedException {\n+    void testPublishTooMany(String uri) throws InterruptedException {\n@@ -203,9 +222,10 @@\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(fromPublisher(new BBPublisher(body), cl)).build();\n-\n-        try {\n-            HttpResponse<String> response = client.send(request, ofString(UTF_8));\n-            fail(\"Unexpected response: \" + response);\n-        } catch (IOException expected) {\n-            assertMessage(expected, \"Too many bytes in request body\");\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(fromPublisher(new BBPublisher(body), cl)).build();\n+\n+            try {\n+                HttpResponse<String> response = client.send(request, ofString(UTF_8));\n+                fail(\"Unexpected response: \" + response);\n+            } catch (IOException expected) {\n+                assertMessage(expected, \"Too many bytes in request body\");\n+            }\n@@ -335,5 +355,0 @@\n-    static String serverAuthority(HttpServer server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getAddress().getPort();\n-    }\n-\n@@ -346,4 +361,3 @@\n-        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(),0);\n-        httpTestServer = HttpServer.create(sa, 0);\n-        httpTestServer.createContext(\"\/http1\/echo\", new Http1EchoHandler());\n-        httpURI = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\/echo\";\n+        httpTestServer = HttpTestServer.create(Version.HTTP_1_1);\n+        httpTestServer.addHandler(new HttpEchoHandler(), \"\/http1\/echo\");\n+        httpURI = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/echo\";\n@@ -351,4 +365,3 @@\n-        httpsTestServer = HttpsServer.create(sa, 0);\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n-        httpsTestServer.createContext(\"\/https1\/echo\", new Http1EchoHandler());\n-        httpsURI = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\/echo\";\n+        httpsTestServer = HttpTestServer.create(Version.HTTP_1_1, sslContext);\n+        httpsTestServer.addHandler(new HttpEchoHandler(), \"\/https1\/echo\");\n+        httpsURI = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/echo\";\n@@ -356,2 +369,2 @@\n-        http2TestServer = new Http2TestServer(\"localhost\", false, 0);\n-        http2TestServer.addHandler(new Http2EchoHandler(), \"\/http2\/echo\");\n+        http2TestServer = HttpTestServer.create(Version.HTTP_2);\n+        http2TestServer.addHandler(new HttpEchoHandler(), \"\/http2\/echo\");\n@@ -360,2 +373,2 @@\n-        https2TestServer = new Http2TestServer(\"localhost\", true, sslContext);\n-        https2TestServer.addHandler(new Http2EchoHandler(), \"\/https2\/echo\");\n+        https2TestServer = HttpTestServer.create(Version.HTTP_2, sslContext);\n+        https2TestServer.addHandler(new HttpEchoHandler(), \"\/https2\/echo\");\n@@ -372,2 +385,2 @@\n-        httpTestServer.stop(0);\n-        httpsTestServer.stop(0);\n+        httpTestServer.stop();\n+        httpsTestServer.stop();\n@@ -378,13 +391,1 @@\n-    static class Http1EchoHandler implements HttpHandler {\n-        @Override\n-        public void handle(HttpExchange t) throws IOException {\n-            try (InputStream is = t.getRequestBody();\n-                 OutputStream os = t.getResponseBody()) {\n-                byte[] bytes = is.readAllBytes();\n-                t.sendResponseHeaders(200, bytes.length);\n-                os.write(bytes);\n-            }\n-        }\n-    }\n-\n-    static class Http2EchoHandler implements Http2Handler {\n+    static class HttpEchoHandler implements HttpTestHandler {\n@@ -392,1 +393,1 @@\n-        public void handle(Http2TestExchange t) throws IOException {\n+        public void handle(HttpTestExchange t) throws IOException {\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterPublisherTest.java","additions":110,"deletions":109,"binary":false,"changes":219,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -32,0 +30,2 @@\n+import java.net.http.HttpClient.Builder;\n+import java.net.http.HttpClient.Version;\n@@ -35,1 +35,0 @@\n-import java.util.concurrent.CompletableFuture;\n@@ -40,5 +39,0 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -51,0 +45,1 @@\n+\n@@ -52,3 +47,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n-import jdk.httpclient.test.lib.http2.Http2TestExchange;\n-import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -70,1 +62,2 @@\n- * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -74,1 +67,1 @@\n-public class FlowAdapterSubscriberTest {\n+public class FlowAdapterSubscriberTest implements HttpServerAdapters {\n@@ -77,4 +70,4 @@\n-    HttpServer httpTestServer;         \/\/ HTTP\/1.1    [ 4 servers ]\n-    HttpsServer httpsTestServer;       \/\/ HTTPS\/1.1\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    HttpTestServer httpTestServer;     \/\/ HTTP\/1.1    [ 4 servers ]\n+    HttpTestServer httpsTestServer;    \/\/ HTTPS\/1.1\n+    HttpTestServer http2TestServer;    \/\/ HTTP\/2 ( h2c )\n+    HttpTestServer https2TestServer;   \/\/ HTTP\/2 ( h2  )\n@@ -85,0 +78,1 @@\n+\n@@ -106,0 +100,17 @@\n+    private static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\")) return Version.HTTP_1_1;\n+        if (uri.contains(\"\/https1\/\")) return Version.HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\")) return Version.HTTP_2;\n+        if (uri.contains(\"\/https2\/\")) return Version.HTTP_2;\n+        return null;\n+    }\n+\n+    private HttpClient newHttpClient(String uri) {\n+        var builder = HttpClient.newBuilder();\n+        return builder.sslContext(sslContext).proxy(Builder.NO_PROXY).build();\n+    }\n+\n+    private HttpRequest.Builder newRequestBuilder(String uri) {\n+        return HttpRequest.newBuilder(URI.create(uri));\n+    }\n+\n@@ -128,13 +139,15 @@\n-    void testListWithFinisher(String url) {\n-        System.out.printf(now() + \"testListWithFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n-\n-        ListSubscriber subscriber = new ListSubscriber();\n-        HttpResponse<String> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber, Supplier::get)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"May the luck of the Irish be with you!\");\n+    void testListWithFinisher(String uri) {\n+        System.out.printf(now() + \"testListWithFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n+\n+            ListSubscriber subscriber = new ListSubscriber();\n+            HttpResponse<String> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber, Supplier::get)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"May the luck of the Irish be with you!\");\n+        }\n@@ -144,13 +157,15 @@\n-    void testListWithoutFinisher(String url) {\n-        System.out.printf(now() + \"testListWithoutFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n-\n-        ListSubscriber subscriber = new ListSubscriber();\n-        HttpResponse<Void> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber)).join();\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"May the luck of the Irish be with you!\");\n+    void testListWithoutFinisher(String uri) {\n+        System.out.printf(now() + \"testListWithoutFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n+\n+            ListSubscriber subscriber = new ListSubscriber();\n+            HttpResponse<Void> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber)).join();\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"May the luck of the Irish be with you!\");\n+        }\n@@ -160,13 +175,15 @@\n-    void testListWithFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testListWithFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n-\n-        ListSubscriber subscriber = new ListSubscriber();\n-        HttpResponse<String> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber, Supplier::get));\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"May the luck of the Irish be with you!\");\n+    void testListWithFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testListWithFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n+\n+            ListSubscriber subscriber = new ListSubscriber();\n+            HttpResponse<String> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber, Supplier::get));\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"May the luck of the Irish be with you!\");\n+        }\n@@ -176,13 +193,15 @@\n-    void testListWithoutFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testListWithoutFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n-\n-        ListSubscriber subscriber = new ListSubscriber();\n-        HttpResponse<Void> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber));\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"May the luck of the Irish be with you!\");\n+    void testListWithoutFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testListWithoutFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\")).build();\n+\n+            ListSubscriber subscriber = new ListSubscriber();\n+            HttpResponse<Void> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber));\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"May the luck of the Irish be with you!\");\n+        }\n@@ -194,13 +213,15 @@\n-    void testCollectionWithFinisher(String url) {\n-        System.out.printf(now() + \"testCollectionWithFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n-\n-        CollectionSubscriber subscriber = new CollectionSubscriber();\n-        HttpResponse<String> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber, CollectionSubscriber::get)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"What's the craic?\");\n+    void testCollectionWithFinisher(String uri) {\n+        System.out.printf(now() + \"testCollectionWithFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n+\n+            CollectionSubscriber subscriber = new CollectionSubscriber();\n+            HttpResponse<String> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber, CollectionSubscriber::get)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"What's the craic?\");\n+        }\n@@ -210,13 +231,15 @@\n-    void testCollectionWithoutFinisher(String url) {\n-        System.out.printf(now() + \"testCollectionWithoutFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n-\n-        CollectionSubscriber subscriber = new CollectionSubscriber();\n-        HttpResponse<Void> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber)).join();\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"What's the craic?\");\n+    void testCollectionWithoutFinisher(String uri) {\n+        System.out.printf(now() + \"testCollectionWithoutFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n+\n+            CollectionSubscriber subscriber = new CollectionSubscriber();\n+            HttpResponse<Void> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber)).join();\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"What's the craic?\");\n+        }\n@@ -226,13 +249,15 @@\n-    void testCollectionWithFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testCollectionWithFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n-\n-        CollectionSubscriber subscriber = new CollectionSubscriber();\n-        HttpResponse<String> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber, CollectionSubscriber::get));\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"What's the craic?\");\n+    void testCollectionWithFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testCollectionWithFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n+\n+            CollectionSubscriber subscriber = new CollectionSubscriber();\n+            HttpResponse<String> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber, CollectionSubscriber::get));\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"What's the craic?\");\n+        }\n@@ -242,13 +267,15 @@\n-    void testCollectionWithoutFinisheBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testCollectionWithoutFinisheBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n-\n-        CollectionSubscriber subscriber = new CollectionSubscriber();\n-        HttpResponse<Void> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber));\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"What's the craic?\");\n+    void testCollectionWithoutFinisheBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testCollectionWithoutFinisheBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"What's the craic?\")).build();\n+\n+            CollectionSubscriber subscriber = new CollectionSubscriber();\n+            HttpResponse<Void> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber));\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"What's the craic?\");\n+        }\n@@ -260,13 +287,15 @@\n-    void testIterableWithFinisher(String url) {\n-        System.out.printf(now() + \"testIterableWithFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n-\n-        IterableSubscriber subscriber = new IterableSubscriber();\n-        HttpResponse<String> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber, Supplier::get)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"We're sucking diesel now!\");\n+    void testIterableWithFinisher(String uri) {\n+        System.out.printf(now() + \"testIterableWithFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n+\n+            IterableSubscriber subscriber = new IterableSubscriber();\n+            HttpResponse<String> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber, Supplier::get)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"We're sucking diesel now!\");\n+        }\n@@ -276,13 +305,15 @@\n-    void testIterableWithoutFinisher(String url) {\n-        System.out.printf(now() + \"testIterableWithoutFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n-\n-        IterableSubscriber subscriber = new IterableSubscriber();\n-        HttpResponse<Void> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber)).join();\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"We're sucking diesel now!\");\n+    void testIterableWithoutFinisher(String uri) {\n+        System.out.printf(now() + \"testIterableWithoutFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n+\n+            IterableSubscriber subscriber = new IterableSubscriber();\n+            HttpResponse<Void> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber)).join();\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"We're sucking diesel now!\");\n+        }\n@@ -292,13 +323,15 @@\n-    void testIterableWithFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testIterableWithFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n-\n-        IterableSubscriber subscriber = new IterableSubscriber();\n-        HttpResponse<String> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber, Supplier::get));\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"We're sucking diesel now!\");\n+    void testIterableWithFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testIterableWithFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n+\n+            IterableSubscriber subscriber = new IterableSubscriber();\n+            HttpResponse<String> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber, Supplier::get));\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"We're sucking diesel now!\");\n+        }\n@@ -308,13 +341,15 @@\n-    void testIterableWithoutFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testIterableWithoutFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n-\n-        IterableSubscriber subscriber = new IterableSubscriber();\n-        HttpResponse<Void> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber));\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(text, \"We're sucking diesel now!\");\n+    void testIterableWithoutFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testIterableWithoutFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n+\n+            IterableSubscriber subscriber = new IterableSubscriber();\n+            HttpResponse<Void> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber));\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertEquals(text, \"We're sucking diesel now!\");\n+        }\n@@ -326,13 +361,15 @@\n-    void testObjectWithFinisher(String url) {\n-        System.out.printf(now() + \"testObjectWithFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n-\n-        ObjectSubscriber subscriber = new ObjectSubscriber();\n-        HttpResponse<String> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber, ObjectSubscriber::get)).join();\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+    void testObjectWithFinisher(String uri) {\n+        System.out.printf(now() + \"testObjectWithFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n+\n+            ObjectSubscriber subscriber = new ObjectSubscriber();\n+            HttpResponse<String> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber, ObjectSubscriber::get)).join();\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+        }\n@@ -342,13 +379,15 @@\n-    void testObjectWithoutFinisher(String url) {\n-        System.out.printf(now() + \"testObjectWithoutFinisher(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n-\n-        ObjectSubscriber subscriber = new ObjectSubscriber();\n-        HttpResponse<Void> response = client.sendAsync(request,\n-                BodyHandlers.fromSubscriber(subscriber)).join();\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+    void testObjectWithoutFinisher(String uri) {\n+        System.out.printf(now() + \"testObjectWithoutFinisher(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n+\n+            ObjectSubscriber subscriber = new ObjectSubscriber();\n+            HttpResponse<Void> response = client.sendAsync(request,\n+                    BodyHandlers.fromSubscriber(subscriber)).join();\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+        }\n@@ -358,13 +397,15 @@\n-    void testObjectWithFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testObjectWithFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n-\n-        ObjectSubscriber subscriber = new ObjectSubscriber();\n-        HttpResponse<String> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber, ObjectSubscriber::get));\n-        String text = response.body();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+    void testObjectWithFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testObjectWithFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n+\n+            ObjectSubscriber subscriber = new ObjectSubscriber();\n+            HttpResponse<String> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber, ObjectSubscriber::get));\n+            String text = response.body();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+        }\n@@ -374,13 +415,15 @@\n-    void testObjectWithoutFinisherBlocking(String url) throws Exception {\n-        System.out.printf(now() + \"testObjectWithoutFinisherBlocking(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n-\n-        ObjectSubscriber subscriber = new ObjectSubscriber();\n-        HttpResponse<Void> response = client.send(request,\n-                BodyHandlers.fromSubscriber(subscriber));\n-        String text = subscriber.get();\n-        System.out.println(text);\n-        assertEquals(response.statusCode(), 200);\n-        assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+    void testObjectWithoutFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testObjectWithoutFinisherBlocking(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n+\n+            ObjectSubscriber subscriber = new ObjectSubscriber();\n+            HttpResponse<Void> response = client.send(request,\n+                    BodyHandlers.fromSubscriber(subscriber));\n+            String text = subscriber.get();\n+            System.out.println(text);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), version(uri));\n+            assertTrue(text.length() != 0);  \/\/ what else can be asserted!\n+        }\n@@ -393,12 +436,13 @@\n-    void mappingFromByteArray(String url) throws Exception {\n-        System.out.printf(now() + \"mappingFromByteArray(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n-\n-        client.sendAsync(request, BodyHandlers.fromSubscriber(BodySubscribers.ofByteArray(),\n-                    bas -> new String(bas.getBody().toCompletableFuture().join(), UTF_8)))\n-                .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n-                .thenApply(HttpResponse::body)\n-                .thenAccept(body -> assertEquals(body, \"We're sucking diesel now!\"))\n-                .join();\n+    void mappingFromByteArray(String uri) throws Exception {\n+        System.out.printf(now() + \"mappingFromByteArray(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"We're sucking diesel now!\")).build();\n+\n+            client.sendAsync(request, BodyHandlers.fromSubscriber(BodySubscribers.ofByteArray(),\n+                            bas -> new String(bas.getBody().toCompletableFuture().join(), UTF_8)))\n+                    .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n+                    .thenApply(HttpResponse::body)\n+                    .thenAccept(body -> assertEquals(body, \"We're sucking diesel now!\"))\n+                    .join();\n+        }\n@@ -408,14 +452,16 @@\n-    void mappingFromInputStream(String url) throws Exception {\n-        System.out.printf(now() + \"mappingFromInputStream(%s) starting%n\", url);\n-        HttpClient client = HttpClient.newBuilder().sslContext(sslContext).build();\n-        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n-\n-        client.sendAsync(request, BodyHandlers.fromSubscriber(BodySubscribers.ofInputStream(),\n-                    ins -> {\n-                        InputStream is = ins.getBody().toCompletableFuture().join();\n-                        return new String(uncheckedReadAllBytes(is), UTF_8); } ))\n-                .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n-                .thenApply(HttpResponse::body)\n-                .thenAccept(body -> assertEquals(body, \"May the wind always be at your back.\"))\n-                .join();\n+    void mappingFromInputStream(String uri) throws Exception {\n+        System.out.printf(now() + \"mappingFromInputStream(%s) starting%n\", uri);\n+        try (HttpClient client = newHttpClient(uri)) {\n+            HttpRequest request = newRequestBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the wind always be at your back.\")).build();\n+\n+            client.sendAsync(request, BodyHandlers.fromSubscriber(BodySubscribers.ofInputStream(),\n+                            ins -> {\n+                                InputStream is = ins.getBody().toCompletableFuture().join();\n+                                return new String(uncheckedReadAllBytes(is), UTF_8);\n+                            }))\n+                    .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n+                    .thenApply(HttpResponse::body)\n+                    .thenAccept(body -> assertEquals(body, \"May the wind always be at your back.\"))\n+                    .join();\n+        }\n@@ -506,0 +552,1 @@\n+        assertEquals(response.version(), version(response.request().uri().toString()));\n@@ -509,5 +556,0 @@\n-    static String serverAuthority(HttpServer server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getAddress().getPort();\n-    }\n-\n@@ -520,4 +562,3 @@\n-        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-        httpTestServer = HttpServer.create(sa, 0);\n-        httpTestServer.createContext(\"\/http1\/echo\", new Http1EchoHandler());\n-        httpURI = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\/echo\";\n+        httpTestServer = HttpTestServer.create(Version.HTTP_1_1);\n+        httpTestServer.addHandler(new HttpEchoHandler(), \"\/http1\/echo\");\n+        httpURI = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/echo\";\n@@ -525,4 +566,3 @@\n-        httpsTestServer = HttpsServer.create(sa, 0);\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n-        httpsTestServer.createContext(\"\/https1\/echo\", new Http1EchoHandler());\n-        httpsURI = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\/echo\";\n+        httpsTestServer = HttpTestServer.create(Version.HTTP_1_1, sslContext);\n+        httpsTestServer.addHandler(new HttpEchoHandler(), \"\/https1\/echo\");\n+        httpsURI = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/echo\";\n@@ -530,2 +570,2 @@\n-        http2TestServer = new Http2TestServer(\"localhost\", false, 0);\n-        http2TestServer.addHandler(new Http2EchoHandler(), \"\/http2\/echo\");\n+        http2TestServer = HttpTestServer.create(Version.HTTP_2);\n+        http2TestServer.addHandler(new HttpEchoHandler(), \"\/http2\/echo\");\n@@ -534,2 +574,2 @@\n-        https2TestServer = new Http2TestServer(\"localhost\", true, sslContext);\n-        https2TestServer.addHandler(new Http2EchoHandler(), \"\/https2\/echo\");\n+        https2TestServer = HttpTestServer.create(Version.HTTP_2, sslContext);\n+        https2TestServer.addHandler(new HttpEchoHandler(), \"\/https2\/echo\");\n@@ -546,2 +586,2 @@\n-        httpTestServer.stop(0);\n-        httpsTestServer.stop(0);\n+        httpTestServer.stop();\n+        httpsTestServer.stop();\n@@ -552,13 +592,1 @@\n-    static class Http1EchoHandler implements HttpHandler {\n-        @Override\n-        public void handle(HttpExchange t) throws IOException {\n-            try (InputStream is = t.getRequestBody();\n-                 OutputStream os = t.getResponseBody()) {\n-                byte[] bytes = is.readAllBytes();\n-                t.sendResponseHeaders(200, bytes.length);\n-                os.write(bytes);\n-            }\n-        }\n-    }\n-\n-    static class Http2EchoHandler implements Http2Handler {\n+    static class HttpEchoHandler implements HttpTestHandler {\n@@ -566,1 +594,1 @@\n-        public void handle(Http2TestExchange t) throws IOException {\n+        public void handle(HttpTestExchange t) throws IOException {\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterSubscriberTest.java","additions":312,"deletions":284,"binary":false,"changes":596,"status":"modified"}]}