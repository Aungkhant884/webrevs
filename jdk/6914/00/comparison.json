{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *  The implementation of the javadoc tool, and associated doclets.\n+ *  The implementation of the <em>javadoc<\/em> tool and associated doclets.\n@@ -29,1 +29,1 @@\n- *  <p>Internally, javadoc is composed of two primary parts:\n+ *  <p>Internally, <em>javadoc<\/em> is composed of two primary parts:\n@@ -33,2 +33,2 @@\n- *  The tool provides a common infrastructure for command-line processing,\n- *  and for reading the documentation comments in Java source files,\n+ *  <p>The tool provides a common infrastructure for command-line processing,\n+ *  and for reading the declarations and documentation comments in Java source files,\n@@ -36,1 +36,122 @@\n- *  how to process the documentation comments.\n+ *  how to process the declarations and their documentation comments.\n+ *\n+ * <p>The following provides a top-down description of the overall <em>javadoc<\/em>\n+ * software stack.\n+ *\n+ * <dl>\n+ *   <dt>Doclets\n+ *   <dd>\n+ *      <dl>\n+ *        <dt id=\"std-doclet\">The Standard Doclet\n+ *        <dd><p>\n+ *          The {@link jdk.javadoc.doclet.StandardDoclet} is a thin public wrapper\n+ *          around the internal HTML doclet.\n+ *\n+ *        <dt id=\"html-doclet\">The HTML Doclet\n+ *        <dd><p>\n+ *          The {@link jdk.javadoc.internal.doclets.formats.html.HtmlDoclet} class\n+ *          and other classes in the\n+ *          {@link jdk.javadoc.internal.doclets.formats.html formats.html} package\n+ *          customize the abstract pages generated by the toolkit layer to generate\n+ *          HTML pages.  Some pages are specific to the HTML output format,\n+ *          and do not have an abstract builder in the toolkit layer.\n+ *\n+ *          <p>Individual pages of output are generated by page-specific subtypes of\n+ *          {@link jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter}.\n+ *\n+ *          <p>The {@link jdk.javadoc.internal.doclets.formats.html.HtmlConfiguration} class\n+ *          provides configuration information that is relevant to all the generated pages.\n+ *          The class extends the {@link jdk.javadoc.internal.doclets.toolkit.BaseConfiguration}\n+ *          class provided by the toolkit layer.\n+ *\n+ *          <p>The classes in the {@code formats.html} package use an internal\n+ *          library in the\n+ *          {@link jdk.javadoc.internal.doclets.formats.html.markup formats.html.markup} package,\n+ *          to create trees (or acyclic graphs) of\n+ *          {@linkplain jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree HTML tree nodes}.\n+ *          Apart from using a common format-neutral supertype,\n+ *          {@link jdk.javadoc.internal.doclets.toolkit.Content}, the {@code markup} library\n+ *          is mostly independent of the rest of the javadoc software stack.\n+ *\n+ *        <dt id=\"toolkit\">Toolkit\n+ *        <dd><p>\n+ *          The {@link jdk.javadoc.internal.doclets.toolkit toolkit} package provides\n+ *          support for a format-neutral\n+ *          {@linkplain jdk.javadoc.internal.doclets.toolkit.AbstractDoclet abstract doclet},\n+ *          which uses\n+ *          {@linkplain jdk.javadoc.internal.doclets.toolkit.builders.AbstractBuilder builders}\n+ *          to generate pages of abstract\n+ *          {@linkplain jdk.javadoc.internal.doclets.toolkit.Content content}.\n+ *\n+ *          <p>The format-specific content for each page is provided by implementations\n+ *          of various <em>writer<\/em> interfaces, created by a format-specific\n+ *          {@linkplain jdk.javadoc.internal.doclets.toolkit.WriterFactory writer factory}.\n+ *\n+ *          <p>The {@link jdk.javadoc.internal.doclets.toolkit.BaseConfiguration} provides\n+ *          configuration information that is relevant to all the generated pages.\n+ *          Some of the information is provided by abstract methods which are implemented\n+ *          in format-specific subtypes of the class.\n+ *\n+ *          <p>The toolkit layer also provides\n+ *          {@linkplain jdk.javadoc.internal.doclets.toolkit.util utility classes}\n+ *          used by this layer and by format-specific layers.\n+ *\n+ *          <p id=\"workarounds\">Generally, it is intended that doclets should use the\n+ *          {@link javax.lang.model Language Model API} to navigate the structure of a Java program,\n+ *          without needing to access any internal details of the underlying <em>javac<\/em> implementation.\n+ *          However, there are still some shortcomings of the Language Model API,\n+ *          and so it is still necessary to provide limited access to some of those internal details.\n+ *          Although not enforceable by the module system, by design the access to <em>javac<\/em>\n+ *          internal details by doclets based on {@code AbstractDoclet} is restricted to the aptly-named\n+ *          {@link jdk.javadoc.internal.doclets.toolkit.WorkArounds} class.\n+ *\n+ *        <dt>Other Doclets\n+ *        <dd><p>\n+ *          Doclets are obviously not required to use\n+ *          {@link jdk.javadoc.internal.doclets.toolkit.AbstractDoclet} and other classes in\n+ *          the toolkit layer. In times past, it was common to write doclets to analyze\n+ *          code using the then-current API as an early version of a Java language model.\n+ *          That old API has been replaced by the {@link javax.lang.model Language Model API},\n+ *          and tools that wish to use that API to analyze Java programs have a choice of\n+ *          how to invoke it, using the <em>javac<\/em> support for\n+ *          {@linkplain javax.annotation.processing annotation processing},\n+ *          or {@linkplain com.sun.source.util.Plugin plugins}, as well as doclets.\n+ *          Which is best for any application will depend of the circumstances, but\n+ *          if a tool does not need access to the documentation comments in a program,\n+ *          it is possible that one of the other invocation mechanisms will be more convenient.\n+ *\n+ *      <\/dl>\n+ *\n+ *   <dt>The Doclet Interface\n+ *   <dd><p>\n+ *     The {@linkplain jdk.javadoc.doclet Doclet API} is the interface layer between\n+ *     the <em>javadoc<\/em> tool and the code to process the elements specified to the tool.\n+ *\n+ *     <p>Above this layer, in any doclet, the code is expected to use the\n+ *     {@linkplain javax.lang.model Language Model API} to navigate around the specified\n+ *     elements, and\/or the {@linkplain com.sun.source.doctree DocTree API} to examine\n+ *     the corresponding documentation comments.\n+ *\n+ *   <dt>The <em>javadoc<\/em> Tool\n+ *   <dd><p>\n+ *       After reading the command-line options, the tool uses a modified <em>javac<\/em>\n+ *       front end to read the necessary files and thus instantiate the\n+ *       {@linkplain javax.lang.model.element.Element elements} to be made available to\n+ *       the doclet that will be used to process them.\n+ *\n+ *       The tool uses an internal feature of the <em>javac<\/em> architecture, which\n+ *       allows various components to be replaced by subtypes with modified behavior.\n+ *       This is done by pre-registering the desired components in the <em>javac<\/em>\n+ *       {@code Context}.\n+ *       The tool uses this mechanism to do the following:\n+ *       <ul>\n+ *         <li>although source files are parsed in their entirety, the\n+ *           content of method bodies is quickly discarded as unnecessary;\n+ *         <li>the class reader is updated to handle {@code package.html}\n+ *           files in any package directories that are read; and\n+ *         <li>the compilation pipeline for each source file is terminated\n+ *           after the <em>parse<\/em> and <em>enter<\/em> phases, meaning that\n+ *           the files are processed enough to instantiate the elements to\n+ *           be made available to the doclet, but no more.\n+ *       <\/ul>\n+ * <\/dl>\n@@ -44,1 +165,1 @@\n-package jdk.javadoc.internal;\n+package jdk.javadoc.internal;\n\\ No newline at end of file\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/package-info.java","additions":128,"deletions":7,"binary":false,"changes":135,"status":"modified"}]}