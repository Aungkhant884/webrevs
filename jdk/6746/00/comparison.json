{"files":[{"patch":"@@ -184,1 +184,0 @@\n-#ifndef PRODUCT\n@@ -214,1 +213,0 @@\n-#endif\n@@ -248,0 +246,1 @@\n+      tty->cr();\n@@ -265,1 +264,0 @@\n-#ifndef PRODUCT\n@@ -269,1 +267,0 @@\n-#endif\n@@ -286,1 +283,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -432,0 +429,1 @@\n+#ifndef PRODUCT\n@@ -435,0 +433,2 @@\n+#endif \/\/ !PRODUCT\n+\n@@ -731,1 +731,0 @@\n-#ifndef PRODUCT\n@@ -735,0 +734,1 @@\n+    tty->cr();\n@@ -736,1 +736,0 @@\n-#endif\n@@ -884,1 +883,1 @@\n-#endif \/* !PRODUCT *\/\n+#endif \/\/ !PRODUCT\n@@ -1411,0 +1410,1 @@\n+#ifndef PRODUCT\n@@ -1414,0 +1414,2 @@\n+#endif \/\/ !PRODUCT\n+\n@@ -1428,0 +1430,1 @@\n+#ifndef PRODUCT\n@@ -1435,0 +1438,1 @@\n+#endif \/\/ !PRODUCT\n@@ -1440,1 +1444,1 @@\n-#endif\n+#endif \/* !COMPILER2 *\/\n@@ -1498,2 +1502,18 @@\n-#ifndef PRODUCT\n-  if (PrintDeoptimizationDetails) {\n+  \/\/ Register map for next frame (used for stack crawl).  We capture\n+  \/\/ the state of the deopt'ing frame's caller.  Thus if we need to\n+  \/\/ stuff a C2I adapter we can properly fill in the callee-save\n+  \/\/ register locations.\n+  frame caller = fr.sender(reg_map);\n+  int frame_size = caller.sp() - fr.sp();\n+\n+  frame sender = caller;\n+\n+  \/\/ Since the Java thread being deoptimized will eventually adjust it's own stack,\n+  \/\/ the vframeArray containing the unpacking information is allocated in the C heap.\n+  \/\/ For Compiler1, the caller of the deoptimized frame is saved for use by unpack_frames().\n+  vframeArray* array = vframeArray::allocate(thread, frame_size, chunk, reg_map, sender, caller, fr, realloc_failures);\n+\n+  \/\/ Compare the vframeArray to the collected vframes\n+  assert(array->structural_compare(thread, chunk), \"just checking\");\n+\n+  if (TraceDeoptimization) {\n@@ -1508,1 +1528,1 @@\n-      vf->print_value_on(&st);\n+      st.print(\"(\" INTPTR_FORMAT \")\", p2i(vf));\n@@ -1519,4 +1539,0 @@\n-      if (Verbose) {\n-        vf->print_on(&st);\n-        st.cr();\n-      }\n@@ -1525,22 +1541,0 @@\n-  }\n-#endif\n-\n-  \/\/ Register map for next frame (used for stack crawl).  We capture\n-  \/\/ the state of the deopt'ing frame's caller.  Thus if we need to\n-  \/\/ stuff a C2I adapter we can properly fill in the callee-save\n-  \/\/ register locations.\n-  frame caller = fr.sender(reg_map);\n-  int frame_size = caller.sp() - fr.sp();\n-\n-  frame sender = caller;\n-\n-  \/\/ Since the Java thread being deoptimized will eventually adjust it's own stack,\n-  \/\/ the vframeArray containing the unpacking information is allocated in the C heap.\n-  \/\/ For Compiler1, the caller of the deoptimized frame is saved for use by unpack_frames().\n-  vframeArray* array = vframeArray::allocate(thread, frame_size, chunk, reg_map, sender, caller, fr, realloc_failures);\n-\n-  \/\/ Compare the vframeArray to the collected vframes\n-  assert(array->structural_compare(thread, chunk), \"just checking\");\n-\n-#ifndef PRODUCT\n-  if (PrintDeoptimizationDetails) {\n@@ -1548,0 +1542,1 @@\n+    tty->cr();\n@@ -1549,1 +1544,0 @@\n-#endif \/\/ PRODUCT\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":33,"deletions":39,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+  st->print_cr(\")\");\n@@ -447,2 +448,0 @@\n-    st->print_cr(\")\");\n-    st->print(\"(\");\n@@ -453,2 +452,0 @@\n-    st->print_cr(\")\");\n-    st->print(\"(\");\n@@ -464,1 +461,0 @@\n-  st->print_cr(\")\");\n@@ -469,1 +465,0 @@\n-    st->cr();\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -611,1 +611,0 @@\n-\n@@ -617,1 +616,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -327,0 +327,10 @@\n+  if (TraceDeoptimization) {\n+    method()->print_value();\n+    Bytecodes::Code code = Bytecodes::java_code_at(method(), bcp);\n+    int bci = method()->bci_from(bcp);\n+    tty->print(\" - %s\", Bytecodes::name(code));\n+    tty->print(\" @ bci %d \", bci);\n+    tty->print_cr(\"sp = \" PTR_FORMAT, p2i(iframe()->sp()));\n+  }\n+\n+#ifndef PRODUCT\n@@ -330,0 +340,2 @@\n+#endif \/\/ !PRODUCT\n+\n@@ -346,1 +358,1 @@\n-          tty->print_cr(\"Reconstructed expression %d (INT): %d\", i, (int)(*addr));\n+          tty->print_cr(\" - Reconstructed expression %d (INT): %d\", i, (int)(*addr));\n@@ -348,1 +360,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -354,1 +366,1 @@\n-          tty->print(\"Reconstructed expression %d (OBJECT): \", i);\n+          tty->print(\" - Reconstructed expression %d (OBJECT): \", i);\n@@ -363,1 +375,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -374,0 +386,5 @@\n+#ifndef PRODUCT\n+  if (PrintDeoptimizationDetails) {\n+    tty->print_cr(\"Locals size: %d\", locals()->size());\n+  }\n+#endif \/\/ !PRODUCT\n@@ -385,1 +402,1 @@\n-          tty->print_cr(\"Reconstructed local %d (INT): %d\", i, (int)(*addr));\n+          tty->print_cr(\" - Reconstructed local %d (INT): %d\", i, (int)(*addr));\n@@ -387,1 +404,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -393,1 +410,1 @@\n-          tty->print(\"Reconstructed local %d (OBJECT): \", i);\n+          tty->print(\" - Reconstructed local %d (OBJECT): \", i);\n@@ -402,1 +419,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -446,1 +463,1 @@\n-    tty->print_cr(\"[%d Interpreted Frame]\", ++unpack_counter);\n+    tty->print_cr(\"[%d. Interpreted Frame]\", ++unpack_counter);\n@@ -451,5 +468,1 @@\n-\n-    tty->print_cr(\"locals size     %d\", locals()->size());\n-    tty->print_cr(\"expression size %d\", expressions()->size());\n-\n-    method()->print_value();\n+    if (WizardMode && Verbose) method()->print_codes();\n@@ -457,9 +470,0 @@\n-    \/\/ method()->print_codes();\n-  } else if (TraceDeoptimization) {\n-    tty->print(\"     \");\n-    method()->print_value();\n-    Bytecodes::Code code = Bytecodes::java_code_at(method(), bcp);\n-    int bci = method()->bci_from(bcp);\n-    tty->print(\" - %s\", Bytecodes::name(code));\n-    tty->print(\" @ bci %d \", bci);\n-    tty->print_cr(\"sp = \" PTR_FORMAT, p2i(iframe()->sp()));\n@@ -467,1 +471,1 @@\n-#endif \/\/ PRODUCT\n+#endif \/\/ !PRODUCT\n@@ -644,1 +648,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n@@ -676,1 +680,1 @@\n-#endif\n+#endif \/\/ !PRODUCT\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":30,"deletions":26,"binary":false,"changes":56,"status":"modified"}]}