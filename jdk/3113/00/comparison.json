{"files":[{"patch":"@@ -278,1 +278,1 @@\n-            if (scheme.equalsIgnoreCase(\"Basic\")) {\n+            if (scheme != null && scheme.equalsIgnoreCase(\"Basic\")) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AuthenticationFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8263899\n+ * @summary HttpClient throws NPE in AuthenticationFilter when parsing www-authenticate head\n+ *\n+ * @run main\/othervm EmptyAuthenticate\n+ *\/\n+import com.sun.net.httpserver.HttpServer;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+public class EmptyAuthenticate {\n+\n+    public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException {\n+        int port = 8000;\n+\n+        \/\/start server:\n+        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);\n+        server.createContext(\"\/\", exchange -> {\n+            String response = \"test body\";\n+            exchange.getResponseHeaders().add(\"www-authenticate\", \"\"); \/\/this empty header will make the HttpClient crash\n+            exchange.sendResponseHeaders(401, response.length());\n+            OutputStream os = exchange.getResponseBody();\n+            os.write(response.getBytes());\n+            os.close();\n+        });\n+        server.start();\n+\n+        HttpResponse<String> response = null;\n+        \/\/run client:\n+        try {\n+            HttpClient httpClient = HttpClient.newHttpClient();\n+            HttpRequest request = HttpRequest.newBuilder(new URI(\"http:\/\/localhost:\" + port + \"\/\")).GET().build();\n+            \/\/this line will throw NPE (wrapped by IOException) when parsing empty www-authenticate response header in AuthenticationFilter:\n+            response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n+            boolean ok = !response.headers().firstValue(\"WWW-Authenticate\").isEmpty();\n+            if (!ok) {\n+                throw new RuntimeException(\"WWW-Authenicate missing\");\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Test failed\");\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/EmptyAuthenticate.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}