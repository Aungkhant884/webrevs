{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-                    to -= TimeUnit.MILLISECONDS.convert(adjust, TimeUnit.NANOSECONDS);\n+                    to -= TimeUnit.NANOSECONDS.toMillis(adjust);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-                    to -= TimeUnit.MILLISECONDS.convert(adjust, TimeUnit.NANOSECONDS);\n+                    to -= TimeUnit.NANOSECONDS.toMillis(adjust);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueueSelectorImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-                return TimeUnit.MILLISECONDS.convert(ldt.toEpochSecond(\n-                        ZoneId.systemDefault().getRules().getOffset(ldt)), TimeUnit.SECONDS);\n+                return TimeUnit.SECONDS.toMillis(ldt.toEpochSecond(\n+                        ZoneId.systemDefault().getRules().getOffset(ldt)));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1227,1 +1227,1 @@\n-        long nanos = NANOSECONDS.convert(timeout, unit);\n+        long nanos = unit.toNanos(timeout);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-                    to -= TimeUnit.MILLISECONDS.convert(adjust, TimeUnit.NANOSECONDS);\n+                    to -= TimeUnit.NANOSECONDS.toMillis(adjust);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PollSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n@@ -30,1 +32,1 @@\n-import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n@@ -316,1 +318,1 @@\n-            return NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 2).trim()), MICROSECONDS);\n+            return MICROSECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 2).trim()));\n@@ -319,1 +321,1 @@\n-            return NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 2).trim()), MILLISECONDS);\n+            return MILLISECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 2).trim()));\n@@ -322,1 +324,1 @@\n-            return NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 1).trim()), SECONDS);\n+            return SECONDS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n@@ -325,1 +327,1 @@\n-            return 60 * NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 1).trim()), SECONDS);\n+            return MINUTES.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n@@ -328,1 +330,1 @@\n-            return 60 * 60 * NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 1).trim()), SECONDS);\n+            return HOURS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n@@ -331,1 +333,1 @@\n-            return 24 * 60 * 60 * NANOSECONDS.convert(Long.parseLong(s.substring(0, s.length() - 1).trim()), SECONDS);\n+            return DAYS.toNanos(Long.parseLong(s.substring(0, s.length() - 1).trim()));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,2 +217,2 @@\n-                return TimeUnit.MILLISECONDS.convert(ldt.toEpochSecond(\n-                        ZoneId.systemDefault().getRules().getOffset(ldt)), TimeUnit.SECONDS);\n+                return TimeUnit.SECONDS.toMillis(ldt.toEpochSecond(\n+                        ZoneId.systemDefault().getRules().getOffset(ldt)));\n@@ -256,3 +256,3 @@\n-    public static final long winToJavaTime(long wtime) {\n-        return TimeUnit.MILLISECONDS.convert(\n-               wtime \/ 10 + WINDOWS_EPOCH_IN_MICROSECONDS, TimeUnit.MICROSECONDS);\n+    public static long winToJavaTime(long wtime) {\n+        return TimeUnit.MICROSECONDS.toMillis(\n+               wtime \/ 10 + WINDOWS_EPOCH_IN_MICROSECONDS);\n@@ -261,2 +261,2 @@\n-    public static final long javaToWinTime(long time) {\n-        return (TimeUnit.MICROSECONDS.convert(time, TimeUnit.MILLISECONDS)\n+    public static long javaToWinTime(long time) {\n+        return (TimeUnit.MILLISECONDS.toMicros(time)\n@@ -266,2 +266,2 @@\n-    public static final long unixToJavaTime(long utime) {\n-        return TimeUnit.MILLISECONDS.convert(utime, TimeUnit.SECONDS);\n+    public static long unixToJavaTime(long utime) {\n+        return TimeUnit.SECONDS.toMillis(utime);\n@@ -270,2 +270,2 @@\n-    public static final long javaToUnixTime(long time) {\n-        return TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS);\n+    public static long javaToUnixTime(long time) {\n+        return TimeUnit.MILLISECONDS.toSeconds(time);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipUtils.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}