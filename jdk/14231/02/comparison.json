{"files":[{"patch":"@@ -548,1 +548,1 @@\n-    if (EnableJVMCI) {\n+    if (EnableJVMCI || UseJVMCICompiler) {\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+  JVMCI_FLAG_CHECKED(UseGraalJIT)\n@@ -167,1 +168,1 @@\n-bool JVMCIGlobals::enable_jvmci_product_mode(JVMFlagOrigin origin) {\n+bool JVMCIGlobals::enable_jvmci_product_mode(JVMFlagOrigin origin, bool use_graal_jit) {\n@@ -204,0 +205,6 @@\n+  if (use_graal_jit) {\n+    JVMFlag *useGraalJITFlag = JVMFlag::find_flag(\"UseGraalJIT\");\n+    if (JVMFlagAccess::set_bool(useGraalJITFlag, &value, origin) != JVMFlag::SUCCESS) {\n+      return false;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,0 +51,5 @@\n+  product(bool, UseGraalJIT, false, EXPERIMENTAL,                           \\\n+          \"Select the Graal JVMCI compiler. This is an alias for: \"         \\\n+          \"  -XX:+EnableJVMCIProduct \"                                      \\\n+          \"  -Djvmci.Compiler=graal \")                                      \\\n+                                                                            \\\n@@ -188,1 +193,1 @@\n-  static bool enable_jvmci_product_mode(JVMFlagOrigin);\n+  static bool enable_jvmci_product_mode(JVMFlagOrigin origin, bool use_graal_jit);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2830,1 +2830,1 @@\n-    } else if (match_option(option, \"-XX:-EnableJVMCIProduct\")) {\n+    } else if (match_option(option, \"-XX:-EnableJVMCIProduct\") || match_option(option, \"-XX:-UseGraalJIT\")) {\n@@ -2833,1 +2833,1 @@\n-                  \"-XX:-EnableJVMCIProduct cannot come after -XX:+EnableJVMCIProduct\\n\");\n+                  \"-XX:-EnableJVMCIProduct or -XX:-UseGraalJIT cannot come after -XX:+EnableJVMCIProduct or -XX:+UseGraalJIT\\n\");\n@@ -2836,2 +2836,16 @@\n-    } else if (match_option(option, \"-XX:+EnableJVMCIProduct\")) {\n-      \/\/ Just continue, since \"-XX:+EnableJVMCIProduct\" has been specified before\n+    } else if (match_option(option, \"-XX:+EnableJVMCIProduct\") || match_option(option, \"-XX:+UseGraalJIT\")) {\n+      bool use_graal_jit = match_option(option, \"-XX:+UseGraalJIT\");\n+      if (use_graal_jit) {\n+        const char* jvmci_compiler = get_property(\"jvmci.Compiler\");\n+        if (jvmci_compiler != nullptr) {\n+          if (strncmp(jvmci_compiler, \"graal\", strlen(\"graal\")) != 0) {\n+            jio_fprintf(defaultStream::error_stream(),\n+              \"Value of jvmci.Compiler incompatible with +UseGraalJIT: %s\", jvmci_compiler);\n+            return JNI_ERR;\n+          }\n+        } else if (!add_property(\"jvmci.Compiler=graal\")) {\n+            return JNI_ENOMEM;\n+        }\n+      }\n+\n+      \/\/ Just continue, since \"-XX:+EnableJVMCIProduct\" or \"-XX:+UseGraalJIT\" has been specified before\n@@ -2844,1 +2858,1 @@\n-        if (!JVMCIGlobals::enable_jvmci_product_mode(origin)) {\n+        if (!JVMCIGlobals::enable_jvmci_product_mode(origin, use_graal_jit)) {\n@@ -2851,1 +2865,1 @@\n-      else if (!process_argument(\"EnableJVMCIProduct\", args->ignoreUnrecognized, origin)) {\n+      else if (!process_argument(use_graal_jit ? \"UseGraalJIT\" : \"EnableJVMCIProduct\", args->ignoreUnrecognized, origin)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,8 @@\n+        if (args.length != 0) {\n+            \/\/ Called as subprocess. Print system properties named by\n+            \/\/ `args` and then exit.\n+            for (String arg : args) {\n+                System.out.printf(\"%s=%s%n\", arg, System.getProperty(arg));\n+            }\n+            return;\n+        }\n@@ -70,1 +78,1 @@\n-            new Expectation(\"EnableJVMCIProduct\", \"true\", \"command line\"),\n+            new Expectation(\"EnableJVMCIProduct\", \"true\", \"(?:command line|jimage)\"),\n@@ -76,12 +84,21 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+EnableJVMCIProduct\", \"-XX:-UnlockExperimentalVMOptions\",\n-            explicitFlag,\n-            \"-XX:+PrintFlagsFinal\", \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        for (Expectation expectation : expectations) {\n-            output.stdoutShouldMatch(expectation.pattern);\n-        }\n-        if (output.getExitValue() != 0) {\n-            \/\/ This should only happen when JVMCI compilation is requested and the VM has no\n-            \/\/ JVMCI compiler (e.g. Graal is not included in the build)\n-            output.stdoutShouldMatch(\"No JVMCI compiler found\");\n+        String[] flags = {\"-XX:+EnableJVMCIProduct\", \"-XX:+UseGraalJIT\"};\n+        String cwd = System.getProperty(\"user.dir\");\n+        for (String flag : flags) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+UnlockExperimentalVMOptions\", flag, \"-XX:-UnlockExperimentalVMOptions\",\n+                explicitFlag,\n+                \"-XX:+PrintFlagsFinal\",\n+                \"--class-path=\" + System.getProperty(\"java.class.path\"),\n+                \"TestEnableJVMCIProduct\", \"jvmci.Compiler\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            for (Expectation expectation : expectations) {\n+                output.stdoutShouldMatch(expectation.pattern);\n+            }\n+            if (flag.equals(\"-XX:+UseGraalJIT\")) {\n+                output.shouldContain(\"jvmci.Compiler=graal\");\n+            }\n+            if (output.getExitValue() != 0) {\n+                \/\/ This should only happen when JVMCI compilation is requested and the VM has no\n+                \/\/ JVMCI compiler (e.g. Graal is not included in the build)\n+                output.stdoutShouldMatch(\"No JVMCI compiler found\");\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestEnableJVMCIProduct.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"}]}