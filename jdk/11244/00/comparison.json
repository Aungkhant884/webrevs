{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,24 @@\n-ResourceHashtable<uintptr_t, ResolutionErrorEntry*, 107, AnyObj::C_HEAP, mtClass> _resolution_error_table;\n+class ResolutionErrorKey {\n+  ConstantPool* _cpool;\n+  int           _index;\n+\n+ public:\n+  ResolutionErrorKey(ConstantPool* cpool, int index) : _cpool(cpool), _index(index) {\n+    assert(_index > 0, \"should be already encoded or otherwise greater than zero\");\n+  }\n+\n+  ConstantPool* cpool() const { return _cpool; }\n+\n+  static unsigned hash(const ResolutionErrorKey& key) {\n+    Symbol* name = key._cpool->pool_holder()->name();\n+    return (unsigned int)(name->identity_hash() ^ key._index);\n+  }\n+\n+  static bool equals(const ResolutionErrorKey& l, const ResolutionErrorKey& r) {\n+    return l._cpool == r._cpool && l._index == r._index;\n+  }\n+};\n+\n+ResourceHashtable<ResolutionErrorKey, ResolutionErrorEntry*, 107, AnyObj::C_HEAP, mtClass,\n+                  ResolutionErrorKey::hash,\n+                  ResolutionErrorKey::equals> _resolution_error_table;\n@@ -46,2 +69,3 @@\n-  ResolutionErrorEntry* entry = new ResolutionErrorEntry(pool(), cp_index, error, message, cause, cause_msg);\n-  _resolution_error_table.put(convert_key(pool, cp_index), entry);\n+  ResolutionErrorKey key(pool(), cp_index);\n+  ResolutionErrorEntry *entry = new ResolutionErrorEntry(error, message, cause, cause_msg);\n+  _resolution_error_table.put(key, entry);\n@@ -57,2 +81,3 @@\n-  ResolutionErrorEntry* entry = new ResolutionErrorEntry(pool(), cp_index, message);\n-  _resolution_error_table.put(convert_key(pool, cp_index), entry);\n+  ResolutionErrorKey key(pool(), cp_index);\n+  ResolutionErrorEntry *entry = new ResolutionErrorEntry(message);\n+  _resolution_error_table.put(key, entry);\n@@ -64,7 +89,3 @@\n-  ResolutionErrorEntry** entry = _resolution_error_table.get(convert_key(pool, cp_index));\n-  if (entry != nullptr) {\n-    return *entry;\n-  } else {\n-    return nullptr;\n-  }\n-\n+  ResolutionErrorKey key(pool(), cp_index);\n+  ResolutionErrorEntry** entry = _resolution_error_table.get(key);\n+  return entry == nullptr ? nullptr : *entry;\n@@ -73,1 +94,1 @@\n-ResolutionErrorEntry::ResolutionErrorEntry(ConstantPool* pool, int cp_index, Symbol* error, Symbol* message,\n+ResolutionErrorEntry::ResolutionErrorEntry(Symbol* error, Symbol* message,\n@@ -75,1 +96,0 @@\n-        _cp_index(cp_index),\n@@ -80,1 +100,0 @@\n-        _pool(pool),\n@@ -83,15 +102,4 @@\n-  if (_error != nullptr) {\n-    _error->increment_refcount();\n-  }\n-\n-  if (_message != nullptr) {\n-    _message->increment_refcount();\n-  }\n-\n-  if (_cause != nullptr) {\n-    _cause->increment_refcount();\n-  }\n-\n-  if (_cause_msg != nullptr) {\n-    _cause_msg->increment_refcount();\n-  }\n+  Symbol::maybe_increment_refcount(_error);\n+  Symbol::maybe_increment_refcount(_message);\n+  Symbol::maybe_increment_refcount(_cause);\n+  Symbol::maybe_increment_refcount(_cause_msg);\n@@ -102,12 +110,5 @@\n-  if (error() != NULL) {\n-    error()->decrement_refcount();\n-  }\n-  if (message() != NULL) {\n-    message()->decrement_refcount();\n-  }\n-  if (cause() != NULL) {\n-    cause()->decrement_refcount();\n-  }\n-  if (cause_msg() != NULL) {\n-    cause_msg()->decrement_refcount();\n-  }\n+  Symbol::maybe_decrement_refcount(_error);\n+  Symbol::maybe_decrement_refcount(_message);\n+  Symbol::maybe_decrement_refcount(_cause);\n+  Symbol::maybe_decrement_refcount(_cause_msg);\n+\n@@ -119,2 +120,1 @@\n-class ResolutionErrorDeleteIterate : StackObj{\n-private:\n+class ResolutionErrorDeleteIterate : StackObj {\n@@ -127,2 +127,2 @@\n-  bool do_entry(uintptr_t key, ResolutionErrorEntry* value){\n-    if (value -> pool() == p) {\n+  bool do_entry(const ResolutionErrorKey& key, ResolutionErrorEntry* value){\n+    if (key.cpool() == p) {\n@@ -145,1 +145,1 @@\n-class ResolutionIteratePurgeErrors : StackObj{\n+class ResolutionIteratePurgeErrors : StackObj {\n@@ -147,2 +147,2 @@\n-  bool do_entry(uintptr_t key, ResolutionErrorEntry* value) {\n-    ConstantPool* pool = value -> pool();\n+  bool do_entry(const ResolutionErrorKey& key, ResolutionErrorEntry* value){\n+    ConstantPool* pool = key.cpool();\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":50,"deletions":50,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,6 +35,0 @@\n-\/\/ This value is added to the cpCache index of an invokedynamic instruction when\n-\/\/ storing the resolution error resulting from that invokedynamic instruction.\n-\/\/ This prevents issues where the cpCache index is the same as the constant pool\n-\/\/ index of another entry in the table.\n-const int CPCACHE_INDEX_MANGLE_VALUE = 1000000;\n-\n@@ -44,1 +38,0 @@\n-\n@@ -46,1 +39,1 @@\n-                 Symbol* cause, Symbol* cause_msg);\n+                        Symbol* cause, Symbol* cause_msg);\n@@ -59,0 +52,6 @@\n+  \/\/ This value is added to the cpCache index of an invokedynamic instruction when\n+  \/\/ storing the resolution error resulting from that invokedynamic instruction.\n+  \/\/ This prevents issues where the cpCache index is the same as the constant pool\n+  \/\/ index of another entry in the table.\n+  static const int CPCACHE_INDEX_MANGLE_VALUE = 1000000;\n+\n@@ -66,4 +65,0 @@\n-\n-  static uintptr_t convert_key(const constantPoolHandle& pool, int cp_index) {\n-    return (uintptr_t) (pool() + cp_index);\n-  }\n@@ -75,1 +70,0 @@\n-  int               _cp_index;\n@@ -80,1 +74,0 @@\n-  ConstantPool*     _pool;\n@@ -83,1 +76,1 @@\n- public:\n+  NONCOPYABLE(ResolutionErrorEntry);\n@@ -85,2 +78,2 @@\n-    ResolutionErrorEntry(ConstantPool* pool, int cp_index, Symbol* error, Symbol* message,\n-      Symbol* cause, Symbol* cause_msg);\n+ public:\n+    ResolutionErrorEntry(Symbol* error, Symbol* message, Symbol* cause, Symbol* cause_msg);\n@@ -88,2 +81,1 @@\n-    ResolutionErrorEntry(ConstantPool* pool, int cp_index, const char* message):\n-        _cp_index(cp_index),\n+    ResolutionErrorEntry(const char* message):\n@@ -94,1 +86,0 @@\n-        _pool(pool),\n@@ -104,2 +95,0 @@\n-  ConstantPool*      pool() const               { return _pool; }\n-  int                cp_index() const           { return _cp_index; }\n@@ -111,1 +100,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.hpp","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"}]}