{"files":[{"patch":"@@ -719,1 +719,3 @@\n-  entry->fill_in(info.field_holder(), info.offset(), (u2)info.index(), (u1)state, (u1)get_code, (u1)put_code);\n+  entry->fill_in(info.field_holder(), info.offset(),\n+                 checked_cast<u2>(info.index()), checked_cast<u1>(state),\n+                 static_cast<u1>(get_code), static_cast<u1>(put_code));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-    Bytes::put_native_u2(p, field_entry_index);\n+    Bytes::put_native_u2(p, checked_cast<u2>(field_entry_index));\n@@ -192,1 +192,1 @@\n-    Bytes::put_Java_u2(p, pool_index);\n+    Bytes::put_Java_u2(p, checked_cast<u2>(pool_index));\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  u1 _tos_state;                      \/\/ TOS state\n+  u1 _tos_state;                \/\/ TOS state\n@@ -104,3 +104,5 @@\n-  void set_flags(bool is_final, bool is_volatile) {\n-    u1 new_flags = (static_cast<u1>(is_final) << static_cast<u1>(is_final_shift)) | static_cast<u1>(is_volatile);\n-    _flags = new_flags;\n+  void set_flags(bool is_final_flag, bool is_volatile_flag) {\n+    int new_flags = (is_final_flag << is_final_shift) | static_cast<int>(is_volatile_flag);\n+    _flags = checked_cast<u1>(new_flags);\n+    assert(is_final() == is_final_flag, \"Must be\");\n+    assert(is_volatile() == is_volatile_flag, \"Must be\");\n@@ -119,1 +121,1 @@\n-  void fill_in(InstanceKlass* klass, intx offset, int index, int tos_state, u1 b1, u1 b2) {\n+  void fill_in(InstanceKlass* klass, int offset, u2 index, u1 tos_state, u1 b1, u1 b2) {\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}