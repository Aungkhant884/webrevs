{"files":[{"patch":"@@ -246,2 +246,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Supported toolchain<\/th>\n+<th>Operating system<\/th>\n+<th>Supported toolchain<\/th>\n@@ -252,2 +252,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc, clang<\/td>\n+<td>Linux<\/td>\n+<td>gcc, clang<\/td>\n@@ -256,2 +256,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode (using clang)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode (using clang)<\/td>\n@@ -260,2 +260,2 @@\n-<td style=\"text-align: left;\">AIX<\/td>\n-<td style=\"text-align: left;\">IBM XL C\/C++<\/td>\n+<td>AIX<\/td>\n+<td>IBM XL C\/C++<\/td>\n@@ -264,2 +264,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio<\/td>\n@@ -273,2 +273,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Toolchain version<\/th>\n+<th>Operating system<\/th>\n+<th>Toolchain version<\/th>\n@@ -279,2 +279,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc 11.2.0<\/td>\n+<td>Linux<\/td>\n+<td>gcc 11.2.0<\/td>\n@@ -283,2 +283,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode 10.1 (using clang 10.0.0)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode 10.1 (using clang 10.0.0)<\/td>\n@@ -287,2 +287,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio 2022 update 17.1.0<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio 2022 update 17.1.0<\/td>\n@@ -302,1 +302,1 @@\n-<p>You will need the Xcode command lines developers tools to be able to build the JDK. (Actually, <em>only<\/em> the command lines tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n+<p>You will need the Xcode command line developer tools to be able to build the JDK. (Actually, <em>only<\/em> the command line tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n@@ -304,1 +304,1 @@\n-<p>It is advisable to keep an older version of Xcode for building the JDK when updating Xcode. This <a href=\"http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html\">blog page<\/a> has good suggestions on managing multiple Xcode versions. To use a specific version of Xcode, use <code>xcode-select -s<\/code> before running <code>configure<\/code>, or use <code>--with-toolchain-path<\/code> to point to the version of Xcode to use, e.g. <code>configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin<\/code><\/p>\n+<p>When updating Xcode, it is advisable to keep an older version for building the JDK. To use a specific version of Xcode you have multiple options: * Use <code>xcode-select -s<\/code> before running <code>configure<\/code>, e.g. <code>xcode-select -s \/Applications\/Xcode13.1.app<\/code>. The drawback is that the setting is system wide and you may have to revert it after an OpenJDK build. * Use configure option <code>--with-xcode-path<\/code>, e.g. <code>configure --with-xcode-path=\/Applications\/Xcode13.1.app<\/code> This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by <code>xcode-select<\/code>.<\/p>\n","filename":"doc\/building.html","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}