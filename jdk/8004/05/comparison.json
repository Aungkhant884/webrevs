{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -28,1 +30,1 @@\n- * @run main\/manual=yesno PrintGlyphVectorTest\n+ * @run main\/manual PrintGlyphVectorTest\n@@ -31,6 +33,19 @@\n-import java.io.*;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Label;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n@@ -40,0 +55,13 @@\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Note: You must have a printer installed for this test.\n+            If printer is not available, then 'PRINT' button will\n+            be in disabled state then press 'Pass' button.\n+\n+            Press the PRINT button on the 'Test PrintGlyphVector' frame\n+            and press OK\/print button on the print dialog.\n+\n+            Retrieve the output and compare the printed and on-screen\n+            text to confirm that in both cases the text is aligned and\n+            the boxes are around the text, not offset from the text.\n+            \"\"\";\n+\n@@ -49,3 +77,2 @@\n-\n-        float x = 50f,\n-              y = 50f;\n+        float x = 50f;\n+        float y = 50f;\n@@ -72,3 +99,0 @@\n-\n-\n-\n@@ -77,5 +101,5 @@\n-     public void paint(Graphics g) {\n-       g.setColor(Color.white);\n-       g.fillRect(0,0,getSize().width, getSize().height);\n-       drawGVs(g);\n-     }\n+    public void paint(Graphics g) {\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, getSize().width, getSize().height);\n+        drawGVs(g);\n+    }\n@@ -100,0 +124,12 @@\n+    private static void createTestUI() {\n+        Frame f = new Frame(\"Test PrintGlyphVector\");\n+        PrintGlyphVectorTest pvt = new PrintGlyphVectorTest();\n+        f.add(pvt, BorderLayout.CENTER);\n+\n+        Button printButton = new Button(\"PRINT\");\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        if (pj == null || pj.getPrintService() == null) {\n+            System.out.println(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+            PassFailJFrame.forcePass();\n+        }\n@@ -101,9 +137,24 @@\n-    public static void main(String arg[]) throws Exception {\n-\n-       Frame f = new Frame();\n-       PrintGlyphVectorTest pvt = new PrintGlyphVectorTest();\n-       f.add(\"Center\", pvt);\n-       f.add(\"South\", new PrintInstructions());\n-       f.pack();\n-       f.show();\n-\n+        printButton.addActionListener((e) -> {\n+            pj.setPrintable(new PrintGlyphVectorTest());\n+            if (pj.printDialog()) {\n+                try {\n+                    pj.print();\n+                } catch (PrinterException ex) {\n+                    throw new RuntimeException(ex.getMessage());\n+                }\n+            } else {\n+                throw new RuntimeException(\"Test failed : \"\n+                        + \"User selected 'Cancel' button on the print dialog\");\n+            }\n+        });\n+\n+        f.add(printButton, BorderLayout.SOUTH);\n+        f.pack();\n+        f.setVisible(true);\n+\n+        \/\/ add the test frame to dispose\n+        PassFailJFrame.addTestFrame(f);\n+\n+        \/\/ Arrange the test instruction frame and test frame side by side\n+        PassFailJFrame.positionTestFrame(f, PassFailJFrame.Position.HORIZONTAL);\n+    }\n@@ -111,0 +162,4 @@\n+    public static void main(String[] arg) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(INSTRUCTIONS);\n+        createTestUI();\n+        passFailJFrame.awaitAndCheck();\n@@ -114,37 +169,0 @@\n-class PrintInstructions extends Panel implements ActionListener {\n-\n-   static final String INSTRUCTIONS =\n-       \"You must have a printer installed for this test.\\n\" +\n-       \"Press the PRINT button below and OK the print dialog\\n\" +\n-       \"Retrieve the output and compare the printed and on-screen text\\n\" +\n-       \" to confirm that in both cases the text is aligned and the boxes\\n\" +\n-       \"are around the text, not offset from the text.\";\n-\n-  PrintInstructions() {\n-\n-     setLayout(new GridLayout(2,1));\n-     TextArea t = new TextArea(INSTRUCTIONS, 8, 80);\n-     add(t);\n-     Button b = new Button(\"PRINT\");\n-     b.setFont(new Font(\"Dialog\", Font.BOLD, 30));\n-     b.addActionListener(this);\n-     add(b);\n-  }\n-\n-  public void actionPerformed(ActionEvent e) {\n-       PrinterJob pj = PrinterJob.getPrinterJob();\n-       if (pj == null ||\n-           pj.getPrintService() == null ||\n-           !pj.printDialog()) {\n-           return;\n-       }\n-\n-       pj.setPrintable(new PrintGlyphVectorTest());\n-       try {\n-           pj.print();\n-       } catch (PrinterException ex) {\n-           System.err.println(ex);\n-       }\n-  }\n-\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintGlyphVectorTest.java","additions":83,"deletions":65,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+    private static final int ROWS = 10;\n+    private static final int COLUMNS = 40;\n+    private static final long TEST_TIMEOUT = 5;\n+    private static final String TITLE = \"Test Instruction Frame\";\n@@ -60,0 +64,16 @@\n+    public PassFailJFrame(String instructions) throws InterruptedException,\n+            InvocationTargetException {\n+        this(instructions, TEST_TIMEOUT);\n+    }\n+\n+    public PassFailJFrame(String instructions, long testTimeOut) throws\n+            InterruptedException, InvocationTargetException {\n+        this(TITLE, instructions, testTimeOut);\n+    }\n+\n+    public PassFailJFrame(String title, String instructions,\n+                          long testTimeOut) throws InterruptedException,\n+            InvocationTargetException {\n+        this(title, instructions, testTimeOut, ROWS, COLUMNS);\n+    }\n+\n@@ -69,1 +89,3 @@\n-     * @param instructions         specified instruction that user should follow.\n+     * @param instructions         instruction for the tester on how to test and what\n+     *                             is expected (pass) and what is not expected (fail).\n+     * @param testTimeOutInMinutes test timeout where time is specified in minutes.\n@@ -74,5 +96,3 @@\n-     * @param testTimeOutInMinutes timeout of the test where time is specified in\n-     *                             minutes.\n-     * @throws HeadlessException         HeadlessException\n-     * @throws InterruptedException      exception thrown for invokeAndWait\n-     * @throws InvocationTargetException exception thrown for invokeAndWait\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException exception thrown while creating UI\n@@ -80,5 +100,3 @@\n-    public PassFailJFrame(String title, String instructions,\n-                          int rows, int columns,\n-                          int testTimeOutInMinutes) throws HeadlessException,\n-            InterruptedException, InvocationTargetException {\n-\n+    public PassFailJFrame(String title, String instructions, long testTimeOutInMinutes,\n+                          int rows, int columns) throws InterruptedException,\n+            InvocationTargetException {\n@@ -86,1 +104,1 @@\n-            createUI(title, instructions, rows, columns, testTimeOutInMinutes);\n+            createUI(title, instructions, testTimeOutInMinutes, rows, columns);\n@@ -88,2 +106,2 @@\n-            invokeAndWait(() -> createUI(title, instructions, rows, columns,\n-                    testTimeOutInMinutes));\n+            invokeAndWait(() -> createUI(title, instructions, testTimeOutInMinutes,\n+                    rows, columns));\n@@ -94,2 +112,1 @@\n-                                 int rows, int columns,\n-                                 int timeoutInMinutes) {\n+                                 long testTimeOutInMinutes, int rows, int columns) {\n@@ -102,1 +119,1 @@\n-        long testTimeout = TimeUnit.MINUTES.toMillis(timeoutInMinutes);\n+        long testTimeout = TimeUnit.MINUTES.toMillis(testTimeOutInMinutes);\n@@ -174,2 +191,3 @@\n-     * @throws InterruptedException      if the thread is interrupted\n-     * @throws InvocationTargetException exception thrown for invokeAndWait\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException exception thrown while creating UI\n@@ -275,0 +293,22 @@\n+\n+    \/**\n+     * Forcibly pass the test.\n+     * <p>The sample usage:\n+     * <pre><code>\n+     *      PrinterJob pj = PrinterJob.getPrinterJob();\n+     *      if (pj == null || pj.getPrintService() == null) {\n+     *          System.out.println(\"\"Printer not configured or available.\");\n+     *          PassFailJFrame.forcePass();\n+     *      }\n+     * <\/code><\/pre>\n+     *\/\n+    public static void forcePass() {\n+        latch.countDown();\n+    }\n+\n+    \/**\n+     *  Forcibly pass the test.\n+     *\/\n+    public static void forceFail() {\n+        latch.countDown();\n+    }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":59,"deletions":19,"binary":false,"changes":78,"status":"modified"}]}