{"files":[{"patch":"@@ -27,0 +27,2 @@\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -35,1 +37,0 @@\n-import java.awt.Dialog;\n@@ -41,2 +42,0 @@\n-import java.awt.Panel;\n-import java.awt.TextArea;\n@@ -51,2 +50,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n@@ -56,0 +53,10 @@\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Note: You must have a printer installed for this test.\n+            Press the PRINT button on the 'Test PrintGlyphVector' frame\n+            and press OK\/print button on the print dialog.\n+\n+            Retrieve the output and compare the printed and on-screen\n+            text to confirm that in both cases the text is aligned and\n+            the boxes are around the text, not offset from the text.\n+            \"\"\";\n+\n@@ -111,5 +118,2 @@\n-\n-    public static void main(String arg[]) throws Exception {\n-\n-        Frame f = new Frame();\n-        PrintInstructions printInstructions = new PrintInstructions(f);\n+    private static void createTestUI() {\n+        Frame f = new Frame(\"Test PrintGlyphVector\");\n@@ -117,5 +121,1 @@\n-        f.add(\"Center\", pvt);\n-        f.add(\"South\", printInstructions);\n-        f.setLocationRelativeTo(null);\n-        f.pack();\n-        f.setVisible(true);\n+        f.add(pvt, BorderLayout.CENTER);\n@@ -123,24 +123,0 @@\n-        printInstructions.awaitAndCheck();\n-    }\n-}\n-\n-class PrintInstructions extends Panel {\n-\n-    private final static CountDownLatch countDownLatch = new CountDownLatch(1);\n-    private Frame frame;\n-    private volatile boolean failed = false;\n-    private volatile String testFailedReason;\n-    static final String INSTRUCTIONS =\n-            \"You must have a printer installed for this test.\\n\" +\n-                    \"Press the PRINT button below and OK the print dialog\\n\" +\n-                    \"Retrieve the output and compare the printed and on-screen text\\n\" +\n-                    \" to confirm that in both cases the text is aligned and the boxes\\n\" +\n-                    \"are around the text, not offset from the text.\";\n-\n-    PrintInstructions(Frame frame) {\n-        this.frame = frame;\n-        setLayout(new BorderLayout());\n-        TextArea t = new TextArea(INSTRUCTIONS, 8, 80);\n-        add(t, BorderLayout.CENTER);\n-\n-        Panel buttonPanel = new Panel();\n@@ -148,21 +124,13 @@\n-        printButton.addActionListener((ae) -> showPrintDialog());\n-\n-        Button passButton = new Button(\"Pass\");\n-        passButton.addActionListener((ae) -> countDownLatch.countDown());\n-\n-        Button failButton = new Button(\"Fail\");\n-        failButton.addActionListener((ae) -> getFailureReason());\n-\n-        buttonPanel.add(printButton);\n-        buttonPanel.add(passButton);\n-        buttonPanel.add(failButton);\n-        add(buttonPanel, BorderLayout.SOUTH);\n-    }\n-\n-    private void showPrintDialog() {\n-        PrinterJob pj = PrinterJob.getPrinterJob();\n-        if (pj == null ||\n-                pj.getPrintService() == null ||\n-                !pj.printDialog()) {\n-            return;\n-        }\n+        printButton.addActionListener((e) -> {\n+            PrinterJob pj = PrinterJob.getPrinterJob();\n+            if (pj == null || pj.getPrintService() == null ||\n+                    !pj.printDialog()) {\n+                return;\n+            }\n+            pj.setPrintable(new PrintGlyphVectorTest());\n+            try {\n+                pj.print();\n+            } catch (PrinterException ex) {\n+                System.err.println(ex);\n+            }\n+        });\n@@ -170,7 +138,3 @@\n-        pj.setPrintable(new PrintGlyphVectorTest());\n-        try {\n-            pj.print();\n-        } catch (PrinterException ex) {\n-            System.err.println(ex);\n-        }\n-    }\n+        f.add(printButton, BorderLayout.SOUTH);\n+        f.pack();\n+        f.setVisible(true);\n@@ -178,3 +142,2 @@\n-    public void awaitAndCheck() throws InterruptedException {\n-        boolean timeoutHappened = !countDownLatch.await(5,\n-                TimeUnit.MINUTES);\n+        \/\/ add the test frame to dispose\n+        PassFailJFrame.addTestFrame(f);\n@@ -182,6 +145,2 @@\n-        if (timeoutHappened) {\n-            throw new RuntimeException(\"Test timed out!\");\n-        }\n-        if (failed) {\n-            throw new RuntimeException(\"Test failed! : \" + testFailedReason);\n-        }\n+        \/\/ Arrange the test instruction frame and test frame side by side\n+        PassFailJFrame.positionTestFrame(f, PassFailJFrame.Position.HORIZONTAL);\n@@ -190,21 +149,5 @@\n-    private void getFailureReason() {\n-        final Dialog dialog = new Dialog(this.frame);\n-        dialog.setTitle(\"Failure reason\");\n-\n-        Panel panel = new Panel(new BorderLayout());\n-        TextArea textArea = new TextArea(5, 40);\n-\n-        Button okButton = new Button(\"Ok\");\n-        okButton.addActionListener((ae) -> {\n-            testFailedReason = textArea.getText();\n-            dialog.dispose();\n-            failed = true;\n-            countDownLatch.countDown();\n-        });\n-\n-        panel.add(textArea, BorderLayout.CENTER);\n-        panel.add(okButton, BorderLayout.SOUTH);\n-        dialog.add(panel);\n-        dialog.setLocationRelativeTo(null);\n-        dialog.pack();\n-        dialog.setVisible(true);\n+    public static void main(String arg[]) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test Instruction\" +\n+                \"Frame\", INSTRUCTIONS, 10, 40, 5);\n+        createTestUI();\n+        passFailJFrame.awaitAndCheck();\n@@ -213,0 +156,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintGlyphVectorTest.java","additions":41,"deletions":97,"binary":false,"changes":138,"status":"modified"}]}