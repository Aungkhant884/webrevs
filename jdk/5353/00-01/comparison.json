{"files":[{"patch":"@@ -1836,17 +1836,12 @@\n-template<bool allow_concurrent_access>\n-static void touch_memory_at(volatile void* p);\n-\n-template<>\n-inline void touch_memory_at<false>(volatile void* p) {\n-  \/\/ When pretouching (concurrent access disallowed), writing a zero value\n-  \/\/ is sufficient.\n-  *reinterpret_cast<volatile char*>(p) = 0;\n-}\n-\n-template<>\n-inline void touch_memory_at<true>(volatile void* p) {\n-  assert(is_aligned(p, sizeof(int)), \"precondition\");\n-  \/\/ For a touch while other threads may be using the memory, an atomic add\n-  \/\/ of zero is used to perform a write operation without affecting the\n-  \/\/ value in memory.\n-  Atomic::add(reinterpret_cast<volatile int*>(p), 0, memory_order_relaxed);\n+static inline void touch_memory_at(volatile void* p, bool allow_concurrent_access) {\n+  if (allow_concurrent_access) {\n+    assert(is_aligned(p, sizeof(int)), \"precondition\");\n+    \/\/ For a touch while other threads may be using the memory, an atomic add\n+    \/\/ of zero is used to perform a write operation without affecting the\n+    \/\/ value in memory.\n+    Atomic::add(reinterpret_cast<volatile int*>(p), 0, memory_order_relaxed);\n+  } else {\n+    \/\/ When pretouching (concurrent access disallowed), writing a zero value\n+    \/\/ is sufficient.\n+    *reinterpret_cast<volatile char*>(p) = 0;\n+  }\n@@ -1855,2 +1850,2 @@\n-template<bool allow_concurrent_access>\n-static inline void touch_memory_impl(void* start, void* end, size_t page_size) {\n+static inline void touch_memory_impl(void* start, void* end, size_t page_size,\n+                                     bool allow_concurrent_access) {\n@@ -1861,1 +1856,1 @@\n-      touch_memory_at<allow_concurrent_access>(p);\n+      touch_memory_at(p, allow_concurrent_access);\n@@ -1864,1 +1859,1 @@\n-    touch_memory_at<allow_concurrent_access>(MAX2(start, last_page));\n+    touch_memory_at(MAX2(start, last_page), allow_concurrent_access);\n@@ -1870,1 +1865,1 @@\n-  touch_memory_impl<false>(start, end, page_size);\n+  touch_memory_impl(start, end, page_size, false \/* allow_concurrent_access *\/);\n@@ -1885,1 +1880,1 @@\n-    touch_memory_impl<true>(start, end, page_size);\n+    touch_memory_impl(start, end, page_size, true \/* allow_concurrent_access *\/);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"}]}