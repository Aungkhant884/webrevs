{"files":[{"patch":"@@ -1610,3 +1610,4 @@\n-     * In cases where {@code ClassLoader.registerAsParallelCapable} is called from a context where\n-     * there is no caller frame on the stack (e.g. when called directly\n-     * from a JNI attached thread), {@code IllegalCallerException} is thrown.\n+     * In cases where this method is called from a context where the caller is\n+     * not a subclass of {@code ClassLoader} or there is no caller frame on the\n+     * stack (e.g. when called directly from a JNI attached thread),\n+     * {@code IllegalCallerException} is thrown.\n@@ -1617,1 +1618,1 @@\n-     * @throws IllegalCallerException if there is no caller frame on the stack.\n+     * @throws IllegalCallerException if the caller is not a subclass of {@code ClassLoader}\n@@ -1625,5 +1626,1 @@\n-        final Class<?> caller = Reflection.getCallerClass();\n-        if (caller == null) {\n-            throw new IllegalCallerException(\"no caller frame\");\n-        }\n-        return registerAsParallelCapable(caller);\n+        return registerAsParallelCapable(Reflection.getCallerClass());\n@@ -1635,0 +1632,3 @@\n+        if ((caller == null) || !ClassLoader.class.isAssignableFrom(caller)) {\n+            throw new IllegalCallerException(caller + \" not a subclass of ClassLoader\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281000\n+ * @summary Test ClassLoader.isRegisteredAsParallelCapable() method with an invalid caller (non-JNI cases).  This\n+ *   test uses reflection and opens the java.base module so it runs separate from behavior tests of\n+ *   isRegisteredParallelCapable to avoid side effects.\n+ * @modules java.base\/java.lang:open\n+ * @run main\/othervm IsParallelCapableBadCaller\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+public class IsParallelCapableBadCaller {\n+\n+    public static class BogusLoader extends ClassLoader {\n+        public static class BogusCaller {\n+            public void run() {\n+                ClassLoader.registerAsParallelCapable();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        Throwable thrown = null;\n+\n+        \/\/ BogusLoader becomes the caller class\n+        final BogusLoader.BogusCaller bogusCaller = new BogusLoader.BogusCaller();\n+        bogusCaller.run();\n+\n+        \/\/ call with reflection hackery for 8281000\n+        final Method m = ClassLoader.class.getDeclaredMethod(\"registerAsParallelCapable\");\n+        m.setAccessible(true);\n+        try {\n+            m.invoke(null);\n+        } catch (InvocationTargetException ite) {\n+            thrown = ite.getCause();\n+        }\n+        if (! (thrown instanceof IllegalCallerException)) {\n+            throw new RuntimeException(\"Didn't get expected IllegalCallerException, got \"+ thrown);\n+        } else {\n+            System.out.println(\"Invalid caller threw IllegalCallerException as expected\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/IsParallelCapableBadCaller.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -29,2 +29,1 @@\n- *          ClassLoader.registerAsParallelCapable with null caller class does not throw a NullPointerException,\n- *          and instead returns false.\n+ *          ClassLoader.registerAsParallelCapable with null caller class throws an IllegalCallerException.\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/exeNullCallerClassLoaderTest\/NullCallerClassLoaderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}