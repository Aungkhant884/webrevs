{"files":[{"patch":"@@ -65,0 +65,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerClassLoaderTest := jvm.lib\n@@ -83,0 +84,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerClassLoaderTest := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1609,0 +1609,5 @@\n+     * <p>\n+     * In cases where {@code ClassLoader.registerAsParallelCapable} is called from a context where\n+     * there is no caller frame on the stack (e.g. when called directly\n+     * from a JNI attached thread), {@code IllegalCallerException} is thrown.\n+     * <\/p>\n@@ -1612,0 +1617,1 @@\n+     * @throws IllegalCallerException if there is no caller frame on the stack.\n@@ -1619,1 +1625,5 @@\n-        return registerAsParallelCapable(Reflection.getCallerClass());\n+        final Class<?> caller = Reflection.getCallerClass();\n+        if (caller == null) {\n+            throw new IllegalCallerException(\"no caller frame\");\n+        }\n+        return registerAsParallelCapable(caller);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8281000\n+ * @summary Test uses custom launcher that starts VM using JNI that verifies\n+ *          ClassLoader.registerAsParallelCapable with null caller class does not throw a NullPointerException,\n+ *          and instead returns false.\n+ * @library \/test\/lib\n+ * @requires os.family != \"aix\"\n+ * @run main\/native NullCallerClassLoaderTest\n+ *\/\n+\n+\/\/ Test disabled on AIX since we cannot invoke the JVM on the primordial thread.\n+\n+import java.io.File;\n+import java.util.Map;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class NullCallerClassLoaderTest {\n+    public static void main(String[] args) throws IOException {\n+        Path launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerClassLoaderTest\");\n+        ProcessBuilder pb = new ProcessBuilder(launcher.toString());\n+        Map<String, String> env = pb.environment();\n+\n+        String libDir = Platform.libDir().toString();\n+        String vmDir = Platform.jvmLibDir().toString();\n+\n+        \/\/ set up shared library path\n+        String sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? libDir : v + File.pathSeparator + libDir);\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? vmDir : v + File.pathSeparator + vmDir);\n+\n+        System.out.println(\"Launching: \" + launcher + \" shared library path: \" +\n+                env.get(sharedLibraryPathEnvName));\n+        new OutputAnalyzer(pb.start())\n+                .outputTo(System.out)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/exeNullCallerClassLoaderTest\/NullCallerClassLoaderTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"jni.h\"\n+#include \"assert.h\"\n+\n+static jclass class_IllegalCallerException;\n+\n+int checkAndClearIllegalCallerExceptionThrown(JNIEnv *env) {\n+    jthrowable t = (*env)->ExceptionOccurred(env);\n+    if ((*env)->IsInstanceOf(env, t, class_IllegalCallerException) == JNI_TRUE) {\n+        (*env)->ExceptionClear(env);\n+        return JNI_TRUE;\n+    }\n+    return JNI_FALSE;\n+}\n+\n+int main(int argc, char** args) {\n+    JavaVM *jvm;\n+    JNIEnv *env;\n+    JavaVMInitArgs vm_args;\n+    JavaVMOption options[1];\n+    jint rc;\n+\n+\n+    vm_args.version = JNI_VERSION_1_2;\n+    vm_args.nOptions = 0;\n+    vm_args.options = options;\n+\n+    if ((rc = JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args)) != JNI_OK) {\n+        printf(\"ERROR: cannot create VM.\\n\");\n+        exit(-1);\n+    }\n+    class_IllegalCallerException = (*env)->FindClass(env, \"java\/lang\/IllegalCallerException\");\n+    assert (class_IllegalCallerException != NULL);\n+\n+    \/\/ call ClassLoader.registerAsParallelCapable()\n+    jclass class_ClassLoader = (*env)->FindClass(env, \"java\/lang\/ClassLoader\");\n+    assert(class_ClassLoader != NULL);\n+    jmethodID mid_ClassLoader_registerAsParallelCapable = (*env)->GetStaticMethodID(env, class_ClassLoader, \"registerAsParallelCapable\", \"()Z\" );\n+    assert(mid_ClassLoader_registerAsParallelCapable != NULL);\n+    jboolean b = (*env)->CallStaticBooleanMethod(env, class_ClassLoader, mid_ClassLoader_registerAsParallelCapable );\n+    if ((rc = checkAndClearIllegalCallerExceptionThrown(env)) != JNI_TRUE) {\n+        printf(\"ERROR: Didn't get the expected IllegalCallerException.\\n\");\n+        exit(-1);\n+    }\n+\n+    printf(\"Expected IllegalCallerException was thrown\\n\");\n+\n+    (*jvm)->DestroyJavaVM(jvm);\n+    return 0;\n+}\n+\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/exeNullCallerClassLoaderTest\/exeNullCallerClassLoaderTest.c","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}