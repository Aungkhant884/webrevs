{"files":[{"patch":"@@ -2581,0 +2581,3 @@\n+        if (numMappings < 0) {\n+            throw new IllegalArgumentException(\"Negative number of mappings: \" + numMappings);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -397,0 +397,3 @@\n+        if (numElements < 0) {\n+            throw new IllegalArgumentException(\"Negative number of elements: \" + numElements);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -813,0 +813,3 @@\n+        if (numMappings < 0) {\n+            throw new IllegalArgumentException(\"Negative number of mappings: \" + numMappings);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,3 @@\n+        if (numElements < 0) {\n+            throw new IllegalArgumentException(\"Negative number of elements: \" + numElements);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1360,0 +1360,3 @@\n+        if (numMappings < 0) {\n+            throw new IllegalArgumentException(\"Negative number of mappings: \" + numMappings);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.Field;\n@@ -47,0 +46,1 @@\n+import java.util.function.IntFunction;\n@@ -429,0 +429,30 @@\n+    @DataProvider(name = \"negativeNumMappings\")\n+    public Iterator<Object[]> negativeNumMappings() {\n+        final List<Object[]> methods = new ArrayList<>();\n+        methods.add(new Object[] {(IntFunction<?>) HashMap::newHashMap, \"HashMap::newHashMap\"});\n+        methods.add(new Object[] {(IntFunction<?>) LinkedHashMap::newLinkedHashMap,\n+                \"LinkedHashMap::newLinkedHashMap\"});\n+        methods.add(new Object[] {(IntFunction<?>) WeakHashMap::newWeakHashMap,\n+                \"WeakHashMap::newWeakHashMap\"});\n+        methods.add(new Object[] {(IntFunction<?>) HashSet::newHashSet, \"HashSet::newHashSet\"});\n+        methods.add(new Object[] {(IntFunction<?>) LinkedHashSet::newLinkedHashSet,\n+                \"LinkedHashSet::newLinkedHashSet\"});\n+        return methods.iterator();\n+    }\n+\n+    \/**\n+     * Tests that the APIs that take {@code numMappings} or {@code numElements} as a parameter for\n+     * creating the collection instance (for example: {@link HashMap#newHashMap(int)}), throw\n+     * an {@code IllegalArgumentException} when a negative value is passed to them\n+     *\/\n+    @Test(dataProvider = \"negativeNumMappings\")\n+    public void testNegativeNumMappings(final IntFunction<?> method, final String methodName) {\n+        try {\n+            method.apply(-1);\n+            \/\/ expected to fail but didn't\n+            throw new AssertionError(methodName + \" was expected to throw\" +\n+                    \" IllegalArgumentException for param -1, but didn't\");\n+        } catch (IllegalArgumentException expected) {\n+            \/\/ received the expected exception\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}