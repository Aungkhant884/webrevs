{"files":[{"patch":"@@ -2596,5 +2596,5 @@\n-\/\/ Because this thread is external suspended the safepoint code will count it as at\n-\/\/ a safepoint, regardless of what its actual current thread-state is. But\n-\/\/ is_ext_suspend_completed() may be waiting to see a thread transition from\n-\/\/ _thread_in_native_trans to _thread_blocked. So we set the thread state directly\n-\/\/ to _thread_blocked. The problem with setting thread state directly is that a\n+\/\/ We have to set the thread state directly to _thread_blocked so that it will\n+\/\/ be seen to be safepoint\/handshake safe whilst suspended. This is also\n+\/\/ necessary to allow a thread in is_ext_suspend_completed, that observed the\n+\/\/ _thread_in_native_trans state, to proceed.\n+\/\/ The problem with setting thread state directly is that a\n@@ -2605,1 +2605,1 @@\n-\/\/ should never be blocking at a safepoint whilst in those states. Of these 'bad' states\n+\/\/ should never be blocking at a safepoint whilst in those states(*). Of these 'bad' states\n@@ -2610,0 +2610,2 @@\n+\/\/ (*) See switch statement in SafepointSynchronize::block() for thread states that are\n+\/\/ allowed when performing a safepoint check.\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}