{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -739,1 +739,1 @@\n-    __ stop(\"shadow zone safe limit is not initialized\");\n+  __ stop(\"shadow zone safe limit is not initialized\");\n@@ -745,1 +745,1 @@\n-    __ stop(\"shadow zone growth watermark is not initialized\");\n+  __ stop(\"shadow zone growth watermark is not initialized\");\n@@ -754,3 +754,3 @@\n-    for (int p = 1; p <= n_shadow_pages; p++) {\n-      __ bang_stack_with_offset(p*page_size);\n-    }\n+  for (int p = 1; p <= n_shadow_pages; p++) {\n+    __ bang_stack_with_offset(p*page_size);\n+  }\n@@ -758,5 +758,5 @@\n-    \/\/ Record a new watermark, unless the update is above the safe limit.\n-    \/\/ Otherwise, the next time around a check above would pass the safe limit.\n-    __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));\n-    __ jccb(Assembler::belowEqual, L_done);\n-      __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);\n+  \/\/ Record a new watermark, unless the update is above the safe limit.\n+  \/\/ Otherwise, the next time around a check above would pass the safe limit.\n+  __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));\n+  __ jccb(Assembler::belowEqual, L_done);\n+  __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/stackOverflow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,28 +78,0 @@\n-# Temporary group for stack banging changes\n-hotspot_stack = \\\n-  compiler\/interpreter\/TestVerifyStackAfterDeopt.java \\\n-  compiler\/interpreter\/cr7116216\/StackOverflow.java \\\n-  compiler\/osr\/TestOSRWithNonEmptyStack.java \\\n-  compiler\/runtime\/TestFloatsOnStackDeopt.java \\\n-  compiler\/runtime\/StackOverflowBug.java \\\n-  compiler\/uncommontrap\/StackOverflowGuardPagesOff.java \\\n-  compiler\/uncommontrap\/TestStackBangRbp.java \\\n-  compiler\/uncommontrap\/TestStackBangMonitorOwned.java \\\n-  compiler\/uncommontrap\/UncommonTrapStackBang.java \\\n-  runtime\/ErrorHandling\/BadNativeStackInErrorHandlingTest.java \\\n-  runtime\/Locals\/TestLargeLocalVarsStackRegion.java \\\n-  runtime\/ReservedStack \\\n-  runtime\/NMT\/CheckForProperDetailStackTrace.java \\\n-  runtime\/StackGuardPages \\\n-  runtime\/StackTrace \\\n-  runtime\/Thread\/TestThreadStackSizes.java \\\n-  runtime\/Thread\/TooSmallStackSize.java \\\n-  runtime\/Throwable\/TestMaxJavaStackTraceDepth.java \\\n-  runtime\/Throwable\/StackTraceLogging.java \\\n-  runtime\/handshake\/ \\\n-  runtime\/logging\/StackWalkTest.java \\\n-  runtime\/reflect\/ReflectStackOverflow.java \\\n-  runtime\/whitebox\/WBStackSize.java \\\n-  serviceability\/jvmti\/GetLocalVariable\/GetLocalWithoutSuspendTest.java \\\n-  serviceability\/threads\/TestFalseDeadLock.java\n-\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"}]}