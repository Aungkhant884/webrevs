{"files":[{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.event.PopupMenuEvent;\n+import javax.swing.event.PopupMenuListener;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4287690 4331058\n+ * @summary This testcase tests RFE-4287690 and RFE-4331058 requests,\n+ *          JComboBox should send drop down visible as well as invisible events.\n+ * @run main JComboBoxPopupMenuEventTest\n+ *\/\n+public class JComboBoxPopupMenuEventTest {\n+\n+    private static final String[] compStrs =\n+            {\"apple\", \"citibank\", \"cisco\", \"cienna\", \"Oracle\", \"IBM\"};\n+    private static Robot robot;\n+    private static JComboBox comboBox;\n+    private static JTextField searchTextField;\n+    private static CountDownLatch popupMenuVisibleLatch;\n+    private static CountDownLatch popupMenuInvisibleLatch;\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                popupMenuVisibleLatch = new CountDownLatch(1);\n+                popupMenuInvisibleLatch = new CountDownLatch(1);\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                mouseClick(searchTextField);\n+                hitKeys(KeyEvent.VK_C, KeyEvent.VK_I);\n+                mouseClick(comboBox);\n+\n+                \/\/ Verifying whether popupMenuWillBecomeVisible method of\n+                \/\/ PopupMenuListener gets called when popup menu appears.\n+                if (!popupMenuVisibleLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\n+                            \"Waited too long, but popupMenuWillBecomeVisible \" +\n+                            \"not yet got called for \" + laf);\n+                }\n+\n+                hitKeys(KeyEvent.VK_ENTER);\n+\n+                \/\/ Verifying whether popupMenuWillBecomeInvisible method of\n+                \/\/ PopupMenuListener gets called when popup menu disappears.\n+                if (!popupMenuInvisibleLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\n+                            \"Waited too long, but popupMenuWillBecomeInvisible\" +\n+                                               \"not yet got called for \" + laf);\n+                }\n+\n+                System.out.println(\"Test passed for \" + laf);\n+            } finally {\n+                SwingUtilities.invokeAndWait(\n+                        JComboBoxPopupMenuEventTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void mouseClick(JComponent jComponent) throws Exception {\n+        final Point location = getLocationOnScreen(jComponent);\n+        robot.mouseMove(location.x + 8, location.y + 8);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static Point getLocationOnScreen(JComponent jComponent)\n+            throws Exception {\n+        final AtomicReference<Point> loc = new AtomicReference<>();\n+        SwingUtilities\n+                .invokeAndWait(() -> loc.set(jComponent.getLocationOnScreen()));\n+        final Point location = loc.get();\n+        return location;\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    public static void createUI() {\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+        searchTextField = new JTextField(6);\n+        panel.add(searchTextField);\n+        comboBox = new JComboBox(compStrs);\n+        panel.add(comboBox);\n+        comboBox.addPopupMenuListener(new PopupMenuListener() {\n+            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+                System.out.println(\"popupMenuWillBecomeVisible() got called\");\n+                popupMenuVisibleLatch.countDown();\n+                comboBox.removeAllItems();\n+                String text = searchTextField.getText().trim();\n+                List<String> comps = Arrays.stream(compStrs)\n+                                           .filter(compStr -> compStr\n+                                                   .startsWith(text))\n+                                           .collect(Collectors.toList());\n+                for (String comp : comps) {\n+                    comboBox.addItem(comp);\n+                }\n+            }\n+\n+            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+                System.out.println(\"popupMenuWillBecomeInvisible() got called\");\n+                popupMenuInvisibleLatch.countDown();\n+            }\n+\n+            public void popupMenuCanceled(PopupMenuEvent e) {\n+            }\n+        });\n+\n+        frame.setContentPane(panel);\n+        frame.setSize(250, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/4287690\/JComboBoxPopupMenuEventTest.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"}]}