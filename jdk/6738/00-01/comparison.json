{"files":[{"patch":"@@ -49,4 +49,0 @@\n-\/\/ The result is the number of characters copied before the first incompatible character was found.\n-\/\/ If precise is true, the processing stops exactly at this point. Otherwise, the result may be off\n-\/\/ by a few bytes. The result always indicates the number of copied characters.\n-\/\/ When used as a character index, the returned value points to the first incompatible character.\n@@ -54,3 +50,19 @@\n-\/\/ Note: Does not behave exactly like package private StringUTF16 compress java implementation in case of failure:\n-\/\/ - Different number of characters may have been written to dead array (if precise is false).\n-\/\/ - Returns a number <cnt instead of 0. (Result gets compared with cnt.)\n+\/\/ The result indicates success or failure of the operation.\n+\/\/   General compress operation (cut off high order byte which must be all zeroes).\n+\/\/    = len - all characters have been successfully compressed.\n+\/\/    = 0   - compress failed. At least one character was found with a non-zero high order byte.\n+\/\/            This is the failure return value which exactly corresponds to the Java implementation.\n+\/\/    0 <= result < len - compress failed. That many characters were compressed successfully\n+\/\/                        before the first non-compressable character was found. This is the\n+\/\/                        current, but not fully compatible, implementation. See below.\n+\/\/   Encode to ISO or 7-bit ASCII array.\n+\/\/    = len - all characters have been encoded successfully.\n+\/\/    < len - encode failed. That many characters were encoded successfully.\n+\/\/            When used as an index into the character array, the return value addresses the\n+\/\/            first not encodeable character.\n+\/\/\n+\/\/ If precise is true, the processing stops exactly at the point where a failure is detected.\n+\/\/ More characters than indicated by the return value may have been read from the src array.\n+\/\/ Exactly the number of characters indicated by the return value have been written to dst.\n+\/\/ If precise is false, a few characters more than indicated by the return value may have been\n+\/\/ written to the dst array. In any failure case, The result value indexes the first invalid character.\n@@ -68,1 +80,1 @@\n-      int   mask_ix_r = 8;   \/\/ rightmost one bit pos in mask. ASCII only uses codes 0..127\n+      mask_ix_r = 8;         \/\/ rightmost one bit pos in mask. ASCII only uses codes 0..127\n@@ -145,1 +157,2 @@\n-                                           \/\/ Must be multiple of 2*(vector register length in chars (8 HW = 128 bits)).\n+                                           \/\/ Must correspond to # vector registers used by implementation,\n+                                           \/\/ and must be a power of 2.\n@@ -199,1 +212,2 @@\n-                                           \/\/ Must be multiple of 8.\n+                                           \/\/ Must correspond to # registers used by implementation,\n+                                           \/\/ and must be a power of 2.\n@@ -256,0 +270,2 @@\n+      \/\/ Because we don't need to be precise, we just return the # of characters which have been written.\n+      \/\/ The first illegal character is in the index range [result-min_cnt\/2, result+min_cnt\/2).\n@@ -311,1 +327,1 @@\n-      z_srk(Rix, Rcnt, Z_R0);              \/\/ remaining # chars to compress in unrolled loop\n+      z_srk(Rix, Rcnt, Z_R0);              \/\/ remaining # chars to compress in scalar loop\n@@ -316,2 +332,2 @@\n-    z_lgfr(result, Rcnt);                  \/\/ # processed characters (if all runs ok).\n-    z_brz(ScalarDone);                     \/\/ uses CC from Rix calculation\n+    z_lgfr(result, Rcnt);                  \/\/ # processed characters (if all encodes ok).\n+    z_brz(ScalarDone);                     \/\/ anything left to do? (uses CC from Rix calculation)\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.cpp","additions":29,"deletions":13,"binary":false,"changes":42,"status":"modified"}]}