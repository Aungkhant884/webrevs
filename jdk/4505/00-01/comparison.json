{"files":[{"patch":"@@ -2555,4 +2555,7 @@\n-  \/\/ 8183543: on AArch64 C2 compilation often fails\n-  \/\/ with \"failed spill-split-recycle sanity check\".\n-  \/\/ A call is considered a high register pressure area\n-  \/\/ and force spilling around the call.\n+  \/\/ JDK-8183543: Take the number of available registers as int register\n+  \/\/ pressure threshold, the jtreg test:\n+  \/\/ test\/hotspot\/jtreg\/compiler\/regalloc\/TestC2IntPressure.java\n+  \/\/ failed due to C2 compilation failure with\n+  \/\/ \"COMPILE SKIPPED: failed spill-split-recycle sanity check\".\n+  \/\/ Lowering the default value to (_NO_SPECIAL_REG32_mask.Size() minus 1)\n+  \/\/ fixes this bug. See JDK-8183543.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1774,1 +1774,4 @@\n-  return (FLOATPRESSURE == -1) ? (_FLOAT_REG_mask.Size() - 2) : FLOATPRESSURE;\n+  \/\/ The following default threshold works best for LCM's register pressure\n+  \/\/ scheduling on x64.\n+  uint default_float_pressure_threshold = _FLOAT_REG_mask.Size() - 2;\n+  return (FLOATPRESSURE == -1) ? default_float_pressure_threshold : FLOATPRESSURE;\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8183543\n- * @summary C2 compilation often fails with \"failed spill-split-recycle sanity check\"\n- *\n- * @library \/test\/lib\n- *\n- * @build sun.hotspot.WhiteBox\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n- *\n- * @run main\/othervm -Xbatch\n- *                   -XX:-Inline\n- *                   -XX:-TieredCompilation\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n- *                   compiler.c2.Test8183543\n- *\/\n-\n-package compiler.c2;\n-\n-import sun.hotspot.WhiteBox;\n-\n-public class Test8183543 {\n-\n-  static volatile int vol_f;\n-\n-  static int test(Test8183543 arg) {\n-    Test8183543 a = arg;\n-    int res = 0;\n-    not_inlined();\n-    res = a.vol_f;\n-    return res;\n-  }\n-\n-  static void not_inlined() {\n-    for (int i = 0; i < 5000; i++) {\n-      vol_f += 2;\n-    }\n-  }\n-\n-  public static void main(String args[]) {\n-    Test8183543 arg = new Test8183543();\n-    for (int i = 0; i < 10000; i++) {\n-      Test8183543.test(arg);\n-    }\n-    try {\n-      var method = Test8183543.class.getDeclaredMethod(\"test\", Test8183543.class);\n-      if (!WhiteBox.getWhiteBox().isMethodCompiled(method)) {\n-        throw new Error(\"test method didn't get compiled\");\n-      }\n-    } catch (NoSuchMethodException e) {\n-      throw new Error(\"TESTBUG : \" + e, e);\n-    }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test8183543.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8183543\n+ * @summary C2 compilation often fails on aarch64 with \"failed spill-split-recycle sanity check\"\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ *\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xbatch\n+ *                   -XX:-Inline\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:+PreserveFramePointer\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   compiler.regalloc.TestC2IntPressure\n+ *\/\n+\n+package compiler.regalloc;\n+\n+import sun.hotspot.WhiteBox;\n+\n+public class TestC2IntPressure {\n+\n+  static volatile int vol_f;\n+\n+  static void not_inlined() {\n+    \/\/ Do nothing\n+  }\n+\n+  static int test(TestC2IntPressure arg) {\n+    TestC2IntPressure a = arg;\n+    int res = 0;\n+    not_inlined();\n+    res = a.vol_f;\n+    return res;\n+  }\n+\n+  public static void main(String args[]) {\n+    TestC2IntPressure arg = new TestC2IntPressure();\n+    for (int i = 0; i < 10000; i++) {\n+      test(arg);\n+    }\n+    try {\n+      var method = TestC2IntPressure.class.getDeclaredMethod(\"test\", TestC2IntPressure.class);\n+      if (!WhiteBox.getWhiteBox().isMethodCompiled(method)) {\n+        throw new Error(\"test method didn't get compiled\");\n+      }\n+    } catch (NoSuchMethodException e) {\n+      throw new Error(\"TESTBUG : \" + e, e);\n+    }\n+  }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/regalloc\/TestC2IntPressure.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}