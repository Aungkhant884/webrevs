{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1009,0 +1009,16 @@\n+charset x-IBM836 IBM836\n+    package sun.nio.cs.ext\n+    type    template\n+    alias   cp836\n+    alias   ibm836\n+    alias   836\n+    alias   ibm-836\n+\n+charset x-IBM837 IBM837 # EBCDIC DBCS-only Simplified Chinese\n+    package sun.nio.cs.ext\n+    type    template\n+    alias   cp837\n+    alias   ibm837\n+    alias   837\n+    alias   ibm-837\n+\n@@ -1020,0 +1036,8 @@\n+charset x-IBM835 IBM835 # EBCDIC DBCS-only Traditional Chinese\n+    package sun.nio.cs.ext\n+    type    template\n+    alias   cp835\n+    alias   ibm835\n+    alias   835\n+    alias   ibm-835\n+\n@@ -1505,0 +1529,8 @@\n+charset x-IBM1027 IBM1027\n+    package sun.nio.cs.ext\n+    type    template\n+    alias   cp1027\n+    alias   ibm1027\n+    alias   1027\n+    alias   ibm-1027\n+\n","filename":"make\/data\/charsetmapping\/charsets","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,0 +290,12 @@\n+\n+        public static char[] toSB(char[] b2cSB_DB, boolean isEBCDIC) {\n+            char[] b2cSB = new char[0x100];\n+            System.arraycopy(b2cSB_DB, 0, b2cSB, 128, 128);\n+            System.arraycopy(b2cSB_DB, 128, b2cSB, 0, 128);\n+            if (isEBCDIC) {\n+                b2cSB[0x8e] = 0xe;\n+                b2cSB[0x8f] = 0xf;\n+            }\n+            return b2cSB;\n+        }\n+\n@@ -1120,0 +1132,21 @@\n+    public static class Encoder_SB extends Encoder {\n+        private boolean isEBCDIC = false;\n+\n+        public Encoder_SB(Charset cs, byte[] repl,\n+                          char[] c2b, char[] c2bIndex,\n+                          boolean isEBCDIC) {\n+            super(cs, 1.0f, 1.0f, repl, c2b, c2bIndex, false);\n+            this.isEBCDIC = isEBCDIC;\n+        }\n+\n+        public int encodeChar(char ch) {\n+            int bb = super.encodeChar(ch);\n+            if (bb == UNMAPPABLE_ENCODING\n+                && isEBCDIC\n+                && (ch == 0x0e || ch == 0x0f)) {\n+                return (int) ch;\n+            }\n+            return bb < 0x100 ? bb : UNMAPPABLE_ENCODING;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/DoubleByte.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\/\n+\n+package $PACKAGE$;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import sun.nio.cs.DoubleByte;\n+import sun.nio.cs.SingleByte;\n+\n+public class IBM1027 extends Charset\n+{\n+    public IBM1027() {\n+        super(\"x-IBM1027\", $ALIASES$);\n+    }\n+\n+    public boolean contains(Charset cs) {\n+        return (cs instanceof IBM1027);\n+    }\n+\n+    private static char[] b2cSB =\n+        DoubleByte.Decoder.toSB(IBM939.DecodeHolder.b2cSB, true);\n+\n+    public CharsetDecoder newDecoder() {\n+        return new SingleByte.Decoder(this, b2cSB);\n+    }\n+\n+    public CharsetEncoder newEncoder() {\n+        return new DoubleByte.Encoder_SB (\n+            this, new byte[] { 0x6F }, IBM939.EncodeHolder.c2b,\n+            IBM939.EncodeHolder.c2bIndex, true);\n+    }\n+\n+}\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM1027.java.template","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\/\n+\n+package $PACKAGE$;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import sun.nio.cs.DoubleByte;\n+import static sun.nio.cs.CharsetMapping.*;\n+\n+\/\/ EBCDIC DBCS-only Traditional Chinese\n+public class IBM835 extends Charset\n+{\n+    public IBM835() {\n+        super(\"x-IBM835\", $ALIASES$);\n+    }\n+\n+    public boolean contains(Charset cs) {\n+        return (cs instanceof IBM835);\n+    }\n+\n+    public CharsetDecoder newDecoder() {\n+        return new DoubleByte.Decoder_DBCSONLY(\n+            this, IBM937.DecodeHolder.b2c, null, 0x40, 0xfe);  \/\/ hardcode the b2min\/max\n+    }\n+\n+    public CharsetEncoder newEncoder() {\n+        return new Encoder(this);\n+    }\n+\n+    protected static class Encoder extends DoubleByte.Encoder_DBCSONLY {\n+        public Encoder(Charset cs) {\n+            super(cs, new byte[] {(byte)0xfe, (byte)0xfe},\n+                  IBM937.EncodeHolder.c2b, IBM937.EncodeHolder.c2bIndex, false);\n+        }\n+\n+        public int encodeChar(char ch) {\n+            int bb = super.encodeChar(ch);\n+            if (bb == UNMAPPABLE_ENCODING) {\n+                \/\/ Cp835 has 4 additional non-roundtrip char->bytes\n+                if (ch == '\\u2223') {\n+                    return 0x424f;\n+                } else if (ch == '\\u00af') {\n+                    return 0x42a1;\n+                } else if (ch == '\\uff5e') {\n+                    return 0x43a1;\n+                } else if (ch == '\\u2013') {\n+                    return 0x444a;\n+                } else if (ch == '\\u5f5d') {\n+                    return 0x6560;\n+                }\n+            }\n+            return bb;\n+        }\n+\n+        public boolean isLegalReplacement(byte[] repl) {\n+            if (repl.length == 2 &&\n+                repl[0] == (byte)0xfe && repl[1] == (byte)0xfe)\n+                return true;\n+            return super.isLegalReplacement(repl);\n+        }\n+\n+    }\n+}\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM835.java.template","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\/\n+\n+package $PACKAGE$;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import sun.nio.cs.DoubleByte;\n+import sun.nio.cs.SingleByte;\n+\n+public class IBM836 extends Charset\n+{\n+    public IBM836() {\n+        super(\"x-IBM836\", $ALIASES$);\n+    }\n+\n+    public boolean contains(Charset cs) {\n+        return (cs instanceof IBM836);\n+    }\n+\n+    private static char[] b2cSB =\n+        DoubleByte.Decoder.toSB(IBM935.DecodeHolder.b2cSB, true);\n+\n+    public CharsetDecoder newDecoder() {\n+        return new SingleByte.Decoder(this, b2cSB);\n+    }\n+\n+    public CharsetEncoder newEncoder() {\n+        return new DoubleByte.Encoder_SB (\n+            this, new byte[] { 0x6F }, IBM935.EncodeHolder.c2b,\n+            IBM935.EncodeHolder.c2bIndex, true);\n+    }\n+\n+}\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM836.java.template","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\/\n+\n+package $PACKAGE$;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import sun.nio.cs.DoubleByte;\n+import static sun.nio.cs.CharsetMapping.*;\n+\n+\/\/ EBCDIC DBCS-only Simplified Chinese\n+public class IBM837 extends Charset\n+{\n+    public IBM837() {\n+        super(\"x-IBM837\", $ALIASES$);\n+    }\n+\n+    public boolean contains(Charset cs) {\n+        return (cs instanceof IBM837);\n+    }\n+\n+    public CharsetDecoder newDecoder() {\n+        return new DoubleByte.Decoder_DBCSONLY(\n+            this, IBM935.DecodeHolder.b2c, null, 0x40, 0xfe);  \/\/ hardcode the b2min\/max\n+    }\n+\n+    public CharsetEncoder newEncoder() {\n+        return new Encoder(this);\n+    }\n+\n+    protected static class Encoder extends DoubleByte.Encoder_DBCSONLY {\n+        public Encoder(Charset cs) {\n+            super(cs, new byte[] {(byte)0xfe, (byte)0xfe},\n+                  IBM935.EncodeHolder.c2b, IBM935.EncodeHolder.c2bIndex, false);\n+        }\n+\n+        public int encodeChar(char ch) {\n+            int bb = super.encodeChar(ch);\n+            if (bb == UNMAPPABLE_ENCODING) {\n+                \/\/ Cp837 has 4 additional non-roundtrip char->bytes\n+                if (ch == '\\u00b7') {\n+                    return 0x4345;\n+                } else if (ch == '\\u2014') {\n+                    return 0x444a;\n+                }\n+            }\n+            return bb;\n+        }\n+\n+        public boolean isLegalReplacement(byte[] repl) {\n+            if (repl.length == 2 &&\n+                repl[0] == (byte)0xfe && repl[1] == (byte)0xfe)\n+                return true;\n+            return super.isLegalReplacement(repl);\n+        }\n+\n+    }\n+}\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM837.java.template","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}