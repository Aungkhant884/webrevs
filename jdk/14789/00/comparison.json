{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.io.UncheckedIOException;\n@@ -32,2 +33,3 @@\n- * The close method is invoked to release resources that the object is\n- * holding (such as open files).\n+ * The {@code close} method is invoked to release resources that the object is\n+ * holding (such as open files).  The {@code closeUnchecked} method\n+ * closes the stream and may throw only an unchecked exception.\n@@ -44,1 +46,1 @@\n-     * <p> As noted in {@link AutoCloseable#close()}, cases where the\n+     * <p> As noted in {@linkplain AutoCloseable#close()}, cases where the\n@@ -53,0 +55,31 @@\n+\n+    \/**\n+     * Closes this stream and releases any system resources associated\n+     * with it. If the stream is already closed then invoking this\n+     * method has no effect.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this stream to:\n+     * {@snippet lang=java :\n+     * try {\n+     *     close();\n+     * } catch (IOException cause) {\n+     *     throw new UncheckedIOException(cause);\n+     * }\n+     * }\n+     * Therefore if an {@linkplain UncheckedIOException} is thrown then its\n+     * {@linkplain UncheckedIOException#getCause() getCause} method will return the\n+     * {@linkplain IOException} thrown by {@link #close() close}.\n+     *\n+     * @throws UncheckedIOException If invoking {@code close} throws\n+     * an {@code IOException}.\n+     *\n+     * @since 22\n+     *\/\n+    default void closeUnchecked() {\n+        try {\n+            close();\n+        } catch (IOException cause) {\n+            throw new UncheckedIOException(cause);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/Closeable.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8066869\n+ * @summary Verify expected behavior of default method Closeable::closeUnchecked\n+ *\/\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+public class CloseUnchecked {\n+    private static final String MESSAGE = \"Gratuitous exception\";\n+\n+    private static class CloseableImpl implements Closeable {\n+        private boolean closeThrows;\n+\n+        private CloseableImpl(boolean closeThrows) {\n+            this.closeThrows = closeThrows;\n+        }\n+\n+        public void close() throws IOException {\n+            if (closeThrows)\n+                throw new IOException(MESSAGE);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        Closeable c = new CloseableImpl(false);\n+        try {\n+            c.closeUnchecked();\n+        } catch (UncheckedIOException unexpected) {\n+            throw new RuntimeException(\"Unexpected exception\", unexpected);\n+        }\n+\n+        c = new CloseableImpl(true);\n+        try {\n+            c.closeUnchecked();\n+            throw new RuntimeException(\"UncheckedIOException not thrown\");\n+        } catch (UncheckedIOException expected) {\n+            System.out.println(\"Caught expected UncheckedIOException\");\n+            IOException cause = expected.getCause();\n+            String message = cause.getMessage();\n+            if (!message.equals(MESSAGE))\n+                throw new RuntimeException(\"Unexpected message \" + message);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Closeable\/CloseUnchecked.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}