{"files":[{"patch":"@@ -33,5 +33,0 @@\n-import java.util.*;\n-\n-import javax.management.remote.*;\n-import javax.management.*;\n-\n@@ -40,0 +35,9 @@\n+import javax.management.MBeanAttributeInfo;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServerConnection;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n@@ -41,0 +45,7 @@\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n@@ -89,2 +100,1 @@\n-    static TestLogger log =\n-            new TestLogger(\"RmiBootstrapTest\");\n+    static TestLogger log = new TestLogger(\"RmiBootstrapTest\");\n@@ -100,2 +110,1 @@\n-    public static int listMBeans(MBeanServerConnection server)\n-            throws IOException {\n+    public static int listMBeans(MBeanServerConnection server) throws IOException {\n@@ -111,2 +120,1 @@\n-    public static int listMBeans(MBeanServerConnection server,\n-            ObjectName pattern, QueryExp query)\n+    public static int listMBeans(MBeanServerConnection server, ObjectName pattern, QueryExp query)\n@@ -115,3 +123,2 @@\n-        final Set names = server.queryNames(pattern, query);\n-        for (final Iterator i = names.iterator(); i.hasNext(); ) {\n-            ObjectName name = (ObjectName) i.next();\n+        final Set<ObjectName> names = server.queryNames(pattern, query);\n+        for (ObjectName name : names) {\n@@ -128,2 +135,1 @@\n-                            Object o = server.getAttribute(name,\n-                                    attrs[j].getName());\n+                            Object o = server.getAttribute(name, attrs[j].getName());\n@@ -131,3 +137,1 @@\n-                                log.debug(\"listMBeans\", \"\\t\\t\" +\n-                                        attrs[j].getName() +\n-                                        \" = \" + o);\n+                                log.debug(\"listMBeans\", \"\\t\\t\" + attrs[j].getName() + \" = \" + o);\n@@ -136,5 +140,2 @@\n-                            log.trace(\"listMBeans\", \"JmxClient failed to get \" +\n-                                    attrs[j].getName() + \": \" + x);\n-                            final IOException io =\n-                                    new IOException(\"JmxClient failed to get \" +\n-                                            attrs[j].getName());\n+                            log.trace(\"listMBeans\", \"JmxClient failed to get \" + attrs[j].getName() + \": \" + x);\n+                            final IOException io = new IOException(\"JmxClient failed to get \" + attrs[j].getName());\n@@ -147,5 +148,2 @@\n-                log.trace(\"listMBeans\",\n-                        \"JmxClient failed to get MBeanInfo: \" + x);\n-                final IOException io =\n-                        new IOException(\n-                                \"JmxClient failed to get MBeanInfo: \" + x);\n+                log.trace(\"listMBeans\", \"JmxClient failed to get MBeanInfo: \" + x);\n+                final IOException io = new IOException(\"JmxClient failed to get MBeanInfo: \" + x);\n@@ -165,2 +163,1 @@\n-            throw new IllegalArgumentException(\"Argument is required for this\" +\n-                    \" test\");\n+            throw new IllegalArgumentException(\"Argument is required for this\" + \" test\");\n@@ -174,2 +171,1 @@\n-            MAX_GET_FREE_PORT_TRIES = Integer.parseInt(\n-                    System.getProperty(\"test.getfreeport.max.tries\", \"10\"));\n+            MAX_GET_FREE_PORT_TRIES = Integer.parseInt(System.getProperty(\"test.getfreeport.max.tries\", \"10\"));\n@@ -202,2 +198,1 @@\n-    private ArrayList readCredentials(String passwordFileName)\n-            throws IOException {\n+    private ArrayList readCredentials(String passwordFileName) throws IOException {\n@@ -257,4 +252,2 @@\n-    public int connectAndRead(JMXServiceURL url,\n-            Object[] useCredentials,\n-            boolean expectConnectOk,\n-            boolean expectReadOk)\n+    public int connectAndRead(JMXServiceURL url, Object[] useCredentials,\n+            boolean expectConnectOk, boolean expectReadOk)\n@@ -282,2 +275,1 @@\n-                    final String err = \"Connection failed for \" + crinfo +\n-                            \": \" + x;\n+                    final String err = \"Connection failed for \" + crinfo + \": \" + x;\n@@ -290,2 +282,1 @@\n-                    System.out.println(\"Connection failed as expected for \" +\n-                            crinfo + \": \" + x);\n+                    System.out.println(\"Connection failed as expected for \" + crinfo + \": \" + x);\n@@ -296,2 +287,1 @@\n-                    final String err = \"Connection failed for \" + crinfo +\n-                            \": \" + x;\n+                    final String err = \"Connection failed for \" + crinfo + \": \" + x;\n@@ -304,2 +294,1 @@\n-                    System.out.println(\"Connection failed as expected for \" +\n-                            crinfo + \": \" + x);\n+                    System.out.println(\"Connection failed as expected for \" + crinfo + \": \" + x);\n@@ -310,2 +299,1 @@\n-                MBeanServerConnection conn =\n-                        c.getMBeanServerConnection();\n+                MBeanServerConnection conn = c.getMBeanServerConnection();\n@@ -314,2 +302,1 @@\n-                    log.debug(\"testCommunication\", \"Server domain is: \" +\n-                            conn.getDefaultDomain());\n+                    log.debug(\"testCommunication\", \"Server domain is: \" + conn.getDefaultDomain());\n@@ -317,2 +304,1 @@\n-                final ObjectName pattern =\n-                        new ObjectName(\"java.lang:type=Memory,*\");\n+                final ObjectName pattern = new ObjectName(\"java.lang:type=Memory,*\");\n@@ -321,2 +307,1 @@\n-                    throw new Exception(\"Expected at least one matching \" +\n-                            \"MBean for \" + pattern);\n+                    throw new Exception(\"Expected at least one matching \" + \"MBean for \" + pattern);\n@@ -325,4 +310,2 @@\n-                    System.out.println(\"Communication succeeded \" +\n-                            \"as expected for \" +\n-                            crinfo + \": found \" + count\n-                            + ((count < 2) ? \"MBean\" : \"MBeans\"));\n+                    System.out.println(\"Communication succeeded \" + \"as expected for \" + crinfo + \": found \" + count +\n+                            ((count < 2) ? \"MBean\" : \"MBeans\"));\n@@ -330,2 +313,1 @@\n-                    final String err = \"Expected failure didn't occur for \" +\n-                            crinfo;\n+                    final String err = \"Expected failure didn't occur for \" + crinfo;\n@@ -336,2 +318,1 @@\n-                final String err = \"Communication failed with \" + crinfo +\n-                        \": \" + x;\n+                final String err = \"Communication failed with \" + crinfo + \": \" + x;\n@@ -345,2 +326,1 @@\n-                    System.out.println(\"Communication failed as expected for \" +\n-                            crinfo + \": \" + x);\n+                    System.out.println(\"Communication failed as expected for \" + crinfo + \": \" + x);\n@@ -351,2 +331,1 @@\n-                    final String err = \"Communication failed with \" + crinfo +\n-                            \": \" + x;\n+                    final String err = \"Communication failed with \" + crinfo + \": \" + x;\n@@ -359,2 +338,1 @@\n-                    System.out.println(\"Communication failed as expected for \" +\n-                            crinfo + \": \" + x);\n+                    System.out.println(\"Communication failed as expected for \" + crinfo + \": \" + x);\n@@ -363,2 +341,1 @@\n-                final String err = \"Failed to read MBeans with \" + crinfo +\n-                        \": \" + x;\n+                final String err = \"Failed to read MBeans with \" + crinfo + \": \" + x;\n@@ -378,4 +355,2 @@\n-        final String defaultKeyStore =\n-                getDefaultStoreName(DefaultValues.KEYSTORE);\n-        final String defaultTrustStore =\n-                getDefaultStoreName(DefaultValues.TRUSTSTORE);\n+        final String defaultKeyStore = defaultStoreNamePrefix + DefaultValues.KEYSTORE;\n+        final String defaultTrustStore = defaultStoreNamePrefix + DefaultValues.TRUSTSTORE;\n@@ -383,2 +358,1 @@\n-        final String keyStore =\n-                System.getProperty(PropertyNames.KEYSTORE, defaultKeyStore);\n+        final String keyStore = System.getProperty(PropertyNames.KEYSTORE, defaultKeyStore);\n@@ -388,3 +362,1 @@\n-        final String password =\n-                System.getProperty(PropertyNames.KEYSTORE_PASSWD,\n-                        DefaultValues.KEYSTORE_PASSWD);\n+        final String password = System.getProperty(PropertyNames.KEYSTORE_PASSWD, DefaultValues.KEYSTORE_PASSWD);\n@@ -392,2 +364,1 @@\n-        log.trace(\"setSslProperties\",\n-                PropertyNames.KEYSTORE_PASSWD + \"=\" + password);\n+        log.trace(\"setSslProperties\", PropertyNames.KEYSTORE_PASSWD + \"=\" + password);\n@@ -395,3 +366,1 @@\n-        final String trustStore =\n-                System.getProperty(PropertyNames.TRUSTSTORE,\n-                        defaultTrustStore);\n+        final String trustStore = System.getProperty(PropertyNames.TRUSTSTORE, defaultTrustStore);\n@@ -399,2 +368,1 @@\n-        log.trace(\"setSslProperties\",\n-                PropertyNames.TRUSTSTORE + \"=\" + trustStore);\n+        log.trace(\"setSslProperties\", PropertyNames.TRUSTSTORE + \"=\" + trustStore);\n@@ -402,3 +370,1 @@\n-        final String trustword =\n-                System.getProperty(PropertyNames.TRUSTSTORE_PASSWD,\n-                        DefaultValues.TRUSTSTORE_PASSWD);\n+        final String trustword = System.getProperty(PropertyNames.TRUSTSTORE_PASSWD, DefaultValues.TRUSTSTORE_PASSWD);\n@@ -406,2 +372,1 @@\n-        log.trace(\"setSslProperties\",\n-                PropertyNames.TRUSTSTORE_PASSWD + \"=\" + trustword);\n+        log.trace(\"setSslProperties\", PropertyNames.TRUSTSTORE_PASSWD + \"=\" + trustword);\n@@ -410,2 +375,1 @@\n-            System.setProperty(\"javax.rmi.ssl.client.enabledCipherSuites\",\n-                    clientEnabledCipherSuites);\n+            System.setProperty(\"javax.rmi.ssl.client.enabledCipherSuites\", clientEnabledCipherSuites);\n@@ -419,5 +383,2 @@\n-            final String defaultConf =\n-                    getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-            final String confname =\n-                    System.getProperty(PropertyNames.CONFIG_FILE_NAME,\n-                            defaultConf);\n+            final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+            final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -437,9 +398,4 @@\n-            final String useSslStr =\n-                    props.getProperty(PropertyNames.USE_SSL,\n-                            DefaultValues.USE_SSL);\n-            final boolean useSsl =\n-                    Boolean.valueOf(useSslStr).booleanValue();\n-\n-            log.debug(\"checkSslConfiguration\",\n-                    PropertyNames.USE_SSL + \"=\" + useSsl +\n-                            \": setting SSL\");\n+            final String useSslStr = props.getProperty(PropertyNames.USE_SSL, DefaultValues.USE_SSL);\n+            final boolean useSsl = Boolean.valueOf(useSslStr).booleanValue();\n+\n+            log.debug(\"checkSslConfiguration\", PropertyNames.USE_SSL + \"=\" + useSsl + \": setting SSL\");\n@@ -448,4 +404,2 @@\n-                    props.getProperty(PropertyNames.SSL_NEED_CLIENT_AUTH,\n-                            DefaultValues.SSL_NEED_CLIENT_AUTH);\n-            final boolean useSslClientAuth =\n-                    Boolean.valueOf(useSslClientAuthStr).booleanValue();\n+                    props.getProperty(PropertyNames.SSL_NEED_CLIENT_AUTH, DefaultValues.SSL_NEED_CLIENT_AUTH);\n+            final boolean useSslClientAuth = Boolean.valueOf(useSslClientAuthStr).booleanValue();\n@@ -453,3 +407,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                    PropertyNames.SSL_NEED_CLIENT_AUTH + \"=\" +\n-                            useSslClientAuth);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_NEED_CLIENT_AUTH + \"=\" + useSslClientAuth);\n@@ -458,2 +410,1 @@\n-            final String sslCipherSuites =\n-                    props.getProperty(PropertyNames.SSL_ENABLED_CIPHER_SUITES);\n+            final String sslCipherSuites = props.getProperty(PropertyNames.SSL_ENABLED_CIPHER_SUITES);\n@@ -461,3 +412,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                    PropertyNames.SSL_ENABLED_CIPHER_SUITES + \"=\" +\n-                            sslCipherSuites);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_ENABLED_CIPHER_SUITES + \"=\" + sslCipherSuites);\n@@ -466,2 +415,1 @@\n-            final String sslProtocols =\n-                    props.getProperty(PropertyNames.SSL_ENABLED_PROTOCOLS);\n+            final String sslProtocols = props.getProperty(PropertyNames.SSL_ENABLED_PROTOCOLS);\n@@ -469,3 +417,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                    PropertyNames.SSL_ENABLED_PROTOCOLS + \"=\" +\n-                            sslProtocols);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_ENABLED_PROTOCOLS + \"=\" + sslProtocols);\n@@ -474,2 +420,1 @@\n-                setSslProperties(props.getProperty(\n-                        PropertyNames.SSL_CLIENT_ENABLED_CIPHER_SUITES));\n+                setSslProperties(props.getProperty(PropertyNames.SSL_CLIENT_ENABLED_CIPHER_SUITES));\n@@ -493,2 +438,1 @@\n-    public void testCommunication(JMXServiceURL url)\n-            throws IOException {\n+    public void testCommunication(JMXServiceURL url) throws IOException {\n@@ -496,4 +440,2 @@\n-        final String defaultConf =\n-                getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-        final String confname =\n-                System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n+        final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+        final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -514,4 +456,2 @@\n-                props.getProperty(PropertyNames.USE_AUTHENTICATION,\n-                        DefaultValues.USE_AUTHENTICATION);\n-        final boolean useAuthentication =\n-                Boolean.valueOf(useAuthenticationStr).booleanValue();\n+                props.getProperty(PropertyNames.USE_AUTHENTICATION, DefaultValues.USE_AUTHENTICATION);\n+        final boolean useAuthentication = Boolean.valueOf(useAuthenticationStr).booleanValue();\n@@ -520,5 +460,4 @@\n-        final String defaultPasswordFileName = Utils.convertPath(\n-                getDefaultFileName(DefaultValues.PASSWORD_FILE_NAME));\n-        final String passwordFileName = Utils.convertPath(\n-                props.getProperty(PropertyNames.PASSWORD_FILE_NAME,\n-                        defaultPasswordFileName));\n+        final String defaultPasswordFileName =\n+                Utils.convertPath(defaultFileNamePrefix + DefaultValues.PASSWORD_FILE_NAME);\n+        final String passwordFileName =\n+                Utils.convertPath(props.getProperty(PropertyNames.PASSWORD_FILE_NAME, defaultPasswordFileName));\n@@ -527,5 +466,3 @@\n-        final String defaultAccessFileName = Utils.convertPath(\n-                getDefaultFileName(DefaultValues.ACCESS_FILE_NAME));\n-        final String accessFileName = Utils.convertPath(\n-                props.getProperty(PropertyNames.ACCESS_FILE_NAME,\n-                        defaultAccessFileName));\n+        final String defaultAccessFileName = Utils.convertPath(defaultFileNamePrefix + DefaultValues.ACCESS_FILE_NAME);\n+        final String accessFileName =\n+                Utils.convertPath(props.getProperty(PropertyNames.ACCESS_FILE_NAME, defaultAccessFileName));\n@@ -561,5 +498,1 @@\n-            final String[][] someCredentials = {\n-                    null,\n-                    {\"modify\", \"R&D\"},\n-                    {\"measure\", \"QED\"}\n-            };\n+            final String[][] someCredentials = {null, {\"modify\", \"R&D\"}, {\"measure\", \"QED\"}};\n@@ -573,4 +506,1 @@\n-            final String[][] badCredentials = {\n-                    {\"bad.user\", \"R&D\"},\n-                    {\"measure\", \"bad.password\"}\n-            };\n+            final String[][] badCredentials = {{\"bad.user\", \"R&D\"}, {\"measure\", \"bad.password\"}};\n@@ -580,2 +510,1 @@\n-            final String err = \"Test \" + confname + \" failed with \" +\n-                    errorCount + \" error(s)\";\n+            final String err = \"Test \" + confname + \" failed with \" + errorCount + \" error(s)\";\n@@ -595,2 +524,1 @@\n-    private String testConfiguration(File file)\n-            throws IOException, InterruptedException {\n+    private String testConfiguration(File file) throws IOException, InterruptedException {\n@@ -605,2 +533,1 @@\n-                    final String err = \"Failed to test configuration \" + file +\n-                            \": \" + x;\n+                    final String err = \"Failed to test configuration \" + file + \": \" + x;\n@@ -611,2 +538,1 @@\n-                final String config =\n-                        (path == null) ? \"Default config file\" : path;\n+                final String config = (path == null) ? \"Default config file\" : path;\n@@ -615,3 +541,1 @@\n-                System.out.println(\n-                        \"*** Testing configuration (port=\" + port + \"): \"\n-                                + path);\n+                System.out.println(\"*** Testing configuration (port=\" + port + \"): \" + path);\n@@ -620,2 +544,1 @@\n-                System.setProperty(\"com.sun.management.jmxremote.port\",\n-                        Integer.toString(port));\n+                System.setProperty(\"com.sun.management.jmxremote.port\", Integer.toString(port));\n@@ -625,2 +548,1 @@\n-                    System.getProperties()\n-                            .remove(\"com.sun.management.config.file\");\n+                    System.getProperties().remove(\"com.sun.management.config.file\");\n@@ -629,2 +551,1 @@\n-                log.trace(\"testConfiguration\",\n-                        \"com.sun.management.jmxremote.port=\" + port);\n+                log.trace(\"testConfiguration\", \"com.sun.management.jmxremote.port=\" + port);\n@@ -632,2 +553,1 @@\n-                    log.trace(\"testConfiguration\",\n-                            \"com.sun.management.config.file=\" + path);\n+                    log.trace(\"testConfiguration\", \"com.sun.management.config.file=\" + path);\n@@ -647,7 +567,4 @@\n-                    final String err = \"Failed to initialize connector:\" +\n-                            \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                            ((path != null) ?\n-                                    \"\\n\\tcom.sun.management.config.file=\" +\n-                                            path :\n-                                    \"\\n\\t\" + config) +\n-                            \"\\n\\tError is: \" + x;\n+                    final String err =\n+                            \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n+                                    \"\\n\\tError is: \" + x;\n@@ -663,4 +580,1 @@\n-                    JMXServiceURL url =\n-                            new JMXServiceURL(\"rmi\", null, 0,\n-                                    \"\/jndi\/rmi:\/\/localhost:\" +\n-                                            port + \"\/jmxrmi\");\n+                    JMXServiceURL url = new JMXServiceURL(\"rmi\", null, 0, \"\/jndi\/rmi:\/\/localhost:\" + port + \"\/jmxrmi\");\n@@ -671,3 +585,1 @@\n-                        final String err =\n-                                \"Failed to connect to agent {url=\" + url +\n-                                        \"}: \" + x;\n+                        final String err = \"Failed to connect to agent {url=\" + url + \"}: \" + x;\n@@ -679,3 +591,1 @@\n-                    final String err =\n-                            \"Failed to test configuration \" + config +\n-                                    \": \" + x;\n+                    final String err = \"Failed to test configuration \" + config + \": \" + x;\n@@ -694,2 +604,1 @@\n-                System.out.println(\n-                        \"Configuration \" + config + \" successfully tested\");\n+                System.out.println(\"Configuration \" + config + \" successfully tested\");\n@@ -700,5 +609,2 @@\n-        System.err.println(\n-                \"Cannot find a free port after \" + MAX_GET_FREE_PORT_TRIES +\n-                        \" tries\");\n-        return \"Failed: cannot find a free port after \" +\n-                MAX_GET_FREE_PORT_TRIES + \" tries\";\n+        System.err.println(\"Cannot find a free port after \" + MAX_GET_FREE_PORT_TRIES + \" tries\");\n+        return \"Failed: cannot find a free port after \" + MAX_GET_FREE_PORT_TRIES + \" tries\";\n@@ -713,4 +619,2 @@\n-    private String testConfigurationKo(File conf)\n-            throws InterruptedException, IOException {\n-        String errStr = null;\n-        errStr = testConfiguration(conf);\n+    private String testConfigurationKo(File conf) throws InterruptedException, IOException {\n+        String errStr = testConfiguration(conf);\n@@ -718,2 +622,1 @@\n-            return \"Configuration \" +\n-                    conf + \" should have failed!\";\n+            return \"Configuration \" + conf + \" should have failed!\";\n@@ -721,2 +624,1 @@\n-        System.out.println(\"Configuration \" +\n-                conf + \" failed as expected\");\n+        System.out.println(\"Configuration \" + conf + \" failed as expected\");\n@@ -735,2 +637,1 @@\n-    private String testConfigurationFile(String fileName)\n-            throws InterruptedException, IOException {\n+    private String testConfigurationFile(String fileName) throws InterruptedException, IOException {\n@@ -747,2 +648,1 @@\n-        return fileName +\n-                \": test file suffix must be one of [ko|ok].properties\";\n+        return fileName + \": test file suffix must be one of [ko|ok].properties\";\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiBootstrapTest.java","additions":111,"deletions":211,"binary":false,"changes":322,"status":"modified"},{"patch":"@@ -33,4 +33,3 @@\n-\n-import java.util.*;\n-\n-import javax.management.remote.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n@@ -40,0 +39,4 @@\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXConnectorServer;\n+\n@@ -77,2 +80,1 @@\n-    static TestLogger log =\n-            new TestLogger(\"RmiSslNoKeyStoreTest\");\n+    static TestLogger log = new TestLogger(\"RmiSslNoKeyStoreTest\");\n@@ -84,4 +86,2 @@\n-    final String DEFAULT_KEY_STORE =\n-            getDefaultStoreName(DefaultValues.KEYSTORE);\n-    final String KEY_STORE =\n-            System.getProperty(PropertyNames.KEYSTORE, DEFAULT_KEY_STORE);\n+    final String DEFAULT_KEY_STORE = defaultStoreNamePrefix + DefaultValues.KEYSTORE;\n+    final String KEY_STORE = System.getProperty(PropertyNames.KEYSTORE, DEFAULT_KEY_STORE);\n@@ -95,2 +95,1 @@\n-        final String keyStore =\n-                System.getProperty(PropertyNames.KEYSTORE);\n+        final String keyStore = System.getProperty(PropertyNames.KEYSTORE);\n@@ -98,3 +97,1 @@\n-            throw new IllegalArgumentException(\"System property \" +\n-                    PropertyNames.KEYSTORE +\n-                    \" not specified\");\n+            throw new IllegalArgumentException(\"System property \" + PropertyNames.KEYSTORE + \" not specified\");\n@@ -103,2 +100,1 @@\n-        final String keyStorePass =\n-                System.getProperty(PropertyNames.KEYSTORE_PASSWD);\n+        final String keyStorePass = System.getProperty(PropertyNames.KEYSTORE_PASSWD);\n@@ -117,3 +113,1 @@\n-            throw new IllegalArgumentException(\"System property \" +\n-                    PropertyNames.KEYSTORE_PASSWD +\n-                    \" not specified\");\n+            throw new IllegalArgumentException(\"System property \" + PropertyNames.KEYSTORE_PASSWD + \" not specified\");\n@@ -125,3 +119,1 @@\n-        final String keyStoreType =\n-                System.getProperty(PropertyNames.KEYSTORE_TYPE,\n-                        KeyStore.getDefaultType());\n+        final String keyStoreType = System.getProperty(PropertyNames.KEYSTORE_TYPE, KeyStore.getDefaultType());\n@@ -150,2 +142,1 @@\n-            throw new IllegalArgumentException(\"Argument is required for this\" +\n-                    \" test\");\n+            throw new IllegalArgumentException(\"Argument is required for this\" + \" test\");\n@@ -173,4 +164,2 @@\n-        final String defaultConf =\n-                getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-        final String confname =\n-                System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n+        final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+        final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -190,8 +179,4 @@\n-        final String useSslStr =\n-                props.getProperty(PropertyNames.USE_SSL,\n-                        DefaultValues.USE_SSL);\n-        final boolean useSsl =\n-                Boolean.valueOf(useSslStr).booleanValue();\n-\n-        log.debug(\"checkSslConfiguration\",\n-                PropertyNames.USE_SSL + \"=\" + useSsl);\n+        final String useSslStr = props.getProperty(PropertyNames.USE_SSL, DefaultValues.USE_SSL);\n+        final boolean useSsl = Boolean.valueOf(useSslStr).booleanValue();\n+\n+        log.debug(\"checkSslConfiguration\", PropertyNames.USE_SSL + \"=\" + useSsl);\n@@ -199,2 +184,1 @@\n-            final String msg =\n-                    PropertyNames.USE_SSL + \"=\" + useSsl + \", can't run test\";\n+            final String msg = PropertyNames.USE_SSL + \"=\" + useSsl + \", can't run test\";\n@@ -231,2 +215,1 @@\n-            System.out.println(\"*** Testing configuration (port=\" +\n-                    port + \"): \" + path);\n+            System.out.println(\"*** Testing configuration (port=\" + port + \"): \" + path);\n@@ -235,2 +218,1 @@\n-            System.setProperty(\"com.sun.management.jmxremote.port\",\n-                    Integer.toString(port));\n+            System.setProperty(\"com.sun.management.jmxremote.port\", Integer.toString(port));\n@@ -240,2 +222,1 @@\n-                System.getProperties().\n-                        remove(\"com.sun.management.config.file\");\n+                System.getProperties().remove(\"com.sun.management.config.file\");\n@@ -244,2 +225,1 @@\n-            log.trace(\"testConfiguration\",\n-                    \"com.sun.management.jmxremote.port=\" + port);\n+            log.trace(\"testConfiguration\", \"com.sun.management.jmxremote.port=\" + port);\n@@ -247,2 +227,1 @@\n-                log.trace(\"testConfiguration\",\n-                        \"com.sun.management.config.file=\" + path);\n+                log.trace(\"testConfiguration\", \"com.sun.management.config.file=\" + path);\n@@ -257,5 +236,2 @@\n-                final String err = \"Failed to initialize connector:\" +\n-                        \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                        ((path != null) ?\n-                                \"\\n\\tcom.sun.management.config.file=\" + path :\n-                                \"\\n\\t\" + config) +\n+                final String err = \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                        ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n@@ -273,2 +249,1 @@\n-                JMXConnector cc =\n-                        JMXConnectorFactory.connect(cs.getAddress(), null);\n+                JMXConnector cc = JMXConnectorFactory.connect(cs.getAddress(), null);\n@@ -277,5 +252,2 @@\n-                final String err = \"Failed to initialize connector:\" +\n-                        \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                        ((path != null) ?\n-                                \"\\n\\tcom.sun.management.config.file=\" + path :\n-                                \"\\n\\t\" + config) +\n+                final String err = \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                        ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n@@ -299,5 +271,2 @@\n-            final String err = \"Bootstrap should have failed:\" +\n-                    \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                    ((path != null) ?\n-                            \"\\n\\tcom.sun.management.config.file=\" + path :\n-                            \"\\n\\t\" + config);\n+            final String err = \"Bootstrap should have failed:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config);\n@@ -307,5 +276,2 @@\n-            final String err = \"Failed to test bootstrap for:\" +\n-                    \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                    ((path != null) ?\n-                            \"\\n\\tcom.sun.management.config.file=\" + path :\n-                            \"\\n\\t\" + config) +\n+            final String err = \"Failed to test bootstrap for:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiSslNoKeyStoreTest.java","additions":37,"deletions":71,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -24,0 +24,6 @@\n+\/*\n+ * @library \/test\/lib\n+ * *\/\n+\n+import jdk.test.lib.Platform;\n+\n@@ -35,1 +41,5 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n@@ -47,2 +57,4 @@\n-    static final boolean isWindows = System.getProperty(\"os.name\").contains(\n-            \"Win\");\n+    static final String defaultFileNamePrefix =\n+            System.getProperty(\"java\" + \".home\") + SEP + \"conf\" + SEP + \"management\" + SEP;\n+\n+    static final String defaultStoreNamePrefix = SRC + SEP + \"ssl\" + SEP;\n@@ -90,4 +102,2 @@\n-        String PASSWORD_FILE_NAME =\n-                \"com.sun.management.jmxremote.password.file\";\n-        String ACCESS_FILE_NAME =\n-                \"com.sun.management.jmxremote.access.file\";\n+        String PASSWORD_FILE_NAME = \"com.sun.management.jmxremote.password.file\";\n+        String ACCESS_FILE_NAME = \"com.sun.management.jmxremote.access.file\";\n@@ -101,36 +111,4 @@\n-        String SSL_ENABLED_CIPHER_SUITES =\n-                \"com.sun.management.jmxremote.ssl.enabled.cipher.suites\";\n-        String SSL_ENABLED_PROTOCOLS =\n-                \"com.sun.management.jmxremote.ssl.enabled.protocols\";\n-        String SSL_NEED_CLIENT_AUTH =\n-                \"com.sun.management.jmxremote.ssl.need.client.auth\";\n-        String SSL_CLIENT_ENABLED_CIPHER_SUITES =\n-                \"javax.rmi.ssl.client.enabledCipherSuites\";\n-    }\n-\n-    static String getDefaultFileName(String basename) {\n-        final StringBuffer defaultFileName =\n-                new StringBuffer(System.getProperty(\"java.home\"))\n-                        .append(SEP)\n-                        .append(\"conf\")\n-                        .append(SEP)\n-                        .append(\"management\")\n-                        .append(SEP)\n-                        .append(basename);\n-        return defaultFileName.toString();\n-    }\n-\n-    \/**\n-     * Compute the full path name for a default file.\n-     *\n-     * @param basename basename (with extension) of the default file.\n-     * @return ${JRE}\/conf\/management\/${basename}\n-     **\/\n-    static String getDefaultStoreName(String basename) {\n-        final StringBuffer defaultFileName =\n-                new StringBuffer(SRC)\n-                        .append(SEP)\n-                        .append(\"ssl\")\n-                        .append(SEP)\n-                        .append(basename);\n-        return defaultFileName.toString();\n+        String SSL_ENABLED_CIPHER_SUITES = \"com.sun.management.jmxremote.ssl.enabled.cipher.suites\";\n+        String SSL_ENABLED_PROTOCOLS = \"com.sun.management.jmxremote.ssl.enabled.protocols\";\n+        String SSL_NEED_CLIENT_AUTH = \"com.sun.management.jmxremote.ssl.need.client.auth\";\n+        String SSL_CLIENT_ENABLED_CIPHER_SUITES = \"javax.rmi.ssl.client.enabledCipherSuites\";\n@@ -143,2 +121,2 @@\n-     * @return                files who match the filename pattern\n-     * @throws IOException    if error occurs\n+     * @return files who match the filename pattern\n+     * @throws IOException if error occurs\n@@ -146,2 +124,1 @@\n-    static List<Path> prepareTestFiles(String filenamePattern)\n-            throws IOException {\n+    static List<Path> prepareTestFiles(String filenamePattern) throws IOException {\n@@ -149,2 +126,1 @@\n-        List<Path> files = Utils.findFiles(Paths.get(SRC),\n-                (dir, name) -> name.matches(filenamePattern));\n+        List<Path> files = Utils.findFiles(Paths.get(SRC), (dir, name) -> name.matches(filenamePattern));\n@@ -152,2 +128,1 @@\n-        final Function<String, String> removeSuffix = (s) -> s.substring(0,\n-                s.lastIndexOf(\".\"));\n+        final Function<String, String> removeSuffix = (s) -> s.substring(0, s.lastIndexOf(\".\"));\n@@ -155,3 +130,2 @@\n-        List<Path> propertyFiles = Utils.copyFiles(files, Paths.get(DEST),\n-                removeSuffix,\n-                StandardCopyOption.REPLACE_EXISTING);\n+        List<Path> propertyFiles =\n+                Utils.copyFiles(files, Paths.get(DEST), removeSuffix, StandardCopyOption.REPLACE_EXISTING);\n@@ -159,4 +133,4 @@\n-        if (isWindows) {\n-            Utils.replaceFilesString(propertyFiles,\n-                    (s) -> s.replace(TEST_SRC, DEST)\n-                            .replaceAll(\"[\/\\\\\\\\]\", \"\\\\\\\\\\\\\\\\\"));\n+        \/\/ replace @TEST-SRC@ with the path of the current test folder\n+        if (Platform.isWindows()) {\n+            \/\/ On Windows, also replace forward slash or single backslash to double backslashes\n+            Utils.replaceFilesString(propertyFiles, (s) -> s.replace(TEST_SRC, DEST).replaceAll(\"[\/\\\\\\\\]\", \"\\\\\\\\\\\\\\\\\"));\n@@ -164,2 +138,1 @@\n-            Utils.replaceFilesString(propertyFiles,\n-                    (s) -> s.replace(TEST_SRC, DEST));\n+            Utils.replaceFilesString(propertyFiles, (s) -> s.replace(TEST_SRC, DEST));\n@@ -180,2 +153,1 @@\n-    static void grantAccess(Path file, AccessControl access)\n-            throws IOException {\n+    static void grantAccess(Path file, AccessControl access) throws IOException {\n@@ -184,4 +156,2 @@\n-            String perms = access == AccessControl.OWNER ? \"rw-------\" :\n-                    \"rwxrwxrwx\";\n-            Files.setPosixFilePermissions(file,\n-                    PosixFilePermissions.fromString(perms));\n+            String perms = access == AccessControl.OWNER ? \"rw-------\" : \"rwxrwxrwx\";\n+            Files.setPosixFilePermissions(file, PosixFilePermissions.fromString(perms));\n@@ -189,2 +159,1 @@\n-            AclFileAttributeView view = Files.getFileAttributeView(file,\n-                    AclFileAttributeView.class);\n+            AclFileAttributeView view = Files.getFileAttributeView(file, AclFileAttributeView.class);\n@@ -194,2 +163,1 @@\n-                    if (thisEntry.principal().getName()\n-                            .equals(view.getOwner().getName())) {\n+                    if (thisEntry.principal().getName().equals(view.getOwner().getName())) {\n@@ -203,2 +171,2 @@\n-                    if (!thisEntry.principal().getName().contains(\"NULL SID\")\n-                            && thisEntry.type() != AclEntryType.ALLOW) {\n+                    if (!thisEntry.principal().getName().contains(\"NULL SID\") &&\n+                            thisEntry.type() != AclEntryType.ALLOW) {\n@@ -224,2 +192,1 @@\n-    static void grantFilesAccess(List<Path> files, AccessControl access)\n-            throws IOException {\n+    static void grantFilesAccess(List<Path> files, AccessControl access) throws IOException {\n@@ -240,7 +207,2 @@\n-        List<Path> files = Arrays.stream(sslSource.toFile().listFiles())\n-                .map(File::toPath)\n-                .collect(Collectors.toList());\n-        Utils.copyFiles(\n-                files,\n-                sslTarget,\n-                StandardCopyOption.REPLACE_EXISTING);\n+        List<Path> files = Arrays.stream(sslSource.toFile().listFiles()).map(File::toPath).collect(Collectors.toList());\n+        Utils.copyFiles(files, sslTarget, StandardCopyOption.REPLACE_EXISTING);\n@@ -249,2 +211,1 @@\n-            grantAccess(sslTarget.resolve(file.getFileName()),\n-                    AccessControl.EVERYONE);\n+            grantAccess(sslTarget.resolve(file.getFileName()), AccessControl.EVERYONE);\n@@ -259,1 +220,1 @@\n-     * @return       configuration files\n+     * @return configuration files\n@@ -269,0 +230,1 @@\n+     *\n@@ -270,1 +232,1 @@\n-     * @return       configuration files\n+     * @return configuration files\n@@ -282,1 +244,1 @@\n-     * @return       configuration files\n+     * @return configuration files\n@@ -293,3 +255,3 @@\n-     * @param prefix  filename prefix\n-     * @param suffix  filename suffix\n-     * @return        configuration files\n+     * @param prefix filename prefix\n+     * @param suffix filename suffix\n+     * @return configuration files\n@@ -297,1 +259,1 @@\n-     static File[] findAllConfigurationFiles(String prefix, String suffix) {\n+    static File[] findAllConfigurationFiles(String prefix, String suffix) {\n@@ -299,2 +261,1 @@\n-        final FilenameFilter filter =\n-                FilenameFilterFactory.prefixSuffix(prefix, suffix);\n+        final FilenameFilter filter = FilenameFilterFactory.prefixSuffix(prefix, suffix);\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiTestBase.java","additions":53,"deletions":92,"binary":false,"changes":145,"status":"modified"}]}