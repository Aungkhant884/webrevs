{"files":[{"patch":"@@ -3105,1 +3105,3 @@\n-            t = ((Attribute.Class)l.head.snd).getValue();\n+            if (l.head.snd instanceof Attribute.Class) {\n+                t = ((Attribute.Class)l.head.snd).getValue();\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270139\n+ * @summary Verify error recovery in JShell\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ *          jdk.jshell\/jdk.internal.jshell.tool\n+ * @library \/tools\/lib\n+ * @build KullaTesting TestingInputStream ExpectedDiagnostic toolbox.ToolBox Compiler\n+ * @run testng ErrorRecoveryTest\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static jdk.jshell.Snippet.Status.NONEXISTENT;\n+import static jdk.jshell.Snippet.Status.RECOVERABLE_NOT_DEFINED;\n+\n+@Test\n+public class ErrorRecoveryTest extends KullaTesting {\n+\n+    public void testExceptionErrors() {\n+        assertEval(\"import java.lang.annotation.Repeatable;\");\n+        assertEval(\"\"\"\n+                   @Repeatable(FooContainer.class)\n+                   @interface Foo { int value(); }\n+                   \"\"\",\n+                   ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_NOT_DEFINED, false, null));\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/ErrorRecoveryTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270139\n+ * @summary Verify error recovery w.r.t. annotations\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main AnnotationRecovery\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class AnnotationRecovery extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public AnnotationRecovery() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AnnotationRecovery t = new AnnotationRecovery();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testRepeatableAnnotationMissingContainer() throws Exception {\n+        String code = \"\"\"\n+                      import java.lang.annotation.Repeatable;\n+\n+                      @Repeatable(TestContainer.class)\n+                      @interface Test { int value(); }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:3:13: compiler.err.cant.resolve: kindname.class, TestContainer, , \",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testRepeatableAnnotationWrongAttribute() throws Exception {\n+        String code = \"\"\"\n+                      import java.lang.annotation.Repeatable;\n+\n+                      @Repeatable(wrong=TestContainer.class)\n+                      @interface Test { int value(); }\n+                      @interface TestContainer { Test value(); }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:3:13: compiler.err.cant.resolve.location.args: kindname.method, wrong, , , (compiler.misc.location: kindname.annotation, java.lang.annotation.Repeatable, null)\",\n+                \"Test.java:3:1: compiler.err.annotation.missing.default.value: java.lang.annotation.Repeatable, value\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/AnnotationRecovery.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}