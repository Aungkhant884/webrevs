{"files":[{"patch":"@@ -152,0 +152,1 @@\n+    \/\/ Verify that x and y are integers in the interval [0, p - 1].\n@@ -163,3 +164,3 @@\n-    \/*\n-     * Check whether a public key is valid.\n-     *\/\n+    \/\/ Check whether a public key is valid, following the ECC\n+    \/\/ Full Public-key Validation Routine (See section 5.6.2.3.3,\n+    \/\/ NIST SP 800-56A Revision 3).\n@@ -171,1 +172,15 @@\n-        \/\/ ensure that integers are in proper range\n+        \/\/ Note: Per the NIST 800-56A specification, it is required\n+        \/\/ to verify that the public key is not the identity element\n+        \/\/ (point of infinity).  However, the point of infinity has no\n+        \/\/ affine coordinates, although the point of infinity could\n+        \/\/ be encoded.  Per IEEE 1363.3-2013 (see section A.6.4.1),\n+        \/\/ the point of inifinity is represented by a pair of\n+        \/\/ coordinates (x, y) not on the curve.  For EC prime finite\n+        \/\/ field (q = p^m), the point of infinity is (0, 0) unless\n+        \/\/ b = 0; in which case it is (0, 1).\n+        \/\/\n+        \/\/ It means that this verification could be covered by the\n+        \/\/ validation that the public key is on the curve.  As will be\n+        \/\/ verified in the following steps.\n+\n+        \/\/ Ensure that integers are in proper range.\n@@ -179,1 +194,1 @@\n-        \/\/ ensure the point is on the curve\n+        \/\/ Ensure the point is on the curve.\n@@ -188,1 +203,4 @@\n-        \/\/ check the order of the point\n+        \/\/ Check the order of the point.\n+        \/\/\n+        \/\/ Compute nQ (using elliptic curve arithmetic), and verify that\n+        \/\/ nQ is the the identity element.\n@@ -198,1 +216,0 @@\n-\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"}]}