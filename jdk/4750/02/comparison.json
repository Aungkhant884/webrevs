{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,2 +121,1 @@\n-  \/\/ Warning:  in LP64, Amalloc_4 is really Amalloc_8\n-  void *Amalloc_4(size_t x) {\n+  void *AmallocWords(size_t x) {\n","filename":"src\/hotspot\/share\/adlc\/arena.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket) * _size);\n+  _bin = (bucket*)_arena->AmallocWords(sizeof(bucket) * _size);\n@@ -118,1 +118,1 @@\n-    nb->_keyvals = (const void**)_arena->Amalloc_4( sizeof(void *)*nb->_max*2 );\n+    nb->_keyvals = (const void**)_arena->AmallocWords( sizeof(void *)*nb->_max*2 );\n@@ -141,1 +141,1 @@\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket)*_size);\n+  _bin = (bucket*)_arena->AmallocWords(sizeof(bucket)*_size);\n@@ -145,1 +145,1 @@\n-    _bin[i]._keyvals=(const void**)_arena->Amalloc_4( sizeof(void *)*_bin[i]._max*2);\n+    _bin[i]._keyvals=(const void**)_arena->AmallocWords( sizeof(void *)*_bin[i]._max*2);\n@@ -198,1 +198,1 @@\n-      b->_keyvals = (const void**)_arena->Amalloc_4( sizeof(void *)*b->_max*2 );\n+      b->_keyvals = (const void**)_arena->AmallocWords( sizeof(void *)*b->_max*2 );\n","filename":"src\/hotspot\/share\/adlc\/dict2.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-      live = new (Compile::current()->comp_arena()->Amalloc_4(sizeof(RegMask))) RegMask();\n+      live = new (Compile::current()->comp_arena()->AmallocWords(sizeof(RegMask))) RegMask();\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket) * _size);\n+  _bin = (bucket*)_arena->AmallocWords(sizeof(bucket) * _size);\n@@ -77,1 +77,1 @@\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket) * _size);\n+  _bin = (bucket*)_arena->AmallocWords(sizeof(bucket) * _size);\n@@ -84,1 +84,1 @@\n-  _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket) * _size);\n+  _bin = (bucket*)_arena->AmallocWords(sizeof(bucket) * _size);\n@@ -90,1 +90,1 @@\n-    _bin[i]._keyvals = (void**)_arena->Amalloc_4(sizeof(void*) * _bin[i]._max * 2);\n+    _bin[i]._keyvals = (void**)_arena->AmallocWords(sizeof(void*) * _bin[i]._max * 2);\n@@ -121,1 +121,1 @@\n-    nb->_keyvals = (void**)_arena->Amalloc_4(sizeof(void* ) * nb->_max * 2);\n+    nb->_keyvals = (void**)_arena->AmallocWords(sizeof(void* ) * nb->_max * 2);\n@@ -171,1 +171,1 @@\n-      b->_keyvals = (void**)_arena->Amalloc_4(sizeof(void*) * b->_max * 2);\n+      b->_keyvals = (void**)_arena->AmallocWords(sizeof(void*) * b->_max * 2);\n","filename":"src\/hotspot\/share\/libadt\/dict.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -340,4 +340,0 @@\n-void Arena::signal_out_of_memory(size_t sz, const char* whence) const {\n-  vm_exit_out_of_memory(sz, OOM_MALLOC_ERROR, \"%s\", whence);\n-}\n-\n@@ -456,1 +452,1 @@\n-  char** save = (char**)internal_malloc_4(sizeof(char*));\n+  char** save = (char**)internal_malloc_only(sizeof(char*));\n@@ -459,13 +455,0 @@\n-\n-\/\/ for debugging with UseMallocOnly\n-void* Arena::internal_malloc_4(size_t x) {\n-  assert( (x&(sizeof(char*)-1)) == 0, \"misaligned size\" );\n-  check_for_overflow(x, \"Arena::internal_malloc_4\");\n-  if (_hwm + x > _max) {\n-    return grow(x);\n-  } else {\n-    char *old = _hwm;\n-    _hwm += x;\n-    return old;\n-  }\n-}\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-  debug_only(void* internal_malloc_4(size_t x);)\n@@ -106,9 +105,8 @@\n-  void signal_out_of_memory(size_t request, const char* whence) const;\n-\n-  bool check_for_overflow(size_t request, const char* whence,\n-      AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) const {\n-    if (UINTPTR_MAX - request < (uintptr_t)_hwm) {\n-      if (alloc_failmode == AllocFailStrategy::RETURN_NULL) {\n-        return false;\n-      }\n-      signal_out_of_memory(request, whence);\n+  void* internal_malloc_only(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM)  {\n+    assert(is_aligned(x, BytesPerWord), \"misaligned size\");\n+    if (pointer_delta(_max, _hwm, 1) >= x) {\n+      char *old = _hwm;\n+      _hwm += x;\n+      return old;\n+    } else {\n+      return grow(x, alloc_failmode);\n@@ -116,2 +114,1 @@\n-    return true;\n- }\n+  }\n@@ -138,1 +135,1 @@\n-    x = ARENA_ALIGN(x);\n+    x = ARENA_ALIGN(x);  \/\/ note for 32 bits this should align _hwm as well.\n@@ -140,9 +137,1 @@\n-    if (!check_for_overflow(x, \"Arena::Amalloc\", alloc_failmode)) {\n-      return NULL;\n-    } else if (_hwm + x > _max) {\n-      return grow(x, alloc_failmode);\n-    } else {\n-      char *old = _hwm;\n-      _hwm += x;\n-      return old;\n-    }\n+    return internal_malloc_only(x, alloc_failmode);\n@@ -153,1 +142,1 @@\n-  void* Amalloc_4(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) {\n+  void* AmallocWords(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) {\n@@ -156,9 +145,1 @@\n-    if (!check_for_overflow(x, \"Arena::Amalloc_4\", alloc_failmode)) {\n-      return NULL;\n-    } else if (_hwm + x > _max) {\n-      return grow(x, alloc_failmode);\n-    } else {\n-      char *old = _hwm;\n-      _hwm += x;\n-      return old;\n-    }\n+    return internal_malloc_only(x, alloc_failmode);\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":13,"deletions":32,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    char** save = (char**)internal_malloc_4(sizeof(char*));\n+    char** save = (char**)internal_malloc_only(sizeof(char*));\n","filename":"src\/hotspot\/share\/memory\/resourceArea.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  address res = (address)arena->Amalloc_4(alloc_size);\n+  address res = (address)arena->AmallocWords(alloc_size);\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-  char *mem = (char*)arena()->Amalloc_4(sizeof(BitBlock) *\n+  char *mem = (char*)arena()->AmallocWords(sizeof(BitBlock) *\n@@ -236,1 +236,1 @@\n-      (IndexSet::BitBlock**) arena()->Amalloc_4(sizeof(IndexSet::BitBlock**) * _max_blocks);\n+      (IndexSet::BitBlock**) arena()->AmallocWords(sizeof(IndexSet::BitBlock**) * _max_blocks);\n@@ -266,1 +266,1 @@\n-    _blocks = (IndexSet::BitBlock**) arena()->Amalloc_4(sizeof(IndexSet::BitBlock*) * _max_blocks);\n+    _blocks = (IndexSet::BitBlock**) arena()->AmallocWords(sizeof(IndexSet::BitBlock*) * _max_blocks);\n@@ -291,1 +291,1 @@\n-    _blocks = (IndexSet::BitBlock**) arena->Amalloc_4(sizeof(IndexSet::BitBlock*) * _max_blocks);\n+    _blocks = (IndexSet::BitBlock**) arena->AmallocWords(sizeof(IndexSet::BitBlock*) * _max_blocks);\n","filename":"src\/hotspot\/share\/opto\/indexSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    return C->node_arena()->Amalloc_4(x);\n+    return C->node_arena()->AmallocWords(x);\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -445,1 +445,1 @@\n-  RegMask *rms = (RegMask*)C->comp_arena()->Amalloc_4(sizeof(RegMask) * NOF_STACK_MASKS);\n+  RegMask *rms = (RegMask*)C->comp_arena()->AmallocWords(sizeof(RegMask) * NOF_STACK_MASKS);\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-    _in = (Node **) ((char *) (C->node_arena()->Amalloc_4(req * sizeof(void*))));\n+    _in = (Node **) ((char *) (C->node_arena()->AmallocWords(req * sizeof(void*))));\n@@ -502,1 +502,1 @@\n-  Node *n = (Node*)C->node_arena()->Amalloc_4(size_of() + _max*sizeof(Node*));\n+  Node *n = (Node*)C->node_arena()->AmallocWords(size_of() + _max*sizeof(Node*));\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-    Node* n = (Node*)C->node_arena()->Amalloc_4(x);\n+    Node* n = (Node*)C->node_arena()->AmallocWords(x);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-  const Type **fboth =(const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **fboth =(const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -506,1 +506,1 @@\n-  const Type **ffalse =(const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **ffalse =(const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -511,1 +511,1 @@\n-  const Type **fneither =(const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **fneither =(const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -516,1 +516,1 @@\n-  const Type **ftrue =(const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **ftrue =(const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -521,1 +521,1 @@\n-  const Type **floop =(const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **floop =(const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -536,1 +536,1 @@\n-  const Type **fsc = (const Type**)shared_type_arena->Amalloc_4(2*sizeof(Type*));\n+  const Type **fsc = (const Type**)shared_type_arena->AmallocWords(2*sizeof(Type*));\n@@ -2059,1 +2059,1 @@\n-  const Type **flds = (const Type **)(Compile::current()->type_arena()->Amalloc_4((TypeFunc::Parms+arg_cnt)*sizeof(Type*) ));\n+  const Type **flds = (const Type **)(Compile::current()->type_arena()->AmallocWords((TypeFunc::Parms+arg_cnt)*sizeof(Type*) ));\n@@ -2087,1 +2087,1 @@\n-    const Type **fields = (const Type **)(Compile::current()->type_arena()->Amalloc_4( _cnt*sizeof(Type*) ));\n+    const Type **fields = (const Type **)(Compile::current()->type_arena()->AmallocWords( _cnt*sizeof(Type*) ));\n@@ -2101,1 +2101,1 @@\n-  const Type **fields = (const Type **)(Compile::current()->type_arena()->Amalloc_4( _cnt*sizeof(Type*) ));\n+  const Type **fields = (const Type **)(Compile::current()->type_arena()->AmallocWords( _cnt*sizeof(Type*) ));\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-    return compile->type_arena()->Amalloc_4(x);\n+    return compile->type_arena()->AmallocWords(x);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,1 +456,2 @@\n-          \"Use only malloc\/free for allocation (no resource area\/arena)\")   \\\n+          \"Use only malloc\/free for allocation (no resource area\/arena). \"  \\\n+          \"Used to help diagnose memory stomping bugs.\")                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -195,5 +195,2 @@\n-#ifdef ASSERT\n-    oop* handle = (oop*) (UseMallocOnly ? internal_malloc_4(oopSize) : Amalloc_4(oopSize));\n-#else\n-    oop* handle = (oop*) Amalloc_4(oopSize);\n-#endif\n+    \/\/ Ignore UseMallocOnly by allocating only in arena.\n+    oop* handle = (oop*)internal_malloc_only(oopSize);\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}