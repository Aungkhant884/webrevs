{"files":[{"patch":"@@ -38,1 +38,1 @@\n-define_pd_global(bool, InlineIntrinsics,             false); \/\/ TODO: ARM\n+define_pd_global(bool, InlineIntrinsics,             true );\n","filename":"src\/hotspot\/cpu\/arm\/c1_globals_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-define_pd_global(bool, InlineIntrinsics,             false);\n+define_pd_global(bool, InlineIntrinsics,             true);\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,5 +127,66 @@\n-  \/\/ TODO: ARM\n-  return NULL;\n-\n-  address entry_point = __ pc();\n-  STOP(\"generate_math_entry\");\n+  address entry_point = NULL;\n+  Register continuation = LR;\n+  bool use_runtime_function = false;\n+  switch (kind) {\n+  case Interpreter::java_lang_math_abs:\n+    entry_point = __ pc();\n+#ifdef __SOFTFP__\n+    use_runtime_function = true;\n+    __ ldrd(R0, Address(SP));\n+#else \/\/ !__SOFTFP__\n+    __ ldr_double(D0, Address(SP));\n+    __ abs_double(D0, D0);\n+#endif \/\/ __SOFTFP__\n+    break;\n+  case Interpreter::java_lang_math_sqrt:\n+    entry_point = __ pc();\n+#ifdef __SOFTFP__\n+    use_runtime_function = true;\n+    __ ldrd(R0, Address(SP));\n+#else \/\/ !__SOFTFP__\n+    __ ldr_double(D0, Address(SP));\n+    __ sqrt_double(D0, D0);\n+#endif \/\/ __SOFTFP__\n+    break;\n+  case Interpreter::java_lang_math_sin:\n+  case Interpreter::java_lang_math_cos:\n+  case Interpreter::java_lang_math_tan:\n+  case Interpreter::java_lang_math_log:\n+  case Interpreter::java_lang_math_log10:\n+  case Interpreter::java_lang_math_exp:\n+    entry_point = __ pc();\n+    use_runtime_function = true;\n+#ifdef __SOFTFP__\n+    __ ldrd(R0, Address(SP));\n+#else \/\/ !__SOFTFP__\n+    __ ldr_double(D0, Address(SP));\n+#endif \/\/ __SOFTFP__\n+    break;\n+  case Interpreter::java_lang_math_pow:\n+    entry_point = __ pc();\n+    use_runtime_function = true;\n+#ifdef __SOFTFP__\n+    __ ldrd(R0, Address(SP, 2 * Interpreter::stackElementSize));\n+    __ ldrd(R2, Address(SP));\n+#else \/\/ !__SOFTFP__\n+    __ ldr_double(D0, Address(SP, 2 * Interpreter::stackElementSize));\n+    __ ldr_double(D1, Address(SP));\n+#endif \/\/ __SOFTFP__\n+    break;\n+  case Interpreter::java_lang_math_fmaD:\n+  case Interpreter::java_lang_math_fmaF:\n+    \/\/ TODO: Implement intrinsic\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+\n+  if (entry_point != NULL) {\n+    __ mov(SP, Rsender_sp);\n+    if (use_runtime_function) {\n+      __ mov(Rtmp_save0, LR);\n+      continuation = Rtmp_save0;\n+      generate_math_runtime_call(kind);\n+    }\n+    __ ret(continuation);\n+  }\n@@ -135,0 +196,39 @@\n+void TemplateInterpreterGenerator::generate_math_runtime_call(AbstractInterpreter::MethodKind kind) {\n+  address fn;\n+  switch (kind) {\n+#ifdef __SOFTFP__\n+  case Interpreter::java_lang_math_abs:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dabs);\n+    break;\n+  case Interpreter::java_lang_math_sqrt:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dsqrt);\n+    break;\n+#endif \/\/ __SOFTFP__\n+  case Interpreter::java_lang_math_sin:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dsin);\n+    break;\n+  case Interpreter::java_lang_math_cos:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dcos);\n+    break;\n+  case Interpreter::java_lang_math_tan:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dtan);\n+    break;\n+  case Interpreter::java_lang_math_log:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dlog);\n+    break;\n+  case Interpreter::java_lang_math_log10:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dlog10);\n+    break;\n+  case Interpreter::java_lang_math_exp:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dexp);\n+    break;\n+  case Interpreter::java_lang_math_pow:\n+    fn = CAST_FROM_FN_PTR(address, SharedRuntime::dpow);\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+    fn = NULL; \/\/ silence \"maybe uninitialized\" compiler warnings\n+  }\n+  __ call_VM_leaf(fn);\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":105,"deletions":5,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -117,0 +117,4 @@\n+#ifdef ARM32\n+  void generate_math_runtime_call(AbstractInterpreter::MethodKind kind);\n+#endif \/\/ ARM32\n+\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}