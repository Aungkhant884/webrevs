{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-  int wait(jlong millis);\n+  int wait(uint64_t millis);\n","filename":"src\/hotspot\/os\/posix\/mutex_posix.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1872,2 +1872,1 @@\n-int PlatformMonitor::wait(jlong millis) {\n-  assert(millis >= 0, \"negative timeout\");\n+int PlatformMonitor::wait(uint64_t millis) {\n@@ -1878,1 +1877,2 @@\n-    \/\/ MAX_SECS anyway, so just do that here.\n+    \/\/ MAX_SECS anyway, so just do that here. This also handles values\n+    \/\/ larger than int64_t max.\n@@ -1880,1 +1880,1 @@\n-      millis = jlong(MAX_SECS) * MILLIUNITS;\n+      millis = uint64_t(MAX_SECS) * MILLIUNITS;\n@@ -1882,1 +1882,1 @@\n-    to_abstime(&abst, millis_to_nanos(millis), false, false);\n+    to_abstime(&abst, millis_to_nanos(int64_t(millis)), false, false);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  int wait(jlong millis);\n+  int wait(uint64_t millis);\n","filename":"src\/hotspot\/os\/windows\/mutex_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -5361,2 +5361,1 @@\n-int PlatformMonitor::wait(jlong millis) {\n-  assert(millis >= 0, \"negative timeout\");\n+int PlatformMonitor::wait(uint64_t millis) {\n@@ -5364,0 +5363,4 @@\n+  \/\/ The timeout parameter for SleepConditionVariableCS is a DWORD\n+  if (millis > UINT_MAX) {\n+    millis = UINT_MAX;\n+  }\n@@ -5365,1 +5368,1 @@\n-                                        millis == 0 ? INFINITE : millis);\n+                                        millis == 0 ? INFINITE : (DWORD)millis);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,1 +212,2 @@\n-bool Monitor::wait_without_safepoint_check(int64_t timeout) {\n+\/\/ timeout is in milliseconds - with zero meaning never timeout\n+bool Monitor::wait_without_safepoint_check(uint64_t timeout) {\n@@ -215,2 +216,0 @@\n-  \/\/ timeout is in milliseconds - with zero meaning never timeout\n-  assert(timeout >= 0, \"negative timeout\");\n@@ -232,1 +231,2 @@\n-bool Monitor::wait(int64_t timeout) {\n+\/\/ timeout is in milliseconds - with zero meaning never timeout\n+bool Monitor::wait(uint64_t timeout) {\n@@ -237,2 +237,0 @@\n-  \/\/ timeout is in milliseconds - with zero meaning never timeout\n-  assert(timeout >= 0, \"negative timeout\");\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,2 +215,2 @@\n-  bool wait(int64_t timeout = 0);\n-  bool wait_without_safepoint_check(int64_t timeout = 0);\n+  bool wait(uint64_t timeout = 0);\n+  bool wait_without_safepoint_check(uint64_t timeout = 0);\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}