{"files":[{"patch":"@@ -149,2 +149,1 @@\n-  assert(ZThread::is_java() || ZThread::is_vm() || ZThread::is_runtime_worker(),\n-         \"Should be a Java, VM or Runtime worker thread\");\n+  assert(!ZThread::is_worker(), \"Should not be a worker thread\");\n@@ -211,3 +210,0 @@\n-  assert(ZThread::is_java() || ZThread::is_vm() || ZThread::is_worker() || ZThread::is_runtime_worker(),\n-         \"Unknown thread\");\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+    _thread_oop(thread->threadObj()),\n@@ -134,0 +135,1 @@\n+  oop _thread_oop;\n@@ -193,1 +195,1 @@\n-      ev->set_state(java_lang_Thread::get_thread_status(jth->threadObj()));\n+      ev->set_state(java_lang_Thread::get_thread_status(_thread_oop));\n@@ -205,1 +207,1 @@\n-    _closure(closure), _jt(jt), _stacktrace(frames, max_frames), _success(false) {\n+    _closure(closure), _jt(jt), _thread_oop(jt->threadObj()), _stacktrace(frames, max_frames), _success(false) {\n@@ -214,0 +216,1 @@\n+  oop _thread_oop;\n@@ -218,1 +221,1 @@\n-static void write_native_event(JfrThreadSampleClosure& closure, JavaThread* jt) {\n+static void write_native_event(JfrThreadSampleClosure& closure, JavaThread* jt, oop thread_oop) {\n@@ -222,1 +225,1 @@\n-  ev->set_state(java_lang_Thread::get_thread_status(jt->threadObj()));\n+  ev->set_state(java_lang_Thread::get_thread_status(thread_oop));\n@@ -244,1 +247,1 @@\n-    write_native_event(_closure, _jt);\n+    write_native_event(_closure, _jt, _thread_oop);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}