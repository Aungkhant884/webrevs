{"files":[{"patch":"@@ -864,0 +864,2 @@\n+    case 0x10: \/\/ movups\n+    case 0x11: \/\/ movups\n@@ -2476,0 +2478,11 @@\n+void Assembler::movddup(XMMRegister dst, Address src) {\n+  NOT_LP64(assert(VM_Version::supports_sse3(), \"\"));\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* rex_w *\/ VM_Version::supports_evex(), \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_DUP, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_rex_vex_w_reverted();\n+  simd_prefix(dst, xnoreg, src, VEX_SIMD_F2, VEX_OPCODE_0F, &attributes);\n+  emit_int8(0x12);\n+  emit_operand(dst, src);\n+}\n+\n@@ -2480,0 +2493,1 @@\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_DUP, \/* input_size_in_bits *\/ EVEX_64bit);\n@@ -3408,0 +3422,40 @@\n+void Assembler::movups(XMMRegister dst, Address src) {\n+  NOT_LP64(assert(VM_Version::supports_sse(), \"\"));\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_32bit);\n+  simd_prefix(dst, xnoreg, src, VEX_SIMD_NONE, VEX_OPCODE_0F, &attributes);\n+  emit_int8(0x10);\n+  emit_operand(dst, src);\n+}\n+\n+void Assembler::vmovups(XMMRegister dst, Address src, int vector_len) {\n+  assert(vector_len == AVX_512bit ? VM_Version::supports_evex() : VM_Version::supports_avx(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_32bit);\n+  simd_prefix(dst, xnoreg, src, VEX_SIMD_NONE, VEX_OPCODE_0F, &attributes);\n+  emit_int8(0x10);\n+  emit_operand(dst, src);\n+}\n+\n+void Assembler::movups(Address dst, XMMRegister src) {\n+  NOT_LP64(assert(VM_Version::supports_sse(), \"\"));\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_32bit);\n+  simd_prefix(src, xnoreg, dst, VEX_SIMD_NONE, VEX_OPCODE_0F, &attributes);\n+  emit_int8(0x11);\n+  emit_operand(src, dst);\n+}\n+\n+void Assembler::vmovups(Address dst, XMMRegister src, int vector_len) {\n+  assert(vector_len == AVX_512bit ? VM_Version::supports_evex() : VM_Version::supports_avx(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FVM, \/* input_size_in_bits *\/ EVEX_32bit);\n+  simd_prefix(src, xnoreg, dst, VEX_SIMD_NONE, VEX_OPCODE_0F, &attributes);\n+  emit_int8(0x11);\n+  emit_operand(src, dst);\n+}\n+\n@@ -5021,1 +5075,1 @@\n-void Assembler::pshufpd(XMMRegister dst, XMMRegister src, int imm8) {\n+void Assembler::shufpd(XMMRegister dst, XMMRegister src, int imm8) {\n@@ -5029,1 +5083,1 @@\n-void Assembler::vpshufpd(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8, int vector_len) {\n+void Assembler::vshufpd(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8, int vector_len) {\n@@ -5036,1 +5090,1 @@\n-void Assembler::pshufps(XMMRegister dst, XMMRegister src, int imm8) {\n+void Assembler::shufps(XMMRegister dst, XMMRegister src, int imm8) {\n@@ -5044,1 +5098,1 @@\n-void Assembler::vpshufps(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8, int vector_len) {\n+void Assembler::vshufps(XMMRegister dst, XMMRegister nds, XMMRegister src, int imm8, int vector_len) {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":58,"deletions":4,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1470,0 +1470,1 @@\n+  void movddup(XMMRegister dst, Address src);\n@@ -1635,0 +1636,5 @@\n+  void movups(XMMRegister dst, Address src);\n+  void vmovups(XMMRegister dst, Address src, int vector_len);\n+  void movups(Address dst, XMMRegister src);\n+  void vmovups(Address dst, XMMRegister src, int vector_len);\n+\n@@ -1904,4 +1910,4 @@\n-  void pshufps(XMMRegister, XMMRegister, int);\n-  void pshufpd(XMMRegister, XMMRegister, int);\n-  void vpshufps(XMMRegister, XMMRegister, XMMRegister, int, int);\n-  void vpshufpd(XMMRegister, XMMRegister, XMMRegister, int, int);\n+  void shufps(XMMRegister, XMMRegister, int);\n+  void shufpd(XMMRegister, XMMRegister, int);\n+  void vshufps(XMMRegister, XMMRegister, XMMRegister, int, int);\n+  void vshufpd(XMMRegister, XMMRegister, XMMRegister, int, int);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1496,8 +1496,19 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, Address src, int vlen_in_bytes) {\n-  switch (vlen_in_bytes) {\n-  case 4:  movdl(dst, src);   break;\n-  case 8:  movq(dst, src);    break;\n-  case 16: movdqu(dst, src);  break;\n-  case 32: vmovdqu(dst, src); break;\n-  case 64: evmovdquq(dst, src, Assembler::AVX_512bit); break;\n-  default: ShouldNotReachHere();\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes) {\n+  if (is_integral_type(bt)) {\n+    switch (vlen_in_bytes) {\n+      case 4:  movdl(dst, src);   break;\n+      case 8:  movq(dst, src);    break;\n+      case 16: movdqu(dst, src);  break;\n+      case 32: vmovdqu(dst, src); break;\n+      case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (vlen_in_bytes) {\n+      case 4:  movflt(dst, src); break;\n+      case 8:  movdbl(dst, src); break;\n+      case 16: movups(dst, src); break;\n+      case 32: vmovups(dst, src, Assembler::AVX_256bit); break;\n+      case 64: vmovups(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n@@ -1507,1 +1518,1 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n@@ -1509,1 +1520,1 @@\n-    load_vector(dst, as_Address(src), vlen_in_bytes);\n+    load_vector(bt, dst, as_Address(src), vlen_in_bytes);\n@@ -1512,1 +1523,1 @@\n-    load_vector(dst, Address(rscratch, 0), vlen_in_bytes);\n+    load_vector(bt, dst, Address(rscratch, 0), vlen_in_bytes);\n@@ -2140,1 +2151,1 @@\n-        pshufps(dst, dst, eindex);\n+        shufps(dst, dst, eindex);\n@@ -2142,1 +2153,1 @@\n-        vpshufps(dst, src, src, eindex, Assembler::AVX_128bit);\n+        vshufps(dst, src, src, eindex, Assembler::AVX_128bit);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":24,"deletions":13,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -147,2 +147,2 @@\n-  void load_vector(XMMRegister dst, Address src, int vlen_in_bytes);\n-  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n+  void load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes);\n+  void load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2690,0 +2690,9 @@\n+void MacroAssembler::movddup(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  if (reachable(src)) {\n+    Assembler::movddup(dst, as_Address(src));\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::movddup(dst, Address(rscratch, 0));\n+  }\n+}\n+\n@@ -3143,0 +3152,18 @@\n+void MacroAssembler::vpbroadcastd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch) {\n+  if (reachable(src)) {\n+    Assembler::vpbroadcastd(dst, as_Address(src), vector_len);\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::vpbroadcastd(dst, Address(rscratch, 0), vector_len);\n+  }\n+}\n+\n+void MacroAssembler::vpbroadcastq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch) {\n+  if (reachable(src)) {\n+    Assembler::vpbroadcastq(dst, as_Address(src), vector_len);\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::vpbroadcastq(dst, Address(rscratch, 0), vector_len);\n+  }\n+}\n+\n@@ -3157,0 +3184,9 @@\n+void MacroAssembler::vbroadcastss(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch) {\n+  if (reachable(src)) {\n+    Assembler::vbroadcastss(dst, as_Address(src), vector_len);\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::vbroadcastss(dst, Address(rscratch, 0), vector_len);\n+  }\n+}\n+\n@@ -4024,1 +4060,3 @@\n-  if (UseAVX > 2 && (vector_len == Assembler::AVX_512bit || VM_Version::supports_avx512vl())) {\n+  \/\/ vpcmpeqd has special dependency treatment so it should be preferred to vpternlogd\n+  if (vector_len == AVX_512bit || dst->encoding() >= 16) {\n+    assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n@@ -4026,0 +4064,2 @@\n+  } else if (UseAVX > 0) {\n+    vpcmpeqd(dst, dst, dst, vector_len);\n@@ -4027,2 +4067,2 @@\n-    assert(UseAVX > 0, \"\");\n-    vpcmpeqb(dst, dst, dst, vector_len);\n+    NOT_LP64(assert(UseSSE >= 2, \"\"));\n+    pcmpeqd(dst, dst);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1075,0 +1075,6 @@\n+  using Assembler::vbroadcastsd;\n+  void vbroadcastsd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+\n+  using Assembler::vbroadcastss;\n+  void vbroadcastss(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+\n@@ -1111,0 +1117,5 @@\n+  using Assembler::movddup;\n+  void movddup(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  using Assembler::vmovddup;\n+  void vmovddup(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+\n@@ -1118,1 +1129,0 @@\n-\n@@ -1175,3 +1185,0 @@\n-  using Assembler::vmovddup;\n-  void vmovddup(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n-\n@@ -1200,0 +1207,9 @@\n+  using Assembler::vpbroadcastd;\n+  void vpbroadcastd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+\n+  using Assembler::vpbroadcastq;\n+  void vpbroadcastq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+\n+  void vpbroadcastw(XMMRegister dst, XMMRegister src, int vector_len);\n+  void vpbroadcastw(XMMRegister dst, Address src, int vector_len) { Assembler::vpbroadcastw(dst, src, vector_len); }\n+\n@@ -1283,6 +1299,0 @@\n-  void vpbroadcastw(XMMRegister dst, XMMRegister src, int vector_len);\n-  void vpbroadcastw(XMMRegister dst, Address src, int vector_len) { Assembler::vpbroadcastw(dst, src, vector_len); }\n-\n-  using Assembler::vbroadcastsd;\n-  void vbroadcastsd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -3836,1 +3836,2 @@\n-    __ load_vector($dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ load_vector(bt, $dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n@@ -3970,1 +3971,2 @@\n-instruct ReplB_reg(vec dst, rRegI src) %{\n+instruct vReplB_reg(vec dst, rRegI src) %{\n+  predicate(UseAVX >= 2);\n@@ -3975,0 +3977,1 @@\n+    int vlen_enc = vector_length_encoding(this);\n@@ -3977,1 +3980,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -3979,4 +3981,0 @@\n-    } else if (VM_Version::supports_avx2()) {\n-      int vlen_enc = vector_length_encoding(this);\n-      __ movdl($dst$$XMMRegister, $src$$Register);\n-      __ vpbroadcastb($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n@@ -3985,9 +3983,1 @@\n-      __ punpcklbw($dst$$XMMRegister, $dst$$XMMRegister);\n-      __ pshuflw($dst$$XMMRegister, $dst$$XMMRegister, 0x00);\n-      if (vlen >= 16) {\n-        __ punpcklqdq($dst$$XMMRegister, $dst$$XMMRegister);\n-        if (vlen >= 32) {\n-          assert(vlen == 32, \"sanity\");\n-          __ vinserti128_high($dst$$XMMRegister, $dst$$XMMRegister);\n-        }\n-      }\n+      __ vpbroadcastb($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n@@ -3999,0 +3989,13 @@\n+instruct ReplB_reg(vec dst, rRegI src, vec xtmp) %{\n+  predicate(UseAVX < 2);\n+  match(Set dst (ReplicateB src));\n+  effect(TEMP dst, TEMP xtmp);\n+  format %{ \"replicateB $dst,$src\" %}\n+  ins_encode %{\n+    __ movdl($dst$$XMMRegister, $src$$Register);\n+    __ pxor($xtmp$$XMMRegister, $xtmp$$XMMRegister);\n+    __ pshufb($dst$$XMMRegister, $xtmp$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -4014,2 +4017,12 @@\n-    InternalAddress addr = $constantaddress(T_BYTE, vreplicate_imm(T_BYTE, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_BYTE, vreplicate_imm(T_BYTE, $con$$constant,\n+        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 4 : 8) : 16));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastd($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_avx()) {\n+      __ vbroadcastss($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_BYTE, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4027,0 +4040,1 @@\n+    int vlen_enc = vector_length_encoding(this);\n@@ -4029,1 +4043,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4032,1 +4045,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4039,0 +4051,1 @@\n+        assert(vlen == 8, \"\");\n@@ -4040,4 +4053,0 @@\n-        if (vlen >= 16) {\n-          assert(vlen == 16, \"sanity\");\n-          __ vinserti128_high($dst$$XMMRegister, $dst$$XMMRegister);\n-        }\n@@ -4065,2 +4074,12 @@\n-    InternalAddress addr = $constantaddress(T_SHORT, vreplicate_imm(T_SHORT, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_SHORT, vreplicate_imm(T_SHORT, $con$$constant,\n+        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 2 : 4) : 8));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastd($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_avx()) {\n+      __ vbroadcastss($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_SHORT, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4078,0 +4097,1 @@\n+    int vlen_enc = vector_length_encoding(this);\n@@ -4079,1 +4099,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4082,1 +4101,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4088,4 +4106,0 @@\n-      if (vlen >= 8) {\n-        assert(vlen == 8, \"sanity\");\n-        __ vinserti128_high($dst$$XMMRegister, $dst$$XMMRegister);\n-      }\n@@ -4101,2 +4115,6 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen <= 4) {\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastd($dst$$XMMRegister, $mem$$Address, vlen_enc);\n+    } else if (VM_Version::supports_avx()) {\n+      __ vbroadcastss($dst$$XMMRegister, $mem$$Address, vlen_enc);\n+    } else {\n@@ -4105,4 +4123,0 @@\n-    } else {\n-      assert(VM_Version::supports_avx2(), \"sanity\");\n-      int vlen_enc = vector_length_encoding(this);\n-      __ vpbroadcastd($dst$$XMMRegister, $mem$$Address, vlen_enc);\n@@ -4118,2 +4132,12 @@\n-    InternalAddress addr = $constantaddress(T_INT, vreplicate_imm(T_INT, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_INT, vreplicate_imm(T_INT, $con$$constant,\n+        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 4));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastd($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_avx()) {\n+      __ vbroadcastss($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_INT, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4131,5 +4155,2 @@\n-    uint vsize = Matcher::vector_length_in_bytes(this);\n-    if (vsize <= 16) {\n-      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n-    } else {\n-      int vlen_enc = vector_length_encoding(this);\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_evex() && !VM_Version::supports_avx512vl()) {\n@@ -4137,0 +4158,2 @@\n+    } else {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -4143,1 +4166,1 @@\n-  predicate(UseAVX > 0 && Matcher::vector_length_in_bytes(n) >= 16);\n+  predicate(UseSSE >= 2);\n@@ -4147,1 +4170,0 @@\n-  effect(TEMP dst);\n@@ -4164,6 +4186,3 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen == 2) {\n-      __ movdq($dst$$XMMRegister, $src$$Register);\n-      __ punpcklqdq($dst$$XMMRegister, $dst$$XMMRegister);\n-    } else if (vlen == 8 || VM_Version::supports_avx512vl()) { \/\/ AVX512VL for <512bit operands\n-      int vlen_enc = vector_length_encoding(this);\n+    int vlen = Matcher::vector_length(this);\n+    int vlen_enc = vector_length_encoding(this);\n+    if (vlen == 8 || VM_Version::supports_avx512vl()) { \/\/ AVX512VL for <512bit operands\n@@ -4172,2 +4191,0 @@\n-      assert(vlen == 4, \"sanity\");\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4177,1 +4194,0 @@\n-      assert(vlen == 4, \"sanity\");\n@@ -4180,1 +4196,0 @@\n-      __ vinserti128_high($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -4245,2 +4260,6 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen == 2) {\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastq($dst$$XMMRegister, $mem$$Address, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, $mem$$Address);\n+    } else {\n@@ -4249,4 +4268,0 @@\n-    } else {\n-      assert(VM_Version::supports_avx2(), \"sanity\");\n-      int vlen_enc = vector_length_encoding(this);\n-      __ vpbroadcastq($dst$$XMMRegister, $mem$$Address, vlen_enc);\n@@ -4263,2 +4278,10 @@\n-    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, $con$$constant,\n+        VM_Version::supports_sse3() ? 1 : 2));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx2()) {\n+      __ vpbroadcastq($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_LONG, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4273,5 +4296,2 @@\n-    int vlen = Matcher::vector_length(this);\n-    if (vlen == 2) {\n-      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n-    } else {\n-      int vlen_enc = vector_length_encoding(this);\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_evex() && !VM_Version::supports_avx512vl()) {\n@@ -4279,0 +4299,2 @@\n+    } else {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -4285,1 +4307,1 @@\n-  predicate(UseAVX > 0);\n+  predicate(UseSSE >= 2);\n@@ -4287,1 +4309,0 @@\n-  effect(TEMP dst);\n@@ -4303,1 +4324,2 @@\n-    if (vlen <= 4) {\n+    int vlen_enc = vector_length_encoding(this);\n+    if (UseAVX == 0) {\n@@ -4305,2 +4327,3 @@\n-   } else if (VM_Version::supports_avx2()) {\n-      int vlen_enc = vector_length_encoding(this);\n+    } else if (vlen <= 4) {\n+      __ vpermilps($dst$$XMMRegister, $src$$XMMRegister, 0x00, Assembler::AVX_128bit);\n+    } else if (VM_Version::supports_avx2()) {\n@@ -4310,1 +4333,1 @@\n-      __ pshufd($dst$$XMMRegister, $src$$XMMRegister, 0x00);\n+      __ vpermilps($dst$$XMMRegister, $src$$XMMRegister, 0x00, Assembler::AVX_128bit);\n@@ -4318,0 +4341,1 @@\n+  predicate(UseAVX > 0);\n@@ -4321,9 +4345,2 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen <= 4) {\n-      __ movdl($dst$$XMMRegister, $mem$$Address);\n-      __ pshufd($dst$$XMMRegister, $dst$$XMMRegister, 0x00);\n-    } else {\n-      assert(VM_Version::supports_avx(), \"sanity\");\n-      int vlen_enc = vector_length_encoding(this);\n-      __ vbroadcastss($dst$$XMMRegister, $mem$$Address, vlen_enc);\n-    }\n+    int vlen_enc = vector_length_encoding(this);\n+    __ vbroadcastss($dst$$XMMRegister, $mem$$Address, vlen_enc);\n@@ -4339,2 +4356,10 @@\n-    InternalAddress addr = $constantaddress(T_FLOAT, vreplicate_imm(T_FLOAT, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_FLOAT, vreplicate_imm(T_FLOAT, $con$$constant,\n+        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 4));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_avx()) {\n+      __ vbroadcastss($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_FLOAT, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4349,3 +4374,3 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen <= 4) {\n-      __ xorps($dst$$XMMRegister, $dst$$XMMRegister);\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_evex() && !VM_Version::supports_avx512vldq()) {\n+      __ vpxor($dst$$XMMRegister, $dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n@@ -4353,2 +4378,1 @@\n-      int vlen_enc = vector_length_encoding(this);\n-      __ vpxor($dst$$XMMRegister,$dst$$XMMRegister, $dst$$XMMRegister, vlen_enc); \/\/ 512bit vxorps requires AVX512DQ\n+      __ xorps($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -4368,1 +4392,2 @@\n-    if (vlen == 2) {\n+    int vlen_enc = vector_length_encoding(this);\n+    if (UseAVX == 0) {\n@@ -4370,0 +4395,2 @@\n+    } else if (vlen <= 2) {\n+      __ vpermilps($dst$$XMMRegister, $src$$XMMRegister, 0x44, Assembler::AVX_128bit);\n@@ -4371,1 +4398,0 @@\n-      int vlen_enc = vector_length_encoding(this);\n@@ -4375,1 +4401,1 @@\n-      __ pshufd($dst$$XMMRegister, $src$$XMMRegister, 0x44);\n+      __ vpermilps($dst$$XMMRegister, $src$$XMMRegister, 0x44, Assembler::AVX_128bit);\n@@ -4383,0 +4409,1 @@\n+  predicate(UseSSE >= 3);\n@@ -4386,6 +4413,1 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen == 2) {\n-      __ movq($dst$$XMMRegister, $mem$$Address);\n-      __ pshufd($dst$$XMMRegister, $dst$$XMMRegister, 0x44);\n-    } else {\n-      assert(VM_Version::supports_avx(), \"sanity\");\n+    if (Matcher::vector_length(this) >= 4) {\n@@ -4394,0 +4416,2 @@\n+    } else {\n+      __ movddup($dst$$XMMRegister, $mem$$Address);\n@@ -4404,2 +4428,10 @@\n-    InternalAddress addr = $constantaddress(T_DOUBLE, vreplicate_imm(T_DOUBLE, $con$$constant, Matcher::vector_length(this)));\n-    __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    InternalAddress addr = $constantaddress(T_DOUBLE, vreplicate_imm(T_DOUBLE, $con$$constant,\n+        VM_Version::supports_sse3() ? 1 : 2));\n+    int vlen_enc = vector_length_encoding(this);\n+    if (Matcher::vector_length(this) >= 4) {\n+      __ vbroadcastsd($dst$$XMMRegister, addr, vlen_enc);\n+    } else if (VM_Version::supports_sse3()) {\n+      __ movddup($dst$$XMMRegister, addr);\n+    } else {\n+      __ load_vector(T_DOUBLE, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+    }\n@@ -4414,3 +4446,3 @@\n-    uint vlen = Matcher::vector_length(this);\n-    if (vlen == 2) {\n-      __ xorpd($dst$$XMMRegister, $dst$$XMMRegister);\n+    int vlen_enc = vector_length_encoding(this);\n+    if (VM_Version::supports_evex() && !VM_Version::supports_avx512vldq()) {\n+      __ vpxor($dst$$XMMRegister, $dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n@@ -4418,2 +4450,1 @@\n-      int vlen_enc = vector_length_encoding(this);\n-      __ vpxor($dst$$XMMRegister, $dst$$XMMRegister, $dst$$XMMRegister, vlen_enc); \/\/ 512bit vxorps requires AVX512DQ\n+      __ xorps($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -8061,1 +8092,1 @@\n-    __ vpshufps($dst$$XMMRegister, $src$$XMMRegister, $src$$XMMRegister, 0x88, Assembler::AVX_256bit);\n+    __ vshufps($dst$$XMMRegister, $src$$XMMRegister, $src$$XMMRegister, 0x88, Assembler::AVX_256bit);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":140,"deletions":109,"binary":false,"changes":249,"status":"modified"},{"patch":"@@ -3337,1 +3337,1 @@\n-      next_char();\n+      next_char_or_line();\n@@ -3343,1 +3343,1 @@\n-      next_char();\n+      next_char_or_line();\n@@ -3350,1 +3350,1 @@\n-        next_char();\n+        next_char_or_line();\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4100,6 +4100,0 @@\n-        strcmp(opType,\"ReplicateB\")==0 ||\n-        strcmp(opType,\"ReplicateS\")==0 ||\n-        strcmp(opType,\"ReplicateI\")==0 ||\n-        strcmp(opType,\"ReplicateL\")==0 ||\n-        strcmp(opType,\"ReplicateF\")==0 ||\n-        strcmp(opType,\"ReplicateD\")==0 ||\n@@ -4120,1 +4114,1 @@\n-        0 \/* 0 to line up columns nicely *\/ )\n+        0 \/* 0 to line up columns nicely *\/ ) {\n@@ -4122,0 +4116,1 @@\n+    }\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -432,1 +432,1 @@\n-  address array_constant(BasicType bt, GrowableArray<jvalue>* c) {\n+  address array_constant(BasicType bt, GrowableArray<jvalue>* c, int alignment) {\n@@ -436,1 +436,1 @@\n-    address ptr = start_a_const(size, MIN2(round_up_power_of_2(size), 8));\n+    address ptr = start_a_const(size, alignment);\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,24 @@\n-    return is_array() && other.is_array() && _v._array == other._v._array;\n+    if (is_array() != other.is_array() ||\n+        get_array()->length() != other.get_array()->length()) {\n+      return false;\n+    }\n+    for (int i = 0; i < get_array()->length(); i++) {\n+      jvalue ele1 = get_array()->at(i);\n+      jvalue ele2 = other.get_array()->at(i);\n+      bool is_eq;\n+      switch (type()) {\n+        case T_BOOLEAN: is_eq = ele1.z == ele2.z; break;\n+        case T_BYTE:    is_eq = ele1.b == ele2.b; break;\n+        case T_CHAR:    is_eq = ele1.c == ele2.c; break;\n+        case T_SHORT:   is_eq = ele1.s == ele2.s; break;\n+        case T_INT:     is_eq = ele1.i == ele2.i; break;\n+        case T_LONG:    is_eq = ele1.j == ele2.j; break;\n+        case T_FLOAT:   is_eq = jint_cast(ele1.f)  == jint_cast(ele2.f);  break;\n+        case T_DOUBLE:  is_eq = jlong_cast(ele1.d) == jlong_cast(ele2.d); break;\n+        default: ShouldNotReachHere(); is_eq = false;\n+      }\n+      if (!is_eq) {\n+        return false;\n+      }\n+    }\n+    return true;\n@@ -107,1 +130,1 @@\n-    offset = align_up(offset, MIN2(round_up_power_of_2(typesize), 8));\n+    offset = align_up(offset, con->alignment());\n@@ -130,1 +153,1 @@\n-      constant_addr = _masm.array_constant(con.type(), con.get_array());\n+      constant_addr = _masm.array_constant(con.type(), con.get_array(), con.alignment());\n@@ -232,2 +255,3 @@\n-ConstantTable::Constant ConstantTable::add(MachConstantNode* n, BasicType bt, GrowableArray<jvalue>* array) {\n-  Constant con(bt, array);\n+ConstantTable::Constant ConstantTable::add(MachConstantNode* n, BasicType bt,\n+                                           GrowableArray<jvalue>* array, int alignment) {\n+  Constant con(bt, array, alignment);\n@@ -238,0 +262,5 @@\n+ConstantTable::Constant ConstantTable::add(MachConstantNode* n, BasicType bt,\n+                                           GrowableArray<jvalue>* array) {\n+  return add(n, bt, array, array->length() * type2aelembytes(bt));\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":34,"deletions":5,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    int _alignment;\n@@ -52,1 +53,1 @@\n-    Constant() : _type(T_ILLEGAL), _is_array(false), _offset(-1), _freq(0.0f), _can_be_reused(true) { _v._value.l = 0; }\n+    Constant() : _type(T_ILLEGAL), _is_array(false), _alignment(-1), _offset(-1), _freq(0.0f), _can_be_reused(true) { _v._value.l = 0; }\n@@ -62,0 +63,1 @@\n+      _alignment = type == T_VOID ? sizeof(jobject) : type2aelembytes(type);\n@@ -66,0 +68,1 @@\n+      _alignment(sizeof(Metadata*)),\n@@ -72,1 +75,1 @@\n-    Constant(BasicType type, GrowableArray<jvalue>* array) :\n+    Constant(BasicType type, GrowableArray<jvalue>* array, int alignment, bool can_be_reused = true) :\n@@ -75,0 +78,1 @@\n+      _alignment(alignment),\n@@ -77,1 +81,1 @@\n-      _can_be_reused(false)\n+      _can_be_reused(can_be_reused)\n@@ -80,0 +84,1 @@\n+      assert(is_power_of_2(alignment), \"invalid alignment %d\", alignment);\n@@ -90,0 +95,1 @@\n+    int alignment()       const    { return _alignment; }\n@@ -148,0 +154,1 @@\n+  Constant add(MachConstantNode* n, BasicType bt, GrowableArray<jvalue>* array, int alignment);\n","filename":"src\/hotspot\/share\/opto\/constantTable.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -477,1 +477,2 @@\n-  if (req() > 2) {\n+  \/\/ A MachContant has the last input being the constant base\n+  if (req() > (is_MachConstant() ? 3 : 2)) {\n@@ -481,1 +482,1 @@\n-  if (req() == 2 && in(1) && in(1)->ideal_reg() == Op_RegFlags) {\n+  if (req() >= 2 && in(1) && in(1)->ideal_reg() == Op_RegFlags) {\n@@ -484,1 +485,1 @@\n-    if (in(1)->req() > 2) {\n+    if (in(1)->req() > (in(1)->is_MachConstant() ? 3 : 2)) {\n@@ -494,1 +495,1 @@\n-    if (rm.is_bound(ideal_reg())) {\n+    if (rm.is_NotEmpty() && rm.is_bound(ideal_reg())) {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}