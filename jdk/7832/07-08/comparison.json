{"files":[{"patch":"@@ -1644,19 +1644,8 @@\n-void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes) {\n-  if (is_integral_type(bt)) {\n-    switch (vlen_in_bytes) {\n-      case 4:  movdl(dst, src);   break;\n-      case 8:  movq(dst, src);    break;\n-      case 16: movdqu(dst, src);  break;\n-      case 32: vmovdqu(dst, src); break;\n-      case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n-      default: ShouldNotReachHere();\n-    }\n-  } else {\n-    switch (vlen_in_bytes) {\n-      case 4:  movflt(dst, src); break;\n-      case 8:  movdbl(dst, src); break;\n-      case 16: movups(dst, src); break;\n-      case 32: vmovups(dst, src, Assembler::AVX_256bit); break;\n-      case 64: vmovups(dst, src, Assembler::AVX_512bit); break;\n-      default: ShouldNotReachHere();\n-    }\n+void C2_MacroAssembler::load_vector(XMMRegister dst, Address src, int vlen_in_bytes) {\n+  switch (vlen_in_bytes) {\n+    case 4:  movdl(dst, src);   break;\n+    case 8:  movq(dst, src);    break;\n+    case 16: movdqu(dst, src);  break;\n+    case 32: vmovdqu(dst, src); break;\n+    case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n+    default: ShouldNotReachHere();\n@@ -1666,1 +1655,1 @@\n-void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n+void C2_MacroAssembler::load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n@@ -1668,1 +1657,1 @@\n-    load_vector(bt, dst, as_Address(src), vlen_in_bytes);\n+    load_vector(dst, as_Address(src), vlen_in_bytes);\n@@ -1671,1 +1660,1 @@\n-    load_vector(bt, dst, Address(rscratch, 0), vlen_in_bytes);\n+    load_vector(dst, Address(rscratch, 0), vlen_in_bytes);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -160,2 +160,2 @@\n-  void load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes);\n-  void load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n+  void load_vector(XMMRegister dst, Address src, int vlen_in_bytes);\n+  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4388,3 +4388,3 @@\n-  \/\/ vpcmpeqd has special dependency treatment so it should be preferred to vpternlogd\n-  if (vector_len == AVX_512bit || dst->encoding() >= 16) {\n-    assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  if (UseAVX > 2 && (vector_len == Assembler::AVX_512bit || VM_Version::supports_avx512vl())) {\n+    \/\/ Only pcmpeq has dependency breaking treatment (i.e the execution can begin without\n+    \/\/ waiting for the previous result on dst), not vpcmpeqd, so just use vpternlog\n@@ -4392,1 +4392,1 @@\n-  } else if (UseAVX > 0) {\n+  } else if (VM_Version::supports_avx()) {\n@@ -4395,1 +4395,1 @@\n-    NOT_LP64(assert(UseSSE >= 2, \"\"));\n+    assert(VM_Version::supports_sse2(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3976,2 +3976,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ load_vector(bt, $dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n+    __ load_vector($dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n@@ -4251,3 +4250,1 @@\n-    if (VM_Version::supports_avx2()) {\n-      __ vpbroadcastd($dst$$XMMRegister, addr, vlen_enc);\n-    } else if (VM_Version::supports_avx()) {\n+    if (VM_Version::supports_avx()) {\n@@ -4258,1 +4255,1 @@\n-      __ load_vector(bt, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+      __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n@@ -4402,1 +4399,1 @@\n-      __ load_vector(T_LONG, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+      __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n@@ -4489,1 +4486,1 @@\n-      __ load_vector(T_FLOAT, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+      __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n@@ -4570,1 +4567,1 @@\n-      __ load_vector(T_DOUBLE, $dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n+      __ load_vector($dst$$XMMRegister, addr, Matcher::vector_length_in_bytes(this));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}