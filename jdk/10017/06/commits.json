[{"commit":{"message":"Pass hostMaxMem to relevant methods as a parameter"},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"0f37be83ff0cddbb065d833137ffc9756e688710"},{"commit":{"message":"Rework testContainerMemExceedsPhysical to use common hostMaxMem\n\nFor 8292541, I wrote two further tests that used the same technique\nas testContainerMemExceedsPhysical to establish baseline physical\nRAM. Rework testContainerMemExceedsPhysical to use the shared\nvariable hostMaxMem rather than recalculate the value itself."},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"cc8fdf36af5e3f75c47348d25697e8a0b496dd42"},{"commit":{"message":"Merge remote-tracking branch 'origin\/master' into 8292541-cgroup-metrics"},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"e72e50dc17702b98091c1e5c1f426679f4e357c0"},{"commit":{"message":"Add a log-line for total physical memory\n\nThis is relied upon for tests in\ntest\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"},"files":[],"sha":"1bf3aa341fd93079289f11e620938e6bed40b382"},{"commit":{"message":"use pre-defined constant over magic number"},"files":[{"filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java"}],"sha":"01d07ab4b2e12f67e6973c524db094e1e19851e3"},{"commit":{"message":"Address style nits"},"files":[{"filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java"}],"sha":"85fa402acbb79947135f347b3dec754b46d2b5e0"},{"commit":{"message":"Address nit\n\nThanks Thomas Stuefe"},"files":[{"filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java"}],"sha":"ff6990cb3ec235fe21f90c812d8816de368e2f23"},{"commit":{"message":"avoid calling subsystem.getMemoryLimit twice"},"files":[{"filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java"}],"sha":"806a08476a6a86b4dd141a02f1db115db8aa10fb"},{"commit":{"message":"catch CgroupMetrics.getMemoryLimit exceeding physical RAM\n\nDetect when the subsystem limit exceeds physical RAM and treat\nthat situation as \"unlimited\".\n\nAdd a private native method to establish physical RAM size.\n\nThis presently is only likely to work on POSIX systems, but\nCgroupMetrics are Linux-specific. None the less the precise guards etc.\nmay need adjusting."},"files":[{"filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java"},{"filename":"src\/java.base\/linux\/native\/libjava\/CgroupMetrics.c"}],"sha":"668b81f70173f0b73d4f05ac4cdbc080b4b6ffba"},{"commit":{"message":"Add two tests to catch deriving invalid max memory limit from cgroups\n\nOne test for OperatingSystemMXBean and another for\n-XshowSettings:system, which exercises the Metrics sub-system.\n\nextend TestMemoryAwareness to cover OperatingSystemMXBean with bad cgroup memory limit\n\nadd testMetricsIgnoresMemLimitExceedingPhysicalMemory and refactor\n\nPull the code that establishes host physical max RAM out into a helper\nfunction."},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"fd23b83c652c29b7f7967c5f613ae4f1b37e7d96"}]