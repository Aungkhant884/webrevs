{"files":[{"patch":"@@ -124,1 +124,7 @@\n-        return subsystem.getMemoryLimit();\n+        long subsMem = subsystem.getMemoryLimit();\n+        \/\/ Catch the cgroup memory limit exceeding host physical memory.\n+        \/\/ Treat this as unlimited.\n+        if (subsMem >= getTotalMemorySize0()) {\n+            return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n+        }\n+        return subsMem;\n@@ -181,0 +187,1 @@\n+    private static native long getTotalMemorySize0();\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include <unistd.h>\n@@ -36,0 +37,7 @@\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_platform_CgroupMetrics_getTotalMemorySize0\n+  (JNIEnv *env, jclass ignored)\n+{\n+    return sysconf(_SC_PHYS_PAGES) * sysconf(_SC_PAGESIZE);\n+}\n","filename":"src\/java.base\/linux\/native\/libjava\/CgroupMetrics.c","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,0 +49,8 @@\n+    private static String hostMaxMem;\n+\n+    private static String getHostMaxMemory() throws Exception {\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n+        return goodMem;\n+    }\n@@ -82,0 +90,3 @@\n+            hostMaxMem = getHostMaxMemory();\n+            testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory();\n+            testMetricsIgnoresMemLimitExceedingPhysicalMemory();\n@@ -107,1 +118,0 @@\n-\n@@ -109,11 +119,3 @@\n-\n-        DockerRunOptions opts = Common.newOpts(imageName);\n-\n-        \/\/ first run: establish physical memory in test environment and derive\n-        \/\/ a bad value one power of ten larger\n-        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n-        assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n-        String badMem = goodMem + \"0\";\n-\n-        \/\/ second run: set a container memory limit to the bad value\n-        opts = Common.newOpts(imageName)\n+        String badMem = hostMaxMem + \"0\";\n+        \/\/ set a container memory limit to the bad value\n+        DockerRunOptions opts = Common.newOpts(imageName)\n@@ -121,0 +123,1 @@\n+\n@@ -122,1 +125,1 @@\n-            .shouldMatch(\"container memory limit (ignored: \" + badMem + \"|unlimited: -1), using host value \" + goodMem);\n+            .shouldMatch(\"container memory limit (ignored: \" + badMem + \"|unlimited: -1), using host value \" + hostMaxMem);\n@@ -203,0 +206,19 @@\n+\n+    \/\/ JDK-8292541: Ensure OperatingSystemMXBean ignores container memory limits above the host's physical memory.\n+    private static void testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory()\n+            throws Exception {\n+        String badMem = hostMaxMem + \"0\";\n+        testOperatingSystemMXBeanAwareness(badMem, hostMaxMem, badMem, hostMaxMem);\n+    }\n+\n+    \/\/ JDK-8292541: Ensure Metrics ignores container memory limits above the host's physical memory.\n+    private static void testMetricsIgnoresMemLimitExceedingPhysicalMemory()\n+            throws Exception {\n+        Common.logNewTestCase(\"Metrics ignore container memory limit exceeding physical memory\");\n+        String badMem = hostMaxMem + \"0\";\n+        DockerRunOptions opts = Common.newOpts(imageName)\n+            .addJavaOpts(\"-XshowSettings:system\")\n+            .addDockerOpts(\"--memory\", badMem);\n+\n+        DockerTestUtils.dockerRunJava(opts).shouldMatch(\"Memory Limit: Unlimited\");\n+    }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":35,"deletions":13,"binary":false,"changes":48,"status":"modified"}]}