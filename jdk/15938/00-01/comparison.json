{"files":[{"patch":"@@ -112,3 +112,3 @@\n-     * Accepts a single feature pair which is composed of platform feature string followed by a true\/false\n-     * value where a true value necessities existence of platform feature and vice-versa.\n-     * IR verifications checks are enforced only if the specified feature constraint is met.\n+     * Accepts a single pair composed of a platform string followed by a true\/false\n+     * value where a true value necessitates that we are currently testing on that platform and vice-versa.\n+     * IR checks are enforced only if the specified platform constraint is met.\n@@ -116,1 +116,1 @@\n-    String[] applyIfPlatformFeature() default {};\n+    String[] applyIfPlatform() default {};\n@@ -119,3 +119,3 @@\n-     * Accepts a list of feature pairs where each pair is composed of target feature string followed by a true\/false\n-     * value where a true value necessities existence of target feature and vice-versa.\n-     * IR verifications checks are enforced only if all the specified feature constraints are met.\n+     * Accepts a list of pairs where each pair is composed of a platform string followed by a true\/false\n+     * value where a true value necessitates that we are currently testing on that platform and vice-versa.\n+     * IR checks are enforced only if all the specified platform constraints are met.\n@@ -123,1 +123,1 @@\n-    String[] applyIfPlatformFeatureAnd() default {};\n+    String[] applyIfPlatformAnd() default {};\n@@ -126,3 +126,3 @@\n-     * Accepts a list of feature pairs where each pair is composed of target feature string followed by a true\/false\n-     * value where a true value necessities existence of target feature and vice-versa.\n-     * IR verifications checks are enforced if any of the specified feature constraint is met.\n+     * Accepts a list of pairs where each pair is composed of a platform string followed by a true\/false\n+     * value where a true value necessitates that we are currently testing on that platform and vice-versa.\n+     * IR checks are enforced if any of the specified platform constraints are met.\n@@ -130,1 +130,1 @@\n-    String[] applyIfPlatformFeatureOr() default {};\n+    String[] applyIfPlatformOr() default {};\n@@ -134,1 +134,1 @@\n-     * value where a true value necessities existence of CPU feature and vice-versa.\n+     * value where a true value necessitates existence of CPU feature and vice-versa.\n@@ -141,1 +141,1 @@\n-     * value where a true value necessities existence of target feature and vice-versa.\n+     * value where a true value necessitates existence of target feature and vice-versa.\n@@ -148,1 +148,1 @@\n-     * value where a true value necessities existence of target feature and vice-versa.\n+     * value where a true value necessitates existence of target feature and vice-versa.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IR.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-#### Disable\/Enable IR Rules based on available Platform Features\n-`@IR` rules based on platform features can be specified using `applyIfPlatformFeatureXXX` in [@IR](.\/IR.java). A reference for using these attributes can be found in [TestPlatformFeatureCheck](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestPlatformFeatureCheck.java) (internal framework test).\n+#### Disable\/Enable IR Rules based on Platform\n+`@IR` rules based on the platform can be specified using `applyIfPlatformXXX` in [@IR](.\/IR.java). A reference for using these attributes can be found in [TestPlatformChecks](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestPlatformChecks.java) (internal framework test).\n@@ -124,1 +124,1 @@\n-Platform attributes are evaluated as a logical conjunction, and take precedence over VM Flag attributes. An example with both `applyIfPlatformFeatureXXX` and `applyIfXXX` can be found in [TestPreconditions](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java) (internal framework test).\n+Platform attributes are evaluated as a logical conjunction, and take precedence over VM Flag attributes. An example with both `applyIfPlatformXXX` and `applyIfXXX` can be found in [TestPreconditions](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java) (internal framework test).\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,4 +59,4 @@\n-    \/\/ Platform specific features for use in IR preconditions. Please verify that there is\n-    \/\/ a corresponding value e.g. in a jtreg @requires annotation before adding new features,\n-    \/\/ as adding non-existent features can lead to skipped tests.\n-    private static final List<String> verifiedPlatformFeatures = new ArrayList<String>( Arrays.asList(\n+    \/\/ Platforms for use in IR preconditions. Please verify that e.g. there is\n+    \/\/ a corresponding use in a jtreg @requires annotation before adding new platforms,\n+    \/\/ as adding non-existent platforms can lead to skipped tests.\n+    private static final List<String> irTestingPlatforms = new ArrayList<String>(Arrays.asList(\n@@ -67,1 +67,1 @@\n-        \/\/ vm.simpleArch values\n+        \/\/ vm.simpleArch\n@@ -69,0 +69,2 @@\n+        \"arm\",\n+        \"ppc\",\n@@ -70,0 +72,1 @@\n+        \"s390\",\n@@ -154,2 +157,2 @@\n-        } else if (irAnno.applyIfPlatformFeature().length != 0 && !hasAllRequiredPlatformFeature(irAnno.applyIfPlatformFeature())) {\n-            printDisableReason(m, \"Feature constraint not met (applyIfPlatformFeature)\", irAnno.applyIfPlatformFeature(), ruleIndex, ruleMax);\n+        } else if (irAnno.applyIfPlatform().length != 0 && !hasAllRequiredPlatform(irAnno.applyIfPlatform())) {\n+            printDisableReason(m, \"Constraint not met (applyIfPlatform)\", irAnno.applyIfPlatform(), ruleIndex, ruleMax);\n@@ -157,2 +160,2 @@\n-        } else if (irAnno.applyIfPlatformFeatureAnd().length != 0 && !hasAllRequiredPlatformFeature(irAnno.applyIfPlatformFeatureAnd())) {\n-            printDisableReason(m, \"Not all feature constraints are met (applyIfPlatformFeatureAnd)\", irAnno.applyIfPlatformFeatureAnd(), ruleIndex, ruleMax);\n+        } else if (irAnno.applyIfPlatformAnd().length != 0 && !hasAllRequiredPlatform(irAnno.applyIfPlatformAnd())) {\n+            printDisableReason(m, \"Not all constraints are met (applyIfPlatformAnd)\", irAnno.applyIfPlatformAnd(), ruleIndex, ruleMax);\n@@ -160,2 +163,2 @@\n-        } else if (irAnno.applyIfPlatformFeatureOr().length != 0 && !hasAnyRequiredPlatformFeature(irAnno.applyIfPlatformFeatureOr())) {\n-            printDisableReason(m, \"None of the feature constraints met (applyIfPlatformFeatureOr)\", irAnno.applyIfPlatformFeatureOr(), ruleIndex, ruleMax);\n+        } else if (irAnno.applyIfPlatformOr().length != 0 && !hasAnyRequiredPlatform(irAnno.applyIfPlatformOr())) {\n+            printDisableReason(m, \"None of the constraints are met (applyIfPlatformOr)\", irAnno.applyIfPlatformOr(), ruleIndex, ruleMax);\n@@ -194,1 +197,1 @@\n-        int platformFeatureConstraints = 0;\n+        int platformConstraints = 0;\n@@ -211,4 +214,4 @@\n-        if (irAnno.applyIfPlatformFeature().length != 0) {\n-            platformFeatureConstraints++;\n-            TestFormat.checkNoThrow(irAnno.applyIfPlatformFeature().length == 2,\n-                                    \"applyIfPlatformFeature expects single platform feature pair\" + failAt());\n+        if (irAnno.applyIfPlatform().length != 0) {\n+            platformConstraints++;\n+            TestFormat.checkNoThrow(irAnno.applyIfPlatform().length == 2,\n+                                    \"applyIfPlatform expects single platform pair\" + failAt());\n@@ -216,4 +219,4 @@\n-        if (irAnno.applyIfPlatformFeatureAnd().length != 0) {\n-            platformFeatureConstraints++;\n-            TestFormat.checkNoThrow(irAnno.applyIfPlatformFeatureAnd().length % 2 == 0,\n-                                    \"applyIfPlatformFeatureAnd expects more than one platform feature pair\" + failAt());\n+        if (irAnno.applyIfPlatformAnd().length != 0) {\n+            platformConstraints++;\n+            TestFormat.checkNoThrow(irAnno.applyIfPlatformAnd().length % 2 == 0,\n+                                    \"applyIfPlatformAnd expects more than one platform pair\" + failAt());\n@@ -221,4 +224,4 @@\n-        if (irAnno.applyIfPlatformFeatureOr().length != 0) {\n-            platformFeatureConstraints++;\n-            TestFormat.checkNoThrow(irAnno.applyIfPlatformFeatureOr().length % 2 == 0,\n-                                    \"applyIfPlatformFeatureOr expects more than one platform feature pair\" + failAt());\n+        if (irAnno.applyIfPlatformOr().length != 0) {\n+            platformConstraints++;\n+            TestFormat.checkNoThrow(irAnno.applyIfPlatformOr().length % 2 == 0,\n+                                    \"applyIfPlatformOr expects more than one platform pair\" + failAt());\n@@ -247,1 +250,1 @@\n-        TestFormat.checkNoThrow(platformFeatureConstraints <= 1, \"Can only specify one platform feature constraint\" + failAt());\n+        TestFormat.checkNoThrow(platformConstraints <= 1, \"Can only specify one platform constraint\" + failAt());\n@@ -281,1 +284,1 @@\n-    private boolean hasAllRequiredPlatformFeature(String[] andRules) {\n+    private boolean hasAllRequiredPlatform(String[] andRules) {\n@@ -284,1 +287,1 @@\n-            String feature = andRules[i].trim();\n+            String platform = andRules[i].trim();\n@@ -287,1 +290,1 @@\n-            returnValue &= checkPlatformFeature(feature, value);\n+            returnValue &= checkPlatform(platform, value);\n@@ -292,1 +295,1 @@\n-    private boolean hasAnyRequiredPlatformFeature(String[] orRules) {\n+    private boolean hasAnyRequiredPlatform(String[] orRules) {\n@@ -295,1 +298,1 @@\n-            String feature = orRules[i].trim();\n+            String platform = orRules[i].trim();\n@@ -298,1 +301,1 @@\n-            returnValue |= checkPlatformFeature(feature, value);\n+            returnValue |= checkPlatform(platform, value);\n@@ -303,3 +306,3 @@\n-    private boolean checkPlatformFeature(String feature, String value) {\n-        if (feature.isEmpty()) {\n-            TestFormat.failNoThrow(\"Provided empty feature\" + failAt());\n+    private boolean checkPlatform(String platform, String value) {\n+        if (platform.isEmpty()) {\n+            TestFormat.failNoThrow(\"Provided empty platform\" + failAt());\n@@ -309,1 +312,1 @@\n-            TestFormat.failNoThrow(\"Provided empty value for feature \" + feature + failAt());\n+            TestFormat.failNoThrow(\"Provided empty value for platform \" + platform + failAt());\n@@ -313,2 +316,2 @@\n-        if (!verifiedPlatformFeatures.contains(feature)) {\n-            TestFormat.failNoThrow(\"Provided Platform feature is not in verified list: \" + feature + failAt());\n+        if (!irTestingPlatforms.contains(platform)) {\n+            TestFormat.failNoThrow(\"Provided platform is not in verified list: \" + platform + failAt());\n@@ -322,1 +325,1 @@\n-            TestFormat.failNoThrow(\"Provided incorrect value for feature \" + feature + failAt());\n+            TestFormat.failNoThrow(\"Provided incorrect value for platform \" + platform + failAt());\n@@ -338,0 +341,4 @@\n+        } else if (Platform.isARM()) {\n+            arch = \"arm\";\n+        } else if (Platform.isPPC()) {\n+            arch = \"ppc\";\n@@ -340,0 +347,2 @@\n+        } else if (Platform.isS390x()) {\n+            arch = \"s390\";\n@@ -346,1 +355,1 @@\n-        String platformFeatures = os + \" \" + arch + \" \" + (Platform.is32bit() ? \"32-bit\" : \"64-bit\");\n+        String currentPlatform = os + \" \" + arch + \" \" + (Platform.is32bit() ? \"32-bit\" : \"64-bit\");\n@@ -348,1 +357,1 @@\n-        return (trueValue && platformFeatures.contains(feature)) || (falseValue && !platformFeatures.contains(feature));\n+        return (trueValue && currentPlatform.contains(platform)) || (falseValue && !currentPlatform.contains(platform));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":49,"deletions":40,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    @IR(applyIfPlatformFeature = {\"32-bit\", \"false\"},\n+    @IR(applyIfPlatform = {\"32-bit\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/SumRed_Long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n+\n+\/*\n+ * @test 8280120\n+ * @summary Add attribute to IR to enable\/disable IR matching based on the architecture\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.tests.TestPlatformChecks\n+ *\/\n+\n+public class TestPlatformChecks {\n+    private static final int SIZE = 1000;\n+    private static int[] a = new int[SIZE];\n+    private static int[] b = new int[SIZE];\n+    private static int[] res = new int[SIZE];\n+\n+    public static void setup() {\n+        for (int i = 0; i < SIZE; i++) {\n+            a[i] = i;\n+            b[i] = i;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        setup();\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n+        applyIfPlatform = {\"x64\", \"true\"},\n+        applyIfCPUFeature = {\"sse4.1\", \"true\"})\n+    public static void test1() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if all the platform constraints hold\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n+        applyIfPlatformAnd = {\"x64\", \"true\", \"linux\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"})\n+    public static void test2() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if any of the platform constraints hold\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n+        applyIfPlatformOr = {\"linux\", \"true\", \"mac\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"avx2\", \"true\"})\n+    public static void test3() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPlatformChecks.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package ir_framework.tests;\n-\n-import compiler.lib.ir_framework.*;\n-import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n-\n-\/*\n- * @test 8280120\n- * @summary Add attribute to IR to enable\/disable IR matching based on the architecture\n- * @library \/test\/lib \/\n- * @run driver ir_framework.tests.TestPlatformFeatureCheck\n- *\/\n-\n-public class TestPlatformFeatureCheck {\n-    private static final int SIZE = 1000;\n-    private static int[] a = new int[SIZE];\n-    private static int[] b = new int[SIZE];\n-    private static int[] res = new int[SIZE];\n-\n-    public static void setup() {\n-        for (int i = 0; i < SIZE; i++) {\n-            a[i] = i;\n-            b[i] = i;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        setup();\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n-        applyIfPlatformFeature = {\"x64\", \"true\"},\n-        applyIfCPUFeature = {\"sse4.1\", \"true\"})\n-    public static void test1() {\n-        for (int i = 0; i < SIZE; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if all the feature conditions holds good\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n-        applyIfPlatformFeatureAnd = {\"x64\", \"true\", \"linux\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"})\n-    public static void test2() {\n-        for (int i = 0; i < SIZE; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if any of the feature condition holds good\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"},\n-        applyIfPlatformFeatureOr = {\"linux\", \"true\", \"mac\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"avx2\", \"true\"})\n-    public static void test3() {\n-        for (int i = 0; i < SIZE; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPlatformFeatureCheck.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -87,1 +87,1 @@\n-    @IR(applyIfPlatformFeatureAnd = {\"linux\", \"true\", \"mac\", \"true\"},\n+    @IR(applyIfPlatformAnd = {\"linux\", \"true\", \"mac\", \"true\"},\n@@ -93,1 +93,1 @@\n-    @IR(applyIfPlatformFeatureAnd = {\"32-bit\", \"true\", \"64-bit\", \"true\"},\n+    @IR(applyIfPlatformAnd = {\"32-bit\", \"true\", \"64-bit\", \"true\"},\n@@ -99,1 +99,1 @@\n-    @IR(applyIfPlatformFeatureAnd = {\"x64\", \"true\", \"aarch64\", \"true\"},\n+    @IR(applyIfPlatformAnd = {\"x64\", \"true\", \"aarch64\", \"true\"},\n@@ -103,1 +103,1 @@\n-    \/\/ Platform version of testApplyBoth2.\n+    \/\/ Platform versions of testApplyBoth2\/3.\n@@ -105,1 +105,1 @@\n-    @IR(applyIfPlatformFeature = {\"aarch64\", \"true\"},\n+    @IR(applyIfPlatform = {\"aarch64\", \"true\"},\n@@ -108,1 +108,19 @@\n-    public static void testApplyBoth4() {}\n+    public static void testApplyPlatformSVE() {}\n+\n+    @Test\n+    @IR(applyIfPlatform = {\"x64\", \"true\"},\n+        applyIfAnd = {\"UseAVX\", \"= 2\", \"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyPlatformAVX() {}\n+\n+    @Test\n+    @IR(applyIfPlatformAnd = {\"x64\", \"true\", \"linux\", \"true\"},\n+        applyIfAnd = {\"UseAVX\", \"= 2\", \"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyPlatformAVXAnd() {}\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"x86\", \"true\"},\n+        applyIfAnd = {\"UseSSE\", \"= 4\", \"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyPlatformSSEOr() {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"}]}