{"files":[{"patch":"@@ -235,1 +235,1 @@\n-    ? delta_as_int(sender_sp(), sp())\n+    ? pointer_delta_as_int(sender_sp(), sp())\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        + delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n+        + pointer_delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n","filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    ? delta_as_int(sender_sp(), sp())\n+    ? pointer_delta_as_int(sender_sp(), sp())\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-    set_int_at(displacement_offset, delta_as_int(dest, return_address()));\n+    set_int_at(displacement_offset, (int)(dest - return_address()));\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        + delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n+        + pointer_delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n","filename":"src\/hotspot\/cpu\/x86\/stackChunkFrameStream_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-    _bytes_to_copy = delta_as_int(masm->pc(), pc_start());\n+    _bytes_to_copy = pointer_delta_as_int(masm->pc(), pc_start());\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-    return delta_as_int(dp, ((address)_data));\n+    return pointer_delta_as_int(dp, ((address)_data));\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,3 +113,3 @@\n-  int next_bci() const          { return delta_as_int(_pc, _start); }\n-  int cur_bci() const           { return delta_as_int(_bc_start, _start); }\n-  int instruction_size() const  { return delta_as_int(_pc, _bc_start); }\n+  int next_bci() const          { return pointer_delta_as_int(_pc, _start); }\n+  int cur_bci() const           { return pointer_delta_as_int(_bc_start, _start); }\n+  int instruction_size() const  { return pointer_delta_as_int(_pc, _bc_start); }\n","filename":"src\/hotspot\/share\/ci\/ciStreams.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  int length() const { return delta_as_int(_buffer_end, _buffer_start); }\n+  int length() const { return pointer_delta_as_int(_buffer_end, _buffer_start); }\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,3 +195,3 @@\n-  int relocation_size() const                    { return delta_as_int((address) relocation_end(), (address) relocation_begin()); }\n-  int content_size() const                       { return delta_as_int(content_end(), content_begin()); }\n-  int code_size() const                          { return delta_as_int(code_end(), code_begin()); }\n+  int relocation_size() const                    { return pointer_delta_as_int((address) relocation_end(), (address) relocation_begin()); }\n+  int content_size() const                       { return pointer_delta_as_int(content_end(), content_begin()); }\n+  int code_size() const                          { return pointer_delta_as_int(code_end(), code_begin()); }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  return _oop_maps->find_map_at_slot(slot, delta_as_int(return_address, code_begin()));\n+  return _oop_maps->find_map_at_slot(slot, pointer_delta_as_int(return_address, code_begin()));\n","filename":"src\/hotspot\/share\/code\/codeBlob.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  return delta_as_int(InterpretedFrame::frame_bottom(f), InterpretedFrame::frame_top(f));\n+  return pointer_delta_as_int(InterpretedFrame::frame_bottom(f), InterpretedFrame::frame_top(f));\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  int         size_in_bytes() const              { return delta_as_int(_end, _begin); }\n+  int         size_in_bytes() const              { return pointer_delta_as_int(_end, _begin); }\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-\/\/ delta_as_int is called to do pointer subtraction for nearby pointers that\n+\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n@@ -526,2 +526,1 @@\n-\/\/ This allows the left side to be less than the right side, unlike pointer_delta,\n-\/\/ and scales to sizeof(T)\n+\/\/ This scales to sizeof(T)\n@@ -529,2 +528,2 @@\n-inline int delta_as_int(const volatile T* left, const volatile T* right) {\n-  return checked_cast<int>(left - right);\n+inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n+  return checked_cast<int>(pointer_delta(left, right, sizeof(T)));\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}