{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,5 +62,0 @@\n-  \/\/ filter out java\/lang\/invoke\/BoundMethodHandle$Species....\n-  if (cfs != NULL && strcmp(cfs->source(), \"_ClassSpecializer_generateConcreteSpeciesCode\") == 0) {\n-    return;\n-  }\n-\n@@ -110,1 +105,0 @@\n-  ClassLoaderData* loader_data = k->class_loader_data();\n@@ -112,2 +106,14 @@\n-  if (!SystemDictionaryShared::is_builtin_loader(loader_data)) {\n-    if (cfs == NULL || strncmp(cfs->source(), \"file:\", 5) != 0) {\n+  ClassLoaderData* loader_data = k->class_loader_data();\n+  bool is_builtin_loader = SystemDictionaryShared::is_builtin_loader(loader_data);\n+  if (!is_builtin_loader) {\n+    \/\/ class may be loaded from shared archive\n+    if (!k->is_shared()) {\n+      if (cfs == nullptr || cfs->source() == nullptr) {\n+        \/\/ CDS static dump only handles unregistered class with known source.\n+        return;\n+      }\n+      if (strncmp(cfs->source(), \"file:\", 5) != 0) {\n+        return;\n+      }\n+    } else {\n+      \/\/ Shared unregistered classes are skipped since their real source are not recorded in shared space.\n@@ -121,0 +127,4 @@\n+  \/\/ filter out java\/lang\/invoke\/BoundMethodHandle$Species...\n+  if (cfs != nullptr && cfs->source() != nullptr && strcmp(cfs->source(), \"_ClassSpecializer_generateConcreteSpeciesCode\") == 0) {\n+    return;\n+  }\n@@ -148,1 +158,1 @@\n-  if (!SystemDictionaryShared::is_builtin_loader(loader_data)) {\n+  if (!is_builtin_loader) {\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.security.ProtectionDomain;\n+\n+\n+public class ClassListWithCustomClassNoSource {\n+    private static byte[] helloBytes;\n+    private static final String HELLO = \"Hello\";\n+    static class CL extends ClassLoader {\n+        private ProtectionDomain pd;\n+        public CL(String name, ClassLoader parent, ProtectionDomain protD) {\n+            super(name, parent);\n+            pd = protD;\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (pd == null) {\n+                pd = new ProtectionDomain(null, null);\n+            }\n+            return defineClass(name, helloBytes, 0, helloBytes.length, pd);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Invalid arg, Use 1, 2, or 3\");\n+        }\n+\n+        ClassLoader thisLoader = ClassListWithCustomClassNoSource.class.getClassLoader();\n+        helloBytes = thisLoader.getResourceAsStream(HELLO + \".class\").readAllBytes();\n+\n+        switch(args[0]) {\n+        case \"1\":\n+            Class<?> cls1 = (new CL(\"HelloLoader\", null, null)).loadClass(HELLO);\n+            System.out.println(HELLO + \" was successfully loaded by \" + cls1.getClassLoader().getName());\n+            break;\n+        case \"2\":\n+            ProtectionDomain p = ClassListWithCustomClassNoSource.class.getProtectionDomain();\n+            Class<?> cls2 = (new CL(\"HelloLoader\", null, p)).loadClass(HELLO);\n+            System.out.println(HELLO + \" was successfully loaded by \" + cls2.getClassLoader().getName());\n+            break;\n+        case \"3\":\n+            URL url = ClassListWithCustomClassNoSource.class.getProtectionDomain().getCodeSource().getLocation();\n+            URLClassLoader urlLoader = new URLClassLoader(\"HelloClassLoader\", new URL[] {url}, null);\n+            Class<?> cls = urlLoader.loadClass(HELLO);\n+            if (cls != null) {\n+                System.out.println(HELLO + \" was loaded by \" + cls.getClassLoader().getName());\n+                if (urlLoader != cls.getClassLoader()) {\n+                    System.out.println(HELLO + \" was not loaded by \" + urlLoader.getName());\n+                }\n+            } else {\n+                System.out.println(HELLO + \" is not loaded\");\n+            }\n+            break;\n+        default:\n+            throw new RuntimeException(\"Should have one argument,  1, 2 or 3\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassListWithCustomClassNoSource.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+\/\/ When this class is executed, the following classes will be generated by\n+\/\/ java.lang.invoke.ClassSpecializer with the code source\n+\/\/ \"_ClassSpecializer_generateConcreteSpeciesCode\".\n+\/\/\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIIL\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIILJ\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIILJD\n+\/\/   - ...\n+\/\/\n+\/\/ The TestDumpClassListSource test case checks that these classes are not\n+\/\/ written into the classlist, as they cannot be handled by -Xshare:dump\n+public class ClassSpecializerTestApp {\n+    public static void main(String args[]) throws Throwable {\n+\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        MethodType mt = MethodType.methodType(void.class, float.class, double.class, int.class,\n+                                              boolean.class, Object.class, long.class, double.class);\n+        MethodHandle mh = lookup.findStatic(ClassSpecializerTestApp.class, \"callme\", mt);\n+        invoke(mh, 4.0f, 5.0, 6, true, null, 7L, 8.0);\n+    }\n+\n+    private static Object invoke(MethodHandle mh, Object ... args) throws Throwable {\n+        try {\n+            for (Object o : args) {\n+                mh = MethodHandles.insertArguments(mh, 0, o);\n+            }\n+            return mh.invoke();\n+        } catch (Throwable t) {\n+            System.out.println(\"Failed to find, link and\/or invoke \" + mh.toString() + \": \" + t.getMessage());\n+            throw t;\n+        }\n+    }\n+\n+    private static void callme(float f, double d, int i, boolean b, Object o, long l, double d2) {}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassSpecializerTestApp.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.io.File;\n+\n@@ -43,0 +45,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -50,0 +54,1 @@\n+    private static String HELLO_WORLD = \"Hello World\";\n@@ -86,1 +91,1 @@\n-                TestCommon.checkExec(execOutput, \"Hello World\");\n+                TestCommon.checkExec(execOutput, HELLO_WORLD);\n@@ -108,1 +113,1 @@\n-            TestCommon.checkExec(execOutput, \"Hello World\");\n+            TestCommon.checkExec(execOutput, HELLO_WORLD);\n@@ -110,0 +115,2 @@\n+\n+        testExtraCase(appJar, classList);\n@@ -131,0 +138,37 @@\n+\n+    \/\/ { -Xshare:dump, -XX:ArchiveClassesAtExit} x { -XX:DumpLoadedClassList }\n+    private static void testExtraCase(String jarFile, String[] classList) throws Exception {\n+        \/\/ 1. -Xshare:dump -XX:-XX:DumpLoadedClassFile\n+        String dumpedListName = \"tmpClassList.list\";\n+        File listFile = new File(dumpedListName);\n+        if (listFile.exists()) {\n+            listFile.delete();\n+        }\n+        OutputAnalyzer dumpOutput = TestCommon.dump(jarFile, classList, \"-XX:DumpLoadedClassList=\" + dumpedListName);\n+        TestCommon.checkDump(dumpOutput, \"Loading classes to share\");\n+        if (!listFile.exists()) {\n+            throw new RuntimeException(\"ClassList file \" + dumpedListName + \" should be created\");\n+        }\n+\n+        \/\/ 2. -XX:ArchiveClassesAtExit -XX:DumpLoadedClassFile\n+        String dynName = \"tmpDyn.jsa\";\n+        File dynFile = new File(dynName);\n+        if (dynFile.exists()) {\n+            dynFile.delete();\n+        }\n+        if (listFile.exists()) {\n+            listFile.delete();\n+        }\n+        String[] args = new String[] {\n+            \"-cp\", jarFile, \"-XX:ArchiveClassesAtExit=\" + dynName, \"-XX:DumpLoadedClassList=\" + dumpedListName, \"Hello\"};\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"combo\");\n+        output.shouldHaveExitValue(0)\n+              .shouldContain(HELLO_WORLD);\n+        if (!dynFile.exists()) {\n+            throw new RuntimeException(\"Dynamic archive file \" + dynName + \" should be created\");\n+        }\n+        if (!listFile.exists()) {\n+            throw new RuntimeException(\"ClassList file \" + dumpedListName + \" should be created\");\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/CommandLineFlagCombo.java","additions":47,"deletions":3,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,233 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary test dynamic dump meanwhile output loaded class list\n+ * @bug 8279009 8275084\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java ClassSpecializerTestApp.java ClassListWithCustomClassNoSource.java\n+ * @run main\/othervm TestDumpClassListSource\n+ *\/\n+\n+\/* Test two senarios:\n+ *   1. ClassSpecializerTestApp.java:\n+ *      Test case for bug 8275084, make sure the filtering of source class to\n+ *      dumped class list.\n+ *   2. ClassListWithCustomClassNoSource: test custom class loader\n+ *      2.1 class loaded without source.\n+ *      2.2 class loaded with ProtectionDomain set as same as main class.\n+ *      2.3 class loaded by custom loader from shared space.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.File;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.cds.CDSTestUtils;\n+\n+public class TestDumpClassListSource {\n+    private static final boolean EXPECT_MATCH = true;\n+    private static final boolean EXPECT_NOMATCH  = !EXPECT_MATCH;\n+\n+    private static void checkMatch(String file, String regexp, boolean expectMatch, String exceptionMessage) throws Exception {\n+        String listData = new String(Files.readAllBytes(Paths.get(file)));\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        Matcher matcher = pattern.matcher(listData);\n+        boolean found   = matcher.find();\n+        if (expectMatch) {\n+            if (!found) {\n+                throw new RuntimeException(exceptionMessage);\n+            }\n+        } else {\n+            if (found) {\n+                throw new RuntimeException(exceptionMessage);\n+            }\n+        }\n+    }\n+\n+    static final String mainInvokeClass = \"ClassSpecializerTestApp\";\n+    static final String mainCutomClass  = \"ClassListWithCustomClassNoSource\";\n+    static final String sourceTarget    = \"_ClassSpecializer_generateConcreteSpeciesCode\";\n+\n+    private static void checkFileExistence(String type, File file) throws Exception {\n+        if (!file.exists()) {\n+            throw new RuntimeException(type + \" file \" + file.getName() + \" should be created\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String listFileName = \"test-classlist.list\";\n+        String archiveName  = \"test-dynamic.jsa\";\n+        String jarFile = JarBuilder.build(\"test-hello\", \"ClassSpecializerTestApp\", \"ClassListWithCustomClassNoSource\",\n+                                          \"ClassListWithCustomClassNoSource$CL\", \"Hello\");\n+        \/\/ 1. Invoke lambda\n+        File fileList = new File(listFileName);\n+        if (fileList.exists()) {\n+            fileList.delete();\n+        }\n+        File fileArchive = new File(archiveName);\n+        if (fileArchive.exists()) {\n+            fileArchive.delete();\n+        }\n+        String[] launchArgs  = {\n+                \"-Xshare:auto\",\n+                \"-XX:DumpLoadedClassList=\" + listFileName,\n+                \"-XX:ArchiveClassesAtExit=\" + archiveName,\n+                \"-Xlog:cds\",\n+                \"-Xlog:cds+lambda\",\n+                \"-cp\",\n+                jarFile,\n+                mainInvokeClass};\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, \"invoke-class\");\n+\n+        checkFileExistence(\"Archive\", fileArchive);\n+        checkFileExistence(\"ClassList\", fileList);\n+\n+        output.shouldHaveExitValue(0);\n+        checkMatch(listFileName, sourceTarget, EXPECT_NOMATCH, \"Failed to filter \" + sourceTarget + \" in class list file\");\n+\n+        fileArchive.delete();\n+        fileList.delete();\n+\n+        \/\/ 2. Custom loaded class\n+        \/\/    2.1 test in memory class generation without source\n+        launchArgs  = new String[] {\n+                \"-Xshare:auto\",\n+                \"-XX:DumpLoadedClassList=\" + listFileName,\n+                \"-XX:ArchiveClassesAtExit=\" + archiveName,\n+                \"-Xlog:cds\",\n+                \"-Xlog:cds+lambda\",\n+                \"-Xlog:class+path=info\",\n+                 \"-cp\",\n+                jarFile,\n+                mainCutomClass,\n+                \"1\"};\n+        pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        output = TestCommon.executeAndLog(pb, \"custom-nosource\");\n+\n+        checkFileExistence(\"Archive\", fileArchive);\n+        checkFileExistence(\"ClassList\", fileList);\n+\n+        output.shouldHaveExitValue(0);\n+        checkMatch(listFileName, sourceTarget, EXPECT_NOMATCH, \"Failed to filter \" + sourceTarget + \" in class list file\");\n+        checkMatch(listFileName, \"Hello\", EXPECT_NOMATCH, \"Hello should not be logged in class list file\");\n+\n+        fileArchive.delete();\n+        fileList.delete();\n+\n+        \/\/    2.2 test in memory class with ProtectionDomain as main class.\n+        \/\/    \"Hello\" will be printed in list file and its source set as main class.\n+        launchArgs  = new String[] {\n+                \"-Xshare:auto\",\n+                \"-XX:DumpLoadedClassList=\" + listFileName,\n+                \"-XX:ArchiveClassesAtExit=\" + archiveName,\n+                \"-Xlog:cds\",\n+                \"-Xlog:cds+lambda\",\n+                \"-Xlog:class+path=info\",\n+                 \"-cp\",\n+                jarFile,\n+                mainCutomClass,\n+                \"2\"};\n+        pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        output = TestCommon.executeAndLog(pb, \"custom-nosource\");\n+\n+        checkFileExistence(\"Archive\", fileArchive);\n+        checkFileExistence(\"ClassList\", fileList);\n+\n+        output.shouldHaveExitValue(0);\n+        checkMatch(listFileName, sourceTarget, EXPECT_NOMATCH, \"Failed to filter \" + sourceTarget + \" in class list file\");\n+        checkMatch(listFileName, \"Hello\", EXPECT_MATCH, \"Hello should be logged in class list file\");\n+\n+        fileArchive.delete();\n+        fileList.delete();\n+\n+        \/\/    2.3 class loaded by custom loader from shared space.\n+        \/\/      2.3.1 dump class list\n+        launchArgs = new String[] {\n+                \"-XX:DumpLoadedClassList=\" + listFileName,\n+                 \"-cp\",\n+                jarFile,\n+                mainCutomClass,\n+                \"3\"};\n+        pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        output = TestCommon.executeAndLog(pb, \"custom-dump-classlist\");\n+\n+        checkFileExistence(\"ClassList\", fileList);\n+\n+        checkMatch(listFileName, \"Hello id: [0-9]+ super: [0-9]+ source: .*\/test-hello.jar\", EXPECT_MATCH,\n+                   \"Class Hello should be printed in classlist\");\n+        \/\/      2.3.2 dump shared archive based on listFileName\n+        String archive = \"test-hello.jsa\";\n+        File archiveFile = new File(archive);\n+        if (archiveFile.exists()) {\n+            archiveFile.delete();\n+        }\n+        launchArgs = new String[] {\n+                \"-Xshare:dump\",\n+                \"-XX:SharedClassListFile=\" + listFileName,\n+                \"-XX:SharedArchiveFile=\" + archive,\n+                 \"-cp\",\n+                jarFile,\n+                mainCutomClass,\n+                \"3\"};\n+        pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        output = TestCommon.executeAndLog(pb, \"custom-dump\");\n+\n+        checkFileExistence(\"Archive\", archiveFile);\n+\n+        \/\/       2.3.3 run with the shared archive and -XX:DumpLoadedClassList\n+        \/\/             Hello should not be printed out in class list file.\n+        String classList = \"new-test-list.list\";\n+        File newFile = new File(classList);\n+        if (newFile.exists()) {\n+            newFile.delete();\n+        }\n+        launchArgs = new String[] {\n+                \"-Xshare:on\",\n+                \"-XX:SharedArchiveFile=\" + archive,\n+                \"-XX:DumpLoadedClassList=\" + classList,\n+                 \"-cp\",\n+                jarFile,\n+                mainCutomClass,\n+                \"3\"};\n+        pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        output = TestCommon.executeAndLog(pb, \"custom-share\");\n+\n+        checkFileExistence(\"ClassList\", newFile);\n+        checkMatch(classList, \"Hello id: ?\", EXPECT_NOMATCH, \"Failed to filter custom loaded class Hello from class list\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestDumpClassListSource.java","additions":233,"deletions":0,"binary":false,"changes":233,"status":"added"}]}