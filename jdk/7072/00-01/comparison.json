{"files":[{"patch":"@@ -30,2 +30,0 @@\n-import jdk.internal.org.objectweb.asm.*;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n@@ -34,17 +32,2 @@\n-\n-    static byte[] getClassBytes() {\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(56, ACC_PUBLIC | ACC_SUPER, \"UserDefKlass\", null, \"java\/lang\/Object\", null);\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n-        return cw.toByteArray();\n-    }\n-\n+    private static byte[] helloBytes;\n+    private static final String HELLO=\"Hello\";\n@@ -52,13 +35,4 @@\n-        @Override\n-        protected Class<?> findClass(String name) throws ClassNotFoundException {\n-            byte[] classBytes = getClassBytes();\n-            \/\/ both codeSource and permission set to null.\n-            ProtectionDomain pd = new ProtectionDomain(null, null);\n-            return defineClass(name, classBytes, 0, classBytes.length, pd);\n-        }\n-    }\n-\n-    static class DL extends ClassLoader {\n-        ProtectionDomain pd;\n-        public DL(ProtectionDomain p) {\n-            pd = p;\n+        private ProtectionDomain pd;\n+        public CL(String name, ClassLoader parent, ProtectionDomain protD) {\n+            super(name, parent);\n+            pd = protD;\n@@ -69,4 +43,4 @@\n-            byte[] classBytes = getClassBytes();\n-            \/\/ code source is same as main class\n-            \/\/ started with \"file: \" so it will be logged in class list file.\n-            return defineClass(name, classBytes, 0, classBytes.length, pd);\n+            if (pd == null) {\n+                pd = new ProtectionDomain(null, null);\n+            }\n+            return defineClass(name, helloBytes, 0, helloBytes.length, pd);\n@@ -81,0 +55,3 @@\n+        ClassLoader thisLoader = ClassListWithCustomClassNoSource.class.getClassLoader();\n+        helloBytes = thisLoader.getResourceAsStream(HELLO + \".class\").readAllBytes();\n+\n@@ -83,2 +60,2 @@\n-            Class<?> cls1 = (new CL()).loadClass(\"UserDefKlass\");\n-            System.out.println(\"CL Successfully loaded class: UserDefKlass\");\n+            Class<?> cls1 = (new CL(\"HelloLoader\", null, null)).loadClass(HELLO);\n+            System.out.println(HELLO + \" was successfully loaded by \" + cls1.getClassLoader().getName());\n@@ -88,2 +65,2 @@\n-            Class<?> cls2 = (new DL(p)).loadClass(\"UserDefKlass\");\n-            System.out.println(\"DL Successfully loaded class: UserDefKlass\");\n+            Class<?> cls2 = (new CL(\"HelloLoader\", null, p)).loadClass(HELLO);\n+            System.out.println(HELLO + \" was successfully loaded by \" + cls2.getClassLoader().getName());\n@@ -94,1 +71,1 @@\n-            Class<?> cls = urlLoader.loadClass(\"Hello\");\n+            Class<?> cls = urlLoader.loadClass(HELLO);\n@@ -96,1 +73,1 @@\n-               System.out.println(\"Hello loaded by \" + cls.getClassLoader().getName());\n+               System.out.println(HELLO + \" was loaded by \" + cls.getClassLoader().getName());\n@@ -98,1 +75,1 @@\n-                   System.out.println(\"Hello is not loaded by \" + urlLoader.getName());\n+                   System.out.println(HELLO + \" was not loaded by \" + urlLoader.getName());\n@@ -101,1 +78,1 @@\n-               System.out.println(\"Hello is not loaded\");\n+               System.out.println(HELLO + \" is not loaded\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassListWithCustomClassNoSource.java","additions":21,"deletions":44,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-\n-public class ClassListWithInvokerClassNoSource {\n-    public static void main(String args[]) throws Throwable {\n-\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        MethodType mt = MethodType.methodType(void.class, float.class, double.class, int.class,\n-                                              boolean.class, Object.class, long.class, double.class);\n-        MethodHandle mh = lookup.findStatic(ClassListWithInvokerClassNoSource.class, \"callme\", mt);\n-        invoke(mh, 4.0f, 5.0, 6, true, null, 7L, 8.0);\n-    }\n-\n-    private static Object invoke(MethodHandle mh, Object ... args) throws Throwable {\n-        try {\n-            for (Object o : args) {\n-                mh = MethodHandles.insertArguments(mh, 0, o);\n-            }\n-            return mh.invoke();\n-        } catch (Throwable t) {\n-            System.out.println(\"Failed to find, link and\/or invoke \" + mh.toString() + \": \" + t.getMessage());\n-            throw t;\n-        }\n-    }\n-\n-    private static void callme(float f, double d, int i, boolean b, Object o, long l, double d2) {}\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassListWithInvokerClassNoSource.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+\/\/ When this class is executed, the following classes will be generated by\n+\/\/ java.lang.invoke.ClassSpecializer with the code source\n+\/\/ \"_ClassSpecializer_generateConcreteSpeciesCode\".\n+\/\/\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIIL\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIILJ\n+\/\/   - java.lang.invoke.BoundMethodHandle$Species_LFDIILJD\n+\/\/   - ...\n+\/\/\n+\/\/ The TestDumpClassListSource test case checks that these classes are not\n+\/\/ written into the classlist, as they cannot be handled by -Xshare:dump\n+public class ClassSpecializerTestApp {\n+    public static void main(String args[]) throws Throwable {\n+\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        MethodType mt = MethodType.methodType(void.class, float.class, double.class, int.class,\n+                                              boolean.class, Object.class, long.class, double.class);\n+        MethodHandle mh = lookup.findStatic(ClassSpecializerTestApp.class, \"callme\", mt);\n+        invoke(mh, 4.0f, 5.0, 6, true, null, 7L, 8.0);\n+    }\n+\n+    private static Object invoke(MethodHandle mh, Object ... args) throws Throwable {\n+        try {\n+            for (Object o : args) {\n+                mh = MethodHandles.insertArguments(mh, 0, o);\n+            }\n+            return mh.invoke();\n+        } catch (Throwable t) {\n+            System.out.println(\"Failed to find, link and\/or invoke \" + mh.toString() + \": \" + t.getMessage());\n+            throw t;\n+        }\n+    }\n+\n+    private static void callme(float f, double d, int i, boolean b, Object o, long l, double d2) {}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassSpecializerTestApp.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -31,1 +31,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -33,1 +32,1 @@\n- * @compile test-classes\/Hello.java ClassListWithInvokerClassNoSource.java ClassListWithCustomClassNoSource.java\n+ * @compile test-classes\/Hello.java ClassSpecializerTestApp.java ClassListWithCustomClassNoSource.java\n@@ -38,3 +37,1 @@\n- *   1. ClassListWithCustomClassNoSource:\n- *      Use custom loader to load dynmaically generated class without source.\n- *   2. ClassListWithInvokerClassNoSource:\n+ *   1. ClassSpecializerTestApp.java:\n@@ -43,0 +40,2 @@\n+ *   2. ClassListWithCustomClassNoSource:\n+ *      Use custom loader to load dynmaically generated class without source.\n@@ -80,1 +79,1 @@\n-    static final String mainInvokeClass = \"ClassListWithInvokerClassNoSource\";\n+    static final String mainInvokeClass = \"ClassSpecializerTestApp\";\n@@ -93,2 +92,2 @@\n-        String jarFile = JarBuilder.build(\"test-hello\", \"ClassListWithInvokerClassNoSource\", \"ClassListWithCustomClassNoSource\",\n-                                          \"ClassListWithCustomClassNoSource$CL\", \"ClassListWithCustomClassNoSource$DL\", \"Hello\");\n+        String jarFile = JarBuilder.build(\"test-hello\", \"ClassSpecializerTestApp\", \"ClassListWithCustomClassNoSource\",\n+                                          \"ClassListWithCustomClassNoSource$CL\", \"Hello\");\n@@ -148,1 +147,1 @@\n-        checkMatch(listFileName, \"UserDefKlass\", EXPECT_NOMATCH,\"UserDefKlass should not be logged in class list file\");\n+        checkMatch(listFileName, \"Hello\", EXPECT_NOMATCH,\"Hello should not be logged in class list file\");\n@@ -154,1 +153,1 @@\n-        \/\/    \"UserDefKlass\" will be printed in list file and its source set as main class.\n+        \/\/    \"Hello\" will be printed in list file and its source set as main class.\n@@ -176,1 +175,1 @@\n-        checkMatch(listFileName, \"UserDefKlass\", EXPECT_MATCH, \"UserDefKlass should be logged in class list file\");\n+        checkMatch(listFileName, \"Hello\", EXPECT_MATCH, \"Hello should be logged in class list file\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestDumpClassListSource.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"}]}