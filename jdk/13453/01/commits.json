[{"commit":{"message":"8305995: Use full dominant search for regions\n\nThis is a fix for the regression introduced by\nda43cb5e463069cf4dafb262664f0d3d7c2e0eac in fix 8224957.\n\nThis regression was found while attempting to migrate an application\nfrom JDK 1.8 to JDK 17, by running internal benchmarks, and while\ninvestigating abnormal memory usage for about 4 times more from one of\nthem.\n\nThe regression appears in provided JMH benchmark, which builds a RB-tree\nbased map which contains 780 entries with primitive integers.\n\nThis benchmark was run with `ParallelGC` on different JVMs: `JDK\n1.8.0_362`, `JDK 11.0.18`, `JDK 13.0.13`, `JDK 15.0.9`, `JDK 17.0.6`,\n`JDK 19.0.2` and `JDK 20`. This allows to see that something has changed\nbetween 13 and 15, and that the memory footprint for this code has\nincreased from nothing `≈ 10⁻³ ` to `7536` bytes per operation.\n\nProposed fix reduces the memory footprint expected value."},"files":[{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/JDK8305995.java"}],"sha":"dbc3ebf9f5ce29185da71c072cba05116d2d8905"}]