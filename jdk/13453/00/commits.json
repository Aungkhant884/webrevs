[{"commit":{"message":"Use full dominant search for regions\n\nThis is a fix for the regression introduced by\nda43cb5e463069cf4dafb262664f0d3d7c2e0eac in fix 8224957.\n\nThis regression was found while attempting to migrate an application\nfrom JDK 1.8 to JDK 17, by running internal benchmarks, and while\ninvestigating abnormal memory usage for about 4 times more from one of\nthem.\n\nThe regression appears in the JMH benchmark, which builds a huge tree\nwhich contains boxed integers from 0 to a few thousand. A tree has very\ncomplex structure and the same objects are reused a lot.\n\nWhen an `integer` is found it's collected as `Integer` and unboxed\ninside the collector callback.\n\nThis benchmark was run with `ParallelGC` on different JVMs: `JDK\n1.8.0_362`, `JDK 11.0.18`, `JDK 13.0.13`, `JDK 15.0.9`, `JDK 17.0.6`,\n`JDK 19.0.2` and `JDK 20`. This allows to see that something has changed\nbetween 13 and 15, and that the memory footprint for this code has\nincreased from `3152` to `11828` bytes per operation.\n\nAfter that I've done a `git bisect` which allows me to locate the\nintroducer.\n\nSo the current fix reduces the memory footprint on the local root\n425ef0685c584abec80454fbcccdcc6db6558f93 to `2960` bytes per operation."},"files":[{"filename":"src\/hotspot\/share\/opto\/node.cpp"}],"sha":"82c7757927b3a7b347cce14cc323315763f3556a"}]