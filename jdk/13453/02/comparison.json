{"files":[{"patch":"@@ -1313,1 +1313,1 @@\n-    } else if (sub == up && sub->is_Region() && sub->req() == 3) {\n+    } else if (sub == up && sub->is_Region()) {\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1236 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * This benchmark is used as easy reproducer of JDK-8305995\n+ *\n+ * This benchmark contains simplified and minimized RB-tree\n+ * which is based on fasutils with iterators that jumps.\n+ *\n+ * At the end it contains a tree serialized as lines, and\n+ * maxPattern which is used to search in this tree.\n+ *\/\n+@State(Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class RBTreeSearch {\n+\n+    private final Tree pattern;\n+\n+    private final Tree[] nodes;\n+\n+    private final Tree root;\n+\n+    private final int[] idxStack;\n+    private final Tree[] objStack;\n+\n+    public RBTreeSearch() {\n+        idxStack = new int[maxPattern];\n+\n+        objStack = new Tree[maxPattern];\n+\n+        pattern = new Tree();\n+        for (int i = 0; i <= maxPattern; i++) {\n+            pattern.put(i, i);\n+        }\n+\n+        nodes = new Tree[directions.length];\n+        for (int i = 0; i < directions.length; i++) {\n+            if (directions[i] == null) {\n+                continue;\n+            }\n+            Tree kids = new Tree();\n+            nodes[i] = kids;\n+            for (String pair : directions[i].split(\", \")) {\n+                String[] kv = pair.split(\"=>\");\n+                kids.put(Integer.parseInt(kv[0]), Integer.parseInt(kv[1]));\n+            }\n+        }\n+\n+        root = nodes[0];\n+    }\n+\n+    @Benchmark\n+    public void search() {\n+        Tree.Iterator sliceIt = pattern.keyIterator();\n+\n+        int stackSize = 0;\n+        idxStack[stackSize] = pattern.firstIntKey();\n+        objStack[stackSize++] = root;\n+\n+        while (stackSize > 0) {\n+            stackSize--;\n+            Tree node = objStack[stackSize];\n+\n+            final int startPoint = Math.max(idxStack[stackSize], node.firstIntKey()) - 1;\n+            final Tree.Iterator rootIt = node.keyIterator(startPoint);\n+\n+            sliceIt.jump(startPoint);\n+            while (sliceIt.hasNext() && rootIt.hasNext()) {\n+                final int sliceElem = sliceIt.nextInt();\n+                final int rootElem = rootIt.nextInt();\n+                if (sliceElem < rootElem) {\n+                    rootIt.previousInt();\n+                    if (sliceIt.nextInt() >= rootElem) {\n+                        sliceIt.previousInt();\n+                    } else {\n+                        sliceIt.jump(rootElem - 1);\n+                    }\n+                } else if (sliceElem == rootElem) {\n+                    final int childrenIdx = node.get(sliceElem);\n+                    final Tree children = nodes[childrenIdx];\n+\n+                    if (children != null) {\n+                        idxStack[stackSize] = sliceElem;\n+                        objStack[stackSize++] = children;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class Tree {\n+\n+        protected transient Entry root;\n+\n+        protected transient Entry firstEntry;\n+\n+        protected transient Entry lastEntry;\n+\n+        private final transient boolean[] dirPath = new boolean[64];\n+\n+        private final transient Entry[] nodePath = new Entry[64];\n+\n+        public int put(final int k, final int v) {\n+            Entry e = add(k);\n+            final int oldValue = e.value;\n+            e.value = v;\n+            return oldValue;\n+        }\n+\n+        private Entry add(final int k) {\n+            int maxDepth = 0;\n+            Entry e;\n+            if (root == null) {\n+                e = root = lastEntry = firstEntry = new Entry(k, 0);\n+            }\n+            else {\n+                Entry p = root;\n+                int cmp, i = 0;\n+                while(true) {\n+                    if ((cmp = Integer.compare(k, p.key)) == 0) {\n+                        while(i-- != 0) nodePath[i] = null;\n+                        return p;\n+                    }\n+                    nodePath[i] = p;\n+                    if (dirPath[i++] = cmp > 0) {\n+                        if (p.succ()) {\n+                            e = new Entry(k, 0);\n+                            if (p.right == null) lastEntry = e;\n+                            e.left = p;\n+                            e.right = p.right;\n+                            p.right(e);\n+                            break;\n+                        }\n+                        p = p.right;\n+                    }\n+                    else {\n+                        if (p.pred()) {\n+                            e = new Entry(k, 0);\n+                            if (p.left == null) firstEntry = e;\n+                            e.right = p;\n+                            e.left = p.left;\n+                            p.left(e);\n+                            break;\n+                        }\n+                        p = p.left;\n+                    }\n+                }\n+                maxDepth = i--;\n+                while(i > 0 && ! nodePath[i].black()) {\n+                    if (! dirPath[i - 1]) {\n+                        Entry y = nodePath[i - 1].right;\n+                        if (! nodePath[i - 1].succ() && ! y.black()) {\n+                            nodePath[i].black(true);\n+                            y.black(true);\n+                            nodePath[i - 1].black(false);\n+                            i -= 2;\n+                        }\n+                        else {\n+                            Entry x;\n+                            if (! dirPath[i]) y = nodePath[i];\n+                            else {\n+                                x = nodePath[i];\n+                                y = x.right;\n+                                x.right = y.left;\n+                                y.left = x;\n+                                nodePath[i - 1].left = y;\n+                                if (y.pred()) {\n+                                    y.pred(false);\n+                                    x.succ(y);\n+                                }\n+                            }\n+                            x = nodePath[i - 1];\n+                            x.black(false);\n+                            y.black(true);\n+                            x.left = y.right;\n+                            y.right = x;\n+                            if (i < 2) root = y;\n+                            else {\n+                                if (dirPath[i - 2]) nodePath[i - 2].right = y;\n+                                else nodePath[i - 2].left = y;\n+                            }\n+                            if (y.succ()) {\n+                                y.succ(false);\n+                                x.pred(y);\n+                            }\n+                            break;\n+                        }\n+                    }\n+                    else {\n+                        Entry y = nodePath[i - 1].left;\n+                        if (! nodePath[i - 1].pred() && ! y.black()) {\n+                            nodePath[i].black(true);\n+                            y.black(true);\n+                            nodePath[i - 1].black(false);\n+                            i -= 2;\n+                        }\n+                        else {\n+                            Entry x;\n+                            if (dirPath[i]) y = nodePath[i];\n+                            else {\n+                                x = nodePath[i];\n+                                y = x.left;\n+                                x.left = y.right;\n+                                y.right = x;\n+                                nodePath[i - 1].right = y;\n+                                if (y.succ()) {\n+                                    y.succ(false);\n+                                    x.pred(y);\n+                                }\n+                            }\n+                            x = nodePath[i - 1];\n+                            x.black(false);\n+                            y.black(true);\n+                            x.right = y.left;\n+                            y.left = x;\n+                            if (i < 2) root = y;\n+                            else {\n+                                if (dirPath[i - 2]) nodePath[i - 2].right = y;\n+                                else nodePath[i - 2].left = y;\n+                            }\n+                            if (y.pred()){\n+                                y.pred(false);\n+                                x.succ(y);\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+            root.black(true);\n+            while(maxDepth-- != 0) nodePath[maxDepth] = null;\n+            return e;\n+        }\n+\n+        private static final class Entry {\n+            int key;\n+            int value;\n+\n+            private static final int BLACK_MASK = 1;\n+\n+            private static final int SUCC_MASK = 1 << 31;\n+\n+            private static final int PRED_MASK = 1 << 30;\n+\n+            Entry left, right;\n+\n+            int info;\n+\n+            Entry(final int k, final int v) {\n+                key = k;\n+                value = v;\n+                info = SUCC_MASK | PRED_MASK;\n+            }\n+\n+            Entry left() {\n+                return (info & PRED_MASK) != 0 ? null : left;\n+            }\n+\n+            Entry right() {\n+                return (info & SUCC_MASK) != 0 ? null : right;\n+            }\n+\n+            boolean pred() {\n+                return (info & PRED_MASK) != 0;\n+            }\n+\n+            boolean succ() {\n+                return (info & SUCC_MASK) != 0;\n+            }\n+\n+            void pred(final boolean pred) {\n+                if (pred) info |= PRED_MASK;\n+                else info &= ~PRED_MASK;\n+            }\n+\n+            void succ(final boolean succ) {\n+                if (succ) info |= SUCC_MASK;\n+                else info &= ~SUCC_MASK;\n+            }\n+\n+            void pred(final Entry pred) {\n+                info |= PRED_MASK;\n+                left = pred;\n+            }\n+\n+            void succ(final Entry succ) {\n+                info |= SUCC_MASK;\n+                right = succ;\n+            }\n+\n+            void left(final Entry left) {\n+                info &= ~PRED_MASK;\n+                this.left = left;\n+            }\n+\n+            void right(final Entry right) {\n+                info &= ~SUCC_MASK;\n+                this.right = right;\n+            }\n+\n+            boolean black() {\n+                return (info & BLACK_MASK) != 0;\n+            }\n+\n+            void black(final boolean black) {\n+                if (black) info |= BLACK_MASK;\n+                else info &= ~BLACK_MASK;\n+            }\n+\n+            Entry next() {\n+                Entry next = this.right;\n+                if ((info & SUCC_MASK) == 0) while ((next.info & PRED_MASK) == 0) next = next.left;\n+                return next;\n+            }\n+\n+            Entry prev() {\n+                Entry prev = this.left;\n+                if ((info & PRED_MASK) == 0) while ((prev.info & SUCC_MASK) == 0) prev = prev.right;\n+                return prev;\n+            }\n+        }\n+\n+        public int get(final int k) {\n+            Entry e = root;\n+            int cmp;\n+            while (e != null && (cmp = Integer.compare(k, e.key)) != 0) {\n+                e = cmp < 0 ? e.left() : e.right();\n+            }\n+            return e == null ? 0 : e.value;\n+        }\n+\n+        public int firstIntKey() {\n+            return firstEntry.key;\n+        }\n+\n+        interface Iterator {\n+            boolean hasNext();\n+            int nextInt();\n+            int previousInt();\n+            void jump(final int fromElement);\n+        }\n+\n+        private class KeyIteratorImpl implements Iterator {\n+            Entry prev;\n+\n+            Entry next;\n+\n+            Entry curr;\n+\n+            int index = 0;\n+\n+            KeyIteratorImpl() {\n+                next = firstEntry;\n+            }\n+\n+            KeyIteratorImpl(final int k) {\n+                if ((next = locateKey(k)) != null) {\n+                    if (next.key <= k) {\n+                        prev = next;\n+                        next = next.next();\n+                    }\n+                    else prev = next.prev();\n+                }\n+            }\n+\n+            private Entry locateKey(final int k) {\n+                Entry e = root, last = root;\n+                int cmp = 0;\n+                while (e != null && (cmp = Integer.compare(k, e.key)) != 0) {\n+                    last = e;\n+                    e = cmp < 0 ? e.left() : e.right();\n+                }\n+                return cmp == 0 ? e : last;\n+            }\n+\n+            public boolean hasNext() { return next != null; }\n+\n+            Entry nextEntry() {\n+                curr = prev = next;\n+                index++;\n+                next = next.next();\n+                return curr;\n+            }\n+\n+            Entry previousEntry() {\n+                curr = next = prev;\n+                index--;\n+                prev = prev.prev();\n+                return curr;\n+            }\n+            public void jump(final int fromElement) {\n+                if ((next = locateKey(fromElement)) != null) {\n+                    if (next.key <= fromElement) {\n+                        prev = next;\n+                        next = next.next();\n+                    }\n+                    else prev = next.prev();\n+                }\n+            }\n+\n+            public int nextInt() { return nextEntry().key; }\n+\n+            public int previousInt() { return previousEntry().key; }\n+\n+        }\n+\n+        public Iterator keyIterator() {\n+            return new KeyIteratorImpl();\n+        }\n+\n+        public Iterator keyIterator(final int from) {\n+            return new KeyIteratorImpl(from);\n+        }\n+    }\n+\n+    private static final int maxPattern = 39;\n+\n+    private static final String[] directions = {\n+            \"0=>1, 1=>4, 2=>2, 4=>3, 7=>5\",\n+            \"13=>628, 14=>627, 15=>626, 17=>629, 18=>630\",\n+            \"13=>473, 14=>472, 15=>471, 17=>474, 18=>475\",\n+            \"13=>318, 14=>317, 15=>316, 17=>319, 18=>320\",\n+            \"13=>163, 14=>162, 15=>161, 17=>164, 18=>165\",\n+            \"13=>8, 14=>7, 15=>6, 17=>9, 18=>10\",\n+            \"22=>135, 23=>134, 24=>132, 26=>133, 27=>131\",\n+            \"22=>105, 23=>104, 24=>102, 26=>103, 27=>101\",\n+            \"22=>75, 23=>74, 24=>72, 26=>73, 27=>71\",\n+            \"22=>45, 23=>44, 24=>42, 26=>43, 27=>41\",\n+            \"22=>15, 23=>14, 24=>12, 26=>13, 27=>11\",\n+            \"31=>38, 32=>39, 33=>36, 34=>40, 35=>37\",\n+            \"31=>33, 32=>34, 33=>31, 34=>35, 35=>32\",\n+            \"31=>28, 32=>29, 33=>26, 34=>30, 35=>27\",\n+            \"31=>23, 32=>24, 33=>21, 34=>25, 35=>22\",\n+            \"31=>18, 32=>19, 33=>16, 34=>20, 35=>17\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>68, 32=>69, 33=>66, 34=>70, 35=>67\",\n+            \"31=>63, 32=>64, 33=>61, 34=>65, 35=>62\",\n+            \"31=>58, 32=>59, 33=>56, 34=>60, 35=>57\",\n+            \"31=>53, 32=>54, 33=>51, 34=>55, 35=>52\",\n+            \"31=>48, 32=>49, 33=>46, 34=>50, 35=>47\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>98, 32=>99, 33=>96, 34=>100, 35=>97\",\n+            \"31=>93, 32=>94, 33=>91, 34=>95, 35=>92\",\n+            \"31=>88, 32=>89, 33=>86, 34=>90, 35=>87\",\n+            \"31=>83, 32=>84, 33=>81, 34=>85, 35=>82\",\n+            \"31=>78, 32=>79, 33=>76, 34=>80, 35=>77\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>128, 32=>129, 33=>126, 34=>130, 35=>127\",\n+            \"31=>123, 32=>124, 33=>121, 34=>125, 35=>122\",\n+            \"31=>118, 32=>119, 33=>116, 34=>120, 35=>117\",\n+            \"31=>113, 32=>114, 33=>111, 34=>115, 35=>112\",\n+            \"31=>108, 32=>109, 33=>106, 34=>110, 35=>107\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>158, 32=>159, 33=>156, 34=>160, 35=>157\",\n+            \"31=>153, 32=>154, 33=>151, 34=>155, 35=>152\",\n+            \"31=>148, 32=>149, 33=>146, 34=>150, 35=>147\",\n+            \"31=>143, 32=>144, 33=>141, 34=>145, 35=>142\",\n+            \"31=>138, 32=>139, 33=>136, 34=>140, 35=>137\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"22=>290, 23=>289, 24=>287, 26=>288, 27=>286\",\n+            \"22=>260, 23=>259, 24=>257, 26=>258, 27=>256\",\n+            \"22=>230, 23=>229, 24=>227, 26=>228, 27=>226\",\n+            \"22=>200, 23=>199, 24=>197, 26=>198, 27=>196\",\n+            \"22=>170, 23=>169, 24=>167, 26=>168, 27=>166\",\n+            \"31=>193, 32=>194, 33=>191, 34=>195, 35=>192\",\n+            \"31=>188, 32=>189, 33=>186, 34=>190, 35=>187\",\n+            \"31=>183, 32=>184, 33=>181, 34=>185, 35=>182\",\n+            \"31=>178, 32=>179, 33=>176, 34=>180, 35=>177\",\n+            \"31=>173, 32=>174, 33=>171, 34=>175, 35=>172\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>223, 32=>224, 33=>221, 34=>225, 35=>222\",\n+            \"31=>218, 32=>219, 33=>216, 34=>220, 35=>217\",\n+            \"31=>213, 32=>214, 33=>211, 34=>215, 35=>212\",\n+            \"31=>208, 32=>209, 33=>206, 34=>210, 35=>207\",\n+            \"31=>203, 32=>204, 33=>201, 34=>205, 35=>202\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>253, 32=>254, 33=>251, 34=>255, 35=>252\",\n+            \"31=>248, 32=>249, 33=>246, 34=>250, 35=>247\",\n+            \"31=>243, 32=>244, 33=>241, 34=>245, 35=>242\",\n+            \"31=>238, 32=>239, 33=>236, 34=>240, 35=>237\",\n+            \"31=>233, 32=>234, 33=>231, 34=>235, 35=>232\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>283, 32=>284, 33=>281, 34=>285, 35=>282\",\n+            \"31=>278, 32=>279, 33=>276, 34=>280, 35=>277\",\n+            \"31=>273, 32=>274, 33=>271, 34=>275, 35=>272\",\n+            \"31=>268, 32=>269, 33=>266, 34=>270, 35=>267\",\n+            \"31=>263, 32=>264, 33=>261, 34=>265, 35=>262\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>313, 32=>314, 33=>311, 34=>315, 35=>312\",\n+            \"31=>308, 32=>309, 33=>306, 34=>310, 35=>307\",\n+            \"31=>303, 32=>304, 33=>301, 34=>305, 35=>302\",\n+            \"31=>298, 32=>299, 33=>296, 34=>300, 35=>297\",\n+            \"31=>293, 32=>294, 33=>291, 34=>295, 35=>292\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"22=>445, 23=>444, 24=>442, 26=>443, 27=>441\",\n+            \"22=>415, 23=>414, 24=>412, 26=>413, 27=>411\",\n+            \"22=>385, 23=>384, 24=>382, 26=>383, 27=>381\",\n+            \"22=>355, 23=>354, 24=>352, 26=>353, 27=>351\",\n+            \"22=>325, 23=>324, 24=>322, 26=>323, 27=>321\",\n+            \"31=>348, 32=>349, 33=>346, 34=>350, 35=>347\",\n+            \"31=>343, 32=>344, 33=>341, 34=>345, 35=>342\",\n+            \"31=>338, 32=>339, 33=>336, 34=>340, 35=>337\",\n+            \"31=>333, 32=>334, 33=>331, 34=>335, 35=>332\",\n+            \"31=>328, 32=>329, 33=>326, 34=>330, 35=>327\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>378, 32=>379, 33=>376, 34=>380, 35=>377\",\n+            \"31=>373, 32=>374, 33=>371, 34=>375, 35=>372\",\n+            \"31=>368, 32=>369, 33=>366, 34=>370, 35=>367\",\n+            \"31=>363, 32=>364, 33=>361, 34=>365, 35=>362\",\n+            \"31=>358, 32=>359, 33=>356, 34=>360, 35=>357\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>408, 32=>409, 33=>406, 34=>410, 35=>407\",\n+            \"31=>403, 32=>404, 33=>401, 34=>405, 35=>402\",\n+            \"31=>398, 32=>399, 33=>396, 34=>400, 35=>397\",\n+            \"31=>393, 32=>394, 33=>391, 34=>395, 35=>392\",\n+            \"31=>388, 32=>389, 33=>386, 34=>390, 35=>387\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>438, 32=>439, 33=>436, 34=>440, 35=>437\",\n+            \"31=>433, 32=>434, 33=>431, 34=>435, 35=>432\",\n+            \"31=>428, 32=>429, 33=>426, 34=>430, 35=>427\",\n+            \"31=>423, 32=>424, 33=>421, 34=>425, 35=>422\",\n+            \"31=>418, 32=>419, 33=>416, 34=>420, 35=>417\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>468, 32=>469, 33=>466, 34=>470, 35=>467\",\n+            \"31=>463, 32=>464, 33=>461, 34=>465, 35=>462\",\n+            \"31=>458, 32=>459, 33=>456, 34=>460, 35=>457\",\n+            \"31=>453, 32=>454, 33=>451, 34=>455, 35=>452\",\n+            \"31=>448, 32=>449, 33=>446, 34=>450, 35=>447\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"22=>600, 23=>599, 24=>597, 26=>598, 27=>596\",\n+            \"22=>570, 23=>569, 24=>567, 26=>568, 27=>566\",\n+            \"22=>540, 23=>539, 24=>537, 26=>538, 27=>536\",\n+            \"22=>510, 23=>509, 24=>507, 26=>508, 27=>506\",\n+            \"22=>480, 23=>479, 24=>477, 26=>478, 27=>476\",\n+            \"31=>503, 32=>504, 33=>501, 34=>505, 35=>502\",\n+            \"31=>498, 32=>499, 33=>496, 34=>500, 35=>497\",\n+            \"31=>493, 32=>494, 33=>491, 34=>495, 35=>492\",\n+            \"31=>488, 32=>489, 33=>486, 34=>490, 35=>487\",\n+            \"31=>483, 32=>484, 33=>481, 34=>485, 35=>482\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>533, 32=>534, 33=>531, 34=>535, 35=>532\",\n+            \"31=>528, 32=>529, 33=>526, 34=>530, 35=>527\",\n+            \"31=>523, 32=>524, 33=>521, 34=>525, 35=>522\",\n+            \"31=>518, 32=>519, 33=>516, 34=>520, 35=>517\",\n+            \"31=>513, 32=>514, 33=>511, 34=>515, 35=>512\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>563, 32=>564, 33=>561, 34=>565, 35=>562\",\n+            \"31=>558, 32=>559, 33=>556, 34=>560, 35=>557\",\n+            \"31=>553, 32=>554, 33=>551, 34=>555, 35=>552\",\n+            \"31=>548, 32=>549, 33=>546, 34=>550, 35=>547\",\n+            \"31=>543, 32=>544, 33=>541, 34=>545, 35=>542\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>593, 32=>594, 33=>591, 34=>595, 35=>592\",\n+            \"31=>588, 32=>589, 33=>586, 34=>590, 35=>587\",\n+            \"31=>583, 32=>584, 33=>581, 34=>585, 35=>582\",\n+            \"31=>578, 32=>579, 33=>576, 34=>580, 35=>577\",\n+            \"31=>573, 32=>574, 33=>571, 34=>575, 35=>572\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>623, 32=>624, 33=>621, 34=>625, 35=>622\",\n+            \"31=>618, 32=>619, 33=>616, 34=>620, 35=>617\",\n+            \"31=>613, 32=>614, 33=>611, 34=>615, 35=>612\",\n+            \"31=>608, 32=>609, 33=>606, 34=>610, 35=>607\",\n+            \"31=>603, 32=>604, 33=>601, 34=>605, 35=>602\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"22=>755, 23=>754, 24=>752, 26=>753, 27=>751\",\n+            \"22=>725, 23=>724, 24=>722, 26=>723, 27=>721\",\n+            \"22=>695, 23=>694, 24=>692, 26=>693, 27=>691\",\n+            \"22=>665, 23=>664, 24=>662, 26=>663, 27=>661\",\n+            \"22=>635, 23=>634, 24=>632, 26=>633, 27=>631\",\n+            \"31=>658, 32=>659, 33=>656, 34=>660, 35=>657\",\n+            \"31=>653, 32=>654, 33=>651, 34=>655, 35=>652\",\n+            \"31=>648, 32=>649, 33=>646, 34=>650, 35=>647\",\n+            \"31=>643, 32=>644, 33=>641, 34=>645, 35=>642\",\n+            \"31=>638, 32=>639, 33=>636, 34=>640, 35=>637\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>688, 32=>689, 33=>686, 34=>690, 35=>687\",\n+            \"31=>683, 32=>684, 33=>681, 34=>685, 35=>682\",\n+            \"31=>678, 32=>679, 33=>676, 34=>680, 35=>677\",\n+            \"31=>673, 32=>674, 33=>671, 34=>675, 35=>672\",\n+            \"31=>668, 32=>669, 33=>666, 34=>670, 35=>667\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>718, 32=>719, 33=>716, 34=>720, 35=>717\",\n+            \"31=>713, 32=>714, 33=>711, 34=>715, 35=>712\",\n+            \"31=>708, 32=>709, 33=>706, 34=>710, 35=>707\",\n+            \"31=>703, 32=>704, 33=>701, 34=>705, 35=>702\",\n+            \"31=>698, 32=>699, 33=>696, 34=>700, 35=>697\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>748, 32=>749, 33=>746, 34=>750, 35=>747\",\n+            \"31=>743, 32=>744, 33=>741, 34=>745, 35=>742\",\n+            \"31=>738, 32=>739, 33=>736, 34=>740, 35=>737\",\n+            \"31=>733, 32=>734, 33=>731, 34=>735, 35=>732\",\n+            \"31=>728, 32=>729, 33=>726, 34=>730, 35=>727\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            \"31=>778, 32=>779, 33=>776, 34=>780, 35=>777\",\n+            \"31=>773, 32=>774, 33=>771, 34=>775, 35=>772\",\n+            \"31=>768, 32=>769, 33=>766, 34=>770, 35=>767\",\n+            \"31=>763, 32=>764, 33=>761, 34=>765, 35=>762\",\n+            \"31=>758, 32=>759, 33=>756, 34=>760, 35=>757\",\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+            null\n+    };\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/RBTreeSearch.java","additions":1236,"deletions":0,"binary":false,"changes":1236,"status":"added"}]}