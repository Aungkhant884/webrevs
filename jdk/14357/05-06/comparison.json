{"files":[{"patch":"@@ -123,1 +123,0 @@\n-doclet.inheritDocNonDirectSupertype=not a direct supertype\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -122,4 +122,0 @@\n-            if (!utils.isDirectSupertype((TypeElement) method.getEnclosingElement(), supertype)) {\n-                messages.warning(ch.getDocTreePath(inheritDoc.getSupertype()),\n-                        \"doclet.inheritDocNonDirectSupertype\");\n-            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -402,4 +402,0 @@\n-                if (!utils.isDirectSupertype((TypeElement) holder.getEnclosingElement(), supertype)) {\n-                    DocTreePath inheritDocPath = ch.getDocTreePath(inheritDoc.getSupertype());\n-                    configuration.getMessages().warning(inheritDocPath, \"doclet.inheritDocNonDirectSupertype\");\n-                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -664,10 +664,0 @@\n-    public boolean isDirectSupertype(TypeElement overrider,\n-                                     TypeElement overridden) {\n-\/\/        var t1 = overrider.asType();\n-\/\/        var t2 = overridden.asType();\n-\/\/        return typeUtils.directSupertypes(t1).stream()\n-\/\/                .anyMatch(t -> Objects.equals(typeUtils.asElement(t), typeUtils.asElement(t2)));\n-\n-        return true; \/* disabled for causing issues in JDK API Documentation build *\/\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -665,107 +665,0 @@\n-\n-    \/*\n-     * Since a subtype refines contract of its supertypes, it does not seem\n-     * immediately obvious that directed documentation inheritance should\n-     * allow a method doc comment to inherit from that method type's\n-     * indirect (not immediate) supertypes. This is similar to how an\n-     * implementation cannot write, say, super.super.m().\n-     *\n-     *\n-     * Directed documentation inheritance was primarily designed to\n-     * resolve possible ambiguity among immediate supertypes.\n-     *\n-     * For now a warning is issued if a doc comment inherits from\n-     * an indirect supertype.\n-     *\/\n-    \/\/ @Test disabled for now\n-    public void testNotDirectSupertype(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src, \"\"\"\n-                package x;\n-                public interface I1 {\n-                    \/**\n-                     * I1: main description\n-                     *\n-                     * @param <A> I1: first type parameter\n-                     * @param <B> I1: second type parameter\n-                     *\n-                     * @param bObj I1: parameter\n-                     * @return I1: return\n-                     *\n-                     * @throws B I1: first description of an exception\n-                     * @throws B I1: second description of an exception\n-                     *\/\n-                    <A, B extends RuntimeException> int m(A bObj);\n-                }\n-                \"\"\", \"\"\"\n-                package x;\n-                public interface E1 extends I1 {\n-                    \/**\n-                     * I2: main description\n-                     *\n-                     * @param <C> I2: first type parameter\n-                     * @param <D> I2: second type parameter\n-                     *\n-                     * @param cObj I2: parameter\n-                     * @return I2: return\n-                     *\n-                     * @throws D I2: first description of an exception\n-                     * @throws D I2: second description of an exception\n-                     *\/\n-                    <C, D extends RuntimeException> int m(C cObj);\n-                }\n-                \"\"\", \"\"\"\n-                package x;\n-                public interface E2 extends E1 {\n-                    \/**\n-                     * {@inheritDoc I1}\n-                     *\n-                     * @param <E> {@inheritDoc I1}\n-                     * @param <F> {@inheritDoc I1}\n-                     *\n-                     * @param eObj {@inheritDoc I1}\n-                     * @return {@inheritDoc I1}\n-                     *\n-                     * @throws F {@inheritDoc I1}\n-                     *\/\n-                    <E, F extends RuntimeException> int m(E eObj);\n-                }\n-                \"\"\");\n-        javadoc(\"-d\", base.resolve(\"out\").toString(),\n-                \"--source-path\", src.toString(),\n-                \"x\");\n-        checkExit(Exit.OK);\n-        new OutputChecker(\"x\/E2.html\").check(\"\"\"\n-                <div class=\"block\">I1: main description<\/div>\n-                \"\"\", \"\"\"\n-                <dt>Type Parameters:<\/dt>\n-                <dd><code>E<\/code> - I1: first type parameter<\/dd>\n-                <dd><code>F<\/code> - I1: second type parameter<\/dd>\n-                <dt>Parameters:<\/dt>\n-                <dd><code>eObj<\/code> - I1: parameter<\/dd>\n-                <dt>Returns:<\/dt>\n-                <dd>I1: return<\/dd>\n-                <dt>Throws:<\/dt>\n-                <dd><code>F<\/code> - I1: first description of an exception<\/dd>\n-                <dd><code>F<\/code> - I1: second description of an exception<\/dd>\n-                <\/dl>\"\"\");\n-        new OutputChecker(Output.OUT).setExpectFound(true).check(\"\"\"\n-                E2.java:4: warning: not a direct supertype\n-                     * {@inheritDoc I1}\n-                                    ^\"\"\", \"\"\"\n-                E2.java:6: warning: not a direct supertype\n-                     * @param <E> {@inheritDoc I1}\n-                                               ^\"\"\", \"\"\"\n-                E2.java:7: warning: not a direct supertype\n-                     * @param <F> {@inheritDoc I1}\n-                                               ^\"\"\", \"\"\"\n-                E2.java:9: warning: not a direct supertype\n-                     * @param eObj {@inheritDoc I1}\n-                                                ^\"\"\", \"\"\"\n-                E2.java:10: warning: not a direct supertype\n-                     * @return {@inheritDoc I1}\n-                                            ^\"\"\", \"\"\"\n-                E2.java:12: warning: not a direct supertype\n-                     * @throws F {@inheritDoc I1}\n-                                              ^\"\"\");\n-    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDirectedInheritance\/TestDirectedInheritance.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"modified"}]}