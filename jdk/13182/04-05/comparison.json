{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -84,3 +83,0 @@\n-    \/\/ Used to ensure that dumped class files for failed definitions have a unique class name\n-    private static final AtomicInteger counter = new AtomicInteger();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2387,0 +2387,1 @@\n+         * @param dumper dumper to write the given bytes to the dumper's output directory\n@@ -2392,1 +2393,1 @@\n-        ClassDefiner makeHiddenClassDefiner(byte[] bytes) {\n+        ClassDefiner makeHiddenClassDefiner(byte[] bytes, ClassFileDumper dumper) {\n@@ -2394,1 +2395,1 @@\n-            return makeHiddenClassDefiner(cf, Set.of(), false, defaultDumper());\n+            return makeHiddenClassDefiner(cf, Set.of(), false, dumper);\n@@ -2413,3 +2414,3 @@\n-        ClassDefiner makeHiddenClassDefiner(byte[] bytes,\n-                                            Set<ClassOption> options,\n-                                            boolean accessVmAnnotations) {\n+        private ClassDefiner makeHiddenClassDefiner(byte[] bytes,\n+                                                    Set<ClassOption> options,\n+                                                    boolean accessVmAnnotations) {\n@@ -2420,14 +2421,0 @@\n-        \/**\n-         * Returns a ClassDefiner that creates a {@code Class} object of a hidden class\n-         * from the given bytes and the given options.  No package name check on the given bytes.\n-         *\n-         * @param name    internal name which specifies the prefix of the hidden class\n-         * @param bytes   class bytes\n-         * @param options class options\n-         * @return ClassDefiner that defines a hidden class of the given bytes and options.\n-         *\/\n-        ClassDefiner makeHiddenClassDefiner(String name, byte[] bytes, Set<ClassOption> options) {\n-            \/\/ skip name and access flags validation\n-            return makeHiddenClassDefiner(name, bytes, options, defaultDumper());\n-        }\n-\n@@ -2527,8 +2514,1 @@\n-                            String cn = c.getName();\n-                            int suffixIdx = cn.lastIndexOf('\/');\n-                            if (suffixIdx > 0) {\n-                                assert ((classFlags & HIDDEN_CLASS) != 0);\n-                                name += '.' + cn.substring(suffixIdx + 1);\n-                            } else {\n-                                assert ((classFlags & HIDDEN_CLASS) == 0);\n-                            }\n+                            dumper.dumpClass(name, c, bytes);\n@@ -2536,1 +2516,1 @@\n-                            name += \".failed-\" + dumper.incrementAndGetCounter();\n+                            dumper.dumpFailedClass(name, bytes);\n@@ -2538,1 +2518,0 @@\n-                        dumper.dumpClass(name, bytes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -46,2 +45,1 @@\n- * Helper class to log normal and hidden classes defined via Lookup::defineClass\n- * and Lookup::defineHiddenClass API\n+ * ClassFile dumper utility class to log normal and hidden classes.\n@@ -50,1 +48,1 @@\n- * <p> Because this class is called by MethodHandleStatics, LambdaForms generation\n+ * Because this class is called by MethodHandleStatics, LambdaForms generation\n@@ -139,4 +137,0 @@\n-    public int incrementAndGetCounter() {\n-        return counter.incrementAndGet();\n-    }\n-\n@@ -147,2 +141,7 @@\n-    @SuppressWarnings(\"removal\")\n-    public void dumpClass(String internalName, final byte[] classBytes) {\n+    \/**\n+     * This method determines the path name from the given name and {@code Class}\n+     * object.  If it is a hidden class, it will dump the given bytes at\n+     * a path of the given name with a suffix \".\" concatenated\n+     * with the suffix of the hidden class name.\n+     *\/\n+    public void dumpClass(String name, Class<?> c, byte[] bytes) {\n@@ -151,0 +150,21 @@\n+        String cn = c.getName();\n+        int suffixIdx = cn.lastIndexOf('\/');\n+        if (suffixIdx > 0) {\n+            name += '.' + cn.substring(suffixIdx + 1);\n+        }\n+        write(pathname(name), bytes);\n+    }\n+\n+    \/**\n+     * This method dumps the given bytes at a path of the given name with\n+     * a suffix \".failed-$COUNTER\" where $COUNTER will be incremented\n+     * for each time this method is called.\n+     *\/\n+    public void dumpFailedClass(String name, byte[] bytes) {\n+        if (!isEnabled()) return;\n+\n+        write(pathname(name + \".failed-\" + counter.incrementAndGet()), bytes);\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    private void write(Path path, byte[] bytes) {\n@@ -153,1 +173,0 @@\n-                    Path file = pathname(internalName);\n@@ -155,1 +174,1 @@\n-                        Path dir = file.getParent();\n+                        Path dir = path.getParent();\n@@ -157,1 +176,1 @@\n-                        Files.write(file, classBytes);\n+                        Files.write(path, bytes);\n@@ -163,1 +182,1 @@\n-                                          file.toString() + \" \" + ex.getMessage());\n+                                          path.toString() + \" \" + ex.getMessage());\n@@ -182,1 +201,1 @@\n-                            Files.createDirectory(path);\n+                            Files.createDirectories(path);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ClassFileDumper.java","additions":34,"deletions":15,"binary":false,"changes":49,"status":"modified"}]}