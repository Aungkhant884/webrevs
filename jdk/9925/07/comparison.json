{"files":[{"patch":"@@ -573,0 +573,1 @@\n+            boolean append = fdAccess.getAppend(targetFD);\n@@ -576,1 +577,1 @@\n-                    n = transferTo0(fd, position, icount, targetFD);\n+                    n = transferTo0(fd, position, icount, targetFD, append);\n@@ -804,1 +805,2 @@\n-                    n = transferFrom0(srcFD, fd, position, count);\n+                    boolean append = fdAccess.getAppend(fd);\n+                    n = transferFrom0(srcFD, fd, position, count, append);\n@@ -1576,1 +1578,2 @@\n-                                           long count, FileDescriptor dst);\n+                                           long count, FileDescriptor dst,\n+                                           boolean append);\n@@ -1580,1 +1583,2 @@\n-                                             long position, long count);\n+                                             long position, long count,\n+                                             boolean append);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                                            jobject dstFDO)\n+                                            jobject dstFDO, jboolean append)\n@@ -178,0 +178,5 @@\n+    \/\/ copy_file_range fails with EBADF when appending, and sendfile\n+    \/\/ fails with EINVAL\n+    if (append == JNI_TRUE)\n+        return IOS_UNSUPPORTED_CASE;\n+\n@@ -179,1 +184,22 @@\n-    jlong n = sendfile64(dstFD, srcFD, &offset, (size_t)count);\n+    jlong n;\n+    if (my_copy_file_range_func != NULL) {\n+        size_t len = (size_t)count;\n+        n = my_copy_file_range_func(srcFD, &offset, dstFD, NULL, len, 0);\n+        if (n < 0) {\n+            switch (errno) {\n+                case EINTR:\n+                    return IOS_INTERRUPTED;\n+                case EINVAL:\n+                case EXDEV:\n+                    \/\/ ignore and try sendfile()\n+                    break;\n+                default:\n+                    JNU_ThrowIOExceptionWithLastError(env, \"Copy failed\");\n+                    return IOS_THROWN;\n+            }\n+        }\n+        if (n >= 0)\n+            return n;\n+    }\n+\n+    n = sendfile64(dstFD, srcFD, &offset, (size_t)count);\n@@ -265,1 +291,2 @@\n-                                              jlong position, jlong count)\n+                                              jlong position, jlong count,\n+                                              jboolean append)\n@@ -270,0 +297,3 @@\n+    \/\/ copy_file_range fails with EBADF when appending\n+    if (append == JNI_TRUE)\n+        return IOS_UNSUPPORTED_CASE;\n@@ -275,1 +305,2 @@\n-    jlong n = my_copy_file_range_func(srcFD, NULL, dstFD, &offset, count, 0);\n+    size_t len = (size_t)count;\n+    jlong n = my_copy_file_range_func(srcFD, NULL, dstFD, &offset, len, 0);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                                            jobject dstFD)\n+                                            jobject dstFD, jboolean append)\n@@ -194,1 +194,2 @@\n-                                              jlong position, jlong count)\n+                                              jlong position, jlong count,\n+                                              jboolean append)\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileChannelImpl.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8292562\n+ * @requires (os.family == \"linux\")\n+ * @summary Test transferTo and transferFrom when target is appending\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main TransferToAppending\n+ * @key randomness\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.channels.FileChannel;\n+import java.util.Random;\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+public class TransferToAppending {\n+    private static final int MIN_SIZE =   128;\n+    private static final int MAX_SIZE = 32768;\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    public static void main(String... args) throws IOException {\n+        for (boolean to : new boolean[] {true, false}) {\n+            System.err.println(\"Test \" + (to ? \"transferTo\" : \"transferFrom\"));\n+            \/\/ Create files in size range [MIN_SIZE,MAX_SIZE)\n+            \/\/ filled with random bytes\n+            Path source = createFile(\"src\");\n+            Path target = createFile(\"tgt\");\n+\n+            try (FileChannel src = FileChannel.open(source, READ, WRITE);\n+                 FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n+                \/\/ Set source range to a subset of the source\n+                long size = to ? Files.size(source) : Files.size(target);\n+                long position = RND.nextInt((int)size);\n+                long count = RND.nextInt((int)(size - position));\n+                long tgtSize = Files.size(target);\n+\n+                \/\/ Transfer subrange to target\n+                long nbytes = to ? src.transferTo(position, count, tgt) :\n+                                   tgt.transferFrom(src, position, count);\n+\n+                \/\/ Target size should be increased by 'count'.\n+                if (Files.size(target) != tgtSize + nbytes) {\n+                    String msg =\n+                        String.format(\"Bad size: expected %d, actual %d%n\",\n+                                      tgtSize + nbytes, Files.size(target));\n+                    throw new RuntimeException(msg);\n+                }\n+\n+                tgt.close();\n+\n+                \/\/ Load subrange of source\n+                ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n+                src.read(bufSrc, to ? position : 0);\n+\n+                try (FileChannel res = FileChannel.open(target, READ, WRITE)) {\n+                    \/\/ Load appended range of target\n+                    ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n+                    res.read(bufTgt, tgtSize);\n+\n+                    \/\/ Subranges of values should be equal\n+                    if (bufSrc.mismatch(bufTgt) != -1) {\n+                        throw new RuntimeException(\"Range of values unequal\");\n+                    }\n+                }\n+            } finally {\n+                Files.delete(source);\n+                Files.delete(target);\n+            }\n+        }\n+    }\n+\n+    private static Path createFile(String name) throws IOException {\n+        Path path = Files.createTempFile(name, \".dat\");\n+        try (FileChannel fc = FileChannel.open(path, CREATE, READ, WRITE)) {\n+            int size = Math.max(RND.nextInt(MAX_SIZE), 128);\n+            byte[] b = new byte[size];\n+            RND.nextBytes(b);\n+            fc.write(ByteBuffer.wrap(b));\n+        }\n+        return path;\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}