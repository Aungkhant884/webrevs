{"files":[{"patch":"@@ -576,1 +576,2 @@\n-                    n = transferTo0(fd, position, icount, targetFD);\n+                    boolean append = fdAccess.getAppend(targetFD);\n+                    n = transferTo0(fd, position, icount, targetFD, append);\n@@ -804,1 +805,2 @@\n-                    n = transferFrom0(srcFD, fd, position, count);\n+                    boolean append = fdAccess.getAppend(fd);\n+                    n = transferFrom0(srcFD, fd, position, count, append);\n@@ -1576,1 +1578,2 @@\n-                                           long count, FileDescriptor dst);\n+                                           long count, FileDescriptor dst,\n+                                           boolean append);\n@@ -1580,1 +1583,2 @@\n-                                             long position, long count);\n+                                             long position, long count,\n+                                             boolean append);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                                            jobject dstFDO)\n+                                            jobject dstFDO, jboolean append)\n@@ -178,8 +178,3 @@\n-    \/\/ Check whether the destination is in append mode: copy_file_range fails\n-    \/\/ with EBADF in this case and sendfile fails with EINVAL.\n-    int dstFlags = fcntl(dstFD, F_GETFL);\n-    if (dstFlags < 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"Destination flags\");\n-        return IOS_THROWN;\n-    }\n-    if ((dstFlags & O_APPEND) != 0)\n+    \/\/ copy_file_range fails with EBADF when appending, and sendfile\n+    \/\/ fails with EINVAL\n+    if (append == JNI_TRUE)\n@@ -190,1 +185,1 @@\n-    if (my_copy_file_range_func) {\n+    if (my_copy_file_range_func != NULL) {\n@@ -296,1 +291,2 @@\n-                                              jlong position, jlong count)\n+                                              jlong position, jlong count,\n+                                              jboolean append)\n@@ -301,0 +297,3 @@\n+    \/\/ copy_file_range fails with EBADF when appending\n+    if (append == JNI_TRUE)\n+        return IOS_UNSUPPORTED_CASE;\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                                            jobject dstFD)\n+                                            jobject dstFD, jboolean append)\n@@ -194,1 +194,2 @@\n-                                              jlong position, jlong count)\n+                                              jlong position, jlong count,\n+                                              jboolean append)\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileChannelImpl.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test transferTo when target is appending\n+ * @summary Test transferTo and transferFrom when target is appending\n@@ -49,3 +49,6 @@\n-        \/\/ Create files of size in [MIN_SIZE,MAX_SIZE) filled with random bytes\n-        Path source = createFile(\"src\");\n-        Path target = createFile(\"tgt\");\n+        for (boolean to : new boolean[] {true, false}) {\n+            System.err.println(\"Test \" + (to ? \"transferTo\" : \"transferFrom\"));\n+            \/\/ Create files in size range [MIN_SIZE,MAX_SIZE)\n+            \/\/ filled with random bytes\n+            Path source = createFile(\"src\");\n+            Path target = createFile(\"tgt\");\n@@ -53,7 +56,7 @@\n-        try (FileChannel src = FileChannel.open(source, READ, WRITE);\n-             FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n-            \/\/ Set source range to a subset of the source\n-            long srcSize = Files.size(source);\n-            long position = RND.nextInt((int)srcSize);\n-            long count = RND.nextInt((int)(srcSize - position));\n-            long tgtSize = Files.size(target);\n+            try (FileChannel src = FileChannel.open(source, READ, WRITE);\n+                 FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n+                \/\/ Set source range to a subset of the source\n+                long size = to ? Files.size(source) : Files.size(target);\n+                long position = RND.nextInt((int)size);\n+                long count = RND.nextInt((int)(size - position));\n+                long tgtSize = Files.size(target);\n@@ -61,2 +64,3 @@\n-            \/\/ Transfer subrange to target\n-            src.transferTo(position, count, tgt);\n+                \/\/ Transfer subrange to target\n+                long nbytes = to ? src.transferTo(position, count, tgt) :\n+                                   tgt.transferFrom(src, position, count);\n@@ -64,6 +68,7 @@\n-            \/\/ Target size should be increased by 'count'.\n-            if (Files.size(target) != tgtSize + count) {\n-                String msg = String.format(\"Bad size: expected %d, actual %d%n\",\n-                                           tgtSize + count, Files.size(target));\n-                throw new RuntimeException(msg);\n-            }\n+                \/\/ Target size should be increased by 'count'.\n+                if (Files.size(target) != tgtSize + nbytes) {\n+                    String msg =\n+                        String.format(\"Bad size: expected %d, actual %d%n\",\n+                                      tgtSize + nbytes, Files.size(target));\n+                    throw new RuntimeException(msg);\n+                }\n@@ -71,1 +76,1 @@\n-            tgt.close();\n+                tgt.close();\n@@ -73,4 +78,3 @@\n-            \/\/ Load subrange of source\n-            ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n-            src.position(position);\n-            src.read(bufSrc);\n+                \/\/ Load subrange of source\n+                ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n+                src.read(bufSrc, to ? position : 0);\n@@ -78,5 +82,4 @@\n-            try (FileChannel result = FileChannel.open(target, READ, WRITE)) {\n-                \/\/ Load appended range of target\n-                ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n-                result.position(tgtSize);\n-                result.read(bufTgt);\n+                try (FileChannel res = FileChannel.open(target, READ, WRITE)) {\n+                    \/\/ Load appended range of target\n+                    ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n+                    res.read(bufTgt, tgtSize);\n@@ -84,3 +87,4 @@\n-                \/\/ Subranges of values should be equal\n-                if (bufSrc.mismatch(bufTgt) != -1) {\n-                    throw new RuntimeException(\"Range of values unequal\");\n+                    \/\/ Subranges of values should be equal\n+                    if (bufSrc.mismatch(bufTgt) != -1) {\n+                        throw new RuntimeException(\"Range of values unequal\");\n+                    }\n@@ -88,0 +92,3 @@\n+            } finally {\n+                Files.delete(source);\n+                Files.delete(target);\n@@ -89,3 +96,0 @@\n-        } finally {\n-            Files.delete(source);\n-            Files.delete(target);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":39,"deletions":35,"binary":false,"changes":74,"status":"modified"}]}