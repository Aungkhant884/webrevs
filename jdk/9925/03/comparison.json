{"files":[{"patch":"@@ -178,0 +178,10 @@\n+    \/\/ Check whether the destination is in append mode: copy_file_range fails\n+    \/\/ with EBADF in this case and sendfile fails with EINVAL.\n+    int dstFlags = fcntl(dstFD, F_GETFL);\n+    if (dstFlags < 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Destination flags\");\n+        return IOS_THROWN;\n+    }\n+    if ((dstFlags & O_APPEND) != 0)\n+        return IOS_UNSUPPORTED_CASE;\n+\n@@ -179,1 +189,22 @@\n-    jlong n = sendfile64(dstFD, srcFD, &offset, (size_t)count);\n+    jlong n;\n+    if (my_copy_file_range_func) {\n+        size_t len = (size_t)count;\n+        n = my_copy_file_range_func(srcFD, &offset, dstFD, NULL, len, 0);\n+        if (n < 0) {\n+            switch (errno) {\n+                case EINTR:\n+                    return IOS_INTERRUPTED;\n+                case EINVAL:\n+                case EXDEV:\n+                    \/\/ ignore and try sendfile()\n+                    break;\n+                default:\n+                    JNU_ThrowIOExceptionWithLastError(env, \"Copy failed\");\n+                    return IOS_THROWN;\n+            }\n+        }\n+        if (n >= 0)\n+            return n;\n+    }\n+\n+    n = sendfile64(dstFD, srcFD, &offset, (size_t)count);\n@@ -275,1 +306,2 @@\n-    jlong n = my_copy_file_range_func(srcFD, NULL, dstFD, &offset, count, 0);\n+    size_t len = (size_t)count;\n+    jlong n = my_copy_file_range_func(srcFD, NULL, dstFD, &offset, len, 0);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8292562\n+ * @summary Test transferTo when target is appending\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main TransferToAppending\n+ * @key randomness\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.channels.FileChannel;\n+import java.util.Random;\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+public class TransferToAppending {\n+    private static final int MIN_SIZE =   128;\n+    private static final int MAX_SIZE = 32768;\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    public static void main(String... args) throws IOException {\n+        \/\/ Create files of size in [MIN_SIZE,MAX_SIZE) filled with random bytes\n+        Path source = createFile(\"src\");\n+        Path target = createFile(\"tgt\");\n+\n+        try (FileChannel src = FileChannel.open(source, READ, WRITE);\n+             FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n+            \/\/ Set source range to a subset of the source\n+            long srcSize = Files.size(source);\n+            long position = RND.nextInt((int)srcSize);\n+            long count = RND.nextInt((int)(srcSize - position));\n+            long tgtSize = Files.size(target);\n+\n+            \/\/ Transfer subrange to target\n+            src.transferTo(position, count, tgt);\n+\n+            \/\/ Target size should be increased by 'count'.\n+            if (Files.size(target) != tgtSize + count) {\n+                String msg = String.format(\"Bad size: expected %d, actual %d%n\",\n+                                           tgtSize + count, Files.size(target));\n+                throw new RuntimeException(msg);\n+            }\n+\n+            tgt.close();\n+\n+            \/\/ Load subrange of source\n+            ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n+            src.position(position);\n+            src.read(bufSrc);\n+\n+            try (FileChannel result = FileChannel.open(target, READ, WRITE)) {\n+                \/\/ Load appended range of target\n+                ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n+                result.position(tgtSize);\n+                result.read(bufTgt);\n+\n+                \/\/ Subranges of values should be equal\n+                if (bufSrc.mismatch(bufTgt) != -1) {\n+                    throw new RuntimeException(\"Range of values unequal\");\n+                }\n+            }\n+        } finally {\n+            Files.delete(source);\n+            Files.delete(target);\n+        }\n+    }\n+\n+    private static Path createFile(String name) throws IOException {\n+        Path path = Files.createTempFile(name, \".dat\");\n+        try (FileChannel fc = FileChannel.open(path, CREATE, READ, WRITE)) {\n+            int size = Math.max(RND.nextInt(MAX_SIZE), 128);\n+            byte[] b = new byte[size];\n+            RND.nextBytes(b);\n+            fc.write(ByteBuffer.wrap(b));\n+        }\n+        return path;\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}