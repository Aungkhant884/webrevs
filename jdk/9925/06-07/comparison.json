{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -28,1 +29,0 @@\n- * @build jdk.test.lib.Platform\n@@ -40,1 +40,0 @@\n-import jdk.test.lib.Platform;\n@@ -70,11 +69,2 @@\n-                long expectedSize;\n-                if (to || Platform.isLinux()) {\n-                    \/\/ Target size should be increased by 'nbytes'\n-                    \/\/ If 4950302 is fixed, the expected size for Linux\n-                    \/\/ should be the same as for the other platforms\n-                    expectedSize = tgtSize + nbytes;\n-                } else {\n-                    expectedSize = Math.max(tgtSize, position + nbytes);\n-                }\n-\n-                if (Files.size(target) != expectedSize) {\n+                \/\/ Target size should be increased by 'count'.\n+                if (Files.size(target) != tgtSize + nbytes) {\n@@ -83,1 +73,1 @@\n-                                      expectedSize, Files.size(target));\n+                                      tgtSize + nbytes, Files.size(target));\n@@ -90,1 +80,1 @@\n-                ByteBuffer bufSrc = ByteBuffer.allocate((int)nbytes);\n+                ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n@@ -95,5 +85,2 @@\n-                    ByteBuffer bufTgt = ByteBuffer.allocate((int)nbytes);\n-                    \/\/ If 4950302 is fixed, the file position to read from\n-                    \/\/ should be the same for Linux as for the other platforms\n-                    res.read(bufTgt,\n-                             (to || Platform.isLinux()) ? tgtSize : position);\n+                    ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n+                    res.read(bufTgt, tgtSize);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"}]}