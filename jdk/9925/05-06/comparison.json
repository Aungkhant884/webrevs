{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.Platform\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.Platform;\n@@ -68,2 +70,11 @@\n-                \/\/ Target size should be increased by 'count'.\n-                if (Files.size(target) != tgtSize + nbytes) {\n+                long expectedSize;\n+                if (to || Platform.isLinux()) {\n+                    \/\/ Target size should be increased by 'nbytes'\n+                    \/\/ If 4950302 is fixed, the expected size for Linux\n+                    \/\/ should be the same as for the other platforms\n+                    expectedSize = tgtSize + nbytes;\n+                } else {\n+                    expectedSize = Math.max(tgtSize, position + nbytes);\n+                }\n+\n+                if (Files.size(target) != expectedSize) {\n@@ -72,1 +83,1 @@\n-                                      tgtSize + nbytes, Files.size(target));\n+                                      expectedSize, Files.size(target));\n@@ -79,1 +90,1 @@\n-                ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n+                ByteBuffer bufSrc = ByteBuffer.allocate((int)nbytes);\n@@ -84,2 +95,5 @@\n-                    ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n-                    res.read(bufTgt, tgtSize);\n+                    ByteBuffer bufTgt = ByteBuffer.allocate((int)nbytes);\n+                    \/\/ If 4950302 is fixed, the file position to read from\n+                    \/\/ should be the same for Linux as for the other platforms\n+                    res.read(bufTgt,\n+                             (to || Platform.isLinux()) ? tgtSize : position);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"}]}