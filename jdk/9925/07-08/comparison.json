{"files":[{"patch":"@@ -26,1 +26,0 @@\n- * @requires (os.family == \"linux\")\n@@ -29,0 +28,1 @@\n+ * @build jdk.test.lib.Platform\n@@ -40,0 +40,1 @@\n+import jdk.test.lib.Platform;\n@@ -50,6 +51,4 @@\n-        for (boolean to : new boolean[] {true, false}) {\n-            System.err.println(\"Test \" + (to ? \"transferTo\" : \"transferFrom\"));\n-            \/\/ Create files in size range [MIN_SIZE,MAX_SIZE)\n-            \/\/ filled with random bytes\n-            Path source = createFile(\"src\");\n-            Path target = createFile(\"tgt\");\n+        \/\/ Create files in size range [MIN_SIZE,MAX_SIZE)\n+        \/\/ filled with random bytes\n+        Path source = createFile(\"src\");\n+        Path target = createFile(\"tgt\");\n@@ -57,7 +56,7 @@\n-            try (FileChannel src = FileChannel.open(source, READ, WRITE);\n-                 FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n-                \/\/ Set source range to a subset of the source\n-                long size = to ? Files.size(source) : Files.size(target);\n-                long position = RND.nextInt((int)size);\n-                long count = RND.nextInt((int)(size - position));\n-                long tgtSize = Files.size(target);\n+        try (FileChannel src = FileChannel.open(source, READ, WRITE);\n+             FileChannel tgt = FileChannel.open(target, WRITE, APPEND);) {\n+            \/\/ Set source range to a subset of the source\n+            long size = Files.size(source);\n+            long position = RND.nextInt((int)size);\n+            long count = RND.nextInt((int)(size - position));\n+            long tgtSize = Files.size(target);\n@@ -65,3 +64,2 @@\n-                \/\/ Transfer subrange to target\n-                long nbytes = to ? src.transferTo(position, count, tgt) :\n-                                   tgt.transferFrom(src, position, count);\n+            \/\/ Transfer subrange to target\n+            long nbytes = src.transferTo(position, count, tgt);\n@@ -69,7 +67,7 @@\n-                \/\/ Target size should be increased by 'count'.\n-                if (Files.size(target) != tgtSize + nbytes) {\n-                    String msg =\n-                        String.format(\"Bad size: expected %d, actual %d%n\",\n-                                      tgtSize + nbytes, Files.size(target));\n-                    throw new RuntimeException(msg);\n-                }\n+            long expectedSize = tgtSize + nbytes;\n+\n+            if (Files.size(target) != expectedSize) {\n+                String msg = String.format(\"Bad size: expected %d, actual %d%n\",\n+                                  expectedSize, Files.size(target));\n+                throw new RuntimeException(msg);\n+            }\n@@ -77,1 +75,1 @@\n-                tgt.close();\n+            tgt.close();\n@@ -79,3 +77,3 @@\n-                \/\/ Load subrange of source\n-                ByteBuffer bufSrc = ByteBuffer.allocate((int)count);\n-                src.read(bufSrc, to ? position : 0);\n+            \/\/ Load subrange of source\n+            ByteBuffer bufSrc = ByteBuffer.allocate((int)nbytes);\n+            src.read(bufSrc, position);\n@@ -83,4 +81,4 @@\n-                try (FileChannel res = FileChannel.open(target, READ, WRITE)) {\n-                    \/\/ Load appended range of target\n-                    ByteBuffer bufTgt = ByteBuffer.allocate((int)count);\n-                    res.read(bufTgt, tgtSize);\n+            try (FileChannel res = FileChannel.open(target, READ, WRITE)) {\n+                \/\/ Load appended range of target\n+                ByteBuffer bufTgt = ByteBuffer.allocate((int)nbytes);\n+                res.read(bufTgt, tgtSize);\n@@ -88,4 +86,3 @@\n-                    \/\/ Subranges of values should be equal\n-                    if (bufSrc.mismatch(bufTgt) != -1) {\n-                        throw new RuntimeException(\"Range of values unequal\");\n-                    }\n+                \/\/ Subranges of values should be equal\n+                if (bufSrc.mismatch(bufTgt) != -1) {\n+                    throw new RuntimeException(\"Range of values unequal\");\n@@ -93,3 +90,0 @@\n-            } finally {\n-                Files.delete(source);\n-                Files.delete(target);\n@@ -97,0 +91,3 @@\n+        } finally {\n+            Files.delete(source);\n+            Files.delete(target);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferToAppending.java","additions":36,"deletions":39,"binary":false,"changes":75,"status":"modified"}]}