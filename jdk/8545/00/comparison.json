{"files":[{"patch":"@@ -414,0 +414,3 @@\n+  develop(bool, AggressiveLivenessForUnstableIf, true,                      \\\n+          \"Use aggressive liveness for UnstableIf traps\")                   \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -659,1 +659,1 @@\n-PreserveJVMState::PreserveJVMState(GraphKit* kit, bool clone_map) {\n+PreserveJVMState::PreserveJVMState(GraphKit* kit, bool clone_map, bool recover_bci) {\n@@ -664,0 +664,2 @@\n+  _bci    = kit->bci();\n+  _recover_bci = recover_bci;\n@@ -666,1 +668,0 @@\n-  _bci    = kit->bci();\n@@ -675,1 +676,1 @@\n-  assert(kit->bci() == _bci, \"bci must not shift\");\n+  assert(_recover_bci || kit->bci() == _bci, \"bci must not shift\");\n@@ -680,0 +681,3 @@\n+  if (_recover_bci) {\n+    kit->set_bci(_bci);\n+  }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -918,1 +918,0 @@\n-  int            _bci;\n@@ -920,0 +919,3 @@\n+  int            _bci;\n+  \/\/ AggressiveLivenessForUnstableIf updates bci. Force parser to recovery bci.\n+  bool           _recover_bci;\n@@ -924,1 +926,1 @@\n-  PreserveJVMState(GraphKit* kit, bool clone_map = true);\n+  PreserveJVMState(GraphKit* kit, bool clone_map = true, bool recover_bci = false);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1401,1 +1401,1 @@\n-  { PreserveJVMState pjvms(this);\n+  { PreserveJVMState pjvms(this, true, true\/*recover_bci*\/);\n@@ -1515,1 +1515,1 @@\n-  { PreserveJVMState pjvms(this);\n+  { PreserveJVMState pjvms(this, true, true\/*recover_bci*\/);\n@@ -1587,1 +1587,10 @@\n-    repush_if_args();\n+    if (AggressiveLivenessForUnstableIf) {\n+      if (is_fallthrough) {\n+        set_bci(iter().next_bci());\n+      } else {\n+        set_bci(iter().get_dest());\n+      }\n+    } else {\n+      repush_if_args();\n+    }\n+\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8286104\n+ * @summary Test C2 uses aggressive liveness to get rid of the boxing object which is\n+ *  only consumed by uncommon_trap.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestAggressiveLivenessForUnstableIf\n+ *\/\n+public class TestAggressiveLivenessForUnstableIf {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Arguments({Argument.MAX}) \/\/ the argument needs to be big enough to fall out of cache.\n+    @IR(counts = {IRNode.UNSTABLE_IF_TRAP, \"1\"})\n+    @IR(applyIf = {\"AggressiveLivenessForUnstableIf\", \"true\"}, failOn = {IRNode.ALLOC_OF, \"Integer\"})\n+    public static int boxing_object(int value) {\n+        Integer ii = Integer.valueOf(value);\n+        int sum = 0;\n+\n+        if (value > 999_999) {\n+            sum += ii.intValue();\n+        }\n+\n+        return sum;\n+    }\n+\n+    @Check(test = \"boxing_object\")\n+    public void checkWithTestInfo(int result, TestInfo info) {\n+        if (info.isWarmUp()) {\n+            \/\/ Accessing the cached boxing object during warm-up phase. It prevents parser from pruning that branch of Interger.valueOf();\n+            \/\/ This guarantees that a phi node is generated, which merge a cached object and the newly allocated object. eg.\n+            \/\/ 112:  Phi  ===  108  168  188  [[ 50 ]]  #java\/lang\/Integer:NotNull:exact *  Oop:java\/lang\/Integer:NotNull:exact *\n+            \/\/ 168: a cached object\n+            \/\/ 188: result of AllocateNode\n+            \/\/  50: uncommon_trap unstable_if\n+            value += Integer.valueOf(0);\n+        }\n+\n+        Asserts.assertEQ(result, Integer.MAX_VALUE);\n+    }\n+\n+    public static Integer value = Integer.valueOf(0);\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestAggressiveLivenessForUnstableIf.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,0 +146,1 @@\n+        Label destLocation = new Label();\n@@ -148,0 +149,1 @@\n+        boolean adjustBciForUnstableIf = WB.getBooleanVMFlag(\"AggressiveLivenessForUnstableIf\");\n@@ -151,1 +153,1 @@\n-                    generateTest(unstableIfLocation));\n+                    generateTest(unstableIfLocation, destLocation));\n@@ -176,1 +178,8 @@\n-\n+        int bci = unstableIfLocation.getOffset();\n+        if (adjustBciForUnstableIf) {\n+          if (!testCase.predicate) {\n+            bci += 3; \/\/ fall-through. ifeq 2: branchbyte1, branchbyte2\n+          } else {\n+            bci = destLocation.getOffset();\n+          }\n+        }\n@@ -190,1 +199,1 @@\n-                Integer.toString(unstableIfLocation.getOffset()));\n+                Integer.toString(bci));\n@@ -233,1 +242,1 @@\n-    private static byte[] generateTest(Label unstableIfLocation) {\n+    private static byte[] generateTest(Label unstableIfLocation, Label destLocation) {\n@@ -242,1 +251,1 @@\n-        generateTestMethod(cw, unstableIfLocation);\n+        generateTestMethod(cw, unstableIfLocation, destLocation);\n@@ -248,1 +257,1 @@\n-            Label unstableIfLocation) {\n+            Label unstableIfLocation, Label falseBranch) {\n@@ -254,1 +263,0 @@\n-        Label falseBranch = new Label();\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestUnstableIfTrap.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"}]}