{"files":[{"patch":"@@ -1954,1 +1954,1 @@\n-    \/\/ keep the mondified for late query\n+    \/\/ keep the mondified trap for late query\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -608,1 +608,1 @@\n-\/\/   2. use next_bci of _path to update live locals.\n+\/\/   2. use next_bci of path to update live locals.\n@@ -611,3 +611,0 @@\n-  \/\/ Parse::_blocks outlive Parse object itself.\n-  \/\/ They are reclaimed by ResourceMark in CompileBroker::invoke_compiler_on_method().\n-  Parse::Block* const _path; \/\/ the pruned path\n@@ -615,0 +612,1 @@\n+  int _next_bci;\n@@ -617,1 +615,1 @@\n-  UnstableIfTrap(CallStaticJavaNode* call, Parse::Block* path): _unc(call), _path(path), _modified(false) {\n+  UnstableIfTrap(CallStaticJavaNode* call, Parse::Block* path): _unc(call), _modified(false) {\n@@ -620,0 +618,1 @@\n+    _next_bci = path != nullptr ? path->start() : -1;\n@@ -625,1 +624,1 @@\n-    return _path == nullptr ? -1 : _path->start();\n+    return _next_bci;\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import jdk.test.lib.Asserts;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @bug 8286104\n- * @summary Test C2 uses aggressive liveness to get rid of the boxing object which is\n- *  only consumed by uncommon_trap.\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.irTests.TestOptimizeUnstableIf\n- *\/\n-public class TestOptimizeUnstableIf {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @Arguments({Argument.MAX}) \/\/ the argument needs to be big enough to fall out of cache.\n-    @IR(failOn = {IRNode.ALLOC_OF, \"Integer\"})\n-    public static int boxing_object(int value) {\n-        Integer ii = Integer.valueOf(value);\n-        int sum = 0;\n-\n-        if (value > 999_999) {\n-            sum += ii.intValue();\n-        }\n-\n-        return sum;\n-    }\n-\n-    @Check(test = \"boxing_object\")\n-    public void checkWithTestInfo(int result, TestInfo info) {\n-        if (info.isWarmUp()) {\n-            \/\/ Accessing the cached boxing object during warm-up phase. It prevents parser from pruning that branch of Interger.valueOf();\n-            \/\/ This guarantees that a phi node is generated, which merge a cached object and the newly allocated object. eg.\n-            \/\/ 112:  Phi  ===  108  168  188  [[ 50 ]]  #java\/lang\/Integer:NotNull:exact *  Oop:java\/lang\/Integer:NotNull:exact *\n-            \/\/ 168: a cached object\n-            \/\/ 188: result of AllocateNode\n-            \/\/  50: uncommon_trap unstable_if\n-            value += Integer.valueOf(0);\n-        }\n-\n-        Asserts.assertEQ(result, Integer.MAX_VALUE);\n-    }\n-\n-    public static Integer value = Integer.valueOf(0);\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeForUnstableIf.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n- * @summary Test C2 uses aggressive liveness to get rid of the boxing object which is\n+ * @summary Test that C2 uses aggressive liveness to get rid of the boxing object which is\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeUnstableIf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}