{"files":[{"patch":"@@ -399,1 +399,1 @@\n-      invalidate_unstable_if(dead->as_CallStaticJava());\n+      remove_unstable_if(dead->as_CallStaticJava());\n@@ -780,2 +780,0 @@\n-    preprocess_unstable_ifs();\n-\n@@ -794,0 +792,2 @@\n+  preprocess_unstable_ifs();\n+\n@@ -1879,1 +1879,1 @@\n-\/\/ Invalidate the speculative bci of unstable_if trap and skip the optimization.\n+\/\/ remove unstable_if trap of unc from candicates. It is either dead or fold-compares case.\n@@ -1884,1 +1884,1 @@\n-void Compile::invalidate_unstable_if(CallStaticJavaNode* unc) {\n+void Compile::remove_unstable_if(CallStaticJavaNode* unc) {\n@@ -1888,1 +1888,1 @@\n-      _unstable_if_traps.delete_at(i); \/\/ replaces i-th with last element which is known to be useful (already processed)\n+      _unstable_if_traps.delete_at(i);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -808,1 +808,1 @@\n-  void         invalidate_unstable_if(CallStaticJavaNode* trap);\n+  void         remove_unstable_if(CallStaticJavaNode* trap);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -844,1 +844,1 @@\n-        igvn->C->invalidate_unstable_if(dom_unc);\n+        igvn->C->remove_unstable_if(dom_unc);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -611,1 +611,3 @@\n-  Parse::Block* const _path;  \/\/ the pruned path\n+  \/\/ Parse::_blocks outlive Parse object itself.\n+  \/\/ They are reclaimed by ResourceMark in CompileBroker::invoke_compiler_on_method().\n+  Parse::Block* const _path; \/\/ The pruned path.\n@@ -614,1 +616,1 @@\n-  UnstableIfTrap(CallStaticJavaNode* call, Parse::Block* path): _unc(call), _path(path){\n+  UnstableIfTrap(CallStaticJavaNode* call, Parse::Block* path): _unc(call), _path(path) {\n@@ -619,0 +621,2 @@\n+  \/\/ The starting point of the pruned block, where control should go\n+  \/\/ when deoptimization does happen.\n@@ -623,0 +627,4 @@\n+  Parse::Block* path() const {\n+    return _path;\n+  }\n+\n@@ -630,4 +638,0 @@\n-  Parse::Block* path() const {\n-    return _path;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}