{"files":[{"patch":"@@ -1447,1 +1447,1 @@\n-Node *SafePointNode::peek_operand(uint off) const {\n+Node* SafePointNode::peek_operand(uint off) const {\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -419,2 +419,2 @@\n-  \/\/ peek Operand Stacks, JVMS 2.6.2\n-  Node *peek_operand(uint off = 0) const;\n+  \/\/ Peek Operand Stacks, JVMS 2.6.2\n+  Node* peek_operand(uint off = 0) const;\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -304,0 +304,1 @@\n+  ProjNode* uncommon_trap_proj(CallStaticJavaNode*& call) const;\n@@ -315,1 +316,0 @@\n-  ProjNode* uncommon_trap_proj(CallStaticJavaNode*& call, Deoptimization::DeoptReason reason = Deoptimization::Reason_none) const;\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1858,2 +1858,0 @@\n-\/\/ only record well-formed if nodes.\n-\/\/ we only process a node once,so it is fine with duplication.\n@@ -1891,2 +1889,1 @@\n-\/\/ It needs to be done after igvn because fold-compares may fuse uncommon_traps and\n-\/\/ before renumbering.\n+\/\/ It needs to be done after igvn because fold-compares may fuse uncommon_traps and before renumbering.\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-\n@@ -554,4 +553,0 @@\n-  \/** Adjust liveness for unstable ifs. *\/\n-  bool              aggressive_unstable_if() const {\n-    return AggressiveLivenessForUnstableIf && !env()->should_retain_local_variables();\n-  }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-ProjNode* IfNode::uncommon_trap_proj(CallStaticJavaNode*& call, Deoptimization::DeoptReason reason) const {\n+ProjNode* IfNode::uncommon_trap_proj(CallStaticJavaNode*& call) const {\n@@ -797,1 +797,1 @@\n-    call = proj_out(i)->is_uncommon_trap_proj(reason);\n+    call = proj_out(i)->is_uncommon_trap_proj(Deoptimization::Reason_none);\n@@ -1091,3 +1091,0 @@\n-\n-    \/\/\/\/ suppress unstable_if optimization for the dominating if.\n-    \/\/proj->in(0)->as_If()->set_unc_bci(-1);\n@@ -1301,2 +1298,0 @@\n-  \/\/\/\/ suppress unstable_if optimization for the dominating if.\n-  \/\/c->in(0)->as_If()->set_unc_bci(-1);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -606,3 +606,2 @@\n-\/\/ Specialized uncommon_trap of unstable_if\n-\/\/ We have 2 optimizations for them:\n-\/\/   1. remove trivial UnstableIf traps, which do not prune any basic block\n+\/\/ Specialized uncommon_trap of unstable_if, we have 2 optimizations for them:\n+\/\/   1. suppress trivial Unstable_If traps\n@@ -612,1 +611,1 @@\n-  Parse::Block* _path;  \/\/ the pruned path, which is only invalid in parse time.\n+  Parse::Block* _path;  \/\/ the pruned path\n@@ -628,1 +627,1 @@\n-    assert(bci == -1 || _next_bci == -1, \"attempt to overwrite unc_bci\");\n+    assert(bci == -1 || _next_bci == -1, \"attempt to overwrite next_bci\");\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}