{"files":[{"patch":"@@ -419,2 +419,2 @@\n-  product(bool, AggressiveLivenessForUnstableIf, true, DIAGNOSTIC,          \\\n-          \"Use aggressive liveness for UnstableIf traps\")                   \\\n+  develop(bool, OptimizeUnstableIf, true,                                   \\\n+          \"Optimize UnstableIf traps\")                                      \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -401,1 +401,1 @@\n-      remove_unstable_if_trap(dead->as_CallStaticJava());\n+      remove_unstable_if_trap(dead->as_CallStaticJava(), false);\n@@ -794,2 +794,0 @@\n-  preprocess_unstable_if_traps();\n-\n@@ -1866,1 +1864,1 @@\n-  if (AggressiveLivenessForUnstableIf) {\n+  if (OptimizeUnstableIf) {\n@@ -1891,1 +1889,1 @@\n-bool Compile::remove_unstable_if_trap(CallStaticJavaNode* unc) {\n+bool Compile::remove_unstable_if_trap(CallStaticJavaNode* unc, bool yield) {\n@@ -1895,1 +1893,1 @@\n-      if (trap->modified()) {\n+      if (yield && trap->modified()) {\n@@ -1905,16 +1903,0 @@\n-#ifndef PRODUCT\n-uint trivial_unstable_if_traps          = 0;\n-uint unstable_if_traps_all              = 0;\n-\n-void Compile::preprocess_unstable_if_traps() {\n-  Atomic::add(&unstable_if_traps_all, (uint)_unstable_if_traps.length());\n-\n-  for (int i = 0; i < _unstable_if_traps.length(); i++) {\n-    UnstableIfTrap* trap = _unstable_if_traps.at(i);\n-    if (trap->is_trivial()) {\n-      Atomic::inc(&trivial_unstable_if_traps);\n-    }\n-  }\n-}\n-#endif\n-\n@@ -1924,1 +1906,1 @@\n-  for (int i = 0; i < _unstable_if_traps.length(); ++i) {\n+  for (int i = _unstable_if_traps.length() - 1; i >= 0; --i) {\n@@ -1928,0 +1910,1 @@\n+    bool modified = trap->modified();\n@@ -1929,1 +1912,1 @@\n-    if (next_bci != -1 && !trap->modified()) {\n+    if (next_bci != -1 && !modified) {\n@@ -1950,1 +1933,0 @@\n-      bool modified = false;\n@@ -1970,3 +1952,7 @@\n-      if (modified) {\n-        trap->set_modified();\n-      }\n+    }\n+\n+    \/\/ keep the mondified for late query\n+    if (modified) {\n+      trap->set_modified();\n+    } else {\n+      _unstable_if_traps.delete_at(i);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":14,"deletions":28,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -739,1 +739,1 @@\n-  bool remove_unstable_if_trap(CallStaticJavaNode* unc);\n+  bool remove_unstable_if_trap(CallStaticJavaNode* unc, bool yield);\n@@ -741,1 +741,0 @@\n-  void preprocess_unstable_if_traps() PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -842,1 +842,1 @@\n-          igvn->C->remove_unstable_if_trap(dom_unc)) {\n+          igvn->C->remove_unstable_if_trap(dom_unc, true)) {\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,0 +668,4 @@\n+\n+    if (is_CallStaticJava()) {\n+      compile->remove_unstable_if_trap(as_CallStaticJava(), false);\n+    }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -622,2 +622,2 @@\n-  \/\/ The starting point of the pruned block, where control should go\n-  \/\/ when deoptimization does happen.\n+  \/\/ The starting point of the pruned block, where control goes when\n+  \/\/ deoptimization does happen.\n@@ -636,11 +636,0 @@\n-  Parse::Block* path() const {\n-    return _path;\n-  }\n-\n-  \/\/ This can only be determined in parse-time.\n-  \/\/ if _path has only one predecessor, it is trivial if this block is small(1~2 bytecodes)\n-  \/\/ or if _path has more than one predecessor and has been parsed, _unc does not mask out any real code.\n-  bool is_trivial() const {\n-    return _path != nullptr && _path->is_parsed();\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -69,2 +69,0 @@\n-extern uint trivial_unstable_if_traps;\n-extern uint unstable_if_traps_all;\n@@ -97,5 +95,0 @@\n-  if (unstable_if_traps_all) {\n-    tty->print_cr(\"%u trivial unstable_if traps (%2u%%)\", trivial_unstable_if_traps,\n-                  (100 * trivial_unstable_if_traps \/ unstable_if_traps_all));\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *          (-XX:+AggressiveLivenessForUnstableIf)\n+ *          (-XX:+OptimizeUnstableIf)\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestFoldCompares2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run driver compiler.c2.irTests.TestAggressiveLivenessForUnstableIf\n+ * @run driver compiler.c2.irTests.TestOptimizeUnstableIf\n@@ -37,1 +37,1 @@\n-public class TestAggressiveLivenessForUnstableIf {\n+public class TestOptimizeUnstableIf {\n@@ -45,1 +45,1 @@\n-    @IR(applyIf = {\"AggressiveLivenessForUnstableIf\", \"true\"}, failOn = {IRNode.ALLOC_OF, \"Integer\"})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"Integer\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeForUnstableIf.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestAggressiveLivenessForUnstableIf.java","status":"copied"},{"patch":"@@ -35,1 +35,1 @@\n- * @run driver compiler.c2.irTests.TestAggressiveLivenessForUnstableIf\n+ * @run driver compiler.c2.irTests.TestOptimizeUnstableIf\n@@ -37,1 +37,1 @@\n-public class TestAggressiveLivenessForUnstableIf {\n+public class TestOptimizeUnstableIf {\n@@ -45,1 +45,1 @@\n-    @IR(applyIf = {\"AggressiveLivenessForUnstableIf\", \"true\"}, failOn = {IRNode.ALLOC_OF, \"Integer\"})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"Integer\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeUnstableIf.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestAggressiveLivenessForUnstableIf.java","status":"renamed"}]}