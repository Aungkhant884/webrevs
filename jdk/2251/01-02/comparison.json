{"files":[{"patch":"@@ -121,0 +121,1 @@\n+      *_sa[sig] = *act;\n@@ -152,1 +153,1 @@\n-\/\/  did replace with our own and to which we must delegate.\n+\/\/  replaced with our own and to which we must delegate.\n@@ -842,1 +843,1 @@\n-                    os::exception_name(sig, buf, O_BUFLEN));    \/\/ When comparing, ignore the SA_RESTORER flag on Linux\n+                    os::exception_name(sig, buf, O_BUFLEN));\n@@ -1393,1 +1394,1 @@\n-  \/\/ On Linux, hide the SA_RESTORE flag\n+  \/\/ On Linux, hide the SA_RESTORER flag\n@@ -1401,1 +1402,1 @@\n-\/\/    it did replace, print that one too.\n+\/\/    it replaced, print that one too.\n@@ -1412,0 +1413,17 @@\n+  \/\/ If we expected to see our own hotspot signal handler but found a different one,\n+  \/\/  print a warning. Unless it had been replaced with our own secondary crash handler.\n+  const struct sigaction* expected_act = expected_handlers.get(sig);\n+  if (expected_act != NULL) {\n+    const address current_handler = get_signal_handler(&current_act);\n+    if (!(HANDLER_IS(current_handler, VMError::crash_handler_address))) {\n+      const address expected_handler = get_signal_handler(expected_act);\n+      if (current_handler != expected_handler) {\n+        st->print_cr(\"  *** Handler changed! Expected hotspot signal handler. Consider using jsig library.\");\n+      }\n+      if (current_act.sa_flags LINUX_ONLY(& SA_RESTORER_FLAG_MASK) != expected_act->sa_flags) {\n+        st->print_cr(\"  *** Flags changed! Consider using jsig library.\");\n+      }\n+    }\n+  }\n+\n+  \/\/ If there is a chained handler waiting behind the current one, print it too.\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -98,0 +98,2 @@\n+const void* VMError::crash_handler_address = CAST_FROM_FN_PTR(void *, crash_handler);\n+\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,0 +180,3 @@\n+  \/\/ Needed when printing signal handlers.\n+  NOT_WINDOWS(static const void* crash_handler_address;)\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}