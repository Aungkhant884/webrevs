{"files":[{"patch":"@@ -3954,1 +3954,1 @@\n-        int i = ArraysSupport.mismatch(m1, 0, m2, 0, len1);\n+        int i = ArraysSupport.mismatch(m1, m2, len1);\n@@ -4025,1 +4025,1 @@\n-        return ArraysSupport.mismatch(mag, 0, xInt.mag, 0, mag.length) == -1;\n+        return ArraysSupport.mismatch(mag, xInt.mag, mag.length) == -1;\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Arrays;\n@@ -40,0 +41,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -44,2 +46,2 @@\n-@Warmup(iterations = 3, time = 1)\n-@Measurement(iterations = 3, time = 1)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n@@ -49,30 +51,1 @@\n-    \/\/ The below list was derived from stats gathered from running tests in\n-    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n-    \/\/\n-    \/\/ Every time bigInteger1.compareTo(bigInteger2) was called, the\n-    \/\/ Math.min(bigInteger1.bitLength(), bigInteger2.bitLength()) value\n-    \/\/ was recorded. Recorded values were then sorted by frequency in\n-    \/\/ descending order. Top 20 of the most frequent values were then picked.\n-    @Param({\n-              \"19\",\n-              \"18\",\n-              \"17\",\n-              \"16\",\n-               \"1\",\n-              \"15\",\n-              \"14\",\n-               \"2\",\n-              \"13\",\n-               \"0\",\n-              \"12\",\n-            \"1536\",\n-            \"1024\",\n-            \"1535\",\n-            \"1023\",\n-              \"11\",\n-             \"512\",\n-             \"256\",\n-             \"255\",\n-            \"1534\",\n-    })\n-    private int nBits;\n+    public enum Group {S, M, L}\n@@ -80,1 +53,9 @@\n-    private BigInteger x, y;\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n@@ -84,3 +65,17 @@\n-        var p = Shared.createPair(nBits);\n-        x = p.x();\n-        y = p.y();\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[2 * MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            var p = Shared.createPair(nBits[i % nBits.length]);\n+            numbers[2 * i] = p.x();\n+            numbers[2 * i + 1] = p.y();\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{0, 1, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19};\n+            case M -> new int[]{255, 256, 512};\n+            case L -> new int[]{1023, 1024, 1534, 1535, 1536};\n+        };\n@@ -90,2 +85,3 @@\n-    public int testCompareTo() {\n-        return x.compareTo(y);\n+    public void testCompareTo(Blackhole bh) {\n+        for (int i = 0; i < numbers.length; i += 2)\n+            bh.consume(numbers[i].compareTo(numbers[i + 1]));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerCompareTo.java","additions":34,"deletions":38,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Arrays;\n@@ -40,0 +41,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -44,2 +46,2 @@\n-@Warmup(iterations = 3, time = 1)\n-@Measurement(iterations = 3, time = 1)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n@@ -49,30 +51,1 @@\n-    \/\/ The below list was derived from stats gathered from running tests in\n-    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n-    \/\/\n-    \/\/ Every time bigInteger1.equals(bigInteger2) was called, the\n-    \/\/ Math.min(bigInteger1.bitLength(), bigInteger2.bitLength()) value\n-    \/\/ was recorded. Recorded values were then sorted by frequency in\n-    \/\/ descending order. Top 20 of the most frequent values were then picked.\n-    @Param({\n-            \"256\",\n-            \"255\",\n-            \"521\",\n-            \"384\",\n-              \"1\",\n-             \"46\",\n-            \"252\",\n-            \"446\",\n-            \"448\",\n-            \"383\",\n-            \"520\",\n-            \"254\",\n-            \"130\",\n-            \"445\",\n-            \"129\",\n-            \"447\",\n-            \"519\",\n-            \"251\",\n-            \"382\",\n-            \"253\",\n-    })\n-    private int nBits;\n+    public enum Group {S, M, L}\n@@ -80,1 +53,9 @@\n-    private BigInteger x, y;\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n@@ -84,3 +65,17 @@\n-        var p = Shared.createPair(nBits);\n-        x = p.x();\n-        y = p.y();\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[2 * MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            var p = Shared.createPair(nBits[i % nBits.length]);\n+            numbers[2 * i] = p.x();\n+            numbers[2 * i + 1] = p.y();\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{1, 46};\n+            case M -> new int[]{129, 130, 251, 252, 253, 254, 255, 256};\n+            case L -> new int[]{382, 383, 384, 445, 446, 447, 448, 519, 520, 521};\n+        };\n@@ -90,2 +85,3 @@\n-    public boolean testEquals() {\n-        return x.equals(y);\n+    public void testEquals(Blackhole bh) {\n+        for (int i = 0; i < numbers.length; i += 2)\n+            bh.consume(numbers[i].equals(numbers[i + 1]));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEquals.java","additions":34,"deletions":38,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Arrays;\n@@ -40,0 +41,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -44,2 +46,2 @@\n-@Warmup(iterations = 3, time = 1)\n-@Measurement(iterations = 3, time = 1)\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 3, time = 5)\n@@ -49,29 +51,1 @@\n-    \/\/ The below list was derived from stats gathered from running tests in\n-    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n-    \/\/\n-    \/\/ Every time BigInteger.hashCode() was called, BigInteger.bitLength() of\n-    \/\/ the receiver was recorded. Recorded values were then sorted by frequency\n-    \/\/ in descending order. Top 20 of the most frequent value were then picked.\n-    @Param({\n-             \"256\",\n-             \"521\",\n-            \"1024\",\n-            \"2048\",\n-             \"384\",\n-            \"3072\",\n-            \"4096\",\n-             \"512\",\n-             \"768\",\n-            \"5120\",\n-            \"6144\",\n-            \"2049\",\n-            \"1025\",\n-              \"13\",\n-             \"767\",\n-               \"7\",\n-            \"2047\",\n-             \"511\",\n-               \"2\",\n-              \"64\",\n-    })\n-    private int nBits;\n+    public enum Group {S, M, L}\n@@ -79,1 +53,9 @@\n-    private BigInteger x;\n+    @Param({\"S\", \"M\", \"L\"})\n+    private Group group;\n+\n+    private static final int MAX_LENGTH = Arrays.stream(Group.values())\n+            .mapToInt(p -> getNumbersOfBits(p).length)\n+            .max()\n+            .getAsInt();\n+\n+    private BigInteger[] numbers;\n@@ -83,1 +65,15 @@\n-        x = Shared.createSingle(nBits);\n+        int[] nBits = getNumbersOfBits(group);\n+        numbers = new BigInteger[MAX_LENGTH];\n+        for (int i = 0; i < MAX_LENGTH; i++) {\n+            numbers[i] = Shared.createSingle(nBits[i % nBits.length]);\n+        }\n+    }\n+\n+    private static int[] getNumbersOfBits(Group p) {\n+        \/\/ the below arrays were derived from stats gathered from running tests in\n+        \/\/ the security area, which is the biggest client of BigInteger in JDK\n+        return switch (p) {\n+            case S -> new int[]{2, 7, 13, 64};\n+            case M -> new int[]{256, 384, 511, 512, 521, 767, 768};\n+            case L -> new int[]{1024, 1025, 2047, 2048, 2049, 3072, 4096, 5120, 6144};\n+        };\n@@ -87,2 +83,3 @@\n-    public int testHashCode() {\n-        return x.hashCode();\n+    public void testHashCode(Blackhole bh) {\n+        for (var n : numbers)\n+            bh.consume(n.hashCode());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerHashCode.java","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-            if (x.signum() != y.signum())\n+            if (x.signum() == -y.signum()) \/\/ if the pair comprises positive and negative\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Shared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}