{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -3924,0 +3925,1 @@\n+    @Override\n@@ -3952,6 +3954,3 @@\n-        for (int i = 0; i < len1; i++) {\n-            int a = m1[i];\n-            int b = m2[i];\n-            if (a != b)\n-                return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;\n-        }\n+        int i = ArraysSupport.mismatch(m1, 0, m2, 0, len1);\n+        if (i != -1)\n+            return ((m1[i] & LONG_MASK) < (m2[i] & LONG_MASK)) ? -1 : 1;\n@@ -4011,0 +4010,1 @@\n+    @Override\n@@ -4022,4 +4022,1 @@\n-        int[] m = mag;\n-        int len = m.length;\n-        int[] xm = xInt.mag;\n-        if (len != xm.length)\n+        if (mag.length != xInt.mag.length)\n@@ -4028,5 +4025,1 @@\n-        for (int i = 0; i < len; i++)\n-            if (xm[i] != m[i])\n-                return false;\n-\n-        return true;\n+        return ArraysSupport.mismatch(mag, 0, xInt.mag, 0, mag.length) == -1;\n@@ -4061,3 +4054,1 @@\n-     * Returns the hash code for this BigInteger.\n-     *\n-     * @return hash code for this BigInteger.\n+     * {@return the hash code for this BigInteger}\n@@ -4065,0 +4056,1 @@\n+    @Override\n@@ -4066,6 +4058,1 @@\n-        int hashCode = 0;\n-\n-        for (int i=0; i < mag.length; i++)\n-            hashCode = (int)(31*hashCode + (mag[i] & LONG_MASK));\n-\n-        return hashCode * signum;\n+        return Arrays.hashCode(mag) * signum;\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerEqualsHashCodeCompareTo {\n+\n+    @Param({  \"16\", \/\/ short\n+              \"17\",\n+              \"32\", \/\/ int\n+              \"37\",\n+              \"64\", \/\/ long\n+              \"83\",\n+            \"2048\", \/\/ typical size of an RSA key\n+            \"4096\", \/\/ typical size of an RSA key\n+           \"65536\",\n+    })\n+\n+    private int bits;\n+\n+    private static final int N = 512;\n+\n+    private BigInteger[] numbers;\n+\n+    @Setup\n+    public void setup() {\n+        var random = new Random();\n+        numbers = new BigInteger[N];\n+        for (int i = 0; i < N; i++) {\n+            numbers[i] = new BigInteger(bits, random);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testEquals(Blackhole bh) {\n+        for (int i = 1; i < N; i++)\n+            bh.consume(numbers[i].equals(numbers[0]));\n+    }\n+\n+    @Benchmark\n+    public void testHashCode(Blackhole bh) {\n+        for (int i = 1; i < N; i++)\n+            bh.consume(numbers[i].hashCode());\n+    }\n+\n+    @Benchmark\n+    public void testCompareTo(Blackhole bh) {\n+        for (int i = 1; i < N; i++)\n+            bh.consume(numbers[i].compareTo(numbers[0]));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEqualsHashCodeCompareTo.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}