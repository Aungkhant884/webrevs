{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerCompareTo {\n+\n+    \/\/ The below list was derived from stats gathered from running tests in\n+    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n+    \/\/\n+    \/\/ Every time bigInteger1.compareTo(bigInteger2) was called, the\n+    \/\/ Math.min(bigInteger1.bitLength(), bigInteger2.bitLength()) value\n+    \/\/ was recorded. Recorded values were then sorted by frequency in\n+    \/\/ descending order. Top 20 of the most frequent values were then picked.\n+    @Param({\n+              \"19\",\n+              \"18\",\n+              \"17\",\n+              \"16\",\n+               \"1\",\n+              \"15\",\n+              \"14\",\n+               \"2\",\n+              \"13\",\n+               \"0\",\n+              \"12\",\n+            \"1536\",\n+            \"1024\",\n+            \"1535\",\n+            \"1023\",\n+              \"11\",\n+             \"512\",\n+             \"256\",\n+             \"255\",\n+            \"1534\",\n+    })\n+    private int nBits;\n+\n+    private BigInteger x, y;\n+\n+    @Setup\n+    public void setup() {\n+        var p = Shared.createPair(nBits);\n+        x = p.x();\n+        y = p.y();\n+    }\n+\n+    @Benchmark\n+    public int testCompareTo() {\n+        return x.compareTo(y);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerCompareTo.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerEquals {\n+\n+    \/\/ The below list was derived from stats gathered from running tests in\n+    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n+    \/\/\n+    \/\/ Every time bigInteger1.equals(bigInteger2) was called, the\n+    \/\/ Math.min(bigInteger1.bitLength(), bigInteger2.bitLength()) value\n+    \/\/ was recorded. Recorded values were then sorted by frequency in\n+    \/\/ descending order. Top 20 of the most frequent values were then picked.\n+    @Param({\n+            \"256\",\n+            \"255\",\n+            \"521\",\n+            \"384\",\n+              \"1\",\n+             \"46\",\n+            \"252\",\n+            \"446\",\n+            \"448\",\n+            \"383\",\n+            \"520\",\n+            \"254\",\n+            \"130\",\n+            \"445\",\n+            \"129\",\n+            \"447\",\n+            \"519\",\n+            \"251\",\n+            \"382\",\n+            \"253\",\n+    })\n+    private int nBits;\n+\n+    private BigInteger x, y;\n+\n+    @Setup\n+    public void setup() {\n+        var p = Shared.createPair(nBits);\n+        x = p.x();\n+        y = p.y();\n+    }\n+\n+    @Benchmark\n+    public boolean testEquals() {\n+        return x.equals(y);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEquals.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.math;\n-\n-import java.math.BigInteger;\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(value = 3)\n-public class BigIntegerEqualsHashCodeCompareTo {\n-\n-    @Param({  \"16\", \/\/ short\n-              \"17\",\n-              \"32\", \/\/ int\n-              \"37\",\n-              \"64\", \/\/ long\n-              \"83\",\n-            \"2048\", \/\/ typical size of an RSA key\n-            \"4096\", \/\/ typical size of an RSA key\n-           \"65536\",\n-    })\n-\n-    private int bits;\n-\n-    private static final int N = 512;\n-\n-    private BigInteger[] numbers;\n-\n-    @Setup\n-    public void setup() {\n-        var random = new Random();\n-        numbers = new BigInteger[N];\n-        for (int i = 0; i < N; i++) {\n-            numbers[i] = new BigInteger(bits, random);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void testEquals(Blackhole bh) {\n-        for (int i = 1; i < N; i++)\n-            bh.consume(numbers[i].equals(numbers[0]));\n-    }\n-\n-    @Benchmark\n-    public void testHashCode(Blackhole bh) {\n-        for (int i = 1; i < N; i++)\n-            bh.consume(numbers[i].hashCode());\n-    }\n-\n-    @Benchmark\n-    public void testCompareTo(Blackhole bh) {\n-        for (int i = 1; i < N; i++)\n-            bh.consume(numbers[i].compareTo(numbers[0]));\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEqualsHashCodeCompareTo.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(value = 3)\n+public class BigIntegerHashCode {\n+\n+    \/\/ The below list was derived from stats gathered from running tests in\n+    \/\/ the security area, which is the biggest client of BigInteger in JDK.\n+    \/\/\n+    \/\/ Every time BigInteger.hashCode() was called, BigInteger.bitLength() of\n+    \/\/ the receiver was recorded. Recorded values were then sorted by frequency\n+    \/\/ in descending order. Top 20 of the most frequent value were then picked.\n+    @Param({\n+             \"256\",\n+             \"521\",\n+            \"1024\",\n+            \"2048\",\n+             \"384\",\n+            \"3072\",\n+            \"4096\",\n+             \"512\",\n+             \"768\",\n+            \"5120\",\n+            \"6144\",\n+            \"2049\",\n+            \"1025\",\n+              \"13\",\n+             \"767\",\n+               \"7\",\n+            \"2047\",\n+             \"511\",\n+               \"2\",\n+              \"64\",\n+    })\n+    private int nBits;\n+\n+    private BigInteger x;\n+\n+    @Setup\n+    public void setup() {\n+        x = Shared.createSingle(nBits);\n+    }\n+\n+    @Benchmark\n+    public int testHashCode() {\n+        return x.hashCode();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerHashCode.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+package org.openjdk.bench.java.math;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/ THIS IS NOT A BENCHMARK\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+public final class Shared {\n+\n+    \/\/ General note\n+    \/\/ ============\n+    \/\/\n+    \/\/ Isn't there a simple way to get a BigInteger of the specified number\n+    \/\/ of bits of magnitude? It does not seem like it.\n+    \/\/\n+    \/\/ We cannot create a BigInteger of the specified number of bytes,\n+    \/\/ directly and *cheaply*. This constructor does not do what you\n+    \/\/ might think it does:\n+    \/\/\n+    \/\/      BigInteger(int numBits, Random rnd)\n+    \/\/\n+    \/\/  The only real direct option we have is this constructor:\n+    \/\/\n+    \/\/      BigInteger(int bitLength, int certainty, Random rnd)\n+    \/\/\n+    \/\/  But even with certainty == 0, it is not cheap. So, create the\n+    \/\/  number with the closest number of bytes and then shift right\n+    \/\/  the excess bits.\n+\n+    private Shared() {\n+        throw new AssertionError(\"This is a utility class\");\n+    }\n+\n+    \/\/\n+    \/\/ Creates a pair of same sign numbers x and y that minimally differ in\n+    \/\/ magnitude.\n+    \/\/\n+    \/\/ More formally: x.bitLength() == nBits and x.signum() == y.signum()\n+    \/\/ and either\n+    \/\/\n+    \/\/   * y.bitLength() == nBits, and\n+    \/\/   * x.testBit(0) != y.testBit(0)\n+    \/\/\n+    \/\/ or\n+    \/\/\n+    \/\/   * y.bitLength() == nBits + 1\n+    \/\/\n+    \/\/ By construction, such numbers are unequal to each other, but the\n+    \/\/ difference in magnitude is minimal. That way, the comparison\n+    \/\/ methods, such as equals and compareTo, are forced to examine\n+    \/\/ the _complete_ number representation.\n+    \/\/\n+    \/\/ Assumptions on BigInteger mechanics\n+    \/\/ ===================================\n+    \/\/\n+    \/\/ 1. bigLength() is not consulted with for short-circuiting; if it is,\n+    \/\/    then we have a problem with nBits={0,1}\n+    \/\/ 2. new BigInteger(0, new byte[]{0}) and new BigInteger(1, new byte[]{1})\n+    \/\/    are not canonicalized to BigInteger.ZERO and BigInteger.ONE,\n+    \/\/    respectively; if they are, then internal optimizations might be\n+    \/\/    possible (BigInteger is not exactly a value-based class).\n+    \/\/ 3. Comparison and equality are checked from the most significant bit\n+    \/\/    to the least significant bit, not the other way around (for\n+    \/\/    comparison it seems natural, but not for equality). If any\n+    \/\/    of those are checked in the opposite direction, then the check\n+    \/\/    might short-circuit.\n+    \/\/\n+    public static Pair createPair(int nBits) {\n+        if (nBits < 0) {\n+            throw new IllegalArgumentException(String.valueOf(nBits));\n+        } else if (nBits == 0) {\n+            var zero = new BigInteger(nBits, new byte[0]);\n+            var one = new BigInteger(\/* positive *\/ 1, new byte[]{1});\n+            return new Pair(zero, one);\n+        } else if (nBits == 1) {\n+            var one = new BigInteger(\/* positive *\/ 1, new byte[]{1});\n+            var two = new BigInteger(\/* positive *\/ 1, new byte[]{2});\n+            return new Pair(one, two);\n+        }\n+        int nBytes = (nBits + 7) \/ 8;\n+        var r = new Random();\n+        var bytes = new byte[nBytes];\n+        r.nextBytes(bytes);\n+        \/\/ Create a BigInteger of the exact bit length by:\n+        \/\/ 1. ensuring that the most significant bit is set so that\n+        \/\/    no leading zeros are truncated, and\n+        \/\/ 2. explicitly specifying signum, so it's not calculated from\n+        \/\/    the passed bytes, which must represent magnitude only\n+        bytes[0] |= (byte) 0b1000_0000;\n+        var x = new BigInteger(\/* positive *\/ 1, bytes)\n+                .shiftRight(nBytes * 8 - nBits);\n+        var y = x.flipBit(0);\n+        \/\/ do not rely on the assert statement in benchmark\n+        if (x.bitLength() != nBits)\n+            throw new AssertionError(x.bitLength() + \", \" + nBits);\n+        return new Pair(x, y);\n+    }\n+\n+    public record Pair(BigInteger x, BigInteger y) {\n+        public Pair {\n+            if (x.signum() != y.signum())\n+                throw new IllegalArgumentException(\"x.signum()=\" + x.signum()\n+                        + \", y=signum()=\" + y.signum());\n+            if (y.bitLength() - x.bitLength() > 1)\n+                throw new IllegalArgumentException(\"x.bitLength()=\" + x.bitLength()\n+                        + \", y.bitLength()=\" + y.bitLength());\n+        }\n+    }\n+\n+    public static BigInteger createSingle(int nBits) {\n+        if (nBits < 0) {\n+            throw new IllegalArgumentException(String.valueOf(nBits));\n+        }\n+        int nBytes = (nBits + 7) \/ 8;\n+        var r = new Random();\n+        var b = new byte[nBytes];\n+        r.nextBytes(b);\n+        var x = new BigInteger(b).shiftRight(nBytes * 8 - nBits);\n+        if (x.bitLength() != nBits)\n+            throw new AssertionError(x.bitLength() + \", \" + nBits);\n+        return x;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Shared.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}