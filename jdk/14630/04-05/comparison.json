{"files":[{"patch":"@@ -115,0 +115,3 @@\n+        if (nBits == 0) {\n+            return new BigInteger(nBits, new byte[0]);\n+        }\n@@ -117,3 +120,10 @@\n-        var b = new byte[nBytes];\n-        r.nextBytes(b);\n-        var x = new BigInteger(b).shiftRight(nBytes * 8 - nBits);\n+        var bytes = new byte[nBytes];\n+        r.nextBytes(bytes);\n+        \/\/ Create a BigInteger of the exact bit length by:\n+        \/\/ 1. ensuring that the most significant bit is set so that\n+        \/\/    no leading zeros are truncated, and\n+        \/\/ 2. explicitly specifying signum, so it's not calculated from\n+        \/\/    the passed bytes, which must represent magnitude only\n+        bytes[0] |= (byte) 0b1000_0000;\n+        var x = new BigInteger(\/* positive *\/ 1, bytes)\n+                .shiftRight(nBytes * 8 - nBits);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Shared.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}