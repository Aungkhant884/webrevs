{"files":[{"patch":"@@ -77,3 +77,2 @@\n-import static com.sun.tools.javac.code.TypeTag.CLASS;\n-import static com.sun.tools.javac.code.TypeTag.FORALL;\n-import static com.sun.tools.javac.code.TypeTag.TYPEVAR;\n+\n+import static com.sun.tools.javac.code.TypeTag.*;\n@@ -516,0 +515,5 @@\n+            if (c.kind.matches(KindSelector.ERR)\n+                    && c.type != null && c.type.hasTag(ERROR)\n+                    && c instanceof ClassSymbol) {\n+                return (ClassSymbol)c;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1714,0 +1714,5 @@\n+        if (deferredDiagnosticHandler != null\n+                && deferredDiagnosticHandler.getDiagnostics() != null\n+                && deferredDiagnosticHandler.getDiagnostics().size() > 0) {\n+            deferredDiagnosticHandler.reportDeferredDiagnostics();\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8225003\n+ * @summary NPE in Attr.attribIdentAsEnumType\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main CyclicEnumDependency\n+ *\/\n+\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class CyclicEnumDependency extends TestRunner {\n+    ToolBox tb;\n+\n+    public CyclicEnumDependency() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        CyclicEnumDependency t = new CyclicEnumDependency();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testCyclicEnumNullPointer() throws Exception {\n+        String processorCode = \"\"\"\n+                import java.util.Set;\n+                import javax.annotation.processing.AbstractProcessor;\n+                import javax.annotation.processing.RoundEnvironment;\n+                import javax.lang.model.element.TypeElement;\n+                public class EmptyProcessor extends AbstractProcessor {\n+                    @Override\n+                    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                        return false;\n+                    }\n+                }\"\"\";\n+\n+        String errorCode = \"\"\"\n+                public enum T8225003Enum implements T8225003Enum {\n+                    MISTAKE;\n+                }\"\"\";\n+\n+        new JavacTask(tb)\n+                .sources(processorCode)\n+                .classpath(\".\")\n+                .run()\n+                .writeAll();\n+\n+        List<String> output = new JavacTask(tb)\n+                .sources(errorCode)\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\", \"-processor\", \"EmptyProcessor\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8225003Enum.java:1:37: compiler.err.intf.expected.here\",\n+                \"T8225003Enum.java:1:8: compiler.err.cyclic.inheritance: T8225003Enum\",\n+                \"T8225003Enum.java:2:5: compiler.err.mod.not.allowed.here: public,static\",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/enum\/CyclicEnumDependency.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}