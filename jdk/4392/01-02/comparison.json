{"files":[{"patch":"@@ -603,1 +603,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -605,1 +606,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -635,1 +635,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -637,1 +638,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -699,1 +699,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -701,1 +702,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -587,1 +587,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -573,1 +573,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -575,1 +576,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -571,1 +571,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -573,1 +574,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -575,1 +575,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -577,1 +578,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -583,1 +583,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -585,1 +586,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -569,1 +569,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -571,1 +572,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -568,1 +568,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -570,1 +571,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -575,1 +575,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -577,1 +578,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -583,1 +583,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -585,1 +586,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -599,1 +599,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -601,1 +602,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -571,1 +571,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -573,1 +574,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -568,1 +568,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -570,1 +571,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -579,1 +579,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -581,1 +582,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -587,2 +587,2 @@\n-            assert(length() == dsp.laneCount());\n-            System.out.println(dsp);\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -590,1 +590,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n@@ -598,1 +597,0 @@\n-            System.out.println(dsp);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -603,1 +603,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -605,1 +606,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -575,1 +575,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -577,1 +578,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -573,1 +573,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -575,1 +576,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -565,1 +565,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -567,1 +568,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -569,1 +569,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -571,1 +572,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -577,1 +577,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -579,1 +580,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -563,1 +563,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -565,1 +566,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -563,1 +563,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -565,1 +566,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -587,1 +587,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -589,1 +590,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -603,1 +603,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -605,1 +606,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -635,1 +635,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -637,1 +638,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -579,1 +579,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -581,1 +582,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -573,1 +573,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -575,1 +576,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -846,1 +846,2 @@\n-            assert(length() == dsp.laneCount());\n+            if (length() != dsp.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n@@ -848,1 +849,0 @@\n-            \/\/ enum-switches don't optimize properly JDK-8161245\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1323,0 +1323,1 @@\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1323,0 +1323,1 @@\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1323,0 +1323,1 @@\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1323,0 +1323,1 @@\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1328,0 +1328,1 @@\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1416,0 +1416,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(DoubleVector.SPECIES_128);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1416,0 +1416,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(DoubleVector.SPECIES_256);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1416,0 +1416,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(DoubleVector.SPECIES_512);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1416,0 +1416,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(DoubleVector.SPECIES_64);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1421,0 +1421,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(DoubleVector.SPECIES_MAX);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1426,0 +1426,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(FloatVector.SPECIES_128);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1426,0 +1426,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(FloatVector.SPECIES_256);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1426,0 +1426,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(FloatVector.SPECIES_512);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1426,0 +1426,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(FloatVector.SPECIES_64);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1431,0 +1431,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(FloatVector.SPECIES_MAX);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1288,0 +1288,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(IntVector.SPECIES_128);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1288,0 +1288,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(IntVector.SPECIES_256);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1288,0 +1288,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(IntVector.SPECIES_512);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1288,0 +1288,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(IntVector.SPECIES_64);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1293,0 +1293,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(IntVector.SPECIES_MAX);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1310,0 +1310,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(LongVector.SPECIES_128);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1310,0 +1310,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(LongVector.SPECIES_256);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1310,0 +1310,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(LongVector.SPECIES_512);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1310,0 +1310,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(LongVector.SPECIES_64);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1313,0 +1313,10 @@\n+        }\n+    }\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(LongVector.SPECIES_MAX);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1313,0 +1313,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(ShortVector.SPECIES_128);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1313,0 +1313,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(ShortVector.SPECIES_256);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1313,0 +1313,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(ShortVector.SPECIES_512);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1313,0 +1313,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(ShortVector.SPECIES_64);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1318,0 +1318,10 @@\n+\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+            m.cast(ShortVector.SPECIES_MAX);\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1575,0 +1575,16 @@\n+\n+#if[!byte]\n+    @Test\n+    static void vectorMaskCastIllegalArgumentSmokeTest() {\n+        try {\n+            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n+#if[MaxBit]\n+            m.cast($abstractvectortype$.SPECIES_MAX);\n+#else[MaxBit]\n+            m.cast($abstractvectortype$.SPECIES_$bits$);\n+#end[MaxBit]\n+            Assert.fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n+#end[!byte]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}