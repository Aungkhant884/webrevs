{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.ArrayList;\n@@ -37,0 +38,2 @@\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorShape;\n@@ -286,0 +289,34 @@\n+\n+    static  VectorSpecies [] castSpeciesProvider(VectorSpecies SPECIES, boolean legal) {\n+        List<VectorSpecies> res = new ArrayList<VectorSpecies>();\n+        for (int elmSz : new int[] {8,16,32,64} ) {\n+            int toSpeciesLength = SPECIES.length() * elmSz;\n+            boolean pickSpecies = legal ?\n+                                  toSpeciesLength >= 64 && toSpeciesLength <= 512 :\n+                                  toSpeciesLength < 64 || toSpeciesLength > 512;\n+            if (pickSpecies) {\n+                if (!legal) {\n+                    toSpeciesLength = toSpeciesLength < 64 ? 64 : 512;\n+                }\n+                switch(elmSz) {\n+                    case 8:\n+                        res.add(VectorSpecies.of(byte.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        break;\n+                    case 16:\n+                        res.add(VectorSpecies.of(short.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        break;\n+                    case 32:\n+                        res.add(VectorSpecies.of(int.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        res.add(VectorSpecies.of(float.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        break;\n+                    case 64:\n+                        res.add(VectorSpecies.of(long.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        res.add(VectorSpecies.of(double.class, VectorShape.forBitSize(toSpeciesLength)));\n+                        break;\n+                    default:\n+                        assert false;\n+                }\n+            }\n+        }\n+        return res.toArray(VectorSpecies[]::new);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1324,0 +1324,3 @@\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5421,23 +5424,1 @@\n-    static void maskCastByte128VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte128VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n+    static void maskCastByte128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5448,13 +5429,4 @@\n-                var res = vmask.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5466,12 +5438,1 @@\n-    static void shuffleCastByte128VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte128VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastByte128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5482,2 +5443,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5487,3 +5450,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastByte128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5492,3 +5456,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5498,0 +5467,1 @@\n+\n@@ -5499,1 +5469,1 @@\n-    static void shuffleCastByte128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastByte128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5504,2 +5474,7 @@\n-                var res = vshuffle.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":34,"deletions":59,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -1324,0 +1324,3 @@\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5421,1 +5424,1 @@\n-    static void maskCastByte256VectorTestsByteTest(IntFunction<boolean[]> fa) {\n+    static void maskCastByte256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5426,2 +5429,4 @@\n-                var res = vmask.cast(ByteVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5431,3 +5436,4 @@\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastByte256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n@@ -5436,3 +5442,5 @@\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5443,3 +5451,3 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte256VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastByte256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5448,3 +5456,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5454,0 +5467,1 @@\n+\n@@ -5455,1 +5469,1 @@\n-    static void shuffleCastByte256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastByte256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5460,2 +5474,7 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":37,"deletions":18,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1324,0 +1324,3 @@\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5421,1 +5424,1 @@\n-    static void maskCastByte512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n+    static void maskCastByte512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5426,2 +5429,4 @@\n-                var res = vmask.cast(ByteVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5433,1 +5438,1 @@\n-    static void shuffleCastByte512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastByte512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5438,2 +5443,38 @@\n-                var res = vshuffle.cast(ByteVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastByte512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastByte512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":47,"deletions":6,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1324,0 +1324,3 @@\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5421,45 +5424,1 @@\n-    static void maskCastByte64VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte64VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte64VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte64VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n+    static void maskCastByte64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5470,13 +5429,4 @@\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastByte64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5488,12 +5438,1 @@\n-    static void shuffleCastByte64VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte64VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastByte64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5504,24 +5443,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte64VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5531,3 +5450,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastByte64VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastByte64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5536,3 +5456,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5542,0 +5467,1 @@\n+\n@@ -5543,1 +5469,1 @@\n-    static void shuffleCastByte64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastByte64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5548,2 +5474,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":34,"deletions":103,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -1329,0 +1329,3 @@\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5425,0 +5428,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastByteMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastByteMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastByteMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastByteMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1417,9 +1417,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(DoubleVector.SPECIES_128);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4981,12 +4975,1 @@\n-    static void maskCastDouble128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble128VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastDouble128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4997,24 +4980,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble128VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5026,1 +4989,1 @@\n-    static void shuffleCastDouble128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastDouble128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5031,13 +4994,4 @@\n-                var res = vshuffle.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble128VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5047,3 +5001,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastDouble128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5052,3 +5007,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5058,0 +5018,1 @@\n+\n@@ -5059,1 +5020,1 @@\n-    static void shuffleCastDouble128VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastDouble128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5064,2 +5025,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1417,9 +1417,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(DoubleVector.SPECIES_256);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4981,23 +4975,1 @@\n-    static void maskCastDouble256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble256VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble256VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastDouble256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5008,24 +4980,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble256VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble256VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5037,1 +4989,1 @@\n-    static void shuffleCastDouble256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastDouble256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5042,24 +4994,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble256VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble256VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5069,3 +5001,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble256VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastDouble256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5074,3 +5007,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5080,0 +5018,1 @@\n+\n@@ -5081,1 +5020,1 @@\n-    static void shuffleCastDouble256VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastDouble256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5086,2 +5025,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":34,"deletions":90,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1417,9 +1417,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(DoubleVector.SPECIES_512);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4981,23 +4975,1 @@\n-    static void maskCastDouble512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble512VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble512VectorTestsIntTest(IntFunction<boolean[]> fa) {\n+    static void maskCastDouble512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5008,35 +4980,4 @@\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble512VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble512VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble512VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5048,1 +4989,1 @@\n-    static void shuffleCastDouble512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastDouble512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5053,35 +4994,4 @@\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble512VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble512VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble512VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5091,3 +5001,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble512VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastDouble512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5096,3 +5007,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5102,0 +5018,1 @@\n+\n@@ -5103,1 +5020,1 @@\n-    static void shuffleCastDouble512VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastDouble512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5108,2 +5025,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":34,"deletions":112,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -1417,9 +1417,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(DoubleVector.SPECIES_64);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4981,1 +4975,1 @@\n-    static void maskCastDouble64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastDouble64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4986,2 +4980,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -4991,3 +4987,4 @@\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastDouble64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastDouble64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n@@ -4996,3 +4993,5 @@\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5003,3 +5002,3 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastDouble64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastDouble64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5008,3 +5007,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5014,0 +5018,1 @@\n+\n@@ -5015,1 +5020,1 @@\n-    static void shuffleCastDouble64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastDouble64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5020,2 +5025,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1422,9 +1422,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(DoubleVector.SPECIES_MAX);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4985,0 +4979,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastDoubleMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastDoubleMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastDoubleMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastDoubleMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1427,9 +1427,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(FloatVector.SPECIES_128);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4959,23 +4953,1 @@\n-    static void maskCastFloat128VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat128VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastFloat128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4986,24 +4958,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat128VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5015,1 +4967,1 @@\n-    static void shuffleCastFloat128VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastFloat128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5020,24 +4972,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat128VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5047,3 +4979,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastFloat128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5052,3 +4985,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5058,0 +4996,1 @@\n+\n@@ -5059,1 +4998,1 @@\n-    static void shuffleCastFloat128VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastFloat128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5064,2 +5003,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":34,"deletions":90,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1427,9 +1427,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(FloatVector.SPECIES_256);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4959,23 +4953,1 @@\n-    static void maskCastFloat256VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat256VectorTestsIntTest(IntFunction<boolean[]> fa) {\n+    static void maskCastFloat256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4986,35 +4958,4 @@\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat256VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat256VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat256VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5026,1 +4967,1 @@\n-    static void shuffleCastFloat256VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastFloat256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5031,35 +4972,4 @@\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat256VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat256VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5069,3 +4979,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat256VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastFloat256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5074,3 +4985,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5080,0 +4996,1 @@\n+\n@@ -5081,1 +4998,1 @@\n-    static void shuffleCastFloat256VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastFloat256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5086,2 +5003,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":34,"deletions":112,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -1427,9 +1427,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(FloatVector.SPECIES_512);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4959,12 +4953,1 @@\n-    static void maskCastFloat512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat512VectorTestsShortTest(IntFunction<boolean[]> fa) {\n+    static void maskCastFloat512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4975,24 +4958,4 @@\n-                var res = vmask.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat512VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat512VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5004,1 +4967,1 @@\n-    static void shuffleCastFloat512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastFloat512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5009,13 +4972,4 @@\n-                var res = vshuffle.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat512VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5025,3 +4979,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat512VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastFloat512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5030,3 +4985,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5036,0 +4996,1 @@\n+\n@@ -5037,1 +4998,1 @@\n-    static void shuffleCastFloat512VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastFloat512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5042,2 +5003,7 @@\n-                var res = vshuffle.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1427,9 +1427,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(FloatVector.SPECIES_64);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4959,12 +4953,1 @@\n-    static void maskCastFloat64VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastFloat64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -4975,24 +4958,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat64VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastFloat64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5004,1 +4967,1 @@\n-    static void shuffleCastFloat64VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastFloat64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5009,13 +4972,4 @@\n-                var res = vshuffle.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5025,3 +4979,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastFloat64VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastFloat64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5030,3 +4985,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5036,0 +4996,1 @@\n+\n@@ -5037,1 +4998,1 @@\n-    static void shuffleCastFloat64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastFloat64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5042,2 +5003,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1432,9 +1432,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(FloatVector.SPECIES_MAX);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -4963,0 +4957,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastFloatMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastFloatMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastFloatMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastFloatMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1289,9 +1289,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(IntVector.SPECIES_128);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5384,45 +5378,1 @@\n-    static void maskCastInt128VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt128VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt128VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastInt128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5433,2 +5383,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5440,23 +5392,1 @@\n-    static void shuffleCastInt128VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt128VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastInt128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5467,2 +5397,4 @@\n-                var res = vshuffle.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5472,3 +5404,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastInt128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5477,3 +5410,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5483,0 +5421,1 @@\n+\n@@ -5484,1 +5423,1 @@\n-    static void shuffleCastInt128VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastInt128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5489,2 +5428,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":34,"deletions":90,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1289,9 +1289,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(IntVector.SPECIES_256);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5384,56 +5378,1 @@\n-    static void maskCastInt256VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt256VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt256VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt256VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt256VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastInt256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5444,2 +5383,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5451,23 +5392,1 @@\n-    static void shuffleCastInt256VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt256VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastInt256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5478,13 +5397,4 @@\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt256VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5494,3 +5404,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt256VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastInt256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5499,3 +5410,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5505,0 +5421,1 @@\n+\n@@ -5506,1 +5423,1 @@\n-    static void shuffleCastInt256VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastInt256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5511,2 +5428,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":34,"deletions":112,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -1289,9 +1289,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(IntVector.SPECIES_512);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5384,34 +5378,1 @@\n-    static void maskCastInt512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt512VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt512VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt512VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n+    static void maskCastInt512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5422,2 +5383,4 @@\n-                var res = vmask.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5429,12 +5392,1 @@\n-    static void shuffleCastInt512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt512VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastInt512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5445,2 +5397,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5450,3 +5404,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt512VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastInt512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5455,3 +5410,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5461,0 +5421,1 @@\n+\n@@ -5462,1 +5423,1 @@\n-    static void shuffleCastInt512VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastInt512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5467,2 +5428,7 @@\n-                var res = vshuffle.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1289,9 +1289,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(IntVector.SPECIES_64);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5384,34 +5378,1 @@\n-    static void maskCastInt64VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt64VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastInt64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastInt64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5422,2 +5383,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5429,12 +5392,1 @@\n-    static void shuffleCastInt64VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastInt64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5445,2 +5397,4 @@\n-                var res = vshuffle.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5450,3 +5404,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastInt64VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastInt64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5455,3 +5410,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5461,0 +5421,1 @@\n+\n@@ -5462,1 +5423,1 @@\n-    static void shuffleCastInt64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastInt64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5467,2 +5428,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1294,9 +1294,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(IntVector.SPECIES_MAX);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5388,0 +5382,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastIntMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastIntMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastIntMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastIntMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1311,9 +1311,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(LongVector.SPECIES_128);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5268,34 +5262,1 @@\n-    static void maskCastLong128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong128VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong128VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastLong128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5306,2 +5267,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5313,12 +5276,1 @@\n-    static void shuffleCastLong128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong128VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastLong128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5329,2 +5281,4 @@\n-                var res = vshuffle.cast(LongVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5334,3 +5288,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastLong128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5339,3 +5294,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5345,0 +5305,1 @@\n+\n@@ -5346,1 +5307,1 @@\n-    static void shuffleCastLong128VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastLong128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5351,2 +5312,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1311,9 +1311,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(LongVector.SPECIES_256);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5268,45 +5262,1 @@\n-    static void maskCastLong256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong256VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong256VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong256VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong256VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastLong256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5317,2 +5267,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5324,23 +5276,1 @@\n-    static void shuffleCastLong256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong256VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong256VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastLong256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5351,2 +5281,4 @@\n-                var res = vshuffle.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5356,3 +5288,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong256VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastLong256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5361,3 +5294,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5367,0 +5305,1 @@\n+\n@@ -5368,1 +5307,1 @@\n-    static void shuffleCastLong256VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastLong256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5373,2 +5312,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":34,"deletions":90,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1311,9 +1311,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(LongVector.SPECIES_512);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5268,56 +5262,1 @@\n-    static void maskCastLong512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong512VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong512VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong512VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong512VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong512VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastLong512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5328,2 +5267,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5335,23 +5276,1 @@\n-    static void shuffleCastLong512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong512VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong512VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastLong512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5362,13 +5281,4 @@\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong512VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5378,3 +5288,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong512VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastLong512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5383,3 +5294,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5389,0 +5305,1 @@\n+\n@@ -5390,1 +5307,1 @@\n-    static void shuffleCastLong512VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastLong512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5395,2 +5312,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":34,"deletions":112,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -1311,9 +1311,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(LongVector.SPECIES_64);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5268,1 +5262,1 @@\n-    static void maskCastLong64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n+    static void maskCastLong64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5273,2 +5267,4 @@\n-                var res = vmask.cast(LongVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5278,3 +5274,4 @@\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastLong64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastLong64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n@@ -5283,3 +5280,5 @@\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(DoubleVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5290,3 +5289,3 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastLong64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastLong64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5295,3 +5294,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5301,0 +5305,1 @@\n+\n@@ -5302,1 +5307,1 @@\n-    static void shuffleCastLong64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastLong64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5307,2 +5312,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1316,9 +1316,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(LongVector.SPECIES_MAX);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5272,0 +5266,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastLongMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastLongMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastLongMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastLongMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1314,9 +1314,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(ShortVector.SPECIES_128);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5409,56 +5403,1 @@\n-    static void maskCastShort128VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort128VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort128VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort128VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort128VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort128VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastShort128VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5469,2 +5408,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5476,23 +5417,1 @@\n-    static void shuffleCastShort128VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort128VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort128VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastShort128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5503,13 +5422,4 @@\n-                var res = vshuffle.cast(IntVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort128VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5519,3 +5429,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort128VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastShort128VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5524,3 +5435,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5530,0 +5446,1 @@\n+\n@@ -5531,1 +5448,1 @@\n-    static void shuffleCastShort128VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastShort128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5536,2 +5453,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":34,"deletions":112,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -1314,9 +1314,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(ShortVector.SPECIES_256);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5409,34 +5403,1 @@\n-    static void maskCastShort256VectorTestsByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort256VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort256VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort256VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n+    static void maskCastShort256VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5447,2 +5408,4 @@\n-                var res = vmask.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5454,12 +5417,1 @@\n-    static void shuffleCastShort256VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort256VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastShort256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5470,2 +5422,4 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5475,3 +5429,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort256VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastShort256VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5480,3 +5435,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5486,0 +5446,1 @@\n+\n@@ -5487,1 +5448,1 @@\n-    static void shuffleCastShort256VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastShort256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5492,2 +5453,7 @@\n-                var res = vshuffle.cast(FloatVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":34,"deletions":68,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1314,9 +1314,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(ShortVector.SPECIES_512);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5409,1 +5403,1 @@\n-    static void maskCastShort512VectorTestsByteTest(IntFunction<boolean[]> fa) {\n+    static void maskCastShort512VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5414,2 +5408,4 @@\n-                var res = vmask.cast(ByteVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5419,3 +5415,4 @@\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort512VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastShort512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n@@ -5424,3 +5421,5 @@\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5431,3 +5430,3 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort512VectorTestsByteTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastShort512VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5436,3 +5435,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ByteVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5442,0 +5446,1 @@\n+\n@@ -5443,1 +5448,1 @@\n-    static void shuffleCastShort512VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastShort512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5448,2 +5453,7 @@\n-                var res = vshuffle.cast(ShortVector.SPECIES_512);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1314,9 +1314,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(ShortVector.SPECIES_64);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5409,45 +5403,1 @@\n-    static void maskCastShort64VectorTestsShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort64VectorTestsIntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort64VectorTestsLongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort64VectorTestsFloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCastShort64VectorTestsDoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCastShort64VectorTestsTest(IntFunction<boolean[]> fa) {\n@@ -5458,2 +5408,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5465,23 +5417,1 @@\n-    static void shuffleCastShort64VectorTestsShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_64);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort64VectorTestsIntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort64VectorTestsLongTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCastShort64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5492,2 +5422,4 @@\n-                var res = vshuffle.cast(LongVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -5497,3 +5429,4 @@\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCastShort64VectorTestsFloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastShort64VectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -5502,3 +5435,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_128);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -5508,0 +5446,1 @@\n+\n@@ -5509,1 +5448,1 @@\n-    static void shuffleCastShort64VectorTestsDoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCastShort64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n@@ -5514,2 +5453,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_256);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":34,"deletions":90,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1319,9 +1319,3 @@\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-            m.cast(ShortVector.SPECIES_MAX);\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n@@ -5413,0 +5407,61 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskCastShortMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleCastShortMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCastShortMaxVectorTestsTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shuffleProvider\")\n+    static void shuffleIllegalCastShortMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -60,0 +60,3 @@\n+JAVAC=\/home\/jatinbha\/softwares\/jdk-17\/\/bin\/javac\n+JAVA=\/home\/jatinbha\/softwares\/jdk-17\/\/bin\/java\n+\n@@ -91,1 +94,0 @@\n-      sizeInBytes=1\n@@ -96,1 +98,0 @@\n-      sizeInBytes=2\n@@ -101,1 +102,0 @@\n-      sizeInBytes=4\n@@ -110,1 +110,0 @@\n-      sizeInBytes=8\n@@ -118,1 +117,0 @@\n-      sizeInBytes=4\n@@ -128,1 +126,0 @@\n-      sizeInBytes=8\n@@ -162,1 +159,0 @@\n-    numLanes=$((bits \/ (sizeInBytes * 8)))\n@@ -171,39 +167,0 @@\n-    bytecastbits=\"\"\n-    toBits=$(( numLanes * 8 ))\n-    castargs=\"\"\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidByteCast\"\n-       bytecastbits=$(( numLanes * 8 ))\n-    fi\n-    shortcastbits=\"\"\n-    toBits=$(( numLanes * 16 ))\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidShortCast\"\n-       shortcastbits=$(( numLanes * 16 ))\n-    fi\n-    intcastbits=\"\"\n-    toBits=$(( numLanes * 32 ))\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidIntegerCast\"\n-       intcastbits=$(( numLanes * 32 ))\n-    fi\n-    longcastbits=\"\"\n-    toBits=$(( numLanes * 64 ))\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidLongCast\"\n-       longcastbits=$(( numLanes * 64 ))\n-    fi\n-    floatcastbits=\"\"\n-    toBits=$(( numLanes * 32 ))\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidFloatCast\"\n-       floatcastbits=$(( numLanes * 32 ))\n-    fi\n-    doublecastbits=\"\"\n-    toBits=$(( numLanes * 64 ))\n-    if [[ $toBits -ge 64 ]] && [[ $toBits -le 512 ]] ; then\n-       castargs=\"$castargs -KvalidDoubleCast\"\n-       doublecastbits=$(( numLanes * 64 ))\n-    fi\n-    bitargs=\"$bitargs $castargs -Dbytecastbits=$bytecastbits -Dshortcastbits=$shortcastbits -Dintcastbits=$intcastbits -Dfloatcastbits=$floatcastbits -Ddoublecastbits=$doublecastbits -Dlongcastbits=$longcastbits\"\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-tests.sh","additions":3,"deletions":46,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -447,67 +447,0 @@\n-#if[!MaxBit]\n-#if[validByteCast]\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCast$vectorteststype$ByteTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ByteVector.SPECIES_$bytecastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validByteCast]\n-#if[validShortCast]\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCast$vectorteststype$ShortTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(ShortVector.SPECIES_$shortcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validShortCast]\n-#if[validIntegerCast]\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCast$vectorteststype$IntTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(IntVector.SPECIES_$intcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validIntegerCast]\n-#if[validLongCast]\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCast$vectorteststype$LongTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(LongVector.SPECIES_$longcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validLongCast]\n-#if[validFloatCast]\n-    @Test(dataProvider = \"maskProvider\")\n-    static void maskCast$vectorteststype$FloatTest(IntFunction<boolean[]> fa) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                var res = vmask.cast(FloatVector.SPECIES_$floatcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validFloatCast]\n-#if[validDoubleCast]\n@@ -515,1 +448,1 @@\n-    static void maskCast$vectorteststype$DoubleTest(IntFunction<boolean[]> fa) {\n+    static void maskCast$vectorteststype$Test(IntFunction<boolean[]> fa) {\n@@ -520,2 +453,4 @@\n-                var res = vmask.cast(DoubleVector.SPECIES_$doublecastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vmask.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -525,1 +460,0 @@\n-#end[validDoubleCast]\n@@ -527,1 +461,0 @@\n-#if[validByteCast]\n@@ -529,1 +462,1 @@\n-    static void shuffleCast$vectorteststype$ByteTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleCast$vectorteststype$Test(BiFunction<Integer,Integer,int[]> fa) {\n@@ -534,2 +467,4 @@\n-                var res = vshuffle.cast(ByteVector.SPECIES_$bytecastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < VALIDCASTSPECIES.length; j++) {\n+                    var res = vshuffle.cast(VALIDCASTSPECIES[j]);\n+                    assertArraysEquals(res.toArray(), a, i);\n+                }\n@@ -539,44 +474,4 @@\n-#end[validByteCast]\n-#if[validShortCast]\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCast$vectorteststype$ShortTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(ShortVector.SPECIES_$shortcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validShortCast]\n-#if[validIntegerCast]\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCast$vectorteststype$IntTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(IntVector.SPECIES_$intcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validIntegerCast]\n-#if[validLongCast]\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCast$vectorteststype$LongTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(LongVector.SPECIES_$longcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n-            }\n-        }\n-    }\n-#end[validLongCast]\n-#if[validFloatCast]\n-    @Test(dataProvider = \"shuffleProvider\")\n-    static void shuffleCast$vectorteststype$FloatTest(BiFunction<Integer,Integer,int[]> fa) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n+\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskIllegalCast$vectorteststype$Test(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n@@ -585,3 +480,8 @@\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                var res = vshuffle.cast(FloatVector.SPECIES_$floatcastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n+                var vmask = SPECIES.loadMask(a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vmask.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -591,2 +491,1 @@\n-#end[validFloatCast]\n-#if[validDoubleCast]\n+\n@@ -594,1 +493,1 @@\n-    static void shuffleCast$vectorteststype$DoubleTest(BiFunction<Integer,Integer,int[]> fa) {\n+    static void shuffleIllegalCast$vectorteststype$Test(BiFunction<Integer,Integer,int[]> fa) {\n@@ -599,2 +498,7 @@\n-                var res = vshuffle.cast(DoubleVector.SPECIES_$doublecastbits$);\n-                assertArraysEquals(res.toArray(), a, i);\n+                for (int j = 0 ; j < INVALIDCASTSPECIES.length; j++) {\n+                    try {\n+                        vshuffle.cast(INVALIDCASTSPECIES[j]);\n+                        Assert.fail();\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n@@ -604,2 +508,0 @@\n-#end[validDoubleCast]\n-#end[!MaxBit]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":31,"deletions":129,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -1576,15 +1576,3 @@\n-#if[!byte]\n-    @Test\n-    static void vectorMaskCastIllegalArgumentSmokeTest() {\n-        try {\n-            VectorMask<Byte> m = VectorMask.fromLong(ByteVector.SPECIES_512, -1);\n-#if[MaxBit]\n-            m.cast($abstractvectortype$.SPECIES_MAX);\n-#else[MaxBit]\n-            m.cast($abstractvectortype$.SPECIES_$bits$);\n-#end[MaxBit]\n-            Assert.fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n-    }\n-#end[!byte]\n+    static VectorSpecies [] VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n+    static VectorSpecies [] INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"}]}