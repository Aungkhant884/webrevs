{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-\n@@ -29,0 +28,1 @@\n+#include <windows.h>\n@@ -1399,0 +1399,9 @@\n+    OSVERSIONINFOEX info;\n+    ZeroMemory(&info, sizeof(OSVERSIONINFOEX));\n+    info.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\n+    GetVersionEx((LPOSVERSIONINFO) &info);\n+\n+    \/\/ add extra padded border only when Win OS version is 6+\n+    int extraPaddedBorderInsets = info.dwMajorVersion >= 6 ?\n+     ::GetSystemMetrics(SM_CXPADDEDBORDER) : 0;\n+\n@@ -1422,1 +1431,2 @@\n-                    ::GetSystemMetrics(SM_CXSIZEFRAME);\n+                    ::GetSystemMetrics(SM_CXSIZEFRAME) +\n+                     extraPaddedBorderInsets;\n@@ -1424,1 +1434,2 @@\n-                    ::GetSystemMetrics(SM_CYSIZEFRAME);\n+                    ::GetSystemMetrics(SM_CYSIZEFRAME) +\n+                     extraPaddedBorderInsets;\n@@ -1431,2 +1442,0 @@\n-\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265586\n+ * @key headful\n+ * @summary Tests the functionality of AWT frame.pack() on Windows.\n+ * @run main AwtFramePackTest\n+ * @requires (os.family == \"windows\")\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+public class AwtFramePackTest {\n+\n+    private static Frame frame;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws AWTException {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(300);\n+            robot.waitForIdle();\n+\n+            frame = new Frame();\n+            frame.setLayout(new BorderLayout());\n+\n+            Panel panel = new Panel();\n+            panel.add(new Button(\"Panel Button B1\"));\n+            panel.add(new Button(\"Panel Button B2\"));\n+            frame.add(panel, BorderLayout.CENTER);\n+\n+            MenuBar mb = new MenuBar();\n+            Menu m = new Menu(\"Menu\");\n+            mb.add(m);\n+            frame.setMenuBar(mb);\n+\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Dimension actualFrameSize = frame.getSize();\n+            Dimension expectedFrameSize = frame.getPreferredSize();\n+\n+            if (!actualFrameSize.equals(expectedFrameSize)) {\n+                System.out.println(\"Expected frame size: \"+ expectedFrameSize);\n+                System.out.println(\"Actual frame size: \"+ actualFrameSize);\n+                saveScreenCapture();\n+                throw new RuntimeException(\"Expected and Actual frame size\" +\n+                        \" are different. frame.pack() does not work!!\");\n+           }\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+\n+    \/\/ debugging purpose, saves screen capture when test fails\n+    private static void saveScreenCapture() {\n+        robot.delay(500);\n+        robot.waitForIdle();\n+        BufferedImage image = robot.createScreenCapture(\n+                new Rectangle(0, 0, 500, 500));\n+        try {\n+            ImageIO.write(image, \"png\", new File(\"Frame\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/AwtFramePackTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}