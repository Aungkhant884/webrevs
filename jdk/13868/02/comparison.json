{"files":[{"patch":"@@ -3258,1 +3258,2 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash(0), _exact_klass(nullptr) {\n+  DEBUG_ONLY(_initialized = true);\n@@ -3263,1 +3264,1 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash(0), _exact_klass(nullptr) {\n@@ -3267,0 +3268,1 @@\n+  initialize();\n@@ -3269,0 +3271,5 @@\n+void TypePtr::InterfaceSet::initialize() {\n+  compute_hash();\n+  compute_exact_klass();\n+  DEBUG_ONLY(_initialized = true;)\n+}\n@@ -3304,3 +3311,13 @@\n-int TypePtr::InterfaceSet::hash() const {\n-  if (_hash_computed) {\n-    return _hash;\n+bool TypePtr::InterfaceSet::eq(ciInstanceKlass* k, InterfaceHandling interface_handling) const {\n+  assert(k->is_loaded(), \"should be loaded\");\n+  assert((interface_handling == trust_interfaces) || !k->is_interface(), \"no interface expected\");\n+  GrowableArray<ciInstanceKlass *>* interfaces = k->as_instance_klass()->transitive_interfaces();\n+  if (_list.length() != interfaces->length()) {\n+    return false;\n+  }\n+  for (int i = 0; i < interfaces->length(); i++) {\n+    bool found = false;\n+    _list.find_sorted<ciKlass*, compare>(interfaces->at(i), found);\n+    if (!found) {\n+      return false;\n+    }\n@@ -3308,2 +3325,6 @@\n-  const_cast<InterfaceSet*>(this)->compute_hash();\n-  assert(_hash_computed, \"should be computed now\");\n+  return true;\n+}\n+\n+\n+int TypePtr::InterfaceSet::hash() const {\n+  assert(_initialized, \"must be\");\n@@ -3319,1 +3340,0 @@\n-  _hash_computed = 1;\n@@ -3327,1 +3347,1 @@\n-void TypePtr::InterfaceSet::dump(outputStream *st) const {\n+void TypePtr::InterfaceSet::dump(outputStream* st) const {\n@@ -3347,0 +3367,1 @@\n+#ifdef ASSERT\n@@ -3348,1 +3369,0 @@\n-#ifdef DEBUG\n@@ -3355,1 +3375,0 @@\n-#endif\n@@ -3357,0 +3376,1 @@\n+#endif\n@@ -3383,0 +3403,2 @@\n+  result.initialize();\n+#ifdef ASSERT\n@@ -3384,1 +3406,0 @@\n-#ifdef DEBUG\n@@ -3386,1 +3407,1 @@\n-    assert(result.contains(_list.at(i)), \"missing\");\n+    assert(result._list.contains(_list.at(i)), \"missing\");\n@@ -3389,1 +3410,1 @@\n-    assert(result.contains(other._list.at(i)), \"missing\");\n+    assert(result._list.contains(other._list.at(i)), \"missing\");\n@@ -3421,0 +3442,2 @@\n+  result.initialize();\n+#ifdef ASSERT\n@@ -3422,1 +3445,0 @@\n-#ifdef DEBUG\n@@ -3424,1 +3446,1 @@\n-    assert(!other._list.contains(_list.at(i)) || result.contains(_list.at(i)), \"missing\");\n+    assert(!other._list.contains(_list.at(i)) || result._list.contains(_list.at(i)), \"missing\");\n@@ -3427,1 +3449,1 @@\n-    assert(!_list.contains(other._list.at(i)) || result.contains(other._list.at(i)), \"missing\");\n+    assert(!_list.contains(other._list.at(i)) || result._list.contains(other._list.at(i)), \"missing\");\n@@ -3438,5 +3460,1 @@\n-  if (_exact_klass_computed) {\n-    return _exact_klass;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_exact_klass();\n-  assert(_exact_klass_computed, \"should be computed now\");\n+  assert(_initialized, \"must be\");\n@@ -3448,1 +3466,0 @@\n-    _exact_klass_computed = 1;\n@@ -3454,2 +3471,2 @@\n-    ciKlass* interface = _list.at(i);\n-    if (eq(interfaces(interface, false, true, false, trust_interfaces))) {\n+    ciInstanceKlass* interface = _list.at(i)->as_instance_klass();\n+    if (eq(interface, trust_interfaces)) {\n@@ -3457,1 +3474,1 @@\n-      res = _list.at(i);\n+      res = interface;\n@@ -3460,1 +3477,0 @@\n-  _exact_klass_computed = 1;\n@@ -3464,11 +3480,2 @@\n-bool TypePtr::InterfaceSet::is_loaded() const {\n-  if (_is_loaded_computed) {\n-    return _is_loaded;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_is_loaded();\n-  assert(_is_loaded_computed, \"should be computed now\");\n-  return _is_loaded;\n-}\n-\n-void TypePtr::InterfaceSet::compute_is_loaded() {\n-  _is_loaded_computed = 1;\n+#ifdef ASSERT\n+void TypePtr::InterfaceSet::verify_is_loaded() const {\n@@ -3477,4 +3484,1 @@\n-    if (!interface->is_loaded()) {\n-      _is_loaded = false;\n-      return;\n-    }\n+    assert(interface->is_loaded(), \"Interface not loaded\");\n@@ -3482,1 +3486,0 @@\n-  _is_loaded = true;\n@@ -3484,0 +3487,1 @@\n+#endif\n@@ -3496,0 +3500,5 @@\n+#ifdef ASSERT\n+  if (klass() != nullptr && klass()->is_loaded()) {\n+    interfaces.verify_is_loaded();\n+  }\n+#endif\n@@ -3988,3 +3997,1 @@\n-    ciKlass* k = _klass;\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n-    if (_interfaces.eq(interfaces)) {\n+    if (_interfaces.eq(_klass->as_instance_klass(), ignore_interfaces)) {\n@@ -4052,1 +4059,1 @@\n-      GrowableArray<ciInstanceKlass *> *k_interfaces = k->as_instance_klass()->transitive_interfaces();\n+      GrowableArray<ciInstanceKlass *>* k_interfaces = k->as_instance_klass()->transitive_interfaces();\n@@ -4396,2 +4403,0 @@\n-  InterfaceSet subtype_interfaces;\n-\n@@ -4591,5 +4596,2 @@\n-    ciKlass* k = ik;\n-    TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n-    assert(k == ik, \"\");\n-    if (interfaces.eq(_interfaces)) {\n-      Compile *C = Compile::current();\n+    if (_interfaces.eq(ik, ignore_interfaces)) {\n+      Compile* C = Compile::current();\n@@ -5602,2 +5604,1 @@\n-    ciKlass* k = _klass;\n-    if (_interfaces.eq(TypePtr::interfaces(k, true, false, true, ignore_interfaces))) {\n+    if (_interfaces.eq(_klass->as_instance_klass(), ignore_interfaces)) {\n@@ -5800,4 +5801,1 @@\n-        ciKlass* sub_k = sub;\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n-        assert(sub_k == sub, \"\");\n-        if (sub_interfaces.eq(_interfaces)) {\n+        if (_interfaces.eq(sub, ignore_interfaces)) {\n@@ -6050,4 +6048,1 @@\n-        ciKlass *sub_k = sub;\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n-        assert(sub_k == sub, \"\");\n-        if (sub_interfaces.eq(_interfaces)) {\n+        if (_interfaces.eq(sub, ignore_interfaces)) {\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":59,"deletions":64,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -887,6 +887,0 @@\n-    void raw_add(ciKlass* interface);\n-    void add(ciKlass* interface);\n-    void verify() const;\n-    uint _hash_computed:1;\n-    uint _exact_klass_computed:1;\n-    uint _is_loaded_computed:1;\n@@ -895,1 +889,6 @@\n-    bool _is_loaded;\n+    DEBUG_ONLY(bool _initialized;)\n+\n+    void initialize();\n+    void raw_add(ciKlass* interface);\n+    void add(ciKlass* interface);\n+    void verify() const NOT_DEBUG_RETURN;\n@@ -902,0 +901,1 @@\n+    bool eq(ciInstanceKlass* k, InterfaceHandling interface_handling) const;\n@@ -903,1 +903,1 @@\n-    void dump(outputStream *st) const;\n+    void dump(outputStream* st) const;\n@@ -915,1 +915,1 @@\n-    inline void operator delete( void* ptr ) {\n+    inline void operator delete(void* ptr) {\n@@ -919,3 +919,1 @@\n-    bool is_loaded() const;\n-\n-    static int compare(ciKlass* const &, ciKlass* const & k2);\n+    void verify_is_loaded() const NOT_DEBUG_RETURN;\n@@ -923,1 +921,1 @@\n-    void compute_is_loaded();\n+    static int compare(ciKlass* const& k1, ciKlass* const& k2);\n@@ -1205,1 +1203,1 @@\n-  virtual bool  is_loaded() const { return klass()->is_loaded() && _interfaces.is_loaded(); }\n+  virtual bool  is_loaded() const { return klass()->is_loaded(); }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -288,1 +288,1 @@\n-  template <typename K, int compare(const K&, const E&)> int find_sorted(const K& key, bool& found) {\n+  template <typename K, int compare(const K&, const E&)> int find_sorted(const K& key, bool& found) const {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}