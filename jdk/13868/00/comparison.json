{"files":[{"patch":"@@ -3258,1 +3258,1 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash_computed(0), _exact_klass_computed(0) {\n@@ -3263,1 +3263,1 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash_computed(0), _exact_klass_computed(0) {\n@@ -3319,1 +3319,0 @@\n-  _hash_computed = 1;\n@@ -3321,0 +3320,1 @@\n+  _hash_computed = 1;\n@@ -3327,1 +3327,1 @@\n-void TypePtr::InterfaceSet::dump(outputStream *st) const {\n+void TypePtr::InterfaceSet::dump(outputStream* st) const {\n@@ -3347,0 +3347,1 @@\n+#ifdef ASSERT\n@@ -3348,1 +3349,0 @@\n-#ifdef DEBUG\n@@ -3355,1 +3355,0 @@\n-#endif\n@@ -3357,0 +3356,1 @@\n+#endif\n@@ -3383,0 +3383,1 @@\n+#ifdef ASSERT\n@@ -3384,1 +3385,0 @@\n-#ifdef DEBUG\n@@ -3386,1 +3386,1 @@\n-    assert(result.contains(_list.at(i)), \"missing\");\n+    assert(result._list.contains(_list.at(i)), \"missing\");\n@@ -3389,1 +3389,1 @@\n-    assert(result.contains(other._list.at(i)), \"missing\");\n+    assert(result._list.contains(other._list.at(i)), \"missing\");\n@@ -3421,0 +3421,1 @@\n+#ifdef ASSERT\n@@ -3422,1 +3423,0 @@\n-#ifdef DEBUG\n@@ -3424,1 +3424,1 @@\n-    assert(!other._list.contains(_list.at(i)) || result.contains(_list.at(i)), \"missing\");\n+    assert(!other._list.contains(_list.at(i)) || result._list.contains(_list.at(i)), \"missing\");\n@@ -3427,1 +3427,1 @@\n-    assert(!_list.contains(other._list.at(i)) || result.contains(other._list.at(i)), \"missing\");\n+    assert(!_list.contains(other._list.at(i)) || result._list.contains(other._list.at(i)), \"missing\");\n@@ -3448,1 +3448,0 @@\n-    _exact_klass_computed = 1;\n@@ -3450,0 +3449,1 @@\n+    _exact_klass_computed = 1;\n@@ -3460,1 +3460,0 @@\n-  _exact_klass_computed = 1;\n@@ -3462,0 +3461,1 @@\n+  _exact_klass_computed = 1;\n@@ -3464,11 +3464,2 @@\n-bool TypePtr::InterfaceSet::is_loaded() const {\n-  if (_is_loaded_computed) {\n-    return _is_loaded;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_is_loaded();\n-  assert(_is_loaded_computed, \"should be computed now\");\n-  return _is_loaded;\n-}\n-\n-void TypePtr::InterfaceSet::compute_is_loaded() {\n-  _is_loaded_computed = 1;\n+#ifdef ASSERT\n+void TypePtr::InterfaceSet::verify_is_loaded() const {\n@@ -3477,4 +3468,1 @@\n-    if (!interface->is_loaded()) {\n-      _is_loaded = false;\n-      return;\n-    }\n+    assert(interface->is_loaded(), \"Interface not loaded\");\n@@ -3482,1 +3470,0 @@\n-  _is_loaded = true;\n@@ -3484,0 +3471,1 @@\n+#endif\n@@ -3496,0 +3484,5 @@\n+#ifdef ASSERT\n+  if (klass() != nullptr && klass()->is_loaded()) {\n+    interfaces.verify_is_loaded();\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -889,1 +889,1 @@\n-    void verify() const;\n+    void verify() const NOT_DEBUG_RETURN;\n@@ -892,1 +892,0 @@\n-    uint _is_loaded_computed:1;\n@@ -895,1 +894,0 @@\n-    bool _is_loaded;\n@@ -903,1 +901,1 @@\n-    void dump(outputStream *st) const;\n+    void dump(outputStream* st) const;\n@@ -915,1 +913,1 @@\n-    inline void operator delete( void* ptr ) {\n+    inline void operator delete(void* ptr) {\n@@ -919,1 +917,1 @@\n-    bool is_loaded() const;\n+    void verify_is_loaded() const NOT_DEBUG_RETURN;\n@@ -921,3 +919,1 @@\n-    static int compare(ciKlass* const &, ciKlass* const & k2);\n-\n-    void compute_is_loaded();\n+    static int compare(ciKlass* const &, ciKlass* const& k2);\n@@ -1205,1 +1201,1 @@\n-  virtual bool  is_loaded() const { return klass()->is_loaded() && _interfaces.is_loaded(); }\n+  virtual bool  is_loaded() const { return klass()->is_loaded(); }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"}]}