{"files":[{"patch":"@@ -3258,1 +3258,2 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash(0), _exact_klass(nullptr) {\n+  DEBUG_ONLY(_initialized = true);\n@@ -3261,1 +3262,1 @@\n-TypePtr::InterfaceSet::InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces)\n+TypePtr::InterfaceSet::InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces, bool init)\n@@ -3263,1 +3264,2 @@\n-          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+          _hash(0), _exact_klass(nullptr) {\n+  DEBUG_ONLY(_initialized = false);\n@@ -3267,0 +3269,3 @@\n+  if (init) {\n+    initialize();\n+  }\n@@ -3269,0 +3274,5 @@\n+void TypePtr::InterfaceSet::initialize() {\n+  compute_hash();\n+  compute_exact_klass();\n+  DEBUG_ONLY(_initialized = true;)\n+}\n@@ -3305,5 +3315,1 @@\n-  if (_hash_computed) {\n-    return _hash;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_hash();\n-  assert(_hash_computed, \"should be computed now\");\n+  assert(_initialized, \"must be\");\n@@ -3319,1 +3325,0 @@\n-  _hash_computed = 1;\n@@ -3327,1 +3332,1 @@\n-void TypePtr::InterfaceSet::dump(outputStream *st) const {\n+void TypePtr::InterfaceSet::dump(outputStream* st) const {\n@@ -3347,0 +3352,1 @@\n+#ifdef ASSERT\n@@ -3348,1 +3354,0 @@\n-#ifdef DEBUG\n@@ -3355,1 +3360,0 @@\n-#endif\n@@ -3357,0 +3361,1 @@\n+#endif\n@@ -3383,0 +3388,2 @@\n+  result.initialize();\n+#ifdef ASSERT\n@@ -3384,1 +3391,0 @@\n-#ifdef DEBUG\n@@ -3386,1 +3392,1 @@\n-    assert(result.contains(_list.at(i)), \"missing\");\n+    assert(result._list.contains(_list.at(i)), \"missing\");\n@@ -3389,1 +3395,1 @@\n-    assert(result.contains(other._list.at(i)), \"missing\");\n+    assert(result._list.contains(other._list.at(i)), \"missing\");\n@@ -3421,0 +3427,2 @@\n+  result.initialize();\n+#ifdef ASSERT\n@@ -3422,1 +3430,0 @@\n-#ifdef DEBUG\n@@ -3424,1 +3431,1 @@\n-    assert(!other._list.contains(_list.at(i)) || result.contains(_list.at(i)), \"missing\");\n+    assert(!other._list.contains(_list.at(i)) || result._list.contains(_list.at(i)), \"missing\");\n@@ -3427,1 +3434,1 @@\n-    assert(!_list.contains(other._list.at(i)) || result.contains(other._list.at(i)), \"missing\");\n+    assert(!_list.contains(other._list.at(i)) || result._list.contains(other._list.at(i)), \"missing\");\n@@ -3438,5 +3445,1 @@\n-  if (_exact_klass_computed) {\n-    return _exact_klass;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_exact_klass();\n-  assert(_exact_klass_computed, \"should be computed now\");\n+  assert(_initialized, \"must be\");\n@@ -3448,1 +3451,0 @@\n-    _exact_klass_computed = 1;\n@@ -3455,1 +3457,1 @@\n-    if (eq(interfaces(interface, false, true, false, trust_interfaces))) {\n+    if (eq(interfaces(interface, false, true, false, trust_interfaces, false))) {\n@@ -3460,1 +3462,0 @@\n-  _exact_klass_computed = 1;\n@@ -3464,11 +3465,2 @@\n-bool TypePtr::InterfaceSet::is_loaded() const {\n-  if (_is_loaded_computed) {\n-    return _is_loaded;\n-  }\n-  const_cast<InterfaceSet*>(this)->compute_is_loaded();\n-  assert(_is_loaded_computed, \"should be computed now\");\n-  return _is_loaded;\n-}\n-\n-void TypePtr::InterfaceSet::compute_is_loaded() {\n-  _is_loaded_computed = 1;\n+#ifdef ASSERT\n+void TypePtr::InterfaceSet::verify_is_loaded() const {\n@@ -3477,4 +3469,1 @@\n-    if (!interface->is_loaded()) {\n-      _is_loaded = false;\n-      return;\n-    }\n+    assert(interface->is_loaded(), \"Interface not loaded\");\n@@ -3482,1 +3471,0 @@\n-  _is_loaded = true;\n@@ -3484,0 +3472,1 @@\n+#endif\n@@ -3496,0 +3485,5 @@\n+#ifdef ASSERT\n+  if (klass() != nullptr && klass()->is_loaded()) {\n+    interfaces.verify_is_loaded();\n+  }\n+#endif\n@@ -3989,1 +3983,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces, false);\n@@ -4043,1 +4037,1 @@\n-TypePtr::InterfaceSet TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling) {\n+TypePtr::InterfaceSet TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling, bool init) {\n@@ -4053,1 +4047,1 @@\n-      InterfaceSet interfaces(k_interfaces);\n+      InterfaceSet interfaces(k_interfaces, init);\n@@ -4396,2 +4390,0 @@\n-  InterfaceSet subtype_interfaces;\n-\n@@ -4592,1 +4584,1 @@\n-    TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces, false);\n@@ -5603,1 +5595,1 @@\n-    if (_interfaces.eq(TypePtr::interfaces(k, true, false, true, ignore_interfaces))) {\n+    if (_interfaces.eq(TypePtr::interfaces(k, true, false, true, ignore_interfaces, false))) {\n@@ -5801,1 +5793,1 @@\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n+        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces, false);\n@@ -6051,1 +6043,1 @@\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n+        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces, false);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":43,"deletions":51,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -887,6 +887,0 @@\n-    void raw_add(ciKlass* interface);\n-    void add(ciKlass* interface);\n-    void verify() const;\n-    uint _hash_computed:1;\n-    uint _exact_klass_computed:1;\n-    uint _is_loaded_computed:1;\n@@ -895,1 +889,6 @@\n-    bool _is_loaded;\n+    DEBUG_ONLY(bool _initialized;)\n+\n+    void initialize();\n+    void raw_add(ciKlass* interface);\n+    void add(ciKlass* interface);\n+    void verify() const NOT_DEBUG_RETURN;\n@@ -900,1 +899,1 @@\n-    InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces);\n+    InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces, bool init = true);\n@@ -903,1 +902,1 @@\n-    void dump(outputStream *st) const;\n+    void dump(outputStream* st) const;\n@@ -915,1 +914,1 @@\n-    inline void operator delete( void* ptr ) {\n+    inline void operator delete(void* ptr) {\n@@ -919,3 +918,1 @@\n-    bool is_loaded() const;\n-\n-    static int compare(ciKlass* const &, ciKlass* const & k2);\n+    void verify_is_loaded() const NOT_DEBUG_RETURN;\n@@ -923,1 +920,1 @@\n-    void compute_is_loaded();\n+    static int compare(ciKlass* const &, ciKlass* const& k2);\n@@ -926,1 +923,1 @@\n-  static InterfaceSet interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling);\n+  static InterfaceSet interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling, bool init = true);\n@@ -1205,1 +1202,1 @@\n-  virtual bool  is_loaded() const { return klass()->is_loaded() && _interfaces.is_loaded(); }\n+  virtual bool  is_loaded() const { return klass()->is_loaded(); }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"}]}