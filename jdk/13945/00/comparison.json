{"files":[{"patch":"@@ -72,1 +72,1 @@\n-        \/\/ Each KeyStore.TrustedCertificateEntry have 2 attributes:\n+        \/\/ Each KeyStore.TrustedCertificateEntry has 2 attributes:\n@@ -83,0 +83,2 @@\n+        \/\/ trustSettings can be null, if no trust settings for the certificate\n+        \/\/ exist.\n@@ -343,3 +345,6 @@\n-                        tEntry.cert, Set.of(\n-                                new LocalAttr(KnownOIDs.ORACLE_TrustedKeyUsage.value(), tEntry.trustedKeyUsageValue),\n-                                new LocalAttr(\"trustSettings\", tEntry.trustSettings.toString())));\n+                        tEntry.cert, tEntry.trustSettings == null ?\n+                                Set.of(\n+                                        new LocalAttr(KnownOIDs.ORACLE_TrustedKeyUsage.value(), tEntry.trustedKeyUsageValue)) :\n+                                Set.of(\n+                                        new LocalAttr(KnownOIDs.ORACLE_TrustedKeyUsage.value(), tEntry.trustedKeyUsageValue),\n+                                        new LocalAttr(\"trustSettings\", tEntry.trustSettings.toString())));\n@@ -794,0 +799,2 @@\n+     *\n+     * If inputTrust is null, no explicit trust settings for the certificate are found\n@@ -807,10 +814,34 @@\n-            tce.trustSettings = new ArrayList<>();\n-            Map<String,String> tmpMap = new LinkedHashMap<>();\n-            for (int i = 0; i < inputTrust.size(); i++) {\n-                if (inputTrust.get(i) == null) {\n-                    tce.trustSettings.add(tmpMap);\n-                    if (i < inputTrust.size() - 1) {\n-                        \/\/ Prepare an empty map for the next trust setting.\n-                        \/\/ Do not just clear(), must be a new object.\n-                        \/\/ Only create if not at end of list.\n-                        tmpMap = new LinkedHashMap<>();\n+            \/\/ Check whether a certificate with same alias already exists and is the same\n+            \/\/ If yes, we can return here - the existing entry must have the same\n+            \/\/ properties and trust settings\n+            if (entries.contains(alias.toLowerCase())) {\n+                int uniqueVal = 1;\n+                String originalAlias = alias;\n+                var co = entries.get(alias.toLowerCase());\n+                while (co != null) {\n+                    if (co instanceof TrustedCertEntry tco) {\n+                        if (tco.cert.equals(tce.cert)) {\n+                            return;\n+                        }\n+                    }\n+                    alias = originalAlias + \" \" + uniqueVal++;\n+                    co = entries.get(alias.toLowerCase());\n+                }\n+            }\n+\n+            \/\/ inputTrust data is optional, so is tce.trustSettings\n+            if (inputTrust != null) {\n+                tce.trustSettings = new ArrayList<>();\n+                Map<String, String> tmpMap = new LinkedHashMap<>();\n+                for (int i = 0; i < inputTrust.size(); i++) {\n+                    if (inputTrust.get(i) == null) {\n+                        tce.trustSettings.add(tmpMap);\n+                        if (i < inputTrust.size() - 1) {\n+                            \/\/ Prepare an empty map for the next trust setting.\n+                            \/\/ Do not just clear(), must be a new object.\n+                            \/\/ Only create if not at end of list.\n+                            tmpMap = new LinkedHashMap<>();\n+                        }\n+                    } else {\n+                        tmpMap.put(inputTrust.get(i), inputTrust.get(i+1));\n+                        i++;\n@@ -818,3 +849,0 @@\n-                } else {\n-                    tmpMap.put(inputTrust.get(i), inputTrust.get(i+1));\n-                    i++;\n@@ -824,1 +852,2 @@\n-            boolean isSelfSigned;\n+            \/\/ Find out if cert is self signed and no root CA\n+            boolean isSelfSigned = false;\n@@ -827,1 +856,4 @@\n-                isSelfSigned = true;\n+                var usage = cert.getKeyUsage();\n+                if ((usage == null) || (!usage[5] && !usage[6])) {\n+                    isSelfSigned = true;\n+                }\n@@ -829,1 +861,1 @@\n-                isSelfSigned = false;\n+                \/\/ ignore silently, cert is not self signed then\n@@ -831,1 +863,2 @@\n-            if (tce.trustSettings.isEmpty()) {\n+\n+            if (tce.trustSettings == null) {\n@@ -833,1 +866,1 @@\n-                    \/\/ If a self-signed certificate has an empty trust settings,\n+                    \/\/ If a self-signed certificate has no trust settings,\n@@ -843,1 +876,4 @@\n-                for (var oneTrust : tce.trustSettings) {\n+                if (tce.trustSettings.isEmpty()) {\n+                    \/\/ a trust dictionary with no entries means full\/default trust\n+                    values.add(KnownOIDs.anyExtendedKeyUsage.value());\n+                } else for (var oneTrust : tce.trustSettings) {\n@@ -846,1 +882,2 @@\n-                    \/\/ 1 = kSecTrustSettingsResultTrustRoot, 2 = kSecTrustSettingsResultTrustAsRoot\n+                    \/\/ 1 = kSecTrustSettingsResultTrustRoot, 2 = kSecTrustSettingsResultTrustAsRoot,\n+                    \/\/ 3 = kSecTrustSettingsResultDeny\n@@ -848,1 +885,1 @@\n-                    \/\/ for self-signed certificates (see doc for SecTrustSettingsCopyTrustSettings).\n+                    \/\/ (see doc for SecTrustSettingsCopyTrustSettings).\n@@ -851,2 +888,8 @@\n-                    if ((result == null && isSelfSigned)\n-                            || \"1\".equals(result) || \"2\".equals(result)) {\n+\n+                    \/\/ If we find explicit distrust in some record, we ignore the certificate\n+                    if (\"3\".equals(result)) {\n+                        return;\n+                    }\n+\n+                    \/\/ Trust, if explicitly trusted\n+                    if (result == null || \"1\".equals(result) || \"2\".equals(result)) {\n@@ -870,0 +913,1 @@\n+\n@@ -876,8 +920,0 @@\n-            int uniqueVal = 1;\n-            String originalAlias = alias;\n-\n-            while (entries.containsKey(alias.toLowerCase())) {\n-                alias = originalAlias + \" \" + uniqueVal;\n-                uniqueVal++;\n-            }\n-\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":71,"deletions":35,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -384,0 +384,29 @@\n+\n+static void addTrustSettingsToInputTrust(JNIEnv *env, jmethodID jm_listAdd, CFArrayRef trustSettings, jobject inputTrust)\n+{\n+    CFIndex count = CFArrayGetCount(trustSettings);\n+    for (int i = 0; i < count; i++) {\n+        CFDictionaryRef oneTrust = (CFDictionaryRef) CFArrayGetValueAtIndex(trustSettings, i);\n+        CFIndex size = CFDictionaryGetCount(oneTrust);\n+        const void * keys [size];\n+        const void * values [size];\n+        CFDictionaryGetKeysAndValues(oneTrust, keys, values);\n+        for (int j = 0; j < size; j++) {\n+            NSString* s = [NSString stringWithFormat:@\"%@\", keys[j]];\n+            ADD(inputTrust, s);\n+            s = [NSString stringWithFormat:@\"%@\", values[j]];\n+            ADD(inputTrust, s);\n+        }\n+        SecPolicyRef certPolicy;\n+        certPolicy = (SecPolicyRef)CFDictionaryGetValue(oneTrust, kSecTrustSettingsPolicy);\n+        if (certPolicy != NULL) {\n+            CFDictionaryRef policyDict = SecPolicyCopyProperties(certPolicy);\n+            ADD(inputTrust, @\"SecPolicyOid\");\n+            NSString* s = [NSString stringWithFormat:@\"%@\", CFDictionaryGetValue(policyDict, @\"SecPolicyOid\")];\n+            ADD(inputTrust, s);\n+            CFRelease(policyDict);\n+        }\n+        ADDNULL(inputTrust);\n+    }\n+}\n+\n@@ -438,1 +467,3 @@\n-            \/\/ Only add certificates with trusted settings\n+            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust\n+            \/\/ When inputTrust object is NULL, no trust settings were found for the cert\n+            jobject inputTrust = NULL;\n@@ -440,4 +471,0 @@\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings)\n-                    == errSecItemNotFound) {\n-                continue;\n-            }\n@@ -445,3 +472,9 @@\n-            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust\n-            jobject inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-            if (inputTrust == NULL) {\n+            \/\/ Dump everything inside user trustSettings into inputTrust\n+            SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings);\n+            if (trustSettings != NULL) {\n+                inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                if (inputTrust == NULL) {\n+                    CFRelease(trustSettings);\n+                    goto errOut;\n+                }\n+                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n@@ -449,1 +482,0 @@\n-                goto errOut;\n@@ -451,14 +483,5 @@\n-\n-            \/\/ Dump everything inside trustSettings into inputTrust\n-            CFIndex count = CFArrayGetCount(trustSettings);\n-            for (int i = 0; i < count; i++) {\n-                CFDictionaryRef oneTrust = (CFDictionaryRef) CFArrayGetValueAtIndex(trustSettings, i);\n-                CFIndex size = CFDictionaryGetCount(oneTrust);\n-                const void * keys [size];\n-                const void * values [size];\n-                CFDictionaryGetKeysAndValues(oneTrust, keys, values);\n-                for (int j = 0; j < size; j++) {\n-                    NSString* s = [NSString stringWithFormat:@\"%@\", keys[j]];\n-                    ADD(inputTrust, s);\n-                    s = [NSString stringWithFormat:@\"%@\", values[j]];\n-                    ADD(inputTrust, s);\n+            \/\/ Dump everything inside admin trustSettings into inputTrust\n+            SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainAdmin, &trustSettings);\n+            if (trustSettings != NULL) {\n+                if (inputTrust == NULL) {\n+                    inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n@@ -466,8 +489,3 @@\n-                SecPolicyRef certPolicy;\n-                certPolicy = (SecPolicyRef)CFDictionaryGetValue(oneTrust, kSecTrustSettingsPolicy);\n-                if (certPolicy != NULL) {\n-                    CFDictionaryRef policyDict = SecPolicyCopyProperties(certPolicy);\n-                    ADD(inputTrust, @\"SecPolicyOid\");\n-                    NSString* s = [NSString stringWithFormat:@\"%@\", CFDictionaryGetValue(policyDict, @\"SecPolicyOid\")];\n-                    ADD(inputTrust, s);\n-                    CFRelease(policyDict);\n+                if (inputTrust == NULL) {\n+                    CFRelease(trustSettings);\n+                    goto errOut;\n@@ -475,1 +493,2 @@\n-                ADDNULL(inputTrust);\n+                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n+                CFRelease(trustSettings);\n@@ -477,1 +496,0 @@\n-            CFRelease(trustSettings);\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":51,"deletions":33,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.KeyStore;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8303465\n+ * @library \/test\/lib\n+ * @requires os.family == \"mac\"\n+ * @summary Check whether loading of certificates from MacOS Keychain correctly\n+ *          honors trust settings\n+ *\/\n+public class CheckMacOSKeyChainTrust {\n+    private static Set<String> trusted = new HashSet<>();\n+    private static Set<String> distrusted = new HashSet<>();\n+\n+    public static void main(String[] args) throws Throwable {\n+        loadUser();\n+        loadAdmin();\n+        System.out.println(\"Trusted Certs: \" + trusted);\n+        System.out.println(\"Distrusted Certs: \" + distrusted);\n+        KeyStore ks = KeyStore.getInstance(\"KEYCHAINSTORE\");\n+        ks.load(null, null);\n+        for (String alias : trusted) {\n+            if (!ks.containsAlias(alias)) {\n+                throw new RuntimeException(\"Not found: \" + alias);\n+            }\n+        }\n+        for (String alias : distrusted) {\n+            if (ks.containsAlias(alias)) {\n+                throw new RuntimeException(\"Found: \" + alias);\n+            }\n+        }\n+    }\n+\n+    private static void loadUser() throws Throwable {\n+        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\"));\n+    }\n+\n+    private static void loadAdmin() throws Throwable {\n+        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\", \"-d\"));\n+    }\n+\n+    private static void populate(OutputAnalyzer output) throws Throwable {\n+        if (output.getExitValue() != 0) {\n+            return; \/\/ No Trust Settings were found\n+        }\n+        String certName = null;\n+        boolean trustRootFound = false;\n+        boolean trustAsRootFound = false;\n+        boolean denyFound = false;\n+        boolean unspecifiedFound = false;\n+        for (String line : output.asLines()) {\n+            if (line.startsWith(\"Cert \")) {\n+                if (certName != null) {\n+                    if (!denyFound &&\n+                        !(unspecifiedFound && !(trustRootFound || trustAsRootFound)) &&\n+                        !distrusted.contains(certName)) {\n+                        trusted.add(certName);\n+                    } else {\n+                        distrusted.add(certName);\n+                        trusted.remove(certName);\n+                    }\n+                }\n+                certName = line.split(\":\", 2)[1].trim().toLowerCase();\n+                trustRootFound = false;\n+                trustAsRootFound = false;\n+                denyFound = false;\n+                unspecifiedFound = false;\n+            } else if (line.contains(\"kSecTrustSettingsResultTrustRoot\")) {\n+                trustRootFound = true;\n+            } else if (line.contains(\"kSecTrustSettingsResultTrustAsRoot\")) {\n+                trustAsRootFound = true;\n+            } else if (line.contains(\"kSecTrustSettingsResultDeny\")) {\n+                denyFound = true;\n+            } else if (line.contains(\"kSecTrustSettingsResultUnspecified\")) {\n+                unspecifiedFound = true;\n+            }\n+        }\n+        if (certName != null) {\n+            if (!denyFound &&\n+                !(unspecifiedFound && !(trustRootFound || trustAsRootFound)) &&\n+                !distrusted.contains(certName)) {\n+                trusted.add(certName);\n+            } else {\n+                distrusted.add(certName);\n+                trusted.remove(certName);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyStore\/CheckMacOSKeyChainTrust.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}