{"files":[{"patch":"@@ -39,2 +39,3 @@\n- * Quicksort such as mixed insertion sort, merging sort and counting\n- * sort, heap sort and LSD Radix sort, parallel merge sort.\n+ * Quicksort such as merging sort, sorting network, Radix sort, heap\n+ * sort, mixed (simple, pin, pair) insertion sort, counting sort and\n+ * parallel merge sort.\n@@ -61,1 +62,1 @@\n-    private static final int MAX_MIXED_INSERTION_SORT_SIZE = 65;\n+    private static final int MAX_MIXED_INSERTION_SORT_SIZE = 124;\n@@ -156,6 +157,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            int depth = getDepth(parallelism, size >> 12);\n-            int[] b = depth == 0 ? null : (int[]) tryAllocate(a, size);\n-            new Sorter(null, a, b, low, size, low, depth).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -220,1 +217,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -277,2 +274,2 @@\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH || isRandom)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5] && isRandom\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n@@ -597,4 +594,4 @@\n-        if (sorter == null || (b = (int[]) sorter.b) == null) {\n-            b = (int[]) tryAllocate(a, size);\n-\n-            if (b == null) {\n+        if (sorter != null && (b = (int[]) sorter.b) != null) {\n+            offset = sorter.offset;\n+        } else {\n+            if ((b = (int[]) tryAllocate(a, size)) == null) {\n@@ -603,2 +600,0 @@\n-        } else {\n-            offset = sorter.offset;\n@@ -870,4 +865,4 @@\n-            if (sorter == null || (b = (int[]) sorter.b) == null) {\n-                b = (int[]) tryAllocate(a, size);\n-\n-                if (b == null) {\n+            if (sorter != null && (b = (int[]) sorter.b) != null) {\n+                offset = sorter.offset;\n+            } else {\n+                if ((b = (int[]) tryAllocate(a, size)) == null) {\n@@ -876,2 +871,0 @@\n-            } else {\n-                offset = sorter.offset;\n@@ -1053,6 +1046,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            int depth = getDepth(parallelism, size >> 12);\n-            long[] b = depth == 0 ? null : (long[]) tryAllocate(a, size);\n-            new Sorter(null, a, b, low, size, low, depth).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -1117,1 +1106,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -1174,2 +1163,2 @@\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH || isRandom)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5] && isRandom\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n@@ -1494,4 +1483,4 @@\n-        if (sorter == null || (b = (long[]) sorter.b) == null) {\n-            b = (long[]) tryAllocate(a, size);\n-\n-            if (b == null) {\n+        if (sorter != null && (b = (long[]) sorter.b) != null) {\n+            offset = sorter.offset;\n+        } else {\n+            if ((b = (long[]) tryAllocate(a, size)) == null) {\n@@ -1500,2 +1489,0 @@\n-        } else {\n-            offset = sorter.offset;\n@@ -1787,4 +1774,4 @@\n-            if (sorter == null || (b = (long[]) sorter.b) == null) {\n-                b = (long[]) tryAllocate(a, size);\n-\n-                if (b == null) {\n+            if (sorter != null && (b = (long[]) sorter.b) != null) {\n+                offset = sorter.offset;\n+            } else {\n+                if ((b = (long[]) tryAllocate(a, size)) == null) {\n@@ -1793,2 +1780,0 @@\n-            } else {\n-                offset = sorter.offset;\n@@ -2093,1 +2078,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -2415,1 +2400,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -2734,6 +2719,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            int depth = getDepth(parallelism, size >> 12);\n-            float[] b = depth == 0 ? null : (float[]) tryAllocate(a, size);\n-            new Sorter(null, a, b, low, size, low, depth).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -2827,1 +2808,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -2884,2 +2865,2 @@\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH || isRandom)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5] && isRandom\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n@@ -3204,4 +3185,4 @@\n-        if (sorter == null || (b = (float[]) sorter.b) == null) {\n-            b = (float[]) tryAllocate(a, size);\n-\n-            if (b == null) {\n+        if (sorter != null && (b = (float[]) sorter.b) != null) {\n+            offset = sorter.offset;\n+        } else {\n+            if ((b = (float[]) tryAllocate(a, size)) == null) {\n@@ -3210,2 +3191,0 @@\n-        } else {\n-            offset = sorter.offset;\n@@ -3454,4 +3433,4 @@\n-            if (sorter == null || (b = (float[]) sorter.b) == null) {\n-                b = (float[]) tryAllocate(a, size);\n-\n-                if (b == null) {\n+            if (sorter != null && (b = (float[]) sorter.b) != null) {\n+                offset = sorter.offset;\n+            } else {\n+                if ((b = (float[]) tryAllocate(a, size)) == null) {\n@@ -3460,2 +3439,0 @@\n-            } else {\n-                offset = sorter.offset;\n@@ -3660,6 +3637,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            int depth = getDepth(parallelism, size >> 12);\n-            double[] b = depth == 0 ? null : (double[]) tryAllocate(a, size);\n-            new Sorter(null, a, b, low, size, low, depth).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -3753,1 +3726,1 @@\n-            int step = (size >> 3) * 3 + 3;\n+            int step = (size >> 2) + (size >> 3) + (size >> 8) + 1;\n@@ -3810,2 +3783,2 @@\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH || isRandom)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5] && isRandom\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n@@ -4130,4 +4103,4 @@\n-        if (sorter == null || (b = (double[]) sorter.b) == null) {\n-            b = (double[]) tryAllocate(a, size);\n-\n-            if (b == null) {\n+        if (sorter != null && (b = (double[]) sorter.b) != null) {\n+            offset = sorter.offset;\n+        } else {\n+            if ((b = (double[]) tryAllocate(a, size)) == null) {\n@@ -4136,2 +4109,0 @@\n-        } else {\n-            offset = sorter.offset;\n@@ -4434,4 +4405,4 @@\n-            if (sorter == null || (b = (double[]) sorter.b) == null) {\n-                b = (double[]) tryAllocate(a, size);\n-\n-                if (b == null) {\n+            if (sorter != null && (b = (double[]) sorter.b) != null) {\n+                offset = sorter.offset;\n+            } else {\n+                if ((b = (double[]) tryAllocate(a, size)) == null) {\n@@ -4440,2 +4411,0 @@\n-            } else {\n-                offset = sorter.offset;\n@@ -4611,0 +4580,13 @@\n+        private Sorter(Object a, int parallelism, int low, int size, int depth) {\n+            this.a = a;\n+            this.low = low;\n+            this.size = size;\n+            this.offset = low;\n+\n+            while ((parallelism >>= 1) > 0 && (size >>= 8) > 0) {\n+                depth -= 2;\n+            }\n+            this.b = depth == 0 ? null : tryAllocate(a, this.size);\n+            this.depth = b == null ? 0 : depth;\n+        }\n+\n@@ -4619,1 +4601,1 @@\n-            this.depth = b == null ? 0 : depth;\n+            this.depth = depth;\n@@ -4770,16 +4752,0 @@\n-    \/**\n-     * Calculates the negative double depth of parallel merging.\n-     *\n-     * @param parallelism the parallelism level\n-     * @param size the target size\n-     * @return the depth of parallel merging\n-     *\/\n-    private static int getDepth(int parallelism, int size) {\n-        int depth = 0;\n-\n-        while ((parallelism >>= 1) > 0 && (size >>= 2) > 0) {\n-            depth -= 2;\n-        }\n-        return depth;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":72,"deletions":106,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-    private static final int[] LONG_RUN_LENGTHS = {\n-        1, 3, 8, 21, 55, 100, 1_000, 10_000, 100_000 };\n+    private static final int[] LONG_RUN_LENGTHS =\n+        { 1, 3, 8, 21, 55, 100, 1_000, 10_000, 100_000 };\n@@ -52,2 +52,2 @@\n-    private static final int[] SHORT_RUN_LENGTHS = {\n-        1, 8, 55, 100, 10_000 };\n+    private static final int[] SHORT_RUN_LENGTHS =\n+        { 1, 8, 55, 100, 10_000 };\n@@ -56,2 +56,2 @@\n-    private static final TestRandom[] LONG_RUN_RANDOMS = {\n-        TestRandom.DEDA, TestRandom.BABA, TestRandom.C0FFEE };\n+    private static final TestRandom[] LONG_RUN_RANDOMS =\n+        { TestRandom.DEDA, TestRandom.BABA, TestRandom.C0FFEE };\n@@ -60,2 +60,2 @@\n-    private static final TestRandom[] SHORT_RUN_RANDOMS = {\n-        TestRandom.C0FFEE };\n+    private static final TestRandom[] SHORT_RUN_RANDOMS =\n+        { TestRandom.C0FFEE };\n","filename":"test\/jdk\/java\/util\/Arrays\/Sorting.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}