{"files":[{"patch":"@@ -263,10 +263,0 @@\n-            \/*\n-             * Tries radix sort on large random data.\n-             *\/\n-            if (size > MIN_RADIX_SORT_SIZE\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n-            }\n-\n@@ -290,0 +280,10 @@\n+            \/*\n+             * Try radix sort on large random data.\n+             *\/\n+            if (size > MIN_RADIX_SORT_SIZE\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n+            }\n+\n@@ -480,1 +480,1 @@\n-            for (int i; ++low < end; ) {\n+            for (int i; ++low < high; ) {\n@@ -488,0 +488,1 @@\n+\n@@ -492,6 +493,0 @@\n-             *\n-             * Pin insertion sort is extended simple insertion sort.\n-             * The main idea of this sort is to put elements larger\n-             * than an element called pin to the end of array (the\n-             * proper area for such elements). It avoids expensive\n-             * movements of these elements through the whole array.\n@@ -504,13 +499,7 @@\n-                if (ai < a[i - 1]) { \/\/ Element smaller than pin\n-\n-                    \/*\n-                     * Insert this element into sorted part.\n-                     *\/\n-                    a[i] = a[--i];\n-\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n-\n-                } else if (p > i && ai > pin) { \/\/ Element larger than pin\n+                \/*\n+                 * Put elements larger than an element called pin\n+                 * to the end of array (the proper area for them).\n+                 * It avoids expensive movements of these elements\n+                 * through the whole array.\n+                 *\/\n+                if (p > i && ai > pin) { \/\/ Element larger than pin\n@@ -524,1 +513,1 @@\n-                     * Swap it with large element.\n+                     * Swap it with larger element.\n@@ -530,0 +519,1 @@\n+                }\n@@ -531,7 +521,5 @@\n-                    \/*\n-                     * Insert smaller element into sorted part.\n-                     *\/\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n+                \/*\n+                 * Insert element into sorted part.\n+                 *\/\n+                while (ai < a[--i]) {\n+                    a[i + 1] = a[i];\n@@ -539,0 +527,1 @@\n+                a[i + 1] = ai;\n@@ -1157,10 +1146,0 @@\n-            \/*\n-             * Tries radix sort on large random data.\n-             *\/\n-            if (size > MIN_RADIX_SORT_SIZE\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n-            }\n-\n@@ -1184,0 +1163,10 @@\n+            \/*\n+             * Try radix sort on large random data.\n+             *\/\n+            if (size > MIN_RADIX_SORT_SIZE\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n+            }\n+\n@@ -1374,1 +1363,1 @@\n-            for (int i; ++low < end; ) {\n+            for (int i; ++low < high; ) {\n@@ -1382,0 +1371,1 @@\n+\n@@ -1386,6 +1376,0 @@\n-             *\n-             * Pin insertion sort is extended simple insertion sort.\n-             * The main idea of this sort is to put elements larger\n-             * than an element called pin to the end of array (the\n-             * proper area for such elements). It avoids expensive\n-             * movements of these elements through the whole array.\n@@ -1398,13 +1382,7 @@\n-                if (ai < a[i - 1]) { \/\/ Element smaller than pin\n-\n-                    \/*\n-                     * Insert this element into sorted part.\n-                     *\/\n-                    a[i] = a[--i];\n-\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n-\n-                } else if (p > i && ai > pin) { \/\/ Element larger than pin\n+                \/*\n+                 * Put elements larger than an element called pin\n+                 * to the end of array (the proper area for them).\n+                 * It avoids expensive movements of these elements\n+                 * through the whole array.\n+                 *\/\n+                if (p > i && ai > pin) { \/\/ Element larger than pin\n@@ -1418,1 +1396,1 @@\n-                     * Swap it with large element.\n+                     * Swap it with larger element.\n@@ -1424,0 +1402,1 @@\n+                }\n@@ -1425,7 +1404,5 @@\n-                    \/*\n-                     * Insert smaller element into sorted part.\n-                     *\/\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n+                \/*\n+                 * Insert element into sorted part.\n+                 *\/\n+                while (ai < a[--i]) {\n+                    a[i + 1] = a[i];\n@@ -1433,0 +1410,1 @@\n+                a[i + 1] = ai;\n@@ -2837,10 +2815,0 @@\n-            \/*\n-             * Tries radix sort on large random data.\n-             *\/\n-            if (size > MIN_RADIX_SORT_SIZE\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n-            }\n-\n@@ -2864,0 +2832,10 @@\n+            \/*\n+             * Try radix sort on large random data.\n+             *\/\n+            if (size > MIN_RADIX_SORT_SIZE\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n+            }\n+\n@@ -3054,1 +3032,1 @@\n-            for (int i; ++low < end; ) {\n+            for (int i; ++low < high; ) {\n@@ -3062,0 +3040,1 @@\n+\n@@ -3066,6 +3045,0 @@\n-             *\n-             * Pin insertion sort is extended simple insertion sort.\n-             * The main idea of this sort is to put elements larger\n-             * than an element called pin to the end of array (the\n-             * proper area for such elements). It avoids expensive\n-             * movements of these elements through the whole array.\n@@ -3078,13 +3051,7 @@\n-                if (ai < a[i - 1]) { \/\/ Element smaller than pin\n-\n-                    \/*\n-                     * Insert this element into sorted part.\n-                     *\/\n-                    a[i] = a[--i];\n-\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n-\n-                } else if (p > i && ai > pin) { \/\/ Element larger than pin\n+                \/*\n+                 * Put elements larger than an element called pin\n+                 * to the end of array (the proper area for them).\n+                 * It avoids expensive movements of these elements\n+                 * through the whole array.\n+                 *\/\n+                if (p > i && ai > pin) { \/\/ Element larger than pin\n@@ -3098,1 +3065,1 @@\n-                     * Swap it with large element.\n+                     * Swap it with larger element.\n@@ -3104,0 +3071,1 @@\n+                }\n@@ -3105,7 +3073,5 @@\n-                    \/*\n-                     * Insert smaller element into sorted part.\n-                     *\/\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n+                \/*\n+                 * Insert element into sorted part.\n+                 *\/\n+                while (ai < a[--i]) {\n+                    a[i + 1] = a[i];\n@@ -3113,0 +3079,1 @@\n+                a[i + 1] = ai;\n@@ -3763,10 +3730,0 @@\n-            \/*\n-             * Tries radix sort on large random data.\n-             *\/\n-            if (size > MIN_RADIX_SORT_SIZE\n-                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n-                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n-            }\n-\n@@ -3790,0 +3747,10 @@\n+            \/*\n+             * Try radix sort on large random data.\n+             *\/\n+            if (size > MIN_RADIX_SORT_SIZE\n+                    && (sorter == null || bits > MIN_RADIX_SORT_DEPTH)\n+                    && a[e1] < a[e2] && a[e2] < a[e4] && a[e4] < a[e5]\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n+            }\n+\n@@ -3980,1 +3947,1 @@\n-            for (int i; ++low < end; ) {\n+            for (int i; ++low < high; ) {\n@@ -3988,0 +3955,1 @@\n+\n@@ -3992,6 +3960,0 @@\n-             *\n-             * Pin insertion sort is extended simple insertion sort.\n-             * The main idea of this sort is to put elements larger\n-             * than an element called pin to the end of array (the\n-             * proper area for such elements). It avoids expensive\n-             * movements of these elements through the whole array.\n@@ -4004,13 +3966,7 @@\n-                if (ai < a[i - 1]) { \/\/ Element smaller than pin\n-\n-                    \/*\n-                     * Insert this element into sorted part.\n-                     *\/\n-                    a[i] = a[--i];\n-\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n-\n-                } else if (p > i && ai > pin) { \/\/ Element larger than pin\n+                \/*\n+                 * Put elements larger than an element called pin\n+                 * to the end of array (the proper area for them).\n+                 * It avoids expensive movements of these elements\n+                 * through the whole array.\n+                 *\/\n+                if (p > i && ai > pin) { \/\/ Element larger than pin\n@@ -4024,1 +3980,1 @@\n-                     * Swap it with large element.\n+                     * Swap it with larger element.\n@@ -4030,0 +3986,1 @@\n+                }\n@@ -4031,7 +3988,5 @@\n-                    \/*\n-                     * Insert smaller element into sorted part.\n-                     *\/\n-                    while (ai < a[--i]) {\n-                        a[i + 1] = a[i];\n-                    }\n-                    a[i + 1] = ai;\n+                \/*\n+                 * Insert element into sorted part.\n+                 *\/\n+                while (ai < a[--i]) {\n+                    a[i + 1] = a[i];\n@@ -4039,0 +3994,1 @@\n+                a[i + 1] = ai;\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":108,"deletions":152,"binary":false,"changes":260,"status":"modified"}]}