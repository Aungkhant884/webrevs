{"files":[{"patch":"@@ -115,1 +115,1 @@\n-     *      limited by max_heap \/ 128 or 2 GB max.\n+     *      limited by max_heap \/ 64 or 2 GB max.\n@@ -117,9 +117,2 @@\n-    private static final int MAX_4_BYTE_BUFFER_SIZE =\n-            (int) Math.min(Runtime.getRuntime().maxMemory() >> 7, Integer.MAX_VALUE);\n-\n-    \/**\n-     * Max size of additional buffer,\n-     *      limited by max_heap \/ 256 or 2 GB max.\n-     *\/\n-    private static final int MAX_8_BYTE_BUFFER_SIZE =\n-            (int) Math.min(Runtime.getRuntime().maxMemory() >> 8, Integer.MAX_VALUE);\n+    private static final int MAX_BUFFER_SIZE =\n+            (int) Math.min(Runtime.getRuntime().maxMemory() >> 6, Integer.MAX_VALUE);\n@@ -143,4 +136,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            new Sorter(a, tryIntAllocate(size), parallelism, low, size, 0).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -473,2 +464,2 @@\n-         * The index of the last element\n-         * for pin insertion sort, exclusive.\n+         * Split part into the golden ratio\n+         * for pin and pair insertion sorts.\n@@ -672,1 +663,1 @@\n-            } else if ((b = tryIntAllocate(high - low)) == null) {\n+            } else if ((b = (int[]) tryAllocate(a, high - low)) == null) {\n@@ -797,1 +788,1 @@\n-                merger.fork(dst, k + d, a1, mi1, hi1, a2, mi2, hi2);\n+                merger.fork(k + d, mi1, hi1, mi2, hi2);\n@@ -842,1 +833,1 @@\n-        } else if ((b = tryIntAllocate(size)) == null) {\n+        } else if ((b = (int[]) tryAllocate(a, size)) == null) {\n@@ -995,14 +986,0 @@\n-    \/**\n-     * Tries to allocate memory for additional buffer.\n-     *\n-     * @param size the size of additional buffer\n-     * @return {@code null} if requested size is too large, otherwise created buffer\n-     *\/\n-    private static int[] tryIntAllocate(int size) {\n-        try {\n-            return size < MAX_4_BYTE_BUFFER_SIZE ? new int[size] : null;\n-        } catch (OutOfMemoryError e) {\n-            return null;\n-        }\n-    }\n-\n@@ -1027,4 +1004,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            new Sorter(a, tryLongAllocate(size), parallelism, low, size, 0).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -1357,2 +1332,2 @@\n-         * The index of the last element\n-         * for pin insertion sort, exclusive.\n+         * Split part into the golden ratio\n+         * for pin and pair insertion sorts.\n@@ -1556,1 +1531,1 @@\n-            } else if ((b = tryLongAllocate(high - low)) == null) {\n+            } else if ((b = (long[]) tryAllocate(a, high - low)) == null) {\n@@ -1681,1 +1656,1 @@\n-                merger.fork(dst, k + d, a1, mi1, hi1, a2, mi2, hi2);\n+                merger.fork(k + d, mi1, hi1, mi2, hi2);\n@@ -1726,1 +1701,1 @@\n-        } else if ((b = tryLongAllocate(size)) == null) {\n+        } else if ((b = (long[]) tryAllocate(a, size)) == null) {\n@@ -1899,14 +1874,0 @@\n-    \/**\n-     * Tries to allocate memory for additional buffer.\n-     *\n-     * @param size the size of additional buffer\n-     * @return {@code null} if requested size is too large, otherwise created buffer\n-     *\/\n-    private static long[] tryLongAllocate(int size) {\n-        try {\n-            return size < MAX_8_BYTE_BUFFER_SIZE ? new long[size] : null;\n-        } catch (OutOfMemoryError e) {\n-            return null;\n-        }\n-    }\n-\n@@ -2731,4 +2692,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            new Sorter(a, tryFloatAllocate(size), parallelism, low, size, 0).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -3090,2 +3049,2 @@\n-         * The index of the last element\n-         * for pin insertion sort, exclusive.\n+         * Split part into the golden ratio\n+         * for pin and pair insertion sorts.\n@@ -3289,1 +3248,1 @@\n-            } else if ((b = tryFloatAllocate(high - low)) == null) {\n+            } else if ((b = (float[]) tryAllocate(a, high - low)) == null) {\n@@ -3414,1 +3373,1 @@\n-                merger.fork(dst, k + d, a1, mi1, hi1, a2, mi2, hi2);\n+                merger.fork(k + d, mi1, hi1, mi2, hi2);\n@@ -3459,1 +3418,1 @@\n-        } else if ((b = tryFloatAllocate(size)) == null) {\n+        } else if ((b = (float[]) tryAllocate(a, size)) == null) {\n@@ -3589,14 +3548,0 @@\n-    \/**\n-     * Tries to allocate memory for additional buffer.\n-     *\n-     * @param size the size of additional buffer\n-     * @return {@code null} if requested size is too large, otherwise created buffer\n-     *\/\n-    private static float[] tryFloatAllocate(int size) {\n-        try {\n-            return size < MAX_4_BYTE_BUFFER_SIZE ? new float[size] : null;\n-        } catch (OutOfMemoryError e) {\n-            return null;\n-        }\n-    }\n-\n@@ -3644,4 +3589,2 @@\n-        int size = high - low;\n-\n-        if (parallelism > 1 && size > MIN_PARALLEL_SORT_SIZE) {\n-            new Sorter(a, tryDoubleAllocate(size), parallelism, low, size, 0).invoke();\n+        if (parallelism > 1 && high - low > MIN_PARALLEL_SORT_SIZE) {\n+            new Sorter(a, parallelism, low, high - low, 0).invoke();\n@@ -4003,2 +3946,2 @@\n-         * The index of the last element\n-         * for pin insertion sort, exclusive.\n+         * Split part into the golden ratio\n+         * for pin and pair insertion sorts.\n@@ -4202,1 +4145,1 @@\n-            } else if ((b = tryDoubleAllocate(high - low)) == null) {\n+            } else if ((b = (double[]) tryAllocate(a, high - low)) == null) {\n@@ -4327,1 +4270,1 @@\n-                merger.fork(dst, k + d, a1, mi1, hi1, a2, mi2, hi2);\n+                merger.fork(k + d, mi1, hi1, mi2, hi2);\n@@ -4372,1 +4315,1 @@\n-        } else if ((b = tryDoubleAllocate(size)) == null) {\n+        } else if ((b = (double[]) tryAllocate(a, size)) == null) {\n@@ -4556,14 +4499,0 @@\n-    \/**\n-     * Tries to allocate memory for additional buffer.\n-     *\n-     * @param size the size of additional buffer\n-     * @return {@code null} if requested size is too large, otherwise created buffer\n-     *\/\n-    private static double[] tryDoubleAllocate(int size) {\n-        try {\n-            return size < MAX_8_BYTE_BUFFER_SIZE ? new double[size] : null;\n-        } catch (OutOfMemoryError e) {\n-            return null;\n-        }\n-    }\n-\n@@ -4576,0 +4505,1 @@\n+\n@@ -4582,1 +4512,1 @@\n-        private Sorter(Object a, Object b, int parallelism, int low, int size, int depth) {\n+        private Sorter(Object a, int parallelism, int low, int size, int depth) {\n@@ -4584,1 +4514,0 @@\n-            this.b = b;\n@@ -4589,1 +4518,1 @@\n-            while (b != null && (parallelism >>= 1) > 0 && (size >>= 8) > 0) {\n+            while ((parallelism >>= 1) > 0 && (size >>= 8) > 0) {\n@@ -4592,1 +4521,2 @@\n-            this.depth = depth;\n+            this.b = tryAllocate(a, this.size);\n+            this.depth = b == null ? 0 : depth;\n@@ -4658,0 +4588,1 @@\n+\n@@ -4697,1 +4628,1 @@\n-        private void fork(Object dst, int k, Object a1, int lo1, int hi1, Object a2, int lo2, int hi2) {\n+        private void fork(int k, int lo1, int hi1, int lo2, int hi2) {\n@@ -4702,0 +4633,30 @@\n+\n+    \/**\n+     * Tries to allocate additional buffer.\n+     *\n+     * @param a the given array\n+     * @param size the size of additional buffer\n+     * @return {@code null} if requested size is too large, otherwise created buffer\n+     *\/\n+    private static Object tryAllocate(Object a, int size) {\n+        try {\n+            if (size > MAX_BUFFER_SIZE) {\n+                return null;\n+            }\n+            if (a instanceof int[]) {\n+                return new int[size];\n+            }\n+            if (a instanceof long[]) {\n+                return new long[size];\n+            }\n+            if (a instanceof float[]) {\n+                return new float[size];\n+            }\n+            if (a instanceof double[]) {\n+                return new double[size];\n+            }\n+            throw new IllegalArgumentException(\"Unknown array: \" + a.getClass().getName());\n+        } catch (OutOfMemoryError e) {\n+            return null;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":68,"deletions":107,"binary":false,"changes":175,"status":"modified"}]}