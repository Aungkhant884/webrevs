{"files":[{"patch":"@@ -106,1 +106,1 @@\n-    private static final int MIN_PARALLEL_SORT_SIZE = 640;\n+    private static final int MIN_PARALLEL_SORT_SIZE = 1024;\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1313,0 +1313,1 @@\n+            @Override\n@@ -1321,0 +1322,1 @@\n+            @Override\n@@ -1334,0 +1336,1 @@\n+            @Override\n@@ -1347,0 +1350,1 @@\n+            @Override\n@@ -1360,0 +1364,1 @@\n+            @Override\n@@ -1373,0 +1378,1 @@\n+            @Override\n@@ -1386,0 +1392,1 @@\n+            @Override\n@@ -1404,0 +1411,1 @@\n+            @Override\n@@ -1421,0 +1429,1 @@\n+            @Override\n@@ -1429,0 +1438,1 @@\n+            @Override\n@@ -1443,0 +1453,1 @@\n+            @Override\n@@ -1453,0 +1464,1 @@\n+            @Override\n@@ -1461,0 +1473,1 @@\n+            @Override\n@@ -1469,0 +1482,1 @@\n+            @Override\n@@ -1496,0 +1510,1 @@\n+            @Override\n@@ -1509,0 +1524,1 @@\n+            @Override\n@@ -1517,0 +1533,1 @@\n+            @Override\n@@ -1525,0 +1542,1 @@\n+            @Override\n@@ -1531,0 +1549,1 @@\n+            @Override\n@@ -1541,0 +1560,1 @@\n+            @Override\n@@ -1555,0 +1575,1 @@\n+            @Override\n@@ -1563,0 +1584,1 @@\n+            @Override\n@@ -1571,0 +1593,1 @@\n+            @Override\n@@ -1582,0 +1605,1 @@\n+            @Override\n@@ -1589,0 +1613,1 @@\n+            @Override\n@@ -1598,0 +1623,1 @@\n+            @Override\n@@ -1607,0 +1633,1 @@\n+            @Override\n@@ -1640,0 +1667,1 @@\n+            @Override\n@@ -1650,0 +1678,1 @@\n+            @Override\n@@ -1665,0 +1694,1 @@\n+            @Override\n@@ -1700,0 +1730,1 @@\n+            @Override\n","filename":"test\/jdk\/java\/util\/Arrays\/Sorting.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,552 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.util;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Microbenchmark for Arrays.sort() and Arrays.parallelSort().\n+ *\n+ * @author Vladimir Yaroslavskiy\n+ *\n+ * @version 2022.06.14\n+ *\n+ * @since 20\n+ *\/\n+@Fork(1)\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 1, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 3, timeUnit = TimeUnit.SECONDS)\n+public class ArraysSort {\n+\n+    @Param({ \"100\", \"1000\", \"10000\", \"100000\", \"1000000\" })\n+    int size;\n+\n+    Random random;\n+\n+    @Setup(Level.Iteration)\n+    public void start() {\n+        random = new Random(0x777);\n+    }\n+\n+    public static class Int extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        int[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(int[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = random.nextInt();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(int[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = i % 7;\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(int[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (i * 5) % a.length;\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(int[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = random.nextInt(6) > 0 ? (j += 2) : (k += 2);\n+                    }\n+                }\n+            };\n+\n+            abstract void build(int[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new int[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Long extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        long[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(long[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = random.nextLong();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(long[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = i % 7;\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(long[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (i * 5L) % a.length;\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(long[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = random.nextInt(6) > 0 ? (j += 2) : (k += 2);\n+                    }\n+                }\n+            };\n+\n+            abstract void build(long[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new long[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Byte extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        byte[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(byte[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (byte) random.nextInt();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(byte[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (byte) (i % 7);\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(byte[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (byte) ((i * 5) % a.length);\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(byte[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = (byte) (random.nextInt(6) > 0 ? (j += 2) : (k += 2));\n+                    }\n+                }\n+            };\n+\n+            abstract void build(byte[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new byte[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Char extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        char[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(char[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (char) random.nextInt();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(char[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (char) (i % 7);\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(char[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (char) ((i * 5) % a.length);\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(char[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = (char) (random.nextInt(6) > 0 ? (j += 2) : (k += 2));\n+                    }\n+                }\n+            };\n+\n+            abstract void build(char[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new char[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Short extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        short[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(short[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (short) random.nextInt();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(short[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (short) (i % 7);\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(short[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (short) ((i * 5) % a.length);\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(short[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = (short) (random.nextInt(6) > 0 ? (j += 2) : (k += 2));\n+                    }\n+                }\n+            };\n+\n+            abstract void build(short[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new short[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Float extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        float[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(float[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = random.nextFloat();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(float[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = i % 7;\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(float[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (i * 5) % a.length;\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(float[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = random.nextInt(6) > 0 ? (j += 2) : (k += 2);\n+                    }\n+                }\n+            };\n+\n+            abstract void build(float[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new float[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+\n+    public static class Double extends ArraysSort {\n+\n+        @Param\n+        private Type type;\n+\n+        double[] gold;\n+\n+        public enum Type {\n+\n+            RANDOM {\n+                @Override\n+                void build(double[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = random.nextDouble();\n+                    }\n+                }\n+            },\n+\n+            REPEATED {\n+                @Override\n+                void build(double[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = i % 7;\n+                    }\n+                }\n+            },\n+\n+            STAGGER {\n+                @Override\n+                void build(double[] a, Random random) {\n+                    for (int i = 0; i < a.length; ++i) {\n+                        a[i] = (i * 5) % a.length;\n+                    }\n+                }\n+            },\n+\n+            SHUFFLE {\n+                @Override\n+                void build(double[] a, Random random) {\n+                    for (int i = 0, j = 0, k = 1; i < a.length; ++i) {\n+                        a[i] = random.nextInt(6) > 0 ? (j += 2) : (k += 2);\n+                    }\n+                }\n+            };\n+\n+            abstract void build(double[] a, Random random);\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            gold = new double[size];\n+        }\n+\n+        @Setup(Level.Invocation)\n+        public void init() {\n+            type.build(gold, random);\n+        }\n+\n+        @Benchmark\n+        public void testSort() {\n+            Arrays.sort(gold);\n+        }\n+\n+        @Benchmark\n+        public void testParallelSort() {\n+            Arrays.parallelSort(gold);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysSort.java","additions":552,"deletions":0,"binary":false,"changes":552,"status":"added"}]}