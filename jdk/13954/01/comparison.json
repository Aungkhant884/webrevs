{"files":[{"patch":"@@ -132,0 +132,21 @@\n+    \/**\n+     * {@return a composed symbol lookup that returns result of finding the symbol with this lookup if found, otherwise returns the result of finding the symbol with the other lookup.}\n+     *\n+     * @apiNote This method could be used to chain multiple symbol lookups together, e.g. so that symbols could\n+     * be retrieved, in order, from multiple libraries:\n+     * {@snippet lang = java:\n+     * var lookup = SymbolLookup.libraryLookup(\"foo\", arena)\n+     *         .or(SymbolLookup.libraryLookup(\"bar\", arena))\n+     *         .or(SymbolLookup.loaderLookup());\n+     *}\n+     * The above code creates a symbol lookup that first searches for symbols in the \"foo\" library. If no symbol is found\n+     * in \"foo\" then \"bar\" is searched. Finally, if a symbol is not found in neither \"foo\" nor \"bar\", the {@linkplain\n+     * SymbolLookup#loaderLookup() loader lookup} is used.\n+     *\n+     * @param other the symbol lookup that should be used to look for symbols not found in this lookup.\n+     *\/\n+    default SymbolLookup or(SymbolLookup other) {\n+        Objects.requireNonNull(other);\n+        return name -> find(name).or(() -> other.find(name));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.*;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.testng.annotations.*;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @run testng CompositeLookupTest\n+ *\/\n+public class CompositeLookupTest {\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void testLookups(SymbolLookup lookup, List<Result> results) {\n+        for (Result result : results) {\n+            switch (result) {\n+                case Success(String name, long expectedLookupId) -> {\n+                    Optional<MemorySegment> symbol = lookup.find(name);\n+                    assertTrue(symbol.isPresent());\n+                    assertEquals(symbol.get().address(), expectedLookupId);\n+                }\n+                case Failure(String name) -> {\n+                    Optional<MemorySegment> symbol = lookup.find(name);\n+                    assertFalse(symbol.isPresent());\n+                }\n+            }\n+        }\n+    }\n+\n+    static class TestLookup implements SymbolLookup {\n+\n+        private Set<String> symbols;\n+        private long id;\n+\n+        public TestLookup(long id, String... symbols) {\n+            this.id = id;\n+            this.symbols = Set.of(symbols);\n+        }\n+\n+        @Override\n+        public Optional<MemorySegment> find(String name) {\n+            return symbols.contains(name) ?\n+                    Optional.of(MemorySegment.ofAddress(id)) : Optional.empty();\n+        }\n+    }\n+\n+    sealed interface Result { }\n+    record Success(String name, long expectedLookupId) implements Result { }\n+    record Failure(String name) implements Result { }\n+\n+    @DataProvider(name = \"testCases\")\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+                {\n+                    new TestLookup(1, \"a\", \"b\", \"c\")\n+                            .or(new TestLookup(2,\"d\", \"e\", \"f\"))\n+                            .or(new TestLookup(3,\"g\", \"h\", \"i\")),\n+                    List.of(\n+                            new Success(\"a\", 1),\n+                            new Success(\"b\", 1),\n+                            new Success(\"c\", 1),\n+                            new Success(\"d\", 2),\n+                            new Success(\"e\", 2),\n+                            new Success(\"f\", 2),\n+                            new Success(\"g\", 3),\n+                            new Success(\"h\", 3),\n+                            new Success(\"i\", 3),\n+                            new Failure(\"j\")\n+                    )\n+                },\n+                {\n+                        new TestLookup(1, \"a\", \"b\", \"c\")\n+                                .or(new TestLookup(2,\"a\", \"b\", \"c\"))\n+                                .or(new TestLookup(3,\"a\", \"b\", \"c\")),\n+                        List.of(\n+                                new Success(\"a\", 1),\n+                                new Success(\"b\", 1),\n+                                new Success(\"c\", 1),\n+                                new Failure(\"d\")\n+                        )\n+                },\n+                {\n+                        new TestLookup(1 )\n+                                .or(new TestLookup(2))\n+                                .or(new TestLookup(3,\"a\", \"b\", \"c\")),\n+                        List.of(\n+                                new Success(\"a\", 3),\n+                                new Success(\"b\", 3),\n+                                new Success(\"c\", 3),\n+                                new Failure(\"d\")\n+                        )\n+                },\n+                {\n+                        new TestLookup(1, \"a\", \"b\", \"c\")\n+                                .or(new TestLookup(2,\"d\")\n+                                        .or(new TestLookup(3,\"e\"))\n+                                        .or(new TestLookup(4,\"f\")))\n+                                .or(new TestLookup(5,\"g\")\n+                                        .or(new TestLookup(6,\"h\"))\n+                                        .or(new TestLookup(7,\"i\"))),\n+                        List.of(\n+                                new Success(\"a\", 1),\n+                                new Success(\"b\", 1),\n+                                new Success(\"c\", 1),\n+                                new Success(\"d\", 2),\n+                                new Success(\"e\", 3),\n+                                new Success(\"f\", 4),\n+                                new Success(\"g\", 5),\n+                                new Success(\"h\", 6),\n+                                new Success(\"i\", 7),\n+                                new Failure(\"j\")\n+                        )\n+                },\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/CompositeLookupTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}