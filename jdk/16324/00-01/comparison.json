{"files":[{"patch":"@@ -48,1 +48,1 @@\n-    private static final String err1 =\n+    private static final String ERR1 =\n@@ -50,1 +50,1 @@\n-    private static final String err2 =\n+    private static final String ERR2 =\n@@ -53,1 +53,2 @@\n-    \/\/ Check that some valid patterns do not throw an exception\n+    \/\/ Check that some valid patterns do not throw an exception. Check\n+    \/\/ them against the expected values they should be formatted as.\n@@ -56,3 +57,6 @@\n-    public void validPatternsTest(String pattern) {\n-        assertDoesNotThrow( ()-> new ChoiceFormat(pattern),\n-                \"Valid pattern should not have thrown an exception\");\n+    public void validPatternsTest(String pattern, String[] expectedValues) {\n+        var fmt = new ChoiceFormat(pattern);\n+        for (int i=1; i<=expectedValues.length; i++) {\n+            assertEquals(expectedValues[i-1], fmt.format(i),\n+                    String.format(\"ChoiceFormat formatted %s incorrectly:\", i));\n+        }\n@@ -63,9 +67,16 @@\n-    private static String[] validPatternsTest() {\n-        return new String[] {\n-                \"1#foo|2#bar|3#\", \/\/ Multi pattern with trailing empty string Format\n-                \"1#foo|2#foo|\", \/\/ Multi patten with trailing '|'\n-                \"1#foo|2#bar>\", \/\/ Using a '>' (not a Relation) within a Format\n-                \"1#foo|2#bar\", \/\/ Standard Multi Pattern\n-                \"1#foo|1<baz\", \/\/ Same numerical value Limits, different Relations\n-                \"1#foo\", \/\/ Standard Single Pattern\n-                \"1#\", \/\/ Single pattern with empty string Format\n+    private static Arguments[] validPatternsTest() {\n+        return new Arguments[] {\n+                \/\/ Multi pattern with trailing empty string Format\n+                arguments(\"1#foo|2#bar|3#\", new String[]{\"foo\", \"bar\", \"\"}),\n+                \/\/ Multi patten with trailing '|'\n+                arguments(\"1#foo|2#bar|\", new String[]{\"foo\", \"bar\"}),\n+                \/\/ Using a '>' (not a Relation) within a Format\n+                arguments(\"1#foo|2#bar>\", new String[]{\"foo\", \"bar>\"}),\n+                \/\/ Standard Multi Pattern\n+                arguments(\"1#foo|2#bar\", new String[]{\"foo\", \"bar\"}),\n+                \/\/ Same numerical value Limits, different Relations\n+                arguments(\"1#foo|1<baz\", new String[]{\"foo\", \"baz\"}),\n+                \/\/ Standard Single Pattern\n+                arguments(\"1#foo\", new String[]{\"foo\"}),\n+                \/\/ Single pattern with empty string Format\n+                arguments(\"1#\", new String[]{\"\"})\n@@ -89,8 +100,8 @@\n-                arguments(\"#foo\", err1), \/\/ No Limit\n-                arguments(\"0#foo|#|1#bar\", err1), \/\/ Missing Relation in SubPattern\n-                arguments(\"#|\", err1), \/\/ Missing Limit\n-                arguments(\"##|\", err1), \/\/ Double Relations\n-                arguments(\"0#foo1#\", err1), \/\/ SubPattern not separated by '|'\n-                arguments(\"0#foo#\", err1), \/\/ Using a Relation in a format\n-                arguments(\"0#test|#\", err1), \/\/ SubPattern missing Limit\n-                arguments(\"0#foo|3#bar|1#baz\", err2), \/\/ Non-ascending Limits\n+                arguments(\"#foo\", ERR1), \/\/ No Limit\n+                arguments(\"0#foo|#|1#bar\", ERR1), \/\/ Missing Relation in SubPattern\n+                arguments(\"#|\", ERR1), \/\/ Missing Limit\n+                arguments(\"##|\", ERR1), \/\/ Double Relations\n+                arguments(\"0#foo1#\", ERR1), \/\/ SubPattern not separated by '|'\n+                arguments(\"0#foo#\", ERR1), \/\/ Using a Relation in a format\n+                arguments(\"0#test|#\", ERR1), \/\/ SubPattern missing Limit\n+                arguments(\"0#foo|3#bar|1#baz\", ERR2), \/\/ Non-ascending Limits\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/PatternsTest.java","additions":34,"deletions":23,"binary":false,"changes":57,"status":"modified"}]}