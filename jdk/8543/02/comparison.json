{"files":[{"patch":"@@ -172,1 +172,1 @@\n-        List<? extends Element> elements = (List<? extends Element>) classMap.get(typeElement);\n+        List<? extends Element> elements = classMap.get(typeElement);\n@@ -178,6 +178,1 @@\n-                List<Element> inPkg = map.get(pkg);\n-                if (inPkg == null) {\n-                    inPkg = new ArrayList<>();\n-                    map.put(pkg, inPkg);\n-                }\n-                inPkg.add(e);\n+                map.computeIfAbsent(pkg, k -> new ArrayList<>()).add(e);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n@@ -80,2 +79,2 @@\n-            case MODULE:\n-                ModuleElement mdle = (ModuleElement)element;\n+            case MODULE -> {\n+                ModuleElement mdle = (ModuleElement) element;\n@@ -84,3 +83,4 @@\n-                break;\n-            case PACKAGE:\n-                PackageElement pkg = (PackageElement)element;\n+            }\n+\n+            case PACKAGE -> {\n+                PackageElement pkg = (PackageElement) element;\n@@ -93,3 +93,3 @@\n-                break;\n-            default:\n-                throw new AssertionError(\"unsupported element \" + element);\n+            }\n+\n+            default -> throw new AssertionError(\"unsupported element \" + element);\n@@ -113,11 +113,5 @@\n-            DocPath path = null;\n-            switch (this.element.getKind()) {\n-                case MODULE:\n-                    path = DocPaths.forModule((ModuleElement)this.element);\n-                    break;\n-                case PACKAGE:\n-                    path = configuration.docPaths.forPackage((PackageElement)this.element);\n-                    break;\n-                default:\n-                    throw new AssertionError(\"unknown kind:\" + this.element.getKind());\n-            }\n+            DocPath path = switch (this.element.getKind()) {\n+                case MODULE -> DocPaths.forModule((ModuleElement) this.element);\n+                case PACKAGE -> configuration.docPaths.forPackage((PackageElement) this.element);\n+                default -> throw new AssertionError(\"unknown kind:\" + this.element.getKind());\n+            };\n@@ -131,1 +125,1 @@\n-        List<DocPath> stylesheets = new ArrayList<DocPath>();\n+        var stylesheets = new ArrayList<DocPath>();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandlerImpl.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2325,1 +2325,1 @@\n-                        ((TypeElement) forWhat.getEnclosingElement()).getSimpleName();\n+                        forWhat.getEnclosingElement().getSimpleName();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-            \/\/ does subinterfacing as side-effect\n+            \/\/ does subinterfacing as a side-effect\n@@ -224,1 +224,1 @@\n-                SimpleTypeVisitor9<Void, VariableElement> stv = new SimpleTypeVisitor9<Void, VariableElement>() {\n+                var stv = new SimpleTypeVisitor9<Void, VariableElement>() {\n@@ -235,0 +235,1 @@\n+\n@@ -255,1 +256,1 @@\n-                SimpleTypeVisitor9<Void, ExecutableElement> stv = new SimpleTypeVisitor9<Void, ExecutableElement>() {\n+                var stv = new SimpleTypeVisitor9<Void, ExecutableElement>() {\n@@ -388,1 +389,1 @@\n-            SimpleTypeVisitor9<Void, ExecutableElement> stv = new SimpleTypeVisitor9<Void, ExecutableElement>() {\n+            var stv = new SimpleTypeVisitor9<Void, ExecutableElement>() {\n@@ -421,6 +422,1 @@\n-        List<T> list = map.get(element);\n-        if (list == null) {\n-            list = new ArrayList<>();\n-            map.put(element, list);\n-        }\n-        return list;\n+        return map.computeIfAbsent(element, k -> new ArrayList<>());\n@@ -452,3 +448,3 @@\n-        TypeElement entry = (utils.isField((Element) ref)\n-                || utils.isConstructor((Element) ref)\n-                || utils.isMethod((Element) ref))\n+        TypeElement entry = (utils.isField(ref)\n+                || utils.isConstructor(ref)\n+                || utils.isMethod(ref))\n@@ -486,2 +482,1 @@\n-        SimpleElementVisitor14<Void, Void> elementVisitor\n-                = new SimpleElementVisitor14<Void, Void>() {\n+        var elementVisitor = new SimpleElementVisitor14<Void, Void>() {\n@@ -489,5 +484,5 @@\n-                    private void addParameters(TypeParameterElement e) {\n-                        for (TypeMirror type : utils.getBounds(e)) {\n-                            addTypeParameterToMap(map, type, holder);\n-                        }\n-                    }\n+            private void addParameters(TypeParameterElement e) {\n+                for (TypeMirror type : utils.getBounds(e)) {\n+                    addTypeParameterToMap(map, type, holder);\n+                }\n+            }\n@@ -495,7 +490,7 @@\n-                    @Override\n-                    public Void visitType(TypeElement e, Void p) {\n-                        for (TypeParameterElement param : e.getTypeParameters()) {\n-                            addParameters(param);\n-                        }\n-                        return null;\n-                    }\n+            @Override\n+            public Void visitType(TypeElement e, Void p) {\n+                for (TypeParameterElement param : e.getTypeParameters()) {\n+                    addParameters(param);\n+                }\n+                return null;\n+            }\n@@ -503,7 +498,7 @@\n-                    @Override\n-                    public Void visitExecutable(ExecutableElement e, Void p) {\n-                        for (TypeParameterElement param : e.getTypeParameters()) {\n-                            addParameters(param);\n-                        }\n-                        return null;\n-                    }\n+            @Override\n+            public Void visitExecutable(ExecutableElement e, Void p) {\n+                for (TypeParameterElement param : e.getTypeParameters()) {\n+                    addParameters(param);\n+                }\n+                return null;\n+            }\n@@ -511,5 +506,5 @@\n-                    @Override\n-                    protected Void defaultAction(Element e, Void p) {\n-                        mapTypeParameters(map, e.asType(), holder);\n-                        return null;\n-                    }\n+            @Override\n+            protected Void defaultAction(Element e, Void p) {\n+                mapTypeParameters(map, e.asType(), holder);\n+                return null;\n+            }\n@@ -517,6 +512,6 @@\n-                    @Override\n-                    public Void visitTypeParameter(TypeParameterElement e, Void p) {\n-                        addParameters(e);\n-                        return null;\n-                    }\n-                };\n+            @Override\n+            public Void visitTypeParameter(TypeParameterElement e, Void p) {\n+                addParameters(e);\n+                return null;\n+            }\n+        };\n@@ -529,1 +524,1 @@\n-        SimpleTypeVisitor9<Void, Void> tv = new SimpleTypeVisitor9<Void, Void>() {\n+        var tv = new SimpleTypeVisitor9<Void, Void>() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassUseMapper.java","additions":41,"deletions":46,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        ArrayList<String> results = new ArrayList<>();\n+        var results = new ArrayList<String>();\n@@ -81,1 +81,1 @@\n-        ((ArrayList)results).trimToSize();\n+        results.trimToSize();\n@@ -86,2 +86,1 @@\n-     * Get the current class for a meta tag keyword, as the first\n-     * and only element of an array list.\n+     * Get the current class for a meta tag keyword, as a singleton list.\n@@ -90,1 +89,0 @@\n-        ArrayList<String> metakeywords = new ArrayList<>(1);\n@@ -92,2 +90,1 @@\n-        metakeywords.add(utils.getFullyQualifiedName(typeElement) + \" \" + cltypelower);\n-        return metakeywords;\n+        return List.of(utils.getFullyQualifiedName(typeElement) + \" \" + cltypelower);\n@@ -100,1 +97,0 @@\n-        List<String> result = new ArrayList<>(1);\n@@ -102,2 +98,3 @@\n-            String pkgName = utils.getPackageName(packageElement);\n-            result.add(pkgName + \" \" + \"package\");\n+            return List.of(utils.getPackageName(packageElement) + \" \" + \"package\");\n+        } else {\n+            return List.of();\n@@ -105,1 +102,0 @@\n-        return result;\n@@ -125,1 +121,0 @@\n-         List<String> result = new ArrayList<>(1);\n@@ -129,1 +124,1 @@\n-                result.add(windowOverview + \", \" + docTitle);\n+                return List.of(windowOverview + \", \" + docTitle);\n@@ -131,1 +126,1 @@\n-                result.add(windowOverview);\n+                return List.of(windowOverview);\n@@ -133,0 +128,2 @@\n+        } else {\n+            return List.of();\n@@ -134,1 +131,0 @@\n-        return result;\n@@ -147,1 +143,1 @@\n-        ArrayList<String> results = new ArrayList<>();\n+        var results = new ArrayList<String>();\n@@ -149,1 +145,1 @@\n-            String membername = utils.isMethod(member)\n+            String memberName = utils.isMethod(member)\n@@ -152,2 +148,2 @@\n-            if (!results.contains(membername)) {\n-                results.add(membername);\n+            if (!results.contains(memberName)) {\n+                results.add(memberName);\n@@ -156,1 +152,1 @@\n-        ((ArrayList)results).trimToSize();\n+        results.trimToSize();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/MetaKeywords.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1238,4 +1238,3 @@\n-                case '\\n': case '\\r':\n-                    lineLength = 0;\n-                    break;\n-                case '\\t':\n+                case '\\n', '\\r' -> lineLength = 0;\n+\n+                case '\\t' -> {\n@@ -1247,3 +1246,3 @@\n-                    break;\n-                default:\n-                    lineLength++;\n+                }\n+\n+                default -> lineLength++;\n@@ -1264,1 +1263,1 @@\n-                case '\\n':\n+                case '\\n' -> {\n@@ -1268,2 +1267,2 @@\n-                    break;\n-                case '\\r':\n+                }\n+                case '\\r' -> {\n@@ -1275,1 +1274,1 @@\n-                    break;\n+                }\n@@ -1496,2 +1495,2 @@\n-                case START_ELEMENT:\n-                    StartElementTree nodeStart = (StartElementTree)dt;\n+                case START_ELEMENT -> {\n+                    StartElementTree nodeStart = (StartElementTree) dt;\n@@ -1501,4 +1500,3 @@\n-                    break;\n-\n-                case END_ELEMENT:\n-                    EndElementTree nodeEnd = (EndElementTree)dt;\n+                }\n+                case END_ELEMENT -> {\n+                    EndElementTree nodeEnd = (EndElementTree) dt;\n@@ -1508,4 +1506,3 @@\n-                    break;\n-\n-                case TEXT:\n-                    TextTree nodeText = (TextTree)dt;\n+                }\n+                case TEXT -> {\n+                    TextTree nodeText = (TextTree) dt;\n@@ -1514,4 +1511,4 @@\n-                    break;\n-\n-                default:\n-                    \/\/ do nothing\n+                }\n+                default -> {\n+                }\n+                \/\/ do nothing\n@@ -1531,1 +1528,1 @@\n-            keys = new LinkedHashMap<String, CollationKey>(MAX_SIZE + 1, 0.75f, true) {\n+            keys = new LinkedHashMap<>(MAX_SIZE + 1, 0.75f, true) {\n@@ -1533,0 +1530,1 @@\n+\n@@ -1919,1 +1917,1 @@\n-            shouldDocumentVisitor = new SimpleElementVisitor14<Boolean, Void>() {\n+            shouldDocumentVisitor = new SimpleElementVisitor14<>() {\n@@ -1928,1 +1926,1 @@\n-                    \/\/ treat inner classes etc as members\n+                    \/\/ treat inner classes etc. as members\n@@ -2550,1 +2548,1 @@\n-        public CommentHelper get(Object key) {\n+        public CommentHelper get(Element key) {\n@@ -2858,1 +2856,1 @@\n-        public boolean isPreview(Element el);\n+        boolean isPreview(Element el);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":28,"deletions":30,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -242,6 +242,4 @@\n-        switch(accessFilter.getAccessValue(ElementKind.MODULE)) {\n-            case PACKAGE: case PRIVATE:\n-                return DocletEnvironment.ModuleMode.ALL;\n-            default:\n-                return DocletEnvironment.ModuleMode.API;\n-        }\n+        return switch (accessFilter.getAccessValue(ElementKind.MODULE)) {\n+            case PACKAGE, PRIVATE -> ModuleMode.ALL;\n+            default -> ModuleMode.API;\n+        };\n@@ -275,1 +273,1 @@\n-     *     requires directive, based on --expand-requires\n+     *     'requires' directive, based on --expand-requires\n@@ -656,1 +654,1 @@\n-                result.add((PackageElement) psym);\n+                result.add(psym);\n@@ -996,1 +994,1 @@\n-            visibleElementVisitor = new SimpleElementVisitor14<Boolean, Void>() {\n+            visibleElementVisitor = new SimpleElementVisitor14<>() {\n@@ -1064,8 +1062,5 @@\n-                    switch(enclosing.getKind()) {\n-                        case PACKAGE:\n-                            return specifiedPackageElements.contains((PackageElement)enclosing);\n-                        case CLASS: case INTERFACE: case ENUM: case ANNOTATION_TYPE:\n-                            return visit((TypeElement) enclosing);\n-                        default:\n-                            throw new AssertionError(\"unknown element: \" + enclosing);\n-                    }\n+                    return switch (enclosing.getKind()) {\n+                        case CLASS, ENUM, RECORD, INTERFACE, ANNOTATION_TYPE -> visit(enclosing);\n+                        case PACKAGE -> specifiedPackageElements.contains((PackageElement) enclosing);\n+                        default -> throw new AssertionError(\"unknown element: \" + enclosing);\n+                    };\n@@ -1083,5 +1078,4 @@\n-                switch(e.getKind()) {\n-                    case ANNOTATION_TYPE: case CLASS: case ENUM: case INTERFACE:\n-                    case MODULE: case OTHER: case PACKAGE:\n-                        throw new AssertionError(\"invalid element for this operation: \" + e);\n-                    default:\n+                switch (e.getKind()) {\n+                    case CLASS, ENUM, RECORD, INTERFACE, ANNOTATION_TYPE,\n+                            MODULE, OTHER, PACKAGE -> throw new AssertionError(\"invalid element for this operation: \" + e);\n+                    default -> {\n@@ -1091,0 +1085,1 @@\n+                    }\n@@ -1211,17 +1206,7 @@\n-                switch (kind) {\n-                    case METHOD:\n-                        accessValue  = options.showMembersAccess();\n-                        break;\n-                    case CLASS:\n-                        accessValue  = options.showTypesAccess();\n-                        break;\n-                    case PACKAGE:\n-                        accessValue  = options.showPackagesAccess();\n-                        break;\n-                    case MODULE:\n-                        accessValue  = options.showModuleContents();\n-                        break;\n-                    default:\n-                        throw new AssertionError(\"unknown element: \" + kind);\n-\n-                }\n+                accessValue = switch (kind) {\n+                    case METHOD  -> options.showMembersAccess();\n+                    case CLASS   -> options.showTypesAccess();\n+                    case PACKAGE -> options.showPackagesAccess();\n+                    case MODULE  -> options.showModuleContents();\n+                    default -> throw new AssertionError(\"unknown element: \" + kind);\n+                };\n@@ -1234,11 +1219,6 @@\n-            switch (accessValue) {\n-                case PUBLIC:\n-                    return EnumSet.of(AccessKind.PUBLIC);\n-                case PROTECTED:\n-                default:\n-                    return EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED);\n-                case PACKAGE:\n-                    return EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED, AccessKind.PACKAGE);\n-                case PRIVATE:\n-                    return EnumSet.allOf(AccessKind.class);\n-            }\n+            return switch (accessValue) {\n+                case PUBLIC    -> EnumSet.of(AccessKind.PUBLIC);\n+                case PROTECTED -> EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED);\n+                case PACKAGE   -> EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED, AccessKind.PACKAGE);\n+                case PRIVATE   -> EnumSet.allOf(AccessKind.class);\n+            };\n@@ -1276,13 +1256,7 @@\n-            switch (kind) {\n-                case CLASS: case METHOD: case MODULE: case PACKAGE:\n-                    return kind;\n-                case RECORD: case ANNOTATION_TYPE: case ENUM: case INTERFACE:\n-                    return ElementKind.CLASS;\n-                case CONSTRUCTOR: case ENUM_CONSTANT: case EXCEPTION_PARAMETER:\n-                case FIELD: case INSTANCE_INIT: case LOCAL_VARIABLE: case PARAMETER:\n-                case RESOURCE_VARIABLE: case STATIC_INIT: case TYPE_PARAMETER:\n-                case RECORD_COMPONENT:\n-                    return ElementKind.METHOD;\n-                default:\n-                    throw new AssertionError(\"unsupported kind: \" + kind);\n-            }\n+            return switch (kind) {\n+                case CLASS, METHOD, MODULE, PACKAGE -> kind;\n+                case RECORD, ANNOTATION_TYPE, ENUM, INTERFACE -> ElementKind.CLASS;\n+                case CONSTRUCTOR, ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD, INSTANCE_INIT, LOCAL_VARIABLE,\n+                        PARAMETER, RESOURCE_VARIABLE, STATIC_INIT, TYPE_PARAMETER, RECORD_COMPONENT -> ElementKind.METHOD;\n+                default -> throw new AssertionError(\"unsupported kind: \" + kind);\n+            };\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":37,"deletions":63,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-        Comparator<ToolOption> comp = new Comparator<ToolOption>() {\n+        var comp = new Comparator<ToolOption>() {\n@@ -253,1 +253,1 @@\n-        Comparator<Doclet.Option> comp = new Comparator<Doclet.Option>() {\n+        var comp = new Comparator<Doclet.Option>() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}