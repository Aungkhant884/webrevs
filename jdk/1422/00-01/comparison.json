{"files":[{"patch":"@@ -300,1 +300,0 @@\n-  \/\/ Random sets the seed to the value returned.\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -808,1 +808,0 @@\n-  assert(SafepointSynchronize::is_at_safepoint(), \"only safe at a safepoint\");\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,1 @@\n+  os::init_random(0x4711);\n","filename":"test\/hotspot\/gtest\/logging\/test_logOutputList.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/vmOperations.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n@@ -119,35 +116,16 @@\n-class VM_TestRandom : public VM_GTestExecuteAtSafepoint {\n-public:\n-  void doit() {\n-    const double m = 2147483647;\n-    double mean = 0.0, variance = 0.0, t;\n-    const int reps = 10000;\n-    unsigned int seed = 1;\n-\n-    \/\/ tty->print_cr(\"seed %ld for %ld repeats...\", seed, reps);\n-    os::init_random(seed);\n-    int num;\n-    for (int k = 0; k < reps; k++) {\n-      num = os::random();\n-      double u = (double)num \/ m;\n-      ASSERT_TRUE(u >= 0.0 && u <= 1.0) << \"bad random number!\";\n-\n-      \/\/ calculate mean and variance of the random sequence\n-      mean += u;\n-      variance += (u*u);\n-    }\n-    mean \/= reps;\n-    variance \/= (reps - 1);\n-\n-    ASSERT_EQ(num, 1043618065) << \"bad seed\";\n-    \/\/ tty->print_cr(\"mean of the 1st 10000 numbers: %f\", mean);\n-    int intmean = mean*100;\n-    ASSERT_EQ(intmean, 50);\n-    \/\/ tty->print_cr(\"variance of the 1st 10000 numbers: %f\", variance);\n-    int intvariance = variance*100;\n-    ASSERT_EQ(intvariance, 33);\n-    const double eps = 0.0001;\n-    t = fabsd(mean - 0.5018);\n-    ASSERT_LT(t, eps) << \"bad mean\";\n-    t = (variance - 0.3355) < 0.0 ? -(variance - 0.3355) : variance - 0.3355;\n-    ASSERT_LT(t, eps) << \"bad variance\";\n+TEST(os, test_random) {\n+  const double m = 2147483647;\n+  double mean = 0.0, variance = 0.0, t;\n+  const int reps = 10000;\n+  unsigned int seed = 1;\n+\n+  \/\/ tty->print_cr(\"seed %ld for %ld repeats...\", seed, reps);\n+  int num;\n+  for (int k = 0; k < reps; k++) {\n+    num = seed = os::next_random(seed);\n+    double u = (double)num \/ m;\n+    ASSERT_TRUE(u >= 0.0 && u <= 1.0) << \"bad random number!\";\n+\n+    \/\/ calculate mean and variance of the random sequence\n+    mean += u;\n+    variance += (u*u);\n@@ -155,8 +133,15 @@\n-};\n-\n-TEST_VM(os, random) {\n-  \/\/ Can only change the random seed inside a safepoint and expect the\n-  \/\/ threads to not change it by other os::random() calls.\n-  ThreadInVMfromNative invm(JavaThread::current());\n-  VM_TestRandom op;\n-  VMThread::execute(&op);\n+  mean \/= reps;\n+  variance \/= (reps - 1);\n+\n+  ASSERT_EQ(num, 1043618065) << \"bad seed\";\n+  \/\/ tty->print_cr(\"mean of the 1st 10000 numbers: %f\", mean);\n+  int intmean = mean*100;\n+  ASSERT_EQ(intmean, 50);\n+  \/\/ tty->print_cr(\"variance of the 1st 10000 numbers: %f\", variance);\n+  int intvariance = variance*100;\n+  ASSERT_EQ(intvariance, 33);\n+  const double eps = 0.0001;\n+  t = fabsd(mean - 0.5018);\n+  ASSERT_LT(t, eps) << \"bad mean\";\n+  t = (variance - 0.3355) < 0.0 ? -(variance - 0.3355) : variance - 0.3355;\n+  ASSERT_LT(t, eps) << \"bad variance\";\n@@ -165,1 +150,0 @@\n-\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":31,"deletions":47,"binary":false,"changes":78,"status":"modified"}]}