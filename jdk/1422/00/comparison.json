{"files":[{"patch":"@@ -2467,2 +2467,0 @@\n-  init_random(1234567);\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2092,2 +2092,0 @@\n-  init_random(1234567);\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4397,2 +4397,0 @@\n-  init_random(1234567);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4167,2 +4167,0 @@\n-  init_random(1234567);\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,0 +300,1 @@\n+  \/\/ Random sets the seed to the value returned.\n@@ -302,1 +303,0 @@\n-  os::init_random(seed);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-volatile unsigned int os::_rand_seed      = 1;\n+volatile unsigned int os::_rand_seed      = 1234567;\n@@ -808,0 +808,1 @@\n+  assert(SafepointSynchronize::is_at_safepoint(), \"only safe at a safepoint\");\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-  os::init_random(0x4711);\n","filename":"test\/hotspot\/gtest\/logging\/test_logOutputList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"runtime\/vmOperations.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n@@ -116,17 +119,35 @@\n-TEST(os, test_random) {\n-  const double m = 2147483647;\n-  double mean = 0.0, variance = 0.0, t;\n-  const int reps = 10000;\n-  unsigned int seed = 1;\n-\n-  \/\/ tty->print_cr(\"seed %ld for %ld repeats...\", seed, reps);\n-  os::init_random(seed);\n-  int num;\n-  for (int k = 0; k < reps; k++) {\n-    num = os::random();\n-    double u = (double)num \/ m;\n-    ASSERT_TRUE(u >= 0.0 && u <= 1.0) << \"bad random number!\";\n-\n-    \/\/ calculate mean and variance of the random sequence\n-    mean += u;\n-    variance += (u*u);\n+class VM_TestRandom : public VM_GTestExecuteAtSafepoint {\n+public:\n+  void doit() {\n+    const double m = 2147483647;\n+    double mean = 0.0, variance = 0.0, t;\n+    const int reps = 10000;\n+    unsigned int seed = 1;\n+\n+    \/\/ tty->print_cr(\"seed %ld for %ld repeats...\", seed, reps);\n+    os::init_random(seed);\n+    int num;\n+    for (int k = 0; k < reps; k++) {\n+      num = os::random();\n+      double u = (double)num \/ m;\n+      ASSERT_TRUE(u >= 0.0 && u <= 1.0) << \"bad random number!\";\n+\n+      \/\/ calculate mean and variance of the random sequence\n+      mean += u;\n+      variance += (u*u);\n+    }\n+    mean \/= reps;\n+    variance \/= (reps - 1);\n+\n+    ASSERT_EQ(num, 1043618065) << \"bad seed\";\n+    \/\/ tty->print_cr(\"mean of the 1st 10000 numbers: %f\", mean);\n+    int intmean = mean*100;\n+    ASSERT_EQ(intmean, 50);\n+    \/\/ tty->print_cr(\"variance of the 1st 10000 numbers: %f\", variance);\n+    int intvariance = variance*100;\n+    ASSERT_EQ(intvariance, 33);\n+    const double eps = 0.0001;\n+    t = fabsd(mean - 0.5018);\n+    ASSERT_LT(t, eps) << \"bad mean\";\n+    t = (variance - 0.3355) < 0.0 ? -(variance - 0.3355) : variance - 0.3355;\n+    ASSERT_LT(t, eps) << \"bad variance\";\n@@ -134,15 +155,8 @@\n-  mean \/= reps;\n-  variance \/= (reps - 1);\n-\n-  ASSERT_EQ(num, 1043618065) << \"bad seed\";\n-  \/\/ tty->print_cr(\"mean of the 1st 10000 numbers: %f\", mean);\n-  int intmean = mean*100;\n-  ASSERT_EQ(intmean, 50);\n-  \/\/ tty->print_cr(\"variance of the 1st 10000 numbers: %f\", variance);\n-  int intvariance = variance*100;\n-  ASSERT_EQ(intvariance, 33);\n-  const double eps = 0.0001;\n-  t = fabsd(mean - 0.5018);\n-  ASSERT_LT(t, eps) << \"bad mean\";\n-  t = (variance - 0.3355) < 0.0 ? -(variance - 0.3355) : variance - 0.3355;\n-  ASSERT_LT(t, eps) << \"bad variance\";\n+};\n+\n+TEST_VM(os, random) {\n+  \/\/ Can only change the random seed inside a safepoint and expect the\n+  \/\/ threads to not change it by other os::random() calls.\n+  ThreadInVMfromNative invm(JavaThread::current());\n+  VM_TestRandom op;\n+  VMThread::execute(&op);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":47,"deletions":33,"binary":false,"changes":80,"status":"modified"}]}