{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -370,3 +370,1 @@\n-        \/\/ check year now we are certain it is correct\n-        int year = YEAR.checkValidIntValue(yearEst);\n-        return new LocalDate(year, month, dom);\n+        return new LocalDate((int)yearEst, month, dom);\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+import static org.testng.Assert.fail;\n@@ -67,0 +68,1 @@\n+import java.time.DateTimeException;\n@@ -69,0 +71,1 @@\n+import java.time.temporal.ChronoField;\n@@ -423,0 +426,31 @@\n+    @Test\n+    public void test_toEpochDay_edges() {\n+        long minDay = ChronoField.EPOCH_DAY.range().getMinimum();\n+        long maxDay = ChronoField.EPOCH_DAY.range().getMaximum();\n+        long minYear = ChronoField.YEAR.range().getMinimum();\n+        long maxYear = ChronoField.YEAR.range().getMinimum();\n+        int[] offsets = new int[] { 0, 1, 2, 3, 28, 29, 30, 31, 32, 363, 364, 365, 366, 367 };\n+        for (int offset : offsets) {\n+            LocalDate minDate = LocalDate.ofEpochDay(minDay + offset);\n+            assertEquals(minDate, LocalDate.MIN.plusDays(offset));\n+            assertTrue(ChronoField.YEAR.range().isValidValue(minDate.getYear()));\n+\n+            LocalDate maxDate = LocalDate.ofEpochDay(maxDay - offset);\n+            assertEquals(maxDate, LocalDate.MAX.minusDays(offset));\n+            assertTrue(ChronoField.YEAR.range().isValidValue(maxDate.getYear()));\n+\n+            try {\n+                LocalDate.ofEpochDay(minDay - 1 - offset);\n+                fail(\"Expected DateTimeException\");\n+            } catch (DateTimeException e) {\n+                \/\/ expected\n+            }\n+            try {\n+                LocalDate.ofEpochDay(maxDay + 1 + offset);\n+                fail(\"Expected DateTimeException\");\n+            } catch (DateTimeException e) {\n+                \/\/ expected\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/TestLocalDate.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}