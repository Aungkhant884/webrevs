{"files":[{"patch":"@@ -75,0 +75,2 @@\n+\n+  send_reference_processing_time_event(rps.total_process_time());\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+  void send_reference_processing_time_event(const double total_time) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -78,0 +78,9 @@\n+void GCTracer::send_reference_processing_time_event(const double total_time) const {\n+  EventGCReferenceProcessingTime e;\n+  if (e.should_commit()) {\n+      e.set_gcId(GCId::current());\n+      e.set_totalTime((size_t)(total_time * NANOSECS_PER_MILLISEC));\n+      e.commit();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceSend.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -227,1 +227,2 @@\n-                                phase_times.ref_discovered(REF_PHANTOM));\n+                                phase_times.ref_discovered(REF_PHANTOM),\n+                                phase_times.total_time_ms());\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,2 +64,0 @@\n-  double total_time_ms() const { return _total_time_ms; }\n-\n@@ -85,0 +83,1 @@\n+  double total_time_ms() const { return _total_time_ms; }\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+  double _total_process_time;\n@@ -45,1 +46,2 @@\n-    _phantom_count(0) {}\n+    _phantom_count(0),\n+    _total_process_time(0.0) {}\n@@ -54,1 +56,14 @@\n-    _phantom_count(phantom_count)\n+    _phantom_count(phantom_count),\n+    _total_process_time(0.0)\n+  {}\n+\n+  ReferenceProcessorStats(size_t soft_count,\n+                          size_t weak_count,\n+                          size_t final_count,\n+                          size_t phantom_count,\n+                          double total_process_time) :\n+    _soft_count(soft_count),\n+    _weak_count(weak_count),\n+    _final_count(final_count),\n+    _phantom_count(phantom_count),\n+    _total_process_time(total_process_time)\n@@ -72,0 +87,4 @@\n+\n+  double total_process_time() const{\n+    return _total_process_time;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorStats.hpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -393,0 +393,6 @@\n+  <Event name=\"GCReferenceProcessingTime\" category=\"Java Virtual Machine, GC, Reference\" label=\"GC Reference Processing Time\" startTime=\"false\"\n+    description=\"Total time for processing java.lang.ref.References during GC\">\n+    <Field type=\"uint\" name=\"gcId\" label=\"GC Identifier\" relation=\"GcId\" \/>\n+    <Field type=\"ulong\" contentType=\"nanos\" name=\"totalTime\" label=\"Total Reference Processing Time\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -429,0 +429,4 @@\n+    <event name=\"jdk.GCReferenceProcessingTime\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -429,0 +429,4 @@\n+    <event name=\"jdk.GCReferenceProcessingTime\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.gc.refstat;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.jfr.GCHelper;\n+\n+\/**\n+ * @test id=Serial\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseSerialGC jdk.jfr.event.gc.refstat.TestGCReferenceProcessingTimeEvent\n+ *\/\n+\n+\/**\n+ * @test id=Parallel\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseParallelGC jdk.jfr.event.gc.refstat.TestGCReferenceProcessingTimeEvent\n+ *\/\n+\n+\/**\n+ * @test id=G1\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC jdk.jfr.event.gc.refstat.TestGCReferenceProcessingTimeEvent\n+ *\/\n+\n+public class TestGCReferenceProcessingTimeEvent {\n+    private static final String EVENT_NAME = EventNames.GCReferenceProcessingTime;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try (Recording recording = new Recording()) {\n+\n+            \/\/ Activate the event we are interested in and start recording\n+            recording.enable(EVENT_NAME);\n+\n+            recording.start();\n+            GCHelper.callSystemGc(6, true);\n+            recording.stop();\n+\n+            \/\/ Verify recording\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Events.hasEvent(events, EVENT_NAME);\n+\n+            recording.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/refstat\/TestGCReferenceProcessingTimeEvent.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -150,0 +150,1 @@\n+    public static final String GCReferenceProcessingTime = PREFIX + \"GCReferenceProcessingTime\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}