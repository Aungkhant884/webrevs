{"files":[{"patch":"@@ -1893,12 +1893,0 @@\n-        static final Map<String, AccessMode> methodNameToAccessMode;\n-        static {\n-            AccessMode[] values = AccessMode.values();\n-            \/\/ Initial capacity of # values divided by the load factor is sufficient\n-            \/\/ to avoid resizes for the smallest table size (64)\n-            int initialCapacity = (int)(values.length \/ 0.75f) + 1;\n-            methodNameToAccessMode = new HashMap<>(initialCapacity);\n-            for (AccessMode am : values) {\n-                methodNameToAccessMode.put(am.methodName, am);\n-            }\n-        }\n-\n@@ -1937,3 +1925,34 @@\n-            AccessMode am = methodNameToAccessMode.get(methodName);\n-            if (am != null) return am;\n-            throw new IllegalArgumentException(\"No AccessMode value for method name \" + methodName);\n+            return switch (methodName) {\n+                case \"get\" -> GET;\n+                case \"set\" -> SET;\n+                case \"getVolatile\" -> GET_VOLATILE;\n+                case \"setVolatile\" -> SET_VOLATILE;\n+                case \"getAcquire\" -> GET_ACQUIRE;\n+                case \"setRelease\" -> SET_RELEASE;\n+                case \"getOpaque\" -> GET_OPAQUE;\n+                case \"setOpaque\" -> SET_OPAQUE;\n+                case \"compareAndSet\" -> COMPARE_AND_SET;\n+                case \"compareAndExchange\" -> COMPARE_AND_EXCHANGE;\n+                case \"compareAndExchangeAcquire\" -> COMPARE_AND_EXCHANGE_ACQUIRE;\n+                case \"compareAndExchangeRelease\" -> COMPARE_AND_EXCHANGE_RELEASE;\n+                case \"weakCompareAndSet\" -> WEAK_COMPARE_AND_SET;\n+                case \"weakCompareAndSetPlain\" -> WEAK_COMPARE_AND_SET_PLAIN;\n+                case \"weakCompareAndSetAcquire\" -> WEAK_COMPARE_AND_SET_ACQUIRE;\n+                case \"weakCompareAndSetRelease\" -> WEAK_COMPARE_AND_SET_RELEASE;\n+                case \"getAndSet\" -> GET_AND_SET;\n+                case \"getAndSetAcquire\" -> GET_AND_SET_ACQUIRE;\n+                case \"getAndSetRelease\" -> GET_AND_SET_RELEASE;\n+                case \"getAndAdd\" -> GET_AND_ADD;\n+                case \"getAndAddAcquire\" -> GET_AND_ADD_ACQUIRE;\n+                case \"getAndAddRelease\" -> GET_AND_ADD_RELEASE;\n+                case \"getAndBitwiseOr\" -> GET_AND_BITWISE_OR;\n+                case \"getAndBitwiseOrRelease\" -> GET_AND_BITWISE_OR_RELEASE;\n+                case \"getAndBitwiseOrAcquire\" -> GET_AND_BITWISE_OR_ACQUIRE;\n+                case \"getAndBitwiseAnd\" -> GET_AND_BITWISE_AND;\n+                case \"getAndBitwiseAndRelease\" -> GET_AND_BITWISE_AND_RELEASE;\n+                case \"getAndBitwiseAndAcquire\" -> GET_AND_BITWISE_AND_ACQUIRE;\n+                case \"getAndBitwiseXor\" -> GET_AND_BITWISE_XOR;\n+                case \"getAndBitwiseXorRelease\" -> GET_AND_BITWISE_XOR_RELEASE;\n+                case \"getAndBitwiseXorAcquire\" -> GET_AND_BITWISE_XOR_ACQUIRE;\n+                default -> throw new IllegalArgumentException(\"No AccessMode value for method name \" + methodName);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":34,"deletions":15,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8200788\n- * @summary Optimal initial capacity of AccessMode.methodNameToAccessMode\n- * @library \/test\/lib\n- * @modules java.base\/java.lang.invoke:open\n- *          java.base\/java.util:open\n- * @build jdk.test.lib.util.OptimalCapacity\n- * @run main OptimalMapSize\n- *\/\n-\n-import java.lang.invoke.VarHandle.AccessMode;\n-import jdk.test.lib.util.OptimalCapacity;\n-\n-public class OptimalMapSize {\n-    public static void main(String[] args) throws Throwable {\n-        int initialCapacity = (int)(AccessMode.values().length \/ 0.75f) + 1;\n-        OptimalCapacity.ofHashMap(AccessMode.class, \"methodNameToAccessMode\",\n-                initialCapacity);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandle\/AccessMode\/OptimalMapSize.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"}]}