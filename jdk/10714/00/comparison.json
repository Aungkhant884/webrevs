{"files":[{"patch":"@@ -65,1 +65,0 @@\n-import static java.io.ObjectStreamField.*;\n@@ -1567,1 +1566,1 @@\n-            appendClassSignature(sb, paramTypes[i]);\n+            sb.append(paramTypes[i].descriptorString());\n@@ -1570,1 +1569,1 @@\n-        appendClassSignature(sb, retType);\n+        sb.append(retType.descriptorString());\n@@ -1884,1 +1883,1 @@\n-            signature = getClassSignature(field.getType());\n+            signature = field.getType().descriptorString();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,52 +127,0 @@\n-    \/**\n-     * Returns JVM type signature for given primitive.\n-     *\/\n-    private static String getPrimitiveSignature(Class<?> cl) {\n-        if (cl == Integer.TYPE)\n-            return \"I\";\n-        else if (cl == Byte.TYPE)\n-            return \"B\";\n-        else if (cl == Long.TYPE)\n-            return \"J\";\n-        else if (cl == Float.TYPE)\n-            return \"F\";\n-        else if (cl == Double.TYPE)\n-            return \"D\";\n-        else if (cl == Short.TYPE)\n-            return \"S\";\n-        else if (cl == Character.TYPE)\n-            return \"C\";\n-        else if (cl == Boolean.TYPE)\n-            return \"Z\";\n-        else if (cl == Void.TYPE)\n-            return \"V\";\n-        else\n-            throw new InternalError();\n-    }\n-\n-    \/**\n-     * Returns JVM type signature for given class.\n-     *\/\n-    static String getClassSignature(Class<?> cl) {\n-        if (cl.isPrimitive()) {\n-            return getPrimitiveSignature(cl);\n-        } else {\n-            return appendClassSignature(new StringBuilder(), cl).toString();\n-        }\n-    }\n-\n-    static StringBuilder appendClassSignature(StringBuilder sbuf, Class<?> cl) {\n-        while (cl.isArray()) {\n-            sbuf.append('[');\n-            cl = cl.getComponentType();\n-        }\n-\n-        if (cl.isPrimitive()) {\n-            sbuf.append(getPrimitiveSignature(cl));\n-        } else {\n-            sbuf.append('L').append(cl.getName().replace('.', '\/')).append(';');\n-        }\n-\n-        return sbuf;\n-    }\n-\n@@ -193,1 +141,1 @@\n-        signature = getClassSignature(ftype).intern();\n+        signature = ftype.descriptorString().intern();\n@@ -350,1 +298,1 @@\n-            typeSignature = sig = getClassSignature(type).intern();\n+            typeSignature = sig = type.descriptorString().intern();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamField.java","additions":3,"deletions":55,"binary":false,"changes":58,"status":"modified"}]}