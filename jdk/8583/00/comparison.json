{"files":[{"patch":"@@ -384,0 +384,5 @@\n+                if (taglet instanceof SimpleTaglet st && !st.enabled) {\n+                    \/\/ taglet has been disabled\n+                    return;\n+                }\n+\n@@ -387,0 +392,1 @@\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.io.IOException;\n@@ -84,0 +85,39 @@\n+    @Test\n+    public void testBadAuthor_NoWarning(Path base) throws IOException {\n+        testBadAuthor(base, false);\n+    }\n+\n+    @Test\n+    public void testBadAuthor_Warning(Path base) throws IOException {\n+        testBadAuthor(base, true);\n+    }\n+\n+    public void testBadAuthor(Path base, boolean useAuthorOption) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package pkg;\n+                    \/** Comment. *\/\n+                    public class Test {\n+                        private Test() { }\n+                        \/**\n+                         * Comment.\n+                         * @author anonymous\n+                         *\/\n+                        public void m() { }\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:none\",\n+                (useAuthorOption ? \"-author\" : \"-XDdummy=dummy\"),\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ bad tags never cause corresponding output, whether the option is enabled or not\n+        checkAuthor(false);\n+\n+        checkOutput(Output.OUT, useAuthorOption,\n+                \"warning: Tag @author cannot be used in method documentation.\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAuthor\/TestAuthor.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,10 +38,0 @@\n-    \/\/Javadoc arguments.\n-    private static final String[] ARGS = new String[] {\n-\n-    };\n-\n-    \/\/Input for string search tests.\n-    private static final String[][] TEST = {\n-        {  }\n-    };\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/TestSimpleTagInherit.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.io.IOException;\n@@ -56,1 +57,1 @@\n-                      \/** Introduction.\\s\n+                      \/** Introduction.\n@@ -84,0 +85,39 @@\n+    @Test\n+    public void testBadVersion_NoWarning(Path base) throws IOException {\n+        testBadVersion(base, false);\n+    }\n+\n+    @Test\n+    public void testBadVersion_Warning(Path base) throws IOException {\n+        testBadVersion(base, true);\n+    }\n+\n+    public void testBadVersion(Path base, boolean useVersionOption) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package pkg;\n+                    \/** Comment. *\/\n+                    public class Test {\n+                        private Test() { }\n+                        \/**\n+                         * Comment.\n+                         * @version 1.2.3\n+                         *\/\n+                        public void m() { }\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"-Xdoclint:none\",\n+                (useVersionOption ? \"-version\" : \"-XDdummy=dummy\"),\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ bad tags never cause corresponding output, whether the option is enabled or not\n+        checkVersion(false);\n+\n+        checkOutput(Output.OUT, useVersionOption,\n+                \"warning: Tag @version cannot be used in method documentation.\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testVersionTag\/TestVersionTag.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"}]}