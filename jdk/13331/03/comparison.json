{"files":[{"patch":"@@ -4189,7 +4189,15 @@\n-        Type type = attribType(tree.deconstructor, env);\n-        if (type.isRaw() && type.tsym.getTypeParameters().nonEmpty()) {\n-            Type inferred = infer.instantiatePatternType(resultInfo.pt, type.tsym);\n-            if (inferred == null) {\n-                log.error(tree.pos(), Errors.PatternTypeCannotInfer);\n-            } else {\n-                type = inferred;\n+        Type site;\n+\n+        if (tree.deconstructor == null) {\n+            log.error(tree.pos(), Errors.DeconstructionPatternVarNotAllowed);\n+            tree.record = syms.errSymbol;\n+            site = tree.type = types.createErrorType(tree.record.type);\n+        } else {\n+            Type type = attribType(tree.deconstructor, env);\n+            if (type.isRaw() && type.tsym.getTypeParameters().nonEmpty()) {\n+                Type inferred = infer.instantiatePatternType(resultInfo.pt, type.tsym);\n+                if (inferred == null) {\n+                    log.error(tree.pos(), Errors.PatternTypeCannotInfer);\n+                } else {\n+                    type = inferred;\n+                }\n@@ -4197,0 +4205,2 @@\n+            tree.type = tree.deconstructor.type = type;\n+            site = types.capture(tree.type);\n@@ -4198,2 +4208,1 @@\n-        tree.type = tree.deconstructor.type = type;\n-        Type site = types.capture(tree.type);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3483,3 +3483,11 @@\n-            Type[] componentTypes = ((ClassSymbol) record.type.tsym).getRecordComponents()\n-                    .map(r -> types.memberType(record.type, r))\n-                    .toArray(s -> new Type[s]);\n+            Type[] componentTypes;\n+\n+            if (!record.type.isErroneous()) {\n+                componentTypes = ((ClassSymbol) record.type.tsym).getRecordComponents()\n+                        .map(r -> types.memberType(record.type, r))\n+                        .toArray(s -> new Type[s]);\n+            }\n+            else {\n+                componentTypes = record.nested.map(t -> types.createErrorType(t.type)).toArray(s -> new Type[s]);;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3992,0 +3992,3 @@\n+compiler.err.deconstruction.pattern.var.not.allowed=\\\n+    deconstruction patterns can only be applied to records, var is not allowed\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8305582\n+ * @summary Compiler crash when compiling record patterns with var\n+ * @compile\/fail\/ref=T8305582.out -XDrawDiagnostics -XDshould-stop.at=FLOW T8305582.java\n+ *\/\n+\n+public class T8305582 {\n+    record Point(int x, int y) {}\n+    enum Color {RED, GREEN, BLUE}\n+    record ColoredPoint (Point p, Color c) {}\n+\n+    public static void foo(Object o) {\n+        if (o instanceof ColoredPoint(var(var x, var y), var c)) { }\n+\n+        switch(o) {\n+            case ColoredPoint(var (var x, var y), var c):\n+                break;\n+            default:\n+        }\n+\n+        if (o instanceof ColoredPoint(var(int x, int y), var c)) { }\n+        if (o instanceof ColoredPoint(var(int x, var y), var c)) { }\n+        if (o instanceof var(Point x, Point y)) { }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8305582.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+T8305582.java:47:26: compiler.err.restricted.type.not.allowed.here: var\n+T8305582.java:37:39: compiler.err.deconstruction.pattern.var.not.allowed\n+T8305582.java:40:31: compiler.err.deconstruction.pattern.var.not.allowed\n+T8305582.java:45:39: compiler.err.deconstruction.pattern.var.not.allowed\n+T8305582.java:46:39: compiler.err.deconstruction.pattern.var.not.allowed\n+5 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8305582.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.deconstruction.pattern.var.not.allowed\n+\n+class DeconstructionpatternsNonVar {\n+    record Point(int x, int y) {}\n+    enum Color {RED, GREEN, BLUE}\n+    record ColoredPoint (Point p, Color c) {}\n+\n+    public static void foo(Object o) {\n+        if (o instanceof ColoredPoint(var(var x, var y), var c)) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/DeconstructionpatternsNonVar.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}