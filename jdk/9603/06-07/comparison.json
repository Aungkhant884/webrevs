{"files":[{"patch":"@@ -292,0 +292,49 @@\n+\/\/ Simple ResourceHashtable whose key is a Symbol* and value is an int\n+\/\/ This test is to show that you need to manipulate the refcount of the Symbol to store\n+\/\/ in the table.\n+class SimpleResourceHashtableDeleteTest : public ::testing::Test {\n+ public:\n+    ResourceHashtable<Symbol*, int, 107, ResourceObj::C_HEAP, mtTest> _simple_test_table;\n+\n+    class SimpleDeleter : public StackObj {\n+      public:\n+        bool do_entry(Symbol*& key, int value) {\n+          \/\/ We need to decrement the refcount for the key in the delete function.\n+          \/\/ Since we incremented the key, in this case, we should decrement it.\n+          key->decrement_refcount();\n+          return true;\n+        }\n+    };\n+};\n+\n+TEST_VM_F(SimpleResourceHashtableDeleteTest, simple_remove) {\n+  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n+  int s_orig_count = s->refcount();\n+  \/\/ Need to increment a Symbol* when you keep it in a table.\n+  s->increment_refcount();\n+  _simple_test_table.put(s, 55);\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n+\n+  \/\/ Deleting this value from a hashtable\n+  _simple_test_table.remove(s);\n+  \/\/ Now decrement the refcount for s since it's no longer in the table.\n+  s->decrement_refcount();\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n+}\n+\n+TEST_VM_F(SimpleResourceHashtableDeleteTest, simple_delete) {\n+  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n+  int s_orig_count = s->refcount();\n+  \/\/ Need to increment a Symbol* when you keep it in a table.\n+  s->increment_refcount();\n+  _simple_test_table.put(s, 66);\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n+\n+  \/\/ Use unlink to remove the matching (or all) values from the table.\n+  SimpleDeleter deleter;\n+  _simple_test_table.unlink(&deleter);\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n+}\n+\n+\/\/ More complicated ResourceHashtable with Symbol* as the key. Since the *same* Symbol is part\n+\/\/ of the value, it's not necessary to maniuplate the refcount of the key, but you must in the value.\n@@ -317,1 +366,1 @@\n-    \/\/ ResourceHashtable whose value is a copy of TestValue.\n+    \/\/ ResourceHashtable whose value is a *copy* of TestValue.\n@@ -323,1 +372,0 @@\n-          \/\/ decrement the refcount in key or not?\n@@ -338,3 +386,0 @@\n-          \/\/ decrement the refcount in key or not?\n-          \/\/ Since we incremented the key, in this case, we should decrement it.\n-          key->decrement_refcount();\n@@ -342,0 +387,2 @@\n+          \/\/ This will also potentially make the refcount of the Key = 0, but the\n+          \/\/ next thing that happens is that the hashtable node is deleted so this is ok.\n@@ -343,17 +390,0 @@\n-          \/\/ The risk is that if this is the last reference to the key, it'll be\n-          \/\/ pointed to in the table with refcount 0.\n-          \/\/ But the node is going to be deleted next anyway, so a pointer to dead data\n-          \/\/ is ok?\n-          return true;\n-        }\n-    };\n-\n-    \/\/ Simple ResourceHashtable whose value is an int\n-    ResourceHashtable<Symbol*, int, 107, ResourceObj::C_HEAP, mtTest> _simple_test_table;\n-\n-    class SimpleDeleter : public StackObj {\n-      public:\n-        bool do_entry(Symbol*& key, int value) {\n-          \/\/ We need to decrement the refcount for the key in the delete function.\n-          \/\/ Since we incremented the key, in this case, we should decrement it.\n-          key->decrement_refcount();\n@@ -365,28 +395,0 @@\n-TEST_VM_F(ResourceHashtableDeleteTest, simple_remove) {\n-  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n-  int s_orig_count = s->refcount();\n-  \/\/ Need to increment a Symbol* when you keep it in a table.\n-  s->increment_refcount();\n-  _simple_test_table.put(s, 55);\n-  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n-\n-  \/\/ Deleting this value from a hashtable\n-  _simple_test_table.remove(s);\n-  \/\/ Now decrement the refcount for s since it's no longer in the table.\n-  s->decrement_refcount();\n-  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n-}\n-\n-TEST_VM_F(ResourceHashtableDeleteTest, simple_delete) {\n-  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n-  int s_orig_count = s->refcount();\n-  \/\/ Need to increment a Symbol* when you keep it in a table.\n-  s->increment_refcount();\n-  _simple_test_table.put(s, 55);\n-  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n-\n-  \/\/ Use unlink to remove the matching (or all) values from the table.\n-  SimpleDeleter deleter;\n-  _simple_test_table.unlink(&deleter);\n-  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n-}\n@@ -399,3 +401,2 @@\n-    \/\/ If you use a Symbol* as key in the ResourceHashtable, you must increment the\n-    \/\/ refcount outside the hashtable functions.\n-    s->increment_refcount();\n+    \/\/ Since TestValue contains the pointer to the key, it will handle the\n+    \/\/ refcounting.\n@@ -403,1 +404,1 @@\n-    ASSERT_EQ(s->refcount(), s_orig_count + 3) << \"refcount incremented\";\n+    ASSERT_EQ(s->refcount(), s_orig_count + 2) << \"refcount incremented by copy\";\n@@ -405,1 +406,1 @@\n-  ASSERT_EQ(s->refcount(), s_orig_count + 2) << \"refcount not copied\";\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount incremented in table\";\n@@ -409,2 +410,0 @@\n-  \/\/ Now decrement the refcount for s since it's no longer in the table.\n-  s->decrement_refcount();\n@@ -412,1 +411,1 @@\n-  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount now decremented\";\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be as we started\";\n@@ -420,2 +419,2 @@\n-    \/\/ On the other hand, if the Key Symbol* is already a member of the entry, it's not strictly\n-    \/\/ necessary to increment the refcount on the symbol.\n+    \/\/ Same as above, but the do_entry does nothing because the value is deleted when the\n+    \/\/ hashtable node is deleted.\n@@ -423,1 +422,1 @@\n-    ASSERT_EQ(d->refcount(), d_orig_count + 2) << \"refcount incremented\";\n+    ASSERT_EQ(d->refcount(), d_orig_count + 2) << \"refcount incremented by copy\";\n@@ -425,1 +424,1 @@\n-  ASSERT_EQ(d->refcount(), d_orig_count + 1) << \"refcount incremented\";\n+  ASSERT_EQ(d->refcount(), d_orig_count + 1) << \"refcount incremented in table\";\n@@ -436,3 +435,2 @@\n-    \/\/ If you use a Symbol* as key in the ResourceHashtable, you must increment the\n-    \/\/ refcount outside the hashtable functions.\n-    s->increment_refcount();\n+    \/\/ Again since TestValue contains the pointer to the key Symbol, it will\n+    \/\/ handle the refcounting.\n@@ -440,1 +438,1 @@\n-    ASSERT_EQ(s->refcount(), s_orig_count + 2) << \"refcount incremented\";\n+    ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount incremented by allocation\";\n@@ -442,1 +440,1 @@\n-  ASSERT_EQ(s->refcount(), s_orig_count + 2) << \"refcount not copied\";\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount incremented in table\";\n@@ -449,1 +447,1 @@\n-  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount now decremented\";\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be as we started\";\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":66,"deletions":68,"binary":false,"changes":134,"status":"modified"}]}