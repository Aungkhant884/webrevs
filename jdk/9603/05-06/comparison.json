{"files":[{"patch":"@@ -351,0 +351,12 @@\n+    \/\/ Simple ResourceHashtable whose value is an int\n+    ResourceHashtable<Symbol*, int, 107, ResourceObj::C_HEAP, mtTest> _simple_test_table;\n+\n+    class SimpleDeleter : public StackObj {\n+      public:\n+        bool do_entry(Symbol*& key, int value) {\n+          \/\/ We need to decrement the refcount for the key in the delete function.\n+          \/\/ Since we incremented the key, in this case, we should decrement it.\n+          key->decrement_refcount();\n+          return true;\n+        }\n+    };\n@@ -353,1 +365,30 @@\n-TEST_VM_F(ResourceHashtableDeleteTest, check_delete) {\n+TEST_VM_F(ResourceHashtableDeleteTest, simple_remove) {\n+  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n+  int s_orig_count = s->refcount();\n+  \/\/ Need to increment a Symbol* when you keep it in a table.\n+  s->increment_refcount();\n+  _simple_test_table.put(s, 55);\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n+\n+  \/\/ Deleting this value from a hashtable\n+  _simple_test_table.remove(s);\n+  \/\/ Now decrement the refcount for s since it's no longer in the table.\n+  s->decrement_refcount();\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n+}\n+\n+TEST_VM_F(ResourceHashtableDeleteTest, simple_delete) {\n+  TempNewSymbol s = SymbolTable::new_symbol(\"abcdefg_simple\");\n+  int s_orig_count = s->refcount();\n+  \/\/ Need to increment a Symbol* when you keep it in a table.\n+  s->increment_refcount();\n+  _simple_test_table.put(s, 55);\n+  ASSERT_EQ(s->refcount(), s_orig_count + 1) << \"refcount should be incremented in table\";\n+\n+  \/\/ Use unlink to remove the matching (or all) values from the table.\n+  SimpleDeleter deleter;\n+  _simple_test_table.unlink(&deleter);\n+  ASSERT_EQ(s->refcount(), s_orig_count) << \"refcount should be same as start\";\n+}\n+\n+TEST_VM_F(ResourceHashtableDeleteTest, value_remove) {\n@@ -372,0 +413,1 @@\n+}\n@@ -373,0 +415,1 @@\n+TEST_VM_F(ResourceHashtableDeleteTest, value_delete) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"}]}