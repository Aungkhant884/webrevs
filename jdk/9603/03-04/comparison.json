{"files":[{"patch":"@@ -302,6 +302,11 @@\n-        TestValue& operator=(const TestValue& tv) {\n-          if (&tv != this) {\n-            _s = tv.s();\n-            _s->increment_refcount();\n-          }\n-          return *this; }\n+\n+        \/\/ Refcounting with assignment operators is tricky.  See TempNewSymbol for more information.\n+        \/\/ (1) A copy (from) of the argument is created to be passed by value to operator=.  This increments\n+        \/\/ the refcount of the symbol.\n+        \/\/ (2) Exchange the values this->_s and from._s as a trivial pointer exchange.  No reference count\n+        \/\/ manipulation occurs.  this->_s is the desired new value, with its refcount incremented appropriately\n+        \/\/ (by the copy that created from).\n+        \/\/ (3) The operation completes and from goes out of scope, calling its destructor.  This decrements the\n+        \/\/ refcount for from._s, which is the _old_ value of this->_s.\n+        TestValue& operator=(TestValue tv) { swap(_s, tv._s); return *this; }\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}