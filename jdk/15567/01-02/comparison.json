{"files":[{"patch":"@@ -78,4 +78,1 @@\n-        int i = 1;\n-        PoolEntry cpInfo;\n-        while (i < classFile.constantPool().entryCount()) {\n-            cpInfo = classFile.constantPool().entryByIndex(i);\n+        for (PoolEntry cpInfo : classFile.constantPool()) {\n@@ -85,1 +82,0 @@\n-            i += cpInfo.width();\n","filename":"test\/langtools\/tools\/javac\/7153958\/CPoolRefClassContainingInlinedCts.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -99,8 +100,3 @@\n-        for (int i = 1;\n-                i < constantPool.entryCount() - 1;\n-                i += constantPool.entryByIndex(i).width()) {\n-            for (int j = i + constantPool.entryByIndex(i).width();\n-                    j < constantPool.entryCount();\n-                    j += constantPool.entryByIndex(j).width()) {\n-                if (constantPool.entryByIndex(i).toString().\n-                        equals(constantPool.entryByIndex(j).toString())) {\n+        for (PoolEntry pe1 : constantPool) {\n+            for (PoolEntry pe2 : constantPool) {\n+                if (pe2.index() > pe1.index() && pe1.equals(pe2)) {\n@@ -109,1 +105,1 @@\n-                            i + \" and \" + j);\n+                            pe1.index() + \" and \" + pe2.index());\n","filename":"test\/langtools\/tools\/javac\/8000518\/DuplicateConstantPoolEntry.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -112,3 +112,2 @@\n-            ConstantPool cp = cf.constantPool();\n-            for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-                if (cp.entryByIndex(i) instanceof MethodRefEntry ref) {\n+            for (PoolEntry pe : cf.constantPool()) {\n+                if (pe instanceof MethodRefEntry ref) {\n","filename":"test\/langtools\/tools\/javac\/NoStringToLower.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-        ConstantPool cp = cf.constantPool();\n@@ -85,2 +84,2 @@\n-        for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-            if (cp.entryByIndex(i) instanceof MethodRefEntry methodRefEntry) {\n+        for (PoolEntry pe : cf.constantPool()) {\n+            if (pe instanceof MethodRefEntry methodRefEntry) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -500,2 +500,2 @@\n-            for (int i = 1; i < cm.constantPool().entryCount(); ++i) {\n-                if (cm.constantPool().entryByIndex(i) instanceof Utf8Entry entry) {\n+            for (PoolEntry pe : cm.constantPool()) {\n+                if (pe instanceof Utf8Entry entry) {\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-        for (int i = 1; i < pool.entryCount(); i += pool.entryByIndex(i).width()) {\n-            if (pool.entryByIndex(i) instanceof ClassEntry ce) {\n+        for (PoolEntry pe : pool) {\n+            if (pe instanceof ClassEntry ce) {\n","filename":"test\/langtools\/tools\/javac\/jvm\/ClassRefDupInConstantPoolTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constantPool().entryCount());\n+        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constantPool().size());\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -121,3 +122,2 @@\n-                ConstantPool cp = cf.constantPool();\n-                for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-                    if (cp.entryByIndex(i) instanceof ClassEntry clazz) {\n+                for (PoolEntry pe : cf.constantPool()) {\n+                    if (pe instanceof ClassEntry clazz) {\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1279,2 +1279,2 @@\n-                    for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n-                        if (classFile.constantPool().entryByIndex(i) instanceof FieldRefEntry fieldRefEntry) {\n+                    for (PoolEntry pe : classFile.constantPool()) {\n+                        if (pe instanceof FieldRefEntry fieldRefEntry) {\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}