{"files":[{"patch":"@@ -34,0 +34,1 @@\n+ * @jvms 4.4.1 The CONSTANT_Class_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ClassEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantDynamicEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n@@ -34,0 +36,1 @@\n+ * @jvms 4.4 The Constant Pool\n@@ -35,1 +38,1 @@\n-public sealed interface ConstantPool\n+public sealed interface ConstantPool extends Iterable<PoolEntry>\n@@ -42,0 +45,2 @@\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool, or is considered unusable\n@@ -46,1 +51,1 @@\n-     * {@return the number of entries in the constant pool}\n+     * {@return the size of the constant pool}\n@@ -48,1 +53,25 @@\n-    int entryCount();\n+    int size();\n+\n+    \/**\n+     * @{return an iterator over pool entries}\n+     *\/\n+    @Override\n+    default Iterator<PoolEntry> iterator() {\n+        return new Iterator<>() {\n+            int index = 1;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return index < size();\n+            }\n+\n+            @Override\n+            public PoolEntry next() {\n+                if (!hasNext()) throw new NoSuchElementException();\n+                var e = entryByIndex(index);\n+                index += e.width();\n+                return e;\n+            }\n+        };\n+    }\n+\n@@ -56,0 +85,2 @@\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         bootstrap methods\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPool.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DoubleEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FieldRefEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.4 The CONSTANT_Integer_info and CONSTANT_Float_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FloatEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.4 The CONSTANT_Integer_info and CONSTANT_Float_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/IntegerEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InterfaceMethodRefEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InvokeDynamicEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LongEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @jvms 4.4.8 The CONSTANT_MethodHandle_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodHandleEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodRefEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @jvms 4.4.9 The CONSTANT_MethodType_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodTypeEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.11 The CONSTANT_Module_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ModuleEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.6 The CONSTANT_NameAndType_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/NameAndTypeEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @jvms 4.4.12 The CONSTANT_Package_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PackageEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.3 The CONSTANT_String_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/StringEntry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @jvms 4.4.7 The CONSTANT_Utf8_info Structure\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/Utf8Entry.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -573,3 +573,2 @@\n-            for (int i = 1; i < cp.entryCount();) {\n-                var e = cp.entryByIndex(i);\n-                cpNode.with(new MapNodeImpl(FLOW, i)\n+            for (PoolEntry e : cp) {\n+                cpNode.with(new MapNodeImpl(FLOW, e.index())\n@@ -640,1 +639,0 @@\n-                i += e.width();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    public int entryCount() {\n+    public int size() {\n@@ -192,0 +192,3 @@\n+        if (index < 0 || index >= bootstrapMethodCount()) {\n+            throw new ConstantPoolException(\"Bad BSM index: \" + index);\n+        }\n@@ -315,0 +318,3 @@\n+            if (offset == 0) {\n+                throw new ConstantPoolException(\"Unusable CP index: \" + index);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -78,0 +79,1 @@\n+import jdk.internal.classfile.constantpool.ConstantPoolException;\n@@ -104,1 +106,1 @@\n-        this.parentSize = parent.entryCount();\n+        this.parentSize = parent.size();\n@@ -113,1 +115,1 @@\n-    public int entryCount() {\n+    public int size() {\n@@ -124,1 +126,4 @@\n-        return (index < parentSize)\n+        if (index <= 0 || index >= size()) {\n+            throw new ConstantPoolException(\"Bad CP index: \" + index);\n+        }\n+        PoolEntry pe = (index < parentSize)\n@@ -127,0 +132,4 @@\n+        if (pe == null) {\n+            throw new ConstantPoolException(\"Unusable CP index: \" + index);\n+        }\n+        return pe;\n@@ -131,0 +140,3 @@\n+        if (index < 0 || index >= bootstrapMethodCount()) {\n+            throw new ConstantPoolException(\"Bad BSM index: \" + index);\n+        }\n@@ -173,2 +185,2 @@\n-        if (entryCount() >= 65536) {\n-            throw new IllegalArgumentException(String.format(\"Constant pool is too large %d\", entryCount()));\n+        if (size() >= 65536) {\n+            throw new IllegalArgumentException(String.format(\"Constant pool is too large %d\", size()));\n@@ -176,1 +188,1 @@\n-        buf.writeU2(entryCount());\n+        buf.writeU2(size());\n@@ -179,1 +191,1 @@\n-            writeFrom = parent.entryCount();\n+            writeFrom = parent.size();\n@@ -181,1 +193,1 @@\n-        for (int i = writeFrom; i < entryCount(); ) {\n+        for (int i = writeFrom; i < size(); ) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-    public int entryCount() {\n+    public int size() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-            return cp.entryCount();\n+            return cp.size();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,3 +178,2 @@\n-                for (int i = 1; i < cm.constantPool().entryCount(); i += cm.constantPool().entryByIndex(i).width()) {\n-                    try {\n-                        PoolEntry info = cm.constantPool().entryByIndex(i);\n+                try {\n+                    for (PoolEntry info : cm.constantPool()) {\n@@ -188,2 +187,0 @@\n-                    } catch (ConstantPoolException ex) {\n-                        throw new IOException(ex);\n@@ -191,0 +188,2 @@\n+                } catch (ConstantPoolException ex) {\n+                    throw new IOException(ex);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        assertEquals(cp2.entryCount(), cp.entryCount(), \"Cloned constant pool must be same size\");\n+        assertEquals(cp2.size(), cp.size(), \"Cloned constant pool must be same size\");\n@@ -109,1 +109,1 @@\n-        for (int i = 1; i < cp.entryCount();) {\n+        for (int i = 1; i < cp.size();) {\n","filename":"test\/jdk\/jdk\/classfile\/ConstantPoolCopyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-        for (int i = 1; i < cp1.entryCount(); i += cp1.entryByIndex(i).width()) {\n+        for (int i = 1; i < cp1.size(); i += cp1.entryByIndex(i).width()) {\n@@ -257,3 +257,3 @@\n-        if (cp1.entryCount() != cp2.entryCount()) {\n-            StringBuilder failMsg = new StringBuilder(\"Extra entries in constant pool (\" + (cp2.entryCount() - cp1.entryCount()) + \"): \");\n-            for (int i = cp1.entryCount(); i < cp2.entryCount(); i += cp2.entryByIndex(i).width())\n+        if (cp1.size() != cp2.size()) {\n+            StringBuilder failMsg = new StringBuilder(\"Extra entries in constant pool (\" + (cp2.size() - cp1.size()) + \"): \");\n+            for (int i = cp1.size(); i < cp2.size(); i += cp2.entryByIndex(i).width())\n@@ -277,1 +277,1 @@\n-        for (int i = 1; i < pool.entryCount(); i += pool.entryByIndex(i).width()) {\n+        for (int i = 1; i < pool.size(); i += pool.entryByIndex(i).width()) {\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -190,2 +190,1 @@\n-        for (int i = 1; i < cp.entryCount(); i++) {\n-            PoolEntry entry = cp.entryByIndex(i);\n+        for (PoolEntry entry : cp) {\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,4 +78,1 @@\n-        int i = 1;\n-        PoolEntry cpInfo;\n-        while (i < classFile.constantPool().entryCount()) {\n-            cpInfo = classFile.constantPool().entryByIndex(i);\n+        for (PoolEntry cpInfo : classFile.constantPool()) {\n@@ -85,1 +82,0 @@\n-            i += cpInfo.width();\n","filename":"test\/langtools\/tools\/javac\/7153958\/CPoolRefClassContainingInlinedCts.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -99,8 +100,3 @@\n-        for (int i = 1;\n-                i < constantPool.entryCount() - 1;\n-                i += constantPool.entryByIndex(i).width()) {\n-            for (int j = i + constantPool.entryByIndex(i).width();\n-                    j < constantPool.entryCount();\n-                    j += constantPool.entryByIndex(j).width()) {\n-                if (constantPool.entryByIndex(i).toString().\n-                        equals(constantPool.entryByIndex(j).toString())) {\n+        for (PoolEntry pe1 : constantPool) {\n+            for (PoolEntry pe2 : constantPool) {\n+                if (pe2.index() > pe1.index() && pe1.equals(pe2)) {\n@@ -109,1 +105,1 @@\n-                            i + \" and \" + j);\n+                            pe1.index() + \" and \" + pe2.index());\n","filename":"test\/langtools\/tools\/javac\/8000518\/DuplicateConstantPoolEntry.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -112,3 +112,2 @@\n-            ConstantPool cp = cf.constantPool();\n-            for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-                if (cp.entryByIndex(i) instanceof MethodRefEntry ref) {\n+            for (PoolEntry pe : cf.constantPool()) {\n+                if (pe instanceof MethodRefEntry ref) {\n","filename":"test\/langtools\/tools\/javac\/NoStringToLower.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,2 +61,1 @@\n-        for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n-            PoolEntry pe = classFile.constantPool().entryByIndex(i);\n+        for (PoolEntry pe : classFile.constantPool()) {\n","filename":"test\/langtools\/tools\/javac\/T8011181\/EmptyUTF8ForInnerClassNameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-        ConstantPool cp = cf.constantPool();\n@@ -85,2 +84,2 @@\n-        for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-            if (cp.entryByIndex(i) instanceof MethodRefEntry methodRefEntry) {\n+        for (PoolEntry pe : cf.constantPool()) {\n+            if (pe instanceof MethodRefEntry methodRefEntry) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-            for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n-                if (classFile.constantPool().entryByIndex(i) instanceof ClassEntry classInfo\n+            for (PoolEntry pe : classFile.constantPool()) {\n+                if (pe instanceof ClassEntry classInfo\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -500,2 +500,2 @@\n-            for (int i = 1; i < cm.constantPool().entryCount(); ++i) {\n-                if (cm.constantPool().entryByIndex(i) instanceof Utf8Entry entry) {\n+            for (PoolEntry pe : cm.constantPool()) {\n+                if (pe instanceof Utf8Entry entry) {\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-        for (int i = 1; i < pool.entryCount(); i += pool.entryByIndex(i).width()) {\n-            if (pool.entryByIndex(i) instanceof ClassEntry ce) {\n+        for (PoolEntry pe : pool) {\n+            if (pe instanceof ClassEntry ce) {\n","filename":"test\/langtools\/tools\/javac\/jvm\/ClassRefDupInConstantPoolTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constantPool().entryCount());\n+        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constantPool().size());\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -121,3 +122,2 @@\n-                ConstantPool cp = cf.constantPool();\n-                for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n-                    if (cp.entryByIndex(i) instanceof ClassEntry clazz) {\n+                for (PoolEntry pe : cf.constantPool()) {\n+                    if (pe instanceof ClassEntry clazz) {\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1279,2 +1279,2 @@\n-                    for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n-                        if (classFile.constantPool().entryByIndex(i) instanceof FieldRefEntry fieldRefEntry) {\n+                    for (PoolEntry pe : classFile.constantPool()) {\n+                        if (pe instanceof FieldRefEntry fieldRefEntry) {\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-            for (int i = 1; i < cm.constantPool().entryCount(); ++i) {\n-                PoolEntry pe = cm.constantPool().entryByIndex(i);\n+            for (PoolEntry pe : cm.constantPool()) {\n","filename":"test\/langtools\/tools\/javac\/resolve\/NoObjectToString.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        for (int i = 1; i < cp.entryCount(); ++i) {\n-            if (cp.entryByIndex(i) instanceof ClassEntry ce) {\n+        for (PoolEntry pe : cp) {\n+            if (pe instanceof ClassEntry ce) {\n","filename":"test\/langtools\/tools\/javap\/classfile\/T6887895.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}