{"files":[{"patch":"@@ -161,2 +161,2 @@\n-  nonstatic_field(InstanceKlass,               _init_state,                                   InstanceKlass::ClassState)             \\\n-  nonstatic_field(InstanceKlass,               _init_thread,                                  Thread*)                               \\\n+  volatile_nonstatic_field(InstanceKlass,      _init_state,                                   InstanceKlass::ClassState)             \\\n+  volatile_nonstatic_field(InstanceKlass,      _init_thread,                                  JavaThread*)                           \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-             method->method_holder()->is_init_thread(Thread::current()),\n+             method->method_holder()->is_init_thread(JavaThread::current()),\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3357,1 +3357,1 @@\n-  return state_names[_init_state];\n+  return state_names[init_state()];\n@@ -3901,1 +3901,1 @@\n-  _init_state = state;\n+  Atomic::store(&_init_state, state);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  ClassState      _init_state;              \/\/ state of class\n+  volatile ClassState _init_state;          \/\/ state of class\n@@ -236,2 +236,2 @@\n-  Monitor*        _init_monitor;         \/\/ mutual exclusion to _init_state and _init_thread.\n-  Thread*         _init_thread;          \/\/ Pointer to current thread doing initialization (to handle recursive initialization)\n+  Monitor*             _init_monitor;       \/\/ mutual exclusion to _init_state and _init_thread.\n+  JavaThread* volatile _init_thread;        \/\/ Pointer to current thread doing initialization (to handle recursive initialization)\n@@ -514,1 +514,1 @@\n-  bool is_init_thread(Thread *thread)      { return thread == _init_thread; }\n+  bool is_init_thread(JavaThread *thread)  { return thread == Atomic::load(&_init_thread); }\n@@ -1080,3 +1080,4 @@\n-  void set_init_thread(Thread *thread)  {\n-    assert(thread == nullptr || _init_thread == nullptr, \"Only one thread is allowed to own initialization\");\n-    _init_thread = thread;\n+  void set_init_thread(JavaThread *thread)  {\n+    assert((thread == JavaThread::current() && _init_thread == nullptr) ||\n+           (thread == nullptr && _init_thread == JavaThread::current()), \"Only one thread is allowed to own initialization\");\n+    Atomic::store(&_init_thread, thread);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -238,2 +238,2 @@\n-  nonstatic_field(InstanceKlass,               _init_state,                                   InstanceKlass::ClassState)             \\\n-  nonstatic_field(InstanceKlass,               _init_thread,                                  Thread*)                               \\\n+  volatile_nonstatic_field(InstanceKlass,      _init_state,                                   InstanceKlass::ClassState)             \\\n+  volatile_nonstatic_field(InstanceKlass,      _init_thread,                                  JavaThread*)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}