{"files":[{"patch":"@@ -75,3 +75,3 @@\n-          \"For JVM internal testing only. Not available in \"                \\\n-          \"product builds. The \\\"archivedObjects\\\" static field \"           \\\n-          \"of the specified class is stored in the CDS archive heap\")       \\\n+          \"For JVM internal testing only. The static field named \"          \\\n+          \"\\\"archivedObjects\\\" of the specified class is stored in the \"    \\\n+          \"CDS archive heap\")                                               \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1531,0 +1531,1 @@\n+    ResourceMark rm; \/\/ for stringStream::as_string() etc.\n@@ -1662,4 +1663,2 @@\n-        for (int j = 0; j < name->utf8_length(); j++) {\n-          if (name->char_at(j) == '\/') {\n-            return false; \/\/ (A)\n-          }\n+        if (name->index_of_at(0, \"\/\", 1)  >= 0) {\n+          return false; \/\/ (A)\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,3 +120,4 @@\n-\/\/ Finds if the given string is a substring of this symbol's utf8 bytes.\n-\/\/ Return -1 on failure.  Otherwise return the first index where str occurs.\n-int Symbol::index_of_at(int i, const char* str, int len) const {\n+\/\/ Test if we have the give substring at or after the i-th char of this\n+\/\/ symbol's utf8 bytes.\n+\/\/ Return -1 on failure.  Otherwise return the first index where substr occurs.\n+int Symbol::index_of_at(int i, const char* substr, int substr_len) const {\n@@ -124,2 +125,2 @@\n-  if (len <= 0)  return 0;\n-  char first_char = str[0];\n+  if (substr_len <= 0)  return 0;\n+  char first_char = substr[0];\n@@ -127,1 +128,1 @@\n-  address limit = bytes + utf8_length() - len;  \/\/ inclusive limit\n+  address limit = bytes + utf8_length() - substr_len;  \/\/ inclusive limit\n@@ -136,3 +137,3 @@\n-    if (len <= 2\n-        ? (char) scan[len-1] == str[len-1]\n-        : memcmp(scan+1, str+1, len-1) == 0) {\n+    if (substr_len <= 2\n+        ? (char) scan[substr_len-1] == substr[substr_len-1]\n+        : memcmp(scan+1, substr+1, substr_len-1) == 0) {\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -243,2 +243,2 @@\n-  \/\/ Tests if the symbol starts with the given prefix.\n-  int index_of_at(int i, const char* str, int len) const;\n+  \/\/ Test if the symbol has the give substring at or after the i-th char.\n+  int index_of_at(int i, const char* substr, int substr_len) const;\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}