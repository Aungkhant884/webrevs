{"files":[{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public abstract class VectorBitCount {\n+    @Param({\"1024\"})\n+    public int SIZE;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private RandomGenerator rng = RandomGeneratorFactory.getDefault().create(seed);\n+    private int[] bufferRandInts;\n+    private long[] bufferRandLongs;\n+    private int[] bitCounts;\n+    @Setup\n+    public void init() {\n+       bufferRandInts = new int[SIZE];\n+       bufferRandLongs = new long[SIZE];\n+       bitCounts = new int[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            bufferRandInts[i] = rng.nextInt();\n+            bufferRandLongs[i] = rng.nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public int[] intBitCount() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bitCounts[i] = Integer.bitCount(bufferRandInts[i]);\n+        }\n+        return bitCounts;\n+    }\n+\n+    @Benchmark\n+    public int[] longBitCount() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bitCounts[i] = Long.bitCount(bufferRandLongs[i]);\n+        }\n+        return bitCounts;\n+    }\n+\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:+UseSuperWord\"\n+    })\n+    public static class WithSuperword extends VectorBitCount {\n+\n+    }\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:-UseSuperWord\"\n+    })\n+    public static class NoSuperword extends VectorBitCount {\n+    }\n+\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitCount.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}