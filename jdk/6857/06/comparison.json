{"files":[{"patch":"@@ -4832,0 +4832,8 @@\n+void Assembler::vpopcntq(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512_vpopcntdq(), \"must support vpopcntdq feature\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x55, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1872,0 +1872,1 @@\n+  void vpopcntq(XMMRegister dst, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1408,0 +1408,1 @@\n+    case Op_PopCountVL:\n@@ -8593,0 +8594,14 @@\n+instruct vpopcountL(vec dst, vec src) %{\n+  match(Set dst (PopCountVL src));\n+  format %{ \"vpopcntq  $dst,$src\\t! vector popcount packedL\" %}\n+  ins_encode %{\n+    assert(UsePopCountInstruction, \"not enabled\");\n+\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    __ vpopcntq($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+    __ evpmovqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -4238,1 +4238,1 @@\n-    \"FmaVD\",\"FmaVF\",\"PopCountVI\",\"VectorLongToMask\",\n+    \"FmaVD\",\"FmaVF\",\"PopCountVI\", \"PopCountVL\", \"VectorLongToMask\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -275,0 +275,1 @@\n+macro(PopCountVL)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2556,1 +2556,1 @@\n-                 opc == Op_PopCountI) {\n+                 opc == Op_PopCountI || Op_PopCountL) {\n@@ -2931,0 +2931,1 @@\n+\n@@ -2946,0 +2947,18 @@\n+\n+  if (VectorNode::is_vpopcnt_long(use)) {\n+    \/\/ VPOPCNT_LONG takes long and produces int - hence the special checks\n+    \/\/ on alignment and size.\n+    if (u_pk->size() != d_pk->size()) {\n+      return false;\n+    }\n+    for (uint i = 0; i < MIN2(d_pk->size(), u_pk->size()); i++) {\n+      Node* ui = u_pk->at(i);\n+      Node* di = d_pk->at(i);\n+      if (alignment(ui) * 2 != alignment(di)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+  case Op_PopCountL:\n+    return Op_PopCountVL;\n@@ -300,0 +302,10 @@\n+bool VectorNode::is_vpopcnt_long(Node* n) {\n+  if (n->Opcode() == Op_PopCountL) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+\n+\n+\n@@ -534,0 +546,1 @@\n+  case Op_PopCountVL: return new PopCountVLNode(n1, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+  static bool is_vpopcnt_long(Node* n);\n@@ -508,0 +509,8 @@\n+\/\/------------------------------PopCountVLNode---------------------------------\n+\/\/ Vector popcount long bits\n+class PopCountVLNode : public VectorNode {\n+ public:\n+  PopCountVLNode(Node* in, const TypeVect* vt) : VectorNode(in,vt) {}\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1770,0 +1770,1 @@\n+  declare_c2_type(PopCountVLNode, VectorNode)                             \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test vectorization of popcount for Long\n+* @requires vm.cpu.features ~= \".*avx512dq.*\"\n+* @library \/test\/lib \/\n+* @run driver compiler.vectorization.TestPopCountVectorLong\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+\n+public class TestPopCountVectorLong {\n+    private long[] input;\n+    private int[] output;\n+    private static final int LEN = 1024;\n+    private Random rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestPopCountVectorLong.class);\n+    }\n+\n+    public TestPopCountVectorLong() {\n+        input = new long[LEN];\n+        output = new int[LEN];\n+        rng = new Random(42);\n+        for (int i = 0; i < LEN; ++i) {\n+            input[i] = rng.nextLong();\n+        }\n+    }\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"PopCountVL\", \">= 1\"}) \/\/ Atleast one PopCountVL node is generated if vectorization is successful\n+    public void vectorizeBitCount() {\n+        for (int i = 0; i < LEN; ++i) {\n+            output[i] = Long.bitCount(input[i]);\n+        }\n+        checkResult();\n+    }\n+\n+    public void checkResult() {\n+        for (int i = 0; i < LEN; ++i) {\n+            int expected = Long.bitCount(input[i]);\n+            if (output[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: output[\" + i + \"] = \" + output[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestPopCountVectorLong.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public abstract class VectorBitCount {\n+    @Param({\"1024\"})\n+    public int SIZE;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private RandomGenerator rng = RandomGeneratorFactory.getDefault().create(seed);\n+    private int[] bufferRandInts;\n+    private long[] bufferRandLongs;\n+    private int[] bitCounts;\n+    @Setup\n+    public void init() {\n+       bufferRandInts = new int[SIZE];\n+       bufferRandLongs = new long[SIZE];\n+       bitCounts = new int[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            bufferRandInts[i] = rng.nextInt();\n+            bufferRandLongs[i] = rng.nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public int[] intBitCount() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bitCounts[i] = Integer.bitCount(bufferRandInts[i]);\n+        }\n+        return bitCounts;\n+    }\n+\n+    @Benchmark\n+    public int[] longBitCount() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bitCounts[i] = Long.bitCount(bufferRandLongs[i]);\n+        }\n+        return bitCounts;\n+    }\n+\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:+UseSuperWord\"\n+    })\n+    public static class WithSuperword extends VectorBitCount {\n+\n+    }\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:-UseSuperWord\"\n+    })\n+    public static class NoSuperword extends VectorBitCount {\n+    }\n+\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitCount.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}