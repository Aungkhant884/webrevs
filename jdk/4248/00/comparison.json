{"files":[{"patch":"@@ -52,0 +52,2 @@\n+\n+  \/\/ The remembered set needs the heap regions set up.\n@@ -53,0 +55,6 @@\n+  \/\/ Needs remembered set initialization as the ergonomics are based\n+  \/\/ on it.\n+  if (FLAG_IS_DEFAULT(G1EagerReclaimRemSetThreshold)) {\n+      guarantee(G1RSetSparseRegionEntries > 0, \"\");\n+    FLAG_SET_ERGO(G1EagerReclaimRemSetThreshold, G1RSetSparseRegionEntries);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2641,1 +2641,1 @@\n-         rem_set->occupancy_less_or_equal_than(G1RSetSparseRegionEntries) :\n+         rem_set->occupancy_less_or_equal_than(G1EagerReclaimRemSetThreshold) :\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1287,1 +1287,1 @@\n-      guarantee(r->rem_set()->occupancy_less_or_equal_than(G1RSetSparseRegionEntries),\n+      guarantee(r->rem_set()->occupancy_less_or_equal_than(G1EagerReclaimRemSetThreshold),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,0 +243,5 @@\n+  product(uint, G1EagerReclaimRemSetThreshold, 0, EXPERIMENTAL,             \\\n+          \"Maximum number of remembered set entries a humongous region \"    \\\n+          \"otherwise eligible for eager reclaim may have to be a candidate \"\\\n+          \"for eager reclaim. Will be selected ergonomically by default.\")  \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}