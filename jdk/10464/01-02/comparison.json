{"files":[{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+\/**\n+ * Common library for various test file utility functions.\n+ *\/\n+public final class FileChannelUtils {\n+\n+    public static Path createSparseTempFile(String prefix, String suffix) throws IOException {\n+        Path file = Files.createTempFile(prefix, suffix);\n+        Files.delete(file); \/\/ need CREATE_NEW to make the file sparse\n+\n+        FileChannel fc = FileChannel.open(file, CREATE_NEW, SPARSE, WRITE);\n+        fc.close();\n+        return file;\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/FileChannelUtils.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.test.lib.util.FileUtils;\n@@ -33,1 +32,0 @@\n-import java.nio.file.Files;\n@@ -48,0 +46,1 @@\n+ * @build jdk.test.lib.RandomFactory FileChannelUtils\n@@ -49,0 +48,1 @@\n+ * @key randomness\n@@ -63,1 +63,1 @@\n-        Path p = FileUtils.createSparseTempFile(\"test\", \".dat\");\n+        Path p = FileChannelUtils.createSparseTempFile(\"test\", \".dat\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeMapTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.Platform jdk.test.lib.RandomFactory FileChannelUtils\n@@ -31,0 +31,1 @@\n+ * @key randomness\n@@ -43,1 +44,0 @@\n-import java.nio.file.StandardOpenOption;\n@@ -50,1 +50,2 @@\n-import jdk.test.lib.util.FileUtils;\n+\n+import static java.nio.file.StandardOpenOption.*;\n@@ -59,1 +60,1 @@\n-        Path src = FileUtils.createSparseTempFile(\"src\", \".dat\");\n+        Path src = FileChannelUtils.createSparseTempFile(\"src\", \".dat\");\n@@ -81,1 +82,1 @@\n-        try (FileChannel fc = FileChannel.open(src, StandardOpenOption.WRITE)) {\n+        try (FileChannel fc = FileChannel.open(src, WRITE)) {\n@@ -97,2 +98,1 @@\n-            try (FileChannel dstCh = FileChannel.open(dst,\n-                 StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+            try (FileChannel dstCh = FileChannel.open(dst, READ, WRITE)) {\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer2GPlus.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/test\/lib\n+ * @build FileChannelUtils\n@@ -39,1 +39,0 @@\n-import java.nio.file.StandardOpenOption;\n@@ -42,1 +41,0 @@\n-import jdk.test.lib.util.FileUtils;\n@@ -45,0 +43,2 @@\n+import static java.nio.file.StandardOpenOption.*;\n+\n@@ -53,1 +53,1 @@\n-        Path source = FileUtils.createSparseTempFile(\"blah\", null);\n+        Path source = FileChannelUtils.createSparseTempFile(\"blah\", null);\n@@ -59,2 +59,1 @@\n-        try (FileChannel fc = FileChannel.open(source,\n-                StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+        try (FileChannel fc = FileChannel.open(source, READ, WRITE)) {\n@@ -70,4 +69,2 @@\n-        try (FileChannel sourceChannel = FileChannel.open(source,\n-                     StandardOpenOption.READ);\n-             FileChannel sinkChannel = FileChannel.open(sink,\n-                     StandardOpenOption.WRITE)) {\n+        try (FileChannel sourceChannel = FileChannel.open(source, READ);\n+             FileChannel sinkChannel = FileChannel.open(sink, WRITE)) {\n@@ -96,1 +93,1 @@\n-        Path sink = FileUtils.createSparseTempFile(\"sink\", null);\n+        Path sink = FileChannelUtils.createSparseTempFile(\"sink\", null);\n@@ -99,1 +96,1 @@\n-        try (FileChannel fc = FileChannel.open(sink, StandardOpenOption.WRITE)){\n+        try (FileChannel fc = FileChannel.open(sink, WRITE)){\n@@ -114,2 +111,2 @@\n-        try (FileChannel sourceChannel = FileChannel.open(source, StandardOpenOption.READ);\n-             FileChannel sinkChannel = FileChannel.open(sink, StandardOpenOption.WRITE)) {\n+        try (FileChannel sourceChannel = FileChannel.open(source, READ);\n+             FileChannel sinkChannel = FileChannel.open(sink, WRITE)) {\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer4GBFile.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/test\/lib\n+ * @build FileChannelUtils\n@@ -41,1 +41,0 @@\n-import java.nio.file.StandardOpenOption;\n@@ -44,1 +43,0 @@\n-import jdk.test.lib.util.FileUtils;\n@@ -47,0 +45,2 @@\n+import static java.nio.file.StandardOpenOption.*;\n+\n@@ -58,1 +58,1 @@\n-        Path file = FileUtils.createSparseTempFile(\"source\", null);\n+        Path file = FileChannelUtils.createSparseTempFile(\"source\", null);\n@@ -63,2 +63,1 @@\n-        FileChannel fc = FileChannel.open(file,\n-                StandardOpenOption.READ, StandardOpenOption.WRITE);\n+        FileChannel fc = FileChannel.open(file, READ, WRITE);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferTo6GBFile.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.nio.channels.FileChannel;\n@@ -40,1 +39,0 @@\n-import java.nio.file.StandardOpenOption;\n@@ -430,11 +428,0 @@\n-\n-    public static Path createSparseTempFile(String prefix, String suffix) throws IOException {\n-        Path file = Files.createTempFile(prefix, suffix);\n-        Files.delete(file); \/\/ need CREATE_NEW to make the file sparse\n-\n-        FileChannel fc = FileChannel.open(file,\n-                StandardOpenOption.CREATE_NEW, StandardOpenOption.SPARSE,\n-                StandardOpenOption.WRITE);\n-        fc.close();\n-        return file;\n-    }\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"}]}