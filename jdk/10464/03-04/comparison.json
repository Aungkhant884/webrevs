{"files":[{"patch":"@@ -63,2 +63,1 @@\n-        FileChannel fc = FileChannel.open(file, READ, WRITE);\n-        try {\n+        try (FileChannel fc = FileChannel.open(file, READ, WRITE)) {\n@@ -69,5 +68,0 @@\n-        } catch (IOException x) {\n-            err.println(\"  Unable to create test file:\" + x);\n-            fc.close();\n-            return;\n-        }\n@@ -75,64 +69,64 @@\n-        \/\/ Setup looback connection and echo server\n-\n-        ServerSocketChannel ssc = ServerSocketChannel.open();\n-        ssc.socket().bind(new InetSocketAddress(0));\n-\n-        InetAddress lh = InetAddress.getLocalHost();\n-        InetSocketAddress isa = new InetSocketAddress(lh, ssc.socket().getLocalPort());\n-        SocketChannel source = SocketChannel.open(isa);\n-        SocketChannel sink = ssc.accept();\n-\n-        Thread thr = new Thread(new EchoServer(sink));\n-        thr.start();\n-\n-        \/\/ Test data is array of positions and counts\n-\n-        long testdata[][] = {\n-            { 2*G-1,    1 },\n-            { 2*G-1,    10 },       \/\/ across 2GB boundary\n-            { 2*G,      1 },\n-            { 2*G,      10 },\n-            { 2*G+1,    1 },\n-            { 4*G-1,    1 },\n-            { 4*G-1,    10 },       \/\/ across 4GB boundary\n-            { 4*G,      1 },\n-            { 4*G,      10 },\n-            { 4*G+1,    1 },\n-            { 5*G-1,    1 },\n-            { 5*G-1,    10 },\n-            { 5*G,      1 },\n-            { 5*G,      10 },\n-            { 5*G+1,    1 },\n-            { 6*G,      1 },\n-        };\n-\n-        ByteBuffer sendbuf = ByteBuffer.allocateDirect(100);\n-        ByteBuffer readbuf = ByteBuffer.allocateDirect(100);\n-\n-        try {\n-            byte value = 0;\n-            for (int i=0; i<testdata.length; i++) {\n-                long position = testdata[(int)i][0];\n-                long count = testdata[(int)i][1];\n-\n-                \/\/ generate bytes\n-                for (long j=0; j<count; j++) {\n-                    sendbuf.put(++value);\n-                }\n-                sendbuf.flip();\n-\n-                \/\/ write to file and transfer to echo server\n-                fc.write(sendbuf, position);\n-                t0 = System.nanoTime();\n-                fc.transferTo(position, count, source);\n-                out.printf(\"  transferTo(%d, %2d, source): %d ns%n\",\n-                    position, count, System.nanoTime() - t0);\n-\n-                \/\/ read from echo server\n-                long nread = 0;\n-                while (nread < count) {\n-                    int n = source.read(readbuf);\n-                    if (n < 0)\n-                        throw new RuntimeException(\"Premature EOF!\");\n-                    nread += n;\n-                }\n+            \/\/ Setup looback connection and echo server\n+\n+            ServerSocketChannel ssc = ServerSocketChannel.open();\n+            ssc.socket().bind(new InetSocketAddress(0));\n+\n+            InetAddress lh = InetAddress.getLocalHost();\n+            InetSocketAddress isa = new InetSocketAddress(lh, ssc.socket().getLocalPort());\n+            SocketChannel source = SocketChannel.open(isa);\n+            SocketChannel sink = ssc.accept();\n+\n+            Thread thr = new Thread(new EchoServer(sink));\n+            thr.start();\n+\n+            \/\/ Test data is array of positions and counts\n+\n+            long testdata[][] = {\n+                { 2*G-1,    1 },\n+                { 2*G-1,    10 },       \/\/ across 2GB boundary\n+                { 2*G,      1 },\n+                { 2*G,      10 },\n+                { 2*G+1,    1 },\n+                { 4*G-1,    1 },\n+                { 4*G-1,    10 },       \/\/ across 4GB boundary\n+                { 4*G,      1 },\n+                { 4*G,      10 },\n+                { 4*G+1,    1 },\n+                { 5*G-1,    1 },\n+                { 5*G-1,    10 },\n+                { 5*G,      1 },\n+                { 5*G,      10 },\n+                { 5*G+1,    1 },\n+                { 6*G,      1 },\n+            };\n+\n+            ByteBuffer sendbuf = ByteBuffer.allocateDirect(100);\n+            ByteBuffer readbuf = ByteBuffer.allocateDirect(100);\n+\n+            try {\n+                byte value = 0;\n+                for (int i=0; i<testdata.length; i++) {\n+                    long position = testdata[(int)i][0];\n+                    long count = testdata[(int)i][1];\n+\n+                    \/\/ generate bytes\n+                    for (long j=0; j<count; j++) {\n+                        sendbuf.put(++value);\n+                    }\n+                    sendbuf.flip();\n+\n+                    \/\/ write to file and transfer to echo server\n+                    fc.write(sendbuf, position);\n+                    t0 = System.nanoTime();\n+                    fc.transferTo(position, count, source);\n+                    out.printf(\"  transferTo(%d, %2d, source): %d ns%n\",\n+                        position, count, System.nanoTime() - t0);\n+\n+                    \/\/ read from echo server\n+                    long nread = 0;\n+                    while (nread < count) {\n+                        int n = source.read(readbuf);\n+                        if (n < 0)\n+                            throw new RuntimeException(\"Premature EOF!\");\n+                        nread += n;\n+                    }\n@@ -140,7 +134,11 @@\n-                \/\/ check reply from echo server\n-                readbuf.flip();\n-                sendbuf.flip();\n-                if (!readbuf.equals(sendbuf))\n-                    throw new RuntimeException(\"Echoed bytes do not match!\");\n-                readbuf.clear();\n-                sendbuf.clear();\n+                    \/\/ check reply from echo server\n+                    readbuf.flip();\n+                    sendbuf.flip();\n+                    if (!readbuf.equals(sendbuf))\n+                        throw new RuntimeException(\"Echoed bytes do not match!\");\n+                    readbuf.clear();\n+                    sendbuf.clear();\n+                }\n+            } finally {\n+                source.close();\n+                ssc.close();\n@@ -148,5 +146,0 @@\n-        } finally {\n-            source.close();\n-            ssc.close();\n-            fc.close();\n-            Files.delete(file);\n@@ -154,0 +147,1 @@\n+        Files.delete(file);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferTo6GBFile.java","additions":77,"deletions":83,"binary":false,"changes":160,"status":"modified"}]}