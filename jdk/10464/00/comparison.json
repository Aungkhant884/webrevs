{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.io.File;\n@@ -31,0 +30,1 @@\n+import java.nio.file.Files;\n@@ -32,0 +32,3 @@\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -41,1 +44,1 @@\n- * @run main\/othervm\/timeout=240 LargeMapTest\n+ * @run main\/othervm LargeMapTest\n@@ -44,4 +47,3 @@\n-    private static final String FILE = \"test.dat\";\n-    private static final long LENGTH = 8000000000L;\n-    private static final long OFFSET = 3704800000L;\n-    private static final int  BUFSIZ = 100000;\n+    private static final long LENGTH = (1L << 32) + 512;\n+    private static final int  EXTRA  = 1024;\n+    private static final long BASE   = LENGTH - EXTRA;\n@@ -54,1 +56,4 @@\n-        Path p = Path.of(FILE);\n+        System.out.println(\"  Writing large file...\");\n+        long t0 = System.nanoTime();\n+        Path p = Files.createTempFile(\"test\", \".dat\");\n+        Files.delete(p); \/\/ re-create as sparse\n@@ -56,3 +61,11 @@\n-        try (FileChannel fc = FileChannel.open(p, CREATE, WRITE)) {\n-            fc.position(LENGTH - 1);\n-            fc.write(ByteBuffer.wrap(new byte[] {27}));\n+        ByteBuffer bb;\n+        try (FileChannel fc = FileChannel.open(p, CREATE_NEW, SPARSE, WRITE)) {\n+            fc.position(BASE);\n+            Random r = new Random(System.nanoTime());\n+            byte[] b = new byte[EXTRA];\n+            r.nextBytes(b);\n+            bb = ByteBuffer.wrap(b);\n+            fc.write(bb);\n+            long t1 = System.nanoTime();\n+            System.out.printf(\"  Wrote large file in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n@@ -60,0 +73,1 @@\n+        bb.rewind();\n@@ -61,5 +75,1 @@\n-        long offset = OFFSET;\n-        ByteBuffer bb = ByteBuffer.allocateDirect(BUFSIZ);\n-\n-        try (FileChannel fc = FileChannel.open(p, READ, WRITE);) {\n-            MemorySegment mbb = MemorySegment.ofBuffer(bb);\n+        try (FileChannel fc = FileChannel.open(p, READ, WRITE)) {\n@@ -69,8 +79,3 @@\n-\n-            final int interval = BUFSIZ*1000;\n-            while (offset < LENGTH) {\n-                if (offset % interval == 0)\n-                    System.out.println(\"offset: \" + offset);\n-                MemorySegment target = mappedMemorySegment.asSlice(offset, BUFSIZ);\n-                offset = offset + BUFSIZ;\n-                target.copyFrom(mbb);\n+            MemorySegment target = mappedMemorySegment.asSlice(BASE, EXTRA);\n+            if (!target.asByteBuffer().equals(bb)) {\n+                throw new RuntimeException(\"Expected buffers to be equal\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeMapTest.java","additions":28,"deletions":23,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -59,0 +60,1 @@\n+        long t0 = System.nanoTime();\n@@ -60,0 +62,4 @@\n+        long t1 = System.nanoTime();\n+        out.printf(\"Test file %s initialized in %d ns (%d ms) %n\",\n+                blah, t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+        t0 = t1;\n@@ -61,1 +67,0 @@\n-            out.println(\"Test file \" + blah + \" initialized\");\n@@ -63,1 +68,4 @@\n-            out.println(\"Zero size: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"Zero size: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+            t0 = t1;\n@@ -65,1 +73,4 @@\n-            out.println(\"Read: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"Read: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+            t0 = t1;\n@@ -67,1 +78,4 @@\n-            out.println(\"Write: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"Write: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+            t0 = t1;\n@@ -69,1 +83,4 @@\n-            out.println(\"High offset: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"High offset: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+            t0 = t1;\n@@ -71,1 +88,4 @@\n-            out.println(\"Force: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"Force: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+            t0 = t1;\n@@ -73,1 +93,3 @@\n-            out.println(\"Exceptions: OK\");\n+            t1 = System.nanoTime();\n+            out.printf(\"Exceptions: done in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n@@ -198,15 +220,11 @@\n-        for (int x=0; x<50; x++) {\n-            try (RandomAccessFile raf = new RandomAccessFile(blah, \"rw\")) {\n-                FileChannel fc = raf.getChannel();\n-                final int BLOCK_SIZE = 64;\n-                final int BLOCK_COUNT = (4096 * 2)\/ BLOCK_SIZE;\n-                int offset = 0;\n-                MappedByteBuffer b = fc.map(MapMode.READ_WRITE,\n-                                            0, BLOCK_SIZE * (BLOCK_COUNT + 1));\n-\n-                for (int blocks = 0; blocks < BLOCK_COUNT; blocks++) {\n-                    for (int i = 0; i < BLOCK_SIZE; i++) {\n-                        b.put(offset + i, (byte)('0' + i));\n-                    }\n-                    b.force(offset, BLOCK_SIZE);\n-                    offset += BLOCK_SIZE;\n+        try (RandomAccessFile raf = new RandomAccessFile(blah, \"rw\")) {\n+            FileChannel fc = raf.getChannel();\n+            final int BLOCK_SIZE = 64;\n+            final int BLOCK_COUNT = (4096 * 2)\/ BLOCK_SIZE;\n+            int offset = 0;\n+            MappedByteBuffer b = fc.map(MapMode.READ_WRITE,\n+                                        0, BLOCK_SIZE * (BLOCK_COUNT + 1));\n+\n+            for (int blocks = 0; blocks < BLOCK_COUNT; blocks++) {\n+                for (int i = 0; i < BLOCK_SIZE; i++) {\n+                    b.put(offset + i, (byte)('0' + i));\n@@ -214,0 +232,3 @@\n+                b.force(offset, BLOCK_SIZE);\n+                offset += BLOCK_SIZE;\n+            }\n@@ -215,10 +236,10 @@\n-                Exception exc = null;\n-                try {\n-                    \/\/ start and end are out of range\n-                    b.force(offset + BLOCK_SIZE, BLOCK_SIZE);\n-                } catch (IndexOutOfBoundsException e) {\n-                    exc = e;\n-                }\n-                if (exc == null) {\n-                    throw new RuntimeException(\"expected Exception for force beyond buffer extent\");\n-                }\n+            Exception exc = null;\n+            try {\n+                \/\/ start and end are out of range\n+                b.force(offset + BLOCK_SIZE, BLOCK_SIZE);\n+            } catch (IndexOutOfBoundsException e) {\n+                exc = e;\n+            }\n+            if (exc == null) {\n+                throw new RuntimeException(\"expected Exception for force beyond buffer extent\");\n+            }\n@@ -226,10 +247,9 @@\n-                exc = null;\n-                try {\n-                    \/\/ start is in range but end is out of range\n-                    b.force(offset, 2 * BLOCK_SIZE);\n-                } catch (IndexOutOfBoundsException e) {\n-                    exc = e;\n-                }\n-                if (exc == null) {\n-                    throw new RuntimeException(\"expected Exception for force beyond write limit\");\n-                }\n+            exc = null;\n+            try {\n+                \/\/ start is in range but end is out of range\n+                b.force(offset, 2 * BLOCK_SIZE);\n+            } catch (IndexOutOfBoundsException e) {\n+                exc = e;\n+            }\n+            if (exc == null) {\n+                throw new RuntimeException(\"expected Exception for force beyond write limit\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/MapTest.java","additions":62,"deletions":42,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+import java.util.concurrent.TimeUnit;\n+\n@@ -56,0 +58,1 @@\n+        Files.delete(src); \/\/ need CREATE_NEW to make the file sparse\n@@ -57,0 +60,1 @@\n+        long t0 = System.nanoTime();\n@@ -58,0 +62,4 @@\n+        long t1 = System.nanoTime();\n+        System.out.printf(\"  Wrote large file in %d ns (%d ms) %n\",\n+                t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+        t0 = t1;\n@@ -59,0 +67,4 @@\n+        t1 = System.nanoTime();\n+        System.out.printf(\"  Copied to file channel in %d ns (%d ms) %n\",\n+                t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+        t0 = t1;\n@@ -60,0 +72,3 @@\n+        t1 = System.nanoTime();\n+        System.out.printf(\"  Copied to byte channel in %d ns (%d ms) %n\",\n+                t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n@@ -65,8 +80,9 @@\n-        RandomAccessFile raf = new RandomAccessFile(src.toString(), \"rw\");\n-        raf.setLength(LENGTH);\n-        raf.seek(BASE);\n-        Random r = new Random(System.nanoTime());\n-        byte[] b = new byte[EXTRA];\n-        r.nextBytes(b);\n-        raf.write(b);\n-        return b;\n+        try (FileChannel fc = FileChannel.open(src, StandardOpenOption.CREATE_NEW,\n+                StandardOpenOption.SPARSE, StandardOpenOption.WRITE)) {\n+            fc.position(BASE);\n+            Random r = new Random(System.nanoTime());\n+            byte[] b = new byte[EXTRA];\n+            r.nextBytes(b);\n+            fc.write(ByteBuffer.wrap(b));\n+            return b;\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer2GPlus.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+        source.delete(); \/\/ need CREATE_NEW to make the file sparse\n@@ -57,3 +58,1 @@\n-        initTestFile(source, 10);\n-        RandomAccessFile raf = new RandomAccessFile(source, \"rw\");\n-        FileChannel fc = raf.getChannel();\n+\n@@ -62,7 +61,8 @@\n-        fc.write(ByteBuffer.wrap(\"Use the source!\".getBytes()), testSize - 40);\n-        long t1 = System.nanoTime();\n-        out.printf(\"  Wrote large file in %d ns (%d ms) %n\",\n-            t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n-\n-        fc.close();\n-        raf.close();\n+        try (FileChannel fc = FileChannel.open(source.toPath(),\n+                StandardOpenOption.CREATE_NEW, StandardOpenOption.SPARSE,\n+                StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+            fc.write(ByteBuffer.wrap(\"Use the source!\".getBytes()), testSize - 40);\n+            long t1 = System.nanoTime();\n+            out.printf(\"  Wrote large file in %d ns (%d ms) %n\",\n+                    t1 - t0, TimeUnit.NANOSECONDS.toMillis(t1 - t0));\n+        }\n@@ -76,1 +76,1 @@\n-        raf = new RandomAccessFile(sink, \"rw\");\n+        RandomAccessFile raf = new RandomAccessFile(sink, \"rw\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer4GBFile.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.io.RandomAccessFile;\n@@ -40,0 +39,1 @@\n+import java.nio.file.StandardOpenOption;\n@@ -57,0 +57,1 @@\n+        file.delete(); \/\/ need CREATE_NEW to make the file sparse\n@@ -59,3 +60,0 @@\n-        RandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n-        FileChannel fc = raf.getChannel();\n-\n@@ -64,0 +62,3 @@\n+        FileChannel fc = FileChannel.open(file.toPath(),\n+                StandardOpenOption.CREATE_NEW, StandardOpenOption.SPARSE,\n+                StandardOpenOption.READ, StandardOpenOption.WRITE);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferTo6GBFile.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}