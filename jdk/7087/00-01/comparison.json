{"files":[{"patch":"@@ -414,28 +414,0 @@\n-\/\/ Assumes that only the end changes (the bottom\/start stays the same). This\n-\/\/ allows identification of the region that is being resized.\n-void PSCardTable::resize_covered_region(MemRegion new_region) {\n-  for (int i = 0; i < _cur_covered_regions; i++) {\n-    if (_covered[i].start() == new_region.start()) {\n-      \/\/ Found a covered region with the same start as the\n-      \/\/ new region.  The region is growing or shrinking\n-      \/\/ from the start of the region.\n-      resize_covered_region_by_start(new_region);\n-      return;\n-    }\n-    if (_covered[i].start() > new_region.start()) {\n-      break;\n-    }\n-  }\n-\n-  \/\/ This should only be a new covered region (where no existing\n-  \/\/ covered region matches at the start).\n-  assert(_cur_covered_regions < _max_covered_regions,\n-    \"An existing region should have been found\");\n-  resize_covered_region_by_start(new_region);\n-}\n-\n-void PSCardTable::resize_covered_region_by_start(MemRegion new_region) {\n-  CardTable::resize_covered_region(new_region);\n-  debug_only(verify_guard();)\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -79,7 +79,0 @@\n-  \/\/ Adaptive size policy support\n-  \/\/ Allows adjustment of the base and size of the covered regions\n-  void resize_covered_region(MemRegion new_region);\n-  \/\/ Finds the covered region to resize based on the start address\n-  \/\/ of the covered regions.\n-  void resize_covered_region_by_start(MemRegion new_region);\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}