{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n@@ -36,0 +38,1 @@\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -124,0 +127,48 @@\n+\n+    \/**\n+     * {@return a module export description}\n+     * @param exports the exported package\n+     * @param exportFlags the export flags, as a bitmask\n+     * @param exportsTo the modules to which this package is exported\n+     *\/\n+    static ModuleExportInfo of(PackageDesc exports, int exportFlags,\n+                               List<ModuleDesc> exportsTo) {\n+        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(exports.packageInternalName())),\n+                exportFlags,\n+                Util.moduleEntryList(exportsTo));\n+    }\n+\n+    \/**\n+     * {@return a module export description}\n+     * @param exports the exported package\n+     * @param exportFlags the export flags\n+     * @param exportsTo the modules to which this package is exported\n+     *\/\n+    static ModuleExportInfo of(PackageDesc exports, Collection<AccessFlag> exportFlags,\n+                               List<ModuleDesc> exportsTo) {\n+        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+    }\n+\n+    \/**\n+     * {@return a module export description}\n+     * @param exports the exported package\n+     * @param exportFlags the export flags, as a bitmask\n+     * @param exportsTo the modules to which this package is exported\n+     *\/\n+    static ModuleExportInfo of(PackageDesc exports,\n+                               int exportFlags,\n+                               ModuleDesc... exportsTo) {\n+        return of(exports, exportFlags, List.of(exportsTo));\n+    }\n+\n+    \/**\n+     * {@return a module export description}\n+     * @param exports the exported package\n+     * @param exportFlags the export flags\n+     * @param exportsTo the modules to which this package is exported\n+     *\/\n+    static ModuleExportInfo of(PackageDesc exports,\n+                               Collection<AccessFlag> exportFlags,\n+                               ModuleDesc... exportsTo) {\n+        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleExportInfo.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.jdktypes.PackageDesc;\n@@ -35,0 +37,1 @@\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -121,0 +124,48 @@\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageDesc opens, int opensFlags,\n+                             List<ModuleDesc> opensTo) {\n+        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(opens.packageInternalName())),\n+                opensFlags,\n+                Util.moduleEntryList(opensTo));\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageDesc opens, Collection<AccessFlag> opensFlags,\n+                             List<ModuleDesc> opensTo) {\n+        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageDesc opens,\n+                             int opensFlags,\n+                             ModuleDesc... opensTo) {\n+        return of(opens, opensFlags, List.of(opensTo));\n+    }\n+\n+    \/**\n+     * {@return a module open description}\n+     * @param opens the package to open\n+     * @param opensFlags the open flags\n+     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     *\/\n+    static ModuleOpenInfo of(PackageDesc opens,\n+                             Collection<AccessFlag> opensFlags,\n+                             ModuleDesc... opensTo) {\n+        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -38,0 +38,3 @@\n+import jdk.internal.classfile.constantpool.ModuleEntry;\n+import jdk.internal.classfile.jdktypes.ModuleDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -193,0 +196,8 @@\n+    public static List<ModuleEntry> moduleEntryList(List<? extends ModuleDesc> list) {\n+        var result = new Object[list.size()]; \/\/ null check\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(list.get(i).moduleName()));\n+        }\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(result);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}