{"files":[{"patch":"@@ -54,1 +54,1 @@\n-     * the processing option {@link Classfile.Option.Key#ATTRIBUTE_MAPPER}.\n+     * the processing option {@link Classfile.Option#attributeMapper(Function)}.\n@@ -58,8 +58,0 @@\n-    \/**\n-     * {@return the value corresponding to the specified processing option}\n-     *\n-     * @param option the option key to fetch\n-     * @param <T> the type of the option value (unchecked)\n-     *\/\n-    <T> T optionValue(Classfile.Option.Key option);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.classfile.impl.SplitConstantPool;\n@@ -66,11 +67,0 @@\n-        \/** {@return the option key} *\/\n-        Key key();\n-\n-        \/**\n-         * Key values for defined options.\n-         *\/\n-        enum Key {\n-            GENERATE_STACK_MAPS, PROCESS_DEBUG, PROCESS_LINE_NUMBERS, PROCESS_UNKNOWN_ATTRIBUTES,\n-            CP_SHARING, FIX_SHORT_JUMPS, PATCH_DEAD_CODE, HIERARCHY_RESOLVER, ATTRIBUTE_MAPPER,\n-            FILTER_DEAD_LABELS;\n-        }\n@@ -83,1 +73,1 @@\n-        static Option generateStackmap(boolean b) { return new Options.OptionValue(Key.GENERATE_STACK_MAPS, b); }\n+        static Option generateStackmap(boolean b) { return new Options.OptionValue(Options.Key.GENERATE_STACK_MAPS, b); }\n@@ -93,1 +83,1 @@\n-        static Option processDebug(boolean b) { return new Options.OptionValue(Key.PROCESS_DEBUG, b); }\n+        static Option processDebug(boolean b) { return new Options.OptionValue(Options.Key.PROCESS_DEBUG, b); }\n@@ -102,1 +92,1 @@\n-        static Option processLineNumbers(boolean b) { return new Options.OptionValue(Key.PROCESS_LINE_NUMBERS, b); }\n+        static Option processLineNumbers(boolean b) { return new Options.OptionValue(Options.Key.PROCESS_LINE_NUMBERS, b); }\n@@ -111,1 +101,1 @@\n-        static Option processUnknownAttributes(boolean b) { return new Options.OptionValue(Key.PROCESS_UNKNOWN_ATTRIBUTES, b); }\n+        static Option processUnknownAttributes(boolean b) { return new Options.OptionValue(Options.Key.PROCESS_UNKNOWN_ATTRIBUTES, b); }\n@@ -122,1 +112,1 @@\n-        static Option constantPoolSharing(boolean b) { return new Options.OptionValue(Key.CP_SHARING, b); }\n+        static Option constantPoolSharing(boolean b) { return new Options.OptionValue(Options.Key.CP_SHARING, b); }\n@@ -130,1 +120,1 @@\n-        static Option fixShortJumps(boolean b) { return new Options.OptionValue(Key.FIX_SHORT_JUMPS, b); }\n+        static Option fixShortJumps(boolean b) { return new Options.OptionValue(Options.Key.FIX_SHORT_JUMPS, b); }\n@@ -137,1 +127,1 @@\n-        static Option patchDeadCode(boolean b) { return new Options.OptionValue(Key.PATCH_DEAD_CODE, b); }\n+        static Option patchDeadCode(boolean b) { return new Options.OptionValue(Options.Key.PATCH_DEAD_CODE, b); }\n@@ -144,1 +134,1 @@\n-        static Option classHierarchyResolver(ClassHierarchyResolver r) { return new Options.OptionValue(Key.HIERARCHY_RESOLVER, r); }\n+        static Option classHierarchyResolver(ClassHierarchyResolver r) { return new Options.OptionValue(Options.Key.HIERARCHY_RESOLVER, r); }\n@@ -151,1 +141,1 @@\n-        static Option attributeMapper(Function<Utf8Entry, AttributeMapper<?>> r) { return new Options.OptionValue(Key.ATTRIBUTE_MAPPER, r); }\n+        static Option attributeMapper(Function<Utf8Entry, AttributeMapper<?>> r) { return new Options.OptionValue(Options.Key.ATTRIBUTE_MAPPER, r); }\n@@ -161,1 +151,1 @@\n-        static Option filterDeadLabels(boolean b) { return new Options.OptionValue(Key.FILTER_DEAD_LABELS, b); }\n+        static Option filterDeadLabels(boolean b) { return new Options.OptionValue(Options.Key.FILTER_DEAD_LABELS, b); }\n@@ -225,1 +215,1 @@\n-        DirectClassBuilder builder = new DirectClassBuilder(constantPool, thisClassEntry);\n+        DirectClassBuilder builder = new DirectClassBuilder((SplitConstantPool)constantPool, thisClassEntry);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n+ * {@link jdk.internal.classfile.Classfile.Option#processLineNumbers(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LineNumberTableAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n+ * {@link jdk.internal.classfile.Classfile.Option#processDebug(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * {@link jdk.internal.classfile.Classfile.Option.Key#PROCESS_DEBUG} option.\n+ * {@link jdk.internal.classfile.Classfile.Option#processLineNumbers(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-     * If the processing options include {@link Classfile.Option.Key#CP_SHARING},\n+     * If the processing options include {@link Classfile.Option#constantPoolSharing(boolean)},\n@@ -74,2 +74,2 @@\n-        ClassReader reader = (ClassReader) classModel.constantPool();\n-        return reader.optionValue(Classfile.Option.Key.CP_SHARING)\n+        ClassReaderImpl reader = (ClassReaderImpl) classModel.constantPool();\n+        return reader.options().cpSharing\n@@ -77,1 +77,1 @@\n-          : new SplitConstantPool(((ClassReaderImpl) reader).options());\n+          : new SplitConstantPool(reader.options());\n@@ -90,8 +90,0 @@\n-    \/**\n-     * {@return the value of the specified option}\n-     *\n-     * @param option the key of the option value\n-     * @param <T> the type of the option value\n-     *\/\n-    <T> T optionValue(Classfile.Option.Key option);\n-\n@@ -103,1 +95,1 @@\n-     * @param other the other constant pool\n+     * @param constantPool the other constant pool\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    protected final ConstantPoolBuilder constantPool;\n+    protected final SplitConstantPool constantPool;\n@@ -40,1 +40,1 @@\n-    public AbstractDirectBuilder(ConstantPoolBuilder constantPool) {\n+    public AbstractDirectBuilder(SplitConstantPool constantPool) {\n@@ -44,1 +44,1 @@\n-    public ConstantPoolBuilder constantPool() {\n+    public SplitConstantPool constantPool() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-            } else if (reader.optionValue(Classfile.Option.Key.PROCESS_UNKNOWN_ATTRIBUTES)) {\n+            } else if (((ClassReaderImpl)reader).options().processUnknownAttributes) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private final ConstantPoolBuilder constantPool;\n+    private final SplitConstantPool constantPool;\n@@ -59,1 +59,1 @@\n-                               ConstantPoolBuilder constantPool,\n+                               SplitConstantPool constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private final ConstantPoolBuilder constantPool;\n+    private final SplitConstantPool constantPool;\n@@ -48,1 +48,1 @@\n-    public BufferedFieldBuilder(ConstantPoolBuilder constantPool,\n+    public BufferedFieldBuilder(SplitConstantPool constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    private final ConstantPoolBuilder constantPool;\n+    private final SplitConstantPool constantPool;\n@@ -61,1 +61,1 @@\n-    public BufferedMethodBuilder(ConstantPoolBuilder constantPool,\n+    public BufferedMethodBuilder(SplitConstantPool constantPool,\n@@ -129,1 +129,1 @@\n-        return new BufferedCodeBuilder(this, constantPool(), original);\n+        return new BufferedCodeBuilder(this, constantPool, original);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,5 +148,0 @@\n-    @Override\n-    public <T> T optionValue(Classfile.Option.Key option) {\n-        return options.value(option);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-            if (classReader.optionValue(Classfile.Option.Key.PROCESS_LINE_NUMBERS))\n+            if (((ClassReaderImpl)classReader).options().processLineNumbers)\n@@ -184,1 +184,1 @@\n-                                    buf.constantPool(),\n+                                    (SplitConstantPool)buf.constantPool(),\n@@ -201,1 +201,1 @@\n-        if (classReader.optionValue(Classfile.Option.Key.PROCESS_DEBUG))\n+        if (((ClassReaderImpl)classReader).options().processDebug)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    public DirectClassBuilder(ConstantPoolBuilder constantPool,\n+    public DirectClassBuilder(SplitConstantPool constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                                                 ConstantPoolBuilder constantPool,\n+                                                 SplitConstantPool constantPool,\n@@ -111,1 +111,1 @@\n-            if (constantPool.optionValue(Classfile.Option.Key.FIX_SHORT_JUMPS)) {\n+            if (constantPool.options().fixJumps) {\n@@ -122,1 +122,1 @@\n-                              ConstantPoolBuilder constantPool,\n+                              SplitConstantPool constantPool,\n@@ -129,1 +129,1 @@\n-        this.transformBackJumps = constantPool.optionValue(Classfile.Option.Key.FIX_SHORT_JUMPS);\n+        this.transformBackJumps = constantPool.options().fixJumps;\n@@ -200,1 +200,1 @@\n-                if (constantPool.optionValue(Classfile.Option.Key.FILTER_DEAD_LABELS)) {\n+                if (constantPool.options().filterDeadLabels) {\n@@ -224,1 +224,1 @@\n-        if (constantPool.optionValue(Classfile.Option.Key.PROCESS_DEBUG)) {\n+        if (constantPool.options().processDebug) {\n@@ -237,1 +237,1 @@\n-                                if (constantPool.optionValue(Classfile.Option.Key.FILTER_DEAD_LABELS)) {\n+                                if (constantPool.options().filterDeadLabels) {\n@@ -266,1 +266,1 @@\n-                                if (constantPool.optionValue(Classfile.Option.Key.FILTER_DEAD_LABELS)) {\n+                                if (constantPool.options().filterDeadLabels) {\n@@ -289,1 +289,1 @@\n-                                if (constantPool.optionValue(Classfile.Option.Key.FILTER_DEAD_LABELS)) {\n+                                if (constantPool.options().filterDeadLabels) {\n@@ -319,1 +319,1 @@\n-                if (!constantPool.<Boolean>optionValue(Classfile.Option.Key.GENERATE_STACK_MAPS)) {\n+                if (!constantPool.options().generateStackmaps) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n@@ -45,1 +44,1 @@\n-    public DirectFieldBuilder(ConstantPoolBuilder constantPool,\n+    public DirectFieldBuilder(SplitConstantPool constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n@@ -51,1 +50,1 @@\n-    public DirectMethodBuilder(ConstantPoolBuilder constantPool,\n+    public DirectMethodBuilder(SplitConstantPool constantPool,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,7 @@\n-    public record OptionValue(Classfile.Option.Key key, Object value) implements Classfile.Option { }\n+    public enum Key {\n+        GENERATE_STACK_MAPS, PROCESS_DEBUG, PROCESS_LINE_NUMBERS, PROCESS_UNKNOWN_ATTRIBUTES,\n+        CP_SHARING, FIX_SHORT_JUMPS, PATCH_DEAD_CODE, HIERARCHY_RESOLVER, ATTRIBUTE_MAPPER,\n+        FILTER_DEAD_LABELS;\n+    }\n+\n+    public record OptionValue(Key key, Object value) implements Classfile.Option { }\n@@ -63,2 +69,3 @@\n-            var v = ((OptionValue)o).value();\n-            switch (o.key()) {\n+            var ov = ((OptionValue)o);\n+            var v = ov.value();\n+            switch (ov.key()) {\n@@ -78,16 +85,0 @@\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T value(Classfile.Option.Key key) {\n-        return switch (key) {\n-            case PROCESS_DEBUG -> (T) processDebug;\n-            case PROCESS_LINE_NUMBERS -> (T) processLineNumbers;\n-            case PROCESS_UNKNOWN_ATTRIBUTES -> (T) processUnknownAttributes;\n-            case CP_SHARING -> (T) cpSharing;\n-            case FIX_SHORT_JUMPS -> (T) fixJumps;\n-            case PATCH_DEAD_CODE -> (T) patchCode;\n-            case ATTRIBUTE_MAPPER -> (T) attributeMapper;\n-            case GENERATE_STACK_MAPS -> (T) generateStackmaps;\n-            case HIERARCHY_RESOLVER -> (T) classHierarchyResolver;\n-            case FILTER_DEAD_LABELS -> (T) filterDeadLabels;\n-        };\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Options.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -154,3 +154,2 @@\n-    @Override\n-    public <T> T optionValue(Classfile.Option.Key option) {\n-        return options.value(option);\n+    public Options options() {\n+        return options;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-    private final ConstantPoolBuilder cp;\n+    private final SplitConstantPool cp;\n@@ -219,1 +219,1 @@\n-                     ConstantPoolBuilder cp,\n+                     SplitConstantPool cp,\n@@ -229,2 +229,2 @@\n-        this.classHierarchy = new ClassHierarchyImpl(cp.optionValue(Classfile.Option.Key.HIERARCHY_RESOLVER));\n-        this.patchDeadCode = cp.optionValue(Classfile.Option.Key.PATCH_DEAD_CODE);\n+        this.classHierarchy = new ClassHierarchyImpl(cp.options().classHierarchyResolver);\n+        this.patchDeadCode = cp.options().patchCode;\n@@ -848,1 +848,1 @@\n-            ((SplitConstantPool)cp).options.generateStackmaps = false;\n+            cp.options.generateStackmaps = false;\n@@ -946,1 +946,1 @@\n-            if (!(boolean)cp.optionValue(Option.Key.FILTER_DEAD_LABELS))\n+            if (!cp.options().filterDeadLabels)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-    private static final Options options = new Options(Collections.emptyList());\n@@ -192,5 +191,0 @@\n-    @Override\n-    public <T> T optionValue(Classfile.Option.Key option) {\n-        return options.value(option);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ * the setting of the {@link Classfile.Option#processDebug(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/CharacterRange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * the setting of the {@link Classfile.Option.Key#PROCESS_LINE_NUMBERS} option.\n+ * the setting of the {@link Classfile.Option#processLineNumbers(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LineNumber.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * the setting of the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ * the setting of the {@link Classfile.Option#processDebug(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.classfile.CodeBuilder;\n@@ -44,1 +43,1 @@\n- * the {@link Classfile.Option.Key#PROCESS_DEBUG} option.\n+ * the {@link Classfile.Option#processDebug(boolean)} option.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                d.constantPool(),\n+                (SplitConstantPool)d.constantPool(),\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/GenerateStackMaps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}