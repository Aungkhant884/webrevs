{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import java.util.Collections;\n+import java.util.HashMap;\n@@ -29,0 +31,1 @@\n+import java.util.Set;\n@@ -83,2 +86,0 @@\n-\n-import static java.util.Map.entry;\n@@ -130,37 +131,0 @@\n-    private static final int HASH_ANNOTATION_DEFAULT = ConcreteEntry.hashString(NAME_ANNOTATION_DEFAULT.hashCode());\n-    private static final int HASH_BOOTSTRAP_METHODS = ConcreteEntry.hashString(NAME_BOOTSTRAP_METHODS.hashCode());\n-    private static final int HASH_CHARACTER_RANGE_TABLE = ConcreteEntry.hashString(NAME_CHARACTER_RANGE_TABLE.hashCode());\n-    private static final int HASH_CODE = ConcreteEntry.hashString(NAME_CODE.hashCode());\n-    private static final int HASH_COMPILATION_ID = ConcreteEntry.hashString(NAME_COMPILATION_ID.hashCode());\n-    private static final int HASH_CONSTANT_VALUE = ConcreteEntry.hashString(NAME_CONSTANT_VALUE.hashCode());\n-    private static final int HASH_DEPRECATED = ConcreteEntry.hashString(NAME_DEPRECATED.hashCode());\n-    private static final int HASH_ENCLOSING_METHOD = ConcreteEntry.hashString(NAME_ENCLOSING_METHOD.hashCode());\n-    private static final int HASH_EXCEPTIONS = ConcreteEntry.hashString(NAME_EXCEPTIONS.hashCode());\n-    private static final int HASH_INNER_CLASSES = ConcreteEntry.hashString(NAME_INNER_CLASSES.hashCode());\n-    private static final int HASH_LINE_NUMBER_TABLE = ConcreteEntry.hashString(NAME_LINE_NUMBER_TABLE.hashCode());\n-    private static final int HASH_LOCAL_VARIABLE_TABLE = ConcreteEntry.hashString(NAME_LOCAL_VARIABLE_TABLE.hashCode());\n-    private static final int HASH_LOCAL_VARIABLE_TYPE_TABLE = ConcreteEntry.hashString(NAME_LOCAL_VARIABLE_TYPE_TABLE.hashCode());\n-    private static final int HASH_METHOD_PARAMETERS = ConcreteEntry.hashString(NAME_METHOD_PARAMETERS.hashCode());\n-    private static final int HASH_MODULE = ConcreteEntry.hashString(NAME_MODULE.hashCode());\n-    private static final int HASH_MODULE_HASHES = ConcreteEntry.hashString(NAME_MODULE_HASHES.hashCode());\n-    private static final int HASH_MODULE_MAIN_CLASS = ConcreteEntry.hashString(NAME_MODULE_MAIN_CLASS.hashCode());\n-    private static final int HASH_MODULE_PACKAGES = ConcreteEntry.hashString(NAME_MODULE_PACKAGES.hashCode());\n-    private static final int HASH_MODULE_RESOLUTION = ConcreteEntry.hashString(NAME_MODULE_RESOLUTION.hashCode());\n-    private static final int HASH_MODULE_TARGET = ConcreteEntry.hashString(NAME_MODULE_TARGET.hashCode());\n-    private static final int HASH_NEST_HOST = ConcreteEntry.hashString(NAME_NEST_HOST.hashCode());\n-    private static final int HASH_NEST_MEMBERS = ConcreteEntry.hashString(NAME_NEST_MEMBERS.hashCode());\n-    private static final int HASH_PERMITTED_SUBCLASSES = ConcreteEntry.hashString(NAME_PERMITTED_SUBCLASSES.hashCode());\n-    private static final int HASH_RECORD = ConcreteEntry.hashString(NAME_RECORD.hashCode());\n-    private static final int HASH_RUNTIME_INVISIBLE_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_INVISIBLE_ANNOTATIONS.hashCode());\n-    private static final int HASH_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.hashCode());\n-    private static final int HASH_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.hashCode());\n-    private static final int HASH_RUNTIME_VISIBLE_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_VISIBLE_ANNOTATIONS.hashCode());\n-    private static final int HASH_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.hashCode());\n-    private static final int HASH_RUNTIME_VISIBLE_TYPE_ANNOTATIONS = ConcreteEntry.hashString(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS.hashCode());\n-    private static final int HASH_SIGNATURE = ConcreteEntry.hashString(NAME_SIGNATURE.hashCode());\n-    private static final int HASH_SOURCE_DEBUG_EXTENSION = ConcreteEntry.hashString(NAME_SOURCE_DEBUG_EXTENSION.hashCode());\n-    private static final int HASH_SOURCE_FILE = ConcreteEntry.hashString(NAME_SOURCE_FILE.hashCode());\n-    private static final int HASH_SOURCE_ID = ConcreteEntry.hashString(NAME_SOURCE_ID.hashCode());\n-    private static final int HASH_STACK_MAP_TABLE = ConcreteEntry.hashString(NAME_STACK_MAP_TABLE.hashCode());\n-    private static final int HASH_SYNTHETIC = ConcreteEntry.hashString(NAME_SYNTHETIC.hashCode());\n-\n@@ -769,120 +733,1 @@\n-        int hash = name.hashCode();\n-        switch (name.length()) {\n-            case 4:\n-                if (hash == HASH_CODE && name.equalsString(NAME_CODE))\n-                    return CODE;\n-                break;\n-            case 6:\n-                if (hash == HASH_MODULE && name.equalsString(NAME_MODULE))\n-                    return MODULE;\n-                else if (hash == HASH_RECORD && name.equalsString(NAME_RECORD))\n-                    return RECORD;\n-                break;\n-            case 8:\n-                if (hash == HASH_NEST_HOST && name.equalsString(NAME_NEST_HOST))\n-                    return NEST_HOST;\n-                else if (hash == HASH_SOURCE_ID && name.equalsString(NAME_SOURCE_ID))\n-                    return SOURCE_ID;\n-                break;\n-            case 9:\n-                if (hash == HASH_SIGNATURE && name.equalsString(NAME_SIGNATURE))\n-                    return SIGNATURE;\n-                else if (hash == HASH_SYNTHETIC && name.equalsString(NAME_SYNTHETIC))\n-                    return SYNTHETIC;\n-                break;\n-            case 10:\n-                if (hash == HASH_DEPRECATED && name.equalsString(NAME_DEPRECATED))\n-                    return DEPRECATED;\n-                else if (hash == HASH_EXCEPTIONS && name.equalsString(NAME_EXCEPTIONS))\n-                    return EXCEPTIONS;\n-                else if (hash == HASH_SOURCE_FILE && name.equalsString(NAME_SOURCE_FILE))\n-                    return SOURCE_FILE;\n-                break;\n-            case 11:\n-                if (hash == HASH_NEST_MEMBERS && name.equalsString(NAME_NEST_MEMBERS))\n-                    return NEST_MEMBERS;\n-                break;\n-            case 12:\n-                if (hash == HASH_INNER_CLASSES && name.equalsString(NAME_INNER_CLASSES))\n-                    return INNER_CLASSES;\n-                else if (hash == HASH_MODULE_HASHES && name.equalsString(NAME_MODULE_HASHES))\n-                    return MODULE_HASHES;\n-                else if (hash == HASH_MODULE_TARGET && name.equalsString(NAME_MODULE_TARGET))\n-                    return MODULE_TARGET;\n-                break;\n-            case 13:\n-                if (hash == HASH_COMPILATION_ID && name.equalsString(NAME_COMPILATION_ID))\n-                    return COMPILATION_ID;\n-                else if (hash == HASH_CONSTANT_VALUE && name.equalsString(NAME_CONSTANT_VALUE))\n-                    return CONSTANT_VALUE;\n-                else if (hash == HASH_STACK_MAP_TABLE && name.equalsString(NAME_STACK_MAP_TABLE))\n-                    return STACK_MAP_TABLE;\n-                break;\n-            case 14:\n-                if (hash == HASH_MODULE_PACKAGES && name.equalsString(NAME_MODULE_PACKAGES))\n-                    return MODULE_PACKAGES;\n-                break;\n-            case 15:\n-                if (hash == HASH_ENCLOSING_METHOD && name.equalsString(NAME_ENCLOSING_METHOD))\n-                    return ENCLOSING_METHOD;\n-                else if (hash == HASH_LINE_NUMBER_TABLE && name.equalsString(NAME_LINE_NUMBER_TABLE))\n-                    return LINE_NUMBER_TABLE;\n-                else if (hash == HASH_MODULE_MAIN_CLASS && name.equalsString(NAME_MODULE_MAIN_CLASS))\n-                    return MODULE_MAIN_CLASS;\n-                break;\n-            case 16:\n-                if (hash == HASH_BOOTSTRAP_METHODS && name.equalsString(NAME_BOOTSTRAP_METHODS))\n-                    return BOOTSTRAP_METHODS;\n-                else if (hash == HASH_METHOD_PARAMETERS && name.equalsString(NAME_METHOD_PARAMETERS))\n-                    return METHOD_PARAMETERS;\n-                else if (hash == HASH_MODULE_RESOLUTION && name.equalsString(NAME_MODULE_RESOLUTION))\n-                    return MODULE_RESOLUTION;\n-                break;\n-            case 17:\n-                if (hash == HASH_ANNOTATION_DEFAULT && name.equalsString(NAME_ANNOTATION_DEFAULT))\n-                    return ANNOTATION_DEFAULT;\n-                break;\n-            case 18:\n-                if (hash == HASH_LOCAL_VARIABLE_TABLE && name.equalsString(NAME_LOCAL_VARIABLE_TABLE))\n-                    return LOCAL_VARIABLE_TABLE;\n-                break;\n-            case 19:\n-                if (hash == HASH_CHARACTER_RANGE_TABLE && name.equalsString(NAME_CHARACTER_RANGE_TABLE))\n-                    return CHARACTER_RANGE_TABLE;\n-                else if (hash == HASH_PERMITTED_SUBCLASSES && name.equalsString(NAME_PERMITTED_SUBCLASSES))\n-                    return PERMITTED_SUBCLASSES;\n-                break;\n-            case 20:\n-                if (hash == HASH_SOURCE_DEBUG_EXTENSION && name.equalsString(NAME_SOURCE_DEBUG_EXTENSION))\n-                    return SOURCE_DEBUG_EXTENSION;\n-                break;\n-            case 22:\n-                if (hash == HASH_LOCAL_VARIABLE_TYPE_TABLE && name.equalsString(NAME_LOCAL_VARIABLE_TYPE_TABLE))\n-                    return LOCAL_VARIABLE_TYPE_TABLE;\n-                break;\n-            case 25:\n-                if (hash == HASH_RUNTIME_VISIBLE_ANNOTATIONS && name.equalsString(NAME_RUNTIME_VISIBLE_ANNOTATIONS))\n-                    return RUNTIME_VISIBLE_ANNOTATIONS;\n-                break;\n-            case 27:\n-                if (hash == HASH_RUNTIME_INVISIBLE_ANNOTATIONS && name.equalsString(NAME_RUNTIME_INVISIBLE_ANNOTATIONS))\n-                    return RUNTIME_INVISIBLE_ANNOTATIONS;\n-                break;\n-            case 29:\n-                if (hash == HASH_RUNTIME_VISIBLE_TYPE_ANNOTATIONS && name.equalsString(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS))\n-                    return RUNTIME_VISIBLE_TYPE_ANNOTATIONS;\n-                break;\n-            case 31:\n-                if (hash == HASH_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS && name.equalsString(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS))\n-                    return RUNTIME_INVISIBLE_TYPE_ANNOTATIONS;\n-                break;\n-            case 34:\n-                if (hash == HASH_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS && name.equalsString(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS))\n-                    return RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS;\n-                break;\n-            case 36:\n-                if (hash == HASH_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS && name.equalsString(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS))\n-                    return RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS;\n-                break;\n-        }\n-        return null;\n+        return _ATTR_MAP.get(name);\n@@ -892,1 +737,1 @@\n-     * Map from names to attribute mappers for all standard attributes.\n+     * All standard attribute mappers.\n@@ -894,32 +739,47 @@\n-    public static final Map<String, ? extends AttributeMapper<?>> PREDEFINED_ATTRIBUTES = Map.ofEntries(\n-            entry(NAME_CONSTANT_VALUE, CONSTANT_VALUE),\n-            entry(NAME_CODE, CODE),\n-            entry(NAME_STACK_MAP_TABLE, STACK_MAP_TABLE),\n-            entry(NAME_EXCEPTIONS, EXCEPTIONS),\n-            entry(NAME_INNER_CLASSES, INNER_CLASSES),\n-            entry(NAME_ENCLOSING_METHOD, ENCLOSING_METHOD),\n-            entry(NAME_SYNTHETIC, SYNTHETIC),\n-            entry(NAME_SIGNATURE, SIGNATURE),\n-            entry(NAME_SOURCE_FILE, SOURCE_FILE),\n-            entry(NAME_SOURCE_DEBUG_EXTENSION, SOURCE_DEBUG_EXTENSION),\n-            entry(NAME_LINE_NUMBER_TABLE, LINE_NUMBER_TABLE),\n-            entry(NAME_LOCAL_VARIABLE_TABLE, LOCAL_VARIABLE_TABLE),\n-            entry(NAME_LOCAL_VARIABLE_TYPE_TABLE, LOCAL_VARIABLE_TYPE_TABLE),\n-            entry(NAME_DEPRECATED, DEPRECATED),\n-            entry(NAME_RUNTIME_VISIBLE_ANNOTATIONS, RUNTIME_VISIBLE_ANNOTATIONS),\n-            entry(NAME_RUNTIME_INVISIBLE_ANNOTATIONS, RUNTIME_INVISIBLE_ANNOTATIONS),\n-            entry(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS, RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),\n-            entry(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS, RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),\n-            entry(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS, RUNTIME_VISIBLE_TYPE_ANNOTATIONS),\n-            entry(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, RUNTIME_INVISIBLE_TYPE_ANNOTATIONS),\n-            entry(NAME_ANNOTATION_DEFAULT, ANNOTATION_DEFAULT),\n-            entry(NAME_BOOTSTRAP_METHODS, BOOTSTRAP_METHODS),\n-            entry(NAME_METHOD_PARAMETERS, METHOD_PARAMETERS),\n-            entry(NAME_MODULE, MODULE),\n-            entry(NAME_MODULE_PACKAGES, MODULE_PACKAGES),\n-            entry(NAME_MODULE_MAIN_CLASS, MODULE_MAIN_CLASS),\n-            entry(NAME_NEST_HOST, NEST_HOST),\n-            entry(NAME_NEST_MEMBERS, NEST_MEMBERS),\n-            entry(NAME_RECORD, RECORD),\n-            entry(NAME_PERMITTED_SUBCLASSES, PERMITTED_SUBCLASSES));\n-\n+    public static final Set<AttributeMapper<?>> PREDEFINED_ATTRIBUTES = Set.of(\n+            ANNOTATION_DEFAULT,\n+            BOOTSTRAP_METHODS,\n+            CHARACTER_RANGE_TABLE,\n+            CODE,\n+            COMPILATION_ID,\n+            CONSTANT_VALUE,\n+            DEPRECATED,\n+            ENCLOSING_METHOD,\n+            EXCEPTIONS,\n+            INNER_CLASSES,\n+            LINE_NUMBER_TABLE,\n+            LOCAL_VARIABLE_TABLE,\n+            LOCAL_VARIABLE_TYPE_TABLE,\n+            METHOD_PARAMETERS,\n+            MODULE,\n+            MODULE_HASHES,\n+            MODULE_MAIN_CLASS,\n+            MODULE_PACKAGES,\n+            MODULE_RESOLUTION,\n+            MODULE_TARGET,\n+            NEST_HOST,\n+            NEST_MEMBERS,\n+            PERMITTED_SUBCLASSES,\n+            RECORD,\n+            RUNTIME_INVISIBLE_ANNOTATIONS,\n+            RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,\n+            RUNTIME_INVISIBLE_TYPE_ANNOTATIONS,\n+            RUNTIME_VISIBLE_ANNOTATIONS,\n+            RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,\n+            RUNTIME_VISIBLE_TYPE_ANNOTATIONS,\n+            SIGNATURE,\n+            SOURCE_DEBUG_EXTENSION,\n+            SOURCE_FILE,\n+            SOURCE_ID,\n+            STACK_MAP_TABLE,\n+            SYNTHETIC);\n+\n+    private static final Map<Utf8Entry, AttributeMapper<?>> _ATTR_MAP;\n+    \/\/no lambdas here as this is on critical JDK boostrap path\n+    static {\n+        var map = new HashMap<Utf8Entry, AttributeMapper<?>>(64);\n+        for (var am : PREDEFINED_ATTRIBUTES) {\n+            map.put(ConcreteEntry.rawUtf8EntryFromStandardAttributeName(am.name()), am);\n+        }\n+        _ATTR_MAP = Collections.unmodifiableMap(map);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":52,"deletions":192,"binary":false,"changes":244,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-        found.retainAll(Attributes.PREDEFINED_ATTRIBUTES.values());\n+        found.retainAll(Attributes.PREDEFINED_ATTRIBUTES);\n@@ -230,1 +230,1 @@\n-                     Attributes.MODULE_PACKAGES,\n+                     Attributes.MODULE_HASHES,\n@@ -232,0 +232,3 @@\n+                     Attributes.MODULE_PACKAGES,\n+                     Attributes.MODULE_RESOLUTION,\n+                     Attributes.MODULE_TARGET,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -90,0 +90,6 @@\n+    public static Utf8Entry rawUtf8EntryFromStandardAttributeName(String name) {\n+        \/\/assuming standard attribute names are all US_ASCII\n+        var raw = name.getBytes(StandardCharsets.US_ASCII);\n+        return new ConcreteUtf8Entry(null, 0, raw, 0, raw.length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ConcreteEntry.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}