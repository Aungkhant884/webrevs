{"files":[{"patch":"@@ -64,1 +64,0 @@\n-     * @param <V> the type of the optional value\n@@ -66,1 +65,1 @@\n-    public sealed interface Option<V> permits Options.OptionValue {\n+    public sealed interface Option permits Options.OptionValue {\n@@ -70,3 +69,0 @@\n-        \/** {@return the option value} *\/\n-        V value();\n-\n@@ -87,1 +83,1 @@\n-        static Option<Boolean> generateStackmap(boolean b) { return new Options.OptionValue<>(Key.GENERATE_STACK_MAPS, b); }\n+        static Option generateStackmap(boolean b) { return new Options.OptionValue(Key.GENERATE_STACK_MAPS, b); }\n@@ -97,1 +93,1 @@\n-        static Option<Boolean> processDebug(boolean b) { return new Options.OptionValue<>(Key.PROCESS_DEBUG, b); }\n+        static Option processDebug(boolean b) { return new Options.OptionValue(Key.PROCESS_DEBUG, b); }\n@@ -106,1 +102,1 @@\n-        static Option<Boolean> processLineNumbers(boolean b) { return new Options.OptionValue<>(Key.PROCESS_LINE_NUMBERS, b); }\n+        static Option processLineNumbers(boolean b) { return new Options.OptionValue(Key.PROCESS_LINE_NUMBERS, b); }\n@@ -115,1 +111,1 @@\n-        static Option<Boolean> processUnknownAttributes(boolean b) { return new Options.OptionValue<>(Key.PROCESS_UNKNOWN_ATTRIBUTES, b); }\n+        static Option processUnknownAttributes(boolean b) { return new Options.OptionValue(Key.PROCESS_UNKNOWN_ATTRIBUTES, b); }\n@@ -126,1 +122,1 @@\n-        static Option<Boolean> constantPoolSharing(boolean b) { return new Options.OptionValue<>(Key.CP_SHARING, b); }\n+        static Option constantPoolSharing(boolean b) { return new Options.OptionValue(Key.CP_SHARING, b); }\n@@ -134,1 +130,1 @@\n-        static Option<Boolean> fixShortJumps(boolean b) { return new Options.OptionValue<>(Key.FIX_SHORT_JUMPS, b); }\n+        static Option fixShortJumps(boolean b) { return new Options.OptionValue(Key.FIX_SHORT_JUMPS, b); }\n@@ -141,1 +137,1 @@\n-        static Option<Boolean> patchDeadCode(boolean b) { return new Options.OptionValue<>(Key.PATCH_DEAD_CODE, b); }\n+        static Option patchDeadCode(boolean b) { return new Options.OptionValue(Key.PATCH_DEAD_CODE, b); }\n@@ -148,1 +144,1 @@\n-        static Option<ClassHierarchyResolver> classHierarchyResolver(ClassHierarchyResolver r) { return new Options.OptionValue<>(Key.HIERARCHY_RESOLVER, r); }\n+        static Option classHierarchyResolver(ClassHierarchyResolver r) { return new Options.OptionValue(Key.HIERARCHY_RESOLVER, r); }\n@@ -155,1 +151,1 @@\n-        static Option<Function<Utf8Entry, AttributeMapper<?>>> attributeMapper(Function<Utf8Entry, AttributeMapper<?>> r) { return new Options.OptionValue<>(Key.ATTRIBUTE_MAPPER, r); }\n+        static Option attributeMapper(Function<Utf8Entry, AttributeMapper<?>> r) { return new Options.OptionValue(Key.ATTRIBUTE_MAPPER, r); }\n@@ -165,1 +161,1 @@\n-        static Option<Boolean> filterDeadLabels(boolean b) { return new Options.OptionValue<>(Key.FILTER_DEAD_LABELS, b); }\n+        static Option filterDeadLabels(boolean b) { return new Options.OptionValue(Key.FILTER_DEAD_LABELS, b); }\n@@ -174,2 +170,2 @@\n-    public static ClassModel parse(byte[] bytes, Option<?>... options) {\n-        Collection<Option<?>> os = (options == null || options.length == 0)\n+    public static ClassModel parse(byte[] bytes, Option... options) {\n+        Collection<Option> os = (options == null || options.length == 0)\n@@ -187,1 +183,1 @@\n-    public static ClassModel parse(Path path, Option<?>... options) throws IOException {\n+    public static ClassModel parse(Path path, Option... options) throws IOException {\n@@ -210,1 +206,1 @@\n-                               Collection<Option<?>> options,\n+                               Collection<Option> options,\n@@ -255,1 +251,1 @@\n-                               Collection<Option<?>> options,\n+                               Collection<Option> options,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * Return a List composed by appending the additions to the base list.\n+     * Return a {@link List} composed by appending the additions to the base list.\n@@ -68,2 +68,2 @@\n-     * @param additions The ClassEntrys to add to the list, must not include null\n-     * @return the combined List\n+     * @param additions The {@link ClassEntry} instances to add to the list, must not include null\n+     * @return the combined {@link List}\n@@ -78,1 +78,1 @@\n-     * Return a List composed by appending the additions to the base list.\n+     * Return a {@link List} composed by appending the additions to the base list.\n@@ -80,2 +80,2 @@\n-     * @param additions The ClassEntrys to add to the list, must not include null\n-     * @return the combined List\n+     * @param additions The {@link ClassEntry} instances to add to the list, must not include null\n+     * @return the combined {@link List}\n@@ -92,1 +92,1 @@\n-     * Return a List composed by appending the additions to the base list.\n+     * Return a {@link List} composed by appending the additions to the base list.\n@@ -94,2 +94,2 @@\n-     * @param additions The ClassDescs to add to the list, must not include null\n-     * @return the combined List\n+     * @param additions The {@link ClassDesc} instances to add to the list, must not include null\n+     * @return the combined {@link List}\n@@ -104,1 +104,1 @@\n-     * Return a List composed by appending the additions to the base list.\n+     * Return a {@link List} composed by appending the additions to the base list.\n@@ -106,2 +106,2 @@\n-     * @param additions The ClassDescs to add to the list, must not include null\n-     * @return the combined List\n+     * @param additions The {@link ClassDesc} instances to add to the list, must not include null\n+     * @return the combined {@link List}\n@@ -118,1 +118,1 @@\n-     * Remove duplicate ClassEntry elements from the List.\n+     * Remove duplicate {@link ClassEntry} elements from the {@link List}.\n@@ -121,1 +121,1 @@\n-     * @return a List without any duplicate ClassEntry\n+     * @return a {@link List} without any duplicate {@link ClassEntry}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ClassEntry.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    static ConstantPoolBuilder of(Collection<Classfile.Option<?>> options) {\n+    static ConstantPoolBuilder of(Collection<Classfile.Option> options) {\n@@ -98,0 +98,7 @@\n+    \/**\n+     * {@return whether the provided constant pool is index-compatible with this\n+     * one}  This may be because they are the same constant pool, or because this\n+     * constant pool was copied from the other.\n+     *\n+     * @param other the other constant pool\n+     *\/\n@@ -100,0 +107,6 @@\n+    \/**\n+     * Writes associated bootstrap method entries to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return false when no bootstrap method entry has been written\n+     *\/\n@@ -187,1 +200,1 @@\n-     * If a Module entry in the pool already describes this class,\n+     * If a module entry in the pool already describes this class,\n@@ -198,1 +211,1 @@\n-     * If a Module entry in the pool already describes this class,\n+     * If a module entry in the pool already describes this class,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                     Collection<Classfile.Option<?>> options) {\n+                     Collection<Classfile.Option> options) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                    Collection<Classfile.Option<?>> options) {\n+                    Collection<Classfile.Option> options) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    public record OptionValue<V>(Classfile.Option.Key key, V value) implements Classfile.Option<V> { }\n+    public record OptionValue(Classfile.Option.Key key, Object value) implements Classfile.Option { }\n@@ -61,13 +61,14 @@\n-    public Options(Collection<Classfile.Option<?>> options) {\n-        for (Classfile.Option<?> v : options)\n-            switch (((Options.OptionValue<?>) v).key()) {\n-                case GENERATE_STACK_MAPS -> generateStackmaps = (Boolean) v.value();\n-                case PROCESS_DEBUG -> processDebug = (Boolean) v.value();\n-                case PROCESS_LINE_NUMBERS -> processLineNumbers = (Boolean) v.value();\n-                case PROCESS_UNKNOWN_ATTRIBUTES -> processUnknownAttributes = (Boolean) v.value();\n-                case CP_SHARING -> cpSharing = (Boolean) v.value();\n-                case FIX_SHORT_JUMPS -> fixJumps = (Boolean) v.value();\n-                case PATCH_DEAD_CODE -> patchCode = (Boolean) v.value();\n-                case HIERARCHY_RESOLVER -> classHierarchyResolver = (ClassHierarchyResolver) v.value();\n-                case ATTRIBUTE_MAPPER -> attributeMapper = (Function<Utf8Entry, AttributeMapper<?>>) v.value();\n-                case FILTER_DEAD_LABELS -> filterDeadLabels = (Boolean) v.value();\n+    public Options(Collection<Classfile.Option> options) {\n+        for (var o : options) {\n+            var v = ((OptionValue)o).value();\n+            switch (o.key()) {\n+                case GENERATE_STACK_MAPS -> generateStackmaps = (Boolean) v;\n+                case PROCESS_DEBUG -> processDebug = (Boolean) v;\n+                case PROCESS_LINE_NUMBERS -> processLineNumbers = (Boolean) v;\n+                case PROCESS_UNKNOWN_ATTRIBUTES -> processUnknownAttributes = (Boolean) v;\n+                case CP_SHARING -> cpSharing = (Boolean) v;\n+                case FIX_SHORT_JUMPS -> fixJumps = (Boolean) v;\n+                case PATCH_DEAD_CODE -> patchCode = (Boolean) v;\n+                case HIERARCHY_RESOLVER -> classHierarchyResolver = (ClassHierarchyResolver) v;\n+                case ATTRIBUTE_MAPPER -> attributeMapper = (Function<Utf8Entry, AttributeMapper<?>>) v;\n+                case FILTER_DEAD_LABELS -> filterDeadLabels = (Boolean) v;\n@@ -75,0 +76,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Options.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-    private static byte[] generateFwd(Sample sample, boolean overflow, Classfile.Option<?>... options) {\n+    private static byte[] generateFwd(Sample sample, boolean overflow, Classfile.Option... options) {\n@@ -218,1 +218,1 @@\n-    private static byte[] generateBack(Sample sample, boolean overflow, Classfile.Option<?>... options) {\n+    private static byte[] generateBack(Sample sample, boolean overflow, Classfile.Option... options) {\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-    private static void testTransformedStackMaps(String classPath, Classfile.Option<?>... options) throws Exception {\n+    private static void testTransformedStackMaps(String classPath, Classfile.Option... options) throws Exception {\n@@ -228,1 +228,1 @@\n-    private static void testTransformedStackMaps(byte[] originalBytes, Classfile.Option<?>... options) throws Exception {\n+    private static void testTransformedStackMaps(byte[] originalBytes, Classfile.Option... options) throws Exception {\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        public final Classfile.Option<?>[] options;\n+        public final Classfile.Option[] options;\n@@ -180,1 +180,1 @@\n-            options = new Classfile.Option<?>[0];\n+            options = new Classfile.Option[0];\n@@ -185,1 +185,1 @@\n-                      Classfile.Option<?>... options) {\n+                      Classfile.Option... options) {\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        public final Classfile.Option<?>[] options;\n+        public final Classfile.Option[] options;\n@@ -177,1 +177,1 @@\n-            options = new Classfile.Option<?>[0];\n+            options = new Classfile.Option[0];\n@@ -182,1 +182,1 @@\n-                      Classfile.Option<?>... options) {\n+                      Classfile.Option... options) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}