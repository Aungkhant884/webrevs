{"files":[{"patch":"@@ -65,5 +65,0 @@\n-    \/**\n-     * Indicates in what places in the classfile this attribute can appear.\n-     *\/\n-    Set<AttributedElement.Kind> whereApplicable();\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,5 +43,0 @@\n-    \/**\n-     * {@return the kind of the attributed element}\n-     *\/\n-    Kind attributedElementKind();\n-\n@@ -89,19 +84,0 @@\n-\n-    \/**\n-     * Enum constants describing locations in the classfile where attributes\n-     * are permitted.\n-     *\/\n-    enum Kind {\n-        CLASS, METHOD, FIELD, CODE_ATTRIBUTE, RECORD_COMPONENT;\n-\n-        public static final Set<Kind> CLASS_ONLY\n-                = Set.of(CLASS);\n-        public static final Set<Kind> METHOD_ONLY\n-                = Set.of(METHOD);\n-        public static final Set<Kind> FIELD_ONLY\n-                = Set.of(FIELD);\n-        public static final Set<Kind> CODE_ONLY\n-                = Set.of(CODE_ATTRIBUTE);\n-        public static final Set<Kind> EVERYWHERE\n-                = Set.of(CLASS, METHOD, FIELD, CODE_ATTRIBUTE, RECORD_COMPONENT);\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributedElement.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-import static jdk.internal.classfile.AttributedElement.Kind.CLASS_ONLY;\n-import static jdk.internal.classfile.AttributedElement.Kind.CODE_ONLY;\n-import static jdk.internal.classfile.AttributedElement.Kind.EVERYWHERE;\n-import static jdk.internal.classfile.AttributedElement.Kind.FIELD_ONLY;\n-import static jdk.internal.classfile.AttributedElement.Kind.METHOD_ONLY;\n@@ -177,1 +172,1 @@\n-            ANNOTATION_DEFAULT = new AbstractAttributeMapper<>(NAME_ANNOTATION_DEFAULT, METHOD_ONLY, Classfile.JAVA_5_VERSION) {\n+            ANNOTATION_DEFAULT = new AbstractAttributeMapper<>(NAME_ANNOTATION_DEFAULT, Classfile.JAVA_5_VERSION) {\n@@ -191,1 +186,1 @@\n-            BOOTSTRAP_METHODS = new AbstractAttributeMapper<>(NAME_BOOTSTRAP_METHODS, CLASS_ONLY, Classfile.JAVA_17_VERSION) {\n+            BOOTSTRAP_METHODS = new AbstractAttributeMapper<>(NAME_BOOTSTRAP_METHODS, Classfile.JAVA_17_VERSION) {\n@@ -205,1 +200,1 @@\n-            CHARACTER_RANGE_TABLE = new AbstractAttributeMapper<>(NAME_CHARACTER_RANGE_TABLE, CODE_ONLY, true, Classfile.JAVA_4_VERSION) {\n+            CHARACTER_RANGE_TABLE = new AbstractAttributeMapper<>(NAME_CHARACTER_RANGE_TABLE, true, Classfile.JAVA_4_VERSION) {\n@@ -227,1 +222,1 @@\n-            CODE = new AbstractAttributeMapper<>(NAME_CODE, METHOD_ONLY) {\n+            CODE = new AbstractAttributeMapper<>(NAME_CODE) {\n@@ -242,1 +237,1 @@\n-            COMPILATION_ID = new AbstractAttributeMapper<>(NAME_COMPILATION_ID, CLASS_ONLY, true) {\n+            COMPILATION_ID = new AbstractAttributeMapper<>(NAME_COMPILATION_ID, true) {\n@@ -256,1 +251,1 @@\n-            CONSTANT_VALUE = new AbstractAttributeMapper<>(NAME_CONSTANT_VALUE, FIELD_ONLY) {\n+            CONSTANT_VALUE = new AbstractAttributeMapper<>(NAME_CONSTANT_VALUE) {\n@@ -270,1 +265,1 @@\n-            DEPRECATED = new AbstractAttributeMapper<>(NAME_DEPRECATED, EVERYWHERE, true) {\n+            DEPRECATED = new AbstractAttributeMapper<>(NAME_DEPRECATED, true) {\n@@ -284,1 +279,1 @@\n-            ENCLOSING_METHOD = new AbstractAttributeMapper<>(NAME_ENCLOSING_METHOD, CLASS_ONLY, Classfile.JAVA_5_VERSION) {\n+            ENCLOSING_METHOD = new AbstractAttributeMapper<>(NAME_ENCLOSING_METHOD, Classfile.JAVA_5_VERSION) {\n@@ -299,1 +294,1 @@\n-            EXCEPTIONS = new AbstractAttributeMapper<>(NAME_EXCEPTIONS, METHOD_ONLY) {\n+            EXCEPTIONS = new AbstractAttributeMapper<>(NAME_EXCEPTIONS) {\n@@ -313,1 +308,1 @@\n-            INNER_CLASSES = new AbstractAttributeMapper<>(NAME_INNER_CLASSES, CLASS_ONLY) {\n+            INNER_CLASSES = new AbstractAttributeMapper<>(NAME_INNER_CLASSES) {\n@@ -334,1 +329,1 @@\n-            LINE_NUMBER_TABLE = new AbstractAttributeMapper<>(NAME_LINE_NUMBER_TABLE, CODE_ONLY, true) {\n+            LINE_NUMBER_TABLE = new AbstractAttributeMapper<>(NAME_LINE_NUMBER_TABLE, true) {\n@@ -353,1 +348,1 @@\n-            LOCAL_VARIABLE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TABLE, CODE_ONLY, true) {\n+            LOCAL_VARIABLE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TABLE, true) {\n@@ -375,1 +370,1 @@\n-            LOCAL_VARIABLE_TYPE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TYPE_TABLE, CODE_ONLY, true, Classfile.JAVA_5_VERSION) {\n+            LOCAL_VARIABLE_TYPE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TYPE_TABLE, true, Classfile.JAVA_5_VERSION) {\n@@ -397,1 +392,1 @@\n-            METHOD_PARAMETERS = new AbstractAttributeMapper<>(NAME_METHOD_PARAMETERS, METHOD_ONLY, Classfile.JAVA_8_VERSION) {\n+            METHOD_PARAMETERS = new AbstractAttributeMapper<>(NAME_METHOD_PARAMETERS, Classfile.JAVA_8_VERSION) {\n@@ -416,1 +411,1 @@\n-            MODULE = new AbstractAttributeMapper<>(NAME_MODULE, CLASS_ONLY, Classfile.JAVA_9_VERSION) {\n+            MODULE = new AbstractAttributeMapper<>(NAME_MODULE, Classfile.JAVA_9_VERSION) {\n@@ -456,1 +451,1 @@\n-            MODULE_HASHES = new AbstractAttributeMapper<>(NAME_MODULE_HASHES, CLASS_ONLY, Classfile.JAVA_9_VERSION) {\n+            MODULE_HASHES = new AbstractAttributeMapper<>(NAME_MODULE_HASHES, Classfile.JAVA_9_VERSION) {\n@@ -477,1 +472,1 @@\n-            MODULE_MAIN_CLASS = new AbstractAttributeMapper<>(NAME_MODULE_MAIN_CLASS, CLASS_ONLY, Classfile.JAVA_9_VERSION) {\n+            MODULE_MAIN_CLASS = new AbstractAttributeMapper<>(NAME_MODULE_MAIN_CLASS, Classfile.JAVA_9_VERSION) {\n@@ -491,1 +486,1 @@\n-            MODULE_PACKAGES = new AbstractAttributeMapper<>(NAME_MODULE_PACKAGES, CLASS_ONLY, Classfile.JAVA_9_VERSION) {\n+            MODULE_PACKAGES = new AbstractAttributeMapper<>(NAME_MODULE_PACKAGES, Classfile.JAVA_9_VERSION) {\n@@ -505,1 +500,1 @@\n-            MODULE_RESOLUTION = new AbstractAttributeMapper<>(NAME_MODULE_RESOLUTION, CLASS_ONLY, true, Classfile.JAVA_9_VERSION) {\n+            MODULE_RESOLUTION = new AbstractAttributeMapper<>(NAME_MODULE_RESOLUTION, true, Classfile.JAVA_9_VERSION) {\n@@ -519,1 +514,1 @@\n-            MODULE_TARGET = new AbstractAttributeMapper<>(NAME_MODULE_TARGET, CLASS_ONLY, true, Classfile.JAVA_9_VERSION) {\n+            MODULE_TARGET = new AbstractAttributeMapper<>(NAME_MODULE_TARGET, true, Classfile.JAVA_9_VERSION) {\n@@ -533,1 +528,1 @@\n-            NEST_HOST = new AbstractAttributeMapper<>(NAME_NEST_HOST, CLASS_ONLY, Classfile.JAVA_11_VERSION) {\n+            NEST_HOST = new AbstractAttributeMapper<>(NAME_NEST_HOST, Classfile.JAVA_11_VERSION) {\n@@ -547,1 +542,1 @@\n-            NEST_MEMBERS = new AbstractAttributeMapper<>(NAME_NEST_MEMBERS, CLASS_ONLY, Classfile.JAVA_11_VERSION) {\n+            NEST_MEMBERS = new AbstractAttributeMapper<>(NAME_NEST_MEMBERS, Classfile.JAVA_11_VERSION) {\n@@ -561,1 +556,1 @@\n-            PERMITTED_SUBCLASSES = new AbstractAttributeMapper<>(NAME_PERMITTED_SUBCLASSES, CLASS_ONLY, Classfile.JAVA_15_VERSION) {\n+            PERMITTED_SUBCLASSES = new AbstractAttributeMapper<>(NAME_PERMITTED_SUBCLASSES, Classfile.JAVA_15_VERSION) {\n@@ -575,1 +570,1 @@\n-            RECORD = new AbstractAttributeMapper<>(NAME_RECORD, CLASS_ONLY, Classfile.JAVA_16_VERSION) {\n+            RECORD = new AbstractAttributeMapper<>(NAME_RECORD, Classfile.JAVA_16_VERSION) {\n@@ -595,1 +590,1 @@\n-            RUNTIME_INVISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_INVISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n@@ -609,1 +604,1 @@\n-            RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n@@ -626,1 +621,1 @@\n-            RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_8_VERSION) {\n+            RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, Classfile.JAVA_8_VERSION) {\n@@ -640,1 +635,1 @@\n-            RUNTIME_VISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_VISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n@@ -654,1 +649,1 @@\n-            RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n@@ -671,1 +666,1 @@\n-            RUNTIME_VISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS, EVERYWHERE, Classfile.JAVA_8_VERSION) {\n+            RUNTIME_VISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS, Classfile.JAVA_8_VERSION) {\n@@ -685,1 +680,1 @@\n-            SIGNATURE = new AbstractAttributeMapper<>(NAME_SIGNATURE, EVERYWHERE, Classfile.JAVA_5_VERSION) {\n+            SIGNATURE = new AbstractAttributeMapper<>(NAME_SIGNATURE, Classfile.JAVA_5_VERSION) {\n@@ -699,1 +694,1 @@\n-            SOURCE_DEBUG_EXTENSION = new AbstractAttributeMapper<>(NAME_SOURCE_DEBUG_EXTENSION, CLASS_ONLY, Classfile.JAVA_5_VERSION) {\n+            SOURCE_DEBUG_EXTENSION = new AbstractAttributeMapper<>(NAME_SOURCE_DEBUG_EXTENSION, Classfile.JAVA_5_VERSION) {\n@@ -713,1 +708,1 @@\n-            SOURCE_FILE = new AbstractAttributeMapper<>(NAME_SOURCE_FILE, CLASS_ONLY) {\n+            SOURCE_FILE = new AbstractAttributeMapper<>(NAME_SOURCE_FILE) {\n@@ -727,1 +722,1 @@\n-            SOURCE_ID = new AbstractAttributeMapper<>(NAME_SOURCE_ID, CLASS_ONLY) {\n+            SOURCE_ID = new AbstractAttributeMapper<>(NAME_SOURCE_ID) {\n@@ -741,1 +736,1 @@\n-            STACK_MAP_TABLE = new AbstractAttributeMapper<>(NAME_STACK_MAP_TABLE, CODE_ONLY, Classfile.JAVA_6_VERSION) {\n+            STACK_MAP_TABLE = new AbstractAttributeMapper<>(NAME_STACK_MAP_TABLE, Classfile.JAVA_6_VERSION) {\n@@ -756,1 +751,1 @@\n-            SYNTHETIC = new AbstractAttributeMapper<>(NAME_SYNTHETIC, EVERYWHERE) {\n+            SYNTHETIC = new AbstractAttributeMapper<>(NAME_SYNTHETIC) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":36,"deletions":41,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        CLASS_TYPE_PARAMETER(TAT_CLASS_TYPE_PARAMETER, 1, AttributedElement.Kind.CLASS_ONLY),\n+        CLASS_TYPE_PARAMETER(TAT_CLASS_TYPE_PARAMETER, 1),\n@@ -80,1 +80,1 @@\n-        METHOD_TYPE_PARAMETER(TAT_METHOD_TYPE_PARAMETER, 1, AttributedElement.Kind.METHOD_ONLY),\n+        METHOD_TYPE_PARAMETER(TAT_METHOD_TYPE_PARAMETER, 1),\n@@ -83,1 +83,1 @@\n-        CLASS_EXTENDS(TAT_CLASS_EXTENDS, 2, AttributedElement.Kind.CLASS_ONLY),\n+        CLASS_EXTENDS(TAT_CLASS_EXTENDS, 2),\n@@ -86,1 +86,1 @@\n-        CLASS_TYPE_PARAMETER_BOUND(TAT_CLASS_TYPE_PARAMETER_BOUND, 2, AttributedElement.Kind.CLASS_ONLY),\n+        CLASS_TYPE_PARAMETER_BOUND(TAT_CLASS_TYPE_PARAMETER_BOUND, 2),\n@@ -89,1 +89,1 @@\n-        METHOD_TYPE_PARAMETER_BOUND(TAT_METHOD_TYPE_PARAMETER_BOUND, 2, AttributedElement.Kind.METHOD_ONLY),\n+        METHOD_TYPE_PARAMETER_BOUND(TAT_METHOD_TYPE_PARAMETER_BOUND, 2),\n@@ -92,1 +92,1 @@\n-        FIELD(TAT_FIELD, 0, Set.of(AttributedElement.Kind.FIELD, AttributedElement.Kind.RECORD_COMPONENT)),\n+        FIELD(TAT_FIELD, 0),\n@@ -95,1 +95,1 @@\n-        METHOD_RETURN(TAT_METHOD_RETURN, 0, AttributedElement.Kind.METHOD_ONLY),\n+        METHOD_RETURN(TAT_METHOD_RETURN, 0),\n@@ -98,1 +98,1 @@\n-        METHOD_RECEIVER(TAT_METHOD_RECEIVER, 0, AttributedElement.Kind.METHOD_ONLY),\n+        METHOD_RECEIVER(TAT_METHOD_RECEIVER, 0),\n@@ -101,1 +101,1 @@\n-        METHOD_FORMAL_PARAMETER(TAT_METHOD_FORMAL_PARAMETER, 1, AttributedElement.Kind.METHOD_ONLY),\n+        METHOD_FORMAL_PARAMETER(TAT_METHOD_FORMAL_PARAMETER, 1),\n@@ -104,1 +104,1 @@\n-        THROWS(TAT_THROWS, 2, AttributedElement.Kind.METHOD_ONLY),\n+        THROWS(TAT_THROWS, 2),\n@@ -107,1 +107,1 @@\n-        LOCAL_VARIABLE(TAT_LOCAL_VARIABLE, -1, AttributedElement.Kind.CODE_ONLY),\n+        LOCAL_VARIABLE(TAT_LOCAL_VARIABLE, -1),\n@@ -110,1 +110,1 @@\n-        RESOURCE_VARIABLE(TAT_RESOURCE_VARIABLE, -1, AttributedElement.Kind.CODE_ONLY),\n+        RESOURCE_VARIABLE(TAT_RESOURCE_VARIABLE, -1),\n@@ -113,1 +113,1 @@\n-        EXCEPTION_PARAMETER(TAT_EXCEPTION_PARAMETER, 2, AttributedElement.Kind.CODE_ONLY),\n+        EXCEPTION_PARAMETER(TAT_EXCEPTION_PARAMETER, 2),\n@@ -116,1 +116,1 @@\n-        INSTANCEOF(TAT_INSTANCEOF, 2, AttributedElement.Kind.CODE_ONLY),\n+        INSTANCEOF(TAT_INSTANCEOF, 2),\n@@ -119,1 +119,1 @@\n-        NEW(TAT_NEW, 2, AttributedElement.Kind.CODE_ONLY),\n+        NEW(TAT_NEW, 2),\n@@ -122,1 +122,1 @@\n-        CONSTRUCTOR_REFERENCE(TAT_CONSTRUCTOR_REFERENCE, 2, AttributedElement.Kind.CODE_ONLY),\n+        CONSTRUCTOR_REFERENCE(TAT_CONSTRUCTOR_REFERENCE, 2),\n@@ -125,1 +125,1 @@\n-        METHOD_REFERENCE(TAT_METHOD_REFERENCE, 2, AttributedElement.Kind.CODE_ONLY),\n+        METHOD_REFERENCE(TAT_METHOD_REFERENCE, 2),\n@@ -128,1 +128,1 @@\n-        CAST(TAT_CAST, 3, AttributedElement.Kind.CODE_ONLY),\n+        CAST(TAT_CAST, 3),\n@@ -131,1 +131,1 @@\n-        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3, AttributedElement.Kind.CODE_ONLY),\n+        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3),\n@@ -134,1 +134,1 @@\n-        METHOD_INVOCATION_TYPE_ARGUMENT(TAT_METHOD_INVOCATION_TYPE_ARGUMENT, 3, AttributedElement.Kind.CODE_ONLY),\n+        METHOD_INVOCATION_TYPE_ARGUMENT(TAT_METHOD_INVOCATION_TYPE_ARGUMENT, 3),\n@@ -137,1 +137,1 @@\n-        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3, AttributedElement.Kind.CODE_ONLY),\n+        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3),\n@@ -140,1 +140,1 @@\n-        METHOD_REFERENCE_TYPE_ARGUMENT(TAT_METHOD_REFERENCE_TYPE_ARGUMENT, 3, AttributedElement.Kind.CODE_ONLY);\n+        METHOD_REFERENCE_TYPE_ARGUMENT(TAT_METHOD_REFERENCE_TYPE_ARGUMENT, 3);\n@@ -144,1 +144,0 @@\n-        private final Set<AttributedElement.Kind> whereApplicable;\n@@ -146,1 +145,1 @@\n-        private TargetType(int targetTypeValue, int sizeIfFixed, Set<AttributedElement.Kind> whereApplicable) {\n+        private TargetType(int targetTypeValue, int sizeIfFixed) {\n@@ -149,1 +148,0 @@\n-            this.whereApplicable = whereApplicable;\n@@ -159,4 +157,0 @@\n-\n-        Set<AttributedElement.Kind> whereApplicable() {\n-            return whereApplicable;\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":23,"deletions":29,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -60,5 +60,0 @@\n-    @Override\n-    default Kind attributedElementKind() {\n-        return Kind.RECORD_COMPONENT;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RecordComponentInfo.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-    private final Set<AttributedElement.Kind> whereApplicable;\n@@ -49,3 +48,2 @@\n-    public AbstractAttributeMapper(String name,\n-                                   Set<AttributedElement.Kind> whereApplicable) {\n-        this(name, whereApplicable, false);\n+    public AbstractAttributeMapper(String name) {\n+        this(name, false);\n@@ -55,1 +53,0 @@\n-                                   Set<AttributedElement.Kind> whereApplicable,\n@@ -57,1 +54,1 @@\n-        this(name, whereApplicable, allowMultiple, JAVA_1_VERSION);\n+        this(name, allowMultiple, JAVA_1_VERSION);\n@@ -61,1 +58,0 @@\n-                                   Set<AttributedElement.Kind> whereApplicable,\n@@ -63,1 +59,1 @@\n-        this(name, whereApplicable, false, majorVersion);\n+        this(name, false, majorVersion);\n@@ -67,1 +63,0 @@\n-                                   Set<AttributedElement.Kind> whereApplicable,\n@@ -71,1 +66,0 @@\n-        this.whereApplicable = whereApplicable;\n@@ -76,5 +70,0 @@\n-    @Override\n-    public Set<AttributedElement.Kind> whereApplicable() {\n-        return whereApplicable;\n-    }\n-\n@@ -108,2 +97,2 @@\n-        return String.format(\"AttributeMapper[name=%s, allowMultiple=%b, validSince=%d, whereApplicable=%s]\",\n-                name, allowMultiple, majorVersion, whereApplicable);\n+        return String.format(\"AttributeMapper[name=%s, allowMultiple=%b, validSince=%d]\",\n+                name, allowMultiple, majorVersion);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-    private final Kind kind;\n@@ -47,1 +46,1 @@\n-    public AbstractUnboundModel(List<E> elements, Kind kind) {\n+    public AbstractUnboundModel(List<E> elements) {\n@@ -49,6 +48,0 @@\n-        this.kind = kind;\n-    }\n-\n-    @Override\n-    public Kind attributedElementKind() {\n-        return kind;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-            if (mapper != null && (enclosing == null || mapper.whereApplicable().contains(enclosing.attributedElementKind()))) {\n+            if (mapper != null) {\n@@ -149,5 +149,0 @@\n-                    @Override\n-                    public Set<AttributedElement.Kind> whereApplicable() {\n-                        return AttributedElement.Kind.EVERYWHERE;\n-                    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-            super(elements, Kind.CODE_ATTRIBUTE);\n+            super(elements);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-            super(elements, Kind.FIELD);\n+            super(elements);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-            super(elements, Kind.METHOD);\n+            super(elements);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,5 +153,0 @@\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.CLASS;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -196,5 +196,0 @@\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.CODE_ATTRIBUTE;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -98,5 +98,0 @@\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.FIELD;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -112,5 +112,0 @@\n-    @Override\n-    public Kind attributedElementKind() {\n-        return Kind.METHOD;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -165,2 +165,1 @@\n- * jdk.internal.classfile.CustomAttribute}. Custom attributes will be delivered as\n- * elements in all of the contexts specified by {@link jdk.internal.classfile.AttributeMapper#whereApplicable()}.\n+ * jdk.internal.classfile.CustomAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}