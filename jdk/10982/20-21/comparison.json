{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.classfile.impl.ConcreteEntry;\n@@ -214,1 +215,1 @@\n-        thisClassEntry = constantPool.maybeClone(thisClassEntry);\n+        thisClassEntry = ConcreteEntry.maybeClone(constantPool, thisClassEntry);\n@@ -282,2 +283,2 @@\n-                for (var exp : moduleAttribute.exports()) allPackages.add(cp.maybeClone(exp.exportedPackage()));\n-                for (var opn : moduleAttribute.opens()) allPackages.add(cp.maybeClone(opn.openedPackage()));\n+                for (var exp : moduleAttribute.exports()) allPackages.add(ConcreteEntry.maybeClone(cp, exp.exportedPackage()));\n+                for (var opn : moduleAttribute.opens()) allPackages.add(ConcreteEntry.maybeClone(cp, opn.openedPackage()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -533,11 +533,0 @@\n-    \/**\n-     * {@return a constant pool entry describing the same constant as the provided\n-     * entry}  If the entry already corresponds to a constant in this constant\n-     * pool, it is returned, otherwise the contents are copied to this\n-     * constant pool.\n-     *\n-     * @param entry the entry\n-     * @param <T> the type of the entry\n-     *\/\n-    <T extends PoolEntry> T maybeClone(T entry);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,11 +56,0 @@\n-\n-    \/**\n-     * {@return a constant pool entry, with the same contents as this entry,\n-     * compatible with the specified constant pool}  If {@code cp} describes\n-     * the pool this entry is from, or a pool this constant pool has been\n-     * copied from, then {@code this} is returned, otherwise the entry is\n-     * cloned to the specified pool.\n-     *\n-     * @param cp the constant pool with which a compatible entry is desired\n-     *\/\n-    PoolEntry clone(ConstantPoolBuilder cp);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PoolEntry.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.ByteBuffer;\n@@ -32,0 +33,1 @@\n+import jdk.internal.classfile.WritableElement;\n@@ -35,4 +37,0 @@\n-import jdk.internal.classfile.WritableElement;\n-\n-import java.nio.ByteBuffer;\n-\n@@ -179,1 +177,1 @@\n-        int idx = constantPool.maybeClone(entry).index();\n+        int idx = ConcreteEntry.maybeClone(constantPool, entry).index();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,0 +96,5 @@\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends PoolEntry> T maybeClone(ConstantPoolBuilder cp, T entry) {\n+        return (T)((ConcreteEntry)entry).clone(cp);\n+    }\n+\n@@ -124,0 +129,2 @@\n+    abstract PoolEntry clone(ConstantPoolBuilder cp);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ConcreteEntry.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        this.thisClassEntry = constantPool.maybeClone(thisClass);\n+        this.thisClassEntry = ConcreteEntry.maybeClone(constantPool, thisClass);\n@@ -161,1 +161,1 @@\n-            superclass = constantPool.maybeClone(superclass);\n+            superclass = ConcreteEntry.maybeClone(constantPool, superclass);\n@@ -166,1 +166,1 @@\n-            ies.add(constantPool.maybeClone(ce));\n+            ies.add(ConcreteEntry.maybeClone(constantPool, ce));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-        int index = constantPool.maybeClone(value).index();\n+        int index = ConcreteEntry.maybeClone(constantPool, value).index();\n@@ -723,1 +723,1 @@\n-            el = new AbstractPseudoInstruction.ExceptionCatchImpl(element.handler(), element.tryStart(), element.tryEnd(), constantPool.maybeClone(type));\n+            el = new AbstractPseudoInstruction.ExceptionCatchImpl(element.handler(), element.tryStart(), element.tryEnd(), ConcreteEntry.maybeClone(constantPool, type));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -146,8 +146,0 @@\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends PoolEntry> T maybeClone(T entry) {\n-        return canWriteDirect(entry.constantPool())\n-               ? entry\n-               : (T) entry.clone(this);\n-    }\n-\n@@ -594,1 +586,1 @@\n-                    arr[i] = (LoadableConstantEntry) arr[i].clone(this);\n+                    arr[i] = ConcreteEntry.maybeClone(this, arr[i]);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -161,5 +161,0 @@\n-    @Override\n-    public <T extends PoolEntry> T maybeClone(T entry) {\n-        return entry;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}