{"files":[{"patch":"@@ -37,1 +37,1 @@\n-EXCLUDES += jdk\/classfile\/snippets\n+EXCLUDES += jdk\/classfile\/snippet-files\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n- * <p>{@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"codeRelabeling\"}\n+ * <p>{@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"codeRelabeling\"}\n@@ -70,1 +70,1 @@\n- * <p>{@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"classInstrumentation\"}\n+ * <p>{@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"classInstrumentation\"}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/ClassfileTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"printClass\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"printClass\"}\n@@ -48,1 +48,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"customPrint\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"customPrint\"}\n@@ -52,1 +52,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"printNodesInTest\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"printNodesInTest\"}\n@@ -69,1 +69,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"singleClassRemap\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"singleClassRemap\"}\n@@ -73,1 +73,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"allPackageRemap\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"allPackageRemap\"}\n@@ -83,1 +83,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"codeLocalsShifting\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"codeLocalsShifting\"}\n@@ -97,1 +97,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"codeRelabeling\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"codeRelabeling\"}\n@@ -102,1 +102,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"classInstrumentation\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"classInstrumentation\"}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/components\/package-info.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n@@ -73,1 +73,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n@@ -83,1 +83,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"gatherDependencies1\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"gatherDependencies1\"}\n@@ -88,1 +88,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"gatherDependencies2\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"gatherDependencies2\"}\n@@ -211,1 +211,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"helloWorld\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"helloWorld\"}\n@@ -257,1 +257,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"stripDebugMethods1\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"stripDebugMethods1\"}\n@@ -276,1 +276,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"stripDebugMethods2\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"stripDebugMethods2\"}\n@@ -286,1 +286,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"fooToBarTransform\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"fooToBarTransform\"}\n@@ -314,1 +314,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"fooToBarUnrolled\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"fooToBarUnrolled\"}\n@@ -322,1 +322,1 @@\n- * {@snippet class=\"jdk.classfile.snippets.PackageSnippets\" region=\"instrumentCallsTransform\"}\n+ * {@snippet lang=\"java\" class=\"jdk.classfile.snippet-files.PackageSnippets\" region=\"instrumentCallsTransform\"}\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/package-info.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\n-package jdk.classfile.snippets;\n-\n@@ -61,0 +58,1 @@\n+import jdk.classfile.instruction.ReturnInstruction;\n@@ -332,6 +330,6 @@\n-        Map<String, CodeModel> instrumentorCodeMap = instrumentor.methods().stream()\n-                        .filter(instrumentedMethodsFilter)\n-                        .collect(Collectors.toMap(mm -> mm.methodName().stringValue() + mm.methodType().stringValue(), mm -> mm.code().orElse(null)));\n-        Set<String> targetFieldNames = target.fields().stream().map(f -> f.fieldName().stringValue()).collect(Collectors.toSet());\n-        Set<String> targetMethods = target.methods().stream().map(m -> m.methodName().stringValue() + m.methodType().stringValue()).collect(Collectors.toSet());\n-        ClassRemapper instrumentorClassRemapper = ClassRemapper.of(Map.of(instrumentor.thisClass().asSymbol(), target.thisClass().asSymbol()));\n+        var instrumentorCodeMap = instrumentor.methods().stream()\n+                                              .filter(instrumentedMethodsFilter)\n+                                              .collect(Collectors.toMap(mm -> mm.methodName().stringValue() + mm.methodType().stringValue(), mm -> mm.code().orElse(null)));\n+        var targetFieldNames = target.fields().stream().map(f -> f.fieldName().stringValue()).collect(Collectors.toSet());\n+        var targetMethods = target.methods().stream().map(m -> m.methodName().stringValue() + m.methodType().stringValue()).collect(Collectors.toSet());\n+        var instrumentorClassRemapper = ClassRemapper.of(Map.of(instrumentor.thisClass().asSymbol(), target.thisClass().asSymbol()));\n@@ -343,1 +341,1 @@\n-                                MethodModel mm = targetCodeModel.parent().get();\n+                                var mm = targetCodeModel.parent().get();\n@@ -360,2 +358,2 @@\n-                                                for (ClassDesc pt : mm.methodTypeSymbol().parameterList()) {\n-                                                    TypeKind tk = TypeKind.fromDescriptor(pt.descriptorString());\n+                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n+                                                    var tk = TypeKind.fromDescriptor(pt.descriptorString());\n@@ -373,1 +371,1 @@\n-                                                            if (shiftedTargetCode.opcode() == Opcode.Kind.RETURN)\n+                                                            if (shiftedTargetCode instanceof ReturnInstruction)\n","filename":"src\/java.base\/share\/classes\/jdk\/classfile\/snippet-files\/PackageSnippets.java","additions":11,"deletions":13,"binary":false,"changes":24,"previous_filename":"src\/java.base\/share\/classes\/jdk\/classfile\/snippets\/PackageSnippets.java","status":"renamed"}]}