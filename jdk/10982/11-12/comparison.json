{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -50,1 +48,1 @@\n-    public static final ClassHierarchyResolver DEFAULT_CLASS_HIERARCHY_RESOLVER\n+    ClassHierarchyResolver DEFAULT_CLASS_HIERARCHY_RESOLVER\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    public static final CodeTransform ACCEPT_ALL = new CodeTransform() {\n+    CodeTransform ACCEPT_ALL = new CodeTransform() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    public static final FieldTransform ACCEPT_ALL = new FieldTransform() {\n+    FieldTransform ACCEPT_ALL = new FieldTransform() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    public static final MethodTransform ACCEPT_ALL = new MethodTransform() {\n+    MethodTransform ACCEPT_ALL = new MethodTransform() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -577,2 +577,0 @@\n-     * type_path.path.\n-     *\n@@ -617,3 +615,3 @@\n-        public static final TypePathComponent ARRAY = new UnboundAttribute.TypePathComponentImpl(Kind.ARRAY, 0);\n-        public static final TypePathComponent INNER_TYPE = new UnboundAttribute.TypePathComponentImpl(Kind.INNER_TYPE, 0);\n-        public static final TypePathComponent WILDCARD = new UnboundAttribute.TypePathComponentImpl(Kind.WILDCARD, 0);\n+        TypePathComponent ARRAY = new UnboundAttribute.TypePathComponentImpl(Kind.ARRAY, 0);\n+        TypePathComponent INNER_TYPE = new UnboundAttribute.TypePathComponentImpl(Kind.INNER_TYPE, 0);\n+        TypePathComponent WILDCARD = new UnboundAttribute.TypePathComponentImpl(Kind.WILDCARD, 0);\n@@ -623,1 +621,1 @@\n-         * THe type path kind items from JVMS Table 4.7.20.2-A.\n+         * The type path kind items from JVMS Table 4.7.20.2-A.\n@@ -641,1 +639,1 @@\n-        static TypePathComponent of(int typePathKind, int typeArgumentIndex) {\n+        static TypePathComponent of(Kind typePathKind, int typeArgumentIndex) {\n@@ -644,5 +642,4 @@\n-                case 0 -> ARRAY;\n-                case 1 -> INNER_TYPE;\n-                case 2 -> WILDCARD;\n-                case 3 -> new UnboundAttribute.TypePathComponentImpl(Kind.TYPE_ARGUMENT, typeArgumentIndex);\n-                default -> throw new IllegalArgumentException(\"Unknown type annotation path component kind: \" + typePathKind);\n+                case ARRAY -> ARRAY;\n+                case INNER_TYPE -> INNER_TYPE;\n+                case WILDCARD -> WILDCARD;\n+                case TYPE_ARGUMENT -> new UnboundAttribute.TypePathComponentImpl(Kind.TYPE_ARGUMENT, typeArgumentIndex);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * Parse the siganture as a method signature.\n+     * Parse the signature as a method signature.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SignatureAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,1 +231,9 @@\n-            typePath[i] = TypeAnnotation.TypePathComponent.of(classReader.readU1(p++), classReader.readU1(p++));\n+            int typePathKindTag = classReader.readU1(p++);\n+            int typeArgumentIndex = classReader.readU1(p++);\n+            typePath[i] = switch (typePathKindTag) {\n+                case 0 -> TypeAnnotation.TypePathComponent.ARRAY;\n+                case 1 -> TypeAnnotation.TypePathComponent.INNER_TYPE;\n+                case 2 -> TypeAnnotation.TypePathComponent.WILDCARD;\n+                case 3 -> new UnboundAttribute.TypePathComponentImpl(TypeAnnotation.TypePathComponent.Kind.TYPE_ARGUMENT, typeArgumentIndex);\n+                default -> throw new IllegalArgumentException(\"Unknown type annotation path component kind: \" + typePathKindTag);\n+            };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * ClassModel cm = ClassModel.of(bytes);\n+ * ClassModel cm = Classfile.parse(bytes);\n@@ -296,1 +296,1 @@\n- * byte[] newBytes = ClassModel.of(bytes).transform(ct);\n+ * byte[] newBytes = Classfile.parse(bytes).transform(ct);\n@@ -314,1 +314,1 @@\n- * byte[] newBytes = ClassModel.of(bytes)\n+ * byte[] newBytes = Classfile.parse(bytes)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -558,1 +558,1 @@\n-                        ta.targetPath().stream().map(tpc -> TypeAnnotation.TypePathComponent.of(tpc.typePathKind().tag(), tpc.typeArgumentIndex())).toList(),\n+                        ta.targetPath().stream().map(tpc -> TypeAnnotation.TypePathComponent.of(tpc.typePathKind(), tpc.typeArgumentIndex())).toList(),\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}